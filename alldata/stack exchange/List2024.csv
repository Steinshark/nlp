Post Id,Parent Id,Body,Score,PostType
"77743989","","<p>I am trying to write code that will repeat for x values from one list, y values from another list, and z values from the last list. The list values would be from user input in a previous line of code. I want to concatenate these values into a single print statement.</p>
<p>The list values would be from user input in a previous line of code.</p>
<p>This is the original code:</p>
<pre><code>NCACost = [123,234,345]
NCADepr = [23,34,45]
NCANBV = [100,200,300]
for x in NCACost:
    for y in NCADepr:
        for z in NCANBV:
            print(str(x) + ' - end=')
            print(str(y) + ' = end=')
            print(str(z))
</code></pre>
<p>What I wanted:</p>
<pre><code>123 - 23 = 100
234 - 34 = 200
345 - 45 = 300
</code></pre>
","-2","Question"
"77747948","","<p>I want to create a class <code>Ball</code>, and make a list of objects generated by user for that class. I will then reference this list in <code>run()</code> to draw user generated objects in <code>pygame</code>. My problems are as follows:</p>
<p>When I try to reference <code>Ball(a, v, r...)</code> it says <code>Ball</code> is referenced before my definition. Any help is appreciated!</p>
<p>HERE IS FULL ERROR:</p>
<pre><code>File &quot;/Users/.../Desktop/.../python/promot.py&quot;, line 66, in run
    balls.append(Ball(a, v, r, c, x_pos, y_pos)) #here i get error
                 ^^^^
UnboundLocalError: cannot access local variable 'Ball' where it is not associated with a value
</code></pre>
<pre><code>import pygame
import math
 
pygame.init()
 
#screen
framespd = 30 #what is frame speed for gravity = 9.81
gravity = 1
t = 0.01
clock = pygame.time.Clock()
width, height = 1000, 1000
pygame.display.set_caption(&quot;Orbit Take 1&quot;)
screen = pygame.display.set_mode([width, height])
 
class Ball:
    def __init__(self, angle, velocity, radius, color, x_pos, y_pos):
        self.angle = angle
        self.velocity = velocity
        self.radius = radius
        self.color = color
        self.x_pos = x_pos
        self.y_pos = y_pos
 
    def draw(self):
        self.circle = pygame.draw.circle(screen, self.color, (self.x_pos, self.y_pos), self.radius)
 
    def true_velocity_x(self):
        true_velocity_x = self.velocity * math.cos(self.angle)
 
    def true_velocity_y(self):
        true_velocity_y = self.velocity * math.sin(self.angle)
        new_velocity_y = true_velocity_y + (gravity * t)
 
    #def update position(self):
        #x pos = x velocity
        #y pos += y velocity
 
balls = [] 
 
def run():
    value = True
    while value:
        clock.tick(framespd)
 
        # Balls in sim
 
        number_balls = int(input(&quot;How many balls: &quot;))
 
        while len(balls) &lt; number_balls:
            # Variables for Ball
            a = input(&quot;Angle: &quot;)
            v = input(&quot;Velocity: &quot;)
            r = input(&quot;Radius: &quot;)
            c = input(&quot;Color: &quot;)
            x_pos = '0'
            y_pos = '500'
            balls.append(Ball(a, v, r, c, x_pos, y_pos)) #here i get error &quot;local variable &quot;Ball&quot; defined in enclosing scope on line 24 referenced before assignment&quot;
 
        screen.fill('black')    
 
        #draw ball
        for Ball in balls:
            Ball.draw(pygame.display.set_mode((width, height)))
        #update position
 
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                value = False
            pygame.display.flip()
    pygame.quit()       
 
run()
</code></pre>
<p>My first attempt is referenced in bold as &quot;something else I tried&quot;, but I am having trouble using classes outside of their initialization with out errors. My next attempt was &quot;current attempt&quot; which does not show anything when I run.</p>
","0","Question"
"77749004","","<p>I need to set the type of a set of arrays to be of the type <code>np.ndarray</code> each one. Since I need to do it multiple times, I'm trying a <code>for</code> loop, it seems to be correctly converting from <code>list</code> to <code>np.ndarray</code> when executing the loop, but once it ends, each of the arrays are still of <code>list</code> type, this block below helped me to realize that it is happening, but I have no idea why it is happening</p>
<p>So, why is this happening? and how to fix it? Thanks in advance</p>
<pre><code>import numpy as np

pos = [1,1,1]
vel = [1,1,2]
# vel = np.array([1,1,2])
accel = [1,1,3]

print('\nredefining...')
for elem in [pos,vel,accel]:
    # checks if the array is of the np.ndarray class
    print(type(elem))
    if not isinstance(elem, np.ndarray):
        elem = np.array(elem)
        print(type(elem))
    print('---------------------------')

print('\nafter the redefinition:')

print(type(pos))
print(type(vel))
print(type(accel))
</code></pre>
<p>output:</p>
<pre><code>redefining...
&lt;class 'list'&gt;
&lt;class 'numpy.ndarray'&gt;
---------------------------
&lt;class 'list'&gt;
&lt;class 'numpy.ndarray'&gt;
---------------------------
&lt;class 'list'&gt;
&lt;class 'numpy.ndarray'&gt;
---------------------------

after the redefinition:
&lt;class 'list'&gt;
&lt;class 'list'&gt;
&lt;class 'list'&gt;
</code></pre>
","0","Question"
"77751307","","<p>I have the following DataFrame</p>
<pre><code>import polars as pl

data = {
    'col': [[11, 21, 31, 41, 51], [12, 22, 32, 42, 52], [13, 23, 33, 43, 53]]
}
df = pl.DataFrame(data)

shape: (3, 1)
┌────────────────┐
│ col            │
│ ---            │
│ list[i64]      │
╞════════════════╡
│ [11, 21, … 51] │
│ [12, 22, … 52] │
│ [13, 23, … 53] │
└────────────────┘
</code></pre>
<p>Starting from the first element of each list, I want to divide every two elements of the list with a number, and then starting from the second element of the list, divide again every two elements with another number. For example, if these two numbers are 5 and 10 respectively, the first list will be transformed like this</p>
<pre><code>[11/5, 21/10, 31/5, 41/10, 51/5]
</code></pre>
<p>resulting in</p>
<pre><code>[2.2, 2.1, 6.2, 4.1, 10.2]
</code></pre>
<p>I want to do the same transformation for all the lists of the column. How can I do that using the polars API?</p>
","3","Question"
"77752326","","<p>I have a dataset that contains lists for values in two columns, and I want to be able to compare the lists with each other, for each row. For example, I have 3 groups, in which certain numbers are expected, and other numbers are observed. I want to compare the Observed column with the Expected column to see which numbers were expected, but not observed.</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Group</th>
<th>Expected</th>
<th>Observed</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>4:8</td>
<td>c(4, 5, 7)</td>
</tr>
<tr>
<td>B</td>
<td>7:12</td>
<td>c(7, 8, 9, 10, 12)</td>
</tr>
<tr>
<td>C</td>
<td>6:10</td>
<td>c(6, 8, 10)</td>
</tr>
</tbody>
</table>
</div>
<p>I want an extra column called Missing, that contains all the values that are in Expected, but not Observed.</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Group</th>
<th>Expected</th>
<th>Observed</th>
<th>Missing</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>4:8</td>
<td>c(4, 5, 7)</td>
<td>c(6, 8)</td>
</tr>
<tr>
<td>B</td>
<td>7:12</td>
<td>c(7, 8, 9, 10, 12)</td>
<td>11</td>
</tr>
<tr>
<td>C</td>
<td>6:11</td>
<td>c(6, 8, 11)</td>
<td>c(7, 9, 10)</td>
</tr>
</tbody>
</table>
</div>
<p>I have tried to use setdiff() and base R, as it can find the differing values between two lists. However, I cannot get it to work in the way that it compares the lists per row.</p>
<pre><code>df$Missing &lt;- setdiff(df$Expected, df$Observed) 

df$Missing &lt;- df$Expected[!(df$Expected %in% df$Observed)]
</code></pre>
<p>Both these options result in the full list of Expected. This is the output that I get:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Group</th>
<th>Expected</th>
<th>Observed</th>
<th>Missing</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>4:8</td>
<td>c(4, 5, 7)</td>
<td>4:8</td>
</tr>
<tr>
<td>B</td>
<td>7:12</td>
<td>c(7, 8, 9, 10, 12)</td>
<td>7:12</td>
</tr>
<tr>
<td>C</td>
<td>6:11</td>
<td>c(6, 8, 11)</td>
<td>6:11</td>
</tr>
</tbody>
</table>
</div>
<p>Is there any way that I can compare the two lists (Observed vs. Expected) per group, so I can see which values are missing per group? Thank you in advance for any help!</p>
","4","Question"
"77761069","","<p>I am trying to plot the result of truck routing optimization using networkx library. First I must prepare the data and I am stuck.</p>
<p>Here is small example of the initial data:</p>
<pre><code>Vehicle       Route  
0       V0   [0,3](V0) 
1       V0   [3,0](V0)  
2       V1   [0,3](V1) 
3       V1   [0,8](V1) 
4       V1   [2,0](V1) 
5       V1   [3,2](V1) 
6       V1   [8,0](V1) 
</code></pre>
<p>There are two trucks: V0 and V1. The route for V0 is: 0 to 3 to 0. But V1 has TWO routes: 0 to 8 to 0 AND 0 to 3 to 2 to 0.</p>
<p>Every tour must start and end at node 0.</p>
<p>I must solve two issues:</p>
<ol>
<li>For each truck (V0, V1) I must find all the tours within a given list that starts and end with zero</li>
<li>The flow of tours can not have breaks: the end of each sub-tour [0,8] must be the beginning of the next one [8,0]</li>
</ol>
<p>the final result must look:</p>
<pre><code>{'V0': [0,3,0], 'V1': [[0,3,2,0], [0,8,0]]}
</code></pre>
<p>I have a code but it does not produce what I want:</p>
<pre><code>tours = {'V0': ['0,3', '3,0'], 'V1': ['0,3', '0,8', '2,0', '3,2', '8,0']}


def convert_to_list(s):
    return list(map(int, s.split(',')))

# Function to process each value in the 'tours' dictionary
def process_value(value):
    result = []
    current_list = []

    for pair in value:
        pair_list = convert_to_list(pair)

        if not current_list or pair_list[0] == 0:
            current_list.extend(pair_list)
        elif pair_list[1] == 0:
            current_list.append(pair_list[0])
            current_list.append(0)
            result.append(current_list)
            current_list = [0]
        else:
            current_list.append(pair_list[0])

    if current_list:
        current_list.append(0)
        result.append(current_list)

    return result

# Create the 'tours1' dictionary using the processing functions
tours1 = {key: process_value(value) for key, value in tours.items()}

# Print the result
print(tours1)
</code></pre>
<p>OUTPUT:</p>
<pre><code>{'V0': [[0, 3, 3, 0], [0, 0]], 'V1': [[0, 3, 0, 8, 2, 0], [0, 3, 8, 0], [0, 0]]}
</code></pre>
<p>Any ideas?</p>
<p>Thank you!</p>
","0","Question"
"77761829","","<p>someone please show me how to access key value pairs of this sort. I want to access the &quot;category&quot;, &quot;question&quot;, &quot;correct answer&quot;, &quot;incorrect answer&quot;. I could remove the &quot;response code&quot; and &quot;results&quot; and only work with the nested dict within a list, but I wanted to try without manipulating the data. I know a for loop will be used.</p>
<pre><code>question_data = {&quot;response_code&quot;: 0,
                 &quot;results&quot;: [
                     {&quot;type&quot;: &quot;multiple&quot;,
                      &quot;difficulty&quot;: &quot;medium&quot;,
                      &quot;category&quot;: &quot;Entertainment: Film&quot;,
                      &quot;question&quot;: &quot;Sign of death.&quot;,
                      &quot;correct_answer&quot;: &quot;Red Shirt&quot;,
                      &quot;incorrect_answers&quot;: [&quot;Minions&quot;, &quot;Expendables&quot;, &quot;Cannon Fodder&quot;]
                      }
                      ]
                        
</code></pre>
","-1","Question"
"77761903","","<p>I have one dictionary with keys and a list as a value. I want to create a new dictionary which will store the KEY of my_dict but as a value the count of letters that correlate with my_list. If KEY 'A' has 'A', 'B' then I want to count if I find the amount of 'A' or 'B' in my_list.</p>
<p>Also I would like to know how to do it in vanilla Python using nested for loops because I've seen people use:</p>
<pre><code>new_dict = [my_dict[x] for x in my_list if x in my_dict]
</code></pre>
<p>Which I don't really understand fully. I hope I expressed myself correctly.</p>
<pre><code>my_dict = {'A': ['A', 'B'], 'B': ['C', 'D'], 'C': ['E', 'F']}
my_list = ['A', 'D', 'A', 'C', 'F', 'F']
new_dict = {}
</code></pre>
<p>**Output:
**</p>
<pre><code>{'A': 2, 'B': 2, 'C': 2} 
</code></pre>
<p>Since key 'A' had as a value 'A', 'B' there was only two A's in my_list but no B's so the count is 2 and that's the value in case of confusion.</p>
<pre><code>new_dict = [my_dict[x] for x in my_list if x in my_dict]
</code></pre>
<p>And I tried to nested for loops but I struggle with nested for loops</p>
","0","Question"
"77767348","","<p>I have a tibble, in which 1 character column contains a string I want to parse. I want to store results of the parsing in a new list column, with no duplicates in each row.</p>
<p>The tibble is created by the following code:</p>
<pre><code>my_tibble &lt;- input_data_tibble |&gt;
  group_by(tissue) |&gt;
  summarize(id = str_flatten(id, &quot;,&quot;))
</code></pre>
<p>The output I get looks like this - notice id type is chr:</p>
<pre><code>my_tibble_bad &lt;- tibble(
  tissue = c(&quot;Duodenum&quot;, &quot;Ileum&quot;),
  id = c(&quot;1, 2, 5, 5&quot;, &quot;17, 17, 10, 10, 20, 20&quot;)
)
my_tibble_bad

</code></pre>
<p>The output I want looks like this</p>
<ul>
<li>notice id is a list column, each list contains numbers, there are no duplicates):</li>
</ul>
<pre><code>my_tibble_good &lt;- tibble(
  tissue = c(&quot;Duodenum&quot;, &quot;Ileum&quot;),
  id = list(c(1, 5), c(17, 10, 20))
  )
my_tibble_good
</code></pre>
<p>Does anyone know how I can get the result I want either by editing the original code, or by editing the output of the original code</p>
<p>I've tried a few options, and the best I can arrive at looks like this</p>
<pre><code>test_string = &quot;1, 1, 5, 5&quot;
unique(as.numeric(gsub(&quot;\\D&quot;, &quot;&quot;, unlist(strsplit(test_string, &quot;,&quot;)))))
</code></pre>
<p>However, when I try to build this in to the code I get as far as:</p>
<pre><code>my_tibble_bad |&gt;
  mutate(x = strsplit(id, &quot;,&quot;)) |&gt;
  select(!id)
</code></pre>
<p>Once I add unlist, I get the error &quot;<code>x</code> must be size 2 or 1, not 10.&quot;:</p>
<p><code>my_tibble_bad |&gt; mutate(x = unlist(strsplit(id, &quot;,&quot;))) |&gt; select(!id) </code></p>
","0","Question"
"77768248","","<pre><code>word = input(&quot;Tell me the word you wish to check for diphthongs: &quot;)
total = 0
diphthongs = ['ue', 'ie', 'ae', 'ee', 'oe', 'ui', 'ii', 'ai', 'ei', 'oi', 'ua', 'ia', 'aa', 'ea', 'oa', 'uo', 'io',
                  'ao', 'eo', 'oo', 'uu', 'iu', 'au', 'eu', 'ou']
stripped = word.strip('abcdfghjklmnpqrstvwxyz')
for letter in diphthongs:
    if letter in stripped:
        total += 1
print(&quot;There are&quot;, total, &quot;diphthongs in the string&quot;)
</code></pre>
<p><strong>It can count 1 diphthong, but doesn't recognize the same diphthong twice, like c[ou]rth[ou]se, I also need to make it not recognize qu when searching for diphthongs</strong>
Please and thank you?</p>
<p>I have tried splitting the diphthongs into regular vowels, I have tried range and len functions, but none seem to make it any easier, and the best results have come from what I have used so far.</p>
","1","Question"
"77772407","","<p>I make a list named scramble.
This list is created by randomly adding the values of 2 lists (move1 and move2)</p>
<p>When I print the list, the answer are surrounded by &quot; &quot; or ''.</p>
<p>exemple :</p>
<pre><code>scramble = ['U', 'F2', 'B', 'R2', &quot;U'&quot;, 'R', &quot;R'&quot;, 'D', 'L2', 'B2', &quot;U'&quot;, 'R2', &quot;R'&quot;, 'F', &quot;D'&quot;]
</code></pre>
<p>my code:</p>
<pre><code>import random as rd

scramble = []
move1 = [&quot;F&quot;,&quot;R&quot;,&quot;L&quot;,&quot;U&quot;,&quot;B&quot;,&quot;D&quot;]
move2 = [&quot;&quot;,&quot;'&quot;,&quot;2&quot;]

while len(scramble) &lt; 15:
    s = move1[rd.randint(0, 5)]
    t = move2[rd.randint(0, 2)]
   
    scramble.append(s+t) 
</code></pre>
<p>I really want to understand why it happens.</p>
<p>and then, correct it.</p>
<p>I suppose that they are several ways to clean the &quot;&quot; and '' after the list is created.
But :</p>
<ol>
<li>I found that this solution is not optimal.</li>
<li>I also want that the &quot;move1&quot; is not repeated with the last one.
I was planning to work with .startwith but my problem is that ti's sometimes starts with &quot; and sometimes with '.</li>
</ol>
","-1","Question"
"77772560","","<p>I have several dictionary with equal keys. The values of the key are list. Now I would merge the values lists like.</p>
<p>Input, e.g.:</p>
<pre><code>dict_1 ={&quot;a&quot;:[&quot;1&quot;], &quot;b&quot;:[&quot;3&quot;]}
dict_2 = {&quot;a&quot;:[&quot;2&quot;], &quot;b&quot;:[&quot;3&quot;]}
</code></pre>
<p>Required output:</p>
<pre><code>new_dict = {'a':[&quot;1&quot;,&quot;2&quot;], 'b':[&quot;3&quot;,&quot;3&quot;]}
</code></pre>
<p>What is the fastest, pythonic way to get this result?</p>
<p>I found this, but this doesn’t fulfill my needs:</p>
<pre><code>merged_dic = {**dict_1, **dict_2}
</code></pre>
<p>and others, but nothing solve my wish.
Is there a built in function without loop over each element, because I have a lot of dictionaries and more complex as my example above?
Thanks for any help!</p>
","2","Question"
"77778445","","<p>I have 3 lists:</p>
<p><strong>filtered_headings = ['Educational Institutions', 'Number of students', 'Number of teaching staffs', 'Number of non- teaching staffs']</strong></p>
<p><strong>sub_headings = ['College/University', 'Basic Level', 'Secondary Level', 'Secondary Level', 'College/University', 'Basic Level', 'Secondary Level', 'College/University', 'Basic Level', 'Basic Level', 'College/University', 'Secondary Level']</strong></p>
<p><strong>values = ['2', '10', '12', '566', '400', '799', '355', '115', '12', '115', '11', '11']</strong></p>
<p>I want them converted into JSON in this format:</p>
<pre><code>{
 &quot;Educational Institutions&quot;: {
  &quot;College/University&quot;: &quot;2&quot;,
  &quot;Basic Level&quot;: &quot;10&quot;,
  &quot;Secondary Level&quot;: &quot;12&quot;
 },
 &quot;Number of students&quot;: {
  &quot;Secondary Level&quot;: &quot;566&quot;,
  &quot;College/University&quot;: &quot;400&quot;,
  &quot;Basic level&quot;: &quot;799&quot;
 },
 &quot;Number of teaching staffs&quot;: {
  &quot;Secondary Level&quot;: &quot;355&quot;,
  &quot;College/University&quot;: &quot;115&quot;,
  &quot;Basic Level&quot;: &quot;12&quot;
 },
 &quot;Number of non- teaching staffs&quot;: {
  &quot;Basic Level&quot;: &quot;115&quot;,
  &quot;College/University&quot;: &quot;11&quot;,
  &quot;Secondary Level&quot;: &quot;11&quot;
 }
}
</code></pre>
<p>I get the following output:</p>
<pre><code>{
 &quot;Educational Institutions&quot;: {
  &quot;College/University&quot;: &quot;11&quot;,
  &quot;Basic Level&quot;: &quot;115&quot;,
  &quot;Secondary Level&quot;: &quot;11&quot;
 },
 &quot;Number of students&quot;: {
  &quot;College/University&quot;: &quot;11&quot;,
  &quot;Basic Level&quot;: &quot;115&quot;,
  &quot;Secondary Level&quot;: &quot;11&quot;
 },
 &quot;Number of teaching staffs&quot;: {
  &quot;College/University&quot;: &quot;11&quot;,
  &quot;Basic Level&quot;: &quot;115&quot;,
  &quot;Secondary Level&quot;: &quot;11&quot;
 },
 &quot;Number of non- teaching staffs&quot;: {
  &quot;College/University&quot;: &quot;11&quot;,
  &quot;Basic Level&quot;: &quot;115&quot;,
  &quot;Secondary Level&quot;: &quot;11&quot;
 }
}
</code></pre>
<p>It is repeating the last 3 values over and over again, how do i get the output in intend format?</p>
<p>My code is:</p>
<pre><code>result = {}
for indv_heading in filtered_headings:
    data_dict = {sub_heading: value for sub_heading,
                 value in zip(sub_headings, values)}
    result[indv_heading] = data_dict
# print(result)
json_data = json.dumps(result, indent=1)
print(json_data)
</code></pre>
","0","Question"
"77780873","","<p>Is there an elegant Pythonic way to perform something like <code>rstrip()</code> on a list?</p>
<p>Imagine, I have different lists:</p>
<pre><code>l1 = ['A', 'D', 'D']
l2 = ['A', 'D']
l3 = ['D', 'A', 'D', 'D']
l4 = ['A', 'D', 'B', 'D']
</code></pre>
<p>I need a function that will remove <em>all end-standing</em> <code>'D'</code> elements from a given list (but not those that come before or in between other elements!).</p>
<pre><code>for mylist in [l1, l2, l3, l4]:
    print(mylist, ' =&gt; ', remove_end_elements(mylist, 'D'))
</code></pre>
<p>So the desired output would be:</p>
<pre><code>['A', 'D', 'D'] =&gt; ['A']
['A', 'D'] =&gt; ['A']
['D', 'A', 'D', 'D'] =&gt; ['D', 'A']
['A', 'D', 'B', 'D'] =&gt; ['A','D','B']
</code></pre>
<p>One implementation that does the job is this:</p>
<pre><code>def remove_end_elements(mylist, myelement):
    counter = 0
    for element in mylist[::-1]:
        if element != myelement:
            break
        counter -= 1

    return mylist[:counter]
</code></pre>
<p>Is there a more elegant / efficient way to do it?</p>
<p>To answer comment-questions:</p>
<ul>
<li>Either a new list or modifying the original list is fine (although the above implementation has creating a new list in mind).</li>
<li>The real lists contain multi-character-strings (lines from a text file).</li>
<li>What I'm actually trying to strip away are lines that fulfill certain criteria for &quot;empty&quot; (no characters OR only whitespace OR only whitespace and commas). I have that check implemented elsewhere.</li>
<li>These empty lines can be an arbitrary number at the end of the list, but in most cases will be 1.</li>
</ul>
<hr />
<p>I timed the different solutions offered so far, with simulated data close to my actual use case, and the actual is_empty_line() function that I'm using:</p>
<ul>
<li><a href=""https://stackoverflow.com/a/77786049/1413513"">Kelly Bundy's solution</a>: 0.029670200019609183</li>
<li><a href=""https://stackoverflow.com/a/77781070/1413513"">Guy's solution</a>: 0.038380099984351546</li>
<li>my original solution: 0.03837349999230355</li>
<li><a href=""https://stackoverflow.com/a/77785322/1413513"">cards' solution</a>: 0.0408437000005506</li>
<li><a href=""https://stackoverflow.com/a/77781188/1413513"">Timeless' solution</a>: 0.08083210000768304</li>
</ul>
<p>Which one performs better does seem to depend on the complexity of the <code>is_empty_line()</code> function (except for Timeless' solution, which is consistently slower than everything else, and KellyBundy's solution, which is consistently faster).</p>
","5","Question"
"77786286","","<p>in flutter i have a listView that gets it's item from a list and the list is downloded from the internet, whenever a new item added to the list i have an event that tells the app a new item added, and for that i use notifyListners() to refresh the list view to display the new item,
my problem with this method is that sometimes there are big sized items in the list and refreshing all of them the moment a new item comes it really slows down the app and it's such a bad user experience, what i want to do is get the list one time and only notify the app about the new item</p>
<p><a href=""https://i.sstatic.net/pxYm5.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/pxYm5.png"" alt=""enter image description here"" /></a></p>
","-1","Question"
"77788635","","<p>I have a list and I want to remove the elements that have an odd length:</p>
<pre><code>my_list &lt;- list()
my_list$a &lt;- c(1,2,3,4) #length 4
my_list$b &lt;- c(1,2,3) # length 3
my_list$c &lt;- c(5,6,7,8,6,7) #length 6
</code></pre>
<p>So in the above example, I want to remove  <code>my_list$b</code>   because its length is 3 and 3 is odd.</p>
<p>Any suggestions?</p>
","2","Question"
"77788710","","<p>The program checks the kinship of horses.  I don't need to iterate through all possible combinations of rows from an existing table (a list of horse id numbers).</p>
<ol>
<li>A child cannot be his own parent.</li>
<li>If for a given child, two id-horses from the list have already been indicated as Parent1/2, there is no need to repeat this combination and swap parents 1/2</li>
</ol>
<p>In a program, extra combinations of id-horses significantly increase the program execution time. I need to reduce the number of combinations to a minimum</p>
<p>I must provide all the rows in the option: child and parents as input to the (def search_for_parents).
Here is an example table:</p>
<pre><code>df = [10, 11, 12, 13]  
</code></pre>
<p>Here is the required result of possible combinations obtained from the list:</p>
<pre class=""lang-none prettyprint-override""><code>№Comb; child; parent1; parent2;  
0;     10;     11;       12;  
1;     10;     11;       13;  
2;     10;     12;       13;  
3;     11;     10;       12;  
4;     11;     10;       13;  
5;     11;     12;       13;  
...  
9;     13;     10;       11;  
10;    13;     10;       12;  
11;    13;     11;       12;  
</code></pre>
<p>My code:</p>
<pre><code>    for child in range(len(df)):
        for parent1 in range(len(df)):
            for parent2 range(len(df)):
                if child != parent1 and child != parent2:
                    if  parent1 != parent2:
                            answ = search_for_parents(child, parent1, parent2)

</code></pre>
<p>but the current data enumeration code makes it so that the same data is received as input twice.
How can I optimize the code that takes data from a table?</p>
","1","Question"
"77789289","","<p>I have this code:</p>
<pre><code>test_dict = {'aaa' : [1, 2], 'bbb' : [4, 5], 'ccc' : [7, 8]}
lis = [11, 22, 44, 55, 77, 88]
</code></pre>
<p>I am trying to iteratively update <code>test_dict</code> to become:</p>
<pre><code>test_dict = {'aaa' : [11, 22], 'bbb' : [44, 55], 'ccc' : [77, 88]}
</code></pre>
<p>The closest I've come to finding a solution is at:
<a href=""https://www.geeksforgeeks.org/python-iterate-through-value-lists-dictionary/"" rel=""nofollow noreferrer"">https://www.geeksforgeeks.org/python-iterate-through-value-lists-dictionary/</a>
(Method #1)
but I'm not sure where to break up that right side of the <code>res</code> variable to update <code>test_dict</code>.</p>
","0","Question"
"77789827","","<p>I have a dataframe named df that has an ID column with several rows. I am reading in a file and want to quickly check if any of the IDs in the ID column of my dataframe are in the file contents. Below is what I'm currently doing. It works but I am sure there is a more efficient method for checking whether any row in a dataframe column exists in a file.</p>
<pre><code>    # Read in and store file contents
    file = open('myfile.txt', 'r')
    contents = file.read()

    # Loop through each ID in the ID column and look for it in the file
    for id in df['ID']:
        if id in contents:
            print(f&quot;found {id}&quot;)
</code></pre>
","0","Question"
"77789904","","<p>I have a list like this</p>
<pre><code>        {
            &quot;user_email&quot;: &quot;fakemail@icloud.com&quot;,
            &quot;duration&quot;: 320
        },
        {
            &quot;user_email&quot;: &quot;badmail@gmail.com&quot;,
            &quot;duration&quot;: 167,
        },
                {
            &quot;user_email&quot;: &quot;fakemail@icloud.com&quot;,
            &quot;duration&quot;: 450
        }
</code></pre>
<p>and I need to build a new list groupig by user_mail and sum the duration</p>
<p>I need to obtain a list like this</p>
<pre><code>        {
            &quot;user_email&quot;: &quot;badmail@gmail.com&quot;,
            &quot;duration&quot;: 167,
        },
                {
            &quot;user_email&quot;: &quot;fakemail@icloud.com&quot;,
            &quot;duration&quot;: 770
        }
</code></pre>
","1","Question"
"77795709","","<p>Solving a task (&quot;kata&quot;) from codewars.
Сoncise and simplified description based on how I solved the problem:</p>
<blockquote>
<p>Given two lists that contains results of the game for two teams <code>x</code>
and <code>y</code> (10 matches always).</p>
<p>For example:</p>
<ul>
<li><code>x = [1, 2, 3, 4, 2, 1, 1, 2, 2, 3]</code></li>
<li><code>y = [0, 0, 0, 0, 1, 3, 4, 3, 4, 4]</code></li>
</ul>
<p>Points are awarded for each match as follows:</p>
<ul>
<li>if x &gt; y: 3 points (win)</li>
<li>if x &lt; y: 0 points (loss)</li>
<li>if x = y: 1 point (tie)</li>
</ul>
<p>Write a function that returns the number of points team (x) got in the
championship by the rules given above.</p>
</blockquote>
<p>I wrote the code in two ways.</p>
<p>The first one (using the zip function) - <strong>worked</strong>.
The second (using <em>for loop</em>) - <strong>no.</strong> (simple comparing operation does not work properly and I can's figured why!). The code is very simple (see below, but the calculation is not happening correctly!).</p>
<p>I.e. <code>sum_x[4] == 2</code> and <code>sum_y[4] == 1</code> and <strong>result should be equal '3'</strong> (x &gt; y =&gt; 3), <strong>but it get '1' - WHY?!</strong></p>
<p>There is the code for 2 ways of how task was solved:</p>
<p><strong>1 (worked):</strong></p>
<pre><code>sum_x = [1, 2, 3, 4, 2, 1, 1, 2, 2, 3]
sum_y = [0, 0, 0, 0, 1, 3, 4, 3, 4, 4]
    
def sum_xy():
    x = []

    for k, l in zip(sum_x, sum_y):
        if k &gt; l:
            x.append(3)
        elif k &lt; l:
            x.append(0)
        else:
            x.append(1)
                
    
    return x, sum(x)
</code></pre>
<p><strong>OUTPUT</strong>: <code>([3, 3, 3, 3, **3**, 0, 0, 0, 0, 0], 15)</code></p>
<p><strong>2 (does't work!):</strong></p>
<pre><code>sum_x = [1, 2, 3, 4, 2, 1, 1, 2, 2, 3]
sum_y = [0, 0, 0, 0, 1, 3, 4, 3, 4, 4]
    
def sum_xy():
    x = []

    for k in sum_x:
        for l in sum_y:
            if k &gt; l:
                x.append(3)
            elif k &lt; l:
                x.append(0)
            else:
                x.append(1)


        return x, sum(x)
</code></pre>
<p><strong>OUTPUT</strong>: <code>([3, 3, 3, 3, **1**, 0, 0, 0, 0, 0], 13)</code></p>
<p>Why there is <code>1</code> when it should be <code>3</code>? - That's my question.</p>
","0","Question"
"77800539","","<p>Apologies if this question has already been answered, but none of my searches returned what I'm looking for.</p>
<p>What I need is a method to sort a list of strings, but the sorting needs to be done by a substring (contains) of the string in the list.</p>
<p>For example:</p>
<pre><code>R10.14_R15.2.2b - Upgrade - Even
R10.14_R15.2.2c - Upgrade - Odd
R10.14_R15.2.2 - Upgrade - Prx
</code></pre>
<p>These are the list items. The order needs to always be (case insensitive):</p>
<ol>
<li>String containing the &quot;PRX&quot; substring.</li>
<li>String containing the &quot;ODD&quot; substring.</li>
<li>String containing the &quot;EVEN&quot; substring.</li>
</ol>
<p>So the upper list should look like this after being sorted:</p>
<pre><code>R10.14_R15.2.2 - Upgrade - Prx
R10.14_R15.2.2c - Upgrade - Odd
R10.14_R15.2.2b - Upgrade - Even
</code></pre>
<p>Also, the strings in the list do not always follow the same pattern and the &quot;PRX&quot;, &quot;ODD&quot;, &quot;EVEN&quot; substring can appear in any place inside of the strings. Additionally the strings do not always contain the same numbers. This is why the ask is to sort by using contains.</p>
<p>I have tried introducing a custom IComparer class, but I had no luck with this approach.
Any help is appreciated.</p>
","1","Question"
"77808220","","<p>I feel this must be pretty straighforward but for some reason the fact that the string is within a list in a cell it's throwing me a lot of errors or a weird output.</p>
<p>My dataframe column df[&quot;splitted&quot;] is like this:</p>
<pre><code>0                                                       []
1        ['yolanda', 'contento', 'profesor', 'companeri...
2        ['solicitar', 'cambio', 'salon', 'hija', 'ser'...
</code></pre>
<p>What I want to get it's a single list with all the strings:</p>
<pre><code>['yolanda', 'contento', 'profesor','companerito','solicitar', 'cambio', 'salon', 'hija', 'ser'...]
</code></pre>
<p>But I either get something like:</p>
<pre><code>['[]',
 &quot;['yolanda', 'contento', 'profesor', 'companerito']&quot;,
</code></pre>
<pre><code>0                                                      [,]
1        [,',y,o,l,a,n,d,a,',,, ,',c,o,n,t,e,n,t,o,',,,...
2        [,',s,o,l,i,c,i,t,a,r,',,,
</code></pre>
<pre><code>[&quot;['[]'&quot;,
 ',',
 '&quot;[\'yolanda\'',
 ',',
 &quot;'contento'&quot;,
</code></pre>
<p>I have tried</p>
<pre><code>words = df[&quot;splitted&quot;].str.join(',')
words = df[&quot;splitted&quot;].tolist()
words = [s.strip() for s in word
</code></pre>
<p>but I cannot seem to be able to access each string of the list and I'm sure there must a be more direct method to access the elements.</p>
<p>Thanks in advance.</p>
","-1","Question"
"77811759","","<p>I'm coding a program to find perfect numbers. I have found some interesting properties and worked on my code to generate perfect numbers. This is my idea:</p>
<pre><code>{
    List&lt;int&gt; nums = new List&lt;int&gt;();
    for (int i = 2; i &lt; upperbound; i++)
    {
        if (IsPrime(i))
        {
            int mersenneNumber = (int)Math.Pow(2, i) - 1;
            if (IsPrime(mersenneNumber))
            {
                int perfectNumber = (int)Math.Pow(2, i - 1) * mersenneNumber;
                nums.Add(perfectNumber);
            }
        }
    }
    return nums;
}
static bool IsPrime(int number)
{
    if (number &lt;= 1)
        return false;

    for (int i = 2; i &lt;= Math.Sqrt(number); i++)
    {
        if (number % i == 0)
            return false;
    }

    return true;
}
</code></pre>
<p><a href=""https://i.sstatic.net/WWL4d.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/WWL4d.png"" alt=""Debug Console Image"" /></a>
The output is correct for the first 4 perfect numbers, however I don't know why it failed on the 5th and outputted negative numbers (with <code>foreach (int j in TesterPerfectNumber(20)){Console.WriteLine(j);}</code>):</p>
<p>I suspect the bug is in my algorithm, but the alternative form of finding perfect numbers is (2^(p-1))*(2^p - 1) with p and 2^p-1 being primes. Also, I have already found another way to find perfect numbers but consumes more storage and time, basically looping and finding factors of all positive numbers and adding up until it reaches the upperbound limit.</p>
<p>Can you help me debug the code or come up with another reasonable solution to my code? Or are there any limits to the <code>List&lt;T&gt;</code> or <code>int</code> that I haven't taken into consideration? Please help me and thanks.</p>
","0","Question"
"77812398","","<p>I'd like to convert a list of structurally similar strings into a list of dictionaries.</p>
<p>Example list of strings:</p>
<pre><code>list_of_strings = [
'ID payment_method email issue_date payment_date amount currency',
'ID payment_method email issue_date payment_date amount currency',
'ID payment_method email issue_date payment_date amount currency',
...
]
</code></pre>
<p>Each snippet of information is sperated by a whitespace inside the strings themselves.</p>
<p>Desired output:</p>
<pre><code>resulting_list_of_dicts = [
dict_1 = {&quot;ID&quot;: &quot;id1&quot;, &quot;payment_method&quot;: &quot;paymentmethod1&quot;, &quot;e_mail&quot;: &quot;email1&quot;, &quot;payment_date&quot;: &quot;paymentdate1&quot;, &quot;amount&quot;: &quot;amount1&quot;, &quot;currency&quot;: &quot;currecny1&quot;},
dict_2 = {&quot;ID&quot;: &quot;id2&quot;, &quot;payment_method&quot;: &quot;paymentmethod2&quot;, &quot;e_mail&quot;: &quot;email1&quot;, &quot;payment_date&quot;: &quot;paymentdate2&quot;, &quot;amount&quot;: &quot;amount2&quot;, &quot;currency&quot;: &quot;currecny2&quot;},
...
]
</code></pre>
<p>I've tried using the string split function, by I am running into trouble when trying to append the sub strings to a dict.</p>
","-4","Question"
"77812909","","<p>I have found that</p>
<pre><code>val list: List&lt;@Composable ()-&gt; Unit&gt; = listOf({Text(&quot;Cat&quot;)}, {Text(&quot;Dog&quot;)})
</code></pre>
<p>works, but</p>
<pre><code>val list: List&lt;@Composable ()-&gt; Unit&gt; = listOf({Text(&quot;Cat&quot;)}) + listOf({Text(&quot;Dog&quot;)})
</code></pre>
<p>produces the error &quot;<code>@Composable</code> invocations can only happen from the context of a <code>@Composable</code> function&quot; on the first <code>Text()</code>.</p>
<p>Why is it that adding lists works fine with things like</p>
<pre><code>val list: List&lt;String&gt; = listOf(&quot;Cat&quot;) + listOf(&quot;Dog&quot;)
</code></pre>
<p>but doesn't seem to work with Composables? Is there a way how I can add lists of Composables to each other?</p>
","2","Question"
"77815899","","<p>I have this loop and I wanted to make another loop inside of this one to be able do go from the end of the vector to the beginning of the vector.</p>
<pre><code>int troca_7(int vector[], int n)
{
    int temp[n];
    for (int i = 0; i &lt; n ; i++)
    {
        temp[i] = vector[i];
        printf(&quot;%d\n&quot;, temp[i]);
    }
</code></pre>
<p>I have tried this for loop: <code>for(int j = n - 1; j &gt;= i; j--)</code>.</p>
","0","Question"
"77815923","","<p>I am making a turtle street crossing game and I encountered an issue which I don't know how to solve. I've read several topics here about similar problems but they don't really help my particular case due to the fact that I am using constant lists, therefore the random.shuffle() option won't work for me.</p>
<p>Here's the class in question:</p>
<pre><code>from turtle import Turtle
import random

COLORS = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;]
STARTING_MOVE_DISTANCE = random.randint(3, 6)
MOVE_INCREMENT = 2
CAR_LANES_BOTTOM = [-220, -190, -160, -130, -100, -70, -40]
CAR_LANES_TOP = [40, 70, 100, 130, 160, 190, 220]


class CarManager:

    def __init__(self):
        self.bottom_cars = []
        self.top_cars = []

    def create_car_bottom(self):
        random_chance = random.randint(1, 20)
        if random_chance == 1:
            new_car = Turtle('square')
            new_car.shapesize(stretch_wid=1, stretch_len=2)
            new_car.penup()
            new_car.color(random.choice(COLORS))
            random_lane = random.choice(CAR_LANES_BOTTOM)
            new_car.goto(300, random_lane)
            self.bottom_cars.append(new_car)

    def create_car_top(self):
        random_chance = random.randint(1, 20)
        if random_chance == 1:
            new_car = Turtle('square')
            new_car.shapesize(stretch_wid=1, stretch_len=2)
            new_car.penup()
            new_car.color(random.choice(COLORS))
            random_lane = random.choice(CAR_LANES_TOP)
            new_car.goto(-300, random_lane)
            self.top_cars.append(new_car)

    def move_left(self):
        for car in self.bottom_cars:
            car.backward(random.randint(3, 6))

    def move_right(self):
        for car in self.top_cars:
            car.forward(random.randint(3, 6))
</code></pre>
<p>I am getting the cars generated in the same lane way too often and they're overlapping so I wanted to find a way to reduce the repetition somehow.</p>
<p>I have tried using time or increasing the random_chance range but it doesn't really affect the end result. After all the tests, I came to the conclusion that the only option would be to somehow ensure that this:</p>
<pre><code>random_lane = random.choice(CAR_LANES_BOTTOM)
</code></pre>
<p>doesn't repeat lanes but I have no idea how to do that given the fact that the list is constant.
I will appreciate any ideas, suitable for a beginner like me.</p>
","-1","Question"
"77817816","","<p>I am running some simulations in R using the repeat{} function, for some contextual reasons I am not able to convert the block of code to something that uses apply functions (or something more effective/efficient). I have output I am saving from the repeat{} function iteratively into a list(), using the following code:</p>
<pre><code>results &lt;- list()
sim &lt;- list()
reps &lt;- 5
n1 &lt;- 5
n2 &lt;- 5
low_eqbound_d &lt;- -.3
high_eqbound_d &lt;- .3
count &lt;- 0
repeat {
  x &lt;- rnorm(n1, 0, 2)
  y &lt;- rnorm(n2, 2, 2)
  print(mid &lt;- mean(x)-mean(y))
  sdpooled &lt;- sqrt((((n1 - 1)*(sd(x)^2)) + (n2 - 1)*(sd(y)^2))/((n1 + n2) - 2))
  low_eqbound &lt;- low_eqbound_d*sdpooled
  high_eqbound &lt;- high_eqbound_d*sdpooled
  if (mid &lt; low_eqbound &amp; mid &gt; high_eqbound) {
    next
  }
  if (mid &gt;= low_eqbound &amp; mid &lt;= high_eqbound) {
    sim &lt;- TOST(m1=mean(x), m2=mean(y), sd1=sd(x), sd2=sd(y), n1=n, n2=n, 
                low_eqbound_d=-0.3, high_eqbound_d=0.3)
    results &lt;- append(results, sim)
    count &lt;- count+1
  }
  if (count == 5) {
    break
  }
}

results1 &lt;- as.data.frame(results)
</code></pre>
<p>The list looks like this at the end:</p>
<p><a href=""https://i.sstatic.net/ECvvH.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/ECvvH.png"" alt=""enter image description here"" /></a></p>
<p>I want to convert this to a data.frame for further analysis/visualisation. Note that there are 5 pieces of data I need extracted from the list, and this repeats along the entire object. I want to create a data.frame with 5 columns, and take each entry from the list and put it into each column of the data.frame, repeating this for all repetitions in my code. I have attempted to use as.data.frame()</p>
<pre><code>results1 &lt;- as.data.frame(results)
</code></pre>
<p>But get this:</p>
<p><a href=""https://i.sstatic.net/DVGPa.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/DVGPa.png"" alt=""enter image description here"" /></a></p>
<p>Any help would be fantastic!</p>
","1","Question"
"77818985","","<p>How is it possible (in my case in C#) to compare an element in a list to all other elements in the list, but (of course) NOT to itself - and to do this for all elements?</p>
<p>Example:</p>
<PRE>
List &lt;sometype>  A = new List&lt;sometype> ();


Foreach (sometype e_1 in A)
{
    Foreach (sometype e_2 in A)
    {
       // compare e_2 to the other elements in A except e_1
    }
}
</PRE>
<p>That means that I must exclude 'e_1' in the 2nd loop, but how can I do this?
Whe I use <PRE> Foreach (sometype e_2 in A.Skip() )</PRE> in the 2nd loop I hav to know the index of 'e_1'. Wehre I can find this easyly?
Or is there another way?</p>
<p>Thx a lot :-)</p>
","0","Question"
"77822189","","<p>So I am getting my JWT token with SecurityContext like so:</p>
<pre><code>JwtAuthenticationToken authToken = (JWTAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();

if (authToken != null) {
    log.warn(&quot;Principal authorities:&quot;);
    authToken.getAuthorities().forEach(auth -&gt; log.warn(&quot;authorities: [{}]&quot;, auth.getAuthority()));

Map&lt;String, Object&gt; attributes = Collections.emptyMap();
attributes = authToken.getTokenAttributes();
</code></pre>
<p>with my token looking something like:</p>
<pre><code>{
  &quot;exp&quot;: 1705347941,
  &quot;iat&quot;: 1705347641,
  &quot;jti&quot;: &quot;011200ff-9c3d-44e4-8f49-be29fc0f7792&quot;,
  ...
  &quot;user&quot;: [
    &quot;backend&quot;,
    &quot;backend-time&quot;
  ],
  ...
</code></pre>
<p>How would grab all the values in <code>user</code> and assign them to a array of type String?</p>
<p>I am consoling my values like, but having trouble creating an string array with all <code>user</code> values.</p>
<pre><code>attributes
    .entrySet()
    .forEach(attr -&gt; log.warn(&quot;attributes: [{}:{}&quot;, attr.getKey(), attr.getValue()));
</code></pre>
","0","Question"
"77822487","","<p>I have this code :</p>
<pre><code>selected_listbox_select_criteria_column = [('0', 'firstName'),('1', 'lastName'),('2', 'phone')]

column_to_check_for_criteria = []

column_to_check_for_criteria(', '.join(elems[0] for elems in selected_listbox_select_criteria_column))
</code></pre>
<p>It gives me this result :</p>
<pre><code>['0,1,2']
</code></pre>
<p>How can I have a strict list of integer like this :</p>
<pre><code>[0,1,2] 
</code></pre>
<p>without the quotes to finally get equivalent of : <code>column_to_check_for_criteria = [0,1,2]</code></p>
<p>Thanks</p>
","0","Question"
"77824109","","<p>I have a SwiftUI <code>List</code> that should be <code>.refreshable()</code> and also be a <code>.dropDestination()</code>. While the List has items, I can drop them at a specific index like so:</p>
<pre><code>List {
    ForEach(items) { item in
        ...
    }
    .dropDestination(for: URL.self) { items, index in
        handleUrlDrop(items, at: index)
    }
}
.refreshable {
    await loadNewItems()
}
</code></pre>
<p>What I'm struggling with is making it a <code>.dropDestination()</code> when being empty. This is what I've tried:</p>
<pre><code>ZStack {
    if items.isEmpty {
        BackgroundPlaceholder()
            .dropDestination(for: URL.self) { items, _ in
                handleUrlDrop(items)
                return true
        }
    }
    List {
        ...
    }
    .refreshable {
        await loadNewItems()
    }
}
</code></pre>
<p>It works, but I can only drop onto the <code>BackgroundPlaceholder</code> and I can't refresh by swiping on it. I also tried <code>.allowsHitTesting(false)</code>, but that makes it not a drop destination anymore. Same goes for putting something like <code>Color.white.opacity(0.0001)</code> on top.</p>
<p>I could maybe put the <code>BackgroundPlaceholder</code> inside the list, but that means it scrolls, has list separation lines and I'd probably have to fill the entire height with something like <code>GeometryReader</code> which seems terrible. Any idea?</p>
","2","Question"
"77827673","","<p>This is my code that checks if a number is a palindrome.</p>
<pre><code>class Solution(object):
    def isPalindrome(self, x):
        string = str(x)
        idx = 0
        # if the number is even; 
        if (x % 2) == 0:
            for i in range (1, len(string)/2 + 1):
                if string[i - 1] == string[len(string) - i]:
                    idx += 1 
            if idx == len(string)/2: 
                return True
        #if the number is odd: 
        else: 
            if len(string) &gt; 2: 
                for i in range(1, (len(string)-1)/2 + 1):
                    if string[i - 1] == string[len(string) - i]:
                        idx += 1
                if idx == (len(string)-1)/2:
                    return True
            elif len(string) == 2: 
                if string[0] == string[1]: 
                    return True
            else: 
                return True
</code></pre>
<p>But, why doesn't my code work when x = 1000030001? My program thinks that 1000030001 is a palindrome. Can anybody tell me where my code is incorrect?</p>
<p>I already tried to plug in every value manually to debug, and it shows that it will return False, even though when I run the program it returns True.</p>
","0","Question"
"77829278","","<p>How can we keep only elements that have three or more elements on either side? For example:</p>
<pre><code>[1, 2, 3, 4]  =&gt;  [1, 4]
</code></pre>
<ul>
<li><p>The <code>1</code> has three elements on its right, so we keep it.</p>
</li>
<li><p>The <code>2</code> and <code>3</code> each have only one or two elements on either side, so we remove them.</p>
</li>
<li><p>The <code>4</code> has three elements on its left, so we keep it.</p>
</li>
</ul>
<p>More examples:</p>
<pre><code>[]  =&gt;  []
[1]  =&gt;  []
[1, 2]  =&gt;  []
[1, 2, 3]  =&gt;  []
[1, 2, 3, 4]  =&gt;  [1, 4]
[1, 2, 3, 4, 5]  =&gt;  [1, 2, 4, 5]
[1, 2, 3, 4, 5, 6]  =&gt;  [1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6, 7]  =&gt;  [1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>Edit: Here's a bad way in case someone indeed minds that I didn't provide any &quot;attempt&quot;:</p>
<pre><code>L = [1, 2, 3, 4]

N = len(L)
for i in reversed(range(N)):
    left = i
    right = N - 1 - i
    if not (left &gt;= 3 or right &gt;= 3):
        L.pop(i)

print(L)
</code></pre>
","2","Question"
"77829439","","<p>Microsoft Lists are part of Microsoft Automated Flows.</p>
<p>If you want to automate the loading of an excel file or csv file, you are probably going to want your Microsoft Power Automate to load this data in a List.</p>
<p>So I think it is important that I figure out how to fix something that I have found.</p>
<p>Here is how I found this strange thing.  I have a flow that does not work and, in the process of debugging this flow, a simpler flow has been made THAT DOES WORK.  So, logically, if I slowly, step by step, compare the two and gradually make changes to the one that works, I will be able to find the bug.  The problem is, in the process of carefully looking at the one that does not work, I found something.  I have been categorizing the column types in the main List in SharePoint and I am unable to see the details of the column by clicking on &quot;Edit&quot;.</p>
<p>Here, I will show you.  the column called &quot;Total Time&quot; has an edit menu option.  This allows me to see the specifics of the column data setting.</p>
<p><a href=""https://i.sstatic.net/yXCWx.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/yXCWx.png"" alt=""enter image description here"" /></a></p>
<p>The column  in the List that if for &quot;Employee ID&quot; is mysteriously missing the Edit menu option.  What would cause this anomaly and how can it be fixed?</p>
<p><a href=""https://i.sstatic.net/przVO.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/przVO.png"" alt=""enter image description here"" /></a></p>
","0","Question"
"77832865","","<p>I have an instance that contains a List that contains a set of records. I have created another instance of this list where I only want to pull out the active records, but this is the error it throws:</p>
<blockquote>
<p>Message=Unable to cast object of type 'WhereListIterator`1[Namespace.Class]' to type
'System.Collections.Generic.List`1[Namespace.Class]'.</p>
</blockquote>
<p>Here is my code</p>
<pre><code>public async Task CompareList(List&lt;ListClass&gt; listInstance1)
{
    List&lt;ListClass&gt; listInstance2 = new List&lt;ListClass&gt;();
    listInstance2 = (List&lt;ListClass&gt;)listInstance1.Where(x =&gt; x.Active == &quot;A&quot;);
}
</code></pre>
","0","Question"
"77833398","","<p>I Have a list and items [0,1,2,3,4,5]</p>
<p>when i try to print this list</p>
<p>i get output like this:  <code>[0, 1, 2, 3, 4, 5]</code></p>
<p>But I want to get output like this</p>
<pre><code>0
1
2
3
4
5
</code></pre>
<p>My Code:</p>
<pre><code>GFButton(
            onPressed: () {
              _mainController.selected_Tags
                  .forEach((element) =&gt; print(element));
            },
            text: &quot;Test&quot;,
          )
</code></pre>
","0","Question"
"77835033","","<p>I have a list of data frames in R</p>
<p>Each data frame's rownames are dates and they have a column named number.</p>
<p>I want to create a single data frame from the list such that the columnames are the same as list element names</p>
<p>Eg,
if</p>
<pre><code>    df1 &lt;- data.frame( number = c(10, 20, 30))
    rownames(df1) &lt;- c(&quot;202201&quot;, &quot;202202&quot;, &quot;202203&quot;)

    df2 &lt;- data.frame( number = c(20, 30, 30))
    rownames(df2) &lt;- c(&quot;202201&quot;, &quot;202202&quot;, &quot;202203&quot;)

    df &lt;- list(A = df1, B = df2)
</code></pre>
<p>I want to combine df such that result is</p>
<pre><code>       | A        |  B       |       
  
202201 | 10       | 20       |
202202 | 20       | 30       |
202203 | 30       | 30       |
</code></pre>
<p>The actual data contains multiple data frames and the range of date, i.e the rownames may also differ.</p>
<p>I would prefer a full join</p>
<p>I tried using the following method</p>
<pre><code>merged_df &lt;- Reduce(function(x, y) merge(x, y, by = 0, all = TRUE), df)
</code></pre>
<p>I got the warning</p>
<pre><code>&quot;In merge.data.frame() column names are dupicated in the result &quot;
</code></pre>
<p>The output contains <code>multiple columns with row.names and number.x , number.y</code></p>
","2","Question"
"77835408","","<p>Here is my code</p>
<pre><code>shop_list = [{&quot;Apple&quot;:2}, {&quot;Banana&quot;:6}, {&quot;Soap&quot;:1}]

size = len(shop_list)

print(&quot;No. \t Items \t \tQuantity\n&quot;)
for i in range(size):
    for dict in shop_list:
        for key, value in dict.items():
            print(&quot;%d \t&quot; %(i+1), &quot;%s\t&quot; %key, &quot;\t%d\t&quot; %value)
        print(&quot;&quot;)
</code></pre>
<p>I want it to be displayed like this</p>
<p><a href=""https://i.sstatic.net/5hpsj.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/5hpsj.png"" alt="""" /></a></p>
<p>But it is getting displayed like this</p>
<p><a href=""https://i.sstatic.net/TkJfl.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/TkJfl.png"" alt="""" /></a></p>
<p>Someone please help me with this one.</p>
","1","Question"
"77836188","","<p>The program doesn't have a specific function; I am just currently studying lists and I have a hard time understanding why I don't get a compile error in line where <code>Node *curr = *root;</code> Shouldn't I initialize <code>Node *curr</code> with an address using <code>&amp;</code>? But when I set a double pointer and a pointer and I initialize the second one with <code>*p</code>, where <code>p</code> is the double pointer, I get a compile error and the program doesn't even run. Both scenarios seem the same to me, and I can't see the difference.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
   
typedef struct Node {
    int x;
    struct Node *next;
} Node;

void insert_end(Node **root, int value) {

    Node *new_node = malloc(sizeof(Node));
    new_node-&gt;next = NULL;
    new_node-&gt;x = value;

    //We have to use the loop to reach the
    //  end of the list where we add our additional box
    Node *curr = *root;
    while (curr-&gt;next != NULL) {
        curr = curr-&gt;next;
    }
    curr-&gt;next = new_node;
}

int main() {
     Node *root = malloc(sizeof(Node));
     root-&gt;x = 15; //1o element
     root-&gt;next = NULL;

    //the last element of a list is always initialized with null
    //exit loop when *next = NULl

    //it matters the order of freeing the memory
    insert_end(&amp;root, -2);
    for (Node *curr = root; curr != NULL; curr = curr-&gt;next) {
        printf(&quot;%d\n&quot;, curr-&gt;x);
    }

    return 0;
}
</code></pre>
","1","Question"
"77837078","","<p>I have a single list from a database that is returning the information of a baseball stat across two days.</p>
<p>So say I have these 3 items in a single list of tuples:</p>
<pre><code>(&quot;John Doe&quot;, 2, 3)
(&quot;Sponge Bob&quot;, 4, 5)
(&quot;John Doe&quot;, 1, 5)
</code></pre>
<p>How can I ONLY combine the two tuples of &quot;John Doe&quot; and add the two following values.</p>
<p>I am expecting to see:</p>
<pre><code>(&quot;John Doe&quot;, 3, 8)
(&quot;Sponge Bob&quot;, 4, 5)
</code></pre>
","-1","Question"
"77838881","","<p>I have a list <code>A</code>. I want specific permutations such that no location is occupied by the same element more than once in a list. I present the current and expected outputs. I also want the code to work for any length of <code>A</code>.</p>
<pre><code>from itertools import permutations

A = [1, 2, 3]

# Generate all possible permutations and convert tuples to lists
all_permutations = [list(perm) for perm in permutations(A)]

# Print the permutations
for perm in all_permutations:
    print(perm)
</code></pre>
<p>The current output is</p>
<pre><code>[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]
</code></pre>
<p>The expected output is</p>
<pre><code>[1,2,3]
[3,1,2]
[2,3,1]
</code></pre>
","1","Question"
"77845596","","<p>I'm building a program that needs to have and input from the user where the user introduces a sequence of numbers separated with commas, example: 1,2,3,4.</p>
<p>The sequence can be any amount of numbers, have any number in it and have spaces in between, the only thing that has to be followed is that there's a number then a coma and maybe in between somewhere a space</p>
<p>I've done this until now</p>
<pre><code>`sec=input(&quot;Please insert a sequence of numbers separated by commas:&quot;)

com = 0
num = 1
numlist=[]

for x in sec:
    if x == &quot;,&quot; or x==&quot; &quot;:
        None
    else:
        try:
            numlist.append(int(x))
        except:
            print(&quot;Please just insert numbers and commas&quot;)

    if x == &quot;,&quot;:
        com+=1
    elif x == &quot; &quot;:
        None
    else:
        num+=1

if com &lt;= num and (com&gt;(num-3)):

    print(numlist)
    print(tuple(numlist))
else:
    print(&quot;Please enter a comma between the numbers&quot;)`
</code></pre>
<p>The only thing I'm missing is to check the that the sequence is number comma number comma etc...</p>
<p>Because with the code I have actually, you can introduce Number comma comma Number and it would work</p>
<p>1, 2, ,3 5</p>
<p>I was expecting this: Please enter a comma between the numbers</p>
<p>Got this</p>
<p>Please insert a sequence of numbers separated by commas:1, 2, ,3 5
[1, 2, 3, 5]
(1, 2, 3, 5)</p>
","2","Question"
"77848814","","<p>I wrote this Python 3.10 (PyPy) code, but it doesn't work:</p>
<pre><code>keyboard = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'q']
letter1 = str(input())
x = 0
y = 25
a = keyboard.index(letter1, x, y)
a = a + 1 
print(keyboard[a])

</code></pre>
<p>The error being:</p>
<pre><code>m
Traceback (most recent call last):
  File &quot;main.py&quot;, line 5, in &lt;module&gt;
    a = keyboard.index(letter1, x, y)
ValueError: 'm' is not in list

</code></pre>
<p>So, the task is: you enter a letter of the alphabet from the keyboard, and it should give the next letter on the keyboard, e.g. if the input is &quot;p&quot; it will output &quot;a&quot;. Though it outputs an error if input the letter M. Also, the automatic checker says it failed on the 5th out of 20 test, but doesn't say what is the mistake. Can I get some help? I'm just starting out, so sorry if I didn't mention something crucial. Thanks in advance!</p>
<p>I tried to enter the letter M to the input thingy, but it didn't work at and got me an error instead
I tried adding the letter Q after the letter M in the list, but nothing changed.</p>
","-1","Question"
"77849030","","<p>I created Binary Tree with some nodes and trying to get the result of inorder traversal using dictionary, but It does not really work.
Why the list does not append, even tho it prints the result?</p>
<pre><code>class TreeNode:
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right

def inoder(bomj):
    visited = []

    if bomj:
        inoder(bomj.left)
        print(bomj.val)
        visited.append(bomj.val)
        inoder(bomj.right)

    return visited

tree = TreeNode(1)
tree.left = TreeNode(2)
tree.right = TreeNode(3)
tree.left.left = TreeNode(4)
tree.left.right = TreeNode(5)
tree.left.left.left = TreeNode(7)
tree.right.left = TreeNode(6)
print(inoder(tree))
</code></pre>
<pre><code>Result:
7
4
2
5
1
6
3
[1]
</code></pre>
<p>I also tried using dictionary</p>
","1","Question"
"77850299","","<p>I have a list with this structure in R:</p>
<p><a href=""https://i.sstatic.net/IvwV2.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/IvwV2.png"" alt=""My list, in each element i have all the elements necessary for the regressions"" /></a></p>
<p>My list has the date and the variables for the regression. &quot;re&quot; needs to be the dependant variable and &quot;mkt&quot; the independent variable, so re~mkt
So i would like to apply the same rolling window regression in each element.</p>
<p>I want to do a rolling window regression for 60 observations (and at least for 40 observations), moving forward month by month. For example, suppose that one element starts their observations in January-2000 until April-2020. So my goal is to do the first regression for the first 60 observations (january-2000 to december-2004, the next observation between february-2000 until january 2005, and so on). So 1-60, 2-61, 3-62, 4-63...
It's important to highlight the feature of &quot;at least 40 observations&quot;. Not all element in the list have more than 60 observations, so the minimum to do the regression has to be 40. If an element of the list have less than 60 i want to do with at least 40 (but if the list have 50 with 50 observations). If there are no more than 40 i want the same output but with NA.</p>
<p>I hope it was understood well enough. Tell me any question.</p>
<p>I have the code to do the rolling regression with 60 observations, but i do not know how to apply the &quot;at least for 40 observations&quot; and i do not know how to apply the code to the list.</p>
<p>The code for the rolling is only for a trial sample.</p>
<pre><code># window size
window &lt;- 60

# to save mkt coefficients
coefs_mkt &lt;- numeric()

##Loop
# Iterar a través de las ventanas móviles
for (i in 1:(nrow(prueba) - window + 1)) {
  # Seleccionar la ventana móvil actual
  current_window &lt;- prueba[i:(i + window - 1), ]
  
  # Ajustar el modelo de regresión
  model &lt;- lm(re ~ mkt, data = current_window)
  
  # Guardar el coeficiente de mkt en el vector
  coefs_mkt &lt;- c(coefs_mkt, coef(model)[&quot;mkt&quot;])
}

print(coefs_mkt)
</code></pre>
<p>Don't worry if the code is so different, i suppose that there are better ways to do that.</p>
","0","Question"
"77861005","","<p>I have an array &quot;stringsArray&quot; and I need to append all its items to a div as &quot;li&quot; items. That should happen when the person hovers over the div. The &quot;li&quot; elements should also be removed when the div is not being hovered anymore.
The problem is that when I hover the div, an infinite number of &quot;li&quot; elements is created. Also, the li elements are not being removed when not hovering. What is wrong with my code?</p>
<p><strong>HTML</strong></p>
<pre><code>&lt;div id=&quot;topics-div&quot;&gt;Topics&lt;/div&gt;
</code></pre>
<p><strong>JS</strong></p>
<pre><code>let stringsArray = [
    &quot;Topic 1&quot;,
    &quot;Topic 2&quot;,
    &quot;Topic 3&quot;,
    &quot;Topic 4&quot;,
    &quot;Topic 5&quot;
]

let topicsDiv = document.getElementById(&quot;topics-div&quot;);

let topicUl = document.createElement(&quot;ul&quot;);

topicsDiv.onmouseover = function(){
    topicsDiv.append(topicUl);
       for(i = 0; i &lt;= stringsArray.length; i++){
           let liElement = document.createElement(&quot;li&quot;);
           liElement.textContent = stringsArray[i];
           topiclUl.appendChild(liElement);
    }
}


topicsDiv.onmouseout = function(){
   let liElement = topicsDiv.querySelector(&quot;li&quot;);
       topicsDiv.removeChild(liElement);
}

</code></pre>
","-1","Question"
"77866079","","<p>I have a Date column in my sharepoint list and one choice column(with values 1 to 6), so when I select the value 6 then the value to Date column must be the today's date and when I select another value then the value of Date column must be blank.</p>
<p>I have tried this</p>
<pre><code>=IF([choiceColumn]=&quot;6&quot;,[DateColumn]=TODAY(),&quot;&quot;)
</code></pre>
","0","Question"
"77868507","","<p>I have two lists containing tuples of centroid coordinates...</p>
<pre><code>current_centroids = [(924, 849), (734, 974), (360, 778), (400, 710), (963, 1067), (839, 440), (899, 88)]
prior_centroids = [(1096, 837), (522, 763), (898, 960), (563, 694), (1790, 720), (1080, 75), (1780, 713)]
</code></pre>
<p>I would like to generate paired tuples based on comparing the second element of each tuple in <code>current_centroids</code> with the second element of each tuple in <code>prior_centroids</code> and finding the resulting pair with the minimum absolute difference between the second elements.</p>
<p>For example, for <code>(924, 849)</code> in <code>current_centroids</code>, the tuple from <code>prior_centroids</code> with the minimum absolute difference (=12) when comparing the second elements is <code>(1096, 837)</code>. I've been trying to figure this out using list comprehension, so that I could generate a final list in the format <code>[((924, 849), (1096, 837)), .....]</code>. I'm not using <code>zip</code> because the elements in each list aren't going to be corresponding, and they can have differing number of elements, even though in my example they are the same size.</p>
","-3","Question"
"77869607","","<p>I was playing around with code, comparing R and python behaviors, and I came across something I cannot explain in R:</p>
<pre><code>nchar(c('zzz','xs','acgt'))
#[1] 3 2 4 

mylist&lt;- list(a = c('zzz','xs','acgt'), b = c('aa', 'bb'))
mylist 

# $a
# [1] &quot;zzz&quot;  &quot;xs&quot;   &quot;acgt&quot;
# $b
# [1] &quot;aa&quot; &quot;bb&quot;
#
nchar(mylist) 
# a  b 
# 22 13 
## ?????
</code></pre>
<p>Can you please help me understand where the result comes from?</p>
","2","Question"
"77869919","","<p>I want to create a list given a list of values and a list of positions.</p>
<p>For example, suppose the lists of values and positions are</p>
<pre><code>lst1 = [[8,9],[6,7]]
</code></pre>
<p>and</p>
<pre><code>lst2=[[[1,2],[3,4]],[[1,3],[2,4]],[[1,4],[2,3]]].
</code></pre>
<p>I want to create the list</p>
<pre><code>result=[[8,8,9,9],[8,9,8,9],[8,9,9,8],[6,6,7,7],[6,7,6,7],[6,7,7,6]].
</code></pre>
<p>The first element of the list result has value <code>lst1[0][0]</code> corresponding to the position <code>lst2[0][0][0]</code> and <code>lst2[0][0][1]</code>. It also has value <code>lst1[0][1]</code> corresponding to the position <code>lst2[0][1][0]</code> and <code>lst2[0][1][1]</code>.</p>
<p>The second element of the result has value <code>lst1[0][0]</code> corresponding to the position <code>lst2[1][0][0]</code> and <code>lst[1][0][1]</code> and value <code>lst1[0][1]</code> corresponding to the position <code>lst2[1][1][0]</code> and <code>lst[1][1][1]</code>.</p>
<p>So far all I can think of is first creating a list of result, and then replacing the elements in this list using by values in lst1 using lst2 to index the elements. But I found this very inefficient. What's the most efficient way to do this?</p>
<p>edit: Orginally, <code>lst1=[[a,b],[b,a]]</code>. I just realized that I want the elements to be an integer instead of a string. Sorry for the confusion.</p>
","1","Question"
"77874286","","<p>I am developing a game in Unity and I came upon a problem.
I am fetching data from file and I wanna store them into List&lt;&gt; with my own class Words.</p>
<pre><code>public class Words
{
    private readonly string _myWord;
    private readonly int _damage;

    public Words()
    {
        _myWord = &quot;&quot;;
        _damage = 0;
    }

    public Words(string word, int damage)
    {
        _myWord = word;
        _damage = damage;
    }

    public override string ToString()
    {
        return _myWord + &quot;:&quot; + _damage + &quot;\n&quot;;
    }
}
</code></pre>
<p>I load the data and store it to the object of my custom class</p>
<pre><code>
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net;
using UnityEditor;

using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Serialization;

public class WorkingWithTextFiles : MonoBehaviour
{
    [SerializeField] private TextAsset myFile;
    private List&lt;Words&gt; _wordsList;
    [SerializeField] private string _seperatorParts;
    [SerializeField] private string _seperatorEndOfLine;
    
    // Start is called before the first frame update
    private void Start()
    {
        try
        { 
            var textFromFile = myFile.ToString(); //gets contents of file
            var numberOfWords = int.Parse(textFromFile.Split(&quot;\n&quot;)[0]) ; //returns number of words - given in file on first line
            textFromFile = textFromFile.Remove(0,3); //deletes number and /n
                
                var word = textFromFile.Split(_seperatorParts)[0]; //gets only the word
                textFromFile = textFromFile.Remove(0, word.Length + 1); //removes the word + separator
                var damage = textFromFile.Split(_seperatorEndOfLine)[0]; //gets only the damage
                textFromFile = textFromFile.Remove(0, damage.Length + 3); //removes the damage + separator + \n
                
                var givenWord = new Words(word, int.Parse(damage));
                
                _wordsList.Add(new Words(word, int.Parse(damage)));
                //Debug.Log(_wordsList.Count);
                Debug.Log(_wordsList.ToString());
                
        }
        catch (Exception e)
        {
           Debug.Log(e);
        }
       
    }

    
}

</code></pre>
<p>I take data from file and store it into word and damage. Then I make givenWord from them. They store okay and upon printing they return fine.</p>
<p>Ond the other hand the _wordsList is null.
It's null when I print out it's size, it's null when I print it out using Debug.Log.</p>
","-2","Question"
"77874446","","<p>I want to create a function to compare a list of objects in the fast way</p>
<pre><code>for (let i = 0; i &lt; posts.length - 1; i++) {
  for (let j = i + 1; j &lt; posts.length; j++) {
    const post1 = posts[i];
    const post2 = posts[j];

    if (validation(post1, post2)){
      console.log(`found comparation`);
    }
  }
}
</code></pre>
<p>And the validation function compares two fields like this:</p>
<pre><code>const validation = (post1, post2) =&gt; post1.need.includes(post2.have) &amp;&amp;
    post2.need.includes(post1.have);
</code></pre>
<p>What would be the fastest way to perform this search? These 'need' and 'have' strings are IDs for a category where I associate them by levels like '01030204'. In case it's useful to know, I'm open to dividing the data based on this, but I'm really looking for ideas on how to improve the speed of this search.</p>
","-1","Question"
"77874837","","<p>I am using Robot Framework, Selenium Library in Pycharm. I need to fetch product id from below table and then save it in the list</p>
<p><a href=""https://i.sstatic.net/oWbxV.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/oWbxV.png"" alt=""enter image description here"" /></a></p>
<p>below code to create the list</p>
<pre><code>${list}=   Create List   ${ProductID}
    ${data}=    create list    ${list}
    Append To Csv File     ProductID.csv     ${data}
</code></pre>
<p>I got values in CSV</p>
<p><a href=""https://i.sstatic.net/cjBqR.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/cjBqR.png"" alt=""enter image description here"" /></a></p>
<p>Then calling saved values in another script like</p>
<pre><code>${rows} =  get element count   xpath=//*[@id=&quot;YearlyReport&quot;]/tbody/tr
    sleep  2
    log to console   Total Rows ${rows}

  ${ProductID}=     Read Csv File To List      ProductID.csv
  FOR    ${element}    IN    @{ProductID}
        Log To Console   ${element}[0]

   FOR    ${rowno}    IN RANGE    1    ${rows}+1

    Input Text    xpath=//input[@placeholder='Search ...']    ${element}[0]
    sleep   5


    ${Details} =   Get Text    xpath=//*[@id=&quot;YearlyReport&quot;]/tbody/tr[${rowno}]/td[10]
    log to console  In Search Stage of ${Details}[0] is ${Details}
</code></pre>
<p>Getting below error</p>
<p><strong>List '${element}' has no item in index 0.</strong> If I change value to 1 then it gives same error <strong>List '${element}' has no item in index 1.</strong></p>
","0","Question"
"77875796","","<p>I am currently learnig single lined lists and i am trying to write the basic functions and   I tried to print my list after i initialized few elements but my programm has a logical bag because i am not gettin compile errors but instead  it return only a non zero value.I dont know where the bug/bus is .Probably it has something to do with the print function but i am not sure</p>
<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

  typedef struct person{
       int age;
       struct person*next_generation;
  }person;

  struct person*head=NULL;


  void insert_start(int tage){

    struct person*next_gen=(person*) malloc(sizeof(person));
    next_gen-&gt;age=tage;
    next_gen-&gt;next_generation=head;
    head=next_gen;
  }

 void insert_end(int x){
     person*next_gen=(person*) malloc(sizeof(person));
     next_gen-&gt;age=x;
     next_gen-&gt;next_generation=NULL;

     if(head==NULL)
         head=next_gen;
     else{
           struct person*find=head;

           while(find!=NULL){
             find=find-&gt;next_generation;
           }
           find-&gt;next_generation=next_gen;
    }
}

void insert_whenever(int x,person*p,int position){

   person*next_gen=(person*)malloc(sizeof(person));
   next_gen-&gt;age=x;
   next_gen-&gt;next_generation=NULL;
   int i=1;
   while(i&lt;position){
        p=p-&gt;next_generation;
        i++;
   }
   next_gen-&gt;next_generation=p;
   p-&gt;next_generation=next_gen;

}


void print_list(person *p){
    printf(&quot;[&quot;);
    while(p!=NULL){
        printf(&quot;%d&quot;,p-&gt;age);
        p=p-&gt;next_generation;
    }
    printf(&quot;]&quot;);
}



int main(){
    insert_start(75);
    insert_end(45);
    insert_end(12);
    insert_whenever(32,head,3);
    print_list(head);

    return 0;
   }
</code></pre>
","4","Question"
"77877970","","<p>So, I'm writing a method that takes a user input and prints all of its prime factors. It works, except it's giving me a negative number at the end of every list. What is causing this??</p>
<pre><code>static void PrimeFactors(int userInput)
{
    // create a variable which is a new version of userInput that can be manipulated by the method
    int input = userInput;
   
    // declare a new list which will contain all of the factors of the user input. 
    var factors = new List&lt;int&gt;();


    // While the input is greater than 1, if input mod counter is equal to 0,
    // add counter to factor list and set input value to input / counter
    // if input % counter != 0, break and start the for loop again
    
    for(int counter = 1; input &gt;= 1; )
    {
        if(input % counter == 0)
        {
            factors.Add(counter);
            input = input / counter;
            counter++;
        }
        else
        {
            counter++;
        }
        
    }
    // display the prime factors 
    foreach (int factor in factors)
    {
        Console.Write($&quot;{factor}  &quot;);
    }
}
</code></pre>
<p>When I input 90, I get 1, 2, 3, 5, -3. When I input 31, I get 1, 31, -1. When I input 500, the output is 1, 2, 5, 10, -5. You get the point.</p>
<p>I know my code is not complete in terms of filtering ONLY prime factors, but I want to address these negative numbers before refining things to make sure only prime numbers get on the list.</p>
","1","Question"
"77878928","","<p>What I have in a class is</p>
<pre class=""lang-java prettyprint-override""><code>public void method(List&lt;String&gt; customerString) {
    List&lt;Customer&gt; customers = customerString.stream()
        .map(t -&gt; new Customer())
        .toList();
}

record Customer(String firstName, String lastName, String email, String amount) { }
</code></pre>
<p>The customerString looks like this : [&quot;Jane,Doe,jane@doe.com,199&quot;, &quot;Jane,Doe,jane@doe.com,2&quot;]
What I would want is to make the input string list to a list of the object Customer. What I have tried so far looks like above. I am not sure how to give the populate the new list from the stream I get. It would be really helpful if someone can help to split the string the desired object</p>
","0","Question"
"77880486","","<p>In Prolog,
[a, b, c] = [a, b, c | []]</p>
<p>However, I am confused about what the head of [a, b, c | []] is?
If [a, b, c] = [a, b, c | []] why is it not true that:
[a, b, c] = [a, b, c | []] = [[a, b, c | []]  | []]] = ... (so I added another empty list at the end of the head, since they are elements separated by a comma, just like it is the case with [a, b, c] where we also added an empty list)</p>
<p>So I see a comma as: combine all the elements via the | operator, and add an empty list at the end. &quot;a, b, c&quot; (the head of [a, b, c | []]) would then become [a, b, c | []] again and so on.</p>
<p>But there is something wrong in my interpretation, since what I just said is wrong.</p>
<p>And If I'm not mistaken, | has a higher precedence than the comma operator. So [A, B|C] = [A|[B|C]]. But why is it not the case that
[A, B|C] = [A|[[B|C]|[]]].</p>
<p>I can memorize the correct definition as follows: combine the elements via |, and add an empty list at the end <strong>only if the last operand of the commas is enclosed by a ]</strong>.
So then: [a, b, c] = [a, b, c | []], and if I got
[a, b, c | []], even though I got commas here, I wouldn't add an empty list since the last element (c) is not enclosed by a ].
But this seems to be not a good way to understand this.</p>
","2","Question"
"77881536","","<p>Hi! I am trying to print a list of letters (this list will never change) where duplicates are allowed but just not side by side that start with the same letter, but I need a set number of results, let's say 14 for this example. The below is what I have.</p>
<p>letters = [""A"", ""AAA"", ""B"", ""BBB"", ""C"", ""CCC"", ""D"", ""DDD"", ""E"", ""EEE""]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; groups = random.choices(letters, k = 14)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(groups)</p>
<p>Example return: ['B', 'CCC', 'AAA', 'A', 'EEE', 'D', 'DDD', 'B', 'B', 'A', 'C', 'E', 'AAA', 'BBB']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;Which is not great due to having 'AAA', 'A'--'D', 'DDD'---'B', 'B' next to each other.</p>
<p>Hope for something like this: ['B', 'CCC', 'A', 'BBB', 'EEE', 'D', 'AAA', 'B', 'E', 'B', 'CCC', 'E', 'AAA', 'BBB']&nbsp; &nbsp; Where each string starts with a letter different than the one to the right / left of it.</p>
","-1","Question"
"77882157","","<p>I have some code that finds the indices of elements in the &quot;input&quot; list that match any element in the &quot;values&quot; list. The indices are then outputted, arranged in the same order as the &quot;values&quot; list.</p>
<pre class=""lang-py prettyprint-override""><code>input = [1, 2, 8, 7, 3, 4, 6, 5, 9]
values = [4, 8, 3]

match_index_lst, match_index_values = np.where(np.array(input) == np.array(values)[:,None])

output_indice_lst = match_index_values[np.argsort(match_index_lst)]
# [5, 2, 4]
</code></pre>
<p>My question, is whether it's possible to efficiently(using vectorized operations) expand this code to use it in specific multidimensional lists? Currently the input list is of dimension <code>c</code>, but I will be having inputs with dimensions of <code>[a, b, c]</code>. So instead of something like:</p>
<pre class=""lang-py prettyprint-override""><code>input = [1, 2, 8, 7, 3, 4, 6, 5, 9]
values = [4, 8, 3]
# output: [5, 2, 4]
</code></pre>
<p>I will have something like</p>
<pre class=""lang-py prettyprint-override""><code>input = [[[[ 0.31, 1.56, 1.58, 0.16, 0.22, 0.54, 0.98, 0.35 ]],
          [[ 0.77, 2.62, 0.44, 0.08, 0.76, 0.87, 0.88, 0.51 ]]],

         [[[ 1.14, 0.48, 1.09, 0.93, 0.47, 0.13, 0.75, 0.19 ]],
          [[ 1.15, 0.17, 2.33, 0.46, 0.30, 2.60, 0.79, 1.07 ]]]]

values = [[[[ 0.54, 1.58 ]],
           [[ 0.77, 0.88 ]]],

          [[[ 0.48, 1.09 ]],
           [[ 2.60, 2.33 ]]]]


# output: [[[[ 5, 2 ]],
#           [[ 0, 6 ]]],
#
#          [[[ 1, 2 ]],
#           [[ 5, 2 ]]]]
</code></pre>
<p>My specific example is of size <code>(2, 2, 8)</code>, but it could be any <code>(a,b,c)</code> size.</p>
<p>I've tried flattening it and then performing operations on it, but I just can't seem to get the order right after unflattening it, and then getting the output properly formatted is also a nightmare. I can see how it would be pretty easy to implement with for loops, but I want to keep that as a last resort as speed is crucial.</p>
","0","Question"
"77885853","","<p>I have a list containing several items, each containing a timestamp, a BigInt value and an alphabetic code, as follows:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th style=""text-align: left;"">Timestamp</th>
<th style=""text-align: left;"">Value</th>
<th style=""text-align: left;"">Code</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: left;"">2024-01-10 00:20:00</td>
<td style=""text-align: left;"">105.50</td>
<td style=""text-align: left;"">I</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-01-15 02:30:00</td>
<td style=""text-align: left;"">105.50</td>
<td style=""text-align: left;"">A</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-01-16 10:45:00</td>
<td style=""text-align: left;"">110.50</td>
<td style=""text-align: left;"">A</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-02-01 12:20:00</td>
<td style=""text-align: left;"">111.25</td>
<td style=""text-align: left;"">I</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-02-04 04:35:00</td>
<td style=""text-align: left;"">111.25</td>
<td style=""text-align: left;"">A</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-02-25 02:15:00</td>
<td style=""text-align: left;"">112.25</td>
<td style=""text-align: left;"">A</td>
</tr>
</tbody>
</table>
</div>
<p>I need to select all records where the year, month and value are the same; would be the duplicate occurrences. Of these duplicates, I wanted to keep only the first one, and eliminate the others. The <code>Code</code> value can be &quot;A&quot; or &quot;I&quot;, and it is indifferent. Non-duplicate records must remain in the same order as the original list.</p>
<p>A example of filtered list:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th style=""text-align: left;"">Timestamp</th>
<th style=""text-align: left;"">Value</th>
<th style=""text-align: left;"">Code</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: left;"">2024-01-10 00:20:00</td>
<td style=""text-align: left;"">105.50</td>
<td style=""text-align: left;"">I</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-01-16 10:45:00</td>
<td style=""text-align: left;"">110.50</td>
<td style=""text-align: left;"">A</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-02-01 12:20:00</td>
<td style=""text-align: left;"">111.25</td>
<td style=""text-align: left;"">I</td>
</tr>
<tr>
<td style=""text-align: left;"">2024-02-25 02:15:00</td>
<td style=""text-align: left;"">112.25</td>
<td style=""text-align: left;"">A</td>
</tr>
</tbody>
</table>
</div>
<p>How can I do this?</p>
<p>I have tryed .filter(), and .map(), without satisfactory results.</p>
","1","Question"
"77887533","","<p>the picture below is my list where i want to edit two cloumns for future analysis in data cleaning process:
<a href=""https://i.sstatic.net/3XVc9.jpg"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/3XVc9.jpg"" alt=""&quot;start_lng&quot; and &quot;end_lng&quot; columns need to be edited"" /></a></p>
<p>&quot;start_lng&quot; and &quot;end_lng&quot; columns' content are <code>dtype('O')</code> while running the code <code>Bike_share_data[&quot;start_lng&quot;].dtypes</code></p>
<p>Now i want to replace underscore (_) with the minus sign (-) and make the entire column dtypes as float.</p>
<p>i have tested a code separately as given below:</p>
<pre><code>import pandas as pd
d =[ '_1.0', '_2.0', '_3.0']

d=[s.replace('_','-') for s in d]
print(d)
</code></pre>
<p>the result is ['-1.0', '-2.0', '-3.0'].</p>
<p>but unable to implement it on Bike_share_data[&quot;start_lng&quot;] column. how can i do that?</p>
","1","Question"
"77890108","","<p>I have made a program that opens a txt doc and readlines it into a list. I created a variable with answers. How can I compare each indexed answer from my answers list to my student answers list?</p>
<p>Here is the code that I tried:</p>
<pre><code>answers = ['A','C','A','A','D','B','C','A','C','B','A','D','C','A','D','C','B','B','D','A']


def main():

    #Open the student test scores for reading.

    infile = open(&quot;C:\\Users\mrsac\OneDrive\Desktop\CS 202 Files\Module 2\Module 2 Assignment Folder\studentanswers1.txt&quot;,'r')

    #Read contents of studentanswers1.txt into a list.

    student_answers = infile.readlines()

    #Close the file.

    infile.close()

    #Strip the \n character from each element in the list.

    index = 0

    while index &lt; len(student_answers):

        student_answers[index] = student_answers[index].rstrip('\n')

        index += 1

    #Compare the answers and the student_answers for similar indexes characters

    for i in range(len(student_answers)):

        if (student_answers[i]==answers[i]):

            correct_answers = 0

            correct_answers += 1

            print('You answered ', correct_answers, 'questions correctly.')

            if correct_answers &gt;= 15:

                print('You passed the exam!')

            else:

                print('You did not pass the exam.')





main()
</code></pre>
","1","Question"
"77894071","","<p>I have a list <code>normalized_result_lists</code> containing sublists. For each sublist, I want to identify the first 10 unique elements and trim upto that element. I present the current and expected outputs.</p>
<pre><code>normalized_result_lists = [
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 1.0087281795511223,
    1.0112219451371571, 1.0187032418952617, 1.0224438902743143, 1.0286783042394014,
    1.0299251870324189, 2.0, 3.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0013812154696133, 1.0013812154696133, 1.0055248618784531, 1.0055248618784531,
    1.0055248618784531, 1.0096685082872927, 1.0138121546961325, 1.0179558011049723,
    1.020718232044199, 1.0248618784530388, 1.031767955801105, 1.0414364640883977,
    1.0524861878453038, 1.0607734806629834, 1.0662983425414365]
]

unique_elements = set()
trimmed_lists = []

for lst in normalized_result_lists:
    trimmed_list = []
    for elem in lst:
        trimmed_list.append(elem)
        unique_elements.add(elem)

        if len(unique_elements) == 10:
            break

    trimmed_lists.append(trimmed_list)

print(trimmed_lists)
</code></pre>
<p>The current output is</p>
<pre><code>[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 1.0087281795511223, 1.0112219451371571, 1.0187032418952617, 1.0224438902743143, 1.0286783042394014, 1.0299251870324189], [1.0]]
</code></pre>
<p>The expected output is</p>
<pre><code>[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 1.0087281795511223, 1.0112219451371571, 1.0187032418952617, 1.0224438902743143, 1.0286783042394014, 1.0299251870324189], 
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0013812154696133, 1.0013812154696133, 1.0055248618784531, 1.0055248618784531,
    1.0055248618784531, 1.0096685082872927, 1.0138121546961325, 1.0179558011049723,
    1.020718232044199]
</code></pre>
","0","Question"
"77894461","","<p>I have a macro that reads a file
that's formatted like this:
(H2O 50)
(O2 50)
...</p>
<p>macro looks like this:</p>
<pre><code>(defmacro readextracttolist (filevar filename nthmember listname)
  (list 'progn 
    (list 'defparameter filevar (list 'open filename))
    (list 'loop 'for 'line '= (list 'read filevar 'nil ':eof)
          'until (list 'eq 'line ':eof)
          'do
          ; (list 'print 'line)
          (list 'setq listname (list 'append listname (list 'elt 'line nthmember))))))

</code></pre>
<p>When I run command:</p>
<pre><code>(readextracttolist xx &quot;syminput_0.txt&quot; 0 usedmollist)
</code></pre>
<p>I get:</p>
<pre><code>The value
  H2O
is not of type
  LIST
</code></pre>
<p>Expecting:</p>
<pre><code>list USEDMOLLIST:

(H2O O2)
</code></pre>
","1","Question"
"77894705","","<p>I have a 2d list with the same values in some of the rows.
I would like to return only duplicates and non-duplicates from the duplicates in the rows.
For example, here is my list</p>
<pre><code>df = [[1, 2, 4, 5, 6, 2, 6,7],   # dup 2, 6
      [5, 6, 7, 22, 23, 34, 48], 
      [3, 5, 6, 7, 45, 46, 48],
      [6, 7, 14, 29, 32, 6, 29], # dup 6,29
      [6, 7, 13, 23, 33, 35, 7], # dup 7
      [1, 6, 7, 8, 9, 10, 8],    # dup 8
      [0, 2, 5, 7, 19, 7, 5]]    # dup 5,7

dup = [[2,6], [6,29], [7], [8], [5,7]]

non_dups = [[1,4,5,7], [7,14,32], [6,13,23,33,35], [1,6,7,9,10], [0,2,19]]
</code></pre>
","-1","Question"
"77894958","","<p>My task is to create a <code>list</code> containing 100 vectors: <code>c(1)</code>, <code>c(1,2)</code>, <code>c(1,2,3)</code>, ... , <code>c(1:100)</code>.</p>
<p>I tried to do it using a <code>for</code> loop, but I don't know how.</p>
<p>If possible, I would like a solution using the <code>lapply</code> function.</p>
","1","Question"
"77895327","","<p>I'm trying to answer the Leetcode question &quot;<a href=""https://leetcode.com/problems/remove-duplicates-from-sorted-array/?envType=study-plan-v2&amp;envId=top-interview-150"" rel=""nofollow noreferrer"">Remove duplicates from sorted array</a>&quot; , and I am not sure I understand the logic. This is the challenge :</p>
<blockquote>
<p>Given an integer array nums sorted in non-decreasing order, remove the
duplicates in-place such that each unique element appears only once.
The relative order of the elements should be kept the same. Then
return the number of unique elements in nums.</p>
<p>Consider the number of unique elements of nums to be k, to get
accepted, you need to do the following things:</p>
<p>Change the array nums such that the first k elements of nums contain
the unique elements in the order they were present in nums initially.
The remaining elements of nums are not important as well as the size
of nums. Return k.</p>
</blockquote>
<p>And this is one of the answers:</p>
<pre><code>class Solution:
    def removeDuplicates(self, nums: List[int]) -&gt; int:
        i,j=0,1
        while i&lt;=j and j&lt;len(nums):
            if nums[i]==nums[j]:
                j+=1
            else:
                nums[i+1]=nums[j]
                i+=1
        return i+1
</code></pre>
<p>What I don't manage to get is this :</p>
<pre><code>            if nums[i]==nums[j]:
                j+=1
</code></pre>
<p><strong>imagine we have this list of nums  [1,1,2,3,5,6,7,7,8,7],</strong></p>
<p><strong>why if value at index i == value at index j we only add 1 to j?
what I understand from this script is that it doesn't remove any duplicate (1,1), it just changes j to be 2 , and i is still smaller than j (while loop),
what am I missing here ?</strong></p>
<p>I was trying to do something like this but it fails due to index error  (I understand why but haven't solved it yet) :</p>
<pre><code>class Solution:
    def removeDuplicate(self, 
                      nums: list, 
                      ) -&gt; int:
        k=1

        for i in range(1,len(nums)):
            print(i,i-1)
            print(nums)
            if nums[i] == nums[i-1]: 
                
                del nums[i]

        return k



solution_instance = Solution()

nums = [1,1,2,3,5,6,7,7,8,7]
solution_instance.removeDuplicate(nums)

</code></pre>
","0","Question"
"77897529","","<p>It's my understanding that when a List in C# hits its capacity, it doubles said capacity. So a List with a capacity of 100 will double to 200.</p>
<p>My question is: does this happen when the 100th item is added or when the 101st item is added?</p>
<p>In other words, if I know that a List will have up to 100 items and no more, should I set the capacity to 100 or to 101 in order to prevent the cost of doubling?</p>
<p>Thanks for considering my question.</p>
","-1","Question"
"77899957","","<p>How do I make &quot;sub-variables&quot; in Python?
Basically what I want to do is have a class which has variable, which returns values like list, but if I do <code>var.subvar</code> it's gonna return just one of the values from the list.
Example:</p>
<pre><code>class Object:
  
  def _init_(self, x, y, z):
    self.position.x = x #Sets sub-variables 
    self.position.y = y 
    self.position.z = z

  #Functions

object = Object(5, 3, 1)

print(object.position) #Should print out 5, 3, 1
print(object.position.y) #Should print out 3
</code></pre>
<p>I know that I could use functions or dictionaries, but is there any other way without using any brackets?</p>
<p>I tried setting the variable names to <code>var.subvar</code>, but it wasn't that effective and I am looking for something more effective, if anything like that exists.</p>
","0","Question"
"77901197","","<p>The question is: Write a function called middle that takes a list and returns a new list that contains all but the first and last elements.</p>
<pre><code>def middle(k):
    new_number = []
    for i in k:
        if k[0]!= k and k[-1] != k:
            new_number.append(i)
        else:
            return []

numbers = [0,1,2,3,4]
print(middle(numbers))
</code></pre>
<p>I'm using python, why am I not getting an output? Btw I know slicing exists but i want to know how to do it without it.</p>
","-1","Question"
"77901275","","<p>The elements of the list are integers and strings, I want to convert them to integers first, but the program ignores the command <strong>int(i)</strong> and outputs a list with the same elements as the first list.</p>
<pre><code>lista = [2,3,4,'5','6','7']
lista_2 = []
for i in lista:
    int(i)
    lista_2.append(i)
print(lista_2)
</code></pre>
","-1","Question"
"77902753","","<p>I have got dict like this:</p>
<pre class=""lang-py prettyprint-override""><code>dict = {1: [x, y, z], 2: [x1, y1, z1]}
</code></pre>
<p>further I add another key '1e' to dict and it becomes like this:</p>
<pre class=""lang-py prettyprint-override""><code>dict = {1: [x, y, z], 2: [x1, y1, z1], '1e': [x2, y2, z2]}
</code></pre>
<p>in the end I need dict in order 1, 1e, 2.</p>
<p>so the expected result must be like that:</p>
<pre class=""lang-py prettyprint-override""><code>dict = {1: [x, y, z], '1e': [x2, y2, z2],2: [x1, y1, z1]}
</code></pre>
<p>how can I change index of 1e from 2 to 1?</p>
<p>p.s.: x value is date as a str, tried to use order by value x with different methods but nothing works. returns an error that float and str can't be sorted.
I've tried smh like this:</p>
<pre class=""lang-py prettyprint-override""><code>new_dict = OrderedDict(sorted(dict.items(), key=lambda t: t[1]))
</code></pre>
<p>and that:</p>
<pre class=""lang-py prettyprint-override""><code>new_dict = sorted(dict.items(), key=lambda x: datetime.strptime(x[1],'%Y-%m-%d'), reverse=True)
</code></pre>
<p>in the second method error is to find strptime.</p>
","-2","Question"
"77913634","","<p>Using the <code>dict(enumerate(x))</code>, we get the <code>{ (index, value) }</code>. Instead, I need <code>{ (value, index) }</code>.
So, I've written this code...</p>
<pre><code>idx= { n:i for i, n in enumerate(x)}
</code></pre>
<p>It works with some inputs and fails with others.
Here's an input where it is failing.</p>
<pre><code>x= [73,74,75,71,69,72,76,73]
</code></pre>
<p>, Why is it failing? and what should be done?</p>
","-3","Question"
"77914066","","<p>I have two lists and I want all the elements of the one list to be combined with all
the elements of the second list. I want to create a dataframe with column names of those
combinations. I am not able to keep the names of the lists while indexing by using the seq_along
function.</p>
<p>My two lists</p>
<pre><code>mylist_2 &lt;-list(c(&quot;b1&quot;, &quot;b2&quot;, &quot;b3&quot;, &quot;b4&quot;, &quot;b5&quot;, &quot;b6&quot;, &quot;b7&quot;, &quot;b8&quot;, &quot;b9&quot;))
mylist_1 &lt;-list(c(&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;, &quot;a5&quot;, &quot;a6&quot;))

#making a vector with the length of multuplying the two:
mylist_f &lt;- vector(&quot;list&quot;, length = length(mylist_1)*length(mylist_2))
</code></pre>
<p>I want to have a dataframe and the column names will be their combination</p>
<pre><code>datafr &lt;- expand.grid(i = seq_along(mylist_2), j = seq_along(mylist_1))[2:1]

## an under score will connect the indexing
data_fr &lt;- apply(data_fr, 1, paste, collapse = &quot;_&quot;)
names(mylist_f) &lt;- datafr
</code></pre>
<p>What I get is:</p>
<pre><code>&gt;[1] &quot;1_1&quot; &quot;1_2&quot; &quot;1_3&quot; &quot;1_4&quot; &quot;1_5&quot; &quot;1_6&quot; &quot;1_7&quot; &quot;1_8&quot; &quot;1_9&quot; &quot;2_1&quot; &quot;2_2&quot; &quot;2_3&quot; &quot;2_4&quot; &quot;2_5&quot; &quot;2_6&quot;
[16] &quot;2_7&quot; &quot;2_8&quot; &quot;2_9&quot; &quot;3_1&quot; &quot;3_2&quot; &quot;3_3&quot; &quot;3_4&quot; &quot;3_5&quot; &quot;3_6&quot; &quot;3_7&quot; &quot;3_8&quot; &quot;3_9&quot; &quot;4_1&quot; &quot;4_2&quot; &quot;4_3&quot;
[31] &quot;4_4&quot; &quot;4_5&quot; &quot;4_6&quot; &quot;4_7&quot; &quot;4_8&quot; &quot;4_9&quot; &quot;5_1&quot; &quot;5_2&quot; &quot;5_3&quot; &quot;5_4&quot; &quot;5_5&quot; &quot;5_6&quot; &quot;5_7&quot; &quot;5_8&quot; &quot;5_9&quot;
[46] &quot;6_1&quot; &quot;6_2&quot; &quot;6_3&quot; &quot;6_4&quot; &quot;6_5&quot; &quot;6_6&quot; &quot;6_7&quot; &quot;6_8&quot; &quot;6_9&quot;
</code></pre>
<p>I am getting the indexing of the two lists but I would like to keep the name of the lists,I would like to get:</p>
<pre><code>&quot;a1_b1&quot;, &quot;a1_b2&quot;, &quot;a1_b3&quot;,......&quot;a1_b9&quot;, 
&quot;a2_b1&quot;, &quot;a2_b2&quot;,.....&quot;a2_b9&quot;, &quot;a3_b1&quot;, &quot;a3_b2&quot;, &quot;a3_b3&quot;.....&quot;a3_b9&quot;,.....
</code></pre>
<p>Any ideas how to keep the name of the lists on the columns of the dataframe?</p>
","1","Question"
"77916513","","<p>I have the following list of dictionaries</p>
<pre><code>&quot;tor_vlan_list&quot;: [
    {
        &quot;switch_01&quot;: {
            &quot;Vlan1&quot;: {
                &quot;id&quot;: &quot;1&quot;,
                &quot;ip&quot;: &quot;unassigned&quot;,
                &quot;ok&quot;: &quot;NO&quot;,
                &quot;protocol&quot;: &quot;down&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan10&quot;: {
                &quot;id&quot;: &quot;10&quot;,
                &quot;ip&quot;: &quot;10.10.10.2/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan20&quot;: {
                &quot;id&quot;: &quot;20&quot;,
                &quot;ip&quot;: &quot;10.10.20.2/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan30&quot;: {
                &quot;id&quot;: &quot;30&quot;,
                &quot;ip&quot;: &quot;10.10.30.2/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            }
        }
    },
    {
        &quot;switch_02&quot;: {
            &quot;Vlan1&quot;: {
                &quot;id&quot;: &quot;1&quot;,
                &quot;ip&quot;: &quot;unassigned&quot;,
                &quot;ok&quot;: &quot;NO&quot;,
                &quot;protocol&quot;: &quot;down&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan10&quot;: {
                &quot;id&quot;: &quot;10&quot;,
                &quot;ip&quot;: &quot;10.10.10.3/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan20&quot;: {
                &quot;id&quot;: &quot;20&quot;,
                &quot;ip&quot;: &quot;10.10.20.3/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            },
            &quot;Vlan30&quot;: {
                &quot;id&quot;: &quot;30&quot;,
                &quot;ip&quot;: &quot;10.10.30.3/24&quot;,
                &quot;ok&quot;: &quot;YES&quot;,
                &quot;protocol&quot;: &quot;up&quot;,
                &quot;status&quot;: &quot;up&quot;
            }
        }
    }
]
</code></pre>
<p>from this, i need to extract the list of vlan IDs for each switch and store these as follows</p>
<pre><code>&quot;new_list&quot;: [
    { 
     &quot;switch_01&quot;: [1,10,20,30]
    },
    {
     &quot;switch_02&quot;: [1,10,20,30]
    }
]
</code></pre>
<p>I would like to pass the list values as a var in the command *show vlan {{item}}&quot;</p>
<p>I've tried getting the needed detail using combinations of selectattr, map, combine, json_query, etc to set a new ansible fact but, all have eluded me.</p>
","0","Question"
"77916879","","<p>I am trying to append something to an empty list but and error comes up saying that it doesn't not work on a tuple although it is a list.</p>
<p>Here is the code</p>
<pre><code>l = []
u = [31536000, 86400, 3600, 60]
z = 157310805

for i in u:
    l.append(z), z %= i
</code></pre>
<p>the error says this:</p>
<pre><code>Traceback (most recent call last):
  File &quot;/workspace/default/tests.py&quot;, line 2, in &lt;module&gt;
    from solution import format_duration
  File &quot;/workspace/default/solution.py&quot;, line 10
    l.append(z), z %= i
    ^^^^^^^^^^^^^^
SyntaxError: 'tuple' is an illegal expression for augmented assignment
</code></pre>
","-3","Question"
"77917582","","<p>ok so i have a code that makes (n)lists in one list like for example</p>
<pre><code>[[1,1,0,0],[0,1,1,0],[0,0,1,1],[1,0,0,1]]
</code></pre>
<p>Where it would print each as</p>
<pre><code>[1 1 0 0]
[0 1 1 0]
[0 0 1 1]
[1 0 0 1]
</code></pre>
<p>Here is the code</p>
<pre><code>import random
vertical=[]
horizontal=[]
size=int(input(&quot;Size? (even) &quot;))
area=size**2
half=int(area//2)
thechosenhalf=random.sample(range(1, area), half) #generates numbers
# 1 2 3 4 5 6 7 8 (size = 4)
def printgrid():
    for b in range(size):
        print(f&quot;{b}&quot;, end=&quot;&quot;)
        print(&quot;[&quot; + &quot; &quot;.join([str(i) for i in vertical[b]])+ &quot;]&quot;)
    print(f&quot;  &quot;, end=&quot;&quot;)
    for b in range(size):
        print(f&quot;{b}&quot;, end=&quot; &quot;)
for j in range(size):
    for i in range(size):
        horizontal.append(0)
    vertical.append(horizontal)
    horizontal=[]
printgrid()
</code></pre>
<p>the code above me would print it like</p>
<pre><code>0[0 0 0 0]
1[0 0 0 0]
2[0 0 0 0]
3[0 0 0 0]
  0 1 2 3 
</code></pre>
<p>Im confused on how to make it so the generated numbers
where 1 = vertical[0][0] 2 = vertical[0][1]</p>
<p>So if thechosenhalf were numbers from 1 to 8 it would change
from</p>
<pre><code>0[0 0 0 0]
1[0 0 0 0]
2[0 0 0 0]
3[0 0 0 0]
  0 1 2 3 
</code></pre>
<p>to</p>
<pre><code>0[1 1 1 1]
1[1 1 1 1]
2[0 0 0 0]
3[0 0 0 0]
  0 1 2 3 
</code></pre>
<p>and if thechosenhalf were numbers 12 5 16 2 8 9 15 3 it would change
from</p>
<pre><code>0[0 0 0 0]
1[0 0 0 0]
2[0 0 0 0]
3[0 0 0 0]
  0 1 2 3 
</code></pre>
<p>to</p>
<pre><code>0[0 1 1 0]
1[1 0 0 1]
2[1 0 0 1]
3[0 0 1 1]
  0 1 2 3 
</code></pre>
","0","Question"
"77924481","","<p>I started to implement a list and got stuck at the <code>end()</code> iterator function. My understanding is that <code>end()</code> should point one element after the last member of the list. But since in a list elements are not contiguous in memory how can we point to one position after the last one?</p>
<p>And one extra question, how can we have <code>operator--</code>? If previous element points to current one, so current one do not have the knowledge about the previous.</p>
<pre><code>#include &lt;iostream&gt;

template&lt;typename T&gt;
class Node
{
public:
    Node(const T _value) : value(_value) {}

    T value;
    std::shared_ptr&lt;Node&lt;T&gt;&gt; next = nullptr;
};

template&lt;typename T&gt;
class List
{
public:

    class Iterator
    {
    public:
        Iterator(std::shared_ptr&lt;Node&lt;T&gt;&gt; node) : m_node(node) {}

        T&amp; operator*()
        {
            return m_node-&gt;value;
        }

    private:
        std::shared_ptr&lt;Node&lt;T&gt;&gt; m_node;
    };

    void insert_back(const T value)
    {
        auto node = std::make_shared&lt;Node&lt;T&gt;&gt;(value);

        if (!m_node)
            m_node = node;
        else
        {
            node-&gt;next = m_node;
            m_node = node;
        }
    }

    Iterator begin()
    {
        if (!m_node)
            return Iterator(nullptr);

        auto node = m_node;
        while(node-&gt;next)
            node = node-&gt;next;

        Iterator it(node);
        return it;
    }

    // Iterator end(){} // ?

private:
    std::shared_ptr&lt;Node&lt;T&gt;&gt; m_node = nullptr;
};

void test()
{
    List&lt;int&gt; list;

    list.insert_back(4);
    list.insert_back(2);

    auto beg = list.begin();
    std::cout &lt;&lt; &quot;beg is: &quot; &lt;&lt; *beg &lt;&lt; std::endl;

    // auto end = list.end();
    // std::cout &lt;&lt; &quot;end is: &quot; &lt;&lt; *end &lt;&lt; std::endl;
}

int main()
{
    std::cout &lt;&lt; &quot;starting...&quot; &lt;&lt; std::endl;

    test();

}
</code></pre>
","4","Question"
"77924690","","<p>I have a DataFrame like this:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>ID</th>
<th>MS</th>
<th>DS</th>
</tr>
</thead>
<tbody>
<tr>
<td>654</td>
<td>1500,10000,20000,30000</td>
<td>60,365,730</td>
</tr>
<tr>
<td>131</td>
<td>1500,10000,20000</td>
<td>60,365,730</td>
</tr>
<tr>
<td>598</td>
<td>1500,10000,20000,30000</td>
<td>60,365,730</td>
</tr>
</tbody>
</table>
</div>
<p>The desired output looks like this:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>ID</th>
<th>MS</th>
<th>DS</th>
</tr>
</thead>
<tbody>
<tr>
<td>654</td>
<td>1500</td>
<td>60</td>
</tr>
<tr>
<td>654</td>
<td>10000</td>
<td>365</td>
</tr>
<tr>
<td>654</td>
<td>20000</td>
<td>730</td>
</tr>
<tr>
<td>654</td>
<td>30000</td>
<td>Nan</td>
</tr>
<tr>
<td>131</td>
<td>1500</td>
<td>60</td>
</tr>
<tr>
<td>131</td>
<td>10000</td>
<td>365</td>
</tr>
<tr>
<td>131</td>
<td>20000</td>
<td>730</td>
</tr>
<tr>
<td>598</td>
<td>1500</td>
<td>60</td>
</tr>
</tbody>
</table>
</div>
<p>I have tried the following code:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import zip_longest

df.apply(lambda row: list(zip_longest(row['MS'], 
                                  row['DS'], 
                                  fillvalue = 'Nan')),axis = 1)
</code></pre>
<p>This did not work as expected, as it creates a Series with list values like this: <code>[('1500,10000,20000,30000', '60,365,730')], [('1500,10000,20000', '60,365,730')]</code>.</p>
","1","Question"
"77926314","","<p>I have a list that i want to append another list on certain conditions.</p>
<p>The structure looks like this:</p>
<pre><code>&lt;ul class=&quot;menu&quot;&gt;
&lt;li class=&quot;list-1&quot;&gt;&lt;ul class=&quot;ul-1&quot;&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;list-2&quot;&gt;&lt;ul class=&quot;ul-2&quot;&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;list-3&quot;&gt;&lt;ul class=&quot;ul-3&quot;&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;list-4 empty-list&quot;&gt;&lt;/li&gt;
&lt;li class=&quot;list-5&quot;&gt;&lt;ul class=&quot;ul-5&quot;&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>I want the list-4 empty-list, to be inside the list before it. So in this case,inside list-3, if the list is empty. I have made a check to check if lists are empty, thats why the list-4 has a class callled empty-list.</p>
<p>Can it be done with javascript? I have had trouble researching to a solution, also because i an not 100% sure how to describe it.</p>
<p>Thanks</p>
<p>I tried something like this:</p>
<pre><code>document.addEventListener('DOMContentLoaded', function () {
    var listItems = document.querySelectorAll('.list');

    listItems.forEach(function (listItem, index) {
      var nextSibling = listItem.nextElementSibling;

      if (nextSibling &amp;&amp; nextSibling.classList.contains('list-')) {
        var emptyList = listItem.querySelector('.empty-list');

        if (emptyList) {
          nextSibling.appendChild(emptyList);
        }
      }
    });
  });
</code></pre>
<p>I am still new to this sort of coding, so tried my best.</p>
","-1","Question"
"77927315","","<p>I have a list of dictionaries.</p>
<ul>
<li>Dictionary keys are Cisco Switch names</li>
<li>Dictionary values are vlan IDs that are configured on the corresponding switch</li>
</ul>
<pre class=""lang-json prettyprint-override""><code>&quot;switch_vlan_ids&quot;: [
    {
        &quot;switch01&quot;: [&quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot;]
    },
    {
        &quot;switch02&quot;: [&quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;]
    }
]
</code></pre>
<p>I'm attempting to loop through each switch and, on each switch, loop through each <em>ID</em> so that I can pass this ID to a command, eg <code>show vlan {{id}}</code></p>
<p>The end goal, connect to a bunch of switches, verify that for each switch that the switch ports are configured for each vlan ID and, report an error/fail if not.</p>
<p>I tried a nested loop but, the inner loop complains that the outer loop loop_var isn't defined</p>
<pre class=""lang-yaml prettyprint-override""><code> - name: Outer loop - Iterate through TOR Switches
   ansible.builtin.debug:
     msg: &quot;TOR Name: {{ tor_item.key }}&quot;
   loop: &quot;{{ switch_vlan_ids | map('dict2items') | flatten }}&quot;
   loop_control:
     loop_var: tor_item

 - name: Inner loop - Iterate through VLAN IDs
   ansible.builtin.debug:
     msg: &quot;VLAN ID: {{ id_item.value }}&quot;
   loop: &quot;{{ tor_item.value }}&quot;
   loop_control:
     loop_var: id_item
</code></pre>
<p>I've also attempted to just loop through the ID values but, this doesn't give the switch name so, if there's an error, I can't report the name of the switch with the error</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: Set fact to loop through the tor_vlan_is_list values
  ansible.builtin.set_fact:
    switch_vlan_id_values: &quot;{{ switch_vlan_ids | json_query('[].values(@)') | flatten }}&quot;
- debug: var=switch_vlan_id_list_values
</code></pre>
<p>the above returns</p>
<pre class=""lang-yaml prettyprint-override""><code>&quot;switch_vlan_id_values&quot;: [&quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot;, &quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;]
</code></pre>
<p>I've even tried a Jinja filter like below but abandoned it as I have no idea how I'd pass the values to an API call</p>
<pre class=""lang-yaml prettyprint-override""><code>- name: blah
  set_fact: | 
    {% for switch in switch_vlan_ids %}
    {% for name,ids in switch.items() %}
    {% for id in ids %}
</code></pre>
","1","Question"
"77928222","","<p>I have a dataset df_ae.
I have created a list of modalities:</p>
<pre><code>main_modals &lt;- c(&quot;X ray Units Static&quot;, &quot;X ray Units Mobile&quot;, &quot;CT&quot;, &quot;Mammography&quot;, &quot;MRI&quot;, &quot;Nuclear Medicine&quot;, &quot;Ultrasound&quot;)
</code></pre>
<p>I want to create a new column which will give &quot;priority&quot; if one of the main modals is present in the &quot;modality&quot; column and &quot;non-priority&quot; if none of the main modals are present.</p>
<p>I tried the following code:</p>
<pre><code>df_ae$main_modal &lt;- df_ae %&gt;% ifelse(Modality == main_modals, &quot;PRIORITY&quot;, &quot;NON-PRIORITY&quot;)
</code></pre>
<p>But I get the following error:</p>
<pre><code>Error in ifelse(., Modality == main_modals, &quot;PRIORITY&quot;, &quot;NON-PRIORITY&quot;) : 
  unused argument (&quot;NON-PRIORITY&quot;)
</code></pre>
","0","Question"
"77928775","","<p>Let's say we have a list: <code>['a','b','c','d']</code><br />
The output must be:</p>
<pre class=""lang-none prettyprint-override""><code>abcd
abdc
acbd
acdb
adbc
adcb
bacd
badc
bcad
bcda
bdac
bdca
cabd
cadb
cbad
.....
</code></pre>
<p>and so on.</p>
<p>I can make the program if I knew the number of elements in the list,
but the list is given by the user (consider that the user gives a list of unique elements).</p>
<pre><code>l = ['a', 'b', 'c', 'd']
for h in l: 
    for i in l:
        ll = [h+i+j+k for j in l for k in l if len([h,i,j,k])==len(set([h,i,j,k]))] 
        for m in ll:
            print(m)
</code></pre>
<p>This program gave me the above output.</p>
<p>If I wanted for 3 elements I could remove a <code>for</code> loop or if I wanted for 5 elements I could add a <code>for</code> loop,
but the program has to consider the number of elements at runtime and give output.
Basically I am looking for a generalized algorithm that can handle any number of elements.</p>
<p>I think recursion is the way but don't know how to do it.
Also tried to do it without <em>itertools</em> permutation method.</p>
<p>Any help will be appreciated.</p>
","1","Question"
"77928909","","<p>I'm facing a peculiar situation that has caused me to lose hours of work, and I'm eager to understand what's happening behind the scenes.</p>
<p>Here is my simplified view:</p>
<pre><code>struct ToggleTextButton: View {
   var titles: [String]
   
   var body: some View {
     HStack {
       ForEach(titles, id: \.self) { title in
                      Button(action: {
                          didSelect(title)
                      }) {
                          Text(title)
                              .padding()
                              .background(.blue)
                              .foregroundColor(.white)
                              .clipShape(Capsule())
                      }
                  }
     }
   }

   func didSelect(_ title: String) {
     print(&quot;Will select:&quot;, title)
   }
 }
</code></pre>
<p>And here's a simple example:</p>
<pre><code>List {
  ToggleTextButton(titles: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
  // other ToggleTextButton...
}
</code></pre>
<p>When pressing the button titled &quot;A&quot;,  I would expect the output to be:</p>
<p><code>Will select: A</code></p>
<p>However, here's the actual output:</p>
<pre><code>Will select: A
Will select: B
Will select: C
</code></pre>
<p>This issue occurs only inside a List. That means if I use a ScrollView and a VStack, everything works as expected.</p>
<p>Can someone explain what's going on?</p>
","2","Question"
"77930689","","<p>This is for my coding class.I have to write a program that lets the user enter a string and displays the character that appears most frequently in the string. I cannot use the max or the count functions. I am completely lost beyond this example that my book has pretty much.</p>
<p>I tried this:</p>
<pre class=""lang-py prettyprint-override""><code># lst = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]


def main():


    count = 0

    my_sentence = input(&quot;Enter a sentence: &quot;)

    for ch in my_sentence:
        if ch == 'T' or ch == 't':
            count += 1
    

    print('The letter T appears', count, 'times.')


main()
</code></pre>
<p>Which works for finding specific letters, but I just cannot for the life of me even begin to understand what I would do to find the most used letter in any sentence entered. I may be stupid. I've been trying to solve this problem for 10+ hours and I can't think anymore.</p>
","1","Question"
"77930809","","<p>hey I have a issue where i want to remove some elements from a list, the problem is it change the index and them don't know how to remove the index that actually need next</p>
<p>so it remove &quot;salt&quot; but them it dont remove &quot;sugar&quot;, i asume is because the index pass from 0-9 to 0-8 in the next iteration</p>
<p>result it give: <code>[&quot;apple&quot;, &quot;orange&quot;, &quot;pepper&quot;, &quot;orange&quot;, &quot;cake&quot;, &quot;tree&quot;, &quot;tree&quot;, &quot;leaf&quot;, &quot;sugar&quot;]</code></p>
<p>result I want: <code>[&quot;apple&quot;, &quot;orange&quot;, &quot;pepper&quot;, &quot;orange&quot;, &quot;cake&quot;, &quot;tree&quot;, &quot;tree&quot;, &quot;leaf&quot;]</code></p>
<pre><code>#list to match
fi_names = [&quot;apple&quot;, &quot;orange&quot;, &quot;pepper&quot;, &quot;orange&quot;, &quot;cake&quot;, &quot;tree&quot;, &quot;tree&quot;, &quot;leaf&quot;]

#list to modify to match the first one
se_names = [&quot;apple&quot;, &quot;orange&quot;, &quot;pepper&quot;, &quot;orange&quot;, &quot;cake&quot;, &quot;tree&quot;, &quot;tree&quot;, &quot;leaf&quot;, &quot;salt&quot;, &quot;sugar&quot;]

#susbtract list to get x_names = [&quot;salt&quot;, &quot;sugar&quot;]
x_names = list( set(se_names) - set(fi_names) )

#iterate in the second list to try to remove the extra elements by index
for i, e in enumerate(se_names):
    if e in x_names:
        se_names.pop(i)

print(se_names)
</code></pre>
","-1","Question"
"77933909","","<p>I am working on a lab for a C++ course. My current code gives me most but not all points available for this lab. I can't quite seem to get the code to print correctly. I've tried many possible ways of printing the code. On my closest attempts, the printed output seems to be missing a new line at the end of the last row. I would be most appreciative for any suggestions.</p>
<p>The assignment stated the following:</p>
<blockquote>
<p><strong>Hailstone sequence</strong><br />
Given a positive integer n, the following rules will always create a sequence that ends with 1, called the hailstone sequence:</p>
<p>If n is even, divide it by 2 If n is odd, multiply it by 3 and add 1 (i.e. 3n +1) Continue until n is 1 Write a program that reads an integer as input and prints the hailstone sequence starting with the integer entered. Format the output so that ten integers, each separated by a tab character (\t), are printed per line.</p>
<p>The output format can be achieved as follows: print(n, end='\t')</p>
<p>Ex: If the input is:<br />
<code>25</code></p>
<p>the output is:</p>
<pre class=""lang-none prettyprint-override""><code>25   76   38   19   58   29   88   44   22   11 
34   17   52   26   13   40   20   10   5    16 
8    4    2    1
</code></pre>
</blockquote>
<p>My program below works but the auto-grader just wants me to have the exact match to what they have which has having a new line at the last number.</p>
<pre><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int n; 
    int counter = 1;
    cin &gt;&gt; n;
    cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;

    while ( n &gt;1) {
        if ( n%2 == 0) {
            n = n /2;
            cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;
        }
        else {
            n = 3 * n + 1;
            cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;
        }
        counter++;
        if ( counter % 10 ==0) {
            cout &lt;&lt; endl;
        }
    }
    return 0;
}
</code></pre>
<p>Here is the auto grader telling what I need to fix:<a href=""https://i.sstatic.net/HLXXJ.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/HLXXJ.png"" alt=""Zybooks auto-grader"" /></a></p>
<p>I really don't understand, how it could be done?</p>
<p>Well I tried adding the <code>&quot;\t&quot;</code> new tab but it give me an error of not being a new line at every 10 number, so I changed the program back to endl:
<code>cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;</code></p>
<p>so I really don't understand why the auto grader is so finicky.</p>
","-1","Question"
"77935460","","<p>I am creating a string using f string and need to avoid fields which are None.</p>
<p>I am currently using below code</p>
<pre><code>def output(self) -&gt; str:
        data = ''
        data += 'Books: [\n'
        for bookid, firstname, lastname in zip(self.book_id, self.first_name, self.last_name):
            data += f'{{book_id: &quot;{bookid}&quot;, first_name: &quot;{firstname}&quot;,last_name : &quot;{lastname}&quot;}},\n'
        data = data [:-2] + '\n'
        data += ']\n'
        return data
</code></pre>
<p>I get below output:</p>
<blockquote>
<p>Books: [    {
book_id: &quot;123&quot;,
first_name: &quot;John&quot;,
last_name: &quot;None&quot;    },
{
book_id: &quot;567&quot;,
first_name: &quot;Merry&quot;,
last_name: &quot;Jones&quot;    } ]</p>
</blockquote>
<p>How to ensure that None fields should not be part of the string in the for loop. I want the output as below:</p>
<blockquote>
<p>Books: [    {
book_id: &quot;123&quot;,
first_name: &quot;John&quot;},
{
book_id: &quot;567&quot;,
first_name: &quot;Merry&quot;,
last_name: &quot;Jones&quot;} ]</p>
</blockquote>
","1","Question"
"77949551","","<p>To build a raster from a grid in list format I use the raster pckg:</p>
<pre><code># building a grid
grd &lt;- list(x = (1:10), y = (1:10), z = matrix(1:100, 10, 10))
class(grd)
[1] &quot;list&quot;

# grid to RasterLayer
r = raster(grd)
r
class      : RasterLayer 
dimensions : 10, 10, 100  (nrow, ncol, ncell)
resolution : 1, 1  (x, y)
extent     : 0.5, 10.5, 0.5, 10.5  (xmin, xmax, ymin, ymax)
crs        : +proj=longlat +datum=WGS84 +no_defs 
source     : memory
names      : layer 
values     : 1, 100  (min, max)
</code></pre>
<p>Very simple. However, as the raster package is being replaced by terra, I want to adapt my scripts, but with terra I can't find an easy way to convert the grid to SpatRaster. Has anyone found solutions to this?</p>
<p>I have tried <code>rast()</code> but it doesn´t work</p>
<pre><code>r2 = rast(grd)
</code></pre>
<blockquote>
<p>Error: [rast,list] none of the elements of x are a SpatRaster</p>
</blockquote>
<p>The solution cannot be to change the way the grid is created because this is a simplified example. The lists are more complex, they come out in that format after going through an interpolation function.
Thanks.</p>
","0","Question"
"77956765","","<p>I have the following code:</p>
<pre><code>oldlist = [42, 72, 32, 4, 94, 82, 67, 67, 89, 89, 89, 89, 5, 90, 5, 5]

def removeodds(thing):
    for i in reversed(thing):
        icount = thing.count(i)
        if icount % 2 &gt; 0:
            while i in thing:
                thing.remove(i)
    return thing

newlist = removeodds(oldlist)
print(newlist)
</code></pre>
<p>This is the whole program.</p>
<p>The function is supposed to go over the list and look for any numbers that are repeated an odd number of times in the list. Then remove them in the while loop.</p>
<p>It does this by starting the for loop with i.</p>
<p>It then uses the count() function to see how many times the element i appears in the list (icount).
If icount, when divided by two, has a remainder, it would be an odd number. A while loop then goes over the list until i is removed.</p>
<p>I have the list being iterated over in reverse, because if it goes the other way, the elements shift in the list when they are being removed and the for loop ends up skipping indexes.</p>
<p>However, in the above program, when you run it, the for loop stops at 90 and then sends the list back, showing the following result:</p>
<pre><code>[42, 72, 32, 4, 94, 82, 67, 67, 89, 89, 89, 89, 90] 
</code></pre>
<p>I cannot figure out why it is doing this. It is supposed to show the following:</p>
<pre><code>  [67, 67, 89, 89, 89, 89] 
</code></pre>
<p>I tried adding numbers to the list and changing things around.
If you add another 5, in between 5 and 90, the program works.
However, the current list always stops the for loop at 90.
Once ran, the function is supposed to return a list that only includes numbers that appear in the list an even number of times.</p>
<p>Edit: I've read <a href=""https://stackoverflow.com/questions/6260089/strange-result-when-removing-item-from-a-list-while-iterating-over-it-in-python"">the other post</a> that was suggested as my question already being asked. But I should clarify that I cannot use list comprehension or other one-line comprehensions for this, and the function has to be an <em>in-place algorithm</em> (no new lists). Also, I want to reiterate that the program <strong>works</strong> when you add another 5, in between 5 and 90 in the list. However, when you run the function with the current above list, it doesn't work.</p>
<p>I was hoping someone would be able <em>to see <strong>why</strong> the function is acting like this and explain</em>, but I suppose what I can do is just mark all the elements that I want to get rid of and then remove them afterwards.</p>
<p>Edit 2: Just wanted to add that I found the solution:</p>
<pre><code>oldlist = [42, 42, 72, 42, 72, 4, 94, 82, 67, 67, 89, 89, 89, 89, 5, 90, 5, 5]

def removeodds(thing):
    for i in thing[::-1]:
        icount = thing.count(i)
        if icount % 2 &gt; 0:
            while i in thing:
                thing.remove(i)
    return thing

newlist = removeodds(oldlist) print(newlist)
</code></pre>
","0","Question"
"77958481","","<pre><code>set.seed(1)
d.A.100 = data.frame(x=runif(10), y = runif(10))
d.A.200 = data.frame(x=runif(10), y = runif(10))
d.B.100 = data.frame(x=runif(10), y = runif(10))
d.B.200 = data.frame(x=runif(10), y = runif(10))

mylist = list(d.A.100, d.A.200, d.B.100, d.B.200)
unlisted = do.call(rbind, mylist)
</code></pre>
<p>Let's say you make a list of dataframes like above and then you unlist them. I know I can just do a basic rbind but for later reasons this is how the data go. How can I add the name of the dataframe back into the unlisted dataframe so I have a new column 'dataname' equals to the name of the dataframe where those rows came from?</p>
","0","Question"
"77967752","","<p>Id like to write a script in python that can return a list of boolean value, that changes the value based on whether or not it hits a keyword.</p>
<p>Example: if I have a list</p>
<pre><code>[&quot;hello&quot;, &quot;what&quot;, &quot;switch&quot;, &quot;am&quot;, &quot;i&quot;, &quot;doing&quot;, &quot;switch&quot;, &quot;here&quot;]
</code></pre>
<p>I need to get it to return:</p>
<pre><code>[True, True, False, False, False, False, True, True]
</code></pre>
<p>essentially it'll change the boolean value (always beginning as true) for itself and the following elements until it hits the keyword (switch in this case).</p>
<p>So far I've gotten it to only change the switch keyword itself to false.</p>
<p>My code looks like this:
(I know where I am going wrong and why its only changing one element, this is just where I got stuck on the problem)</p>
<pre><code>def flick_switch(lst):
    x = []
    for i in lst:
        if i == &quot;switch&quot;:
            x.append(False)
        else:
            x.append(True)
</code></pre>
","1","Question"
"77967972","","<p><code>96467,2</code></p>
<p><code>96466,3 </code></p>
<p><code>93015,1 </code></p>
<p><code>4466,1 </code></p>
<p><code>90721,1 </code></p>
<p><code>96239,1 </code></p>
<p><code>96241,1 </code></p>
<p><code>93024,1</code></p>
<p>Hey guys, I hope you are all fine.
I have numerous text files containing lists similar to the one shown above. Previously, I ought to merge these lists into a single text file using the command-line script:</p>
<pre><code>copy *.txt merged_file.txt 
</code></pre>
<p>Now, I want to improve this process by appending the names of the respective text files next to each item when copying them to the new merged file. The desired output format should have each item followed by the name of the file it originated from, separated by a hash sign (#). For clarity, the format should look like this:</p>
<p><code>96467,2#19.txt </code></p>
<p><code>96466,3#19.txt </code></p>
<p><code>93015,1#19.txt </code></p>
<p><code>4466,1#19.txt </code></p>
<p><code>90721,1#KAfa.txt </code></p>
<p><code>96239,1#KAfa.txt </code></p>
<p><code>96241,1#KAfa.txt </code></p>
<p><code>93024,1#KAfa.txt </code></p>
<p><code>93022,1#Tall.txt</code></p>
<p>I appreciate any kind of help.</p>
<p>I expect that my issue be solved through command line commmand without the use of python.</p>
","-1","Question"
"77972394","","<p>I have a Table i am generating using a List (Baseline_Data).</p>
<p>I can get this to print to the terminal fine using:</p>
<pre><code>for row in Baseline_Data:
    # Display List as Table
    print('\t'.join(row))
</code></pre>
<p>What i cant get to work is for this to display in my Tkinter GUI. I found the best way to achieve this would be to generate a label and configure the text.</p>
<p>I have tried:</p>
<pre><code>Import_Lab.config(text=(&quot;\t&quot;.join(row)))
</code></pre>
<p>Which only displays the last row of my List</p>
<pre><code>Import_Lab.config(text=('\n'.join(row)))
</code></pre>
<p>Which does the same but displays it as a column</p>
<pre><code>Import_Lab.config(text=(Baseline_Data))
</code></pre>
<p>Which displays the full List but as one long continuous line.</p>
<p>How do i display this List as a Multi-line Label ?</p>
<pre><code>import tkinter as tk
from tkinter import ttk
from tkinter import *

root = Tk()
note = ttk.Notebook(root)

def Import_Button1_Press():

    Baseline_Data = [
    ['     IM      |', 'IM.Ser', 'Maj', 'Min', 'IIB.Ser', 'Maj', 'Min', 'ManfDate'],
    ['---------------------------------------------------------------------------'],
    ['1 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM4 |', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA'],
    ['1 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM4 |', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA'],
    ['2 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;]
    ]

    for row in Baseline_Data:
        # Display List as Table
        print('\t'.join(row))

Tab1 = ttk.Frame(note)

canvas1 = Canvas(Tab1, width=550, height=350)
canvas1.pack()

Tab2 = ttk.Frame(note)

canvas2 = Canvas(Tab2, width=550, height=350)
canvas2.pack()

Import_Button1 = tk.Button(Tab2, text = 'Import XML [Baseline]', width=25, height=2, command=Import_Button1_Press)
Import_Button_Window = canvas2.create_window(25, 40, anchor = 'w', window = Import_Button1)

Import_Lab = Label(Tab2, anchor=W)
Import_Lab_Window = canvas2.create_window(275, 175, anchor = 'center', window = Import_Lab)

note.add(Tab1, text = &quot; Main &quot;)
note.add(Tab2, text = &quot; Baseline Data &quot;)

note.pack()
root.mainloop()
</code></pre>
","1","Question"
"77973417","","<p>I have been scratching my head trying to figure this out. How do I use foldr1 (or any other fold for that matter) in order to get the sum of tuples in a list.</p>
<p><strong>Example:</strong></p>
<pre><code>list = [(1,2), (3,4)]
sum = 10
</code></pre>
<p>I've tried <code>foldr1 (\x y -&gt; fst(x) + snd(x) + y) [(1,2),(3,4)]</code> but it doesn't work and I suspect that it has to do with the the types being created while executing the fold not being tuples.</p>
<p>When I run the command described above I get this:</p>
<pre><code>foldr1 (\x y -&gt; fst(x) + snd(x) + y) [(1,2),(3,4)]

• Occurs check: cannot construct the infinite type: a ~ (a, a)
    • In the second argument of ‘(+)’, namely ‘y’
      In the expression: fst (x) + snd (x) + y
      In the first argument of ‘foldr1’, namely
        ‘(\ x y -&gt; fst (x) + snd (x) + y)’
    • Relevant bindings include
        y :: (a, a) (bound at &lt;interactive&gt;:30:12)
        x :: (a, a) (bound at &lt;interactive&gt;:30:10)
        it :: (a, a) (bound at &lt;interactive&gt;:30:1)
</code></pre>
<p>What am I doing wrong? Is the fold function not meant for this (I've solved this using sum and map together and it got the right answer)?</p>
","1","Question"
"77973671","","<p>I have a string like this:</p>
<pre><code>Given_String = &quot;&quot;&quot;\
Shoes
Fruits
 Red
  Apple
  Cherry
 !
 Yellow
  Banana
  Grapes
   Small
   Big
  !
 !
!
&quot;&quot;&quot;
</code></pre>
<p>I want to convert it into a list of path strings:</p>
<pre><code>[&quot;Shoes&quot;,
&quot;Fruits/Red/Apple&quot;,
&quot;Fruits/Red/Cherry&quot;,
&quot;Fruits/Yellow/Banana&quot;,
&quot;Fruits/Yellow/Grapes/Small&quot;,
&quot;Fruits/Yellow/Grapes/Big&quot;]
</code></pre>
<p>I tried removing the '!' and replacing front spaces with &quot;/&quot;, but I couldn't find any way.</p>
","0","Question"
"77977824","","<p>Here I made two lists:</p>
<pre><code>print(list) #[['5', '6', '7'], ['1', '2', '3', '4', '5', '6', '7']]
print(list4) #[['5', '6', '7'], ['3', '1', '8']]

index = str(list4[0:][0]).index(list[0][0])

print(index) #output: 2??

</code></pre>
<p>after putting it through .index() it returns 2, what is it returning?</p>
<p>Any suggestions as to how get obtain an index with the above intent? Are loops necessary in this case?</p>
<hr />
<p>I also tried putting other '5's in the other nested list in list4 like this:</p>
<pre><code>list4 = [['3', '1', '8'], '5', ['5', '2', 5]]

</code></pre>
<p>But it just gives giving me 2</p>
","0","Question"
"77980681","","<p>I have several dictionaries within a list, that follow this convention:</p>
<p><code>data = [{'name': 'Alessandra', 'age': 24}, {'name': 'Sasha', 'age': 37}, {'name': 'Jason', 'age': 42}] </code></p>
<p>I want to separate out the list by the keys, to give this output:</p>
<pre><code>names = ['Alessandra', 'Sasha', 'Jason']
ages = [24, 37, 42]
</code></pre>
<p>Can this be done?</p>
","-1","Question"
"77981513","","<p>I am facing a problem in Excel that I have quiten often and that I really want to automize or semiautomize.</p>
<p>I have entries A_x being followed by a non-empty list of B_y's. Now I want to flatten the entry to list mapping to a simple two column list for easier processing as shown in the example below.</p>
<p>In fact my example is quite larger than shown here and I want to avoid a dull copy and paste hack.</p>
<p>Can this be achieved without using VBA with simple Excel functions?</p>
<p><a href=""https://i.sstatic.net/Ovzco.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/Ovzco.png"" alt=""Example of flattening list"" /></a></p>
","2","Question"
"77981842","","<p>For a Java/kotlin geek, I'm finding Cypress a bit hard to work with, since I'm used to the way Java/Kotlin and Selenium works.</p>
<p>In this example, I'm having some trouble getting a table with several rows of data, and creating an elegant method of getting a specific td in a specific row.</p>
<p>Consider this simplified markup:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;table&gt;
 &lt;tr data-e2e-selector=&quot;case-row&quot;&gt;
  &lt;td data-e2e-selector=&quot;date&quot;&gt;3. sep&lt;/td&gt;
  &lt;td data-e2e-selecto=&quot;&quot;name&quot;&gt;Frank&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr data-e2e-selector=&quot;case-row&quot;&gt;
  &lt;td data-e2e-selector=&quot;date&quot;&gt;12. sep&lt;/td&gt;
  &lt;td data-e2e-selecto=&quot;&quot;name&quot;&gt;Ola&lt;/td&gt;
 ....
 ....
 &lt;tr data-e2e-selector=&quot;case-row&quot;&gt;
  &lt;td data-e2e-selector=&quot;date&quot;&gt;23. sep&lt;/td&gt;
  &lt;td data-e2e-selecto=&quot;&quot;name&quot;&gt;Morgan&lt;/td&gt;
&lt;/table&gt;
</code></pre>
<p>I can get the whole set of rows like this:</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('[data-e2e-selector=&quot;case-row]')
</code></pre>
<p>That gives me a list/array of the correct number of rows.</p>
<p>However, if I want to get for instance the <code>data-e2e-selector=&quot;date&quot;</code> field from the first, last or other specific row, I'm running into problems.</p>
<p>I would think that this line would verify the &quot;date&quot; field of the FIRST row:</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('[data-e2e-selector=case-row]').first().get('[data-e2e-selector=innsendtDato]').should('contain.text', &quot;3. sep&quot;)    
</code></pre>
<p>But it doesn't, apparently. Because if the cypress runner reports this (&quot;successful&quot;) check:</p>
<blockquote>
<p>-assert- expected '[ &lt;td#sakInnsendtDato_0.ng-star-inserted&gt;, 20 more... ]' to contain text '23. sep'</p>
</blockquote>
<p>which seems to indicate that it's been looking through all 21 rows to find a  with the expected value. Whereas I want to know if it's in the FIRST.</p>
<p>To verify this, if I change &quot;first()&quot; to &quot;last()&quot;, it will also verify successfully.</p>
<p>So, how does this work?</p>
<p>I've also tried using index to indicate the first row, instead of first() or last(), but that gives a compile error.</p>
<p>Any ideas?</p>
","0","Question"
"77984325","","<p>why in a quiz on Python lists is the code for inserting a value (5) in the third position of the list this one ?</p>
<pre><code>list1 = [11, 2, 23]
list1.insert(3,5)
print(list1)
</code></pre>
<p>Shouldn't it be list1.insert(2,5) since , even if the index in a list start at 0 ,the third position is,imho,  index 2 ?
Sorry for the maybe trivial question ( I'm a newbie) but I thought that when you ask for the third position in a list you don't refer to index 3 but to the item that is in the third place starting from left.</p>
<p>I tried to use different values in .insert() but , as expected, this didn't solve my doubt</p>
","0","Question"
"77985090","","<p>I would like to define a function with the parameter specified as &quot;array of strings&quot; or &quot;array of integers&quot;, without looping through the individual array elements to check the type of each. Specifically, I would like the function to only allow passing of the two above-mentioned array types in order to run, in the same way one would be able to specify <code>function(param: str)</code> to only accept strings, for example.</p>
<p>I defined separate functions as <code>function(param: list[str])</code> or <code>function(param: list[int])</code>. But I could not figure out how to implement both simultaneously.</p>
","0","Question"
"77989053","","<p>I am currently learning lists, and I am trying to write a function that deallocates the memory. I tried, but even though it compiles, it returns a non-zero value. I don't understand why my program doesn't return 0 when I use the deallocating function in the main function. However,the program is executed successfully when I don't use the deallocating function. To me the function seems fine. I can't spot the error.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct person {
    int age;
    struct person *next;
} person;

void insert_start(person **head, int x);
void insert_end(person **head, int x);
void insert_position(person **head, int x, int position);
void deallocating(person **head);

int main() {
    person *head = NULL;
    person p1 = { 2, NULL };
    person p2 = { 3, NULL };
    head = &amp;p1;
    p1.next = &amp;p2;
    insert_end(&amp;head, 4);
    insert_start(&amp;head, 12);
    insert_position(&amp;head, 100, 3);

    for (person *curr = head; curr != NULL; curr = curr-&gt;next) {
        printf(&quot;%d\n&quot;, curr-&gt;age);
    }

    deallocate(&amp;head);

    return 0;
}

void insert_start(person **head, int x) {
    person *nextnode = malloc(sizeof(person));
    nextnode-&gt;age = x;
    nextnode-&gt;next = *head;
    *head = nextnode;
}

void insert_end(person **head, int x) {
    person *nextnode = malloc(sizeof(person));
    nextnode-&gt;age = x;
    nextnode-&gt;next = NULL;

    person *find = *head;
    while (find-&gt;next != NULL) {
        find = find-&gt;next;
    }
    find-&gt;next = nextnode;
}

void insert_position(person **head, int x, int position) {
    person *nextnode = malloc(sizeof(person));
    nextnode-&gt;age = x;
    nextnode-&gt;next = NULL;

    person *find = *head;
    int curr = 1;
    while (curr != position) {
        find = find-&gt;next;
        curr++;
    }
    nextnode-&gt;next = find-&gt;next;
    find-&gt;next = nextnode;
}

void deallocate(person **head) {
    person *curr = *head;

    while (curr != NULL) {
        person *del = curr;
        curr = curr-&gt;next;
        free(del);
    }
    *head = NULL;
}
</code></pre>
","1","Question"
"77989110","","<p>I am writing a program in which there are sometimes lists that create issues during voice synthesis, for example the output from voice synthesis is displayed as follows:
<strong>&quot;Suggestions for restaurants:1. Pizza2. Burger3. Sushi4. Noodles...&quot;</strong>. The voice synthesis interprets the numbers as part of the word, resulting in awkward pronunciation. To resolve this, whitespaces should be inserted between the numbers and the words. Additionally, the output should not be too lengthy; it would be better to limit the list to the first three suggestions.</p>
<p>I have tried this code:</p>
<pre><code>import re

def post_processing(text):
  &quot;&quot;&quot;
  Post-processes a text string to address formatting issues for voice synthesis.

  Args:
    text: The input text string.

  Returns:
    The processed text string.
  &quot;&quot;&quot;
  # Process lists with improved handling
  parts = text.split(&quot;:&quot;)
  if len(parts) &gt; 1:
    # Split based on newlines, limiting to 3 items
    items = parts[1].strip().split(&quot;\n&quot;)[:3]
    # Remove trailing spaces, handle punctuation, and add spaces correctly
    items = [
        f&quot;{item.strip()[:-1].rstrip('.')}{' ' if item.strip()[-1].isdigit() or item.strip()[-1] == '.' else ''}{item.strip()[-1:]}&quot;
        for item in items
    ]
    text = &quot;: &quot;.join(items)
  else:
    text = text.strip()  # Remove leading/trailing whitespace

  # Remove URLs completely
  text = re.sub(r&quot;https?://\S+&quot;, &quot;&quot;, text)

  return text
</code></pre>
<p>So when I input the following as input:
text = &quot;Suggestions for restaurants: 1 . Pizza2.  Burger3.  Sushi4. Noodles....&quot;
text = post_processing(text)</p>
<p>Following output should be there:
print(text)  # Output: 1. Pizza 2. Burger 3. Sushi</p>
<p>but what I get is as follows:
1 . Pizza2.  Burger3.  Sushi4. Noodles .</p>
","1","Question"
"77994560","","<p>I know there are many similar questions about the same issue. However, I've tried the solutions provided and none worked for me. I am 100% sure it is something basic I am missing, but I am not able to find what is wrong, hence asking it here...</p>
<p>I have a custom object like this:</p>
<pre><code>public class ClassA {
    private int id;
    private Integer min1;
    private Integer min2;
}
</code></pre>
<p>In another class (<code>ClassB</code>) I have a list of <code>ClassA</code> objects that I need to sort. First items should be those who have a lower value in any of the <code>min</code> properties. In case two objects have the same value, then does not matter which one goes first. For example, if I have these objects:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>ID</th>
<th>min1</th>
<th>min1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
<td>null</td>
</tr>
<tr>
<td>2</td>
<td>null</td>
<td>30</td>
</tr>
<tr>
<td>3</td>
<td>80</td>
<td>null</td>
</tr>
<tr>
<td>4</td>
<td>23</td>
<td>null</td>
</tr>
<tr>
<td>5</td>
<td>10</td>
<td>null</td>
</tr>
</tbody>
</table></div>
<p>Order should be (ID): 1, 5, 4, 2, 3.</p>
<p>To achieve this I have a method that returns a <code>Comparator</code>:</p>
<pre><code>public static Comparator&lt;ClassA&gt; compareMins(Function&lt;ClassA, Integer&gt; min) {
    return Comparator.comparing(minuto, Comparator.nullsLast(Comparator.naturalOrder()));
}
</code></pre>
<p>In <code>ClassB</code> I get the Comparator and sort the list as follows:</p>
<pre><code>Comparator&lt;ClassA&gt; comparator = ClassA.compareMins(ClassA::getMin1)
    .thenComparing(ClassA::getMin2);
lista.sort(comparator);
</code></pre>
<p>However, it is throwing a <code>NullPointerException</code> when comparing objects ID <code>1</code> and <code>5</code>. I guess that as <code>min1</code> has the same value, it tries to compare min2, which are null, and hence, throwing this exception. However, I am unable to find a solution to this. Any help would be really appreciated.</p>
","1","Question"
"77995231","","<p>Say I have 3 <code>List&lt;int&gt;</code> with the following values:</p>
<pre><code>List&lt;int&gt; list1 = {10, 8, 10,  7, 4, 14, 3};
List&lt;int&gt; list2 = {10, 8, 10,  7, 4, 13, 3};
List&lt;int&gt; list3 = {10, 8, 12, 12, 4, 13, 3};
</code></pre>
<p>I want to compare which of <em>these 3 lists</em> have a <strong>higher pair</strong>. <code>list1</code> has two <code>10</code>, <code>list2</code> also has two <code>10</code>, whereas <code>list3</code> has two <code>12</code>.</p>
<p>I want to say that <code>list3</code> has the highest pair (since it contains two <code>12</code>). Then <code>list1</code> is the next highest as even though both <code>list1</code> and <code>list2</code> has two <code>10</code>, the next highest non-pair for <code>list1</code> is <code>14</code>.</p>
<p>I sorted each list by descending order, but now I'm not sure how to compare the rest of the conditions. Hope you can help me. Thanks!</p>
<pre><code>void OrderList(List&lt;int&gt; listToOrder){
   var orderedList = hand.OrderByDescending(x =&gt; x);
}
</code></pre>
<p>Just doing this for list1 arranges it this way:
<code>{14, 10, 10, 8, 7, 4, 3};</code></p>
<p>So now, I'm not sure how to compare highest pairs with the other 2 lists.</p>
","-1","Question"
"77999570","","<p>I write a converter for a list and I want to test it with AssertJ.</p>
<pre class=""lang-java prettyprint-override""><code>List&lt;Bar&gt; convert(List&lt;Foo&gt; input)
</code></pre>
<p>Imagine I know how to assert that a single <code>Foo</code> correctly converted to a <code>Bar</code>.
My test is something like this</p>
<pre class=""lang-java prettyprint-override""><code>@Test
void test() {
    List&lt;Foo&gt; input = generateInput();

    List&lt;Bar&gt; actual = converter.convert(input);

    // TODO asserThat input list correctly coverted to output list
}
</code></pre>
<p>How can I assert that each element of actual corresponds to the element in same index of input and assert that correctly converted? <br />
I'm looking for some method like <code>containsExactlyElementsOf</code> that get a custom satisfier to assert that <code>Foo</code> correctly converted to <code>Bar</code>.</p>
<p>One way is using a for loop like this but I'm looking for a better option:</p>
<pre class=""lang-java prettyprint-override""><code>assertThat(actual).hasSameSize(input);
for(int i = 0; i &lt; actual.size(); i++) {
    Foo foo = input.get(i);
    Bar bar = actual.get(i);
    assertThatConvertedCorrectly(foo, bar);
}
</code></pre>
","1","Question"
"78001260","","<p>I have a file that I wanted to group into list. The data are separated by empty lines. How to parse the data properly to get the needed output?</p>
<p>mydata.txt</p>
<pre><code>introA
aboutA1
aboutA2
aboutA3
aboutA4

introB
aboutB1
aboutB2
aboutB3
aboutB4
</code></pre>
<p>Current Code:</p>
<pre><code>with open(&quot;mydata.txt&quot;, &quot;r&quot;) as f:
    data = [line.strip() for line in f if line.strip()]

print (data)
</code></pre>
<p>Current Output:</p>
<pre><code>['introA', 'aboutA1', 'aboutA2', 'aboutA3', 'aboutA4', 'introB', 'aboutB1', 'aboutB2', 'aboutB3', 'aboutB4']
</code></pre>
<p>Needed Output:</p>
<pre><code>&quot;introA&quot;:['aboutA1', 'aboutA2', 'aboutA3', 'aboutA4',],
&quot;introB&quot;:['aboutB1', 'aboutB2', 'aboutB3', 'aboutB4',],
</code></pre>
","0","Question"
"78005551","","<p>As a beginner in Python, I'm currently delving into the nuances of efficient coding practices. My journey has led me to explore the differences in performance between using Python's built-in <code>max()</code> function and implementing a manual loop to find the largest value within a dictionary or list. The focus of my inquiry is on understanding the practical benefits, if any, of opting for the built-in function over a manually coded loop, especially in terms of runtime efficiency and code readability.</p>
<p>For context, I've conducted a small experiment using a dictionary derived from a project I'm working on. My goal is to apply Just-In-Time (JIT) learning techniques while honing my Python skills. The experiment involved timing the execution of both methods (using <code>max()</code> and a manual for-loop) to compare their performance.</p>
<p>Here's a simplified version of the code snippets used for testing:</p>
<pre><code>import time

dict = {}
highest_bid = 0

dict = { 'alpha' : 1, 'bravo':2, 'charlie' : 3, 'delta':4,'echo':5, 'foxtrot':6, 'golf':7, 'hotel':8, 'india':9, 'juliet':10, 'kilo':11, 'lima':12, 'mike':13, 'november':14, 'oscar':15, 'papa':16, 'quebec':17}

# Timer to compare bid max process time
start = time.process_time()

# for finding the max value, iterable method
for temp in dict:
  if int(dict[temp]) &gt; highest_bid:
    highest_bid = dict[temp]
    highest_bidder = temp

# VERSUES : 
# for finding the max value, max() method
highest_bid = max(dict.values())
highest_bidder = max(dict, key=dict.get)

# Computed timing
print(time.process_time() - start)
print(f&quot;{highest_bidder} and ${highest_bid}&quot;)
</code></pre>
<p>Surprisingly, the results from my tests were inconclusive, with minimal differences in runtime between the two approaches. This outcome has left me pondering the advantages of using <code>max()</code> over a manual for-loop, beyond what my basic test has revealed.</p>
<p><strong>Could anyone provide insights into:</strong></p>
<ul>
<li>The underlying efficiency of <code>max()</code> compared to a manual loop, especially in larger datasets or more complex scenarios?</li>
<li>Situations where one method might significantly outperform the other?</li>
<li>Any considerations regarding code maintainability and readability when choosing between these two approaches?</li>
</ul>
<p>I'm eager to understand the deeper implications of choosing built-in functions over manual implementations, particularly from the perspective of experienced Python developers.</p>
<p><em>Time is the same using the replit, with runtime results ranging from (*10^{-5]): 1-5 .</em></p>
","0","Question"
"78005717","","<p>Let's pretend I have the following lists:</p>
<pre><code>const list1 = [1,2,3,4,5]
const list2 = [6,7,8,9,10]
const list3 = [11,12,13,14,15]
const list4 = [16,17,18,19,20]
</code></pre>
<p>How do I get all possible combinations but only with different indexes?</p>
<p>So for example the result <code>[1,6,11,16]</code> wouldn't work.</p>
<p>I would need all combinations like:</p>
<pre><code>[1, 2, 3, 4, 5],
[1, 2, 3, 4, 10],
[1, 2, 3, 9, 5].
[1, 2, 3, 9, 10],
[1, 2, 8, 4, 5],
[1, 2, 8, 9, 5],
[1, 2, 8, 4, 10],
[1, 2, 8, 9, 10],
...
[6, 2, 3, 4, 5], 
[6, 2, 13, 14, 20]
</code></pre>
<p>and so on...</p>
<p>So index of each list, must only be used once.
You can't use value of list1[0] and of another list index[0].</p>
<p>I'd also need to know where each item in the returned lists comes from.</p>
","1","Question"
"78005759","","<p>In python, we have two long lists each sorted and with more than around 20 million items and are <strong>different</strong> in <strong>only a few items</strong>.</p>
<pre class=""lang-py prettyprint-override""><code>list_1 = [
    ...,  ## 20 million items common between the two lists
    'item_a',
    'item_b',
]

list_2 = [
    ...,  ## 20 million items common between the two lists
    'item_c',
    'item_d',
]
</code></pre>
<p><br>What I have is mind is to combine these two to get:</p>
<pre class=""lang-py prettyprint-override""><code>combined = sorted([
    ...,  ## 20 million items common between the two lists
    'item_a',
    'item_b',
    'item_c',
    'item_d',
])
</code></pre>
<p>What I've tried is:</p>
<pre class=""lang-py prettyprint-override""><code>combined = sorted(
    set([
        *list_1,
        *list_2,
    ])
)
</code></pre>
<p>but the problem is it takes too long to finish (for me it took around 50 minutes).
<br>
What's a more efficient way to do so?</p>
<hr>
Updates:<br>
I tried these solutions provided on this page:
<pre class=""lang-py prettyprint-override""><code>## 1. by Cow
import itertools
all_ = [list_1, list_2]
combined = sorted(set(itertools.chain.from_iterable(all_)))

## Results: no improvements in time
</code></pre>
<pre class=""lang-py prettyprint-override""><code>## 2. by Joooeey
combined = sorted(set(list_1) | set(list_2))

## Results: no improvements in time
</code></pre>
","0","Question"
"78007844","","<p>I have a list with three values (strings) and a substring.</p>
<ol>
<li><p>Each string in the list needs to be searched for the given substring between position 20 and 50 and printed out if there's more than 5 occurances (of this substring in each string).</p>
</li>
<li><p>If the string lacks the substring a message should be printed that the substring is missing (in each list item).</p>
</li>
</ol>
<p>The output should be (considering my code below)</p>
<pre class=""lang-none prettyprint-override""><code>1 Enriched with SP1 binding sites
3 Contains no SP1 binding sites
</code></pre>
<pre><code>seq_list = [&quot;GGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGG&quot;, &quot;GGGCGG&quot;, &quot;BBBBBBB&quot;]
binding_site = &quot;GGGCGG&quot;


for count, value in enumerate(seq_list, start=1):               
    if binding_site in value:
        sumSP = int(sum(s.count('GGCGG')for s in seq_list))
        if sumSP &gt;20:
            print(count, &quot;enriched with SP1 binding sites&quot;)

else:
    print(count,&quot;No binding sites found.&quot;)
</code></pre>
<p><a href=""https://i.sstatic.net/YkEXx.png"" rel=""nofollow noreferrer"">Output</a></p>
<p>So I've got two problems. First, I've scoured the internet for a simple solution to search each string between pos 20-50 but only manage to find how to search the entire lists positions (using slice).
The second problem is that my code <code>sumSP</code> doesn't work since it gives true for my second string which should be false, since it's only value 1 in my list that holds more than 5 binding_sites.</p>
","-1","Question"
"78011228","","<p>I have this small list:</p>
<pre><code>my_list &lt;- list(time = structure(c(0, 1), dim = 2:1, dimnames = list(c(&quot;Pre&quot;, 
&quot;Post&quot;), &quot;Post&quot;)), treatment = structure(c(0, 1), dim = 2:1, dimnames = list(
    c(&quot;Control&quot;, &quot;Treatment&quot;), &quot;Treatment&quot;)))

# that gives me: 
$time
     Post
Pre     0
Post    1

$treatment
          Treatment
Control           0
Treatment         1
</code></pre>
<p>I want to convert it to dataframe that looks like this:</p>
<p><a href=""https://i.sstatic.net/AOYV0.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/AOYV0.png"" alt=""enter image description here"" /></a></p>
<p>I have tried everything from this link, but it did not give me my desired df:<br />
<a href=""https://stackoverflow.com/questions/4227223/convert-a-list-to-a-data-frame"">Convert a list to a data frame</a></p>
","1","Question"
"78011723","","<p>List is <code>&lt;a&gt;</code> links with some elements inside <code>&lt;a&gt;</code>. All <code>&lt;a&gt;</code> links to internal website pages. How to make it look like a table? Is it possible?</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>Thumbnail column</th>
<th>Term column</th>
<th>Description column</th>
</tr>
</thead>
<tbody>
<tr>
<td>thumbnail_1</td>
<td>term_1</td>
<td>description_1</td>
</tr>
<tr>
<td>thumbnail_2</td>
<td>term_2</td>
<td>description_2</td>
</tr>
</tbody>
</table></div>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>  &lt;ul&gt;
    &lt;li&gt;
      &lt;div&gt;thumbnail column&lt;/div&gt;
      &lt;div&gt;term column&lt;/div&gt;
      &lt;div&gt;description column&lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=""link_1""&gt;
        &lt;img src=""src_thumbnail_1"" alt=""thumbnail_1""&gt;
        &lt;div&gt;term_1&lt;/div&gt;
        &lt;div&gt;description_1&lt;/div&gt;
      &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=""link_2""&gt;
        &lt;img src=""src_thumbnail_2"" alt=""thumbnail_2""&gt;
        &lt;div&gt;term_2&lt;/div&gt;
        &lt;div&gt;description_2&lt;/div&gt;
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</code></pre>
</div>
</div>
</p>
","1","Question"
"78012902","","<p>Firstly, I wish I could think of a better way to describe my problem. I'm trying to take the following example list:</p>
<pre><code>lst&lt;- list(c(2), c(1,3), c(2), c(4), c(6), c(5, 7), c(6,8), c(7))
</code></pre>
<p>And turn it into this:</p>
<pre><code>res&lt;- list(c(1,2,3), c(1,2,3), c(1,2,3), c(4), c(5,6,7,8), c(5,6,7,8),c(5,6,7,8), c(5,6,7,8))
</code></pre>
<p><em>OR</em> even this:</p>
<pre><code>also_good_answer&lt;- list(c(1, 2, 3), logical(0), logical(0), 4, c(5, 6, 7, 8), logical(0), 
    logical(0), logical(0))
</code></pre>
<p>I've been using a couple <code>while</code> statements in combination with <code>setdiff</code> to do this, but I'm wondering if there is an eloquent and faster way to do this over a large list?</p>
<p>As always, thank you in advance.
-nate</p>
<p>My method:</p>
<pre><code>lst&lt;- list(c(2), c(1,3), c(2), c(4), c(6), c(5, 7), c(6,8), c(7)) # Original List
to_sequence&lt;- 1:length(lst) 
res&lt;- lapply(1:length(lst), function(x) {return(NA)})  # Building Result Object

while(length(to_sequence) &gt; 0){
  tres&lt;- c()
  idx&lt;- to_sequence[1]
  next_idxs&lt;- setdiff(lst[[idx]], NA)
  tres&lt;- c(tres, next_idxs)
  while(length(next_idxs) &gt;=1){
    next_idxs&lt;- lapply(seq_along(next_idxs), function(x){
      lst[[next_idxs[x]]]
    } ) %&gt;% unlist() %&gt;% setdiff(., unlist(tres)) # uses slow setdiff
    tres&lt;-c(tres, next_idxs)
  }
  res[[idx]]&lt;- tres
  to_sequence&lt;- setdiff(to_sequence, tres) # Another slow setdiff
  cat(&quot;Length to_sequence:&quot;, base::prettyNum(length(to_sequence),big.mark = &quot;,&quot;), &quot;\n&quot;) 
}

res&lt;- lapply(res, sort)
</code></pre>
<p><em>EDITS</em><br />
Updated <code>lst</code>:
<code>lst&lt;- list(c(2), c(1,3), c(2,8), c(4), c(6), c(5, 7), c(6,9), c(3),c(7))</code></p>
<p>Giving Desired Output:
<code>list(c(1, 2, 3, 8), logical(0), logical(0), 4, c(5, 6, 7, 9),  logical(0), logical(0), logical(0), logical(0))</code></p>
","2","Question"
"78017441","","<p>Program receive a sequence from integers, divided spaces
I dont understand how to convert it in list ?</p>
<p>I've try to do this with split method, but it does not help, because i think, it working only with strings</p>
<p>Input:
x = 1 2 3 4 5 6 7 8 9</p>
<p>Output:
list_new = [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
","-2","Question"
"78020288","","<p>I want to assert items <strong>based on their index</strong> in the list under test.</p>
<p>While doing some research I came across this solution, which works:</p>
<pre><code>    // This works:
    assertThat(tasks).extracting(Task::getId, Task::getExamId).containsExactly(
            tuple(1, EXAM_ID),
            tuple(2, EXAM_ID),
            tuple(3, EXAM_ID),
            tuple(4, EXAM_ID),
            tuple(5, EXAM_ID)
    );
</code></pre>
<p>However I am looking for something more dynamic, FOR EXAMPLE (doesn't compile)</p>
<pre><code>    // I would rather use something like
    BiFunction&lt;Integer, Task, Boolean&gt; indexedPredicate = (n, task) -&gt; Objects.equals(task.getId(), n);
    assertThat(tasks).allSatisfy(indexedPredicate);
</code></pre>
<p>I had a good look at all available methods but couldn't find anything. Any ideas?<strong>strong text</strong></p>
","1","Question"
"78020461","","<p>I have a Pandas's dataframe with 9 columns (called just dataframe), 5 of them called: [['DEG1','DEG2','DEG3','DEG4','DEG5']], it has almost 2000 rows. I have a list from which I build another dataframe with 5 columns called [['deg1','deg2','deg3','deg4','deg5']], this dataframe only has 1 row with the data series that needs to be checked in the other dataframe.</p>
<p>I need to check if the entire series (the 5 columns) from the little dataframe (n_serie_df), if repeated in the big dataframe, here my actual state, which gives me:</p>
<blockquote>
<p>&quot;ValueError: Item wrong length 1 instead of 1709.&quot;.</p>
</blockquote>
<p>This is my actual code:</p>
<pre><code>import pandas as pd
import numpy as np


def check_repeated_deg(n_serie_list, dataframe):
    n_serie_dict = {
        &quot;DEG1&quot;: [n_serie_list[0]],
        &quot;DEG2&quot;: [n_serie_list[1]],
        &quot;DEG3&quot;: [n_serie_list[2]],
        &quot;DEG4&quot;: [n_serie_list[3]],
        &quot;DEG5&quot;: [n_serie_list[4]],
    }

    n_serie_df = pd.DataFrame(n_serie_dict)

    repeated = dataframe[np.all(n_serie_df.values == n_serie_df.values, 1)].any().any()

    if repeated:
        return f&quot;This deg serie is already measured&quot;
    else:
        return None


dataframe = pd.read_csv(r&quot;data_deg.csv&quot;)
n_serie_list = [2, 11, 21, 27, 41]

result = check_repeated_deg(n_serie_list, dataframe)

print(result)
</code></pre>
","2","Question"
"78021566","","<p>I have been trying to add lists to cells in a dataframe. Simplified the dataframe looks something like this:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>Participant</th>
<th>Session</th>
<th>Column_C</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td></td>
</tr>
</tbody>
</table></div>
<p>Most participants only have one recorded session, but some have two. I want to add each list to a single cell of column C, corresponding to the right participant &amp; session ID. So, after adding the list to the right participant (e.g 4) and session (e.g 1) it should look like this:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>Participant</th>
<th>Session</th>
<th>Column_C</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>[1, 2, 3]</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td></td>
</tr>
</tbody>
</table></div>
<p>My first attempt was using conditions with df.loc()</p>
<pre><code>df.loc[((df['participant'] == '4') &amp; (df['session'] == 1)), 'Column_C'] = [1, 2, 3]
</code></pre>
<p>However, this gave the following error: 'ValueError: Must have equal len keys and value when setting with an iterable'</p>
<p>In other threads it was mentioned that in order to set lists/tuples/arrays in a singular dataframe cell, you need to use df.at(). However, I couldn't figure out how to include the conditions when using .at()</p>
<p>Other threads have also mentioned that the dtype of the column has to be set as object. However, even after making sure the column is set as object, I still get the same error.</p>
<p>Is there anyway I can add a list/tuple/array to a pandas dataframe cell while still including conditions?</p>
<p>Thanks in advance!</p>
","1","Question"
"78027166","","<p>I have a data frame which contains list inside it.</p>
<pre><code>df &lt;- data.frame(
      id=c(1:4),
      a=I(list(c(1,&quot;a1&quot;),2,c(&quot;a31&quot;,&quot;a32&quot;,&quot;a33&quot;),&quot;a4&quot;)),
      b=I(list(2,c(&quot;b1&quot;,&quot;b2&quot;,3),c(&quot;b3&quot;,&quot;b4&quot;),4))
    ); print(df)

  id            a         b
1  1        1, a1         2
2  2            2 b1, b2, 3
3  3 a31, a32....    b3, b4
4  4           a4         4
</code></pre>
<p>Now, I need to <code>unnest</code> the list to obtain data frame like this:</p>
<pre><code>df2 &lt;- data.frame(
      id=c(1,1,2,2,2,3,3,3,3,3,3,4),
      a=c(1,&quot;a1&quot;,2,2,2,&quot;a31&quot;,&quot;a31&quot;,&quot;a32&quot;,&quot;a32&quot;,&quot;a33&quot;,&quot;a33&quot;,&quot;a4&quot;),
      b=c(2,2,&quot;b1&quot;,&quot;b2&quot;,3,&quot;b3&quot;,&quot;b3&quot;,&quot;b3&quot;,&quot;b4&quot;,&quot;b4&quot;,&quot;b4&quot;,4)
    ) ; print(df2)

   id   a  b
1   1   1  2
2   1  a1  2
3   2   2 b1
4   2   2 b2
5   2   2  3
6   3 a31 b3
7   3 a31 b3
8   3 a32 b3
9   3 a32 b4
10  3 a33 b4
11  3 a33 b4
12  4  a4  4
</code></pre>
<p>I used to use <code>unnest()</code> for those which contains the same number of list elements in some rows/columns, but current data frame contains different number of elements in some rows and columns. Currently I am facing the following error.</p>
<pre><code>&gt; target &lt;- c(&quot;id&quot;,&quot;a&quot;,&quot;b&quot;)
&gt; df %&gt;% unnest(cols=target)
Error in `unnest()`:
! In row 3, can't recycle input of size 3 to size 2.
Run `rlang::last_trace()` to see where the error occurred.
</code></pre>
<p>Due to unpredictability of <em>where it happens</em> (rowwise/columnwise) and <em>how many elements it will contain</em>, I cannot find appropriate approach to tackle with this. The number of columns and its names cannot be determined in advance.</p>
<p>I appreciate your suggestion especially simple ones which can be integrated into current pipe operation in <code>dplyr</code>. <code>Base R</code> and other approaches are also welcomed.</p>
<p>====</p>
<p><em>Rreproducible example data</em></p>
<p>Let me share a reproductible example of the actual data frame that I am working on. It did not work with solutions from @ThomasIsCoding. I suspect it caused by NULL but it was not the reason. Blank/Null is not necessarily replicated.</p>
<pre><code>structure(list(cluster = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;), st_sub_main_th = list(
    &quot;hira&quot;, NULL, &quot;tsuma&quot;, &quot;tsuma&quot;, NULL, c(&quot;other&quot;, &quot;hira&quot;)), 
    roo_main = list(&quot;2&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;, c(&quot;1&quot;, &quot;3&quot;), c(&quot;6&quot;, &quot;7&quot;, 
    &quot;2&quot;, &quot;1&quot;)), st_con_rt = list(&quot;sub-room&quot;, &quot;main-room&quot;, &quot;sub-room&quot;, 
        &quot;sub-room&quot;, &quot;main-room&quot;, &quot;sub-room&quot;), st_con_tr = list(
        &quot;terrace&quot;, c(&quot;terrace&quot;, &quot;direct&quot;), &quot;terrace&quot;, &quot;terrace&quot;, 
        &quot;terrace&quot;, &quot;direct&quot;), st_adsb = list(&quot;add&quot;, &quot;add&quot;, &quot;add&quot;, 
        &quot;sub&quot;, &quot;add&quot;, &quot;sub&quot;), st_th = list(NULL, &quot;tsuma&quot;, NULL, 
        NULL, &quot;hira&quot;, NULL), st_sub2_main_th = list(NULL, NULL, 
        NULL, &quot;hira&quot;, &quot;hira&quot;, &quot;tsuma&quot;), isstilt = list(NULL, 
        NULL, NULL, NULL, NULL, &quot;0&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-6L))
</code></pre>
","2","Question"
"78028582","","<p>I have a project where performance is very important. The function I have to check if a list contains an item is being called hundreds of thousand to millions of times per second, and is costing me a lot of time. It is responsible for 60% of the runtime of my program.</p>
<p>Currently, it looks like this:</p>
<pre><code>func byteContains(list[]byte,item byte)bool{
    for _,value:=range list{
        if value==item{return true}
    }
    return false
}
</code></pre>
<p>This works, but it's slow. Is there a faster way to do this?</p>
","0","Question"
"78029887","","<p>In <code>My_list</code> below, I want to subtract all unique <em>pairs of elements (no repetition)</em> from one another.</p>
<p>In this example, because there are 3 elements in <code>My_list</code>, therefore, we expect <code>choose(3, 2)</code>= three pairs to be subtracted from each other.</p>
<p>Is it possible to achieve my <code>Desired_output</code> shown below in R?</p>
<pre><code>My_list = 
  list(&quot;(    beginner_post1 - beginner_baseline    )&quot;= c(5,-2),
       &quot;(intermediate_post1 - intermediate_baseline)&quot;= c(6,-3),
       &quot;(    advanced_post1 - advanced_baseline    )&quot;= c(4,-1))


Desired_output = 
  list(&quot;(beginner_post1 - beginner_baseline) - (    advanced_post1 - advanced_baseline    )&quot;= c(5,-2,-4,1),
       &quot;(beginner_post1 - beginner_baseline) - (intermediate_post1 - intermediate_baseline)&quot;= c(5,-2,-6,3),
       &quot;(advanced_post1 - advanced_baseline) - (intermediate_post1 - intermediate_baseline)&quot;= c(4,-1,-6,3)
  )
</code></pre>
","1","Question"
"78032463","","<p>Hello I have bulk of list of dict and would like to remove duplicate dict and value with None.
Within the data structure, bunch dict are duplicate. I want to keep pair of devices.</p>
<p>BulkData</p>
<pre><code>[
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
]
</code></pre>
<p>Non-working code:</p>
<pre><code>for key, value in bulkpairdata.items():
  t = []
  if bulkpairdata.get(&quot;name&quot;) != None:
    if bulkpairdata.get(&quot;name&quot;) not in t:
      result.append(bulkpairdata)
      t.append(bulkpairdata.get(&quot;name&quot;))
    else:
      bulkpairdata.remove(bulkpairdata.get(&quot;name&quot;))
</code></pre>
<p>Result:</p>
<pre><code>[
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
]
</code></pre>
","0","Question"
"78034777","","<p>I'm trying to select the first instance of an element in an array column which matches a substring in a different column, and then create a different column with the selected element, like this:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>col_a</th>
<th>col_b</th>
</tr>
</thead>
<tbody>
<tr>
<td>[AB1 2Z,CD3 4Y,AB5 6X]</td>
<td>AB</td>
</tr>
<tr>
<td>[GH7 8W,EF9 0V,EF1 2U]</td>
<td>EF</td>
</tr>
<tr>
<td>[IJ3 4T,KL5 6S]</td>
<td>KL</td>
</tr>
</tbody>
</table></div>
<p>Returning this output column, including the two above:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>col_c</th>
</tr>
</thead>
<tbody>
<tr>
<td>AB1 2Z</td>
</tr>
<tr>
<td>EF9 0V</td>
</tr>
<tr>
<td>KL5 6S</td>
</tr>
</tbody>
</table></div>
<p>I've tried this with <code>getItem()</code>:</p>
<pre><code>df = df.withColumn('col_c', df.getItem(filter(col_a, i -&gt; startsWith(I, 'col_b')))[0]&quot;))
</code></pre>
<p>But I'm getting an analysis exception that the <code>getItem</code> function isn't defined, so I'm not sure if this would work without that exception, or what I need to do to solve the exception.</p>
<p>Thanks for any help!!</p>
","0","Question"
"78037541","","<p>I have three lists:</p>
<pre><code>a = ['AFM_123_H2O_56', '345_FM_CO2', 'H6C6_AFM_test', 'dio_CO2_FM', 'check_H2O_FM', 'sample_FM_H6C6', 'AFM_67_H2O']
condition1 = ['H2O', 'CO2', 'H6C6']
condition2 = ['FM', 'AFM']
</code></pre>
<p>Output should look like this:</p>
<pre><code>c = [['AFM_123_H2O_56', 'AFM_67_H2O'], #all strings containing H2O and AFM
      ['check_H2O_FM'],                #all strings containing H2O and FM
      ['345_FM_CO2', 'dio_CO2_FM'],    #all strings containing CO2 and FM
      ['H6C6_AFM_test'],               #all strings containing H6C6 and AFM
      ['sample_FM_H6C6']]              #all strings containing H6C6 and FM
</code></pre>
<p>Or if using pandas dataframe then output should look like this:</p>
<pre><code>H2O_AFM       ['AFM_123_H2O_56', 'AFM_67_H2O']
H2O_FM        ['check_H2O_FM']
CO2_FM        ['345_FM_CO2', 'dio_CO2_FM']
H6C6_AFM      ['H6C6_AFM_test']
H6C6_FM       ['sample_FM_H6C6']
</code></pre>
<p>I need to group elements in &quot;a&quot; list based on the values in &quot;condition1&quot; and &quot;condition2&quot;  lists and save the result to the third list. I know how to do it with for loop, but I guess using pandas there might be better solution.</p>
<p>I know only how to do it for one list condition:</p>
<pre><code>pattern = '(%s)' % '|'.join(map(re.escape, condition1))
series_files = pd.Series(a)
df_grouped_files = series_files.groupby(series_files.str.extract(pattern, expand=False), sort=False).agg(list)
</code></pre>
<p>But I don't know how to do it for the cross product from two list conditions.</p>
","2","Question"
"78040425","","<p>I have a list formed like this</p>
<pre><code>['s3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20201231/', 's3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20230531/']
</code></pre>
<p>and I should extract from it only the digits 20230531 and 20201231. I should put these in another list. How can I do?</p>
<p>I should get
['20230531','20201231']</p>
","-1","Question"
"78044966","","<p>In <code>My_list</code> below, I want to modify the elements' names based on the following logic:</p>
<ol>
<li><p>Pick the repeated word in the name (ex. <code>beginner</code> in <code>&quot;(beginner_post1 - beginner_baseline)&quot;</code>)</p>
</li>
<li><p>Pick the numeric in the NON-repeated name (ex. <code>1</code> in <code>&quot;post1&quot;</code>)</p>
</li>
<li><p>Modify the name to <code>&quot;Gain_numeric(repeated word)&quot;</code> (ex. <code>Gain_1(beginner)</code>)</p>
</li>
</ol>
<p>Is it possible to apply this logic to achieve my <code>Desired_output</code> below?</p>
<pre><code>My_list = 
  list(&quot;(beginner_post1 - beginner_baseline)&quot;= c(5,-2),
       &quot;(intermediate_post1 - intermediate_baseline)&quot;= c(6,-3),
       &quot;(advanced_post1 - advanced_baseline)&quot;= c(4,-1),
       &quot;(beginner_post2 - beginner_baseline)&quot;= c(8,-2),
       &quot;(intermediate_post2 - intermediate_baseline)&quot;= c(9,-3),
       &quot;(advanced_post2 - advanced_baseline)&quot;= c(7,-1),
       &quot;(framework notes_posttest1 - framework notes_baseline)&quot;=c(1,2),
       &quot;(note-taking instruction_posttest1 - note-taking instruction_baseline)&quot;=1
  )


Desired_output = 
  list(&quot;Gain_1(beginner)&quot;= c(5,-2),
       &quot;Gain_1(intermediate)&quot;= c(6,-3),
       &quot;Gain_1(advanced)&quot;= c(4,-1),
       &quot;Gain_2(beginner)&quot;= c(8,-2),
       &quot;Gain_2(intermediate)&quot;= c(9,-3),
       &quot;Gain_2(advanced)&quot;= c(7,-1),
       &quot;Gain_1(framework notes)&quot; = c(1,2),
       &quot;Gain_1(note-taking instruction)&quot;=1
)
</code></pre>
","0","Question"
"78044990","","<p>Maybe the <strong>I am new to python</strong> was lost on many of you.
The code below returns 8. Why?</p>
<pre><code>numbers = [2,3,5,8]
print(numbers[numbers[1]])
</code></pre>
<p>When working with slicers, I would expect to see:</p>
<pre><code>print(numbers[:]) = [2,3,5,8]
or 
print(numbers[:-1]) = [2,3,5]
</code></pre>
<p>I have never seen something like this:</p>
<pre><code>  print(numbers[numbers[1]])
</code></pre>
<p>Is the list <em>numbers</em> slicing itself? And if yes, how is it doing it?</p>
","-4","Question"
"78045574","","<p>Is there a way to merge a data frame and list in R based on the names of the items in a list?</p>
<p>Example want to merge this:</p>
<p><img src=""https://i.sstatic.net/Zlkof.png"" alt="""" /></p>
<p>And this:</p>
<p><img src=""https://i.sstatic.net/Yhi1d.png"" alt="""" /></p>
<p>Into a dataframe that looks like this:</p>
<p><img src=""https://i.sstatic.net/CKXwK.png"" alt="""" /></p>
<p>Example of data.frame</p>
<pre><code>data = structure(list(Col.A = c(&quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, 
&quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;), Col.B = c(&quot;x&quot;, &quot;x&quot;, &quot;x&quot;, 
&quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;), 
    Group = c(&quot;Group1&quot;, &quot;Group1&quot;, &quot;Group1&quot;, &quot;Group1&quot;, &quot;Group1&quot;, 
    &quot;Group2&quot;, &quot;Group2&quot;, &quot;Group2&quot;, &quot;Group2&quot;, &quot;Group2&quot;, &quot;Group3&quot;, 
    &quot;Group3&quot;, &quot;Group3&quot;, &quot;Group3&quot;, &quot;Group3&quot;), Variable = c(&quot;V1&quot;, 
    &quot;V2&quot;, &quot;V3&quot;, &quot;V4&quot;, &quot;V5&quot;, &quot;V1&quot;, &quot;V2&quot;, &quot;V3&quot;, &quot;V4&quot;, &quot;V5&quot;, &quot;V1&quot;, 
    &quot;V2&quot;, &quot;V3&quot;, &quot;V4&quot;, &quot;V5&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-15L))
</code></pre>
<p>Example list:</p>
<pre><code>List = list(GROUP1 = list(V1 = 0.857138, V2 = 1, V3 = 0.5, 
                          V4 = &quot;not limiting&quot;, V5 = 0.1), 
            Group2 = list(V1 = 0.65, V2 = 1, V3 = 1, 
                          V4 = 0.6, V5 = 0.25), 
            Group3 = list(V1 = 0.65, V2 = 0.75, V3 = 0.3, 
                          V4 = 1, V5 = 1))
</code></pre>
","3","Question"
"78047149","","<p>The title is a bit loose, but I would like to assign to each element of a list the name of that element as it appears in the global environment.</p>
<pre><code>a&lt;-1
b&lt;-2
c&lt;-3
l&lt;-list(a,b,c)
</code></pre>
<p>what I want is the equivalent of the following:</p>
<pre><code>l&lt;-list(&quot;a&quot;=a,&quot;b&quot;=b,&quot;c&quot;=c)
</code></pre>
<p>or</p>
<pre><code>names(l)&lt;-c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)
</code></pre>
<p>so that <code>names(l)</code> return <code>c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</code>.
Since I could have lists with lots of elements, I would prefer to avoid all the typing needed for the most straightforward solution (<code>l&lt;-list(&quot;a&quot;=a,&quot;b&quot;=b,&quot;c&quot;=c)</code>).</p>
<p>I know I can list the names of all variables in the global env with <code>names(as.list(.GlobalEnv))</code>, but not all variables in <code>.GlobalEnv</code> are contained in the list <code>l</code>.
I also know that <code>deparse(substitute(a))</code> return <code>&quot;a&quot;</code>, but it doesn't work in a loop or a <code>lapply</code> call.
Maybe the solution is straightforward, but I cannot figure it out.</p>
<p>How could I do it programmatically?</p>
","2","Question"
"78050884","","<p>how can i modify the tab function to print the element 'c'?</p>
<pre><code>  def tab(data):
    for i, v in enumerate(data):
        print(i, v[0], v[1])

    tab([['a', 'b']])
    tab([['a', 'b', 'c']])
</code></pre>
<p>Result:</p>
<pre><code>$ python3 tabulate2.py 
0 a b
0 a b
</code></pre>
","1","Question"
"78051065","","<p>I'm unable to get this working for the desired result. I also want to separate the items in the list that do not have digits in position from 5th to 7th.</p>
<p>List:</p>
<pre class=""lang-none prettyprint-override""><code>HLJ3007A7S
SKC4491U7K
NAS1782P3K
MK217TRG
RRS38W23KS
</code></pre>
<p>Output I am getting:</p>
<pre class=""lang-none prettyprint-override""><code>007
491
782
7TR
8W2
</code></pre>
<p>The result I want:</p>
<pre class=""lang-none prettyprint-override""><code>007
491
782
</code></pre>
<p>This is the for loop I could code:</p>
<pre><code>for d in optionList:
    validCodes.append(d[4:7])
</code></pre>
","-3","Question"
"78055063","","<p>I am trying out Kotlin's List Util <strong><code>fastAny()</code></strong> function with this sample code:</p>
<pre><code>fun main() {

    val list = mutableListOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    val predicate = list.fastAny { it &gt; 3 }

}
</code></pre>
<p>On <code>Android project</code> the function is resolving but it is not being resolved on <code>IntelliJ project.</code>
<a href=""https://i.sstatic.net/TQGg1.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/TQGg1.png"" alt=""enter image description here"" /></a></p>
<p>What could I be missing?</p>
","0","Question"
"78060537","","<p>I can achieve what I'm after with a simple for loop, but feel there's a much more pythonic way of achieving the same goal, I just can't figure it out. For the n-th element in a list (and sometimes n-th and m-th, more than one index), I would like to duplicate that element and have ever other element move down by one.</p>
<p>For example, this script takes the element at index 4 and 5 and duplicates it:</p>
<pre><code> old_list = [1,2,3,4,5,6,7,8,9,10]
 new_list = []
    
 for idx, value in enumerate(old_list):
     if idx==4 or idx==5:
         new_list.append(value)
         new_list.append(value)
     else:
         new_list.append(value)
            
</code></pre>
<p>Output:
<code>new_list = [1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 10]</code></p>
<p>The script above isn't optimal, I'm sure. But demonstrates my objective.</p>
<p>Edit: Added more clarity to problem statement. To answer some questions,</p>
<ul>
<li>In my case the list always has 48 elements, but I'm curious as to any length</li>
<li>I'd like to duplicate any stated element index (sometimes two indexes, sometimes none). In this example, elements 4 and 5 (which could be swapped out for any two others via a variable instead of hard coded numbers)</li>
</ul>
","2","Question"
"78070853","","<p>I have a list of dicts like this:</p>
<pre><code>data = [
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 8, 0), &quot;km&quot;: 10},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 13, 30), &quot;km&quot;: 20},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 17, 30), &quot;km&quot;: 40},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 9, 15), &quot;km&quot;: 15},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 14, 45), &quot;km&quot;: 25}
]
</code></pre>
<p>Now I want to find the first time of each day and assign km = 0. Which should lead to this:</p>
<pre><code>data = [
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 8, 0), &quot;km&quot;: 0},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 13, 30), &quot;km&quot;: 20},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 17, 30), &quot;km&quot;: 40},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 9, 15), &quot;km&quot;: 0},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 14, 45), &quot;km&quot;: 25}
]
</code></pre>
<p>How can I do this?</p>
<p>So far I did not even find a good starting point to approach this issue.</p>
","1","Question"
"78079508","","<p>Where is the problem with this code?</p>
<pre><code>def my_average(*num):
    s, count = 0, 0
    for nums in num:
        if type(nums) == int:
            s += nums

        elif type(nums) == float:
            s += nums

        elif type(nums) == str:
            for k in nums:
                float_num = float(k)
                s += float_num

        count += 1
    return round(s / count, 2)

test_case = (2, 3, 25, '234.123123', 3, 1, 0)
print(my_average(*test_case))
</code></pre>
<blockquote>
<p>Actually, I wanted to convert the decimal string into a decimal number and use it in my calculations.</p>
</blockquote>
<h2></h2>
","1","Question"
"78082911","","<p>Quick Explanation:</p>
<p>I have a Hashmap that stores lists in different orders depending on their sortType. I want this to be stored in memory so that I don't have to sort each list on runtime, many times over which would be causing a lot of strain on CPU usage.</p>
<p>Currently I have a general HashMap that stores all items with their corresponding ID...</p>
<pre><code>private Map&lt;String, Cosmetic&gt; cosmeticIDs;
</code></pre>
<p>I then store each of these IDs in a list which has been sorted based on the sortType and inserted into a HashMap as shown below...</p>
<pre><code>public enum SortType {
    ALPHABETICALLY,
    ALPHABETICALLY_REVERSE,
    RARITY,
    RARITY_REVERSE;
}
</code></pre>
<pre><code>        // List of Strings is the ID of each item
    private EnumMap&lt;SortType, List&lt;String&gt;&gt; availableTrailsIDs;
    private EnumMap&lt;SortType, List&lt;String&gt;&gt; availableGadgetsIDs;
    private EnumMap&lt;SortType, List&lt;String&gt;&gt; availableSuitsIDs;
    private EnumMap&lt;SortType, List&lt;String&gt;&gt; availablePetsIDs;
</code></pre>
<p>I then use the following to get the sorted map on runtime:</p>
<pre><code>List&lt;String&gt; gadgets = availableGadgets.get(sortType);

for (String gadgetID : gadgets.subList(min, max)) {
   Cosmetic gadget = CosmeticHandler.getInstance().getCosmeticFromID(gadgetID);
   // LOAD GADGETS IN ORDER
}
</code></pre>
<p>Is there a better way of doing this? It seems like this a massive design flaw and is wasting a ton of memory.</p>
","0","Question"
"78090287","","<p>I have a list of elements that occur in order and I'd like to add one at a time to a list.</p>
<p>Desired output:</p>
<pre><code>'first_page'
'first_page + second_page'
'first_page + second_page + third_page'
'first_page + second_page + third_page + fourth_page'

...
</code></pre>
<p>Data structure:
<code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']</code></p>
<p>How can I get desired output? Thanks!</p>
<p>So far, I'm able to add the next page to the previous page using this function:</p>
<pre><code>new_list = []
for index, elem in enumerate(page_list):
    if(index&lt;(len(page_list)-1)):
        new_list.append(elem + ' + ' + page_list[index+1])
    else:
        new_list.append(elem)
</code></pre>
<p>which returns:</p>
<pre><code>['first_page + second_page',
 'second_page + third_page',
 'third_page + fourth_page',
 'fourth_page']
</code></pre>
","0","Question"
"78093964","","<p>I am having trouble with lists of tuples inside them.</p>
<p>If I have a list of tuples like this:</p>
<pre><code>list = [('1', 'a'), ('2', 'b'), ('3', 'c'), ('3', 'd'), ('4', 'e'), ('4', 'f'), ('5', 'g')]
</code></pre>
<p>but instead I want to have it formatted like this, where there is only one of each number with a list of letters that are following those numbers instead of them being all separate:</p>
<pre><code>list = [('1', ['a']), ('2', ['b']), ('3', ['c', 'd']), ('4', ['e', 'f']), ('5', ['g'])]
</code></pre>
<p>what would be the approach?</p>
","-7","Question"
"78094522","","<p>With a preferred font list given,<a href=""https://github.com/tugalsan/com.tugalsan.blg.file.tmcr/blob/main/src/main/java/com/tugalsan/blg/file/tmcr/Main.java"" rel=""nofollow noreferrer"">Main.main(...)</a></p>
<pre><code>//simplified code
List&lt;java.awt.Font&gt; preferredFontList = List.of(
  &quot;Roboto-Regular.ttf&quot;, &quot;FreeSerif.ttf&quot;, &quot;Quivira-A8VL.ttf&quot;, &quot;Code2000-rdLO.ttf&quot;
).stream().map(fontName-&gt;createFont(fontName)).toList();
</code></pre>
<p>How can i fragment a string according to preferredFontList order and their support to display (Font.canDisplay(...)) the codePoints ? <a href=""https://github.com/tugalsan/com.tugalsan.lib.file.tmcr/blob/main/src/main/java/com/tugalsan/lib/file/tmcr/server/file/TS_FileTmcrFileHandler.java"" rel=""nofollow noreferrer"">TS_FileTmcrFileHandler.addText(...)</a></p>
<pre><code>//simplified code
var text = &quot;Tuğalsan Karabacak ♠☀☁☃☎☛ ŞşİiIıÜüÖöÇçŞşĞğ&quot;;
fragment(text, preferredFontList).forEach((subText, decidedFontIdx)-&gt;{
  addText(subText, preferredFontList.get(decidedFontIdx));
});
</code></pre>
","1","Question"
"78098723","","<p>I am on Windows 11 home, Python 3.12.2.  I am playing with the rock, paper scissors application.  I would like to check if the user input is a valid choice.  I experimented with try / except and if / in.  I would like to restart the loop if the user enters a value other than the valid entries.  I've commented out the current attempt.  Otherwise the program works OK.  Suggestions?</p>
<pre><code>import random
valid_values = [&quot;rock&quot;, &quot;paper&quot;, &quot;scissors&quot;, &quot;quit&quot;]

victories = [
    [&quot;paper&quot;, &quot;rock&quot;],
    [&quot;rock&quot;, &quot;scissors&quot;],
    [&quot;scissors&quot;, &quot;paper&quot;]
    ]

# create while loop until user exits
while True:
    # prompt user to challenge computer to a game
    user_input = input(&quot;Choose rock, paper, scissors, or quit &quot;)
    challenge = user_input.lower()
    # check if user_input is valid
    # if challenge in valid_values:
    #    continue
    # else:
    #    print(&quot;this is not a valid value&quot;)
    if challenge == &quot;quit&quot;:
        print(&quot;OK, bye&quot;)
        break
    else:
        # generate random rock, paper, scissors
        guess = random.choice(valid_values[0:2])
        # determine winner and display result
        if challenge == guess:
            print(&quot;Tie!&quot;)
        elif [challenge, guess] in victories:
            print(f&quot;The {challenge} beats the {guess}, you win!&quot;)
        else:
            print(f&quot;The {guess} beats the {challenge}, you lose!&quot;)type here
</code></pre>
<p>I would like to restart the loop if the entry is invalid.  I either get both the not valid and win/loss or i can't quit.  Maybe because of the continue</p>
","1","Question"
"78099382","","<p>I'm attempting to append these two arrays as they're built but am getting unexpected results in Python:</p>
<pre><code>This = []
That = []

This.append('A')
That.append(This)

This.append('B')
That.append(This)

print(That)
</code></pre>
<p>Expected results: [['A'],['A','B']]</p>
<p>Actual results: [['A','B'],['A','B']]</p>
<p>Whereas this works as expected:</p>
<pre><code>That = []

This = ['A']
That.append(This)

This2 = ['A', 'B']
That.append(This2)

print(That)
</code></pre>
<p>Expected results: [['A'],['A','B']]</p>
<p>Actual results: [['A'],['A','B']]</p>
","-1","Question"
"78099886","","<p>Im trying to import a list from a Module but its giving me this error:</p>
<p>Traceback (most recent call last):
File &quot;main.py&quot;, line 8, in 
words_list = hangman_words.word_list()
TypeError: 'list' object is not callable</p>
<p>here is my code:</p>
<pre><code>#Step 5
import hangman_words
import hangman_art
import random

#TODO-1: - Update the word list to use the 'word_list' from hangman_words.py
#Delete this line: word_list = [&quot;ardvark&quot;, &quot;baboon&quot;, &quot;camel&quot;]
words_list = hangman_words.word_list()
chosen_word = random.choice(words_list)
word_length = len(chosen_word)

end_of_game = False
lives = 6

#TODO-3: - Import the logo from hangman_art.py and print it at the start of the game.
print(hangman_art.logo)
#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += &quot;_&quot;

while not end_of_game:
    guess = input(&quot;Guess a letter: &quot;).lower()

    #TODO-4: - If the user has entered a letter they've already guessed, print the letter and let them know.
    if guess in display:
      print(f&quot;You've already guessed {guess}&quot;)
    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        print(f&quot;Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}&quot;)
        if letter == guess:
            display[position] = letter

    #Check if user is wrong.
    if guess not in chosen_word:
        #TODO-5: - If the letter is not in the chosen_word, print out the letter and let them know it's not in the word.
        print(f&quot;You guessed {guess}, that is not in the word. You lose a (1) life&quot;)
        lives -= 1
        if lives == 0:
            end_of_game = True
            print(&quot;You lose.&quot;)

    #Join all the elements in the list and turn it into a String.
    print(f&quot;{' '.join(display)}&quot;)

    #Check if user has got all letters.
    if &quot;_&quot; not in display:
        end_of_game = True
        print(&quot;You win.&quot;)

    #TODO-2: - Import the stages from hangman_art.py and make this error go away.
    print(hangman_art.stages[lives])
</code></pre>
<p>I tried putting it in a variable as you can see in my code but it resulted in the exact same error</p>
","-1","Question"
"78101653","","<pre><code>fruits = [&quot;Strawberries&quot;, &quot;Nectarines&quot;, &quot;Apples&quot;, &quot;Grapes&quot;, &quot;Peaches&quot;, &quot;Cherries&quot;, &quot;Pears&quot;]
vegetables = [&quot;Spinach&quot;, &quot;Kale&quot;, &quot;Tomatoes&quot;, &quot;Celery&quot;, &quot;Potatoes&quot;]
 
dirty_dozen = [fruits, vegetables]
 
print(dirty_dozen[0][1])
</code></pre>
<p>i am not understanding
<code>print([dirty_dozen[0],[1]])</code> this line from code and what will be the output</p>
","1","Question"
"78104219","","<p>I have a list of 6 dictionaries:</p>
<pre><code>[{'fruit':'Apple', 'Color':'red', 'weight':'10'},
 {'fruit':'Banana', 'Color':'yellow', 'weight':'20'},
 {'fruit':'Kiwi', 'Color':'Green', 'weight':'15'},
 {'Veggie':'Onion', 'Color':'white', 'price':'10'},
 {'Veggie':'Cabbage', 'Color':'Light Green', 'price':'30'},
 {'Leafy':'Spinach', 'Color':'Dark Green', 'quantity':'30'}]
</code></pre>
<p>I need to convert it into:</p>
<pre><code>[{'Fruit':[Apple, Banana, Kiwi], 'Color':[red, yellow, green], 'weight':[10,20,15]},
 {'Veggie':[Onion, Cabbage], 'Color':[white, light green], 'price':[10,30]},
 {'Leafy':[Spinach], 'Color':[Dark Green], 'quantity':[30]}]
</code></pre>
<p>I tried multiple logics- comparing consecutive dictionaries, using map to keep a track of dictionaries with same keys but none of it is working. Can someone please advise on the code logic? Thank you</p>
","-2","Question"
"78105975","","<p>I'm working on a project for school where I need to remove any elements from a list (data) that don't fit between a lower and upper range given by the user. We are supposed to use a loop with an if statement inside.</p>
<p>This is what my code looks like so far:</p>
<pre><code>lower = int(input(&quot;Lower bound: &quot;))
upper = int(input(&quot;Upper bound: &quot;))
    
j = 0
while j &lt; len(data):
    if data[j] &lt; lower or data[j] &gt; upper:
        data.pop(j)
    j += 1
for i in range(len(data)):
    print(data[i], end = &quot; &quot;)
print()
</code></pre>
<p>I thought I had it right before I realized that there were still a few numbers that are outside of the parameters.</p>
<p>This is what data contained at this point in my code right before I prompted for lower and upper:
<code>1 10 10 11 14 20 20 24 25 25 32 33 34 36 41 42 44 45 45 48</code></p>
<p>and this is what it contained after entering 11 for lower and 41 for upper:
<code>10 11 14 20 20 24 25 25 32 33 34 36 41 44 45</code></p>
<p>Every item that should be included (11-41) is included, but it also includes 3 numbers outside of the range.</p>
<p>I apologize if the formatting for my post is incorrect, this is my first time using stack overflow. Thank you in advance</p>
","3","Question"
"78107294","","<p>I have N=12
and between 1 to 12 (in N) I want every 3 elements to be updated.</p>
<p>For example:
I am calculating the current hour(say 6am) and add 4 hours to start with &quot;6-10&quot; for the 1st 3 rows and add 4hrs for the next 3 and so on...</p>
<p>So The expected output is :</p>
<pre><code>1 6-10
2 6-10
3 6-10
4 10-14
5 10-14
6 10-14
7 14-18
8 14-18
9 14-18
10 18-22
11 18-22
12 18-22
</code></pre>
<p><strong>I have somethinglike this:</strong></p>
<pre><code>#utc_hour is the current utc hour calculated
from datetime import datetime
utc_time = datetime.utcnow()
utc_year = utc_time.year
utc_month = utc_time.month
utc_day = utc_time.day
utc_hour = utc_time.hour
utc_minute = utc_time.minute
minute = []
hour =[]
day = []
month = []
week = []
_hour = utc_hour
count = 0
n= 3
jobs = 12
while count &lt;= int(jobs):
    if layer == 'get' :  
        
        minute.append('0-59')
        incr_hour = _hour+4
        gen_hour = str(_hour)+'-'+str(incr_hour)   
        a = [hour.append(gen_hour)]
        print(count,x,n,hour)
    count+=1
</code></pre>
<p>and the output i get is all the 12 elements with 6-10 (the same hour)</p>
","1","Question"
"78108798","","<p>As a result of my analysis, I will have a list where every measurement will occur twice. There might be double measurements (1 is measured twice in this case)</p>
<pre><code>example_list = [1, 2, 3, 4, 1, 1, 2, 1, 3, 4]

</code></pre>
<p>My desired outcome:</p>
<pre><code>outcome = [1, 2, 3, 4, 1]
</code></pre>
<p>Order does not matter, as long as every measurement only occurs once.</p>
<p>Since there might be double measurements, I cannot use <code>unique()</code>.</p>
<p>Is there a way to efficiently half the list so every measurement only occurs once?</p>
<p>Edit for clarification: The list elements from double measurements will occur 4 (in this case) or more times, the ones from repeated measurements will occur twice</p>
","1","Question"
"78113066","","<p>In a range of list that contains an interval (1-59/4) i want the first element alone to change for ever 3 rows.</p>
<pre><code>n = 14
lis_num = []

for x in range(n):
   lis_num.append('need the logic')

output of lis_num should be like below:
1 1-59/4
2 2-59/4
3 3-59/4
4 1-59/4
5 2-59/4
6 3-59/4
7 ..
8 ..
.....
14 ..
</code></pre>
<p>and so on from 0-13th row</p>
<p>I havent tried anything yet, looking out for an idea on how we can approach this.</p>
","1","Question"
"78113710","","<p>I am new to programming and am trying to write a card game using python.</p>
<p>I have some problems:</p>
<ol>
<li>I am reading in a decklist from a .txt-file like this:</li>
</ol>
<p><code>2,Card001,1</code></p>
<p><code>2,Card002,2</code></p>
<p><code>2,Card003,3</code></p>
<p>I am trying to display images in tkinter based on this decklist.</p>
<p>My main problem is that reading in gives me a list with the card names as a string. And I don't know how to convert this string so that I am able to refer to it and display the associated images.</p>
<p>Here is my &quot;simplified&quot; code:</p>
<pre><code>import csv
import tkinter as tk
from PIL import ImageTk,Image
import random

### CREATING GUI:

root = tk.Tk()
root.geometry(&quot;1260x700&quot;)
root.resizable(width=True, height=False)
root.title(&quot;RandomCards&quot;)

### READING IN TXT-FILE:

col_names = (&quot;Quantity&quot;, &quot;Card Name&quot;, &quot;Value&quot;)

with open(&quot;deck_list.txt&quot;, &quot;r&quot;, newline=&quot;&quot;) as decklist:
    reader = csv.reader(decklist)
    data = list(reader)

### CREATING DECK:

deck = []

for i, row in enumerate(data, start=4):
    if row[0]=='1':
        deck.append(row[1]) 
    if row[0]=='2':
        deck.append(row[1])
        deck.append(row[1]) 
    if row[0]=='3':
        deck.append(row[1])
        deck.append(row[1])
        deck.append(row[1])
           
### STORING IMAGES:
    
img_Card001 = Image.open(&quot;C:/Users/DFeldmann/Card001.webp&quot;)
Card001 = ImageTk.PhotoImage(img_Card001)

img_Card002 = Image.open(&quot;C:/Users/DFeldmann/Card002.webp&quot;)
Card002 = ImageTk.PhotoImage(img_Card002)

img_Card003 = Image.open(&quot;C:/Users/DFeldmann/Card003.webp&quot;)
Card003 = ImageTk.PhotoImage(img_Card003)

#### &gt;&gt;&gt; This is how &gt;deck&lt; should look like: 
####     deck = [Card001, Card001, Card002, Card002, Card003, Card003]

hand_size = 4
def draw_hand():
    for i in range(hand_size):
        draw = deck[random.randint(0,len(deck)-1)]
        deck.remove(draw)
        hand.append(draw)
    
hand = []
draw_hand()
print(hand)

### CREATING HAND SLOTS:

button = tk.Button(root, image=hand[0])
button.grid(row=1, column=1)

button = tk.Button(root, image=hand[1])
button.grid(row=1, column=2)

button = tk.Button(root, image=hand[2])
button.grid(row=1, column=3)

button = tk.Button(root, image=hand[3])
button.grid(row=1, column=4)


root.mainloop()
</code></pre>
<ol start=""2"">
<li>I guess there are a lot of things to improve like storing the images in a more efficient way or creating the deck list based on the given quantity of cards in the .txt-file.</li>
</ol>
<p>All in all this code is working if I create the deck manually, since this is not given as string. (But as object?)</p>
<p><code>deck = [Card001, Card001, Card002, Card002, Card003, Card003]</code></p>
<p>I have tried to search other topics but since I am very new to programming and do not understand a lot of the terminology it is hard for me to search for this specific issue.</p>
","0","Question"
"78113929","","<p>I have written a custom function which returns a list of <code>ggplot</code> with some data. Here is the function</p>
<pre><code>custom_fun &lt;- function(x = x){
  x = x
  # Calculate the length
  n &lt;- length(x)
  
  # First half arranged in ascending order
  fh &lt;- sort(x[1:(n/2)])
  
  # Second half arranged in ascending order
  sh &lt;- sort(x[((n/2)+1):n])
  
  d &lt;- cbind.data.frame(fh, sh)

  #Some calculations
  dis = sqrt(diff(d$fh)^2 + diff(d$sh)^2)
  sl = diff(d$sh) / diff(d$fh)
  
  #Plotting using ggplot2
    myplot &lt;- function(mydf, xcol, ycol){
      ggplot2::ggplot(data = mydf, ggplot2::aes(x = {{xcol}}, y = {{ycol}})) +
        ggplot2::geom_point(color='red', alpha=0.3, size=2)+
        ggplot2::geom_segment(color=&quot;#69b3a2&quot;, 
                              ggplot2::aes(xend=c(tail({{xcol}}, n=-1), NA), 
                                  yend=c(tail({{ycol}}, n=-1), NA))
        ) +
        ggplot2::geom_abline (slope=1, linetype = &quot;dashed&quot;, color=&quot;Red&quot;) +
        ggplot2::xlab(&quot; &quot;) +
        ggplot2::ylab(&quot; &quot;)
    }
  
  my_plot &lt;- myplot(d, fh, sh)
  
  return(list(`Dis` = dis, `SL` = sl,
              `Plot` = my_plot))
}
</code></pre>
<p>I am using <code>lapply</code> to apply the function to multiple columns like</p>
<pre><code>try &lt;- lapply(iris[-5], custom_fun)
</code></pre>
<p>Now, how can I extract the ggplots and make multipanel plots like the following plot?
<a href=""https://i.sstatic.net/m1UgT.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/m1UgT.png"" alt=""enter image description here"" /></a></p>
","0","Question"
"78115183","","<p>So far I have the code I need to open a CSV file and import the data contained into several lists. However, these are all lists of strings, and I need some as lists of strings and others as lists of integers.</p>
<p>So far I have the following code to import my data into a series of lists.</p>
<pre class=""lang-py prettyprint-override""><code>filename = open('/path/to/myfile.csv', 'r')
file = csv.DictReader(filename)

Sample_ID = []
Well = []
DNA_vol =[]
ddH2O_vol = []

for col in file:
    Sample_ID.append(col['Sample_ID'])
    Well.append(col['Well'])
    DNA_vol.append(col['DNA_vol'])
    ddH2O_vol.append(col['ddH2O_vol'])
</code></pre>
<p>With lists showing as below:</p>
<pre class=""lang-py prettyprint-override""><code>Well = ['A1', 'A2', 'A3', 'A4', 'A5']
DNA_vol = ['2', '4', '6', '8', '10', '1', '2', '4', '8', '10']
</code></pre>
<p>Sample_ID and Well show as intended, as a list of strings. However I need DNA_vol and ddH2O_vol to be a list of integers instead for my code to work as intended.</p>
<p>I have tried including an int() function in various places at the appending section and afterwards, but no luck.</p>
<p>How can I change the DNA_vol.append... and ddH2O_vol.append... lines to produce lists of integers?</p>
<p>Other similar questions open the file using</p>
<pre><code>open with
</code></pre>
<p>instead, and so these solutions do not help my specific case.</p>
<p>Many thanks</p>
","0","Question"
"78121579","","<pre><code>lst = [2,3,4]
print(lst.append(1))
</code></pre>
<p>why the above print is returning None</p>
<p>while <code>print(lst[1])</code> works?</p>
","-1","Question"
"78124048","","<p>I am a total beginner in Python.
Can't figure out why the following doesn't work when I am trying to find the minimum excludant of the given set.</p>
<pre><code>def mex(my_list):
    my_list = set(my_list)
    mex = 0
    while mex in my_list:
        mex += 1
    return mex

a = [1, 0, 2, 4]
print(mex(a))
</code></pre>
","-1","Question"
"78127779","","<p>In <a href=""https://stackoverflow.com/questions/77908175/ansible-add-attachment-to-email-only-if-a-condition-is-met"">this thread</a> it is explained how to add a single attachment to a mail sent via <a href=""https://docs.ansible.com/ansible/latest/collections/community/general/mail_module.html"" rel=""nofollow noreferrer"">community.general.mail module</a> only if a condition is met.</p>
<p>Now I would like to add as attachment many files from a list of attachments if some (=&quot;their&quot;) respective condition is met.</p>
<p>I have tried to do so by defining the list of files to attach is</p>
<pre><code>list_of_attachments_paths: 
  &quot;{% set attachments_list = [] %}
  {% if NOL_in_file1.stdout|int &gt; 0  %}
  {{ attachments_list.append( file1_path ) }}
  {% endif %}
  {% if NOL_in_file2.stdout|int &gt; 0  %}
  {{ attachments_list.append( file2_path ) }}
  {% endif %}
  {{ attachments_list }}&quot;
</code></pre>
<p>a debug task</p>
<pre><code>    - name: show list_of_attachments_paths
      debug:
        msg: 
          - &quot;{{ list_of_attachments_paths }}&quot;
</code></pre>
<p>and this the task to send the mail</p>
<pre><code>- name: Send the analysis via e-mail 
  community.general.mail:

    subtype: html  
    host: smtp.myserver.it
    port: 25
    sender: automated-sender@myserver.it
    to:
      &quot;{{ mail_to_recipients }}&quot;
    cc:
      &quot;{{ mail_cc_recipients }}&quot;


    subject: &quot;[automated-sender] my analysis&quot;
    attach:
      - &quot;{{ list_of_attachments_paths }}&quot;

    body: &quot;{{ body_analysis }}&quot;
</code></pre>
<p>the debug task returns:</p>
<pre><code>show list_of_attachments_paths...   
  localhost ok: {    
    &quot;changed&quot;: false,    
    &quot;msg&quot;: [    
        &quot;       ['/home/myuser/mypath/file1.csv', '/home/myuser/mypath/file2.csv']&quot;

    ]

}
</code></pre>
<p>but I get this error and I don't understand why</p>
<pre><code>Send the report via e-mail...

An exception occurred during task execution. To see the full traceback, use -vvv. The error was: FileNotFoundError: [Errno 2] No such file or directory: &quot;       ['/home/myuser/mypath/file1.csv'&quot;

  localhost failed | msg: Failed to send community.general.mail: can't attach file        ['/home/myuser/mypath/file1.csv': [Errno 2] No such file or directory: &quot;       ['/home/myuser/mypath/file1.csv'&quot;
</code></pre>
<p>on <a href=""https://docs.ansible.com/ansible/latest/collections/community/general/mail_module.html#parameter-attach"" rel=""nofollow noreferrer"">ansible documentation for task key <code>attach</code></a> it is clearly stated that the input must be a list of path of attachments, so what is the problem here?</p>
","0","Question"
"78129480","","<p>Sorry, most probably that's been discussed already, but I couldn't find the exact match.
Let's say I've created the list of values with multiple sublevels identical between all the first-order values. Something like that:</p>
<pre><code>set.seed(42)
data &lt;- data.frame(type = letters[1:10], A = runif(10), B = runif(10)*5, C = runif(10)/2, D = 1:10)
correlations &lt;- apply(data[,2:5], 2, cor.test, data$A)
str(correlations)
</code></pre>
<p>That results in the list with identical sublevel names (&quot;p-values&quot;, &quot;estimate&quot; and many others). Like that:
<a href=""https://i.sstatic.net/1bQuj.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/1bQuj.png"" alt=""enter image description here"" /></a></p>
<p>Is there a &quot;simple&quot; way to directly address each sublevel as a group ? Like <code>correlations$..$p-value</code> or something similar. So, one doesn't need to conduct additional manipulations creating a separate dataframe for that ?
Thank you!</p>
","1","Question"
"78130203","","<p>I have two columns: <code>serial_number</code> and <code>inv_number</code> containing lists. If there is one <code>inv_number</code> for multiple <code>serial_number</code>, I need to make the size of <code>inv_number</code>'s list the same as <code>serial_number</code>'s.</p>
<pre><code>    serial_number                                       inv_number
28  [С029768, С029775]                                  [101040031171, 101040031172]
29  [090020960190402011, 090020960190402009]            [210134002523, 210134002524]
31  [1094]                                              [410124000215]
32  [01]                                                [101040022094]
33  [F161B5, F17D86, F17D8D, F1825C, F1825A, F1825D]    [101040026976]
</code></pre>
<p>Here at the index 33 we have 6 serial numbers but one inventory number, so it should be changed to</p>
<pre><code>[101040026976, 101040026976, 101040026976, 101040026976, 101040026976, 101040026976]
</code></pre>
<p>I've tried to do it by &quot;multiplying&quot; values to make a list (like <code>[value] * N</code>):</p>
<pre><code>si.loc[si['inv_number'].apply(len)==1, 'inv_number'].apply
    (lambda x: [str(x[0])] * si['serial_number'].apply(len).values)
</code></pre>
<p>but it gives me an error:</p>
<blockquote>
<p>UFuncTypeError: ufunc 'multiply' did not contain a loop with signature matching types (dtype('&lt;U12'), dtype('int64')) -&gt; None</p>
</blockquote>
<p>How can I solve this problem?</p>
","4","Question"
"78134103","","<p>I have a list <code>S</code> of lists. All lists in <code>S</code> are of the same size and have numbers as entries.</p>
<p>We say that <code>S</code> has a minimum if there is a list in <code>S</code> such that its entries are not greater than the entries in the corresponding positions in other lists.</p>
<p>For example,</p>
<p><code>S = [[4, 5, 6], [3, 6, 9], [1, 4, 6], [2, 5, 8]]</code> has a minimum (the entries of <code>[1, 4, 6]</code> are smaller than the corresponding entries of other lists).</p>
<p><code>S = [[4, 5], [3, 6]]</code> doesn't have a minimum.</p>
<p>Is there  way to do this without checking all possible pairs of lists?</p>
","0","Question"
"78134618","","<p>I'm wondering how can I subset dataframes by their column names from a list of dataframe?</p>
<p>For example I have <code>MyDfList</code>, a list of 3 dataframes with 4 columns, and I just want to keep only two columns (<code>A</code> and <code>D</code>) from all the dataframe in the list.</p>
<pre><code>MyDfList &lt;- list(data.frame(A = &quot;S1&quot;, B = &quot;2208&quot;, C =&quot;2399&quot;, D=&quot;1.086504&quot;),
                data.frame(A = &quot;S2&quot;, B = &quot;6756&quot;, C =&quot;6970&quot;, D=&quot;1.031676&quot;),
                data.frame(A = &quot;S3&quot;, B = &quot;8271&quot;, C =&quot;8401&quot;, D=&quot;1.015718&quot;))
</code></pre>
<p>I was trying but couldn't get through.</p>
<pre><code>out0&lt;-lapply(MyDfList , function(x) c(&quot;A&quot;,&quot;D&quot;) %in% colnames(x))

out1 &lt;- Filter(function(x) c(&quot;A&quot;,&quot;D&quot;) %in% names(x), MyDfList )

out2&lt;-MyDfList[sapply(MyDfList , function(x) c(&quot;A&quot;,&quot;D&quot;) %in% colnames(x))]
</code></pre>
","1","Question"
"78134803","","<p>I have a form with about 15 textform fields to input data by the user. What is the best solution for this?</p>
<p>I have currently created a list like below:</p>
<pre><code>List&lt;TextEditingController&gt; textController = [
    TextEditingController(), //name
    TextEditingController(), //location
    TextEditingController(), //days
    TextEditingController(), //year
    TextEditingController(), //hour
    TextEditingController(), //minutes
    TextEditingController(), //seconds
    TextEditingController(), //lat_dec
    TextEditingController(), //lng_dec
    TextEditingController(), //lat_deg
    TextEditingController(), //lat_min
    TextEditingController(), //lat_sec
    TextEditingController(), //lng_deg
    TextEditingController(), //lng_min
    TextEditingController(), //lat_sec
  ];
</code></pre>
<p>Can I reuse the the same TextEditingController to avoid so many variables?
Any suggestions?</p>
","1","Question"
"78135033","","<p>I am trying to set a state in a component and transfer that list from one component to another. But getting console error as List.map() is not a function!</p>
<p>I am trying to get webpage as <a href=""https://i.sstatic.net/DF2HR.png"" rel=""nofollow noreferrer"">enter image description here</a> using react js</p>
<p>App.js :</p>
<pre><code>import GoogleSuggestions from './components/GoogleSuggestions'

import './App.css'

const suggestionsList = [
  {id: 1, suggestion: 'Price of Ethereum'},
  {id: 2, suggestion: 'Oculus Quest 2 specs'},
  {id: 3, suggestion: 'Tesla Share Price'},
  {id: 4, suggestion: 'Price of Ethereum today'},
  {id: 5, suggestion: 'Latest trends in AI'},
  {id: 6, suggestion: 'Latest trends in ML'},
]

const App = () =&gt; &lt;GoogleSuggestions suggestionsList={suggestionsList} /&gt;

export default App
</code></pre>
<p>components/GoogleSuggestions :</p>
<pre><code>// Write your code here
import {Component} from 'react'

import SuggestionItem from '../SuggestionItem'

import './index.css'

class GoogleSuggestions extends Component {
  state = {suggestionsList: this.props, searchInput: ''}

  showoptions = event =&gt; {
    this.setState({searchInput: event.target.value})
  }

  render() {
    const {suggestionsList, searchInput} = this.state
    console.log(typeof suggestionsList)
    return (
      &lt;div className=&quot;bg-container&quot;&gt;
        &lt;img
          className=&quot;googleLogo&quot;
          src=&quot;https://assets.ccbp.in/frontend/react-js/google-logo.png&quot;
          alt=&quot;google logo&quot;
        /&gt;
        &lt;div className=&quot;input-container&quot;&gt;
          &lt;div&gt;
            &lt;img
              className=&quot;search-icon&quot;
              src=&quot;https://assets.ccbp.in/frontend/react-js/google-search-icon.png&quot;
              alt=&quot;search icon&quot;
            /&gt;
            &lt;input
              type=&quot;search&quot;
              value={searchInput}
              onClick={this.showoptions}
              className=&quot;input&quot;
              placeholder=&quot;Search Google&quot;
            /&gt;
          &lt;/div&gt;
          &lt;ul className=&quot;ul-cont&quot;&gt;
            {suggestionsList.map(eachItem =&gt; (
              &lt;SuggestionItem itemDetails={eachItem} key={eachItem.id} /&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}

export default GoogleSuggestions
</code></pre>
<p>SuggestionItem</p>
<pre><code>
// Write your code here 
import {Component} from 'react' 
import './index.css'  
class SuggestionItem extends Component {
   render() {
     const {itemDetails} = this.props
     const {id, suggestion} = itemDetails
     return (
       &lt;li&gt;
         &lt;div className=&quot;Item-cont&quot;&gt;
           &lt;p&gt;{suggestion}&lt;/p&gt;
           &lt;img
             src=&quot;https://assets.ccbp.in/frontend/react-js/diagonal-arrow-left-up.png&quot;
             alt=&quot;arrow&quot;
           /&gt;
         &lt;/div&gt;
       &lt;/li&gt;
     )
   }
}
export default SuggestionItem
</code></pre>
<p>I am expecting to send list to component/GoogleSuggestions but getting as object.</p>
","0","Question"
"78137403","","<p>I am trying to build an app that can find specific ingredients in a food item's list of ingredients. <br />
I have a list of food ingredients called filtered results</p>
<pre><code>filtered results: [{key: enriched corn meal corn meal, vegetable oil (corn, canola, and/or sunflower oil
</code></pre>
<p>I want to find everything in this list that matches my list called <code>desired strings</code></p>
<pre><code>desired Strings: [ sesame oil, sesamin,  vegetable oil, canola oil]
</code></pre>
<p>Currently I am using this method to compare them</p>
<pre><code>  Set&lt;String&gt; lowercaseSet1 =
      cleanedUpStrings.map((e) =&gt; e.toLowerCase().trim()).toSet();
  Set&lt;String&gt; lowercaseSet2 =
      desiredStrings.map((e) =&gt; e.toLowerCase().trim()).toSet();
  Set&lt;String&gt; commonElements = lowercaseSet1.intersection(lowercaseSet2);
</code></pre>
<p>However my <code>commonElements</code> is returning {}
I was able to split the words on spaces in order to compare single word for word and that worked. But the <code>commonElements</code> was returning &quot;vegetable&quot; instead of vegetable oil.
<br />
How can I find exact matches with more than one word?</p>
<p>Here are the full lists</p>
<pre><code>filtered results [{key: enriched corn meal (corn meal, ferrous sulfate, niacin, thiamin mononitrate, riboflavin, folic acid), vegetable oil (corn, canola, and/or sunflower 0il), cheese seasoning (whey, cheddar cheese [milk, cheese cultures, salt, enzymes], canola oil, maltodextrin [made from corn], natural and artificial flavors, salt, whey protein concentrate, monosodium glutamate, lactic acid, citric acid. artificial color [yellow 6]), and salt.}, {key: enriched corn meal (corn meal, ferrous sulfate, niacin, thiamin mononitrate, riboflavin, folic acid), vegetable oil (corn, canola, and/or sunflower 0il), cheese seasoning (whey, cheddar cheese [milk, cheese cultures, salt, enzymes], canola oil, maltodextrin [made from corn], natural and artificial flavors, salt, whey protein concentrate, monosodium glutamate, lactic acid, citric acid. artificial color [yellow 6]), and salt.}]
</code></pre>
<p>Desired Strings:</p>
<pre><code>I/flutter (14679): desired Strings: [value from home page, seed oils, sunflower oil, sunflower lecithin, sesame oil, sesamin, safflower oil, safflower oleosomes, grapeseed oil, grapeseed extract, flaxseed oil, flaxseed meal, chia seed oil, chia seed gel, pumpkin seed oil, pumpkin seed protein, hemp seed oil, hemp seed protein, poppy seed oil, poppy seed paste, mustard seed oil, mustard seed powder, cottonseed oil, cottonseed meal, vegetable oil, canola oil]
</code></pre>
<p>And I am cleaning my api results with this code:</p>
<pre><code>List&lt;String&gt; cleanedUpStrings = filteredResults.toList()
      .map((entry) =&gt; entry[&quot;key&quot;].toString().toLowerCase())
      .map((s) =&gt; s.replaceAll(RegExp(r'[^\w\s,]'),
          ' ')) // Replace characters other than word characters, spaces, and commas
      .toList();
</code></pre>
<p>I am using the cleanedUpStrings for the comparison to remove any case issues.</p>
","0","Question"
"78137780","","<p>In C# you can initialize <code>Dictionary&lt;TKey,TValue&gt;</code> like this:</p>
<pre><code>var dictionary = new Dictionary&lt;int, string&gt;()
{
  [0] = &quot;Hello&quot;,
  [1] = &quot;World&quot;
};
</code></pre>
<p>You can also initialize <code>List&lt;T&gt;</code> like this:</p>
<pre><code>var listA = new List&lt;string&gt;()
{
  &quot;Hello&quot;,
  &quot;World&quot;
};
</code></pre>
<p>The two examples listed above compile and run with no exceptions.</p>
<p>However, the following example compiles, but throws an exception:</p>
<pre><code>var listB = new List&lt;string&gt;()
{
  [0] = &quot;Hello&quot;,
  [1] = &quot;World&quot;
};
// System.ArgumentOutOfRangeException: Index was out of range.
// Must be non-negative and less than the size of the collection.
// (Parameter 'index') at System.Collections.Generic.List`1.set_Item(Int32 index, T value)
</code></pre>
<p>Is this an unfinished feature, since it compiles but throws an exception? If not, shouldn't this be a compilation error?</p>
<p>I'm using C# 12 and ASP.NET 8</p>
","0","Question"
"78137934","","<p>My task is to create combinations, more like a Cartesian product for some attribute lines of a library file. I am currently facing the problem of grouping the same attributes(of course the adjacent parameters are different) as sublists of a list. Remember my input may contain a thousand lines of attributes , which I need to extract from a library file.</p>
<p>######################</p>
<p>Example input:</p>
<pre><code>attr1 apple 1                                                          
attr1 banana 2

attr2 grapes 1                                   
attr2 oranges 2

attr3 watermelon 0
</code></pre>
<p>######################</p>
<p>Example output:</p>
<pre><code>[['attr1 apple 1','attr1 banana 2'], ['attr2 grapes 1','attr2 oranges 2'], ['attr3 watermelon 0']]
</code></pre>
<p>The result I am getting:</p>
<pre><code>['attr1 apple 1','attr1 banana 2', 'attr2 grapes 1','attr2 oranges 2', 'attr3 watermelon 0']
</code></pre>
<p>Below is the code:</p>
<pre><code>import re

# regex pattern definition
pattern = re.compile(r'attr\d+')

# Open the file for reading
with open(r&quot;file path&quot;) as file:
    # Initialize an empty list to store matching lines
    matching_lines = []

    # reading each line 
    for line in file:
        # regex pattern match
        if pattern.search(line):
            # matching line append to the list
            matching_lines.append(line.strip())

# Grouping the  elements based on the regex pattern

#The required list
grouped_elements = []

#Temporary list for sublist grouping
current_group = []

for sentence in matching_lines:
    if pattern.search(sentence):
        current_group.append(sentence)
    else:
        if current_group:
            grouped_elements.append(current_group)
        current_group = [sentence]

if current_group:
    grouped_elements.append(current_group)

# Print the grouped elements
for group in grouped_elements:
    print(group)

</code></pre>
","-1","Question"
"78140662","","<p>Can anyone please help me as I'm going round in circles with a problem that should be sooo easy!
I have an array of pixel info which I want to use to recreate a small image. Getting the pixel data is sorted, and this info exists in a 2d array list like this:</p>
<pre><code>[(255,0,0),(125,111,2),(.... etc
</code></pre>
<p>I want to then be able to write this info to a file and read it back in from another program so it is in the same (or similar) format. For example, the colour data for the tenth pixel can be read by pixel[9][0] for the red, pixel[9][1] for green etc.</p>
<p>It seems to me that I should be able to write a list of bytes as all numbers are below 256, then they could each be read back in one at a time and appended to another list. There doesn't seem to be any way to do this! Everything I have tried saves the numbers as individual digits so (255,0,0) is stored as '2','5','5','0','0'. If I try to store numbers, again it just stores digits, and if I try to store bytes, it just brings up errors insisting it can't store ints as bytes. Storing as strings doesn't help either as again the digits are stored together with newlines and stuff I just don't need.</p>
<p>I have had to delete the examples of codes I have tried because no matter what I do, I cannot submit the question as it apparently contains code that is not properly formatted. The only way I can post this is to remove all code!! But i have used the 'write' with int, chr but nothing works for me.</p>
<p>The file will be used for reading on a Raspberry Pi Pico.</p>
<p>Anyone any ideas?
Thank you.</p>
","1","Question"
"78142787","","<p>I am communicating with an endpoint created by another team in asp.net core that accepts ([FromBody] Applicant applicant)</p>
<p>The applicant object looks like this:</p>
<pre><code>public class Applicant
{
    public string FirstName{get; set;}
    public string LastName{get; set;}
    
    public List&lt;Reports&gt; Reports{get; set;}
}
</code></pre>
<p>and the list of reports is from this object:</p>
<pre><code>public class Reports
{
    public string ReportName {get;set;}
    public byte[] ReportFile {get;set;}

}
</code></pre>
<p>I am trying to call the endpoint twice where a send an applicant with one reportfile
and a second time where I send an applicant with two report files. This is what I have so far:</p>
<pre><code>byte[] report1 = new UTF8Encoding(true).GetBytes(&quot;This is a test report1&quot;);
byte[] report2 = new UTF8Encoding(true).GetBytes(&quot;This is a test report2&quot;);
byte[] report3 = new UTF8Encoding(true).GetBytes(&quot;This is a test report3&quot;);


var reportOjbect = new
{
    FirstName = &quot;John&quot;,
    LastName = &quot;Doe&quot;,
    Reports = new []
    {
        new {
            ReportName = &quot;6 week Report&quot;,
            ReportFile = report1
        }

    }

};

var baseUrl = &quot;localhost:1111&quot;;
var endpoint = &quot;/api/validate-reports&quot;;

HttpClient httpClient = new HttpClient();
httpClient.BaseAddress = new Uri(baseUrl);

var content = new MultipartFormDataContent();
content.Add(new StringContent(reportOjbect.FirstName), &quot;FirstName&quot;);
content.Add(new StringContent(reportOjbect.LastName), &quot;LastName&quot;);
//How to add list of reports here that contain both the report name and the report file
    
var request = new HttpRequestMessage(HttpMethod.Post, $&quot;{baseUrl}{endpoint}&quot;)
{ Content = content};

var response = await httpClient.SendAsync(request);

if (!response.IsSuccessStatusCode)
{
    throw new Exception($&quot;Failed to send email: {response.StatusCode}&quot;);
}    
return Results.Ok(&quot;Reports were processed&quot;);
</code></pre>
<p>How do I add a list of reports to the content object.</p>
","0","Question"
"78146728","","<p>I have a list of matirces each containing pixel values of a screen at a given moment. Matrix1 contains pixel values at moment1, matrix2 contains pixel values at moment2 and so on. Lets say I want to take a look at how one individual pixel evolves throughout time.
I created some dummy matrices to test how that would work and put them in <code>mylist</code>:</p>
<pre><code>m1=[[1,2],[3,4]]
m2=[[1,2],[3,4]]
m3=[[5,6],[7,8]]

mylist=[m1,m2,m3]

print(mylist)
</code></pre>
<p>Then I wanted to select the <code>(0,0)</code> element of the second matrix:</p>
<pre><code>
print(mylist[1][1][0])
</code></pre>
<p>This gives me the expected output <code>1</code>.
Then I wanted to generalize it and pick the <code>(0,0)</code> element of every matrix, which should give me the output <code>mynewlist=[1,1,5]</code>:</p>
<pre><code>mynewlist=[]

for i in 2:
    mynewlist.append(mylist[i][1][0])
    
print(&quot;hello hello&quot;)
print(mynewlist)
</code></pre>
<p>However, it gives me the error message:</p>
<pre><code>for i in 2:
TypeError: 'int' object is not iterable 
</code></pre>
<p>What did I do wrong?
How can I bypass this problem?
Is there any other (most propably smoother and better) way to select the <code>(i,j)</code> element from each matrix?</p>
","0","Question"
"78147140","","<p>In a list similar to this:
`</p>
<pre><code>public static List&lt;Items&gt; Models()
        {
        List&lt;Items&gt; listOfModels = new List&lt;Items&gt;()
            {
         new Items() {
        ModelID=&quot;M10&quot;,
        ModelNames = new List&lt;string&gt;() {&quot;model1&quot;,&quot;model2&quot;}},
         new Items() {
        ModelID=&quot;M20&quot;,
        ModelName = new List&lt;string&gt;(){&quot;model3&quot;,&quot;model4&quot;,&quot;model5&quot;}}
            };
           return listOfModels;
        }
</code></pre>
<p>`</p>
<p>How to get the following output?
(model1,m10)
(model2,m10)
(model3,m20)
(model4,m20)
(model5,m20)</p>
<p><code>var allModels = Models().SelectMany(c =&gt; c.ModelName)</code></p>
<p>output : model , model2, model3,...</p>
","0","Question"
"78147148","","<pre><code>a = [[1, 3, 4],[1, 7, 9]]]
b = [1, 7, 0, 9]
</code></pre>
<p>Let's say I have a nested list of a, I want to compare the list of b to the nested list <code>a</code> and return True. Say <code>b</code> has 3 items that matches with one of the lists in <code>a</code>, that would be True. How do I do this?</p>
<p>the prompt was to create a tic tac toe game. List a has all the winning combinations, while list b are all the player input. If input is contains 1, 7, and 9 (as in list b), then the combination is part of the winning combinations (in list a). However, player input could include more than 3 numbers and not in the combination order in list a.</p>
<p>I tried the below:</p>
<pre><code>a = [[1, 3, 4],[1,7,9]]
b = [1, 7, 0, 9]
set(a).issubset(b)
</code></pre>
<p>But clearly it did not work.</p>
","-1","Question"
"78151211","","<p>I am retrieving a list of users from Firebase but they are coming in as KVP.</p>
<pre><code>{[FirstName, Eric]}
{[LastNae, EricLastName]}
{[Email, Eric@yahoo.com]}
{[Phone, 12345]}
</code></pre>
<p>I need to convert this list of KVP to a list of Object Type named Person Class</p>
<pre><code>Person
{
string FirstName {get; set;}
string LastName {get; set;}
string Email {get; set;}
string Phone {get; set;}
}
</code></pre>
<p>What is the most quick and efficient way of doing so:</p>
","2","Question"
"78151501","","<p>I am an amateur Python user, so bear with me. I created a list, and filled it with hashes. But I am having trouble, because I need to search the entire list to find the first hash with a specific value and update it. Does anyone know how?</p>
<pre><code>character = [{&quot;No&quot;: 1, &quot;Name&quot;:&quot;Jeff&quot;, &quot;Level&quot;: 29, &quot;Health&quot;: 290},
             {&quot;No&quot;: 2, &quot;Name&quot;:&quot;Bill&quot;, &quot;Level&quot;: 31, &quot;Health&quot;: 310},
             {&quot;No&quot;: 3, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 4, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 5, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 6, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0}]
</code></pre>
<p>In this code, I need to find the first instance of the empty name, and update its hash with another hash</p>
<p>I tried to use indexing, but it did not work, saying &quot;Invalid Syntax&quot;</p>
<pre><code>x = character.index(&quot;EMPTY&quot;)
character[x].update(player)
print(character)
</code></pre>
","1","Question"
"78153091","","<p>I am trying to build an app that displays a list of goats for a personal project. So far, it's been going smoothly until I reached the part where I need to implement a &quot;+&quot; button that adds new items to the List.</p>
<p>This is what my list looks like:</p>
<pre><code>object DataSource {
    val goats =
        mutableListOf(
            Goats(R.string.red, R.string.alpine, 7),
            Goats(R.string.little_goat, R.string.alpine, 8),
            Goats(R.string.nana, R.string.alpine, 7),
            Goats(R.string.sharkie, R.string.alpine, 10)

        )
     }
</code></pre>
<p>Here is the Composable that deals with the Buttons but the code that uses an if statement with isButtonClicked doesn't work. What am I missing?</p>
<pre><code>@Composable
fun GoatsApp(viewModel: MainViewModel) {

    var isButtonClicked by mutableStateOf(false)

    val provider = GoogleFont.Provider(
        providerAuthority = &quot;com.google.android.gms.fonts&quot;,
        providerPackage = &quot;com.google.android.gms&quot;,
        certificates = R.array.com_google_android_gms_fonts_certs

    )
    val fontName = GoogleFont(&quot;Lato&quot;)

    val fontFamily = FontFamily(
        Font(googleFont = fontName, fontProvider = provider)
    )
    Column(modifier = Modifier
        .padding(16.dp)
        .fillMaxHeight(0.90f)) {

        Row(
            modifier = Modifier
                .fillMaxWidth(0.95f)
                .border(3.dp, Color.Gray, RoundedCornerShape(13.dp))
        ) {
            Button(
                onClick = { isButtonClicked = true },
                shape = RoundedCornerShape(10.dp),
                modifier = Modifier.background(Color.LightGray)
            ) {
                Text(text = &quot;+&quot;)
            }
            Text(
                text = &quot;Does&quot;,
                modifier = Modifier
                    .background(color = Color.LightGray)
                    .fillMaxWidth()
                    .padding(12.dp),
                fontStyle = FontStyle.Italic,
                textAlign = TextAlign.Center,
                fontFamily = fontFamily,
                fontWeight = FontWeight.ExtraLight
            )


        }
        Row {
            GoatList(modifier = Modifier.padding(8.dp))
        }

        Row(
            modifier = Modifier
                .fillMaxWidth(0.95f)
                .border(3.dp, Color.Gray, RoundedCornerShape(13.dp))
        ) {
            Button(
                onClick = { isButtonClicked = true },
                shape = RoundedCornerShape(10.dp),
                modifier = Modifier.background(Color.LightGray)
            ) {
                Text(text = &quot;+&quot;)
            }
            Text(
                text = &quot;Bucks&quot;,
                modifier = Modifier
                    .background(color = Color.LightGray)
                    .fillMaxWidth()
                    .padding(12.dp),
                fontStyle = FontStyle.Italic,
                textAlign = TextAlign.Center,
                fontFamily = fontFamily,
                fontWeight = FontWeight.ExtraLight
            )
        }

        GoatList(modifier = Modifier.padding(8.dp))

        if(isButtonClicked) {
            goats.add(Goats(R.string.little_goat, R.string.alpine, 9)) }

    }


}
</code></pre>
<p>This is how the list is displayed and it automatically displays all the items inside it.</p>
<pre><code>    @Composable
fun GoatList(modifier: Modifier = Modifier) {

    LazyVerticalGrid(columns = GridCells.Fixed(1), modifier.padding(8.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
        items(goats) { allGoats -&gt;
            GoatCard(allGoats = allGoats, viewModel = MainViewModel())
        }

    }

}
</code></pre>
","0","Question"
"78154508","","<p>I'm getting back into working with VBA after a few years away from it...</p>
<p>I have a report that I receive that has wrapped text and merged cells for presentation purposes. However, I'd like to unmerge the merged cells to be able to work the individual lines. I can do this pretty simply by recording a macro where I select everything and unwrap/unmerge all the data (although this does make for some lengthy code, so any tips to shorten that would be appreciated, but not the main point of my question).</p>
<p>Once unwrapped/unmerged, any of the rows that had merged cells now show two rows, the top one with the data that was merged, and the bottom row now blank, creating a break in the overall report. I want to write a macro that will basically control arrow down to the break in the data, copy the cell above the break, paste into the blank, and continue until the end of the report.</p>
<p>I've created a sample data file that illustrates what I'm looking at. The merge happens essentially because some projects have multiple elements (two managers or two cost centers), which makes sense for the formatted report, but not so much for doing any type of analysis on the overall data. The issues in my sample would be Projects 19, 27 and 37.</p>
<p><a href=""https://i.sstatic.net/0CPE9.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/0CPE9.png"" alt=""Sample Data Image"" /></a></p>
<p>The real report I'm working with is much larger, so a macro would be nice to quickly achieve the formatting I'm after, instead of manually copy/pasting at each unmerged break in the data. This is probably extremely simple, but my basic google searches are opening more complicated doors than I want to open. I'd assume I'm looking for some sort of Do Until active cell = blank loop, but any and all solutions would be appreciated.</p>
<p>Thanks in advance to any who can help with this.</p>
<p>I've tried searching the web for ways to create a loop that looks for a break in a list, but I'm overwhelmed by the results, most of which seem much more complicated than what I'm likely looking for. Remembered this site and that I'd asked a question here years ago and quickly received some helpful advice - figured I'd try that again.</p>
","-2","Question"
"78156397","","<pre><code>df &lt;- structure(list(DateOpened = list(DateOpened = list(&quot;2022-07-15T00:00:00&quot;), 
    DateOpened = list(&quot;2022-10-03T08:53:38.147&quot;), DateOpened = list(
        &quot;2021-04-01T00:00:00&quot;), DateOpened = list(&quot;2022-09-12T00:00:00&quot;), 
    DateOpened = list(&quot;2023-01-01T00:00:00&quot;), DateOpened = list(
        &quot;2023-04-11T18:56:08.467&quot;), DateOpened = list(&quot;2023-05-09T09:20:51.903&quot;), 
    DateOpened = list(&quot;2022-10-03T00:00:00&quot;), DateOpened = list(
        &quot;2022-09-12T00:00:00&quot;), DateOpened = list(&quot;2021-04-01T00:00:00&quot;), 
    DateOpened = list(&quot;2024-02-26T15:53:12.327&quot;), DateOpened = list(
        &quot;2024-02-26T16:10:02.563&quot;)), DateClosed = list(DateClosed = structure(list(), nil = &quot;true&quot;), 
    DateClosed = list(&quot;2023-06-01T00:00:00&quot;), DateClosed = structure(list(), nil = &quot;true&quot;), 
    DateClosed = structure(list(), nil = &quot;true&quot;), DateClosed = structure(list(), nil = &quot;true&quot;), 
    DateClosed = structure(list(), nil = &quot;true&quot;), DateClosed = list(
        &quot;2023-10-31T00:00:00&quot;), DateClosed = list(&quot;2023-06-22T00:00:00&quot;), 
    DateClosed = structure(list(), nil = &quot;true&quot;), DateClosed = list(
        &quot;2024-01-22T00:00:00&quot;), DateClosed = structure(list(), nil = &quot;true&quot;), 
    DateClosed = structure(list(), nil = &quot;true&quot;))), row.names = c(NA, 
-12L), class = &quot;data.frame&quot;)
</code></pre>
<p>I want to make this a dataframe with just the values in, no lists round them.</p>
<p>I've tried <code>as.data.frame(lapply, '[[', 1)</code>   (both [ and [[) which had no effect and <code>list_flatten</code>, which produces a list, not a dataframe.</p>
","1","Question"
"78157864","","<p>I am using a function on a pandas dataframe as :</p>
<pre><code>import spacy
from collections import Counter


# Load English language model
nlp = spacy.load(&quot;en_core_web_sm&quot;)

# Function to filter out only nouns from a list of words
def filter_nouns(words):
    SYMBOLS = '{}()[].,:;+-*/&amp;|&lt;&gt;=~$1234567890#_%'
    filtered_nouns = []
    
    # Preprocess the text by removing symbols and splitting into words
    words = [word.translate({ord(SYM): None for SYM in SYMBOLS}).strip() for word in words.split()]
    
    # Process each word and filter only nouns
    filtered_nouns = [token.text for token in nlp(&quot; &quot;.join(words)) if token.pos_ == &quot;NOUN&quot;]
    
    return filtered_nouns



# Apply filtering logic to all rows in the 'NOTE' column
df['filtered_nouns'] = sf['NOTE'].apply(lambda x: filter_nouns(x))
</code></pre>
<p>I have a dataset containing 6400 rows and <code>df['NOTE']</code> is a very long paragraph converted from the Oracle CLOB datatype.</p>
<p>This function is working quickly for 5-10 rows but for 6400 rows, it is taking a very long time.</p>
<p>Any ways to optimize this.</p>
","0","Question"
"78162097","","<p>I need a list of the results, but the out put data is array, I guess that's why the list are all inclued &quot;array&quot;. I need to plot the list into graph, since the format looks strange, I can only input the first data in the graph.
I have</p>
<pre class=""lang-py prettyprint-override""><code>def slopee(x1,y1,x2,y2):
    x = (y2 - y1) / (x2 - x1)
    return x

b = []

for i in range(0,46,1):
    a = np.array(slopee(x[i],y[i],x[i + 4],y[i + 4]))
    if a&gt;0:
        b.append(a)

print(b)
</code></pre>
<p>I got</p>
<pre><code>[array(0.98788163), array(0.85617906), array(1.00844463), array(1.07600014), array(1.21457582), array(1.32036217), array(1.2688192), array(1.24681122), array(1.3372714), array(1.10813638), array(0.97427447), array(0.91985401), array(0.73667585), array(0.70897843), array(0.73550956), array(0.83783644), array(0.71404103), array(0.70594792), array(0.61123258), array(0.41485783), array(0.39642736), array(0.3770724), array(0.34367834), array(0.25310249), array(0.2509963), array(0.18238257), array(0.13032926), array(0.13804006), array(0.07159872), array(0.01911869)]
</code></pre>
<p>How to get a normal list without array?</p>
","1","Question"
"78166361","","<p>Is there a way of removing the first element of an R list that is O(1) ?</p>
<p>I have tried several approaches including slicing and setting the first element of the list to NULL but all of my attempts seem to be O(n) presumably due to the list being copied.</p>
<p>Here is the test code I used</p>
<pre><code>library(tictoc)
    k &lt;- 15
    N &lt;- Map(function(n) 100*2^n,0:k)
    T &lt;- c()
    for(n in N)
    {
        l &lt;- as.list(1:n)
        tic(quiet=TRUE)
        # uncomment just ONE of the following to assess complexity
            ## method 1 - set the first element to NULL
            # l[[1]] &lt;- NULL
            ## method 2 - slice the list and reassign
            # l &lt;- l[2:length(l)]
            ## method 3 - drop the first entry
            # l[-1]
        res &lt;- toc(quiet=TRUE)
        t &lt;- as.numeric(res$toc - res$tic)
        T &lt;- c(T,t)
    }
    plot(N,T)
</code></pre>
<p>For example, using method 1 I get</p>
<p><img src=""https://i.sstatic.net/sJPgB.png"" alt=""enter image description here"" /></p>
","3","Question"
"78167217","","<p>I have a class &quot;patient&quot;:</p>
<pre><code>class patient:
    all_patients = []
    def __init__(self, pat_id):
        self.pat_id=pat_id
        self.plans=[]
        patient.all_patients.append(self)
</code></pre>
<p>I have to go through a log file with all therapy plans of all patients and I want to add each therapy plan to the correct patient.</p>
<p>My approach was this: (index is the current line of the log file)</p>
<pre><code>if not any (x.pat_id == index[4] for x in patients):
    patients.append(patient(index[4]))
for pat in patient.all_patients:
    if (pat.pat_id == index[4]):
        if (index[11] not in pat.plans):
            total_plans+=1
            pat.plans.append(index[11])
print(len(patient.all_patients))
print(total_plans)
</code></pre>
<p>i think it return the right numbers, but i do not think that it is a very efficient way to do so. The log files are huge and all plans are several times (for each appointment once) in the log files.</p>
<p>Can you help me please to optimize this code?</p>
","0","Question"
"78168281","","<p>I have these lists:</p>
<pre><code>{'HH1': ['x'], 'HH2': ['y', 'x'], 'HH3': ['x', 'z'], 'HH4': ['x'], 'HH5': ['x'], 'HH6': ['x'], 'HH7': ['x'], 'HH8': ['x', 'y', 'z'], 'HH9': ['x'], 'HH10': ['x', 'y'], 'HH11': ['x'], 'HH12': ['x'], 'HH13': ['x'], 'HH14': ['x'], 'HH15': ['x', 'y'], 'HH16': ['x', 'y'], 'HH17': ['x', 'y'], 'HH18': ['x']}
</code></pre>
<p>I want to iterate through them to:</p>
<ol>
<li>Count the number (i) of similar combinations</li>
<li>Create a new list with each combination, named: n=i</li>
</ol>
<p>The output should be:</p>
<pre><code>n=11: ('x')
n=5: ('x', 'y')
n=1: ('x', 'z')
n=1: ('x', 'y', 'z')
</code></pre>
<p>I can't seem to get it right.</p>
<p>**1. **I tried this, but then it skips a combination
<code>(n=1: ('x', 'z'))</code>.</p>
<pre><code>from collections import Counter
from itertools import combinations

# Counting occurrences of each combination of fuel types
combination_count = Counter()
unique_combinations = set()
for fuel_list in hfuels.values():
    for r in range(1, len(fuel_list) + 1):
        for combination in combinations(fuel_list, r):
            unique_combinations.add(tuple(sorted(combination)))

# Creating new lists for each combination
renamed_lists = {}
for combination in unique_combinations:
    count = sum(1 for fuel_list in hfuels.values() if set(combination) == set(fuel_list))
    if count:
        renamed_lists[f&quot;n={count}&quot;] = list(combination)

# Printing the renamed lists
for name, fuel_list in renamed_lists.items():
    print(f&quot;{name}: {fuel_list}&quot;)
</code></pre>
<pre><code>**Outcome:**
n=1: \['z', 'y', 'x'\]
n=5: \['y', 'x'\]
n=11: \['x'\]
</code></pre>
<p>**2. **I also tried this, but then it count the occurrences rather than combinations.</p>
<p>from collections import Counter
from itertools import combinations</p>
<pre><code># Counting occurrences of each combination of fuel types
combination_count = Counter()
unique_combinations = set()
for fuel_list in hfuels.values():
    for r in range(1, len(fuel_list) + 1):
        for combination in combinations(fuel_list, r):
            combination_count[tuple(sorted(combination))] += 1
            unique_combinations.add(tuple(sorted(combination)))

# Creating new lists for each combination
renamed_lists = {}
for combination in unique_combinations:
    count = combination_count[combination]
    if count:
        renamed_lists[f&quot;n={count}&quot;] = list(combination)

# Printing the renamed lists
for name, fuel_list in renamed_lists.items():
    print(f&quot;{name}: {fuel_list}&quot;)
</code></pre>
<p><strong>Outcome:</strong></p>
<pre><code>n=1: \['z', 'y', 'x'\]
n=2: \['z'\]
n=6: \['y'\]
n=18: \['x'\]
</code></pre>
","1","Question"
"78168283","","<p>I'm doing a heat index calculation project that will take the temperature and humidity values from files Temperature365.txt and Humidity365.txt ,
But if it found a value 0, I want it to take the previous value and next value to find the average and use that instead of 0.
For example
34
21
0
42</p>
<p>Instead of 0, I want to use the (21+42)/2 . But I mistakenly made it to take (21+34)/2, how do I change this code?</p>
<pre><code>c1 = -8.78469475556
c2 = 1.61139411
c3 = 2.33854883889
c4 = -0.14611605
c5 = -0.012308094
c6 = -0.0164248277778
c7 = 2.211732 * 10**-3
c8 = 7.2546 * 10**-4
c9 = -3.582 * 10**-6

def whatstatus(hi_val):
    if hi_val &gt;= 54:
        return &quot;Extreme Danger&quot;
    elif 41 &lt;= hi_val &lt; 54:
        return &quot;Danger&quot;
    elif 32 &lt;= hi_val &lt; 41:
        return &quot;Extreme Caution&quot;
    elif 27 &lt;= hi_val &lt; 32:
        return &quot;Caution&quot;
    else:
        return &quot;Normal&quot;

def cal_hi(T, H):
    Hi = c1 + (c2 * T) + (c3 * H) + (c4 * T * H) + (c5 * (T**2)) + (c6 * (H**2)) + (c7 * (T**2) * H) + (c8 * T * (H**2)) + (c9 * (T**2) * (H**2))
    return Hi

def handle_missing_values(data_list):
    &quot;&quot;&quot;Fills missing values in a list using the average of the previous and next values (if available).&quot;&quot;&quot;
    if len(data_list) &lt;= 1:
        return data_list  # Handle edge cases with 0 or 1 elements

    output_list = []
    for i in range(len(data_list)):
        if data_list[i] != 0:
            output_list.append(data_list[i])
        else:
            prev_value = data_list[max(i - 1, 0)]  # Safeguard against negative index
            next_value = data_list[min(i + 1, len(data_list) - 1)]  # Safeguard against exceeding list bounds
            if prev_value != 0 and next_value != 0:  # Check if both neighbors are valid
                output_list.append((prev_value + next_value) / 2)
            else:
                # Handle cases where only one neighbor is valid (or none)
                output_list.append(data_list[i])  # Maintain original value (0)

    return output_list

with open('Humidity365.txt') as Hf, open('Temperature365.txt') as Tf:
    print(&quot;Day\tTemperature(C)\tHumidity(%)\tHeat Index\tStatus&quot;, &quot;\n&quot;, &quot;---&quot; * 22)

    Tlist = []
    Hlist = []

    for i, (Tl, Hl) in enumerate(zip(Tf, Hf)):
        Tx = float(Tl.strip())
        Hx = float(Hl.strip())

        # Specific fix for line 12 (index 11) using list comprehension
        if Hx == 0:  # Check for 0 value specifically at index 11
            prev_Hx = Hlist[i - 1]
            next_Hx = Hlist[i + 1]
            Hx = (prev_Hx + next_Hx) / 2  # Calculate average for line 12 only
        elif Hx == 0:  # Apply the 0-replacement rule to other lines
            Hx = handle_missing_values([Hx])[0]

        Tlist.append(Tx)
        Hlist.append(Hx)

        heat_index_val = cal_hi(Tx, Hx)
        stat = whatstatus(heat_index_val)
        print(f&quot;{i+1}\t{Tx:.2f}\t\t{Hx:.2f}\t\t{heat_index_val:.2f}\t\t{stat}&quot;)

        if len(Tlist) % 30 == 0:
            input(&quot;Press &lt;ENTER&gt; to continue&quot;)
</code></pre>
<p>I want to it always take the (previous+next)/2 if it found a value 0</p>
","-1","Question"
"78168356","","<p>There is a list of 6700 elements for spreadsheet names of excel files. I am interested in &quot;Alpha_Beta&quot;, but there are similar names like &quot;Alpha_Beta calc&quot;, &quot;Alpha_Beta input&quot;, &quot;Alpha-Beta&quot;, &quot;Alpha Calc&quot;,..</p>
<p><code>grep(&quot;Alpha_Beta&quot;, list)</code> gave me more than just &quot;Alpha_Beta&quot;, the outcome included &quot;Alpha_Beta input&quot;, for example.</p>
<p>I ended up with a two-step solution.</p>
<pre><code>z &lt;- grep(&quot;\\&lt;Alpha\\&gt;&quot;, list_sheet_names, value = T)

y &lt;- grep(&quot;Alpha_Beta&quot;, z, value =  T)
</code></pre>
<p>I wonder if there is a better way.</p>
<p>the outcome of <code>dput(head(list_sheet_names))</code></p>
<pre><code>list(list(&quot;02Annual&quot;, file_names = &quot;2002 reports/Ec2002/annual2002.xls&quot;), 
    list(&quot;020102&quot;, file_names = &quot;2002 reports/Ec2002/ecem020102.xls&quot;), 
    list(&quot;020109&quot;, file_names = &quot;2002 reports/Ec2002/ecem020109.xls&quot;), 
    list(&quot;020116&quot;, file_names = &quot;2002 reports/Ec2002/ecem020116.xls&quot;), 
    list(&quot;020123&quot;, file_names = &quot;2002 reports/Ec2002/ecem020123.xls&quot;), 
    list(&quot;020130&quot;, file_names = &quot;2002 reports/Ec2002/ecem020130.xls&quot;))
</code></pre>
<p>The outcome of one element in the list is:</p>
<pre><code>list(&quot;report&quot;, &quot;Menu&quot;, &quot;Title Sheet&quot;, &quot;H3_NG_EFS&quot;, &quot;AB Input&quot;, 
    &quot;Alpha_Beta&quot;, &quot;B 375 Rpt&quot;, &quot;Iodines&quot;, &quot;Gross Data DB&quot;, &quot;Release DB&quot;, 
    &quot;Gross Iodine (2)&quot;, &quot;Print Header&quot;, &quot;Get Iodine&quot;, &quot;Print Iodines&quot;, 
    &quot;Print Alpha &amp; 375&quot;, &quot;Print Tritium &amp; Beta&quot;, &quot;Print Report&quot;, 
    &quot;Clear Inputs&quot;, &quot;AEMR DATE Function&quot;, &quot;Get Tritium&quot;, &quot;Menu Macros&quot;, 
    &quot;Notes &amp; Remarks&quot;, &quot;Module1&quot;, &quot;Module2&quot;, file_names = &quot;2002 reports/Ec2002/em020102.xls&quot;)
</code></pre>
","0","Question"
"78169382","","<p>I am trying to create a tree visualiser from nested list using python without any special libraries.</p>
<p>The problem I encountered is that the tree, while its nodes are stored correctly, prints out in the order of the input.</p>
<p>I have tried implementing a recursive solution to this problem, which works for inputs such as <code>[42,['a','b']] </code>- where <code>42</code> is the root node and <code>'a'</code> and <code>'b'</code> are its children. However I can also receive input like <code>[['a','b'], 42]</code>, where <code>42</code> is still the root node. Code, example output are below.</p>
<p>Here is the solution I tried implementing.</p>
<pre><code>class TreeNode:
    def __init__(self, data):
        self.data = data
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

def assign_tree_nodes(input_data):
    if isinstance(input_data, list):
        node = TreeNode(None)
        for item in input_data:
            child_node = assign_tree_nodes(item)
            node.add_child(child_node)
        return node
    else:
        return TreeNode(input_data)

def print_tree(node, indent=0):
    if node.data is not None:
        print(&quot;  &quot; * indent + str(node.data))
    if node.children:
        for child in node.children:
            print_tree(child, indent + 1)

# Prompt the user for input
input_data = eval(input(&quot;INPUT:\n&quot;))

# Assign tree nodes
root_node = assign_tree_nodes(input_data)


# Print out the tree
for child in root_node.children:
    print_tree(child)

</code></pre>
<p>This given code works for inputs such as <code>[42,['a,'b']]</code>, where the output is</p>
<pre><code>42
  a
  b

</code></pre>
<p>However for inputs like <code>[['a','b'],42]</code>, the output is</p>
<pre><code>  a
  b
42
</code></pre>
","-3","Question"
"78174425","","<p>The documentation states that a list constant in scalar context currently returns the number of values, but this may change in the future. It also states that, to use a list constant as an array, place it in parentheses. So, what is the correct way to get the number of values in a list constant, and what am I doing wrong in the code below? I get the error:</p>
<pre><code>Bareword found where operator expected at D:\Batch/list-const-error.pl line 5, near &quot;@(INFOFIELDS&quot;
        (Missing operator before INFOFIELDS?)
syntax error at D:\Batch/list-const-error.pl line 5, near &quot;@(INFOFIELDS&quot;
</code></pre>
<hr />
<pre><code>use strict;
use warnings;
use constant INFOFIELDS  =&gt; qw( filedate filetime filesize mtime filename );
use constant OUTTEMPLATE =&gt; '   A9       A7       A12      A12   A* ';
use constant NELEMENTS   =&gt; scalar @(INFOFIELDS);
my $line = pack( OUTTEMPLATE, @ARGV[0..NELEMENTS-1] );
print( &quot;$line\n&quot; );
</code></pre>
","2","Question"
"78176988","","<p>So im trying to remove some items from a vriable list which i need to use later in the code for a random choice function, but i keep getting this error:</p>
<p>TypeError: unsupported operand type(s) for -: 'list' and 'list'
def switch():</p>
<pre><code>dic = ['a','b','c','1']
global is_on
global dic
def switch():
    if is_on:
        letters.config(bg='red')
        dic = dic - ['a','b','c']
        is_on = False
    else:
        letters.config(bg='green')
        dic = dic + ['a','b','c']
        is_on = True
</code></pre>
<p>what im trying to do is to remove a, b, c from the list but be able to add it back later.</p>
","-2","Question"
"78179620","","<p>when I was working with SharePoint Online using PowerShell, I had a requirement to get all the List collection present in my SharePoint site.</p>
<p>I got all the lists using PnP PowerShell commands. But i didn't get the list collection using the SharePoint Online Management shell.
Suggest me the SharePoint Online Management Shell command to get all the lists.</p>
","-1","Question"
"78180490","","<p><code>library(tidyverse)</code></p>
<p>I have this list of dfs:</p>
<pre><code>my_list &lt;-  list(structure(list(observations = c(1L, 5L), variables = c(4L, 
                                                                        8L)), class = &quot;data.frame&quot;, row.names = c(&quot;asp_202003...Copy.xlsx&quot;, 
                                                                                                                  &quot;asp_202003.xlsx&quot;)), structure(list(observations = c(3L, 1L), 
                                                                                                                                                      variables = 5:4), class = &quot;data.frame&quot;, row.names = c(&quot;eay_201008_a.xlsx&quot;, 
                                                                                                                                                                                                            &quot;eay_202003.xlsx&quot;)), structure(list(observations = 3:4, variables = c(4L, 
                                                                                                                                                                                                                                                                                  6L)), class = &quot;data.frame&quot;, row.names = c(&quot;wana_202309...Copy.xlsx&quot;, 
                                                                                                                                                                                                                                                                                                                            &quot;wana_202309.xlsx&quot;)))
</code></pre>
<p>I merge the dfs like so:</p>
<pre><code>my_merge &lt;- my_list %&gt;% reduce(full_join)
</code></pre>
<p>Output:
my_merge</p>
<pre><code>#  observations variables
#1            1         4
#2            5         8
#3            3         5
#4            3         4
#5            4         6
</code></pre>
<p>But I would want to keep the index names (or extract them) in a new column called 'file', like so:</p>
<p>Desired output:</p>
<pre><code># file                      observations     variables
# asp_202003...Copy.xlsx               1             4
# asp_202003.xlsx                      5             8
# etc.
</code></pre>
<p>Also note, the desired output should have 6 rows, not 5 as in current my_merge object! In current my_merge object, identical values between two of the rows means one was 'lost'. This is also why I want to set file name as index.</p>
","1","Question"
"78182191","","<p>I have a list of strings:</p>
<pre><code>str1 &lt;- &quot;core21_ap_202003.xlsx&quot;
str2 &lt;- &quot;core21_ap_thailand_202004.xlsx&quot;
str3 &lt;- &quot;core17_eay_201008_b.xlsx&quot;

strings &lt;- list(str1, str2, str3)
</code></pre>
<p>I want to extract &quot;ap&quot;, &quot;ap_thailand&quot;, and &quot;eay&quot;. I have tried:</p>
<pre><code>gsub(&quot;_[^_]*$|^[^_]*_&quot;,&quot;&quot;, strings, perl=T)
</code></pre>
<p>Output:</p>
<pre><code>[1] &quot;ap&quot;  &quot;ap_thailand&quot;  &quot;eay_201008&quot; 
</code></pre>
<p>Works for the first two occurences, but not the last one. I need &quot;eay&quot;, not &quot;eay_201008&quot;.</p>
<p>In other words, that a country name (here, Thailand) is extracted only if it exists, and then date should never be extracted.</p>
<p>Desired output:</p>
<pre><code>[1] &quot;ap&quot;  &quot;ap_thailand&quot;  &quot;eay&quot; 
</code></pre>
","1","Question"
"78183769","","<p>For example if n=5, I want this:</p>
<p><code>names:(&quot;Saint Denis&quot;;&quot;Rhodes&quot;;&quot;Strawberry&quot;;&quot;Valentine&quot;;&quot;Omar&quot;)</code></p>
<p>to become this</p>
<pre><code>&quot;Sain, Den,s&quot; &quot;Rhod,s&quot; &quot;Stra,berr,&quot; &quot;Vale,tine&quot; &quot;Omar&quot;
</code></pre>
<p>I believe I have to use ssr and iterate through my list, so something like this</p>
<p><code>{$[count x &lt; 4;x;ssr[x;&quot;????.&quot;;&quot;,&quot;]]} each names</code></p>
<p>Any Ideas?</p>
","0","Question"
"78186401","","<p>I have a list as follows:</p>
<pre><code>[
  [0, 5, -3, 5, 0, 0],
  [-3, 0, 1, 0, 5, 0],
  [1, 0, 5, 0, -5, 0],
  [-3, 0, 3, 0, 0, 5]
]
</code></pre>
<p>I need to calculate the sum and the average of the elements that share the same index, then the results will be added to a new list. For example, items of index 0 of those inner lists would be added together:</p>
<pre><code>0 + (-3) + 1 + (-3) = -5
</code></pre>
<p>Then the sum will be divided by the count of numbers (0 is not included) for the average:</p>
<pre><code>average = -5/3 = -1.66666667
</code></pre>
<p>Finally, it will be added to a new list.</p>
<p>I was expecting the result would look like this</p>
<pre><code>[
  -1.66667,
  5.0,
  1.5,
  5.0,
  0.0,
  5
]
</code></pre>
<p>I tried this:</p>
<pre><code>for i in range(0, len(rating_values)):
    for j in range(0, len(rating_values[i])):
        total = 0
        count = 0
        if rating_values[i][j] != 0:
            total += rating_values[i][j]
            count += 1
        average_rating = total / count if count &gt; 0 else 0
        average_list.append(average_rating)
</code></pre>
<p>But I got this:</p>
<pre><code>[0, 5.0, -3.0, 5.0, 0, 0, -3.0, 0, 1.0, 0, 5.0, 0, 1.0, 0, 5.0, 0, -5.0, 0, -3.0, 0, 3.0, 0, 0, 5.0]
</code></pre>
<p>Is there a way that I can loop through the items of the same index (for those inner lists) only in Python?</p>
","2","Question"
"78186649","","<p>I have a large list of list 'lst' and I would like to pull the first record within the list to a data frame. How can I do that.</p>
<p>I was thinking of using looping to pull the record but stuck at how to stack the records as a df col. I had codes as below:</p>
<pre><code>for(i in 1:length(lst)) {
   df[i] &lt;- lst[[i]][[1]][1]
}
</code></pre>
<p>Current output is not sth that I want. I want <code>df$record</code> to store each <code>lst[[i]][[1]][1]</code>. Is it a clever to create such data frame?</p>
<p>example lst can be created using code below:</p>
<pre><code>lst&lt;- list(list(c(&quot;Class A&quot;, &quot;86&quot;, &quot;Missing&quot;)),
     list(c(&quot;Class B&quot;, &quot;76&quot;, &quot;Delay&quot;)),
     list(c(&quot;Class A&quot;, &quot;88&quot;, &quot;Missing&quot;)),
     list(c(&quot;Class D&quot;, &quot;Missing&quot;, &quot;56&quot;)))
</code></pre>
","1","Question"
"78187620","","<p>I have below scenario where list str columns  need to be merged with the dataframe.</p>
<pre><code> columns = [&quot;server&quot;, &quot;ip&quot;]
    dataframes = [
        df1,
        df2,
        df3,
        df4,
    ]

   df_res = pd.merge(dataframes, columns )
</code></pre>
<p>df1
name , server ,
df1,df2,df3 and df4 contains column &quot;server&quot; and &quot;ip&quot; and other columns too.</p>
<p>So, i want to merge all the columns with server and ip in the df_res.</p>
<p>But i am getting issue as below:</p>
<p>Can only merge Series or DataFrame objects, a &lt;class 'list'&gt; was passed.
Please help.</p>
","-1","Question"
"78188025","","<p>I have a working code, but I was wondering if there was a better way to do it.</p>
<p>The function gets the sum of appearances for each specified item and returns them as a list.</p>
<pre><code>def question10(ipaddresses: list[str]):
    none_count = sum(1 if x is None else 0 for x in ipaddresses)
    host_count = sum(1 if x == '129.128.1.1' else 0 for x in ipaddresses)
    target_count = sum(1 if x == '192.128.1.4' else 0 for x in ipaddresses)
    return [none_count, host_count, target_count]
</code></pre>
","0","Question"
"78193031","","<p>I have a list -</p>
<pre><code>List&lt;Student&gt; students // contains student data already

public class Student{
    // contains
    String name;
    Address address;
    int age;
    int avgGrade;
}
</code></pre>
<p>Now I want to group <code>List&lt;Student&gt;</code> students into <code>List&lt;List&lt;Student&gt;&gt; stds</code> where for any <code>i</code>, if we do <code>stds.get(i)</code>, we should be able to observe that all the students in that list should have the same <code>age</code> and <code>avgGrade</code>.</p>
<p>Is there a better way other than manually creating a list, iterating over each student from the initial list (after sorting) and adding them to the new list as required?</p>
<p>I was hoping something like streams would help me?</p>
<p>Thanks in advance.</p>
","1","Question"
"78199352","","<p>I work on a dataset like this one and I want to explode it with the content of each list.</p>
<pre><code>index    col1      col2      col3
    1   [A,B]     [,xx]     [1,2]
    2   [A,C]   [zz,xx]     [3,4]
    3    [D,]   [zz,yy]     [2,2]
</code></pre>
<p>However, the missing values in <code>[,xx]</code> and in <code>[D,]</code> generate errors and I am looking for a way to fill the empty position in these lists.</p>
<p>My idea is to fill the blank in the lists to get something like <code>[NaN,xx]</code> and <code>[D,NaN]</code>, without specifying the index in the list because the blank is not always at the same position.</p>
<p>How can I achieve this please ?</p>
","0","Question"
"78199573","","<p>I have a list which have iterable elements:</p>
<pre><code>my_list &lt;- list(
  A = list(apple = 1:3, orange = &quot;abc&quot;),
  B = tibble(banana = &quot;qwerty&quot;, strawberry = 1:5),
  C = data.frame(blueberry = &quot;xyz&quot;, mango = &quot;something&quot;)
)
</code></pre>
<p>I would like to where is, say, &quot;blueberry&quot;. Since, it is a name of a column that belongs to a data.frame that is under name C. So by the input &quot;blueberry&quot;, I should get &quot;C&quot;.</p>
<p>I wrote the following function, but I am wondering whether there is a more elegant (efficient) solution for this?</p>
<pre><code>find_list &lt;- function(name, my_list) {
  idx &lt;- which(sapply(my_list, function(x) name %in% names(x)))
  if (length(idx) &gt; 0) {
    return(names(my_list)[idx])
  } else {
    return(NULL)
  }
}

# Test
print(find_list(&quot;strawberry&quot;, my_list))  # Prints &quot;B&quot;
print(find_list(&quot;mango&quot;, my_list))       # Prints &quot;C&quot;
print(find_list(&quot;apple&quot;, my_list))       # Prints &quot;A&quot;
print(find_list(&quot;nonexistent&quot;, my_list))  # Prints NULL if the name is not found
</code></pre>
","1","Question"
"78202993","","<p>I found this code and I would like know which is more efficient to big lists of elements.</p>
<pre><code>return List(myBigList.size){ index -&gt;
   val element = myBigList[index]
   myConversionFunction(element,param2,param3,param4)
}
</code></pre>
<p>I though this code could be replaced by</p>
<pre><code>return myBigList.map{
    myConversionFunction(it,param2,param3,param4)
}
</code></pre>
<p>Which way is better if I have a lot of elements to iterate, or you suggest other one?</p>
","2","Question"
"78203155","","<p>When I make the first parameter less than three decimal places and try make it be converted to three decimal places it won't do it. It will just add it to the list how I wrote it. If the value is 9.13, it won't print in the list as 9.130, it will still be 9.13. I've tried the <code>round</code> function, formatting, etc. Also, when an integer is added to the list it will only print to one decimal place. For example, 27 will only print 27.0 instead of 27.000.</p>
<pre><code>import math

def generate_num(LowNum, HighNum):
    
    try:
        LowNum = float(LowNum)
        HighNum = float(HighNum)

    except ValueError:
        return False
    except KeyboardInterrupt:
        quit()

    LowNum = round(LowNum, 3)
    sequence = [LowNum]
    j = sequence[-1]

    while j &lt;= HighNum:
        i = (math.sqrt((j) ** 3))
        i = round(i, 3)

        if i &lt;= HighNum:
            sequence.append(i)
            j = i  
        else:
            break

    return sequence


print(generate_num(9, 923))
</code></pre>
","2","Question"
"78210058","","<p>Probably something silly that I'm missing, but so far searching has come up with nothing.
I have implemented <code>List&lt;T&gt;</code> on my class, and when using a <code>MyList.Where()</code> function it wont cast back to a <code>MyList</code> object ?</p>
<pre><code>public class VideoList : List&lt;Video&gt;
{
    public VideoList GetVideos(bool onlyShorts)
        =&gt; (VideoList)this.Where(x =&gt; x.IsShort.Equals(onlyShorts)).ToList();
}
</code></pre>
<p>Throws error:</p>
<blockquote>
<p>Unable to cast object of type <code>WhereListIterator1[Video]</code> to type <code>VideoList</code>.</p>
</blockquote>
<p>Tried some different types of casting as was suggested online, but thus far i haven't got passed this error.
Also tried <a href=""https://stackoverflow.com/questions/64369105/unable-to-cast-object-of-type-wherelistiterator1system-object-to-type-syst"">this</a>, but same problem.
Probably some semantics  ?
Is there a way to resolve this error without foreach recreating the list after the linq statement ?</p>
","1","Question"
"78213234","","<h2>Zybooks Instructions</h2>
<p>List data_list contains integers read from input, representing a sequence of data values. For each index i of data_list from 1 through the second-to-last index:</p>
<p>The element at index i is a hunch if the element is greater than both the preceding element and the following element.
If the element at index i is a hunch, then output 'Hunch: ', followed by the preceding element, the current element, and the following element, separating each element by a space.</p>
<h2>Example</h2>
<p>Ex: If the input is 12 14 72 52, then the output is:</p>
<ul>
<li>Sequence: [12, 14, 72, 52]</li>
<li>Hunch: 14 72 52</li>
</ul>
<h2>Zybooks code</h2>
<pre><code>tokens = input().split()

data_list = []
for token in tokens:
    data_list.append(int(token))

print(f'Sequence: {data_list}')
</code></pre>
<h2>My Code to complete zybooks code</h2>
<pre><code>for i, data in enumerate(data_list[1: -2]):
    if data_list[i] &gt; data_list[i - 1] and data_list[i] &gt; data_list[i + 1]:
        print(f&quot;Hunch: {data_list[i - 1]} {data_list[i]} {data_list[i + 1]}&quot;)
</code></pre>
<h2>The output with 12, 14, 72, 52##</h2>
<ul>
<li>Sequence: [12, 14, 72, 52]</li>
</ul>
","-1","Question"
"78216364","","<p>Can anyone check whether this is a complete BS of a code or not. Obviously it doesn't work because I'm getting false as answer but I just wanna know if this is on the right track or just totally NOT it. Btw I've never programmed on prolog before, I am just learning the basics.</p>
<pre class=""lang-pl prettyprint-override""><code>nested([], []).
nested([H1], [[H1]])
nested([H1,H2|T], [Out]) :- 
    H2 - H1 is 1, 
    nested([H2|T], [[H1|Out]]);
    nested([H2|T], [H1|Out]).
</code></pre>
","-1","Question"
"78217100","","<p>I have a simple Python coding question regarding &quot;stacking array inside array&quot;. Here, I have several arrays as follows:</p>
<pre><code>a1 = np.array([[1,1,1],[1,1,1],[1,1,1]]) 
a2 = np.array([[2,2,2],[2,2,2],[2,2,2]])
a3 = np.array([[3,3,3],[3,3,3],[3,3,3]])
a4 = np.array([[4,4,4],[4,4,4],[4,4,4]])
a5 = np.array([[5,5,5],[5,5,5],[5,5,5]])
</code></pre>
<p>And, here is the output that I want:</p>
<pre class=""lang-none prettyprint-override""><code>array([[[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[2, 2, 2],
        [2, 2, 2],
        [2, 2, 2]],

       [[3, 3, 3],
        [3, 3, 3],
        [3, 3, 3]],

       [[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]],

       [[5, 5, 5],
        [5, 5, 5],
        [5, 5, 5]]])
</code></pre>
<p>I want to stack a1 to a5 arrays into an array.</p>
<p>However, I don't have ideas for generating such output by using for-loop iterations. Could you provide some ideas for solving this problem?</p>
<p>Thanks!</p>
","-1","Question"
"78217579","","<p>In Python (3.8), I have 15 lists of the same length.</p>
<p>Each list contains floats.</p>
<p>Here for the example, I will pretend I have 3 lists of length 5 to demonstrate my problem:</p>
<pre><code>List1 = [29.561801, 29.564141, 29.566480, 29.293966, 29.291252]
List2 = [26.602566, 22.752335, 22.755249, 22.754278, 22.756220]
List3 = [23.966560, 23.960471, 23.954381, 29.568819, 29.571159]
</code></pre>
<p>For each index, I want to find which list has the maximum value. And store the result in a new List. With my 3 example list from above, my output would be:</p>
<pre><code>Result=[1, 1, 1, 3, 3]
</code></pre>
<p>Right now I have the following code to do this. It works, but it feels very tedious (especially since I have in reality 15 lists and not 3!).</p>
<pre><code>maxValue = 0
listWithMaxValue=0
Result=[]
for i in range(len(List1)):
    maxValue=List1[i]
    listWithMaxValue=1
    if(List2[i] &gt; maxValue):
        maxValue=List2[i]
        listWithMaxValue=2
    if(List3[i] &gt; maxValue):
        maxValue=List3[i]
        listWithMaxValue=3
    Result=np.append(Result, listWithMaxValue)
</code></pre>
<p>It feels that there must be a better way to achieve the same result without repeating 15 times the same &quot;if&quot; loop?</p>
","-2","Question"
"78218345","","<p>Given an example dataframe where we have column 'b' containing lists, and each list has the same length (so it also could be converted to arrays)</p>
<pre class=""lang-py prettyprint-override""><code>df_test = pl.DataFrame({'a': [1., 2., 3.], 'b': [[2,2,2], [3,3,3], [4,4,4]]})
df_test
shape: (3, 2)
┌─────┬───────────┐
│ a   ┆ b         │
│ --- ┆ ---       │
│ f64 ┆ list[i64] │
╞═════╪═══════════╡
│ 1.0 ┆ [2, 2, 2] │
│ 2.0 ┆ [3, 3, 3] │
│ 3.0 ┆ [4, 4, 4] │
└─────┴───────────┘
</code></pre>
<p>How do I end up with</p>
<pre class=""lang-py prettyprint-override""><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p>without using <code>map_rows</code>?</p>
<p>The best way I could think of was to use <code>map_rows</code>, which is like <code>apply</code> in pandas. Not really the most efficient thing according to docs but it works:</p>
<pre class=""lang-py prettyprint-override""><code>df_temp = df_test.map_rows(lambda x: ([x[0] * i for i in x[1]],))
df_temp.columns = ['new']
df_test = df_test.hstack(df_temp)
</code></pre>
","5","Question"
"78219149","","<p>I have created a pandas dataframe (called <code>df</code>) as follows:</p>
<pre><code>import pandas as pd
import numpy as np

ds = {'Trend' : [1,1,1,1,1,
                 2,2,2,2,2,
                 3,3,3,3,3,
                 4,4,4,4,4,
                 5,5,5,5,5],
      'Cycle' : [
          14,88,50,119,107,
          32,111,41,88,38,
          37,72,79,98,69,
          62,38,86,26,30,
          52,91,122,90,127
          ]
      }

df = pd.DataFrame(data=ds)
</code></pre>
<p>The dataframe looks like this:</p>
<pre><code>print(df)

    Trend  Cycle
0       1     14
1       1     88
2       1     50
3       1    119
4       1    107
5       2     32
6       2    111
7       2     41
8       2     88
9       2     38
10      3     37
11      3     72
12      3     79
13      3     98
14      3     69
15      4     62
16      4     38
17      4     86
18      4     26
19      4     30
20      5     52
21      5     91
22      5    122
23      5     90
24      5    127
</code></pre>
<p>I need to create a new column (called <code>ArrayToBeMade</code>) which contains:</p>
<ul>
<li>a list of three elements</li>
<li>each element is the last value of the column <code>Trend</code> (which we get by iterating through each record)</li>
</ul>
<p>The resulting dataframe would look like this:</p>
<p><a href=""https://i.sstatic.net/t5Aqg.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/t5Aqg.png"" alt=""enter image description here"" /></a></p>
<p>Can someone help me, please?</p>
","2","Question"
"78220063","","<p>I know the built-in function np.unique() for removing all item duplicated in an array list in python, or convert the array list in a dict and to an array list.</p>
<p>But, the problem I have is the following:</p>
<p>I have for example 3 lists:
<code>l1 = ['a', 'b', 'c', 'd', 'e', 'f', 'a', 'j', 'a'] l2 = ['b', 'a', 'b', 'd', 'e', 'f', 'b', 'j', 'b'] l3 = ['c', 'a', 'a', 'd', 'e', 'f', 'c', 'j', 'c'] </code></p>
<p>I would like to know if it exists a built-in function to remove duplicates &quot;a, b, c&quot;
a in list l1
b in list l2
c in list l3
and  &quot;a, b, c&quot; are in same index
in the example, it should remove items at index 8 and 6 on the 3 lists.</p>
<p>thanks with your help.</p>
<p>I would like to know if it exists a built-in function to remove duplicates &quot;a, b, c&quot;
a in list l1
b in list l2
c in list l3
and  &quot;a, b, c&quot; are in same index
in the example, it should remove items at index 8 and 6 on the 3 lists.</p>
<p>thanks with your help.</p>
","-1","Question"
"78227058","","<p>I am looking for a more simple solution to combine a dictionary and a list into a single list in a functional programming style. The dictionary, list and expected result look something like this:</p>
<pre class=""lang-js prettyprint-override""><code>const myDictionary = new Map&lt;string, number&gt;([
  ['a', 4],
  ['b', 0],
  ['c', 3]
])

const myList = [
  'a',
  'b',
  'c'
]

const expectedResult = [
  [
    {'index': 0, 'payload': 'a0'},
    {'index': 1, 'payload': 'a1'},
    {'index': 2, 'payload': 'a2'},
    {'index': 3, 'payload': 'a3'}
  ],
  [],
  [
    {'index': 4, 'payload': 'c0'},
    {'index': 5, 'payload': 'c1'},
    {'index': 6, 'payload': 'c2'}
  ]
] 
</code></pre>
<p>As you can see, the number of the items of the inner list of <code>expectedResult</code> is variable. In this example it equals the values of the map <code>myDictionary</code>, but this is just an example here. The function to create those inner list items is deterministic, but the values have to be somehow computed, matched, combined, ...</p>
<p>My question is, how can I do this in a functional way. I could do something like this here (I'm using Randa in this project):</p>
<p>Given a function that would transform each list item:</p>
<pre class=""lang-js prettyprint-override""><code>const transformListItem = (char: string, offset: number, dictionary: Map&lt;string, number&gt;) =&gt;
  range(0, dictionary.get(char)).map(i =&gt; ({
    'index': i + offset,
    'payload': `${char}${i}`
  }))
</code></pre>
<p>Then this would be how I would put it together:</p>
<pre class=""lang-js prettyprint-override""><code>const transformList = (list: string[], dictionary: Map&lt;string, number&gt;) =&gt;

    list.map((char, listItemIndex) =&gt; {

        const listPriorToThisItem = slice(0, listItemIndex, list)
        const transformedListPriorThisItem = transformList(listPriorToThisItem, dictionary)
        const indexOffset = sum(transformedListPriorThisItem.map(a =&gt; a.length))

        return transformListItem(char, indexOffset, dictionary)
    }

const result = transformList(myList, myDictionary)
</code></pre>
<p>But with that approach the calculation would be done many times for each list item. So my question is: How can I achieve this without having to do this calculation twice (or several times). I'm aware of the possibility of memoization, but it seems to get even more complex then. The non-functional solution would be to iterate an index variable:</p>
<pre class=""lang-js prettyprint-override""><code>
const transformList = (list: string[], dictionary: Map&lt;string, number&gt;) =&gt; {

  let indexOffset = 0

  return list.map(char =&gt; {
    const transformedItem = transformListItem(char, indexOffset, dictionary)
    indexOffset += transformedItem.length
    return transformedItem
  }
}

const result = transformList(myList, myDictionary)
</code></pre>
<p>Are there any more straightforward pattern in FP to achieve this?</p>
","0","Question"
"78228212","","<p>I am trying to convert the following column into new rows:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>Id</th>
<th>Prices</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>[&quot;March:59&quot;, &quot;April:64&quot;, &quot;May:62&quot;]</td>
</tr>
<tr>
<td>002</td>
<td>[&quot;Jan:55&quot;, ETC]</td>
</tr>
</tbody>
</table></div>
<p>to</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th style=""text-align: left;"">id</th>
<th style=""text-align: center;"">date</th>
<th style=""text-align: right;"">price</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: left;"">001</td>
<td style=""text-align: center;"">March</td>
<td style=""text-align: right;"">59</td>
</tr>
<tr>
<td style=""text-align: left;"">001</td>
<td style=""text-align: center;"">April</td>
<td style=""text-align: right;"">64</td>
</tr>
<tr>
<td style=""text-align: left;"">001</td>
<td style=""text-align: center;"">May</td>
<td style=""text-align: right;"">62</td>
</tr>
<tr>
<td style=""text-align: left;"">002</td>
<td style=""text-align: center;"">Jan</td>
<td style=""text-align: right;"">55</td>
</tr>
</tbody>
</table></div>
<p>The date:price pairs aren't stored in a traditional dictionary format like the following solution:</p>
<p><a href=""https://stackoverflow.com/questions/68219903/convert-dictionary-keys-to-rows-and-show-all-the-values-in-single-column-using-p"">Convert dictionary keys to rows and show all the values in single column using Pandas</a></p>
<p>I managed to get the key:value pairs into individual rows like:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>Id</th>
<th>Prices</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>March:59</td>
</tr>
<tr>
<td>001</td>
<td>April:64</td>
</tr>
</tbody>
</table></div>
<p>And could split these into two columns using string manipulation but this feels inefficient instead of actually using the key:value pairs. Can anyone help please?</p>
","2","Question"
"78229316","","<p>This is a programming problem activity from my university. I am going to modify the problem to avoid plagiarism.</p>
<p>Let's say you have n people in a group. For each person, we number them from 0 to n−1. Each person has a personality value exhibited in a list. For example, a list [2, 3, 4, 6] exhibits that person 0 has a personality value of 2, person 1 has a personality value of 3, person 2 has a personality value of 3, and person 3 has a personality value of 6.</p>
<p>We define the enjoyment one person has with another person as |pi - pj| where i and j are subscripts of p and are indices of the list.</p>
<p>To better illustrate let us use the list again as the example.</p>
<ul>
<li>The enjoyment person 0 feels with person 1 is |2 - 3| which is 1.</li>
<li>The enjoyment person 0 feels with person 2 is |2 - 4| is 2,</li>
<li>The enjoyment person 0 feels with person 3 is |2 - 6| which is 4 and this continues for person 1 and so on.</li>
</ul>
<p>I want to create a function that returns the third largest enjoyment that a person feels toward another person in the group. So for the list above, I should get an output of [1, 1, 1, 2]. It is guaranteed that a group of friends is greater than 4. The personality can also be negative.</p>
<p>Code:</p>
<pre><code>def third_enjoyment(p: list[int]) -&gt; list[int]:
    n: int = len(p)
    e: list[int] = []

    for i in range(n):
        enjoyment = [abs(p[i] - p[j]) for j in range(n) if j != i]
        enjoyment.sort()
        third_enjoyment = enjoyment[-3]
        e.append(third_enjoyment)

    return e
</code></pre>
<p>Here is my solution for this problem. I am not sure about the time but I think this solution has a time complexity of O(n^2) (not too sure as we haven't discussed how time complexities works) which is bad as when I try to submit my code to the judge it exceeds the time limit. I want to know a better way to solve this problem that would be faster than this brute force solution.</p>
","1","Question"
"78241016","","<p>So I know the title sounds a bit dumb, but what I am trying to do is have two lists add together the same indexes from both lists, so if I had list1[ 2, 3, 4], and list2[5, 6, 7], they would add together within the function and then give me the sums, compare them to the minimum value, and then determine whether or not the function is true or false.</p>
<pre><code>def lock_and_key(key_cuts, lock_pinning, minimum):
    for v1 in key_cuts:
        for v2 in lock_pinning:
            sum = abs(v1 + v2 -6)
            if sum &gt; minimum:
                return False
    else:
        return True

if lock_and_key([2.1, 3.5, 2.7], [4.1, 2.5, 3.2],  0.25):
    print('Unlocked.')
else:
    print('Still locked.')**
</code></pre>
<p>I got it set down for the most part, but the issue I am dealing with is that the lists can varying amounts of variables, so I cannot set in stone the indexes like list1[0] + list[0].</p>
","1","Question"
"78244046","","<p>I have a list <code>List&lt;IVehicle&gt; vehicles = new List&lt;IVehicle&gt;();</code> and in that list I want to store objects (<code>Car</code>, <code>Boat</code>, <code>Mc</code>) that implement <code>IVehicle</code>.</p>
<p>How can I print out how many objects of ex <code>Car</code> I have in the list?</p>
<p>I tried using LINQ:</p>
<pre><code>int count = vehicles.Count(x =&gt; x == car);
</code></pre>
<p>but it does now count correct.</p>
","2","Question"
"78244243","","<p>A list of data frames:</p>
<pre><code>my_list &lt;- list(structure(list(&quot;_uuid&quot; = c(&quot;xxxyz&quot;, 
                                      &quot;xxxyz&quot;, &quot;zzuio&quot;, &quot;iiopz&quot;), country = c(&quot;USA&quot;, 
                                                                              &quot;USA&quot;, &quot;Canada&quot;, &quot;Switzerland&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -4L)), 
                structure(list(&quot;_uuid&quot; = c(&quot;xxxyz&quot;, &quot;ppuip&quot;, 
                                      &quot;zzuio&quot;), country = c(&quot;USA&quot;, &quot;Canada&quot;, &quot;Canada&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
                                                                                                                             -3L)))
my_list
[[1]]
  _uuid     country
1 xxxyz         USA
2 xxxyz         USA
3 zzuio      Canada
4 iiopz Switzerland

[[2]]
  _uuid country
1 xxxyz     USA
2 ppuip  Canada
3 zzuio  Canada
</code></pre>
<p>I want to remove duplicated rows both within and between the data frames stored in that list.</p>
<p><a href=""https://stackoverflow.com/questions/42163966/remove-duplicate-rows-for-multiple-dataframes"">This</a> works to remove duplicates within each data frame:</p>
<pre><code>my_list &lt;- lapply(my_list, function(z) z[!duplicated(z[[&quot;_uuid&quot;]]),])
my_list
[[1]]
  _uuid     country
1 xxxyz         USA
3 zzuio      Canada
4 iiopz Switzerland

[[2]]
  _uuid country
1 xxxyz     USA
2 ppuip  Canada
3 zzuio  Canada
</code></pre>
<p>But there are still duplicates between data frames. I want to remove them all, with the following desired output:</p>
<pre><code>[[1]]
 _uuid   country
 iiopz   Switzerland

 [[2]]
 _uuid   country
 xxxyz   USA
 zzuio   Canada
 ppuip   Canada
 
</code></pre>
<p>Notes:</p>
<ol>
<li>I want to eliminate duplicates on <code>_uuid</code> (other variables can be duplicated)</li>
<li>I need a solution where it is not needed to merge the data frames before checking for duplicates</li>
<li>If possible, I wish to retain the last observation. For example, in the desired output above, &quot;zzuio  Canada&quot; existed in both df, but was kept in the last df only, that is, df 2.</li>
<li>I have more than 100 dfs, with variable names that don't necessarily match between dfs. That said, the id is always called &quot;_uuid&quot;</li>
<li>I need to reassign the result to the same object (in the case above, <code>my_list</code>)</li>
</ol>
","2","Question"
"78244402","","<p>I have three lists</p>
<h4>Example Data</h4>
<pre><code>data &lt;- list(&quot;A-B&quot;, &quot;C-D&quot;, &quot;E-F&quot;, &quot;G-H&quot;, &quot;I-J&quot;)
data_to_replace  &lt;- list(&quot;A-B&quot;, &quot;C-D&quot;)
replacement &lt;- list(&quot;B-A&quot;, &quot;D-C&quot;)
## Note: The length(data_to_replace)  and length(replacement ) are always equal. Which may range from 1 to 200
</code></pre>
<p>This is just a minimal example. I have several of these three, and the number varies on each list</p>
<h4>Expected outcome</h4>
<pre><code>data_new &lt;- list(&quot;B-A&quot;, &quot;D-C&quot;, &quot;E-F&quot;, &quot;G-H&quot;, &quot;I-J&quot;)
</code></pre>
<h4>What I have tried</h4>
<pre><code>## function that reverses a string by words
reverse_words &lt;- function(string) {
  ## split string by blank spaces
  string_split &lt;- strsplit(as.character(string), split=&quot;-&quot;)
  ## How many split terms?
  string_length &lt;- length(string_split[[1]])
  ## decide what to do
  if (string_length == 1) {
    ## one word (do nothing)
    reversed_string &lt;- string_split[[1]]
  } else {
    ## more than one word (collapse them)
    reversed_split &lt;- string_split[[1]][string_length:1]
    reversed_string &lt;- paste(reversed_split, collapse=&quot;-&quot;)
  }
  ## output
  return(reversed_string)
} 

## Replacemnt
replacement &lt;- lapply(data_to_replace, reverse_words)
data_new &lt;- rapply(data, function(x) {
  replace(x, x == data_to_replace, replacement) ## This last line did not work
})
</code></pre>
","2","Question"
"78245788","","<p>I have this loop over a list:</p>
<pre><code>MyList = [&quot;test&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;test4&quot;, &quot;test5&quot;, &quot;test6&quot;, &quot;test7&quot;]

for item in MyList:
    print(item) # output: [test, test2, test3, test4, test5, test6, test7]
    if item == &quot;test7&quot;:
        pass  # ?
</code></pre>
<p>Now in here if <code>item == &quot;test7&quot;</code> I want to go back to the third item (<code>&quot;test3&quot;</code>) and go count up again.</p>
<p>How can I do that?</p>
<p>I have to use a <code>for</code> loop. I can't really use a <code>while</code> loop.</p>
","-1","Question"
"78246316","","<p>I have a list of chars that looks like this ['a'; 'b'; '&amp;'; 'c']. I now want to convert this into a list of strings [&quot;a&quot;; &quot;b&quot;; &quot;&amp;&quot;; &quot;c&quot;] and not one string &quot;ab&amp;c&quot; since in the end, I want to compare two lists with strings. How do I go from a list of characters to a list of strings? Thanks a lot for the help</p>
<pre><code>let varL1 = ['a';'b';'&amp;';'c']

let rec ConvertToString list =
   match list with
   | [l] -&gt; l.ToString()
   | head :: tail -&gt; head.ToString() + &quot;,&quot; + ConvertToString tail
   | [] -&gt; &quot;&quot;

ConvertToString varL1
</code></pre>
<p>I tried the code abovce but his gives me &quot;ab&amp;c&quot; which is not what I am looking for. I am looking for [&quot;a&quot;;&quot;b&quot;;&quot;&amp;&quot;;&quot;c&quot;]</p>
","1","Question"
"78251695","","<p>I have a list of classes/objects and I need to get a random item from the list. In a particular case, I need to take a random item from a specific range OR a specific index. Meaning it's not just a</p>
<pre><code>Item item = List[Random.Next(2,10)]; //take one random item between index 2 and index 9
</code></pre>
<p>(to make an example) but I'd need something like &quot;the random value must be between 2 and 9 (like in the example) OR be 15&quot;. I just need to add also the index 15 to the random range. So, is there a simple way to choose different ranges instead of only one range without creating a new List with the items I need? Always for that matter, is there a way to exclude some values from the base range (2,9)?</p>
","0","Question"
"78251767","","<p>Is there a way to distribute more similarly than the method below?
I'm also curious about how to distribute it from more than one list.
The list can contain only five numbers.</p>
<pre><code>intList = []
for i in range(10):
    intList.append(random.randint(10,200))


listX = []
listY = []

intList.sort(reverse=True)

for i in range(len(intList)):
    if sum(listX) &gt;= sum(listY):
        if len(listY) != 5:
            listY.append(intList[i])
        else:
            listX.append(intList[i])
    else:
        if len(listX) != 5:
            listX.append(intList[i])
        else:
            listY.append(intList[i])

print(f&quot;listx = {listX} \nlisty = {listY}\n sum x = {sum(listX)}, y = {sum(listY)}&quot;)
</code></pre>
","2","Question"
"78251828","","<p>In trying to understand how to work with classes, objects, and methods, Please explain why <code>print(list.sort())</code> does not work like <code>list.sort()</code> followed by <code>print(list)</code>.</p>
<pre class=""lang-py prettyprint-override""><code>list = [5, 1, 2]

print(list.sort())
</code></pre>
<p>#output is <code>None</code></p>
<p>VS.</p>
<pre class=""lang-py prettyprint-override""><code>list.sort()

print(list)
</code></pre>
<p>#output is <code>[1, 2, 5]</code></p>
<p>Explained above: I expected <code>print(list.sort())</code> to output a sorted list instead of <code>None</code></p>
","0","Question"
"78252315","","<p>I have a list of dfs:</p>
<pre><code>my_list &lt;- list(structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;V2&quot;, &quot;V1&quot;), col2 = c(&quot;wood&quot;, NA, &quot;water&quot;, NA, &quot;water&quot;), col3 = c(&quot;cup&quot;, NA, &quot;fork&quot;, NA, NA), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA, &quot;apple&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -5L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;), col2 = c(&quot;wood&quot;, NA), col4 = c(NA, &quot;pear&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -2L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;V3&quot;), col3 = c(&quot;cup&quot;, NA, NA, NA), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA)), class = &quot;data.frame&quot;, row.names = c(NA, -4L)))
  
my_list

[[1]]
  col1  col2 col3   col4
1   v1  wood  cup   &lt;NA&gt;
2   v2  &lt;NA&gt; &lt;NA&gt;   pear
3   v3 water fork banana
4   v2  &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;
5   v1 water &lt;NA&gt;  apple

[[2]]
  col1 col2 col4
1   v1 wood &lt;NA&gt;
2   v2 &lt;NA&gt; pear

[[3]]
  col1 col3   col4
1   v1  cup   &lt;NA&gt;
2   v2 &lt;NA&gt;   pear
3   v3 &lt;NA&gt; banana
4   v3 &lt;NA&gt;   &lt;NA&gt;
</code></pre>
<p>I want to replace NA with &quot;VAL&quot; in col3 only, <strong>and</strong> only if col1 is v2 <strong>or</strong> v3.</p>
<p>I found solutions to replace NA in certain columns, but not in certain columns and other conditions (or only for a single df, not for a list of dfs.)</p>
<p>Note that col2 or col3 do not necessarily exist in all dfs.</p>
<p>I need a solution with <code>lapply(list, function)</code>, ideally.</p>
<p>Desired output:</p>
<pre><code>  [[1]]
  col1  col2 col3   col4
1   v1  wood  cup   &lt;NA&gt;
2   v2  &lt;NA&gt;  VAL   pear 
3   v3 water fork banana
4   v2  &lt;NA&gt;  VAL   &lt;NA&gt;
5   v1 water &lt;NA&gt;  apple

[[2]]
  col1 col2 col4
1   v1 wood &lt;NA&gt;
2   v2 &lt;NA&gt; pear

[[3]]
  col1 col3   col4
1   v1  cup   &lt;NA&gt;
2   v2  VAL   pear
3   v3  VAL banana
4   v3  VAL   &lt;NA&gt;
</code></pre>
","1","Question"
"78252877","","<p>I am making a battleship project from scratch. What would be a way to identify a <em>specific</em> point on the map, and let you choose it, and then print out the chosen grid, with the &quot;#&quot; replaced with something else like a &quot;X&quot;?</p>
<p>Here's the code:</p>
<pre><code>turns = 10
alphabet = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;]

def StartScreen():
    print(&quot;Welcome to Battleship!&quot;)
    print('''
        1. Start
        2. Exit
    ''')
    choice = int(input(&quot;Enter your number: &quot;))
    if choice == 1:
        GameScreen()
    elif choice == 2:
        exit()
    else:
        print(&quot;Please choose a valid number.&quot;)
        StartScreen()

def GameScreen():
    print(&quot;\n&quot;)
    print(&quot;   A  B  C  D  E  F  G  H  I  J&quot;)
    row = [&quot; # &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;]
    i = -1
    while i != 9:
        print(i+1, row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9])
        i = i + 1
    print(&quot;\n&quot;)
    rowx = input(&quot;Choose a letter(A-J): &quot;)
    rowy = int(input(&quot;Enter a number(0-9): &quot;))
    if rowx in alphabet and rowy in range(0,10):
        print(f'you chose {rowx.upper()}{rowy}')
    else:
        print(&quot;Please choose a valid point(A-J/0-9)\n&quot;)
        StartScreen()
</code></pre>
","0","Question"
"78254249","","<p>I have a system of linear equations represented as strings in Python, and I need to find integer values (positive or negative) for each of the variables that satisfy all equations simultaneously without contradictions. The number of variables and equations can vary, so the solution should adapt accordingly.</p>
<p>Here's an example of such a system of equations:</p>
<pre class=""lang-py prettyprint-override""><code>from sympy import symbols, Eq, solve
import re

system_equations = [
'5 = X0 + Y0', 
'6 = X0 + Y1', 
'5 = X0 + Y3', 
'5 = X0 + Y4', 
'3 = X1 + Y2', 
'0 = X2 + Y2', 
'1 = X2 + Y4'
]


# Extract all variable names from the system of equations
variable_names = list(set(re.findall(r'[XY]\d+', ' '.join(system_equations))))

# Create symbols for the variables
variables = symbols(' '.join(variable_names))
</code></pre>
<p>It is important to keep in mind that the program must adapt to the number of variables (Xi and Yj) or/and equations that there are, this is just an example, where we have 8 unknowns and 7 linear equations.</p>
<p>For this example, one of the possible solutions where there are integer values that satisfy all the equations simultaneously (without contradictions), could be:</p>
<pre class=""lang-py prettyprint-override""><code># a (posible) correct output
values_of_int_decomposition_variables = [['X0', 2], ['X1', 1], ['X2', -2], ['Y0', 3], ['Y1', 4], ['Y2', 2], ['Y3', 3], ['Y4', 3]]
</code></pre>
<p>Note that if they manage to satisfy all the equations:</p>
<pre class=""lang-py prettyprint-override""><code>ij_number_to_decompose = Xi + Yj

5 = 2 + 3
6 = 2 + 4
5 = 2 + 3
5 = 2 + 3
3 = 1 + 2
0 = 2 + (-2)
1 = -2 + 3
</code></pre>
<p>In the case of equations with the value of 0 it must necessarily be decomposed into 2 values equal in magnitude but of opposite sign (X2 and Y2 should have opposite values)</p>
","0","Question"
"78256965","","<p>I have two data frame, I need to change column values of first data frame that are in list, using second data frame.</p>
<pre><code>df1 = pd.DataFrame({'title':['The Godfather','Fight Club','The Empire'], 'genre_ids':[[18, 80],[18],[12, 28, 878]]})

    title           genre_ids
0   The Godfather   [18, 80]
1   Fight Club      [18]
2   The Empire      [12, 28, 878]


df2 = pd.DataFrame({'id':[18,80,12,28,878,99],'name':['Action','Adventure','Adventure','Animation','Comedy','Documentary']})


    id  name
0   18  Action
1   80  Horror
2   12  Adventure
3   28  Animation
4   878 Comedy
5   99  Documentary
</code></pre>
<p>How can I assign genere_ids like this using df2 in python</p>
<pre><code>       title       genre_ids  
0   The Godfather  [Action, Horror] 
1   Fight Club     [Action]
2   The Empire     [Adventure, Animation, Comedy]
</code></pre>
","3","Question"
"78257312","","<pre><code>#Example COBOL statement 
cobol_statement = &quot;MODIFY MAP CURSOR AT NBS-DS-01(1) FOR FIELD (NBS-DS-01, NBS-DS-02(2), NBS-DS-03(3))&quot;
</code></pre>
<p>I need a json structure to covert this COBOL i need a result as</p>
<pre><code>{&quot;cursor&quot;: &quot;NBS-DS-01(1)&quot;, &quot;for&quot;: [&quot;NBS-DS-01&quot;,&quot;NBS-DS-02(2)&quot;,&quot;NBS-DS-03(3)&quot;]}
</code></pre>
<p>I need the json structure to be dynamic whatever the field I'am adding to be convert automatically</p>
","0","Question"
"78262945","","<p>I am trying to compare two lists of odds from two bookmakers. They look like this:</p>
<pre><code>List1 = ['2.66', '3.79', '1.88', '1.61', '2.51', '1.29', '2.29', '2.56', '3.16', '2.05', '2.95', '2.64', '2.26', '3.17', '2.64', '2.25']
List2 = ['2.70', '4.40', '1.87', '1.56', '2.50', '1.26', '2.33', '2.60', '3.20', '2.04', '3.00', '2.65', '2.25', '3.20', '2.65', '2.22']
</code></pre>
<p>I need to merge them and get the highest odds. I already did this with numpy:</p>
<pre><code>numpy.array([List1, List2]).astype(float).max(axis = 0)
FinalList = [2.7 4.4 1.88 1.61 2.51 1.29 2.33 2.6 3.2 2.05 3.2 2.65 2.26 3.2 2.65 2.25]
</code></pre>
<p>The problem is that I can't know to which list each index belongs to. In this example what I need to get is:</p>
<pre><code>NamesLists = [List2, List2, List1, List1, List1, List1, List2, List2, List2, List1, List2, List2, List1,  List2, List2, List1]
</code></pre>
<p>But I really have no idea how to do this.</p>
","2","Question"
"78265287","","<p>I have a List of Root object List rootList;</p>
<pre><code>class Root {
    int level;
    String path;
    String siteId;
    String siteName;
}
</code></pre>
<p>In this object, level &amp; path are not unique. For example Level can be 2 and path can be 1.2.3, 1.3.4, 1.5.6... etc and the site can be multiple for a single path.
I want to convert rootList to <code>Map&lt;level, Map&lt;Path, List&lt;Root&gt;&gt; sites;</code>Now for each level and path, I can bring the List of Sites.</p>
<p>If I use, Stream Foreach, I am not able to get the List and this approach is not at all working. Please kindly help me in bringing this structure.</p>
<pre><code>rootList.stream().forEach(root -&gt; sites.put(root.getLevel(), root.getPath())).;
</code></pre>
","0","Question"
"78267575","","<p>I'm working with a dataset in Python where I have a list of tuples, each representing an interval (start, end). I've encountered a scenario where some of these intervals overlap, and I need to merge these overlapping intervals into a single interval that covers the entire range of the overlapping intervals. The goal is to reduce the list to only include non-overlapping intervals.</p>
<p>For example, given the list <code>[(1, 3), (2, 4), (5, 7), (6, 8)]</code></p>
<p>The desired output is <code>[(1, 4), (5, 8)]</code>.</p>
<p>Here's what I've tried so far:</p>
<pre><code>def merge_intervals(intervals):
    sorted_intervals = sorted(intervals, key=lambda x: x[0])
    merged = []
    for interval in sorted_intervals:
        if not merged or merged[-1][1] &lt; interval[0]:
            merged.append(interval)
        else:
            merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1]))
    return merged

my_intervals = [(1, 3), (2, 4), (5, 7), (6, 8)]
print(merge_intervals(my_intervals))

</code></pre>
<p>This solution seems to work, but I'm concerned about its efficiency, especially for very large lists of intervals. I'm looking for any advice on optimizing this algorithm for better performance or if there's a more &quot;Pythonic&quot; way to approach this problem. Additionally, I'm curious if there are built-in functions or libraries in Python that could simplify this task.</p>
","0","Question"
"78269415","","<p>I am very new to Python and Jinja and facing an issue in accessing the values of the list in HTML. It is showing blank on the page. Given below is the code snippet, any help would be highly appreciated. The <strong>emplList</strong> is retrieving the values in the manner
<strong>[0,&quot;John&quot;] [1,&quot;Sunny&quot;] [2,&quot;Pal&quot;]</strong></p>
<pre><code>app = Flask(__name__)
emplList = pd.read_sql_query(&quot;SELECT DISTINCT employee_name FROM employeeTBL&quot;, conn)

@app.route('/')
def home():
    return render_template('app.html', employees=emplList)

if __name__=='__main__':
    app.run(debug=True)
    

&lt;select id=&quot;multipleSelect&quot; multiple name=&quot;native-select&quot; placeholder=&quot;Native Select&quot; data-search=&quot;true&quot; data-silent-initial-value-set=&quot;true&quot;&gt;
          {% for row in employees%}
             &lt;option value={{row.employee_name}}&gt;{{row.employee_name}}&lt;/option&gt;
          {% endfor %}
&lt;/select&gt;
</code></pre>
","0","Question"
"78274399","","<p>I have two lists, one of them is a list of 2 character strings (dteSubstringList).
The other list is a variable string length list (table).</p>
<p>I only want to update the items in the second list when the number of characters equals 2.</p>
<p>I was able to do this using while, but I want to use a more elegant way, like LINQ.</p>
<p>This is the current code:</p>
<pre><code>        int index = 0;

        for (int i = 0; i &lt; table.Count; i++)
        {
            if (table[i].Data.Length == 2)
            {
                table[i].Data = dteSubstringList[index].Mte;

                index++;
            }
        }
</code></pre>
","-1","Question"
"78284007","","<p>I have some images in a <code>folder</code>. I want to store all these images to a list. There's a lot of images so I want to close image after reading.</p>
<p>I tried to do it like this using <code>pathlib</code>:</p>
<pre class=""lang-py prettyprint-override""><code>from pathlib import Path
from PIL import Image
import numpy as np

path = Path(&lt;path-to-folder&gt;)

list_of_images = []
for img_path in path.iterdir():
    with Image.open(img_path) as img:
        list_of_images.append(img)
</code></pre>
<p>But then I try to show or do whatever with this image and get this:</p>
<pre class=""lang-py prettyprint-override""><code>list_of_images[0].show()
</code></pre>
<p>Leads to an error:</p>
<pre><code>AttributeError: 'NoneType' object has no attribute 'seek'
</code></pre>
<p>And trying to convert to numpy array like this:</p>
<pre class=""lang-py prettyprint-override""><code>np.array(list_of_images[0])
</code></pre>
<p>Returns this:</p>
<pre><code>array(&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=512x512 at 0x20E01990250&gt;,
      dtype=object)
</code></pre>
<p>How can I do it properly?</p>
","0","Question"
"78285316","","<p>I have a list and I need to update values ​​in it.
These updates are based on calculations, so with each iteration the values ​​may change, but with each iteration the beginning of the list remains the same, only the last items changing.</p>
<p>To save processing time, I want to start each iteration from the first difference only.</p>
<p>Sample:</p>
<pre><code>        List&lt;string&gt; list = new List&lt;string&gt;();
        List&lt;string&gt; updatedList = new List&lt;string&gt;();

        list[0] = &quot;A&quot;;
        updatedList[0] = &quot;A&quot;;

        list[1] = &quot;B&quot;;
        updatedList[1] = &quot;B&quot;;

        list[2] = &quot;C&quot;;
        updatedList[2] = &quot;C&quot;;

        list[3] = &quot;D&quot;;
        updatedList[3] = &quot;E&quot;;
</code></pre>
<p>I want to get index 3 for this sample.</p>
","0","Question"
"78298089","","<p>Assume a list that has comma separated element:
<code>x = [&quot;FOO,BAR&quot;, &quot;BAZ&quot;]</code></p>
<p>How can someone map the above list to:</p>
<pre><code>[&quot;FOO&quot;, &quot;BAZ&quot;]
[&quot;BAR&quot;, &quot;BAZ&quot;]
</code></pre>
","-1","Question"
"78299860","","<p>I have a list (<code>myList</code>) of lists (<code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>), each one with other lists (<code>a1</code>, <code>a2</code>, <code>a3</code>), which looks like this.</p>
<pre><code>scenarios &lt;- LETTERS[1:4]
patterns &lt;- c(&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;)
myList &lt;- list()
for(i in seq_along(scenarios)){
  myList[[i]] &lt;- list()
  for(j in seq_along(patterns)){
    myList[[i]][[j]] &lt;- list()
  }  
  names(myList[[i]]) &lt;- patterns  
}

names(myList) &lt;- scenarios
myList

$A
$A$a1
list()

$A$a2
list()

$A$a3
list()

$B
$B$a1
list()

$B$a2
list()

$B$a3
list()

$C
$C$a1
list()

$C$a2
list()

$C$a3
list()

$D
$D$a1
list()

$D$a2
list()

$D$a3
list()
</code></pre>
<p>The files I need to upload have a path name that looks like this: <code>./path/A/a1_A_table.csv</code>
I am not sure how to loop through the files name assigning the components to a variable and then storing the output in the list, in the corresponding position. So far this is my attempt.</p>
<pre><code>myDfList &lt;- list()
myDfList &lt;- lapply(scenarios, function(scen){
  i = 1  
  myDfList[scen] &lt;- lapply(patterns, function(df){   
    p &lt;- patterns[i]    
    read.csv(paste0(&quot;./path/&quot;, scen, &quot;/&quot;, p, &quot;_&quot;, scen, &quot;_table.csv&quot;), sep = &quot;,&quot;, h = T, fileEncoding = &quot;UTF-8-BOM&quot;)    
    i = i + 1    
  })})
</code></pre>
<p>I am a bit lost because I don't understand how to loop iteratively using <code>lapply</code> (if possible and if it makes sense), or if I just use a <code>for</code> loop.</p>
<p><strong>EDIT:</strong> found a simpler solution than I thought.</p>
<pre><code>for(scen in scenarios){
  
  for(p in patterns){
    
    # create file name
    file &lt;- paste0(&quot;./path/&quot;, scen, &quot;/&quot;, p, &quot;_&quot;, scen, &quot;_table.csv&quot;)
    
    # load data
    df &lt;- read.csv(file, sep = &quot;,&quot;, h = T, fileEncoding = &quot;UTF-8-BOM&quot;)
    
    # upload data to list
    myList[[scen]][[p]] &lt;- df 
    
  }
}
</code></pre>
","2","Question"
"78301596","","<p>If I have a list of values like this:</p>
<pre><code>a=[5,4,3,2,1]
</code></pre>
<p>How would I then go about subtracting a value from the one before it and storing it in a new list?  In this example, the new list would look like:</p>
<pre><code>b=[1,1,1,1]
</code></pre>
<p>I'm assuming this could be done with a for loop, but I'm not sure how to index the values.  The data I will be working with has hundreds of entries, so is there a way to reference a previous entry in a list?</p>
","-1","Question"
"78303058","","<p>Tried to use insert method to add a last value but it always go the 2nd last value</p>
<pre><code>list = [10,3,5,100,7,9]

list_1=(list insert(-1,'hello'))

print(list_1)
</code></pre>
<p>Expected result: <code>[10,3,5,100,7,9,'hello']</code></p>
<p>Actual result: <code>[10,3,5,100,7,'hello',9]</code></p>
","-1","Question"
"78307639","","<p>I have a string listing the terms in office of an individual, e.g.</p>
<pre><code>all_terms &lt;- &quot;2012 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2009, 2010 to 2011&quot;
</code></pre>
<p>I want to know whether the individual served in office continuously, which means:</p>
<ol>
<li><p>The end year of one term and the start year of another term can be of a difference of one, i.e. a term ending in 2011 and a new term starting in 2012 will count as continuous.</p>
</li>
<li><p>Terms that fall within or across other terms should not affect continuity, i.e. the term of 2001 to 2003, above, falls within 2000 to 2009, and does not disturb continuity. Similarly, a term from 2008 to 2013 would not disturb continuity.</p>
</li>
</ol>
<p>So the above example will be recognized as continuous, but this - &quot;1989 to 2008, 2020 to 2024&quot; would not be.</p>
<p>I have come up with this code, but it does not work:</p>
<pre><code>all_terms &lt;- &quot;2012 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2009, 2010 to 2011&quot;

# Process terms to extract years and create a data frame
terms_list &lt;- str_split(all_terms, &quot;,\\s*&quot;)[[1]]
years &lt;- map(terms_list, ~str_extract_all(.x, &quot;\\d{4}&quot;)[[1]])
years_df &lt;- map_df(years, ~data.frame(start = as.numeric(.x[1]), end = as.numeric(.x[2])))

# Sort years by start date
years_df &lt;- years_df %&gt;% arrange(start)

# Adjust end year by adding one for continuity check
years_df$modified_end &lt;- years_df$end + 1

# Check for continuity
is_continuous &lt;- all(c(TRUE, tail(years_df$start, -1) &lt;= head(years_df$modified_end, -1)))

# Results
list(
  is_continuous = is_continuous,
  start_years = min(years_df$start),
  end_years = max(years_df$end)
)
</code></pre>
","2","Question"
"78308212","","<p>I have a button that I would like to link to another view upon clicking on it. I was told to put it inside a NavigationLink, use .borderless button style, but it activates outside of its area on the entire list row. I experimented with using navigation view or disabling the navigationlink among other suggestions but it doesn't fix the problem or just messes up my view so I must be doing something wrong.</p>
<p>Here is the list item view</p>
<pre><code>struct NodeListItem: View {
 var body: some View {
   LazyVStack(alignment: .leading) {
    //has more information up here I don't think is relevant
     HStack {
        NavigationLink(destination: UserMessageList(user: node.user!)) {
            Button(&quot;DM&quot;) {
              //don't actually need it to do anything besides changing views
             }
           //.borderless does nothing I want it to have a border
            .buttonStyle(.borderedProminent) 
            }
        }
     }
  }
</code></pre>
<p>Here is my list view</p>
<pre><code>struct NodeList: View {
 var body: some View {
   NavigationStack {
     List(nodes, id: \.self) { node in
        NodeListItem(node: node)
            .contextMenu {
                 Button {
                    node.user!.mute = !node.user!.mute
                    } label: {
                        Label(node.user!.mute ? &quot;Show DM Alerts&quot; : &quot;Hide DM Alerts&quot;, systemImage: node.user!.mute ? &quot;bell&quot; : &quot;bell.slash&quot;)
                    }
                    
                    if bleManager.connectedPeripheral != nil {
                        Button (role: .destructive) {
                            deleteNodeId = node.num
                            isPresentingDeleteNodeAlert = true
                        } label: {
                            Label(&quot;Delete Node&quot;, systemImage: &quot;trash&quot;)
                        }
                    }
              }
        }
       .listStyle(.plain)
   }
}
</code></pre>
<p>Any help/suggestions are appreciated!</p>
","2","Question"
"78309227","","<p>I'm working with a list in Python and I need to extract elements with indices from 0 to 3 and from 5 to 7 (<code>[0:3]</code> and <code>[5:7]</code>). It could be done by using slicing and concatenation:</p>
<pre class=""lang-py prettyprint-override""><code>target_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
subset_indx = list(range(3)) + list(range(4, 7)) 
subset_list = [target_list[i] for i in subset_indx]
print(subset_list)  # Output: [1, 2, 3, 5, 6, 7]
</code></pre>
<p>I'm curious if there's a way to achieve this functionality in Python similar to how it's done in R.</p>
<pre class=""lang-r prettyprint-override""><code>targetList &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
subsetList &lt;- targetList[c(1:3, 6:7)]
</code></pre>
<p>I'd appreciate any insights or reproducible code examples demonstrating Pythonic equivalents.</p>
","0","Question"
"78309627","","<p>I have 12 indices in an array to be filled with 1-11 objects. It should be done in a way such that the objects are atleast slightly evenly spaced from each other.</p>
<pre><code>step = num_boxes // num_objects
indices = [i * step for i in range(num_objects)]
</code></pre>
<p>So far I have tried the above method. For example, for 3 objects the indices will be [0, 4, 8]. This way the last 4 boxes are empty. Which is not desired. Ideally the first and the last box (or the last but one box) should be filled and the remaining should be evenly spaced between.</p>
<p>Edit: So the desired indices it should take for objects from 1 to 10 can be for example as image below. I am looking for symmetry from the center.</p>
<p><a href=""https://i.sstatic.net/n9kAy.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/n9kAy.png"" alt=""Desired indices"" /></a></p>
","-1","Question"
"78312089","","<p>I'm using riverpod with code generation for state management.
Here, I've a variable named 'handle' which is passed onto the constructor of my widget and then I need to pass this variable in a list to a network call function.</p>
<blockquote>
<p>Network call code</p>
</blockquote>
<pre><code>@riverpod
Future&lt;List&lt;User&gt;?&gt; getUsers(GetUsersRef ref, String handle) async {
    ....

}
</code></pre>
<p>Wen I make a network call using ref.watch(GetUsersProvider(handle)) in my consumerWidget, it works fine in this case but the problem arises when I want to pass a list of string to my network call function.</p>
<blockquote>
<p>Network call code 2</p>
</blockquote>
<pre><code>@riverpod
Future&lt;List&lt;User&gt;?&gt; getUsers(GetUsersRef ref, List&lt;String&gt; handles) async {
    ....
    print(&quot;Network call successful&quot;);
}
</code></pre>
<p>In this case when I call ref.watch(GetUsersProvider([handle]), my widget continuously rebuilds itself and never stops loading even though the network call is successful.
How should I tackle this?</p>
<p>I tried passing <code>const List&lt;String&gt; = ['handleName']</code>, this works but then I can't really create a const List of Strings using the handle variable passed to the constructor.</p>
<p>How do you guys pass a List of String to a provider in riverpod using code generation?</p>
","1","Question"
"78313509","","<p>(This is just a section of code):</p>
","0","Question"
"78313832","","<p>I'm working on a project where I've to compare a list (<strong>Actual</strong>) against another list (<strong>Expected</strong>). The <strong>Expected</strong> list is fixed but the <strong>Actual</strong> list can sometime have &quot;additional element&quot; or &quot;spelling mistakes&quot; or both. The example below has both.</p>
<p><em><strong>Expected List: (length = 14)</strong></em></p>
<pre><code>exp = ['change of form','death certificate','authority form',
'payment form','lodgement form','supporting documentation',
'proof of authority','proof of executor','proof of identity',
'reverse form','statutory declaration','agreements',
'transfers','mediators'] 

                 
</code></pre>
<p><em><strong>Actual List: (length = 15)</strong></em></p>
<pre><code>act = ['change of form','death certificatey',
'authority form','payment form','lodgement form','supporting documentation',
'proof of authority','proof of executor','proof of identity',**'proof of ownership'**,
'reverse form','statutory declaration','agreements','transfers','mediators']   # length = 15
</code></pre>
<p>Now my logic below,</p>
<pre><code>import itertools
temp_new = []

if len(exp) &lt; len(act):

  # extend the expected list 
  exp = exp[:len(act)] + ['']*(len(act) - len(exp)) 

# creating new list
for e,a in itertools.zip_longest(range(len(exp)),range(len(act))):
  temp_new += ['missing']
  if (act[a] in exp) or ( set(act[a].split()) &amp; set(exp[e].split()) ):
    temp_new[a] = act[a]

</code></pre>
<p>Gives me the following output:</p>
<pre><code>temp_new = ['change of form','death certificatey',
'authority form','payment form','lodgement form','supporting documentation',
'proof of authority','proof of executor','proof of identity',**'missing'**,
'reverse form','statutory declaration','agreements','transfers','mediators']
</code></pre>
<p>What I'm actually looking for is the following list:</p>
<pre><code>expected_output = ['change of form','death certificate',
'authority form','payment form','lodgement form','supporting documentation',
'proof of authority','proof of executor','proof of identity',**'missing'**,
'reverse form','statutory declaration','agreements','transfers','mediators']'
</code></pre>
<p>Can someone please help me rectify my current logic OR provide me with a new one?</p>
","0","Question"
"78315483","","<p>I have a list/array which has elements which need to be changed now and then. I changed elements in the list by indexing, and when I print out the list, it the changes have been made.</p>
<pre><code>l = stdarray.create2D(width,height,&quot;c&quot;)
l[0][5] = &quot;d&quot;
l[3][4] = &quot;A&quot;
l[2][6] = &quot;D&quot;
</code></pre>
<p>the output I get from printing it out is this:</p>
<p>[['c', 'c', 'c', 'c', 'c', 'd', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'D'], ['c', 'c', 'c', 'c', 'A', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'c', 'c']]</p>
<p>which is what I expect.</p>
<p>However when I use the list elsewhere (in another function) the original list (with c only) is used as though I didn't make any changes, this is the entirety of the code</p>
<pre><code>global l
l = stdarray.create2D(width,height,&quot;c&quot;)
l[0][5] = &quot;d&quot;
l[3][4] = &quot;A&quot;
l[2][6] = &quot;D&quot;
#stdio.write(l)
i = 0

        for a in range(len(l)):
            for b in range(len(l[a])):
                piece = l[a][b]

</code></pre>
<p>I get a board with c's only as though I did not change the contents of the list.</p>
<p>I don't understand what my problem is currently.
Can you just give me hints as to what I did wrong</p>
","-1","Question"
"78316557","","<p>I have a ScriptableObject in unity</p>
<pre><code>[CreateAssetMenu(fileName = &quot;New Food&quot;, menuName = &quot;Prismalia/ScriptableObject/Food&quot;)]
public class FoodScriptableObject : ScriptableObject, IComparable
{
    [Header(&quot;Basic Info&quot;)]
    public string itemID;
    public new string name;

    [Header(&quot;Main food stats&quot;)]
    public string MainEffect;
    public int MainEffectValue;
    public bool MainValuePercent = false;
    public int Amount;

    [Header(&quot;Sub food stats&quot;)]
    public string SubEffect;
    public int SubEffectValue;
    public bool SubValuePercent = false;

    public string Description;

    [Header(&quot;Enums&quot;)]
    public Rarity Rarity;
    public FoodType FoodType;
    public MainFoodEffect MainFoodEffect;
    public FoodEffectsTypes MainFoodEffectType;
    public SubFoodEffect SubFoodEffect;
    public FoodEffectsTypes SubFoodEffectType;

    [Header(&quot;Visuals&quot;)]
    public Sprite MainSprite;
    public Sprite SubSprite;
    public GameObject Prefab;


    [Header(&quot;Arrays&quot;)]
    public string[] RefinementRankDescription;



    public int CompareTo(object obj)
    {
        var a = this;
        var b = obj as FoodScriptableObject;

        if (a.Amount &lt; b.Amount)
            return -1;

        if (a.Amount &gt; b.Amount)
            return 1;

        return 0;
    }



}
</code></pre>
<p>I save a lot of them in a list on a other Scriptnd here I sort it based on the amount</p>
<pre><code>if(bSort)
{
    scripts.Sort();
}
</code></pre>
<p>How can I make it sort acd and dec? based on the amount and how can I make it sort from a diffren variable or an enum for intance sort by rarity?</p>
<pre><code>public enum Rarity
{
    Common,
    Uncommon,
    Rare,
    Epic,
    Legendary,
    Mythic
}
</code></pre>
<p>If any one helps please try not to use lamda typing as I dont understand lamda</p>
<p>I tried making a new list and coping it over to it as I have multiple scriptable objects and I save all in a normal List and get the type by GetType() then use the values</p>
","1","Question"
"78318980","","<p>I have these 2 lists of dictionaries:</p>
<pre><code>[{'type': 'excel_macro', 'Name': 'Nuevo Diseño de Registro de nominas.xlsm'}, 
 {'type': 'pdf', 'Name': 'Presentación oferta comercial Nómina.pdf'}
]

[{'id': 35630898}, {'id': 35630899}]
</code></pre>
<p>and I want it to be like this:</p>
<pre><code>[{'type': 'excel_macro', 'Name': 'Nuevo Diseño de Registro de nominas.xlsm', 'id': 35630898}, 
 {'type': 'pdf', 'Name': 'Presentación oferta comercial Nómina.pdf', 'id': 35630899}
]
</code></pre>
<p>That is, I want to merge the dictionaries of the lists in order, including the 'id' within the corresponding dictionary</p>
<p>I've looked for how to do it but I haven't found exactly this. I appreciate the help.</p>
","1","Question"
"78319574","","<p>I found this <a href=""https://i.sstatic.net/UWcDC.png"" rel=""nofollow noreferrer"">Suffix Sum</a> challenge on CodeForces as I was practising recursion sums:</p>
<blockquote>
<p>Given two numbers 𝑁 and 𝑀, and an array 𝐴 of 𝑁 numbers. Calculate the sum of the last 𝑀 numbers.</p>
<p><strong>Note:</strong> solve this problem using recursion.</p>
<h3>Input</h3>
<p>First line contains two numbers 𝑁 and 𝑀 (1 ≤ 𝑀 ≤ 𝑁 ≤ 10<sup>5</sup>).</p>
<p>Second line contains 𝑁 numbers (−10<sup>9</sup> ≤ 𝐴<sub>𝑖</sub> ≤ 10<sup>9</sup>).</p>
<h3>Output</h3>
<p>Print the sum of the last 𝑀 numbers of the given array.</p>
</blockquote>
<p>I tried to solve the question in Python, and this is my code:</p>
<pre><code>def suffix_sum(arr, m):
    if m &lt;= 0:
        return 0
    else:
        return arr[-1] + suffix_sum(arr[:-1], m - 1)

n, m = map(int,input().split())
arr = list(map(int,input().split()))
print(suffix_sum(arr, m))
</code></pre>
<p>Though I get the expected output in my compiler for my sample input, I always end up getting 'Memory limit exceeded on test 2' when I submit my code. Test case 2 is hidden, so I am not sure what the test case is, but my guess is that it is a really large array in the order of 10<sup>4</sup> or 10<sup>5</sup>. When I checked the other submissions, they were all in C++.</p>
<p>So, does the memory limit exceeding have something to do with me using Python and PyPy, or is something wrong with my code?</p>
<p>The result gets accepted when I use a for loop, but as the question is for practising recursion, I am not sure where I am going wrong. It would be of great help if you could help me improve!</p>
","0","Question"
"78320292","","<p>I've been looking at the implementations of ListT to find a good way to do something like this:</p>
<pre><code>func list = do
  set &lt;- get -- Data.Set
  el &lt;- list
  guard $ Set.notMember el set
  return el
</code></pre>
<p>I know I could use ListT.fromFoldable, but I want to be able to use this stream as part of a larger processing pipeline without converting from list to stream and back at every step. Perhaps something like this:</p>
<pre><code>func' list = (ListT.toReverseList . ListT.take 5 . func . ListT.fromFoldable) list
</code></pre>
<p>From what I understand a streaming approach should be used here. But I don't understand how to do this using e.g. the <a href=""https://hackage.haskell.org/package/list-t-1.0.5.7/docs/ListT.html"" rel=""nofollow noreferrer"">list-t package</a>. Can a traverse somehow filter out results from the stream? I don't see people asking about this so maybe the approach itself is flawed?</p>
","2","Question"
"78321875","","<p>I'm making a program about packing circles and I need a zig-zag path between them, even though they are hexagonally packed. This means every other column has one less element sometimes. Here is a picture of how the path looks without zig-zag implemented:
<a href=""https://i.sstatic.net/L5gVM.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/L5gVM.png"" alt=""enter image description here"" /></a></p>
<p>And this is what my attempt is. For the first three rows it is working but for some reason it starts to get messy after that.
<a href=""https://i.sstatic.net/TaRVP.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/TaRVP.png"" alt=""enter image description here"" /></a></p>
<p>This is my code:</p>
<pre><code>def zigzag_positions(cols, rows, stored_seed_positions, y_diff):
zigzag_positions = []
s = 0


for i in range(int(cols)):
    if i % 2 == 0:  # even cols
        for j in range(0 - s, int(rows), 1):
            index = i * int(rows) + j
            if index &lt; len(stored_seed_positions):
                zigzag_positions.append(stored_seed_positions[index])
    else:  # odd cols
        for j in range(int(rows)-2, -1, -1):
            index = i * int(rows) + j
            if index &lt; len(stored_seed_positions):
                zigzag_positions.append(stored_seed_positions[index])

        s += 1


return zigzag_positions
</code></pre>
<p>So basically every other set of coordinates that have the same x value need to be switched somehow. How would I do this? Here is an example array of the normal pathing:</p>
<pre><code>[(102, 102), (102, 206), (102, 310), (102, 414), (102, 518), 
(193, 154), (193, 258), (193, 362), (193, 466), 
(285, 102), (285, 206), (285, 310), (285, 414), (285, 518), 
(376, 154), (376, 258), (376, 362), (376, 466), 
(468, 102), (468, 206), (468, 310), (468, 414), (468, 518), 
(559, 154), (559, 258), (559, 362), (559, 466)]
</code></pre>
<p>And here is the array I want:</p>
<pre><code>[(102, 102), (102, 206), (102, 310), (102, 414), (102, 518), 
(193, 466), (193, 362), (193, 258), (193, 154),
(285, 102), (285, 206), (285, 310), (285, 414), (285, 518), 
(376, 466), (376, 362), (376, 258), (376, 154),
(468, 102), (468, 206), (468, 310), (468, 414), (468, 518), 
(559, 466), (559, 362), (559, 258), (559, 154)]
</code></pre>
","1","Question"
"78325531","","<p>What I have:</p>
<pre class=""lang-py prettyprint-override""><code>msg: list = []
</code></pre>
<p>expected behaviour:</p>
<pre class=""lang-py prettyprint-override""><code>msg.insert(2,&quot;two&quot;)   # msg = [None, None, &quot;two&quot;]
msg.insert(10,&quot;ten&quot;)  # msg = [None, None, &quot;two&quot;, None, None, None, None, None, None, None, &quot;ten&quot;]
</code></pre>
<p>Current code:</p>
<pre class=""lang-py prettyprint-override""><code>def insert_into_list(orig_list: list, index: int, element: str)-&gt;None: # does not need to return the list
    if index &gt;= len(orig_list): # sanity checks removed for MRE
        for _ in range(index - len(orig_list) + 1):
            orig_list.append(None)
    orig_list.insert(index, element)
</code></pre>
<p>Is there a better (or a more standard and possibly shorter than writing another method) way to do this?</p>
","0","Question"
"78329057","","<p>My code isn't working as expected. I've tried a few different approaches, and I'm currently working on one that seems like it should work to me... I have a conditional structure that basically goes like this:</p>
<ul>
<li>If the <code>interval</code> is between <code>bin_start</code> and <code>bin_end</code>
append to the interval</li>
<li>If the <code>interval</code> is outside <code>bin_start</code> and <code>bin_end</code>
continue (that interval will be discarded)</li>
<li>Else: If part is within <code>bin_start</code> and <code>bin_end</code>, I want to retrieve only what is included between them</li>
</ul>
<pre><code>for bin_start,bin_end in bins_list:
    for interval in exons_array:
        if bin_start &gt;= interval[0] and bin_end &lt;= interval[1]:
            valid_interval.append((bin_start, bin_end))
        if (bin_start &lt; interval[0] and bin_end &lt; interval[0]) or (bin_start &gt; interval[1] and bin_end &gt; interval[1]):
            continue 
        else:
            if bin_end &gt; interval[1]:
                bin_end = interval[1]
            if bin_start &lt; interval[0]:
                bin_start = interval[0]
            valid_interval.append((bin_start, bin_end))
</code></pre>
<p>I believe the issue lies precisely in this &quot;else&quot; part. A simple example for the else: I have two lists, [0,10] and [6,12]; this else should return [6,10].</p>
<p>Real problem data:</p>
<pre><code>exons_array = [[7669608, 7669690], [7670608, 7670715], [7673218, 7673266], [7673306, 7673339], [7673534, 7673608], [7673700, 7673837], [7674180, 7674290], [7674858, 7674971], [7675052, 7675236], [7675993, 7676272], [7676381, 7676403], [7676520, 7676594]]

bins_list = [(7669608, 7670307), (7670307, 7671006), (7671006, 7671705), (7671705, 7672404), (7672404, 7673103), (7673103, 7673802), (7673802, 7674501), (7674501, 7675200), (7675200, 7675899), (7675899, 7676598)]
</code></pre>
<p>The code runs to completion, but the result is incorrect. Output example:</p>
<pre><code>7669608 7670307 -&gt; exons_array
7669608 7669690 -&gt; bins_list
[] -&gt; valid_interval
</code></pre>
<p>It should append <code>valid_interval</code> with 7669608 7669690 since <code>exons_array</code> is larger.</p>
","-2","Question"
"78336917","","<p>If I have this list:</p>
<pre><code>['hello world', 'latest.png', 'have a good day', 'stack overflow', 'the best'  
 'latest .png', 'i believe somebody will help me', 'latest.png', 'latest.png']
</code></pre>
<p>Is it possible to change the first <code>latest.png</code> to  <code>latest1.png</code> the next <code>latest.png</code> to <code>latest2.png</code>, etc. ?</p>
<p>Is there any elegant way for this?   thanks a lot</p>
","-1","Question"
"78338196","","<p>I'm new to R. I've been trying to add a vector to the end of a list in R but it doesn't seem to be working.</p>
<p>Here is what I tried:</p>
<pre><code>L &lt;- list(&quot;audrey&quot;, 19, TRUE)
L[&quot;new&quot;] &lt;- c(1,2,3)      # doesn't work

v1 &lt;- c(1,2,3)
L[&quot;new&quot;] &lt;- v1            # doesn't work
</code></pre>
<p>Both of these code throw the same error, <code>number of items to replace is not a multiple of replacement length</code>.</p>
<p>I expected both to work, as when creating a list, the following works:</p>
<pre><code>J &lt;- list(&quot;audrey&quot;, 19, TRUE, c(1,2,3))

v2 &lt;- c(1,2,3)
K &lt;- list(&quot;mary&quot;, 20, v2)
</code></pre>
<p>I assumed it would work because it seems that I am just appending a new vector to the end of my list with a named index. Now it seems like I would have to redefine the list in order to add a vector to the end?</p>
<p>Would appreciate explanations on why this throws an error, and if there is a way of achieving what I want to do without redefining the list. Thanks!</p>
","1","Question"
"78340225","","<p><code>string[] arr = ['abcd-4', 'abcd-1', 'abcd-3', 'abcd-2']</code>
Here is my list. I need this array to be get sorted by the key as the last number after '-'. I know there is a sort function in ballerina but how to add this requirement to the function.</p>
<p>I tried</p>
<pre><code>string[] sortedProducts = products.sort(&quot;descending&quot;, function set(string str) returns int {
...
})
</code></pre>
<p>But it is not working.</p>
","1","Question"
"78343747","","<p>i am a magnitologist and i am trying to make automation of the routine problem using python. Now i work with the file :</p>
<pre><code>with open('test3.txt') as file:
    my_list = file.readlines()  
    b = [line.strip() for line in my_list]
</code></pre>
<p>as a result, i get a list with many elements(strings):</p>
<pre><code>['&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/north-pole/d-rap/`latest`.png&quot;,', '&quot;httpVersion&quot;: &quot;http/2.0&quot;,', '&quot;headers&quot;: [', '{', '&quot;name&quot;: &quot;:authority&quot;,', '&quot;value&quot;: &quot;services.swpc.noaa.gov&quot;', '},', '{', '&quot;name&quot;: &quot;:method&quot;,', '&quot;value&quot;: &quot;HEAD&quot;', '},', '{', '&quot;name&quot;: &quot;:path&quot;,', '&quot;value&quot;: &quot;/images/animations/d-rap/north-pole/d-rap/`latest`.png&quot;', '&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/global_f05/d-rap/`latest`.png&quot;,', '&quot;httpVersion&quot;: &quot;http/2.0&quot;,', '&quot;headers&quot;: [', '{', '&quot;name&quot;: &quot;:authority&quot;,', '&quot;value&quot;: &quot;services.swpc.noaa.gov&quot;', '},', '{', '&quot;name&quot;: &quot;:method&quot;,', '&quot;value&quot;: &quot;HEAD&quot;', '},', '{', '&quot;name&quot;: &quot;:path&quot;,', '&quot;value&quot;: &quot;/images/animations/d-rap/global_f05/d-rap/`latest`.png&quot;', '},', '{', '&quot;name&quot;: &quot;:scheme&quot;,', '&quot;value&quot;: &quot;https&quot;', '},', '{', '&quot;name&quot;: &quot;accept&quot;,', '&quot;value&quot;: &quot;*/*&quot;', '},', '{', '&quot;name&quot;: &quot;accept-encoding&quot;,', '&quot;value&quot;: &quot;gzip, deflate, br&quot;', '', '']
</code></pre>
<p>my task is to find all the lines containing <code>latest</code> and change this specific word, like this :</p>
<pre><code>'&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/north-pole/d-rap/`latest1`.png&quot;,'
</code></pre>
<p>the next string containing <code>latest</code>should look like:</p>
<pre><code>'&quot;value&quot;: &quot;/images/animations/d-rap/north-pole/d-rap/`latest2`.png&quot;', '
</code></pre>
<p>etc , in essence, i just need to add 1 to the word &quot;latest&quot; every time, but i break my head over  it for 2 days) please help</p>
<p>here is my &quot;code&quot; but it does not work:</p>
<pre><code>with open('test3.txt') as file:
    my_list = file.readlines()  
    b = [line.strip() for line in my_list]
    latest_count = 1
    latest_count2 = 2 
for i in range(len(b)):
     if b[i] ==  '&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/north-pole/d-rap/latest.png&quot;,':
        b[i] =   f'&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/north-pole/d-rap/latest{latest_count}.png&quot;,'
        latest_count += 1
     elif b[i] == '&quot;value&quot;: &quot;/images/animations/d-rap/global_f05/d-rap/latest.png&quot;':
          b[i] = f'&quot;value&quot;: &quot;/images/animations/d-rap/global_f05/d-rap/latest{latest_count2}.png&quot;'
          latest_count2 = 2
print(b)
</code></pre>
<p>especially in the original file of thousands of such lines, and they are all different except that they contain <code>latest</code></p>
","1","Question"
"78344750","","<p>I have a string with is required to replace multiple places and add new string from particular position.
Input is
[(<strong>stack_overflow</strong>(<em>'abc'</em>,'xyz')\n <strong>stack_overflow_is_used_for_queries</strong>(<em>'defgh'</em>,'mnopq')\n <strong>stack_overflow</strong>(<em>'abc'</em>,'ijk')\n <strong>stack_overflow_is_used_for_queries</strong>(<em>'defgh'</em>,'mnopq'))]</p>
<p>output like:
[(<strong>search_site</strong>('xyz',<em>'ijklmn'</em>)\n <strong>best_search_for_queries</strong>('mnopq',<em>'search_string'</em>)\n <strong>search_site</strong>('ijk',<strong>'ijklmn'</strong>)\n stack <strong>best_search_for_queries</strong>('mnopq',<em>'search_string'</em>))]</p>
<p>Note: which text is bold that would be find and replace, which text is ITALIC that is remove from input and add as a new text in output</p>
","-1","Question"
"78346709","","<p>I have seen a number of posts, but none seem to quite answer what I am after. Please note that I am currently working under the constraint of only having the standard Python classes available.</p>
<p>The general problem I wish to solve is to find items in a list given query parameters based on a variable query pattern. i.e. (and please treat the following as pseudo code) the solution may get a request to</p>
<ul>
<li>find all rows in a list that match where element[1] == 2 and element[3] != 5,</li>
</ul>
<p>The next request might be to</p>
<ul>
<li>find all rows in a list that match where element[6] == &quot;Bob&quot; and element[7] != None and element[12] &gt;= 0</li>
</ul>
<p>And the request after that might be a completely different query. In other words, I don't how many or which elements and what conditions might be requested.</p>
<p>More specifically, I am trying to identify as set of rows in a CSV file given any query based on the columns therein. I'm not precious on the data structure, I'm just struggling to find a good way to perform something similar to an SQL query (in function). Due to the data in the csv being inconsistent over time, and changing business needs, it would be a bad idea to hardcode conditions into the code as they would become outdated.</p>
<p>Hopefully this is possible using the standard classes</p>
<p>I haven't really tried anything other than a lot of Google searching and bumping into examples using hard coded conditions a lot. I have been focusing on lists a lot and this might be my issue.</p>
<p>I suspect I can cycle through each element of the query against each element of a row in the csv, over and over, but how would I deal with all the various comparators? - sounds like a lot of coding that someone has likely already done in a nice neat little function (I hope!)</p>
","0","Question"
"78346963","","<p>How can I solve this with loops, without regular expressions?</p>
<p>Write a function that accepts a list of file names and returns a dictionary with extensions as keys and their occurrences as value.</p>
<p>Example:</p>
<pre><code>#print(count_file_types([&quot;image1.jpg&quot;, &quot;image2.jpg&quot;, &quot;preso.pptx&quot;]))
#=&gt; {&quot;jpg&quot;: 2, &quot;pptx&quot;: 1}
</code></pre>
<p>I tried this, but I guess it’s all wrong:</p>
<pre><code>def count_file_types(string_arr): 
    
    arr = []
    for i in string_arr:
        arr.append(i.split(&quot;.&quot;))
    return(arr)
    print(arr)

    freq = {}
    for i in arr: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[item] = 1
    return freq
    print(freq)
  
  
print(count_file_types(['image1.jpg', 'image2.jpg', 'preso.pptx']))   
</code></pre>
","-1","Question"
"78351035","","<p>Y: (as a matrix) (2 x 7 , by row)</p>
<p>6  8, 2  5, 2 10, 4 10, 7  8, 4  9, 1  3</p>
<pre><code>y = c(6, 8, 2, 5, 2 ,10, 4, 10, 7, 8, 4, 9, 1, 3)

Y = t(matrix(y, nrow=2))
</code></pre>
<p>output (in a list of grouped elements in order):</p>
<p>6 8 7, 5 2 10 4 9, 1 3</p>
<p>I'm trying to achieve the above output using the function linked in the below that takes two vectors a,b and combines on a common element.</p>
<p>I've tried looping but I get lost in managing the lists and was wondering if there is a smarter way to achieve this output. maybe using lapply?</p>
<p>Any ideas or a way forward on this would be much appreciated.</p>
<p><a href=""https://stackoverflow.com/questions/78322673/how-to-combine-two-vectors-by-a-common-element"">How to combine two vectors by a common element?</a></p>
<p>I've tried for(i in 1:length(Y[,1])){ ...variations but get nowhere.</p>
","4","Question"
"78364833","","<p>I want to attach the function call as an <code>attr</code>ibute. While using <code>fn()</code> directly works fine, when I run it inside <code>lapply()</code>, it returns <code>X[[i]]</code> instead of the actual name passed to the <code>d=</code> parameter. I expect to see <code>df1</code> and <code>df2</code> as the output, not <code>X[[i]]</code>.</p>
<pre><code>&gt; fn &lt;- \(d, x=x, y=999, ...) {
+   cl &lt;- match.call()
+   fa &lt;- formals(fn)
+   fa[length(fa)] &lt;- NULL
+   ma &lt;- setdiff(names(fa), names(cl))
+   cl[ma] &lt;- fa[ma]
+   cl[-c(1, 2)] &lt;- lapply(cl[-c(1, 2)], eval, envir=parent.frame())
+   # cl$d &lt;- quote(d)
+   res &lt;- d[[1]]  ## so `res` depends on `d`
+   attr(res, 'call') &lt;- cl
+   return(res)
+ }
&gt; 
&gt; z. &lt;- 777
&gt; df1 &lt;- lst$df1
&gt; df2 &lt;- lst$df2
&gt; fn(df1, x=666, z=z.)
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = df1, x = 666, z = 777, y = 999)
&gt; lapply(list(df1=df1, df2=df2), fn, x=666, z=z.)
$df1
[1] 1 2 3
attr(,&quot;call&quot;)
FUN(d = X[[i]], x = 666, z = 777, y = 999)

$df2
[1] 1 2 3
attr(,&quot;call&quot;)
FUN(d = X[[i]], x = 666, z = 777, y = 999)
</code></pre>
<p>This obviously relates to an earlier <a href=""https://stackoverflow.com/q/78263802/6574038"">question</a>, so I tried <code>Map</code> as proposed, however, apparently it doesn't generalize well.</p>
<pre><code>&gt; Map(list(df1=df1, df2=df2), f=fn, x=666, z=z.)
$df1
[1] 1 2 3
attr(,&quot;call&quot;)
(\(d, x=x, y=999, ...) {
  cl &lt;- match.call()
  fa &lt;- formals(fn)
  fa[length(fa)] &lt;- NULL
  ma &lt;- setdiff(names(fa), names(cl))
  cl[ma] &lt;- fa[ma]
  cl[-c(1, 2)] &lt;- lapply(cl[-c(1, 2)], eval, envir=parent.frame())
  # cl$d &lt;- quote(d)
  res &lt;- d[[1]]
  attr(res, 'call') &lt;- cl
  return(res)
})(d = dots[[1L]][[2L]], x = 666, z = 777, y = 999)

$df2
[1] 1 2 3
attr(,&quot;call&quot;)
(\(d, x=x, y=999, ...) {
  cl &lt;- match.call()
  fa &lt;- formals(fn)
  fa[length(fa)] &lt;- NULL
  ma &lt;- setdiff(names(fa), names(cl))
  cl[ma] &lt;- fa[ma]
  cl[-c(1, 2)] &lt;- lapply(cl[-c(1, 2)], eval, envir=parent.frame())
  # cl$d &lt;- quote(d)
  res &lt;- d[[1]]
  attr(res, 'call') &lt;- cl
  return(res)
})(d = dots[[1L]][[2L]], x = 666, z = 777, y = 999)
</code></pre>
<p>Then I tried to do <code>cl$d &lt;- quote(d)</code>, <code>cl$d &lt;- quote(substitute(d))</code>, <code>cl$d &lt;- quote(eval(parse(text=d)))</code>, <code>cl$d &lt;- quote(get(d))</code>, as commented out above, to no avail. Here result of <code>cl$d &lt;- quote(d)</code> version:</p>
<pre><code>&gt; fn(df1, x=666, z=z.)
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = d, x = 666, z = 777, y = 999)
&gt; lapply(list(df1=df1, df2=df2), fn, x=666, z=z.)
$df1
[1] 1 2 3
attr(,&quot;call&quot;)
FUN(d = d, x = 666, z = 777, y = 999)

$df2
[1] 1 2 3
attr(,&quot;call&quot;)
FUN(d = d, x = 666, z = 777, y = 999)
</code></pre>
<h2>Expected output</h2>
<pre><code>&gt; lapply(list(df1=df1, df2=df2), fn, x=666, z=z.)
$df1
[1] TRUE
attr(,&quot;call&quot;)
FUN(d = df1, x = 666, z = 777, y = 999)

$df2
[1] TRUE
attr(,&quot;call&quot;)
FUN(d = df2, x = 666, z = 777, y = 999)
</code></pre>
<p><strong>Just a heads up, I'm looking for a solution using base R.</strong></p>
<h2>Edit</h2>
<p>After <em>@MrFlick</em>'s answer, I see I need to clarify. Actually I have a large list <code>lst</code>:</p>
<pre><code>&gt; lst &lt;- list(df1=df1, df2=df2)
&gt; lapply(lst, function(x) 
+   do.call(&quot;fn&quot;, list(as.name(x), x=666, z=z.))
+ )
Error in as.vector(x, mode = mode) : 
  'list' object cannot be coerced to type 'symbol'
</code></pre>
","1","Question"
"78369412","","<p>I would like to create a fifth column in the below sample dataset that contains a list of columns 2:4 for each row. The desired output would be c(20,40,14) for the first row and c(13,13,0) for the second row.</p>
<p>My current attempt (shown in reproducible example below) yields the error &quot;in <code>mutate()</code>:
ℹ In argument: <code>list_column = list(fastballs, sliders, curves)</code>.
Caused by error:
! <code>list_column</code> must be size 2 or 1, not 3.</p>
<p>Any and all help appreciated.</p>
<pre><code>library(tidyverse)

df &lt;- data.frame(name = c('Bob','AJ'),
                fastballs = c(20,13),
                sliders = c(40,13),
                curves = c(14,0)) %&gt;% 
mutate(list_column = list(fastballs,sliders,curves))
</code></pre>
","3","Question"
"78374419","","<p>I want to subract a number inside of a list consecutively.</p>
<p>Let's say I have a list name A.</p>
<p><code>A = [6, 7, 9, 5]</code></p>
<p>Subtract 6 - 7, so it's -1. Then, subtract -1 - 9, it's -10. Then, subtract -10 - 5, it's -15.</p>
<p>It must use function.</p>
<pre><code>list_number = [10, 9, 8, 7, 6, 5, 4]
def subtract(list_number):
    i = 0
    operate = list_number[i] - list_number[i+1]
return operate
</code></pre>
<p>But, this will only get the subtraction of &quot;0&quot; index number and &quot;1&quot; index number only. How to make the subtraction work consecutively?</p>
","0","Question"
"78376234","","<p>I have generated 10 model summaries after fitting the same model on 10 different subsets of the dataset which is as follows</p>
<pre><code>library(mice)
data(&quot;nhanes&quot;)
head(nhanes)

imp &lt;- mice(nhanes, print = FALSE, m = 10, seed = 24415)
df &lt;- complete(imp, &quot;long&quot;)
model_fit &lt;- lapply(1:10, function(i) {
  model = lm(bmi ~ age + hyp + chl,
             data = subset(df, `.imp`==i))
})
</code></pre>
<p>From this I get different <code>ggpredict</code> objects</p>
<pre><code>ggpredict(model_fit[[1]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[2]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[3]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[4]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[5]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[6]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[7]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[8]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[9]], c(&quot;age&quot;, &quot;hyp&quot;))
ggpredict(model_fit[[10]], c(&quot;age&quot;, &quot;hyp&quot;))
</code></pre>
<p>I am looking for an efficient way to a) Estimate the average of all the <code>ggpredict</code> objects by <strong>hp</strong> and <strong>age</strong></p>
<p>The expected output would look like this.</p>
<pre><code>  age    hp      Predicted                        95% C.I
  --------------------------------------------------------
  1      1       (28.38 + 29.35 + 27.3...)/10      (26.67 +2 6.83 + 25.25...)/10 ; (30.08 + 31.87 + 29.35....)/10 
  2      1       (24.21 + 26.01 + 25.40...)/10     (22.71 + 23.56 + 23.54...)/10 ;  (25.71 + 28.46 + 27.26....)/10
  3      1       (20.05 + 22.67 + 23.51...)/10     (17.13 + 17.89 + 20.08..)/10 ;   (22.96 + 27.44 + 26.94...)/10

  1      2       (31.82 + 29.35 +28.87...)/10    (28.07 + 23.58 + 24.24...)/10 ;  (35.58 + 35.13 + 33.49....)/10 
  2      2       (27.66 + 26.01 +26.97...)/10    (24.88 + 22.02 + 23.43...)/10 ;  (30.43 + 30.00 + 30.52....)/10  
  3      2       (23.49 + 22.67 +25.08...)/10    (20.63 + 18.73 + 21.50...)/10 ;  (26.35 + 26.61 + 28.66....)/10     
</code></pre>
<p>b) Plot based on the final averaged values using ggplot function.
<a href=""https://i.sstatic.net/1xH2V.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/1xH2V.png"" alt=""enter image description here"" /></a></p>
<p>So far I tried storing the results from each <code>ggpredict</code> function as list object and</p>
<pre><code>`Reduce(`+`, list_ggpred)/length(list_ggpred)`
</code></pre>
<p>I got warning,</p>
<pre><code> &quot; In Ops.factor(left, right) : `+1 not meaningful for factors.
</code></pre>
<p>Any suggestions highly appreciated. Thanks.</p>
","1","Question"
"78377675","","<p>I am currently writing a natural selection simulation where, prey and predators can be spawned in and if the two instances collide, the program should run a subroutine and delete that specified prey from the program. The predator and prey classes are stored in lists:</p>
<pre><code>Private Predator As New List(Of PredatorClass)
Private Organism As New List(Of OrganismClass)
</code></pre>
<p>And the next part of my code should involve locating the indexes of the specified predator and prey at the time of their collision.</p>
<p>However, I am writing this program out in Visual Basic Windows Form App (.NET Framework) and I am having a hard time adding the specified indexes at the creation of the predator / prey organisms at their creation.</p>
<pre><code>Public Sub AddOrganism(OrganismAdded As OrganismClass)
    Organism.Add(OrganismAdded)
End Sub
Public Sub AddPredator(PredatorAdded As PredatorClass)
    Predator.Add(PredatorAdded)
End Sub
</code></pre>
<p>Could I get some assistance on this, I am stumped and do not know what to do and my programming skills are not very strong. Thank you.</p>
<p>I had tried creating an enumerable range at the classes' creation to add these values on but the could did not accept it as the list was a list of classes and not an assignable data type. I was hoping it would add values to the classes so the program could differentiate between each instance.</p>
<pre><code>Private Predator As New List(Of PredatorClass)(Enumerable.Range(&quot;&quot;, 25))
Private Organism As New List(Of OrganismClass)(Enumerable.Range(&quot;&quot;, 25))
</code></pre>
","1","Question"
"78379598","","<p>I get a problem of decimal when I try to convert a Pandas Series to a Python list, it arises when I manipulate floating numbers.</p>
<p>I didn't expected that and got tricked by this silent problem when I tried to intersect two lists and got a wrong behaviour.</p>
<p>I tried to solve it with decimal package, but didn't work. Then I managed to solve it by forcing to round the value to 2 decimals but I'm not really happy with it. Is there a way to avoid this problem ? Or are we forced to round the list values everytime ?</p>
<p>Here is a minimal example to reproduce the problem:</p>
<pre><code>
# --- THE PROBLEM

import pandas as pd

# Create a Pandas Series
series1 = pd.Series([0.2, 0.4, 0.6, 0.8])

# Create a new Series from the original
series2 = series1 + 0.1

# Convert the series to a list
list_from_series1 = series1.tolist()
list_from_series2 = series2.tolist()
list_from_series3 = list(series2)

# Show output
print(list_from_series1)   # no problem
print(series2)             # no problem
print(list_from_series2)
print(list_from_series3)


# --- ATTEMPT TO SOLVE IT WITH DECIMAL PACKAGE
from decimal import *
getcontext().prec = 2
print(list_from_series3)


# --- FORCE IT
import numpy as np
list_from_series3 = np.around(np.array(list_from_series3),2)
print(list_from_series3)
</code></pre>
<p>OUTPUT</p>
<pre><code>[0.2, 0.4, 0.6, 0.8]
0    0.3
1    0.5
2    0.7
3    0.9
dtype: float64
[0.30000000000000004, 0.5, 0.7, 0.9]
[0.30000000000000004, 0.5, 0.7, 0.9]
[0.30000000000000004, 0.5, 0.7, 0.9]
[0.3 0.5 0.7 0.9]
</code></pre>
","1","Question"
"78380304","","<p>There are a number of files in a folder like this:</p>
<pre><code>'920.jpg'
'920-1.jpg'
'920-2.jpg'
</code></pre>
<p>When I want to get a list of files, the order of the files is as follows:</p>
<pre><code>[
    '920-1.jpg',
    '920-2.jpg',
    '920.jpg'
]
</code></pre>
<p>How can I get a list where the order of the files is exactly the same as the order of the files in Windows folder?</p>
<p>I used <code>os.listdir()</code> and <code>glob</code> module, but did not succeed.</p>
","-2","Question"
"78381862","","<p>I want to create a list using the fields in <code>FhExtra</code> and other fields in the <code>FhExtraImportResults</code>. There are many fields in this class; I just put few.  I cannot edit <code>FhExtraImportResults</code> and <code>FhExtra</code> because they are used in other places.</p>
<p>I am trying to create new list and setting the fields manually. Is there any better way to create a new list with these fields?</p>
<p>The object I am receiving to convert is a <code>List</code> of <code>FhExtraImportResults</code>.</p>
<pre class=""lang-java prettyprint-override""><code>public class FhExtraImportResults {
    FhExtra record;
    String error;
    Long loanId;
}

@Data
public class FhExtra {
    String LoanNumber;
    String FILoanNumber;
}
</code></pre>
<p>My expected list object looks like</p>
<pre class=""lang-none prettyprint-override""><code>[{
 LoanNumber : 123
 FILoanNumber : 321
 error : NA
 loanId : 456
}]
</code></pre>
","0","Question"
"78382710","","<p>I want to count distinct values (dates) in the range B23:B2000 in Libre Office Calc.</p>
<p>Additionally the result should change if a filter is applied.</p>
<p>The range B23:B2000 consists of real dates (e.g. in B23:B34) and of &quot;&quot; for the rest (e.g. B35:B2000), which is created through the formula</p>
<pre><code>=IF($Temp.V35&lt;&gt;&quot;&quot;,$Temp.V35,&quot;&quot;)
</code></pre>
<p>to get empty cells if there is no raw data in the source sheet &quot;Temp&quot;.</p>
<p>The value &quot;&quot; should not be counted as distinct value in the end result. I assume one could just subtract 1 from the result to get the correct one?</p>
<p>I tried different array formulas but I cannot get the formula to work for a filtered list.</p>
<pre><code>=SUM(IF(ISBLANK(B23:B2000),&quot;&quot;,1/COUNTIF(B$23:B$2000,B23:B2000)))
</code></pre>
<p>or</p>
<pre><code>=SUMPRODUCT((B23:B2000&lt;&gt;&quot;&quot;) / COUNTIF(B23:B2000,B23:B2000 &amp; &quot;&quot;))
</code></pre>
<p>Thank you very much in advance for your help!</p>
<p><a href=""https://i.sstatic.net/N95Sn.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/N95Sn.png"" alt=""enter image description here"" /></a></p>
","0","Question"
"78384833","","<p>Mathematica has an object called <a href=""https://reference.wolfram.com/language/ref/Nothing.html"" rel=""nofollow noreferrer"">Nothing</a> that when put into a list automatically disappears.</p>
<p>For example, <code>{a, b, Nothing, c, d, Nothing}</code> automatically evaluates to <code>{a, b, c, d}</code>.</p>
<p>Does something analogous exist for python?</p>
<p>I tried <code>x = (1, 2, 3, 4 if True, 5)</code> which complains about the lack of an else statement.  Moving to <code>x = (1, 2, 3, 4 if True else None, 5)</code> succeeds but <code>y = (1, 2, 3, 4 if False else None, 5)</code> gives <code>(1, 2, 3, None, 5)</code> whereas what I want is <code>(1, 2, 3, 5)</code>, so <code>None</code> is kept while <code>Nothing</code> would be dropped.</p>
<p>If there is such a thing, does it work for <code>[lists,]</code> and <code>{'dict': 'ionaries'}</code>?</p>
","0","Question"
"78386041","","<p>I am making a Three Or More game, which means that I need to make the programme recognise repeated values (for a 3 of a kind function).</p>
<p>I have created a Die class that rolls a pseudorandom integer from 1-6:</p>
<pre><code>internal class Die
{
    private static Random random = new Random(); // Creates an instance of a random object using the built-in Random class

    // Roll() method
    public int Roll()
    {
        int diceroll = random.Next(1, 7); // Picks a random integer (1-6) from a list using the random object

        //Console.WriteLine(&quot;One dice rolled a &quot;+ diceroll);

        return diceroll; // Assigns a value to the dicevalue property
    }
}
</code></pre>
<p>In my Game class, and then in my ThreeOrMore class, I've created an empty list:</p>
<pre><code>List&lt;int&gt; player1dicerolls = new List&lt;int&gt;();
</code></pre>
<p>The for loop is then used to roll the player's dice 5 times, by creating a Die object, and then adds the dice roll to the List:</p>
<pre><code>               for (int i = 0; i &lt; 5; i++)
               {
                   Die dice1 = new Die();
                   int x = dice1.Roll();
                   Console.ReadLine();
                   Console.WriteLine($&quot;One dice rolled a {x}&quot;);
                   player1dicerolls.Add(x);
               }
</code></pre>
<p>And finally, I have used a foreach statement to print out each value of the List, which are then put through a Linq (which should print out the dice numbers that are repeated):</p>
<p>An overflow answer said to try &quot;string.Join()&quot;, however that hasn't worked either.</p>
<pre><code>                foreach (var value in player1dicerolls.GroupBy(x =&gt; x)
                    .Where(g =&gt; g.Count() &gt; 1)
                    .Select(y =&gt; new { Element = y.Key, Counter = y.Count() })
                    .ToList())
                {
                    Console.WriteLine(player1dicerolls);
                }

                string.Join(&quot;, &quot;, player1dicerolls);
</code></pre>
<p>However, my output is this:</p>
<pre><code>System.Collections.Generic.List`1[System.Int32]
System.Collections.Generic.List`1[System.Int32]
</code></pre>
<p>Can anyone please help me make the programme print out the repeated values?</p>
","2","Question"
"78388087","","<p>I have the following list:</p>
<pre class=""lang-py prettyprint-override""><code>list = [[0, 0, 1], 
        [1, 0, 0], 
        [0, 1, 0]]
</code></pre>
<p>My goal is to return from this list, a set of tuples that contain the coordinates (row, column) of each value equal to <code>1</code>.</p>
<p>The correct answer to the above code is:</p>
<pre><code>{(0, 2), (1, 0), (2, 1)}
</code></pre>
<p>I'm working on my list comprehension knowledge. I manage to do this with a <code>for</code> loop and an index, but i want cleaner code. If the solution can be using list comprehension I would appreciate it</p>
","0","Question"
"78388955","","<p>Today I had a suspicion that the <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.addrange"" rel=""nofollow noreferrer""><code>List&lt;T&gt;.AddRange</code></a> method might not be safe to use with a concurrent collection as argument, so I made an experiment to find out:</p>
<pre><code>ConcurrentDictionary&lt;int, int&gt; dictionary = new();

for (int i = 1; i &lt;= 50_000; i++)
    dictionary.TryAdd(i, default);

List&lt;KeyValuePair&lt;int, int&gt;&gt; list = new();

Thread thread = new(() =&gt;
{
    for (int i = -1; i &gt;= -50_000; i--)
        dictionary.TryAdd(i, default);
});
thread.Start();

list.AddRange(dictionary); // Throws

thread.Join();
Console.WriteLine($&quot;dictionary.Count: {dictionary.Count:#,0}, list.Count: {list.Count:#,0}&quot;);
</code></pre>
<p><a href=""https://dotnetfiddle.net/k2ujob"" rel=""nofollow noreferrer"">Online demo</a>.</p>
<p>The <code>ConcurrentDictionary</code> is initialized with 50,000 positive keys. Then 50,000 additional negative keys are added on a different thread, concurrently with adding the dictionary in the list with the <code>AddRange</code> method. I was expecting that eventually the dictionary would have 100,000 keys, and the list somewhere between 50,000 and 100,000 items. In reality I got an <code>ArgumentException</code>:</p>
<pre class=""lang-none prettyprint-override""><code>Unhandled exception. System.ArgumentException: The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array.
   at System.Collections.Concurrent.ConcurrentDictionary`2.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(KeyValuePair`2[] array, Int32 index)
   at System.Collections.Generic.List`1.InsertRange(Int32 index, IEnumerable`1 collection)
   at System.Collections.Generic.List`1.AddRange(IEnumerable`1 collection)
   at Program.Main()
</code></pre>
<p><strong>My question is:</strong> Why is this happening, and how can I prevent it from happening? Is there any way to ensure that the <code>list.AddRange(dictionary);</code> line will be always successful, with no exceptions thrown?</p>
<p>Imagine that the dictionary might have been given to me as an <code>IEnumerable&lt;T&gt;</code>, and I have no idea about its underlying type. The same exception is thrown in this case as well:</p>
<pre><code>IEnumerable&lt;KeyValuePair&lt;int, int&gt;&gt; enumerable = dictionary;
list.AddRange(enumerable); // Throws
</code></pre>
<p>This behavior reduces my confidence about using the <code>List&lt;T&gt;.AddRange</code> API in general.</p>
<p><strong>Context:</strong> A similar symptom is mentioned in <a href=""https://stackoverflow.com/questions/2593267/listt-addrange-throwing-argumentexception"" title=""List&lt;T&gt; AddRange throwing ArgumentException"">this</a> question, but a minimal and reproducible example is not provided, so I am not sure that the scenario is the same. Another related question is <a href=""https://stackoverflow.com/questions/41038514/calling-tolist-on-concurrentdictionarytkey-tvalue-while-adding-items"" title=""Calling ToList() on ConcurrentDictionary&lt;TKey, TValue&gt; while adding items"">this</a>, about calling the LINQ <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist"" rel=""nofollow noreferrer""><code>ToList</code></a> on a <code>ConcurrentDictionary&lt;TKey, TValue&gt;</code>. Nevertheless the documentation <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2#thread-safety"" rel=""nofollow noreferrer"">warns</a> about using extension methods on concurrent collections, but I am not seeing any warning against using a concurrent collection with the <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.addrange"" rel=""nofollow noreferrer""><code>List&lt;T&gt;.AddRange</code></a> method.</p>
","4","Question"
"78390253","","<p>There is a file with a list of numbers.
Example:</p>
<pre><code>AK
  v       0.00o      0.00       0.00       0.00       0.00       0.00       0.00
        750.00       0.00       0.00       0.00       0.00       0.00       0.00
        750.00      43.00       0.00       0.00       0.00       0.00       0.00
        585.00      43.00      -7.00       0.00       0.00       0.00       0.00
   -16611181.71     -90.16t     -7.00       0.00       0.00       0.00       0.00
        585.00      57.00       0.00       0.00       0.00       0.00       0.00
        750.00      57.00       0.00       0.00       0.00       0.00       0.00
        750.00     100.00       0.00       0.00       0.00       0.00       0.00
          0.00     100.00       0.00       0.00       0.00       0.00       0.00
          0.00      56.99       0.00       0.00       0.00       0.00       0.00
        165.00      56.99      -7.00       0.00       0.00       0.00       0.00
   16612362.17     344.30t     -7.00       0.00       0.00       0.00       0.00
        165.00      42.99       0.00       0.00       0.00       0.00       0.00
          0.00      42.99       0.00       0.00       0.00       0.00       0.00
          0.00       0.00       0.00       0.00       0.00       0.00       0.00
</code></pre>
<p>This is what you should get after editing the file:</p>
<pre><code>AK
  v       0.00o      0.00       0.00       0.00       0.00       0.00       0.00
        750.00       0.00       0.00       0.00       0.00       0.00       0.00
        750.00      43.00       0.00       0.00       0.00       0.00       0.00
        585.00      43.00      -7.00       0.00       0.00       0.00       0.00

        585.00      57.00       0.00       0.00       0.00       0.00       0.00
        750.00      57.00       0.00       0.00       0.00       0.00       0.00
        750.00     100.00       0.00       0.00       0.00       0.00       0.00
          0.00     100.00       0.00       0.00       0.00       0.00       0.00
          0.00      56.99       0.00       0.00       0.00       0.00       0.00
        165.00      56.99      -7.00       0.00       0.00       0.00       0.00
   
        165.00      42.99       0.00       0.00       0.00       0.00       0.00
          0.00      42.99       0.00       0.00       0.00       0.00       0.00
          0.00       0.00       0.00       0.00       0.00       0.00       0.00
</code></pre>
<p>You need to remove the entire line from it, where the number &gt; 12000 or the number &lt; -12000.
I tried to split the string into substrings and compare the value, but nothing worked :(</p>
<pre><code>import PySimpleGUI as sg
import os

sg.theme('Default1')
OUTFILE = 'tmp.nc1'

layout = [
    [sg.InputText(), sg.FileBrowse('...', key = '-FILE-') ],
    [sg.Button('Исправить')]
]

window = sg.Window('Исправление позиций', layout)
while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED: 
        break
    elif event == 'Исправить':
        with open(values['-FILE-']) as infile, open(OUTFILE, 'w') as outfile:
            for line in infile:
                if line.startswith('   '):
                    str = line.split()
                    numbers = int(str[0])

                if not (numbers &lt; 12000) or not (numbers &gt; -12000):
                    outfile.write(line)
                
        os.remove(values['-FILE-'])
        os.rename(OUTFILE, values['-FILE-'])

window.close()
</code></pre>
","-2","Question"
"78391980","","<p>If I run this code in Python 3.10:</p>
<pre><code>import gc


def main():
    a = 23764723
    ref = gc.get_referrers(a)[0]
    print(ref)


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>I get the following output:</p>
<pre><code>['gc', 'main', 'a', 23764723, 'ref', 'gc', 'get_referrers', 'a', 0, 'print', 'ref', '__main__', '__name__', 'main']
</code></pre>
<p>What <em>is</em> this list, that seems to contain all of the literals(?) from my code? Is there an explanation in the Python docs anywhere?</p>
","9","Question"
"78392238","","<pre><code>data={}
vega={}
for coin in ['BTC']:
    vega[coin] = {}
    data[coin] = {}
    data[coin]['columns']=['27-Apr-24', '28-Apr-24', '29-Apr-24', '03-May-24', '10-May-24', '17-May-24', '31-May-24']
    for expiry in data[coin]['columns']:
        vega[coin][expiry] = data[coin].get('Vega', {}).get('Total', {}).get(expiry, 0)

for coin in ['BTC']:
    data[coin]['columns']=['27-Apr-24', '28-Apr-24', '29-Apr-24', '03-May-24', '10-May-24', '17-May-24', '31-May-24', '28-Jun-24']
    for expiry in data[coin]['columns']:
        vega[coin][expiry] += data[coin].get('Vega', {}).get('Total', {}).get(expiry, 0)
</code></pre>
<p>Im initializing dict, and giving values if key is not present.</p>
<p>But however, getting</p>
<pre><code>KeyError: '28-Jun-24'
</code></pre>
<p>on last line why?</p>
<p>Could someone help me figure out mistake im doing here?</p>
","0","Question"
"78399960","","<p>This is my first day of learning Python and my very first project. so i have 62 items in my data and want it to randomly pick out 48 of them and put them each in a group of 4. So a total of 48 in 12 different groups of 4. It keeps putting 16 groups with 4 countries in each and 2 countries in the last group. How do I fix this or limit the groups?</p>
<pre><code>import random

countries = [ 'Argentina','France', 'Belgium',  'England','Brazil', 'Portugal', 'Netherlands',  'Spain',    'Italy',    'Croatia',  'United_States',    'Colombia', 'Morocco',  'Mexico',   'Uruguay',  'Germany','Senegal','Japan',    'Switzerland', 'Iran',  'Denmark',  'Ukraine', 'South_Korea',   'Australia',    'Austria', 'Hungary',   'Sweden', 'Poland', 'Wales',    'Nigeria',  'Ecuador',  'Peru',     'Serbia',   'Qatar',    'Russia',   'Czech_Republic', 'Czechia',    'Egypt',    'Ivory_Coast',  'Scotland', 'Türkiye',  'Tunisia',  'Chile',    'Algeria',  'Mali',     'Panama',   'Romania',  'Norway',   'Slovakia',     'Canada',   'Greece', 'Cameroon',   'Costa_Rica',   'Saudi_Arabia',     'Venezuela',    'Jamaica', 'Paraguay', 'Slovenia',  'Iraq','South_Africa',  'Republic_of_Ireland',  'Finland']

group = 1
membersInGroup = 4

for country in countries [:]:
    if membersInGroup == 4 :
        print (&quot;group {} consist of:&quot; .format(group))
        membersInGroup = 0
        group += 1

person = random.choice (countries)
print (person)
membersInGroup += 1
countries.remove (str(person))`
</code></pre>
<p>I don't know all the terminology of coding, so I feel limited in myself.</p>
","1","Question"
"78400455","","<p>Is it possible to calculate the number of common items in a list column, between a row and the previous row in the method chain?
My code below throws and error 'TypeError: unhashable type: 'list''</p>
<pre><code>import pandas as pd

df = pd.DataFrame({
    'x':[1,2,3,4],
    'list_column': [
        ['apple', 'banana', 'cherry'],
        ['banana', 'cherry'],
        ['cherry', 'date', 'fig'],
        ['orange']
    ]
})

res = len(set(df.loc[1,'list_column']) &amp; set(df.loc[0,'list_column']))
res

df=(df
     .assign(
         list_length=lambda x: x['list_column'].str.len(),
         nr_common=lambda x: (set(x['list_column']) &amp; set(x['list_column'].shift(1))).len() 
         )
)

df
</code></pre>
","1","Question"
"78404511","","<p>I have a data frame where one column contains a string of numbers. Each row contains a set of numbers that vary in length. For example:</p>
<pre><code>Month       Count
Jan         &quot;[1.2445, 23.888883, 16.11208347]&quot; 
Feb         &quot;[2.6473, 400.6256]&quot;
March       &quot;[6723.1838282, 187.1212, 90.111, 75.1342899]&quot; 
</code></pre>
<p>The goal is to convert the list into numeric format, and sum across each row. Resulting in something like (rounded decimals for ease):</p>
<pre><code>Month       Count
Jan         41.245 
Feb         403.2729
March       7075.500 
</code></pre>
<p>I have used this code which works for a single row, but I am unable to abstract it over the entire data frame by row.</p>
<pre><code>sum(as.numeric(strsplit(substr(Data$Count, 2, nchar(Data$Count) - 1), ',')[[1]]))
</code></pre>
","2","Question"
"78404630","","<p>I have a list of tibbles that I've downloaded from a website here:</p>
<pre><code>library(rvest)
ContractHistory &lt;- read_html(&quot;https://overthecap.com/player/a-j-mccarron/3103&quot;)
ContractHistory &lt;- ContractHistory %&gt;% html_table(fill=TRUE)  
</code></pre>
<p>I am looking to keep a single one of those tibbles based on a specific column name existing in it, &quot;status&quot;.</p>
<p>To do so, I've (unsuccessfully) tried:</p>
<pre><code>for (i in 1:length(ContractHistory)) {
  if(&quot;Status&quot; %in% names(ContractHistory[['i']])==FALSE) {
    ContractHistory[['i']] &lt;- NULL
  }
}  
</code></pre>
<p>To me this says check whether the first tibble has a column name status, which it does, and so does nothing.  Then the next iteration checks the second tibble for a column name status, finding it doesn't, which should prompt it to erase that tibble (and same thing for 3,4,5).  But something within it isn't getting passed through and the original list remains unmodified.</p>
","0","Question"
"78405813","","<p>The problem I'm having is the following, I have an initial list that I'm trying to divide into multiple lists like the following:</p>
<pre><code>['28/02/2025', '16/03/2025', '16', '14', 'directos', '1.093.026', '29/10/2024', '25/11/2024', '27', '26', 'con', '1.333.784', '28/02/2025', '16/03/2025', '16', '14', 'directos', '1.444.026', '29/10/2024', '25/11/2024', '27', '29', 'con', '1.283.784']
</code></pre>
<p>And I want to get something like this so I can work better with the data:</p>
<pre><code>[['28/02/2025', '29/10/2024', '28/02/2025', '29/10/2024'], ['16/03/2025', '25/11/2024', '16/03/2025', '25/11/2024'], ['16', '27', '16', '27'], ['14', '26', '14', '29'], ['directos', 'con', 'directos', 'con'], ['1.093.026', '1.333.784', '1.444.026', '1.283.784']]
</code></pre>
<p>What I did is the following:</p>
<pre><code>listota = ['28/02/2025', '16/03/2025', '16', '14', 'directos', '1.093.026', '29/10/2024', '25/11/2024', '27', '26', 'con', '1.333.784', '28/02/2025', '16/03/2025', '16', '14', 'directos', '1.444.026', '29/10/2024', '25/11/2024', '27', '29', 'con', '1.283.784']

p = 0
listas = [[] for _ in range(6)] 
for i, elemento in enumerate(listota):
  if p &gt; 4:
    p = 0
  else:
    listas[p].append(elemento)
    p += 1
</code></pre>
<p>When I <code>print(listas)</code> this is the output:</p>
<pre><code>[['28/02/2025', '29/10/2024', '28/02/2025', '29/10/2024'], ['16/03/2025', '25/11/2024', '16/03/2025', '25/11/2024'], ['16', '27', '16', '27'], ['14', '26', '14', '29'], ['directos', 'con', 'directos', 'con'], []]
</code></pre>
<p>The last list, the one that should have the prices never appends and i don't really know why. Hope someone notices what im doing wrong.</p>
","-1","Question"
"78406892","","<p>I'm using the golang pointer to do some empty check. But I'm so confused about how to check the nil situation. It's much different from C. For example there is a mock object</p>
<pre><code>type Node struct {
    Val  int
    Next *Node
}
</code></pre>
<p>When I create object</p>
<pre><code>a := &amp;Node{Val:1,Next:nil}
</code></pre>
<p>And I want to judge if the a's next value is empty. I use the following code</p>
<pre><code>if *a.Next == nil{}
</code></pre>
<p>But the complier raise error that the type is not align. Does it not mean the object (referred by a point)'s Next property? After I wrapped the *a with () it works. <strong>So I don't know why the * operator is not work.</strong></p>
<p>Another question is that when I use the following</p>
<pre><code>if a.Next == nil {}
</code></pre>
<p>It also works fine. But it is strange. Since a should refer to a memory address value which contains object. Memory address can't have &quot;Next&quot; property, only object has it. <strong>So why the a.Next can get the value instead of raising exception?</strong></p>
<p>feel confused.</p>
","-2","Question"
"78408325","","<p>I have a list <code>x0</code>. I want to insert indices according to elements of <code>missing_values</code>. I present the current and expected output.</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = [2, 4]  # indices to set to zero

# Create a set of indices from missing_values
indices_to_set_zero = set(missing_values)

# Initialize the result list
result = []

# Iterate through x0
for i, value in enumerate(x0):
    # If the index is in the set, append 0 before the value
    if i in indices_to_set_zero:
        result.append(0)
    result.append(value)

# If the last index is in the set, append a 0 at the end
if len(x0) in indices_to_set_zero:
    result.append(0)

print(result)
</code></pre>
<p>The current output is</p>
<pre><code>[1, 2, 0, 3, 4, 0, 5]
</code></pre>
<p>The expected output is</p>
<pre><code>[1, 0, 2, 0, 3, 4, 5]
</code></pre>
","0","Question"
"78409585","","<p>I currently have two columns of strings like the following. And want to concatenate the two columns together to make the third using Power Query. I have been trying to find a way for several days with no luck. If a way could be found using DAX I would accept that solution as well.</p>
<p><a href=""https://i.sstatic.net/rU53HRNk.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/rU53HRNk.png"" alt=""Example of Columns and Desired Output"" /></a></p>
<p>I have tried several different &quot;list.*&quot; type functions, and tried to use different text functions with no avail.</p>
","1","Question"
"78410264","","<p>I have a moderately large <code>np</code> array (which could however get larger in the future):</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np
x = np.arange(100_000).reshape((10_000,10))
</code></pre>
<p>I need to iteratively choose a random sample (row), making sure that I never choose the same sample twice. Currently I'm doing</p>
<pre><code>rng = np.random.default_rng(seed=42)
indices = list(range(len(x)))
for _ in range(1000):
    i = rng.choice(indices)
    ## do something with x[i]
    indices.remove(i)
</code></pre>
<p>However, I read that <code>remove</code> is pretty slow. Is there a better way to keep track of the indices I already used?</p>
","1","Question"
"78411945","","<p>I am trying to get the city, state, and then a number indicating area from a file. Then I need to do the same with another file with the same cities and states with a number indicating population and make a file in the same format for the population density. I don't understand how I should go about doing this</p>
<p>I am new to py and don't have a lot of coding experience so this is what I have so far</p>
<p>here is the population txt file:</p>
<pre class=""lang-none prettyprint-override""><code>Calico, California         12
Rhyolite, Nevada           3
Goldfield, Arizona         30
St. Elmo, Colorado         6
Terlingua, Texas           100
Virginia City, Montana     10
Nevada City, Montana       12
Bodie, California          45
Cahawba, Alabama           22
Kennecott, Alaska          2
Bannack, Montana           233
South Pass City, Wyoming   43
Centralia, Pennsylvania    6
Thurmond, West Virginia    55
Glenrio, Texas             1
Glenrio, New Mexico        1
Bulowville, Florida        54
</code></pre>
<p>here is the area txt file:</p>
<pre class=""lang-none prettyprint-override""><code>Calico, California         2
Rhyolite, Nevada           3
Goldfield, Arizona         12
St. Elmo, Colorado         4
Terlingua, Texas           10
Virginia City, Montana     15
Nevada City, Montana       6
Bodie, California          100
Cahawba, Alabama           20
Kennecott, Alaska          300
Bannack, Montana           23
South Pass City, Wyoming   3
Centralia, Pennsylvania    6
Thurmond, West Virginia    50
Glenrio, Texas             1
Glenrio, New Mexico        1
Bulowville, Florida        60
</code></pre>
<p>I know I need to do something along the lines of:</p>
<pre class=""lang-py prettyprint-override""><code>OpenFile = open( Population.txt', 'r')

for EachLine in OpenFile:
    Split = EachLine.strip.split(&quot;   &quot;)
    #some sort of append to a list but with the first part of split in one list and the number
    # nested in that  list

OpenFile.close()
</code></pre>
","1","Question"
"78416193","","<p>I'm trying to sort a list after <code>zip</code>.</p>
<p><code>list_sort = zip(l1, l2)</code></p>
<pre><code>l1 = ['F2', 'G2', 'A10', 'H2', 'A3', 'E3', 'B10', 'C1', 'D1', 'E1', 'D2', 'C11', 'A1']
l2 = [40, 40, 90, 90, 90, 90, 90, 120, 120, 120, 120, 120, 90]
</code></pre>
<p>I'm looking to sort l1 in this order:</p>
<p><code>l1 = ['A1', 'C1', 'D1', 'E1', 'D2', 'F2', 'G2', 'H2', 'A3', 'E3', 'A10', 'B10', 'C11']</code></p>
<p><code>l2</code> will sort with <code>l1</code>.</p>
<p><code>l2 = [90, 120, 120, 120, 120, 40, 40, 90, 90, 90, 90, 90, 120]</code></p>
<p>What I have tried:</p>
<pre><code>list(sorted(list_sort, key=lambda item: (item[0][1], item[0][1:0])))
</code></pre>
","0","Question"
"78416349","","<p>I have a string variable in python and I need to extract all portions that begins and ends with specific strings.</p>
<p>The beginning string is &quot;proc sql&quot; and ending string is &quot;quit;&quot; all lines in between should be extracted to a list;</p>
<pre><code>row ='''proc sql;
        create table answer_1_stg1 as 
        select  distinct a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc
                ,sum(b.invoice_qty) as sum_invoice
                ,avg(b.invoice_qty) as avg_invoice
                ,max(b.invoice_qty) as max_invoice
                ,min(b.invoice_qty) as min_invoice
        from promo as a
        left join invoice as b
        on 
        a.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and
        a.basecode=b.basecode and
        a.SALESORG_CD=b.SALESORG_CD and
        a.LOCATION_CD=b.LOCATION_CD
        and b.INVOICE_DT between a.event_start_dt and a.event_end_dt
        where year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017
        group by a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc;
        quit;
        
%sort(answer_1_stg1,descending sum_invoice);

proc sql;
create table answer_1_stg2 as
select distinct promo_mechanic_desc
        ,sum(sum_invoice) as total
from answer_1_stg1;
quit;'''
</code></pre>
<p>I need to extract the portions only between two strings, &quot;proc sql&quot; and &quot;quit&quot;. The final list should be like this:</p>
<pre><code>lt = ['''proc sql;
        create table answer_1_stg1 as 
        select  distinct a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc
                ,sum(b.invoice_qty) as sum_invoice
                ,avg(b.invoice_qty) as avg_invoice
                ,max(b.invoice_qty) as max_invoice
                ,min(b.invoice_qty) as min_invoice
        from promo as a
        left join invoice as b
        on 
        a.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and
        a.basecode=b.basecode and
        a.SALESORG_CD=b.SALESORG_CD and
        a.LOCATION_CD=b.LOCATION_CD
        and b.INVOICE_DT between a.event_start_dt and a.event_end_dt
        where year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017
        group by a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc;
        quit;''','''proc sql;
create table answer_1_stg2 as
select distinct promo_mechanic_desc
        ,sum(sum_invoice) as total
from answer_1_stg1;
quit;''']
</code></pre>
<p>I've tried to run the following code, however it only prints the first each line to the list:</p>
<pre><code>fm = []

for i in row.split('\n'):
    if &quot;proc sql&quot; in i:
        print()
        fm.append(i.strip())
</code></pre>
","-4","Question"
"78425770","","<p>I have a project that has success criteria that is being stored in xml format, and then it gets compared with log data to determine if a build is successful.  The xml contents is currently like this, but unfortunately I can't loop through the contents to send to my parse log contents because the lists are anonymous types:</p>
<pre><code>var results1 =
xmlDoc2.Descendants(&quot;build&quot;)
.SelectMany(b =&gt; b.Descendants(&quot;Process&quot;)
.Select(p =&gt; new
{
    buildMach = b.Element(&quot;BuildMachine&quot;).Value,
    p1 = p.Element(&quot;ProcessName&quot;).Value,
    startTimeHeader = p.Element(&quot;startTimeHeader&quot;).Value,
    conditions = p.Descendants(&quot;Condition&quot;)
        .Select(c =&gt; new
        {
            cName = (string)c.Attribute(&quot;name&quot;)?.Value,
            cValue = (string)c.Attribute(&quot;value&quot;)?.Value
        })
        .ToList(),
    successCriteria = p.Descendants(&quot;SuccessCriteria&quot;)
        .Select(sc =&gt; new
        {
            f1 = (string)sc.Element(&quot;field&quot;)?.Value,
            c1 = (string)sc.Element(&quot;comparison&quot;)?.Value,
            v1 = (string)sc.Element(&quot;value&quot;)?.Value
        })
        .ToList()
})).ToList();

//send to parse log method but need to find better way to get lists so not anonymous...this doesn't work:
foreach (var currentItem in results1)
{
   //string parameters except the list parameters preceded by l_
   ParseLogFile1(codeFreezeTime, currentItem.startTimeHeader, currentItem.buildMach, currentItem.p1, l_currentItem.conditions, l_currentItem.successCriteria);
}
</code></pre>
<p>I have new classes to try and accomplish that, and I'm trying to figure out how to use them with the above.  I was looking at <a href=""https://stackoverflow.com/questions/7363730/linq-on-a-nested-list-select-all-ids"">linq using classes</a>, but I'm not clear on how to get my data from the xml to read into the named classes so I can then access it and send to my parse log method.</p>
<p>If you want to see what the xml looks like, please see <a href=""https://stackoverflow.com/questions/78421023/reading-xml-into-linq-format-to-check-against-log-file-data-conditions-in-list?noredirect=1#comment138255551_78421023"">xml in previous question</a> etc.</p>
<p>Here's the class info I want to use:</p>
<pre><code>SuccessCriterium.cs:
public class SuccessCriterium
{
   public SuccessCriterium()
      List&lt;SuccessCriteria&gt; successCriteria = new List&lt;SuccessCriteria&gt;();
}

SuccessCriteria.cs:
public class SuccessCriteria
{
    public SuccessCriteria()
    {
        string f1 = &quot;&quot;;
        string c1 = &quot;&quot;;
        string v1 = &quot;&quot;;
    }
}

Condition.cs:
public class Condition
{
    public Condition()
    {
        string cName = &quot;&quot;;
        string cValue = &quot;&quot;;
    }
}

Conditions.cs:
public class Condition
{
    public Condition()
    {
        List&lt;Condition&gt; conditions = new List&lt;Condition&gt;();
    }
}

public class ProcessValidationInfo
{
    public ProcessValidationInfo()
    {
        string codeFreezeTime = &quot;&quot;;
        string startTimeHeader = &quot;&quot;;
        string buildMach = &quot;&quot;;
        string p1 = &quot;&quot;;
        Conditions conditions = new Conditions();
        SuccessCriterium successCriterium = new SuccessCriterium();
    }
}
</code></pre>
<p>My question is how do I store the xml obtained from the LINQ in the classes so it's not anonymous when I loop through the results later to send the info to my method?</p>
","0","Question"
"78430579","","<pre class=""lang-ml prettyprint-override""><code>let stringList = [&quot;one&quot;; &quot;two&quot;; &quot;three&quot;]
</code></pre>
<p>How do I print stringList in F#?</p>
<pre class=""lang-ml prettyprint-override""><code>let stringList = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]

let function2() =
  for i in 2 .. 3 do
    printf &quot; &quot;
  printfn &quot;i&quot;
function2()
</code></pre>
<p>I was expecting: &quot;one&quot;, &quot;two&quot;, &quot;three&quot;</p>
","0","Question"
"78431760","","<p>With Python, I want to crawl information of publicly-listed companies' executive holding details from the Internet. So I first create the full list of stock codes (with numbers only) called target_list_onlynumber, which looks like this: <a href=""https://i.sstatic.net/E4zEFDvZ.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/E4zEFDvZ.png"" alt=""20240505 A"" /></a></p>
<p>Here's the website I try to crawl data from: <a href=""https://data.eastmoney.com/executive/000001.html"" rel=""nofollow noreferrer"">https://data.eastmoney.com/executive/000001.html</a>. It corresponds to the stock code &lt;000001&gt;. For stock with code number i, the corresponding website is <a href=""https://data.eastmoney.com/executive/i.html"" rel=""nofollow noreferrer"">https://data.eastmoney.com/executive/i.html</a> And by performing the following code, I am able to get the dataframe I want:</p>
<pre><code>df = pd.DataFrame(
    requests.get('https://datacenter-web.eastmoney.com/api/data/v1/get?reportName=RPT_EXECUTIVE_HOLD_DETAILS&amp;columns=ALL&amp;filter=(SECURITY_CODE%3D&quot;000001&quot;)')\
        .json().get('result').get('data'))
print(df)
</code></pre>
<p>The resulting dataframe looks like this: <a href=""https://i.sstatic.net/pBOabHpf.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/pBOabHpf.png"" alt=""20240505 B"" /></a></p>
<p>Now I want to write a for-loop to get all DataFrames of all stocks whose code numbers lie in the list of target_list_onlynumber. df_i is the DataFrame of stock with code number i. (for example, df_601857 is the DataFrame of stock with code number 601857.) Here's what I tried, which is similar to the previous code for stock &lt;000001&gt;:</p>
<pre><code>df_list = []
for i in target_list_onlynumber:
    exec_data = requests.get('https://datacenter-web.eastmoney.com/api/data/v1/get?reportName=RPT_EXECUTIVE_HOLD_DETAILS&amp;columns=ALL&amp;filter=(SECURITY_CODE%3D&quot;{i}&quot;)')\
        .json().get('result').get('data')
    df_i = pd.DataFrame(exec_data)
    df_list.append(df_i)
    print(df_i)
</code></pre>
<p>But the outcome is:</p>
<pre><code>Traceback (most recent call last):
  File &quot;/tmp/jqcore/jqboson/jqboson/core/entry.py&quot;, line 379, in _run
    engine.start()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/engine.py&quot;, line 231, in start
    self._dispatcher.start()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/dispatcher.py&quot;, line 280, in start
    self._run_loop()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/dispatcher.py&quot;, line 240, in _run_loop
    self._loop.run()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/loop/loop.py&quot;, line 107, in run
    self._handle_queue()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/loop/loop.py&quot;, line 153, in _handle_queue
    message.callback(**message.callback_data)
  File &quot;/tmp/jqcore/jqboson/jqboson/core/mds/market_data_subscriber.py&quot;, line 228, in broadcast
    consumer.send(market_data)
  File &quot;/tmp/jqcore/jqboson/jqboson/core/mds/market_data_consumer_manager.py&quot;, line 59, in   consumer_gen
    msg_callback()
  File &quot;/tmp/jqcore/jqboson/jqboson/core/mds/market_data_consumer_manager.py&quot;, line 52, in  msg_callback
    callback(market_data)
  File &quot;/tmp/jqcore/jqboson/jqboson/core/mds/market_data_consumer_manager.py&quot;, line 122, in wrapper
    result = callback(*args, **kwargs)
  File &quot;/tmp/jqcore/jqboson/jqboson/core/strategy.py&quot;, line 474, in _wrapper
    self._context.current_dt
  File &quot;/tmp/strategy/user_code.py&quot;, line 90, in handle_data
    .json().get('result').get('data')
AttributeError: 'NoneType' object has no attribute 'get'
</code></pre>
<p>I don't understand why the code for one stock succeeds and the for-loop fails. Can someone help me fix it please?</p>
","0","Question"
"78432995","","<pre class=""lang-py prettyprint-override""><code>another_list = [1, 2, 3, 4, 5, 6]
my_list = ['a', 'b', 'c', 'd', 'e', 'f']
    
output_list = [another_list[i] if i % 2 == 0 else my_list[i] for i in range(6)]
print(output_list)
</code></pre>
<p>This code is perfectly working. Is there any other direct method without using for loops, like slicing functions?</p>
<p>I tried the above method.</p>
","-2","Question"
"78436028","","<p>I have derived a class &quot;ListOfT&quot; from <code>List&lt;T&gt;</code> to have a place to put function that operate on a list of T.</p>
<p>I have a function that iterates over the list and should return a sub-list of T using Linq:</p>
<pre><code>public class ListOfT : List&lt;T&gt; 
{
  //no explicit constructor
  //other functions to work on this list of T's ...

  public ListOfT GenerateSubList()
  {
    return this.Where(t =&gt; t.SomeCriteria).ToList(); // &lt;- compiler will complain

    return (ListOfT) this.Where(t =&gt; t.SomeCriteria).ToList(); // &lt;- compiler is ok, but I get a runtime error
  }
}
</code></pre>
<p>The compiler now complains that it can't cast <code>List&lt;T&gt;</code> to ListOfT. Obviously the call to &quot;ToList()&quot; will generate a new <code>List&lt;T&gt;</code>, but I would like to have something that creates an Instance of <code>ListOfT</code>.</p>
<p>I have tried an explicit cast (which will pacify the compiler), but that will lead to a runtime error.</p>
<p>Is there an elegant way to perform this cast (or replace the ToList() call)?</p>
<hr />
<p><strong>Solution</strong> (see @SomeBody's answer):
Thank you all for your kind comments and proposed solutions. Instead of commenting on each of them I will try to summarize it here:</p>
<pre><code>public class ListOfT : List&lt;T&gt; 
{
  //public constructor
  public ListOfT() {}

  //hidden constructor to create a ListOfT from an enumerable
  private ListOfT(IEnumerable&lt;T&gt; subList) 
            : base(subList) { }
  
  public ListOfT GenerateSubList()
  {
    //using linq to create an enumerator that gets 
    //passed to the hidden constructor
    return new ListOfT(this.Where(t =&gt; t.SomeCriteria));
  }
}
</code></pre>
<p>Maybe I should have used <code>SomeClass</code> instead of <code>T</code> in my question to clarify that the <code>ListOfT</code> class is a concrete instance of <code>List&lt;T&gt;</code> using <code>SomeClass</code> as <code>T</code>, not a template class in itself.</p>
<p>@Tim Schmelter: The <code>t.SomeCriteria</code> part was to indicate that each instance of <code>T</code> contained in the list has a property that I want to test to have it included in the sub list. Thanks for the link to <a href=""https://stackoverflow.com/questions/21692193/why-not-inherit-from-listt"">Why not to inherit from <code>List&lt;T&gt;</code></a>, i was reading through it while waiting for answers. See my comments below regarding the &quot;has&quot; vs. &quot;is&quot;.</p>
<p>Also (@Rookie), yes, the new list returned by <code>GenerateSubList()</code> will not contain copies of the original elements, but references to the original <code>T</code>'s stored in the instance of ListOfT I call the <code>GenerateSubList()</code> on. This is intended.</p>
<p>@Oren Tamam and @Fildor: I did not go down the <strong>&quot;has&quot;</strong> route instead of <strong>&quot;Is&quot;</strong>, as this would have required me to implement the <code>IList&lt;T&gt;</code> interface. As @Tim mentioned above, there is a lengthy discussion as to why not to use classes derived from <code>List&lt;T&gt;</code>. Personally, I think it is a nice way to have functions that operate on a certain type of list in one place. In my opinion, the difference between <strong>has</strong> and <strong>is</strong> boils down to a personal choice and the scenario you are using it in.</p>
<p>@Ralf mentioned <strong>extension methods</strong> as another way to &quot;enhance&quot; a concrete type of list. I have used them in some places where I had a class hierarchy where each descendant needed to be &quot;listed&quot;. In that case, the static class containing the extensions was a nice way to have all list-related functions of my zoo of classes in one place.</p>
","-2","Question"
"78442754","","<p>I have problem with my code specifically the for loop, where i search for the smallest and largest number in my list. It stops comparing a[i] with the current smallest or largest number at some point.
I tried it with the input 23,34,68,3,566,2,1</p>
<pre><code> largest = None
    smallest = None
    a = []
    while True:
        num = input(&quot;Enter a number: &quot;)
        if num == &quot;done&quot;:
            break
        try:
            FailureCond = int(num)
        except ValueError:
            print(&quot;that's not a number&quot;)
            continue
        a.append(num)
        continue

    for i in range(len(a)):

        if smallest is None:
            smallest = a[i]
            largest = a[i]

        if a[i] &lt; smallest:
            smallest = a[i]

        if a[i] &gt; largest:
            largest = a[i]


    print(&quot;current list &gt;&quot;,a)
    print(&quot;the smallest number is &gt;&quot;,smallest)
    print(&quot;largest number is &gt;&quot;,largest)

</code></pre>
<p>the output is</p>
<pre><code>current list &gt; ['23', '34', '68', '3', '566', '2', '1']
the smallest number is &gt; 1
largest number is &gt; 68
</code></pre>
<p>i tried printing every step of the loop, but i can't seem to find the mistake</p>
","0","Question"
"78443220","","<p>I have a data dictionary and a column_list. I want to replace the value in the column_list with its matching value from the data dictionary. I have written the below code; however, I'm unable to get the required output.
Can someone please help to fix the overlapping values?</p>
<pre><code>col_list = ['eff_strt_dte', 'eff_sta_dt', 'birth_dt', 'cus_idr', 'cust_id']
data_dict = {'eff': 'effective', 'dt': 'date', 'dte': 'date', 'str': 'start', 'cus': 'customer', 'cust': 'customer', 'id':'identifier', 'idr': 'identifier', 'sta': 'start'}

new_list = []
for col in col_list:
    for key, value in data_dict.items():
        if key in col:
            col = col.replace(key, value)
    new_list.append(col)
print(new_list)
</code></pre>
<p>Expected output is:
<code>['effective_start_date', 'effective_start_date', 'birth_date', 'customer_identifier', 'customer_identifier']</code></p>
<p>Output I'm getting now: <code>['effective_startt_datee', 'effective_sta_date', 'birth_date', 'customeromer_identifierr', 'customeromert_identifier']</code></p>
","0","Question"
"78447815","","<p>I found <a href=""https://stackoverflow.com/questions/68953626/r-how-to-setnames-to-list-objects-and-sub-objects"">this question</a> but it does not seem to work for me.</p>
<p>The task is simple. I have a list like the following, obtained from a data frame, and I want to <code>setNames</code> for the subelements:</p>
<pre><code>mydf &lt;- data.frame(Patient=rep(paste0('Pat', 1:3), 2), Cycle=rep(paste0('C', 1:2), each=3))
mylist &lt;- sapply(mydf, unique)
</code></pre>
<p>The list looks like:</p>
<pre><code>&gt; mylist
$Patient
[1] &quot;Pat1&quot; &quot;Pat2&quot; &quot;Pat3&quot;

$Cycle
[1] &quot;C1&quot; &quot;C2&quot;
</code></pre>
<p>The only thing I want to do is to <code>setNames</code> for the subelements, so that they include the element name, resulting into this final list:</p>
<pre><code>&gt; mylist
$Patient
Patient-Pat1 Patient-Pat2 Patient-Pat3 
      &quot;Pat1&quot;       &quot;Pat2&quot;       &quot;Pat3&quot; 

$Cycle
Cycle-C1 Cycle-C2 
    &quot;C1&quot;     &quot;C2&quot; 
</code></pre>
<p>Now I could go through the elements one by one like this:</p>
<pre><code>mylist[[1]] &lt;- setNames(mylist[[1]], paste(names(mylist)[1], mylist[[1]], sep='-'))
mylist[[2]] &lt;- setNames(mylist[[2]], paste(names(mylist)[2], mylist[[2]], sep='-'))
...
</code></pre>
<p>But I do not want that, since the list can have <strong>variable number of elements and subelements with different names</strong> (this would go into a function that takes in different initial data frames).</p>
<p>Which would be the best way to accomplish this, preferably with <code>apply</code> functions?</p>
<p>My best attempt:</p>
<pre><code>sapply(mylist, setNames, paste(names(mylist), mylist, sep='-'))
</code></pre>
","3","Question"
"78450114","","<p>I am attempting to sum the number of atoms for each element in the <code>chemical_formula</code> vector:</p>
<pre><code>chemical_formula &lt;- c(&quot;CaF2&quot;, &quot;Ca3(PO4)2&quot;, &quot;FePO4&quot;, &quot;KCl&quot;, &quot;K3PO4&quot;, &quot;K2SO4&quot;, &quot;Mg3(PO4)2&quot;, &quot;NaCl&quot;,
&quot;Na3PO4&quot;, &quot;Na2SO4&quot;, &quot;SiO2&quot;, &quot;CaSO4&quot;, &quot;KAsO2&quot;, &quot;KBr&quot;, &quot;KI&quot;, &quot;LiCl&quot;, &quot;MnSO4&quot;, &quot;CaS&quot;, &quot;CuAsHO3&quot;,
&quot;AlK(SO4)2&quot;, &quot;(H2O)12&quot;, &quot;ZnCl2&quot;, &quot;CaCO3&quot;, &quot;NaHCO3&quot;, &quot;AsI3&quot;, &quot;AuCl4Na&quot;, &quot;Se&quot;, &quot;K2Cr2O7&quot;)
</code></pre>
<pre><code>cell_salts_atoms &lt;- CHNOSZ::makeup(chemical_formula)

# &gt; CHNOSZ::makeup(chemical_formula)
# [[1]]
# Ca  F 
#  1  2 
# 
# [[2]]
# Ca  O  P 
#  3  8  2 
# 
# [[3]]
# Fe  P  O 
#  1  1  4 
# 
# [[4]]
#  K Cl 
#  1  1 
# 
# [[5]]
# K P O 
# 3 1 4 
# 
# [[6]]
# K S O 
# 2 1 4 
# 
# [[7]]
# Mg  O  P 
#  3  8  2 
# 
# [[8]]
# Na Cl 
#  1  1 
# 
# [[9]]
# Na  P  O 
#  3  1  4 
# 
# [[10]]
# Na  S  O 
#  2  1  4 
# 
# [[11]]
# Si  O 
#  1  2 
# 
# [[12]]
# Ca  S  O 
#  1  1  4 
# 
# [[13]]
#  K As  O 
#  1  1  2 
# 
# [[14]]
#  K Br 
#  1  1 
# 
# [[15]]
# K I 
# 1 1 
# 
# [[16]]
# Li Cl 
#  1  1 
# 
# [[17]]
# Mn  S  O 
#  1  1  4
# 
# [[18]]
# Ca  S
#  1  1
# 
# [[19]]
# Cu As  H  O
#  1  1  1  3
# 
# [[20]]
# Al  K  O  S
#  1  1  8  2
# 
# [[21]]
#  H  O
# 24 12
# 
# [[22]]
# Zn Cl
#  1  2
# 
# [[23]]
# Ca  C  O
#  1  1  3
# 
# [[24]]
# Na  H  C  O
#  1  1  1  3
# 
# [[25]]
# As  I
#  1  3
# 
# [[26]]
# Au Cl Na
#  1  4  1
# 
# [[27]]
# Se
#  1
# 
# [[28]]
#  K Cr  O
#  2  2  7
</code></pre>
<pre><code>cell_salts_atoms_matrix &lt;- lapply(cell_salts_atoms, as.matrix)

# &gt; cell_salts_atoms_matrix
# [[1]]
#    [,1]
# Ca    1
# F     2
# 
# [[2]]
#    [,1]
# Ca    3
# O     8
# P     2
# 
# [[3]]
#    [,1]
# Fe    1
# P     1
# O     4
# 
# [[4]]
#    [,1]
# K     1
# Cl    1
# 
# [[5]]
#   [,1]
# K    3
# P    1
# O    4
# 
# [[6]]
#   [,1]
# K    2
# S    1
# O    4
# 
# [[7]]
#    [,1]
# Mg    3
# O     8
# P     2
# 
# [[8]]
#    [,1]
# Na    1
# Cl    1
# 
# [[9]]
#    [,1]
# Na    3
# P     1
# O     4
# 
# [[10]]
#    [,1]
# Na    2
# S     1
# O     4
# 
# [[11]]
#    [,1]
# Si    1
# O     2
# 
# [[12]]
#    [,1]
# Ca    1
# S     1
# O     4
# 
# [[13]]
#    [,1]
# K     1
# As    1
# O     2
# 
# [[14]]
#    [,1]
# K     1
# Br    1
# 
# [[15]]
#   [,1]
# K    1
# I    1
# 
# [[16]]
#    [,1]
# Li    1
# Cl    1
# 
# [[17]]
#    [,1]
# Mn    1
# S     1
# O     4
# 
# [[18]]
#    [,1]
# Ca    1
# S     1
# 
# [[19]]
#    [,1]
# Cu    1
# As    1
# H     1
# O     3
# 
# [[20]]
#    [,1]
# Al    1
# K     1
# O     8
# S     2
# 
# [[21]]
#   [,1]
# H   24
# O   12
# 
# [[22]]
#    [,1]
# Zn    1
# Cl    2
# 
# [[23]]
#    [,1]
# Ca    1
# C     1
# O     3
# 
# [[24]]
#    [,1]
# Na    1
# H     1
# C     1
# O     3
# 
# [[25]]
#    [,1]
# As    1
# I     3
# 
# [[26]]
#    [,1]
# Au    1
# Cl    4
# Na    1
# 
# [[27]]
#    [,1]
# Se    1
# 
# [[28]]
#    [,1]
# K     2
# Cr    2
# O     7

</code></pre>
<p>I want the result to resemble the following:</p>
<pre><code>Se 1
Au 1
As 2
Ca 6
</code></pre>
<p>I have tried <code>cell_salts_atoms_sum &lt;- lapply(cell_salts_atoms, sum)</code>; however, that only provides the total sum for each list element rather than sum of each named component.</p>
<p>What's the best method to produce the desired result?</p>
<p><strong>UPDATE</strong></p>
<p>The structure of the result does not matter, I just wanted a sum of the atoms.</p>
<p>Thus,</p>
<pre><code>Se   Au   As   Ca
1    1    2    6
</code></pre>
<p>is also acceptable.</p>
","1","Question"
"78453805","","<p>I have got some line of</p>
<pre><code>requestParams.OutParamList = new List&lt;ParamsList&gt;() {
    new ParamsList() {Name = OutParamName}
};
</code></pre>
<p>I found this code from my solution and did not understand how it's working and basic syntax of this code writing</p>
","0","Question"
"78458216","","<p>I am currently attempting to answer the question Add Two Numbers from leetcode, my solution seems to function as I expect however in cases where my final carry int is needed it is not added to the end of my list in the final if statement.</p>
<pre><code>class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* ans = l1;
        while(l1 || l2){
            if(l1 == nullptr) l1 = new ListNode();
            if(l1 == nullptr &amp;&amp; l2){
                l1 -&gt; val = (l2 -&gt; val + carry) % 10;
                carry = (carry + l2 -&gt; val) / 10;
                l2 = l2 -&gt; next;
            }else if(l2 == nullptr &amp;&amp; l1){
                int tempL1Val = l1 -&gt; val;
                l1 -&gt; val = (l1 -&gt; val + carry) % 10;
                carry = (carry + tempL1Val) / 10;
            }else{
                int tempL1Val = l1 -&gt; val;
                l1 -&gt; val = (l1 -&gt; val + l2 -&gt; val + carry) % 10;
                carry = (tempL1Val + l2 -&gt; val + carry) / 10;
                l2 = l2 -&gt; next;
            }
            l1 = l1 -&gt; next;
        }
        
        if(carry){
            l1 = new ListNode();
            l1 -&gt; val = carry;
        } 
        return ans;
    }
};
</code></pre>
<p>Testcases where it fails:</p>
<pre><code>l1 = [9,9,9,9,9,9,9]
l2 = [9,9,9,9]
output = [8,9,9,9,0,0,0]
expected_output = [8,9,9,9,0,0,0,1]

</code></pre>
<p>I have checked before and after and the new node does exist, however it is not being added to my list when I run the code.</p>
","-2","Question"
"78465014","","<p>Lets say I have a column named structures which is a list of structs containing &quot;a&quot; and &quot;b&quot; inside of each. I want to avoid using explodes and such as my data structure is quite complex (and quite big), I want to work as much as possible with the lists alone.</p>
<pre class=""lang-py prettyprint-override""><code>
    # Create a list of lists of structures
    list_of_structs = [
        [{&quot;a&quot;:1, &quot;b&quot;: 2}, {&quot;a&quot;:3, &quot;b&quot;: 4}, {&quot;a&quot;:5, &quot;b&quot;: 4}]
    ]

    # Create a DataFrame from the list of lists
    df = pl.DataFrame({&quot;structures&quot;: list_of_structs})
</code></pre>
<p>My expected result would be a list of lists grouped by B</p>
<pre><code>    [[(a1, b2)], [[(a3,b4)], (a5, b4)]] 
</code></pre>
<p>I want to perform some kind of &quot;group all elements by B&quot; (and then agg using concat_list), in spark the code (see how I reference X and Y) looks like this:</p>
<pre class=""lang-py prettyprint-override""><code>
    arrays_grouped = F.array_distinct(
            F.transform(
                F.col(&quot;structures&quot;),
                lambda x: (
                    F.filter(F.col(&quot;structures&quot;),
                        lambda y: x.field(&quot;b&quot;) == y.field(&quot;b&quot;)
                    )
                ),
            )
        )
</code></pre>
<p>However in polars I can only see eval operator. <a href=""https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.Expr.list.eval.html#polars.Expr.list.eval"" rel=""nofollow noreferrer"">https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.Expr.list.eval.html#polars.Expr.list.eval</a>.
However I can't reference anything apart from pl.element() from outside the eval, so I'm quite stuck.</p>
<p>Do I need to implement this in plugins or there's a way with the provided API? This is my existing approach which does not work (probably influenced because I have been working quite long time with Spark functions).</p>
<pre class=""lang-py prettyprint-override""><code>    df = df.with_columns(
            #Gets all unique &quot;b&quot;
            pl.col(&quot;structures&quot;).list.eval(
                pl.element().struct.field(&quot;b&quot;)
            #Tries to filter structures all unique &quot;b&quot;
            ).list.unique().list.eval(
                pl.struct(
                    base:= pl.element(), 
                    df.get_column(&quot;structures&quot;).list.eval(
                        #Idk what this base value is, but its not filtering, if I replace it by hardcoded-4 it does filter 4s correctly
                        pl.element().filter(pl.element().struct.field(&quot;b&quot;) == base)
                    )
                )
            )
    )
</code></pre>
<p>I think something might be doable with gather, but I'm struggling to even start using it, as I can't find the indices to gather (similar issue to eval)</p>
","0","Question"
"78467266","","<p>I am exploring Pandas filter and while doing so I came across this error while using the below query</p>
<pre><code>df2.filter(like = ['Republic','United'], axis=0 )
</code></pre>
<p>How do I provide a list in Like parameter in <code>filter</code>?</p>
<p>I tried giving a data without list, it was working but the data with a list is not working.</p>
<p>I was expecting a filter result with the items mentioned in the list</p>
","0","Question"
"78468915","","<p>I am storing objects of base and derives classes (Account, StudentAccount, EmployeeAccount) in an STL list and process them with STL Iterator. The dynamic polymorphic behavior of objects is not happening. After reading few post at this forum, it &quot;seems&quot; to me (since i am not much able to understand deep tech reasons) polymorphic behavior in STL list is not possible. I wanted to know if polymorphic behavior is not possible, what's the work around? If my perception is incorrect, please share a link or code sample. I am stuck in middle of a prototype. Below is the major code portion:
(using Visual Studio 2022 with ISO C++ 14, console application)</p>
<pre><code>list&lt;Account&gt;* log = new list&lt;Account&gt;();  // in constructor

bool Bank::add(const Account&amp; acc)
{
    // do some checking here
    this-&gt;log-&gt;push_back(Account(acc));
    return true;
}

bool Bank::addAccount(...parameter here...)
{
    return this-&gt;add(Account(...parameter here...));
}

bool Bank::addStudentAccount(...parameter here...)
{
    return this-&gt;add(StudentAccount(...parameter here...));
}
</code></pre>
","-1","Question"
"78472798","","<p>I'm aiming to print a string, for example 'test', after the 'content' using python, but i have no idea how to do it. I already tried many pages talking about this, but nothing work.</p>
<p><code>mensagemmm = [ </code></p>
<p><code>{'isUser': True,},  </code></p>
<p><code>{'isVerified': None,},  </code></p>
<p><code>{'isWAContact': True,},  </code></p>
<p><code>{'profilePicThumbObj': None,},  </code></p>
<p><code>{'content': 'Test',},  </code></p>
<p><code>{'quotedMsgId': None,} </code></p>
<p><code>]</code></p>
<p>I already did try most of pages at google, using:</p>
<p>for i in mensagemmm...</p>
","-3","Question"
"78476447","","<p>Considering element-wise add / subtract / multiply / divide operation in two lists. I have the code as follows.</p>
<pre><code>public class Calculate
{
    public static IEnumerable&lt;T&gt; Add&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2)
    {
        return input1.Zip(input2, (first, second) =&gt; (dynamic)first + (dynamic)second).Cast&lt;T&gt;();
    }

    public static IEnumerable&lt;T&gt; Subtract&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2)
    {
        return input1.Zip(input2, (first, second) =&gt; (dynamic)first - (dynamic)second).Cast&lt;T&gt;();
    }

    public static IEnumerable&lt;T&gt; Multiply&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2)
    {
        return input1.Zip(input2, (first, second) =&gt; (dynamic)first * (dynamic)second).Cast&lt;T&gt;();
    }

    public static IEnumerable&lt;T&gt; Divide&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2)
    {
        return input1.Zip(input2, (first, second) =&gt; (dynamic)first / (dynamic)second).Cast&lt;T&gt;();
    }

}
</code></pre>
<p>Tests</p>
<pre><code>List&lt;double&gt; doubles = new List&lt;double&gt;();
for (int i = 0; i &lt; 10; i++)
{
    doubles.Add((double)i);
}
foreach (var element in Calculate.Add(doubles, doubles))
{
    Console.WriteLine(element.ToString());
}
</code></pre>
<p>It just works, but dealing with <code>dynamic</code>, I am wondering if it is the right way to do it? Is the code generic enough?</p>
","2","Question"
"78478686","","<p>I want to create an fixed size list in java, according to my searchings &amp; readings from the internet i couldn't find that feature in java, However i want to create a fixed size list with 100 elements, when i want to add a new item it should remove 100th element, then adjust the index like this (99th element becomes the 100th element now(Indexes only)) and then my new element should add to the first index.</p>
<p>How to do such a thing in java?</p>
","-2","Question"
"78480671","","<pre><code>def calculate_total_sum(arr):
    # Your code here
    sum=0
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            sum=sum+arr[i][j]
    print(sum)

list1=[int(x) for x in input().split()]
calculate_total_sum(list1)
</code></pre>
<p>getting the error while I am running my code - <code>unsupported operand type(s) for +: 'int' and 'str'</code></p>
","0","Question"
"78483518","","<p>How can I split this list by Type so they separate type A from Type B?</p>
<pre><code>List&lt;List&lt;TestData&gt;&gt; DatabaseList = new List&lt;List&lt;TestData&gt;&gt;();
List&lt;TestData&gt; DatabaseList1 = new List&lt;TestData&gt;();
List&lt;TestData&gt; DatabaseList2 = new List&lt;TestData&gt;();
List&lt;TestData&gt; DatabaseList3 = new List&lt;TestData&gt;();



DatabaseList1.Add(new TestData { Balance = 10, Name = &quot;Data1 1&quot;, Type = &quot;A&quot; });
DatabaseList1.Add(new TestData { Balance = 20, Name = &quot;Data1 2&quot;, Type = &quot;A&quot; });
DatabaseList1.Add(new TestData { Balance = 30, Name = &quot;Data1 3&quot;, Type = &quot;B&quot; });

DatabaseList2.Add(new TestData { Balance = 100, Name = &quot;Data2 1&quot;, Type = &quot;A&quot; });
DatabaseList2.Add(new TestData { Balance = 200, Name = &quot;Data2 2&quot;, Type = &quot;A&quot; });
DatabaseList2.Add(new TestData { Balance = 300, Name = &quot;Data2 3&quot;, Type = &quot;B&quot; });

DatabaseList3.Add(new TestData { Balance = 1000, Name = &quot;Data3 1&quot;, Type = &quot;A&quot; });
DatabaseList3.Add(new TestData { Balance = 2000, Name = &quot;Data3 2&quot;, Type = &quot;A&quot; });
DatabaseList3.Add(new TestData { Balance = 3000, Name = &quot;Data3 3&quot;, Type = &quot;B&quot; });

DatabaseList.Add(DatabaseList1);
DatabaseList.Add(DatabaseList2);
DatabaseList.Add(DatabaseList3);
</code></pre>
<p>EDITs: I tried this:</p>
<pre><code>var dat1 = DatabaseList.Select(a =&gt; a.Where(c=&gt;c.Type == &quot;A&quot;)).ToList();
var dat2 = DatabaseList.Select(a =&gt; a.Where(c=&gt;c.Type == &quot;B&quot;)).ToList();
</code></pre>
<p>But it is two separate lists could it be in : List&lt;List&lt;List&gt;&gt; SplitList = new List&lt;List&lt;List&gt;&gt;();</p>
","-1","Question"
"78486788","","<p>I have a for loop with an if statement checking if the current character in 'phrase' is equal to a character in 'dictator[column]' and if it is, it will append the position of a character to a global list 'listY' but every time it tries to append the value of 'column' to 'listY', it overwrites the value that was previously there.</p>
<p>This is the current code for the first part of the code that finds the X and Y of a character in the list 'encryptionTable':</p>
<pre><code>def findCypherP1():
    a = 0 # length of phrase to encrypt (cypher phrase)
    column = 0 # length of encryption section (shuffled alphabet)
    row = 0
    dictator = encryptionTable[0] # first row of the alphabet
    for p in range(len(phrase) * len(dictator)):
        global listY
        listY = []
        if phrase[a] == dictator[column]:
            print(&quot;Column containing cypher Y:&quot;, str(column+1))
            column2 = column
            listY.append(column2)
            a += 1; column = 0
        if a &gt;= len(phrase):
            print(listY)
            break
        else:
            column += 1
</code></pre>
<p>What happens when I run the code is it correctly returns the X value of the characters</p>
<pre><code>Column containing cypher Y: 1
Column containing cypher Y: 11
Column containing cypher Y: 12
Column containing cypher Y: 19
Column containing cypher Y: 3
[2]
</code></pre>
<p>But then when it appends 'column' to 'listY', it overwrites the previous value, I've tried making a copy of the int 'column' but it only works on lists. If you could help solve this problem, that would be great! Thank you!</p>
","-1","Question"
"78490659","","<p>I have a list with duplicate dictionaries based on the &quot;id&quot; key. I want to merge the sublist in the dictionary and create 1 dictionary out of the 2.</p>
<p>Ive tried a few things but my python skills are a bit rusty</p>
<pre><code>[
  {
   &quot;id&quot;: &quot;1&quot;
   &quot;sublist&quot;: [
     {
       &quot;key&quot;:&quot;1&quot;
     }
   ]
  },
  {
   &quot;id&quot;: &quot;1&quot;
   &quot;sublist&quot;: [
     {
       &quot;key&quot;:&quot;2&quot;
     }
   ]
  },
  {
   &quot;id&quot;: &quot;2&quot;
   &quot;sublist&quot;: [
     {
       &quot;key&quot;:&quot;3&quot;
     }
   ]
  }
]
</code></pre>
<p>Final result should be this:</p>
<pre><code>[
  {
   &quot;id&quot;: &quot;1&quot;
   &quot;sublist&quot;: [
     {
       &quot;key&quot;:&quot;1&quot;,
     },
     {
       &quot;key&quot;:&quot;2&quot;
     }
   ]
  },
  {
   &quot;id&quot;: &quot;2&quot;
   &quot;sublist&quot;: [
     {
       &quot;key&quot;:&quot;3&quot;
     }
   ]
  }
]
</code></pre>
","-1","Question"
"78497222","","<p>I am busy formalising a theorem using a library which introduces an indexed datatype. For simplicity one can think of it to have the form <code>data idx (n : ℕ)</code>.</p>
<p>Now I want to create a list of elements over this datatype with the parameter fixed, whose length depends on this parameter. I have simplified the whole problem to the example below:</p>
<pre><code>open import Data.Nat using (ℕ ; _+_ ; suc ; zero) public
open import Data.List.Base using (_∷_ ; [] ; List) public

data idx (n : ℕ) : Set where
  num : ℕ → idx n

exampleA : List (idx 4) -- some random list
exampleA = num 12312 ∷ num 4792384 ∷ []

exampleB : List (idx 4) -- list of the form that I want
exampleB = num 1 ∷ num 2 ∷ num 3 ∷ num 4 ∷ []

rev-list : (m n : ℕ) → List (idx (n + m))
rev-list zero n = []
-- I want to put &quot;m&quot; in the first hole and &quot;suc n&quot; in the second hole,
-- but I get the following errors:
-- first hole:  m !=&lt; suc m of type ℕ
-- second hole: suc (n + ?0) !=&lt; n + suc m of type ℕ
rev-list (suc m) n = num (suc m) ∷ rev-list {!!} {!!} 

rev-list' : (m n : ℕ) → List (idx (n + m))
rev-list' m zero = []
-- I want to put &quot;n&quot; in the hole, but I get the following error:
-- n + suc m !=&lt; suc (n + m) of type ℕ
rev-list' m (suc n) =  num (suc n) ∷ rev-list' (suc m) {!!}
</code></pre>
<p>I want to write a function <code>func : (m n : ℕ) → List (idx (n + m))</code> that returns a list <code>num 1 ∷ num 2 ∷ num 3 ∷ num 4 ∷ ... num (n + m) ∷ []</code> when called with <code>func 0 (n + m)</code> or maybe <code>func (n + m) 0</code> - whatever would work - (as in <code>exampleB</code>).</p>
<p>It seems to be simpler to first compute the reverse list, which I try to achieve in <code>rev-list</code> and <code>rev-list'</code>.
However, I get the errors indicated in the code above. I have been struggling with this for hours to no avail. If anybody here could help me, it would be much appreciated :)</p>
","0","Question"
"78501833","","<p>I have a list that looks like this:</p>
<pre><code>[ 'abc1234', 'appa4567', 'kkakaka9876']
</code></pre>
<p>And I want to split this list, so that every alphabets will become keys and on the right all numeral values.</p>
<pre><code>{ 
    'abc':'1234',
    'appa':'4567',
    'kkakaka':'9876'
}
</code></pre>
","0","Question"
"78506307","","<p>I have a C# list of students. I cannot remove Item based on Id.</p>
<p>Program.cs</p>
<pre><code>static void RemoveStudent(StudentManager studentManager)
{
    Console.WriteLine(&quot;Which student? Insert ID:&quot;);
    int id = Convert.ToInt32(Console.ReadLine());
    Console.WriteLine(id);
    studentManager.RemoveStudent(1);
}
</code></pre>
<p>How student class looks like:</p>
<pre><code>public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
    public string Major { get; set; }
}
</code></pre>
<p>How StudentManagerClass looks like:</p>
<pre><code>public class StudentManager
{
    private List&lt;Student&gt; students = new List&lt;Student&gt;();

    public void RemoveStudent(int id)
    {
        students.RemoveAt(id);
    }
   
    //...
}
</code></pre>
<p>Program exits without any prompt when trying to remove the element.</p>
","0","Question"
"78508769","","<p>So I have a list of AWS Instance IDs:</p>
<pre><code>ok: [localhost] =&gt; {
    &quot;instance_running.instance_ids&quot;: [
        &quot;i-05a765076f4cbf03b&quot;,
        &quot;i-096b8a656d875f38a&quot;,
        &quot;i-0b5156565ac17c9e4&quot;,
        &quot;i-0865656657565edd5&quot;
    ]
}
</code></pre>
<p>And I want to assign it to a dict variable to use in the <code>targets</code> parameter. The port is the same for all the ids and is another variable:</p>
<pre class=""lang-yaml prettyprint-override""><code>targets:
  - Id: &quot;{{ instance_id }}&quot;
    Port: &quot;{{ host_port }}&quot;
</code></pre>
<p>I am confused by the <code>map</code> function and the <code>community.general.dict</code></p>
","1","Question"
"78519792","","<p>My code reads data from NOAA's buoy service. The url is in .txt format which my code then uses to assign variables based on their position in the list. Typically the list which I have assigned the variable &quot;lines&quot; will contain the following info:</p>
<pre><code>['Station CAMM2', &quot;38° 34.4' N  76° 4.1' W&quot;, '', '3:00 pm EDT', '1900 GMT 05/22/24', 'Wind: SSW (210°), 9.9 kt', 'Gust: 15.0 kt', 'Pres: 29.96 falling', 'Air Temp: 82.8 °F', 'Water Temp: 68.5 °F', '']
</code></pre>
<p>I want to assign variables like this:</p>
<pre><code>when = lines[3]
wind = lines[5]
gust = lines[6]
pressure = lines[7]
air_temp = lines[8]
water_temp = lines[9]
</code></pre>
<p>However, sometimes one or more of these elements is missing from text feed. For example, <code>air_temp</code> will be missing from the feed, so <code>water_temp = lines[9]</code> will result in out-of-index error. I know this is basic, but how can I assign variables from a list that doesn't always have the same number of elements?</p>
","2","Question"
"78520642","","<p>I'm trying to practice my Python on Leetcode.</p>
<p>The question is <a href=""https://leetcode.com/problems/rotate-array/description/?envType=study-plan-v2&amp;envId=top-interview-150"" rel=""nofollow noreferrer"">189. Rotate Array</a>.</p>
<p>Although it works correctly in other IDEs, It's still wrong in Leetcode. Here is my Code:</p>
<pre><code>class Solution:
    def rotate(self, nums: List[int], k: int) -&gt; None:
        &quot;&quot;&quot;
        Do not return anything, modify nums in-place instead.
        &quot;&quot;&quot;
        from collections import deque
        nums = deque(nums)
        for i in range(k):
            nums.appendleft(nums.pop())
        nums = list(nums)
        print(nums)
</code></pre>
<p>Still don't know. What's the issue on my code?</p>
","-2","Question"
"78524320","","<p>Good day! I have this dataframe as an example:</p>
<pre><code>year&lt;-rep(2000:2002,times=3)
month&lt;-rep(1:3,times=1,each=3)
x&lt;-c(5,10,15,20,25,30,35,40,45)

df&lt;-cbind(year,month,x)

</code></pre>
<p>As shown in the photo below, I would like to create a list by month and then within that list is a list by year. I also wish x to repeat at a certain length. May I humbly ask how can I recreate this on R?</p>
<p><a href=""https://i.sstatic.net/pnEHxUfg.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/pnEHxUfg.png"" alt=""enter image description here"" /></a></p>
<p>Thank you very much!</p>
<p>I tried to use the map and lapply function but they are not working.</p>
","1","Question"
"78525579","","<p>Here is an example of a list of lists.</p>
<pre><code>[[&quot;Amber&quot;, &quot;7.3&quot;], [&quot;Molly&quot;, &quot;14.5&quot;], [&quot;Lisa&quot;]]
</code></pre>
<p>As you can see, there are two lists that have a second element. These elements are strings but need to be converted into floats. The problem boils down to the last element in the list. The last element isn't a list, but just a string and I want my program to just ignore it.</p>
<p>I've tried a few different things but keep coming back to the basic</p>
<pre><code>for i in lst:
    for x in i:
        float(x[1])
</code></pre>
<p>But of course I get an error because (&quot;lisa&quot;) doesn't have a x[1] for it to change. I still want Lisa to exist in my list, I just want the numbers specifically to become floats.</p>
<pre><code>[[&quot;Amber&quot;, 7.3], [&quot;Molly&quot;, 14.5], [&quot;Lisa&quot;]]
</code></pre>
<p>I tend to overthink things so if something doesn't make sense or this isn't something I can do within python please let me know.</p>
<p>I apologize, I made a few mistakes when writing out my example which made things extremely confusing.
This is for a school assignment so I was trying to get across what I needed while being as vague about my actual code as possible. The actual example above has nothing to do with said assignment. Someone asked below how the final item in the list is a different structure. I believe they may have been asking why, in my original code, there were both tuples and a string. This was because I'm stupid and forgot to double check my own work. In the code I meant to sent, all three elements in the list, are lists. The final one is different from the rest as my actual function has to do with reading a file composed of basic calculations but written in plain English. So each line of the file is essentially just doing basic math on a calculator, with the final list of one element representing an enter key.</p>
","-3","Question"
"78526001","","<p>I have these sample lists and I am trying to subtract them:</p>
<pre><code>&gt; str(list1)
List of 3
 $ 1:List of 3
  ..$ 2000: num [1:13] 5 5 5 5 5 5 5 5 5 5 ...
  ..$ 2001: num [1:13] 10 10 10 10 10 10 10 10 10 10 ...
  ..$ 2002: num [1:13] 15 15 15 15 15 15 15 15 15 15 ...
 $ 2:List of 3
  ..$ 2000: num [1:13] 20 20 20 20 20 20 20 20 20 20 ...
  ..$ 2001: num [1:13] 25 25 25 25 25 25 25 25 25 25 ...
  ..$ 2002: num [1:13] 30 30 30 30 30 30 30 30 30 30 ...
 $ 3:List of 3
  ..$ 2000: num [1:13] 35 35 35 35 35 35 35 35 35 35 ...
  ..$ 2001: num [1:13] 40 40 40 40 40 40 40 40 40 40 ...
  ..$ 2002: num [1:13] 45 45 45 45 45 45 45 45 45 45 ...

&gt; str(list2)
List of 3
 $ 1:List of 3
  ..$ 2000: num [1:13] 1 1 1 1 1 1 1 1 1 1 ...
  ..$ 2001: num [1:13] 2 2 2 2 2 2 2 2 2 2 ...
  ..$ 2002: num [1:13] 3 3 3 3 3 3 3 3 3 3 ...
 $ 2:List of 3
  ..$ 2000: num [1:13] 4 4 4 4 4 4 4 4 4 4 ...
  ..$ 2001: num [1:13] 5 5 5 5 5 5 5 5 5 5 ...
  ..$ 2002: num [1:13] 6 6 6 6 6 6 6 6 6 6 ...
 $ 3:List of 3
  ..$ 2000: num [1:13] 7 7 7 7 7 7 7 7 7 7 ...
  ..$ 2001: num [1:13] 8 8 8 8 8 8 8 8 8 8 ...
  ..$ 2002: num [1:13] 9 9 9 9 9 9 9 9 9 9 ...
</code></pre>
<p>But when I try to subtract these two lists,</p>
<pre><code>diff &lt;- list1 - list2
</code></pre>
<p>R is giving me this error:</p>
<pre class=""lang-none prettyprint-override""><code>Error in list1 - list2 : non-numeric argument to binary operator
</code></pre>
<h2>data</h2>
<p>obtained with <code>dput()</code></p>
<pre><code>list1 &lt;- list(`1` = list(`2000` = c(5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
5), `2001` = c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
10), `2002` = c(15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
15)), `2` = list(`2000` = c(20, 20, 20, 20, 20, 20, 20, 20, 20, 
20, 20, 20, 20), `2001` = c(25, 25, 25, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 25), `2002` = c(30, 30, 30, 30, 30, 30, 30, 30, 30, 
30, 30, 30, 30)), `3` = list(`2000` = c(35, 35, 35, 35, 35, 35, 
35, 35, 35, 35, 35, 35, 35), `2001` = c(40, 40, 40, 40, 40, 40, 
40, 40, 40, 40, 40, 40, 40), `2002` = c(45, 45, 45, 45, 45, 45, 
45, 45, 45, 45, 45, 45, 45)))

list2 &lt;- list(`1` = list(`2000` = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1), `2001` = c(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2), `2002` = c(3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)), `2` = list(`2000` = c(4, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4), `2001` = c(5, 5, 5, 5, 5, 
5, 5, 5, 5, 5, 5, 5, 5), `2002` = c(6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6)), `3` = list(`2000` = c(7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7), `2001` = c(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
), `2002` = c(9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9)))
</code></pre>
","3","Question"
"78526854","","<p>Consider the following?</p>
<pre><code>ghci&gt; transpose []
[]
ghci&gt; transpose [[]]
[]
ghci&gt; transpose [[[]]]
[[[]]]
ghci&gt; transpose [[[[]]]]
[[[[]]]]
ghci&gt; transpose [[[[[]]]]]
[[[[[]]]]]
ghci&gt; transpose [[[[[[]]]]]]
[[[[[[]]]]]]
</code></pre>
<p>One of these things is not like the other :p</p>
<p>It is very strange to me to see something so seemingly unelegant in <code>base</code>, but I suppose there's some excellent algebraic or theoretical reason why they chose to have <code>transpose [[]] == []</code>. Can anyone shed some light on this?</p>
","4","Question"
"78527079","","<p>So, I wrote a code, for <a href=""https://leetcode.com/problems/snapshot-array/?envType=study-plan-v2&amp;envId=binary-search"" rel=""nofollow noreferrer"">this</a> problem.</p>
<p>Code :</p>
<pre><code>import copy

class SnapshotArray:

    def __init__(self, length: int):
        self.lst = [0] * length
        self.snap_id = -1
        self.hash = []
        self.by_snap_id = 0
        return None

    def set(self, index: int, val: int) -&gt; None:
        self.lst[index] = val
        return None

    def snap(self) -&gt; int:
        self.snap_id += 1
        self.copy = copy.copy(self.lst)
        self.hash.append(self.copy)
        del self.lst
        self.lst = self.hash[self.snap_id]
        return self.snap_id

    def get(self, index: int, snap_id: int) -&gt; int:
        return self.hash[snap_id][index]
</code></pre>
<p>In 69 / 75 testcase it says MLE</p>
<p>So I tried to make just one list from which I'll be taking value for current list too, but it didn't work. So, how do I reduce amount of memory used?</p>
","0","Question"
"78527980","","<p>I have these 2 nested lists wherein in each sublist, the length of its elements have different sizes.</p>
<pre><code>list1 &lt;- list(
  list(c(1,2,3), c(4,5,6), c(7,8,9)),
  list(c(2,4,6), c(8,10,12), c(14,16,18))
)

list2 &lt;- list(
  list(c(1,0), c(1,2,0), c(1,2,3,0)),
  list(c(1,0), c(1,2,0), c(1,2,3,0))
)
</code></pre>
<p>I would like to get the product of these two lists where the length of elements of each sublist follows the length of the sublist of <strong><code>list2</code></strong>. Just like this:</p>
<pre><code>output &lt;- list(
  list(c(1,0), c(4,10,0), c(7,16,27,0)),
  list(c(2,0), c(8,20,0), c(14,32,54,0))
)
</code></pre>
<p>then, I want to find the sum of each sublist as a final output:</p>
<pre><code>finaloutput &lt;- list(
  list(c(1), c(14), c(50)),
    list(c(2), c(28), c(100))
  )
</code></pre>
<p>I tried to multiply the two lists but it is giving me this error</p>
<blockquote>
<p>Error in list1 * list2 : non-numeric argument to binary operator</p>
</blockquote>
<p>Thank you very much for your help!</p>
","2","Question"
"78529070","","<p>I was trying to perform a simple moving average of a list with the particularity that the end of the list it's the start of itself, but when, for example, with a list  from 1 to 9 using 3 samples I try to:</p>
<pre><code>original_list = [*range(1,10)]

print(sum(original_list[-1:2])/3) 
</code></pre>
<p>The ouput is <strong>0.0</strong> and should be (9+1+2)/3 = 4.</p>
<p>My first guess was that I wasnt chosing the right values from the indices, so I printed them individually:</p>
<pre><code>print(original_list[-1:], original_list[:2])

# Print:
# [9] [1, 2]
</code></pre>
<p>Which was as expected, so I what's wrong in my previous print? How should I do it?</p>
<p>What I tried is to do both separed and join them so:</p>
<pre><code>print(sum(original_list[-1:] + original_list[:2]) / 3)

# Print:
# 4
</code></pre>
<p>That is the right value, however if I increase the samples to 5 for example and I try:</p>
<pre><code>import math
original_list = [*range(1,10)]

def MA(index):
    to_be_averaged = original_list[-2 + index:] + original_list[:3 + index]
    print(to_be_averaged)
    print(sum(to_be_averaged) / len(to_be_averaged))

MA(0)
# Print
# [8, 9, 1, 2, 3]
# 4.6

MA(1)
# Print
# [9, 1, 2, 3, 4]
# 3.8

MA(2)
# Print
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]
# 4.285714285714286
</code></pre>
<p>What a mess at index 2, what's going on? How should I do it? I feel like it should be a simple way to get a range from a to b independently if the indices are positive or negative.</p>
","0","Question"
"78531289","","<p>I have two lists that I'm trying to combine:</p>
<pre><code>lst1 = [['arg1', 'arg2']]  # this can have more lists, but for simplicity, leaving it as this
lst2 = ['arg3', 'arg4']
</code></pre>
<p>I want the product of the two lists so that the product is:</p>
<pre><code>[
  ['arg1', 'arg2', 'arg3'],
  ['arg1', 'arg2', 'arg4'],
]
</code></pre>
<p>I can obviously loop through and do this, but I need to be able to do this as a one-liner (I have reasons).</p>
<p>I've been able to do this by doing the following:</p>
<pre><code>list(
    map(
        lambda l: list(itertools.chain.from_iterable(l)),
        list(itertools.product(lst, lst2)),
    )
)
</code></pre>
<p>edit: I think the above answer worked for me when I mapped the 1d list so every element was inside a list, which is super ugly. e.g. <code>lst2</code> was actually <code>list(map(lambda a: [a], lst2))</code></p>
<p>...which is okay, but I'm wondering if there's a better way to do this. I also feel like there should be a more mathematical way to express what I'm describing? Maybe <code>itertools</code> isn't the right library?</p>
","0","Question"
"78531734","","<p>I'm doing some data operation with <code>tapply()</code>, and it returns a <code>list</code>-like object. For example:</p>
<pre class=""lang-r prettyprint-override""><code>x &lt;- 1:10
y &lt;- rep(c('A', 'B'), each = 5)
lst.1 &lt;- tapply(x, y, function(vec) return(vec), simplify = FALSE)
lst.1

# $A
# [1] 1 2 3 4 5
# 
# $B
# [1]  6  7  8  9 10
</code></pre>
<p>I want to transform it into a <code>data.frame</code>. An intuition is using <code>as.data.frame()</code>, but it failed.</p>
<pre class=""lang-r prettyprint-override""><code>as.data.frame(lst.1)

#             lst1
# A  1, 2, 3, 4, 5
# B 6, 7, 8, 9, 10
</code></pre>
<p>I create another list manually to mimic <code>lst.1</code>, and <code>as.data.frame()</code> works as expedted.</p>
<pre class=""lang-r prettyprint-override""><code>lst.2 &lt;- list(A = 1:5, B = 6:10)
lst.2

# $A
# [1] 1 2 3 4 5
# 
# $B
# [1]  6  7  8  9 10

as.data.frame(lst.2)

#   A  B
# 1 1  6
# 2 2  7
# 3 3  8
# 4 4  9
# 5 5 10
</code></pre>
<p>What's the difference between <code>lst.1</code> and <code>lst.2</code>? And how to correctly convert a list returned by <code>tapply</code> (i.e. <code>lst.1</code>) into a <code>data.frame</code>?</p>
","4","Question"
"78535547","","<p>I am using PowerQuery to import data from pdfs. Important are the <em>Titel, ParA, ParB, ParC</em> and the corresponding values <em>WertA, WertB, WertC</em>. The problem ist that columns where I can find the values can vary. The rows didn´t or not as far as I know. I have visualized this in an excel table.</p>
<p>Quelle(<a href=""https://i.sstatic.net/Y3Kn1ux7.jpg"" rel=""nofollow noreferrer"">https://i.sstatic.net/Y3Kn1ux7.jpg</a>)</p>
<p>My solution is the following</p>
<pre><code>let
    Quelle = Excel.CurrentWorkbook(){[Name=&quot;Tabelle1&quot;]}[Content],
    #&quot;Tiefer gestufte Header&quot; = Table.DemoteHeaders(Quelle),
    #&quot;Transponierte Tabelle1&quot; = Table.Transpose(#&quot;Tiefer gestufte Header&quot;),
     #&quot;Gefilterte Zeilen&quot; = Table.SelectRows(#&quot;Transponierte Tabelle1&quot;, each ([Column3] = &quot;titel&quot;)),
    Column1 = #&quot;Gefilterte Zeilen&quot;[Column1]
    
in
    Column1
</code></pre>
<p>With the correct column I want to filter the original table <em>Quelle</em> as following.</p>
<pre><code>    #&quot;Gefilterte Zeilen1&quot; = Table.SelectRows(Quelle, each ([???] = &quot;titel&quot; and [???] = &quot;ParA&quot; [???] = &quot;ParB&quot; and [???] = &quot;ParB&quot;))
</code></pre>
<p>I have tried to use the List <em>Column1</em> to refer to the correct column (here marked with [???]) but either I got an error or I got an empty table. Does anyone now how I can refer to a column using the list object?</p>
<p>Edit: Sorry, I have tried to make a more precise definition of my problem.</p>
<pre><code>1 let
2    Quelle = Excel.CurrentWorkbook(){[Name=&quot;Tabelle1&quot;]}[Content],
3    #&quot;Tiefer gestufte Header&quot; = Table.DemoteHeaders(Quelle),
4    #&quot;Transponierte Tabelle&quot; = Table.Transpose(#&quot;Tiefer gestufte Header&quot;),
5    #&quot;Gefilterte Zeilen&quot; = Table.SelectRows(#&quot;Transponierte Tabelle&quot;, each ([Column3] = &quot;test&quot;)),
6    // Line 7 creates a List with the name of the Column/Record I want to use. Here &quot;Spalte3&quot;.
7    Column1 = #&quot;Gefilterte Zeilen&quot;[Column1],
8    //Line 9 is working as intended.
9    #&quot;Works&quot; = Table.DuplicateColumn(Quelle, Column1{0}, &quot;Test&quot;),
10   //Line 11 and Line 12 results in the same output
11   #&quot;Works2&quot;=Quelle[Spalte3],
12   #&quot;Works3&quot;=Table.Column(Quelle,Column1{0}),
13   // But Line 14 does not work and I do not know why. There must be a difference between Line 11 &amp; 12. I do not understand and how to solve.
14   #&quot;DoesNotWork&quot; = Table.SelectRows(Quelle,each Table.Column(Quelle,Column1{0}) &lt;&gt; null)
15 in
16   #&quot;DoesNotWork&quot;
</code></pre>
","0","Question"
"78535999","","<p>I have the following code that plots <code>ydata</code> vs <code>xdata</code> which is supposed to be a circle. The plot has two subplots -- a lineplot with markers and a scatter plot.</p>
<pre><code>import matplotlib.pyplot as plt


xdata = [-1.9987069285852805, -1.955030386765729, -1.955030386765729, -1.8259096357678795, -1.8259096357678795, -1.6169878720004491, -1.6169878720004491, -1.3373959790579202, -1.3373959790579202, -0.9993534642926399, -0.9993534642926399, -0.6176344077078071, -0.6176344077078071, -0.20892176376743077, -0.20892176376743077, 0.20892176376743032, 0.20892176376743032, 0.6176344077078065, 0.6176344077078065, 0.999353464292642, 0.999353464292642, 1.3373959790579217, 1.3373959790579217, 1.6169878720004487, 1.6169878720004487, 1.8259096357678786, 1.8259096357678786, 1.9550303867657255, 1.9550303867657255, 1.9987069285852832]
 
ydata = (0.0, -0.038801795445724575, 0.038801795445724575, -0.07590776623879933, 0.07590776623879933, -0.10969620340136318, 0.10969620340136318, -0.13869039009450249, 0.13869039009450249, -0.16162314123018345, 0.16162314123018345, -0.1774921855402276, 0.1774921855402276, -0.18560396964016201, 0.18560396964016201, -0.185603969640162, 0.185603969640162, -0.17749218554022747, 0.17749218554022747, -0.16162314123018337, 0.16162314123018337, -0.13869039009450224, 0.13869039009450224, -0.10969620340136294, 0.10969620340136294, -0.0759077662387991, 0.0759077662387991, -0.038801795445725006, 0.038801795445725006, 0.0)



fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16,6))
fig.suptitle('Plot comparison: line vs scatter'+ 3*'\n')
fig.subplots_adjust(wspace=1, hspace=3)
fig.supxlabel('x')
fig.supylabel('y')


ax1.plot(xdata, ydata, 'o-', c='blue')
ax1.set_title('Line-point plot', c='blue')

for i in range(len(xdata)):
   ax2.scatter(xdata, ydata, c='orange')
   ax2.set_title('Scatter plot', c='orange')
plt.savefig('line_vs_scatter_plot.png')
plt.show()
</code></pre>
<p>Output:
<a href=""https://i.sstatic.net/fzORWwi6.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/fzORWwi6.png"" alt=""enter image description here"" /></a></p>
<p>From the output, it can be seen that the lineplot does not connect the dots (or points). Can we rearrange the x or y data in someway that fixes the issue? Or do something else?</p>
","2","Question"
"78536809","","<p>I have a dataframe like:</p>
<pre><code>df
    name value
0   a    10
1   a    5
2   b    4
3   b    8
</code></pre>
<p>I want to create filtered datasets using the 'name' feature. Something like:</p>
<pre><code>for i in ['a', 'b']:
    df_{i} = df[df['name'] == i]

df_a
    name value
0   a    10
1   a    5

df_b
    name value
2   b    4
3   b    8
</code></pre>
<p>Which alterations are necessary to do that?</p>
","1","Question"
"78540078","","<p>I would like some help. The goal os this function is to find if there is a pair in a set of cards and find out which are them.</p>
<p>I am able to reach the value with the print command, but my for loop is broken.</p>
<pre><code>def check_pair(cards):
    print(cards)  #works
    print(cards[1][1]) #works
    for i in cards:
        ranks.append(cards[i][0])
    pairs = {k:ranks.count(k) for k in ranks}
    return pairs

community_cards = [(1, 'd'), (2, 'h'), (1, 'h')]

print(f'Checking pair: {check_pair(community_cards)}')
</code></pre>
<p>File &quot;e:\Python_Books\Python Crash Course\poker.py&quot;, line 42, in check_pair
ranks.append(cards[i][0])
~~~~~^^^
TypeError: list indices must be integers or slices, not tuple
PS E:\Python_Books\Python Crash Course&gt;</p>
","1","Question"
"78547042","","<p>I am trying to assign the length of a list to a double and it says that an instance member can't be accessed in an initializer:</p>
<pre><code>List numlist = [1,2,3,4,5];
double size = numlist.length.toDouble();
</code></pre>
<p>Is there a way to get this to work?</p>
","0","Question"
"78550262","","<p>I am reading a csv to a dataframe and want to pull out a column from that dataframe and turn it into a list of lists. The data in the column looks like this:</p>
<pre><code>[(123, 456), (789, 101), (321, 654)] 
[(198, 765), (432, 213), (856, 987)]
</code></pre>
<p>The column has multiple rows like this</p>
<p>I want to create a list of lists like so:</p>
<pre><code>list_of_lists = [ [123, 456], [789, 101], [321, 654], [198, 765], [432, 213], [856, 987] ]
</code></pre>
<p>As requested: The dataframe is created using:</p>
<pre><code>df = pd.read_csv('filename')
</code></pre>
<p>The datatype for this row/series is <code>object</code></p>
<p>I've tried pulling out that column by using tolist():</p>
<pre><code>new_list = df['column_name'].tolist()
</code></pre>
<p>but that gives me a list of list of list of tuples like this:</p>
<pre><code>['[(123, 456), (789, 101), (321, 654)]', '[(198, 765), (432, 213), (856, 987)]']
</code></pre>
<p>I've tried using list comprehension after tolist():</p>
<pre><code>[list(elem) for elem in new_list] 
</code></pre>
<p>and a bunch of other variations of list comprehension but the nested layers make this complex.</p>
<p>An example of the csv file:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>column_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>[(123, 456),(789,101),(321,654)]</td>
</tr>
<tr>
<td>[(198, 765),(432, 213),(856,987)]</td>
</tr>
</tbody>
</table></div>
","-1","Question"
"78552932","","<p>I've got a column within a df labelled a. It contains a list of int values. I want to return if they are consecutive or not.</p>
<p>I can do it passing in a single list but I want to iterate over each row.</p>
<pre><code>df = pd.DataFrame({'a': [[0,2], [9,11,12], [0,1,2], [10,11,13]]})

def cons(L):
    return all(n-i == L[0] for i,n in enumerate(L))

print(cons(df['a'][0])) # works

df['cons'] = df['a'].apply(cons, axis=1) # error
</code></pre>
<p>intended:</p>
<pre><code>              a    cons
0        [0, 2]   False
1   [9, 11, 12]   False 
2     [0, 1, 2]    True
3  [10, 11, 13]   False
</code></pre>
","1","Question"
"78558198","","<p>As known, in Java List is not a class, but an interface, so you can't get an instance of a List, you have to specify the implementation, like ArrayList, LinkedList, etc. So here is the question: which List implementation does Kotlin use, when creating one with <code>listOf()</code> or <code>mutableListOf()</code>.</p>
","1","Question"
"78559821","","<p>&quot;&quot;&quot;</p>
<pre><code>arr = map(int, input().split())
arr1=list(arr)
print(f&quot;My list:&quot; + str(arr1))
print(f&quot;After sorting in reverse order:&quot; + str(arr1))
arr1.sort(reverse=True)
unique_list = list(set(arr1))
print(f&quot;Second element after making list unique:&quot; + str(unique_list[1]))
</code></pre>
<p>&quot;&quot;&quot;</p>
<p>Wrote this code, In order to get the 2nd highest element from a list of unique numbers, It doesn't seem to get me the right results, What might be the possible issue here ?
I'm expecting it would print me the 2nd highest number/integer from the result.</p>
","-2","Question"
"78560166","","<p>Consider these two dfs:</p>
<pre><code>df1 = pd.DataFrame({
    'Id': {0: 101, 1: 102, 2: 103, 3: 104},
    'Number': {0: 'A1', 1: 'A2', 2: 'B1', 3: 'B1'}})

    Id  Number
0   101 A1
1   102 A2
2   103 B1
3   104 B1

df2 = pd.DataFrame({
    'Client': {0: 'John', 1: 'Mia', 2: 'Claudia'},
    'Number': {0: ['A1', 'B1'], 1: ['Z4'], 2: ['A2']}})

    Client  Number
0   John    [A1, B1]
1   Mia     [Z4]
2   Claudia [A2]
</code></pre>
<p>How do I check if values from <code>df1[&quot;Number&quot;]</code> are in <code>df2[&quot;Number&quot;]</code> and append all the corresponding ids from <code>df1[&quot;Id&quot;]</code>? So the results are like this?</p>
<pre><code>    Client  Number   Ids
0   John    [A1, B1] [101, 103, 104]
1   Mia     [Z4]     NaN
2   Claudia [A2]     [102]
</code></pre>
","1","Question"
"78565203","","<p>This is a really basic thing but after reading the documentation I am still not able to do. I just want to create a list of 9 sublists as follows</p>
<pre><code>[[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25],[0, 0.05, 0.1, ..., 25]]
</code></pre>
<p>I am doing</p>
<pre><code>[np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05),
                 np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05),
                 np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05), np.arange(0, 25.05, 0.05)]
</code></pre>
<p>but I get <code>24.9 , 24.95, 25.  ])]</code>, while I would like to get <code>24.9 , 24.95, 25.  ]])]</code>. How can I get this done?</p>
","-1","Question"
"78573933","","<p>I want to ask the user to choose one parameter and then based on the user's input make some operations on the chosen parameter. How can I do it in Java?</p>
<p>for example:</p>
<pre><code>List A = new List();
List B = new List();
String userInput = in.nextLine(); //here the user chooses which list he wants to do the operations on
</code></pre>
<p>I want to take user input (which will be a String with A or B in it) and do the operations on it.</p>
<p>I used switch but the code is not efficient that way in case I'll have more than just 2 Lists in the future.</p>
","-1","Question"
"78582450","","<p>I have a list of phrases and I need to be able to identify whether each row in a dataset contains all the words from any of the phrases in my list. Take my example problem below.</p>
<p>I have a dataset where the column &quot;Search&quot; contains some browser searches. I also have a list called &quot;phrases&quot; that contains the phrases I'm trying to find within the Search column.</p>
<pre><code>import pandas as pd
import numpy as np

text = [('how to screenshot on mac', 0),
         ('how to take screenshot?', 0),
         ('how to take screenshot on windows', 0),
         ('when is christmas', 0),
         ('how many days until christmas', 0),
        ('how many weeks until christmas', 0),
        ('how much is the new google pixel 8', 0),
        ('which google pixel versions are available', 0),
        ('how do I do google search on my pixel phone 7a', 0)]
labels = ['Search','Random_Column']
df = pd.DataFrame.from_records(text, columns=labels)

phrases = ['mac screenshot', 'days until christmas', 'google pixel 7a']
</code></pre>
<p>I don't care about the order of the words within &quot;phrases&quot; and there can be other before before, within, and after the phrase, but I need to make sure that only the df rows that contain all the words within any of the phrases are identified. Therefore, the expected output would be like this:</p>
<pre><code>                                           Search  Random_Column  Match
0                        how to screenshot on mac              0   True
1                         how to take screenshot?              0  False
2               how to take screenshot on windows              0  False
3                               when is christmas              0  False
4                   how many days until christmas              0   True
5                  how many weeks until christmas              0  False
6              how much is the new google pixel 8              0  False
7       which google pixel versions are available              0  False
8  how do I do google search on my pixel phone 7a              0   True
</code></pre>
<p>I have found a lot of solutions for instances where the &quot;phrases&quot; list is made up of single words (e.g. <a href=""https://stackoverflow.com/questions/48631769/pandas-str-contains-search-for-multiple-values-in-a-string-and-print-the-value"">here</a>, <a href=""https://stackoverflow.com/questions/15863066/how-to-match-a-whole-word-with-a-regular-expression"">here</a>, and <a href=""https://stackoverflow.com/questions/6531482/how-to-check-if-a-string-contains-an-element-from-a-list-in-python"">here</a>) but I'm struggling to find a solution where I need to match full phrases.</p>
<p>I also tried to implement <a href=""https://stackoverflow.com/questions/67080328/find-if-a-string-contains-a-phrase-from-a-list-in-python"">this solution</a> but could not get it to work for a dataset.</p>
","2","Question"
"78589637","","<p>I am working with a script that imports multiple data frames and before passing them to an function that performs an analysis, it creates a vector for each data frame containing all the column names. The script does a check to make sure all of the column names across all the vectors match, if they do, the analysis goes ahead, if not it aborts. Unfortunately my 25 different data frames don't have matching columns, so my question:</p>
<p>How can I loop over all the vectors, remove the column names that don't match and then do the same for the imported data frames. I have created a simplified example below as well as a some of the solutions I have tried.</p>
<pre><code>## goal
# example vectors:
cols_import_1 &lt;- c('a', 'b', 'c', 'd', 'f') 
cols_import_2 &lt;- c('a', 'b', 'c', 'aa', 'cc', 'f')
cols_import_3 &lt;- c('a', 'b', 'c', 'bb', 'e', 'f')

# what needs to be produced:
cols_import_1 &lt;- c('a', 'b', 'c', 'f') 
cols_import_2 &lt;- c('a', 'b', 'c', 'f')
cols_import_3 &lt;- c('a', 'b', 'c', 'f')

## my approach
# create list of loci to remove from vector
remove_loci_list &lt;- c('aa' 
                      , 'bb'
                      , 'cc'     
                      , 'd'   
                      , 'e'     
)

# create vector list
vector_list &lt;- list(cols_import_1
                    , cols_import_2
                    , cols_import_3)

# option 1:
lapply(vector_list, function(change_vector)) {
  change_vector &lt;- change_vector[!change_vector %in% remove_loci_list]
}

# option 2:
for (i in 1:length(vector_list)) {
  vector_list[[i]] &lt;- vector_list[[i]][!vector_list[[i]] %in% remove_loci_list]
}

# option 3:
for (i in 1:length(paste0('cols_import_', [i]))) {
  cols_import_[i] &lt;- cols_import_[i][!cols_import_[i] %in% remove_loci_list]
}

# option 4:
for (i in 1:length(paste0(cols_import_, [i]))) {
  paste0(cols_import_, [i]) &lt;- 
    paste0(cols_import_, [i])[!paste0(cols_import_, [i]) %in% remove_loci_list]
}

# option 5:
for (i in 1:length(vector_list) {
  cols_import_[i] &lt;- cols_import_[i][!cols_import_[i] %in% remove_loci_list]
}
</code></pre>
","1","Question"
"78594212","","<p>I have been writing a function to sort and pick out specific words to form a sentence. The problem is I cannot for the life of me get any form of .sort or sorted to work. I need the items on the list to be sorted in numerical order, and have the words to the right of the integers stay with their partnered integer.</p>
<p>This is my code:</p>
<pre><code>def decode(message_file):

    decoded_message = []

#opens the external file, and places it into file, and then reads file into message
    with open(message_file, 'r') as file:
        message = file.read()

#takes the message and splits it between the numbers and the txt
    pairs = message.split()

    #sorted(pairs, key = lambda x: x[0])
    pairs.sort(key = lambda x: [0])

    print(pairs)

decode(&quot;test.txt&quot;)
</code></pre>
<p>The pairs.sort and sorted towards the bottom are where I am having issue. No matter what I do, it does not actually sort the list, and it always prints the same.</p>
<p>test.txt:</p>
<pre><code>3 love
6 computers
2 dogs
4 cats
1 I
5 you
</code></pre>
<p>Output:</p>
<pre><code>['3', 'love', '6', 'computers', '2', 'dogs', '4', 'cats', '1', 'I', '5', 'you']
</code></pre>
<p>I have tried different .sort and sorted functions, and messed around with the different syntax of writing keys and trying to figure out how to actually get things to move. I am pretty new to Python so I don't know if I'm just missing something.</p>
<p>My Output Should Be:</p>
<pre><code>['1', 'I', '2', 'dogs', '3', 'love', '4', '5', 'you', 'cats', '6', 'computers']
</code></pre>
","2","Question"
"78604712","","<p>I have a string like this:</p>
<p><code>'ARCADI, G.; DORSCH, G. C.; NETO, J. P.; QUEIROZ, F. S.; OVIEDO-TORRES, Y. M. Probing a dark sector with collider physics, direct detection, and gravitational waves. Physics Letters, Section B: Nuclear, Elementary Particle and High-Energy Physics, v. 848, Jan. 2024.'</code></p>
<p>And I want to split it in:</p>
<p><code>['ARCADI, G.', 'DORSCH, G. C.', 'NETO, J. P.', 'QUEIROZ, F. S.', 'OVIEDO-TORRES, Y. M.']</code></p>
<p>using python.</p>
<p>Can someone help me?</p>
<p>The first authors are easy to get using <code>split(';')</code> but I don't know how to get the last one.</p>
","1","Question"
"78610394","","<p>I want to create a list from a Pandas column formatted like so:</p>
<pre><code>data = {
    'col': [
        '[[a, b, c], [a,b]]',
        '[[a, b], [c]]',
        '[[x]]'
    ]
}

df = pd.DataFrame(data)
</code></pre>
<p>The result should be something like this:</p>
<pre><code>python_list = [[['a', 'b', 'c'], ['a', 'b'],
 [['a', 'b'], ['c']],
 [['x']]]
</code></pre>
<p>So basically a List[List[List[Str]]]. Doing it with a non-nested list would be something simple like <code>df.str.split().tolist()</code>, but I have no clue how to do it for this case. Thanks a lot in advance!</p>
","0","Question"
"78613621","","<p>Say I have a list of dictionaries:</p>
<pre><code>universe_creatures = [
    {'type': 'dragon', 'weight': 1400},
    {'type': 'kraken', 'weight': 6000},
    {'type': 'elf', 'weight': 75}
]
</code></pre>
<p>How can I search if there's a certain type in one of the dictionary values in a shortly phrased code, but as efficient as possible?</p>
<p>What I currently have:</p>
<pre><code>typ = 'dragon'
found = False
</code></pre>
<p>I believe for-loop is the most efficient because it iterates over once, and doesn't have overheads as generator calls do.</p>
<pre><code># for loop

for c in universe_creatures:
    if typ == c['type']:
        found = True
        break
</code></pre>
<p>But I'm looking for a shorter phrase, like the two below, and want to learn if the generator expression is too expensive compared to the for-loop above.</p>
<p>And I think generator is more efficient than list comprehension as the latter iterates over data more than once.</p>
<pre><code># generator expression

found = typ in (c['type'] for c in universe_creatures)
</code></pre>
<pre><code># list comprehension
# one iteration to create new list, then 'in' operator iterates again to search.

found = typ in [c['type'] for c in universe_creatures]
</code></pre>
","1","Question"
"78616206","","<p>I have a data frame, with each column containing data on group membership. For each column, I would like to calculate the frequency of each group in that column as well as the percentage of each group out of the total frequency for that particular column.</p>
<p>I would like the results (frequency table) to be stored in a list, with each element of the list being the result (frequency by group, percentage by group) for a particular column.</p>
<p>Here is what the data frame look like:</p>
<pre><code>df &lt;- data.frame(gender = c(&quot;male&quot;, &quot;female&quot;, &quot;&quot;, &quot;male&quot;, &quot;female&quot;),
                 score1 = c(1, 1, NA, NA, 3),
                 score2 = c(NA, NA, 3, 4, 5),
                 score3 = c(2, 2, 3, 3, NA))
</code></pre>
<p>I have attempted the following code, which works on only 1 variable/column at a time.</p>
<pre><code>countsbyvars &lt;- function(var) {
  df %&gt;%
    select({{var}}) %&gt;%
    drop_na() %&gt;%
    group_by({{var}}) %&gt;%
    summarise(n = n()) %&gt;%
    mutate(freq = paste0(n / sum(n) * 100, &quot;%&quot;))
}
</code></pre>
<p>I would like to loop the column names of the data frame as input into the above user-generated function and store the result into a list.</p>
<p>I have attempted the following 3 pieces of code that I have written, but it does not working</p>
<pre><code># Using a for loop
res &lt;- list()

for (i in names(df)) {
  res[i] &lt;- countsbyvars(i)

Error in `group_by()`:
! Must group by variables found in `.data`.
✖ Column `i` is not found.
}

# Using lapply to loop
lapply(df, countsbyvars(names(df)))

Error in `group_by()`:
ℹ In argument: `names(df)`.
Caused by error:
! `names(df)` must be size 0 or 1, not 317.

# Not sure how to use the across() function without hardcoding the column name
</code></pre>
<p>The end result would be something like this:</p>
<pre><code>[[1]]

male | 2 | 50%
female | 2 | 50%

[[2]]

1 | 2 | 66.666666%
3 | 1 | 33.333333%

[[3]]

3 | 1 |33.33333%
4 | 1 | 33.33333%
5 | 1 | 33.33333%

[[4]]

2 | 2 | 50%
3 | 2 | 50%
</code></pre>
","3","Question"
"78631331","","<p>I have created the following pandas dataframe:</p>
<pre><code>import pandas as pd
import numpy as np

ds = {'col1':[1,&quot;S&quot;,3,4,&quot;S&quot;], 'col2' : [6,&quot;S&quot;,8,9,&quot;S&quot;],'col3' : [67,None,87,79,&quot;S&quot;]}

df = pd.DataFrame(data=ds)

df['col4']= df[['col1','col2','col3']].values.tolist()
</code></pre>
<p>The dataframe looks like this:</p>
<pre><code>print(df)

  col1 col2  col3          col4
0    1    6    67    [1, 6, 67]
1    S    S  None  [S, S, None]
2    3    8    87    [3, 8, 87]
3    4    9    79    [4, 9, 79]
4    S    S     S     [S, S, S]
</code></pre>
<p>For each record, I need to calculate the number of consecutive &quot;S&quot; inside <code>col4</code>. The resulting dataframe would look like this:</p>
<pre><code>  col1 col2  col3          col4   iCount
0    1    6    67    [1, 6, 67]      0
1    S    S  None  [S, S, None]      2
2    3    8    87    [3, 8, 87]      0
3    4    9    79    [4, 9, 79]      0
4    S    S     S     [S, S, S]      3
</code></pre>
<p>I have tried this code:</p>
<pre><code>col4 = np.array(df['col4'])
iCount = 0
for i in range(len(df)):
    for j in range(len(col4[i])):

        if(col4[i][j] == &quot;S&quot;):
            iCount += 1
    
        else:
            iCount = 0

df['iCount'] = iCount
</code></pre>
<p>But I get the following dataframe:</p>
<pre><code>  col1 col2  col3          col4  iCount
0    1    6    67    [1, 6, 67]       3
1    S    S  None  [S, S, None]       3
2    3    8    87    [3, 8, 87]       3
3    4    9    79    [4, 9, 79]       3
4    S    S     S     [S, S, S]       3
</code></pre>
<p>Please can someone help me find the error?</p>
","5","Question"
"78634134","","<p>I'm novice in <code>LISP</code>, so I'm sorry in advance for probably non-clever question.
Now it is needed to check if the given symbol is a member of the given list of symbols. Function <code>position</code> works well for most cases, but the problem arises when the symbol is generated by <code>gensym</code> function:</p>
<pre><code>(position '#:G808 (list '#:G808))
</code></pre>
<p>I expected <code>0</code> as a response for this query, but got <code>nil</code> instead. I suspect that <code>#</code> and <code>:</code> have some special meaning, but item <code>'#:G808</code> anycase does belong to the list <code>'#:G808</code> doesn't it?</p>
","1","Question"
"78638542","","<p>I have the following list in Python:</p>
<pre><code>N = [1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]]
</code></pre>
<p>and I want to flatten it out and get a list of lists like this</p>
<pre><code>[[1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5]]
</code></pre>
<p>I tried:</p>
<pre><code>sum(map(lambda x: [x, x, x], [x]), N)
</code></pre>
<p>but it doesn't work.</p>
","0","Question"
"78639613","","<p>I have a list created from a <code>list(input())</code>, that contains letter and numbers,
like <code>['F', 'G', 'H', '1', '5', 'H']</code>
I don't know the contents of the list before hand.</p>
<p>How would I create a new list that shows the positions of strings that fit a predefined parameter so that I could receive an output like <code>number_list = [3, 4]</code> and <code>letter_list = [0, 1, 2, 5]</code>?</p>
<p>I think my answer might involve index, <code>enumerate()</code>, and a <code>for</code> loop but I'm not sure how to go about filtering list contents in the way I want.
I want the positional values of the strings in the list so I can use <code>min()</code> and <code>max()</code> functions so that the leftmost letter cant appear after the rightmost number. And later prevent the first number being used from being a 0.</p>
","3","Question"
"78640042","","<p>I started to make a program that reorders the letters in a string
in different ways to practice some Python. I noticed that when using the <code>.append()</code> method in a for loop, only the last iteration was getting appended again and again. I searched for an explanation but all I could
find was as solution to my issue but no good explanation to why it works.</p>
<p>My original code is:</p>
<pre><code>def foo(word):

    wordlist = list(word)
    wordlist_copy = wordlist.copy()
    
    combinations = []
    for char in wordlist:
        for i,let in enumerate(wordlist_copy):
            wordlist_copy[i] = char
            print(wordlist_copy)
            combinations.append(wordlist_copy)     
            
    return combinations
</code></pre>
<p>For the string 'ba' I expected what the print statement is displaying to be stored in <code>combinations</code>.</p>
<p>This being <code>[['b', 'a']['b', 'b']['a', 'b']['a', 'a']]</code>.</p>
<p>However what I got was
<code>[['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a']]</code></p>
<p>The solution I found was to change line 11: <code>combinations.append(wordlist_copy)</code> to <code>combinations.append(list(wordlist_copy))</code>.</p>
<p>Why is it that using the <code>list</code> method fixes my issue? I am already appending the <code>wordlist_copy</code> list on each iteration of the loop, so I can't understand how the method would do anything special here.</p>
","0","Question"
"78642298","","<p>I have created the following pandas dataframe</p>
<pre><code>import pandas as pd
import numpy as np

ds = {
      'col1' : 
          [
              ['U', 'U', 'U', 'U', 'U', 1, 0, 0, 0, 'U','U', None],
              [6, 5, 4, 3, 2],
              [0, 0, 0, 'U', 'U'],
              [0, 1, 'U', 'U', 'U'],
              [0, 'U', 'U', 'U', None]
              ]
      }

df = pd.DataFrame(data=ds)
</code></pre>
<p>The dataframe looks like this:</p>
<pre><code>print(df)
                                      col1
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]
1                          [6, 5, 4, 3, 2]
2                          [0, 0, 0, U, U]
3                          [0, 1, U, U, U]
4                       [0, U, U, U, None]
</code></pre>
<p>For each row in <code>col1</code>, I need to check if every element equals to <code>U</code> in the list is followed (from left to right) by any value apart from <code>U</code> and <code>None</code>: in that case I'd create a new column (called <code>iCount</code>) with value of 1. Else 0.</p>
<p>In the example above, the resulting dataframe would look like this:</p>
<pre><code>                                      col1 iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]      1
1                          [6, 5, 4, 3, 2]      0
2                          [0, 0, 0, U, U]      0
3                          [0, 1, U, U, U]      0
4                       [0, U, U, U, None]      0
</code></pre>
<p>Only in the first row the value <code>U</code> is followed by a value which is neither <code>U</code> nor <code>None</code> (it is <code>1</code>)</p>
<p>I have tried this code:</p>
<pre><code>col5 = np.array(df['col1'])

for i in range(len(df)):
    iCount = 0

    for j in range(len(col5[i])-1):
        
        print(col5[i][j])
        
        if((col5[i][j] == &quot;U&quot;) &amp; ((col5[i][j+1] != None) &amp; (col5[i][j+1] != &quot;U&quot;))):
            
            iCount += 1
            
        else:
            iCount = iCount
    
</code></pre>
<p>But I get this (wrong) dataframe:</p>
<pre><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       0
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
<p>Can anyone help me please?</p>
","4","Question"
"78644659","","<p>in this def i get TypeError: unhashable type: 'numpy.ndarray' in line retrieved_indices_set = set(retrieved_indices)</p>
<pre class=""lang-py prettyprint-override""><code>def evaluate_retrieval(query_idx, retrieved_indices, relevant_indices):
    # Convert each list element to a tuple
    # Flatten the two-layer list and convert elements to tuples
    arr = np.array(retrieved_indices) #retrieved_indices =&gt; 128 * 128 * 3

# Transpose the array and convert it to a list of tuples
    retrieved_indices = tuple(list(map(tuple, np.vstack(arr.T))))
    print(type(retrieved_indices))

# Create a set from the tuples
    retrieved_indices_set = set(retrieved_indices)
    relevant_retrieved = len(retrieved_indices_set.intersection(relevant_indices_set))
    precision = relevant_retrieved / len(retrieved_indices_set) if len(retrieved_indices_set) &gt; 0 else 0
    return precision

I try this but didn't work
retrieved_indices_tuples = tuple(tuple(tuple(pixel) for pixel in row) for row in retrieved_indices)
</code></pre>
","0","Question"
"78652713","","<p>I need to make some operations with many Excel files with long names of the type &quot;Saratov Region.xls&quot; (I mean that names of these files contain one or more blank spaces).</p>
<p>I tried to write something like</p>
<pre class=""lang-stata prettyprint-override""><code>global reglist = &quot;Saratov Region Samara Region ...&quot;
</code></pre>
<p>and then write</p>
<pre class=""lang-stata prettyprint-override""><code>foreach var of global reglist {
   import excel `var'.xls, clear
   &lt;other commands&gt;
}
</code></pre>
<p>but Stata reads &quot;Saratov&quot;, &quot;Region&quot; and so on as separate elements of the list, so this does not work.</p>
<p>I tried to write somthing like</p>
<pre class=""lang-stata prettyprint-override""><code>global reglist = &quot;Saratov Region&quot; &quot;Samara Region&quot; ...
</code></pre>
<p>but Stata also treats &quot;Saratov&quot;, &quot;Region&quot; and so on as separate elements of the list, and writes error meassage &quot;invalid &quot;Samara Region&quot;.</p>
<p>How should I define this list for this to work?</p>
","1","Question"
"78653260","","<p>What's the best way to compare two lists of string in terraform?</p>
<p><code>[&quot;arm64&quot;] == [&quot;arm64&quot;]</code> evaluates to false</p>
<p>My use case is constructing lambda extension ARNs based on <code>aws_lambda_function</code>'s <code>architectures</code>, which has valid values <code>[&quot;arm64&quot;]</code> and <code>[&quot;x86_64&quot;]</code>.  I fell back to comparing <code>architectures[0]</code>, but that's not quite what I wanted to say: if the valid values expands in the future by allowing multiple values in the list, it may not fail fast with a clear error.</p>
","-3","Question"
"78655079","","<pre><code>lst = [6, 3, 0]

keepGoing = True

while keepGoing == True:
    for element in lst:
        thiselem = element
        if lst[lst.index(thiselem)] != lst[-1]:
            nextelem = lst[lst.index(thiselem) + 1]
            if int(thiselem) &gt; int(nextelem):
                lst[lst.index(thiselem) + 1] = thiselem
                lst[lst.index(thiselem)] = nextelem
            print(lst)
</code></pre>
<p>and the output is</p>
<pre><code>[0,6,3] 
</code></pre>
<p>over and over.</p>
<p>I wanted it to print the sort as it goes like...</p>
<pre><code>[3,6,0]
[3,0,6]
[0,3,6]
</code></pre>
<p>AND THEN repeat [0,6,3] over and over. Why doesn't it do that?</p>
","0","Question"
"78657609","","<p>I have a <code>List[List[int]]</code> that represents points [x,y]</p>
<pre><code>points = [[1,2],[1,3],[2,1],[2,3]]
</code></pre>
<p>What is the most efficient way to gather-up all the points with a specific height ?</p>
<p>So if we want all points with a height of 3 ( y == 3 ) :</p>
<pre><code>answer = [[1,3],[2,3]]
</code></pre>
<p>I'm assuming there is a more efficient way than this :</p>
<pre><code>answer = []
for p in points:
    if p[1] == 3:
        answer.append(p)
</code></pre>
<p>Further, how to query the set of distinct heights that have at least one point ?</p>
<pre><code>answer = [1,2,3]
</code></pre>
","0","Question"
"78658989","","<p>I'm trying to add typed in numbers to a list.</p>
<pre><code>box = [int(x) for x in input(&quot;Type numbers here: &quot;).split()]

box.sort(reverse=False)

print(box)
</code></pre>
<p>This code gets ValueError whenever there is any special character. Meaning you need to type numbers with spaces between them and if there is a comma it doesn't work. It's not allowing float numbers. I changed type to float to allow numbers such as 2,5 and experimented with <code>re.sub()</code> but it doesn't work.</p>
","-2","Question"
"78663584","","<p>Given an integer list and a key, I am required to group the list by greater than or equal to the key, or less than the key.</p>
<p>For example, When</p>
<p><code>key = 6</code> and <code>lst = [1, 1, 1, 0, 0, 6, 10, 5, 10]</code></p>
<p>Output should be:</p>
<p><code>[[1, 1, 1, 0, 0], [6, 10], [5], [10]]</code></p>
<p>A new sublist must be created if while looping a new condition is met. When the process of grouping is over, the sublists are placed into a list. If the list is empty, it returns an empty list.</p>
<pre><code>def group_ints(lst, key):
    greater_or_equal = []
    lessthan = []
    result = []
    
    if lst == None:
        return []
    else: 
        for i in lst:
            if i &gt;= key:
                greater_or_equal.append(i)
            elif i &lt; key:
                lessthan.append(i)
        if greater_or_equal:
            result.append(greater_or_equal)
        if lessthan:
            result.append(lessthan)
    return result
</code></pre>
","1","Question"
"78665822","","<p>I have a python list as seen</p>
<p>base-list</p>
<pre><code>['Year Built 2016', 'Floor 7', 'Year Built 2019', 'Floor 23', 'Year Built 2015', 'Floor 12', 'Year Built 2006', 'Floor 8', 'Year Built 2015', 'Floor 23', 'Year Built 2015', 'Floor 28', 'Year Built 2008', 'Floor 19', 'Year Built 2014', 'Floor 3', 'Year Built 2019', 'Floor 33', 'Year Built 1997', 'Floor 31', 'Year Built 2015', 'Floor 17', 'Year Built 2015', 'Floor 33', 'Year Built 1996', 'Floor 8', 'Year Built 2009', 'Floor 3', 'Year Built 2008', 'Floor 13', 'Year Built 2006', 'Floor 30', 'Year Built 2018', 'Floor 2', 'Year Built 2008', 'Floor 34', 'Year Built 2019', 'Floor 23', 'Year Built 2022', 'Floor 31', 'Year Built 2006', 'Floor 14', 'Year Built 2021', 'Floor 7', 'Year Built 2015', 'Floor 36', 'Year Built 2015', 'Floor 10', 'Year Built 2015', 'Floor 32', 'Year Built 2015', 'Floor 26', 'Year Built 2019', 'Floor 40', 'Year Built 2015', 'Floor 8', 'Year Built 2015', 'Floor 6']
</code></pre>
<p>from this list I wish to make new 2 seperate list. one for only 'Year built' and one for only 'Floor'. anyone can give me advince on how to do this?</p>
<p>I have try this method</p>
<p>year_built_list = [i for i in base_list if base_list[i].startwith('Y')]</p>
<p>*year_built_list is the new list I tried to create</p>
<p>but it's not working</p>
","0","Question"
"78666607","","<p>I have a text file with Folder Paths which looks like this</p>
<pre><code>Folder1
Folder1/SubFolder1
Folder1/SubFolder1/SubSubFolder1
Folder1/SubFolder1/SubSubFolder2
Folder1/SubFolder1/SubSubFolder3
Folder1/SubFolder1/SubSubFolder4
Folder1/SubFolder2
Folder1/SubFolder2/SubSubFolder1
Folder1/SubFolder2/SubSubFolder2
Folder1/SubFolder2/SubSubFolder3
Folder1/SubFolder2/SubSubFolder4
Folder1/SubFolder2/SubSubFolder5
Folder1/SubFolder2/SubSubFolder6
Folder1/SubFolder2/SubSubFolder6/SubSubSubFolder1
Folder1/SubFolder3
Folder2
Folder2/SubFolder1
Folder2/SubFolder1/SubSubFolder1
Folder2/SubFolder1/SubSubFolder2
Folder2/SubFolder1/SubSubFolder3
Folder2/SubFolder1/SubSubFolder4
Folder2/SubFolder2
Folder2/SubFolder2/SubSubFolder1
Folder2/SubFolder2/SubSubFolder2
Folder2/SubFolder2/SubSubFolder3
Folder2/SubFolder2/SubSubFolder4
Folder2/SubFolder2/SubSubFolder5
Folder2/SubFolder2/SubSubFolder6
Folder2/SubFolder2/SubSubFolder7
Folder2/SubFolder2/SubSubFolder6/SubSubSubFolder1
Folder2/SubFolder3
Folder2/SubFolder4
</code></pre>
<p>Now What I want is a dictionary of string and int which saves folder name and count
number of files/folder in it (only Top Level)</p>
<pre><code>Folder1, 3                  // SubFolder1, SubFolder2, SubFolder3
Folder1/SubFolder1,4            // SubSubFolder1, SubSubFolder2, SubSubFolder3, 
Folder1/SubFolder2,6       //SubSubFolder1, SubSubFolder2, SubSubFolder3, SubSubFolder4, SubSubFolder5, SubSubFolder6
Folder1/SubFolder2/SubSubFolder6,1         //SubSubSubFolder1
Folder1/SubFolder3,0
Folder2,4                // SubFolder1, SubFolder2, SubFolder3, SubFolder4
Folder2/SubFolder1,4        // SubSubFolder1, SubSubFolder2, SubSubFolder3, SubSubFolder4
Folder2/SubFolder2,7       // SubSubFolder1, SubSubFolder2, SubSubFolder3, SubSubFolder4, SubSubFolder5, SubSubFolder6, SubSubFolder7
Folder2/SubFolder2/SubSubFolder6,1             //SubSubSubFolder1
Folder2/SubFolder3,0  
Folder2/SubFolder4,0 
</code></pre>
<p>I can iterate it over all lines , but I guess it will get a bit complicated and messy</p>
<pre><code> var allLines = File.ReadAllLines(filePath);
 foreach (var line in allLines)
 {
    var subFolderCount = 0;
    var subFolderPath = Path.Combine(folderPath, line);
   //...
 }
</code></pre>
<p>but I was wondering is there any easier and efficient way to do this?</p>
","2","Question"
"78668248","","<p>I am trying to create a fixture for unit testing. I retrieve data from an API and need data that looks like what I get from the API without making the call to the API. I need to create a number of list literals that capture different scenarios for the unit test. Here is the string representation of the list I'm trying to convert to a list:</p>
<pre><code>[(3479865,
  PaginatedManagedEntityHeaders(
  success=True, 
  count=0, 
  rows=[
  ManagedEntityHeader(
  case_role='Reference',
  display_name='Person A',
  entity_type='PERSON', 
  unique_id=247878382, 
  is_active='1', 
  date_created=datetime.datetime(2021, 10, 18, 16, 29, 6, 535000, tzinfo=TzInfo(UTC))),
  ManagedEntityHeader(
  case_role='Reference', 
  display_name='Person B', 
  entity_type='PERSON', 
  unique_id=247563788, 
  is_active='0', 
  date_created=datetime.datetime(2021, 9, 8, 21, 4, 29, 631000, tzinfo=TzInfo(UTC)))]
))]
</code></pre>
<p>I have saved this as a JSON file: &quot;test_fixture.json&quot;. I could also save it as a text file. It imports successfully as a string. I don't think I can create this list in Python code without receiving numerous errors, but maybe there is a way to do it. Here is what I have tried so far to convert the string to a list.</p>
<pre><code>import os
import json
import ast
import re

the_file = os.path.join(r&quot;test_fixture.json&quot;)

file_str = open(the_file).read()

meth1 = file_str.strip(&quot;][&quot;).split(&quot;, &quot;)
# receive a list of 25 instead of a list of 1

meth2 = ast.literal_eval(file_str)
# ValueError: malformed node or string on line 2: &lt;ast.Call object at 0x000002241687F8E0&gt;

meth3 = json.loads(file_str)
# JSONDecodeError: Expecting value

elements = re.findall(r&quot;\d+&quot;, file_str)
meth4 = [int(x) for x in elements]
# receive a list of 20 instead of a list of 1

meth5 = eval(file_str)
# NameError: name 'PaginatedManagedEntityHeaders' is not defined

meth6 = list(map(int, file_str[1:-1].split(&quot;,&quot;)))
# ValueError: invalid literal for int() with base 10: '(3479865'
</code></pre>
<p>Is there another method (<code>meth_that_worked</code>) that will successfully convert the string into a list of 1 element?</p>
<p><code>print(meth_that_worked)</code> should produce output identical to the string representation of the list above.</p>
<p><code>print(type(meth_that_worked))</code> should produce <code>&lt;class 'list'&gt;</code>. <code>print(len(meth_that_worked))</code> should produce <code>1</code>.</p>
<p><strong>Update</strong></p>
<p>Based on some of the comments, I tried addressing the namespace errors received when executing <code>eval(file_str)</code> as follows:</p>
<pre><code>def ManagedEntityHeader(*args, **kwargs):
    pass

def TzInfo(*args, **kwargs):
    pass

def UTC(*args, **kwargs):
    pass
</code></pre>
<p>Then I received the following error:</p>
<pre><code>ValidationError: 2 validation errors for PaginatedManagedEntityHeaders
rows.0
  Input should be a valid dictionary or object to extract fields from [type=model_attributes_type, input_value=None, input_type=NoneType]
    For further information visit https://errors.pydantic.dev/2.6/v/model_attributes_type
rows.1
  Input should be a valid dictionary or object to extract fields from [type=model_attributes_type, input_value=None, input_type=NoneType]
    For further information visit https://errors.pydantic.dev/2.6/v/model_attributes_type
</code></pre>
<p>Then I created a function similar to the ones above to address this error:</p>
<pre><code>def PaginatedManagedEntityHeaders(*args, **kwargs):
    pass
</code></pre>
<p>After doing this, a list was successfully created, but the list content was truncated compared to the original string representation of the list:</p>
<pre><code>[(3479865, None)]
</code></pre>
","0","Question"
"78674911","","<p>I'm still a beginner at Python. Here is my list:</p>
<pre><code>['Kaivopuisto', ('24.950292890004903', '60.155444793742276'),
 'Laivasillankatu', ('24.956347471358754', '60.160959093887129'),
 'Kapteeninpuistikko', ('24.944927399779715', '60.158189199971673'), 
 'Viiskulma', ('24.941775800312996', '60.16098589997938'), 
 'Sepankatu', ('24.93628529982675', '60.157948300373846'), 
 'Hietalahdentori', ('24.929709900391629', '60.162225100108344'), 
 'Designmuseo', ('24.945959999554361', '60.163103199952786'),
 'Vanha kirkkopuisto', ('24.939149900447603', '60.165288299815245'), 
 'Erottajan aukio', ('24.944134928883898', '60.166911666939939')]
</code></pre>
<p>I need to create a new dictionary with the string (name) as the key and the tuple as the value. For clarification, the string is the name of a city in Finland and the tuple is longitude and latitude for the city. I really could use some guidance please.</p>
<p>I tried list comprehension, I tried a for loop, I tried the update method - I can't get anything to work.</p>
","-1","Question"
"78675314","","<p>In python I used itertools combination to get all unique 5 combinations:</p>
<pre><code>from itertools import combinations
lst = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;,&quot;e&quot;, &quot;f&quot;]
combinations_of_5 = list(combinations(lst, 5))
</code></pre>
<p>I then have a list of lists that I've filtered to only include items from lst. I now need to count the most popular combination found in a list of lists.</p>
<pre><code>lst_of_lsts = [
               [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
               [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
               [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
               [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
               [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;,&quot;a&quot;]
              ]
</code></pre>
<p>I thought it would be fairly straight forwards but I've been struggling to find a reliable way to do this and ensure the results are accurate. My actual list of lists is much larger (a few million lists) and I'd like to know the top 10 most popular combinations found in the list of lists. My thought was to maybe use a sliding window technique and see if any of the combinations exist in there.</p>
<p>any help appreciated.</p>
<p>attempted solution provided:</p>
<pre><code>from itertools import combinations
from collections import Counter

lst = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;,&quot;e&quot;]

lst_of_lsts = [
               [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
               [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
               [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
               [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
               [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;,&quot;a&quot;]
              ]

combinations_of_5 = set(combinations(lst, 5))

data = map(tuple, lst_of_lsts)
c = Counter(comb for comb in data if comb in combinations_of_5)
print(c.most_common(10))
</code></pre>
<p>this returns []</p>
","0","Question"
"78680199","","<p>I am using a Databricks PySpark notebook. I am trying to find the most efficient way of finding the most frequent combinations in a list of lists. The number of combinations is 3.8 million and number of list of lists is 170000. I wrote an algorithm to do is this in stanard python, but when I fed in 10 lists this took 1 minute to process, so expanding that it would take 280 hours to process all lists. But since I have PySpark I think there may be a more efficient way of handling this, or a more efficient way of using standard python code - whichever works. I'd like to keep the processing time under 30 minutes, ideally 10.</p>
<p>Here is my current algorithm but inefficient at handling large number of lists:</p>
<pre><code>from collections import defaultdict

combinations_of_n = [ ('a','b','c'), ('e','f','g'), ('h','i','j') ] # 3.8 million combinations
df_list = [ ['b','v','e','a','b','c'], ['g','g','a','b','c','f','b'], ['i','k','l','a','i','k'] ] # 170000 lists

# Count occurrences of each combination in lst_of_lsts
combination_count = defaultdict(int)

for sublist in df_list:
    for comb in combinations_of_n:
        if all(elem in sublist for elem in comb):
            combination_count[comb] += 1

# Find the top 5 most frequent combinations
top_combinations = sorted(combination_count.items(), key=lambda x: x[1], reverse=True)[:5]

# Print the results
print(&quot;Top 5 most frequent combinations:&quot;)
for comb, count in top_combinations:
    print(f&quot;{comb}: {count} occurrences&quot;)
</code></pre>
<p>Any help appreciated</p>
","3","Question"
"78681724","","<p>I am working on a large list of data. The list should look like this</p>
<pre><code>List=[1,2,3,0,0,0,0,4,5,6,0,0,0,7,8,9]
</code></pre>
<p>It consists of chain of positive number, and is discreted by 0 values. I want to take to chain of positive numbers and put them in separate lists in stead of only one list of positive numbers. The output should be like this</p>
<pre><code>List1=[1,2,3]
List2=[4,5,6]
List3=[7,8,9]
</code></pre>
<p>So the first set of positive numbers is filter and the loop is break when 0 is encountered. Then a new list is created with the filtered elements. After that enter a new loop and do that process one more time until the last element of the original list.
Also the number of list is unknown.</p>
<p>I try to generate a set of lists of positive values. It seems like for loop and while loop is insufficient. Really need help on this one, really appreciate your help.</p>
","0","Question"
"78691438","","<p>I have a couple dictionaries with differing values for the same keys.
I have a list of these dicts and I want to return the values from only 1 of the dicts based on the matched keys inside a different list or string.
I want it to reflect the dict with a matching list index as the first str in the other list.</p>
<pre><code>group1 = {'1': [0, 0], '2': [2, 2], '3': [3, 3], '4': [4, 4], '5': [5, 5]}
group2 = {'1': [2, 2], '2': [0, 0], '3': [4, 4], '4': [5, 5], '5': [6, 6]}
group3 = {'1': [3, 3], '2': [4, 4], '3': [0, 0], '4': [6, 6], '5': [7, 7]}

group_selection = [group1, group2, group3]

example = ['2', '5', '3', '3', '1', '2']

groups_assigned = [group_selection[k] for k in example]
print(groups_assigned)
# Desired goal is [[0, 0], [6, 6], [4, 4], [4, 4], [2, 2], [0, 0]]   
</code></pre>
<p>So far the only way that has worked is</p>
<pre><code>result = [groups_assigned[1][k] for k in example]
</code></pre>
<p>I want to be select through the list of dicts to get the correct dict.
For the first value in list being '2' it should return the group2 dict values for all remaining string values in list from rest of keys in that dict.
'1' would relate to group1, '2' would relate to group2 for as reference</p>
<p>['1', '2', '4', '5'] = [[0, 0], [2, 2], [4, 4], [5, 5]]
and
['3', '1'] = [[0,0], [3, 3]]</p>
","-1","Question"
"78692207","","<p>In the code below I am mapping data that I got by paralelly downloading objects from AzureDevOps Rest Api. I noticed some weird bottlenecks in my code when transforming the <em>mapDictionary</em> to to an excel sheet in different module of the codebase. It took forever to make a simple foreach over thousand objects because the references to the mapDictionary are lazy loaded.</p>
<pre><code>private Dictionary&lt;int, IEnumerable&lt;CodeReviewResponse&gt;&gt; MapToCodeReviewRequests(
    IEnumerable&lt;WorkItemBatchResponse&gt; workItemBatchResponses,
    WiqlResponse? workItemRelations)
{
    Dictionary&lt;int, IEnumerable&lt;CodeReviewResponse&gt;&gt; mapDictionary =
        new Dictionary&lt;int, IEnumerable&lt;CodeReviewResponse&gt;&gt;();
    IEnumerable&lt;int&gt;? codeReviewRequestIds = workItemRelations?.workItemRelations
        .Where(y =&gt; y.source is not null)
        .Select(x =&gt; x.source.id)
        .Distinct();
        
    foreach(int codeReviewId in codeReviewRequestIds)
    {
        var codeReviewResponseIds = workItemRelations?.workItemRelations
            .Where(x =&gt; x.source is not null &amp;&amp; x.source.id.Equals(codeReviewId))
            .Select(x =&gt; x.target.id).ToList();

        if (codeReviewResponseIds is not null &amp;&amp; codeReviewResponseIds.Count() &gt; 0)
        {
            mapDictionary[codeReviewId] = workItemBatchResponses
                .SelectMany(x =&gt; x.value)
                .Where(x =&gt; codeReviewResponseIds.Contains(x.fields.SystemId));
        }
    }
    
    return mapDictionary;
}  
</code></pre>
<p>If <em>codeReviewResponseIds</em> is a List of ints (as it is in the example) then my data are not lazy loaded and my iteration over those references are fast, if I store it without the .ToList() then it takes forever to compute them, why?</p>
","0","Question"
"78693574","","<p>Suppose I have python list like this:</p>
<pre><code>master_list = ['a_1', 'b_4', 'd_2', 'c_3', 
              'a_2', 'c_1', 'd_4', 'b_3', 
              'd_3', 'c_2', 'a_4', 'b_1', 
              'c_4', 'a_3', 'b_1', 'd_1']
</code></pre>
<p>Each item in the list is a letter, underscore, and number. I want a dictionary to group this items by number in a list like this:</p>
<pre><code> my_dict = {'1': [], '2': [], '3': [], '4':[]}
</code></pre>
<p>While I could use the following to populated my lists inside <code>my_dict</code>, it seems awkward. Is there a more efficient way to achieve this?</p>
<pre><code>for item in master_list:
    if '_1' in item:
        my_dict['1'].append(item)
    elif '_2' in item:
        my_dict['2'].append(item)
    elif '_3' in item:
        my_dict['3'].append(item)
    elif '_4' in item:
        my_dict['4'].append(item)
</code></pre>
","0","Question"
"78694506","","<p>I'm attempting a silly little &quot;random&quot; number generator to try to get to grips with how lists and pulling values from them works in python.</p>
<p>I have a variable defined as x, and I ask the code to pull a value from the list at the index of x.
After shuffling the list and asking it to pull the value from index x, it pulls the value from the original list instead of the newly shuffled list.</p>
<p>I'm certain I'm missing something fairly obvious about how the list is shuffled. I originally assumed it's because it's generating a new list upon shuffling instead of actually modifying the original list. However, when printing the original value for list it does show it as the shuffled list and not the original, meaning the original list has actually been modified unless I'm mistaken. I am having a heck of a time troubleshooting this.</p>
<pre><code>import random
numbers = [2, 1, 3, 1, 2]
x = 2 # I plan to import x from a dict with various values 

get_shuffled_number = numbers[x]
print(numbers)
print(get_shuffled_number) #shows the value expected upon print
random.shuffle(numbers) 
print(numbers) #shows the shuffled list
print(get_shuffled_number) #this pulls the original value from the list at index (x) before being shuffled
</code></pre>
<p>gets the output</p>
<pre><code>[2, 1, 3, 1, 2]
3
[1, 2, 2, 3, 1]
3
</code></pre>
<p>so numbers[x] is pulling the index of 2 from the original list and not the shuffled list after being shuffled.</p>
","0","Question"
"78705016","","<p>I am building a function to split an input string into two lists as they are numbers, and find an intersection between both. My code runs fine in VSCode(Desktop) Python 3.12, no errors, but when I tried to run it on a Cloud(Coderbytes), returns an error saying the input is a list, and hence it has no split attribute ... Really confusing</p>
<pre><code>def FindIntersection(strArr):
    # Split the input string using '&quot;' and extract the lists
    strArr = strArr.split('&quot;')

    
    # The lists are at indices 1 and 3 after splitting by '&quot;'
    first = strArr[1]
    second = strArr[3]
    
    # Convert the strings to lists of integers
    One = [int(x) for x in first.strip(&quot;[] &quot;).split(&quot;, &quot;)]
    Two = [int(x) for x in second.strip(&quot;[] &quot;).split(&quot;, &quot;)]
    
    # Find the intersection using set intersection
    intersection = list(set(One).intersection(Two))
    
    # Create a comma-separated string from the intersection

    strArr = &quot;, &quot;.join(map(str, intersection))
    
    # Return the result
    return strArr

# Keep this function call here
print(FindIntersection(input()))
</code></pre>
<p>If I enter this string as input</p>
<p>[&quot;1, 3, 4, 7, 13&quot;, &quot;1, 2, 4, 13, 15&quot;]</p>
<p>The Output is: 1,4,13</p>
<p>and is fine in VSCode desktop version, but in
Coderbytes Cloud interpreter it gets the error</p>
<p>*
Traceback (most recent call last):</p>
<p>File &quot;/home/glot/main.py&quot;, line 23, in 
print(FindIntersection([&quot;1, 3, 4, 7, 13&quot;, &quot;1, 2, 4, 13, 15&quot;]))</p>
<p>File &quot;/home/glot/main.py&quot;, line 3, in FindIntersection
strArr = strArr.split('&quot;')</p>
<p>AttributeError: 'list' object has no attribute 'split'*</p>
<p>So my question is why Coderbytes recognizes the string as a list?
While VSCode validates it?</p>
","0","Question"
"78705440","","<p>I have a reprex as follows:</p>
<pre><code>library(dplyr)
library(purrr)

df1 &lt;- data.frame(
  col1 = 1:5,
  col2 = 6:10
)

df2 &lt;- df1 %&gt;% 
  mutate(col3 = 1:5)


ls &lt;- list(
  a = list(df1 = df1),
  b = list(
    df1 = df1,
    df2 = df2
  ),
  c = list(
    df2 = df2
  )
)
</code></pre>
<p>I want to filter <code>ls</code> so that elements of <code>ls</code> that contain <code>col3</code> by name are kept.</p>
<p>I have tried using keep but I am unable to index correctly at the right depth.</p>
<p>Expected solution:</p>
<pre><code>list(
  b = list(
    df2 = df2
  )
  ,c = list(
    df2 = df2
  )
)
</code></pre>
<p>This is close:</p>
<pre><code>ls %&gt;% 
  map(
    ~keep(.x, ~ &quot;col3&quot; %in% names(.x))
  )
</code></pre>
","6","Question"
"78708727","","<p>I have two lists containing about 5 million items each. <code>List_1</code> is a list of tuples, with two strings per tuple. <code>List_2</code>, is a long list of strings.</p>
<p>I am trying to find a compound string, made from those tuples, in <code>List_2</code>.</p>
<p>So if the tuple from <code>List_1</code> is <code>(&quot;foo&quot;, &quot;bar&quot;)</code>, and <code>List_2</code> contains <code>[&quot;flub&quot;, &quot;blub&quot;, &quot;barstool&quot;, &quot;foo &amp; bar: misadventures in python&quot;]</code>, I would be trying to to fetch &quot;foo &amp; bar: misadventures in python&quot; from <code>List_2</code>.</p>
<p>The way that I currently do it is by iterating through <code>List_1</code>, and comprehension to scan through <code>List_2</code>. While the search through <code>List_2</code> is fast, taking about a second to execute, it would need to iterate through all of <code>List_1</code>, and therefore requires an inordinate amount of time (the better part of 1000 hours) to complete, which made me wonder if there was a faster, more efficient way to do the same thing.</p>
<p>Code Example:</p>
<pre class=""lang-py prettyprint-override""><code>list_1 = [] #Insert List
list_2 = [] #Insert List

for search_term in list_1:
    compound_string = &quot;{search_first} &amp; {search_second}&quot;.format(search_first=search_term[0], search_second=search_term[1])
    result = next((s for s in list_2 if compound_string in s), None) #Short-circuit, so we don't need to search through the whole list
    if result:
        #do exciting things
</code></pre>
<p>I looked into using a set and intersection to perform the comparison, however, using a set intersection to do the comparison only works with whole strings. As I do not know the whole string ahead of time, using that method doesn't seem feasible without using a for loop and lists, which would run into the same problem.</p>
","2","Question"
"78709357","","<h3>Problem</h3>
<p>There are 1, 2, 3, 4 number card in a bag.</p>
<ul>
<li>If you pick up 1, add one white ball into box_b.</li>
<li>If you pick up 2 or 3, add one white ball and one balck ball into box_b.</li>
<li>If you pick up 4, add two white balls and one black ball into box_b.</li>
<li>You must put the card back in your pocket every time you pull it out.</li>
<li>You have to do this 4 times.</li>
</ul>
<p>When there are  8 balls in box_b, what is the probability that the number of black balls in the box is 2?</p>
<h3>Code</h3>
<pre><code>import math

#흰공=0 검은공=1
box_b = list()

#조건부확률 = box_b 원소 개수 8개(=e)이면서 1이 2개(=f)일 확률 / e 확률
cnt_e = 0 
cnt_ef = 0

for i in range(1, 5) : 
    if i == 1 :
        box_b.append(0)
    if i == 2 or i == 3 :
        box_b.append([0, 1])
    if i == 4 :
        box_b.append([0, 0, 1])
    for j in range(1, 5) :
        if j == 1 :
            box_b.append(0)
        if j == 2 or j == 3 :
            box_b.append([0, 1])
        if j == 4 :
            box_b.append([0, 0, 1])
        for k in range(1, 5) :
            if k == 1 :
                box_b.append(0)
            if k == 2 or k == 3 :
                box_b.append([0, 1])
            if k == 4 :
                box_b.append([0, 0, 1])
            for l in range(1, 5) :
                if l == 1 :
                    box_b.append(0)
                if l == 2 or l == 3 :
                    box_b.append([0, 1])
                if l == 4 :
                    box_b.append([0, 0, 1])
                print(box_b)
</code></pre>
<h3>output</h3>
<p>Output should be like <code>[0, [0,1], [0,0,1], [0,1]], [...]</code>, but it's output is <code>[0, [0,1], 0, [0,1], 0, [0,1], 0, [0,1] .... (very long list)...] [..]</code></p>
<p>What's wrong with my code?</p>
<ul>
<li>My teacher said that the box_b should be reseted when i, j, k, l change. Because of it, the result has been piled up. But he and I don't know which line the reset point should go into.</li>
</ul>
<p>++ It is not duplicate : I tried i == 2 or i == 3(seperation of two conditions), but it isn't major problem which I look for. There are still problems.</p>
","1","Question"
"78709598","","<p>Searching an element in a set takes O(1) time complexity while searching in a list takes O(n) time complexity. The n is the number of elements in a set or list.</p>
<p>In my test on the real searching time cost, the n is set to 1,000,000 which I believe is a big number. The test results are 48.3 msec in the set vs 28 msec in the list, which shows searching in a list is faster than searching in a set and contradicts the time complexity analysis. I tried increasing n and comparing the searching speed, and it turns out that the finding holds true until I get a memory error when n is very big.</p>
<p>(base) PS C:\Users&gt; python -m timeit -n 100 &quot;300 in set(range(1000000))&quot;</p>
<p>100 loops, best of 5: 48.3 msec per loop</p>
<p>(base) PS C:\Users&gt; python -m timeit -n 100 &quot;300 in list(range(1000000))&quot;</p>
<p>100 loops, best of 5: 28 msec per loop</p>
<p><a href=""https://i.sstatic.net/eG2beOvI.png"" rel=""nofollow noreferrer"">time cost results</a></p>
<p>Could you help me understand why the performance of searching sequence in a list is better than in a set in Python?</p>
<p>I cannot understand.</p>
","5","Question"
"78710656","","<p>I have some repeat scenarios where I have an initial list, then I want to add some additional values to the end of the list by taking the last value and adding a constant to it.</p>
<p>I want to repeat this for some x amount of times, taking the previous list value and adding the same constant to it.</p>
<p>I'm quite new to Python and I have got a working approach per below.  I feel like I need the interator 'index' so that I can call the previous item in the list. It means the &quot;items&quot; variable is literally doing nothing which has me thinking that there would be a better way to do this. Any suggestions?</p>
<pre><code>starting_list = [1, 5, 3]
increment = 7

additional_items = 5

for index, items in enumerate(range(additional_items), start=3):
    starting_list.append(starting_list[index - 1] + increment)

print(starting_list)
</code></pre>
<p>this gives me the desired output per below:</p>
<pre><code>[1, 5, 3, 10, 17, 24, 31, 38]
</code></pre>
","1","Question"
"78714113","","<p>I need to make a list of pairs from several other lists. The pairs will consist of a value from the same position in each list. There could be a varying number of lists, but each list will have the same number of values. It's not quite combinations/permuations I think because some values need to be repeated.</p>
<p>Easier to explain with an example:</p>
<pre><code>list_a = [1, 2, 3, 4, 5]
list_b = [6, 7, 8, 9, 10]
list_c = [11, 12, 13, 14, 15]
list_d = [16, 17, 18, 19, 20]

Output required = [(1,6),(6,11),(11,16),(2,7),(7,12),(12,17)....etc]
</code></pre>
<p>The output doesn't necessarily have to be a list of tuples but I figured something like that would be most reasonable. It could be separated further with each 'column' of pairs being their own list, but that's not important.</p>
<p>I was going to brute force it with loops but I'm sure there's a better way. I feel like it's down the path of zips and itertools but I can't get it. This post about equal sized chunks was almost it, but you can see from the example above that I need to re-use the preceeding value in the next pair. <a href=""https://stackoverflow.com/questions/312443/how-do-i-split-a-list-into-equally-sized-chunks"">How do I split a list into equally-sized chunks?</a></p>
","0","Question"
"78715435","","<p>I want to break the string:</p>
<pre><code>value1/672/value2/32/value3/21413
</code></pre>
<p>In a</p>
<pre><code>Dictionary&lt;string, string&gt;
</code></pre>
<p>How can I do this without the use for a for loop?</p>
","-3","Question"
"78716763","","<p>I am currently new with coding in Python with CSV files, and need help with the following code:</p>
<pre><code>import csv
import random

# Initialize an empty list to store the CSV variables
CSVars = []

# Read the CSV file
with open('greeting.csv', 'r') as f:
    reader = csv.reader(f)
    for _ in range(16):  # Assuming there are 16 rows in the CSV
        CSVars.append(next(reader))
    print(random.choice(CSVars))
</code></pre>
<p>Basically, in this code, I get a random value from a file called 'greeting.csv'. However, whenever I get a value, it is always in this format -&gt; '[value]'. Does anyone know to strip it and make it -&gt; value?</p>
<p>I tried to append it to a list in different ways, but do not know how to 'strip it'.</p>
","0","Question"
"78718381","","<p>Is there a library function that creates recursive lists in the following sense,</p>
<pre><code>recursive_list(f, x0, n) = [x0, f(x0), f(f(x0)), f(f(f(x0))), ...]
</code></pre>
<p>with <code>n</code> elements in the returned list?</p>
<p>If not, how can this be written?</p>
","0","Question"
"78718891","","<h4>Basic Facts</h4>
<ul>
<li>Lists are mutable (supporting inserts, appending etc.), Tuples are not</li>
<li>Tuples are more memory efficient, and faster to iterate over</li>
</ul>
<p>So it would seem their use-cases are clear. Functionally speaking, lists offer a superset of operations, tuples are more performant at what they do.</p>
<h4>Observation</h4>
<p>Most arrays that my team creates in the course of a program, are in fact, perfectly fine as immutable. We iterate over them, apply map, reduce, filter on them, may be insert into a database from them etc. all without insertion, popping or appending on the array-like-structure.</p>
<h4>Question</h4>
<p>Yet, a list seems to be not only the default (and only) choice among my developers, but seems even favoured by many library APIs to pass data around (like polars, tensorflow etc. which I use heavily).</p>
<p>And not even like using Tuples require some special skill, knowledge or understanding another-data-structure, it's really the same in terms of necessary syntax to subscript, or iterate.</p>
<p>What am I missing in the reasoning here?</p>
","5","Question"
"78723343","","<p>I have a list
<code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']</code>
I want to implement a Shift Cipher.
User input is a word and the number of places to shift.
Eg: If I choose the word hello and want a shift of 5, the new word would be mjqqt. The letter 'h' shifted by 5 letters becomes 'm', 'e' shifted by 5 letters becomes 'j' and so on.
I am able to do this as long as the
position of the original letter + shift amount is less than 26(len(alphabet)) at which point it reaches the end of the list and throws a list index out of range error.</p>
<p>So how do i get to continue counting from the beginning of the list after reaching the end.</p>
<p>Tried
<code>new_letter = alphabet[len(alphabet) - (len(alphabet) - shift -1)]</code>
which didnt give the correct letter after the shift</p>
","-2","Question"
"78726485","","<p>I have the following python lists</p>
<pre><code>import pandas as pd
import numpy as np

listOfChars = ['feature1','feature2']
listOfBins = [[0,1,2],[15,20,30]]
</code></pre>
<p>I need to define each of the elements in <code>listOfChars</code> and assign them the correspondent <code>listOfBins</code> element.</p>
<p>For example, I'd like to get:</p>
<pre><code>feature1 = [0,1,2]
feature2 = [15,20,30]
</code></pre>
<p>Notice that <code>feature1</code> and <code>feature2</code> have no quotes.</p>
<p>And if I print <code>feature1</code> I get:</p>
<pre><code>[0,1,2]
</code></pre>
<p>Does anybody know how to do it in Python?</p>
","0","Question"
"78731904","","<p>This Is My Models :</p>
<pre><code>  public class Result1 
  { 
      public string Price { get; set; }
      public string Id { get; set; } 
  }
  public class Result2
  { 
      public string firstName { get; set; } 
      public string lastName { get; set; }
      public string Id { get; set; } 
  }
  public class JsonResult1
  { 
      public List&lt;Product&gt; ProductLists { get; set; } 
  }
  public class JsonResult2 
  {
      public List&lt;User&gt; UserLists { get; set; } 
  }
</code></pre>
<p>And This is My First And Second Methods</p>
<pre><code>   public async Task&lt;List&lt;Result1&gt;&gt; GetFirstMethod(string id, string a)
   {
       var info = JsonConvert.DeserializeObject&lt;JsonResult1&gt;(a);

       var mylist = new List&lt;Result1&gt;();
       foreach (var item in info.ProductLists)
       {
           mylist.Add(new Result1()
           {
               Price = item.Price,
               Id = item.ID
           });
       }
       return mylist;
   }
   public async Task&lt;List&lt;Result2&gt;&gt; GetSecondMethod(string id, string a)
   {
       var info = JsonConvert.DeserializeObject&lt;JsonResult2&gt;(a);

       var mylist = new List&lt;Result2&gt;();
       foreach (var item in info.UserLists)
       {
           mylist.Add(new Result2()
           {
               firstName = item.FirstName,
               lastName = item.LastName,
               Id = item.ID
           });
       }
       return mylist;
   }
//And the third method and the fourth method and...

</code></pre>
<p>Each method has different models...</p>
<p>How to make a generic method for All the above methods??</p>
<p>The main problem is in the mapping part inside the list...</p>
<p>Is it even possible to do something like this?</p>
","2","Question"
"78738226","","<pre><code>list1 : ['beg', 'begs', 'big', 'bug', 'buggies', 'bugs', 'bus', 'egg', 'eggs', 'gig', 'sub', 'sue', 'use'] BUGGIES
</code></pre>
<p>I have a list of words but want to put the longest word 'buggies' at the end of the list, but keep the order alphabetically except for the longest word. There might be a case where there are more than one word meet the max(len), in that case it would be nice to have those words at the end. but i'm hoping just to get the first one found.</p>
<p>Currently, I am finding that word and putting it outside of the list like shown, but ideally I'd like that shown like this:</p>
<pre><code>list1 : ['beg', 'begs', 'big', 'bug', 'bugs', 'bus', 'egg', 'eggs', 'gig', 'sub', 'sue', 'use', 'buggies']
</code></pre>
<p>Any help on this would be appreciated, I'm just starting to teach myself Python.</p>
<p>What I've tried, well nothing on that but this is what I have currently:</p>
<pre><code>sortedwords = sorted(list, key=len)
possible_words = sorted(list)
print('list1:', possible_words, max(possible_words, key=len).upper())
</code></pre>
","2","Question"
"78740659","","<p>I have a three folders in GCS and I want to create a dictionary that has the folder name as the key and its contents as the values with without the file_type as the values. How do I do this?</p>
<p>For a bit more clarity, the folders are databases and I run</p>
<pre><code>select * from information_schema
</code></pre>
<p>From there, I break down the files as needed and then place the csv files in the folders.
After the folder and contents are created I send the dictionary to other teams.</p>
<p>Example:
In the following folder I have these files
<code>temp_folder/stats/data_transfer/</code></p>
<pre><code>extraction.csv
united_sync.csv
united_configs.csv
united_history.csv
</code></pre>
<p>In another folder
<code>temp_folder/stats/appointments/</code>
I have the following</p>
<pre><code>appointment_history.csv
appointment_configs.csv
appointment_transactions.csv
</code></pre>
<p>Expected Outcome:</p>
<pre><code>folders_dict = {
    'data_transfer': ['extraction', 'united_sync', 'united_configs', 'united_history'],
    'appointment': ['appointment_history', 'appointment_configs', 'appointment_transactions']
}
</code></pre>
","-3","Question"
"78744879","","<p>I need to convert a dictionary in a form <code>{1: ['a', 'b', 'c', 'd'], 2: ['e', 'f', 'g', 'h']}</code> to a list of tuples in a form <code>[(1, 'a', 'b', 'c', 'd'), (2, 'e', 'f', 'g', 'h')]</code>.</p>
<p>When I try that:</p>
<pre><code>dictionary = {1: ['a', 'b', 'c', 'd'], 2: ['e', 'f', 'g', 'h']}

list_of_tuples = [(k, v) for k, v in dictionary.items()]
</code></pre>
<p>I get</p>
<pre><code>list_of_tuples = [(1, ['a', 'b', 'c', 'd']), (2, ['e', 'f', 'g', 'h'])]
</code></pre>
<p>and I need</p>
<pre><code>list_of_tuples = [(1, 'a', 'b', 'c', 'd'), (2, 'e', 'f', 'g', 'h')]
</code></pre>
","1","Question"
"78745844","","<p>Can someone please help me find fault in my code? If I create a blank 2D matrix with static initial value, it returns the correct transposed matrix. Whereas if I create a blank matrix using a for loop, it is returning last row for all rows in the answer.</p>
<pre><code># Original Matrix :
[[1, 2, 3], 
[4, 5, 6], 
[7, 8, 9]]

# Expected Transpose :
[[1, 4, 7],
[2, 5, 8],
[3, 6, 9]]

# Actual Transpose :
[[3, 6, 9],
[3, 6, 9],
[3, 6, 9]]


# Transpose Matrix

def transpose_mtx(original):
    t_cols = len(original)
    t_rows = len(original[0])

    # creating a blank matrix with 0s of transpose shape
    row = [0 for _ in range(t_cols)]
    t_mtx = [row for _ in range(t_rows)]

    # t_mtx = [[0,0,0],[0,0,0], [0,0,0]]
    # if I keep this line instead, it returns correct answer
 
    # rows of original
    for i in range(len(original)):
        # columns of original
        for j in range(len(original[0])):
            # interchange items
            t_mtx[j][i] = original[i][j]
    
    return t_mtx


my_mtx = [[1,2, 3],
          [4, 5, 6],
          [7, 8, 9]]

print(transpose_mtx(my_mtx))
</code></pre>
","0","Question"
"78756393","","<p>Below is the code below for a C# Console Application Hangman game.
I would like to save the individual characters of the sentence the user has to guess in a list so that correctly guessed letters can be stored.</p>
<pre><code>List&lt;string&gt; lstSentence = new List&lt;string&gt;();
List&lt;string&gt; lstGuesses = new List&lt;string&gt;();
lstSentence.Capacity = sSentence.Length;


for (int i = 0; i &lt; sSentence.Length; i++)
{
    if (char.IsLetter(sSentence[i]))
    {
        sRevealedSentence += &quot;*&quot;;
        lstSentence[i] = &quot;*&quot;; //Error appears here
    }

    if (char.IsWhiteSpace(sSentence[i]))
    {
        sRevealedSentence += &quot; &quot;;
        lstSentence[i] = &quot; &quot;; //Error appears here too
    }
}
</code></pre>
<p>I tried to store the individual characters of the sentence the user has to guess as asterisks and spaces to indicate the length of the words in the sentence.</p>
","-1","Question"
"78759529","","<p>I am using a for loop in python to convert the values from the csv file into integer and float then putting them in a list in the code itself but the problem is with that the csv file doesn't only have numbers but also word before each data row
eg. years 1998.....</p>
<p>I have tried to pop it but it doesn't work as the for loop doesn't function as intended because of what I stated earlier and I cant change the csv file and I have no other idea on how to properly fix it</p>
<pre><code>with open(&quot;C:/Users/yuhon/Downloads/sgexports_dataset.csv&quot;) as openfile: 
    csvreader = csv.reader(openfile) 
    next(csvreader) 
    years = [] 
    americaExports = [] 
    asiaExports = [] 
    europeExports = []
    oceaniaExports = [] 
    africaExports = []
    euExports = [] 
    for row in csvreader: 
        years.append(int(row[0])) 
        americaExports.append(float(row[1]))
        asiaExports.append(float(row[2]))
        europeExports.append(float(row[3]))
        oceaniaExports.append(float(row[4]))
        africaExports.append(float(row[5]))
        euExports.append(float(row[6]))
</code></pre>
<p>this is the csv file</p>
<pre><code>Area,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009
America,30407.5,31517.7,33185.2,26015.3,26942.1,28082.6,29964.2,30481.6,35900.7,39597.6,38459.6,32154.4
Asia,50197.3,56987.4,73466.9,66382,67224.1,89338.3,107412.6,127210.4,137654.4,140908.6,149612.6,122946.2
Europe,21386.8,22748.6,22519.8,19921.3,18503.2,24347.6,30307,32611.5,34668,34695.2,33286.6,26648.6
Oceania,2938.3,3979,5001.8,4859.3,5323.4,7024.5,10203.1,14154.8,15486.2,15555,18965.2,13468
Africa,987.7,1092.3,1764.4,1266.5,1444.7,1764.9,2313.5,2989.4,3668.6,4146.7,7293.9,4786
European Union,20875.6,22289.8,21868.6,19233.2,17916.9,23591.8,29273.1,31543.5,32923.4,33233.6,31713.5,24840.8
</code></pre>
<p>as you can see in the data above at the start of each row there is a word and I am not sure of how to skip the first element of each row as the list is supposed to have only integers and I cannot change the csv file and the rest of my code would not work if I do not use integers and float lists</p>
","-3","Question"
"78761077","","<p>In the <a href=""https://dart.dev/effective-dart/usage#dont-use-const-redundantly"" rel=""nofollow noreferrer"">Dart documentation</a>, it states that we should not place const before initializing a const constructor, as the keyword is already implicit.</p>
<p>However, can someone explain why the following codes exhibit different behaviors?</p>
<pre class=""lang-dart prettyprint-override""><code>class Person{
  final List&lt;String&gt; names;
  
  const Person(this.names);
}

void main() {
  final Person person = Person([&quot;Livia&quot;, &quot;Lima&quot;]);
  
  print(person.names);
  
  person.names.add(&quot;Carolina&quot;);
  
  print(person.names);
}
</code></pre>
<pre class=""lang-dart prettyprint-override""><code>class Person{
  final List&lt;String&gt; names;
  
  const Person(this.names);
}

void main() {
  final Person person = const Person([&quot;Livia&quot;, &quot;Lima&quot;]);
  
  print(person.names);
  
  person.names.add(&quot;Carolina&quot;);
  
  print(person.names);
}
</code></pre>
<p>In the first example, I can add &quot;Carolina&quot; to the list normally and get the following output:</p>
<pre><code>[&quot;Livia&quot;, &quot;Lima&quot;]
[&quot;Livia&quot;, &quot;Lima&quot;, &quot;Carolina&quot;]
</code></pre>
<p>However, in the second example, I get the following error:</p>
<pre><code>Unsupported operation: add
</code></pre>
<p>Additionally, I have another question. Shouldn't the list of names be immutable since it is declared as <code>final</code>?</p>
","0","Question"
"78761470","","<p>I have dataframe, which looks like this:</p>
<pre class=""lang-python prettyprint-override""><code>import pandas as pd

df = pd.DataFrame({&quot;item_id&quot;: [1, 2, 3],
                   &quot;item_properties&quot;:[
                                        [{&quot;property_id&quot; : 1,
                                        &quot;property_name&quot;: &quot;name_1&quot;,
                                        &quot;property_value&quot;: ['property_value_1']},
                                        {&quot;property_id&quot; : 2,
                                        &quot;property_name&quot;: &quot;name_2&quot;,
                                        &quot;property_value&quot;: ['property_value_1']},
                                        ],
                                        [{&quot;property_id&quot; : 1,
                                        &quot;property_name&quot;: &quot;name_1&quot;,
                                        &quot;property_value&quot;: ['property_value_1']},
                                        {&quot;property_id&quot; : 2,
                                        &quot;property_name&quot;: &quot;name_2&quot;,
                                        &quot;property_value&quot;: ['property_value_1', 'property_value_2']},
                                        ],
                                        [{&quot;property_id&quot; : 1,
                                        &quot;property_name&quot;: &quot;name_1&quot;,
                                        &quot;property_value&quot;: ['property_value_1', 'property_value_2']},
                                        {&quot;property_id&quot; : 2,
                                        &quot;property_name&quot;: &quot;name_2&quot;,
                                        &quot;property_value&quot;: ['property_value_1', 'property_value_2']},
                                        ],
                                ]
                   })
</code></pre>
<p>I need to extract values from every dictionary in column <code>item_properties</code>, if <code>property_id</code> equals to <code>2</code>.
If there's more, than one element, they need to be separated by <code>;</code>.
My desired df should look like this:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>item_id</th>
<th>desired_column</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>property_value_1</td>
</tr>
<tr>
<td>2</td>
<td>property_value_1;property_value_2</td>
</tr>
<tr>
<td>3</td>
<td>property_value_1;property_value_2</td>
</tr>
</tbody>
</table></div>
<p>What I did:</p>
<pre class=""lang-python prettyprint-override""><code>df['desired_value'] = ''
for i in range(len(df)):
    [df['desired_value'][i]] = [d.get(&quot;property_value&quot;) for d in df['item_properties'][i] if d['property_id'] == 2]
df['desired_value'] = [';'.join(map(str, l)) for l in df['desired_value']]
</code></pre>
<p>But pandas gives me this message:</p>
<pre><code>FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df[&quot;col&quot;][row_indexer] = value

Use df.loc[row_indexer, &quot;col&quot;] = values instead, to perform the assignment in a single step and ensure this keeps updating the original df.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
</code></pre>
<p>What is right way to do it?</p>
","1","Question"
"78763878","","<p>I am working on a game in PyGame and I only want an enemy to move if all spaces between them and the player are &quot;empty&quot;. the board is basically just a list:</p>
<pre><code>occupants = [&quot;enemy&quot;, &quot;empty&quot;, &quot;enemy&quot;, &quot;empty&quot;, &quot;empty&quot;, &quot;player&quot;, &quot;empty&quot;]
</code></pre>
<p>in this position I only want the second enemy, on index 2, to move, because all spaces between index 2 and index 5 are &quot;empty. How do I check this?</p>
","-7","Question"
"78764361","","<p>I have a string for input with comma seperated elements. - <code>marks = 'marks1,marks2,marks3'</code>
Using split function I got list of marks. - <code>marks = marks.split(',')</code></p>
<p>This gives us 'marks' a list with elements as srting however I want integers as elements. <code>marks[int]</code></p>
<p>Do we have an in-built function to convert the same or do we need to use the following for-loop?</p>
<pre><code>for i, m in enumerate(marks):
    marks[i] = int(m)
</code></pre>
<p>The above loop works but I just want to know if we have some in-built function</p>
","1","Question"
"78764894","","<p>In C# .NET. This block of if/else if works fine, but its getting cumbersome to maintain and read. I want a more optimized writing style.</p>
<pre><code>
if (Globals.SRSI &lt; 10 &amp;&amp; Globals.SRSI != 0 &amp;&amp; Globals.ATR14 != 0) //Low Stochastic Entry Long Strategy
{ 
    dStochRSIPriceLong = markPrice - (0.1 * Globals.ATR14); 
    ECStrategy = &quot;Stochastic Long&quot;; 
} 
else if (Globals.RSI &lt; 20 &amp;&amp; Globals.RSI != 0 &amp;&amp; Globals.ATR14 != 0) //RSI Rebound Long Strategy
{ 
    dRSIPriceLong = markPrice - (0.2 * Globals.ATR14); 
    ECStrategy = &quot;Rebound Long&quot;; 
}
else if (Globals.MACDLINEPrevious &lt; Globals.MACDSigLINEPrevious &amp;&amp; Globals.MACDLINE &gt; Globals.MACDSigLINE) //MACD Crossover Long Strategy
{
    dMACDCrossoverLong = markPrice - (0.2 * Globals.ATR14);
    ECStrategy = &quot;Crossover Long&quot;;
}
else if (Math.Abs(markPrice - Globals.SMA25) &gt; 300 &amp;&amp; Globals.PreviousCandleLo &gt; Globals.SMA25 &amp;&amp; markPrice &gt; Globals.SMA25 &amp;&amp; Globals.SMA25 &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100) //Runaway Long Strategy
{
    dLoCandleLong = Globals.PreviousCandleLo;
    ECStrategy = &quot;Runaway Long&quot;;
}                                                                            
else if (markPrice &gt; Globals.SMA25 &amp;&amp; Globals.SMA25 &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100) //Knife Long Strategy
{ 
    dMA2PriceLong = Globals.SMA25; 
    ECStrategy = &quot;Knife Long&quot;; 
}  
else if (markPrice &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100) //Moving Average Momentum Long Strategy
{ 
    dMAPriceLong = Globals.SMA50; 
    ECStrategy = &quot;Momentum Long&quot;; 
}                               
else if (markPrice &gt; Globals.SMA100) //MA100 Breakout Long Strategy
{ 
    dPullbacksPriceLong = Globals.SMA100; 
    ECStrategy = &quot;Breakout Long&quot;; 
}                                                      
dPositionEntryPriceLong = SearchArray(markPrice, new List&lt;double&gt; { dStochRSIPriceLong, dRSIPriceLong, dMACDCrossoverLong, dLoCandleLong, dMA2PriceLong, dMAPriceLong, dPullbacksPriceLong });


</code></pre>
<p>Obviously there will still be if/else but I am hoping to not having this repetition. I tried to use a list with index but got lost in the complication of it all because I don't know how I can list a condition and action and then look it up.</p>
","-2","Question"
"78767166","","<p>How to transfer <code>dataframe</code> to <code>list</code> and not include NA value ? Thanks!</p>
<p>There is dataframe <code>ori_df</code></p>
<pre><code>library(tidyverse)
ori_df &lt;- data.frame(category=c('a','b',NA),subcategory=c('w',NA,'Z'))
</code></pre>
<p>Below code can transfer <code>ori_df</code> to list <code>fin_list</code>,but the result include <code>NA</code></p>
<pre><code>fin_list &lt;- as.list(ori_df)
</code></pre>
<p>How to delete <code>NA</code> value in <code>fin_list</code> , the wished result as below <code>fin_list_wished</code> ?</p>
<pre><code>fin_list_wished &lt;- list(category=c('a','b'),subcategory=c('w','Z'))
</code></pre>
","0","Question"
"78769470","","<p>I am trying to remove duplicates from text files to make a current process more efficient</p>
<p>Example input:</p>
<pre><code>1  1

1   1

2   1

3   1

4   1
</code></pre>
<p>Example Output:</p>
<pre><code>1  1

2   1

3   1

4   1
</code></pre>
<p>my issue is when the spacing between my numbers is different it will add it to my new text file.</p>
<pre><code>with open('test1.txt') as f:
    with open('test3.txt', 'w') as output:
        seen = list()
        for line in f:
            line_lower = line.strip()
            res = []
            temp = ''
            flag = 1
            for ele in line_lower:
                if ele == ' ' and flag:
                    res.append(temp)
                    temp = ''
                    flag = 0
                else :
                    temp += ele
            res.append(temp)
            print(str(res))
            print((line_lower[0]))
            
            if str(res[0]) in seen:
                print(&quot;0&quot;)
            else:
                #print(line_lower)
                seen.insert(-1,line_lower)
                output.write(str(line_lower))
                output.write('\n')
                print(str(seen))
output.close()
</code></pre>
<p>so far this is white ive been trying, but cant seem to fix my issue</p>
","1","Question"
"78787073","","<p>In below <code>mlist</code> object, how does one update the value to <code>'character'</code> for all elements which currently are <code>c(&quot;ordered&quot;, &quot;factor&quot;)</code>?</p>
<pre><code>library(tidyverse)
mlist &lt;- sapply(diamonds,class) 
</code></pre>
<p><code>mlist[['color']] &lt;- 'character'</code> can just update one of them. Is there any way to update all of them at once?</p>
<pre><code>mlist[['color']] &lt;- 'character'
</code></pre>
","0","Question"
"78787110","","<p>How to transfer data frame <code>raw_df</code>  to <code>list</code> row by row? Desired output: <code>wished_list</code></p>
<pre><code> raw_df &lt;- data.frame(cat=c('a','b','c'),value=c('high','mid','low'))
 wished_list &lt;- list(a='high',b='mid',c='low')
</code></pre>
","4","Question"
"78787163","","<p>I plot cumulative incidence curves based on data from the <code>survival::survfit()</code> function. Following <a href=""https://cran.r-project.org/web/packages/survival/vignettes/compete.pdf"" rel=""nofollow noreferrer"">this vignette</a> I do something like the following:</p>
<pre><code>library(survival)
mgus2$etime &lt;- with(mgus2, ifelse(pstat==0, futime, ptime))
event &lt;- with(mgus2, ifelse(pstat==0, 2*death, 1))
mgus2$event &lt;- factor(event, 0:2, labels=c(&quot;censor&quot;, &quot;pcm&quot;, &quot;death&quot;))
mfit2 &lt;- survfit(Surv(etime, event) ~ sex, data=mgus2)
plot(mfit2)
</code></pre>
<p><a href=""https://i.sstatic.net/l7H3259F.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/l7H3259F.png"" alt=""four groups"" /></a></p>
<p>The data has two possible events (pcm and death) and the included covariate sex has two levels (male and female). Thus, as expected, the resulting plot depicts the the probabilities for four lines (I left out the labels because they don't matter here).</p>
<p>But how to extract this data? I looked everywhere inside <code>mfit2</code> but can not find the data needed to create the plot. There is <code>mfit2$time</code> for the x axis, but <code>mfit2$pstate</code> does not include all four probabilities (pcm female, pcm male, death female and death male). Where are those probabilities hidden in <code>mfit2</code>?</p>
<p>I found <a href=""https://stackoverflow.com/a/26642257/11359310"">this</a> answer which suggests some workaround in order to get the data. I see that the workaround works, that's not the question. Where is the data for the plot inside <code>mfit2</code>? It must be somewhere since <code>plot(mfit2)</code> returns as the plot we would expect.</p>
","3","Question"
"78794703","","<p>I'm currently working on a Caesar cipher program, and I basically typed up a list of the alphabets: <code>alphabet = ['a','b','c','d',...]</code></p>
<p>Then asked the user for a word to encrypt, <code>text = input('Enter your message')</code> and the shift amount, I figured I could set an empty string variable and then loop through (for loop) each letter to shift it.</p>
<p>But this is where I got stuck, how will I shift each letter in the input by the shift amount using the list?</p>
<p>I tried to loop through the input using the indexes of the list alphabet, but since had no idea what I was doing it didn't work.</p>
","2","Question"
"78796157","","<p>Fairly new to coding and I have a question regarding list and subsets.
Suppose this is my list:</p>
<pre><code>list =
[[[a,2], [c,3], [e,3]],
[[g,4], [i,4] [k,3]],
[[b,3], [d,2], [f,2]]]
</code></pre>
<p>How would I go about making a new list that focuses on index -1 (or the numbers) to add them up and if the sum is more than 8 to not print into new list and if it's less have it print.</p>
<p>For example:<br />
<code>[a,2], [c,3],[e,3]</code> sum is 8 so it would print<br />
<code>[g,4],[i,4],[k,3]</code> sum is 11 so it would not print<br />
<code>[b,3], [d,2], [f,2]</code> sum is 7 so it would print</p>
<p>Also this list would be bigger so I'm thinking maybe a loop but no idea, any suggestions will help thank you</p>
<pre><code>new_list = []
i = 0
while i &lt; 10:
    if (list[i][0][-1] + list[i][1][-1] + list[i][2][2] &lt; 8)
    print (list[i] in new_list) #dont think this is right
    i = i + 1
return
</code></pre>
<p>I thought this would loop again but got 3 lines of false</p>
","-1","Question"
"78798057","","<p>I'm trying to make a sophisticated quiz that involves a list for a question and an answer that is included in a list. I want to call numbers from this multi-dimensional list using a &quot;for&quot; loop using values.</p>
<p>The values:</p>
<pre><code>items = [[[1, 2], [3, 4], [5, 6]], [[10, 9], [8, 7], [6, 5]]]
</code></pre>
<p>This is what I tried:</p>
<pre><code>for a, b, c in items:
    print(a)
    print(b)
    print(c)
</code></pre>
<p>The results:</p>
<pre><code>[1, 2]
[3, 4]
[5, 6]
[10, 9]
[8, 7]
[6, 5]
</code></pre>
<p>What I expected:</p>
<p>Something like this:</p>
<pre><code>[[[1, 2], [3, 4], [5, 6]], [[10, 9], [8, 7], [6, 5]]]
[[1, 2], [3, 4], [5, 6]]
[1, 2]
</code></pre>
<p>How do I get the values straightforward like this?</p>
","0","Question"
"78805145","","<p>Let's say I have three different dictionaries:</p>
<pre><code>dictA = {'A': 1, 'B': 2, 'C': 3}
dictB = {'C': 1, 'D': 2, 'E': 3}
dictC = {'A': 2, 'C': 4, 'E': 6, 'G': 8}
</code></pre>
<p>And I want to &quot;add&quot; these dictionaries together, in the <code>dictA+dictB+dictC</code> order. What I mean by that is:</p>
<ul>
<li><p>values with the same keys will be added together (for example <code>'A': 1</code> in dictA and <code>'A': 2</code> in dictB will become <code>'A': 3</code> in the end)</p>
</li>
<li><p>values without a previously existing key will be created (for example during <code>dictB + dictC</code>, the key <code>'G'</code> does not exist, so it will be created)</p>
</li>
</ul>
<p>The result for this example should look something like this:</p>
<pre><code>resultDict = {'A': 3, 'B': 2, 'C': 8, 'D': 2, 'E': 9, 'G': 2,}
</code></pre>
<p>Is there an easy way to do this? The dictionaries I am actually working with are much larger and nested in multiple other dictionaries, so sorry if this example isn't well explaining. I tried fidgeting around with for loops but as I mentioned, the lists I am actually working with are much larger and not that easy to work with.</p>
","-2","Question"
"78809315","","<p>I want to check whether the elements in two arrays are different using Python.</p>
<p>I don't want to use numpy and sticking with general Python.</p>
<p>Here is an example below:</p>
<pre><code>arr1 = [1,2,3,4,5,6,7]
arr2 = [1,2,3,4,5,6,7,8,9,10]
</code></pre>
<p>I expect the output to be <code>[8,9,10]</code></p>
<p>So far I've tried to carry out a for loop</p>
<pre><code>for x in range(len(arr1)):
    for y in range(len(arr2)):
        if arr1[x] != arr2[y]:
            print(arr2[y])
</code></pre>
<p>But, I receive this as output from print statement - <code>2345678910134567891012456789101235678910123467891012345789101234568910</code></p>
","0","Question"
"78816193","","<p>Why this code doesn't work as expected?
I know there are other ways to reverse list using recursion
but I am interested particularly in why this method doesn't work.</p>
<pre><code>def reverse(nums):
    if len(nums) &lt; 2:
        return
    nums[0], nums[-1] = nums[-1], nums[0]
    reverse(nums[1:-1])


A = [1, 2, 3, 4, 5, 6]
reverse(A)
print(A)
</code></pre>
<p>I am expecting the output <code>[6 5 4 3 2 1]</code>. Instead, I am getting <code>[6 2 3 4 5 1]</code>.</p>
","2","Question"
"78820603","","<p>i need to echo multiple list like this</p>
<pre><code>list_0=(1 2 3 4 5 6)
list_1=(7 8 9)
list_2=(22 7 34 88)
.....
.....
list_99=(23 67 80)
</code></pre>
<p>I have this version that works but every time I have to declare new list in for comand</p>
<pre><code>for nums in ${list_0[@]} ${list_1[@]} ${list_2[@]} ......... ${list_99[@]}
do
echo $nums
done
</code></pre>
<p>Is there any possibility to make it easier to go through the lists ?</p>
<p>something like this</p>
<pre><code>x=0
for nums in ${list_(x until x=99)[@]}
do
echo $nums
done

</code></pre>
<p>Thank you</p>
","0","Question"
"78822603","","<p>Okay so I have blob of data like so ...</p>
<pre><code>[
{
  &quot;sys_replace_on_upgrade&quot;: &quot;false&quot;,
  &quot;initial_state&quot;: &quot;false&quot;,
  &quot;sys_mod_count&quot;: &quot;0&quot;,
  &quot;sys_updated_on&quot;: &quot;2020-09-02 13:48:39&quot;,
  &quot;sys_tags&quot;: &quot;&quot;,
  &quot;state_label&quot;: &quot;Authorize&quot;,
  &quot;sys_class_name&quot;: &quot;sttrm_state&quot;,
  &quot;state_sequence&quot;: &quot;3&quot;,
  &quot;sys_id&quot;: &quot;13fc0801c343101035ae3f52c1d3ae77&quot;,
  &quot;sys_update_name&quot;: &quot;sttrm_state_13fc0801c343101035ae3f52c1d3ae77&quot;,
  &quot;sys_updated_by&quot;: &quot;admin&quot;,
  &quot;sys_created_on&quot;: &quot;2020-09-02 13:48:39&quot;,
  &quot;sys_name&quot;: &quot;Authorize&quot;,
  &quot;state_value&quot;: &quot;-3&quot;,
  &quot;sys_customer_update&quot;: &quot;false&quot;,
  &quot;sys_created_by&quot;: &quot;admin&quot;,
  &quot;sys_policy&quot;: &quot;&quot;
},
...
]
</code></pre>
<p>I run it through jq like so:</p>
<pre><code>jq '.result[]|{(.sys_name) : .state_value}' states.json
{
  &quot;Authorize&quot;: &quot;-3&quot;
}
{
  &quot;New&quot;: &quot;-5&quot;
}
{
  &quot;Closed&quot;: &quot;3&quot;
}
{
  &quot;Review&quot;: &quot;0&quot;
}
...
</code></pre>
<p>What I really want is one big object like:</p>
<pre><code>{
  &quot;Authorize&quot;: &quot;-3&quot; ,
  &quot;New&quot;: &quot;-5&quot;,
  &quot;Closed&quot;: &quot;3&quot;,
  &quot;Review&quot;: &quot;0&quot;, 
...
}
</code></pre>
<p>I'm close but I'm missing something ...</p>
","0","Question"
"78824885","","<p>I'm looking for a way to filter a set (or list) of tuples based on the number of times an
item appears in one of the other of the position of the tuple.</p>
<p>My current goal is a bit complex so I divided the problem in three smaller steps.</p>
<p><strong>1. Let's start with the simplest case, only a single value which applies only to the first element of the tuple</strong></p>
<p>For instance:</p>
<pre><code>my_filter([(1,2),(1,3),(2,4),(3,1),(3,4),(3,5),(5,2),(5,4)], 2)
</code></pre>
<p>Should return:</p>
<pre><code>[(1,2),(1,3),(5,2),(5,4)]
</code></pre>
<p>Because these are the only tuples for which the first item of the tuple is linked appears only twice in the whole list.</p>
<p>The naive way of doing it is : for each first element of tuple in list, count the number of times this element appears as first element in all tuples and, if the count matches the chosen number, add all tuples having this element at first position.</p>
<p>But I feel like this is so unoptimal and I have to iterate over the list for each possible value, I'm surely missing a better way of doing it.</p>
<p><strong>2. Make it reciprocal</strong></p>
<p>Ideally it would like to be able to apply the same treatment based on the second element of the tuple, with another cardinality parameter</p>
<p>For instance:</p>
<pre><code>my_filter([(1,2),(1,3),(2,4),(3,1),(3,4),(3,5),(5,2),(5,4)], 2, 1)
</code></pre>
<p>Here we want to keep only tuples in which the first element appears exactly twice but with the second element appearing only once (intersection of the two conditions). This should return:</p>
<pre><code>[(1,3)]
</code></pre>
<p><strong>3. Generalizing to multiple values</strong></p>
<pre><code>my_filter([(1,2),(1,3),(2,4),(3,1),(3,4),(3,5),(5,2),(5,4)], 2, [1,3])
</code></pre>
<p>In this case, we allow the cardinality filter to take multiple possible values. In this example, we want to keep tuples for which the first element appears exactly twice (in first position) and the second element appears either once or three times (in the second position). This should return:</p>
<pre><code>[(1,3),(5,4)]
</code></pre>
<p>Once again, I have no problem writing a naive solution that would simply iterate over each allowed values and join result sets, but I'm looking for something smarter.</p>
<p>I feel like there could be some useful functions in the itertools library but I'm not comfortable enough with it. Any advice ? Thanks.</p>
","0","Question"
"78826520","","<p>I have a list with items with varying numbers of elements, many of which are subsets of each other. I would like to remove all the items whose complete set of elements exist in other items</p>
<p>So for instance for:</p>
<pre><code>
listy&lt;-list(&quot;item1&quot;=c(10,210,300,400,500,600), &quot;item2&quot;=c(10,210,300), &quot;item3&quot;=c(500,600), &quot;item4&quot;=c(210, 300), &quot;item5&quot;=c(700,800,900))
</code></pre>
<p>Items 2,3, and 4 are subsets of item1, so my desired outcome is:</p>
<pre><code>listy2&lt;-c(&quot;item1&quot;=c(10,210,300,400,500,600), &quot;item5&quot;=c(700,800,900))
</code></pre>
<p>So far I have tried converting it to a tibble, sorting by the first column, and then removing duplicates of the first column. But this is super inefficient and only removes the ones where the first column matches, and not where the later ones match (ex. item3 and item4 vs. item1 here). Or I could do a loop for an all vs. all grepl making search  strings from each item in the list Ex something like this, but doesn't actually work because of the search string:</p>
<pre><code>for(ity in 1:length(listy)){
    if(grepl(paste(unlist(listy[[ity]]), sep = &quot;|&quot;), listy[[c(1:3)[-ity]]])){ 
print(ity)
}}
</code></pre>
<p>But again, this would be super inefficient (and my actual lists have 100000 items or more with up to 20,000 elements each). I am sure there is some super simple function I am missing and any help would be greatly appreciated.</p>
","2","Question"
"78830347","","<p>i am working on a kata.</p>
<p>Digitwise addition is a special kind of addition where instead of adding 1 normally to the number, it adds 1 to every digit of that number. If the digit is a 9, we replace it with a 10 without carrying over to the next digit.</p>
<p>Examples</p>
<p>123 -&gt; 234</p>
<p>Task</p>
<p>Program a function that takes two numbers, n and k, and outputs the number of digits in n after applying Digitwise addition k times. Since the answer can be very large, return the answer modulo 1_000_000_007.</p>
<p>Your solution is expected to be O(klogn).</p>
<p>My solution:</p>
<pre><code>import sys
MOD = 10**9 + 7 

sys.set_int_max_str_digits(0)

def d2a(digits):

  arr= list(map(int,str(digits)))
  return arr


def a2d(arr):
  length=len(arr)
  digit=&quot;&quot;

  for i in range(length):
    digit+=str(arr[i])
  return int(digit)


def add(n):
  return n+1


def digitwise_addition(digit, K):
  for i in range(K):
    #CONVERTING INTO ARRAY
    arr=d2a(digit)
    #ADDING 1 INTO ALL NUMBERS FROM ARRAY
    arr=list(map(add,arr))
    #CONVERTING ARRAY INTO DIGIT
    digit=a2d(arr)

  arr=d2a(digit)
  return len(arr) %MOD

</code></pre>
<p>problem: it passes all the calculations, but when K is large, it asks to exceed limit, and if exceeded, it says: code timeout</p>
","0","Question"
"78830794","","<p>The goal: Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.</p>
<p>Return the sum of the three integers.</p>
<p>I've written up a potential solution. At the end, I have a list of lists <code>solution</code>. When I try to print the first entry of the first list in <code>solution</code>, I get the expected (and correct) result. I can manipulate this data with no problems.</p>
<pre><code>class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:
        from operator import itemgetter

        solution = [sum([nums[x], nums[y], nums[z]]) for x in nums for y in nums for z in nums if x != y != z != x]

        solution = [[x, abs(x-target)] for x in solution]
        sorted(solution, key=itemgetter(1))

        print(solution[0][0])
</code></pre>
<p>However, the moment I actually set a return value for the function, like so</p>
<pre><code>class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:
        from operator import itemgetter

        solution = [sum([nums[x], nums[y], nums[z]]) for x in nums for y in nums for z in nums if x != y != z != x]

        solution = [[x, abs(x-target)] for x in solution]
        sorted(solution, key=itemgetter(1))

        return solution[0][0]
</code></pre>
<p>I get this error</p>
<pre><code>IndexError: list index out of range
           ~~~~~~~~^^^
    return(solution[0][0])
Line 10 in threeSumClosest (Solution.py)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ret = Solution().threeSumClosest(param_1, param_2)
Line 42 in _driver (Solution.py)
    _driver()
Line 53 in &lt;module&gt; (Solution.py)
</code></pre>
<p>I get this error even if I try to return a dummy value, like <code>return 0</code>. So clearly what I've written doesn't work, but I cannot figure out where the problem lies.</p>
","-1","Question"
"78838771","","<p>I'm from C and python is new to me. I know that both insert and append can do the same task of appending an element to a list.</p>
<p>// this is just an <strong>EXAMPLE</strong><br />
Using append:</p>
<pre><code>x: list[int] = []
total_elements: int = 0

# inserting
for i in range(5):
    x.append(i)
    total_elements += 1

# printing
for element in x:
    print(f&quot;{element} &quot;, end = &quot;&quot;)
print(f&quot;\n{total_elements} elements in list&quot;)
</code></pre>
<p>and using insert:</p>
<pre><code>x: list[int] = []
total_elements: int = 0

# inserting
for i in range(5):
    x.insert(total_elements, i)
    total_elements += 1

# printing
for element in x:
    print(f&quot;{element} &quot;, end = &quot;&quot;)
print(f&quot;\n{total_elements} elements in list&quot;)
</code></pre>
<p>both will output:</p>
<pre><code>0 1 2 3 4 
5 elements in list
</code></pre>
<hr />
<p>Say, my list keeps growing and growing. And say I want to <strong>track the number of elements</strong> too. insert() can <strong>access the index after the last index</strong> (for example, with list size of 100, I can do <code>x.insert(total_elements, num)</code>.</p>
<p>Which one would be better and efficient in time consumption, insert or append?</p>
<p><strong>EDIT</strong>: Sorry if my question was kind of misleading. The linked question is about <strong>PREPENDING</strong>, not appending. Before posting my question, I had read that question along with the suggested answers, <code>insert(0,item)</code> is bad because it shifts all the pointers in the array. What I want to ask is <strong>APPENDING</strong>, since I use <code>insert(total_elements, item)</code> to append. I want to track the number of elements too.</p>
<p>Also thank you for pointing out the more readable and efficient printing code using <code>for element in x:</code></p>
","-2","Question"
"78844160","","<p>In Python, is it possible to get a flat view of a list of lists that dynamically adapts to changes to the original, nested list?</p>
<p><strong>To be clear, I am not looking for a static snapshot, but for a view that reflects changes.</strong></p>
<p>Further, the sub-lists should not be restricted to a primitive type, but be able to contain arbitrary objects, and not tied to a static size, but be allowed to shrink or expand freely.</p>
<p>Simple example:</p>
<pre class=""lang-py prettyprint-override""><code>a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
b = [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
view = flat_view([a, b])
# `view` should show [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
b[0] = &quot;x&quot;
# `view` should show [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;x&quot;, &quot;e&quot;, &quot;f&quot;]
</code></pre>
<p>The implementation of <code>flat_view()</code> is what I'm looking for.</p>
","3","Question"
"78844947","","<p>I have looked at the gazillions of other similar questions, but I haven't found a working solution, so I am asking this:</p>
<p>I have a rule:</p>
<pre><code>check_prime(X) :-
  X &gt; 0,
  X0 is X - 1, 
  (X =:= 1 -&gt; true; 
   X =:= 2 -&gt; true; 
   foreach(between(2, X0, T), X mod T =\= 0) -&gt; true; false).
</code></pre>
<p>then I want to run:</p>
<pre><code>B is [0], 
foreach( between(1, 50, T), 
         (check_prime(T) -&gt; B2 = [B, T], write(B2); !)).
</code></pre>
<p>What this successfully does is write pairs of <code>[0, primeNumber]</code> to the console. I can alternatively do this:</p>
<pre><code>B is [0],
foreach( between(1, 50, T), 
         (check_prime(T) -&gt; (write(T), write(&quot;, &quot;)); !)).
</code></pre>
<p>which actually prints everything in a pretty way, minus the lack of being a list, and the extra comma at the end.</p>
<p>This writing function is working through the solutions of <code>check_prime(T)</code> recursively, one solution at a time. I want to make a list of all of these solutions, but no matter what I try, I either cannot get object permanence (the written atom is something like <code>_31415926</code>), or I encounter a variety of errors.</p>
<p>How do I dynamically create a list of prime numbers since each one is found recursively?</p>
<p>Edit:</p>
<p>Yes, this is all the code I am using:
<a href=""https://i.sstatic.net/TZ5pzZJj.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/TZ5pzZJj.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.sstatic.net/824q4s5T.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/824q4s5T.png"" alt=""enter image description here"" /></a></p>
<p>I have tried varying the &quot;if true&quot; branch, but it keeps having issues:</p>
<p><a href=""https://i.sstatic.net/IYZucULW.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/IYZucULW.png"" alt=""enter image description here"" /></a>
<a href=""https://i.sstatic.net/AJB5UVh8.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/AJB5UVh8.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.sstatic.net/gawf7XIz.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/gawf7XIz.png"" alt=""enter image description here"" /></a></p>
","1","Question"
"78845504","","<p>I am trying to iterate through a list of dictionaries and fetch the values of 2 keys and write the values to another list of dictionaries which has another key. The below is the output list that I am trying to write to.</p>
<pre><code>post_obj = [
    {
        &quot;city&quot;: place[&quot;place&quot;],
        &quot;display&quot;: place[&quot;seq&quot;]
    }
]
</code></pre>
<p>Input:</p>
<pre><code>data = [
    {'place': 'San Jose', 'seq': 1},
    {'place': 'San Diego', 'seq': 2},
    {'place': 'San Fransisco', 'seq': 3}
]
</code></pre>
<p>Code:</p>
<pre><code>post_obj = []
if len(data) &gt; 0:
    for id in data:
        post_obj = [
            {
                &quot;city&quot;: id[&quot;place&quot;],
                &quot;display&quot;: id[&quot;seq&quot;]
            }
        ]
else:
    post_obj[&quot;areas&quot;] = []
</code></pre>
<p>Output:</p>
<pre><code>[{'cityName': 'Inline', 'displayOrder': 3}]
</code></pre>
<p>Expected Output:</p>
<pre><code>[{'cityName': 'San Jose', 'displayOrder': 1}, {'cityName': 'San Diego', 'displayOrder': 2}, {'cityName': 'San Fransisco', 'displayOrder': 3}]
</code></pre>
<p>I don't know what I'm missing but I'm unable to get the first 2 cities in the list. Any help or input is appreciated. Thank you!</p>
","0","Question"
"78848091","","<p>I write this code to read text from .docx file and put the numbers in to a list to calculate their sum. Now I need to convert list to a variable and calculate sum of them.</p>
<p>My code:</p>
<pre><code>from docx import Document

num_list = []

doc = Document('File.docx')
for para in doc.paragraphs:
    for char in para.text:
        if char in '0123456789۰۱۲۳۴۵۶۷۸۹.':
            num_list.append(char)
        else :
            if num_list != [] and num_list != ['.']  :
                print(num_list)
            num_list = []
</code></pre>
<p>Output:</p>
<pre><code>['2', '.', '7']
['۳']
['۳', '۰', '۶']
['۷', '۴']
['۵']
['۹', '۰']
['۱', '۰']
['۱', '۵']
['۲', '۶']
</code></pre>
<p>I want to convert list to float variable and calculate sum:</p>
<pre><code>['2', '.', '7'] --&gt; 2.7
</code></pre>
","-1","Question"
"78848856","","<p>I have these lists in the global environment:</p>
<pre><code>list_1 &lt;- list(data.frame(A = 1:3, B = 4:6), data.frame(A = 7:9, B = 10:12))
list_2 &lt;- list(data.frame(X = 1:2, Y = 3:4), data.frame(X = 5:6, Y = 7:8))
list_3 &lt;- list(data.frame(M = 1:4, N = 5:8), data.frame(M = 9:12, N = 13:16))
</code></pre>
<p>I would like to turn each of these lists into a dataframe, e.g. here is how I would have done this manually:</p>
<pre><code>list_1 = do.call(rbind.data.frame, list_1)
list_2 = do.call(rbind.data.frame, list_2)
list_3 = do.call(rbind.data.frame, list_3)
</code></pre>
<p>Is it possible to do this with a for loop? Normally in a for loop, I store the output of each iteration to a list itself, whereas this time I want to make individual data frames.</p>
","0","Question"
"78851557","","<p>Sorry if I formatted this incorrectly or if the title isn't quite right, I am new to R and stack overflow. I am working with a list (called climates) that has 20 data frames (from each province) that each have year, month, day, and temperature columns (along with some other stuff). I am looking to find the rows where the temperature is above a certain threshold, but this threshold changes for each province. I've been able to use lapply to find the threshold for each province, but when I try to use those thresholds to find the rows in the data where the temp is above the threshold, the output isn't correct. My code does return a bunch of numbers, but they don't seem to be related to being greater than the threshold, and I also don't know how to get it to return the entire row instead of just the temperature value.</p>
<p>example climate list:</p>
<pre><code>A &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(10:30, size = 30, replace = TRUE)))
B &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(4:22, size = 30, replace = TRUE)))
C &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(14:35, size = 30, replace = TRUE)))

climate &lt;- list(&quot;Alist&quot; = A, &quot;Blist&quot; = B, &quot;Clist&quot; = C)
climate
</code></pre>
<p>I've used lapply to find the threshold,</p>
<pre><code>thresh95 &lt;- lapply(lapply(
  climate, `[[`, 2), # this one takes my list of climate data and selects the T column for all provinces
  quantile, probs = c(0.95), na.rm = TRUE) # this one takes the previous list and finds 95th percentile value
thresh95
</code></pre>
<p>but when I try to then find the temperatures that are above the threshold, something goes wrong.</p>
<pre><code>tmax95 &lt;-  lapply(lapply(climate, `[[`, 2), # this one takes my list of climate data and selects the T column for all provinces
  function(x) x[which(x&gt;thresh95)])# this one takes my list of climate data and selects the temps that are greater than the threshold
tmax95
</code></pre>
<p>Is there a way to write something that will return a subset of each province's data frame where the condition is that the temperature is greater than the threshold? Thanks!</p>
","4","Question"
"78852506","","<p>I have a below nested list:</p>
<pre><code>list = [Language:'Tamil'
        Capital: 'Chennai' 
        Place: 'Chennai', 'Vellore', 'Trichy', 'Madurai' 
]
</code></pre>
<p>I'm expecting to transpose it as:</p>
<pre><code>Language     Capital     Place
Tamil        Chennai     Chennai
Tamil        Chennai     Vellore
Tamil        Chennai     Trichy
Tamil        Chennai     Madurai 
</code></pre>
<p>Tried converting to pandas dataframe:</p>
<pre><code>df = pd.DataFrame(list)
</code></pre>
<p>The result is</p>
<pre><code>Language    Capital       Place  
Tamil       Chennai       ['Chennai', 'Vellore', 'Trichy', 'Madurai']  
</code></pre>
<p>How can I transpose each list of values in a new row for the place?</p>
","-5","Question"
"78855022","","<p>In a python dataframe, I have a result set like this - How do I extract all values between the min and max where the flag is 1?  Looking to use the result set as filters for another query.</p>
<p><a href=""https://i.sstatic.net/IYZ0UJ6W.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/IYZ0UJ6W.png"" alt=""enter image description here"" /></a></p>
<p>Result set would be 1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,23,24,25</p>
","0","Question"
"78865921","","<p>i was doind a leetcode problem called &quot;minimum absolute difference&quot; and my code worked when i ran it but in the submission i got the error Time Limit Exceeded</p>
<p>this is the quetion description:</p>
<p>Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.</p>
<p>this is the code:</p>
<pre><code>class Solution(object):
    def minimumAbsDifference(self, arr):
        arr.sort()
        s = 1000
        t = []
        for i in arr:
            if (abs(i - arr[(arr.index(i))-1])) &lt; s:
                s = (abs(i - arr[(arr.index(i))-1]))
        for i in arr:
            if  (abs(arr[(arr.index(i))-1] - i)) == s:
                t.append([arr[arr.index(i)-1],i])
        return t
</code></pre>
","-1","Question"
"78868771","","<p>I have a CSV file containing measurements of sample objects. I've been able to filter the list using Pandas and the Python statistics module. I'm trying to then exclude objects that are either less than 2 standard deviations or greater than 2 standard deviations from the mean and then save the final list to a new csv file. Printouts to the shell confirm the filtering and statistical calculations are working as expected. However, the new CSV file still contains all of the original objects.</p>
<p>I've tried researching the issue but haven't identified what error I'm making or how to fix it. Would appreciate any assistance.</p>
<p>The following is my code:</p>
<pre><code>
import statistics
import pandas as pd
import csv

data = pd.read_csv('/Users/myname/Documents/Data/MyData.csv')

count_row = data.shape[0]  # Gives number of rows (items)
print (&quot;N =&quot;, count_row)

mean = data[&quot;Area&quot;].mean().round(2)
print (&quot;Average = &quot;, mean)

sd = data[&quot;Area&quot;].std().round(2)
print(&quot;SD =&quot;, sd)

Lower2SD = mean - (2*sd)
print (&quot;Mean - 2SD =&quot;,&quot;%.2f&quot; % Lower2SD)

Upper2SD = mean + (2*sd)

print (&quot;Mean + 2SD =&quot;,&quot;%.2f&quot; % Upper2SD)

print (&quot;Mean +- 2SD = &quot;,&quot;%.2f&quot; %Lower2SD, &quot;to&quot;, &quot;%.2f&quot; % Upper2SD)

new =list(filter(lambda x: x&lt;Lower2SD, data[&quot;Area&quot;]))
print()
print(&quot;Value(s) of specimens below the Mean -2SD: &quot;)
print(new)

new =list(filter(lambda x: x&gt;Upper2SD, data[&quot;Area&quot;]))
print()
print(&quot;Value(s) of specimens exceeding the Mean +2SD: &quot;)
print(new)

adjusted=list(filter(lambda x: x&gt;Lower2SD or x&lt;Upper2SD, data[&quot;Area&quot;]))
print()
print(&quot;Value(s) of specimens within 2SD: &quot;)
print(adjusted)

global header
header = [&quot;Area&quot;]

with open('/Users/myname/Documents/Data/AdjustedData.csv', 'a', encoding='UTF8', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(header)

    for i in adjusted:
        writer.writerow([i])

</code></pre>
<p><a href=""https://i.sstatic.net/BOjo9tMz.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/BOjo9tMz.png"" alt=""Sample data"" /></a></p>
","0","Question"
"78869910","","<p>I want to check that there is a certain thing at a certain position in a nested list structure, but I don't know the shape of the structure at the beginning. How can I check for the presence of the thing without a risk of raising an exception?</p>
<p>For example: <code>:thing</code> is supposed to be three levels deep at the beginnings, like this:</p>
<pre class=""lang-clj prettyprint-override""><code>(def st '(((:thing))))
</code></pre>
<p>I can reach it with <code>(-&gt; st first first first)</code>. but, if the list structure is not deep enough, it raises an exception.</p>
<p>How can I effectively check for its presence? My solution so far is this:</p>
<pre class=""lang-clj prettyprint-override""><code>(if (list? st)
  (let [in1 (first st)]
    (if (list? in1)
      (let [in2 (first in1)]
        (if (list? in2)
          (= :thing (first in2))
          false))
      false))
  false)
</code></pre>
<p>It is ugly and prone to errors, so I would like to have a better solution. IMO, the biggest hurdle is that <code>first</code> throws an exception if it gets not a sequence. So one way would be to have something which behaves like <code>first</code> but does not throw an exception; one way would be to catch the exception like this:</p>
<pre class=""lang-clj prettyprint-override""><code>(try (= :thing (-&gt; st first first first))
     (catch IllegalArgumentException _
       false))
</code></pre>
<p>But I would rather avoid exceptions, so I would like to know if there is a good way without them.</p>
","1","Question"
"78872414","","<p>I have a data frame below that corresponds letters to numbers.</p>
<pre><code>import pandas as pd

# initialize list of lists
data = [['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]

# Create the pandas DataFrame
df = pd.DataFrame(data, columns=['Letters', 'Num'])
</code></pre>
<p>Now keeping this, can we convert a sentence containing these letters to numbers and then taking a sum of it</p>
<p>Example</p>
<p>I have a sentence like</p>
<pre><code>sen = 'Ab df ec'
</code></pre>
<p>Now these corresponds to 12 46 53. There it is 1+2+0+4+6+0+5+3 = 21 (0 is for space). Therefore the sentence <code>Ab df ec</code> will make a sum of 21</p>
","-3","Question"
"78876875","","<p>I have a dictionary of lists of student numbers, and a dataframe that contains those student numbers and more. I want to separate that dataframe into multiple dataframes, each which contains the rows for the student numbers in each list.
This code gives me the output I want, just trying to figure out how to make a dictionary of the dataframes</p>
<pre><code>import pandas as pd
import numpy as np

data = {
    'UW ID': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Term': [201001, 201101, 201201, 201201, 201001, 201001, 201101, 201201, 201201]}
df = pd.DataFrame(data)

student_numbers = {&quot;F10&quot;: [1, 2, 7], &quot;F11&quot;: [3, 4, 8], &quot;F12&quot;: [5, 6]}

for item in student_numbers:
    grads = df[df['UW ID'].isin(student_numbers[item])]
    print(grads)
</code></pre>
","1","Question"
"78879096","","<p>I am writing a python program to find and return a list of Twin primes between two numbers.</p>
<p>This is my code:</p>
<pre><code>#prime selector
def is_prime(num):
    if num &lt; 2 or num % 2 == 0: 
        return False
    if num == 2: 
        return True
    upr_lmt = int((num ** 0.5) + 1) 
    for number in range(3, upr_lmt, 2): 
        if num % number == 0:
            return False
    return True


def primeLister(end_point, st_point = 2):
    primeList = []
    for i in range(st_point, end_point + 1):
        if is_prime(i):
            primeList.append(i)
    return primeList
</code></pre>
<p>It is saved as prime_selector.py in a folder.</p>
<p>This is the testcase that I have written:</p>
<pre><code># Test case
from prime_selector import primeLister

def log_newline(file_writer):
    file_writer.write(&quot;\n\n&quot;)

def log_testcase(case_num, case_desc, result, file_writer):
    file_writer.write(f&quot;================= Test Case {case_num + 1} =================\n&quot;)
    print((f&quot;================= Test Case {case_num + 1} =================&quot;))
    file_writer.write(case_desc)
    print(case_desc, end = &quot;&quot;)
    file_writer.write(result)
    print(result)

num_list = [99991,999999937]

with open(&quot;./primeLister_testcase&quot;,&quot;w&quot;) as file_writer:
    for case_num, i in enumerate(num_list):
        case_desc = f&quot;Listing all prime numbers till {i}:\n&quot;
        result = &quot;&quot;.join([f&quot; &gt; {prime}\n&quot; for prime in primeLister(i)])

        log_testcase(case_num, case_desc, result, file_writer)

        if case_num + 1 != len(num_list):
            log_newline(file_writer)    

</code></pre>
<p>The testcase is also saved in the same folder locally.
The program stops abruptly during the execution of <code>primeLister</code> testcase after writing the primes up to 99991 in the file.</p>
<p>I guess that it stops during the process of listing primes between 99991 and 999999937. I've got no idea why.
My computer has an Intel i5-12450H processor with 16GB RAM. If that's relevant.</p>
<p>I have already tried implementing an infinite loop, threading and also using exception handling. Nothing has worked so far. What am I doing wrong?</p>
<p>I was expecting the program to keep executing until it found all the primes within the provided range.</p>
","-2","Question"
"78881023","","<p>Say that I have this list:</p>
<pre><code>listexample = list(books = list(list(
                    title=&quot;Book 1&quot;,
                    entry = &quot;entry 1&quot;,
                    publisher = &quot;Books Unlimited&quot;,
                    authors = list(
                                list(name=&quot;bob&quot;, location=&quot;north dakota&quot;),
                                list(name=&quot;susan&quot;, location=&quot;california&quot;),
                                list(name=&quot;tim&quot;)),
                    isbn = &quot;1358&quot;,
                    universities = list(
                                list(univ=&quot;univ1&quot;),
                                list(univ=&quot;univ2&quot;))
                    ),
                    list(
                        title=&quot;Book 2&quot;,
                        entry = &quot;entry 2&quot;,
                        publisher = &quot;Books Unified&quot;,
                        authors = list(
                            list(name=&quot;tom&quot;, location=&quot;north dakota&quot;),
                            list(name=&quot;sally&quot;, location=&quot;california&quot;),
                            list(name=&quot;erica&quot;, location=&quot;berlin&quot;)),
                        isbn = &quot;1258&quot;,
                        universities = list(
                            list(univ=&quot;univ5&quot;),
                            list(univ=&quot;univ2&quot;),
                            list(univ=&quot;univ99&quot;),
                            list(univ=&quot;univ2&quot;),
                            list(univ=&quot;univ3&quot;))
                    )   
                ),
     misc = list(name=&quot;Jim Smith&quot;, location=&quot;Alaska&quot;))
</code></pre>
<p>How can I create a dataframe (or tibble is also fine) where each row is an author? I want to completely ignore the second element of the main list (<code>misc</code>). I also want to ignore <code>universities</code>, <code>isbn</code>, and <code>publisher</code>. I still want to keep <code>title</code>, <code>name</code>, <code>location</code>, as well as <code>books</code> (the name of the first element of the main list).</p>
<p>I know that <code>rrapply</code> can be used to iteratively do things, but I am not sure if it is appropriate in this case.</p>
<pre><code>library(rrapply)
rrapply(listexample, how = &quot;bind&quot;)
</code></pre>
","5","Question"
"78883070","","<p>I am trying to sort a nested list by date (which I can). Then if the list has duplicate dates, sort the duplicate dates by time.</p>
<p>The first part of the list is the date or time, second part is the index.</p>
<p>Same index in both lists means they belong with each other:</p>
<ul>
<li><code>[b'05-07-2024', 0]</code> belongs with <code>[b'15-21-00', 0]</code></li>
<li><code>[b'16-08-2024', 1]</code> belongs with <code>[b'23-41-01', 1]</code></li>
</ul>
<p>I can sort one of the lists at a time like this:</p>
<pre><code>index_list = []
for _, index in date_list:
    index_list.append(index)
</code></pre>
<p>The <code>index_list</code> is:</p>
<pre><code>[0, 1, 2]
</code></pre>
<p>But <code>index</code> 1 &amp; 2 should actually be swapped in this case because these are the lists:</p>
<pre><code>date_list = [[b'05-07-2024', 0], [b'16-08-2024', 1], [b'16-08-2024', 2]]
time_list = [[b'15-20-55', 2], [b'15-21-00', 0], [b'23-41-01', 1]]
</code></pre>
<p>In the end I need a list of the indexes of the right order.</p>
<p>In this case that would be:</p>
<pre><code>[0, 2, 1]
</code></pre>
","-1","Question"
"78884897","","<p>I have a function in python that takes the form <code>f(t1, t2, t3, *theta)</code>. And I would like to define a new function <code>g(t1, t3, *theta)</code> defined by</p>
<p><a href=""https://i.sstatic.net/Lqz3xLdr.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/Lqz3xLdr.png"" alt=""enter image description here"" /></a></p>
<p>So for example, g(1,2,3,4,5) = f(1,2,3,4,5) + f(1,4,3,2,5) + f(1,5,3,4,2)</p>
<p>Here is what i have tried:</p>
<pre><code>def g(t1, t3, *theta):
  S = 0
  list_i = list(theta)
  for ti in theta:
    list_i.remove(ti)
    tuple_i = tuple(list_i)
    S += f(t1, ti, t3, tuple_i)
  return S
</code></pre>
<p>but it gives the error <code>TypeError: unsupported operand type(s) for -: 'float' and 'tuple'</code></p>
","-3","Question"
"78886330","","<p>This works, but is it the best way? Performance is not a concern. It just seems clunky and error-prone to do the pop manually.</p>
<p>I want to access all parts of the list in the called functions, but I don't want to know about them from the caller.</p>
<pre><code>def outer():
    myList = ['outer']
    middle(myList)
    print(&quot;back to outer:&quot;, myList)
    
def middle(theList):
    theList.append('middle')
    inner(theList)
    print(&quot;back to middle:&quot;, theList)
    theList.pop()

def inner(expandedList):
    expandedList.append('inner')
    print(&quot;inner:&quot;, expandedList)
    expandedList.pop()
    
outer()


&gt;&gt;&gt;
inner: ['outer', 'middle', 'inner']
back to middle: ['outer', 'middle']
back to outer: ['outer']
&gt;&gt;&gt; 
</code></pre>
<p>If it helps to give context, I'm writing an XML to STL application. As I walk in, x/y/z positional shifts are cumulative as they are written out as absolute triangulated facet vertices, but when I return from a nested situation (the <code>&lt;container&gt;</code> element in my DTD), I no longer should incorporate the shift/offset of the inner element(s).</p>
<p>I've been programming since the 80s, but am relatively new to Python. Variable scope has been one of the more difficult aspects for me to come to terms with. I initially thought the meaning of the list would just naturally pop.</p>
<p>Editing my question to say @Guy has given a good answer.</p>
<p>Beyond that, if it's not going too far afield, I'd like to consider this alternate code sample:</p>
<pre><code>def outer():
    myList = ['outer']
    myVal = 7
    print(&quot;outer myVal&quot;, myVal)
    middle(myList, myVal)
    print(&quot;back to outer:&quot;, myList)
    print(&quot;back to outer:&quot;, myVal)
    
def middle(theList, theVal):
    theList.append('middle')
    theVal += 4
    print(&quot;middle theVal&quot;, theVal)
    inner(theList, theVal)
    print(&quot;back to middle:&quot;, theList)
    print(&quot;back to middle:&quot;, theVal)
    #theList.pop()

def inner(expandedList, fiddledVal):
    expandedList.append('inner')
    fiddledVal = 47
    print(&quot;inner expandedList:&quot;, expandedList)
    print(&quot;inner fiddledVal:&quot;, fiddledVal)
    #expandedList.pop()
    
outer()

&gt;&gt;&gt;
outer myVal 7
middle theVal 11
inner expandedList: ['outer', 'middle', 'inner']
inner fiddledVal: 47
back to middle: ['outer', 'middle', 'inner']
back to middle: 11
back to outer: ['outer', 'middle', 'inner']
back to outer: 7
&gt;&gt;&gt; 
</code></pre>
<p>Simple integers, after returning from a called function, have the same values they had before their visit to the called function. Lists are modified by the called function in ways that persist after returning from it.</p>
<p>Short of reading all the Python documentation, is there something I could read to better understand the underlying distinction between the integer and the list?</p>
","0","Question"
"78894219","","<p>So, I'm poking around at being able to search for the index of an int[2] in a list but I haven't had much luck.</p>
<p>Below is the code I've been playing with:</p>
<pre><code>var coordinates = new List&lt;int[]&gt;();
coordinates.Add(new int[] { 1, 2 });
coordinates.Add(new int[] { 3, 4 });
coordinates.Add(new int[] { 5, 6 });

//foreach (int[] array in coordinates)
//{
//    Console.WriteLine(string.Join(&quot;, &quot;, array));
//}

coordinates.AddRange(new int[3][] { [7, 8], [9, 10], [11, 12] });
foreach (int[] array in coordinates)
{
    Console.WriteLine(string.Join(&quot;, &quot;, array));
}

//var index = coordinates.IndexOf([3,4]);
var index = coordinates.IndexOf(new int[] { 3, 4 });
Console.WriteLine(index);
</code></pre>
<p>Both the above IndexOf lines have returned a value of -1 so I assume my syntax is wrong (or I'm using the wrong tools, which is also possible).  Any suggestions?</p>
","4","Question"
"78894402","","<p>I have the following data frame.</p>
<pre><code>Data_Frame &lt;- data.frame(Factor_1 = rep(LETTERS[1:4], each = 12, length.out = 48), Factor_2 = rep(letters[1:3], each = 4, length.out = 48), Factor_3 = rep(1:2, each = 2, length.out = 48), Response = rnorm(48, 25, 1))
</code></pre>
<p>I want to create a nested list where I've split the data frame by each of the factors in the study in succession. I'll start with a vector containing the column names which contain the factors I want to split the data frame by (this vector will contain the factors in the order I want the resulting list to be nested in).</p>
<pre><code>Factors_to_Split_by &lt;- c(&quot;Factor_1&quot;, &quot;Factor_2&quot;, &quot;Factor_3&quot;)
</code></pre>
<p>The resulting list should look like the following <code>Output</code> object.</p>
<pre><code>Output &lt;- lapply(lapply(split(Data_Frame, Data_Frame[, which(colnames(Data_Frame) == Factors_to_Split_by[1])]), function (x) {
  split(x, x[, which(colnames(x) == Factors_to_Split_by[2])])
}), function (x) {
  lapply(x, function (y) {
    split(y, y[, which(colnames(y) == Factors_to_Split_by[3])])
  })
})
</code></pre>
<p>How can I write a recursive function using <code>Factors_to_Split_by</code> as the input and returning the desired <code>Output</code> list as the output? I may have more than 3 factors to split the data by, and I'd like something modular and efficient and programmatic.</p>
<p>Thanks!</p>
","3","Question"
"78898706","","<p>Im tying to create a effect that make the string &quot;hello&quot; gradually appear:</p>
<pre><code>import time

text = &quot;hello&quot;
alphebet = [
    &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;,
    &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;
]
rtext = []
charNum = -1
alpheNum = -1
matching = 0
for char in text:
  charNum += 1
  while matching == 0:
    alpheNum += 1
    rtext.append(alphebet[alpheNum])
    print(*rtext)
    if alphebet[alpheNum] == char:
      matching = 1
    else:
      rtext.remove(rtext[charNum])
    time.sleep(0.2)
  alpheNum = -1
  matching = 0

</code></pre>
<p>I tried to make it so in each iteration of the for loop for each letter of the text your trying to display they go through each letter and print it as well until it finds the letter and moves on to the next.</p>
","-1","Question"
"78899394","","<p>I have the following data frame.</p>
<pre><code>Data_Frame &lt;- structure(list(Factor_1 = c(&quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;BB&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;CC&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;, &quot;DD&quot;), Factor_2 = c(&quot;aa&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;dd&quot;, &quot;ee&quot;, &quot;ee&quot;, &quot;ee&quot;), Factor_3 = c(&quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;, &quot;xxx&quot;, &quot;yyy&quot;, &quot;zzz&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -60L))
</code></pre>
<p>I want to write a recursive function that will split this data frame into a nested list. The output should look like the following object.</p>
<pre><code>Split_Data &lt;- lapply(lapply(split(Data_Frame, Data_Frame[, 1]), function (x) {
  split(x, x[, 2])
}), function (x) {
  lapply(x, function (y) {
    split(y, y[, 3])
  })
})
</code></pre>
<p>In other words, the data frame should be split first by the value of the first column, then by the value in the second column, and so on and so forth until all the columns have been used to split the data into smaller and smaller data frames (the list becomes more and more nested with each split).</p>
<p>In this example, there are only three columns in the data frame, but in practice, there could be any number of columns, and so I'd like a recursive function to be able to handle any number of columns.</p>
<p><code>base</code> R solutions are preferred.</p>
<p>Thanks!</p>
","1","Question"
"78914941","","<p>Using python,I want to generate a sequence [0,2,6,12,20,30,42,56,72,90];
The logic that I've figured out is like this</p>
<pre><code>i,j =0,0
for i in range(1,10):
j+= 2*i
print(j)
</code></pre>
<p>Instead of for loop, I need to generate the same using list comprehension
and I've tried my best to do so, but in the end no result.
I've tried using this</p>
<pre><code>j =[0]
j = [j[i-1] + 2*i for i in range(1,10)]
</code></pre>
<p>and I ended up getting list out of index error, rightfully so.
I've no clue how to do this; Hence I'm here.
Can anyone help me out?
P.S. I don't want to rely on any generative AI tools for this problem.</p>
","0","Question"
"78920812","","<p>My <code>filter_list</code> has a large number of elements. The filtering below works but how would one make the <code>dplyr::filter</code> more concise?</p>
<p>I couldn't make <code>all_of</code> work.</p>
<pre class=""lang-r prettyprint-override""><code>filter_list &lt;- list(
  hair_color = c(&quot;blond&quot;, &quot;brown&quot;),
  skin_color = &quot;light&quot;
)

dplyr::starwars |&gt; 
  dplyr::filter(
    hair_color %in% filter_list[[&quot;hair_color&quot;]],
    skin_color %in% filter_list[[&quot;skin_color&quot;]]
  )
</code></pre>
","6","Question"
"78921713","","<p>I am trying to send a text into a search box which will auto list the items matching the text . I want to select the records which is exactly matching the search text..</p>
<p>Example:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;&lt;title&gt;Test Selection&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;ul id='navlist'&gt;
&lt;li&gt;
 &lt;table style='border:1px solid black'&gt;&lt;tr&gt;&lt;td&gt;1234&lt;/td&gt;&lt;td&gt;Johnas&lt;/td&gt;&lt;td&gt;Active&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
 &lt;/li&gt;
 &lt;li&gt;
 &lt;table style='border:1px solid blue'&gt;&lt;tr&gt;&lt;td&gt;0234&lt;/td&gt;&lt;td&gt;Philips&lt;/td&gt;&lt;td&gt;Active&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;table style='border:1px solid green'&gt;&lt;tr&gt;&lt;td&gt;2235&lt;/td&gt;&lt;td&gt;Joseph&lt;/td&gt;&lt;td&gt;InActive&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>When I send the text 0234, it lists two records  1234 and 0234 . But I want select the second i.e 0234 alone.</p>
<p>I am able to select the first records using the xpath  = &quot;//ul/li/table&quot;, but finding it difficult to locate the records exactly matching the sent text.</p>
<p>tried, contains(.,'0234'), contains(text()='0234'), contains(Text()='0234') . But not working.</p>
<p>Does contains text() also checks for numeric.</p>
","0","Question"
"78923016","","<p>I have a 2D ArrayList for which I want to print out the names with commas if they're in the same row except for the last one. To do this I would need to check if the element before the one I am currently on is empty or exists. How do I do this?</p>
<p>This is my code:</p>
<pre><code>List&lt;List&lt;String&gt;&gt; lists = new ArrayList&lt;&gt;();
    
List&lt;String&gt; bakeryList = new ArrayList&lt;&gt;();
bakeryList.add(&quot;Pasta&quot;);
bakeryList.add(&quot;Garlic bread&quot;);
bakeryList.add(&quot;Donuts&quot;);
    
List&lt;String&gt; produceList = new ArrayList&lt;&gt;();
produceList.add(&quot;Tomatoes&quot;);
produceList.add(&quot;Zucchini&quot;);
produceList.add(&quot;Onions&quot;);
    
List&lt;String&gt; drinkList = new ArrayList&lt;&gt;();
drinkList.add(&quot;Soda&quot;);
drinkList.add(&quot;Water&quot;);
    
lists.add(bakeryList);
lists.add(produceList);
lists.add(drinkList);
    
for (int i = 0; i &lt; lists.size(); i++) {
    for (int j = 0; j &lt; lists.get(i).size(); j++) {
        if (???) {
            System.out.print(lists.get(i).get(j) + &quot;, &quot;);
        } else {
            System.out.print(lists.get(i).get(j));
        }
    }
    System.out.println();
}
</code></pre>
","-2","Question"
"78929975","","<p>I have a series of numbers.</p>
<pre><code>n &lt;- c(10, 5, 35, 16, 2)
n &lt;- as.data.frame(n)
</code></pre>
<p>I ran these numbers through a loop that randomly samples from -18 to 18 the number of times of the values, e.g., 10, 5.</p>
<pre><code>p &lt;- list()
for(i in 1:nrow(n)) {
  p[[i]] &lt;- sample(-18:18, n$n[i], replace = TRUE)
}
</code></pre>
<p>The output looks like this:</p>
<pre><code>[[1]]
[1] 6 1

[[2]]
[1]  4  1 12 -8 -9

[[3]]
[1] -13 -18  18

[[4]]
[1] 17 -4  9 17

[[5]]
[1] -2 18
</code></pre>
<p>How do I convert this to a data frame that also has an ID variable corresponding to the order? I want the output to look like this:</p>
<pre><code>CT  ID
6   1 
1   1
4   2
1   2
12  2
-8  2
-9  2
-13 3
-18 3
18  3
17  4
-4  4
9   4
17  4
-2  5
18  5
</code></pre>
<p>My actual data has around 300 variable cells/lists that need to be converted. I tried creating another loop, but keep encountering syntax errors.</p>
","1","Question"
"78933527","","<p>Python beginner here. In a list such as:</p>
<pre><code>lst = [1,1,1,1,1,2,2,2,3,3,3,3,4,4,4]
</code></pre>
<p>One pair would be (1,1) , (2,2) , (3,3), etc. When this happens it should count as ONE pair.</p>
<p>(1,2) , (2,3), or (3,4) is not a pair.</p>
<p>In this list there are 6 pairs. I want to loop through the list using a for loop to find how many times a pair occurs and when a pair is found, i want to jump to the next sequence.</p>
<p>For example, when starting we immediately have a pair:</p>
<pre><code>[1,1]
</code></pre>
<p>So I want the loop to now continue reading the list from</p>
<pre><code>[1,1,1,2,2,2,3,3,3,3,4,4,4]
</code></pre>
<p>This is to avoid over-counting. Any help would be greatly appreciated!</p>
<p>This is what I have so far:</p>
<pre><code>two_pairs = 0
for c in lst:
    if lst[c] == lst[c+1]:
        c += 2
        two_pairs += 1
</code></pre>
","0","Question"
"78936323","","<p>I have a DataFrame column consisting of lists of strings and one NaN value. I am trying to join the lists of strings while ignoring the NaN with <code>df.loc</code>, <code>Series.notnull()</code>, and <code>Series.apply()</code>. I expect this to join each of the lists while skipping over the NaNs, but I'm receiving &quot;TypeError: can only join an iterable.&quot;</p>
<p>I'm setting up my DataFrame like this:</p>
<pre><code>import pandas as pd

data = {'id': [['54930058LIMFSJIOLQ48'],np.nan,['5493006B6WMKNQ8QNP51 254900425JAG3QVRMM28']]}
df = pd.DataFrame(data)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>    id
0   [54930058LIMFSJIOLQ48]
1   NaN
2   [5493006B6WMKNQ8QNP51 254900425JAG3QVRMM28]
</code></pre>
<p>This is the line I'm using to join the strings. Why is it throwing an error?</p>
<pre><code>df.loc[df['id'].notnull(), 'id'] = df['id'].apply(lambda x: ', '.join(x))
</code></pre>
","0","Question"
"78936557","","<p>I am making a Wordle project. The code where it removes unnecessary items in list 'data' sometimes gives one output and sometimes gives another.</p>
<p>For example, if you set the 'guess' variable to 'AMPLE' (all guesses have to be in all caps) sometimes it gives:</p>
<pre><code>['AI0', 'AC0', 'MI1', 'PI2', 'PC2', 'PW2', 'LI3', 'LC3', 'EI4', 'EC4']
['AI0', 'PI2', 'PW2', 'LI3', 'EI4']
['AC0', 'MI1', 'PC2', 'LC3', 'EC4']
AMPLE
</code></pre>
<p>and sometimes it gives:</p>
<pre><code>['AC0', 'AI0', 'MI1', 'PW2', 'PI2', 'PC2', 'LI3', 'LC3', 'EI4', 'EC4']
['AI0', 'PI2', 'PI2', 'LI3', 'EI4']
['AC0', 'MI1', 'PW2', 'PC2', 'LC3', 'EC4']
AMPPLE
</code></pre>
<p>The part of the code where I think it breaks:</p>
<pre><code>remove = []

    for x in range(len(data) - 1):
        if data[x][2] == data[x + 1][2]:
            if data[x][1] == &quot;C&quot;:
                remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;W&quot;:
                if data[x + 1][1] == &quot;C&quot;: 
                    remove.append(str(data[x]))
                elif data[x + 1][1] == &quot;I&quot;: 
                    remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;I&quot;: 
                remove.append(str(data[x]))

</code></pre>
<p>Entire Code:</p>
<pre><code>#Word and Guess
word = &quot;APPLE&quot;
guess = &quot;AMPLE&quot;

#The soon to be list of letters that will lead to the output
data = []

#Checking if guess is valid
if len(guess) != 5:
    print(&quot;Guess should be 5 letters long.&quot;)
if guess.isalpha() == False:
    print(&quot;Guess should be an English word.&quot;)
else:
    for x in range(5):
        for y in range(5):
            #Adds each letter of the guess with its status and index
            #C - Correct Place, W - Wrong Place Correct Letter, I - Incorrect
            if word[x] == guess[y]:
                if x == y:
                    data.append(guess[y] + &quot;C&quot; + str(y))
                else:
                    data.append(guess[y] + &quot;W&quot; + str(y))
            else:
                data.append(guess[y] + &quot;I&quot; + str(y))

    #Removes duplicates
    data = set(data)
    data = list(data)          

    #Sorts based on index
    for x in range(len(data)):
        for y in range(len(data) - x - 1):
            if data[y][2] &gt; data[y + 1][2]:
                temp = data[y]
                data[y] = data[y + 1]
                data[y + 1] = temp

    #Removes all unnecessary letters ig. removes AI0 if there is AC0
    remove = []

    for x in range(len(data) - 1):
        if data[x][2] == data[x + 1][2]:
            if data[x][1] == &quot;C&quot;:
                remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;W&quot;:
                if data[x + 1][1] == &quot;C&quot;: 
                    remove.append(str(data[x]))
                elif data[x + 1][1] == &quot;I&quot;: 
                    remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;I&quot;: 
                remove.append(str(data[x]))

    oL = [x for x in data if x not in remove]

    #Makes output have colorful letters for convenience 
    output = &quot;&quot;

    for x in range(len(oL)):
        if oL[x][1] == &quot;C&quot;:
            output = output + &quot;\033[1;33;40m&quot; + oL[x][0]
        elif oL[x][1] == &quot;W&quot;:
            output = output + &quot;\033[1;32;40m&quot; + oL[x][0]
        elif oL[x][1] == &quot;I&quot;:
            output = output + &quot;\033[1;37;40m&quot; + oL[x][0]
    output = output + &quot;\033[0;37;40m&quot;

#Tests
print(data)
print(remove)
print(oL)

#Output
print(output)
</code></pre>
<p>I have tried changing that part of the code, but to no avail. I believe the problem is in that specific line of code or how sets work as they are unordered. I am sorry if the answer is pretty obvious as I am not that great at Python. I hope there is a solution to this problem.</p>
","-2","Question"
"78937366","","<p>Say I have a list of tuples like this, where the int is the &quot;id&quot; for this purpose:</p>
<pre><code>records_by_id = [(10, 'bubble1'), (5, 'bubble2'), (4, 'bubble3'), (0, 'bubble4'), (3, 'bubble5'),]
</code></pre>
<p>... and I sort this by the first element of the tuple:</p>
<pre><code>records_by_id.sort(key = lambda x: x[0])
</code></pre>
<p>... this gives:</p>
<pre><code>[(0, 'bubble4'), (3, 'bubble5'), (4, 'bubble3'), (5, 'bubble2'), (10, 'bubble1'),]
</code></pre>
<p>Now, given the number 4, how do I locate the list index of &quot;(4, 'bubble3')&quot;? Obviously these tuples are now sorted by their first element, so a brute force iteration through the list is not ideal. I'm thinking there must be a way of using <code>bisect</code> ... or something similar. Any ideas?</p>
","-1","Question"
"78944066","","<p>Hello I have a list of NamedTuples like this:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import NamedTuple

class Car(NamedTuple):
    name: str
    mileage: int


lst = [Car(name='car_1', mileage=100), Car(name='car_2', mileage=200)]
</code></pre>
<p>How can I remove the corresponding tuple from the list if I just have the car name, say <code>car_1</code> ?</p>
<p>I can create another list by removing, like so:</p>
<pre><code>[namedtup for namedtup  in lst if namedtup.name != &quot;car_1&quot;]
</code></pre>
<p>but I want to remove it like list <code>remove()</code> from the original list.</p>
","-1","Question"
"78946135","","<p>Currently I can create a list of conversion functions like the following:</p>
<pre class=""lang-py prettyprint-override""><code>casts = [float, float, int, str, int, str, str]
</code></pre>
<p>but I would like to do it in the following manner:</p>
<pre class=""lang-py prettyprint-override""><code>casts = input(&quot;Enter the casts: &quot;) # this would be str str int int float
</code></pre>
<p>I tried just doing <code>cast.split()</code>
but that only outputs a list of strings and not the conversion functions.
How would I go about achieving my objective?</p>
","1","Question"
"78948915","","<p>I currently have the following kind of code:</p>
<pre><code>List&lt;Product&gt; products = Db.GetAllProducts(database);

foreach (var part in ListOfParts)
{
    if (part.ProductId != null)
    {
        if (products.Where(o =&gt; o.Id == part.ProductId).FirstOrDefault() == null)
        { ...}
</code></pre>
<p>You can see that I'm doing quite a lot of <code>produces.Where(o =&gt; o.Id == ...).FirstOrDefault()</code>.</p>
<p>While working with a table (general database technology), it's possible to add an index in order to speed up searching.</p>
<p>Does such a thing also exist for <code>System.Generic.Collections.List</code> class, or for another class in the <code>System.Generic.Collections</code> namespace?</p>
","-1","Question"
"78954735","","<p>If given a list such as:</p>
<pre><code>test = ['1', '1', '1', '1', '1', '1']   
</code></pre>
<p>and a user given number, say:</p>
<pre><code>num = 2
</code></pre>
<p>How do I loop through the list and make sublists every time we arrive at the given number? In other words I want to split the list into elements of num which in this case is 2 and create sublists that contain 2 elements.</p>
<p>For example the desired list I want to create is:</p>
<pre><code>test = [['1','1'], ['1','1'], ['1','1']]
</code></pre>
<p>Lets say there was a situation where:</p>
<pre><code>num = 3
</code></pre>
<p>then the desired list would be:</p>
<pre><code>test = [['1', '1', '1'], ['1','1','1']]
</code></pre>
<p>Any help would be greatly appreciated, thank you!</p>
<pre><code>for nums in test:
    pass
</code></pre>
","-1","Question"
"78959695","","<p>I'm trying to compare values from a List which consists of Map&lt;String, Object&gt;, but the result always returns false despite the value I'm comparing it with is the same. Is there something I did wrong here?</p>
<pre><code>List&lt;Map&lt;String, Object&gt;&gt; orderList = [{&quot;Nasi Goreng&quot;: 1}];
...
ElevatedButton(onPressed: () {
  print(orderList);
  assert(orderList[0] == {&quot;Nasi Goreng&quot;: 1});
}, child: Text(&quot;+&quot;))

</code></pre>
<p>I tried using <code>assert</code>, <code>contains</code> and <code>indexOf</code>, but all those returned false, false and -1. I expected one of those should at least return true or returns the index of the item (which is 0), but I keep getting false. What I get from running assert is:</p>
<pre><code>Failed assertion: line 178 pos 68: 'orderList[0] == {&quot;Nasi Goreng&quot;: 1}': is not true.
</code></pre>
","0","Question"
"78962955","","<p>Imagine I have the followuing list of Data Frames:</p>
<pre><code>df1 &lt;- data.frame (x = c(1, 2, 3), y = c(12, 11, 10), text = c(&quot;banana&quot;, &quot;avocado&quot;, &quot;letuce&quot;))
df2 &lt;- data.frame (x = c(4, 5, &quot;letuce&quot;), y = c(9, 8, 7), text = c(&quot;watermelon&quot;, &quot;avocado&quot;, &quot;grape&quot;))
df3 &lt;- data.frame (x = c(7, 8, 9), y = c(6, 5, 4), text = c(&quot;letuce&quot;, &quot;apricot&quot;, &quot;apple&quot;))
df4 &lt;- data.frame (x = c(10, 11, 12), y = c(3, &quot;letuce&quot;, 1), text = c(&quot;pineaple&quot;, &quot;blueberry&quot;, &quot;morango&quot;))

my_list &lt;- list(df1, df2, df3, df4)

</code></pre>
<p>How can i keep only the data frames that contains the word &quot;letuce&quot; in the &quot;text&quot; column?</p>
<p>The desired result is this:</p>
<pre><code>subset_list &lt;- list(df1, df3)
</code></pre>
<p>I've managed to match the string using this code:</p>
<pre><code>library(tidyverse)
lapply(my_list, with, str_detect(text, &quot;letuce&quot;))
</code></pre>
","0","Question"
"78963669","","<p>I have two list of dict:</p>
<pre><code>list1 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:1}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]
list2 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:2}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]
</code></pre>
<p>how can I create a new list of dict with the same keys and add the values of the &quot;amount&quot; of each dict that has the same &quot;month&quot;?</p>
<pre><code>target = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:3}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;: 8}]
</code></pre>
","-2","Question"
"78967416","","<p>I want to create the list [0, 2, 3, ..., 234] in python, possibly within a row and without listing all numbers explicitly</p>
<p>I know that following code works:</p>
<pre><code>list1 = [0]
for i in range(2,235):
    list1.append(i)
</code></pre>
<p>But are there any possibilities to finish that within a row?</p>
","-4","Question"
"78967772","","<p>I am trying to write a function that generates a random name by selecting a first name from one list and a last name from another list. I want the last item in the last name list to randomly select an item from the first name list, concatenate it with 'son', and then provide the resulting string. I want it to be a different result each time the item is selected- ie 'Richardson' one time and 'Jacksonson' the next.</p>
<p>I tried making the last item <code>random.choice(first_names) + 'son'</code>, which gives me the same result each time. I also tried making it <code>lambda:random.choice(first_names) + 'son'</code>, which gives me the identifier of the lambda function <code>&lt;function &lt;lambda&gt; at [0xnumbers I'm not sharing]&gt;</code>. It gives me the result I want if I use parentheses after the index, but that means that if the code selects one of the other results, it throws an error. My code looks sort of like this (albeit with longer lists, but otherwise identical):</p>
<pre><code>import random

first_names = ['James','Ida','Crocodile']
last_names = ['Smith','Williams','Ramos',lambda:random.choice(first_names) + 'son']

print(last_names[-1]())
print(last_names[-1]()) #to check if it has the same result every time
                        #this is a lot less likely in my actual code, since there's &gt;100 names
</code></pre>
","-1","Question"
"78970278","","<p>Do Kotlin's List/Array data structures have a findSublist method analogous to String.indexOf(CharSequence), that takes a List/Array/Sequence to match against the list?</p>
","2","Question"
"78970408","","<p>So I'm having a trouble. I'm working with python and I have a list that look like this example</p>
<pre><code>['1', 'A', 'B', 'C', '1', 'D', '1', 'E', 'F', '1', 'G', 'H', 'I']
</code></pre>
<p>What I wanted is to make a list out of the elements between '1'</p>
<p>Like this</p>
<pre><code>[['A', 'B', 'C'],['D'],['E', 'F'],['G', 'H', 'I']]
</code></pre>
<p>Anyone can give me an advice on how to achieve this?</p>
","-1","Question"
"78970824","","<p>I have two lists: <code>list_1</code> and <code>list_2</code>.
<code>list_1</code> contains integers,
<code>list_2</code> contains integers + chars (I added it in <code>list_2</code> by concatenating int, str using the str() func).</p>
<pre><code>list_1 = ['101', '102', and so on..]
list_2 = ['www.example.com/101', 'www.example.com/102' and so on]
</code></pre>
<p>Now I want to compare the integer elements inside these two lists with each other one by one to verify if all elements are in same positions in both lists. <code>list_2</code> also contains url, but I want to skip that while comparing.</p>
<pre><code>list_1[0] == list_2[0]
list_1[1] == list_2[1] and so on... 
</code></pre>
<p>The lists are huge so I need loop but it is not iterating integer.</p>
<pre><code>data1 = 101
data2 = 200
url = &quot;www.example.com/&quot;

hrc_list = []
fp_list = []


#Generate integer range and put it inside list
for hrc in range(data1, data2 + 1):
    hrc_list.append(hrc)
#Concat URL + Integer and save inside the FP_LIST
    fp_list.append(url + str(hrc))


# LIST ELEMENTS ORDER COMPARISON AND VALIDATION

for items in hrc_list:
    if range(hrc_list) == range(fp_list):
        print(&quot;Equal&quot;)
    else:
        print(&quot;Not Equal&quot;)
</code></pre>
<p>The output shows: List object cannot be interpreted by Integer.</p>
<p>I tried to use <code>for</code> loop with <code>range</code> function to compare two lists and print if its equal or not. But I don't have an idea how to compare the position and element of both lists with each other without comparing url. I want to validate the contents and positions of both lists.</p>
<p>You can see above I only want to compare integers from both lists with along their positions. I dont think <code>sort()</code> or related functions can work in this case.</p>
","0","Question"
"78970904","","<p>I'm trying to iterate through a list of dataframes and use indexing to pass in each dataframe in the list as an argument to a function. The list is simply a list of each dataframe.</p>
<pre><code>    myFunc &lt;- function (df1) {
      
      #this is the animals data
      my_plot_1 &lt;- ggplot(df1, aes(x=size, y=avg_sleep_hours))
    }
    
    rating &lt;- 1:4
    animal &lt;- c('koala', 'hedgehog', 'sloth', 'panda')
    country &lt;- c('Australia', 'Italy', 'Peru', 'China')
    avg_sleep_hours &lt;- c(21, 18, 17, 10)
    size &lt;- c(221, 418, 417, 410)
    super_sleepers &lt;- data.frame(rating, animal, country, avg_sleep_hours, size)
    
    
    rating &lt;- 1:4
    animal &lt;- c('bear', 'moose', 'alpaca', 'snake')
    country &lt;- c('USA', 'Mongolia', 'Argentina', 'Japan')
    avg_sleep_hours &lt;- c(1, 8, 7, 1)
    size &lt;- c(261, 558, 227, 2)
    no_sleepers &lt;- data.frame(rating, animal, country, avg_sleep_hours, size)
                              
    
    animal_parameters &lt;- list(super_sleepers, no_sleepers)
  
    
    for (i in 1:length(animal_parameters)){
      myFunc(animal_parameters[[i]])
    }
</code></pre>
","0","Question"
"78977970","","<p>I have list of dicts.
Each dict has the same items with a different value. It is a question code with the answer.
So question &quot;a&quot; can be answerd with a scale of 1-7. If you do not want to answer that question, it is an &quot;X&quot; in the answer sheet.</p>
<p>example:</p>
<pre><code>[
{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:&quot;X&quot;},
{&quot;a&quot;:1,&quot;b&quot;:&quot;X&quot;,&quot;c&quot;:3},
{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:&quot;X&quot;}
]
</code></pre>
<p>My goal is to know, if there is any question, that has less than 5 or more than 50 valid answers. A valid answer is anything except &quot;X&quot;.
So I need to count now, how often any item is not equal &quot;X&quot;.
In that case, for &quot;a&quot; it would be 3, for &quot;b&quot; it would be 2 and for &quot;c&quot; it would be 1.</p>
<p>I could loop through it.
Make an array for each item in the dicts. Then loop trough the list, inside that loop through the dict and add +1 to the item in the array. Afterwards check the counter, if there is any item &lt; 5 or &gt; 50.</p>
<p>But there is probably some sweet python code (as always) that does this in like 3 lines. While my loop would probably be 5 times bigger.
And is faster. I have to repeat that check a few thousand times. So speed is kinda important. Not super duper important, but nice to have</p>
","-2","Question"
"78987342","","<p>I have many dataframes imported from csv files, all having one similar column name: ActivityHour. Its class was imported as character, but I want to change it to date and time with the lubridate mdy_hms() function in R. So, I created a list of the dataframes and ran a for loop so that I do not write the code for each dataframe. However, whenever I try to run class() for ActivityHour for any of these dataframes in the terminal after running the for loop, the output is still character. Interestingly, if I include the class() function inside the for loop, the class of ActivityHour does become POSIXct. I would really appreciate your help! Thank you!</p>
<p>Here is the code I tried to run; I will use sample data:</p>
<pre><code>hourlyIntensities1 &lt;- data.frame(
    Id = c(1,2,3,4),
    ActivityHour = c(&quot;3/12/2016 12:00:00 AM&quot;,&quot;3/12/2016 2:00:00 AM&quot;,&quot;3/12/2016 4:00:00 PM&quot;,&quot;3/13/2016 1:00:00 AM&quot;),
    Intensity = c(2,5,3,9)
)
hourlyIntensities2 &lt;- data.frame(
    Id = c(1,2,3,4),
    ActivityHour = c(&quot;4/12/2016 12:00:00 AM&quot;,&quot;4/12/2016 2:00:00 AM&quot;,&quot;4/12/2016 4:00:00 PM&quot;,&quot;4/13/2016 1:00:00 AM&quot;),
    Intensity = c(7,4,8,2)
)
hourlySteps1 &lt;- data.frame(
    Id = c(1,2,3,4),
    ActivityHour = c(&quot;3/12/2016 12:00:00 AM&quot;,&quot;3/12/2016 2:00:00 AM&quot;,&quot;3/12/2016 4:00:00 PM&quot;,&quot;3/13/2016 1:00:00 AM&quot;),
    Steps = c(950, 784, 631, 982)
)
hourlySteps2 &lt;- data.frame(
    Id = c(1,2,3,4),
    ActivityHour = c(&quot;3/12/2016 12:00:00 AM&quot;,&quot;3/12/2016 2:00:00 AM&quot;,&quot;3/12/2016 4:00:00 PM&quot;,&quot;3/13/2016 1:00:00 AM&quot;),
    Steps = c(740, 650, 875, 265)
)
hourly &lt;- list(hourlyIntensities1, hourlyIntensities2, hourlySteps1, hourlySteps2)
for (df in hourly) {
    df$ActivityHour &lt;- mdy_hms(df$ActivityHour)
    print(class(df$ActivityHour))
}
</code></pre>
<p>I got the following result:</p>
<pre><code>[1] &quot;POSIXct&quot; &quot;POSIXt&quot; 

[1] &quot;POSIXct&quot; &quot;POSIXt&quot; 

[1] &quot;POSIXct&quot; &quot;POSIXt&quot; 

[1] &quot;POSIXct&quot; &quot;POSIXt&quot; 
</code></pre>
<p>Then, I ran the following...</p>
<p><code>print(class(hourlyIntensities1$ActivityHour))</code></p>
<p>...only to get this:</p>
<p><code>[1] &quot;character&quot;</code></p>
","0","Question"
"78987732","","<p>I'm trying to have the user input a number, that input is checked to see if it says &quot;stop&quot;, then the number is added to a list. I want it to keep going until you type &quot;stop&quot; and then display the list. I've tried a bunch of different ways and I feel like I'm getting no where.</p>
<pre><code>def listsample():
    sample = []
    killcode = str(&quot;stop&quot;)
    sample.append(input(&quot;enter number&quot;))
    while sample[-1] != killcode:
        if killcode not in sample:
                sample.append(input(&quot;enter number&quot;))
        elif killcode in sample:
            return sample
        

def printsample(sample):
    print(sample)
    

listsample()
printsample(listsample())
</code></pre>
<p>I've tried moving stuff around a lot. I didn't keep my previous trial and error samples. I understand the bare minimum of loops and stuff, this is kind of me trying to figure them out.</p>
<p>I tried doing one of the answers and now it works but it still allows strings to be put into the list. From what I understand, elements in a list are always strings. I attempted to set the input to an integer from the get-go but that causes an error to pop if I put in a string and it stops the code. How would I modify it so it doesn't allow strings into the input other than 'stop' which would then allow the loop to finish? I've now tried using a try:except loop which I don't <em>fully</em> understand but it makes sense to me logically that it should work but if I enter a string it just returns &quot;none&quot;.</p>
<pre><code>def listsample():
    sample = []
    killcode = &quot;stop&quot;
    while 1:  # simply loop until stop is recevied!
        try:
            user_input = int(input(&quot;Enter number: &quot;))
            if user_input == killcode:
                return sample
            sample.append(user_input)
        except ValueError:
            break



def printsample(sample):
    print(sample)
    

printsample(listsample())
</code></pre>
","1","Question"
"78997912","","<p>I have a pandas dataframe like as below</p>
<pre><code>data = {
    'cust_id': ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc'],
    'product_id': [12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    'purchase_country': ['India', 'India', 'India', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia']
}
df = pd.DataFrame(data)
</code></pre>
<p>My objective is to do the below for each group of cust_id and product_id</p>
<p>a) create two output columns - 'pct_region_split' and 'num_region_split'</p>
<p>b) For 'pct_region_split' - store the % of country split. For ex: For the specific group shown in sample data, Australia - 70% (7 out of 10 is 70%) and India - 30% (3 out of 10 is 30%)</p>
<p>c) For 'num_region_split' - just store the no of rows for country value. For ex: For the specific group shown in sample data, Australia - 7 rows out of total 10 and India is 3 out of total 10.</p>
<p>b) Store the values in a list format (descending order). Meaning, Australia should appear first because it has 70% as the value (which is higher than India).</p>
<p>I tried the below but it is going no where</p>
<pre><code>df['total_purchases'] = df.groupby(['cust_id', 'product_id'])['purchase_country'].transform('size')
df['unique_country'] = df.groupby(['cust_id', 'product_id'])['purchase_country'].transform('nunique')
</code></pre>
<p>Please do note that my real data has more than 1000 customers and 200 product combinations.</p>
<p>I expect my output in a new dataframe like as shown below for each cust and product_id combination</p>
<p><a href=""https://i.sstatic.net/EDqb27GZ.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/EDqb27GZ.png"" alt=""enter image description here"" /></a></p>
","1","Question"
"78998092","","<p>Trying to save one million records into a SQL server table using EF Core. First reading the one million record from a staging table and store into a List then using the EF Core's <code>AddRangeAsync</code> function to save the data from the list. Here is the code block</p>
<pre><code>    var importJobValidations = new List&lt;ImportJobValidation&gt;();
    importJobValidations.AddRange(
        (from stg in stagingUnits.AsEnumerable()
        select new ImportJobValidation
        {
            Guid = Guid.NewGuid(),
            StudyProductStagingID = stg.Id,
            IsValidationSuccessful = !errors.Exists(e =&gt; e.StagingId == stg.Id),
            Type = &quot;UPLOAD&quot;,
            IsActive = true,
            CreatedBy = userId,
            CreatedOn = DateTime.UtcNow
        }));
    await _supplyManagementHangFireContext.AddRangeAsync(importJobValidations);
    await _supplyManagementHangFireContext.SaveChangesAsync();
</code></pre>
<p>the <code>stagingUnits</code> is an IQueryable. The above code block throwing an <code>Out of memory exception</code>.
What would be the best way to fix the out of memory exception in this scenario.</p>
","0","Question"
"79006076","","<p>I have two dataframes that I would like to compare, and I would need to know if the objects stored in df1 are also present in my df2.</p>
<p>However, objects of my df2 are longer because of many additional information.</p>
<p>As an example, my df1:
df1 = pandas.DataFrame(data = {'data1' : ['S10321Nr1.1', 'S10321Nr2.1', 'S10321Nr3.1', 'S10321Nr4.1']})</p>
<p>then, my df2:
df2 = pandas.DataFrame(data = {'data2' : ['HPAFII/Counts/S10323Nr1/HPAFII.S10323Nr1.1.genes.raw.csv.gz', 'HPAFII/Counts/S10323Nr1/HPAFII.S10323Nr1.2.genes.raw.csv.gz.md5sum', 'HPAFII/Counts/S10323Nr10/HPAFII.S10323Nr1.3.genes.raw.csv.gz', 'HPAFII/Counts/S10323Nr10/HPAFII.S10323Nr4.1.genes.raw.csv.gz.md5sum']})</p>
<p>Is there a way to get df1 rows for which the number in df1 is also present in df2?
I wish it returns a new column in df1 like:</p>
<p>df1 = pandas.DataFrame(data = {'data1' : ['S10321Nr1.1', 'S10321Nr2.1', 'S10321Nr3.1', 'S10321Nr4.1'], 'true-false' : ['True', 'False', 'False', 'True']})</p>
<p>I already tried with the following strategies, but it doesn't work properly (return nan):</p>
<p>df1[&quot;TrueFalse&quot;] = df2['data_name'].apply(lambda x: 1 if any(i in x for i in df1) else 0)</p>
<p>df1['new_col'] = df1[~df1['data1'].isin(df2)]</p>
<p>Thanks!</p>
","0","Question"
"79006637","","<p>I have a list of my team members ~300 of us. There is also another list of invitees to a party ~4,000 persons. How do I find out which team members are being invited to the party?</p>
<p>Here's a scaled down example. Note that the invitee names are in varying formats:</p>
<pre class=""lang-py prettyprint-override""><code>my_team_list = ['Andy', 'Bernice', 'Charlotte', 'David', 'Evan']
invitee_list = ['Mandy (Team A)', 'Navin - Team A', 'Olive Team B', 'Peter Team C', 'Queenie (D)', 'Royston -D team', 'Steven (E team)', 'Tammy (E team)', 'Bernice (Z team)', 'Victor (A Team)', 'Wendy (Team B)', 'David (Team Z)']

for name in my_team_list:
    for invitee in invitee_list:
        if name in invitee:
            print(invitee)

#output
Bernice (Z team)
David (Team Z)
</code></pre>
<p>The above code is a brute force example of getting the solution, but the time complexity is O(n x m). I am wondering is there a more efficient way to get this done?</p>
","0","Question"
"79015172","","<p>I have an array that differs everytime in length that somewhat looks like the following when I print it:</p>
<pre><code>PartList = Part1,Part2,Part4
</code></pre>
<p>and I want it to be</p>
<pre><code>PartList = &quot;Part1&quot;,&quot;Part2&quot;,&quot;Part4&quot;
</code></pre>
<p>So I can use it further in my script after I split it.
It should be very simple but I want to know the easiest way. I cannot change the list by hand, because it is generated.</p>
","0","Question"
"79020424","","<p>MRE:</p>
<pre class=""lang-hs prettyprint-override""><code>class Foo s where
    myCons :: Char -&gt; s -&gt; s
    myCons c xs = &lt;my definition of however I wish to interpret this&gt;

instance (Eq, Show) Foo where
    (:) x y = x `myCons` y
</code></pre>
<p>Error:</p>
<pre><code>Pattern bindings (except simple variables) not allowed in instance declaration:
      (:) x y = x `myCons` y
</code></pre>
<p>What am I doing wrong?</p>
<p>What I want to do:</p>
<pre class=""lang-hs prettyprint-override""><code>fooFromList :: [Int] -&gt; Foo
fooFromList [] = Foo []
fooFromList (x:xs) = let x' = (convertDigitToChar x) in x':(fooFromList xs)
</code></pre>
","0","Question"
"79021907","","<p>This is probably a duplicate, but I don't seem to find this specific case.</p>
<p>Say I have two lists:</p>
<pre><code>list1 &lt;- as.list(c(5, 8, 9))
list2 &lt;- as.list(c(8, 10, 11))
</code></pre>
<p>I know how to apply a function to one list. Say I want to apply the following to <code>list1</code>:</p>
<pre><code>lapply(list1, function(x){x+100})
</code></pre>
<p>But what if I only want to apply such function to <code>list1</code> when the corresponding value in <code>list2</code> is <code>&gt;=10</code>? So that my result is:</p>
<pre><code>[[1]]
[1] 5

[[2]]
[1] 108

[[3]]
[1] 109
</code></pre>
<p>And even more, how can I sum 100 to the value in <code>list1</code> and subtract the value in <code>list2</code> only when the value in <code>list2</code> is <code>&gt;=10</code>?</p>
<p>Something like the following, which obviously does not work:</p>
<pre><code>lapply(list1, list2, function(x,y){if (y&gt;=10) x+100-y})
</code></pre>
<p>Thanks!</p>
","2","Question"
"79023187","","<p>I would like to generate/enumerate all possible lists of non-negative integers such that the algorithm will generate lists like the following at some point</p>
<pre class=""lang-py prettyprint-override""><code>[1]
[24542,0]
[245,904609,848,24128,350,999]
</code></pre>
<p>In other words, for all possible non-negative integers, generate all possible lists which contain that many non-negative integers.</p>
<p>I have figured that the trick for a list with two numbers is to enumerate their values diagonally like this</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>first value\second value</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0 (this will be generated first)</td>
<td>2 (this third etc.)</td>
<td>5</td>
<td>9</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1 (this second)</td>
<td>4</td>
<td>8</td>
<td></td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>3</td>
<td>7</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>6</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table></div>
<pre class=""lang-py prettyprint-override""><code>def genpair():
    x = 0
    y = 0
    yield x,y
    maxx = 0
    while True:
        maxx += 1
        x = maxx
        y = 0
        while x &gt;= 0:
            yield x,y
            x -= 1
            y += 1
    
gen = genpair()

for i in range(10):
    print(next(gen))
</code></pre>
<p>But does the same trick (or another) also make this work for lists of arbitrary length?</p>
","3","Question"
"79023711","","<p>I have a list with NumPy arrays as elements that looks like this:</p>
<pre><code>[array([ 0.2, -2.3,  5.3]),
 array([-1.6, -1.7,  0.3]),
 array([ 2.4, -0.2, -3.0]),
 array([-4.1, -2.3, -2.7])]
</code></pre>
<p>and I want to convert it into 3 lists, each with elements from the columns of the above list. So the desired outcome looks like</p>
<pre><code>list1 = [0.2, -1.6, 2.4, -4.1]
list2 = [-2.3, -1.7, -0.2, -2.3]
list3 = [5.3, 0.3, -3.0, -2.7]
</code></pre>
","0","Question"
"79023899","","<p>I had this function</p>
<pre><code>def calc_score(player):
    &quot;&quot;&quot;Calculates the score of the specified player (player)&quot;&quot;&quot;
    score = 0
    if player == &quot;user&quot;:
        for card in range(0, len(user_cards)):
            score += user_cards[int(card)]
    elif player == &quot;comp&quot;:
        for card in range(0, len(comp_cards)):
            score += comp_cards[int(card)]
    else:
        return
    return score
</code></pre>
<p>and when it was called it gave me this error:</p>
<pre><code>line 27, in calc_score
    score += user_cards[int(card)]
TypeError: unsupported operand type(s) for +=: 'int' and 'list'
</code></pre>
<p>I debugged it in thonny and it turns out it said that <code>['placeholder1', 'placeholder2'][0]</code> just gave the list itself.</p>
<p>I even tested it with seemingly equivalent code and it worked.</p>
<pre><code>user_cards = [11,10]
comp_cards = [10,8]

score = 0
if &quot;user&quot; == &quot;user&quot;:
    for card in range(0, len(user_cards)):
        score += user_cards[int(card)]
elif &quot;user&quot; == &quot;comp&quot;:
    for card in range(0, len(comp_cards)):
        score += comp_cards[int(card)]
else:
    print()
print(score)
</code></pre>
<p>Output: 21</p>
<p>I checked the variables and lists' values and they were normal too.</p>
<p>I couldn't find anything wrong.</p>
<p>Lastly here is the whole script (as of posting this answer):</p>
<pre><code>import random

# Define Variables

cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
user_cards = []
comp_cards = []
user_score = 0
comp_score = 0

# Define Functions

def give_card(num):
    &quot;&quot;&quot;Returns random cards of a certain amount (num)&quot;&quot;&quot;
    num = int(num)
    cards_give = []
    for card in range(0, num):
        cards_give.append(random.choice(cards))
    return cards_give


def calc_score(player):
    &quot;&quot;&quot;Calculates the score of the specified player (player)&quot;&quot;&quot;
    score = 0
    if player == &quot;user&quot;:
        for card in range(0, len(user_cards)):
            score += user_cards[int(card)]
    elif player == &quot;comp&quot;:
        for card in range(0, len(comp_cards)):
            score += comp_cards[int(card)]
    else:
        return
    return score

user_cards.append(give_card(2))
comp_cards.append(give_card(2))
user_score = calc_score(&quot;user&quot;)
comp_score = calc_score(&quot;comp&quot;)
</code></pre>
","0","Question"
"79027200","","<p>I have a column of lists in my polars dataframe. I would like to access and change a value by list index.</p>
<p><strong>Example input</strong></p>
<pre class=""lang-py prettyprint-override""><code>df = pl.DataFrame({
    &quot;values&quot;: [
        [10, 20, 30, 40], 
        [50, 60, 70, 80], 
        [90, 100, 110, 120],
    ],
})
</code></pre>
<p><strong>Pseudocode</strong></p>
<pre class=""lang-py prettyprint-override""><code>df = df.with_columns(
    pl.col(&quot;values&quot;).list.eval(pl.element(3) = 1).alias(&quot;values2&quot;)
)
</code></pre>
<p><strong>Expected outcome</strong></p>
<pre><code>df = pl.DataFrame({
    &quot;values&quot;: [
        [10, 20, 30, 1], 
        [50, 60, 70, 1], 
        [90, 100, 110, 1],
    ],
})
</code></pre>
","3","Question"
"79029031","","<p>I need to create a list in python to gather diverse information about a large number of people (name, date of birth, ID number, e-mail address, address, telephone number, ....).</p>
<p>I would like to store everything in a list where each person would have an index &quot;i&quot; starting from 0 and increasing. The goal would be to retrieve a specific information about person by simply using the index &quot;i&quot; and an abbreviation to indicate the type of info to retrieve about that person (name, id, tel, addr, email, ...).</p>
<p>How to define this and how to access specific elements for a given person?</p>
<p>I have done this previously in Fortran using derived data types where I use the following to retrieve various elements for a given person:</p>
<pre><code>list(i)%name

list(i)%id

list(i)%tel

list(i)%addr

list(i)%email

</code></pre>
<p>I couldn't define the info type (name, id, email, addr, tel, ...) in the list to use it for indexing.</p>
","-1","Question"
"79036220","","<p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.</p>
<p>Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:</p>
<ul>
<li>Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.</li>
<li>Return k.</li>
</ul>
<p>In this question this the code of mine trying to submit but</p>
<pre><code>class Solution:
    def removeDuplicates(self, nums: List[int]) -&gt; int:
        nums = set(nums)
        return len(nums)
</code></pre>
<p>why this line of code is not getting submitted.</p>
<p>Solution in python and explanation why this line of code doesnt working.</p>
","-3","Question"
"79037901","","<p>I am basically looking for the Haskell equivalent of the following python code:</p>
<pre class=""lang-py prettyprint-override""><code>' '.join(['_','a','b','1'])
</code></pre>
<p>I understand that python treats those as strings instead of chars, but... I digress.</p>
<p>MRE:</p>
<pre class=""lang-hs prettyprint-override""><code>[if &lt;some condition is true&gt; then '#' else chr elem | elem &lt;- lst] -- lst is [Integer] (appropriate Integer -&gt; Int conversion function applied, but not specified here)
</code></pre>
<p>expected output:</p>
<pre><code>['#',' ','a',' ','b',... you get the idea]
</code></pre>
<p>What I currently have:</p>
<pre><code>['#','a','b',...]
</code></pre>
<p>Best I could achieve was:</p>
<pre class=""lang-hs prettyprint-override""><code>concat [if &lt;some condition is true&gt; then &quot;# &quot; else [chr elem] ++ &quot; &quot; | elem &lt;- lst]
</code></pre>
<p>which seems like overkill. Is there an easier way to achieve this?</p>
<p>PS: <a href=""https://stackoverflow.com/questions/9220986/is-there-any-haskell-function-to-concatenate-list-with-separator""><code>unwords</code></a> does not take <code>Char</code>s.</p>
","1","Question"
"79044704","","<p>I have two arrays, like below:</p>
<pre><code>user_data = [{'a': '1', 'b': '3'}, {'a': '2', 'b': '4'}, {'a': '5', 'b': '1'}]
available_times_array = ['12:00', '12:10', '12:20']
</code></pre>
<p>And I'm waiting to have this result array:</p>
<pre><code>user_data = [
    {'a': '1', 'b': '3', 'c': '12:00'},
    {'a': '2', 'b': '4', 'c': '12:10'},
    {'a': '5', 'b': '1', 'c': '12:20'}]
</code></pre>
","-7","Question"
"79056582","","<p>I'm creating a program that removes duplicate numbers from a list. The point of the exercise is to use &quot;not in&quot; and &quot;in&quot; operators.</p>
<p>The first time I created the code I created the list without the duplicates inside my for loop. I got a strange answer but I knew the code was correct. Moving the list creation outside the for loop produced the correct result and I dont understand why</p>
<p>Correct output:</p>
<pre><code>my_list = [1, 2, 4, 4, 1, 4, 2, 6, 2, 9]

new_list = []
for i in my_list:
    if i not in new_list:
        new_list.append(i)

print(&quot;The list with unique elements only:&quot;)
print(new_list)
</code></pre>
<p>Incorrect output:</p>
<pre><code>my_list = [1, 2, 4, 4, 1, 4, 2, 6, 2, 9]

for i in my_list:
    new_list = []
    if i not in new_list:
        new_list.append(i)

print(&quot;The list with unique elements only:&quot;)
print(new_list)
</code></pre>
<p>My second code didn't work, it just produced the number 9 but my first piece of code (after moving the list creation statement outside the for loop) gave me the correct result.</p>
","3","Question"
"79056740","","<p>I know about deep copy in Python, but I need exact explanation of what happens after changing the first element of a, or maybe the explanation of happens here.</p>
<pre><code>&gt;&gt;&gt; a=[[0,1],[2,3]]
&gt;&gt;&gt; b=list(a)
&gt;&gt;&gt; a
[[0, 1], [2, 3]]
&gt;&gt;&gt; b
[[0, 1], [2, 3]]
&gt;&gt;&gt; a[0]=[9,10]
&gt;&gt;&gt; a
[[9, 10], [2, 3]]
&gt;&gt;&gt; b
[[0, 1], [2, 3]]
&gt;&gt;&gt; a[1][0]=11
&gt;&gt;&gt; a
[[9, 10], [11, 3]]
&gt;&gt;&gt; b
[[0, 1], [11, 3]]
&gt;&gt;&gt; 
</code></pre>
","0","Question"
"79060295","","<p>I have a list of integers, which are: <code>28525 30068 25975 26740 29286 24947 30067</code>. Using a single mathematical and logical expression (the faster it computes the better), I need to convert them to the list <code>0 1 2 3 4 5 6</code>. I can not use a lookup table or any known hashing as it's too slow, the expression also needs to be in C.</p>
<p>I tried to minimize the amount of information the numbers carry while staying distinguishable by bruteforcing the second component in expression <code>number &amp; x</code>. The smallest number I found this way that kept all the results different from each other was <code>1031</code>, which gave me this: <code>1029 1028 1031 4 6 3 1027</code>. I suppose I could add an another logical operation to narrow it down even further, however, I don't think this is the most efficient approach. Do you have any ideas on how to approach this?</p>
<p>By the way, I'm not sure whether I added the right tags, feel free to fix them if you think they are not suitable.</p>
<p>Update: I tried using remainder operator, which with bruteforcing game me: <code>number % 14 = 7 10 5 0 12 13 9</code>, which is much better, but still requires a couple more steps.</p>
","1","Question"
"79076479","","<p>Given a predicate <code>p</code>, <code>takeWhile p xs</code> gives you the longest prefix of elements satisfying <code>p</code>. How can I get the shortest prefix containing an element that satisfies <code>p</code>?</p>
","1","Question"
"79076724","","<p>The following toy data has 5 variables, <code>X1</code> to <code>X5</code>.</p>
<pre class=""lang-r prettyprint-override""><code>set.seed(123)
df &lt;- data.frame(matrix(rnorm(500), 100, 5))
</code></pre>
<p>I want to perform specific operations on specific variables, using a named list of <em>purrr</em>-style lambda formulas</p>
<pre class=""lang-r prettyprint-override""><code>fun_list &lt;- list(
  X2 = ~ quantile(.x, c(0.1, 0.9), na.rm = TRUE),
  X4 = ~ fivenum(.x, na.rm = TRUE)
)
</code></pre>
<p>How can I apply <code>fun_list</code> to my <code>df</code> according to its variable names?</p>
<p>I know <code>rlang::as_function()</code> can convert a <em>purrr</em>-style formula into a R function. But I guess there is some function that is able to deal with <em>purrr</em>-style formulas intrinsically. Its usage might be</p>
<pre class=""lang-r prettyprint-override""><code>execute(fun_list, environment = df)
</code></pre>
<hr />
<p>The expected output is</p>
<pre><code>$X2
      10%       90% 
-1.289408  1.058432 

$X4
[1] -2.465898194 -0.737146704 -0.003508661  0.693634712  2.571458146
</code></pre>
","2","Question"
"79079532","","<p>I have 2 list of objects. One is the data and the other is the include conditions. I would want to device a filter in such a way that if the list that include conditions, has more properties added, it should still work.</p>
<pre><code>const a = [{name:'John',age:38,role:'Dad'},{name:'Jane',age:38,role:'Mom'},{name:'Patricia',age:11,role:'Daughter'},{name:'Mike',age:6,role:'Son'}]
const b = [{age:38}]

let d = a.filter( (x) =&gt; {
  if (b.some( (y) =&gt; 
     y.age == x.age )  ) {
        return true
     } else return false
})
console.log(d)


</code></pre>
<p>Above code will give me</p>
<pre><code>[{name:'John',age:38,role:'Dad'},{name:'Jane',age:38,role:'Mom'}]
</code></pre>
<p>but if i add another criteria to variable b</p>
<pre><code>const b = [{age:38}, {role:'Son'}]
</code></pre>
<p>I need the result to be</p>
<pre><code>[{name:'John',age:38,role:'Dad'},{name:'Jane',age:38,role:'Mom'},{name:'Mike',age:6,role:'Son'}]
</code></pre>
<p>The include condition can keep growing. Is it possible to device a filter condition to handle this?</p>
<p>Thanks
Sikkandhar</p>
","-1","Question"
"79083100","","<p>I’m trying to sort an array of <code>Student</code> objects alphabetically by name and swap two objects in the list. However, after swapping, I’m noticing that the objects sometimes appear to become identical, and I'm not sure how to prevent this from happening.</p>
<pre><code>for(int i = 0; i &lt; this.lastPosition; i++)
        {
            if(this.list[i].GetName().CompareTo(this.list[i+1].GetName()) &gt; 0) {
                Student temp = this.list[i];
                this.list[i] = this.list[i+1];
                this.list[i+1] = temp;
            }
        }
</code></pre>
<p>Before the sorting:</p>
<pre><code>Rina 034377281 Parent: Rozz 044377281
Bina 034377281 Parent: Rozz 044377281
Cina 034377281 Parent: Noa 050569126
</code></pre>
<p>After the sorting:</p>
<pre><code>Bina 034377281 Parent: Rozz 044377281
Cina 034377281 Parent: Noa 050569126
Cina 034377281 Parent: Noa 050569126
</code></pre>
<p>This is the object StudentList:</p>
<pre><code>public class StudentList
{
    public const int MaxStudent = 38;
    private Student[] list;
    private int lastPosition;
</code></pre>
<p>And there is Student:</p>
<pre><code>public class Student
{
    private string name;
    private string phoneNum;
    Parent parent;
</code></pre>
<p>I would appreciate your help.</p>
","0","Question"
"79084169","","<p>I have a list of characters and a list of yes and no.</p>
<pre><code>list1 = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]
list2 = [&quot;Yes&quot;, &quot;No&quot;, &quot;Yes&quot;]
</code></pre>
<p>I'd like to do something like:</p>
<pre><code>i = 0
for x in list1:
   if list2[i] == &quot;Yes&quot;:
      list3.append(list1[i]) 
      i += 1
</code></pre>
<p>But with list comprehension or at least some easier and shorter way to do this.</p>
<p>So that it goes from</p>
<pre><code>list1 = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]
list2 = [&quot;Yes&quot;, &quot;No&quot;, &quot;Yes&quot;]
list3 = []
</code></pre>
<p>To</p>
<pre><code>list3 = [&quot;A&quot;, &quot;C&quot;]
</code></pre>
","0","Question"
"79084587","","<p>I am trying to write a function that returns <code>True</code> if an input list contains two consecutive 3s somewhere. I wrote the following code, but I'm not sure whether it is correct:</p>
<pre><code>def has_33(my_list):
    i=0
    for j in my_list:
        if i==j:
            return True
        else:
            i=j
    return False
</code></pre>
<p>My online instructor gave another solution using indexing (<code>[]</code>):</p>
<pre><code>def has_33(nums):
    for i in range(0, len(nums)-1):
        if nums[i:i+2] == [3,3]:
            return True  
    
    return False
</code></pre>
<p>Will my solution work? What about the online instructor's?</p>
","-6","Question"
"79087299","","<p>Assuming the following list:</p>
<pre><code>x &lt;- list(list(q = 1880L, properties = list(), last_Import_Date = &quot;2024-09-16&quot;), 
          list(q = 1888L, properties = list(list(a = &quot;x&quot;, b = &quot;y&quot;)), last_Import_Date = &quot;2024-09-16&quot;),
          list(q = 1890L, properties = list(list(a = &quot;x&quot;, b = &quot;y&quot;)), last_Import_Date = &quot;2024-09-16&quot;))
</code></pre>
<p>I want to convert this list into a data frame (rowwise). Usually, <code>dplyr::bind_rows</code> works well. However, my list has some elements that are sometimes empty (&quot;properties&quot;), in which case bind_rows fails in a way that it only keeps those rows that are not empty.</p>
<p>Can someone explain why that is?</p>
<p>And is there any (short) fix for it? I'm currently using rather ugly workarounds using list2DF, then transposing, then converting to data frame, then assigning names.</p>
<p>Wrong results (only keep non-empty properties):</p>
<pre><code>x |&gt;
  bind_rows()

# A tibble: 2 × 3
      q properties       last_Import_Date
  &lt;int&gt; &lt;list&gt;           &lt;chr&gt;           
1  1888 &lt;named list [2]&gt; 2024-09-16      
2  1890 &lt;named list [2]&gt; 2024-09-16 
</code></pre>
<hr />
<p>UPDATE: where I need some additional help is with unnesting such a special &quot;properties&quot; column. Using <code>unnest_longer</code> will result in the same &quot;bug&quot; that deletes the NULL row, and using unnest_wider requires some extra workaround for fixing names.</p>
","8","Question"
"79099555","","<p>I'm working on some code to encrypt a word into numbers from the polybius square, however I need the output to be the two numbers right next to each other e.g. 41 instead of a coordinate format (4, 1). Item.replace hasn't been working to get rid of the unnecessary characters, as it returns 'list' object has no attribute 'replace'. How can i get the output that i want?</p>
<pre><code>import numpy as np
polybius_square = np.array([[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;],
                  [&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;],
                  [&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;],
                  [&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;],
                  [&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;]])
word = str(input(&quot;Enter a word&quot;))
wordletters = list(word)
numbers = []
print(wordletters)
print(len(wordletters))
for count in range(0,len(wordletters)):
  solutions = np.argwhere(polybius_square == wordletters[count])
  solutions = solutions.tolist()
*  solutions = [item.replace(3, 10) for item in solutions]*
  print(solutions)
  numbers.append(solutions)
  print(numbers)
print(*numbers, sep=&quot; &quot;)

</code></pre>
<p>i tried a couple ways, but none let me get rid of any characters from the items in the lists.</p>
","-2","Question"
"79101313","","<p>I have the following data:</p>
<pre><code>df &lt;- structure(list(id = c(&quot;1358792&quot;, &quot;1358792&quot;, &quot;333482&quot;, &quot;333482&quot;, &quot;747475&quot;, &quot;747475&quot;),
                     x = c(&quot;123&quot;, &quot;123&quot;, &quot;456&quot;, &quot;456&quot;, NA, NA),
                     all_x = list(&quot;123&quot;, &quot;123&quot;,
                                  c(&quot;456&quot;, &quot;789&quot;),
                                  c(&quot;456&quot;, &quot;789&quot;),
                                  list(),
                                  list())),
                row.names = c(NA, -6L),
                class = &quot;data.frame&quot;)
    
       id    x    all_x
1 1358792  123      123
2 1358792  123      123
3  333482  456 456, 789
4  333482  456 456, 789
5  747475 &lt;NA&gt;     NULL
6  747475 &lt;NA&gt;     NULL
</code></pre>
<p>The all_x column is a list with either an EMPTY/NULL value, a single character or a character vector.</p>
<p>I want to create a new column (tidyverse style) with the following logic: when the <code>all_x</code> column has one or no value, just take the value from <code>x</code>. If it has two values (i.e. is a character vector), we want to group by <code>id</code> and take the element that corresponds to the row number, i.e. for the first id value, take the first element of the character vector, for the second id element, take the second character value and so on.</p>
<p>Desired output would be an additional character column with the respective values, i.e.</p>
<pre><code>       id    x    all_x   x2
1 1358792  123      123  123
2 1358792  123      123  123
3  333482  456 456, 789  456
4  333482  456 456, 789  789
5  747475 &lt;NA&gt;     NULL &lt;NA&gt;
6  747475 &lt;NA&gt;     NULL &lt;NA&gt;
</code></pre>
<p>I have tried tons of variants with <code>if_else</code>, <code>ifelse</code> and unlisting and indexing, but still always get errors due to the mixed structure of the <code>all_x</code> column.</p>
<p>Here's the closest I got:</p>
<pre><code>library(tidyverse)
df |&gt;
  mutate(x2 = if_else(lengths(all_x) &gt; 1, all_x[[1]][row_number()], x), .by = id)
</code></pre>
<p>However, obviously, I'm not successful.</p>
","5","Question"
"79102605","","<p>I have a lists of lists called &quot;lines&quot; that looks like this:</p>
<pre><code>[['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
['REF', '0F', '708066255'],
['REF', '1L', '708066255'],
['DTP', '303', 'D8', '20240901'],
['DTP', '356', 'D8', '20240801'],
['NM1', 'IL', '1', 'FIGUEROA', 'LILIET', '', '', '', '34', '536899858'],
['N3', '2670 SO A W GRIMES BO', '#6102'],
['N4', 'ROUND ROCK', 'TX', '786642849', '', 'CY', '246'],
['DMG', 'D8', '19931219', 'F', '', 'H'],
['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
['REF', '0F', '811229070'],
['REF', '1L', '811229070'],
['DTP', '303', 'D8', '20240901'],
['DTP', '356', 'D8', '20240201'],
['NM1', 'IL', '1', 'MORILLO RUZA', 'OMARLY', 'V', '', '', '34', '000000000'],
['PER', 'IP', '', 'HP', '5129233526'],
['N3', '154 TERRI TL'],
['N4', 'ELGIN', 'TX', '786218937', '', 'CY', '011'],
['DMG', 'D8', '20040628', 'F', '', 'H']]
</code></pre>
<p>What I need is to group the lists into new lists wherever the 'INS' element appears in one of the lists.  The output should look like:</p>
<pre><code>[[['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
['REF', '0F', '708066255'],
['REF', '1L', '708066255'],
['DTP', '303', 'D8', '20240901'],
['DTP', '356', 'D8', '20240801'],
['NM1', 'IL', '1', 'FIGUEROA', 'LILIET', '', '', '', '34', '536899858'],
['N3', '2670 SO A W GRIMES BO', '#6102'],
['N4', 'ROUND ROCK', 'TX', '786642849', '', 'CY', '246'],
['DMG', 'D8', '19931219', 'F', '', 'H']],
[['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
['REF', '0F', '811229070'],
['REF', '1L', '811229070'],
['DTP', '303', 'D8', '20240901'],
['DTP', '356', 'D8', '20240201'],
['NM1', 'IL', '1', 'MORILLO RUZA', 'OMARLY', 'V', '', '', '34', '000000000'],
['PER', 'IP', '', 'HP', '5129233526'],
['N3', '154 TERRI TL'],
['N4', 'ELGIN', 'TX', '786218937', '', 'CY', '011'],
['DMG', 'D8', '20040628', 'F', '', 'H']]]
</code></pre>
<p>Im unsure how to do this</p>
","-3","Question"
"79102763","","<p>I have string name with salutation</p>
<p><code>DATIN SERI PADUKA JOHN DOE</code> with actual name is <code>JOHN DOE</code></p>
<p>and i have list excel for salutation :</p>
<pre><code>DATIN SERI
DATIN SERI PADUKA
</code></pre>
<p>Currently using substitute function from VBA :</p>
<pre><code>For index=2 to totalRow

SalutationArray = Split(ws.Range(&quot;A&quot;&amp;index), &quot; &quot;)
For N = 0 to UBound(SalutationArray)
strSalutation = SalutationArray(N)
ws.Range(&quot;B&quot; &amp; index) = WorksheetFunction.Substitute(strName,strSalutation,&quot;&quot;)

Next index
</code></pre>
<p>The output result is
<code> PADUKA JOHN DOE</code> with space in front</p>
<p>how to achieve output result is only <code>JOHN DOE</code> with that list salutation</p>
","1","Question"
"79107009","","<p>I am stuck with this problem. Please note that I have edited the original question because I have forgotten to provide crucial details for solving this problem.</p>
<p>My sincere apologies for this mistake go to the first kind responser of this question!</p>
<p>The MWE is provided below</p>
<pre><code>mydf.1 &lt;- data.frame(age=factor(c(0:4,6:10),levels=c(0:4,6:10),ordered=TRUE), Freq=c(1,2,3,7,8,9,10,5,10,10))
mydf.2 &lt;- data.frame(age=factor(6:10,levels=c(6:10),ordered=TRUE),Freq=c(10,5,10,10,21))
mydf.3 &lt;- data.frame(age=factor(0:3,levels=c(0:3),ordered=TRUE),Freq=c(1,5,9,4))
mydf.list &lt;- list(mydf.1,mydf.2,mydf.3)
mydf.list
</code></pre>
<pre><code>#desired output
myout.1 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE), Freq=c(1,2,3,7,8,0,9,10,5,10,10))
myout.2 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE),Freq=c(0,0,0,0,0,0,10,5,10,10,21))
myout.3 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE),Freq=c(1,5,9,4,0,0,0,0,0,0,0))
myout.list &lt;- list(myout.1,myout.2,myout.3)
myout.list
</code></pre>
<pre><code>#My best unsuccessful attempt
mydf.empty &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE),Freq=c(rep(0,11)))
myrows &lt;- list()
for (i in c(1:3)){
myrows[[i]] &lt;- rownames(mydf.empty)[rownames(mydf.empty) %in% rownames(mydf.list[[i]])]
}
myrows
</code></pre>
<p>Any helps would be greatly appreciated. Thank you!</p>
<p>Stef</p>
","0","Question"
"79110954","","<p>I have an array of 10 elements and I can each of the elements print on a new line formatted 6.2f with
print(f'{myArray:6.2f}', sep=&quot;\n&quot;)</p>
<p>But I would like to create string containing what needs to be printed, add a few things and print that string, like:</p>
<pre><code> text = 'something ' + f'{myArray:6.2f}' + ' rest'
 print (text)
</code></pre>
<p>How can I make that each element of myArray will be on a new line and formatted in text?</p>
","-3","Question"
"79119501","","<p>For context, I have a list of &quot;players&quot; ready. Let's say <code>players = ['steve','gary','simon','kevin']</code>.
And I also have a list with two sublists with a &quot;leader&quot; in each of them: <code>groups = [['leader1'],['leader2']]</code></p>
<p>Now, I need to distribute the players to their leaders alternately:
<code>groups = [['leader1','steve','simon'],['leader2','gary','kevin']]</code></p>
<p>I've been stumped on this task for quite some time and would greatly appreciate a little help.
And also, no imports please, thanks!</p>
<p>I've already tried so many different ways of solving this, but to no avail.
The following is one of the attempts I was really hopeful about:</p>
<pre><code>for i in range(len(players))
   for j in range(len(groups))
      groups[j].append(players[i])
</code></pre>
<p>In retrospect, of course this wouldn't work but I was just really tired (and still am :D).</p>
","-3","Question"
"79122612","","<p>So I am working on a small project and I can't for the life of me figure our why this doesn't work....</p>
<p>I am using a list for positional arguments, yet it returns that parametres are missing, I know its probably something basic but I can't seem to figure it out..</p>
<p>If is just place the write out the list direction in function it works, but it doesn't seem to want to work with the contesetants list.</p>
<p>Hoping someone can help here!</p>
<pre><code>class Tester():
    def __init__(self, first: int, second: int, third: int) -&gt; None:
        self.first = first
        self.second = second
        self.third = third

contestants = [54, 56, 32]

print(Tester(contestants))
</code></pre>
","2","Question"
"79126873","","<p>So when we want to use an array without knowing the size then the common procedure is to start small and then keep doubling the size and reallocating it as we go along right?</p>
<p>And then I assume once we are done we will want to realloc once more to free up the excess memory that was malloced and we did not use?</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
    // unknown = an unknown amount of work we need to do
    int unknown = 1234;

    // size = the current allocated memory
    int size = 10;

    // counter = the final size of the array
    int counter = 0;

    // first we allocate a small amount for our array
    int *array = (int *) malloc(size * sizeof(int));

    // and then start working
    for(int i = 0; i &lt; unknown; i++)
    {
        // work
        array[i] = i; counter++;

        // check the size of the array to see if we need to realloc
        if (counter == size)
        {
            size *= 2;
            array = (int *) realloc(array, sizeof(size));
        }
    }

    // when all of the work is done we then shorten it to the exact size
    array = (int *) realloc(array, sizeof(counter));

    printf(&quot;%d&quot;, counter);
}
</code></pre>
<p>Question 1:  Is this the most performant way of tackling this problem?</p>
<p>Question 2:  Since we need to keep track of the size of the array do most people create a struct for this?</p>
<pre><code>typedef struct list
{
    int size;
    int *array;
} list;
</code></pre>
","0","Question"
"79127320","","<p>I'm writing a script using Meraki's Python Library that uses a for loop to grab a dictionary list of firewall rules which is written to a variable.</p>
<p>From there I'm inserting a dictionary into line 0.</p>
<p>The issue is that there's a dictionary in the list I need to remove. The key number of the rule changes per network because some of them already have rules, but it's always the last item in the list and contains the same info.</p>
<p>It's formatted as the following -</p>
<pre><code>{'rules': [
{'comment': 'XXX', 'policy': 'deny', 'srcCidr': 'IP', 'destCidr': 'IP'},
 {'comment': 'Remove', 'policy': 'allow', 'srcCidr': 'IP', 'destCidr': 'IP'}
]}
</code></pre>
<p>In this example, the second line would need removing, but further down the if loop, the one that would need to be removed may be the 4th item due to other entries preceding it.</p>
<p>I've looked at creating an if statement for it but I have no idea how I would format it.</p>
","1","Question"
"79131769","","<p>So I am trying to do an iterative search through a file using a list of all the patterns I want it to search for. It returns a TypeError: unhashable type: 'list'</p>
<p>I'm searching csv with IPv6 addresses in it, so what I suspect is happening is it is seeing the &quot;:&quot; in my search patterns and then thinks its a dictionary?
So I think I have to escape the :, but my google searches seem to come up that the : is no longer escapable (as of 3.7)? Or my google-fu is just failing me this sunday evening.</p>
<p>Python 3.8</p>
<pre><code>import re
from datetime import datetime


def count_matching_lines(filename, dvc_ptrns):
    count = 0
    with open(filename, 'r') as file:
        for line in file:
            for pattern in dvc_ptrns:
                if re.search(pattern, line):
                    count += 1
                    print(count)
    return count


## Define paths
devpath = f'/home/user'
rootpath = devpath

# Get current date for logging
current_date = datetime.now().strftime('%Y%m%d')

# File paths
filtered_file = f'{rootpath}/filtered{current_date}.csv'


filename = filtered_file  # Replace with your file


ptrn_print = '2022:28'
ptrn_wlsap = ['2022:34e','2022:34f']
dvc_ptrns = [ptrn_print, ptrn_wlsap]

count = count_matching_lines(filename, dvc_ptrns)


print(&quot;Number of matching lines:&quot;, count)
</code></pre>
<p>Edit: forgot to add the error</p>
<pre><code>Traceback (most recent call last):
  File &quot;ipv6_dev_count.py&quot;, line 36, in &lt;module&gt;
    count = count_matching_lines(filename, dvc_ptrns)
  File &quot;ipv6_dev_count.py&quot;, line 12, in count_matching_lines
    if re.search(pattern, line):
  File &quot;/usr/local/lib/python3.8/re.py&quot;, line 201, in search
    return _compile(pattern, flags).search(string)
  File &quot;/usr/local/lib/python3.8/re.py&quot;, line 294, in _compile
    return _cache[type(pattern), pattern, flags]
TypeError: unhashable type: 'list'
</code></pre>
","0","Question"
"79138681","","<p>I have a list nested inside another with a depth of 3.</p>
<pre><code>[
  [[1, 2, 3], [4, 5, 6]],
  [[1, 2, 3], [4, 5, 6]]
]
</code></pre>
<p>After using <a href=""https://hexdocs.pm/elixir/List.html#flatten/1"" rel=""nofollow noreferrer""><code>List.flatten/1</code></a> my result is</p>
<pre><code>[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
</code></pre>
<p>I want to flatten it in the same way below, while still keeping the same order of the elements inside intact.</p>
<pre><code>[
  [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]
]
</code></pre>
<p>I wanted to know if there's a way to do that using any of Elixir's defined functions, I looked up the Elixir docs but wasn't able to find a way to do that without flattening the entire list.</p>
","1","Question"
"79139391","","<p>I have two lists that I would like to zip with an offset similar to here: <a href=""https://stackoverflow.com/questions/45185354/join-two-offset-lists-offset-zip"">Join two offset lists (&quot;offset zip&quot;?)</a></p>
<p>However I would like to keep the left and right leftover too, so the final result = left + zipped middle + right. I have the indices of a pair of values that need to line up in the middle.</p>
<p>Example</p>
<pre><code>list1 = [1, 2, 3, 4, 5, 6]
list2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
index1 = 2 # list1[index1] is 3
index2 = 1 # list2[index2] is &quot;b&quot;
# So 3 and &quot;b&quot; must be adjacent in the zipped_middle

# Result
left = [1]
zipped_middle = [2, &quot;a&quot;, 3, &quot;b&quot;, 4, &quot;c&quot;]
right = [5, 6]
final_list = left + zipped_middle + right
</code></pre>
<p>How can I achieve this in Python? It needs to handle lists of any size.</p>
","-2","Question"
"79143422","","<p>If I have a python list that I want to generate a selection clause from.  How do I do this elegantly?</p>
<p>Example list:</p>
<pre><code>fruit = ['apple', 'blackberry', 'peach', 'kiwi']
</code></pre>
<p>and I want a resultant SQL clause string variable set like:</p>
<pre><code>item_field = 'apple' Or item_field = 'blackberry' Or item_field = 'peach' Or item_field = 'kiwi'
</code></pre>
<p>I have tried a few things <code>(&quot;item_field = {}&quot;.format(' Or '.join(fruit))</code>  -- somewhat close) and Googled, but just not getting what I am looking for.</p>
","-2","Question"
"79147645","","<pre><code>count = 0
def merge(L1,L2):
    m = len(L1)
    n = len(L2)
    i = 0 
    j = 0 
    c = []
    k = 0
    
    while i&lt;m and j&lt;n:
        if L1[i]&lt;=L2[j]:
            c.append(L1[i])
            i += 1
        else:
            c.append(L2[j])
            j += 1
    while i&lt;m:
        c.append(L1[i])
        i += 1
    while j&lt;n:
        c.append(L2[j])
        j += 1
    return c

def subordinates(L):
    length = len(L)
    global count 
    count = count + 1    
        
    if length &lt;= 1:
        return L
    
    L1 = subordinates(L[:length//2])
    L2 = subordinates(L[length//2:])
    sorted_list = merge(L1,L2)

    
    return sorted_list

x = [10, 33, 45, 67, 92, 100, 5, 99, 105]
print(subordinates(x))
</code></pre>
<p>The above code sorts x correctly and returns the list.</p>
<p>However when I run:
return (sorted_list,count) it does not let me return the count. It gives a type error:</p>
<p>TypeError: '&lt;=' not supported between instances of 'int' and 'list'</p>
","1","Question"
"79151228","","<p>I have a directory called &quot;Data&quot; and inside it I have 35 other directories with another bunch of directories each. I need to check if these last directories have .txt files and, if so, I want to get the name of the specific directory that is one of the aforementioned 35. After this, I want to use the pandas library to generate a &quot;yes/no&quot; spreadsheet with &quot;yes&quot; for the directories (one of the 35) that have .txt files and &quot;no&quot; for the directories (one of the 35) that do not have .txt files.</p>
<p>For now, I could write the following as a test:</p>
<pre><code>import os
w=[]
w=os.listdir(r'C:\Users\Name\New\Data')
tot=len(w)
a=0
while a!=tot:
    print(w[a])
    a=a+1
</code></pre>
<p>Which gives me the names of the 35 main directories I am interested in (Folder1, Folder2, Folder3, ..., Folder35)</p>
<p>AND</p>
<pre><code>for root, dirs, files in os.walk(r'C:\Users\Name\New\Data'):
    for file in files:
        if file.endswith('.txt'):
            print(root)
</code></pre>
<p>But it results in a list with the whole path, like &quot;C:\Users\Name\New\Data\Folder1\Folder1-1&quot;, and what I really need is to compare the name &quot;Folder1&quot; to the entries of the aforementioned list.</p>
<p>How can I check if the element in &quot;w[]&quot; corresponds to the name in &quot;root&quot;?</p>
","2","Question"
"79157923","","<p>How to convert one element (let's say &quot;banana&quot; in a list to upper case, all the rest elements remain in their original case?</p>
<p>my_list=[&quot;apple&quot;,&quot;banana&quot;,&quot;orange&quot;]</p>
<p>By using for loop, map function or lambda function, all elements are being converted to uppercase.</p>
","-4","Question"
"79160356","","<p>I am new to R and for a homework assignment we have to extract the first elements of each column from a list to sum these up. My current code seems to work fine but it feels like I am not using the inhert R characteristics to efficiently work with the list. (Instead it feels like I'm just applying methods to deal with lists I learned in Java)
I have a list:
<code>mylist &lt;- list(points_ex1=c(15,18,12), points_ex2=c(9,16,8), points_ex3=c(83,95,39))</code>
and I am trying to sum up the first/second/third value of each vector respectively. For the first column this would result in 15+9+83=107</p>
<p>Currently I am using two nested for loops to traverse the list and then appending each element to a temporary vector, who's sum is then appended to a vector of the total points.</p>
<pre><code>total_points &lt;- NULL #object to append total scores to
for (i in 1:3){
  temp &lt;- NULL #object to append points to
  for (j in 1:3){
    temp &lt;- append(temp, mylist[[j]][i]) #appending the i-th element of each test score vector, before appending that sum
                                         #to the total_points vector and continuing with the next row
  }
  total_points &lt;- append(total_points, sum(temp))
}
</code></pre>
<p>This works as expected, but feels like it does not use any useful R characteristics (e.g. a function like <code>sapply()</code>). Are there any good options to improve this code?</p>
<p>As this is my first question here please do tell me if I am breaking any conventions/netequitte on this site! Thank you.</p>
","3","Question"
"79171107","","<p>I'm conducting bootstrapping on my data and now need to calculate the mean and 95% CI. I've already resampled my data 1000 times and calculated a custom statistic, let's call it CS, which is a column in a dataframe. Now, I'm trying to either flatten/merge the list of the 1000 data frames or calculate the mean and confidence interval over the list of data frames in R, either row-wise or by a group (let's call that group column CNNgroup).</p>
<h1>Build a sample list of dataframes</h1>
<pre><code>df1 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(0.01, 0.2, 0.1))
df2 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(-0.01, -0.2, -0.1))
df3 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(0.06, 0.8, 0.85))
mylist &lt;- list(df1,df2,df3)
</code></pre>
<p>Desired output: (disclaimer, CI might not be calculated properly but you get the idea I hope)</p>
<pre><code>CNNgroup CSmean    CIlow  CIhigh 
90      0.1033333   −0.133  0.339
91
92
93
</code></pre>
<p>I've tried <a href=""https://stackoverflow.com/questions/68900234/calculate-mean-of-each-row-in-a-large-list-of-dataframes-in-r"">using this post</a> per the following code which results in all means being NA.</p>
<pre><code>bind_rows(mylist) %&gt;%
   group_by(CNNgroup) %&gt;%
   summarise(value_mean = mean(CS, na.rm = TRUE))
 
</code></pre>
<p>I then tried flattening the list but lost the CNNgroup information...</p>
<pre><code>do.call(rbind, lapply(mylist, as.data.frame.table, na.rm = TRUE))
</code></pre>
<p>I'm a novice and it's taken me months to get my code this step so I'm fatigued and really appreciate the help.</p>
","1","Question"
"79181014","","<p>I am using the following data and have come across a roadblock.
I used read.csv to import my raw data into r.</p>
<pre><code># from OHP$ohp17.value
list(NULL, NULL, &quot;19.9 nmol/L&quot;, &quot;0.7 nmol/L&quot;, NULL, NULL, &quot;22.6 nmol/L&quot;, &quot;3.7 nmol/L&quot;, &quot;6.6&quot;, &quot;3.7&quot;)
</code></pre>
<p>I am wanting to use an if statement to tell me whether values within the variable <code>OHP$ohp17.value</code> are <code>&quot;low&quot;</code> or <code>&quot;high&quot;</code>. My attempt</p>
<pre class=""lang-r prettyprint-override""><code>OHP$ohp17.value &lt;- as.numeric(unlist(OHP$ohp17.value))
if(OHP$ohp17.value &lt;18) print(&quot;Low&quot;) else print(&quot;High&quot;)
</code></pre>
<p>issues</p>
<blockquote>
<p>Error: 'list' object cannot be coerced to type 'double'</p>
</blockquote>
<p>I know that this is because there are units in the variable, not just numbers.
I have tried to convert my variable into numbers using <code>as.numeric()</code>.</p>
","1","Question"
"79182496","","<p>I have a list of number-letter pairs like:</p>
<pre><code>all_edges_array = [
                   [1,'a'],[1,'b'],[1,'c'],
                   [2,'c'],[2,'d'],
                   [3,'b'],[3,'c']
                  ]
</code></pre>
<p>Notice that the input pairs are <em>not</em> a cross-product of the letters and numbers used - for example, <code>[2, 'a']</code> is missing.</p>
<p>I want to <em>efficiently</em> find the combinations of some number of pairs, such that within a group, no two pairs use the same number <em>or</em> the same letter.</p>
<p>For the above input, there should be 5 total results: <code>[([1, 'a'], [2, 'c'], [3, 'b']), ([1, 'a'], [2, 'd'], [3, 'b']), ([1, 'a'], [2, 'd'], [3, 'c']), ([1, 'b'], [2, 'd'], [3, 'c']), ([1, 'c'], [2, 'd'], [3, 'b'])]</code>.</p>
<p>Other combinations are not valid: for example, <code>([1, 'a'], [1, 'b'], [3, 'c'])</code> contains two pairs using the same number (1), and <code>([1, 'b'], [2, 'c'], [3, 'b'])</code> contains two pairs using the same letter (b).</p>
<p>I have code which brute-forces this by using <code>itertools.combinations</code> and then filtering the result:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import combinations

number_letter_dict = {1:['a','b','c'], 2:['c','d'], 3:['b','c']}

# create the edges based on the connections in the number_letter_dict
all_edges_array = []
for key in number_letter_dict.keys():
    for item in number_letter_dict[key]:
        all_edges_array.append([key, item])

# get the number of connections relative to the number of keys in dict
number_of_connections = len(number_letter_dict.keys())

# Find all 35 combinations
all_combinations_array = list(combinations(all_edges_array, number_of_connections))

# cut down the list of combinations to what I actually need
all_good_combinations = []
for collection in all_combinations_array:
    duplicated_item = False
    seen_indices = []
    for item in collection:
        if item[0] in seen_indices:
            duplicated_item = True
            break
        if item[1] in seen_indices:
            duplicated_item = True
            break
        seen_indices.append(item[0])
        seen_indices.append(item[1])
    # all clear--add the collection! :)
    if not duplicated_item:
        all_good_combinations.append(collection)
</code></pre>
<p>This works, but it's inefficient - it takes an unacceptably long time to run for my actual input. Many more combinations are generated than are valid, which only gets worse the more edges and connections there are.</p>
<p>How can I improve on this algorithm? I assume that it involves not generating invalid combinations in the first place, but I don't see a way to accomplish that.</p>
<p>I found the previous Q&amp;A <a href=""https://stackoverflow.com/questions/46556109"">Python: How to generate all combinations of lists of tuples without repeating contents of the tuple</a>, but it doesn't answer my question. The answers there assume that the input contains all possible pairs (and also that the number of pairs in the combinations should be equal to the number of possibilities for the more constrained pair element).</p>
<p>EDIT: I have replaced some of the minimized code because it caused more confusion than it saved: oops? Also, this code <em>does work</em>. When given enough time it will reliably give the correct answer. That said, spending five days processing one image is not quite fast enough for my tastes.</p>
","3","Question"
"79183315","","<p>I have in Python lists like below:</p>
<pre><code>x1 = ['lock-service',
 'jenkins-service',
 'xyz-reporting-service',
 'ansible-service',
 'harbor-service',
 'version-service',
 'jira-service',
 'kubernetes-service',
 'capo-service',
 'permission-service',
 'artifactory-service',
 'vault-service',
 'harbor-service-prod',
 'rundeck-service',
 'cruise-control-service',
 'artifactory-service.xyz.abc.cloud',
 'helm-service',
 'Capo Service',
 'rocket-chat-service',
 'reporting-service',
 'bitbucket-service',
 'rocketchat-service']
</code></pre>
<p>or</p>
<pre><code>x2 = ['journal-service',
 'lock-service',
 'jenkins-service',
 'xyz-reporting-service',
 'ansible-service',
 'harbor-service',
 'version-service',
 'jira-service',
 'kubernetes-service',
 'capo-service',
 'permission-service',
 'artifactory-service',
 'vault-service',
 'rundeck-service',
 'cruise-control-service',
 'helm-service',
 'database-ticket-service',
 'rocket-chat-service',
 'ansible-dpservice',
 'reporting-service',
 'bitbucket-service',
 'rocketchat-service']
</code></pre>
<p>As you can see in both lists, duplicate values appear in different forms, for example:</p>
<p>in the list 1:</p>
<ul>
<li>'xyz-reporting-service' and 'reporting-service'</li>
<li>'harbor-service' and 'harbor-service-prod'</li>
<li>'capo-service' and 'Capo Service'</li>
<li>'artifactory-service' and 'artifactory-service.xyz.abc.cloud'</li>
<li>'rocket-chat-service' and 'rocketchat-service'</li>
</ul>
<p>in the list 2:</p>
<ul>
<li>'xyz-reporting-service' and 'reporting-service'</li>
<li>'rocket-chat-service' and 'rocketchat-service'</li>
<li>'ansible-service' and 'ansible-dpservice'</li>
</ul>
<p>I need a universal solution that does not only on these sample lists:</p>
<ul>
<li>will remove the duplicated sample values presented above</li>
<li>unifies the values in the list to the name-service form</li>
</ul>
<p>How can I do that in Python 3.11 ?</p>
","0","Question"
"79183943","","<p>As you can see if u tried the code and save an input in the app it will be save in a top to bottom order and i want it to be from bottom to top order, here is the whole code and if you want the html and css code I will give it to you</p>
<pre><code>let myLeads = []
const inputEl = document.getElementById(&quot;input-el&quot;)
const inputBtn = document.getElementById(&quot;input-btn&quot;)
const ulEl = document.getElementById(&quot;ul-el&quot;)
const deleteBtn = document.getElementById(&quot;delete-btn&quot;)
const leadsFromLocalStorage = JSON.parse( localStorage.getItem(&quot;myLeads&quot;) )
const tabBtn = document.getElementById(&quot;tab-btn&quot;)

if (leadsFromLocalStorage) {
    myLeads = leadsFromLocalStorage
    render(myLeads)
}

tabBtn.addEventListener(&quot;click&quot;, function(){    
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs){
        myLeads.push(tabs[0].url)
        localStorage.setItem(&quot;myLeads&quot;, JSON.stringify(myLeads) )
        render(myLeads)
    }) 
})

function render(leads) {
    let listItems = &quot;&quot;
    for (let i = 0; i &lt; leads.length; i++) {
        listItems += `
            &lt;li&gt;
                &lt;a target='_blank' href='${leads[i]}'&gt;
                    ${leads[i]}
                &lt;/a&gt;
            &lt;/li&gt;
        `
    }
    ulEl.innerHTML = listItems
}

deleteBtn.addEventListener(&quot;dblclick&quot;, function() {
    localStorage.clear()
    myLeads = []
    render(myLeads)
})

inputBtn.addEventListener(&quot;click&quot;, function() {
    myLeads.push(inputEl.value)
    inputEl.value = &quot;&quot;
    localStorage.setItem(&quot;myLeads&quot;, JSON.stringify(myLeads) )
    render(myLeads)
})
</code></pre>
<p>i tried to reverse the order in the render function but it didnt work as expected.</p>
","1","Question"
"79188161","","<p>I read everywhere that List is supposed to be Lazy on iOS but following snippet seems to contradict it</p>
<pre class=""lang-swift prettyprint-override""><code>import SwiftUI

struct Item {
    var id: Int
}

let items = (1...30000)
    .map { v in
        Item(id: v)
    }

struct ItemRow:View{
    let item: Item
    init(item: Item){
        self.item = item
        print(&quot;init #\(item.id)&quot;)
    }
    var body: some View{
        Text(String(item.id))
    }
}

struct ContentView: View {
    var body: some View {
//        ScrollView {
//            LazyVStack {
//                ForEach(items, id: \.id) { item in
//                    ItemRow(item: item)
//                }
//            }
//        }
        List(items, id: \.id) { item in
            ItemRow(item: item)
        }
    }
}
</code></pre>
<p>This prints out 30000 times twice (new empty project).
Also checked that ItemRow's body is also called for all 30k items immediately.</p>
<p>Am I missing something?</p>
","1","Question"
"79189182","","<p>I have a DTO class</p>
<pre><code>class MyDto {
   private String f1;
   private String f2; 
   private String f3;
   // constructor
   // get set equals/hashCode
}
</code></pre>
<p>It has <code>equal</code>/<code>hascode</code> pair which takes into account all 3 fields.</p>
<p>Please take a look on test</p>
<pre><code>...
var actualList = service.getActualList(...)
assertThat(actualList, containsInAnyOrder(new MyDto(&quot;a1&quot;,&quot;&quot;,&quot;c1&quot;), new MyDto(&quot;a2&quot;,&quot;&quot;,&quot;c2&quot;)) )
...
</code></pre>
<p>It fails because <code>f2</code> is generated on database side(so I can't predict value for that field).</p>
<p>I want to pass custom comparator to make test specific comparison. Is it possible to achieve it in Hamcrest ?</p>
<p>P.S. I don't want to rewrite equals/hashcode beause it will not be correct from my business logic standpoint</p>
","0","Question"
"79189695","","<p>I'm wondering if they're is a &quot;pythonic&quot; way of removing elements from a list, if that element contains a substring of another element.</p>
<p>For example say we have a list like this:</p>
<pre><code>[&quot;/var/html/site1&quot;, &quot;/var/html/site1/nested_web_root1&quot;, &quot;/var/html/site1/nested_web_root2&quot;]
</code></pre>
<p><code>/var/html/site1</code> is contained within both: <code>/var/html/site1/nested_web_root1</code> &amp; <code>/var/html/site1/nested_web_root2</code>
As such I'd like them removed from the list.</p>
<p>I've already written a function to do this, and it does <em>mostly</em> work, but the code is just horrible and overly-complex. There are also edge-cases where it just fails.</p>
<p>Here is what I've written so far:</p>
<pre><code>def substringSieve(string_list):
    string_list.sort(key=lambda s: len(s), reverse=False)
    out = []
    bad_list = []
    for outer_string in string_list:
        for inner_string in string_list:
            if outer_string != inner_string:
                if outer_string in inner_string:
                    out.append(outer_string)
                    bad_list.append(inner_string)
        if outer_string not in out and outer_string not in bad_list:
            out.append(outer_string)
    return out
</code></pre>
<p>Can anyone offer some insight?</p>
<p>Thanks.</p>
","1","Question"
"79193031","","<p>I need a Python code that returns the indices from a list if all the numbers from another list are found on the same row.</p>
<p>What I tried, it moves very slowly on very large lists. Below, is an example of what I tried.</p>
<pre><code>numbers = [[1, 3, 5, 7, 12, 14, 19, 21, 26, 31, 42, 44, 48, 53, 54, 58, 59, 61, 62, 78],
        [4, 6, 8, 11, 16, 19, 22, 27, 28, 33, 38, 45, 46, 52, 53, 54, 61, 70, 71, 77],
        [1, 4, 5, 7, 11, 16, 31, 33, 37, 44, 46, 49, 53, 59, 62, 64, 68, 70, 73, 78],
        [5, 7, 8, 15, 19, 20, 27, 35, 41, 42, 45, 51, 53, 55, 60, 66, 68, 72, 77, 80],
        [3, 14, 18, 21, 25, 26, 29, 36, 43, 44, 45, 53, 55, 56, 61, 62, 64, 66, 71, 72],
        [2, 7, 10, 12, 16, 24, 34, 40, 42, 43, 46, 51, 52, 53, 56, 57, 60, 65, 72, 79],
        [6, 7, 11, 14, 18, 25, 30, 34, 47, 52, 53, 57, 62, 65, 67, 68, 71, 72, 77, 78],
        [1, 2, 3, 7, 9, 16, 20, 26, 27, 30, 32, 35, 38, 48, 54, 63, 64, 65, 69, 72],
        [3, 8, 10, 15, 19, 20, 34, 40, 44, 48, 51, 52, 56, 58, 62, 66, 69, 70, 76, 77],
        [3, 7, 13, 17, 24, 28, 31, 36, 37, 39, 48, 50, 52, 58, 59, 61, 63, 64, 74, 79]]


find = [[7, 16, 20],
        [7, 16, 42],
        [7, 16, 52],
        [7, 50, 52]]



def searchForCombinations(combinations_list, results_list):
    
    for sublist_index, results_sublist in enumerate(results_list):
        for  combinations_index, combinations_sublist in enumerate(combinations_list):
            if not combinations_sublist in results_sublist:
                break
            else:
                if combinations_index == len(combinations_list) - 1:
                    return sublist_index
                    break
             
resultIndex = []
for i, combSublist in enumerate(find):
    resultIndex.append(searchForCombinations(combSublist, numbers))
    
resultIndex.sort(reverse=True)



print(resultIndex)
</code></pre>
","0","Question"
"79196485","","<p>So I have a project I'm doing that has a part where I have to convert user input into a list.</p>
<pre><code>numbers = input(&quot;Enter a list of numbers seperated by spaces.&quot;)
numList = list(numbers)
print(numList)
</code></pre>
<p>What I want is this:</p>
<p><code>Enter a list of numbers seperated by spaces.1 3 5</code></p>
<p><code>['1', '3', '5']</code></p>
<p>instead I get this:</p>
<p><code>Enter a list of numbers seperated by spaces.1 3 5</code></p>
<p><code>['1', ' ', '3', ' ', '5']</code></p>
<p>Another thing I've noticed is that it also doesn't like double digit numbers that much. This issue is definitely something I can fix with converting to an integer, but who knows, I may just be stupid.</p>
<p>I've tried using the list function's extra stuff, but I can't seem to figure out how to get it to work how I want.</p>
","-1","Question"
"79199654","","<p>I have 5 lists containing data: <code>List_1, List_2, List_3, List_4, List_5</code></p>
<p>I want to perform an analysis to each of these lists, but also keep the original lists as a reference for later so I can compare them. This is relatively easy to do since I only have 5 lists:</p>
<pre><code>New_list_1 = List_1
New_list_2 = List_2
New_list_3 = List_3
New_list_4 = List_4
New_list_5 = List_5
</code></pre>
<p>I am aware that I could also make like a &quot;list of lists&quot; <code>List = [List_1, List_2, List_3...]</code> but then I would still have the problem of having to do, which is not shorter:</p>
<pre><code>New_list_1 = List[0]
New_list_2 = List[1]
New_list_3 = List[2]
New_list_4 = List[3]
New_list_5 = List[4]
</code></pre>
<p>But for future, what if I had like 700 lists? Would it be possible to loop over these numbered lists like this?</p>
<pre><code>for i in range(700):
    New_list_*insert i here somehow* = List_*insert i here somehow*
</code></pre>
<p>If this approach is possible, how would I go about attaching <code>i</code>, which is an integer, as string, to a variable name?</p>
","-2","Question"
"79210377","","<p>I'm trying to figure out the reason behind the fact that, despite for any practical tasks we are always going to use <code>List&lt;T&gt;</code> in C#, vectors are still there in the langauge. I mean methods like <code>ToArray()</code> and <code>ToList()</code> are there to go back and forth between the two, but at the end of the day we are using the Lists for any practical tasks.</p>
<p>In other words, why we continue to teach and talk about vectors in C# when at the end of the day we find ourselves always using <code>List&lt;T&gt;</code>?</p>
","0","Question"
"79211387","","<p>I am working with two large lists of integers in Python, and I need to find the common elements between them. The result should preserve the order of the elements as they appear in the first list and must not contain duplicates. For example:</p>
<p>I've tried using a nested loop, but the performance is very slow with large lists. I want to optimize the solution for time complexity. What would be the best approach to achieve this in Python?</p>
","-3","Question"
"79211494","","<p>Consider a struct like this:</p>
<pre><code>struct ExampleStruct
{
    public int ID;
    public List&lt;ExampleStruct&gt; children;
}
</code></pre>
<p>Would the following line of code create an object on the heap?</p>
<pre><code>ExampleStruct exStrct = new Examplestruct() {ID = 5, children = null};
</code></pre>
","2","Question"
"79211807","","<p>Here is a string :</p>
<pre><code>[[15,&quot;name&quot;,12],[2002,&quot;another name&quot;,345]]
</code></pre>
<p>My actual string is much longer and stems from a text file. The structure is repetitive as indicated in the sample.</p>
<p>I want to convert this string to 3 different lists, namely:</p>
<pre><code>int_list1 = [15, 2002]
str_list = ['name', 'another name']
int_list2 = [12, 345]
</code></pre>
<p>I can manage this by using the <code>re</code> module with <code>re.findall()</code> method</p>
","-8","Question"
"79213728","","<p>I have this list</p>
<pre><code>set csv [list]
lappend csv [list \
a \
b \
c \
[expr {[cfg::get enable_all_columns]
? {
d
}
: {}
}]  \
e \
f \
g]
</code></pre>
<p>I need to add element <code>d</code> only if <code>enable_all_columns</code> is <code>1</code>. The problem is that with this approach if it is <code>0</code>, it returns something empty which creates a new column in <code>csv</code> raport.</p>
<p>That <code>lappend</code> to output this list <code>{a b c d e f g}</code>
I tried to break the <code>lappend</code> to put the condition and then add the last ones, but this results in this <code>{a b c} d e f g</code>
I also tried <code>linsert</code> but it did the same</p>
<pre><code>set csv [list]

lappend csv [list \
a       \
b]

set csv [linsert $csv 1 x]

puts &quot;$csv&quot;
</code></pre>
","0","Question"
"79218431","","<p>I'm trying to merge two dictionaries in Python, but I'm having trouble ensuring that data from both dictionaries is preserved. If a key exists in both dictionaries, I want to combine their values into a list.</p>
<pre><code>dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 3, 'c': 4, 'd': 5}

merged_dict = dict1.copy()
for key, value in dict2.items():
    if key in merged_dict:
        merged_dict[key] = [merged_dict[key], value]
    else:
        merged_dict[key] = value

print(merged_dict)
</code></pre>
<p>The output I'm getting is:</p>
<pre><code>{'a': 1, 'b': [2, 3], 'c': [3, 4], 'd': 5}
</code></pre>
<p>This works, but if there are already lists as values, this approach doesn't handle it well. For example, mergin</p>
<pre><code>dict1 = {'a': [1], 'b': 2}
dict2 = {'a': 3, 'b': [4], 'c': 5}
</code></pre>
<p>Desired output:</p>
<pre><code>{'a': [1, 3], 'b': [2, 4], 'c': 5}
</code></pre>
<p>How can I improve my function to handle this situation more generally? Is there a more Pythonic way to merge dictionaries while ensuring all values are combined into lists if keys overlap?</p>
","-2","Question"
"79219435","","<p>I am still stuck whit this. I'm trying to print a list of elements that are between two limits in Common Lisp. I wrote two functions to do this. In the first one I check if the element is inside the limits. The second one is only to run this check on a list. I got the result I'm looking for but it's printed whit a <em>nil</em> when the element is not in the conditions. How can I print this list of elements whitout the <em>nil</em> word?</p>
<pre><code>(defun limits (x) 
  (if (or (&lt; x 3) (&gt; x 12))
      (nconc x)
      ()))

(defun out-of-limits (l) 
  (mapcar #'limits l)
  (remove nil))


(out-of-limits '(1 7 8 2 5 1 215))

  ----&gt; (1 NIL NIL 2 NIL 1 215)

</code></pre>
","1","Question"
"79225243","","<p>I have not found an example that applies to my specific problem, but feel free to label as duplicate if needed.</p>
<p>I have a nested list like the following:</p>
<pre><code>nested_list &lt;- list(
  ID1 = list(
    FEAT = list(
      feat1 = list(start = &quot;1&quot;, end = &quot;15&quot;, label = &quot;CDR1&quot;),
      feat2 = list(start = &quot;20&quot;, end = &quot;25&quot;, label = &quot;CDR2&quot;)
    ),
    SEQ = &quot;ACTGATCGTAGCTAGCTAGATGCTGATGTGTC&quot;
  ),
  ID2 = list(
    SEQ = &quot;ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA&quot;
  )
)
</code></pre>
<p>I want to obtain a data frame like this:</p>
<pre><code>   id  feat feat_label feat_start feat_end                                    full_seq
1 ID1 feat1       CDR1          1       15            ACTGATCGTAGCTAGCTAGATGCTGATGTGTC
2 ID1 feat2       CDR2         20       25            ACTGATCGTAGCTAGCTAGATGCTGATGTGTC
3 ID2  &lt;NA&gt;       &lt;NA&gt;         NA       NA ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA
</code></pre>
<p><code>as.data.frame(nested_list)</code> does not produce what I want, so it probably needs an extra step to turn the data frame into &quot;longer&quot; format, ideally with something like <code>tidyr::pivot_longer()</code>.</p>
","2","Question"
"79228095","","<p>I have a Dataframe where I want to derive a Boolean column based on some other columns, including a check on whether a particular column is NaN:</p>
<pre><code>def secret_sauce(my_row):
    if (pd.isna(my_row[&quot;col1&quot;]) and
        my_row[&quot;col2&quot;] != &quot;BAD_VAL&quot;):
        return False
    return True

my_df = my_df.assign(
    my_boolean_col=lambda df: df.apply(
        secret_sauce, axis=1
    )
)
</code></pre>
<p><code>col1</code> can be either a list or NaN. I keep running into problems with various ways to check if it is NaN, because for example <code>pd.isna()</code> does not like being called on a list.</p>
<p><code>ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</code></p>
<p>However, <code>any()</code> or <code>all()</code> does not seem to be correct for calling on NaN. So I seem to be stuck. What would be the best way to do this?</p>
<p>The following setup can reproduce the issue:</p>
<pre><code>import pandas as pd
import numpy as np

d = {
    'mypk': ['ABC', 'DEF', 'GHI'],
    'col1': [[&quot;HELLO&quot;], np.nan, [&quot;GOODBYE&quot;, &quot;ADIOS&quot;]],
    'col2': ['GOOD_VAL', 'GOOD_VAL', 'GOOD_VAL']}
my_df = pd.DataFrame(data=d)
</code></pre>
<pre><code>  mypk              col1      col2
0  ABC           [HELLO]  GOOD_VAL
1  DEF               NaN  GOOD_VAL
2  GHI  [GOODBYE, ADIOS]  GOOD_VAL
</code></pre>
<p>What I want is a new column with values True, False, True, respectively for the 3 rows. It processes the first 2 rows fine, but fails when it gets to the 3rd row with multiple elements in <code>col1</code>. It can process the list with a single element fine.</p>
<p>So what I'm wondering is, what's the best way to have a condition that is True if it's NaN, and False otherwise, in this context? The different ways I've found so far don't seem to properly handle the possible different input values.</p>
","0","Question"
"79230752","","<p>I’m trying to write Python code to find all unique pairs from a list of numbers where the sum of each pair equals a specific target. So far, my basic idea looks like this:</p>
<pre><code>def find_unique_pairs(numbers, target):
    seen = set()
    pairs = set()
    
    for num in numbers:
        complement = target - num
        if complement in seen:
            # I want to add the pair here in a way that avoids duplicates
            pass  # What should I do here?
        seen.add(num)
    
    return list(pairs)

# Example:
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
target = 10
print(find_unique_pairs(numbers, target))

</code></pre>
<p>I’m struggling with how to add the pairs to the pairs set in a way that ensures no duplicates (e.g., (2, 8) and (8, 2) should count as the same pair)
Could you help me complete the code and possibly suggest improvements to make it more efficient for larger lists?</p>
<p>I tried using sets to store seen numbers and pairs, but I’m struggling with how to format the pairs correctly to avoid duplicates. I expect the result to include unique pairs like (2, 8), (3, 7), and (4, 6) when the target is 10<code>your text</code></p>
","0","Question"
"79231450","","<p>I am trying to sort this list of lists by the year and then by month,I can get the years part sorted but am stuck when I try to do secondary sort by month. I have created a dict and a list to try to use to sort.</p>
<p>my code:</p>
<pre class=""lang-py prettyprint-override""><code>from operator import itemgetter

import pandas as pd

month_list = [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]
months = {
    'Jan': 0,
    'Feb': 1,
    'Mar': 2,
    'Apr': 3,
    'May': 4,
    'Jun': 5,
    'Jul': 6,
    'Aug': 7,
    'Sep': 8,
    'Oct': 9,
    'Nov': 10,
    'Dec': 11,
}
data = [['Sep', '2024', 112], ['Dec', '2022', 79], ['Apr', '2023', 114], ['Aug', '2024', 194], ['May', '2022', 140], ['Jan', '2023', 222]]

half_sorted = sorted(data, key=itemgetter(1))
input(half_sorted)
</code></pre>
<p>My Output so far:</p>
<pre><code>[['Dec', '2022', 79], ['May', '2022', 140], ['Apr', '2023', 114], ['Jan', '2023', 222], ['Sep', '2024', 112], ['Aug', '2024', 194]]
</code></pre>
","-4","Question"
"79244282","","<p>I'm using python to extract the information provided from the body of an email using imap.</p>
<p>Part of the email that interests to my code:
<code>&quot;BOT ID: 4824CF8B-2986-11EC-80F0-84A93851B964&quot;</code></p>
<p>I can extract the exact string from the email body with</p>
<pre class=""lang-py prettyprint-override""><code>    if content_type == &quot;text/plain&quot; and &quot;attachment&quot; not in content_disposition:
        import re
        ID_pattern = r&quot;BOT ID: (\w+)-(\w+)-(\w+)-(\w+)-(\w+)&quot;
        machine_id = re.findall(ID_pattern, body)
        print(machine_id)
</code></pre>
<p>But it returns:
<code>&quot;[('4824CF8B', '2986', '11EC', '80F0', '84A93851B964')]&quot;</code></p>
<p>How can I manipulate this turple/list to keep que original pattern:
xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx</p>
<p>Thank u all guys.</p>
<pre class=""lang-py prettyprint-override""><code>import re
ID_pattern = r&quot;BOT ID: (\w+)-(\w+)-(\w+)-(\w+)-(\w+)&quot;
machine_id = re.findall(ID_pattern, body)
print(machine_id)
</code></pre>
<p>result:
<code>[('4824CF8B', '2986', '11EC', '80F0', '84A93851B964')]</code></p>
<p>Expected:
<code>4824CF8B-2986-11EC-80F0-84A93851B964</code></p>
","-3","Question"
"79245363","","<p>I need to read data from a file game.txt and append the data into two lists. The first list should hold the player's name and the second list should hold the high score.</p>
<p>Also, this is for school and I'm not allowed to use split method, dictionaries, or with statements.</p>
<p>The game.txt file is a list of names and scores that looks like this:</p>
<pre><code>John\n
7\n
Mary\n
5\n
Larry\n
9\n
Mark\n
4\n
</code></pre>
<pre><code>def read_file():
    infile = open(FILENAME, 'r')
    line = infile.readline().rstrip('\n')
    while line != '':
        for item in FILENAME:
            player_names.append(line)
            high_scores.append(line)
            line = infile.readline().rstrip('\n')
    infile.close()
</code></pre>
","0","Question"
"79249078","","<p>Given a <strong>python</strong> list of lists containing numbers i.e <code>lists = [ [1, 2], [2, 1], [3, 4] ]</code>, the problem is to return a list of all unique lists from the input list. A list is considered a duplicate if it can be generated from another list by reordering the items in the list. i.e <code>[2, 1]</code> is a duplicate of  <code>[1, 2].</code> Given the input  <code>[ [1, 2], [2, 1], [3, 4] ]</code>, the output should be <code>[ [1, 2], [3, 4]]</code> . Any reordering of  <code>[ [1, 2], [3, 4]] </code> is also correct i.e   <code>[1, 2], [4, 3]],</code></p>
<p>My approach is to first sort all lists in the input list, convert the lists to tuples, use a set data structure to filter out duplicate tuples, and finally convert the unique tuples back to lists. The time complexity for sorting all lists is <code>O(m*nlogn)</code> where m is the number of lists and n is the size of each list(assuming same size lists). Converting the lists to tuples takes <code>O(mn)</code> time, creating a set from the tuples takes <code>O(mn)</code>, converting the set of unique tuples back to lists  also takes <code>O(mn)</code>  making the total time complexity O<code>(mnlogn + mn + mn + mn) = O(mnlogn)</code>.</p>
<p>Can we do any better than <strong><code>O(mnlogn)</code></strong>?</p>
<p>Code:</p>
<pre><code>def find_unique(lists):
  sorted_lists = [ sorted(lst) for lst in lists]
  tuples = [tuple(lst) for lst in sorted_lists]
  unique_tuples = set(tuples)
  return list(unique_tuples)
</code></pre>
","4","Question"
"79251914","","<p>I'm dealing with a list of integers that represent the pages in which a keyword was found. I would like to build block of code that converts this list into a string with a specific format that follow some simple rules. Single integers are converted into string. Consecutive integers are considered as intervals (left bound, hyphen, right bound) and then converted into string. Each conversion is comma separated. This is an example of input and desired output:</p>
<pre><code>input = [4, 5, 6, 7, 8, 9, 10, 22, 23, 26, 62, 63, 113, 137, 138, 139]
desired_output = &quot;4-10, 22, 23, 26, 62, 63, 113, 137-139&quot;
</code></pre>
<p>I wrote this code:</p>
<pre><code>res = [4, 5, 6, 7, 8, 9, 10, 22, 23, 26, 62, 63, 113, 137, 138, 139]

if len(res)&gt;0:    
    resStr = str(res[0])
    isConsecutive = False
    for index in range(1, len(res)):
        diff = res[index] - res[index-1]
        if diff == 1:
            isConsecutive = True
            if index == len(res)-1:
                resStr = resStr + &quot;-&quot; + str(res[index])
            continue
        else:
            if isConsecutive:
                isConsecutive = False
                resStr = resStr + &quot;-&quot; + str(res[index-1]) + &quot;, &quot; + str(res[index])
            else:
                resStr = resStr + &quot;, &quot; + str(res[index])
        

print(res)
print(resStr)
</code></pre>
<p>This code gives me as a result:</p>
<pre><code>4-10, 22-23, 26, 62-63, 113, 137-139
</code></pre>
<p>It doesn't recognize that only two consecutive numbers have not be considered as an interval: &quot;22, 23&quot; and not &quot;22-23&quot;, as well as &quot;62, 63&quot; and not &quot;62-63&quot;.
How can be solved this issue? Is there a simpler or more efficient way to perform the conversion?</p>
","1","Question"
"79254641","","<p>I am modifying the nested list and adding to an array now when I modify nested list it behaving very strangely, I am missing something very small but don't know what.</p>
<pre><code>class Square {
  constructor() {
    this.value = null;
    this.next = null;
  }
}

let square = new Square();
square.value = [0, 0];

let arrayOfValues = [[1,2], [2, 3], [4, 5]];
let resultArray = [];
arrayOfValues.forEach(v =&gt; {
  let copy = square;
  while (copy.next !== null) {
    copy = copy.next;
  }
  let nextNode = new Square()
  nextNode.value = v;
  copy.next = nextNode;
  resultArray.push(square);
})

console.log(resultArray) //[{value: [0, 0], next: {value: [1, 2], next: {value: [2, 3], next: {value: [4, 5], next: null}}}},....]


// want to return [{value: [0, 0], next: {value: [1, 2], next: null}}, ....]
</code></pre>
","0","Question"
"79264212","","<p>I'm making a circular linked list class in C++, everything works as expected, except for when i delete an object made based on my class. In the destructor, i'm deleting every single element plus the <code>L</code> itself at the end, and setting it to <code>nullptr</code> so when the user tries to use the object's functions again, the <code>if (L == nullptr) return;</code> will stop them.</p>
<p>the problem is, the <code>L = nullptr</code> actually works fine but when i use another function like <code>printArray()</code> or any other one like <code>get()</code>(which haven't included in the code) it actually shows that <code>L</code> is equal to 4 very random memory addresses and the last one somehow points back to <code>L</code> itself! (this is actually the situation when i delete the <code>L</code>, but when i set it to <code>nullptr</code> it will be <code>0x0</code> meaning it doesn't point to those random addresses).</p>
<pre><code>#include &lt;iostream&gt;
class list
{
    private:
        unsigned int size;
        struct node {
            int item;
            node *next = nullptr;
        };
        node *L;
        bool deleted;
    public:
        list() {
            size = 0;
            L = new node;
            L-&gt;next = L;
            deleted = false;
        }
        ~list() {
            if (L != nullptr) {
                popAll();
                std::cout &lt;&lt; L-&gt;next &lt;&lt; std::endl;
                delete L;
                std::cout &lt;&lt; L-&gt;next &lt;&lt; std::endl;
                L = nullptr;
                deleted = true;
            }
        }
        void printArray() {
            if (deleted &amp;&amp; L == nullptr) return;
            node *p = L-&gt;next;
            std::cout &lt;&lt; '[';
            while (p != L) {
                std::cout &lt;&lt; p-&gt;item;
                if (p-&gt;next != L) std::cout &lt;&lt; &quot;, &quot;;
                p = p-&gt;next;
            }
            std::cout &lt;&lt; ']';
        }
        void popAll() {
            if (deleted &amp;&amp; L == nullptr) return;
            node *p = L-&gt;next;
            while (p != L) {
                node *n = p-&gt;next;
                delete p;
                p = n;
            }
            L-&gt;next = L;
            size = 0;
        }
};
</code></pre>
<p>I also have the <code>deleted</code> boolean but that's just as a fallback for me if this fails again. Because if i use the <code>deleted</code> as a detector for when the object is deleted, it'll work fine but i wanna know why the <code>L</code> is a <code>nullptr</code> after i set it to it in the destructor, but it doesn't change it in the other functions and it's like it's only been deleted and not even set to <code>nullptr</code>.</p>
","-1","Question"
"79278506","","<p>This is a homework question, I've tried several ways to solve, but I haven't been able to make progress in, and I would appreciate any tips, and help in general.</p>
<p>The question: we are given a list of non-negative integers. The objective is to scan the elements of the list according to the number in the current cell (i.e: the list [2,2,3,2,0] will scanned as follows: 2 -&gt; 3 -&gt; 2 -&gt; 3 -&gt; 2..., and the list [3,0,1,4,2] will be scanned as follows: 3 -&gt; 4 -&gt; 2 -&gt; 1 -&gt; 0).
The scan starts at index 0, and ends when we reach a cell containing 0.
The goal is to detect lists such as the second example (last index 0, and scanning all the elements of the list).</p>
<p>I tried working with a &quot;for&quot; loop going over the elements of the given list, and saving the value in a parameter called &quot;index&quot;, and changing the value of a scanned item in the list. However the loop would go according to the sequence in the list, and not according to the &quot;new&quot; type of scan I tried creating. For example, here is what I last wrote:</p>
<pre><code>def is_perfect(lst):
    '''
    :param lst:
    :return:
    '''
    next_index = 0
    lst_idx = [0]
    for val in lst:
        if val &gt; len(lst):
            raise IndexError
        else:
            lst_idx.append(lst[next_index])
            next_index = val
            if len(lst_idx) &lt;= len(lst):
                continue
            else:
                return False
</code></pre>
","1","Question"
"79284971","","<p>In Excel VBA, I am trying to extract a unique list of values from a column in an named table. I want to store the unique list of values in a variable that I can then use for further processing. I am using the following code to do this:</p>
<pre><code>    Dim SomeData As Range
     
    Set SomeData = ThisWorkbook.Sheets(&quot;Tab&quot;) _
    
        .ListObjects(&quot;TableName&quot;).ListColumns(&quot;ColumnName&quot;).DataBodyRange  
    
    SomeData.RemoveDuplicates Columns:=1, Header:=xlNo
</code></pre>
<p>However, this code removes duplicates from the underlying table - which I don't want to do.</p>
<p>Is there a simple way to extract the data from the table and store it in a variable that I can manipulate without changing the underlying data in the named table?</p>
","1","Question"
"79287103","","<p>I am trying to find the value of a Fibonacci sequence given an integer N, representing the nth term using an <code>ArrayList</code> (my logic is that because <code>ArrayList</code> are dynamic and can resize no matter what number is given). For example, 3 should yield 1, 4 should yield 2, etc... Below is my code</p>
<pre class=""lang-java prettyprint-override""><code>public static Integer NacciTerm (int x){

    ArrayList &lt;Integer&gt; arr = new ArrayList &lt;Integer&gt;();
    arr.add(0,0);
    arr.add(1,1);
    
    if (x == 1 || x == 0) {
        System.out.println(Integer.toString(arr.get(x)));
    }
    else{
        for(int i = 2; i &lt; x; i++)
        {
            int valueOfTerm = 0;
            arr.add(i,valueOfTerm);
            valueOfTerm = arr.get(i-1) + arr.get(i-2);
            arr.set(i,valueOfTerm);
        }
    }
    return arr.get(x);
}
</code></pre>
<p>If I try to run it in my <code>main</code> method, whenever I enter a number &gt;= 2, I get this error:</p>
<pre class=""lang-none prettyprint-override""><code>Exception in thread &quot;main&quot; java.lang.IndexOutOfBoundsException: Index 2 out of bounds for length 2
    at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
    at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
    at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
    at java.base/java.util.Objects.checkIndex(Objects.java:373)
    at java.base/java.util.ArrayList.get(ArrayList.java:427)
    at FibonnaciSequence.NacciTerm(FibonnaciSequence.java:36)
    at FibonnaciSequence.main(FibonnaciSequence.java:69)
</code></pre>
<p>Any suggestions or reasons why?</p>
","-1","Question"
"79292983","","<p>I am trying to display list in Table. But  text overflow issue raised.</p>
<p>How to fix this issue with css? Kindly guide me.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.pkgtable {
  width: 100%;
  table-layout: fixed;
}

.pkgtable th,
td {
  vertical-align: top;
}

.pkgtable ul {
  font-size: 10px;
  line-height: 20px;
  width: 100%;
  list-style-type: square;
}

.pkgtable li {
  margin-left: -12px;
  text-align: left;
  text-transform: uppercase;
}</code></pre>
</div>
</div>
</p>
<p><a href=""https://i.sstatic.net/1CF0Jx3L.jpg"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/1CF0Jx3L.jpg"" alt=""screenshot"" /></a></p>
","1","Question"
"79295576","","<p>I have a list of words as below:</p>
<pre><code>STR = ['aa', 'dffg', 'aa2', 'AAA3']
</code></pre>
<p>I want to get a list of elements from the above list that match a string:</p>
<pre><code>to_match = 'aa'
</code></pre>
<p>I tried the code below:</p>
<pre><code>import re
[re.findall(to_match, iWord) for iWord in STR]
# [['aa'], [], ['aa'], []]
</code></pre>
<p>However, I wanted to get a list like <code>['aa',  'aa2', 'AAA3']</code>.</p>
","0","Question"
"77744012","77743989","<p>You don't want three nested loops.  That will end up printing 27 lines.  What you want is to use &quot;zip&quot; so the three lists are iterated in parallel:</p>
<pre><code>NCACost = [123,234,345]
NCADepr = [23,34,45]
NCANBV = [100,200,300]
for x,y,z in zip(NCACost,NCADepr,NCANBV):
    print(f&quot;{x} - {y} = {z}&quot;)
</code></pre>
","-1","Answer"
"77744024","77743989","<p>Is this what you need</p>
<pre><code>import itertools 

NCACost = [123,234,345]
NCADepr = [23,34,45]
NCANBV = [100,200,300]

# first sample
for (a,b,c) in zip(NCACost,NCADepr,NCANBV):
    print(f'{a}-{b}={c}')
# second sample
for (a, b, c) in itertools.zip_longest(NCACost, NCADepr, NCANBV):
    print(f'{a}-{b}={c}')
# third sample
for i, value in enumerate(NCACost):
    print(f'{value}-{NCADepr[i]}={NCANBV[i]}')
</code></pre>
","0","Answer"
"77748075","77747948","<p>For the first ball this was working correctly but then it encountered the</p>
<pre><code>for Ball in balls:
</code></pre>
<p>statement and then you had a Ball in your namespace so the global variable is overwritten, instead we can call the object ball and run .draw on the ball object.</p>
<p>There was a way around this (if you insist on calling the local variable Ball) by passing the class into the function that I demonstrated as well.</p>
<pre><code>def run(cls = Ball):

</code></pre>
<pre><code>import pygame
import math

pygame.init()

# screen
framespd = 30  # what is frame speed for gravity = 9.81
gravity = 1
t = 0.01
clock = pygame.time.Clock()
width, height = 1000, 1000
pygame.display.set_caption(&quot;Orbit Take 1&quot;)
screen = pygame.display.set_mode([width, height])


class Ball:
    def __init__(self, angle, velocity, radius, color, x_pos, y_pos):
        self.angle = angle
        self.velocity = velocity
        self.radius = radius
        self.color = color
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.balls = []

    def draw(self, width, height):
        # We need the inputs of width and height to pass to set_mode
        pygame.display.set_mode((width, height))
        #self.circle = pygame.draw.circle(screen, (0, 0, 255), (250, 250), (self.x_pos, self.y_pos), self.radius)
        # below will always draw a blue circle - tweak color, center and radius to be variables so that you can
        # generate multiple balls with different properties
        self.circle = pygame.draw.circle(screen, color=(0, 0, 255), center=(250, 250), radius=75)

    def true_velocity_x(self):
        true_velocity_x = self.velocity * math.cos(self.angle)

    def true_velocity_y(self):
        true_velocity_y = self.velocity * math.sin(self.angle)
        new_velocity_y = true_velocity_y + (gravity * t)

    # def update position(self):
    # x pos = x velocity
    # y pos += y velocity


balls = []


def run():
    value = True
    while value:
        clock.tick(framespd)

        # Balls in sim

        number_balls = int(input(&quot;How many balls: &quot;))

        while len(balls) &lt; number_balls:
            # Variables for Ball
            a = input(&quot;Angle: &quot;)
            v = input(&quot;Velocity: &quot;)
            r = input(&quot;Radius: &quot;)
            c = input(&quot;Color: &quot;)
            x_pos = '0'
            y_pos = '500'
            balls.append(Ball(a, v, r, c, x_pos,
                              y_pos))  # here i get error &quot;local variable &quot;Ball&quot; defined in enclosing scope on line 24 referenced before assignment&quot;

        screen.fill('black')

        # draw ball
        # call our ball 'ball' so it doesn't overwrite out global class
        for ball in balls:
            ball.draw(width, height)
        # update position

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                value = False
            pygame.display.flip()
    pygame.quit()


run()
</code></pre>
","0","Answer"
"77748134","77747948","<p><code>Ball</code> is the (global) name of your class.</p>
<p>In your <code>run</code> function, you wrote</p>
<pre><code>for Ball in balls:
    Ball.draw(pygame.display.set_mode((width, height)))
</code></pre>
<p>so the name <code>Balls</code> will be successively given to each of the balls in <code>balls</code> (and will no longer refer to the class, btw).</p>
<p>Python's rule is simple: if you assign to a variable somewhere in the body of a function, then that variable is considered to be local to the function, unless declared otherwise. That's what happens here to <code>Ball</code>.</p>
<p>So, as you try to use it before that line, it's a local variable that hasn't received any value, hence the error message:</p>
<pre><code>UnboundLocalError: cannot access local variable 'Ball' where it is not associated with a value
</code></pre>
<p>The solution is simple anyway: don't use this name which should only refer to your class. Just rewrite the loop using a new name for your variable:</p>
<pre><code>for ball in balls:
    ball.draw(pygame.display.set_mode((width, height)))
</code></pre>
<p>Note also that this name is compliant with the <a href=""https://peps.python.org/pep-0008/#function-and-variable-names"" rel=""nofollow noreferrer"">PEP8 recommendation for variable names</a>, which states that variable names should be all lowercase. Capitalized names are for classes.</p>
","0","Answer"
"77749018","77749004","<p>You can't reassign the way you did it. Your <code>elem</code> variable is overwritten inside the loop at each step and the original variables remain unchanged.</p>
<p>Simply use:</p>
<pre><code>pos = np.array(pos)
vel = np.array(vel)
accel = np.array(accel)
</code></pre>
<p>Or with <code>asarray</code> as suggested by @jared, which avoids copying the array if it is already an array:</p>
<pre><code>pos = np.asarray(pos)
vel = np.asarray(vel)
accel = np.asarray(accel)
</code></pre>
<p>As a one liner:</p>
<pre><code>pos, vel, accel = map(np.asarray, (pos, vel, accel))
</code></pre>
<p>Or if you really want to check the type (which is not needed IMO):</p>
<pre><code>def to_numpy(elem):
    return elem if isinstance(elem, np.ndarray) else np.array(elem)

pos = to_numpy(pos)
vel = to_numpy(vel)
accel = to_numpy(accel)
</code></pre>
<p>Last suggestion, if you have many variables, <strong>use a container</strong>:</p>
<pre><code>items = {'pos': pos, 'vel': vel, 'accel': accel}

arrays = {k: elem if isinstance(elem, np.ndarray) else np.array(elem)
          for k, v in items.items()}
</code></pre>
","5","Answer"
"77749026","77749004","<p>As Mark Tolonen <a href=""https://stackoverflow.com/questions/77749004/how-to-convert-a-set-of-python-lists-to-numpy-arrays#:%7E:text=You%20didn%27t%20redefine%20pos/vel/accel.%20You%20set%20elem%20to%20the%20converted%20value%20and%20overwrote%20it%20each%20time%20through%20the%20loop."">noticed</a></p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

pos = [1, 1, 1]
vel = [1, 1, 2]
accel = [1, 1, 3]

arrays = [pos, vel, accel]

for i in range(len(arrays)):
    if not isinstance(arrays[i], np.ndarray):
        arrays[i] = np.array(arrays[i])

# Update the original variables
pos, vel, accel = arrays

print('\nAfter the redefinition:')
print(type(pos))   # &lt;class 'numpy.ndarray'&gt;
print(type(vel))   # &lt;class 'numpy.ndarray'&gt;
print(type(accel)) # &lt;class 'numpy.ndarray'&gt;
</code></pre>
","3","Answer"
"77749031","77749004","<p>This happens because you are changing the type of &quot;elem&quot;, that takes on the values of the variables in the loop, not the types of variables themselves. You can fix this by fe. doing this:</p>
<pre><code>import numpy as np

pos = [1,1,1]
vel = [1,1,2]
# vel = np.array([1,1,2])
accel = [1,1,3]

print(type(pos))
print(type(vel))
print(type(accel))

print('\nredefining...')

pos = np.array(pos)
vel = np.array(vel)
accel = np.array(accel)

print('\nafter the redefinition:')

print(type(pos))
print(type(vel))
print(type(accel))
</code></pre>
","1","Answer"
"77751421","77751307","<p>Use <code>list.eval</code> and when/then/otherwise</p>
<pre class=""lang-py prettyprint-override""><code>import polars as pl

data = {&quot;col&quot;: [[11, 21, 31, 41, 51], [12, 22, 32, 42, 52], [13, 23, 33, 43, 53]]}
df = pl.DataFrame(data)


def func(x):
    return pl.when(x.cum_count() % 2 == 0).then(x / 5).otherwise(x / 10)


df.select(result=pl.col(&quot;col&quot;).list.eval(func(pl.element())))
</code></pre>
<pre><code>shape: (3, 1)
┌────────────────────┐
│ result             │
│ ---                │
│ list[f64]          │
╞════════════════════╡
│ [2.2, 2.1, … 10.2] │
│ [2.4, 2.2, … 10.4] │
│ [2.6, 2.3, … 10.6] │
└────────────────────┘
</code></pre>
","3","Answer"
"77752379","77752326","<p>Since you have lists, use <code>Map</code> with <code>setdiff</code> -</p>
<pre><code>df$Missing &lt;- Map(setdiff, df$Expected, df$Observed)
df

#  Group            Expected        Observed Missing
#1     A       4, 5, 6, 7, 8         4, 5, 7    6, 8
#2     B 7, 8, 9, 10, 11, 12 7, 8, 9, 10, 12      11
#3     C      6, 7, 8, 9, 10        6, 8, 10    7, 9
</code></pre>
<p><strong>data</strong></p>
<p>It is easier to help if you provide data in <a href=""https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example"">reproducible format</a>.</p>
<pre><code>df &lt;- structure(list(Group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), Expected = list(4:8, 
    7:12, 6:10), Observed = list(c(4, 5, 7), c(7, 8, 9, 10, 12
), c(6, 8, 10))), row.names = c(NA, -3L), class = &quot;data.frame&quot;)
</code></pre>
","4","Answer"
"77752394","77752326","<p>With a <code>data.table</code> anti-join:</p>
<pre><code>library(data.table)

dt[
  dt[,.(x = unlist(Expected)), Group][
    !dt[,.(x = unlist(Observed)), Group], on = .(Group, x)
  ][, .(x = .(x)), Group], on = &quot;Group&quot;, Missing := x
][]
#&gt;    Group          Expected       Observed  Missing
#&gt; 1:     A         4,5,6,7,8          4,5,7      6,8
#&gt; 2:     B  7, 8, 9,10,11,12  7, 8, 9,10,12       11
#&gt; 3:     C  6, 7, 8, 9,10,11        6, 8,10  7, 9,11
</code></pre>
<p>With <code>data.table</code> grouping operations:</p>
<pre><code>library(collapse) # for %!in%

dt[,Missing := .(.(Expected[[1]][Expected %!in% Observed])), Group][]
#&gt;    Group          Expected       Observed  Missing
#&gt; 1:     A         4,5,6,7,8          4,5,7      6,8
#&gt; 2:     B  7, 8, 9,10,11,12  7, 8, 9,10,12       11
#&gt; 3:     C  6, 7, 8, 9,10,11        6, 8,10  7, 9,11
dt[
  ,.(
    Expected = Expected,
    Observed = Observed,
    Missing = .(setdiff(Expected[[1]], Observed[[1]]))
  ), Group
][]
#&gt;    Group          Expected       Observed  Missing
#&gt; 1:     A         4,5,6,7,8          4,5,7      6,8
#&gt; 2:     B  7, 8, 9,10,11,12  7, 8, 9,10,12       11
#&gt; 3:     C  6, 7, 8, 9,10,11        6, 8,10  7, 9,11
</code></pre>
<p>Data:</p>
<pre><code>dt &lt;- data.table(
  Group = LETTERS[1:3],
  Expected = list(4:8, 7:12, 6:11),
  Observed = list((4:7)[-3], (7:12)[-5], c(6L, 8L, 10L))
)
</code></pre>
<p>Benchmarking on a larger dataset:</p>
<pre><code>dt &lt;- data.table(
  Group = 1:1e4,
  Expected = lapply(sample(10, 1e4, 1), seq, 20)
)[, Observed := lapply(Expected, \(x) sample(x, sample(length(x), 1)))]

bench::mark(
  Map = {dt$Missing &lt;- Map(setdiff, dt$Expected, dt$Observed); dt},
  setdiff = dt[,.(Expected = Expected, Observed = Observed, Missing = .(setdiff(Expected[[1]], Observed[[1]]))), Group],
  `%!in%` = dt[,Missing := .(.(Expected[[1]][Expected %!in% Observed])), Group],
  antiJoin = dt[
    dt[,.(x = unlist(Expected)), Group][
      !dt[,.(x = unlist(Observed)), Group], on = .(Group, x)
    ][, .(x = .(x)), Group], on = &quot;Group&quot;, Missing := x
  ]
)

#&gt; # A tibble: 4 × 6
#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 Map          82.4ms   88.9ms      9.81     1.7MB     25.5
#&gt; 2 setdiff     106.8ms  111.7ms      8.84    1.98MB     15.9
#&gt; 3 %!in%        30.6ms   33.7ms     28.9   149.84KB     15.4
#&gt; 4 antiJoin     53.8ms     58ms     16.8    12.04MB     14.9
</code></pre>
<p>Looks like <code>%!in%</code> is the winner so far.</p>
","3","Answer"
"77752437","77752326","<p>Inspired by @RonakShah, with <code>tidyverse</code> approach</p>
<pre><code>df %&gt;% 
  dplyr::mutate(Missing = purrr::map2(Expected, Observed, setdiff))

  Group            Expected        Observed Missing
1     A       4, 5, 6, 7, 8         4, 5, 7    6, 8
2     B 7, 8, 9, 10, 11, 12 7, 8, 9, 10, 12      11
3     C      6, 7, 8, 9, 10        6, 8, 10    7, 9
</code></pre>
","1","Answer"
"77761193","77761069","<p>Here is a working solution in O(N^2) where N is the number of nodes, if no point can be reached twice.</p>
<pre class=""lang-py prettyprint-override""><code>tours = {'V0': ['0,3', '3,0'], 'V1': ['0,3', '0,8', '2,0', '3,2', '8,0']}


def process(value):
    result = []  # the final result

    nodes = {}  # a dictionary in the form of start_node: end_node
    starts = []  # a list of pairs (start, end) where start is 0

    for val in value:  # goes through each step
        a, b = val.split(&quot;,&quot;)  # get start and end
        nodes[a] = b  # add the node to nodes
        if a == &quot;0&quot;:  # if the step is a start, add it to starts
            starts.append((a, b))

    for a, b in starts:  # go through each starts
        inter = [a, b]  # list representing one route
        while b != &quot;0&quot;:  # as long as we didn't return to 0, continue
            b = nodes[b]  # get the next node
            inter.append(b)  # add it to the route
        result.append(inter)

    return result


def convert():
    &quot;&quot;&quot;
    Goes through each truck and process it's routes.
    &quot;&quot;&quot;
    result = {}
    for k, v in tours.items():
        result[k] = process(v)
    return result


print(convert())
</code></pre>
<p>This gave the result:</p>
<p><code>{'V0': [['0', '3', '0']], 'V1': [['0', '3', '2', '0'], ['0', '8', '0']]}</code></p>
<p>If you want the second list to be of dimension 1, you can just add an if check in the process method like so:</p>
<pre class=""lang-py prettyprint-override""><code>def process(value):
    result = []  # the final result

    nodes = {}  # a dictionary in the form of start_node: end_node
    starts = []  # a list of pairs (start, end) where start is 0

    for val in value:  # goes through each step
        a, b = val.split(&quot;,&quot;)  # get start and end
        nodes[a] = b  # add the node to nodes
        if a == &quot;0&quot;:  # if the step is a start, add it to starts
            starts.append((a, b))

    for a, b in starts:  # go through each starts
        inter = [a, b]  # list representing one route
        while b != &quot;0&quot;:  # as long as we didn't return to 0, continue
            b = nodes[b]  # get the next node
            inter.append(b)  # add it to the route
        result.append(inter)

    if len(result) == 1:
        return result[0]
    return result

</code></pre>
","1","Answer"
"77761216","77761069","<p>Main idea is to organize the data into a tree and then do a depth-first-search to retrieve the valid routes.</p>
<p>Organize data into tree:</p>
<pre><code>tours = {'V0': ['0,3', '3,0'], 'V1': ['0,3', '0,8', '2,0', '3,2', '8,0']}

tours2 = {}

for vehicle, routes in tours.items():
    route_tree = {}
    for route in routes:
        frm,to = route.split(',')
        frm = int(frm)
        to = int(to)
        
        if frm in route_tree:
            route_tree[frm].append(to)
        else:
            route_tree[frm] = [to]
    tours2[vehicle] = route_tree
</code></pre>
<p>tours2:</p>
<pre><code>{'V0': {0: [3], 3: [0]}, 'V1': {0: [3, 8], 2: [0], 3: [2], 8: [0]}}
</code></pre>
<p>DFS for valid routes:</p>
<pre><code>routes = {}

for vehicle in tours2:
    running_routes = [[0]]
    completed_routes = []

    while running_routes:
        running_route = running_routes.pop()
        
        if running_route[-1] == 0 and len(running_route) &gt; 1:
            completed_routes.append(running_route)
        else:
            for nxt_node in tours2[vehicle][running_route[-1]]:
                running_routes.append(running_route + [nxt_node])

    routes[vehicle] = completed_routes
</code></pre>
<p>routes:</p>
<pre><code>{'V0': [[0, 3, 0]], 'V1': [[0, 8, 0], [0, 3, 2, 0]]} 
</code></pre>
","1","Answer"
"79106980","77751307","<p>If your lists are the same length, you can create list of alternating 5 and 10 and divide your column by it</p>
<ul>
<li><a href=""https://numpy.org/devdocs/reference/generated/numpy.resize.html"" rel=""nofollow noreferrer""><code>np.resize()</code></a> to create a list of alternating values</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

weights = np.resize([5, 10], 5)
df.select(pl.col.col / pl.lit(list(weights)))
</code></pre>
<pre><code>shape: (3, 1)
┌────────────────────┐
│ col                │
│ ---                │
│ list[f64]          │
╞════════════════════╡
│ [2.2, 2.1, … 10.2] │
│ [2.4, 2.2, … 10.4] │
│ [2.6, 2.3, … 10.6] │
└────────────────────┘
</code></pre>
<p>If lists are of dynamic length, you can use the fact that latest version <a href=""https://github.com/pola-rs/polars/releases/tag/py-1.10.0"" rel=""nofollow noreferrer""><code>1.10.0</code></a> introduced arithmetic operations between lists and scalars. So now you can easily create list of alternating values.</p>
<ul>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.int_ranges.html"" rel=""nofollow noreferrer""><code>pl.int_ranges()</code></a> to create lists of integers.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.len.html"" rel=""nofollow noreferrer""><code>pl.Expr.list.len()</code></a> to use length of existing lists.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># lists of [1,0,1,0,..]
df.select(
    result = pl.int_ranges(pl.col.col.list.len()) % 2
)

# lists of [5,0,5,0,..]
df.select(
    result = 5 * (pl.int_ranges(pl.col.col.list.len()) % 2)
)

# lists of [5,10,5,,..]
df.select(
    result = 5 + 5 * (pl.int_ranges(pl.col.col.list.len()) % 2)
)
</code></pre>
<pre class=""lang-py prettyprint-override""><code>df.select(
    result = pl.col.col / (5 + 5 * (pl.int_ranges(pl.col.col.list.len()) % 2))
)
</code></pre>
<pre><code>shape: (3, 1)
┌────────────────────┐
│ result             │
│ ---                │
│ list[f64]          │
╞════════════════════╡
│ [2.2, 2.1, … 10.2] │
│ [2.4, 2.2, … 10.4] │
│ [2.6, 2.3, … 10.6] │
└────────────────────┘
</code></pre>
","1","Answer"
"77761762","77761069","<p>IIUC, you want the <a href=""https://en.wikipedia.org/wiki/Eulerian_path"" rel=""nofollow noreferrer"">Eulerian path</a> of each vehicle :</p>
<pre><code>import pandas as pd
import networkx as nx
from itertools import chain, groupby

NODE = 0

d = {}

for vehicle, routes in tours.items():
    G = nx.DiGraph()
    G.add_edges_from([[*map(int, x.split(&quot;,&quot;))] for x in routes])

    s = pd.Series(chain.from_iterable(nx.eulerian_path(G, source=NODE)))
       
    d[vehicle] = (s.groupby((s.eq(NODE) &amp; s.iloc[1:-1].duplicated()).cumsum())
                    .agg(lambda x: [k for k, _ in groupby(x)]).tolist())
</code></pre>
<p>Output :</p>
<pre><code>print(d) # {'V0': [[0, 3, 0]], 'V1': [[0, 3, 2, 0], [0, 8, 0]]}
</code></pre>
<p>Tours of both vehicles :</p>
<p><a href=""https://i.sstatic.net/MkeaB.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/MkeaB.png"" alt=""enter image description here"" /></a></p>
<p><strong>Update</strong> (<em>requested in the comments</em>) :</p>
<p>To conditionally color the nodes, you can use :</p>
<pre><code>colors = {
    k: &quot;black&quot; if k == 0
    else &quot;green&quot; if 1 &lt;= k &lt;= 4
    else &quot;red&quot; for k in range(10)
}

# to put inside the outer loop
for node in G.nodes:
    G.nodes[node][&quot;style&quot;] = &quot;filled&quot;
    G.nodes[node][&quot;fillcolor&quot;] = colors[node]
    if node == 0:
        G.nodes[node][&quot;fontcolor&quot;] = &quot;white&quot;
</code></pre>
","1","Answer"
"77761947","77761903","<p>You can use a <a href=""https://docs.python.org/3/library/collections.html#collections.Counter"" rel=""nofollow noreferrer""><code>Counter</code></a> to get the counts beforehand. This saves you having to count each element each loop; all you have to do is look up the count.</p>
<pre><code>from collections import Counter

counts = Counter(my_list)

new_dict = {k: sum(counts[e] for e in v) for k,v in my_dict.items()}
</code></pre>
<p>Result:</p>
<pre><code>{'A': 2, 'B': 2, 'C': 2}
</code></pre>
","0","Answer"
"77762013","77761829","<p>You can use json to parse the data:</p>
<pre><code>
import pprint
import json

pp = pprint.PrettyPrinter(indent=4)

question_data =&quot;&quot;&quot;{
    &quot;response_code&quot;: 0,
    &quot;results&quot;: [
        {
            &quot;type&quot;: &quot;multiple&quot;,
            &quot;difficulty&quot;: &quot;medium&quot;,
            &quot;category&quot;: &quot;Entertainment: Film&quot;,
            &quot;question&quot;: &quot;Sign of death.&quot;,
            &quot;correct_answer&quot;: &quot;Red Shirt&quot;,
            &quot;incorrect_answers&quot;: [
                &quot;Minions&quot;,
                &quot;Expendables&quot;,
                &quot;Cannon Fodder&quot;
            ]
        }
    ]
}&quot;&quot;&quot;

print(&quot;Pretty Print for better overview:&quot;)
pp.pprint(question_data)

y = json.loads(question_data)
# print(y)

for k,v in y.items():
    print(f&quot;Key: {k} Value: {v}\n&quot;)
    
##############################################
print(&quot;VALUES:&quot;) # use list comprehensive loop
##############################################

# Access response_code
print(&quot;response_code:&quot;, [v for k,v in y.items() if k == &quot;response_code&quot;])

# Access e.g. category and the similar for other values in this list
print(&quot;category:&quot;, [v for k,v in y['results'][0].items() if k == &quot;category&quot;])

# Access incorrect answer level with list element 0
print(&quot;incorrect_answers:&quot;, y['results'][0]['incorrect_answers'][0])
</code></pre>
<p>Output:</p>
<pre><code>Pretty Print for better overview:
('{\n'
 '    &quot;response_code&quot;: 0,\n'
 '    &quot;results&quot;: [\n'
 '        {\n'
 '            &quot;type&quot;: &quot;multiple&quot;,\n'
 '            &quot;difficulty&quot;: &quot;medium&quot;,\n'
 '            &quot;category&quot;: &quot;Entertainment: Film&quot;,\n'
 '            &quot;question&quot;: &quot;Sign of death.&quot;,\n'
 '            &quot;correct_answer&quot;: &quot;Red Shirt&quot;,\n'
 '            &quot;incorrect_answers&quot;: [\n'
 '                &quot;Minions&quot;,\n'
 '                &quot;Expendables&quot;,\n'
 '                &quot;Cannon Fodder&quot;\n'
 '            ]\n'
 '        }\n'
 '    ]\n'
 '}')
Key: response_code Value: 0

Key: results Value: [{'type': 'multiple', 'difficulty': 'medium', 'category': 'Entertainment: Film', 'question': 'Sign of death.', 'correct_answer': 'Red Shirt', 'incorrect_answers': ['Minions', 'Expendables', 'Cannon Fodder']}]

VALUES:
response_code: [0]
category: ['Entertainment: Film']
incorrect_answers: Minions

</code></pre>
","-1","Answer"
"77762029","77761903","<p><strong>Using nested loops and a count variable:</strong></p>
<pre><code>for key, values in my_dict.items():
    count = 0
    for element in my_list:
        if element in values:
            count += 1
    new_dict[key] = count
</code></pre>
","0","Answer"
"77762435","77761903","<p>Here's an alternate solution to the <code>Counter</code> solution and the nested for loop above that avoids using libraries but is slightly more efficient than the solution you posted. This solution improves time performance by using a dictionary as an intermediate data structure, which comes with the tradeoff that you have to use additional memory for that dictionary to be more efficient time-wise (depends which is more important to you). And obviously this is more verbose.</p>
<pre><code>def count_nested_values(my_dict: dict, my_list: list):
    counts = {}
    for list_val in my_list:
        if list_val in counts:
            counts[list_val] += 1
        else:
            counts[list_val] = 1

    new_dict = {}
    for k, dict_val in my_dict.items():
        new_dict[k] = 0

        # the following loop could be shortened to this line with
        # list comprehension, a ternary, and sum()
        # new_dict[k] = sum(counts[v] if v in counts else 0 for v in dict_val)
        for list_val in dict_val:
            if list_val in counts:
                new_dict[k] += counts[list_val]

    return new_dict
</code></pre>
<p>I should note that this is basically the same as wjandrea's solution above, just replacing the <code>Counter</code> library and dictionary comprehension with the intermediate dictionary and a for loop, respectively.</p>
<p>Why is this beneficial?</p>
<p>In your solution, you are calling the loop <code>for element in my_list</code> for each key in <code>my_dict</code>, which means that you are reprocessing those values a bunch of times you don't need to. Additionally, for lists in Python, <a href=""https://stackoverflow.com/a/46519854/22486304"">the <code>in</code> operator has O(n) performance</a>. It is O(1) for dictionaries and sets but lists are more expensive. So when you're calling <code>element in values</code>, you're reprocessing each <code>values</code> list for every element in <code>my_list</code>.</p>
<p>Overall, this is going to lead to O(n^3) performance, which is generally not desirable. The scaling factors are</p>
<ol>
<li>outer loop: number of keys in <code>my_dict</code></li>
<li>inner loop: number of values in <code>my_list</code></li>
<li><code>in</code> expression in the <code>if</code> block: number of values in the nested list (size will vary for each key-value pair in <code>my_dict</code>, so it will scale with whatever the largest value list is)</li>
</ol>
<p>So overall you will have <code>(keys in my_dict) * (values in my_list) * (values in nested lists)</code> iterations. In the example input, it's 3 * 6 * 2 = 36 iterations.</p>
<p>The <code>Counter</code> solution and my solution above improve performance by using the following algorithm:</p>
<ol>
<li>Preprocess <code>my_list</code> to count the occurrences of each value in <code>my_list</code> -&gt; the <code>Counter</code> object or the first for loop that builds the plain <code>counts</code> dictionary. Since dictionary reads and writes are constant time or O(1), the cost of this preprocessing is O(n) where n is the size of <code>my_list</code>.</li>
<li>Iterate over the key-value pairs in <code>my_dict</code> via <code>my_dict.items()</code> -&gt; the dictionary comprehension iterable in the <code>Counter</code> solution and the second for loop in mine. The cost of that iteration is O(n) where n is the number of keys in <code>my_dict</code>, so overall, our solution is now at O(n) where n is either the size of <code>my_list</code> and or the number of keys in <code>my_dict</code>, whichever is larger.</li>
<li>For each key-value pair in <code>my_dict</code>, iterate over the nested list value -&gt; input to <code>sum()</code> in the <code>Counter</code> solution and the nested for loop within the second for loop in mine. This means that overall, the number of iterations of the second for loop including the nested for loop is now the number of <em>nested values</em> in <code>my_dict</code>. So now our algorithm's overall performance is O(n) where n is either the size of <code>my_list</code> and or the number of nested values in <code>my_dict</code>, whichever is larger.</li>
<li>Have to look up the nested value in <code>counts</code> to avoid a <code>KeyError</code>. Because <code>counts</code> is a dictionary, lookup is O(1), so doesn't hurt.</li>
</ol>
<p>So the final performance is O(n) as opposed to O(n^3).</p>
<p>tl;dr if you don't care about the time efficiency of your solution – like if you know the input is never going to be large – your solution is correct and will get the job done. But if you care about performance for your solution or for educational purposes, this implementation will be somewhat more efficient, and it also shows roughly what the <code>Counter</code> solution does under the hood (there are likely some further optimizations there though).</p>
","1","Answer"
"77762637","77761829","<ol>
<li><p>Access &quot;Results&quot; with <code>question_data[&quot;results&quot;]</code></p>
</li>
<li><p>Iterate through its content</p>
</li>
<li><p>Get individual elements</p>
</li>
</ol>
<p>Could be done with this:</p>
<pre class=""lang-py prettyprint-override""><code># Iterate through the list of results
for question in question_data[&quot;results&quot;]:
  # Access the keys of the dictionary
  category = question[&quot;category&quot;]
  question_text = question[&quot;question&quot;]
  correct_answer = question[&quot;correct_answer&quot;]
  incorrect_answers = question[&quot;incorrect_answers&quot;]
  print(f&quot;Category: {category}&quot;)
  print(f&quot;Question: {question_text}&quot;)
  print(f&quot;Correct Answer: {correct_answer}&quot;)
  print(f&quot;Incorrect Answers: {incorrect_answers}&quot;)
</code></pre>
<pre><code>Category: Entertainment: Film
Question: Sign of death.
Correct Answer: Red Shirt
Incorrect Answers: ['Minions', 'Expendables', 'Cannon Fodder']
</code></pre>
","1","Answer"
"77767582","77767348","<p>Thank you @MrFlick</p>
<p>So simple, I don't know how I didn't see it</p>
<pre><code>my_tibble &lt;- input_data_tibble |&gt;
  group_by(tissue) |&gt;
  summarize(id = str_flatten(id, &quot;,&quot;))
</code></pre>
<p>Solves the problem by not creating the problem.</p>
","0","Answer"
"77768261","77768248","<p>Not the most efficient approach but I think you can use the <a href=""https://www.programiz.com/python-programming/methods/string/count"" rel=""nofollow noreferrer"">count</a> method to count the exact number of each diphthong instead of just checking if the substring exist in the a string which always match once as all substrings in <code>diphthongs</code> are iterated once</p>
<pre><code>word = input(&quot;Tell me the word you wish to check for diphthongs: &quot;)
total = 0
diphthongs = ['ue', 'ie', 'ae', 'ee', 'oe', 'ui', 'ii', 'ai', 'ei', 'oi', 'ua', 'ia', 'aa', 'ea', 'oa', 'uo', 'io',
                  'ao', 'eo', 'oo', 'uu', 'iu', 'au', 'eu', 'ou']

for diphthong in diphthongs:
    total += word.count(diphthong)
print(&quot;There are&quot;, total, &quot;diphthongs in the string&quot;)
</code></pre>
","0","Answer"
"77768269","77768248","<p>You're only checking if each diphthong is in the string once. You need to count the occurrences of each within the string. You could use the <code>str.count</code> method in a loop to accomplish this, or just use the <code>re</code> library.</p>
<pre class=""lang-py prettyprint-override""><code>import re

diphthongs = [
  'ue', 'ie', 'ae', 'ee', 'oe', 'ui', 'ii', 
  'ai', 'ei', 'oi', 'ua', 'ia', 'aa', 'ea', 
  'oa', 'uo', 'io', 'ao', 'eo', 'oo', 'uu', 
  'iu', 'au', 'eu', 'ou'
]
r = re.compile('|'.join(diphthongs))
word = &quot;courthouse&quot;
diphtongs_found = r.findall(word)

print(f&quot;There are {len(diphtongs_found)} diphthongs.&quot;)
</code></pre>
<p><em>If</em> your goal is to find all two letter diphthongs in a word like <code>&quot;courageous&quot;</code> and count both <code>eo</code> and <code>ou</code> from <code>eou</code>, then you might use a list comprehension to generate all two letter substrings.</p>
<pre><code>&gt;&gt;&gt; diphthongs = [
...   'ue', 'ie', 'ae', 'ee', 'oe', 'ui', 'ii',
...   'ai', 'ei', 'oi', 'ua', 'ia', 'aa', 'ea',
...   'oa', 'uo', 'io', 'ao', 'eo', 'oo', 'uu',
...   'iu', 'au', 'eu', 'ou'
... ]
&gt;&gt;&gt; word = &quot;courageous&quot;
&gt;&gt;&gt; [
...   ss
...   for i in range(len(word) - 1)
...   for ss in (word[i : i + 2],)
... ]
['co', 'ou', 'ur', 'ra', 'ag', 'ge', 'eo', 'ou', 'us']
</code></pre>
<p>And then filter that list comprehension based on whether they occur in the <code>diphthongs</code> list.</p>
<pre><code>&gt;&gt;&gt; [
...   ss
...   for i in range(len(word) - 1)
...   for ss in (word[i : i+2],)
...   if ss in diphthongs
... ]
['ou', 'eo', 'ou']
</code></pre>
","1","Answer"
"77768861","77768248","<p>You could use the built-in <em>sum()</em> function in conjunction with a generator as follows:</p>
<pre><code>diphthongs = ['ue', 'ie', 'ae', 'ee', 'oe', 'ui', 'ii', 'ai', 'ei', 'oi', 'ua', 'ia', 'aa', 'ea', 'oa', 'uo', 'io',
                  'ao', 'eo', 'oo', 'uu', 'iu', 'au', 'eu', 'ou']

word = input(&quot;Enter the word to be checked: &quot;)

print(&quot;There are&quot;, sum(word.count(d) for d in diphthongs), &quot;diphthongs in the word&quot;)
</code></pre>
<p>There is a potential issue with this approach. Say the word is &quot;oee&quot;. This would report 2 diphthongs. Should it perhaps just be 1?</p>
","0","Answer"
"77769941","77767348","<p>Assuming your data looks something like this:</p>
<pre><code># A tibble: 5 × 2
  tissue      id
  &lt;chr&gt;    &lt;dbl&gt;
1 Duodenum     1
2 Duodenum     5
3 Ileum       17
4 Ileum       10
5 Ileum       20
</code></pre>
<p>Then the way to get <code>my_tibble_good</code> is to use <code>list()</code>:</p>
<pre><code>summarize(input_data_tibble, id = list(unique(id)), .by = tissue)
</code></pre>
<p>Output:</p>
<pre><code># A tibble: 2 × 2
  tissue   id       
  &lt;chr&gt;    &lt;list&gt;   
1 Duodenum &lt;dbl [2]&gt;
2 Ileum    &lt;dbl [3]&gt;
</code></pre>
<p>If the '1 character column' you speak of is the <code>id</code> column, then it's easy to convert it to integer format with <code>as.integer()</code></p>
","0","Answer"
"77772573","77772407","<p>the problem is that python automatically uses <code>'</code> as the start for strings but if the string contains an <code>'</code> python has to use <code>&quot;</code> for the string. I don't know why this is really a problem for you because you can normally use the moves and access the list with for example <code>scramble[4]</code> or if you want to print it you can just do something like this:</p>
<pre class=""lang-py prettyprint-override""><code>result = &quot;&quot;

for move in scramble:
   result = result + move + &quot; &quot; # add to the preeviously created string the move from the list.

print(result)
# you can also use result to display the scramble somewhere.
</code></pre>
<p>To make the code not repeat its moves, you gotta change the for-loop when you generate the scramble to something like this:</p>
<pre class=""lang-py prettyprint-override""><code># generate the first move so that we can use it to compare it to the new move
s = move1[rd.randint(0, 5)]
t = move2[rd.randint(0, 2)]

scramble.append(s+t)

# generate 14 more moves
while len(scramble) &lt; 15:
    # generate the move temporary
    s = move1[rd.randint(0, 5)]
    t = move2[rd.randint(0, 2)]

    move = s+t
    # comapre the last move with the temporary created move while ignoring ' or 2 and regenerate the move
    while move.replace(&quot;'&quot;, &quot;&quot;).replace(&quot;2&quot;, &quot;&quot;) == scramble[-1].replace(&quot;'&quot;, &quot;&quot;).replace(&quot;2&quot;, &quot;&quot;):
        s = move1[rd.randint(0, 5)]
        t = move2[rd.randint(0, 2)]

        move = s+t

    scramble.append(move)
</code></pre>
<p>The full code should look like this then:</p>
<pre class=""lang-py prettyprint-override""><code>import random as rd

scramble = []
move1 = [&quot;F&quot;,&quot;R&quot;,&quot;L&quot;,&quot;U&quot;,&quot;B&quot;,&quot;D&quot;]
move2 = [&quot;&quot;,&quot;\'&quot;,&quot;2&quot;]

# generate the first move so that we can use it to compare it to the new move
s = move1[rd.randint(0, 5)]
t = move2[rd.randint(0, 2)]

scramble.append(s+t)

# generate 14 more moves
while len(scramble) &lt; 15:
    # generate the move temporary
    s = move1[rd.randint(0, 5)]
    t = move2[rd.randint(0, 2)]

    move = s+t
    # comapre the last move with the temporary created move while ignoring ' or 2 and regenerate the move
    while move.replace(&quot;'&quot;, &quot;&quot;).replace(&quot;2&quot;, &quot;&quot;) == scramble[-1].replace(&quot;'&quot;, &quot;&quot;).replace(&quot;2&quot;, &quot;&quot;):
        s = move1[rd.randint(0, 5)]
        t = move2[rd.randint(0, 2)]

        move = s+t

    scramble.append(move)

result = &quot;&quot;

for move in scramble:
   result = result + move + &quot; &quot; # add to the preeviously created string the move from the list.

print(result)
# you can also use result to display the scramble somewhere.
</code></pre>
<p>I know my answer isn't the best because I'm still a beginner at python but I hope it does what it has to do and solves your problem.</p>
","0","Answer"
"77772583","77772560","<p>you can use <a href=""https://docs.python.org/3/library/collections.html#collections.defaultdict"" rel=""nofollow noreferrer""><code>defaultdict</code></a> with <a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"" rel=""nofollow noreferrer""><code>extend</code></a> like this:</p>
<pre class=""lang-py prettyprint-override""><code>from collections import defaultdict

new_dict = defaultdict(list)
for d in [dict_1, dict_2]:
    for key, value in d.items():
        new_dict[key].extend(value)
</code></pre>
","4","Answer"
"77772593","77772560","<p>Given that your dictionaries have the same keys, you can use <strong>Counter</strong> from <strong>Collections</strong></p>
<pre><code>from collections import Counter

dict_1 = {&quot;a&quot;: [&quot;1&quot;], &quot;b&quot;: [&quot;3&quot;]}
dict_2 = {&quot;a&quot;: [&quot;2&quot;], &quot;b&quot;: [&quot;3&quot;]}

# Use Counter to merge the dictionaries
new_dict = Counter(dict_1)
new_dict.update(dict_2)

# Convert the Counter back to a dictionary
new_dict = dict(new_dict)
</code></pre>
<p>Or/ If else write your own function</p>
<pre><code>dict_1 = {&quot;a&quot;: [&quot;1&quot;], &quot;b&quot;: [&quot;3&quot;]}
dict_2 = {&quot;a&quot;: [&quot;2&quot;], &quot;b&quot;: [&quot;3&quot;]}

new_dict = {}

# Iterate over the keys of both dictionaries
for key in set(dict_1.keys()) | set(dict_2.keys()):
    # Merge the lists if the key is present in both dictionaries
    new_dict[key] = dict_1.get(key, []) + dict_2.get(key, [])
</code></pre>
","2","Answer"
"77772649","77772407","<p>In Python you are allowed to create string with either &quot;&quot; or ''. But you should decide for yourselve which way you go. But if you decide, you have to figure out how to escape the other one.
F.e. if you use '' you must escape '.
'R\'' will give you <em>R'</em>. But as my advice, do not mix both ways of declaring strings.</p>
","0","Answer"
"77794375","77772407","<p>I finally found the solution.
Well, I still don't know why printing the scramble list gave me a mix of &quot; and ' but print(.joint) seems to work.</p>
<p>Thanks to everyone.</p>
<pre><code>import random as rd

scramble = []
move1 = [&quot;F&quot;,&quot;R&quot;,&quot;L&quot;,&quot;U&quot;,&quot;B&quot;,&quot;D&quot;]
move2 = [&quot;&quot;,&quot;'&quot;,&quot;2&quot;]

# generate the first move to compare with the next ones :
s = rd.choice(move1)
t = rd.choice(move2)
scramble.append(s+t)


# generate the next 14 ones and do not tolerate the same &quot;move1&quot; next to each other (using &quot;startswith&quot; method):
for i in range(1,15):
    n = len(scramble)
    s = rd.choice(move1)
    t = rd.choice(move2)
    if scramble[n-1].startswith(s) :
        pass
    else :
        scramble.append(s+t)



# show the result, with spaces
print(&quot;  &quot;.join(scramble))
</code></pre>
","0","Answer"
"77778724","77778445","<p>You can zip <code>sub_headings</code> and <code>values</code> into pairs and use <a href=""https://docs.python.org/3/library/itertools.html#itertools.batched"" rel=""nofollow noreferrer""><code>itertools.batched</code></a> to chunk them into groups of 3 to construct sub-dicts, and then zip <code>sub_headings</code> with the sub-dicts to produce a key-value sequence for the main dict:</p>
<pre><code>from itertools import batched
dict(zip(filtered_headings, map(dict, batched(zip(sub_headings, values), 3))))
</code></pre>
<p><code>itertools.batched</code> was introduced in Python 3.12. If you're using an earlier Python version, you can use the <a href=""https://docs.python.org/3.11/library/itertools.html#itertools-recipes"" rel=""nofollow noreferrer""><code>batched</code></a> recipe instead.</p>
","1","Answer"
"77778729","77778445","<p>I'm not sure if the length of the lists will grow in the future, if not, we can get a solution not suitable for production but yes to be easy, readable and understandable.</p>
<p>Easy not optimized solution:</p>
<pre class=""lang-py prettyprint-override""><code>result = {}
for header in filtered_headings:
    pre = {}
    for i in range(3):
        pre[sub_headings.pop(0)] = values.pop(0)
    result[header] = pre
json_data = json.dumps(result, indent=1)
print(json_data)
</code></pre>
<p>Also, is it possible for you to tell us where are you getting your data from?</p>
<p>Because maybe there's a more efficient way to do it.</p>
","0","Answer"
"77781070","77780873","<p>You can iterate over the list in reverse to find the last index that is not <code>param</code> and return a slice of the list</p>
<pre><code>def remove_end_elements(my_list, param):
    if not my_list or my_list[-1] != param:
        return my_list
    for i, x in enumerate(my_list[::-1]):
        if x != param:
            return my_list[:-i]
    return []
</code></pre>
","2","Answer"
"77781188","77780873","<p>A possible option with <em>slicing</em> :</p>
<pre><code>def rstrip(lst, item=&quot;D&quot;):
    enum = reversed(list(enumerate(lst, start=1)))
    upto = next((i for i, v in enum if v != item), 0)
    return lst[:upto]
</code></pre>
<p>Output :</p>
<pre><code>for l in (l1, l2, l3, l4):
    print(f&quot;{l!s:&lt;22}&quot;, rstrip(l), sep=&quot;=&gt;  &quot;)
    
['A', 'D', 'D']       =&gt;  ['A']
['A', 'D']            =&gt;  ['A']
['D', 'A', 'D', 'D']  =&gt;  ['D', 'A']
['A', 'D', 'B', 'D']  =&gt;  ['A', 'D', 'B']
</code></pre>
","0","Answer"
"77785322","77780873","<p>Use <code>itertools.groupby</code> to &quot;hide&quot; all the index/counting technicality.</p>
<pre><code>from itertools import groupby


def list_rstrip(l, char='D'):
    grp_id, grp = next(groupby(reversed(l)))
    return (l[:-len(list(grp))] if grp_id == char else l)
</code></pre>
","0","Answer"
"77786049","77780873","<pre><code>def remove_end_elements(mylist, myelement):
    while myelement in mylist[-1:]:
        mylist.pop()
    return mylist
</code></pre>
","1","Answer"
"77786503","77780873","<p>As requested by @KellyBundy: this is my benchmarking script for the various solutions offered.
(All solutions adjusted to closer resemble my actual usecase.)</p>
<pre><code>import timeit

statement = &quot;&quot;&quot;

lines = ['ABCDEFGHIJ'] * 100
lines += [' ', ',, ,']

def line_is_empty_row(line: str) -&gt; bool:
    if line.replace(&quot;,&quot;, &quot;&quot;).strip() == &quot;&quot;:
        return True
    return False
&quot;&quot;&quot;

imp1 = &quot;&quot;&quot;
def remove_empty_rows_from_end(lines: list[str]) -&gt; list[str]:
    counter = 0
    for line in lines[::-1]:
        if line_is_empty_row(line):
            counter -= 1
        else:
            break
    return lines[:counter]

result = remove_empty_rows_from_end(lines)
&quot;&quot;&quot;

imp2 = &quot;&quot;&quot;
def remove_end_elements(my_list):
    if not my_list or not line_is_empty_row(my_list[-1]):
        return my_list
    for i, line in enumerate(my_list[::-1]):
        if not line_is_empty_row(line):
            return my_list[:-i]
    return []

result = remove_end_elements(lines)
&quot;&quot;&quot;

imp3 = &quot;&quot;&quot;
def rstrip(lst):
    enum = reversed(list(enumerate(lst, start=1)))
    upto = next((i for i, line in enum if not line_is_empty_row(line)), 0)
    return lst[:upto]

result = rstrip(lines)
&quot;&quot;&quot;

imp4 = &quot;&quot;&quot;
from itertools import groupby

def list_rstrip(my_list):
    line, i = next(groupby(reversed(my_list)))
    return my_list[:-len(list(i))] if line_is_empty_row(line) else my_list

result = list_rstrip(lines)
&quot;&quot;&quot;

imp5 = &quot;&quot;&quot;
def remove_end_elements(mylist):
    while mylist and line_is_empty_row(mylist[-1]):
        mylist.pop()
    return mylist

result = remove_end_elements(lines)
&quot;&quot;&quot;

num = 10000

print(&quot;Kelly Bundy&quot;, timeit.timeit(statement + imp5, number=num))
print(&quot;Guy&quot;, timeit.timeit(statement + imp2, number=num))
print(&quot;mine&quot;, timeit.timeit(statement + imp1, number=num))
print(&quot;cards&quot;, timeit.timeit(statement + imp4, number=num))
print(&quot;Timeless&quot;, timeit.timeit(statement + imp3, number=num))
</code></pre>
","1","Answer"
"77787209","77786286","<pre><code>ListView.builder(
    itemCount: items.length,
    itemBuilder: (context, index) {
      return ListTile(
        title: Text(items[index]),
        // You can add more customization here
      );
    },
  ),
)
</code></pre>
<p>Instead of list view you can use ListView.builder.</p>
<p>ListView.builder is a convenient widget for efficiently creating a scrollable list of widgets. It only creates widgets for the items that are currently in view, which makes it efficient for large lists.</p>
","0","Answer"
"77788016","77786286","<p>You can only update a newly added item</p>
<pre><code>class ItemProvider with ChangeNotifier {
 List&lt;Item&gt; _items = [];

 void addItem(Item newItem) {
   _items.add(newItem);
   notifyListeners();
 }

 List&lt;Item&gt; getItems() {
   return _items;
 }
}
</code></pre>
<p>In list view only itemwidget will get rebuild instead of all the list</p>
<pre><code>ListView.builder(
 itemCount: provider.getItems().length,
 itemBuilder: (context, index) {
   return ItemWidget(item: provider.getItems()[index]);
 },
);
</code></pre>
","1","Answer"
"77788664","77788635","<p>You can use <code>sapply</code>, imple subsetting and the modulo operator <code>%%</code>:</p>
<pre><code>my_list[sapply(my_list, length) %% 2L == 0L]
</code></pre>
<p>Or even better as suggested in the comments using <code>lengths</code></p>
<pre><code>my_list[lengths(my_list) %% 2L == 0L]
</code></pre>
","5","Answer"
"77788697","77788635","<p>With <code>Filter</code>:</p>
<pre class=""lang-r prettyprint-override""><code>Filter(\(x) length(x) %% 2 == 0, my_list)
</code></pre>
","5","Answer"
"77788722","77788635","<p>If you prefer Tidyverse functions, <code>purrr</code> has an alternative to <code>Filter()</code>:</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr)
my_list |&gt; keep(\(x) length(x) %% 2 == 0)
#&gt; $a
#&gt; [1] 1 2 3 4
#&gt; 
#&gt; $c
#&gt; [1] 5 6 7 8 6 7
</code></pre>
<p><sup>Created on 2024-01-09 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.0.2</a></sup></p>
","1","Answer"
"77788771","77788635","<p>I have just explained the Filter approach mentioned above clearly with the function call.</p>
<pre><code>my_list &lt;- list()
my_list$a &lt;- c(1, 2, 3, 4)
my_list$b &lt;- c(1, 2, 3)
my_list$c &lt;- c(5, 6, 7, 8, 6, 7)

is_even_length &lt;- function(x) {
  return(length(x) %% 2 == 0)
}

filtered_list &lt;- Filter(is_even_length, my_list)

print(filtered_list)
</code></pre>
","0","Answer"
"77789490","77789289","<p>Python 3.12 introduces a function that lets you combine adjacent list entries. Combining this with the <code>zip</code> function and a dictionary comprehension gives you an elegant way to do what you seem to be describing.</p>
<pre><code>from itertools import batched


test_dict = {k: v for k, v in zip(test_dict, batched(lis, 2))}
</code></pre>
","0","Answer"
"77789502","77789289","<p>Use a loop and slice the list. The dictionary is updated <em>in-place</em>.</p>
<pre><code>n = 0
for k, l in test_dict.items():
    test_dict[k] = lis[n:n+len(l)]
    n += len(l)
</code></pre>
","0","Answer"
"77789580","77789289","<p>So, if you know that <code>lis</code> always has at least as many values as will need to be replaced, and the size of the lists in the dict are arbitrary, then you can use the following:</p>
<pre><code>import itertools
test_dict = {'aaa' : [1, 2], 'bbb' : [4, 5], 'ccc' : [7, 8]}
lis = [11, 22, 44, 55, 77, 88]

iterator = iter(lis)

for vs in test_dict.values():
    vs[:] = itertools.islice(iterator, len(vs))

print(test_dict)
</code></pre>
<p>If <code>lis</code> is potentially smaller, then you can do something to the effect of:</p>
<pre><code>iterator = iter(lis)

for vs in test_dict.values():
    for i, e in enumerate(vs):
        try:
            vs[i] = next(iterator)
        except StopIteration:
            # you could do something with e perhaps if you wanted
            pass
</code></pre>
<p>Which will only replace as many values are there are in <code>lis</code>. You could handle the <code>except</code> clause however you want, in this case, it just keeps what is there already (by doing nothing), but you could, for example, add a dummy value or whatever you want.</p>
<p>The above mutate the original dict. If you want to create a seperate, new dictionary, the approaches can be modified in the following way:</p>
<pre><code># we know lis has at least as many items as needed to replace
iterator = iter(lis)

new_dict = {k : list(itertools.islice(iterator, len(vs))) for k, vs in test_dict.items()}
</code></pre>
<p>Or, in case <code>lis</code> may have less items than will need to be replaced:</p>
<pre><code>iterator = iter(lis)
new_dict = {}
for k, vs in test_dict.items():
    new_dict[k] = sublist = []
    for i, e in enumerate(vs):
        try:
            sublist.append(next(iterator))
        except StopIteration:
            sublist.append(e)
</code></pre>
","1","Answer"
"77789854","77789827","<p>Perhaps <code>df.isin()</code> (docs <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.isin.html"" rel=""nofollow noreferrer"">here</a>) would be useful? You can then a new column that's a boolean mask of whether each ID is in the file.</p>
<pre><code>df[&quot;id_found&quot;] = df['ID'].isin(contents)
</code></pre>
<p>EDIT: Given that <code>contents</code> is a string, you can instead use a lambda function in conjunction with <code>df.apply</code> like this:</p>
<pre><code>df[&quot;id_found&quot;] = df.apply(lambda df: df['ID'] in contents, axis=1)
</code></pre>
<p>You can then view the IDs that are found by applying the mask</p>
<pre><code>print(df[&quot;ID&quot;][df[&quot;id_found&quot;]])
</code></pre>
","1","Answer"
"77789922","77788635","<p>You can use <code>bitwAnd</code> to check the odd or even length</p>
<pre><code>&gt; my_list[!bitwAnd(lengths(my_list), 1)]
$a
[1] 1 2 3 4

$c
[1] 5 6 7 8 6 7
</code></pre>
","1","Answer"
"77789965","77789827","<p>Indeed! As mentioned that you want to see whether ANY ID is included, that means that if there is ONE occurrence, you need an indication.
You can use the following code:</p>
<pre><code>with open('myfile.txt', 'r') as file:
contents = file.read()

if (df['ID'].isin(contents)).any():
    print(&quot;Found at least one matching ID&quot;)
</code></pre>
","0","Answer"
"77790066","77788710","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import combinations


def get_comb(arr):
    for v in arr:
        for c in combinations((a for a in arr if a != v), 2):
            yield v, *c


for no, c in enumerate(get_comb([10, 11, 12, 13])):
    print(no, c)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>0 (10, 11, 12)
1 (10, 11, 13)
2 (10, 12, 13)
3 (11, 10, 12)
4 (11, 10, 13)
5 (11, 12, 13)
6 (12, 10, 11)
7 (12, 10, 13)
8 (12, 11, 13)
9 (13, 10, 11)
10 (13, 10, 12)
11 (13, 11, 12)
</code></pre>
","0","Answer"
"77795756","77795709","<p>Version 2 is only comparing the first element of <code>sum_x</code> to each element of <code>sum_y</code>. It then returns the result at the end of the first iteration of the outer loop. So you get <code>1</code> because <code>sum_x[0] == sum_y[4]</code>.</p>
<p>If you moved the <code>return</code> statement to the end, it would still be wrong because they it would compare every element of the two lists, not just the corresponding elements. The result would be 100 elements long instead of just 8.</p>
<p>If you don't want to use <code>zip()</code>, you need to use the indexes to get the corresponding element.</p>
<pre><code>def sum_xy():
    x = []

    for i, k in enumerate(sum_x):
        l = sum_y[i]
        if k &gt; l:
            x.append(3)
        elif k &lt; l:
            x.append(0)
        else:
            x.append(1)

    return x, sum(x)
</code></pre>
","1","Answer"
"77800609","77800539","<pre><code>var strings = new List&lt;string&gt;{
    &quot;R10.14_R15.2.2b - Upgrade - Even&quot;,
    &quot;R10.14_R15.2.2c - Upgrade - Odd&quot;,
    &quot;R10.14_R15.2.2 - Upgrade - Prx&quot;
};

var orderedStrings = strings.OrderBy(s =&gt; {
   if(s.Contains(&quot;prx&quot;, StringComparison.OrdinalIgnoreCase)) return 1;
   if(s.Contains(&quot;odd&quot;, StringComparison.OrdinalIgnoreCase)) return 2;
   if(s.Contains(&quot;even&quot;, StringComparison.OrdinalIgnoreCase)) return 3;
   return 4;
})
</code></pre>
","3","Answer"
"77800663","77800539","<pre><code>class Program
{
    static void Main()
    {
        List&lt;string&gt; stringsToSort = new List&lt;string&gt;
        {
            &quot;R10.14_R15.2.2b - Upgrade - Even&quot;,
            &quot;R10.14_R15.2.2c - Upgrade - Odd&quot;,
            &quot;R10.14_R15.2.2 - Upgrade - Prx&quot;
        };

        // Define the substrings for sorting
        string[] substrings = { &quot;PRX&quot;, &quot;ODD&quot;, &quot;EVEN&quot; };

        var sortedList = stringsToSort.OrderBy(str =&gt; GetSubstringIndex(str, substrings));

        foreach (var str in sortedList)
        {
            Console.WriteLine(str);
        }
    }

    private static int GetSubstringIndex(string input, string[] substrings)
    {
        for (int i = 0; i &lt; substrings.Length; i++)
        {
            int index = input.IndexOf(substrings[i], StringComparison.OrdinalIgnoreCase);
            if (index &gt;= 0)
            {
                return index;
            }
        }

        return int.MaxValue;
    }
}
</code></pre>
<p>In this example, the <code>OrderBy</code> method is used to sort the list based on a custom sorting key, which is the index of the first matching substring. The <code>GetSubstringIndex</code> method finds the index of the first matching substring in a given input string.</p>
","1","Answer"
"77804792","77788710","<p>Try this once, and change this according to your code</p>
<pre><code>import itertools

df = [10, 11, 12, 13]

for i, (child, (parent1, parent2)) in enumerate(itertools.product(df, itertools.combinations(df, 2))):
    if child != parent1 and child != parent2:
        print(child, parent1, parent2)
</code></pre>
<pre><code>Output: 

10 11 12
10 11 13
10 12 13
11 10 12
11 10 13
11 12 13
12 10 11
12 10 13
12 11 13
13 10 11
13 10 12
13 11 12
</code></pre>
","0","Answer"
"77808402","77808220","<pre><code>print([b for a in df[&quot;splitted&quot;].values for b in a]
</code></pre>
<p>Alternatively:</p>
<pre><code>import itertools
print(list(itertools.chain(*df[&quot;splitted&quot;].values)))
</code></pre>
<p>The latter may be faster but use more temporary memory. I haven't measured.</p>
<p>If the data is stored as repr strings:</p>
<pre><code>import ast

print([b for a in df[&quot;splitted&quot;].values for b in ast.literal_eval(a)]
</code></pre>
","1","Answer"
"77809000","77808220","<p>Use <code>ast.literal_eval()</code> to parse the string representation of a list to an actual list. Then you can concatenate all the lists with <code>sum()</code>.</p>
<pre><code>df = pd.DataFrame({&quot;splitted&quot;: [&quot;[]&quot;, &quot;['yolanda', 'contento', 'profesor', 'companeri']&quot;, &quot;['solicitar', 'cambio', 'salon', 'hija', 'ser']&quot;]})
result = df['splitted'].apply(ast.literal_eval).sum()
print(result) 
# Output: ['yolanda', 'contento', 'profesor', 'companeri', 'solicitar', 'cambio', 'salon', 'hija', 'ser']
</code></pre>
","1","Answer"
"77811834","77811759","<p>I think that you have to change type to another, because of range of int values from -2147483648 to 2147483647, so thats why when you reached high point it start to be negative.</p>
<p>You can try to use decimal type, because it has more wide range, but in this case you should stop using Math.pow and change it to manual implementation of Pow method to avoid cast error to &quot;double&quot;</p>
","-1","Answer"
"77811919","77811759","<p>There is a <code>List&lt;long&gt;()</code>, and you should use it when you need/want to store numbers that are this big.</p>
<p>Also use <code>Convert.ToInt64()</code> to convert the Double to a long.</p>
<pre><code>        List&lt;long&gt; so77811759()
        {
            List&lt;long&gt; nums = new List&lt;long&gt;();
            for (int i = 2; i &lt; upperbound; i++)
            {
                if (IsPrime(i))
                {
                    int mersenneNumber = (int)Math.Pow(2, i) - 1;
                    if (IsPrime(mersenneNumber))
                    {
                        Double d = Math.Pow(2, i - 1) * mersenneNumber;
                        if (d&gt;long.MaxValue) {
                            Console.WriteLine(&quot;value too large for a Double!&quot;);
                            break;
                        }
                        nums.Add(Convert.ToInt64(d));
                    }
                }
            }
            return nums;
        }
</code></pre>
<p>EDIT: So the approach is incorrect for finding what he want to find.</p>
<p>you need another type like <code>BigInteger</code> to do this:</p>
<pre><code>        List&lt;BigInteger&gt; so77811759()
        {
            List&lt;BigInteger&gt; nums = new List&lt;BigInteger&gt;();
            for (int i = 2; i &lt; upperbound; i++)
            {
                if (IsPrime(i))
                {
                    int mersenneNumber = (int)Math.Pow(2, i) - 1;
                    if (IsPrime(mersenneNumber))
                    {
                        BigInteger d = (BigInteger)Math.Pow(2, i - 1) * mersenneNumber;
                        nums.Add(d);
                    }
                }
            }
            return nums;
        }

</code></pre>
<p>This way the 75th number will be: <code>346583711603711240066869986164390514679366392276370459844483478024911453691912726503944226098664612682165286905431498230325051392</code></p>
","-1","Answer"
"77812445","77812398","<p>Loop over each line in the string list.</p>
<p>Use <code>split()</code> to get each separate part.</p>
<p>Build a new dictionary from those parts and append it to another list.</p>
<pre><code>list_of_dicts = [] 
for s in list_of_strings:
    parts = s.split()
    list_of_dicts.append({
        'id': parts[0],
        'payment_method': parts[1],
        ... and so on
    })
</code></pre>
","0","Answer"
"77949083","77789904","<p>I would complete that transformation with a Tray.io script step containing the following code:</p>
<pre><code>exports.step = function(input, fileInput) {
  const data = input.data;
  const result = {};
  
  data.forEach(entry =&gt; {
    const userEmail = entry.user_email;
    const duration = entry.duration;
    if (result.hasOwnProperty(userEmail)) {
      result[userEmail] += duration;
    } else {
      result[userEmail] = duration;
    }
  });
  
  const outputData = Object.keys(result).map(userEmail =&gt; ({
    user_email: userEmail,
    duration: result[userEmail],
  }));

  return outputData; 
}
</code></pre>
<p>The original array of objects is passed as &quot;data&quot; on the input.</p>
<p><a href=""https://i.sstatic.net/LJDBa.png"" rel=""nofollow noreferrer"">Resulting script output</a></p>
<p><a href=""https://i.sstatic.net/HaBY2.png"" rel=""nofollow noreferrer"">Script step and input</a></p>
","0","Answer"
"77949251","77789904","<p>If you are doing this in a JavaScript/Node environment, you can reduce the objects into a <code>Map</code> and then map the resulting entries back into an array.</p>
<p>Here is a very functional approach to achieve this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const exports = {};

exports.step = (input, fileInput) =&gt;
  [...input.data
    .reduce((map, { user_email, duration }) =&gt;
      map.set(user_email, (map.get(user_email) ?? 0) + duration), new Map)
    .entries()]
    .map(([user_email, duration]) =&gt; ({ user_email, duration }));

const input = {
  data: [
    { ""user_email"": ""fakemail@icloud.com"" , ""duration"": 320 },
    { ""user_email"": ""badmail@gmail.com""   , ""duration"": 167 },
    { ""user_email"": ""fakemail@icloud.com"" , ""duration"": 450 }
  ]
};

const output = exports.step(input);

console.log(output);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { top: 0; max-height: 100% !important; }</code></pre>
</div>
</div>
</p>
","0","Answer"
"78838237","77795709","<pre><code>def score(points):
    for team in points:
        x, y = team.split(&quot;:&quot;)
        if x &gt; y:
            print(&quot;3 points&quot;)
        elif x == y:
            print(&quot;1 point &quot;)
        else:
            print(&quot;0 point&quot;)
score([&quot;4:3&quot;, &quot;3:4&quot;, &quot;4:4&quot;])
</code></pre>
","0","Answer"
"77812451","77812398","<p>Make a list of all the keys you want in the dictionary. Then you can combine this with the split string to make each dictionary, using the technique in <a href=""https://stackoverflow.com/questions/209840/make-a-dictionary-dict-from-separate-lists-of-keys-and-values"">Make a dictionary (dict) from separate lists of keys and values</a></p>
<pre><code>keys = ['ID', 'payment_method', 'email', 'issue_date', 'payment_date', 'amount', 'currency']
resulting_list_of_dicts = [dict(zip(keys, item.split())) for item in list_of_strings]
</code></pre>
","1","Answer"
"77813407","77812909","<p>The difference in behavior between the two scenarios is related to how Jetpack Compose handles the <code>@Composable</code> functions and the context in which they are invoked.</p>
<p>In the first scenario:</p>
<pre><code>val list: List&lt;@Composable ()-&gt; Unit&gt; = listOf({Text(&quot;Cat&quot;)}, {Text(&quot;Dog&quot;)})
</code></pre>
<p>Both <code>Text(&quot;Cat&quot;) and Text(&quot;Dog&quot;)</code> are wrapped in @Composable lambda expressions within the list. When you use the list directly, the lambda expressions are invoked within the context of a @Composable function.</p>
<p>In the second scenario:</p>
<pre><code>val list: List&lt;@Composable ()-&gt; Unit&gt; = listOf({Text(&quot;Cat&quot;)}) + listOf({Text(&quot;Dog&quot;)})
</code></pre>
<p>Here, you are using the <code>+</code> operator to concatenate two lists. The resulting list contains two <code>@Composable</code> lambda expressions, but they are not automatically invoked within a <code>@Composable</code> context.</p>
<p>To Better understand, try with this example</p>
<pre><code>@Composable
fun MainView() {
    val list: List&lt;@Composable () -&gt; Unit&gt; = combineComposableLists()

    // Important: Render each composable in the combined list
    list.forEach { composable -&gt; composable() }
}

@Composable
fun combineComposableLists(): List&lt;@Composable () -&gt; Unit&gt; {
    val list1: List&lt;@Composable () -&gt; Unit&gt; = getList1()
    val list2: List&lt;@Composable () -&gt; Unit&gt; = getList2()

    return list1 + list2
}

@Composable
fun getList1(): List&lt;@Composable () -&gt; Unit&gt; {
    return listOf(
        { Text(&quot;Cat&quot;) },
        { Text(&quot;Dog&quot;) }
    )
}

@Composable
fun getList2(): List&lt;@Composable () -&gt; Unit&gt; {
    return listOf(
        { Text(&quot;Fish&quot;) },
        { Text(&quot;Bird&quot;) }
    )
}
</code></pre>
","5","Answer"
"77815930","77815899","<p>If you want to go through the entire loop backwards with each i iteration, you can do in many ways. Crude way would look like this:</p>
<pre><code>for(int i = 0; i &lt; n ; i++)
{
    for(int j = n-1; j &gt;= 0; j--)
    {
        printf(&quot;backwards: %d\n&quot;, vector[j]);
    }
    temp[i] = vector[i];
    printf(&quot;%d\n&quot;, temp[i]);
}
</code></pre>
<p>While an elegant way could look like this:</p>
<pre><code>for(int i = 0, j = n-1; i &lt; n ; i++, j--)
{
    temp[i] = vector[i];
    printf(&quot;%d\n&quot;, temp[i]);
    printf(&quot;backwards: %d\n&quot;, vector[j]);
}
</code></pre>
<p>You are not limited to one variable in a <code>for</code> loop.</p>
","0","Answer"
"77816078","77815923","<p>You can manipulate with random elements using while loop. If you don't want to get same element from the list, you can create a 1 element list as used_coord and this element shouldn't be in CAR_LANES_BOTTOM.</p>
<p>After that, you can get your random value and check if the last element of used_coord matches with your random_coord, choose another coord till they do not match. It can help you to avoid getting the same coord in a row. You can adapt this code into your code. This code simply works as don't get elements from a list in a row. I hope it will be helpful to you.</p>
<p>Example Code:</p>
<pre><code>used_coord = [1]
while(True):
        
    random_cord = random.choice(CAR_LANES_BOTTOM)
    
    
    try : #Check if your new random element match or not with last round.
        if used_coord[-1] != random_cord:
            used_coord.append(random_cord)
            break
        
    except :  
        print(&quot;Some Error&quot;)
</code></pre>
<p>If you want the last n elements to be different, you can use this code.</p>
<pre><code>import random
CAR_LANES_BOTTOM = [-220, -190, -160, -130, -100, -70, -40]
used_coord = [1]*n
while(True):
        
    random_cord = random.choice(CAR_LANES_BOTTOM)

    try : 
        if random_cord not in used_coord[-n:]:
            used_coord.append(random_cord)
            break
        
    except : 
        print(&quot;Some Error&quot;)
</code></pre>
","0","Answer"
"77816292","77815923","<p>If I understand you question correctly, you want to choose values from your list of car lanes without having the lanes repeat.</p>
<p>There are a few different ways you could do this, and I will leave it to you to decide which is best.</p>
<h2>1. Use <a href=""https://docs.python.org/3/library/random.html#random.shuffle"" rel=""nofollow noreferrer""><code>random.shuffle()</code></a> with a list copy</h2>
<p>I know you started your question saying <code>random.shuffle()</code> doesn't work in your case, but I think there is a way to make it work.</p>
<p>You could make a copy of your list first, and then run <code>random.shuffle()</code> on it to make a list of lanes. Then each time <code>create_car_bottom()</code> is called it returns a value from that list.</p>
<p>Your code would look something like this:</p>
<pre class=""lang-py prettyprint-override""><code>CAR_LANES_BOTTOM = [-220, -190, -160, -130, -100, -70, -40]

class CarManager:

    def __init__(self):
        self.bottom_cars = []
        ...
        self.bottom_cars_lane_order = []

    def create_car_bottom(self):
        if ...:
            if not self.bottom_cars_lane_order:
                # copy the list of car lanes
                self.bottom_cars_lane_order = list(CAR_LANES_BOTTOM)
                # shuffle it to have a random ordering
                random.shuffle(self.bottom_cars_lane_order)

            # Remove the last lane from lane order, and use it as the random lane
            random_lane = self.bottom_cars_lane_order.pop()
            ...
</code></pre>
<h2>2. Make a custom function <code>random_unique()</code></h2>
<p>Another way to solve this problem is to make a custom function that will take your of car lanes, and your list of <code>bottom_cars</code>, and choose the next one.</p>
<p>Doing it this way avoids the need to maintain other list, but this is not as computationally efficient, as the <code>not_previously_selected</code> list needs to be recomputed every time.</p>
<pre class=""lang-py prettyprint-override""><code>def random_unique(choices, previously_selected):
    &quot;&quot;&quot;
    Choose a values from choices that has not previously_selected.
    &quot;&quot;&quot;
    not_previously_selected = []
    for value in choices:
        if value not in previously_selected:
            not_previously_selected.append(value)

    return random.choice(not_previously_selected)
</code></pre>
<p>You could integrate this into your program as follows:</p>
<pre class=""lang-py prettyprint-override""><code>CAR_LANES_BOTTOM = [-220, -190, -160, -130, -100, -70, -40]

class CarManager:

    def __init__(self):
        self.bottom_cars = []
        ...

    def create_car_bottom(self):
        if ...:
            random_lane = random_unique(CAR_LANES_BOTTOM, self.bottom_cars)
            ...
</code></pre>
","1","Answer"
"77816336","77815899","<p>Referring to arrays as <em>lists</em> is very confusing in C: lists usually refer to linked lists of nodes with a <code>next</code> pointer.</p>
<p>Here is the recommended idiom to iterate on an array of objects from the last to the first:</p>
<pre><code>void print_reverse(const int vector[], size_t n)
{
    for (size_t i = n; i-- &gt; 0;)
    {
        printf(&quot;%d\n&quot;, vector[i]);
    }
}
</code></pre>
<p>This approach as several advantages:</p>
<ul>
<li>the iteration variable is initialized with the number of elements, not <code>n - 1</code>.</li>
<li>the type can be signed or unsigned.  Index variables should have type <code>size_t</code> for consistency.</li>
<li>the number of items can be <code>0</code> for an empty array slice.</li>
<li>the test <code>i-- &gt; 0</code> stops the loop when <code>i</code> is <code>0</code>, and decrements <code>i</code> as a side effect.</li>
<li>the test can also be written <code>i --&gt; 0</code> as explained in <a href=""https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c-c"">this memorable question</a>.</li>
</ul>
","1","Answer"
"77817865","77817816","<pre><code># Toy data:

mylist &lt;- list(
  diff = 1,
  TOST_r1 = 2,
  TOST_r2 = 3,
  diff = 4, 
  TOST_r1 = 5,
  TOST_r2 = 6)
</code></pre>
<p>You can first rename the column names for consistency throughout, and then use the pattern to pivot the data to long format:</p>
<pre><code>library(tidyr)
library(dplyr)

mylist |&gt; 
  as.data.frame() |&gt; 
  rename_with(function(x) paste0(x, &quot;.0&quot;), .cols = -contains(&quot;.&quot;)) |&gt; 
  pivot_longer(everything(),
               names_to = c(&quot;.value&quot;, &quot;id&quot;),
               names_sep = &quot;\\.&quot;)

# A tibble: 2 × 4
  id     diff TOST_r1 TOST_r2
  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1 0         1       2       3
2 1         4       5       6
</code></pre>
<p>The <code>id</code> column can then be removed as you wish.</p>
","2","Answer"
"77819036","77818985","<p>Stupid solution: use <strong>for</strong> by i and <strong>for</strong> by j where <strong>i != j</strong></p>
<p>If you need just unique items, use HashSet, hashSet.Add will return false if it already have the item.</p>
","1","Answer"
"77819039","77818985","<p>As an easy way out, you can turn <code>foreach</code> into <code>for</code>:</p>
<pre><code>for (int i = 0; i &lt; A.Count; ++i) {
  var e_1 = A[i];

  for (int j = 0; j &lt; A.Count; ++j) {
    // We don't compare item with itself
    if (i == j)
      continue;

    var e_2 = A[j];

    // compare e_2 to the other elements in A except e_1
  }
}
</code></pre>
<p>If you <em>insist</em> on <code>foreach</code> (say, you have <code>A</code> being <code>LinkedList&lt;T&gt;</code>, not <code>List&lt;T&gt;</code>) and you don't want to cache the enumeration in the collection (which means, that you are ready to enumerate several times) you can do the same trick with a little help of <em>Linq:</em></p>
<pre><code>using System.Linq;

foreach (var (e_1, i) in A.Select((item, index) =&gt; (item, index))) 
  foreach (var (e_2, j) in A.Select((item, index) =&gt; (item, index)))
    if (i != j) {
      // compare e_2 to the other elements in A except e_1
    }
</code></pre>
","3","Answer"
"77819130","77817816","<p>You can use <code>unlist</code> and <code>split</code> this vector by <code>names</code>. With <code>list2DF</code> this list will be converted into a <code>data.frame</code>.</p>
<pre><code>L &lt;- list(diff = 1, TOST_r1 = 2, TOST_r2 = 3,
          diff = 4, TOST_r1 = 5, TOST_r2 = 6)

list2DF(split(unlist(L), names(L)))
#list2DF(split(unlist(L, FALSE, FALSE), names(L)))  # Variant
#  diff TOST_r1 TOST_r2
#1    1       2       3
#2    4       5       6
</code></pre>
<p>Another way based on the comment of @Friede:</p>
<pre><code>N &lt;- length(unique(names(L)))
setNames(data.frame(matrix(unlist(L), ncol = N, byrow = TRUE)), names(L)[1:N])
#  diff TOST_r1 TOST_r2
#1    1       2       3
#2    4       5       6
</code></pre>
","3","Answer"
"77819308","77817816","<p>You can try <code>stack</code> + <code>reshape</code></p>
<pre><code>reshape(
    transform(
        stack(L),
        id = ave(seq_along(ind), ind, FUN = seq_along)
    ),
    direction = &quot;wide&quot;,
    idvar = &quot;id&quot;,
    timevar = &quot;ind&quot;
)
</code></pre>
<p>which gives</p>
<pre><code>  id values.diff values.TOST_r1 values.TOST_r2
1  1           1              2              3
4  2           4              5              6
</code></pre>
","0","Answer"
"77819797","77818985","<p>If you want to persist with <code>foreach</code> loops you could just skip in the inner loop if you detect that the two objects you want to compare live at the same memory location:</p>
<pre><code>        foreach (var e_1 in A)
        {
            foreach (var e_2 in A)
            {
                if(Object.ReferenceEquals(e_1, e_2)) continue; //if the objects have the same memory address, skip
                   
                // compare e_2 to the other elements in A except e_1
                Console.WriteLine($&quot;{e_1} compared to {e_2}&quot;);
            }
        }
</code></pre>
<p>Using <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.object.referenceequals?view=net-8.0"" rel=""nofollow noreferrer"">Object.ReferenceEquals</a> will not perform any unnecessarily longer checks that <code>==</code> might perform; it just queries whether the two arguments refer to the same object in memory. See it in action here:</p>
<p><a href=""https://dotnetfiddle.net/AaQBKH"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/AaQBKH</a></p>
<p>This is subtly different to <code>==</code>, which may perform a more involved comparison, and declare two objects to be equal when they're actually different. You can see this in action in the following example, where the list is a bunch of ValueTuple objects <code>(&quot;a&quot;,1), (&quot;a&quot;,1), (&quot;b&quot;,1)</code> - there are two different <code>(&quot;a&quot;,1)</code> with the same content:</p>
<p><a href=""https://dotnetfiddle.net/0XNSQM"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/0XNSQM</a></p>
<p>If you used ReferenceEquals then you <em>would</em> see the code reach the point where it prints the comparison message for the case where the first <code>(&quot;a&quot;,1)</code> is compared to the second <code>(&quot;a&quot;,1)</code>, but because <code>==</code> performs the more in-depth comparison of looking at the data content of each member in a ValueTuple, <code>==</code> will pronounce the two <code>(&quot;a&quot;,1)</code> to be equivalent, even though the second one is not the &quot;itself&quot; of the first one etc</p>
<p>Think carefully about what &quot;itself&quot; means to you, and choose your <code>Equals</code>/<code>ReferenceEquals</code>/<code>==</code> appropriately</p>
","-1","Answer"
"77822308","77822189","<p>You could do something like this:</p>
<pre><code>attributes = authToken.getTokenAttributes();
List&lt;String&gt; userData = (List&lt;String&gt;) attributes.get(&quot;user&quot;);
</code></pre>
<p>The <code>.get()</code> lets you get whatever data <code>attributes</code> contains. The code expects for that to be Object, therefore you have to add <code>(List&lt;String&gt;)</code> before getting the data, so the code knows that it is a list of string you will receive.</p>
<p>Then all the strings within user is stored in said list. You could print the data any of these two ways:</p>
<pre><code>// To get first element
log.warn(userData(0));

// To get all elements
for (int i = 0; i &lt; userData.size(); i++) {
    log.warn(userData.get(i));
}
</code></pre>
","0","Answer"
"77822507","77822487","<p>The issue you are facing is the additional work you don't need to be doing with your <code>', '.join(...)</code> call. It seems what you are trying to do is to simply extract in to a list the integer values as integer type from your list of tuples. To do this, based on the code you are writing, you don't need to use that <code>join</code>. You can simply use a list comprehension and cast each <code>elems[0]</code> to <code>int</code>. This should give you the expected output:</p>
<pre><code>selected_listbox_select_criteria_column = [('0', 'firstName'),('1', 'lastName'),('2', 'phone')]

column_to_check_for_criteria = [int(elems[0]) for elems in selected_listbox_select_criteria_column]
</code></pre>
<p>Running that will now give you</p>
<pre><code>[0, 1, 2]
</code></pre>
<p>As added information, you would typically use a <code>join</code> when you want to turn a list in to a string. An extra little note about using <code>join</code> is that expects an iterable of type <code>string</code> and not <code>int</code>. You can't actually use it on a list of integers. Observe the following two examples:</p>
<p>This will fail</p>
<pre><code>a = [1, 2, 3]
print(&quot;,&quot;.join(a))
</code></pre>
<p>This will not</p>
<pre><code>a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
print(&quot;,&quot;.join(a))
</code></pre>
","2","Answer"
"77822513","77822487","<p>You can loop through the original list using list comprehension and convert the first element in each tuple to integer using <code>int</code> function:</p>
<pre><code>column_to_check_for_criteria = [int(i[0]) for i in selected_listbox_select_criteria_column]
</code></pre>
<p>Output: <code>[0, 1, 2]</code></p>
","1","Answer"
"77822525","77822487","<p>Maybe you can convert numbers (str) to int. Something like this:</p>
<pre><code>selected_listbox_select_criteria_column = [('0', 'firstName'),('1', 'lastName'),('2', 'phone')]

column_to_check_for_criteria = [int(elems[0]) for elems in selected_listbox_select_criteria_column]
</code></pre>
","1","Answer"
"77822533","77822487","<p>using <code>map</code> you can achive this as</p>
<pre><code>&gt;&gt;&gt; tuple_list = [('0', 'firstName'),('1', 'lastName'),('2', 'phone')]
&gt;&gt;&gt; int_list = list(map(lambda x : int(x[0]), tuple_list))
&gt;&gt;&gt; int_list
[0, 1, 2]
</code></pre>
<p>more simple way will be use list comprehension as</p>
<pre><code>int_list = [int(int_val) for int_val, string in tuple_list]
</code></pre>
","1","Answer"
"77822619","77822189","<p>You can extract claims like below using the JWT token.</p>
<pre><code>    private Claims extractAllClaims(String token) {
    return Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token)
            .getBody();
}
</code></pre>
<p>You will get a list like below.</p>
<p><a href=""https://i.sstatic.net/A8Ax5.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/A8Ax5.png"" alt=""enter image description here"" /></a></p>
<p>You can use the below dependency.</p>
<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
        &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>
","0","Answer"
"77824739","77824109","<p>Instead of adding an overlay, you can just change what the list displays depending on whether there are items or not, i.e.</p>
<pre><code>List {
    if !items.isEmpty {
        ForEach(items) { item in
            ...
        }
        .dropDestination(for: URL.self) { items, index in
            handleUrlDrop(items, at: index)
        }
    } else {
        // put a view that is a drop destination here
    }
}
</code></pre>
<p>If you want the whole list to be droppable, you can use a <code>ForEach</code> that only displays one row. The <code>ForEach</code> makes the whole list droppable.</p>
<pre><code>// in the else branch...
ForEach(0..&lt;1) { _ in
    // this is a completely invisible row
    Color.clear
        .listRowBackground(Color.clear)

    // alternatively, consider using a ContentUnavailableView: 
    // ContentUnavailableView(&quot;Drop something here!&quot;, systemImage: &quot;square.and.arrow.down&quot;)
}
.dropDestination(for: URL.self) { items, _ in
    handleUrlDrop(items)
}
</code></pre>
<p>IMO, using <code>ForEach</code> feels a bit abusive. If you don't need the whole list be droppable, I would just put a single row that is a <code>ContentUnavailableView</code> and only allow things to be dropped onto that row.</p>
","2","Answer"
"77827709","77827673","<p>The issue in regards to code is that you are checking if the number is even or not instead of the length of that number being even or odd.</p>
<p>you could simply do</p>
<pre><code>class Solution():
    def isPalindrome(x):
        string = str(x)
        for i in range(len(string) // 2):
            if string[i] != string[-i - 1]:
                return False
        return True
</code></pre>
<p>and now if you run you will get False for 1000030001</p>
","3","Answer"
"77827814","77827673","<p>What about this:</p>
<pre><code>def is_palindrome(x):
    return str(x) == str(x)[::-1]
</code></pre>
","-1","Answer"
"77828645","77824109","<p>I was trying to avoid something like this, but it gets the job done:</p>
<pre><code>struct RefreshableEmptyDropView: View {
    var onRefresh: () async -&gt; Void
    var onDrop: (_ items: [URL], _ location: CGPoint) -&gt; Void

    var body: some View {
        GeometryReader { geo in
            ScrollView(.vertical) {
                Color.white.opacity(Double.leastNormalMagnitude)
                    .frame(
                        minWidth: geo.size.width,
                        minHeight: geo.size.height - 100 // some breathing room
                    )
                    .contentShape(Rectangle())
                    .dropDestination(for: URL.self) { items, location in
                        onDrop(items, location)
                        return true
                    }
            }
        }
        .refreshable {
            await onRefresh()
        }
    }
}
</code></pre>
<p>I added the <code>minHeight: geo.size.height - 100</code> to avoid issues with the <code>NavigationStack</code> around it, the scroll content was slightly too high otherwise.</p>
<p>Use it like this:</p>
<pre><code>ZStack {
    if items.isEmpty {
        BackgroundPlaceholder()
        RefreshableEmptyDropView(
            onRefresh: {
                await loadNewItems()
            },
            onDrop: { items, _ in
                handleUrlDrop(items, at: 0)
            })
    } else {
        List {
            ...
        }
        .refreshable {
            await loadNewItems()
        }
    }
}
</code></pre>
","0","Answer"
"77829307","77829278","<p>Simply this?</p>
<pre><code>def f(L):
    if len(L) &lt; 4:
        return []
    elif len(L) == 4:
        return [L[0], L[3]]
    elif len(L) == 5:
        return [L[0], L[1], L[3], L[4]]
    else:
        return L

Ls = [
    [],
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7]
]

for L in Ls:
    print(f(L))
</code></pre>
","5","Answer"
"77829313","77829278","<pre><code>lst = [1, 2, 3, 4, 5]

N = 3
out = [v for i, v in enumerate(lst) if N &lt;= i or i &lt; len(lst) - N]
print(out)
</code></pre>
<p>Prints:</p>
<pre><code>[1, 2, 4, 5]
</code></pre>
","2","Answer"
"77829346","77829278","<pre><code>def f(L, n=3):
    L = L[:]
    del L[-n:n]
    return L

Ls = [
    [],
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7]
]

for L in Ls:
    print(f(L))
</code></pre>
<p>Based on Julien's code for the test output.</p>
","3","Answer"
"77829477","77829439","<p>I suspect &quot;Employee ID&quot; isn't a true column and instead a meta-data column that has been renamed possible from &quot;Created By&quot; or &quot;Modified By&quot;.</p>
<p>Or &quot;Employee ID&quot; is the &quot;Title&quot; column that has been renamed.</p>
<p>Best to go into List Settings, then click on the &quot;Employee ID&quot; column, then look at URL/address to see what the Field name is at the end.</p>
","0","Answer"
"77830806","77815899","<blockquote>
<p>I've tried this for loop: <code>for(int j = n - 1; j &gt;= i; j--)</code>.</p>
</blockquote>
<p>just try the following:</p>
<pre><code>    for (int j = n - 1; j &gt;= 0; j--)
</code></pre>
<p>if you stop at the value of <code>i</code>, then you are finished before getting the first element.  <code>i</code> doesn't exist at the end of the first loop, but you don't show the actual code you used to try the reverse.</p>
","0","Answer"
"77832375","77812909","<p>Just a quick update what I ended up on: Since I <em>really</em> wanted everything in a single line, I specified the type for each list separately.</p>
<pre><code>val list = listOf&lt;@Composable ()-&gt; Unit&gt;({Text(&quot;Cat&quot;)}) + listOf&lt;@Composable ()-&gt; Unit&gt;({Text(&quot;Dog&quot;)})
</code></pre>
<p>Maybe not the most elegant solution, but good enough for me.</p>
","0","Answer"
"77832932","77832865","<p>There is no use in declaring a new variable which u override with a new list on the next line. Best to do this in one line.</p>
<pre class=""lang-cs prettyprint-override""><code>public async Task CompareList(List&lt;ListClass&gt; listInstance1)
{
    List&lt;ListClass&gt; listInstance2 = listInstance1
        .Where(x =&gt; x.Active == &quot;A&quot;)
        .ToList();
}
</code></pre>
","1","Answer"
"77832957","77832865","<p>the problem in your code is that you try to cast <code>IEnumerable&lt;T&gt;</code> to <code>List&lt;T&gt;</code></p>
<p>you have two options, either use <code>.ToList()</code> as suggested in the other answer, or pass the filtered list as a parameter to construct a new list as shown in the following code:</p>
<pre><code>public async Task CompareList(List&lt;ListClass&gt; listInstance1)
{
 List&lt;ListClass&gt; listInstance2 = new(listInstance1.Where(x =&gt; x.Active == &quot;A&quot;));
}  
</code></pre>
","2","Answer"
"77833486","77833398","<p><em>I'm assuming you mean the other way around in your question (<strong>without</strong> line breaks). As your code <em>does</em> print in multiple lines.</em></p>
<p>Try:</p>
<pre class=""lang-dart prettyprint-override""><code>void main() {
  final List&lt;int&gt; numbers = [1, 2, 3, 4, 5];
  print(numbers.join('')); // --&gt; 12345
}
</code></pre>
<p>it will join the <code>numbers</code> without anything as the delimiter. You can also join with a comma if you want:</p>
<pre><code>numbers.join(', ')
</code></pre>
","2","Answer"
"77835222","77835033","<p>do.call(cbind, df)</p>
<pre><code>       number number
202201     10     20
202202     20     30
202203     30     30
</code></pre>
","-1","Answer"
"77835223","77835033","<p><strong>Update:</strong> With the new desired output:</p>
<pre><code>library(dplyr)
library(tibble)
library(purrr)
library(powerjoin)

map(df,~(.x %&gt;%rownames_to_column(&quot;name1&quot;))) %&gt;% 
  power_full_join(., by = &quot;name1&quot;) 

  name1 number.x number.y
1 202201       10       20
2 202202       20       30
3 202203       30       30
</code></pre>
<p><strong>First answer:</strong>
Here is a way using the <code>powerjoin</code> package:</p>
<p>If you want to keep the list structure, we can do it this way:</p>
<pre><code>library(dplyr)
library(tibble)
library(purrr)
library(powerjoin)

map(df,~(.x %&gt;%rownames_to_column(&quot;name1&quot;))) %&gt;% 
  power_left_join(., by = c(&quot;name1&quot;, &quot;number&quot;)) %&gt;% 
  rename(name2 = number)
</code></pre>
<pre><code> name1 name2
1 202201    10
2 202202    20
3 202203    30
</code></pre>
","1","Answer"
"77835240","77835033","<p>Using <code>base</code>, I'd name the columns first using a simple loop, and then call <code>merge</code> in a <code>Reduce()</code>.</p>
<p>However, when you <code>merge</code> based on row names, <code>merge</code> turns the row names into a column. Because of this, the merging 2 data frames by row names works just fine, but if we try to add a 3rd there is an issue because the result of the first merge doesn't have row names any more. To solve this, we'll convert the row names to a column in all the data frames before merging, then convert back at the end.</p>
<pre><code>## make the example a tiny bit more complicated
## to make sure the row names are not an issue
## (thanks to @r2evans)
df3 &lt;- data.frame(number = c(20, 40, 60))
rownames(df3) &lt;- c(&quot;202201&quot;, &quot;202202&quot;, &quot;202204&quot;)
df &lt;- list(A = df1, B = df2, C = df3)

# make the column names same as list names
# and add row names as an actual column
for(i in seq_along(df)) {
  names(df[[i]]) = names(df)[i]
  df[[i]]$merge_id = row.names(df[[i]])
}

# merge by our ID
result = Reduce(\(x, y) merge(x, y, by = &quot;merge_id&quot;, all = TRUE), df)
# convert back to row_names
row.names(result) = result$merge_id
result$merge_id = NULL
result
#         A  B  C
# 202201 10 20 20
# 202202 20 30 40
# 202203 30 30 NA
# 202204 NA NA 60
</code></pre>
","3","Answer"
"77835252","77835033","<p>You're on the right start:</p>
<pre class=""lang-r prettyprint-override""><code># unchanged
out &lt;- Reduce(function(x, y) merge(x, y, by = 0, all = TRUE), df)
# remove `Row.names` column
rownames(out) &lt;- out[[1]]
# change all remaining names
out &lt;- setNames(out[,-1], names(df))
out
#         A  B
# 202201 10 20
# 202202 20 30
# 202203 30 30
</code></pre>
<p>But I don't get your error, even without the new code. I suspect that having more in the <code>df</code> list is causing some problem.</p>
<pre class=""lang-r prettyprint-override""><code>df3 &lt;- data.frame(number = c(20, 40, 60))
rownames(df3) &lt;- c(&quot;202201&quot;, &quot;202202&quot;, &quot;202204&quot;)
df &lt;- list(A = df1, B = df2, C = df3)
out &lt;- Reduce(function(x, y) merge(x, y, by = 0, all = TRUE), df)
# Warning in merge.data.frame(x, y, by = 0, all = TRUE) :
#   column name ‘Row.names’ is duplicated in the result
</code></pre>
<p>This is because the first merge results in a frame without row names, so therefore the magic of <code>by=0</code> (or <code>by=&quot;row.names&quot;</code>) can no longer work.</p>
<pre class=""lang-r prettyprint-override""><code>merge(df1, df2, by=0, all=T)
#   Row.names number.x number.y
# 1    202201       10       20
# 2    202202       20       30
# 3    202203       30       30
#### note: no row names, additional column
</code></pre>
<p>We have two options:</p>
<ol>
<li><p>Pre-shift all frames to have the row-names as a real column. (<em>Personally</em> I prefer the first step here, since I don't trust row-names and either ignore or actively remove them from my data. <code>dplyr</code> and similar packages often removes them as well, fyi, in case you're thinking of using anything from the tidyverse. But I'll continue without that preference.)</p>
<pre class=""lang-r prettyprint-override""><code>out &lt;- lapply(df, function(obj) transform(obj, rowname = rownames(obj))) |&gt;
  Reduce(f = function(x, y) merge(x, y, by = &quot;rowname&quot;, all = TRUE))
out
#   rowname number.x number.y number
# 1  202201       10       20     20
# 2  202202       20       30     40
# 3  202203       30       30     NA
# 4  202204       NA       NA     60
</code></pre>
<p>which looks more reasonable. From here, the same cleanup as above will restore the row-names as you want.</p>
<pre class=""lang-r prettyprint-override""><code>rownames(out) &lt;- out[[1]]
out &lt;- setNames(out[,-1], names(df))
out
#         A  B  C
# 202201 10 20 20
# 202202 20 30 40
# 202203 30 30 NA
# 202204 NA NA 60
</code></pre>
</li>
<li><p>Shift the new <code>Row.names</code> column back to be row-names, internally.</p>
<pre class=""lang-r prettyprint-override""><code>out &lt;- Reduce(function(x, y) {
  out &lt;- merge(x, y, by = 0, all = TRUE)
  rownames(out) &lt;- out$Row.names
  out[,-1]
}, df)
names(out) &lt;- names(df)
out
#         A  B  C
# 202201 10 20 20
# 202202 20 30 40
# 202203 30 30 NA
# 202204 NA NA 60
</code></pre>
</li>
</ol>
","4","Answer"
"77835415","77835033","<p>Here is a tidyverse option:</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr)
library(dplyr)

imap(df, ~ mutate(.x, rn = row.names(.x), &quot;{.y}&quot; := number, .keep = &quot;none&quot;)) |&gt;
  reduce(full_join, by = &quot;rn&quot;)
#       rn  A  B
# 1 202201 10 20
# 2 202202 20 30
# 3 202203 30 30
</code></pre>
<p>Using <code>imap</code> and a formula (e.g. <code>~</code>), as you iterate through your list of data frames you can access the current iteration element with <code>.x</code> and the current iteration name with <code>.y</code>.</p>
<p>Using <code>.x</code> and <code>.y</code>, you can pull the row names into a column and rename <code>number</code> using <a href=""https://rlang.r-lib.org/reference/glue-operators.html"" rel=""nofollow noreferrer"">glue-style syntax</a>. Then join all elements of the list together with <code>reduce</code>.</p>
","2","Answer"
"77835418","77835408","<p>Use <code>enumerate</code> to access both the index and value instead of nesting loops.</p>
<pre class=""lang-py prettyprint-override""><code>for i, d in enumerate(shop_list):
    for key, value in d.items():
        print(f&quot;{i+1} \t {key}\t \t{value}\t&quot;)
    print()
</code></pre>
","4","Answer"
"77835422","77829439","<p>The answer is that the column that can not be edited (much) is Microsoft's idea of what is called in database terms as a &quot;primary index&quot;.  I figured it out by a number of clues.  One is that, no matter what, when a list is created there is already a column defined that can not be deleted.  As you build the list and add content, this predetermined list has content in bold.  A developer will also find that tutorials of building automated flows will include using this column as if it were a primary index of unique fields.  And the fields are set to be unique.  That is why it can only be renamed but not changed to allow for duplicate data in more than one row.</p>
","0","Answer"
"77835425","77835408","<p>You put an unnecessary for loop. The outermost loop and the loop inside do the exact same thing (loop through <code>shop_list</code>). So the modified code would be:</p>
<pre><code>shop_list = [{&quot;Apple&quot;:2}, {&quot;Banana&quot;:6}, {&quot;Soap&quot;:1}]

print(&quot;No. \t Items \t \tQuantity\n&quot;)
for dict in shop_list:
    for key, value in dict.items():
        print(&quot;%d \t&quot; %(i+1), &quot;%s\t&quot; %key, &quot;\t%d\t&quot; %value)
    print(&quot;&quot;)
</code></pre>
","0","Answer"
"77836339","77836188","<p>Leta give these things values for clarity.</p>
<p>In <code>main()</code> lets say the stack starts at address 100000. Local variable <code>root</code> is allocated there, so its address is 1000000.</p>
<p><code>malloc()</code> returns something from the heap, lets say it's address 100, so <code>root</code> contains 100.</p>
<p>You call <code>insert_end()</code>, the parameters are put on the stack, so there's a new version of <code>root</code> local to <code>insert_end()</code>. Say <code>main()</code> needed a total of 8 bytes for local storage, and stack storage is extended downward (decreasing addresses) so the parameters for <code>insert_end()</code> are allocated at addresses 99992 (first parameter <code>root</code>) and 99988 (second parameter <code>value</code>).</p>
<p><code>root</code> in <code>main()</code> and <code>root</code> in <code>insert_end()</code> are different variables with different contents. The content of <code>root</code> in <code>inssert_end()</code> is the address of <code>root</code> in <code>main()</code>, which is 100000.</p>
<p>Down below, you're assigning <code>*root</code> to <code>curr</code>, so you're following the address 100000 in <code>root</code> in <code>insert_end()</code> to <code>root</code> in <code>main()</code> and taking that value - 100. You're assigning 100 into <code>curr</code>, so <code>curr</code> references the memory you originally got from <code>malloc()</code>.</p>
<p>To understand better, consider the type of <code>root</code> is <code>Node **</code>, when you add a <code>*</code> to a pointer variable, you remove it from the type, so <code>*root</code> is of type <code>Node *</code>, and that's the same as <code>Node *curr</code>.</p>
","0","Answer"
"77836346","77836188","<p>In this line on the <code>insert_end()</code> function</p>
<pre><code>Node*curr=*root;
</code></pre>
<p><code>root</code> is already a memory address, so it would be redundant to initialize it using an <code>&amp;</code>, although you can do it.</p>
<blockquote>
<p>But when I set a double pointer and a pointer and I initialize the second one with *p, where p is the double pointer, I get a compile error and the program doesn't even run.</p>
</blockquote>
<p>I don't really understand what you mean by that, but if you mean using</p>
<pre><code>Node**curr=*root;
</code></pre>
<p>See, on your first example, <code>root</code> is the address of the head of your linked list, of type <code>Node**</code> (pointer to a pointer). using <code>*root</code> dereferences that pointer and now we have a pointer to a single node, of type <code>Node*</code>. On your assignment, <code>curr</code> is now a pointer to a node that points to the same node as <code>*root</code>.</p>
<p>On the second example, <code>curr</code> would be a pointer to a pointer of a node, that is, a <code>Node**</code>, in simpler words, it would point the address of a node. <code>*root</code>, on the other hand, would be a <code>Node*</code>, that is, it would point to a node itself.</p>
<p>It's easy to see how this would cast an error because of the type mismatch, and this is probably what's generating your compile error.</p>
<p>Your post was a bit confusing, so i don't know if this is the answer you were looking for, you should be a little more clear and provide some example of the errors you're getting next time!</p>
","0","Answer"
"77836423","77836188","<p>The argument <code>root</code> in <code>insert_end</code> has type <code>Node **root</code>: it is a pointer to a <code>Node</code> pointer.  It is a tad confusing to use the same name <code>root</code> for this thing in <code>insert_end</code> and in <code>main</code> where <code>root</code> is a <code>Node *</code> pointing to the first node of the list.</p>
<p><code>Node *curr</code> defines a pointer to iterate on the list and find the last <code>Node</code> in order to append the newly allocate node as the <code>next</code> element of said last node.  You must use <code>curr = *root</code> to start the iteration at the first node.</p>
<p>Note however that one should test if <code>curr</code> is a null pointer to avoid undefined behavior when testing <code>curr-&gt;next</code> on an empty list.</p>
<p>Here is a modified version with more explicit names:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
   
typedef struct Node {
    int x;
    struct Node *next;
} Node;

void append_node(Node **root_p, int value) {

    Node *new_node = malloc(sizeof(Node));
    if (new_node == NULL) {
        printf(&quot;allocation error\n&quot;);
        return;
    }
    new_node-&gt;x = value;
    new_node-&gt;next = NULL;

    Node *curr = *root_p;
    if (curr == NULL) {
        // list is empty
        *root_p = new_node;
    } else {
        // list is not empty: find the last node
        while (curr-&gt;next != NULL) {
            curr = curr-&gt;next;
        }
        curr-&gt;next = new_node;
    }
}

int main(void) {
    // start with an empty list
    Node *root = NULL;

    // append 2 nodes
    append_node(&amp;root, 15);
    append_node(&amp;root, -2);

    // print node values
    for (Node *curr = root; curr != NULL; curr = curr-&gt;next) {
        printf(&quot;%d\n&quot;, curr-&gt;x);
    }
    // it does not matter the order of freeing the memory
    while (root != NULL) {
        Node *curr = root;
        root = curr-&gt;next;
        free(curr);
    }
    return 0;
}
</code></pre>
","1","Answer"
"77836890","77836188","<blockquote>
<p>I don't understand why I don't get a bug when I initialize a pointer with *p1, where p1 is a double pointer</p>
</blockquote>
<p>Well, a <em>double pointer</em> is a pointer to a pointer. If <code>p1</code> is such a thing, a double pointer,  then <code>*p1</code> is a pointer. This is <code>C</code>. If <code>*p1</code> is a pointer, why would it be a problem to initialize a pointer with its value?</p>
<p>if <code>symbol</code> is <code>char****</code> then</p>
<ul>
<li><code>*symbol</code> is <code>char***</code></li>
<li><code>**symbol</code> is <code>char**</code></li>
<li><code>***symbol</code> is <code>char*</code></li>
<li><code>****symbol</code> is a <code>char</code></li>
</ul>
<p>It is dereferencing...</p>
<h3>example</h3>
<p>This program changes the value of the <code>int</code> in <code>Node</code> using pointers to pointers:</p>
<pre><code>#include &lt;stdio.h&gt;

typedef struct
{
    int x;
} Node;

int main(void)
{
    Node one = {1};

    Node*    pNode    = &amp;one;
    Node**   ppNode   = &amp;pNode;
    Node***  pppNode  = &amp;ppNode;
    Node**** ppppNode = &amp;pppNode;

    printf(&quot;value in node is %d\n&quot;, one.x);
    pNode-&gt;x = 42;
    printf(&quot;value in node is %d\n&quot;, one.x);
    (**ppNode).x = 43;
    printf(&quot;value in node is %d\n&quot;, one.x);
    (***pppNode).x = 45;
    printf(&quot;value in node is %d\n&quot;, one.x);
    (****ppppNode).x = 46;
    printf(&quot;value in node is %d\n&quot;, one.x);

    (****ppppNode).x = 47; // ****ppppNode is Node
    printf(&quot;value in node is %d\n&quot;, one.x);

    (***ppppNode)-&gt;x = 48; // ***ppppNode is Node*
    printf(&quot;value in node is %d\n&quot;, one.x);
    return 0;
}

</code></pre>
<h3>output</h3>
<pre class=""lang-none prettyprint-override""><code>value in node is 1
value in node is 42
value in node is 43
value in node is 45
value in node is 46
value in node is 47
value in node is 48
</code></pre>
<p>It may help to understand that in <code>C</code> you declare a name as a type. If <code>p1</code> is a pointer to a pointer to <code>Node</code> then you declare <code>p1</code>. A name. As being of a type: <code>Node**</code>.You do not declare <code>**p1</code>. The type is <code>Node**</code>. So the declaration is</p>
<pre><code>    Node**                          p1;
</code></pre>
<p>because it is <code>p1</code> the name you are declaring and <code>Node**</code> the type, as the compiler would tell you. For the compiler the spaces are irrelevant.</p>
<p>If <code>p1</code> is <code>Node**</code> then</p>
<ul>
<li><code>*p1</code> is <code>Node*</code></li>
<li><code>**p1</code> is <code>Node</code></li>
</ul>
<p>It is the pointer being dereferenced. It is <code>C</code>. But it is not what you are declaring. You are declaring a name as a type. The name is <code>p1</code>. The type is <code>Node**</code>. So</p>
<pre><code>    Node                            **p1;
</code></pre>
<p>Is ok but it is more of a consequence of <code>p1</code> being of the type is is. It makes you mentally de-reference the pointer as you read the declaration.</p>
","1","Answer"
"77837218","77837078","<p>Here is the code :</p>
<pre><code>import pandas as pd

score = [(&quot;John Doe&quot;, 2, 3),(&quot;Sponge Bob&quot;, 4, 5),(&quot;John Doe&quot;, 1, 5)]

## Convert to pandas dataframe

col = [&quot;Name&quot;,&quot;S1&quot;,&quot;S2&quot;]

data = pd.DataFrame(score,columns=col)

## Filter out the identical name's score using groupby method

filtered_data = data.groupby('Name', as_index=False)[['S1','S2']].sum()

## Convert the filtered data to list of tuples

final_score = [tuple(row) for row in filtered_data.to_records(index=False)]

print(final_score)
</code></pre>
<p>Steps followed:</p>
<p>A. Import pandas library
B. Convert the list of tuples to pandas dataframe fromat
C. Filter out the dataframe
D. Convert the filtered dataframe to list of tuples</p>
","0","Answer"
"77837239","77837078","<p>Here's another solution involving a temporary dictionary to group tuples with the same name, and numpy to ease the summing:</p>
<pre><code>import numpy as np

my_tup=[
    (&quot;John Doe&quot;, 2, 3),
    (&quot;Sponge Bob&quot;, 4, 5),
    (&quot;John Doe&quot;, 1, 5),
    ]

my_dict = {}

for tup in my_tup:
    my_dict.setdefault(tup[0], []).append(np.array(tup[1:]))

grouped_tup = [(name, *sum(tup_list)) for name, tup_list in my_dict.items()]
</code></pre>
<p>Output:</p>
<pre><code>grouped_tup
[
   ('John Doe', 3, 8), 
   ('Sponge Bob', 4, 5)
]
</code></pre>
","0","Answer"
"77838946","77838881","<p>This code will work :</p>
<pre><code>def my_fun(l,r):
    for i in range(len(l)):
        r.append(l.copy())
        l.insert(0,l.pop())
    return r

result = []
out = my_fun([1,2,3,4],result)
for o in out:
    print(o)
</code></pre>
","0","Answer"
"77838957","77838881","<p>Looks like you want to rotate a list by <code>i</code> elements for all possible values of <code>i</code>.
Try something like this:</p>
<pre><code>A = [1, 2, 3]

def rotate(a, i):
    return a[i:] + a[:i]

all_rotations = [rotate(A, i) for i in range(len(A))]

# Print the permutations
for r in all_rotations:
    print(r)
</code></pre>
<p>Output is</p>
<pre><code>[1, 2, 3]
[2, 3, 1]
[3, 1, 2]
</code></pre>
<p>If you want the exact output in your question (<code>[1,2,3], [3,1,2], [2,3,1]</code>) just rotate by <code>-i</code> instead of <code>i</code>.</p>
","6","Answer"
"77839047","77838881","<p>a different approach, just following same solution as of @carsten</p>
<pre><code>&gt;&gt;&gt; A = [1, 2, 3]
&gt;&gt;&gt; new_A = A + A
&gt;&gt;&gt; new_A
[1, 2, 3, 1, 2, 3]
&gt;&gt;&gt; for i in range(len(A)):
...     sol = new_A[i:i+len(A)]
...     print(sol)
...
[1, 2, 3]
[2, 3, 1]
[3, 1, 2]
</code></pre>
","1","Answer"
"77845806","77845596","<p>You can use regular expression <code>re</code> to match the string whether it follows your pattern or not. For example, if your requirement is: Any string where there is a single comma <code>,</code> between <code>digits</code>, can have multiple spaces in between and the string should end with a number or space (I am assuming you don't want to end with a comma), you can use below expression :</p>
<pre><code>^(\s*\d+\s*\,)*(\s*\d+\s*)$
</code></pre>
<p>If you are new to regular expressions, see below explanation:</p>
<p>In above expression,</p>
<ul>
<li><code>(\s*\d+\s*\,)</code>, means multiple spaces <code>\s*</code> (even 0)</li>
<li>Followed by one or more digit <code>\d+</code></li>
<li>Followed by again multiple spaces <code>\s*</code></li>
<li>Ending with a comma <code>\,</code>.</li>
<li>The <code>*</code> after this group means above pattern can repeat zero or more time</li>
<li>The last group <code>(\s*\d+\s*)</code> means a digit with leading and trailing spaces. Your string should end with this pattern.</li>
</ul>
<p>Below is the full code that may help you:</p>
<pre><code>import re

sec=input(&quot;Please insert a sequence of numbers separated by commas:&quot;)
# Check if your string matches your pattern
if re.match(r'^(\s*\d+\s*\,)*(\s*\d+\s*)$', sec):

    # Split the string from comma 
    # str.split(&quot;pattern&quot;) converts your string into a string of list
    # &quot;1, 2, 4&quot;.split(&quot;,&quot;) -&gt; [&quot;1 &quot;, &quot;2 &quot;, &quot;4&quot;]
    # &quot;1@@ 2@@ abcd&quot;.split(&quot;@@&quot;) -&gt; [&quot;1 &quot;, &quot;2 &quot;, &quot;abcd&quot;]
    arr = sec.split(&quot;,&quot;)
    
    # For each element in arr, use int() function
    # map(function, iterable): applies given function on each element
    # of the iterator. Here, we want to apply int() on each element
    numlist = list(map(int, arr))

    print(numlist)
    print(tuple(numlist))

# Otherwise ask user to input proper string
else:
    print(&quot;Please enter a comma between the numbers&quot;)
</code></pre>
<p>Hope it fulfills your requirement.</p>
","2","Answer"
"77845818","77833398","<p>I solved issue;</p>
<pre><code>&lt;pre&gt;
_mainController.selected_Tags.forEach((innerList) {
      innerList.forEach((element) {
        print(element);
      });
    });
&lt;/pre&gt;
</code></pre>
","0","Answer"
"77846026","77845596","<p>The requirements are a bit unclear but here is an attempt that only accepts valid answers with a while loop:</p>
<pre><code>check = True
while check:
    numlist=[]
    sec=input(&quot;Please insert a sequence of numbers separated by commas:&quot;).replace(&quot; &quot;, &quot;&quot;)
    check = False
    for i,x in enumerate(sec):
        if i%2==0:
            try:
                numlist.append(int(x))
            except:
                check = True
        elif x!=',':
            check = True
    
    
print(numlist)
print(tuple(numlist))
</code></pre>
","1","Answer"
"77846378","77845596","<p>The normal and simplest way to solve this problem would be to use regular expressions as Mukul Bindal's answer shows.</p>
<p>Another approach is to use <code>str.split</code> and check that the strings in the output list are not empty or contain only spaces (two consecutive commas) and can be parsed to <code>int</code>, something like:</p>
<pre><code>sec = input(&quot;Please insert a sequence of numbers separated by commas:&quot;)

numlist = []
for sub in sec.split(&quot;,&quot;):
    if sub:
        try:
            num = int(sub)
        except ValueError:
            print(&quot;Invalid character or a comma was expected&quot;)
            break
        finally:
            numlist.append(num)
    else:
        print(&quot;A number was expected&quot;)
        break
else:
    print(numlist)
</code></pre>
<p>However, if you want for curiosity or learning purposes to validate and parse the string using only conditionals and a loop as you pose in your question, you can do it, for example, using a state variable:</p>
<pre><code>sec = input(&quot;Please insert a sequence of numbers separated by commas:&quot;)

numlist = []
start_num_idx = 0

state = &quot;waiting number&quot;
for i, char in enumerate(sec):
    if char == &quot; &quot;:
        if state == &quot;reading number&quot;:
            numlist.append(int(sec[start_num_idx: i + 1]))
            state = &quot;waiting comma&quot;
    elif char == &quot;,&quot;:
        if state == &quot;reading number&quot;:
            numlist.append(int(sec[start_num_idx: i]))
        elif state == &quot;waiting number&quot;:
            print(f&quot;Unexpected comma not preceded by number at index {i}&quot;)
            break
        state = &quot;waiting number&quot;

    elif char in &quot;0123456789&quot;:
        if state == &quot;waiting number&quot;:
            state = &quot;reading number&quot;
            start_num_idx = i
        elif state == &quot;waiting comma&quot;:
            print(f&quot;Unexpected number not preceded by comma at index {i}&quot;)
            break
    else:
        print(f&quot;Invalid character at index {i}: {char}&quot;)
        break
else:
    if state == &quot;waiting number&quot; and numlist:
        print(&quot;Final comma not followed by a number&quot;)
    else:
        if state == &quot;reading number&quot;:
            numlist.append(int(sec[start_num_idx: i + 1]))
        if numlist:
            print(numlist)
        else:
            print(&quot;You have not entered any number&quot;)
</code></pre>
<p>The code can be simplified, but it is verbose on purpose.</p>
<blockquote>
<pre><code>Please insert a sequence of numbers separated by commas:   
You have not entered any number

Please insert a sequence of numbers separated by commas:,45
Unexpected comma not preceded by number at index 0

Please insert a sequence of numbers separated by commas:   , 45
Unexpected comma not preceded by number at index 3

Please insert a sequence of numbers separated by commas:45
[45]

Please insert a sequence of numbers separated by commas:    45
[45]

Please insert a sequence of numbers separated by commas:45,
Final comma not followed by a number

Please insert a sequence of numbers separated by commas:  45 ,  , 4
Unexpected comma not preceded by number at index 8

Please insert a sequence of numbers separated by commas:45,,9
Unexpected comma not preceded by number at index 3

Please insert a sequence of numbers separated by commas:45, 47 78, 5
Unexpected number not preceded by comma at index 7

Please insert a sequence of numbers separated by commas:45, 13@3, 4
Invalid character at index 6: @    
 
Please insert a sequence of numbers separated by commas:  45  ,  9,8,9  ,7  
[45, 9, 8, 9, 7]
</code></pre>
</blockquote>
","2","Answer"
"77848909","77848814","<pre><code>&gt;&gt;&gt; help(str.index)
Help on method_descriptor:

index(...)
    S.index(sub[, start[, end]]) -&gt; int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
</code></pre>
<p>in str.index method, start is inclusive while end is exclusive. that mean mathematicaly <code>[start, end)</code></p>
<p>so in this case, you mentioned end to be 25. so this function will search in all indexes from 0 to 24, and wont search in for 25 index</p>
<p>so inorder to solve this, add +1 to the end index, so that it make index 25 ie end inclusive</p>
<p>ie</p>
<pre><code>a = keyboard.index(letter1, x, y+1) # add +1 in end
</code></pre>
","0","Answer"
"77848962","77848814","<pre><code>keyboard = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']
letter1 = str(input())
x = 0
y = 26
a = keyboard.index(letter1, x, y)
if a==25:
  print(keyboard[0])
else:
  print(keyboard[a+1])
</code></pre>
<p><code>list.index(str,start,end)</code> will search for &quot;str&quot; starting from &quot;start&quot; to &quot;end&quot; but not including &quot;end&quot;. So I have set <code>y=26</code> so that it will search from index 0 to 25.</p>
","0","Answer"
"77849181","77849030","<p>You are resetting <code>internal</code> every time you call <code>inorder</code>.  You need a variable <code>inorder</code> that's outside the recursion.</p>
<pre><code>def inorder(bomj):
    visited = []

    def internal(bomj):
        if bomj:
            internal(bomj.left)
            print(bomj.val)
            visited.append(bomj.val)
            internal(bomj.right)

    internal(bomj)
    return visited
</code></pre>
","1","Answer"
"77849272","77849030","<p>Without changing the code too much, you can just merge the list:</p>
<pre><code>def inoder(bomj):
    visited = []

    if bomj:
        left = inoder(bomj.left)
        print(bomj.val)
        right = inoder(bomj.right)
        visited = left + [bomj.val] + right

    return visited
</code></pre>
","1","Answer"
"77849308","77849030","<p>You can pass the data structure to collect the values by reference as a parameter argument.</p>
<p>Updated code:</p>
<pre><code>class TreeNode:
 def __init__(self, val=0, left=None, right=None):
     self.val = val
     self.left = left
     self.right = right

def inorder(bomj):
    visited = []
    _inorder(bomj, visited)
    return visited

def _inorder(bomj, nodes):
    if bomj:
        _inorder(bomj.left, nodes)
        nodes.append(bomj.val)
        _inorder(bomj.right, nodes)

tree = TreeNode(1)
tree.left = TreeNode(2)
tree.right = TreeNode(3)
tree.left.left = TreeNode(4)
tree.left.right = TreeNode(5)
tree.left.left.left = TreeNode(7)
tree.right.left = TreeNode(6)
print(inorder(tree))
</code></pre>
<p>Result:</p>
<pre><code>[7, 4, 2, 5, 1, 6, 3]
</code></pre>
","0","Answer"
"77851098","77850299","<p>Try this, but it's far from the most efficient and correct way to do it, but I tried to follow your style</p>
<pre><code>price_list &lt;- list(ACX.MC=list(re=rnorm(368), mkt=rnorm(368)))

df &lt;- data.frame(re=price_list$ACX.MC$re , mkt=price_list$ACX.MC$mkt)

window &lt;-  60
coefs_mkt &lt;- rep(NA, nrow(df))

for(i in window:nrow(df)){
  ii &lt;- (i-(window-1)):i
  model &lt;- lm(re ~ mkt, data = df[ii,])
  coefs_mkt[i] &lt;- coef(model)[&quot;mkt&quot;]
}
</code></pre>
<p>here is another option for effective calculation in c++</p>
<pre><code>devtools::install_version(&quot;rollRegres&quot;, repos = &quot;http://cran.us.r-project.org&quot;)

window &lt;-  60

library(rollRegres)
out &lt;- roll_regres(re ~ mkt, df, width = window)

print(out$coefs[,&quot;mkt&quot;])
</code></pre>
","0","Answer"
"77851226","77850299","<p>Here is a small example using the built in <code>BOD</code> data frame. coefs takes a matrix with column Time and demand and outputs the coefficients of a linear regression using <code>flm</code>.  <code>roll</code> rolls  coefs down a data frame with a window of 4 using <code>rollapplyr</code> where the r on the end means right aligned. <code>rollapplyr</code> uses the argument <code>partial=3</code> which says it requires at least 3 points and otherwise <code>fill=NA</code> specifies that we get NA back.  In your case the 4 would be 60 and the 3 would be 40.</p>
<pre><code>library(collapse) # flm
library(zoo) # rollapplyr

# test data
L &lt;- list(A = BOD, B = BOD)

coefs &lt;- function(x) c(flm(formula = demand ~ Time, data = as.data.frame(x)))
roll &lt;- function(x) rollapplyr(x, 4, coefs, partial = 3, fill = NA, 
  by.column = FALSE)

Map(roll, L)
</code></pre>
<p>giving:</p>
<pre><code>$A
          [,1]      [,2]
[1,]        NA        NA
[2,]        NA        NA
[3,]  1.833333 5.3500000
[4,]  5.450000 3.1800000
[5,] 10.710000 1.2900000
[6,] 15.862857 0.3657143

$B
          [,1]      [,2]
[1,]        NA        NA
[2,]        NA        NA
[3,]  1.833333 5.3500000
[4,]  5.450000 3.1800000
[5,] 10.710000 1.2900000
[6,] 15.862857 0.3657143
</code></pre>
","1","Answer"
"77861062","77861005","<p>There are a few issues:</p>
<ul>
<li><p><code>liElement</code> will get only one <code>li</code> element, not all of them, so you cannot expect the <code>mouseout</code> handler to remove all of them.</p>
</li>
<li><p><code>topicsDiv</code> is not the parent of <code>liElement</code>, so <code>topicsDiv.removeChild(liElement)</code> will not work -- it will actually trigger an error which you should see in the console.</p>
</li>
<li><p>In the <code>mouseover</code> handler you have a typo: <code>topiclUl</code> is not <code>topicUl</code>. Also this should lead to an error message in the console.</p>
</li>
</ul>
<p>To fix this you could iterate over all <code>li</code> elements to delete them one by one, but it is much easier to just clear the content in the <code>ul</code> element, so just do:</p>
<pre><code>topicUl.innerHTML = &quot;&quot;; // This removes all those LI elements
topicsDiv.removeChild(topicUl);  // Optional
</code></pre>
","0","Answer"
"77861172","77861005","<p>Your code has a couple of issues that need to be addressed. Here's the corrected version:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let stringsArray = [
    ""Topic 1"",
    ""Topic 2"",
    ""Topic 3"",
    ""Topic 4"",
    ""Topic 5""
];

let topicsDiv = document.getElementById(""topics-div"");
let topicUl = document.createElement(""ul"");

topicsDiv.onmouseover = function() {
    topicsDiv.appendChild(topicUl);

    for (let i = 0; i &lt; stringsArray.length; i++) {
        let liElement = document.createElement(""li"");
        liElement.textContent = stringsArray[i];
        topicUl.appendChild(liElement);
    }
};

topicsDiv.onmouseout = function() {
    while (topicUl.firstChild) {
        topicUl.removeChild(topicUl.firstChild);
    }

    topicsDiv.removeChild(topicUl);
};</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;body&gt;
&lt;div id=""topics-div""&gt;Topics&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Changes made:</strong></p>
<ul>
<li>Fixed the typo in <code>topiclUl</code> to <code>topicUl</code> in the loop where you are
appending <code>li</code> elements.</li>
<li>Changed the loop condition to <code> i &lt; stringsArray.length</code> to prevent accessing an undefined element in the array.</li>
<li>Used a <code>while</code> loop to remove all child elements of the <code>ul</code> when the mouse leaves the <code>div</code>.</li>
</ul>
<p>This should resolve the issue of infinite li elements being created and not being removed when not hovering.</p>
","1","Answer"
"77861206","77861005","<pre><code>Here the problem is in your onmouseout function. You need to remove all the li but your function is selecting li as query selector and then removing the child of the same.

what you need to do is you have to recursively remove the Li and ideally you should remove the UL as well as.

Here's is the working '**onmouseout**'-

topicsDiv.onmouseout = function () {
        // Remove all li elements
        while (topicUl.firstChild) {
            topicUl.removeChild(topicUl.firstChild);
        }

        // Remove the ul element- This is optional ideally you should remove the UL as well.
        topicsDiv.removeChild(topicUl);
    }
</code></pre>
","0","Answer"
"77870246","77866079","<p>Please below formula in the list validation.</p>
<p>=IF(AND([choicecolumn]=&quot;6&quot;,[datecolumn]=TODAY()),TRUE,IF(AND([choicecolumn]&lt;&gt;&quot;6&quot;,ISBLANK([datecolumn])),TRUE,FALSE))</p>
","0","Answer"
"77926162","77866079","<p>You have to use the <strong>List validation</strong> settings for your requirements.</p>
<p>Try using either of below formulas in your list validation settings:</p>
<pre><code>=IF([choiceColumn]=&quot;6&quot;, IF([DateColumn]=TODAY(),TRUE,FALSE),ISBLANK([DateColumn]))
</code></pre>
<p>OR</p>
<pre><code>=IF([choiceColumn]=&quot;6&quot;, IF([DateColumn]=TODAY(),TRUE,FALSE),IF(ISBLANK([DateColumn]),TRUE,FALSE))
</code></pre>
<p>You can find the detailed steps to add list validation formula in my answer at: <a href=""https://sharepoint.stackexchange.com/questions/298168/list-validation-if-then-syntax/298171#298171"">List validation if then syntax</a></p>
<hr>
<p><strong>Notes</strong>:</p>
<ol>
<li>Sometimes comma(<code>,</code>) does not work in formula (it is based on language or regional settings on your site). So in that case use semicolon(<code>;</code>) instead of comma(<code>,</code>).</li>
<li>Use correct <em>display name</em> of your SharePoint columns in above formula.</li>
<li>Wrap column names inside <code>[]</code> if your column name has space in it. For example: <code>[My Column Name]</code>.</li>
</ol>
","0","Answer"
"77868577","77868507","<p>Loop over <code>current_centroids</code>. For each element, use <code>min()</code> to find the element of <code>prior_centroids</code> with the minimum absolute difference between their <code>[1]</code> values.</p>
<pre><code>result = []
for c1 in current_centroids:
    c2 = min(prior_centroids, key=lambda c: abs(c1[1] - c[1]))
    result.append((c1, c2))
</code></pre>
<p>Results with your sample input:</p>
<pre><code>[((924, 849), (1096, 837)),
 ((734, 974), (898, 960)),
 ((360, 778), (522, 763)),
 ((400, 710), (1780, 713)),
 ((963, 1067), (898, 960)),
 ((839, 440), (563, 694)),
 ((899, 88), (1080, 75))]
</code></pre>
","1","Answer"
"77868634","77868507","<p>I converted Barmar's answer to list comprehension:</p>
<pre><code>result = [(c1, min(prior_centroids, key = lambda c: abs(c1[1] - c[1]))) for c1 in current_centroids]
</code></pre>
","0","Answer"
"77869630","77869607","<p><code>nchar()</code> implicitly coerces its arguments to type <code>character</code>. Now let’s check what this looks like if done explicitly:</p>
<pre class=""lang-r prettyprint-override""><code>mychar = as.character(mylist)
# [1] &quot;c(\&quot;zzz\&quot;, \&quot;xs\&quot;, \&quot;acgt\&quot;)&quot; &quot;c(\&quot;aa\&quot;, \&quot;bb\&quot;)&quot;

cat(mychar, sep = &quot;\n&quot;)
# c(&quot;zzz&quot;, &quot;xs&quot;, &quot;acgt&quot;)
# c(&quot;aa&quot;, &quot;bb&quot;)

nchar(mychar)
# [1] 22 13
</code></pre>
","3","Answer"
"77869631","77869607","<p><code>nchar()</code> first turns the list into characters, then counts them.  The behaviour may not be what you would expect, but you can see how it works if you turn your list into a character vector first.</p>
<pre class=""lang-r prettyprint-override""><code>mylist&lt;- list(a = c('zzz','xs','acgt'), b = c('aa', 'bb'))
as.character(mylist)
#&gt; [1] &quot;c(\&quot;zzz\&quot;, \&quot;xs\&quot;, \&quot;acgt\&quot;)&quot; &quot;c(\&quot;aa\&quot;, \&quot;bb\&quot;)&quot;
nchar(mylist)
#&gt;  a  b 
#&gt; 22 13
</code></pre>
<p><sup>Created on 2024-01-23 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.0.2</a></sup></p>
","2","Answer"
"77870068","77869919","<p>You can try (note: you probably have the last <code>c</code>/<code>d</code> in your results swapped):</p>
<pre class=""lang-py prettyprint-override""><code>lst1 = [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]]
lst2 = [[[1, 2], [3, 4]], [[1, 3], [2, 4]], [[1, 4], [2, 3]]]

out = []
for l in lst1:
    for subl in lst2:
        m = {k: v for v, subl2 in zip(l, subl) for k in subl2}
        tmp, idx = [], 1
        for subl2 in subl:
            for _ in subl2:
                tmp.append(m[idx])
                idx += 1
        out.append(tmp)

print(out)
</code></pre>
<p>Prints:</p>
<pre><code>[
    [&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;b&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;a&quot;],
    [&quot;c&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;],
    [&quot;c&quot;, &quot;d&quot;, &quot;c&quot;, &quot;d&quot;],
    [&quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;c&quot;],
]
</code></pre>
","0","Answer"
"77870390","77869919","<p>You could use a list comprehension that combines values and relative positions in tuples, sorts them and builds the result from the values matching the sorted positions.</p>
<pre><code>result = [ [v for _,v in sorted((p,v) for v,pv in zip(v1,v2) for p in pv)]
           for v1 in lst1
           for v2 in lst2 ]

print(*result,sep=&quot;\n&quot;)

['a', 'a', 'b', 'b']
['a', 'b', 'a', 'b']
['a', 'b', 'b', 'a']
['c', 'c', 'd', 'd']
['c', 'd', 'c', 'd']
['c', 'd', 'd', 'c']
</code></pre>
<p>with numeric values in list1:</p>
<pre><code>[8, 8, 9, 9]
[8, 9, 8, 9]
[8, 9, 9, 8]
[6, 6, 7, 7]
[6, 7, 6, 7]
[6, 7, 7, 6]
</code></pre>
","1","Answer"
"77874401","77874286","<p>Your <code>WorkingWithTextFiles</code> class seemingly never initializes its <code>_wordsList</code> field.</p>
<p>Since a list is a reference type and you never initialize the field, the value it has will always be null. you should initialize it on object creation with <code>private List&lt;Words&gt; _wordsList = new();</code>.
This way, the list you want to add items to actually exists when you call <code>.Add()</code>.</p>
","0","Answer"
"77874409","77874286","<p>The code object _wordsList is not initialized.</p>
<p>Please use below code to create memory for object as below</p>
<pre><code>_wordsList= new List&lt;Words&gt;();
</code></pre>
","0","Answer"
"77874541","77874446","<p>Maybe you can hash every object, and use a dictionary to decide whether a hash has a corresponding object. When the hash matches, you then do the real comparison. This should be able to do the job in O(n) time.</p>
<p>EDIT: I didn't look at the question carefully enough... The <code>validation</code> function was quite unusual, so I don't think my method works. Sorry.</p>
","1","Answer"
"77874814","77874446","<p><code>includes</code> is not an efficient method when you have to repeat it on the same array several times. Also, if you would key your data by those <code>have</code> strings, and register for each of them which are the <code>need</code> strings that can be reached by which posts, then you have a more efficient adjacency list (graph data structure), and can hope to find such matching pairs faster.</p>
<p>As you didn't provide sample data, I had to invent some. Here is a possible implementation:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Sample data
const posts = [
    { id: 1, have: ""a"", need: [""b"", ""c"", ""d""] },
    { id: 2, have: ""a"", need: [""b"", ""e""] },
    { id: 3, have: ""b"", need: [""c""] },
    { id: 4, have: ""c"", need: [] },
    { id: 5, have: ""d"", need: [""a"", ""c""] },
    { id: 6, have: ""d"", need: [""a""] },
    { id: 7, have: ""e"", need: [""b"", ""d""] },
];

// Create a 2-level dictionary to register ""edges"" from ""have"" to ""need""
// identifying which posts establish each edge.
const map = {};
for (const post of posts) {
    const needs = (map[post.have] ??= {});
    for (const need of post.need) {
        (needs[need] ??= []).push(post);
    }
}

// Iterate the 2-level dictionary to find matching pairs:
for (const [start, startMap] of Object.entries(map)) {
    for (const [end, posts] of Object.entries(startMap)) {
        if (end &lt; start) continue;
        const backPosts = map[end]?.[start]; // This has the opposite directed edges
        if (!backPosts) continue;
        for (const post1 of posts) {
            for (const post2 of backPosts) {
                console.log(`Found mutually related posts via ""need"" ${end}:`);
                console.log(`  ${JSON.stringify(post1)}`);
                console.log(`  ${JSON.stringify(post2)}`);
            }
        }
    }
}</code></pre>
</div>
</div>
</p>
","0","Answer"
"77875861","77875796","<p>The following code in the function <code>insert_end</code> has a bug:</p>
<pre><code>while(find!=NULL){
    find=find-&gt;next_generation;
}
find-&gt;next_generation=next_gen;
</code></pre>
<p>After the <code>while</code> loop has completed, <code>find</code> will have the value <code>NULL</code>. In the first line after the loop, you dereference <code>find</code>. Dereferencing a <code>NULL</code> pointer is not allowed and will invoke undefined behavior.</p>
<p>In order to solve this problem, you can either introduce a second variable which remembers the previous value of <code>find</code>, or better, you can rewrite the function to use a pointer to a pointer:</p>
<pre><code>void insert_end( int age )
{
     person **pp_next = &amp;head;
     person *new_node = malloc( sizeof *new_node );

     new_node-&gt;age = age;
     new_node-&gt;next_generation = NULL;

     while ( *pp_next != NULL )
     {
         pp_next = &amp;(*pp_next)-&gt;next_generation;
     }

     // The pointer &quot;pp_next&quot; now points to the pointer
     // where the address of the new node should be written,
     // in order to link it with the linked list. This will
     // be the address of the &quot;next_generation&quot; pointer of
     // the last node, or if there are no nodes, it will be
     // the address of &quot;head&quot;.

     // link new node to the linked list
     *pp_next = new_node;
}
</code></pre>
<p>Also, your function <code>insert_whenever</code> has a bug, too. The lines</p>
<pre><code>next_gen-&gt;next_generation=p;
p-&gt;next_generation=next_gen;
</code></pre>
<p>will create a cycle in the linked list, because the new node <code>next_gen</code> will point to the node <code>p</code>, and the node <code>p</code> will point to the new node <code>next_gen</code>.</p>
<p>In order to fix this, you should change the line</p>
<pre><code>next_gen-&gt;next_generation=p;
</code></pre>
<p>to:</p>
<pre><code>next_gen-&gt;next_generation = p-&gt;next_generation;
</code></pre>
","3","Answer"
"77876039","77875796","<ul>
<li><code>insert_end</code> is broken because <code>while(find!=NULL)</code> will go on until <code>find == NULL</code> and then you dereference <code>find</code> with undefined behavior as a result.</li>
<li><code>insert_whenever</code> is broken because it breaks the linked list at the insertion point and creates a loop in the list.</li>
</ul>
<p>I also suggest not having <code>head</code> as a global variable since you then can only have <em>one</em> linked list. Send in a <code>person**</code> to the functions (like <code>&amp;head</code>) and let the functions modify the list to which <code>head</code> is the pointer to the first element.</p>
<p>Instead of <code>insert_start</code>, you could make it <code>insert_at</code> to insert a node anywhere in the list. By sending in <code>&amp;head</code> to this function, it would be the same as inserting at the start:</p>
<pre class=""lang-c prettyprint-override""><code>void insert_at(person **p, int age) {
    person *next_gen = malloc(sizeof *next_gen);
    *next_gen = (person) {age, *p};
    *p = next_gen;
}
</code></pre>
<p>Then instead of <code>insert_whenever</code>, you could create a support function, <code>get_pos</code> which returns a pointer the the <code>next_generation</code> pointer at a certain position:</p>
<pre class=""lang-c prettyprint-override""><code>// use pos &gt;= 0 to find the next_generation pointer at that position
// use pos &lt; 0 to find the last next_generation pointer
person **get_pos(person **head, int pos) {
    // make head point at the next_generation pointer at position pos
    // or at the last next_generation pointer in case we find the last
    // node 
    while(*head &amp;&amp; pos--) head = &amp;(*head)-&gt;next_generation;
    return head;
}
</code></pre>
<p>With those functions, if you still want <code>insert_start</code> and <code>insert_end</code>, they just become special cases of using <code>insert_at</code>:</p>
<pre class=""lang-c prettyprint-override""><code>void insert_start(person **head, int age) {
    insert_at(head, age);
}

void insert_end(person **head, int age) {
    insert_at(get_pos(head, -1), age);
}
</code></pre>
<p><a href=""https://godbolt.org/z/dcTMYez9P"" rel=""nofollow noreferrer"">Demo</a></p>
","1","Answer"
"77878072","77877970","<p>the problem come from this line:</p>
<pre><code>if(input % counter == 0)
</code></pre>
<p>if input = 31 and counter &gt;= 32 =&gt; input % counter always not equal 0. The counter increase until it gets overflow and flipped to the minimum number. For instance:</p>
<pre><code>int a = int.MaxValue;
int b = 1;
int c = a + b; // c will be -2147483648
</code></pre>
","0","Answer"
"77878114","77877970","<p>The main problem is due to numeric overflow. In particular, your code doesn't have an appropriate exit condition, such as checking if <code>counter &gt; input</code>, in your loop code of</p>
<pre class=""lang-cs prettyprint-override""><code>    for(int counter = 1; input &gt;= 1; )
    {
        if(input % counter == 0)
        {
            factors.Add(counter);
            input = input / counter;
            counter++;
        }
        else
        {
            counter++;
        }
        
    }
</code></pre>
<p>For positive counter values where <code>input % counter == 0</code> is true, then <code>counter</code> is less than or equal to <code>input</code>. Thus, the line of code <code>input = input / counter;</code> will have <code>input</code> still be a positive integer, so the <code>for</code> loop check of <code>input &gt;= 1</code> will always succeed. This means, since <code>counter</code> is a signed 32-bit integer, it'll continue increasing until it reaches <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.int32.maxvalue?view=net-8.0"" rel=""nofollow noreferrer"">Int32.MaxValue</a> = 2147483647, i.e., 2^31 - 1. It then overflows with the high bit set to become the smallest negative integer value which is <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.int32.minvalue?view=net-8.0"" rel=""nofollow noreferrer"">Int32.MinValue</a> = -2147483648, i.e., -2^31. After that, it'll continue increasing until it gets to the negative of the <code>input</code> value, in which case the line <code>factors.Add(counter);</code> will add this negative value, and <code>input = input / counter;</code> will cause <code>input</code> to become -1, thus finally causing the loop to terminate.</p>
<p>Thus, with your example of 90, the positive factors of 1, 2, 3, 5 multiply to 30, leaving a factor of 90 / 30 = 3 as the <code>input</code> value, which is why the final entry is -3. Similarly, with 31, there's just the factor of 31, so <code>input</code> becomes 1, resulting in a final list value of -1. Finally, with 500, the factors of 1, 2, 5, 10 multiply to 100. Thus, there's a remaining factor of 5, and so a final entry of -5 is in your list.</p>
<p>A relatively simple fix is changing the <code>for</code> loop condition check of <code>input &gt;= 1</code> to <code>counter &lt;= input</code> instead. Also, although your code is not complete, as you state, one small suggestion is that since the <code>for</code> loop always increments <code>counter</code>, instead of doing that in two separate code lines as you do now, you can remove those lines and add that increment as the increment/decrement part of the <code>for</code> loop, e.g., have that line instead be</p>
<pre class=""lang-cs prettyprint-override""><code>    for(int counter = 1; counter &lt;= input; counter++)
</code></pre>
<hr />
<p>Regarding your stated goal of finding and reporting on the prime factors, in addition to what I suggest above, there's a relatively simple set of changes you can make to your loop to accomplish this. In particular, just start with <code>counter</code> at 2 (since 1 is not a prime) and insert this line</p>
<pre class=""lang-cs prettyprint-override""><code>            while (input % counter == 0)
</code></pre>
<p>above this line</p>
<pre class=""lang-cs prettyprint-override""><code>                 input = input / counter;
</code></pre>
<p>This works because the first time the <code>if</code> condition works, <code>counter</code> will be the smallest prime factor of <code>input</code>. Then the <code>while</code> loop will remove all instances of that prime factor. Thus, each next value of <code>counter</code> which is a factor can't be composite since each of the <code>counter</code> prime factors would have been removed earlier. Thus, the code will only be finding and adding prime factors to the <code>factors</code> list.</p>
<p>Below is some sample code</p>
<pre class=""lang-cs prettyprint-override""><code>        static void PrimeFactors(int userInput)
        {
            // create a variable which is a new version of userInput that can be manipulated by the method
            int input = userInput;
           
            // declare a new list which will contain all of the factors of the user input. 
            var factors = new List&lt;int&gt;();

            // While the counter is less than equal to the input, if input mod counter is equal to 0,
            // add counter to factor list and then, as long as input mod counter is 0,
            // set input value to input / counter.
            
            for(int counter = 2; counter &lt;= input; counter++)
            {
                if(input % counter == 0)
                {
                    factors.Add(counter);
                    while (input % counter == 0)
                        input = input / counter;
                }
            }
            
            // display the prime factors 

            Console.Write(&quot;Prime factors of {0}: &quot;, userInput);
            foreach (int factor in factors)
            {
                Console.Write(&quot;{0}  &quot;, factor);
            }
            Console.WriteLine();
        }

        static void Main(string[] args)
        {
            int[] testUserInput = {90, 31, 500};
            for (int i = 0; i &lt; testUserInput.Length; i++)
            {
                PrimeFactors(testUserInput[i]);
            }
        }
</code></pre>
<p>which produces the output of</p>
<pre class=""lang-none prettyprint-override""><code>Prime factors of 90: 2  3  5
Prime factors of 31: 31
Prime factors of 500: 2  5
</code></pre>
","2","Answer"
"77878721","77877970","<p>Please, note that largest possible prime for <code>userInput</code> factor is <code>Sqrt(userInput)</code>:</p>
<pre><code>userInput = p * p
</code></pre>
<p>Knowing this fact we can implement</p>
<pre><code>using System.Collections.Generic;

...

private static IEnumerable&lt;int&gt; DistinctPrimeFactors(int value) {
  if (value &lt;= 1)
    yield break;

  // Special case for even numbers
  if (value % 2 == 0) {
    yield return 2; 

    while (value % 2 == 0)
      value /= 2;
  }

  int n = (int) (Math.Sqrt(value) + 0.5);

  for (int divisor = 3; divisor &lt;= n; divisor += 2)   
    if (value % divisor == 0) {
      yield return divisor;

      do
        value /= divisor;
      while (value % divisor == 0);

      n = (int) (Math.Sqrt(value) + 0.5); 
    }

  if (value &gt; 1) 
    yield return value;
}
</code></pre>
<p>Then you can <code>Join</code> the prime factors:</p>
<pre><code>Console.Write(string.Join(&quot; &quot;, DistinctPrimeFactors(500)));
</code></pre>
<p>Output: (<code>500 == 2 * 2 * 5 * 5 * 5</code>)</p>
<pre><code>2 5
</code></pre>
<p><a href=""https://dotnetfiddle.net/ZjxOI4"" rel=""nofollow noreferrer"">Fiddle</a></p>
","0","Answer"
"77879141","77878928","<p>Looks like you have a problem with parse a string into the <code>Customer</code> object. So you can use <strong>regexp</strong> e.g. Or you can just split the string into a parts with comma separates.</p>
<pre class=""lang-java prettyprint-override""><code>public static List&lt;Customer&gt; parseCustomers(List&lt;String&gt; customerString) {
    return customerString.stream()
            .map(str -&gt; {
                String[] parts = str.split(&quot;,&quot;);
                return new Customer(parts[0], parts[1], parts[2], parts[3]);
            })
            .collect(Collectors.toList());
}
</code></pre>
<p><em><strong>P.S.</strong> In this case, neither <code>firstName</code> not <code>lastName</code> nor <code>email</code> nor <code>amount</code> are allowed to contain <code>,</code> in it.</em></p>
","2","Answer"
"77879227","77878928","<p>A possible strategy would be to parse your string in a secondary constructor of your record, e.g. like this:</p>
<pre><code>public void method(List&lt;String&gt; customerString) {
   List&lt;Customer&gt; customers = customerString.stream()
     .map(t -&gt; new Customer())
     .toList();
   }

 record Customer(String firstName, String lastName, String email, String amount) {
    public Customer(String customerData) {
       String firstName = &quot;&quot; // Extract name from customerData
       String lastName = &quot;&quot;
       String email = &quot;&quot;
       String amount = &quot;&quot;
       Customer(firstName, lastName, email, amount)
   }
}
</code></pre>
<p>This keeps &quot;method&quot; readable and you can test your string parsing logic separately.</p>
","1","Answer"
"77879243","77874837","<p>There is not enough info in question to help you for sure.</p>
<p>For example, there is no content of existing ProductID.csv ( as you use <code>Append to CSV file</code> and not <code>Create ...</code>), and there is no initial value of ${ProductID} variable, nor the test report is provided</p>
<p>But there is my assumptions about your case:</p>
<ol>
<li>Due to the screen, your Excel file actually has an empty value for the top cell.
So, the reader data returned by <code>Read CSV ...</code> should looks like:
<code>[[], ['A1'], ['B1'], ['C1'], ['D1'], ['E1']]</code>.</li>
</ol>
<p>So, the first iteration of your for-loop takes <code>[]</code> as value for ${element} variable. So, it doesn't have any element, so call to <code>${element}[0]</code> raises the exception.</p>
<ol start=""2"">
<li>It could be one of two cases:
The file <code>ProductID.csv</code> already exists, and it has an empty line (newline character \r or \n or both). As you use <code>Append to CSV file,</code> the new values are appended AFTER the existing content of the file that contains a new line. And the empty line is expectedly read as empty list <code>[]</code></li>
</ol>
<p>Or the initial data being written into the CSV-file has an empty list as the first item.</p>
","0","Answer"
"77881572","77874837","<p>Working with below code.</p>
<pre><code>${ProductID}=    Read Csv File To List    ProductID.csv
${products}=    Set Variable    ${ProductID[0]}
FOR    ${element}    IN    @{products}
Log    ${element}
</code></pre>
","2","Answer"
"77881954","77881536","<p>Make a 2-dimensional list. Each nested list consists of strings that start with the same letter.</p>
<p>Then you can shuffle the top-level list to get a random order of starting letters, and select a random element from each sublist.</p>
<pre><code>letters = [[&quot;A&quot;, &quot;AAA&quot;], [&quot;B&quot;, &quot;BBB&quot;], [&quot;C&quot;, &quot;CCC&quot;], [&quot;D&quot;, &quot;DDD&quot;], [&quot;E&quot;, &quot;EEE&quot;]]
last_letter = None
result = []
for i in range(14):
    if i % len(letters) == 0:
        while True:
            # Reshuffle letters, making sure the first letter isn't the same as the last letter we used
            random.shuffle(letters)
            if letters[0][0] != last_letter:
                break
    letter = random.choice(letters[i%len(letters)])
    last_letter = letter[0]
    result.append(letter)

print(result)
</code></pre>
","3","Answer"
"77881958","77881536","<p>Choose the strings one by one, and check each time if the first letter is different from the first letter of the last chosen string - if it isn't, just keep on trying other random choices.</p>
<pre><code>import random

letters = [&quot;A&quot;, &quot;AAA&quot;, &quot;B&quot;, &quot;BBB&quot;, &quot;C&quot;, &quot;CCC&quot;, &quot;D&quot;, &quot;DDD&quot;, &quot;E&quot;, &quot;EEE&quot;]                 

expected_length = 14
out = []
for _ in range(expected_length):
    while True:
        new = random.choice(letters)
        if not out or new[0] != out[-1][0]:
            out.append(new)
            break
print(out)
#  ['C', 'AAA', 'EEE', 'D', 'CCC', 'D', 'AAA', 'DDD', 'C', 'E', 'A', 'BBB', 'EEE', 'AAA']
</code></pre>
","-1","Answer"
"77882186","77880486","<p>This is a very interesting question!</p>
<p>Prolog models lists as binary expressions, where the first element is joined with the rest of the list via <code>[|]</code> 1-to-rest concatenation operator.</p>
<p>Empty list is a literal.</p>
<p>Non-empty list by definition ends with concatenation with an empty list literal.</p>
<p>Consider this query:</p>
<pre><code>EmptyList = [],
SingleElementList = [e],
TwoElementList = [a, b],
EmptyList =.. EmptyListStructure,
SingleElementList =.. SingleElementListStructure,
TwoElementList =.. TwoElementListStructure.
</code></pre>
<p>Prolog responds:</p>
<pre><code>EmptyList = [],
EmptyListStructure = [[]],
SingleElementList = [e],
SingleElementListStructure = ['[|]', e, []],
TwoElementList = [a, b],
TwoElementListStructure = ['[|]', a, [b]]
</code></pre>
<p>Operator '[|]' is not commutative, not associative and not idempotent. So expression <code>[[a, b, c | []] | []]</code> that you mentioned is <code>[[a,b,c]]</code> rather than <code>[a,b,c]</code>.</p>
<p>At least SWI-prolog actually allows you to use <code>'[|]'</code> operator directly,
so you can construct a two element list as</p>
<pre><code>TwoElementList = '[|]'(a, '[|]'(b, [])).
</code></pre>
<p>and result will be indistinguishable from <code>[a, b]</code>, because this is what it really is.</p>
<p>I know this is not immediately intuitive, but at least it's self-consistent. Hope this helps.</p>
","0","Answer"
"77882481","77882157","<p>Note that using <code>np.where</code> with broadcasted <code>==</code> is very inefficient. Consider using <code>searchsorted</code>:</p>
<pre><code>def match(arr, vals):
    k = arr.shape[-1]
    def fn(x):
        x, y = x[:k], x[k:]
        idx = x.argsort()
        return idx[np.searchsorted(x[idx], y)]
    return np.apply_along_axis(fn, len(arr.shape) - 1, np.c_[arr,vals])

match(np.array(input_arr), np.array(values))
array([[[5, 2],
        [0, 1]],

       [[1, 0],
        [5, 5]]], dtype=int64)
</code></pre>
<hr />
<p>Note that you could use <code>lambda</code> function as below:</p>
<pre><code>def match(arr, vals):
    k = arr.shape[-1]
    fn = lambda x : (i1 := x[:k].argsort())[np.searchsorted(x[:k][i1], x[k:])]
    return np.apply_along_axis(fn, len(arr.shape) - 1, np.c_[arr,vals])

match(np.array(input_arr), np.array(values))
array([[[5, 2],
        [0, 1]],

       [[1, 0],
        [5, 5]]], dtype=int64)
</code></pre>
","0","Answer"
"77882599","77882157","<p>I think your idea with using the flattened index was right. Here is what that would look like:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

input = np.array([[[[ 0.31, 1.56, 1.58, 0.16, 0.22, 0.54, 0.98, 0.35],
                    [ 0.77, 2.62, 0.44, 0.08, 0.76, 0.87, 0.87, 0.51]],
                   [[ 1.14, 0.48, 1.08, 0.93, 0.47, 0.13, 0.75, 0.19 ],
                    [ 1.15, 0.17, 2.32, 0.46, 0.30, 2.60, 0.79, 1.07 ]]]])

values = np.array([[[[ 0.54, 1.58 ]],
                    [[ 0.77, 0.88 ]]],
                   [[[ 0.48, 1.09 ]],
                    [[ 2.60, 2.33 ]]]])

sort_idx = np.argsort(input.flat)
output_flat = sort_idx[np.searchsorted(input.flat, values.flat, sorter=sort_idx)]
output = np.unravel_index(output_flat.reshape(values.shape), input.shape)[-1]
print(output)
</code></pre>
<p>Which prints:</p>
<pre><code>[[[[5 2]]

  [[0 3]]]


 [[[1 0]]

  [[5 5]]]]
</code></pre>
<p>(please check your reference output it does not seem right to me, especially there is the question, what should happen I the value is not in the index)</p>
<p>The key missing part was the <code>np.unravel_index()</code> and reshaping to the <code>values.shape</code>.</p>
<p>I hope this helps!</p>
","0","Answer"
"77883272","77880486","<p>Take a step back; <code>[]</code> makes a list, <code>[[]]</code> makes a list inside a list.</p>
<pre><code>?- write_canonical([a,b,c|[]]).
.(a,.(b,.(c,[]))).

?- write_canonical([[a,b,c|[]]|[]]).
.(.(a,.(b,.(c,[]))),[]).
</code></pre>
<p>They can't <code>=</code> each other because they are different structure/shapes. That's it, really.</p>
<hr />
<blockquote>
<p>I am confused about what the head of [a, b, c | []] is?</p>
</blockquote>
<p>The head of a list is the first item, that's a list of three items and the first one is <code>a</code>:</p>
<pre><code>?- [Head|Tail] = [a,b,c|[]].
Head = a,
Tail = [b, c].
</code></pre>
<blockquote>
<p>why is it not true that: [a, b, c | []] = [[a, b, c | []] | []]]</p>
</blockquote>
<p>As Evgeny answered, <code>[[a, b, c | []] | []]</code> is a one-item list with a three-item list inside: <code>[ List | []]</code>, which is also known as a nested list (a list inside a list).</p>
<blockquote>
<p>So I see a comma as: combine all the elements via the | operator, and add an empty list at the end. &quot;a, b, c&quot; (the head of [a, b, c | []]) would then become [a, b, c | []] again and so on.</p>
</blockquote>
<p>I see a [] as making a list, comma to separate the items in the list, pipe to chain another list on at the end. Put an empty list on the end to indicate nothing else the end, but there's no need to write that because just <code>[a,b,c]</code> is clear enough for that.</p>
<hr />
<p>Edit to reply to comments:</p>
<blockquote>
<p>1: Sometimes the comma operator adds an empty list to the end, sometimes it doesn’t.</p>
</blockquote>
<blockquote>
<p>I just took the last comma and added an empty list together with a pipe</p>
</blockquote>
<p>I don't understand this focus on the comma; you added a pipe and an empty list - and you wrapped the whole thing in another layer of list. You're writing <code>[[[[[[list inside list]]]]]]]]</code> but talking as if you're writing <code>[] [] [] [] [] list next to list</code>.</p>
<p>You aren't chaining another empty list onto the end like <code>a b c -&gt; a b c [] -&gt; a b c [] []</code>. Instead you are <code>a b c -&gt; (a b c []) -&gt; ((a b c []) [])</code> which is different.</p>
<p><code>[a,b,c]</code> is a list. Then <code>[a,b,c|Rest]</code> is a list with an unground tail (&quot;<em>a list must terminate with an empty list</em>&quot; is false, this list doesn't have a fixed length). Then <code>[a,b,c|Rest], Rest = [1,2,3]</code> chains the numbers to the end of the letters. Then <code>[a,b,c|Rest], Rest=[]</code> chains empty list on, and that is the way Prolog knows a list has ended, so it's now a list of fixed length 3. It's valid to write <code>[a,b,c|[]]</code> if you want to, but I don't know why you would want to since it's the same as <code>[a,b,c]</code> and that's shorter and easier to write.</p>
<p>It's not valid to write <code>[a,b,c|[]|[]]</code> and you're right <code>[a|b]</code> is not a valid list. I still see the outer <code>[   ]</code> as the list maker more than your focus on the comma, is why I said that.</p>
<blockquote>
<p>When is the empty list added and when not?</p>
</blockquote>
<p>When you want it. It would be tedious to write it out all the time, and you don't have to.</p>
<blockquote>
<p>For my first question, it may be helpful to mention that my question comes from the fact that we can replace comma by a pipe</p>
</blockquote>
<p>No?</p>
<blockquote>
<p>but SOMETIMES we add an empty list which was hidden.</p>
</blockquote>
<p>If you want. It's the end of a fixed-length list. It needs to be there behind the scenes, you don't always have to call attention to it. <code>[a,b,c]</code> will have it. And it's not the same as a list with an empty list as the last item so casually speaking it &quot;ends with an empty list&quot; which would be <code>[a,b,c,[]]</code>.</p>
","3","Answer"
"77885549","77875796","<p>sorry, I have not checked more, but:</p>
<pre><code>           while(find!=NULL){
             find=find-&gt;next_generation;
           }
</code></pre>
<p>if you make a <code>while</code> loop while <code>find != NULL</code>, what is clear is that, when you get out of the loop is because <code>find == NULL</code>.   If so, how it is possible that you use the <code>-&gt;</code> operator on <code>find</code>???</p>
<pre><code>           find-&gt;next_generation=next_gen;
</code></pre>
<p>as a remainder, always put a comment after such a <code>while</code>, remembering you that after the closing brace of the <code>while</code> statement body, the opposite of the boolean expression holds, as in:</p>
<pre><code>           while(find!=NULL){
             find=find-&gt;next_generation;
           }
           /* find == NULL */
</code></pre>
","0","Answer"
"77886938","77885853","<p>Since stability is a requirement (order of list has to be preserved), the use of list.stream().distinct() is not an option.</p>
<p>In case your <code>equals</code> method checks exactly for the three columns mentioned, you could do something like:</p>
<pre><code>ArrayList result = new ArrayList();
original.stream().forEach(i -&gt; if (!result.contains(i)) result.add(i));
</code></pre>
<p>If the equals method is not suitable, all the items in result list can by checked by comparing the three values.</p>
<pre><code>ArrayList result = new ArrayList();
original.stream().forEach(i -&gt; {
   for (YourClass j : result) {
      if (&lt;all three values are equal&gt;) return;
   }
   result.add(i);
});
</code></pre>
<p>Note: If the list is huge and computation time (this code is in O(n^2)) is a problem, you could use the three column values to create a new value and put it to a HashSet. You would then call the contains on the HashSet and add the value i to the resultSet and the HashSet.</p>
","1","Answer"
"77887156","77885853","<ol>
<li>Create a [Java] <code>record</code> that contains a <code>LocalDateTime</code>, a <code>BigDecimal</code> and a <code>String</code>.</li>
<li>Override method <code>equals</code> in the <code>record</code>.</li>
<li>Override method <code>hashCode</code> in the <code>record</code>.</li>
<li>Create a <code>List</code> of the <code>record</code>s.</li>
<li>Stream the <code>List</code> and collect to a <code>LinkedHashSet</code> as it will remove duplicates (determined according to the overridden <code>equals</code> and <code>hashCode</code> methods) and maintain order of addition of <code>record</code>s.</li>
</ol>
<pre class=""lang-java prettyprint-override""><code>import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.stream.Collectors;

public class MyClass {
    public static void main(String args[]) {
        List&lt;TsValCod&gt; list = new ArrayList&lt;&gt;();
        list.add(new TsValCod(LocalDateTime.of(2024, 1, 10, 0, 20, 0),  new BigDecimal(105.50), &quot;I&quot;));
        list.add(new TsValCod(LocalDateTime.of(2024, 1, 15, 2, 30, 0), new BigDecimal(105.50), &quot;A&quot;));
        list.add(new TsValCod(LocalDateTime.of(2024, 1, 16, 10, 45, 0), new BigDecimal(110.50), &quot;A&quot;));
        list.add(new TsValCod(LocalDateTime.of(2024, 2, 1, 12, 20, 0), new BigDecimal(111.25), &quot;I&quot;));
        list.add(new TsValCod(LocalDateTime.of(2024, 2, 4, 4, 35, 0), new BigDecimal(111.25), &quot;A&quot;));
        list.add(new TsValCod(LocalDateTime.of(2024, 2, 25, 2, 15, 0), new BigDecimal(112.25), &quot;A&quot;));
        Object temp = list.stream()
                          .collect(Collectors.toCollection(() -&gt; new LinkedHashSet()));
        Collection&lt;?&gt; set = (Collection&lt;?&gt;) temp;
        set.stream()
           .forEach(System.out::println);
    }
}

record TsValCod(LocalDateTime ts, BigDecimal val, String code) {
    public boolean equals(Object obj) {
        boolean equal = this == obj;
        if (!equal) {
            if (obj != null  &amp;&amp;  getClass().equals(obj.getClass())) {
                TsValCod other = (TsValCod) obj;
                LocalDateTime meTs = ts();
                LocalDateTime otherTs = other.ts();
                BigDecimal meVal = val();
                BigDecimal otherVal = other.val();
                if (meTs == null) {
                    if (otherTs == null) {
                        equal = true;
                    }
                    else {
                        equal = false;
                    }
                }
                else {
                    if (otherTs == null) {
                        equal = false;
                    }
                    else {
                        int meYear = meTs.getYear();
                        Month meMonth = meTs.getMonth();
                        int otherYear = otherTs.getYear();
                        Month otherMonth = otherTs.getMonth();
                        equal = meYear == otherYear  &amp;&amp;  meMonth.equals(otherMonth);
                    }
                }
                if (equal) {
                    if (meVal == null) {
                        if (otherVal == null) {
                            equal = true;
                        }
                        else {
                            equal = false;
                        }
                    }
                    else {
                        if (otherVal == null) {
                            equal = false;
                        }
                        else {
                            equal = meVal.equals(otherVal);
                        }
                    }
                }
            }
        }
        return equal;
    }

    @Override
    public int hashCode() {
        int year = ts.getYear();
        int month = ts.getMonthValue();
        YearMonth ym = YearMonth.of(year, month);
        return ym.hashCode() + val.hashCode();
    }
}
</code></pre>
<p>Output when running above code:<br />
(Override <code>toString</code> method of <code>TsValCod</code> to customize the output.)</p>
<pre class=""lang-none prettyprint-override""><code>TsValCod[ts=2024-01-10T00:20, val=105.5, code=I]
TsValCod[ts=2024-01-16T10:45, val=110.5, code=A]
TsValCod[ts=2024-02-01T12:20, val=111.25, code=I]
TsValCod[ts=2024-02-25T02:15, val=112.25, code=A]
</code></pre>
","0","Answer"
"77887394","77885853","<p>This could be done using traditional for loop, or fancy stream with functional style.</p>
<p>But the first thing is how do we define the key, which can be as simple as</p>
<p><code>record ItemKey(int year, Month month, BigDecimal value) {}</code>
using record.</p>
<h3>For loop approach</h3>
<p>This is quite straight forward, we use a Set to keep track <code>ItemKey</code><br />
If the <code>ItemKey</code> is visited continue to next <code>Item</code>
otherwise add the <code>ItemKey</code> to the Set, and keep the <code>Item</code></p>
<h3>Functional style:</h3>
<ol>
<li>Group the Item with same ItemKey to a Map&lt;ItemKey, List</li>
<li>In each Entry&lt;ItemKey, List, we get the first Item</li>
</ol>
<p>For this problem, there is no absolute answer on which approach is better, I would recommend choosing the way you are more comfortable with. For doing simple filtering, mapping, functional approach is handy and less error prone. But for more complex problem, it is usually easier to find a solution using loop.</p>
<pre class=""lang-java prettyprint-override""><code>import static java.util.stream.Collectors.collectingAndThen;
import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.toList;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;
import java.util.function.Function;

public class GroupFindFirst {
    // define how your key
    record ItemKey(int year, Month month, BigDecimal value) {
    }

    public static void main(String[] args) {
        List&lt;Item&gt; items = List.of(
                new Item(LocalDateTime.parse(&quot;2024-01-10T00:20:00&quot;), new BigDecimal(&quot;105.50&quot;), &quot;I&quot;),
                new Item(LocalDateTime.parse(&quot;2024-01-15T02:30:00&quot;), new BigDecimal(&quot;105.50&quot;), &quot;A&quot;),
                new Item(LocalDateTime.parse(&quot;2024-01-16T10:45:00&quot;), new BigDecimal(&quot;110.50&quot;), &quot;A&quot;),
                new Item(LocalDateTime.parse(&quot;2024-02-01T12:20:00&quot;), new BigDecimal(&quot;111.25&quot;), &quot;I&quot;),
                new Item(LocalDateTime.parse(&quot;2024-02-04T04:35:00&quot;), new BigDecimal(&quot;111.25&quot;), &quot;A&quot;),
                new Item(LocalDateTime.parse(&quot;2024-02-25T02:15:00&quot;), new BigDecimal(&quot;112.25&quot;), &quot;A&quot;)
        );
        System.out.println(&quot;filter using for loop&quot;);
        filterUsingForLoop(items).forEach(System.out::println);
        System.out.println(&quot;filter using stream&quot;);
        filterUsingStream(items).forEach(System.out::println);
    }

    private static List&lt;Item&gt; filterUsingForLoop(List&lt;Item&gt; items) {
        Set&lt;ItemKey&gt; itemKeys = new HashSet&lt;&gt;();
        List&lt;Item&gt; filtered = new ArrayList&lt;&gt;();
        for (Item item : items) {
            // add return true when ItemKey not exist before
            if (itemKeys.add(new ItemKey(item.timestamp.getYear(), item.timestamp.getMonth(), item.value))) {
                filtered.add(item);
            }
        }
        return filtered;
    }

    private static List&lt;Item&gt; filterUsingStream(List&lt;Item&gt; items) {
        return items.stream().collect(collectingAndThen(
                groupingBy(
                        item -&gt; new ItemKey(item.timestamp.getYear(), item.timestamp.getMonth(), item.value),
                        LinkedHashMap::new, // to preserve order
                        mapping(Function.identity(), toList())),
                itemKeyToListMap -&gt; itemKeyToListMap.values().stream().map(list -&gt; list.get(0)).toList()
        ));
    }

    public static class Item {
        public Item(LocalDateTime timestamp, BigDecimal value, String code) {
            this.timestamp = timestamp;
            this.value = value;
            this.code = code;
        }

        @Override
        public String toString() {
            return &quot;Item{&quot; +
                    &quot;timestamp=&quot; + timestamp +
                    &quot;, value=&quot; + value +
                    &quot;, code='&quot; + code + '\'' +
                    '}';
        }

        private LocalDateTime timestamp;
        private BigDecimal value;
        private String code;
    }

}
</code></pre>
","0","Answer"
"77887557","77887533","<p>Use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.str.replace.html"" rel=""nofollow noreferrer""><code>str.replace</code></a> and optionally convert the strings to numbers with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""nofollow noreferrer""><code>to_numeric</code></a>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'col': [ '_1.0', '_2.0', '_3.0']})

df['start_lng'] = pd.to_numeric(df['start_lng'].str.replace('_', '-'))
</code></pre>
<p><em>If there can be invalid values in the column you can add <code>errors='coerce'</code> as parameter to <code>to_numeric</code> to ignore them and convert to <code>NaN</code>.</em></p>
<p>Output:</p>
<pre><code>   start_lng
0       -1.0
1       -2.0
2       -3.0
</code></pre>
","1","Answer"
"77887568","77887533","<p>You can use the <code>str.replace()</code> method to perform the replacement and then use <code>astype()</code> to change the data type.</p>
<pre><code># sample DataFrame with a &quot;start_lng&quot; column containing strings
data = {'start_lng': ['_1.0', '_2.0', '_3.0']}
Bike_share_data = pd.DataFrame(data)

# Replace underscores with minus signs &amp; convert the column to float
Bike_share_data[&quot;start_lng&quot;] = Bike_share_data[&quot;start_lng&quot;].str.replace('_', '-').astype(float)
</code></pre>
","2","Answer"
"77890145","77890108","<p>Your problem is that you are zeroing the correct answers each time you find a correct answer</p>
<pre><code>if (student_answers[i]==answers[i]):

    correct_answers = 0
</code></pre>
<p>You should also print the results after your for loop ends. Your indentation prints the result inside the loop, each time it finds a correct answer:</p>
<pre><code>answers = ['A', 'C', 'A', 'A', 'D', 'B', 'C', 'A', 'C',
           'B', 'A', 'D', 'C', 'A', 'D', 'C', 'B', 'B', 'D', 'A']


def main():

    # Open the student test scores for reading.

    with open(&quot;C:\\Users\mrsac\OneDrive\Desktop\CS 202 Files\Module 2\Module 2 Assignment Folder\studentanswers1.txt&quot;, 'r') as infile:
        student_answers = infile.readlines()

    correct_answers = 0

    for correct_answer, student_answer in zip(answers, student_answers):

        # Compare the answers and the student_answers for similar indexes characters
        if correct_answer in student_answer.upper():

            correct_answers += 1

    print('You answered ', correct_answers, 'questions correctly.')

    if correct_answers &gt;= 15:

        print('You passed the exam!')

    else:

        print('You did not pass the exam.')


main()
</code></pre>
","0","Answer"
"77890175","77890108","<p>Please see my answer with explanation as and where it is required.</p>
<pre><code>answers = ['A','C','A','A','D','B','C','A','C','B','A','D','C','A','D','C','B','B','D','A']

def main():

    #delclare variable 'correct_answer' with value 0
    correct_answer = 0
    
    infile = &quot;C:\\Users\mrsac\OneDrive\Desktop\CS 202 Files\Module 2\Module 2 Assignment Folder\studentanswers1.txt&quot;
    
    #by using 'with open' method you don't need to close the file again
    with open(infile, 'r') as fl:
        #create a list of all lines
        x = fl.readlines()
        
        for i in range(len(x)):
        
            #As each answer ends with a new line, add \n with after each answer
            if x[i] == f'{answers[i]}\n':
                correct_answer = correct_answer + 1
    
    #use return command as this is a function. 'print' is just to ensure the output
    if correct_answer &gt;= 15:
        return 'You passed the exam!'
    else:
        return 'You did not pass the exam.'
        
r = main()
print(r)
                
</code></pre>
","0","Answer"
"77890480","77890108","<p>When comparing two lists, the ideal function to use is the built-in <em>zip()</em></p>
<pre><code>answers = [
    &quot;A&quot;,
    &quot;C&quot;,
    &quot;A&quot;,
    &quot;A&quot;,
    &quot;D&quot;,
    &quot;B&quot;,
    &quot;C&quot;,
    &quot;A&quot;,
    &quot;C&quot;,
    &quot;B&quot;,
    &quot;A&quot;,
    &quot;D&quot;,
    &quot;C&quot;,
    &quot;A&quot;,
    &quot;D&quot;,
    &quot;C&quot;,
    &quot;B&quot;,
    &quot;B&quot;,
    &quot;D&quot;,
    &quot;A&quot;,
]

FILENAME = r&quot;C:\Users\mrsac\OneDrive\Desktop\CS 202 Files\Module 2\Module 2 Assignment Folder\studentanswers1.txt&quot;

with open(FILENAME) as data:
    if sum(a == b for a, b in zip(answers, map(str.rstrip, data))) &gt;= 15:
        print(&quot;You passed the exam&quot;)
    else:
        print(&quot;You did not pass the exam&quot;)
</code></pre>
<p><strong>Note:</strong></p>
<p>The expression <em>a == b</em> in the generator equates (obviously) to either True or False. When either of these bool values are used in a numeric context they equate to 1 and 0 respectively</p>
","0","Answer"
"77894080","77894071","<p>You have to set <code>unique_elements</code> to an empty set after each iteration of loop so do this</p>
<p>Also, <em>I think your expected output is not correct, Because length of first list of expected out is 10 but for second list it is 7. (only counting unique element).</em></p>
<pre class=""lang-py prettyprint-override""><code>
normalized_result_lists = [
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 1.0087281795511223,
    1.0112219451371571, 1.0187032418952617, 1.0224438902743143, 1.0286783042394014,
    1.0299251870324189, 2.0, 3.0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0013812154696133, 1.0013812154696133, 1.0055248618784531, 1.0055248618784531,
    1.0055248618784531, 1.0096685082872927, 1.0138121546961325, 1.0179558011049723,
    1.020718232044199, 1.0248618784530388, 1.031767955801105, 1.0414364640883977,
    1.0524861878453038, 1.0607734806629834, 1.0662983425414365]
]

trimmed_lists = []

for lst in normalized_result_lists:
    trimmed_list = []
    unique_elements = set() # For each iteration of outer loop setting unque element to empty set
    for elem in lst:
        trimmed_list.append(elem)
        unique_elements.add(elem)

        if len(unique_elements) == 10:
            break

    trimmed_lists.append(trimmed_list)

print(trimmed_lists)

</code></pre>
<p>Output</p>
<pre class=""lang-none prettyprint-override""><code>[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
1.0, 1.0, 1.0, 1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 
1.0087281795511223, 1.0112219451371571, 1.0187032418952617, 
1.0224438902743143, 1.0286783042394014, 1.0299251870324189], [1.0, 1.0,
 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
1.0013812154696133, 1.0013812154696133, 1.0055248618784531, 
1.0055248618784531, 1.0055248618784531, 1.0096685082872927, 
1.0138121546961325, 1.0179558011049723, 1.020718232044199, 
1.0248618784530388, 1.031767955801105, 1.0414364640883977]]
</code></pre>
","1","Answer"
"77894131","77894071","<p>use the following code:</p>
<pre><code>result = []
for sub_list in normalized_result_lists:
    sub_result = []
    count = 0
    for val in sub_list:
        count += val not in sub_result
        sub_result.append(val)
        if count == 10: break
    result.append(sub_result)


[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
  1.0012468827930174, 1.0024937655860349, 1.0049875311720697, 1.0087281795511223, 1.0112219451371571, 1.0187032418952617, 
  1.0224438902743143, 1.0286783042394014, 1.0299251870324189, 2.0], 
   [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0013812154696133, 1.0013812154696133, 1.0055248618784531, 1.0055248618784531, 1.0055248618784531, 1.0096685082872927, 
   1.0138121546961325, 1.0179558011049723, 1.020718232044199, 1.0248618784530388, 1.031767955801105, 1.0414364640883977, 1.0524861878453038]]
</code></pre>
<p>Note that if the data is sorted just like in your case, you could optimise further by just checking whether the current value is the same as the previous value. If not, increment count by 1. then break when count is 10</p>
<hr />
<p>Edit:</p>
<p>To match the expected results use:</p>
<pre><code>result = []
for sub_list in normalized_result_lists:
    sub_result = []
    count = 1
    for val in sub_list:
        if val == 1:
            sub_result.append(val)
        if val not in sub_result:
            sub_result.append(val)
            count += 1
        if count == 10: break
    result.append(sub_result)

results
</code></pre>
","1","Answer"
"77894706","77894461","<p>The main problem is that you try to append a single element and not a list to the existing list, as more easily seen after macroxpanding the macro:</p>
<pre><code>(macroexpand '(readextracttolist xx &quot;syminput_0.txt&quot; 0 usedmollist))
(PROGN
 (DEFPARAMETER XX (OPEN &quot;syminput_0.txt&quot;))
 (LOOP FOR LINE = (READ XX NIL :EOF)
       UNTIL (EQ LINE :EOF)
       DO (SETQ USEDMOLLIST (APPEND USEDMOLLIST (ELT LINE 0)))))
</code></pre>
<p>Furthermore, the macro can be made more readable by using <code>backquote</code>syntax, where only symbols prefixed by <code>,</code> are substitued.  <code>progn</code> and <code>defparameter</code> can also be replaced by a <code>let</code>:</p>
<pre><code>(defmacro readextracttolist (filevar filename nthmember listname)
  `(let ((,filevar (open ,filename)))
     (loop for line = (read ,filevar nil :eof)
       until (eq line :eof) do
       (print line)
       (setq ,listname (append ,listname (list (nth ,nthmember line)))))))
</code></pre>
<p>Also: A macro is probably not needed here, as a function could do the job (e.g by returning a list to be appended to the existing list).</p>
","1","Answer"
"77894804","77894705","<p>Based on the description and ignoring the seemingly flawed output you could do this:</p>
<pre><code>from collections import Counter

df = [
    [1, 2, 4, 5, 6, 2, 6, 7],
    [5, 6, 7, 22, 23, 34, 48],
    [3, 5, 6, 7, 45, 46, 48],
    [6, 7, 14, 29, 32, 6, 29],
    [6, 7, 13, 23, 33, 35, 7],
    [1, 6, 7, 8, 9, 10, 8],
    [0, 2, 5, 7, 19, 7, 5],
]

dups = list()
non_dups = list()

for e in df:
    _dups = list()
    _non_dups = list()
    s = set()

    for i, c in Counter(e).items():
        if c &gt; 1:
            if not i in s:
                _dups.append(i)
                s.add(i)
        else:
            _non_dups.append(i)

    if _dups and _non_dups:
        dups.append(_dups)
        non_dups.append(_non_dups)

print(f&quot;{dups=}&quot;)
print(f&quot;{non_dups=}&quot;)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>dups=[[2, 6], [6, 29], [7], [8], [5, 7]]
non_dups=[[1, 4, 5, 7], [7, 14, 32], [6, 13, 23, 33, 35], [1, 6, 7, 9, 10], [0, 2, 19]]
</code></pre>
","1","Answer"
"77894807","77894705","<p><strong>Here's one way you can do it.</strong></p>
<h2><strong>code:</strong></h2>
<pre class=""lang-py prettyprint-override""><code>df = [[1, 2, 4, 5, 6, 2, 6,7],
[5, 6, 7, 22, 23, 34, 48], 
[3, 5, 6, 7, 45, 46, 48],
[6, 7, 14, 29, 32, 6, 29],  
[6, 7, 13, 23, 33, 35, 7],  
[1, 6, 7, 8, 9, 10, 8],     
[0, 2, 5, 7, 19, 7, 5]]
dups=[]
non_dups=[]

#traverssing through the list of lists
for list in df:
    #if no duplicates then skip the row/list
    if len(set(list))==len(list):
        continue
    #temp_lists to add duplicates/non-duplicates as a list
    temp_dups=[]
    temp_non_dups=[]
    #traverssing through a row/a &quot;inner list&quot;
    for element in list:
        #if element not already in temp and it's count is &gt;1
        if (element not in temp_dups) and (list.count(element)&gt;1):
            temp_dups.append(element)
        #if element is not a duplicate and not already on the temp_non_dups
        elif (element not in temp_non_dups) and (element not in temp_dups):
            temp_non_dups.append(element)
    #appending temp lists to actual lists
    dups.append(temp_dups)
    non_dups.append(temp_non_dups)
            
print(dups,'\n\n\n',non_dups)
</code></pre>
<h2><strong>output:</strong></h2>
<pre><code>[[2, 6], [6, 29], [7], [8], [5, 7]] 


[[1, 4, 5, 7], [7, 14, 32], [6, 13, 23, 33, 35], [1, 6, 7, 9, 10], [0, 2, 19]]
</code></pre>
","0","Answer"
"77894869","77894705","<p><strong>Hi, I have a simple solution for your question</strong></p>
<pre><code>df = [
    [1, 2, 4, 5, 6, 2, 6, 7],
    [5, 6, 7, 22, 23, 34, 48],
    [3, 5, 6, 7, 45, 46, 48],
    [6, 7, 14, 29, 32, 6, 29],
    [6, 7, 13, 23, 33, 35, 7],
    [1, 6, 7, 8, 9, 10, 8],
    [0, 2, 5, 7, 19, 7, 5],
]

dup = []
no_dup = []

for sublist in df:
     one_count = [item for item in sublist if sublist.count(item) == 1]
     more_count = list(set([item for item in sublist if sublist.count(item) &gt;= 2]))
     if len(more_count) != 0:
          dup.append(more_count)
     if len(set(one_count)) != len(sublist):
          no_dup.append(one_count)

</code></pre>
<p><strong>Output</strong></p>
<pre><code>no_dup = [[1, 4, 5, 7], [7, 14, 32], [6, 13, 23, 33, 35], [1, 6, 7, 9, 10], [0, 2, 19]]
dup = [[2, 6], [29, 6], [7], [8], [5, 7]]
</code></pre>
","2","Answer"
"77894966","77894958","<p>Using <code>seq_len</code>.</p>
<pre><code>&gt; lapply(1:100, seq_len)
[[1]]
[1] 1

[[2]]
[1] 1 2

[[3]]
[1] 1 2 3

[[4]]
[1] 1 2 3 4

[[5]]
[1] 1 2 3 4 5

[[6]]
[1] 1 2 3 4 5 6

[[7]]
[1] 1 2 3 4 5 6 7

[[8]]
[1] 1 2 3 4 5 6 7 8

[[9]]
[1] 1 2 3 4 5 6 7 8 9

[[10]]
 [1]  1  2  3  4  5  6  7  8  9 10

...
</code></pre>
","1","Answer"
"77895016","77894958","<p>You can do the following:</p>
<pre><code>lapply(1:100, function(x) 1:x)
</code></pre>
<p>Or</p>
<pre><code>lapply(1:100, \(x) 1:x)
</code></pre>
<p>It will return</p>
<pre><code>[[1]]
[1] 1

[[2]]
[1] 1 2

[[3]]
[1] 1 2 3

[[4]]
[1] 1 2 3 4

[[5]]
[1] 1 2 3 4 5
Etc... 
</code></pre>
","0","Answer"
"77895387","77895327","<p>I think if you wanna calculate only k, simple to achieve that. Refer below</p>
<pre><code>class Solution:
    def removeDuplicates(self, nums:list) -&gt; int:
        uniq_list=list(set(nums))
        k=len(uniq_list)          
        return k
solu=Solution()
lis=[0,0,1,1,1,2,2,3,3,4]
print(solu.removeDuplicates(lis)) #output value 5
</code></pre>
","0","Answer"
"77896354","77894958","<p>Here is how it should look using <code>for</code> loop. However, the above solutions with <code>lapply</code> are more preferred in R.</p>
<pre><code>myList &lt;- list()
for(i in 1:100) {
  myList[[i]] &lt;- c(1:i)
}
</code></pre>
<p>Output:</p>
<pre><code>&gt; myList
[[1]]
[1] 1

[[2]]
[1] 1 2

[[3]]
[1] 1 2 3

[[4]]
[1] 1 2 3 4

[[5]]
[1] 1 2 3 4 5

...
</code></pre>
","0","Answer"
"77896701","77895327","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>class Solution:
    def removeDuplicates(self, nums: List[int]) -&gt; int:
        nums[:] = dict.fromkeys(nums)
        return len(nums)
</code></pre>
<p>The result on leetcode after submitting:</p>
<p><a href=""https://i.sstatic.net/dqurR.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/dqurR.png"" alt=""enter image description here"" /></a></p>
","1","Answer"
"77897538","77897529","<p><a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.capacity?view=net-8.0#remarks"" rel=""nofollow noreferrer"">The documentation</a> states:</p>
<blockquote>
<p><code>Capacity</code> is always greater than or equal to Count. If <code>Count</code> exceeds <code>Capacity</code> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>
</blockquote>
<p>For completeness, here is how it is <a href=""https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs,196"" rel=""nofollow noreferrer"">currently implemented</a> (but keep in mind this is an implementation detail). As you can see, the reallocation occurs if you try to add and <code>Count</code> equals <code>Capacity</code>.</p>
<p>If you already know how many items you're going to have in the list, set the list's capacity to that amount. Ideally, you'd even create the list with the right capacity from the start:</p>
<pre><code>var list = new List&lt;T&gt;(capacity);
</code></pre>
","1","Answer"
"77897545","77897529","<p>In C#, the <strong>List</strong> class increases its capacity dynamically as elements are added. The capacity doubling occurs when the <strong>101st</strong> item is added, <strong>not when the 100th</strong> item is reached.</p>
<p>So, if you know that your list will have up to 100 items and no more, you can set the capacity to 100 to prevent unnecessary capacity doubling.</p>
","0","Answer"
"77900047","77899957","<p>You could create a Class <code>Point</code> to act like this :</p>
<pre class=""lang-py prettyprint-override""><code>class Point3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        self.coord = [x, y, z]

    def __str__(self):
        return str(self.coord)

class Object:

    def __init__(self, x, y, z):
        self.position = Point3D(x, y, z)


object = Object(5, 3, 1)

print(object.position)  # Should print out 5, 3, 1
print(object.position.y)  # Should print out 3


</code></pre>
","0","Answer"
"77900048","77899957","<p>Start with creating a Position class with the behavior you want:</p>
<pre><code>class Position:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
</code></pre>
<p>This will let you access x, y and z attributes of the object. In order to define how an object is printed, you need to define its <code>__repr__</code> - method that returns a string representation of the object.</p>
<pre><code>    def __repr__(self):
        return &quot;, &quot;.join(str(i) for i in [self.x, self.y, self.z])
</code></pre>
<p>You can test the object:</p>
<pre><code>position = Position(5, 3, 1)
print(position)   # 5, 3, 1
print(position.x) # 5
</code></pre>
<p>You can see that it works like you want <code>object.position</code> to work, so now just assign it to it.</p>
<pre><code>class Object:
    def __init__(self, x, y, z):
        self.position = Position(x, y, z)
o = Object(5, 3, 1)
</code></pre>
<p>(Alternatively, you could make a constructor that accepts position object directly:</p>
<pre><code>class Object:
    def __init__(self, position):
        self.position = position
o = Object(position)
</code></pre>
<p>Both of those will end up with the same behaviour:</p>
<pre><code>print(o.position) #Should print out 5, 3, 1
print(o.position.y) #Should print out 3
</code></pre>
","2","Answer"
"77900061","77899957","<p>As someone suggested in the comments you can do it creating another class called Position. I added the <code>__str__</code> so when you print <code>object.position</code> is gonna print the actual values and not the class object. Remember that you need the double underscore for <code>__init__</code> and similar.</p>
<pre><code>class Object:

  def __init__(self, x, y, z):
    self.position = Position(x, y, z)

  #Functions

class Position:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return f&quot;{self.x}, {self.y}, {self.z}&quot;
   
obj = Object(5, 3, 1)

print(obj.position) #Should print out 5, 3, 1
print(obj.position.y) #Should print out 3
</code></pre>
<p>As the comment below pointed out one could nest the Position class inside if it is only needed in the class <code>Object</code> writing something like</p>
<pre><code>class Object:

    class Position:
        def __init__(self, x, y, z):
            self.x = x
            self.y = y
            self.z = z
    
        def __str__(self):
            return f&quot;{self.x}, {self.y}, {self.z}&quot;

    def __init__(self, x, y, z):
        self.position = self.Position(x, y, z)

  #Functions
   
obj = Object(5, 3, 1)

print(obj.position) #Should print out 5, 3, 1
print(obj.position.y) #Should print out 3
</code></pre>
<p>and be careful with naming, <code>object</code> and other existing keywords should be avoided</p>
","3","Answer"
"77900912","77894461","<p>In complement to the other answer, here are some things you could improve in your code:</p>
<ul>
<li>you never <code>close</code> the file being open, which makes your process keep system resources until it terminates; if you only open and never close your streams you'll eventually hit limits.</li>
<li>your code makes heavy use of side-effects, which can be fine if run in a script but this is bad style in general. You should try to write mostly functional code to help you manage side-effects only at the points where this is needed.</li>
<li>you call <code>append</code> to add elements at the end of the list, which is linear in time, inside a loop which is also linear in time, ending up with a quadratic algorithm. This will impact performance at some point if your lists are big. Prefer putting element in front of the list (constant time), only to reverse it at the end, to keep a linear time.</li>
</ul>
<p>You could for example write auxiliary functions. First let's have a package definition for your code:</p>
<pre><code>(defpackage :stack-overflow (:use :cl))
(in-package :stack-overflow)
</code></pre>
<p>Here <code>map-forms</code> calls <code>read</code>, apply a function and collect them into a list.</p>
<pre><code>(defun map-forms (file function)
  (with-open-file (stream file)
    (loop 
      :for line = (handler-case (read stream)
                   (end-of-file () (loop-finish)))
      :collect (funcall function line))))
</code></pre>
<p>Then you can use this function to collect all the <em>nth</em> items from forms being read.</p>
<pre><code>(defun extract-nth (file n)
  (map-forms file (lambda (f) (nth n f))))
</code></pre>
<p>Then, maybe you can add a macro if you need it, but even there I think being explicit is better:</p>
<pre><code>(defparameter *second-items*
  (extract-nth &quot;/tmp/first.txt&quot; 1))
</code></pre>
<p>Then:</p>
<pre><code>(setf *second-items* 
  (append *second-items*
          (extract-nth &quot;/tmp/second.txt&quot; 1)))
</code></pre>
","2","Answer"
"77901364","77901197","<p>The check if k[0]!= k and k[-1] != k: will always be false.
The return []inside the loop will terminate on the first iteration.</p>
<pre><code>def middle(k):
    new_number = []
    n = len(k)
    
    if n &lt;= 2:
        # 2 or fewer elements will have no middle
        return new_number

    for i in range(1, n-1):
        new_number.append(k[i])

    return new_number

numbers = [0, 1, 2, 3, 4]
print(middle(numbers))
</code></pre>
","0","Answer"
"77901374","77901275","<p>You are appending the original value. It needs to be stored in some variable or appended while converting to int.</p>
<p>Here is one approach: using a variable</p>
<pre><code>lista = [2,3,4,'5','6','7']
lista_2 = []
for i in lista:
    converted = int(i)
    lista_2.append(converted)
print(lista_2)
</code></pre>
<p>Here is another approach: converting while appending</p>
<pre><code>lista = [2,3,4,'5','6','7']
lista_2 = []
for i in lista:
    lista_2.append(int(i))
print(lista_2)
</code></pre>
<p>There are also other approaches like list comprehension:</p>
<pre><code>lista = [2,3,4,'5','6','7']
lista_2 = [int(item) for item in lista]
print(lista_2)
</code></pre>
<p>or using map and passing int as a function to it:</p>
<pre><code>lista = [2,3,4,'5','6','7']
lista_2 = list(map(int,lista))
print(lista_2)
</code></pre>
","4","Answer"
"77901381","77901275","<p><em>int(n)</em> does not modify <em>n</em> - it returns an integer after converting <em>n</em> in accordance with certain rules. See: <a href=""https://docs.python.org/3/library/functions.html#int"" rel=""nofollow noreferrer"">this documentation</a></p>
<p>In your case, this is better implemented as a list comprehension as follows:</p>
<pre><code>lista = [2,3,4,'5','6','7']

lista_2 = [int(n) for n in lista]

print(lista_2)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[2, 3, 4, 5, 6, 7]
</code></pre>
","0","Answer"
"77901412","77901197","<p>If you don't want to slice the input list then:</p>
<pre><code>def middle(k):
    return [k[i] for i in range(1, len(k)-1)]
</code></pre>
<p>This will return a new list omitting the first and last elements from the input list</p>
","0","Answer"
"77901446","77901197","<p>What I observed from your code is when you mention <code>for i in k:</code>: Though you have mentioned 'i' here towards index, here 'i' will be considered as the element itself and not the index of the element. To iterate through index, the syntax is:</p>
<pre><code>#if you have both start_index and end_index:
for i in range(start_index, end_index+1)
#if start_index is 0:
for i in range(end_index+1):
</code></pre>
<ol start=""2"">
<li><p>if a function has an output,the function should return output with command <code>return output</code>. What you learn as print command is meant for checking the output of any steps anywhere in between the program.</p>
</li>
<li><p>Here as it is mentioned clearly that the first and last element should not be present in the output, you can directly iterate with <code>for i in range(start_index, end_index+1)</code>. And there is no need of  <code>if</code> statement. So the solution can be any of the following:</p>
<p>#method-1
def middle(k):
lst = []
for i in range(1, len(k)-1):
lst.append(k[i])
return lst</p>
<p>numbers = [1, 2, 3, 4, 5, 6, 7]
r = middle(numbers)
print(r)  #output :[2, 3, 4, 5, 6]</p>
</li>
</ol>
","0","Answer"
"77901859","77901197","<p>First, let's directly answer the question:</p>
<blockquote>
<p>Why am I not getting an output?</p>
</blockquote>
<p>You don't get an output as you attempt to establish <code>new_number</code> but never actually return it. So, let's do that:</p>
<pre class=""lang-py prettyprint-override""><code>def middle(k):
    new_number = []
    for i in k:
        if k[0]!= k and k[-1] != k:
            new_number.append(i)
        else:
            return []
    return new_number
</code></pre>
<p>That gives us &quot;something&quot; back but not the right something. Your current solution seems to muddle the concept of list index and the value of the list at a given index. <code>k[0]!= k</code> is (almost) always going to be <code>True</code> as the first item in a list is rarely going to equal the list itself. Similarly for the test of <code>k[-1] != k</code>. You likely wanted to do those tests against <code>i</code> rather than <code>k</code>. Additionally, when you do encounter the first or the last item in the list, you don't want to return an empty list <code>return []</code> you just wnat to ignore it so let's also take that out.</p>
<pre class=""lang-py prettyprint-override""><code>def middle(k):
    new_number = []
    for i in k:
        if k[0] != i and k[-1] != i:
            new_number.append(i)
    return new_number
</code></pre>
<p>Now we are getting someplace and technically this gives you a valid answer (becuase all the items in the list are distinct with respect to the values of the first and last items). However, we really want to just positionally ignore the first and last items by index and really don't want to do any filtering with respect to their values. To take the values and the indexes of list items into account, let's use <code>enumerate()</code>. I know many have used <code>range()</code> and that clearly works but in the spirit of where you started, I think <code>enumerate()</code> is a better match.</p>
<pre class=""lang-py prettyprint-override""><code>def middle(data):
    new_numbers = []
    for index, value in enumerate(data):
        if index in [0, len(data)-1]:
            continue
        new_numbers.append(value)
    return new_numbers
</code></pre>
<p>Now we are getting the right values and not just based on the coincidence that the values of the first and last items in the list are not repeated.</p>
<p>Having this last attempt squared away, we can refine it via a comprehension. They often clean things up nicely.</p>
<pre><code>def middle(data):
    return [
        value
        for index, value
        in enumerate(data)
        if index not in [0, len(data)-1]
    ]
</code></pre>
","0","Answer"
"77902793","77902753","<p>Since python 3.6, <code>dict</code>s are insertion ordered. This allows us to insert keys into a <code>dict</code> in any order and have that order preserved:</p>
<pre><code>d = {1: '[x, y, z]', 2: '[x1, y1, z1]'}
d['1e'] = '[x2, y2, z2]'

print(d)

keys = [1, '1e', 2]
d = {k:d[k] for k in keys}
print(d)
</code></pre>
<p>Output:</p>
<pre><code>{1: '[x, y, z]', 2: '[x1, y1, z1]', '1e': '[x2, y2, z2]'}
{1: '[x, y, z]', '1e': '[x2, y2, z2]', 2: '[x1, y1, z1]'}
</code></pre>
<p>As you can see the order has been changed to what you require.</p>
","0","Answer"
"77902797","77902753","<p>To change the order of keys, you need to re-create the dictionary from its items sorted in the desired order:</p>
<pre><code>d = {1: [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;], 2: [&quot;x1&quot;, &quot;y1&quot;, &quot;z1&quot;], '1e': [&quot;x2&quot;, &quot;y2&quot;, &quot;z2&quot;]}

d = dict(sorted(d.items(),key=lambda k:str(k[0])))

print(d)
{1: ['x', 'y', 'z'], '1e': ['x2', 'y2', 'z2'], 2: ['x1', 'y1', 'z1']}
</code></pre>
","1","Answer"
"77902817","77902753","<p>You will want to clean up the keys to have consistent types first.</p>
<pre><code>&gt;&gt;&gt; x, y, z, x1, y1, z1, x2, y2, z2 = (0,) * 9
&gt;&gt;&gt; d = {1: [x, y, z], 2: [x1, y1, z1], '1e': [x2, y2, z2]}
&gt;&gt;&gt; d2 = {str(k): v  for k, v in d.items()}
&gt;&gt;&gt; d3 = {k: d2[k]  for k in sorted(d2)}
&gt;&gt;&gt; d3
{'1': [0, 0, 0], '1e': [0, 0, 0], '2': [0, 0, 0]}
</code></pre>
","0","Answer"
"77910073","77901275","<p>Your mistake is:</p>
<pre><code>int(i)
</code></pre>
<p>it should be:</p>
<pre><code>i = int(i)
</code></pre>
","0","Answer"
"77913654","77913634","<p><code>73</code> is contained twice in vector <code>x= [73,74,75,71,69,72,76,73]</code>, which results in ambiguity (the same key corresponds to two different index values.)</p>
","1","Answer"
"77914146","77914066","<p>You can use <code>expand.grid</code> to get the combinations from the two lists, then <code>apply</code> to <code>paste</code> the values together:</p>
<pre><code>apply(expand.grid(unlist(mylist_1), unlist(mylist_2)), 1,
      paste, collapse = &quot;_&quot;)
</code></pre>
<p>Output:</p>
<pre><code># [1] &quot;a1_b1&quot; &quot;a2_b1&quot; &quot;a3_b1&quot; &quot;a4_b1&quot; &quot;a5_b1&quot; &quot;a6_b1&quot; &quot;a1_b2&quot; &quot;a2_b2&quot; &quot;a3_b2&quot; &quot;a4_b2&quot; &quot;a5_b2&quot; &quot;a6_b2&quot; &quot;a1_b3&quot; &quot;a2_b3&quot;
# [15] &quot;a3_b3&quot; &quot;a4_b3&quot; &quot;a5_b3&quot; &quot;a6_b3&quot; &quot;a1_b4&quot; &quot;a2_b4&quot; &quot;a3_b4&quot; &quot;a4_b4&quot; &quot;a5_b4&quot; &quot;a6_b4&quot; &quot;a1_b5&quot; &quot;a2_b5&quot; &quot;a3_b5&quot; &quot;a4_b5&quot;
# [29] &quot;a5_b5&quot; &quot;a6_b5&quot; &quot;a1_b6&quot; &quot;a2_b6&quot; &quot;a3_b6&quot; &quot;a4_b6&quot; &quot;a5_b6&quot; &quot;a6_b6&quot; &quot;a1_b7&quot; &quot;a2_b7&quot; &quot;a3_b7&quot; &quot;a4_b7&quot; &quot;a5_b7&quot; &quot;a6_b7&quot;
# [43] &quot;a1_b8&quot; &quot;a2_b8&quot; &quot;a3_b8&quot; &quot;a4_b8&quot; &quot;a5_b8&quot; &quot;a6_b8&quot; &quot;a1_b9&quot; &quot;a2_b9&quot; &quot;a3_b9&quot; &quot;a4_b9&quot; &quot;a5_b9&quot; &quot;a6_b9&quot;
</code></pre>
","4","Answer"
"77914170","77914066","<p>An alternative is <code>outer</code>:</p>
<pre class=""lang-r prettyprint-override""><code>c(outer(mylist_1[[1]], mylist_2[[1]], function(a, b) paste(a, b, sep = &quot;_&quot;)))
#  [1] &quot;a1_b1&quot; &quot;a2_b1&quot; &quot;a3_b1&quot; &quot;a4_b1&quot; &quot;a5_b1&quot; &quot;a6_b1&quot; &quot;a1_b2&quot; &quot;a2_b2&quot; &quot;a3_b2&quot; &quot;a4_b2&quot; &quot;a5_b2&quot; &quot;a6_b2&quot; &quot;a1_b3&quot; &quot;a2_b3&quot; &quot;a3_b3&quot; &quot;a4_b3&quot; &quot;a5_b3&quot; &quot;a6_b3&quot; &quot;a1_b4&quot;
# [20] &quot;a2_b4&quot; &quot;a3_b4&quot; &quot;a4_b4&quot; &quot;a5_b4&quot; &quot;a6_b4&quot; &quot;a1_b5&quot; &quot;a2_b5&quot; &quot;a3_b5&quot; &quot;a4_b5&quot; &quot;a5_b5&quot; &quot;a6_b5&quot; &quot;a1_b6&quot; &quot;a2_b6&quot; &quot;a3_b6&quot; &quot;a4_b6&quot; &quot;a5_b6&quot; &quot;a6_b6&quot; &quot;a1_b7&quot; &quot;a2_b7&quot;
# [39] &quot;a3_b7&quot; &quot;a4_b7&quot; &quot;a5_b7&quot; &quot;a6_b7&quot; &quot;a1_b8&quot; &quot;a2_b8&quot; &quot;a3_b8&quot; &quot;a4_b8&quot; &quot;a5_b8&quot; &quot;a6_b8&quot; &quot;a1_b9&quot; &quot;a2_b9&quot; &quot;a3_b9&quot; &quot;a4_b9&quot; &quot;a5_b9&quot; &quot;a6_b9&quot;
</code></pre>
","3","Answer"
"77914752","77913634","<blockquote>
<p><strong>Why is it failing?</strong></p>
</blockquote>
<p>We know that for:</p>
<pre><code>x = [73,74,75,71,69,72,76,73, 99]  # note the additional list item
</code></pre>
<p>The result:</p>
<pre><code>{73: 7, 74: 1, 75: 2, 71: 3, 69: 4, 72: 5, 76: 6, 99: 8}
</code></pre>
<p>is <em>&quot;bad&quot;</em> for at least the first key in the dictionary. The reason it is bad (as others have pointed out) is that there are duplicate entries in the list <code>x</code> and as we process them we are conceptually doing:</p>
<pre><code>idx = {}
idx[73] = 0
idx[73] = 7
print(idx)
</code></pre>
<blockquote>
<p><strong>What should be done?</strong></p>
</blockquote>
<p>We don't know what you actually expect for the key of <code>73</code>. I think there is a good chance you want the value <code>0</code> but perhaps you want the value <code>[0, 7]</code> showing both indexes of <code>73</code> in the original list.</p>
<p>The other wrinkle is not knowing how the additional item <code>99</code> (occurring after the duplicated <code>73</code>) should be assigned a value. Do we keep the existing index entry <code>8</code> or do we want that to be a new <code>7</code> effectively replacing the duplicate?</p>
<p>Determining how to get some other result is fairly straight forward and I'll give you several things you can try.</p>
<p><strong>Option 1:</strong></p>
<p>I want the keys to have their actual first list indexes:</p>
<pre><code>73 --&gt; 0
99 --&gt; 8
</code></pre>
<pre class=""lang-py prettyprint-override""><code>idx_expected = {73: 0, 74: 1, 75: 2, 71: 3, 69: 4, 72: 5, 76: 6, 99: 8}
idx_actual = {}
for index, value in enumerate(x):
    if value not in idx_actual:
        idx_actual[value] = index
print(idx_actual == idx_expected)
</code></pre>
<p><strong>Option 2:</strong></p>
<p>I want the keys to have their first list indexes but if there is a duplicate, I just want to pretend it did not exist:</p>
<pre><code>73 --&gt; 0
99 --&gt; 7
</code></pre>
<pre class=""lang-py prettyprint-override""><code>## -------------
idx_expected = {73: 0, 74: 1, 75: 2, 71: 3, 69: 4, 72: 5, 76: 6, 99: 7}
idx_actual = {n:i for i, n in enumerate(dict.fromkeys(x))}
print(idx_actual == idx_expected)
## -------------
</code></pre>
<p><strong>Option 3:</strong></p>
<p>I want to capture the fact that there could be duplicates in the original list by setting the values in the resulting dictionary to a list of original indexes.</p>
<pre><code>73 --&gt; [0, 7]
99 --&gt; [8]
</code></pre>
<pre class=""lang-py prettyprint-override""><code>## -------------
idx_expected = {73: [0, 7], 74: [1], 75: [2], 71: [3], 69: [4], 72: [5], 76: [6], 99: [8]}
idx_actual = {}
for index, value in enumerate(x):
    idx_actual.setdefault(value, []).append(index)
print(idx_actual == idx_expected)
## -------------
</code></pre>
","3","Answer"
"77916683","77916513","<p>Ansible isn't great at manipulating data structures, but you could do something like this:</p>
<pre><code>- set_fact:
    new_list: &gt;
      {{
        new_list + [
          {
            switch[0]: switch[1].values()|list|map(attribute='id')|map('int')
          }
        ]
      }}
  vars:
    new_list: []
    switch: &quot;{{ item.items()|first|list }}&quot;
  loop: &quot;{{ tor_vlan_list }}&quot;
  loop_control:
    label: &quot;{{ switch[0] }}&quot;

- debug:
    var: new_list
</code></pre>
<p>This makes somewhat complicated use of <code>set_fact</code> in a loop. Given your example input, the <code>debug</code> task prints your desired data structure:</p>
<pre><code>ok: [localhost] =&gt; {
    &quot;new_list&quot;: [
        {
            &quot;switch_01&quot;: [
                1,
                10,
                20,
                30
            ]
        },
        {
            &quot;switch_02&quot;: [
                1,
                10,
                20,
                30
            ]
        }
    ]
}
</code></pre>
<p>Alternately, you could place your logic into a custom filter in <code>filter_plugins/switches.py</code>, like this:</p>
<pre><code>def transform_vlan_list(vlan_list):
    return [
        {switch[0]: [int(vlan[&quot;id&quot;]) for vlan in switch[1].values()]}
        for x in vlan_list
        for switch in x.items()
    ]


class FilterModule:
    def filters(self):
        return {&quot;transform_vlan_list&quot;: transform_vlan_list}
</code></pre>
<p>The advantage here is that you've moved your logic into Python, which is much better at <em>manipulating</em> data.</p>
<p>With this custom filter plugin, you can produce the same output as the first example like this:</p>
<pre><code>- set_fact:
    new_list: &quot;{{ tor_vlan_list | transform_vlan_list }}&quot;

- debug:
    var: new_list
</code></pre>
","2","Answer"
"77916894","77916879","<p>You're creating a tuple by putting <code>z %= i</code> on the same line, separated with <code>,</code>. This is an invalid statement because an assignment can't be used as an expression in a tuple.</p>
<p>You should put each statement on its own line.</p>
<pre><code>for i in u:
    l.append(z)
    z %= i
</code></pre>
<p>If you <em>really</em> need to put multiple statements on the same line, you can use <code>;</code> to separate them.</p>
<pre><code>for i in u:
    l.append(z); z %= i
</code></pre>
","0","Answer"
"77916905","77916879","<pre><code>l = []
u = [31536000, 86400, 3600, 60]
z = 157310805

for i in u:
    l.append(z)
    z %= i
</code></pre>
<p>The problem here isn't really about tuples, it's just getting confused about the comma. The solution is to break into a new line.</p>
","0","Answer"
"77917223","77916513","<p>The below expressions</p>
<pre class=""lang-yaml prettyprint-override""><code>  new_list_keys: &quot;{{ tor_vlan_list|json_query('[].keys(@)') }}&quot;
  new_list_vals: &quot;{{ tor_vlan_list|json_query('[].*.*.id') }}&quot;
  new_list: |
    [{% for i in new_list_keys|zip(new_list_vals) %}
    {{ dict(i.0|zip(i.1|map('map', 'int'))) }},
    {% endfor %}]
</code></pre>
<p>give what you want</p>
<pre class=""lang-yaml prettyprint-override""><code>  new_list:
    - switch_01: [1, 10, 20, 30]
    - switch_02: [1, 10, 20, 30]
</code></pre>
<pre class=""lang-yaml prettyprint-override""><code>  new_list_keys:
    - [switch_01]
    - [switch_02]

  new_list_vals:
    - - ['1', '10', '20', '30']
    - - ['1', '10', '20', '30']
</code></pre>
<hr>
<sup>
<p>Example of a complete playbook for testing</p>
<pre class=""lang-yaml prettyprint-override""><code>- hosts: localhost

  vars:

    tor_vlan_list:
    - switch_01:
        Vlan1: {id: '1', ip: unassigned, ok: 'NO', protocol: down, status: up}
        Vlan10: {id: '10', ip: 10.10.10.2/24, ok: 'YES', protocol: up, status: up}
        Vlan20: {id: '20', ip: 10.10.20.2/24, ok: 'YES', protocol: up, status: up}
        Vlan30: {id: '30', ip: 10.10.30.2/24, ok: 'YES', protocol: up, status: up}
    - switch_02:
        Vlan1: {id: '1', ip: unassigned, ok: 'NO', protocol: down, status: up}
        Vlan10: {id: '10', ip: 10.10.10.3/24, ok: 'YES', protocol: up, status: up}
        Vlan20: {id: '20', ip: 10.10.20.3/24, ok: 'YES', protocol: up, status: up}
        Vlan30: {id: '30', ip: 10.10.30.3/24, ok: 'YES', protocol: up, status: up}

    new_list_keys: &quot;{{ tor_vlan_list|json_query('[].keys(@)') }}&quot;
    new_list_vals: &quot;{{ tor_vlan_list|json_query('[].*.*.id') }}&quot;
    new_list: |
      [{% for i in new_list_keys|zip(new_list_vals) %}
      {{ dict(i.0|zip(i.1|map('map', 'int'))) }},
      {% endfor %}]

  tasks:

    - debug:
        var: new_list_keys|to_yaml
    - debug:
        var: new_list_vals|to_yaml
    - debug:
        var: new_list|type_debug
    - debug:
        var: new_list|to_yaml
</code></pre>
</sup>
","4","Answer"
"77924183","77917582","<p>One idea may be to use a dictionary that assigns keys for each cell in the <code>2x2</code> grid, and iterate your <code>chosenhalf</code> list matching entries to the mapped cells in the grid:</p>
<pre><code>grid = { 1:[0,0], 5:[1,0], 9:[2,0],  13:[3,0],
         2:[0,1], 6:[1,1], 10:[2,1], 14:[3,1],
         3:[0,2], 7:[1,2], 11:[2,2], 15:[3,2],
         4:[0,3], 8:[1,3], 12:[2,3], 16:[3,3],}


def printgrid():
    col = 1
    for cell in grid:
        if cell in chosenhalf:
            print(1, end=' ')
        else:
            print(0, end=' ')
        if col%4==0: print()
        col+=1


printgrid()

# Using your example: chosenhalf = [12, 5, 16, 2, 8, 9, 14, 15, 3]
# produces expected output:
0 1 1 0 
1 0 0 1 
1 0 0 1 
0 1 1 1 
</code></pre>
<p>Of course, this is only a basic proof-of-concept and can be optimized for better performance, but may serve as a start to a possible solution.</p>
","0","Answer"
"77924300","77917582","<p>You are given an index <code>i</code> where <code>i=1</code> corresponds to the top left element of your grid, and subsequent indices move over rows. You want to output a <code>1</code> for all the indices you're given, and zero elsewhere. You could do this quite easily if you recognize that <code>(i - 1) // size</code> gives you the column index, and <code>(i - 1) % size</code> gives you the row index. So let's do that.</p>
<p>Note, in the interest of <a href=""https://en.wikipedia.org/wiki/Separation_of_concerns"" rel=""nofollow noreferrer"">separation of concerns</a>, your <code>printgrid</code> function should only <em>print</em> the grid, and you should have a separate <code>makegrid</code> function to make the grid. Also, don't use global variables the way you have done. It's easy to write spaghetti code that's hard to debug since you don't know where each variable can be modified when you do this. Instead, pass relevant variables to each function. Also, I modified your function names to conform to <a href=""https://peps.python.org/pep-0008/"" rel=""nofollow noreferrer"">PEP 8</a>, and your variable names so they describe what they do:</p>
<p>First, a function to create a grid of the given size, with the given <code>chosen_indices</code>:</p>
<pre><code>def make_grid(size, chosen_indices):
    # Make a grid of zeros
    grid = [[0] * size for _ in range(size)]

    # Iterate over each index in chosen_indices, and set those elements to 1
    for i in chosen_indices:
        row, col = divmod(i - 1, size) # divmod does both the integer division and modulo operations and returns the results
        grid[row][col] = 1

    return grid
</code></pre>
<p>Then, a function to print any grid:</p>
<pre><code>def print_grid(grid):
    if not grid:
        return
    
    size = len(grid[0])
    max_index_size = len(str(size-1))  # The size of the largest index that we'll have to print
    format_str = f&quot;{{0: &lt;{max_index_size}d}}&quot; # Create a format string to output each element of the grid with the correct padding
    for row_index, row in enumerate(grid):
        print(format_str.format(row_index), end=&quot;[&quot;)
        for col_index, elem in enumerate(row):
            print(format_str.format(elem), end=&quot; &quot; * (col_index &lt; size-1))
            # end=&quot; &quot; * (col_index &lt; size-1) adds a space after elem except in the last column
      
        print(&quot;]&quot;)

    print(&quot; &quot; * max_index_size, end=&quot; &quot;)
    for col_index in range(size):
        print(format_str.format(col_index), end=&quot; &quot;)

    print()
</code></pre>
<p>Now, after you take the input <code>size</code> and create the random sample <code>thechosenhalf</code>, you can call these functions like so:</p>
<pre><code>my_grid = make_grid(size, thechosenhalf)
print_grid(my_grid)
</code></pre>
<p>With your given inputs, we get the expected results:</p>
<pre><code>my_grid = make_grid(4, range(1, 9))
print_grid(my_grid)
</code></pre>
<p>outputs:</p>
<pre class=""lang-none prettyprint-override""><code>0[1 1 1 1]
1[1 1 1 1]
2[0 0 0 0]
3[0 0 0 0]
  0 1 2 3 
</code></pre>
<p>and</p>
<pre><code>my_grid = make_grid(4, [12, 5, 16, 2, 8, 9, 15, 3])
print_grid(my_grid)
</code></pre>
<p>outputs:</p>
<pre class=""lang-none prettyprint-override""><code>0[0 1 1 0]
1[1 0 0 1]
2[1 0 0 1]
3[0 0 1 1]
  0 1 2 3 
</code></pre>
<hr />
<p>The shenanigans with the <code>max_index_size</code> and <code>format_str</code> inside <code>print_grid</code> were to allow larger grids to be printed nicely. For example:</p>
<pre><code>my_grid = make_grid(15, range(1, 9))
print_grid(my_grid)
</code></pre>
<p>outputs:</p>
<pre class=""lang-none prettyprint-override""><code>
0 [1  1  1  1  1  1  1  1  0  0  0  0  0  0  0 ]
1 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
2 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
3 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
4 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
5 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
6 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
7 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
8 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
9 [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
10[0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
11[0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
12[0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
13[0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
14[0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 
</code></pre>
<p>Removing those two lines and naively printing each element / index would have resulted in this broken output:</p>
<pre class=""lang-none prettyprint-override""><code>0[1 1 1 1 1 1 1 1 0 0 0 0 0 0 0]
1[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
2[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
3[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
4[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
5[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
6[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
7[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
8[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
9[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
10[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
11[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
12[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
13[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
14[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 
</code></pre>
","1","Answer"
"77924519","77924481","<p>Presumably if you reach a <code>nullptr</code> you have reached the end of the list, so:</p>
<pre><code>Iterator end() {
    return Iterator(nullptr);
}
</code></pre>
<p>You probably also want <code>Node</code> to be <em>inside</em> of <code>List</code> as no user of <code>List</code> should need to directly create or modify a <code>Node</code>.</p>
<p>As a nitpick, <code>m_node</code> in <code>List</code> is probably better named <code>head</code>, <code>head_node</code>, or something to that effect.</p>
","2","Answer"
"77924640","77924481","<p>The end iterator should <em>logically</em> refer to &quot;one past the end&quot;, but it doesn't have to <em>physically</em> refer to anything.  The only requirement is that it compares equal to the iterator value you obtain by incrementing an iterator that refers to the last element of the list.</p>
<p>In the case of your <code>List</code> class, the last node in the list has a null <code>next</code> pointer, so when you increment an iterator to that node you'll end up with an iterator holding a null pointer.  That means your <code>end</code> iterator can simply be</p>
<pre><code>Iterator end() {
    return Iterator(nullptr);
}
</code></pre>
","2","Answer"
"77925225","77924481","<p>The main purpose of implementing iterators is to <strong>iterate</strong> your collection and <code>::begin()</code> and <code>end()</code> functions are intended to help you in that purpose. So basically <code>::begin()</code> and <code>::end()</code> give you the range including all the elements in the collection so you can use for example a <code>for</code> loop to iterate your collection, typically using the <code>++</code> operator to get the next element, something like this:</p>
<p><code>for (auto it = my_list.begin(); it != my_list.end(); ++it) { show *it; }</code>.</p>
<p>Since <code>::end()</code> points to the <em>past-the-end</em> element, this ensures you listed all the elements in the loop.</p>
<p>Now regarding to your specific question about how does the <code>::end()</code> function points to &quot;one position after last element&quot;, the answer is: it will depend on the data structure of your collection. In your case and according your code, you want to implement a simple unidirectional linked list, so what I would do  is to create a special node <code>end_node</code> that represents the <em>past-the-end</em> element and always making sure that the <code>&lt;last item&gt;-&gt;next</code> points to <code>end_node</code>.</p>
<p>Here is a sightly modified version of your code implementing this idea, please take into account the code could have bugs or performance issues, it is just to illustrate the idea.</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;iterator&gt;

using namespace std;

template&lt;typename T&gt;
class Node
{
public:
    Node(const T _value) : value(_value) {}

    T value;
    std::shared_ptr&lt;Node&lt;T&gt;&gt; next = nullptr;
};

template&lt;typename T&gt;
class List
{
public:
    List() : m_root_node(std::make_shared&lt;Node&lt;T&gt;&gt;(T())), m_end_node(std::make_shared&lt;Node&lt;T&gt;&gt;(T()))
    {
        m_root_node-&gt;next = m_end_node;
    }

    class Iterator : public std::iterator&lt;std::input_iterator_tag, std::shared_ptr&lt;Node&lt;T&gt;&gt;&gt;
    {
        std::shared_ptr&lt;Node&lt;T&gt;&gt; m_p;
        public:
          Iterator(std::shared_ptr&lt;Node&lt;T&gt;&gt; p) : m_p(p) { }
          Iterator(const Iterator&amp; it) : m_p(it.m_p) { }
          Iterator&amp; operator++() { m_p = m_p-&gt;next; return *this; }
          Iterator operator++(int) { Iterator tmp(*this); operator++(); return tmp; }
          bool operator==(const Iterator&amp; rhs) const { return m_p == rhs.m_p; }
          bool operator!=(const Iterator&amp; rhs) const { return m_p != rhs.m_p; }
          int&amp; operator*() { return m_p-&gt;value; }
    };

    void insert_back(const T value)
    {
        auto new_end_node = std::make_shared&lt;Node&lt;T&gt;&gt;(T());
        m_end_node-&gt;value = value; // end node becomes the last item
        m_end_node-&gt;next = new_end_node; // last item-&gt;next always points to the end node
        m_end_node = new_end_node; // moving end node to the end
    }

    Iterator begin()
    {
        return Iterator(m_root_node-&gt;next);
    }

    Iterator end()
    {
        return Iterator(m_end_node);
    }

private:
    std::shared_ptr&lt;Node&lt;T&gt;&gt; m_root_node; // helps to track the first element, useful when you want to implement insert_front
    std::shared_ptr&lt;Node&lt;T&gt;&gt; m_end_node; // helps to track the last element, useful to insert elements at the end without looping
};

void test()
{
    List&lt;int&gt; list;

    list.insert_back(4);
    list.insert_back(2);
    list.insert_back(3);

    auto beg = list.begin();
    std::cout &lt;&lt; &quot;beg is: &quot; &lt;&lt; *beg &lt;&lt; std::endl;

    auto end = list.end();
    std::cout &lt;&lt; &quot;end is: &quot; &lt;&lt; *end &lt;&lt; std::endl;
    
    for (auto it = list.begin(); it != list.end(); ++it)
    {
        std::cout &lt;&lt; &quot;item: &quot; &lt;&lt; *it &lt;&lt; &quot;, &quot;;
    }
    
    std::cout &lt;&lt; std::endl;
    auto it = list.begin();
    
    while (it != list.end())
    {
        std::cout &lt;&lt; &quot;item: &quot; &lt;&lt; *it &lt;&lt; &quot;, &quot;;
        it++;
    }
}

int main()
{
    std::cout &lt;&lt; &quot;starting...&quot; &lt;&lt; std::endl;

    test();
}

</code></pre>
","-1","Answer"
"77925829","77924690","<p>You can use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.str.split.html#pandas-series-str-split"" rel=""nofollow noreferrer""><code>str.split</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.explode.html"" rel=""nofollow noreferrer""><code>explode</code></a>:</p>
<pre><code>df[[&quot;MS&quot;,&quot;DS&quot;]] = df[[&quot;MS&quot;,&quot;DS&quot;]].apply(lambda x: x.str.split(&quot;,&quot;),axis=1)
df[&quot;final&quot;] = df[[&quot;MS&quot;,&quot;DS&quot;]].apply(lambda x: list(zip_longest(x[&quot;MS&quot;], x[&quot;DS&quot;])),axis=1)
df = df.explode(&quot;final&quot;)
df[[&quot;MS&quot;,&quot;DS&quot;]] = df[&quot;final&quot;].values.tolist()
</code></pre>
<p><strong>Out:</strong></p>
<pre><code>    ID     MS    DS
0  654   1500    60
0  654  10000   365
0  654  20000   730
0  654  30000  None
1  131   1500    60
1  131  10000   365
1  131  20000   730
2  598   1500    60
2  598  10000   365
2  598  20000   730
2  598  30000  None

</code></pre>
","1","Answer"
"77925907","77924690","<p>Here's one approach:</p>
<pre class=""lang-py prettyprint-override""><code>cols = ['MS', 'DS']

dfs = [df[c].explode().str.split(',', expand=True)
       .astype('Int64')
       .stack()
       .rename(c) 
       for c in cols]

out = (pd.concat(dfs, axis=1)
       .droplevel(1)
       .join(df['ID'])
       .loc[:, df.columns]
       )

out

    ID     MS    DS
0  654   1500    60
0  654  10000   365
0  654  20000   730
0  654  30000  &lt;NA&gt;
1  131   1500    60
1  131  10000   365
1  131  20000   730
2  598   1500    60
2  598  10000   365
2  598  20000   730
2  598  30000  &lt;NA&gt;
</code></pre>
<p><strong>Explanation</strong></p>
<ol>
<li>Inside a list comprehension, for each column of <code>['MS', 'DS']</code>:
<ul>
<li>use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.explode.html"" rel=""nofollow noreferrer""><code>Series.explode</code></a>  to get list elements into multiple rows;</li>
<li>use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.str.split.html"" rel=""nofollow noreferrer""><code>Series.str.split</code></a> to split on <code>','</code> and set <code>expand</code> to <code>True</code> to get the result in multiple columns;</li>
<li>chain <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.astype.html"" rel=""nofollow noreferrer""><code>Series.astype</code></a> with <code>Int64</code> to turn what will be <em>string</em> values into proper integers, while allowing for <code>NaN</code> values (the shorter sequences will have these for columns not &quot;reached&quot;);</li>
<li>apply <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"" rel=""nofollow noreferrer""><code>df.stack</code></a> to get a <code>pd.Series</code> result (with column values now as a second level index);</li>
<li>add <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.rename.html"" rel=""nofollow noreferrer""><code>Series.rename</code></a> to restore the original column name.</li>
</ul>
</li>
<li>Join both <code>Series</code>, add non-exploded column, and re-order:
<ul>
<li>use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.concat.html"" rel=""nofollow noreferrer""><code>pd.concat</code></a> along <code>axis=1</code> (columns)</li>
<li>apply <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.droplevel.html"" rel=""nofollow noreferrer""><code>df.droplevel</code></a> to drop the added index level;</li>
<li>use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html"" rel=""nofollow noreferrer""><code>df.join</code></a> to re-add the non-exploded column <code>ID</code>;</li>
<li>pass <code>df.columns</code> to <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html"" rel=""nofollow noreferrer""><code>df.loc</code></a> to reset the column order.</li>
</ul>
</li>
</ol>
<p><strong>Data used</strong></p>
<pre class=""lang-py prettyprint-override""><code>import pandas as pd

data = {
    'ID': [654, 131, 598],
    'MS': [['1500,10000,20000,30000'], ['1500,10000,20000'], 
           ['1500,10000,20000,30000']],
    'DS': [['60,365,730'], ['60,365,730'], 
           ['60,365,730']]
}

df = pd.DataFrame(data)
df

    ID                        MS            DS
0  654  [1500,10000,20000,30000]  [60,365,730]
1  131        [1500,10000,20000]  [60,365,730]
2  598  [1500,10000,20000,30000]  [60,365,730]
</code></pre>
","0","Answer"
"77926414","77926314","<p>To do what you describe, you can:</p>
<ol>
<li>Find the <code>.empty-list</code> <code>li</code> element. <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"" rel=""nofollow noreferrer""><code>document.querySelector</code></a> can do that for you.</li>
<li>Get the <code>li</code> in front of it, and then find the first <code>ul</code> inside it.  <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling"" rel=""nofollow noreferrer""><code>previousElementSibling</code></a> is good for getting the previous <code>li</code> (since there can't be anything else in a <code>ul</code>), and the element-specific version of <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector"" rel=""nofollow noreferrer""><code>querySelector</code></a> is useful for finding the first <code>ul</code> within it.</li>
<li>See if that's empty via <code>.children.length === 0</code>.</li>
<li>If so, move the <code>.empty-list</code> element into it via <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"" rel=""nofollow noreferrer""><code>appendChild</code></a> as you have in your question (or <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/append"" rel=""nofollow noreferrer""><code>append</code></a>).</li>
</ol>
<p>Here's an example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Find the `.empty-list` element
const emptyListItem = document.querySelector("".empty-list"");
// Get the `li` previous to it, and find the (first) `ul` within that `li`
const previousList = emptyListItem
    .previousElementSibling
    .querySelector(""ul"");
// If that `ul` has no element children, move the empty `li` into it
if (previousList.children.length === 0) {
    previousList.appendChild(emptyListItem);
}

// (Just to show the resulting structure)
console.log(document.querySelector("".menu"").outerHTML);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;ul class=""menu""&gt;
&lt;li class=""list-1""&gt;&lt;ul class=""ul-1""&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=""list-2""&gt;&lt;ul class=""ul-2""&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=""list-3""&gt;&lt;ul class=""ul-3""&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li class=""list-4 empty-list""&gt;&lt;/li&gt;
&lt;li class=""list-5""&gt;&lt;ul class=""ul-5""&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</div>
</div>
</p>
","0","Answer"
"77927715","77926314","<p>You can also check this code. First check which li has no children with listItem.childNodes.length===0 get its class (using className) and select it (using getElementsByClassName) then get the previous element with same approach. In this case I first check if your 'orphan' li is not the first element in case your li order changes with (index!=0). In case order changes and orphan 'li' is the first element you will</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.addEventListener('DOMContentLoaded', function () {
    var listItems = document.querySelectorAll('li');
    const menu = document.querySelector('.menu')
    listItems.forEach(function (listItem, index) {
      if (listItem.childNodes.length===0) {
            let className = listItem.className
            let elemToInsert = Array.from(document.getElementsByClassName(className))
            elemToInsert[0].remove()
            if(index!=0){
                let PrevElem = listItems[index-1].children
                className = PrevElem[0].className
                let elemToInsertIn = Array.from(document.getElementsByClassName(className))
                elemToInsertIn[0].appendChild(elemToInsert[0])
            }
            else if(index ===0){
                // let PrevElem = listItems[selectedIndex].children // you need to set selectedIndex
                // className = PrevElem[0].className
                // let elemToInsertIn = Array.from(document.getElementsByClassName(className))
                // elemToInsertIn[0].appendChild(elemToInsert[0])
            }
      }
    });
    console.log(menu)
  });</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;ul class=""menu""&gt;
        &lt;li class=""list-1""&gt;
            &lt;ul class=""ul-1""&gt;&lt;/ul&gt;
        &lt;/li&gt;
        &lt;li class=""list-2""&gt;
            &lt;ul class=""ul-2""&gt;&lt;/ul&gt;
        &lt;/li&gt;
        &lt;li class=""list-3""&gt;
            &lt;ul class=""ul-3""&gt;&lt;/ul&gt;
        &lt;/li&gt;
        &lt;li class=""list-4 empty-list""&gt;&lt;/li&gt;
        &lt;li class=""list-5""&gt;
            &lt;ul class=""ul-5""&gt;&lt;/ul&gt;
        &lt;/li&gt;
    &lt;/ul&gt;</code></pre>
</div>
</div>
</p>
<p>have to select the index of the element to insert in</p>
","0","Answer"
"77928238","77928222","<p>You can use the mutate function from the dplyr package and case_when. This is not the task of ifelse function.</p>
<pre><code>library(dplyr)

main_modals &lt;- c(&quot;X ray Units Static&quot;, &quot;X ray Units Mobile&quot;, &quot;CT&quot;, &quot;Mammography&quot;, &quot;MRI&quot;, &quot;Nuclear Medicine&quot;, &quot;Ultrasound&quot;)

df_ae &lt;- df_ae %&gt;%
  mutate(main_modal = case_when(
    any(Modality %in% main_modals) ~ &quot;PRIORITY&quot;,
    TRUE ~ &quot;NON-PRIORITY&quot;
  ))
</code></pre>
","0","Answer"
"77928312","77927315","<p>Restructure your data so that instead of:</p>
<pre><code>&quot;switch_vlan_ids&quot;: [
    {
        &quot;switch01&quot;: [&quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot;]
    },
    {
        &quot;switch02&quot;: [&quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;]
    }
]
</code></pre>
<p>You have instead:</p>
<pre><code>&quot;switch_vlan_ids&quot;: [
    {
        &quot;name&quot;: &quot;switch01&quot;,
        &quot;vlans&quot;: [&quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot;]
    },
    {
        &quot;name&quot;: &quot;switch02&quot;,
        &quot;vlans&quot;: [&quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;]
    }
]
</code></pre>
<p>Now we can use the <a href=""https://docs.ansible.com/ansible/latest/collections/ansible/builtin/subelements_lookup.html"" rel=""nofollow noreferrer""><code>subelements</code></a> filter to achieve the effect of a nested loop. If we modify <a href=""https://stackoverflow.com/a/77916683/147356"">yesterday's solution</a> so that instead we have:</p>
<pre><code>def transform_vlan_list(vlan_list):
    return [
        {
            &quot;name&quot;: switch[0],
            &quot;vlans&quot;: [int(vlan[&quot;id&quot;]) for vlan in switch[1].values()],
        }
        for x in vlan_list
        for switch in x.items()
    ]


class FilterModule:
    def filters(self):
        return {&quot;transform_vlan_list&quot;: transform_vlan_list}
</code></pre>
<p>Then we can write a playbook like this:</p>
<pre><code>- hosts: localhost
  gather_facts: false
  vars_files:
    - vlans.json
  tasks:
    - loop: &quot;{{ tor_vlan_list | transform_vlan_list | subelements('vlans') }}&quot;
      debug:
        msg:
          - switch: &quot;{{ item.0.name }}&quot;
          - vlan id: &quot;{{ item.1 }}&quot;
</code></pre>
<p>And get the output:</p>
<pre><code>
PLAY [localhost] ***************************************************************

TASK [debug] *******************************************************************
ok: [localhost] =&gt; (item=[{'name': 'switch_01', 'vlans': [1, 10, 30, 50]}, 1]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_01&quot;
        },
        {
            &quot;vlan id&quot;: &quot;1&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_01', 'vlans': [1, 10, 30, 50]}, 10]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_01&quot;
        },
        {
            &quot;vlan id&quot;: &quot;10&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_01', 'vlans': [1, 10, 30, 50]}, 30]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_01&quot;
        },
        {
            &quot;vlan id&quot;: &quot;30&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_01', 'vlans': [1, 10, 30, 50]}, 50]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_01&quot;
        },
        {
            &quot;vlan id&quot;: &quot;50&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_02', 'vlans': [1, 20, 40, 60]}, 1]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_02&quot;
        },
        {
            &quot;vlan id&quot;: &quot;1&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_02', 'vlans': [1, 20, 40, 60]}, 20]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_02&quot;
        },
        {
            &quot;vlan id&quot;: &quot;20&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_02', 'vlans': [1, 20, 40, 60]}, 40]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_02&quot;
        },
        {
            &quot;vlan id&quot;: &quot;40&quot;
        }
    ]
}
ok: [localhost] =&gt; (item=[{'name': 'switch_02', 'vlans': [1, 20, 40, 60]}, 60]) =&gt; {
    &quot;msg&quot;: [
        {
            &quot;switch&quot;: &quot;switch_02&quot;
        },
        {
            &quot;vlan id&quot;: &quot;60&quot;
        }
    ]
}
</code></pre>
","1","Answer"
"77928445","77927315","<p>The following self explanatory playbook:</p>
<pre class=""lang-yaml prettyprint-override""><code>- hosts: localhost
  gather_facts: false

  vars:
    &quot;switch_vlan_ids&quot;: [
      {
        &quot;switch01&quot;: [ &quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot; ]
      },
      {
        &quot;switch02&quot;: [ &quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot; ]
      }
    ]

    switch_vlan_ids_dict: &quot;{{ switch_vlan_ids | combine }}&quot;
    switch_vlan_ids_list: &quot;{{ switch_vlan_ids_dict | dict2items(key_name='switch', value_name='vlan_ids') }}&quot;

  tasks:
    - name: Show original var
      ansible.builtin.debug:
        var: switch_vlan_ids
        
    - name: Transform var to an easier to manage dict
      ansible.builtin.debug:
        var: switch_vlan_ids_dict

    - name: Transform the dict to an easy to parse list
      ansible.builtin.debug:
        var: switch_vlan_ids_list

    - name: Loop through the list with subelements
      ansible.builtin.debug:
        msg:
          - Switch is {{ item.0.switch }}
          - Vlan id is {{ item.1 }}
      loop: &quot;{{ lookup('subelements', switch_vlan_ids_list, 'vlan_ids') }}&quot;

</code></pre>
<p>gives:</p>
<pre class=""lang-none prettyprint-override""><code>PLAY [localhost] *********************************************************************************************************************************************************************************************************************

TASK [Show original var] *************************************************************************************************************************************************************************************************************
ok: [localhost] =&gt; {
    &quot;switch_vlan_ids&quot;: [
        {
            &quot;switch01&quot;: [
                &quot;1&quot;,
                &quot;10&quot;,
                &quot;30&quot;,
                &quot;50&quot;
            ]
        },
        {
            &quot;switch02&quot;: [
                &quot;1&quot;,
                &quot;20&quot;,
                &quot;40&quot;,
                &quot;60&quot;
            ]
        }
    ]
}

TASK [Transform var to an easier to manage dict] *************************************************************************************************************************************************************************************
ok: [localhost] =&gt; {
    &quot;switch_vlan_ids_dict&quot;: {
        &quot;switch01&quot;: [
            &quot;1&quot;,
            &quot;10&quot;,
            &quot;30&quot;,
            &quot;50&quot;
        ],
        &quot;switch02&quot;: [
            &quot;1&quot;,
            &quot;20&quot;,
            &quot;40&quot;,
            &quot;60&quot;
        ]
    }
}

TASK [Transform the dict to an easy to parse list] ***********************************************************************************************************************************************************************************
ok: [localhost] =&gt; {
    &quot;switch_vlan_ids_list&quot;: [
        {
            &quot;switch&quot;: &quot;switch01&quot;,
            &quot;vlan_ids&quot;: [
                &quot;1&quot;,
                &quot;10&quot;,
                &quot;30&quot;,
                &quot;50&quot;
            ]
        },
        {
            &quot;switch&quot;: &quot;switch02&quot;,
            &quot;vlan_ids&quot;: [
                &quot;1&quot;,
                &quot;20&quot;,
                &quot;40&quot;,
                &quot;60&quot;
            ]
        }
    ]
}

TASK [Loop through the list with subelements] ****************************************************************************************************************************************************************************************
ok: [localhost] =&gt; (item=[{'switch': 'switch01'}, '1']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch01&quot;,
        &quot;Vlan id is 1&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch01'}, '10']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch01&quot;,
        &quot;Vlan id is 10&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch01'}, '30']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch01&quot;,
        &quot;Vlan id is 30&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch01'}, '50']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch01&quot;,
        &quot;Vlan id is 50&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch02'}, '1']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch02&quot;,
        &quot;Vlan id is 1&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch02'}, '20']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch02&quot;,
        &quot;Vlan id is 20&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch02'}, '40']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch02&quot;,
        &quot;Vlan id is 40&quot;
    ]
}
ok: [localhost] =&gt; (item=[{'switch': 'switch02'}, '60']) =&gt; {
    &quot;msg&quot;: [
        &quot;Switch is switch02&quot;,
        &quot;Vlan id is 60&quot;
    ]
}

PLAY RECAP ***************************************************************************************************************************************************************************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

</code></pre>
","2","Answer"
"77928771","77928222","<p>You can solve your problem as follows (I assume data <code>df_ae</code> is a <em>data.frame</em> object):</p>
<pre><code>df_ae$main_modal &lt;- ifelse(df_ae$Modality %in% main_modals, &quot;PRIORITY&quot;, &quot;NON-PRIORITY&quot;)

 # or
library(dplyr)

df_ae &lt;- df_ae %&gt;%
  mutate(main_modal = if_else(Modality %in% main_modals, &quot;PRIORITY&quot;, &quot;NON-PRIORITY&quot;))

 # or
library(data.table)

setDT(df_ae)[, main_modal := fifelse(Modality %in% main_modals, &quot;PRIORITY&quot;, &quot;NON-PRIORITY&quot;)]
</code></pre>
","0","Answer"
"77929402","77928909","<p>This is a limitation of SwiftUI (or maybe a feature :) ). As long as your Button style is being set to <code>.automatic</code> which it is by default, you will see this behavior.
As soon as you add <code>.buttonStyle(.borderless)</code> or any other Button style, you will see the expected behavior.
For reference see <a href=""https://stackoverflow.com/questions/56561064/swiftui-multiple-buttons-in-a-list-row"">this question</a>.</p>
","8","Answer"
"77929536","77928775","<p>You could try using <a href=""https://en.wikipedia.org/wiki/Depth-first_search"" rel=""nofollow noreferrer"">dfs</a>:</p>
<pre class=""lang-py prettyprint-override""><code>def perms(string, current=&quot;&quot;, visited=None):
    if visited is None:
        visited = [False] * len(string)

    if len(current) == len(string):
        yield current
    else:
        for i in range(len(string)):
            if not visited[i]:
                visited[i] = True
                yield from perms(string, current + string[i], visited)
                visited[i] = False
</code></pre>
<p>Note that this will return a generator expression, so you can output with something like this:</p>
<pre class=""lang-py prettyprint-override""><code>for perm in perms(&quot;&quot;.join([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;])):
    print(perm)
</code></pre>
","1","Answer"
"77929547","77928775","<p>Recursive version:</p>
<pre><code>def combinations(items):
    if len(items) &lt;= 1:
        return [items]
    combs = []
    for i, item in enumerate(items):
        others = items.copy()
        others.pop(i)
        for sub_comb in combinations(others):
            whole = [item]
            whole.extend(sub_comb)
            combs.append(whole)
    return combs

elems = ['a', 'b', 'c', 'd']
all_combs = combinations(elems)
for comb in all_combs:
    print(''.join(comb))
</code></pre>
<p>It outputs 6 combinations for 3 elements, 24 for 4, 120 for 5, and so on.</p>
<p>This is <em>n!</em> (factorial), which is the exact number of <a href=""https://en.wikipedia.org/wiki/Permutation"" rel=""nofollow noreferrer"">permutations</a> that <em>n</em> distinct elements can produce.</p>
","3","Answer"
"77929705","77928775","<p>@hedfol's solution as a generator:</p>
<pre><code>def combinations(src,prefix=[]):
    if len(src) == 1:
        yield prefix+src
    else:
        for i,x in enumerate(src):
            for y in myperm(src[:i]+src[i+1:], prefix+[x]):
                yield y 
</code></pre>
","-1","Answer"
"77929724","77927315","<p>Q: <em><strong>&quot;Loop through each switch and, on each switch, loop through each ID.&quot;</strong></em></p>
<p>A: Adding <code>subelements('value')</code> to the pipe does the job</p>
<pre class=""lang-yaml prettyprint-override""><code>- debug:
    msg: &quot;{{ item.0.key }} {{ item.1 }}&quot;
  loop: &quot;{{ switch_vlan_ids|map('dict2items')|flatten|subelements('value') }}&quot;
</code></pre>
<p>gives (abridged)</p>
<pre class=""lang-yaml prettyprint-override""><code>  msg: switch01 1
  msg: switch01 10
  msg: switch01 30
  msg: switch01 50
  msg: switch02 1
  msg: switch02 20
  msg: switch02 40
  msg: switch02 60
</code></pre>
<hr>
<sup>
<p>Example of a complete playbook for testing</p>
<pre class=""lang-yaml prettyprint-override""><code>- hosts: all

  vars:

    switch_vlan_ids:
      - switch01: [&quot;1&quot;, &quot;10&quot;, &quot;30&quot;, &quot;50&quot;]
      - switch02: [&quot;1&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;]

  tasks:

    - debug:
        msg: &quot;{{ item.0.key }} {{ item.1 }}&quot;
      loop: &quot;{{ switch_vlan_ids|map('dict2items')|flatten|subelements('value') }}&quot;
</code></pre>
</sup>
","2","Answer"
"77930714","77930689","<p>Use a dictionary to count, and then compare, the frequency of each letter:</p>
<pre class=""lang-py prettyprint-override""><code>def most_frequent_character(sentence):
    character_frequency_dictionary = {} # make new dictionary to keep track of a character's frequency

    for character in sentence:
        # if we have not encountered this character before, set the count of the character to 1
        if character not in character_frequency_dictionary:
            character_frequency_dictionary[character] = 1

        # else, if we have see then character, increment the count of that character
        else:
            character_frequency_dictionary[character] += 1

    # now we have a dict of chars and their frequency, so we need to now see which is the most frequent

    # default values
    max_freq = 0
    most_freq_char = ''

    # compare each characters frequency to find the most frequent
    for character in character_frequency_dictionary:
        frequency = character_frequency_dictionary[character]

        if frequency &gt; max_freq:
            max_freq = frequency
            most_freq_char = character

    return most_freq_char


print(most_frequent_character('abcdeaa')) # a
print(most_frequent_character('AAaaddd')) # d (not checking case)
print(most_frequent_character('abcffff')) # f
print(most_frequent_character('iiiiiii')) # i
print(most_frequent_character('abcdefh')) # a (first found)
</code></pre>
<p>If needed, convert string to lowercase (using 'string'.lower()) if you need this case-insensitive</p>
","2","Answer"
"77930766","77930689","<p>While I was working on a solution, I do see that a couple of folks have come up with some solutions.  However, I will add this code to the mix to possibly give you one more direction for a solution.  Its basis is upon the usage of the &quot;array&quot; package, along with using the &quot;ord&quot; and &quot;chr&quot; functions to translate ASCII characters within an entered string.</p>
<pre><code>import array as arr

def maxi(sentence):
    a = arr.array('i', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) # Character counter array

    c = '#'     # Work variable that will hold the character with the highest count
    d = 0       # Work variable that will hold the maximum count

    for x in range(len(sentence)):      # Parse each character of the entered string/sentence
        ch = ord(sentence[x:x+1])       # Convert to its ASCII value

        if ch &gt;= 65 and ch &lt;= 90:       # Uppercase character
            a[ch - 65] = a[ch -65] + 1

        if ch &gt;= 97 and ch &lt;= 122:      # Lowercase character
            a[ch - 97] = a[ch -97] + 1

    for x in range(26):                 # Now read through the character counter array and determine the character with the largest value
        if a[x] &gt; d:
            c = chr(x + 65)
            d = a[x]
            
    print(&quot;The character with the highest count is&quot;, c, &quot;with a count of&quot;, d)    

    return

sentence = input(&quot;Enter a sentence or string: &quot;)

maxi(sentence)
</code></pre>
<p>I interspersed comments as to the functionality going on, but following are the key points.</p>
<ul>
<li>The &quot;array&quot; package is imported to allow for the storage of counts for each of the twenty-six characters that might be found in a string or sentence.</li>
<li>As the string is parsed, the &quot;ord&quot; function is used to convert the parsed character into an integer value which is subsequently used to increment the appropriate character counter element in the array.</li>
<li>After parsing, the count array is processed and the array element is tested, storing the associated character and its count when it is determined to currently be the character with the highest count.</li>
</ul>
<p>Following was a quick test of this code.</p>
<pre><code>craig@Vera:~/Python_Programs/Maximum$ python3 MaxChar.py 
Enter a sentence or string: My country tis of thee
The character with the highest count is T with a count of 3
</code></pre>
<p>As noted, just another train of thought to provide a solution.</p>
","0","Answer"
"77930793","77930689","<p>You could use the character that leaves the shortest rest when removed:</p>
<pre class=""lang-py prettyprint-override""><code>min(sentence, key=lambda c: len(sentence.replace(c, '')))
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=m72soLIkIz9vwYKlpSVpuhY3Y4pT80pS85JTFWwVlIrzc1MVYAJKXFwFRZl5JRq5mXkaMEEdhezUStucxNyklESFZCuFnFSEnF5RakFOYnKqRrKOgrq6JhBA7IBaBbMSAA"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
<p>You could use <code>min(set(sentence), ...)</code> or <code>min(alphabet, ...)</code> for more speed if necessary.</p>
<p>And do <code>sentence = sentence.upper()</code> beforehand if you want to treat lower and uppercase as the same character.</p>
","0","Answer"
"77930817","77930809","<p><em>Don't</em> modify a list while iterating over it.</p>
<p><em>Do</em> create a new list containing the items you want.</p>
<pre><code>se_names = [x for x in se_name if not (x in x_names)]
</code></pre>
","1","Answer"
"77930820","77930809","<p>The easiest way in this case is just remve elements on the list by their names, by using the <code>.remove</code> list method:</p>
<pre><code>for name in x_names:
    se_names.remove(name) 
</code></pre>
<p>This, of course, implies in a quadratic iteration, which can be a problem for big lists, and a large removal list (say... a 10 million item list, and a 1 million list of words to be removed).</p>
<p>So, another approach is simply build a new list altogether, excluding the items to be removed:</p>
<pre><code>x_names = set(se_names) - set(fi_names) 

se_list = [item for item in se_list if item not in x_names]
</code></pre>
<p>Keeping x_names as a set, and not converting it to a list (which is also uneeded in your approach) is important here, as the complexity to check if an item is in a set is O(1), in contrast with O(n)  if it is a list (taking you back to a quadratic approach).</p>
<p>This approach could do even the 10 million list with 1 million removals in a time close to 1 second (Just took 1.19s in my 2021 i7 - using a single core) - while the in-place removal from the first approach took 7 seconds to remove 10_000 items from a 100_000 length list)</p>
","0","Answer"
"77930836","77930689","<p>If you only care about the most used character then you can sort the string and iterate of the characters keeping track of how many times the current character has occurred. When characters change you compare the count to the current max and update if it is greater.</p>
<pre class=""lang-py prettyprint-override""><code>string = 'This can be any arbitrary string!!!!!!!'

#string = ''.join(filter(lambda x: x.isalpha(), string)) #Use this if you only care about alphabet charactes
string = string.lower() 

char = ''
current_count = 0
max_count = 0
max_char = ''
for c in sorted(string):
    if char != c:
        if current_count &gt; max_count:
            max_count = current_count
            max_char = char
        current_count = 1
        char = c
    else:
        current_count += 1
print(repr(max_char))```
</code></pre>
","0","Answer"
"77933958","77933909","<p>After your while loop, check that <code>counter</code> is not divisible by 10 (and thus the loop hasn't already printed a newline), and if so, print a newline.</p>
<pre><code>if (count % 10 != 0) {
    cout &lt;&lt; endl;
}
</code></pre>
","0","Answer"
"77933961","77933909","<p>You could add another <code>cout &lt;&lt; endl;</code> just before your return statement. This is outside the <code>while (n &gt; 1)</code> loop, so will add a final newline before exiting. However I suspect the auto grader will still complain about your tab character, since it will be printed in your <code>cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;</code> line from the n = 2 to n = 1 step.</p>
<p>If that doesn't work with the autograder you could try refactoring your code slightly, and separate the arithmetic and logging (while keeping both in the loop). For instance since the sequence <a href=""https://en.wikipedia.org/wiki/Collatz_conjecture"" rel=""nofollow noreferrer"">always ends with a 1</a> you can replace all of your logging with:</p>
<pre><code>    if (n == 1) {
        cout &lt;&lt; n &lt;&lt; &quot;\n&quot;;
    } else {
        cout &lt;&lt; n &lt;&lt; &quot;\t&quot;;
    }
</code></pre>
<p>Rather than logging the value after the arithmetic, which is a bit cleaner and will end the sequence on a newline.</p>
","0","Answer"
"77934497","77933909","<p>Note that all the numbers are separated by whitespace – the difference is just which whitespace is separating them.</p>
<p>You're printing &quot;number and tab&quot; as one unit, then occasionally adding a linebreak.<br />
This make every line end with &quot;number, tab, linebreak&quot;, and the last one with &quot;number, tab&quot;.</p>
<p>Instead print number, separator, number, separator, number, ...<br />
Finish the whole thing off with a linebreak after the loop.</p>
<p>Something like this:</p>
<pre><code>int main() {
    int counter = 1;
    int n; 
    cin &gt;&gt; n;
    // Print the first number
    cout &lt;&lt; n;
    while (n &gt; 1) {        
        // Select a separator.
        if (counter % 10 == 0) {
            cout &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; '\t';
        }
        // Determine the next number.
        if (n % 2 == 0) {
            n = n / 2;
        }
        else {
            n = 3 * n + 1;
        }
        // Print the number.
        cout &lt;&lt; n;
        counter++;
    }
    cout &lt;&lt; '\n';
}
</code></pre>
<p>You can also shorten the loop a bit:</p>
<pre><code>while (n &gt; 1) {   
    n = n % 2 == 0 ? n / 2 : 3 * n + 1;
    char separator = counter % 10 == 0 ? '\n' : '\t';
    cout &lt;&lt; separator &lt;&lt; n;
    counter++;
}
</code></pre>
","1","Answer"
"77935502","77935460","<p>One way is to get the Books and omit those values which are <code>None</code>.</p>
<pre><code>Books = [ { book_id: &quot;123&quot;, first_name: &quot;John&quot;, last_name: &quot;None&quot; } ]
</code></pre>
<p>You can have any number of elements in Books list.</p>
<pre><code>new_Books = [{k:v for k,v in Books[x].items() if v != 'None'} for x in range(len(Books))]
</code></pre>
<p>if it is not a string then:</p>
<pre><code>new_Books = [{k:v for k,v in Books[x].items() if v is not None} for x in range(len(Books))]
</code></pre>
<p>Another way can be to use <code>if</code> condition in the <code>for loop</code> but, I am exactly not sure how to implement it since do not have the actual data.</p>
","1","Answer"
"77936402","77935460","<p>Using below I am able to get the desired output:</p>
<pre><code>def output(self) -&gt; str:
        data = ''
        data += 'Books: [\n'
        for bookid, firstname, lastname in zip(self.book_id, self.first_name, self.last_name):
          data += '{'
          data += f'book_id: &quot;{bookid}&quot;,'
          data += f'firstname: &quot;{firstname}&quot;,'
          if last_name:
            data += f'lastname: &quot;{lastname}&quot;'
         data += '}'
        data = data [:-2] + '\n'
        data += ']\n'
        return data
</code></pre>
","0","Answer"
"77950800","77949551","<p>Use proper method (see <code>?terra::rast()</code> and <code>matrix-method</code> for details)</p>
<pre class=""lang-r prettyprint-override""><code>grd &lt;- list(x = (1:10), y = (1:10), z = matrix(1:100, 10, 10))
raster::raster(grd)
#&gt; class      : RasterLayer 
#&gt; dimensions : 10, 10, 100  (nrow, ncol, ncell)
#&gt; resolution : 1, 1  (x, y)
#&gt; extent     : 0.5, 10.5, 0.5, 10.5  (xmin, xmax, ymin, ymax)
#&gt; crs        : +proj=longlat +datum=WGS84 +no_defs 
#&gt; source     : memory
#&gt; names      : layer 
#&gt; values     : 1, 100  (min, max)


terra::rast(grd[[3]], crs = &quot;EPSG:4326&quot;)
#&gt; class       : SpatRaster 
#&gt; dimensions  : 10, 10, 1  (nrow, ncol, nlyr)
#&gt; resolution  : 1, 1  (x, y)
#&gt; extent      : 0, 10, 0, 10  (xmin, xmax, ymin, ymax)
#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) 
#&gt; source(s)   : memory
#&gt; name        : lyr.1 
#&gt; min value   :     1 
#&gt; max value   :   100


</code></pre>
<p><sup>Created on 2024-02-06 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
","0","Answer"
"77953709","77949551","<p>With terra version 1.7-72 (currently the development version) you can do</p>
<pre><code>x &lt;- terra::rast(grd)
</code></pre>
","1","Answer"
"77956798","77956765","<p>Don't modify lists whilst enumerating them.</p>
<p>You can achieve your objective more simply like this:</p>
<pre><code>from collections import Counter

oldlist = [42, 72, 32, 4, 94, 82, 67, 67, 89, 89, 89, 89, 5, 90, 5, 5]

newlist = []

for n, v in Counter(oldlist).items():
    if v % 2 == 0:
        newlist.extend([n]*v)

print(newlist)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[67, 67, 89, 89, 89, 89]
</code></pre>
","1","Answer"
"77956799","77956765","<p>The list is changing while you iterate - the <code>reversed</code> call just yields values from the list itself: it returns a specialized object that contains a reference to the initial list, and juggles the indices and <code>__iter__</code> so it can return what effectivelly works as a reversed list in O(1). Just iterate over a copy of it, for example, with
<code>for i in reversed(thing[:]):</code></p>
<p>here, the slice index <code>[:]</code> means &quot;create a new list with all the elements of this one  from the (first) to the (last)&quot;</p>
<p>In order for not have, at any moment, a copy of the list (but keep in minds such copies are &quot;shallow&quot;: all that is duplicated by <code>my_list[:]</code> are the references to the objects contained therein, not the objects themselves), you can make two passes: one selecting the indices to remove, and another to remove then:</p>
<pre><code>my_list = [1, 2, 3, 4, 5, 6]
to_remove = [item for item in my_list if item % 2] # (or any other predicate than &quot;item % 2&quot;
for index in reversed(to_remove):
    del my_list[index]
</code></pre>
<p>This code will not create a copy of the list, but the removal can be expensive, as it depends on the list length for each item.</p>
<p>All in all, the &quot;cheapest&quot; way to remove items is to create a new list, copying all but the items you want removed. This is done in a single pass, with all elements being appended (so, O(1) in non-exceptional cases (when a list resize is triggered internally, for example))</p>
<pre><code>my_list = [1, 2, 3, 4, 5, 6]
my_list = [item for item in my_list if item % 2]  
</code></pre>
","1","Answer"
"77958736","77958481","<p>In base R. Instead of using <code>do.call</code> use <code>array2DF</code> in R &gt;= 4.3. Note that You will need to have the names of the lists.</p>
<pre><code>nms &lt;- c('d.A.100', 'd.A.200', 'd.B.100', 'd.B.200')
d &lt;- array2DF(array(mget(nms), length(nms), list(df_name = nms)))

data.frame(d, row.names = NULL) ## to discard the rownames
</code></pre>
<hr />
<p>If you insist on using <code>do.call</code> or are stuck in older R versions,  use the following code:</p>
<pre><code>nms &lt;- c('d.A.100', 'd.A.200', 'd.B.100', 'd.B.200')
do.call(rbind, Map(cbind, mylist, df_name=nms))
</code></pre>
","2","Answer"
"77959233","77958481","<p>You can use the <code>lst</code> function from the <code>tibble</code> package to create a named list, then use that name to create a new column.</p>
<p>Using this method, you don't need to manually create a vector of dataframe names.</p>
<pre><code>library(tibble)

mylist &lt;- lst(d.A.100, d.A.200, d.B.100, d.B.200)
do.call(rbind, lapply(names(mylist), \(i) transform(mylist[[i]], df_name = i)))

            x          y df_name
1  0.26550866 0.20597457 d.A.100
2  0.37212390 0.17655675 d.A.100
3  0.57285336 0.68702285 d.A.100
4  0.90820779 0.38410372 d.A.100
5  0.20168193 0.76984142 d.A.100
6  0.89838968 0.49769924 d.A.100
7  0.94467527 0.71761851 d.A.100
8  0.66079779 0.99190609 d.A.100
9  0.62911404 0.38003518 d.A.100
10 0.06178627 0.77744522 d.A.100
11 0.93470523 0.48208012 d.A.200
12 0.21214252 0.59956583 d.A.200
13 0.65167377 0.49354131 d.A.200
14 0.12555510 0.18621760 d.A.200
15 0.26722067 0.82737332 d.A.200
16 0.38611409 0.66846674 d.A.200
17 0.01339033 0.79423986 d.A.200
18 0.38238796 0.10794363 d.A.200
19 0.86969085 0.72371095 d.A.200
20 0.34034900 0.41127443 d.A.200
21 0.82094629 0.47761962 d.B.100
22 0.64706019 0.86120948 d.B.100
23 0.78293276 0.43809711 d.B.100
24 0.55303631 0.24479728 d.B.100
25 0.52971958 0.07067905 d.B.100
26 0.78935623 0.09946616 d.B.100
27 0.02333120 0.31627171 d.B.100
28 0.47723007 0.51863426 d.B.100
29 0.73231374 0.66200508 d.B.100
30 0.69273156 0.40683019 d.B.100
31 0.91287592 0.33907294 d.B.200
32 0.29360337 0.83944035 d.B.200
33 0.45906573 0.34668349 d.B.200
34 0.33239467 0.33377493 d.B.200
35 0.65087047 0.47635125 d.B.200
36 0.25801678 0.89219834 d.B.200
37 0.47854525 0.86433947 d.B.200
38 0.76631067 0.38998954 d.B.200
39 0.08424691 0.77732070 d.B.200
40 0.87532133 0.96061800 d.B.200
</code></pre>
","0","Answer"
"77967790","77967752","<p>You need to have a variable that will track the current state and switch it when you encounter the &quot;switch&quot; word:</p>
<pre><code>def flick_switch(lst):
    x = []
    current_state = True
    for i in lst:
        if i == &quot;switch&quot;:
            current_state = not current_state
        x.append(current_state)
    return x
</code></pre>
<p>Note that <code>current_state = not current_state</code>, if <code>current_state</code> was <code>True</code> it will switch it to <code>False</code>, if <code>current_state</code> was <code>False</code> it'll switch it to <code>True</code>.</p>
","2","Answer"
"77968412","77967972","<p>What I would do:</p>
<pre><code>for file in *.txt; do
    echo &quot;$(&lt;&quot;$file&quot;)#$file&quot; | tee new_file.txt
done
cat new_file.txt
</code></pre>
","0","Answer"
"77969161","77967752","<p>This answer is only suited for people who really can't refrain from using itertools for everything; for normal people, I recommend following the advice from Yevhen's answer instead.</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import accumulate
from operator import eq

def flick_switch(lst):
    return list(accumulate(((s != 'switch') for s in lst), eq))

print(flick_switch(['hello', 'what', 'switch', 'am', 'i', 'doing', 'switch', 'here']))
# [True, True, False, False, False, False, True, True]
</code></pre>
<ul>
<li><a href=""https://docs.python.org/3/library/itertools.html#itertools.accumulate"" rel=""nofollow noreferrer"">itertools.accumulate</a></li>
</ul>
","2","Answer"
"77972699","77972394","<p>You need to generate the complete string, with all the lines (rows of the table) and then pass it to the <code>text</code> argument, for example:</p>
<pre><code>Import_Lab.config(text=&quot;\n&quot;.join(&quot;\t&quot;.join(row) for row in Baseline_Data))
</code></pre>
<p>For the table to display correctly, <strong>use a monospace font for that label</strong>.</p>
<pre><code>from tabulate import tabulate
import tkinter as tk
from tkinter import ttk


def import_button1_press():

    baseline_data = [
        ['     IM      |', 'IM.Ser', 'Maj', 'Min', 'IIB.Ser', 'Maj', 'Min', 'ManfDate'],
        ['---------------------------------------------------------------------------'],
        ['1 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM4 |',       'NA', 'NA', 'NA',    'NA', 'NA', 'NA',     'NA'],
        ['1 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM4 |',       'NA', 'NA', 'NA',    'NA', 'NA', 'NA',     'NA'],
        ['2 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;]
    ]
    
    table = &quot;\n&quot;.join(&quot;\t&quot;.join(row) for row in baseline_data)
    import_lab.config(text=table)


root = tk.Tk()
note = ttk.Notebook(root)

tab1 = ttk.Frame(note)

canvas1 = tk.Canvas(tab1, width=850, height=650)
canvas1.pack()

tab2 = ttk.Frame(note)

canvas2 = tk.Canvas(tab2, width=850, height=650)
canvas2.pack()

import_button1 = tk.Button(
    tab2, text='Import XML [Baseline]',
    width=25, height=2,
    command=import_button1_press
    )
import_button_window = canvas2.create_window(
    25, 40, anchor='w', window=import_button1
    )

import_lab = tk.Label(tab2, font=('Consolas', 10), justify=tk.LEFT, anchor='nw')
import_lab_window = canvas2.create_window(
    425, 350, anchor='center', window=import_lab
    )

note.add(tab1, text=&quot; Main &quot;)
note.add(tab2, text=&quot; Baseline Data &quot;)

note.pack()
root.mainloop()
</code></pre>
<p><a href=""https://i.sstatic.net/0yWW8.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/0yWW8.png"" alt=""enter image description here"" /></a>
Another option to generate plain text tables easily is to use the <a href=""https://pypi.org/project/tabulate/"" rel=""nofollow noreferrer"">tabulate package</a>:</p>
<pre><code>from tabulate import tabulate
import tkinter as tk
from tkinter import ttk


def import_button1_press():

    baseline_data = [
        ['     IM      |', 'IM.Ser', 'Maj', 'Min', 'IIB.Ser', 'Maj', 'Min', 'ManfDate'],
        ['---------------------------------------------------------------------------'],
        ['1 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM4 |',       'NA', 'NA', 'NA',    'NA', 'NA', 'NA',     'NA'],
        ['1 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['1 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM4 |',       'NA', 'NA', 'NA',    'NA', 'NA', 'NA',     'NA'],
        ['2 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
        ['2 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;]
    ]

    table = tabulate(
        baseline_data[2:], headers=baseline_data[0], tablefmt=&quot;fancy_grid&quot;
        )
    import_lab.config(text=table)


root = tk.Tk()
note = ttk.Notebook(root)

tab1 = ttk.Frame(note)

canvas1 = tk.Canvas(tab1, width=850, height=650)
canvas1.pack()

tab2 = ttk.Frame(note)

canvas2 = tk.Canvas(tab2, width=850, height=650)
canvas2.pack()

import_button1 = tk.Button(
    tab2, text='Import XML [Baseline]',
    width=25, height=2,
    command=import_button1_press
    )
import_button_window = canvas2.create_window(
    25, 40, anchor='w', window=import_button1
    )

import_lab = tk.Label(tab2, font=('Consolas', 8), justify=tk.LEFT, anchor='nw')
import_lab_window = canvas2.create_window(
    425, 325, anchor='center', window=import_lab
    )

note.add(tab1, text=&quot; Main &quot;)
note.add(tab2, text=&quot; Baseline Data &quot;)

note.pack()
root.mainloop()
</code></pre>
<p><a href=""https://i.sstatic.net/mAihA.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/mAihA.png"" alt=""enter image description here"" /></a></p>
","2","Answer"
"77973221","77972394","<p>Add a <code>Label</code> inside Import_Lab_Window with an empty text. On clicking the <code>Button</code>, the function Import_Button1_Press() which configures the label-text with the data given. To display data displayed as lines, add '\n' to every end of the line.</p>
<pre><code>import tkinter as tk
from tkinter import ttk
from tkinter import *



def Import_Button1_Press():

    Baseline_Data = [
    ['     IM      |', 'IM.Ser', 'Maj', 'Min', 'IIB.Ser', 'Maj', 'Min', 'ManfDate'],
    ['---------------------------------------------------------------------------'],
    ['1 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM4 |', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA'],
    ['1 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['1 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM1 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM2 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM3 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM4 |', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA'],
    ['2 - IM5 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;],
    ['2 - IM6 |',    &quot;12345&quot;, &quot;22&quot;, &quot;33&quot;, &quot;12345&quot;, &quot;55&quot;, &quot;66&quot;, &quot;123456&quot;]
    ]

    for row in Baseline_Data:
        # Display List as Table
        data = '\n'.join(row)
        lbl.configure(text = data)
        
        
root = Tk()
note = ttk.Notebook(root)
Tab1 = ttk.Frame(note)

canvas1 = Canvas(Tab1, width=550, height=350)
canvas1.pack()

Tab2 = ttk.Frame(note)

canvas2 = Canvas(Tab2, width=550, height=350)
canvas2.pack()

Import_Button1 = tk.Button(Tab2, text = 'Import XML [Baseline]', width=25, height=2, command=Import_Button1_Press)
Import_Button_Window = canvas2.create_window(25, 40, anchor = 'w', window = Import_Button1)

Import_Lab = Label(Tab2, anchor=W)
Import_Lab_Window = canvas2.create_window(275, 175, anchor = 'center', window = Import_Lab)

#Add lbl inside Import_Lab_Window

lbl = Label(Import_Lab_Window, text = '')
lbl.pack()



note.add(Tab1, text = &quot; Main &quot;)
note.add(Tab2, text = &quot; Baseline Data &quot;)

note.pack()
root.mainloop()
</code></pre>
","0","Answer"
"77973438","77973417","<p><code>foldr1 :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; a</code> is meant for when the result of the fold is the same type as the elements of the list. Since your result is a number and the list elements are tuples it isn't the right function here. <code>foldr</code> is probably the correct one:</p>
<pre class=""lang-hs prettyprint-override""><code>foldr (\x y -&gt; fst(x) + snd(x) + y) 0 [(1,2),(3,4)]
</code></pre>
","3","Answer"
"77973439","77973417","<p>you can not use <code>foldr1</code>, since the first item is a 2-tuple, so then <code>y</code> would be a 2-tuple as well.</p>
<p>You can use <code>foldr</code> instead:</p>
<pre><code>foldr (\x y -&gt; fst(x) + snd(x) + y) 0 [(1,2),(3,4)]
</code></pre>
<p>or simpler:</p>
<pre><code>foldr (\(x1, x2) y -&gt; x1 + x2 + y) 0 [(1,2),(3,4)]
</code></pre>
","5","Answer"
"77974160","77973671","<p>Removing the <code>&quot;!&quot;</code> is a good idea: they only provide redundant information. But the spaces cannot just be replaced with slashes. Instead keep track of the current path in the form of a list, but always truncate that path so that the number of items in that path does not exceed the number of spaces you have in front of the current text.</p>
<p>Here is a generator function that does that. Note that it relies on the fact that your indentation happens with one space at a time:</p>
<pre><code>def get_paths(lines):
    path = []
    for line in lines.splitlines():
        content = line.lstrip()
        if content.rstrip() not in &quot;!&quot;:
            indent = len(line) - len(content)
            if indent &lt; len(path):
                yield &quot;/&quot;.join(path)
            path[indent:] = [content]
    if path:
        yield &quot;/&quot;.join(path)
</code></pre>
<p>If you cannot rely on a consistent indentation, but the indentation  could increase with two spaces and sometimes three, ...etc, then you need to cope with that:</p>
<pre><code>def get_paths(lines):
    path = []
    indents = [0]
    for line in lines.splitlines():
        content = line.lstrip()
        if content.rstrip() not in &quot;!&quot;:
            indent = len(line) - len(content)
            while indent &lt; indents[-1]:
                indents.pop()
            if indent &gt; indents[-1]:
                indents.append(indent)
            elif path:
                yield &quot;/&quot;.join(path)
            path[len(indents)-1:] = [content]
    if path:
        yield &quot;/&quot;.join(path)
</code></pre>
<p>Example use:</p>
<pre><code>s = &quot;&quot;&quot;
Shoes
Fruits
 Red
  Apple
  Cherry
 !
 Yellow
  Banana
  Grapes
   Small
   Big
  !
 !
!
&quot;&quot;&quot;

result = list(get_paths(s))
print(result)
</code></pre>
","0","Answer"
"77977858","77977824","<p><code>str(list4[0:][0])</code></p>
<p>Because you wrapped this in <code>str()</code>, the result is of course a <strong>string</strong>:</p>
<pre><code>&quot;['5', '6', '7']&quot;
</code></pre>
<p><code>[</code> is the first character of this string.  (position 0)</p>
<p><code>'</code> is the second character.  (position 1)</p>
<p><code>5</code> is the third character.  (position 2)</p>
","0","Answer"
"77977860","77977824","<p>You've got the str() in the wrong place.</p>
<p>You are typing <code>str(list4[0:][0])</code> which turns it into the string &quot;['5', '6', '7']&quot;.  The character '5' is at index 2 of that string.</p>
<p>I believe you want <code>str(......)</code> around the whole expression.  But I'm not sure why you want to convert it to a string.</p>
","0","Answer"
"77977907","77977824","<p>This is an easy one to work out with the python shell. First, I'm going to make this a working script, because of course you need a working script to debug things. And I'm not going to use <code>list</code> as a variable because it masks the <code>list</code> builtin function, hindering debug.</p>
<pre><code>list1 = [['5', '6', '7'], ['1', '2', '3', '4', '5', '6', '7']]
list4 = [['5', '6', '7'], ['3', '1', '8']]

index = str(list4[0:][0]).index(list1[0][0])

print(index) #output: 2??
</code></pre>
<p>Then I'm going to enter interactive mode with <code>python3 -i test.py</code> and decompose that statement into parts</p>
<pre><code>$ python3 -i test.py
2
&gt;&gt;&gt; list4[0:][0]
['5', '6', '7']
&gt;&gt;&gt; str(['5', '6', '7'])
&quot;['5', '6', '7']&quot;
</code></pre>
<p>There's your problem. You've got a string and &quot;5&quot; is in position 2. You can see that by exploding the string</p>
<pre><code>&gt;&gt;&gt; list(&quot;['5', '6', '7']&quot;)
['[', &quot;'&quot;, '5', &quot;'&quot;, ',', ' ', &quot;'&quot;, '6', &quot;'&quot;, ',', ' ', &quot;'&quot;, '7', &quot;'&quot;, ']']
</code></pre>
<p>To get the index, don't convert to a string</p>
<pre><code>&gt;&gt;&gt; list4[0:][0].index(list[0][0])
0
</code></pre>
<p>And you didn't need to make an anonymous copy of that list. All you're doing is burning cycles. This works the same</p>
<pre><code>&gt;&gt;&gt; list4[0].index(list[0][0])
0
</code></pre>
","0","Answer"
"77977952","77977824","<p><code>list4[0:]</code> gives nothing, but the original list4, and <code>list[0:][0]</code> gives the first element of list4, which is <code>['5', '6', '7']</code>.</p>
<p><code>list[0][0]</code> give '5', and you get the index of '5' in <code>str(['5', '6', '7'])</code>.
The index of 5 in <code>str(['5', '6', '7'])</code> is 2.</p>
","1","Answer"
"77980800","77980681","<p>you can using list comprehensions</p>
<pre><code>names = [item['name'] for item in data]
ages = [item['age'] for item in data]
</code></pre>
","1","Answer"
"77980905","77980681","<p>You can use simple comprehension lists as follows to separate those two:</p>
<pre><code>names = [d['name'] for d in data]
ages = [d['age'] for d in data]
</code></pre>
<p>If you want a more generic version that just looks at the first dict's keys as a reference you can use the following for loop, even though I wouldn't recommend it as this can easily break your code if you define variables that way, and Pylance will detect this as erroneous code as you don't explicitly define the variable names as variables but rather a string:</p>
<pre><code>data = [{'name': 'Alessandra', 'age': 24}, {'name': 'Sasha', 'age': 37}, {'name': 'Jason', 'age': 42}]

for key in data[0].keys():
   exec(f&quot;{key}s = [d[key] for d in data]&quot;) # adding an s to variable names.

print(names)
print(ages)
</code></pre>
","0","Answer"
"77980995","77980681","<pre><code> data=[{'name': 'Alessandra', 'age': 24}, {'name': 'Sasha', 'age': 37}, {'name': 'Jason', 'age': 42}]

 name = []

 age = []

 for item in data:

    name.append(item.get(&quot;name&quot;))
    age.append(item.get(&quot;age&quot;))

print(name)

print(age)
</code></pre>
","0","Answer"
"77981161","77980681","<p>A general solution creating a dictionary of lists.</p>
<pre class=""lang-py prettyprint-override""><code>
from collections import defaultdict

data = [
    {'name': 'Alessandra', 'age': 24}, 
    {'name': 'Sasha', 'age': 37}, 
    {'name': 'Jason', 'age': 42}
]

transformed = defaultdict(list)

for _ in data:
    for k, v in _.items():
        transformed[k].append(v)

</code></pre>
<p>Resulting <code>transformed</code>:</p>
<pre><code>{'name': ['Alessandra', 'Sasha', 'Jason'], 'age': [24, 37, 42]}
</code></pre>
","0","Answer"
"77981630","77981513","<p>You may try-</p>
<pre><code>=LET(x,DROP(REDUCE(&quot;&quot;,TOCOL(A2:A4&amp;&quot;|&quot;&amp;B2:D4),LAMBDA(a,x,VSTACK(a,TEXTSPLIT(x,&quot;|&quot;)))),1),FILTER(x,CHOOSECOLS(x,2)&lt;&gt;&quot;&quot;))
</code></pre>
<p><a href=""https://i.sstatic.net/OzQNP.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/OzQNP.png"" alt=""enter image description here"" /></a></p>
","2","Answer"
"77981666","77981513","<p>You could try:</p>
<p><a href=""https://i.sstatic.net/4s3Yr.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/4s3Yr.png"" alt=""enter image description here"" /></a></p>
<p>Formula in <code>F2</code>:</p>
<pre><code>=HSTACK(TOCOL(IFS(B2:D5&lt;&gt;&quot;&quot;,A2:A5),3),TOCOL(B2:D5,1))
</code></pre>
","5","Answer"
"77981760","77981513","<h2>Transform Data: Unpivot, Skip Blanks</h2>
<pre><code>=LET(data,A2:D5,
    d,IF(data=&quot;&quot;,&quot;&quot;,data),
    v,DROP(d,,1),
    vc,TOCOL(v),
    rc,TOCOL(IF(SEQUENCE(,COLUMNS(v)),TAKE(d,,1))),
    FILTER(HSTACK(rc,vc),vc&lt;&gt;&quot;&quot;))
</code></pre>
<p><a href=""https://i.sstatic.net/0HmYw.jpg"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/0HmYw.jpg"" alt=""enter image description here"" /></a></p>
<p><strong>LAMBDA</strong></p>
<p>--&gt; Name Manager e.g. <code>USB</code></p>
<pre><code>=LAMBDA(data,LET(d,IF(data=&quot;&quot;,&quot;&quot;,data),v,DROP(d,,1),vc,TOCOL(v),FILTER(HSTACK(TOCOL(IF(SEQUENCE(,COLUMNS(v)),TAKE(d,,1))),vc),vc&lt;&gt;&quot;&quot;)))
</code></pre>
<p>--&gt; Anywhere in the Workbook, e.g.:</p>
<pre><code>=USB(A2:D5)
</code></pre>
<p><strong>Edit</strong></p>
<p>JvdV's great idea lead me to this:</p>
<pre><code>=LET(data,A2:D5,
    ToColNB,LAMBDA(nbdata,data,TOCOL(IFS(nbdata&lt;&gt;&quot;&quot;,data),2)),
    d,IF(data=&quot;&quot;,&quot;&quot;,data),
    v,DROP(d,,1),
    HSTACK(ToColNB(v,TAKE(d,,1)),ToColNB(v,v)))
</code></pre>
","3","Answer"
"77982232","77981842","<p><a href=""https://docs.cypress.io/api/commands/find"" rel=""nofollow noreferrer"">The Cypress command you want to use is <code>cy.find()</code>.</a> This will search a descendant DOM element, where <code>cy.get()</code> starts from the top of the DOM for searching. <a href=""https://docs.cypress.io/api/commands/get#Get-vs-Find"" rel=""nofollow noreferrer"">From the <code>cy.get()</code> documentation:</a></p>
<blockquote>
<p>The <code>cy.get</code> command always starts its search from the cy.root element. In most cases, it is the document element, unless used inside the .within() command. The .find command starts its search from the current subject.</p>
</blockquote>
<pre class=""lang-js prettyprint-override""><code>cy.get('[data-e2e-selector=case-row]')
  .first()
  .find('[data-e2e-selector=innsendtDato]')
  .should('contain.text', &quot;3. sep&quot;);
</code></pre>
<p>Alternatively, you could use <code>.within()</code> to yield the first element and then use <code>cy.get()</code> within that callback.</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('[data-e2e-selector=case-row]')
  .first()
  .within(($el) =&gt; {
    cy.get('[data-e2e-selector=innsendtDato]')
      .should('contain.text', &quot;3. sep&quot;);
  });
</code></pre>
<p>When chaining a <code>cy.get()</code> off of the your <code>.first()</code> command, you're not actually using the yield of the <code>.first()</code> command to perform your search. The test is marked as passed because the result of the second <code>cy.get()</code> (innsendtDato) yields 21 elements (all elements found by <code>cy.get('[data-e2e-selector=innsendtDato]')</code>) and at least one of those elements does contain the text <code>3. sep</code>.</p>
","1","Answer"
"77983701","77973671","<p>Since this question is tagged 'recursion', below is my obligatory attempt at a recursive solution:</p>
<pre><code>def get_paths(lines, indentation=0):
    paths = []

    while lines:
        line = lines[0]

        if (path := line.lstrip()) == &quot;!&quot;:
            return paths

        if (indent := len(line) - len(path)) &gt; indentation:
            path = paths.pop()

            for sub_path in get_paths(lines, indent):
                paths.append(path + &quot;/&quot; + sub_path)
        else:
            paths.append(path)

        lines.pop(0)

    return paths

print(&quot;\n&quot;.join(get_paths(Given_String.splitlines())))
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>% python3 test.py
Shoes
Fruits/Red/Apple
Fruits/Red/Cherry
Fruits/Yellow/Banana
Fruits/Yellow/Grapes/Small
Fruits/Yellow/Grapes/Big
% 
</code></pre>
","0","Answer"
"77983894","77981842","<p>In this case you don't really need the <code>case-row</code> selector in the chain, you can just apply <code>.first()</code> to <code>innsendtDato</code>.</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('[data-e2e-selector=innsendtDato]').first().should('contain.text', &quot;3. sep&quot;)  
</code></pre>
<hr />
<p>The key thing you missed in your test is the concept of parent and child commands.</p>
<p>See <a href=""https://docs.cypress.io/api/cypress-api/custom-commands#Parent-Commands"" rel=""nofollow noreferrer"">Parent Commands</a></p>
<blockquote>
<p>Parent commands always begin a new chain of commands.</p>
<p>Even if you've chained it off of a previous command, parent commands will always start a new chain, and <em><strong>ignore previously yielded subjects</strong></em>.</p>
</blockquote>
<p><code>.get('[data-e2e-selector=innsendtDato]')</code> is a <strong>Parent</strong> command, so it ignores the <code>.first()</code> that comes before it.</p>
","1","Answer"
"78047384","77967972","<p>I had finally succeeded to accomplish this through a bat file, below is my code</p>
<pre><code>@echo off
setlocal enabledelayedexpansion

REM Create an empty merged file
type nul &gt; merged_file.txt

REM Loop through each text file
for %%f in (*.txt) do (
    REM Extract filename without extension
    set &quot;filename=%%~nf&quot;
    
    REM Append each line with filename to merged file
    for /f &quot;tokens=*&quot; %%i in (%%f) do (
        echo %%i#!filename!.txt&gt;&gt; merged_file.txt
    )
)

echo Merging completed.
</code></pre>
","0","Answer"
"78734982","77928909","<p>You can apply any button style Except for .automatic.</p>
<pre><code>    ForEach(list) { item in
        HStack {
            Button(action: {
                print(&quot;Button at \(item)&quot;) }) {
                    Text(&quot;Row: \(item) Name: A&quot;)
                }
                .buttonStyle(.borderless)
            
            Button(action: { print(&quot;Button at \(row)&quot;) }) {
                Text(&quot;Row: \(item) Name: B&quot;)
            }
            .buttonStyle(.plain)
        }
    }
</code></pre>
","1","Answer"
"77984358","77984325","<p>Check out the Python shell help command:</p>
<pre><code>&gt;&gt;&gt; help(list1.insert)

insert(index, object, /) method of builtins.list instance
    Insert object before index.
</code></pre>
<p>It inserts before the index, not after. If you try <code>2</code>, it's after index 1 but before the existing index 2, giving you a new index 2. If you try <code>3</code>, it's after 2 and before 3. But since there isn't a 3, it's just put on the end of the list.</p>
<p>And it all makes sense. As long as you are within the current bounds of the list, &quot;index&quot; is what the index will be after insertion.</p>
<p>Using the shell, you can see it all in action</p>
<pre><code>&gt;&gt;&gt; list1 = [11, 2, 23]
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; for i, val in enumerate(list1):
...     print(f&quot;{i}: {val}&quot;)
... 
0: 11
1: 2
2: 23
&gt;&gt;&gt; 
&gt;&gt;&gt; list1.insert(3,5)
&gt;&gt;&gt; 
&gt;&gt;&gt; for i, val in enumerate(list1):
...     print(f&quot;{i}: {val}&quot;)
... 
0: 11
1: 2
2: 23
3: 5
</code></pre>
","2","Answer"
"77984374","77984325","<p>The position in a list in python is the same as the index. Or more formally:
each element inside a list will have a unique position that identifies it. That position is called the element's index.</p>
<p>Because if you run the code you will get the following list:</p>
<pre><code>[11, 2, 23, 5] 
</code></pre>
<p>Here is also a definition of the insert function, with parameters:</p>
<p>insert() Parameters
The insert() method takes two parameters:</p>
<p>index - the index where the element needs to be inserted
element - this is the element to be inserted in the list</p>
","0","Answer"
"77984646","77981842","<p>The message <code>expected '[ &lt;td#sakInnsendtDato_0.ng-star-inserted&gt;, 20 more... ]' to contain text...</code> is saying</p>
<blockquote>
<p>Hey I found 21 elements from your query and <em><strong>at least one of them</strong></em> has the text you want.</p>
</blockquote>
<p>Another way to narrow down the selection is to use <code>contains(/^3. sep$/)</code> - that command only ever returns one element.</p>
<p><strong>NOTE</strong> I'm using regex to find the string, since one date can be part of another date e.g <code>3. sep</code> and <code>23. sep</code>.</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('table#my-table [data-e2e-selector=innsendtDato]')    // 21 elements
  .contains(/^3. sep$/)                       // filter based on the text
  .should('have.length', 1)                   // only one matches

cy.contains('table#my-table [data-e2e-selector=innsendtDato]', /^3. sep$/)  
  .should('have.length', 1)                   // only one matches
</code></pre>
<p>If you want to work with the <code>case-row</code>, you can specify that element instead of the date element.</p>
<p>The children will also be checked, but the element returned is the one specified by the selector.</p>
<pre class=""lang-js prettyprint-override""><code>cy.contains('table#my-table [data-e2e-selector=&quot;case-row&quot;]', /^3. sep$/)  
  .should('have.length', 1)               
</code></pre>
<hr />
<h3>Verifying the text is on the nth row</h3>
<p>There is an <code>index()</code> method that will tell you which row has the text searched for.</p>
<p>For example, the first and second rows:</p>
<pre class=""lang-js prettyprint-override""><code>cy.get('table#my-table [data-e2e-selector=date]')
  .contains(/^3. sep$/)
  .parent()           // to parent row 
  .invoke('index')
  .should('eq', 0)    // &quot;3 Sep&quot; is on the first parent
</code></pre>
<pre class=""lang-js prettyprint-override""><code>cy.get('table#my-table [data-e2e-selector=date]')
  .contains(/^12. sep$/)
  .parent()           // to parent row  
  .invoke('index')
  .should('eq', 1)    // &quot;12 Sep&quot; is on the second parent
</code></pre>
<p>or</p>
<pre class=""lang-js prettyprint-override""><code>cy.contains('table#my-table [data-e2e-selector=&quot;case-row&quot;]', /^3. sep$/)  
  .invoke('index')
  .should('eq', 0)    // &quot;3 Sep&quot; is on the first parent    
</code></pre>
<pre class=""lang-js prettyprint-override""><code>cy.contains('table#my-table [data-e2e-selector=&quot;case-row&quot;]', /^3. sep$/)  
  .invoke('index')
  .should('eq', 1)    // &quot;12 Sep&quot; is on the second parent        
</code></pre>
","1","Answer"
"77985129","77985090","<p>You can use <code>typing</code> to <em>hint</em> at what this should be, but to really assert the values, you'll need to check them all<br />
conveniently, <code>all()</code> will short-circuit on the first non-Truthy value</p>
<p>Typing</p>
<pre class=""lang-py prettyprint-override""><code>from typing import Union

def function(param: Union[list[str], list[int]):
    ...
</code></pre>
<p>To assert at runtime</p>
<pre class=""lang-py prettyprint-override""><code>def function(param):
    try:
        param_iter = iter(param)
    except TypeError as ex:  # param is not iterable
        raise TypeError(f&quot;param must be iterable, but got {type(param)})&quot; from ex

    for test_type in (int, str):
        if all(isinstance(v, test_type) for v in param_iter):
            break  # escape for loop
        param_iter = iter(param)  # fresh iterable and continue
    else:  # did not break
        raise TypeError(&quot;function only accepts homogenous iterables of int or str&quot;)
    ...  # rest of function
</code></pre>
<p>NOTE this is a bit more permissive allowing <code>param</code> to be any <em>iterable</em>, but you can go ahead and assert whatever else you like - beware, however, that this design will consume generators, so more work would be wanted to collect and assert their values (realistically, warning callers with comments and usage hints tends to be better than trying to force them to use your function the way you intend it to be used)</p>
","1","Answer"
"77985359","77985090","<p>I'm still a beginner, but I will try :)</p>
<p>IDK how to do it, but you can check the first element and compare it with the rest of list</p>
<pre><code>def func(param: list):
  if type(param[0])!=int and type(param[0])!=str:
    raise Exception(&quot;this function accepts only array of integers or array of strings&quot;)
  for i in range(1,len(param)):
    if type(param[i]) != type(param[0]):
      raise Exception(&quot;this function accepts only array of integers or array of strings&quot;)
</code></pre>
","-2","Answer"
"77989283","77989110","<p>In this case, I think you can split on numbers and strip out the leading characters you don't want. Then re-introduce your numbering via <code>enumerate()</code></p>
<pre class=""lang-py prettyprint-override""><code>import re

def post_processing(text):
    &quot;&quot;&quot;
    Post-processes a text string to address formatting issues for voice synthesis.

    Args:
      text: The input text string.

    Returns:
      The processed text string.
    &quot;&quot;&quot;

    return &quot;Suggestions for restaurants: &quot; + &quot; &quot;.join(
        f&quot;{i}. {p.strip(' .')}&quot;
        for i, p
        in enumerate(re.split(r&quot;\d&quot;, text)[1:-1], start=1)
    )

text = &quot;Suggestions for restaurants: 1 . Pizza2. Burger3. Sushi4. Noodles....&quot;
print(text)
print(post_processing(text))
</code></pre>
<p>Giving you:</p>
<pre><code>Suggestions for restaurants: 1 . Pizza2. Burger3. Sushi4. Noodles....
Suggestions for restaurants: 1. Pizza 2. Burger 3. Sushi
</code></pre>
<p>If your ultimate goal is to take your input text and just give the numbers in it proper spacing then maybe I might use:</p>
<pre><code>text = &quot;Suggestions for restaurants: 1 . Pizza2. Burger3. Sushi4. Noodles....&quot;
text = re.sub(r&quot;\s*(\d)\s*\.?\s*&quot;, r&quot; \1. &quot;, text).split(&quot; 4.&quot;)[0]
print(text)
</code></pre>
<p>With the new test:</p>
<pre class=""lang-py prettyprint-override""><code>import re

def post_processing(text):
  text = re.sub(r&quot;\s*(\d)\s*\.?\s*&quot;, r&quot; \1. &quot;, text).split(&quot; 4.&quot;)[0].strip()    
  if text.endswith(&quot;.&quot;):
      text = text[:-3]
  return text

print(post_processing(&quot;Suggestions for restaurants: 1 . Pizza2. Burger3. Sushi4. Noodles....&quot;))
print(post_processing(&quot;Recommendation of Stadiums: 1.OldTrafford 2Manchester Birmingham3&quot;))
</code></pre>
<pre><code>Suggestions for restaurants: 1. Pizza 2. Burger 3. Sushi
Recommendation of Stadiums: 1. OldTrafford 2. Manchester Birmingham
</code></pre>
","0","Answer"
"77989341","77989053","<p>It seems to me that in your deallocate function:</p>
<p>The first time del takes the value of curr, then you deallocate del, but del and curr are now the same. Then you use curr-&gt;next, but curr is no longer valid.</p>
","-1","Answer"
"77989343","77989053","<p>There are several problems:</p>
<p>These lines in <code>main</code> are pointless:</p>
<pre><code>    person p1 = { 2, NULL };
    person p2 = { 3, NULL };
    head = &amp;p1;
    p1.next = &amp;p2;
</code></pre>
<p>It creates a mix of statically and dynamically allocated nodes which cannot be handled with without major hassle, because sooner or later you will end up freeing a statically allocated node which cannot work. Just don't do it</p>
<p>Then the prototype <code>void deallocating(person **head);</code> is wrong, the name of your function is <code>deallocate</code>. Your compiler should have warned you at least.</p>
<p>And last but not least, your insert functions are wrong. The case of the <code>head</code> being NULL needs special handling, as shown in the code below.</p>
<p>I leave it as an exercice to you to correct the other insert functions.</p>
<p>The <code>deallocate</code> functions looks OK to me.</p>
<p>Another thing is that <code>malloc</code> may return NULL (although this is unlikely with simple exercises like this one on a desktop computer) and you should check this. You can handle this at a later stage.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct person {
  int age;
  struct person* next;
} person;

void insert_end(person** head, int x);

int main() {
  person* head = NULL;
  
  insert_end(&amp;head, 4);
  insert_end(&amp;head, 5);

  for (person* curr = head; curr != NULL; curr = curr-&gt;next) {
    printf(&quot;%d\n&quot;, curr-&gt;age);
  }

  return 0;
}

void insert_end(person** head, int x) {
  person* nextnode = malloc(sizeof(person));
  nextnode-&gt;age = x;
  nextnode-&gt;next = NULL;

  if (*head == NULL)  // if head is null the person just created
  {                   // becomes the head
    *head = nextnode;
    return;
  }

  person* find = *head;
  while (find-&gt;next != NULL) {
    find = find-&gt;next;
  }
  find-&gt;next = nextnode;
}
</code></pre>
","2","Answer"
"77989505","77989110","<p>You could use a pattern with 3 capture groups, where each part starts with 1 or more digits followed by a dot.</p>
<pre><code>\b(\d+\s*\..*?)(\d+\s*\..*?)(\d+\s*\..*?)(?=\d+\.|$)
</code></pre>
<p>The pattern matches:</p>
<ul>
<li><code>\b</code> A word boundary to prevent a partial word match</li>
<li><code>(\d+\s*\..*?)</code> Capture <strong>group 1</strong>, match 1+ digits followed by optional whitespace chars and a dot. Then match the least amount of characters until the next occurrence of the same pattern</li>
<li><code>(\d+\s*\..*?)</code> Same for <strong>group 2</strong></li>
<li><code>(\d+\s*\..*?)</code> Same for <strong>group 3</strong></li>
<li><code>(?=\d+\.|$)</code> But as there might not be a 4th occurrence, we can assert the digits and dot to the right, or assert the end of the string</li>
</ul>
<p>See the <a href=""https://regex101.com/r/tIhbRX/1"" rel=""nofollow noreferrer"">regex matches</a> and a <a href=""https://ideone.com/am2kvO"" rel=""nofollow noreferrer"">Python demo</a>.</p>
<p>The you can after process the group values.</p>
<pre><code>import re


def post_processing(text):
    pattern = re.compile(r&quot;\b(\d+\s*\..*?)(\d+\s*\..*?)(\d+\s*\..*?)(?=\d+\.|$)&quot;, re.M)
    matches = pattern.finditer(text)

    for _, match in enumerate(matches, start=1):
        result = [re.sub(r&quot;(\d)\s+\.&quot;, r&quot;\1.&quot;, s) for s in match.groups()]
        return &quot; &quot;.join(result)


s = &quot;Suggestions for restaurants:1  . Pizza2. Burger3. Sushi4. Noodles...&quot;
print(post_processing(s))
</code></pre>
<p>Output</p>
<pre><code>1. Pizza 2. Burger 3. Sushi
</code></pre>
","0","Answer"
"77994761","77994560","<p>It looks like you've forgotten to use your nulls comparator <code>compareMins</code> a second time:</p>
<pre><code>Comparator&lt;ClassA&gt; comparator = compareMins(ClassA::getMin1)
                 .thenComparing(compareMins(ClassA::getMin2));
</code></pre>
<p>As you have it now, using <code>.thenComparing(ClassA::getMin2)</code>, would evaluate the two instances of <code>min2</code> and would call <code>a.min2.compareTo(b.min2)</code> rather than the nulls friendly check you have created in <code>compareMins</code>. Hence <code>NullPointerException</code>.</p>
<p>Also, you have mixed <code>min</code> and <code>minuto</code> in the declaration of <code>compareMins</code>, this could be source of NPE =&gt; replace <code>minuto</code> with <code>min</code>.</p>
<pre><code>public static Comparator&lt;ClassA&gt; compareMins(Function&lt;ClassA, Integer&gt; min) {
    return Comparator.comparing(min, Comparator.nullsLast(Comparator.naturalOrder()));
</code></pre>
<p>}</p>
","1","Answer"
"77994766","77994560","<p>Programming isn't magic and it isn't like humans. &quot;Do what I mean&quot; is not how it works.</p>
<blockquote>
<pre><code>Comparator&lt;ClassA&gt; comparator = ClassA.compareMins(ClassA::getMin1)
   .thenComparing(ClassA::getMin2);
lista.sort(comparator);
</code></pre>
</blockquote>
<p>This dutifully does exactly what you wrote, which is not what you meant. The <code>nullsLast</code> logic is applied by what <code>compareMins</code> does. You then chain <code>thenComparing(ClassA::getMin2)</code> which, rather obviously, <strong>does not do any nulls last</strong>. How could it? The compiler can't sniff out that 'hey, <code>compareMins</code> appears to do some nullsLast magic, do I think the programmer <em>intended</em> for the same nullsLast logic to apply to <code>getMin2</code>? Eh, I'll take a wild stab in the dark: Probably yeah so I'll just do that'.</p>
<p>Not, obviously, how compilers work.</p>
<p>By default all comparators NPE on nulls because nulls do not have any obvious ordering, and optimally don't even have an ordering between themselves (null is neither above nor below nor equal to any other <code>null</code> - <code>null</code> is best treated as 'unknown'. Given 2 unknown values it is not possible to say which one is higher or lower, nor is it possible to decree that they are equal).</p>
<p>You can fix it in the style you've been going so far but the style you've chosen doesn't sound right.</p>
<p>A much more obvious way to go is to make a method or function that does the job of 'return the lower of these 2 values, ignoring nulls'. Which isn't something the standard library has; it's a programming language where you program what you want. It's not a box of lego bricks where the job consists solely of finding the right bricks and snapping them together. Sometimes you gotta make your own, so to speak.</p>
<pre><code>class classA {
 ....

 public int getLowest() {
   return
     min1 == null ? min2 :
     min2 == null ? min1 :
     Math.min(min1, min2);
 }
}

listA.sort(Comparator.comparingInt(ClassA::getLowest));
</code></pre>
<p>This fails only if <strong>both</strong> <code>min1</code> and <code>min2</code> are <code>null</code> for any instance of ClassA. Crashing is probably correct (it seems arbitrary / an error of attempting to blast right past the problem that something isn't known), but if you don't want that, you'd go with:</p>
<pre><code>class classA {
 ....

 public Integer getLowest() {
   return
     min1 == null ? min2 :
     min2 == null ? min1 :
     Math.min(min1, min2);
 }
}

listA.sort(
  Comparator.comparing(
    ClassA::getLowest,
    Comparator.nullsLast(Comparator.naturalOrder())
  )
);
</code></pre>
","2","Answer"
"77995746","77995231","<p>We can use <em>Linq</em> to get <code>list</code> highest pair or <code>int.MinValue</code> if <code>list</code> doesn't have any pair:</p>
<pre><code>private static int HighestPair(IEnumerable&lt;int&gt; list) =&gt; list
  .GroupBy(item =&gt; item)              // We group equal items 
  .Where(group =&gt; group.Count() &gt;= 2) // We want pairs (group of size 2 or more) 
  .Select(group =&gt; group.Key)          
  .DefaultIfEmpty(int.MinValue)       // int.MinValue if we don't have pairs
  .Max();
</code></pre>
<p>Then you can organize lists into a collection, say, an array and query this collection:</p>
<pre><code>var lists = new[] {
  list1, list2, list3 // Add all your lists here
};

// List with highest pair
var result = lists.MaxBy(list =&gt; HighestPair(list));

// Highest pair, if we want it
// var topPair = lists.Max(list =&gt; HighestPair(list)); 
</code></pre>
<p>Let's have a look:</p>
<pre><code>Console.WriteLine(string.Join(&quot;, &quot;, result));
</code></pre>
<p>Output:</p>
<pre><code>10, 8, 12, 12, 4, 13, 3
</code></pre>
<p><a href=""https://dotnetfiddle.net/Np3cG8"" rel=""nofollow noreferrer"">Fiddle</a></p>
<p>Finally, if you want to <em>sort</em> lists while comparing them by</p>
<ul>
<li>Highest pair</li>
<li>In case of tie, highest item</li>
</ul>
<pre><code>var ordered = lists
   .OrderByDescending(list =&gt; HighestPair(list))
   .ThenByDescending(list =&gt; list.Max())
   .ToList();
</code></pre>
","0","Answer"
"77996213","77995231","<p>Using Linq you could use something like:</p>
<pre class=""lang-cs prettyprint-override""><code>
Using Linq you could use something like:

List&lt;int&gt; list1 = [ 10, 8, 10, 7, 4, 14, 3 ];
List&lt;int&gt; list2 = [ 10, 8, 10, 7, 4, 13, 3 ];
List&lt;int&gt; list3 = [ 10, 8, 12, 12, 4, 13, 3 ];

// Only to have something I can identify which is which.
Dictionary&lt;string, List&lt;int&gt;&gt; dictionary = new()
{
    [nameof(list1)] = list1,
    [nameof(list2)] = list2,
    [nameof(list3)] = list3
};


// Discard non-paired values 12, 12 will leave only 12.

var listWithHighestPair = &quot;none&quot;;
var maxPairValue = 0;

foreach (var item in dictionary)
{
    var groupedValues = item.Value.GroupBy(value =&gt; value);

    // Get only the numbers that have a duplicate
    var filteredValues = groupedValues
        .Where(group =&gt; group.Count() == 2)
        .Select(group =&gt; group.Key);

    // Max pair in the list
    var currentMaxPairValue = filteredValues.Max();

    // Update the highest if found any
    if (currentMaxPairValue &gt; maxPairValue)
    {
        maxPairValue = currentMaxPairValue;
        listWithHighestPair = item.Key;
    }
    
}

Console.WriteLine($&quot;The list with the highest value is {listWithHighestPair} with pair: {maxPairValue}&quot;);
</code></pre>
","1","Answer"
"77999841","77999570","<p>I would be interested how <code>assertThatConvertedCorrectly</code> is implemented. It would seem like you would need to copy-pasta the convert-Method and actually test nothing.</p>
<p>What you generally want to do is have little logic in your tests since more logic means you are more prone to bugs. And nobody tests their tests (lol).</p>
<p>Anyways the solution is to do the following:</p>
<pre><code>@Test
void test() {
    List&lt;Foo&gt; input = generateInput();

    List&lt;Bar&gt; result = converter.convert(input);

    List&lt;Bar&gt; expectedResult = List.of(
            //create the expected Bars manually
            new Bar(expected1),
            new Bar(expected2)
    );

    assertThat(result).containsExactly(expectedResult);
}
</code></pre>
<p>This way you have basically no logic in your test and it's short.</p>
","1","Answer"
"78000229","77999570","<p>Not extremely elegant but you could use <a href=""https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/AbstractIterableAssert.html#satisfiesExactly(java.util.function.Consumer...)"" rel=""nofollow noreferrer""><code>satisfiesExactly</code></a> and compute the requirements via Stream API:</p>
<pre><code>@Test
void test() {
    List&lt;Foo&gt; input = generateInput();

    List&lt;Bar&gt; actual = converter.convert(input);

    @SuppressWarnings(&quot;unchecked&quot;)
    Consumer&lt;Bar&gt;[] requirements = input.stream()
      .map(foo -&gt; (Consumer&lt;Bar&gt;) bar -&gt; assertThatConvertedCorrectly(foo, bar))
      .toArray(Consumer[]::new);

    assertThat(actual).satisfiesExactly(requirements);
}
</code></pre>
<p><code>satisfiesExactly</code> would guarantee that the proper requirement is applied to each index:</p>
<blockquote>
<p>Verifies that each element satisfies the requirements corresponding to its index, so the first element must satisfy the first requirements, the second element the second requirements etc...</p>
</blockquote>
","0","Answer"
"78001362","78001260","<p>Here's a simple example</p>
<pre><code>wordlist = {}
current_header = None

with open(&quot;mydata.txt&quot;, &quot;r&quot;) as f:
    for line in f:
        line = line.rstrip('\n')

        if not line:
            current_header = None
            continue

        if not current_header:
            current_header = line
            wordlist[current_header] = []

        if current_header != line:
            wordlist[current_header].append(line)

print(wordlist)
</code></pre>
","2","Answer"
"78004058","78001260","<p>My approach is to first split lines by double new lines, which separate the blocks. Then within each block, split the lines:</p>
<pre class=""lang-py prettyprint-override""><code>
data = {}
with open(&quot;mydata.txt&quot;, &quot;r&quot;) as stream:
    for block in stream.read().split(&quot;\n\n&quot;):
        block = block.splitlines()
        key = block.pop(0)
        data[key] = block

print(data)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>{'introA': ['aboutA1', 'aboutA2', 'aboutA3', 'aboutA4'], 'introB': ['aboutB1', 'aboutB2', 'aboutB3', 'aboutB4']}
</code></pre>
<p>Splitting text by double new line will give blocks of text such as</p>
<pre class=""lang-py prettyprint-override""><code>'introA\naboutA1\naboutA2\naboutA3\naboutA4'
</code></pre>
<p>Then, the line</p>
<pre class=""lang-py prettyprint-override""><code>        block = block.splitlines()
</code></pre>
<p>Will turn the block into a list of strings:</p>
<pre class=""lang-py prettyprint-override""><code>['introA', 'aboutA1', 'aboutA2', 'aboutA3', 'aboutA4']
</code></pre>
<p>The <code>pop()</code> call will remove the first element in the list (<code>introA</code>) and assign it to the variable <code>key</code>. Then we build up the <code>data</code> dict by filling the key and the block.</p>
","0","Answer"
"78005834","78005759","<p>The main reason why your code is slow is the use of the <code>sorted</code> function, which costs an average time complexity of <em>O(n log n)</em>.</p>
<p>Since you mentioned in the comments that the two input lists are pre-sorted, you can achieve a linear time complexity by using <a href=""https://docs.python.org/3/library/heapq.html#heapq.merge"" rel=""nofollow noreferrer""><code>heapq.merge</code></a> instead of <code>sorted</code>. And to de-duplicate a sequence while keeping the order, you can use <code>dict.fromkeys</code> instead of <code>set</code>:</p>
<pre><code>import heapq

combined = list(dict.fromkeys(heapq.merge(list_1, list_2)))
</code></pre>
","2","Answer"
"78005880","78005551","<p>I will post my results when it comes to finding the max, I defined a range <code>L</code>, a list created by <code>list(range(n))</code>. This can be checked with the fucntion <code>manualMax</code> here:</p>
<pre><code>def manualMax(L):
    highest_bid = 0
    for val in L:
        if val &gt; highest_bid:
            highest_bid = val
    return highest_bid
</code></pre>
<p>Or with the regular Python <code>max()</code> function.</p>
<p>I would like to mention, that when you want to test such things, you need to increase your sample size <code>n</code>. Since small values of <code>n</code> will not show the true benefit of using one function over the other. For this, check the following definition of the big O notation:</p>
<p><a href=""https://en.wikipedia.org/wiki/Big_O_notation"" rel=""nofollow noreferrer""><em>Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity.</em></a></p>
<p>Using the following snippets:</p>
<pre><code>n = 1000000
L = list(range(n))
def manualMax(L):
    highest_bid = 0
    for val in L:
        if val &gt; highest_bid:
            highest_bid = val
    return highest_bid
%timeit manualMax(L)
%timeit max(L)
</code></pre>
<p>The results for <code>manualMax</code>:</p>
<pre><code>20.2 ms ± 1.67 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>And for <code>max()</code>:</p>
<pre><code>11.8 ms ± 847 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>As you can see, the built-in function is almost twice as fast. But why? Don't the functions <em>basically</em> do the same thing?</p>
<p>The short answer is that they do, but the built-in one is optimized, while the self-written one in Python is not. The long is that built-in functions are implemented in C, a lower-level language than Python.</p>
","0","Answer"
"78005896","78005717","<p>one way I can think of is like this to generate possible combination</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function getUniqueIndexCombinations(...lists) {
  const results = [];

  function generateCombinations(currentIndex, combination) {
    if (currentIndex === lists.length) {
      results.push(combination);
      return;
    }

    for (let i = 0; i &lt; lists[currentIndex].length; i++) {
      const newItem = lists[currentIndex][i];
      const newCombination = [...combination, newItem];
      generateCombinations(currentIndex + 1, newCombination);
    }
  }

  generateCombinations(0, []);
  return results;
}

const list1 = [1, 2, 3, 4, 5];
const list2 = [6, 7, 8, 9, 10];
const list3 = [11, 12, 13, 14, 15];
const list4 = [16, 17, 18, 19, 20];

const combinations = getUniqueIndexCombinations(list1, list2, list3, list4);
console.log(combinations);</code></pre>
</div>
</div>
</p>
","0","Answer"
"78005977","78005759","<p>Since the two lists differ in only a few items, a more efficient approach would be to obtain those few items that <code>list_2</code> has but <code>list_1</code> doesn't, and sort <code>list_1</code> with those few extra items joined.</p>
<p>Since you mentioned in the comments that the input lists are pre-sorted, and Python's <code>sorted</code> function uses <a href=""https://en.wikipedia.org/wiki/Timsort#Analysis"" rel=""nofollow noreferrer"">Timsort</a>, which can practically sort in a linear time complexity when the input is almost pre-sorted, the overall time complexity of this approach would be linear as well:</p>
<pre><code>combined = sorted(list_1 + list(set(list_2).difference(list_1)))
</code></pre>
<p>or you can use <code>itertools.chain</code> to avoid the overhead of creating an intermediate list:</p>
<pre><code>from itertools import chain

combined = sorted(chain(list_1, set(list_2).difference(list_1)))
</code></pre>
","1","Answer"
"78006076","78005717","<p>This appears to solve what you want.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Using a generator because this can yield a lot of values. Making an array
// from a generator is easy, and generator results can be fetched one after the other,
// reducing memory load.
function* generateIndexCombinations(...lists) {
  // Fetch how many cell we needs in our results.
  const size = Math.max(...lists.map(l =&gt; l.length));

  // Using a helper so we can add the index parameter. We could also do by
  // slicing the lists, but this would have much larger memory footprint.
  function* doGenerate(lists, index, acc) {
    // Recursion end case.
    if (index &gt;= size) {
      yield acc;
      return;
    }

    for (const list of lists) {
      if (list.length &gt; index) {
        // For each remaining list, create a copy of acc including the index value.
        const newAcc = [...acc, list[index]];
        // Generate the combinations of the tail to be added in acc and re-yield them.
        yield* doGenerate(lists, index + 1, newAcc)
      }
    }
  }
  yield* doGenerate(lists, 0, []);
}



const list1 = [1, 2, 3, 4, 5];
const list2 = [6, 7, 8, 9, 10];
const list3 = [11, 12, 13, 14, 15];
const list4 = [16, 17, 18, 19, 20];

const table = document.querySelector('table');

// Option 1: get each combination one after the other.
for(let c of generateIndexCombinations(list1, list2, list3, list4)) {
  const tr = document.createElement('tr');
  for (let v of c) {
    const td = document.createElement('td');
    td.textContent = v;
    tr.appendChild(td);
  }
  table.appendChild(tr);
}

// Option 2: Store all combinations in an array.
console.log([...generateIndexCombinations(list1, list2, list3, list4)]);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>table td {
  padding: 0 0.25em;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;table&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Edit</strong>: if you also need to associate each value with the list it comes from, I would use a mapper function as follow:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Using a generator because this can yield a lot of values. Making an array
// from a generator is easy, and generator results can be fetched one after the other,
// reducing memory load.
function* generateIndexCombinations(lists, mapper = x =&gt; x) {
  // Fetch how many cell we needs in our results.
  const size = Math.max(...lists.map(l =&gt; l.length));

  // Using a helper so we can add the index parameter. We could also do by
  // slicing the lists, but this would have much larger memory footprint.
  function* doGenerate(lists, valueIndex, acc) {
    // Recursion end case.
    if (valueIndex &gt;= size) {
      yield acc;
      return;
    }

    for (let listIndex = 0; listIndex &lt; lists.length; listIndex++) {
      const list = lists[listIndex];
      if (list.length &gt; valueIndex) {
        const val = mapper(list[valueIndex], listIndex, valueIndex, lists);
        // For each remaining list, create a copy of acc including the index value.
        const newAcc = [...acc, val];
        // Generate the combinations of the tail to be added in acc and re-yield them.
        yield* doGenerate(lists, valueIndex + 1, newAcc)
      }
    }
  }
  yield* doGenerate(lists, 0, []);
}



const list1 = [1, 2, 3, 4, 5];
const list2 = [6, 7, 8, 9, 10];
const list3 = [11, 12, 13, 14, 15];
const list4 = [16, 17, 18, 19, 20];

const table = document.querySelector('table');

// Example 1: without mapper, get each combination one after the other.
for (let c of generateIndexCombinations([list1, list2, list3, list4])) {
  const tr = document.createElement('tr');
  for (let v of c) {
    const td = document.createElement('td');
    td.textContent = v;
    tr.appendChild(td);
  }
  table.appendChild(tr);
}

// Example 2: Store all combinations in an array, using the new optional mapper to map 
// each value to another.
function listCombinationValueMapper(value, listIndex, valueIndex, lists) {
  return {
    value,
    listIndex,
    valueIndex,
    // The source list.
    source: lists[listIndex]
  };
}
const combinations = [...generateIndexCombinations(
  [list1, list2, list3, list4],
  listCombinationValueMapper
)];
console.log(JSON.stringify(combinations));</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>table td {
  padding: 0 0.25em;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;table&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
","1","Answer"
"78006628","78005759","<p>If the two input lists only differ at the ends as you illustrated in the question, and since the two lists are pre-sorted and contain no duplicate as you mentioned in the comments, an efficient approach would be to iterate an index from the end of the shorter of the two lists to arrive at the index of the last common item, with which we can obtain the slice of the common items and the slices the differ. We can then use <code>heapq.merge</code> to sort just the slices that differ, and join it with the slice of the common items:</p>
<pre><code>import heapq

def combine(l1, l2):
    for i in reversed(range(min(map(len, (l1, l2))))):
        if l1[i] == l2[i]:
            return l2[:(end := i + 1)] + list(heapq.merge(l1[end:], l2[end:]))
</code></pre>
<p>so that:</p>
<pre><code>list_1 = [*range(10), 10, 11, 13, 15]
list_2 = [*range(10), 12, 14]
print(combine(list_1, list_2))
</code></pre>
<p>outputs:</p>
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</code></pre>
<p>Demo: <a href=""https://ideone.com/FTgXM2"" rel=""nofollow noreferrer"">https://ideone.com/FTgXM2</a></p>
","0","Answer"
"78008155","78007844","<p>The code below is what I think you want but can be easily modified. It uses REGEX as a simple way to count sub-string occurences. It shows how to search a portion of a string.</p>
<pre><code>import re

seq_list = [&quot;GGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGG&quot;, &quot;GGGCGG&quot;, &quot;BBBBBBB&quot;]
binding_site = &quot;GGGCGG&quot;
search_for = 'GGCGG'
START = 20
FINISH = 50

for i, seq  in enumerate(seq_list):
    if not binding_site in seq:
        print(f&quot;seq {i} No binding sites found.&quot;)
    elif len(seq) &lt; FINISH:
        print(f&quot;seq {i} length {len(seq)} less than search size {FINISH}&quot;)
    else:
        num = len(re.findall(search_for, seq[START:FINISH]))
        print(f&quot;seq {i} has {num} found - enriched with SP1 binding sites&quot;)
</code></pre>
<p>which gives:</p>
<pre><code>seq 0 has 3 found - enriched with SP1 binding sites
seq 1 length 6 less than search size 50
seq 2, No binding sites found.
</code></pre>
<p>Note that because Python is zero-indexed, START 20 is index position 20 and so the 21st character and so on, which may or may not be what you want.</p>
","0","Answer"
"78008180","78007844","<p>The following code closely follows your code snippet. It uses two calls to <code>str.find()</code> to find the binding site at all and between positions 20 and 50.</p>
<pre class=""lang-py prettyprint-override""><code>seq_list = [&quot;GGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGGGGGCGGAAAAGGGCGGAAAAGGGCGG&quot;, &quot;GGGCGG&quot;, &quot;BBBBBBB&quot;]
binding_site = &quot;GGGCGG&quot;

for count, value in enumerate(seq_list, start=1):
    if value.find(binding_site) != -1:
        if value.find(binding_site, 20, 50) != -1:
            sumSP = value.count('GGCGG')
            if sumSP &gt;= 5:
                print(count, &quot;enriched with SP1 binding sites&quot;)
        else:
            print(count,&quot;No binding sites found.&quot;)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>1 enriched with SP1 binding sites
2 No binding sites found.
</code></pre>
","0","Answer"
"78011272","78011228","<p>One way to solve your problem:</p>
<pre><code>df = Reduce(cbind, lapply(my_list, \(x) data.frame(rownames(x), x, row.names=NULL)))

#   rownames.x. Post rownames.x. Treatment
# 1         Pre    0     Control         0
# 2        Post    1   Treatment         1
</code></pre>
<p>You need to rename the columns as you prefer</p>
<p><code>my_list</code> is a list of on-column matrices with row names.
<code>\(x) data.frame(rownames(x), x, row.names=NULL)</code> is a function that creates a data.frame where the first column is the row names of the matrix and the second is the data in the matrix. <code>lapply</code> function allows to apply this logic to each matrix in <code>my_list</code> and return the result in a new list. And <code>Reduce</code> allows to cumulatively bind the data frames obtained with <code>lapply</code> using <code>cbind</code> to create a new data.drame.</p>
","3","Answer"
"78011441","78011228","<p>Here is a function how we can solve this task:</p>
<pre><code>final_df &lt;- do.call(cbind, lapply(names(my_list), function(name) {
  df &lt;- as.data.frame(my_list[[name]])
  transformed_df &lt;- apply(df, 2, function(y) paste(names(y), y, sep = &quot; &quot;))
  colnames(transformed_df) &lt;- paste(&quot;Levels of&quot;, name)
  transformed_df
}))

final_df
</code></pre>
<pre><code>  Levels of Time Levels of Treatment
1          Pre 0           Control 0
2         Post 1         Treatment 1
</code></pre>
<p>Here is the same procedure step by step:</p>
<pre><code>df1 &lt;- as.data.frame(my_list[1]$time)
df2 &lt;- as.data.frame(my_list[2]$treatment)

transformed_df1 &lt;- apply(df1, 2, function(x) paste(names(x), x, sep = &quot; &quot;))
transformed_df1 &lt;- as.data.frame(transformed_df1)
                    
transformed_df2 &lt;- apply(df2, 2, function(x) paste(names(x), x, sep = &quot; &quot;))
transformed_df2 &lt;- as.data.frame(transformed_df2)

final_df &lt;- cbind(transformed_df1, transformed_df2)
colnames(final_df) &lt;- c(&quot;Levels of Time&quot;, &quot;Levels of Treatment&quot;)
final_df      
</code></pre>
","2","Answer"
"78011795","78011723","<pre><code>&lt;html&gt;
 &lt;head&gt;
            &lt;style&gt; 
                ul {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    flex-direction: column;
                }
                
                ul li a {
                    width: 200px;
                }
                
                ul li {
                    display: flex;
                    align-items: flex-start;
                    justify-content: space-between;
                }
                
                ul li.body {
                    align-items: center;
                }
                
                ul li.body img {
                    width: 100px;
                    height: 100px;
                }
                
            &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;ul&gt; 
                &lt;li class=&quot;header&quot;&gt;
                    &lt;a&gt;thumbnail column&lt;/a&gt;
                    &lt;a&gt;term column&lt;/a&gt;
                    &lt;a&gt;description column&lt;/a&gt;
                &lt;/li&gt;
                &lt;li class=&quot;body&quot;&gt;
                    &lt;a&gt;&lt;img src=&quot;&quot; alt=&quot;thumbnail_1&quot;&gt;&lt;/a&gt;
                    &lt;a&gt;term_1&lt;/a&gt;
                    &lt;a&gt;description_1&lt;/a&gt;
                &lt;/li&gt;
                &lt;li class=&quot;body&quot;&gt;
                    &lt;a&gt;&lt;img src=&quot;&quot; alt=&quot;thumbnail_2&quot;&gt;&lt;/a&gt;
                    &lt;a&gt;term_2&lt;/a&gt;
                    &lt;a&gt;description_2&lt;/a&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/body&gt;
        &lt;/html&gt;
</code></pre>
","1","Answer"
"78011846","78011723","<p>To give your layout a table look one solution is too use the <code>table</code> <code>th</code> and <code>td</code> elements on your current html.</p>
<p>For more info check <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"" rel=""nofollow noreferrer"">table</a></p>
<p>This will give you the basic structure for your table. To give the table a visual look of a basic table, you could use CSS. For example, adding <code>border: 1px solid #ddd;</code> to your table cells will give it the look of lines inside a table.</p>
<hr />
<p>The results will be something like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>table {
    border-collapse: collapse;
    width: 100%;
  }
  
    th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Thumbnail column&lt;/th&gt;
      &lt;th&gt;Term column&lt;/th&gt;
      &lt;th&gt;Description column&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href=""link_1""&gt;
          &lt;img src=""src_thumbnail_1"" alt=""thumbnail_1""&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;term_1&lt;/td&gt;
      &lt;td&gt;description_1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;a href=""link_2""&gt;
          &lt;img src=""src_thumbnail_2"" alt=""thumbnail_2""&gt;
        &lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;term_2&lt;/td&gt;
      &lt;td&gt;description_2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
<p>From this point on you can customize your table look farther.</p>
","0","Answer"
"78013656","78012902","<p>The revised question includes commentary that implies that the problem can be interpreted as finding the connected components of an undirected graph described by an input list of vectors of nodes, <code>lst</code>, such that <code>lst[[i]]</code> is a vector of the nodes connected to node i. </p>
<p>To compute the result, using the input <code>lst</code> (defined in the question and also shown in the Note at the end), first build the Rcpp_SimplexTree class graph object, <code>st</code>, extract the <code>connected_components</code> property, which in this case is <code>c(1, 1, 1, 3, 5, 5, 5, 1, 5)</code> and replace each component of <code>lst</code> with the unique ordered set of nodes in its connected component.</p>
<p>Finally replace duplicate elements in that with <code>logical(0)</code> . The ## line can be omitted if duplicates are ok.</p>
<pre><code>library(simplextree)

st &lt;- simplex_tree()
for(i in seq_along(lst)) insert(st, t(cbind(lst[[i]],i)))

out &lt;- ave(lst, st$connected_components, FUN = \(x) list(sort(unique(unlist(x)))))
out[duplicated(out)] &lt;- list(logical(0)) ##

# check - see Note at end taken from question for desired
identical(out, desired)
## [1] TRUE

plot(st)
</code></pre>
<p><a href=""https://i.sstatic.net/dwPzg.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/dwPzg.png"" alt=""screenshot"" /></a></p>
<h2>Old</h2>
<p>In light of the revised explanation in the question this is no longer relevant.  Use above instead.</p>
<p>I am not completely sure I understand the processing in the question but the following code does not use <code>setdiff</code> (although it does use <code>intersect</code>) and there are no explicit loops giving the same result for the example. <code>ok</code> is TRUE for each element for which all elements before and after it -- the after includes the element itself - are disjoint. <code>cumsum(ok)</code> gives a grouping vector - <code>c(1, 1, 1, 2, 3, 3, 3, 3)</code> -- and then we  create a list <code>L</code> which contains the group components themselves and finally repeat it the required number of times.  Another thing to try is to see whether Rfast2::Intersect or easy.utils::fastIntersect speeds up the intersect operation.</p>
<pre><code>ok &lt;- sapply(seq_along(lst), function(i, i1 = seq_len(i-1)) {
  (i == 1) || length(intersect(unlist(lst[i1]), unlist(lst[-i1]))) == 0
})
L &lt;- tapply(lst, cumsum(ok), function(x) sort(unique(unlist(x))))
result &lt;- rep(L, lengths(L))

str(result)
</code></pre>
<p>giving</p>
<pre><code>List of 8
 $ 1: num [1:3] 1 2 3
 $ 1: num [1:3] 1 2 3
 $ 1: num [1:3] 1 2 3
 $ 2: num 4
 $ 3: num [1:4] 5 6 7 8
 $ 3: num [1:4] 5 6 7 8
 $ 3: num [1:4] 5 6 7 8
 $ 3: num [1:4] 5 6 7 8
</code></pre>
<h2>Note</h2>
<pre><code>lst &lt;- list(2, c(1, 3), c(2, 8), 4, 6, c(5, 7), c(6, 9), 3, 7)

desired &lt;- list(
  c(1, 2, 3, 8), logical(0), logical(0), 4, c(5, 6, 7, 9), logical(0),
  logical(0), logical(0), logical(0)
)
</code></pre>
","2","Answer"
"78013748","78012902","<h1>Update</h1>
<p>According to the updated example and expected output, we use <code>replace</code> and <code>duplicated</code> to nullify the cluster duplicates (see the last line <code>out &lt;- ...</code>)</p>
<pre><code>library(igraph)
g &lt;- graph_from_data_frame(stack(setNames(lst, seq_along(lst))))
clst &lt;- membership(components(g))
nms &lt;- as.integer(names(clst))
res &lt;- unname(by(nms, clst, sort))[clst[order(nms)]]
out &lt;- replace(res, duplicated(res), list(logical(0)))
</code></pre>
<p>and we can obtain</p>
<pre><code>&gt; out
[[1]]
[1] 1 2 3 8

[[2]]
logical(0)

[[3]]
logical(0)

[[4]]
[1] 4

[[5]]
[1] 5 6 7 9

[[6]]
logical(0)

[[7]]
logical(0)

[[8]]
logical(0)

[[9]]
logical(0)
</code></pre>
<h1>Previous Answer</h1>
<p>You can use <code>membership</code> from <code>igraph</code> to detect the clusters</p>
<pre><code>library(igraph)
g &lt;- graph_from_data_frame(stack(setNames(lst, seq_along(lst))))
clst &lt;- membership(components(g))
nms &lt;- as.integer(names(clst))
res &lt;- unname(by(nms, clst, sort))[clst[order(nms)]]
</code></pre>
<p>and you will obtain</p>
<pre><code>&gt; res
[[1]]
[1] 1 2 3

[[2]]
[1] 1 2 3

[[3]]
[1] 1 2 3

[[4]]
[1] 4

[[5]]
[1] 5 6 7 8

[[6]]
[1] 5 6 7 8

[[7]]
[1] 5 6 7 8

[[8]]
[1] 5 6 7 8
</code></pre>
<h1>Graph Interpretation</h1>
<p>If you are interested in how the problem is interpreted into a graph, you can use <code>plot(as.undirected(g))</code>, which shows</p>
<p><a href=""https://i.sstatic.net/Vxoqp.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/Vxoqp.png"" alt=""enter image description here"" /></a></p>
","1","Answer"
"78017451","78017441","<p>the input can't be like: x = 1 2 3 4 5 6 7 8 9;
it could be something like x = 123456789;
in this case, you would think for example to cascade it to string and then split it as you were saying.</p>
","0","Answer"
"78017461","78017441","<p>The input you're declaring is a string &quot;1 2 3 4 5 6&quot;. So to convert it to List[int] you should split each number and convert it to integer, then add each one to the list</p>
","0","Answer"
"78020496","78020461","<p>Use:</p>
<pre><code>#create sample data - for test rewrite last row by n_serie_list values
np.random.seed(56)
dataframe = pd.DataFrame(np.random.randint(10, size=(5,9)),
                          columns=['DEG1','DEG2','DEG3','DEG4','DEG5','a','b','c','d'])

n_serie_list = [2, 11, 21, 27, 41]

dataframe.iloc[-1, :5] = n_serie_list
print (dataframe)
   DEG1  DEG2  DEG3  DEG4  DEG5  a  b  c  d
0     5     4     0     2     9  7  6  4  9
1     7     1     8     2     0  5  6  1  9
2     5     5     2     9     3  5  9  2  1
3     0     4     6     2     0  8  6  4  0
4     2    11    21    27    41  2  1  3  8
</code></pre>
<p>Compare filtered rows  of <code>DataFrame</code> by list <code>n_serie_list</code> with <a href=""http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.all.html"" rel=""nofollow noreferrer""><code>DataFrame.all</code></a> and test at least one match by <a href=""http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.any.html"" rel=""nofollow noreferrer""><code>Series.any</code></a>:</p>
<pre><code>cols = ['DEG1','DEG2','DEG3','DEG4','DEG5']
repeated = (dataframe[cols].values == n_serie_list).all(axis=1).any()
print (repeated)
True
</code></pre>
<p>How it working:</p>
<pre><code>print ((dataframe[cols].values == n_serie_list))
[[False False False False False]
 [False False False False False]
 [False False False False False]
 [False False False False False]
 [ True  True  True  True  True]]
</code></pre>
","1","Answer"
"78020511","78020461","<p>The below code appends the series to the dataframe and then leave only duplicated rows:</p>
<pre><code>import pandas as pd
df1 = pd.DataFrame({'DEG1': [1,2], 'DEG2': [3,4]})
df1.loc[len(df1)] = [1,3]
df1[df1.duplicated(keep='first')]
</code></pre>
","1","Answer"
"78021942","78021566","<p>You can use <code>.apply</code> method, applied function for your specific example could look like that:</p>
<pre><code>def insert_list(row):
    # your condition for ROW
    if row['Participant'] == 4 and row['Session'] == 1:
        return [1, 2, 3]
    else:
        return row['Column_C'] # wont change a cell if condition is not satisfied
</code></pre>
<p>Then simply apply this function to update the column 'Column_C' values:</p>
<pre><code>df['Column_C'] = df.apply(insert_list, axis=1)
</code></pre>
","0","Answer"
"78021972","78021566","<p>This is probably not the most elegant solution but it works.
First use df.index to find the index of the row that meets your condition.
Then you can use df.at to set the list.</p>
<pre><code>import pandas as pd

d = {'col1': [1, 2], 'col2': [3, 4], 'col3': [None, None]}
df = pd.DataFrame(data=d)

idx = df.index[(df['col1'] == 2) &amp; (df['col2'] == 4)].tolist()

df.at[idx[0], 'col3']=[1,2,3]

</code></pre>
","0","Answer"
"78021982","78021566","<p>you can use this code:</p>
<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame({'Participant':[1,2,3,3,4,4], 'Session' :[1,1,1,2,1,2]})
df['Column_C']=np.nan
df['Column_C'] = df['Column_C'].mask((df['Participant']==4) &amp; (df['Session'] == 1) ,pd.Series([[1,2,3]]*df.shape[0]))
df
</code></pre>
","0","Answer"
"78022151","78021566","<p>Try this:</p>
<pre><code>df['Column_C']=df['Participant'].transform(lambda x: df.query('Participant == @x')['Session'].tolist())
</code></pre>
","0","Answer"
"78027239","78027166","<h1>(Update) If your nested dataframe has <code>NULL</code>s</h1>
<p>Since you may have <code>NULL</code>s, you can play the following trick for the new data in your question</p>
<pre><code>d &lt;- list2DF(lapply(df, \(u) replace(u, lengths(u) == 0, &quot;&quot;)))
do.call(
    rbind,
    do.call(Map, c(expand.grid, d, stringsAsFactors = FALSE))
)
</code></pre>
<p>which gives</p>
<pre><code>    cluster st_sub_main_th roo_main st_con_rt st_con_tr st_adsb st_th
1         1           hira        2  sub-room   terrace     add
2.1       2                       4 main-room   terrace     add tsuma
2.2       2                       4 main-room    direct     add tsuma
3         3          tsuma        3  sub-room   terrace     add      
4         4          tsuma        2  sub-room   terrace     sub
5.1       5                       1 main-room   terrace     add  hira
5.2       5                       3 main-room   terrace     add  hira
6.1       6          other        6  sub-room    direct     sub
6.2       6           hira        6  sub-room    direct     sub
6.3       6          other        7  sub-room    direct     sub
6.4       6           hira        7  sub-room    direct     sub
6.5       6          other        2  sub-room    direct     sub
6.6       6           hira        2  sub-room    direct     sub
6.7       6          other        1  sub-room    direct     sub
6.8       6           hira        1  sub-room    direct     sub
    st_sub2_main_th isstilt
1
2.1
2.2
3
4              hira
5.1            hira
5.2            hira
6.1           tsuma       0
6.2           tsuma       0
6.3           tsuma       0
6.4           tsuma       0
6.5           tsuma       0
6.6           tsuma       0
6.7           tsuma       0
6.8           tsuma       0
</code></pre>
<hr />
<h1>If your nested dataframe has NO <code>NULL</code>s</h1>
<p>You can try <code>expand.grid</code> with <code>Map</code> like below</p>
<pre><code>do.call(
    rbind,
    do.call(Map, c(expand.grid, df, stringsAsFactors = FALSE))
)
</code></pre>
<p>which gives</p>
<pre><code>   id   a  b
1   1   1  2
2   1  a1  2
3   2   2 b1
4   2   2 b2
5   2   2  3
6   3 a31 b3
7   3 a32 b3
8   3 a33 b3
9   3 a31 b4
10  3 a32 b4
11  3 a33 b4
12  4  a4  4
</code></pre>
","3","Answer"
"78027443","78027166","<p>You can do it by <code>unnest</code>ing each column at a time.  However, you need to cast things into <code>character</code> first, otherwise the unnesting won't work, since you'd be trying to create a vector/column with both <code>numeric</code> and <code>character</code> elements.</p>
<pre><code>library(purrr) # For map()
library(tidyr) # For unnest()
library(dplyr) # For mutate()

df %&gt;%
mutate(a = map(a, as.character),
       b = map(b, as.character)) %&gt;%
unnest(cols = a) %&gt;%
unnest(cols = b)
</code></pre>
<h4>Update with sample data:</h4>
<p>On your sample data, you'll also need to replace the <code>NULL</code>s with something else, otherwise, they'll disappear with the intermediate unnesting:</p>
<pre><code>df2 &lt;- structure(list(
  cluster = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;),
  st_sub_main_th = list(&quot;hira&quot;, NULL, &quot;tsuma&quot;, &quot;tsuma&quot;, NULL, c(&quot;other&quot;, &quot;hira&quot;)),
  roo_main = list(&quot;2&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;, c(&quot;1&quot;, &quot;3&quot;), c(&quot;6&quot;, &quot;7&quot;, &quot;2&quot;, &quot;1&quot;)),
  st_con_rt = list(&quot;sub-room&quot;, &quot;main-room&quot;, &quot;sub-room&quot;, &quot;sub-room&quot;, &quot;main-room&quot;, &quot;sub-room&quot;),
  st_con_tr = list(&quot;terrace&quot;, c(&quot;terrace&quot;, &quot;direct&quot;), &quot;terrace&quot;, &quot;terrace&quot;, &quot;terrace&quot;, &quot;direct&quot;),
  st_adsb = list(&quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;sub&quot;, &quot;add&quot;, &quot;sub&quot;),
  st_th = list(NULL, &quot;tsuma&quot;, NULL, NULL, &quot;hira&quot;, NULL),
  st_sub2_main_th = list(NULL, NULL, NULL, &quot;hira&quot;, &quot;hira&quot;, &quot;tsuma&quot;),
  isstilt = list(NULL, NULL, NULL, NULL, NULL, &quot;0&quot;)),
class = &quot;data.frame&quot;, row.names = c(NA, -6L))

df2 %&gt;%
mutate_if(is.list, map, coalesce, NA_character_) %&gt;%
mutate_if(is.list, map, as.character) %&gt;%
unnest(st_sub_main_th) %&gt;%
unnest(roo_main) %&gt;%
unnest(st_con_rt) %&gt;%
unnest(st_con_tr) %&gt;%
unnest(st_adsb) %&gt;%
unnest(st_th) %&gt;%
unnest(st_sub2_main_th) %&gt;%
unnest(isstilt)
</code></pre>
","2","Answer"
"78027451","78020288","<p>I confirm that does not exist in AssertJ, I think you already have the best workaround wiht <code>containsExactly</code>, you could also use <code>isEqualTo</code> and build the expected collection, a bit simpler but requires to setup the expected result.</p>
","0","Answer"
"78027688","78020288","<p>Not sure if I completely understood, but it sounds like you want to assert that the items in your list contains an ID that matches the index/offset in the list?</p>
<pre><code>assertThat(tasks).extracting(Task::getId)
    .containsExactlyElementsOf(IntStream.range(0, tasks.size()).boxed().toList());
</code></pre>
<p><code>IntStream.range(0, tasks.size()).boxed().toList()</code> produces a list of the indices/offsets in your list.</p>
","0","Answer"
"78027940","78020288","<p>As we wanted to assert the relation between index and the element, how about converting the list to index-element map first?</p>
<p>Then we could call <a href=""https://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractMapAssert.html#allSatisfy-java.util.function.BiConsumer-"" rel=""nofollow noreferrer"">allSatisfy</a> to assert the relationship.</p>
<pre class=""lang-java prettyprint-override""><code>import static java.util.stream.Collectors.toMap;
import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.IntStream;

public class AssertIndexedElementOfListTest {
    record Task(int id, String examId) {
    }

    @Test
    public void assertTest() {
        List&lt;Task&gt; tasks = List.of(
                new Task(0, &quot;EXAM_0&quot;),
                new Task(1, &quot;EXAM_1&quot;),
                new Task(2, &quot;EXAM_2&quot;),
                new Task(3, &quot;EXAM_3&quot;)
        );
        var indexTaskMap = IntStream.range(0, tasks.size())
                .boxed()
                .collect(toMap(i -&gt; i, tasks::get));
        assertThat(indexTaskMap).allSatisfy(
           (index, task) -&gt; assertThat(task.id()).isEqualTo(index)
        );
    }
}
</code></pre>
<p>Reference:
<a href=""https://stackoverflow.com/questions/33138577/how-to-convert-list-to-map-with-indexes-using-stream-java-8"">How to convert List to Map with indexes using stream - Java 8?</a></p>
","2","Answer"
"78028697","78028582","<p>Assuming it is the same list that is being checked or if there are few lists and the lookups are indeed orders of magnitude more frequent than updates, convert the list into a map.</p>
<p>Make the items be the keys and the values some placeholder value like <code>true</code>. Key lookup in maps is O(1), while item lookup in list is O(n).</p>
","0","Answer"
"78029906","78029887","<p>Perhaps this use of <code>combn(.., FUN=)</code>.</p>
<pre class=""lang-r prettyprint-override""><code>fun &lt;- function(i) {
  setNames(list(c(My_list[[i[1]]], -My_list[[i[2]]])), 
           paste(names(My_list)[i], collapse = &quot; - &quot;))
}
### demo of manual/single invocation
fun(c(1, 3))
# $`(    beginner_post1 - beginner_baseline    ) - (    advanced_post1 - advanced_baseline    )`
# [1]  5 -2 -4  1

### all pairs
do.call(c, combn(3, 2, FUN = fun, simplify = FALSE))
# $`(    beginner_post1 - beginner_baseline    ) - (intermediate_post1 - intermediate_baseline)`
# [1]  5 -2 -6  3
# $`(    beginner_post1 - beginner_baseline    ) - (    advanced_post1 - advanced_baseline    )`
# [1]  5 -2 -4  1
# $`(intermediate_post1 - intermediate_baseline) - (    advanced_post1 - advanced_baseline    )`
# [1]  6 -3 -4  1
</code></pre>
","3","Answer"
"78030456","78029887","<p>Here is the whole procedure by walk:  :-)</p>
<pre><code>a &lt;- gsub(&quot;\\s+&quot;, &quot;&quot;, names(My_list)[1]) 
b &lt;- gsub(&quot;\\s+&quot;, &quot;&quot;, names(My_list)[2]) 
c &lt;- gsub(&quot;\\s+&quot;, &quot;&quot;, names(My_list)[3]) 

a_c &lt;- paste(a, &quot;-&quot;, c)
a_b &lt;- paste(a, &quot;-&quot;, b)
b_c &lt;- paste(c, &quot;-&quot;, b)

a1_numeric &lt;- as.numeric(strsplit(paste(My_list[[1]], collapse = &quot;,&quot;), &quot;,&quot;)[[1]])
b1_numeric &lt;- as.numeric(strsplit(paste(My_list[[2]], collapse = &quot;,&quot;), &quot;,&quot;)[[1]])
c1_numeric &lt;- as.numeric(strsplit(paste(My_list[[3]], collapse = &quot;,&quot;), &quot;,&quot;)[[1]])

a1_c1 &lt;- c(a1_numeric, -c1_numeric)
a1_b1 &lt;- c(a1_numeric, -b1_numeric)
c1_b1 &lt;- c(c1_numeric, -b1_numeric)

my_list &lt;- list(a_c = a1_c1, a1_b1, c1_b1)
names(my_list) &lt;- c(a_c, a_b, b_c)

my_list
</code></pre>
<pre><code>$`(beginner_post1-beginner_baseline) - (advanced_post1-advanced_baseline)`
[1]  5 -2 -4  1

$`(beginner_post1-beginner_baseline) - (intermediate_post1-intermediate_baseline)`
[1]  5 -2 -6  3

$`(advanced_post1-advanced_baseline) - (intermediate_post1-intermediate_baseline)`
[1]  4 -1 -6  3
</code></pre>
","0","Answer"
"78030463","78027166","<p>Use tidyverse:</p>
<pre><code>library(tidyverse)
exec(pmap_df, df, expand_grid)

# A tibble: 15 × 9
   cluster st_sub_main_th roo_main st_con_rt st_con_tr st_adsb st_th st_sub2_main_th isstilt
   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;  
 1 1       hira           2        sub-room  terrace   add     NA    NA              NA     
 2 2       NA             4        main-room terrace   add     tsuma NA              NA     
 3 2       NA             4        main-room direct    add     tsuma NA              NA     
 4 3       tsuma          3        sub-room  terrace   add     NA    NA              NA     
 5 4       tsuma          2        sub-room  terrace   sub     NA    hira            NA     
 6 5       NA             1        main-room terrace   add     hira  hira            NA     
 7 5       NA             3        main-room terrace   add     hira  hira            NA     
 8 6       other          6        sub-room  direct    sub     NA    tsuma           0      
 9 6       other          7        sub-room  direct    sub     NA    tsuma           0      
10 6       other          2        sub-room  direct    sub     NA    tsuma           0      
11 6       other          1        sub-room  direct    sub     NA    tsuma           0      
12 6       hira           6        sub-room  direct    sub     NA    tsuma           0      
13 6       hira           7        sub-room  direct    sub     NA    tsuma           0      
14 6       hira           2        sub-room  direct    sub     NA    tsuma           0      
15 6       hira           1        sub-room  direct    sub     NA    tsuma           0  
</code></pre>
<p>Note that the above is equivalent to:</p>
<pre><code>bind_rows(exec(pmap, df, expand_grid))
</code></pre>
<p>In case you have mixed datatypes, consider the following:</p>
<pre><code>exec(rbind, !!!exec(pmap, df, expand_grid))
</code></pre>
","2","Answer"
"78030517","78028582","<p>If you can afford to allocate 256 bytes for your byte set, you can simplify your linear look-up to a direct memory lookup by offset:</p>
<pre class=""lang-golang prettyprint-override""><code>type Set [256]bool

func (s *Set) Contains(b byte) bool {
    return s[b]
}

func (s *Set) Add(b byte) {
    s[b] = true
}

func (s *Set) Remove(b byte) {
    s[b] = false
}
</code></pre>
<p>Possible performance concerns:</p>
<ul>
<li><code>Contains</code> will work equivalently with <code>Set</code> and <code>*Set</code> as the receiver type. It's possible that one of these will be faster, but it would likely depend on how you use the function and what optimizations the compiler applies. So, try both ways if performance is critical.</li>
<li>If your byte values are all less than a certain value, you could reduce the size of the <code>Set</code> array to save some memory. However, keeping the size at (least) 256 will prevent the need for index bounds checking, which might save you some run-time overhead. Again, try it both ways if performance is essential.</li>
</ul>
","2","Answer"
"78032517","78032463","<p>Try this:</p>
<pre><code>bulkdata = [
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
]


[dict(t) for t in {tuple(d.items()) for d in list(filter(lambda x: None not in x.values(), bulkdata))}]
</code></pre>
<p>This prints:</p>
<pre><code>[{'name': 'PAIR-05|PAIR-06', 'device': 'oob-01'},
 {'name': 'PAIR-01|PAIR-02', 'device': 'oob-03'}]
</code></pre>
<p>The function works by first filtering your list to only keep dicts, where all values are not None. Afterwards the duplicate dicts are removed. I used the function as described in the link below.</p>
<p>For reference:
How to remove duplicate dicts: <a href=""https://stackoverflow.com/a/9427216/5240684"">https://stackoverflow.com/a/9427216/5240684</a></p>
<p>How the filter function works: <a href=""https://www.programiz.com/python-programming/methods/built-in/filter"" rel=""nofollow noreferrer"">https://www.programiz.com/python-programming/methods/built-in/filter</a></p>
","1","Answer"
"78032529","78032463","<p>You can try something like this:</p>
<pre><code>bulk_data = [
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
]

result = []

for item in bulk_data:
    any_none = any([True if value is None else False for key, value in item.items()])
    if not any_none and item not in result:
        result.append(item)
</code></pre>
<p>which yields following result:</p>
<pre><code>[{'name': 'PAIR-05|PAIR-06', 'device': 'oob-01'}, {'name': 'PAIR-01|PAIR-02', 'device': 'oob-03'}]
</code></pre>
","1","Answer"
"78032530","78032463","<pre class=""lang-py prettyprint-override""><code>bulkdata = [
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-05|PAIR-06&quot;, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: &quot;PAIR-01|PAIR-02&quot;, &quot;device&quot;: &quot;oob-03&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    {&quot;name&quot;: None, &quot;device&quot;: &quot;oob-01&quot;},
    ]
    
result = []

for entry in bulkdata:
    if None not in entry.values() and entry not in result:
        result.append(entry)

print(result)
</code></pre>
<p>result:</p>
<pre class=""lang-py prettyprint-override""><code>[{'name': 'PAIR-05|PAIR-06', 'device': 'oob-01'}, {'name': 'PAIR-01|PAIR-02', 'device': 'oob-03'}]
</code></pre>
","0","Answer"
"78034298","77999570","<p>One of my colleagues found a solution to this problem.
There is an assertion <a href=""https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/AbstractIterableAssert.html#zipSatisfy(java.lang.Iterable,java.util.function.BiConsumer)"" rel=""nofollow noreferrer"">zipSatisfy</a>.<br />
Here is the description of the function.</p>
<blockquote>
<p>Verifies that the zipped pairs of actual and other elements, i.e.: (actual 1st element, other 1st element), (actual 2nd element, other 2nd element), ... all satisfy the given zipRequirements.<br />
This assertion assumes that actual and other have the same size but they can contain different type of elements making it handy to compare objects converted to another type, for example Domain and View/DTO objects.</p>
</blockquote>
<p>It does exactly what I was looking for.</p>
","3","Answer"
"78035055","78034777","<p>You can create a udf to filter for the pattern you want:</p>
<pre><code>from pyspark.sql import SparkSession
from pyspark.sql.functions import col, udf
from pyspark.sql.types import StringType

# Create a SparkSession
spark = SparkSession.builder \
    .appName(&quot;Example&quot;) \
    .getOrCreate()

# Sample DataFrame
data = [(['AB1 2Z','CD3 4Y','AB5 6X'], 'AB'),
        (['GH7 8W','EF9 0V','EF1 2U'], 'EF'),
        (['IJ3 4T','KL5 6S'], 'KL')]

df = spark.createDataFrame(data, ['col_a', 'col_b'])

# Define a UDF to find the first matching element
find_matching_element_udf = udf(lambda arr, substr: next((x for x in arr if substr in x), None), StringType())

# Apply the UDF to find the first matching element
df = df.withColumn(&quot;matching_element&quot;, find_matching_element_udf(col(&quot;col_a&quot;), col(&quot;col_b&quot;)))

df.show(truncate=False)


Output:
&gt;&gt;&gt; df.show()
+--------------------+-----+----------------+
|               col_a|col_b|matching_element|
+--------------------+-----+----------------+
|[AB1 2Z, CD3 4Y, ...|   AB|          AB1 2Z|
|[GH7 8W, EF9 0V, ...|   EF|          EF9 0V|
|    [IJ3 4T, KL5 6S]|   KL|          KL5 6S|
+--------------------+-----+----------------+
</code></pre>
","0","Answer"
"78037617","78037541","<p>I'm not sure a list is an appropriate output structure, as you can't tell which matches correspond to which conditions. A dictionary might be better. You can create that using a dictionary comprehension, using <code>re.search</code> to match conditions (surrounded by <code>_</code> or beginning/end of string) and <code>itertools.product</code> to get all the combinations of conditions:</p>
<pre class=""lang-py prettyprint-override""><code>import re, itertools

a = ['AFM_123_H2O_56', '345_FM_CO2', 'H6C6_AFM_test', 'dio_CO2_FM', 'check_H2O_FM', 'sample_FM_H6C6', 'AFM_67_H2O']
condition1 = ['H2O', 'CO2', 'H6C6']
condition2 = ['FM', 'AFM']

c = { f'{c1}_{c2}' : 
     [s for s in a if re.search(fr'(^|_){c1}(_|$)', s) and re.search(fr'(^|_){c2}(_|$)', s)] 
     for c1, c2 in itertools.product(condition1, condition2) 
}
</code></pre>
<p>Output:</p>
<pre><code>{
  'H2O_FM': ['check_H2O_FM'],
  'H2O_AFM': ['AFM_123_H2O_56', 'AFM_67_H2O'],
  'CO2_FM': ['345_FM_CO2', 'dio_CO2_FM'],
  'CO2_AFM': [],
  'H6C6_FM': ['sample_FM_H6C6'],
  'H6C6_AFM': ['H6C6_AFM_test']
}
</code></pre>
<p>If you do want just a list, use <code>list(c.values())</code> (which you can <code>filter</code> to remove empty lists if desired):</p>
<pre><code>[['check_H2O_FM'], ['AFM_123_H2O_56', 'AFM_67_H2O'], ['345_FM_CO2', 'dio_CO2_FM'], [], ['sample_FM_H6C6'], ['H6C6_AFM_test']]
</code></pre>
<p>If you want a dataframe, it's easy enough to convert:</p>
<pre><code>out = pd.DataFrame(zip(c.keys(), c.values()))
</code></pre>
<p>Output:</p>
<pre><code>          0                             1
0    H2O_FM                [check_H2O_FM]
1   H2O_AFM  [AFM_123_H2O_56, AFM_67_H2O]
2    CO2_FM      [345_FM_CO2, dio_CO2_FM]
3   CO2_AFM                            []
4   H6C6_FM              [sample_FM_H6C6]
5  H6C6_AFM               [H6C6_AFM_test]
</code></pre>
","2","Answer"
"78038090","78037541","<p>Assuming your substrings are separated by <code>_</code>, you could use <code>set</code> operations:</p>
<pre><code>from itertools import product

s = pd.Series(a)

out = pd.Series({S: s[s.str.split('_').apply(S.issubset)].tolist()
                 for S in map(frozenset, product(condition1, condition2))
                })
</code></pre>
<p>Output:</p>
<pre><code>(H2O, FM)                    [check_H2O_FM]
(H2O, AFM)     [AFM_123_H2O_56, AFM_67_H2O]
(CO2, FM)          [345_FM_CO2, dio_CO2_FM]
(CO2, AFM)                               []
(FM, H6C6)                 [sample_FM_H6C6]
(AFM, H6C6)                 [H6C6_AFM_test]
dtype: object
</code></pre>
<p>Alternative format for the keys:</p>
<pre><code>out = pd.Series({'_'.join(x): s[s.str.split('_').apply(set(x).issubset)].tolist()
                 for x in product(condition1, condition2)
                })
</code></pre>
<p>Output:</p>
<pre><code>H2O_FM                    [check_H2O_FM]
H2O_AFM     [AFM_123_H2O_56, AFM_67_H2O]
CO2_FM          [345_FM_CO2, dio_CO2_FM]
CO2_AFM                               []
H6C6_FM                 [sample_FM_H6C6]
H6C6_AFM                 [H6C6_AFM_test]
dtype: object
</code></pre>
","1","Answer"
"78040640","78040425","<pre><code>l = ['s3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20201231/',
    's3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20230531/']

r = []

#iterate through the list
for x in l:
    
    #Get the index of 't=' and add 2 to get the index of the number
    idx = x.find('t=') + 2
    
    #get substring from idx to the last digit
    x = x[idx:-1]
    r.append(x)
print(r) #Output: ['20201231', '20230531']

#If you want in reverse order as shown in the question
r = r[::-1]
print(r) Output: ['20230531', '20201231']
</code></pre>
","0","Answer"
"78040741","78040425","<p>you could just iterate through the list and split &quot;=&quot;.
then append to output_list.</p>
<pre><code>output = []
for item in list:
    parts = item.split(&quot;=&quot;)
    output.append(parts[-1][:-1])

print(output)
</code></pre>
","0","Answer"
"78041890","78034777","<p>Check this out:</p>
<pre><code>df = (
    df
    .withColumn('col_c', f.expr('filter(col_a, element -&gt; startswith(element, col_b))')[0])
)
</code></pre>
<p>If you must only use PySpark transformations:</p>
<pre><code>import pyspark.sql.functions as f

df = (
    df
    .withColumn('col_c', f.element_at(f.filter(f.col('col_a'), lambda x : f.startswith(x, f.col('col_b'))), 1))
)
</code></pre>
<p>and the output is:</p>
<pre><code>+------------------------+-----+------+                                         
|col_a                   |col_b|col_c |
+------------------------+-----+------+
|[AB1 2Z, CD3 4Y, AB5 6X]|AB   |AB1 2Z|
|[GH7 8W, EF9 0V, EF1 2U]|EF   |EF9 0V|
|[IJ3 4T, KL5 6S]        |KL   |KL5 6S|
+------------------------+-----+------+
</code></pre>
","0","Answer"
"78041943","78040425","<p>you can also achieve this by using regular expression too to extract it from list.</p>
<pre><code>import re
# Your list of strings
strings = [
    's3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20201231/',
    's3://dx-datalake-modl-svil-3075-bucket-layer/DX/WDOS/VV_SALDI_TITOLO/c_acr=GE/c_giorno_t=20230531/'
]
# Initialize an empty list to store the extracted digits
list = []
# Iterate over the strings in your list
for string in strings:
    digits = re.search(r'\d{8}', string)
    if digits:
        # Append the extracted digits to the list
        list.append(digits.group())
print(list)

</code></pre>
","0","Answer"
"78044658","78040425","<p>If using <code>re</code> module, use the function <code>findall</code>:</p>
<pre><code>import re
re.findall(&quot;(?&lt;=t=)\\d+&quot;, ' '.join(strings))

['20201231', '20230531']
</code></pre>
","0","Answer"
"78045017","78044990","<p>What is happening is just nested indexing.
It's not what you think is happening, instead it's actually very trivial.</p>
<pre><code>numbers[1] = 3 (for the numbers = [2,3,5,8] )
</code></pre>
<p>is acting as an index to the outer one</p>
<pre><code>number[number[1]] = number[3] = 8
</code></pre>
","3","Answer"
"78045092","78044990","<p>To understand, break the single line to its components.</p>
<pre><code>numbers = [2,3,5,8]

# now instead of `numbers[numbers[1]]` take the innermost portion and give a variable name

inner = numbers[1]
print(inner) #output : 3

#Starting from o, the value of index 1 is 3, So the output will be 3. Now check the outer component

outer = numbers[inner]
print(outer) #Output : 8

'''From the previous step we got the value of inner is 3. 
Now again 3 is considered as index. 
so numbers[3], will return 8 as value of the element with index 3 is 8.
'''
</code></pre>
","2","Answer"
"78045428","78044966","<pre><code>res &lt;- setNames(My_list, sub(&quot;^.([^_]+)\\D+(\\d+).*&quot;, &quot;Gain_\\2(\\1)&quot;, names(My_list)))

$`Gain_1(beginner)`
[1]  5 -2

$`Gain_1(intermediate)`
[1]  6 -3

$`Gain_1(advanced)`
[1]  4 -1

$`Gain_2(beginner)`
[1]  8 -2

$`Gain_2(intermediate)`
[1]  9 -3

$`Gain_2(advanced)`
[1]  7 -1

$`Gain_1(framework notes)`
[1] 1 2

$`Gain_1(note-taking instruction)`
[1] 1
</code></pre>
","2","Answer"
"78045649","78044966","<p>You can use this regex:</p>
<pre><code>\(([a-z -]+)\w+?(\d+)\W+\1\w+\)
</code></pre>
<p>which matches:</p>
<ul>
<li><code>\(</code> : a <code>(</code></li>
<li><code>([a-z -]+)</code> : some number of letter, space and hyphen characters, captured in group 1</li>
<li><code>\w+?</code> : a minimal number of word characters</li>
<li><code>(\d+)</code> : some number of digits, captured in group 2</li>
<li><code>\W+</code> : some number of non-word characters</li>
<li><code>\1</code> : repeat of what was captured in group 1</li>
<li><code>\w+</code> : some number of word characters</li>
<li><code>\)</code> : a <code>)</code></li>
</ul>
<p>Regex demo on <a href=""https://regex101.com/r/vIkhuA/1"" rel=""nofollow noreferrer"">regex101</a></p>
<p>In R (thanks @thelatemail):</p>
<pre class=""lang-r prettyprint-override""><code>sub(&quot;\\(([a-z -]+)\\w+?(\\d+)\\W+\\1\\w+\\)&quot;, &quot;Gain_\\2(\\1)&quot;, names(My_list))
</code></pre>
","2","Answer"
"78045703","78045574","<p>One tidyverse solution:</p>
<pre><code>library(dplyr)
library(tidyr)
library(tibble)

names(List) &lt;- stringr::str_to_sentence(names(List))

List |&gt; 
  unlist() |&gt; 
  enframe() |&gt; 
  separate_wider_delim(cols = name, names = c(&quot;Group&quot;, &quot;Variable&quot;), delim = &quot;.&quot;) |&gt; 
  right_join(data)

   Group  Variable value        Col.A Col.B
   &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;
 1 Group1 V1       0.857138     x     x    
 2 Group1 V2       1            x     x    
 3 Group1 V3       0.5          x     x    
 4 Group1 V4       not limiting x     x    
 5 Group1 V5       0.1          x     x    
 6 Group2 V1       0.65         x     x    
 7 Group2 V2       1            x     x    
 8 Group2 V3       1            x     x    
 9 Group2 V4       0.6          x     x    
10 Group2 V5       0.25         x     x    
11 Group3 V1       0.65         x     x    
12 Group3 V2       0.75         x     x    
13 Group3 V3       0.3          x     x    
14 Group3 V4       1            x     x    
15 Group3 V5       1            x     x    
</code></pre>
","3","Answer"
"78046108","78045574","<p>In base R use:</p>
<pre><code>a &lt;- data.frame(array2DF(structure(List, dim = length(List))), row.names = 'Var1')
data$Col.E &lt;- a[as.matrix(data[c('Group', 'Variable')])]
data

   Col.A Col.B  Group Variable        Col.E
1      x     x Group1       V1     0.857138
2      x     x Group1       V2            1
3      x     x Group1       V3          0.5
4      x     x Group1       V4 not limiting
5      x     x Group1       V5          0.1
6      x     x Group2       V1         0.65
7      x     x Group2       V2            1
8      x     x Group2       V3            1
9      x     x Group2       V4          0.6
10     x     x Group2       V5         0.25
11     x     x Group3       V1         0.65
12     x     x Group3       V2         0.75
13     x     x Group3       V3          0.3
14     x     x Group3       V4            1
15     x     x Group3       V5            1
</code></pre>
<hr />
<p>Note that I first had to change the name in <code>List</code> to match the names given in <code>data</code>. ie change <code>GROUP1</code> to <code>Group1</code></p>
","3","Answer"
"78047166","78047149","<p><a href=""https://tibble.tidyverse.org/reference/lst.html"" rel=""nofollow noreferrer""><code>tibble::lst()</code></a> does this:</p>
<pre class=""lang-r prettyprint-override""><code>library(tibble)

l &lt;- lst(a, b, c)

l
# $a
# [1] 1
# 
# $b
# [1] 2
# 
# $c
# [1] 3
</code></pre>
","3","Answer"
"78048105","78045574","<pre class=""lang-r prettyprint-override""><code>library(rrapply)
library(dplyr)
library(stringr)

rrapply(List, how = &quot;melt&quot;) %&gt;% 
  mutate(L1 = str_to_title(L1)) %&gt;% 
  left_join(data, .,  join_by(Group == L1 , Variable == L2))

#&gt;    Col.A Col.B  Group Variable        value
#&gt; 1      x     x Group1       V1     0.857138
#&gt; 2      x     x Group1       V2            1
#&gt; 3      x     x Group1       V3          0.5
#&gt; 4      x     x Group1       V4 not limiting
#&gt; 5      x     x Group1       V5          0.1
#&gt; 6      x     x Group2       V1         0.65
#&gt; 7      x     x Group2       V2            1
#&gt; 8      x     x Group2       V3            1
#&gt; 9      x     x Group2       V4          0.6
#&gt; 10     x     x Group2       V5         0.25
#&gt; 11     x     x Group3       V1         0.65
#&gt; 12     x     x Group3       V2         0.75
#&gt; 13     x     x Group3       V3          0.3
#&gt; 14     x     x Group3       V4            1
#&gt; 15     x     x Group3       V5            1
</code></pre>
","3","Answer"
"78049300","78047149","<p>If the components are the same length, as in the question, then create a data.frame and convert that to a list.  No packages are needed.</p>
<pre><code>a &lt;- 1; b &lt;- 2; c &lt;- 3
data.frame(a, b, c) |&gt; as.list()
</code></pre>
<p>giving</p>
<pre><code>$a
[1] 1

$b
[1] 2

$c
[1] 3
</code></pre>
","1","Answer"
"78050898","78050884","<p>You can use <code>str.join</code> or unpack the <code>v</code>:</p>
<pre class=""lang-py prettyprint-override""><code>def tab(data):
    for i, v in enumerate(data):
        print(i, *v)  # &lt;-- put * here
        # or:
        #print(i, &quot; &quot;.join(v))


tab([[&quot;a&quot;, &quot;b&quot;]])
tab([[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]])
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>0 a b
0 a b c
</code></pre>
","2","Answer"
"78051164","78051065","<p>Here's a possible solution:</p>
<pre><code>option_list = [
    &quot;HLJ3007A7S&quot;,
    &quot;SKC4491U7K&quot;,
    &quot;NAS1782P3K&quot;,
    &quot;MK217TRG&quot;,
    &quot;RRS38W23KS&quot;]

has_digits = [i for i in option_list if i[4:7].isdigit()]
</code></pre>
","0","Answer"
"78051625","78051065","<p>str has a convenient method called <em>isdecimal</em> which you could utilise as follows:</p>
<pre><code>data = [&quot;HLJ3007A7S&quot;, &quot;SKC4491U7K&quot;, &quot;NAS1782P3K&quot;, &quot;MK217TRG&quot;, &quot;RRS38W23KS&quot;]
new_list = [s for s in data if not s[4:7].isdecimal()]
print(new_list)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['MK217TRG', 'RRS38W23KS']
</code></pre>
","0","Answer"
"78053325","78050884","<p>Some alternatives:</p>
<pre><code>def tab(data):
    for i, v in enumerate(data):
      print(i, end=' ')
      for v_i in v: 
        print(v_i, end=' ')
      print()



def tab(data):
    for i, v in enumerate(data):
        print(i, ' '.join(v))



def tab(data):
    [print(i, ' '.join(v)) for i, v in enumerate(data)]
</code></pre>
","0","Answer"
"78055100","78055063","<p>Most likely you're using an <a href=""https://developer.android.com/reference/kotlin/androidx/compose/ui/util/package-summary#(kotlin.collections.List).fastAny(kotlin.Function1)"" rel=""noreferrer"">extention function</a> from Compose which is Android specific. Kotlin's List does not have <code>fastAny</code> function if I remember correctly.</p>
","5","Answer"
"78055261","78055063","<p>If you want to store filtered (number &gt; 5) numbers in predicate list, use this:</p>
<pre><code>fun main() {

    val list = mutableListOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    val predicate = list.filter{ it &gt; 3 } 
}
</code></pre>
<p>There is not official extention function .fastAny{}.</p>
<p>Reference: <a href=""https://kotlinlang.org/docs/collection-filtering.html#filter-by-predicate"" rel=""nofollow noreferrer"">https://kotlinlang.org/docs/collection-filtering.html#filter-by-predicate</a></p>
","1","Answer"
"78055572","78055063","<p>The insights above are correct - <strong><code>fastAny()</code></strong> is not part of the Kotlin Standard Library but rather a part of the Jetpack Compose library specifically from <code>androidx.compose.ui.util</code> package.</p>
<p>This is an except from the docs:</p>
<blockquote>
<p>Returns <code>true</code> if at least one element matches the given [predicate].
Do not use for collections that come from public APIs, since they
may not support random access in an efficient way, and this method may
actually be a lot slower. Only use for collections that are created by
code we control and are known to support random access.</p>
</blockquote>
<p>This is the source code:</p>
<pre><code>@Suppress(&quot;BanInlineOptIn&quot;)
@OptIn(ExperimentalContracts::class)
inline fun &lt;T&gt; List&lt;T&gt;.fastAny(predicate: (T) -&gt; Boolean): Boolean {
    contract { callsInPlace(predicate) }
    fastForEach { if (predicate(it)) return true }
    return false
}
</code></pre>
<p>The code is compiling on Android Studio because I have compose dependencies and have used this <strong><code>import androidx.compose.ui.util.fastAny.</code></strong></p>
<p>I did further research and learnt <code>fastAny()</code> a utility function optimized for performance esp. on large lists by using indexed loops instead of iterator-based loops.</p>
<p>It is designed for use within Jetpack Compose projects for building UIs on Android.</p>
<p>There are also similar util fxns like <em>fastForEach(), fastForEachReversed(), fastForEachIndexed(),fastFirstOrNull(), fastSumBy()</em>  etc.</p>
","0","Answer"
"78056099","78055063","<p>Maybe somebody will find this useful - filtering classic, Predicate &amp; BiPredicate:</p>
<pre><code>import java.util.function.BiPredicate
import java.util.function.Predicate

class StackOverflow {


  fun filterListClassic(list: List&lt;Int&gt;, that: Int): List&lt;Int&gt; {
    return list.stream()
      .filter { biggerThanThatClassic(it, that) }
      .toList()
  }

  private fun biggerThanThatClassic(given: Int, that: Int): Boolean {
    return given &gt; that
  }


  fun &lt;T&gt; filterListPredicate(list: List&lt;T&gt;, filter: Predicate&lt;T&gt;): List&lt;T&gt; {
    return list.filter { filter.test(it) }
  }

  val biggerThan3: Predicate&lt;Int&gt; = Predicate { that: Int -&gt; that &gt; 3 }


  fun filterListBiPredicate(list: List&lt;Int&gt;, biPredicate: BiPredicate&lt;Int, Int&gt;, that: Int): List&lt;Int&gt; {
    return list.stream()
      .filter { biPredicate.test(it, that) }
      .toList()
  }

  val biggerThanThat: BiPredicate&lt;Int, Int&gt; = BiPredicate { given: Int, that: Int -&gt; given &gt; that }

}

fun main() {
  val myList = listOf(2, 3, 5, 9, 1, 3, 7)

  StackOverflow().apply {
    val that = 3

    val filteredClassic = filterListClassic(myList, that)
    println(filteredClassic)

    val filteredPredicate = filterListPredicate(myList, biggerThan3)
    println(filteredPredicate)

    val filteredBiPredicate = filterListBiPredicate(myList, biggerThanThat, that)
    println(filteredBiPredicate)
  }
}
</code></pre>
","0","Answer"
"78060623","78060537","<p>Can you try the following:</p>
<pre><code>new_list = [value for idx, value in enumerate(old_list) 
            for __ in range(2 if idx == 4 or idx == 5 else 1)]  
</code></pre>
","1","Answer"
"78060864","78060537","<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; old_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; dup_idx = {4, 5}
&gt;&gt;&gt; list(chain.from_iterable((v, v) if i in dup_idx else (v,) for i, v in enumerate(old_list)))
[0, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10]
</code></pre>
<p>With the comprehension here, you're basically creating a sequence of tuples, like:</p>
<pre><code>(0,), (1,), (2,), (3,), (4, 4), (5, 5), ...
</code></pre>
<p><code>chain.from_iterable</code> flattens that into one sequence of numbers, and <code>list</code> creates an actual list from the iterator.</p>
<p>Alternatively:</p>
<pre><code>list(chain.from_iterable((v,) * ((i in dup_idx) + 1) for i, v in enumerate(old_list)))
</code></pre>
<p>But this is more tricky and error prone. It creates one tuple <code>(v,)</code>, then multiplies that tuple by either <code>1</code> or <code>2</code> (i.e. <code>(v,) * 1</code>/<code>(v,) * 2</code>). The <code>1</code> and <code>2</code> are the result of <code>(i in dup_idx) + 1</code>. <code>i in dup_idx</code> is either <code>True</code> or <code>False</code>, which act like <code>1</code> and <code>0</code> respectively; and then <code>+ 1</code> gets added to that.</p>
<p>This approach works here, because you only have numbers, but might lead to <a href=""https://stackoverflow.com/q/240178/476"">surprising results</a> with mutable objects:</p>
<pre><code>&gt;&gt;&gt; t = ([],)
&gt;&gt;&gt; t2 = t * 2
&gt;&gt;&gt; t2
([], [])
&gt;&gt;&gt; t2[0].append('foo')
&gt;&gt;&gt; t2
(['foo'], ['foo'])
</code></pre>
","-1","Answer"
"78060931","78005551","<p>TL;DR Things written in C tend to be faster than pure Python equivalents because they bypass the overhead of the interpreter, but any implementation of <code>max</code> has to contend with the speed of the iterator it uses as well, and this can dominate the time it spends actually comparing values retrieved from the iterator.</p>
<hr />
<p>There are two components here: the implementation of <code>max</code>, and the implementation of the iterator. Lists themselves are not iterators: calling <code>iter(L)</code> returns not the list itself, but an wrapper of type <code>list_iterator</code> which provides a <code>__next__</code> method to retrieve items from the list. Just as <code>list</code> is a built-in type, so is <code>list_iterator</code>.</p>
<p>Here's are a pair of classes that implement a <code>range</code>-like iterator in pure Python:</p>
<pre><code>class Foo:
    def __init__(self, n):
        self.n = n

    def __iter__(self):
        return FooIter(self.n)

class FooIter:
    def __init__(self, n):
        self.x = 0
        self.n = n
    def __next__(self):
        if self.x &gt;= self.n:
            raise StopIteration

        rv = self.x
        self.x += 1
        return rv
</code></pre>
<p>Using the same test setup from <a href=""https://stackoverflow.com/a/78005880/1126841"">https://stackoverflow.com/a/78005880/1126841</a>, you see that <code>max</code> is significantly faster than <code>manualMax</code> for a built-in <code>list</code> object.</p>
<pre><code>n = 1000000
L1 = list(range(n))
L2 = Foo(n)
def manualMax(L):
    highest_bid = 0
    for val in L:
        if val &gt; highest_bid:
            highest_bid = val
    return highest_bid

In [1]: %timeit max(L1)
14.3 ms ± 192 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

In [2]: %timeit manualMax(L1)
36.4 ms ± 1.25 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
<p>For an instance of <code>Foo</code>, though, it is only slightly faster.</p>
<pre><code>In [3]: %timeit max(L2)
222 ms ± 2.48 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [4]: %timeit manualMax(L2)
249 ms ± 5.57 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
","0","Answer"
"78062215","78060537","<p>To duplicate just one index:</p>
<pre><code>lst = [1,2,3,4,5,6,7,8,9,10]
lst[4:5] *= 2
print(lst)
</code></pre>
<p>For an arbitrary index <code>n</code>:</p>
<pre><code>lst[n:n+1] *= 2
</code></pre>
<p>If you want to duplicate multiple indices, either do them form largest to smallest, or from smallest to largest and adjust them as needed (increase each by the number of previous duplications).</p>
","1","Answer"
"78070885","78070853","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>from datetime import datetime
from itertools import groupby

data = [
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 8, 0), &quot;km&quot;: 10},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 13, 30), &quot;km&quot;: 20},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 17, 30), &quot;km&quot;: 40},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 9, 15), &quot;km&quot;: 15},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 14, 45), &quot;km&quot;: 25},
]

# sort if needed:
# data.sort(key=lambda d: d[&quot;Zeit&quot;])

for _, g in groupby(data, lambda d: (d[&quot;Zeit&quot;].year, d[&quot;Zeit&quot;].month, d[&quot;Zeit&quot;].day)):
    first = next(g)
    first[&quot;km&quot;] = 0

print(data)
</code></pre>
<p>Prints:</p>
<pre><code>[
    {&quot;Zeit&quot;: datetime.datetime(2024, 2, 27, 8, 0), &quot;km&quot;: 0},
    {&quot;Zeit&quot;: datetime.datetime(2024, 2, 27, 13, 30), &quot;km&quot;: 20},
    {&quot;Zeit&quot;: datetime.datetime(2024, 2, 27, 17, 30), &quot;km&quot;: 40},
    {&quot;Zeit&quot;: datetime.datetime(2024, 2, 28, 9, 15), &quot;km&quot;: 0},
    {&quot;Zeit&quot;: datetime.datetime(2024, 2, 28, 14, 45), &quot;km&quot;: 25},
]
</code></pre>
","2","Answer"
"78070886","78070853","<p>Convert your DateTime to a Unix timestamp and then sort them in ascending way. The first one in the list will be the one which you are looking for.</p>
<p>Start with below piece of code:</p>
<pre><code>import datetime
import time
 
date_time = datetime.datetime(2021, 7, 26, 21, 20)

unix_timestamp = time.mktime(date_time.timetuple())
</code></pre>
","-2","Answer"
"78070896","78070853","<p>It look like the list will always be sorted. One way would be to loop through the list and once the day changes then assign km = 0.</p>
<p>The solution that worked for me was:</p>
<pre><code>from datetime import datetime
data = [
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 8, 0), &quot;km&quot;: 10},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 13, 30), &quot;km&quot;: 20},
    {&quot;Zeit&quot;: datetime(2024, 2, 27, 17, 30), &quot;km&quot;: 40},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 9, 15), &quot;km&quot;: 15},
    {&quot;Zeit&quot;: datetime(2024, 2, 28, 14, 45), &quot;km&quot;: 25}
]

current = -1
for entry in data:
    if current != (current := entry[&quot;Zeit&quot;].date()):
        entry[&quot;km&quot;] = 0
        current = entry[&quot;Zeit&quot;].date()
</code></pre>
<p>EDIT: used @juanpa.arrivillaga's suggestion</p>
","0","Answer"
"78079560","78079508","<p>To convert the entire tuple to <code>float</code> you can use</p>
<pre><code>map(float, test_case)
</code></pre>
<p>which you can sum with</p>
<pre><code>sum(map(float, test_case))
</code></pre>
<p>and get the average</p>
<pre><code>sum(map(float, test_case))/len(test_case)
</code></pre>
","0","Answer"
"78079562","78079508","<p>You're looping through each character in the string here: <code>for k in nums:</code>, which causes<code>float(k)</code> to try to convert the <code>.</code> character. Remove it</p>
<pre><code>        elif type(nums) == str:
            # for k in nums:
                float_num = float(nums)
                s += float_num
</code></pre>
","0","Answer"
"78080568","78079508","<p>Just try to convert everything to float:</p>
<pre><code>def my_average(*args):
    if args:
        return sum(map(float, args)) / len(args)

test_case = (2, 3, 25, '234.123123', 3, 1, 0)
print(my_average(*test_case))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>38.30330328571428
</code></pre>
","0","Answer"
"78083560","78082911","<h2><code>SortedSet#subSet</code> &amp; <code>NavigableSet#descendingSet</code></h2>
<p>Use <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/SortedSet.html#subSet(E,E)"" rel=""nofollow noreferrer""><code>SortedSet#subSet</code></a> &amp; <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/NavigableSet.html#descendingSet()"" rel=""nofollow noreferrer""><code>NavigableSet#descendingSet</code></a>. Both of these methods return a <em>view</em> onto the original set, without creating a separate collection.</p>
<p>The concrete class <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/TreeSet.html"" rel=""nofollow noreferrer""><code>TreeSet</code></a> implements both of those interfaces. (<code>TreeSet</code> also implements <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/SequencedSet.html"" rel=""nofollow noreferrer""><code>SequencedSet</code></a> now in Java 21+. See <a href=""https://openjdk.org/jeps/431"" rel=""nofollow noreferrer"">JEP 431</a>.)</p>
<pre><code>public enum SortType {
    ALPHABETICALLY(new TreeSet&lt;String&gt;(/*you can have custom comparator Comparator.comparing... so you can use the cosmetic*/)) {

        @Override
        public Set&lt;String&gt; getSubSet(String min, String max) {
            return set.subSet(min, max);
        }
        
    },
    ALPHABETICALLY_REVERSE(ALPHABETICALLY.set) {

        @Override
        public Set&lt;String&gt; getSubSet(String min, String max) {
            return set.descendingSet().subSet(min, max);
        }
        
    },
    RARITY(new TreeSet&lt;String&gt;(/*you can have custom comparator Comparator.comparing... so you can use the cosmetic*/)) {

        @Override
        public Set&lt;String&gt; getSubSet(String min, String max) {
            return set.subSet(min, max);
        }
        
    },
    RARITY_REVERSE(RARITY.set) {

        @Override
        public Set&lt;String&gt; getSubSet(String min, String max) {
            return set.descendingSet().subSet(min, max);
        }
        
    };
    
    protected TreeSet&lt;String&gt; set;
    
    private SortType(TreeSet&lt;String&gt; set) {
        this.set = set;
    }
    
    public void add(String o) {
        set.add(o);
    }
    
    public abstract Set&lt;String&gt; getSubSet(String min, String max);

}
</code></pre>
<p>you have to retain now only to copy of the set, depending on the order adding itemes to both the TreeSets.</p>
","1","Answer"
"78083671","78082911","<p>An easy improvement would be to cut down on the number of lists you store. Remove <code>XXX_REVERSE</code> and iterate backwards if you need items in reverse order.</p>
<p>For example:</p>
<pre class=""lang-java prettyprint-override""><code>public enum SortType {
    ALPHABETICALLY,
    RARITY
}
</code></pre>
<pre class=""lang-java prettyprint-override""><code>public static void loadGadgets(SortType sortType, boolean reverseOrder) {
    List&lt;String&gt; gadgets = availableGadgets.get(sortType);
    List&lt;String&gt; gadgetSub = gadgets.subList(min, max);

    // Set up iteration order.
    int startIndex;
    int endIndex;
    int step;
    if (reverseOrder) {
        startIndex = gadgetSub.size() - 1;
        endIndex = - 1;
        step = - 1;
    } else {
        startIndex = 0;
        endIndex = gadgetSub.size();
        step = 1;
    }

    for (int i = startIndex; i != endIndex; i += step) {
        // Get gadget by index.
        String gadgetID = gadgetSub.get(i);
        Cosmetic gadget = CosmeticHandler.getInstance().getCosmeticFromID(gadgetID);
        // LOAD GADGETS IN ORDER
    }
}
</code></pre>
<p>If you need to maintain the separate lists for <code>trails</code>, <code>gadgets</code>, etc., then the <code>EnumMaps</code> are a decent way to store them and index-based iterating, though chunky, has very readable intent without adding additional complexity.</p>
","0","Answer"
"78090319","78090287","<p>Use <code>join()</code> to create a delimited string.</p>
<p>You can use incrementing slices of the original list as the list to slice.</p>
<pre><code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']
new_list = [' + '.join(page_list[:i]) for i in range(1, len(page_list)+1)]

print(new_list)
</code></pre>
<p>Or you can keep appending to another list before joining.</p>
<pre><code>new_list = []
pages = []
for page in page_list:
    pages.append(page)
    new_list.append(' + '.join(pages)
</code></pre>
","2","Answer"
"78090329","78090287","<p>One way to do this is to start with <code>new_list</code> containing the first element of <code>page_list</code> and iteratively add the last element of <code>new_list</code> to successive elements of <code>page_list</code>, essentially  having a 'running total' stored as the last element of <code>new_list</code>.</p>
<p>This is slightly faster than the other solution as it only does each join once, rather than joining every element of <code>page_list</code> for each element of <code>new_list</code>.</p>
<pre><code>new_list = [page_list[0]] # Initialise new_list with first element of page_list
for elem in page_list[1:]: # For the other elements of page_list
    new_list.append(new_list[-1] + ' + ' + elem) # Add another element of page_list each iteration

print(new_list)
</code></pre>
","0","Answer"
"78090331","78090287","<p>try this:</p>
<pre><code>pages = []
for index, elem in enumerate(page_list):
    pages.append(page_list[:index + 1])
print(pages)
</code></pre>
","1","Answer"
"78090361","78090287","<p>How about to do in one line.</p>
<pre><code>pages = [page_list[:index + 1]for index, elem in enumerate(page_list)]
print(pages)
</code></pre>
","0","Answer"
"78090372","78090287","<p>So lets break down the problem:</p>
<ol>
<li>We need to iterate over every element in <code>page_list</code></li>
<li>For every element we iterate over, we need to iterate over all previous elements before it, and add it to a string in the format <code>[a] + [b] + [c] + ... [n]</code></li>
</ol>
<p>Because we plan to iterate over each element in the list, but also the ones before it, it is probably wise to use the <em>index</em> of the elements, rather than the elements. This means we should probably make use of the <code>range(start, end)</code> feature.</p>
<p>To start, we can do</p>
<pre><code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']

new_list = []

for i in range(0, len(page_list)):
    pass
</code></pre>
<p>And now we are iterating over the list. However, inside the for loop, we will probably need to iterate over previous entries too:</p>
<pre><code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']

new_list = []

for i in range(0, len(page_list)):
    for j in range(0, i):
        pass
</code></pre>
<p>And then we will need a way to build the string - we need to be able to add to the string and handle the case where the string has one and more than one entry:</p>
<pre><code>page_list = [...]

# ...

str = &quot;&quot;

if len(str) &gt; 0:
    str += &quot; + &quot;
str += page_list[index]
</code></pre>
<p>And then we put it all together (I changed something, but I'll leave that as an exercise for you to figure out what was the change from above, and why):</p>
<pre class=""lang-py prettyprint-override""><code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']

new_list = []

for i in range(1, len(page_list) + 1):
    str = &quot;&quot;
    for j in range(0, i):
        if len(str) &gt; 0:
            str += &quot; + &quot;
        str += page_list[j]
    new_list.append(str)

print(new_list)
</code></pre>
<p>It should give:</p>
<pre><code>['first_page', 'first_page + second_page', 'first_page + second_page + third_page', 'first_page + second_page + third_page + fourth_page']
</code></pre>
","0","Answer"
"78090464","78090287","<pre><code>page_list = ['first_page', 'second_page', 'third_page', 'fourth_page']
for i in range(len(page_list)):
    sub = page_list[:i+1]
    sub = ' + '.join(sub)
    print(sub)
    
'''Output:
first_page
first_page + second_page
first_page + second_page + third_page
first_page + second_page + third_page + fourth_page
'''
</code></pre>
","0","Answer"
"78093969","78093964","<p>Create a grouping dictionary where keys are first values from tuple and values are lists. Then you can convert this dictionary to a final list:</p>
<pre class=""lang-py prettyprint-override""><code>lst = [
    (&quot;1&quot;, &quot;a&quot;),
    (&quot;2&quot;, &quot;b&quot;),
    (&quot;3&quot;, &quot;c&quot;),
    (&quot;3&quot;, &quot;d&quot;),
    (&quot;4&quot;, &quot;e&quot;),
    (&quot;4&quot;, &quot;f&quot;),
    (&quot;5&quot;, &quot;g&quot;),
]

out = {}
for a, b in lst:
    out.setdefault(a, []).append(b)

out = list(out.items())
print(out)
</code></pre>
<p>Prints:</p>
<pre><code>[('1', ['a']), ('2', ['b']), ('3', ['c', 'd']), ('4', ['e', 'f']), ('5', ['g'])]
</code></pre>
","1","Answer"
"78094003","78093964","<p>This is the operation done by <code>itertools.groupby</code>. A simple example, given that your list is already properly sorted, looks like</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; L = [('1', 'a'), ('2', 'b'), ('3', 'c'), ('3', 'd'), ('4', 'e'), ('4', 'f'), ('5', 'g')]
&gt;&gt;&gt; [(k, [x for _, x in v]) for k, v in groupby(L, key=lambda x: x[0])]
[('1', ['a']), ('2', ['b']), ('3', ['c', 'd']), ('4', ['e', 'f']), ('5', ['g'])]
</code></pre>
<p>The result of <code>groupby</code> is a mapping of keys (defined by the <code>key</code> argument) to the objects from the list sharing each key. <code>[x for _, x in v]</code> extracts the non-key part of the original tuples.</p>
","1","Answer"
"78094188","78093964","<p>Here's another method of achieving the needed output</p>
<pre><code>lst = [('1', 'a'), ('2', 'b'), ('3', 'c'), ('3', 'd'), ('4', 'e'), ('4', 'f'), ('5', 'g')]

result = {}

for number, letter in lst:
    if number not in result:
        result[number] = [letter]
    else:
        result[number].append(letter)

result_list = list(result.items())

print(result_list)
</code></pre>
<ol>
<li>Creating an empty dictionary(result)</li>
<li>If the number is not already in the dictionary, it initializes an empty list and adds the current letter. If the number is already present, it appends the letter to the existing list.</li>
<li>Finally converting the result dictionary to tuple</li>
</ol>
","1","Answer"
"78096892","78094522","<p>Your use of the word “fragment” confused me.  It is not wrong, but it is vague.  I am going to assume that you want break up (fragment) the string into substrings, each of which can be fully rendered by one of your preferred fonts.</p>
<p>A “text run” is a subsequence of characters which all have common attributes.  In this case, that common attribute is the font which will be used to render the characters.  Java has a class which can store text which has attribute-based runs in it:  <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/AttributedString.html"" rel=""nofollow noreferrer"">AttributedString</a>.</p>
<p>So, we can create a loop which tries calling <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/Font.html#canDisplayUpTo(java.text.CharacterIterator,int,int)"" rel=""nofollow noreferrer"">Font.canDisplayUpTo</a> on each font, until that method returns a valid index, indicating that font can display at least one character.  We can use the returned index to not only apply the font to parts of an AttributedString, but also to advance through the string and check the next part of the text with the same font loop, repeating that process until we reach the end of the string:</p>
<pre><code>private AttributedString applyFontsTo(String text) {
    AttributedString attrText = new AttributedString(text);

    int len = text.length();
    int textRunStart = 0;
    CharacterIterator i = new StringCharacterIterator(text);
    while (textRunStart &gt;= 0) {
        Font matchingFont = null;
        String runText = null;

        for (Font font : preferredFontList) {
            int textRunEnd = font.canDisplayUpTo(i, textRunStart, len);
            if (textRunEnd != textRunStart) {
                matchingFont = font.deriveFont(24f);
                attrText.addAttribute(TextAttribute.FONT, matchingFont,
                    textRunStart, textRunEnd &gt;= 0 ? textRunEnd : len);

                textRunStart = textRunEnd;
                break;
            }
        }

        if (matchingFont == null) {
            int index = i.getIndex();
            throw new IllegalArgumentException(String.format(
                &quot;Character at index %d (U+%04X) &quot;
                + &quot;cannot be displayed by any of %s&quot;,
                index, text.codePointAt(index), preferredFontList));
        }
    }

    return attrText;
}
</code></pre>
<p>We can now use the AttributedString’s <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/AttributedString.html#getIterator()"" rel=""nofollow noreferrer"">iterator</a> in a couple different ways:</p>
<ul>
<li>We can render it in a painting method, by passing it to <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/Graphics.html#drawString(java.text.AttributedCharacterIterator,int,int)"" rel=""nofollow noreferrer"">Graphics.drawString</a>.</li>
<li>We can loop through the iterator’s runs using its <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/AttributedCharacterIterator.html#getRunLimit()"" rel=""nofollow noreferrer"">getRunLimit</a> method and its inherited <a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/CharacterIterator.html#setIndex(int)"" rel=""nofollow noreferrer"">setIndex</a> method, to process the text and font in other ways.</li>
</ul>
<p>Here is an example of the first approach:</p>
<pre><code>public void show(String text) {
    AttributedString a = applyFontsTo(text);

    JPanel panel = new JPanel() {
        private static final long serialVersionUID = 1;

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(text.length() * 20, 50);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            ((Graphics2D) g).setRenderingHint(
                RenderingHints.KEY_TEXT_ANTIALIASING, 
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g.drawString(a.getIterator(), 6, getHeight() - 12);
        }
    };

    JFrame frame = new JFrame(&quot;Multi-Font Renderer&quot;);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(panel);
    frame.pack();
    frame.setLocationByPlatform(true);
    frame.setVisible(true);
}
</code></pre>
<p>And here is an example of the second approach:</p>
<pre><code>public void showAsList(String text) {
    Box box = Box.createVerticalBox();

    AttributedString a = applyFontsTo(text);
    AttributedCharacterIterator i = a.getIterator();
    while (i.getIndex() &lt; i.getEndIndex()) {
        int runLimit = i.getRunLimit();
        String runText = text.substring(i.getIndex(), runLimit);
        Font font = (Font) i.getAttribute(TextAttribute.FONT);

        JLabel label = new JLabel(runText);
        label.setFont(font);
        box.add(label);

        i.setIndex(runLimit);
    }

    JFrame frame = new JFrame(&quot;Multi-Font Renderer&quot;);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(new JScrollPane(box));
    frame.pack();
    frame.setLocationByPlatform(true);
    frame.setVisible(true);
}
</code></pre>
<p>Here is a complete program which demonstrates both approaches:</p>
<pre><code>import java.io.InputStream;
import java.io.IOException;

import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;

import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.font.TextAttribute;

import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JScrollPane;

public class MultiFontRenderer {
    private final List&lt;Font&gt; preferredFontList;

    public MultiFontRenderer() {
        preferredFontList = List.of(
            &quot;Roboto-Regular.ttf&quot;,
            &quot;FreeSerif.ttf&quot;,
            &quot;Quivira.otf&quot;,
            &quot;Code2000-rdLO.ttf&quot;
        ).stream().map(fontName -&gt; createFont(fontName)).collect(
            Collectors.toUnmodifiableList());
    }

    private static Font createFont(String name) {
        try (InputStream fontResource =
            MultiFontRenderer.class.getResourceAsStream(name)) {

            return Font.createFont(Font.TRUETYPE_FONT, fontResource);
        } catch (IOException | FontFormatException e) {
            throw new RuntimeException(&quot;Cannot load font \&quot;&quot; + name + &quot;\&quot;&quot;, e);
        }
    }

    private AttributedString applyFontsTo(String text) {
        AttributedString attrText = new AttributedString(text);

        int len = text.length();
        int textRunStart = 0;
        CharacterIterator i = new StringCharacterIterator(text);
        while (textRunStart &gt;= 0) {
            Font matchingFont = null;
            String runText = null;

            for (Font font : preferredFontList) {
                int textRunEnd = font.canDisplayUpTo(i, textRunStart, len);
                if (textRunEnd != textRunStart) {
                    matchingFont = font.deriveFont(24f);
                    attrText.addAttribute(TextAttribute.FONT, matchingFont,
                        textRunStart, textRunEnd &gt;= 0 ? textRunEnd : len);

                    textRunStart = textRunEnd;
                    break;
                }
            }

            if (matchingFont == null) {
                int index = i.getIndex();
                throw new IllegalArgumentException(String.format(
                    &quot;Character at index %d (U+%04X) &quot;
                    + &quot;cannot be displayed by any of %s&quot;,
                    index, text.codePointAt(index), preferredFontList));
            }
        }

        return attrText;
    }

    public void show(String text) {
        AttributedString a = applyFontsTo(text);

        JPanel panel = new JPanel() {
            private static final long serialVersionUID = 1;

            @Override
            public Dimension getPreferredSize() {
                return new Dimension(text.length() * 20, 50);
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                ((Graphics2D) g).setRenderingHint(
                    RenderingHints.KEY_TEXT_ANTIALIASING, 
                    RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
                g.drawString(a.getIterator(), 6, getHeight() - 12);
            }
        };

        JFrame frame = new JFrame(&quot;Multi-Font Renderer&quot;);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    public void showAsList(String text) {
        Box box = Box.createVerticalBox();

        AttributedString a = applyFontsTo(text);
        AttributedCharacterIterator i = a.getIterator();
        while (i.getIndex() &lt; i.getEndIndex()) {
            int runLimit = i.getRunLimit();
            String runText = text.substring(i.getIndex(), runLimit);
            Font font = (Font) i.getAttribute(TextAttribute.FONT);

            JLabel label = new JLabel(runText);
            label.setFont(font);
            box.add(label);

            i.setIndex(runLimit);
        }

        JFrame frame = new JFrame(&quot;Multi-Font Renderer&quot;);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new JScrollPane(box));
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        boolean showList = args.length &gt; 0;

        EventQueue.invokeLater(() -&gt; {
            var text = &quot;Tuğalsan Karabacak ♠☀☁☃☎☛ ŞşİiIıÜüÖöÇçŞşĞğ&quot;;

            MultiFontRenderer renderer = new MultiFontRenderer();
            if (showList) {
                renderer.showAsList(text);
            } else {
                renderer.show(text);
            }
        });
    }
}
</code></pre>
","1","Answer"
"78098758","78098723","<p>The code you commented out is close but has the logics opposite, as it should <code>continue</code> the loop only if the input is <em>not</em> a valid value:</p>
<pre><code>if challenge not in valid_values:
    print(&quot;this is not a valid value&quot;)
    continue
</code></pre>
","0","Answer"
"78099007","78098723","<p>Here is a change with a nested while loop:</p>
<pre><code>import random
valid_values = (&quot;rock&quot;, &quot;paper&quot;, &quot;scissors&quot;, &quot;quit&quot;)
# stats are win. lose, draw
stats = [0,0,0]
victories = [
    [&quot;paper&quot;, &quot;rock&quot;],
    [&quot;rock&quot;, &quot;scissors&quot;],
    [&quot;scissors&quot;, &quot;paper&quot;]
    ]
running = True

while running:
    challenge = None
    # generate random rock, paper, scissors
    guess = random.choice(valid_values[0:2])
    # prompt user to challenge computer to a valid game
    while challenge not in valid_values:
        challenge = input(&quot;Choose rock, paper, scissors, or quit: &quot;).lower()
    if challenge == &quot;quit&quot;:
        print(&quot;OK, bye&quot;)
        running = False
    else:
        # determine winner and display result
        if challenge == guess:
            stats[2] += 1
            print(&quot;Tie! Try again&quot;)
        elif [challenge, guess] in victories:
            stats[0] += 1
            print(f&quot;The {challenge} beats the {guess}, you win!&quot;)
        else:
            stats[1] += 1
            print(f&quot;The {guess} beats the {challenge}, you lose!&quot;)

    print(f&quot;{stats[0]} wins, and {stats[1]} losses and {stats[2]} ties,&quot;)`
</code></pre>
","1","Answer"
"78099412","78099382","<p>You have to think of the &quot;this&quot; as just one object, if you want 2 different objects in you have to copy a copy of this like <code>That.append(This.copy())</code></p>
<p><a href=""https://docs.python.org/3/library/copy.html"" rel=""nofollow noreferrer"">https://docs.python.org/3/library/copy.html</a></p>
","2","Answer"
"78099515","78099382","<p>The problem arises on line 7 of your code. When I am updating <code>This</code> array the second time with <code>This.append('B')</code>, it is automatically updated in <code>That</code> array.</p>
<p>Similar issue:</p>
<p><a href=""https://stackoverflow.com/questions/43690875/python-list-updating-elements-when-appending"">Python list updating elements when appending</a></p>
<p>Hope this helps.</p>
","0","Answer"
"78099553","78099382","<p>To understand this, add <code>print</code> statement after each line and see the output. Explanation given</p>
<pre><code>This = []
That = []

This.append('A')
print(This)  #Output : ['A'] 
#Now This has become ['A]


# appending This to that. (i.e) appending ['A'] to [] should give [['A']]
That.append(This)
print(That) # Output : [['A']]


# This is ['A']. If 'B' is appended, this becomes ['A', 'B']. But this is already inside that. that becomes [['A', 'B']]
This.append('B')
print(This) # Output : ['A', 'B']
print(That)

#Now  that is [['A', 'B']]. this is ['A', 'B']. appending this to that, that becomes [['A', 'B'], ['A', 'B']]
That.append(This)
print(That)
</code></pre>
<p>So if at all you want to use the same object after appending but without change in appended list, create a copy of this</p>
<pre><code>This = []
That = []
This.append('A')
That.append(This)
There = This.copy()
There.append('B')
That.append(There) 
print(That) #Output: [['A'], ['A', 'B']]
</code></pre>
","0","Answer"
"78099947","78099886","<p>I think it looks like you're trying to access hangman_words.word_list() as a function rather than a list. I believe you should just be able to remove the brackets to get:</p>
<pre><code>words_list = hangman_words.word_list
</code></pre>
<p>I hope this helps, thanks!</p>
","0","Answer"
"78099970","78099886","<p>It seems the <code>hangman_words.word_list</code> is a <code>list</code>. Python lists are not callable, unlike functions.</p>
<h2>Alternative 1:</h2>
<p>If your goal is to get a pointer to the list mentioned in <code>hangman_words</code>, you could do the following:</p>
<p>In <code>hangman_words.py</code>:</p>
<pre><code>word_list = ['all', 'words', 'you', 'have']
</code></pre>
<p>In your script:</p>
<pre><code>from hangman_words import word_list

print(word_list)
</code></pre>
<p>yields: <code>['all', 'words', 'you', 'have']</code></p>
<h2>Alternative 2:</h2>
<p>If you need to do something to your list, or want to make sure you don't change the original list, you could use a function to get a copy of the original list. Something like:</p>
<p>In <code>hangman_words.py</code>:</p>
<pre><code>import copy
__word_list = ['all', 'words', 'you', 'have']

def get_word_list():
   return copy.deep_copy(__word_list)
</code></pre>
<p>In your script:</p>
<pre><code>from hangman_words import get_word_list

print(get_word_list())
</code></pre>
<p>yields: <code>['all', 'words', 'you', 'have']</code></p>
","0","Answer"
"78100442","78094522","<p>I have come with up another solution, using StringBuilder class. <a href=""https://github.com/tugalsan/com.tugalsan.lib.file.tmcr/blob/main/src/main/java/com/tugalsan/lib/file/tmcr/server/file/TS_FileTmcrFileHandler.java"" rel=""nofollow noreferrer"">TS_FileTmcrFileHandler.addText(...)</a></p>
<pre><code>//codePoint buffer
var sb = new StringBuilder();

//running all codePoints of the text (a.k.a fullTextThatCanBeDisplayed)
fullTextThatCanBeDisplayed.codePoints().forEachOrdered(cp -&gt; {
    
    //deciding a font according to Font.canDisplay function, if no match found, select idx 0 as defualt
    var decidedFontFamilyIdx = 0;
    for (var fontFamilyIdx = 0; fontFamilyIdx &lt; fontFamilySize; fontFamilyIdx++) {
        if (getFont(fontFamilyIdx).canDisplay(cp)) {
            decidedFontFamilyIdx = fontFamilyIdx;
            break;
        }
    }

    //If new font detected, do steps...
    if (decidedFontFamilyIdx != fileCommonConfig.fontFamilyIdx) {
        
        //step1: send previous data to addText_canDisplay
        if (!sb.isEmpty()) {
            addText_canDisplay(sb.toString());
            sb.setLength(0);
        }

        {//step2: prepare new font
            fileCommonConfig.fontFamilyIdx = decidedFontFamilyIdx;
            setFontStyle();
        }
    }

    //save current codePoint to codePointBuffer
    sb.appendCodePoint(cp);
});

//send lastData to addText_canDisplay
addText_canDisplay(sb.toString());
</code></pre>
","0","Answer"
"78101681","78101653","<p>It will return you &quot;Nectarines&quot; because with</p>
<pre><code>dirty_dozen = [fruits, vegetables]
</code></pre>
<p>you have created a two dimensional list.</p>
<p>by giving 0 as first number in parameter you navigate to the firstly mentioned fruits.
by giving 1 as second number in parameter you navigate to the second element of that list which is &quot;Nectarines&quot;</p>
","0","Answer"
"78101684","78101653","<p>Fruits is a list consisting of the fruits seen between the [] symbols.
Vegetables is also a list, consisting of the vegetables between the [] symbols.
'dirty_dozen' is a third list, that consists of the lists 'fruits' and 'vegetables'.
So if you write dirty_dozen[0][1], that will take the 0. element of dirty_dozen (which is the list 'vegetables') and then return the 1. element of that list (which is 'Nectarines').</p>
","0","Answer"
"78101701","78101653","<pre><code>dirty_dozen = [fruits, vegetables]
print(dirty_dozen[0][1])
</code></pre>
<p>In the first line above you create a new list called <code>dirty_dozen</code>, which contains two entries. Entry[0] is a list of fruits, and entry[1] is a list of vegetables.
So in the second line, you are printing entry[1] of dirty_dozen[0], which is the second entry in the fruits list. As running the code would make clear.</p>
","1","Answer"
"78101704","78101653","<p><strong>These are 2 separate things</strong>:</p>
<pre><code>print(dirty_dozen) 

#[['Strawberries', 'Nectarines', 'Apples', 'Grapes', 'Peaches', 'Cherries', 'Pears'], ['Spinach', 'Kale', 'Tomatoes', 'Celery', 'Potatoes']]
</code></pre>
<p>First element of <code>dirty_dozen</code> and a list <code>[1]</code></p>
<pre><code>print([dirty_dozen[0],[1]])
#[['Strawberries', 'Nectarines', 'Apples', 'Grapes', 'Peaches', 'Cherries', 'Pears'], [1]]
</code></pre>
<p>Second element of First element of <code>dirty_dozen</code></p>
<pre><code>print(dirty_dozen[0][1])
#Nectarines
</code></pre>
<p>You need to understand the difference between them:</p>
<p><code>[dirty_dozen[0],[1]]</code> and <code>dirty_dozen[0][1]</code></p>
","3","Answer"
"78101873","78101653","<p><code>fruits</code> is a list. <code>vegetables</code> is another list.</p>
<p>Lists in Python have indexes to represent each item inside the list. And the first index is always <code>0</code>.</p>
<p><code>dirty_dozen</code> is a third list, comprised of the first item (index <code>0</code>) as the <code>fruit</code> list, and the second item (index <code>1</code>) as the <code>vegetables</code> list.</p>
<p>When you want to request <code>dirty_dozen</code> for the value of <code>[0][1]</code> you are saying &quot;show me the value of the item with index=1 (Nectarines) inside the item of index=0 (Fruits) in memory.&quot;</p>
","2","Answer"
"78104307","78104219","<p>Use <code>itertools.groupby</code> with the set of dictionary keys as the grouping key.  This assumes similarly keyed dictionaries are already listed together as in the example, but you can ensure they are sorted by same sets of keys with <code>org_list.sort(key=sorted)</code>.</p>
<pre class=""lang-py prettyprint-override""><code>from pprint import pprint
from itertools import groupby

org_list = [{'fruit':'Apple', 'Color':'red', 'weight':'10'},
            {'fruit':'Banana', 'Color':'yellow', 'weight':'20'},
            {'fruit':'Kiwi', 'Color':'Green', 'weight':'15'},
            {'Veggie':'Onion', 'Color':'white', 'price':'10'},
            {'Veggie':'Cabbage', 'Color':'Light Green', 'price':'30'},
            {'Leafy':'Spinach', 'Color':'Dark Green', 'quantity':'30'}]

result_list = []
for group_key, group in groupby(org_list, key=set):
    group_dict = {}  # new dict to collect a similar key set
    for dct in group:
        for key, value in dct.items():
            if key not in group_dict:
                group_dict[key] = [value]  # start a new key list
            else:
                group_dict[key].append(value)  # append to existing key
    result_list.append(group_dict)  # finished with that key set

pprint(result_list, width=120)
</code></pre>
<p>Output:</p>
<pre><code>[{'Color': ['red', 'yellow', 'Green'], 'fruit': ['Apple', 'Banana', 'Kiwi'], 'weight': ['10', '20', '15']},
 {'Color': ['white', 'Light Green'], 'Veggie': ['Onion', 'Cabbage'], 'price': ['10', '30']},
 {'Color': ['Dark Green'], 'Leafy': ['Spinach'], 'quantity': ['30']}]
</code></pre>
","1","Answer"
"78104309","78104219","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>lst = [
    {&quot;fruit&quot;: &quot;Apple&quot;, &quot;Color&quot;: &quot;red&quot;, &quot;weight&quot;: &quot;10&quot;},
    {&quot;fruit&quot;: &quot;Banana&quot;, &quot;Color&quot;: &quot;yellow&quot;, &quot;weight&quot;: &quot;20&quot;},
    {&quot;fruit&quot;: &quot;Kiwi&quot;, &quot;Color&quot;: &quot;Green&quot;, &quot;weight&quot;: &quot;15&quot;},
    {&quot;Veggie&quot;: &quot;Onion&quot;, &quot;Color&quot;: &quot;white&quot;, &quot;price&quot;: &quot;10&quot;},
    {&quot;Veggie&quot;: &quot;Cabbage&quot;, &quot;Color&quot;: &quot;Light Green&quot;, &quot;price&quot;: &quot;30&quot;},
    {&quot;Leafy&quot;: &quot;Spinach&quot;, &quot;Color&quot;: &quot;Dark Green&quot;, &quot;quantity&quot;: &quot;30&quot;},
]

out = {}
for d in lst:
    out.setdefault(frozenset(d), []).append(d)

out = [{kk: [d[kk] for d in v] for kk in k} for k, v in out.items()]
print(out)
</code></pre>
<p>Prints:</p>
<pre class=""lang-py prettyprint-override""><code>[
    {
        &quot;Color&quot;: [&quot;red&quot;, &quot;yellow&quot;, &quot;Green&quot;],
        &quot;fruit&quot;: [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Kiwi&quot;],
        &quot;weight&quot;: [&quot;10&quot;, &quot;20&quot;, &quot;15&quot;],
    },
    {
        &quot;Color&quot;: [&quot;white&quot;, &quot;Light Green&quot;],
        &quot;price&quot;: [&quot;10&quot;, &quot;30&quot;],
        &quot;Veggie&quot;: [&quot;Onion&quot;, &quot;Cabbage&quot;],
    },
    {&quot;Color&quot;: [&quot;Dark Green&quot;], &quot;Leafy&quot;: [&quot;Spinach&quot;], &quot;quantity&quot;: [&quot;30&quot;]},
]
</code></pre>
","2","Answer"
"78106070","78105975","<p>As the first comment suggests, it is because you are popping items from the list while iterating through it using indices. More precisely, when you pop <code>1</code> at index <code>0</code> in the first iteration, the <code>10</code> at index <code>1</code> gets the index <code>0</code>. Then, in your next iteration you continue with <code>j = 1</code>, thus the <code>10</code> now at index <code>0</code> never gets checked against the criterium. It is more error-proof to append the needed elements to a new list:</p>
<pre class=""lang-py prettyprint-override""><code>lower = int(input(&quot;Lower bound: &quot;))
upper = int(input(&quot;Upper bound: &quot;))
    
data = [1, 10, 10, 11, 14, 20, 20, 24, 25, 25, 32, 33, 34, 36, 41, 42, 44, 45, 45, 48]
data_in_range = []

j = 0
while j &lt; len(data):
    if data[j] &gt;= lower and data[j] &lt;= upper:
        data_in_range.append(data[j])
    j += 1
for i in range(len(data_in_range)):
    print(data_in_range[i], end = &quot; &quot;)
print()
</code></pre>
","0","Answer"
"78106222","78105975","<p>As it has been answered already, the problem is that when you pop element of the list, indexes shifts to the left and you omit the next item.</p>
<p>You can simply modify your code and increment your index &quot;j&quot; only if you don't pop any element in current iteration.</p>
<pre><code>lower = int(input(&quot;Lower bound: &quot;))
upper = int(input(&quot;Upper bound: &quot;))

j = 0
while j &lt; len(data):
    if data[j] &lt; lower or data[j] &gt; upper:
        data.pop(j)
    else:
        j += 1
for i in range(len(data)):
    print(data[i], end = &quot; &quot;)
print()
</code></pre>
","3","Answer"
"78106391","78105975","<p>Never modify lists while you're enumerating them.</p>
<p>A list comprehension is ideal for this.</p>
<pre><code>lower = 11
upper = 41

data = [1, 10, 10, 11, 14, 20, 20, 24, 25, 25, 32, 33, 34, 36, 41, 42, 44, 45, 45, 48]
data = [x for x in data if lower &lt;= x &lt;= upper]

print(data)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[11, 14, 20, 20, 24, 25, 25, 32, 33, 34, 36, 41]
</code></pre>
","2","Answer"
"78107445","78107294","<p>You can let <code>datetime</code> module handle it for you. You can create a datetime object and add <code>timedelta</code> object:</p>
<pre class=""lang-py prettyprint-override""><code>from datetime import datetime, timedelta, timezone

n = 12
current_datetime = datetime.now(tz=timezone.utc)
for i in range(1, n + 1, 3):
    added_four = current_datetime + timedelta(hours=4)
    for j in range(3):
        print(f&quot;{i+j} {current_datetime.hour}-{added_four.hour}&quot;)
    current_datetime += timedelta(hours=4)
</code></pre>
<p>output(in UTC):</p>
<pre class=""lang-none prettyprint-override""><code>1 11-15
2 11-15
3 11-15
4 15-19
5 15-19
6 15-19
7 19-23
8 19-23
9 19-23
10 23-3
11 23-3
12 23-3
</code></pre>
","0","Answer"
"78107488","78107294","<p>The currently recommended way to get the current hour differs from what's in your code. <em>datetime.utcnow()</em> is deprecated.</p>
<p>Try this:</p>
<pre><code>import datetime

hour = datetime.datetime.now(datetime.UTC).hour

N = 12

for i in range(N):
    hh = (hour + 4 * (i//3)) % 24
    print(f&quot;{i+1:&gt;2} {hh:02d}-{(hh+4)%24:02d}&quot;)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code> 1 11-15
 2 11-15
 3 11-15
 4 15-19
 5 15-19
 6 15-19
 7 19-23
 8 19-23
 9 19-23
10 23-03
11 23-03
12 23-03
</code></pre>
","0","Answer"
"78108593","78107294","<p>I've split my code into smaller components which will make you understand the concept of datetime module easily.</p>
<pre><code>#Apart from datetime, import timedelta which is meant for adding time
from datetime import datetime, timedelta

#Import module for timezone
import pytz

#Get your time zone(I guess you're from India)
tz_ch = pytz.timezone('Asia/Kolkata')

#Get current time of your time zone
tz_ch = datetime.now(tz_ch)

#iterate in the range of 12
for i in range(12):
    
    #if i is divided by 3 add 4 hrs to current_time(also i should not be 0)
    if i != 0 and i % 3 == 0: tz_ch = tz_ch + timedelta(hours=4)

    #Always add 4 hours to to_time
    to_time = tz_ch + timedelta(hours=4)

    #Get the time component inturn hour component of from time
    fr = tz_ch.time()
    fr = f'{fr:%H}'

    #Get the time component inturn hour component of to_time
    to = to_time.time()
    to = f'{to:%H}'
    
    #time range
    time_range = f'{fr} - {to}'
    print(i+1, time_range)

'''Output:
1 20 - 23
2 20 - 23
3 20 - 23
4 23 - 02
5 23 - 02
6 23 - 02
7 02 - 05
8 02 - 05
9 02 - 05
10 05 - 08
11 05 - 08
12 05 - 08
'''
</code></pre>
","0","Answer"
"78108838","78108798","<p>If there is no logic as to where the elements are in the list that need to be discarded, then one option is to use <code>Counter</code>, and halve the counts:</p>
<pre><code>from collections import Counter

c = Counter(example_list)
for key in c:
    c[key] //= 2
lst = list(c.elements())
</code></pre>
<p>For your example input, <code>lst</code> will be <code>[1, 1, 2, 3, 4]</code></p>
","4","Answer"
"78108886","78108798","<p>If you sort the <code>example_list</code>, you can pick every 2nd element for your new list:</p>
<pre><code>example_list = [1, 2, 3, 4, 1, 1, 2, 1, 3, 4]
outcome = sorted(example_list)[::2]
</code></pre>
","4","Answer"
"78113085","78113066","<p>You can use <a href=""https://numpy.org/doc/stable/reference/generated/numpy.arange.html"" rel=""nofollow noreferrer""><code>np.arange</code></a> and the modulo operator, then convert as string and concatenate the fixed part:</p>
<pre><code>import numpy as np
import pandas as pd

n = 14

out = pd.Series(np.arange(n)%3+1).astype(str)+'-59/4'

# or
out = pd.Series(np.arange(n)%3+1, dtype=str)+'-59/4'
</code></pre>
<p>Alternatively, using <a href=""https://numpy.org/doc/stable/reference/generated/numpy.tile.html"" rel=""nofollow noreferrer""><code>np.tile</code></a> (less efficient, but maybe more versatile if you have arbitrary prefixes):</p>
<pre><code>prefixes = ['1', '2', '3']
n = 14

out = pd.Series(np.tile([f'{p}-59/4' for p in prefixes], int(np.ceil(n/3)))[:n])
</code></pre>
<p>Or with your loop (not recommended if you need an array/Series as output):</p>
<pre><code>n = 14
lis_num = []

for x in range(n):
   lis_num.append(f'{x%3+1}-59/4')

out = pd.Series(lis_num)
</code></pre>
<p>Output:</p>
<pre><code>0     1-59/4
1     2-59/4
2     3-59/4
3     1-59/4
4     2-59/4
5     3-59/4
6     1-59/4
7     2-59/4
8     3-59/4
9     1-59/4
10    2-59/4
11    3-59/4
12    1-59/4
13    2-59/4
dtype: object
</code></pre>
","2","Answer"
"78113135","78113066","<p>A list comprehension should do it -</p>
<pre class=""lang-py prettyprint-override""><code>n=14
fixed_str=&quot;-59/4&quot;
list1 = [f&quot;{i%3+1}{fixed_str}&quot; for i in range(n)]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['1-59/4',
 '2-59/4',
 '3-59/4',
 '1-59/4',
 '2-59/4',
 '3-59/4',
 '1-59/4',
 '2-59/4',
 '3-59/4',
 '1-59/4',
 '2-59/4',
 '3-59/4',
 '1-59/4',
 '2-59/4']
</code></pre>
","2","Answer"
"78113562","78113066","<pre><code>n = 14
lis_num = []

# Initialize a counter to track rows
counter = 1

# Initialize interval
interval = &quot;1-59/4&quot;

# Iterate over the range
for x in range(n):
    # Append the current interval to lis_num
    lis_num.append(f&quot;{counter} {interval}&quot;)
    
    # Increment the counter
    counter += 1
    
    # Check if it's time to update the first element
    if counter % 3 == 1:
        # Update the first element of the interval
        interval = &quot;1-59/4&quot;
    elif counter % 3 == 2:
        # Update the second element of the interval
        interval = &quot;2-59/4&quot;
    else:
        # Update the third element of the interval
        interval = &quot;3-59/4&quot;

# Print each element of lis_num on a new line
for item in lis_num:
    print(item)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>1 1-59/4
2 2-59/4
3 3-59/4
4 1-59/4
5 2-59/4
6 3-59/4
7 1-59/4
8 2-59/4
9 3-59/4
10 1-59/4
11 2-59/4
12 3-59/4
13 1-59/4
14 2-59/4
</code></pre>
","0","Answer"
"78113901","78113710","<p>If making deck of images dynamically is your question, you can do it like below:</p>
<pre><code>image_deck = []

for card_name in deck:
    card_image_obj = Image.open(f&quot;C:/Users/DFeldmann/{card_name}.webp&quot;)
    image_deck.append(ImageTk.PhotoImage(card_image_obj))
</code></pre>
<p>Here you have to declare another deck so that old deck can be usable and not overridden. Here I have used python's f-string to dynamically paths.</p>
<p>I have lopped over deck list and created a new list out of it which contains images objects.</p>
","-1","Answer"
"78113946","78113710","<p>You can create the card objects dynamically when reading the <code>.txt</code>:</p>
<ol>
<li>Read each line, split by <code>','</code> and get the second item (the name);</li>
<li>Create an <code>Image</code> using a format string and the card name;</li>
<li>Create an <code>ImageTk.PhotoImage</code> using the <code>Image</code> and append it to a list <code>deck</code>.</li>
</ol>
<pre><code>deck = []

with open(&quot;deck_list.txt&quot;, &quot;r&quot;) as f:
    for line in f:
        card_name = line.split(&quot;,&quot;)[1]
        img_card = Image.open(f&quot;C:/Users/DFeldmann/{card_name}.webp&quot;)
        deck.append(ImageTk.PhotoImage(img_card))
</code></pre>
","0","Answer"
"78114007","78113929","<p>You can first extract all plots, then use the <code>plotlist</code> argument in <code>ggarrange</code> from the <code>ggpubr</code> package.</p>
<p>To include the labels on top of each plot, first expand the plot margins in your <code>ggplot</code> codes, then play around with the <code>ggarrange(vjust)</code> parameter to get the best outcome.</p>
<pre class=""lang-r prettyprint-override""><code>library(ggplot2)
library(ggpubr)


custom_fun &lt;- function(x = x){
  x = x
  # Calculate the length
  n &lt;- length(x)
  
  # First half arranged in ascending order
  fh &lt;- sort(x[1:(n/2)])
  
  # Second half arranged in ascending order
  sh &lt;- sort(x[((n/2)+1):n])
  
  d &lt;- cbind.data.frame(fh, sh)
  
  #Some calculations calculation
  dis = sqrt(diff(d$fh)^2 + diff(d$sh)^2)
  sl = diff(d$sh) / diff(d$fh)
  
  #Plotting using ggplot2
  myplot &lt;- function(mydf, xcol, ycol){
    ggplot2::ggplot(data = mydf, ggplot2::aes(x = {{xcol}}, y = {{ycol}})) +
      ggplot2::geom_point(color='red', alpha=0.3, size=2)+
      ggplot2::geom_segment(color=&quot;#69b3a2&quot;, 
                            aes(xend=c(tail({{xcol}}, n=-1), NA), 
                                yend=c(tail({{ycol}}, n=-1), NA))
      ) +
      ggplot2::geom_abline (slope=1, linetype = &quot;dashed&quot;, color=&quot;Red&quot;) +
      ggplot2::xlab(&quot; &quot;) +
      ggplot2::ylab(&quot; &quot;) +
      theme(plot.margin = unit(c(1.5, 0, 0, 0), &quot;lines&quot;)) # add this code
  }
  
  my_plot &lt;- myplot(d, fh, sh)
  
  return(list(`Dis` = dis, `SL` = sl,
              `Plot` = my_plot))
}

try_list &lt;- lapply(iris[-5], custom_fun)

ggarrange(plotlist = lapply(try_list, `[[`, &quot;Plot&quot;), labels = names(try_list), vjust = 1.5)
</code></pre>
<p><a href=""https://i.sstatic.net/lnUad.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/lnUad.png"" alt=""ggarrange_plotlist"" /></a></p>
<p>Or iterating the plots in <code>plotlist</code> to add <code>ggtitle</code> (idea is from @George Savva)</p>
<pre class=""lang-r prettyprint-override""><code>ggarrange(plotlist = lapply(names(try_list), \(x) try_list[[x]]$Plot + ggtitle(x)))
</code></pre>
<p><a href=""https://i.sstatic.net/M5qnn.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/M5qnn.png"" alt=""ggtitle_plotlist"" /></a></p>
","2","Answer"
"78114170","78113929","<p>Here's a <code>patchwork</code> solution including modification of the position of the title, or any other theme element. (stealing the first part of @benson23 answer)</p>
<pre><code>library(patchwork)
try_list &lt;- lapply(iris[-5], custom_fun)

wrap_plots(lapply(names(try_list), \(x) try_list[[x]][[&quot;Plot&quot;]]+ggtitle(x))) &amp; 
  theme(plot.title = element_text(hjust=0.5) )
</code></pre>
<p><a href=""https://i.sstatic.net/CY6TI.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/CY6TI.png"" alt=""enter image description here"" /></a></p>
","2","Answer"
"78115272","78115183","<p>You can convert a set of strings to integers using the <code>list</code> and <code>map</code> functions as below:</p>
<pre><code>DNA_vol_as_int = list(map(int, DNA_vol))
print(DNA_vol_as_int)
</code></pre>
<p>See <a href=""https://docs.python.org/3/library/functions.html#map"" rel=""nofollow noreferrer""><code>map()</code> builtin</a> and <a href=""https://docs.python.org/3/library/functions.html#func-list"" rel=""nofollow noreferrer""><code>list()</code></a></p>
","0","Answer"
"78115301","78115183","<p>First of all make sure that all the values in <code>DNA_vol</code> and <code>ddH2O_vol</code> must be integer. If not put a try except block to handle non-integer situations.</p>
<pre class=""lang-py prettyprint-override""><code>filename = open('/path/to/myfile.csv', 'r')
file = csv.DictReader(filename)

Sample_ID = []
Well = []
DNA_vol =[]
ddH2O_vol = []

for col in file:
    Sample_ID.append(col['Sample_ID'])
    Well.append(col['Well'])
    try:
        DNA_vol.append(int(col['DNA_vol']))
    except ValueError:
        DNA_vol.append(0)
    try:
        ddH2O_vol.append(int(col['ddH2O_vol']))
    except ValueError:
        ddH2O_vol.append(0)
</code></pre>
<p>Since you have not shared the csv sample file or any additional information, in this code it is assumed that if there are any exceptions, the value is set to 0 [or, 0 is appended]</p>
","0","Answer"
"78115367","78115183","<p>Another option is to use pandas <code>read_csv()</code> method</p>
<pre><code>import pandas as pd

df = pd.read_csv(
    &quot;/path/to/myfile.csv&quot;, 
    names=[&quot;Sample_ID&quot;, &quot;Well&quot;, &quot;DNA_vol&quot;, &quot;ddH2O_vol&quot;], 
    dtype={&quot;Sample_ID&quot;: str, &quot;Well&quot;: str, &quot;DNA_vol&quot;: int, &quot;ddH2O_vol&quot;: int}
)
</code></pre>
<p>now you have a dataframe <code>df</code> containing your data that should be very easy to work with.</p>
","-1","Answer"
"78115401","78115183","<p>Using the dataclasses built-in you can use the annotations for the fields to set the type-conversion. The post_init will handle the conversion based on the type-hints.</p>
<pre><code>import csv
import io # only for the csv_data
import dataclasses
from dataclasses import dataclass

csv_data = '''\
&quot;Sample_ID&quot;,&quot;Well&quot;,&quot;DNA_vol&quot;,&quot;ddH2O_vol&quot;
sample_0,A1,2,3
sample_1,A2,4,5\
'''

@dataclass
class Row:
    Sample_ID: str
    Well: str
    DNA_vol: int
    ddH2O_vol: int

    def __post_init__(self):
        # use the field's typehint to convert the string to that type
        for field in dataclasses.fields(self):
            value = getattr(self, field.name)
            setattr(self, field.name, field.type(value))

reader = csv.DictReader(io.StringIO(csv_data))  # I used the string to load in, here you can use your file

rows = []
for row in reader:
    rows.append(Row(**row))

print([row.Sample_ID for row in rows])
print([row.DNA_vol for row in rows])
</code></pre>
<h1>Outputs:</h1>
<pre><code>['sample_0', 'sample_1']
[2, 4]
</code></pre>
","0","Answer"
"78115458","78115183","<p>Okay, so a few things here:</p>
<ol>
<li>Using <code>with open(...) as f</code> is equivalent to <code>f = open(...)</code> and closing the file handle at the end of the with block</li>
<li>You're not closing your file handle, so consider either doing so after you're done reading it, or using a <code>with</code> block</li>
<li>You're reading a plaintext file, so naturally everything coming in is being parsed as text. The documentation for <code>csv</code> doesn't make any mention of the <code>int</code> type either. So you'll have to parse it yourself!</li>
<li>The name <code>col</code> is misleading, considering you're parsing the file row-by-row (or line-by-line, which is the same thing for CSVs)</li>
</ol>
<p>The one line edit to just have your <code>DNA_vol</code> values as <code>int</code>s is simply:</p>
<pre class=""lang-py prettyprint-override""><code>DNA_vol.append(int(col['DNA_vol']))
</code></pre>
<hr>
<p>This wouldn't be SO, however, if we weren't here to be informative for future reference and people seeking advice in the future.</p>
<pre class=""lang-py prettyprint-override""><code>import csv
import os

# Either use `with open(...) as ..:` here or close the file at the end
file_obj = open('/path/to/my/file.csv', 'r')
    # Add a level of indentation to **ALL** below code if you're using a `with` block!
file = csv.DictReader(file_obj)
# Get your lists set up
sample_ID = []
well = []
DNA_vol = []
ddH2O = []
# Loop over the list of dicts
for row in file:
    sample_ID.append(line['Sample_ID'])
    well.append(line['Well'])
    # Check if the other two fields are purely numeric values and, if so, parse them as ints.
    # replace with `isdecimal` and `float` if the numbers might not be just ints
    # Defaults to 0 for numeric values, but feel free to pick any other number
    # if your dataset has a strict minimum or something
    DNA_vol.append(if line['DNA_vol'].isdigit() int(line['DNA_vol']) else 0)
    ddH2O.append(if line['ddH2O_vol'].isdigit() int(line['ddH2O_vol']) else 0)
# That's all there's to it! Now if you used a with block, you don't need the next line:
os.close(file_obj) # Don't leak the file descriptor
# When using the `open` builtin, and you're not passing a custom opener, `os.open` is the default
</code></pre>
","0","Answer"
"78121602","78121579","<p>yes that is because the function (<code>list.append</code>) returns noting. If you print the result it prints thus <code>None</code>.</p>
<pre class=""lang-py prettyprint-override""><code>def f1(x):
    print(x)
    return None

def f2(x):
    print(x)
    return x

print(f1(2))
&gt;&gt;&gt; 2  # inside the function
&gt;&gt;&gt; None  # return value of function
print(f2(2))
&gt;&gt;&gt; 2  # inside the function
&gt;&gt;&gt; 2  # return value of function
</code></pre>
","-2","Answer"
"78121605","78121579","<p><code>lst.append</code> always returns None, and that's what <code>print</code> prints.</p>
<p>To append and print the last element:</p>
<pre><code>lst = [2,3,4]
lst.append(&quot;foo&quot;)
print(lst[-1])  # Prints foo
</code></pre>
","0","Answer"
"78124070","78124048","<p>Your <code>return</code> needs to be indented and you need a &quot;:&quot; after the while statement.</p>
<pre><code>def mex(my_list):
    my_list = set(my_list)
    mex = 0
    while mex in my_list:
        mex += 1
    return mex

a = [1, 0, 2, 4]
print(mex(a))
</code></pre>
","1","Answer"
"78124106","78124048","<p>You missed a colon after the while loop, just add <code>:</code> at the end.</p>
","1","Answer"
"78129016","78127779","<p>I have found a (very bad) way to solve the problem:</p>
<pre><code>    - name: Generate void list of attachment paths
      set_fact:
        list_of_attachments_paths: &quot;{{ [] }}&quot;


    - name: Update list of attachment paths - file1
      when: NOL_in_file1.stdout|int &gt; 0
      set_fact:
        list_of_attachments_paths: &quot;{{ list_of_attachments_paths + [file1_path]  }}&quot;


    - name: Update list of attachment paths - file2
      when: NOL_in_file2.stdout|int &gt; 0
      set_fact:
        list_of_attachments_paths: &quot;{{ list_of_attachments_paths + [file2_path]  }}&quot;
</code></pre>
<p>and then</p>
<pre><code>- name: Send the analysis via e-mail 
  community.general.mail:

    subtype: html  
    host: smtp.myserver.it
    port: 25
    sender: automated-sender@myserver.it
    to:
      &quot;{{ mail_to_recipients }}&quot;
    cc:
      &quot;{{ mail_cc_recipients }}&quot;


    subject: &quot;[automated-sender] my analysis&quot;
    attach:
      &quot;{{ list_of_attachments_paths | select('defined') | list }}&quot;  # note the select('defined) filter

    body: &quot;{{ body_analysis }}&quot;
</code></pre>
","0","Answer"
"78129520","78129480","<p>We can use <code>broom::tidy</code> to convert the test results into data.frames, and finally <code>bind</code> everything together. The resulting data.frame will make everything easier downstream, because similar statistics will be grouped column-wise, and easily extracted as vectors.
This will work for the presented use case,in which the list elements are summaries of statistics tests. For other general uses with lists, there are more involved (and element-class-agnostic) ways.</p>
<pre><code>library(purrr)
library(broom)


correlations |&gt; 
    map(tidy) |&gt; 
    list_rbind(names_to = &quot;index&quot;)

# A tibble: 4 × 9
  index estimate statistic p.value parameter conf.low conf.high method                               alternative
  &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                                &lt;chr&gt;      
1 A       1        Inf       0             8    1         1     Pearson's product-moment correlation two.sided  
2 B       0.0665     0.189   0.855         8   -0.588     0.668 Pearson's product-moment correlation two.sided  
3 C      -0.344     -1.04    0.331         8   -0.800     0.365 Pearson's product-moment correlation two.sided  
4 D      -0.353     -1.07    0.316         8   -0.804     0.355 Pearson's product-moment correlation two.sided  

</code></pre>
<p>If we assign the list from above to a <code>results</code> object, extraction of its elements is straightforward:</p>
<pre><code>results$p.value
[1] 0.0000000 0.8551735 0.3306442 0.3164566
</code></pre>
","2","Answer"
"78129574","78129480","<p>In base R we <code>unlist</code>, <code>t</code>ransform and coerce <code>as.data.frame</code>, <code>rbind</code> and <code>type.convert</code>.</p>
<pre><code>&gt; lapply(correlations, unlist) |&gt; lapply(t) |&gt; lapply(as.data.frame) |&gt; 
+   do.call(what='rbind') |&gt; type.convert(as.is=TRUE)
        statistic.t parameter.df           p.value       estimate.cor null.value.correlation alternative
A               Inf            8                 0                  1                      0   two.sided
B 0.188506772777935            8 0.855173531621001 0.0664996814881612                      0   two.sided
C -1.03567121974133            8 0.330644220368375 -0.343839423420549                      0   two.sided
D -1.06853889681018            8 0.316456566017573 -0.353406931296896                      0   two.sided
                                method            data.name          conf.int1         conf.int2
A Pearson's product-moment correlation newX[, i] and data$A                  1                 1
B Pearson's product-moment correlation newX[, i] and data$A -0.587735055360001 0.668150552690274
C Pearson's product-moment correlation newX[, i] and data$A -0.800224784794599 0.364752207983986
D Pearson's product-moment correlation newX[, i] and data$A -0.804107757875213 0.355272603243911
</code></pre>
<p>Note, that <code>apply</code> is designed for <code>matrices</code>, but we have a <code>&quot;data.frame&quot;</code>, so <code>lapply</code> is more appropriate to get the <code>correlations</code> object.</p>
<pre><code>lapply(data[-1], cor.test, data$A)
</code></pre>
<h2>Edit</h2>
<p>Maybe better to use a custom <code>cor_fun</code>.</p>
<pre><code>&gt; cor_fun &lt;- \(x, y) {
+   type.convert(as.data.frame(t(unlist(cor.test(x, y)))), as.is=TRUE)
+ }
&gt; 
&gt; t(sapply(data[-1], cor_fun, data$A))
  statistic.t parameter.df p.value   estimate.cor null.value.correlation alternative
A Inf         8            0         1            0                      &quot;two.sided&quot;
B 0.1885068   8            0.8551735 0.06649968   0                      &quot;two.sided&quot;
C -1.035671   8            0.3306442 -0.3438394   0                      &quot;two.sided&quot;
D -1.068539   8            0.3164566 -0.3534069   0                      &quot;two.sided&quot;
  method                                 data.name conf.int1  conf.int2
A &quot;Pearson's product-moment correlation&quot; &quot;x and y&quot; 1          1        
B &quot;Pearson's product-moment correlation&quot; &quot;x and y&quot; -0.5877351 0.6681506
C &quot;Pearson's product-moment correlation&quot; &quot;x and y&quot; -0.8002248 0.3647522
D &quot;Pearson's product-moment correlation&quot; &quot;x and y&quot; -0.8041078 0.3552726
</code></pre>
","3","Answer"
"78129729","78127779","<blockquote>
<p>I get this error and I don't understand why</p>
</blockquote>
<blockquote>
<p>it is clearly stated that the input must be a list of path of attachments, so what is the problem here?</p>
</blockquote>
<p>Your <code>list_of_attachments_paths</code> is not a list but rather a string that contains a string representation of a list. Moreover, you're then using it as <code>- &quot;{{ list_of_attachments_paths }}&quot;</code> which basically becomes a list of invalid paths.</p>
<p>In my opinion, you should reconsider the way you collect the attachments as your current approach is not scalable. But without knowing what inputs do you have and how do you set the variables like <code>NOL_in_file1</code>, it is impossible to give a proper recommendation.</p>
","1","Answer"
"78130233","78130203","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>mask = (df[&quot;serial_number&quot;].str.len() &gt; 1) &amp; (df[&quot;inv_number&quot;].str.len() == 1)
df.loc[mask, &quot;inv_number&quot;] = df[&quot;serial_number&quot;].str.len() * df.loc[mask, &quot;inv_number&quot;]

print(df)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>                                       serial_number                                                                            inv_number
28                                [С029768, С029775]                                                          [101040031171, 101040031172]
29          [090020960190402011, 090020960190402009]                                                          [210134002523, 210134002524]
31                                            [1094]                                                                        [410124000215]
32                                              [01]                                                                        [101040022094]
33  [F161B5, F17D86, F17D8D, F1825C, F1825A, F1825D]  [101040026976, 101040026976, 101040026976, 101040026976, 101040026976, 101040026976]
</code></pre>
","4","Answer"
"78130262","78130203","<p>With <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.map.html"" rel=""nofollow noreferrer""><code>map</code></a>, <a href=""https://docs.python.org/3/library/functions.html#len"" rel=""nofollow noreferrer""><code>len</code></a> &amp; <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.mul.html"" rel=""nofollow noreferrer""><code>mul</code></a> :</p>
<pre><code>df[&quot;inv_number&quot;] *= (-df.map(len).diff(axis=1).iloc[:, -1]).add(1)
</code></pre>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th style=""text-align: right;""></th>
<th style=""text-align: left;"">serial_number</th>
<th style=""text-align: left;"">inv_number</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: right;"">0</td>
<td style=""text-align: left;"">['С029768', 'С029775']</td>
<td style=""text-align: left;"">['101040031171', '101040031172']</td>
</tr>
<tr>
<td style=""text-align: right;"">1</td>
<td style=""text-align: left;"">['090020960190402011', '090020960190402009']</td>
<td style=""text-align: left;"">['210134002523', '210134002524']</td>
</tr>
<tr>
<td style=""text-align: right;"">2</td>
<td style=""text-align: left;"">['1094']</td>
<td style=""text-align: left;"">['410124000215']</td>
</tr>
<tr>
<td style=""text-align: right;"">3</td>
<td style=""text-align: left;"">['01']</td>
<td style=""text-align: left;"">['101040022094']</td>
</tr>
<tr>
<td style=""text-align: right;"">4</td>
<td style=""text-align: left;"">['F161B5', 'F17D86', 'F17D8D', 'F1825C', 'F1825A', 'F1825D']</td>
<td style=""text-align: left;"">['101040026976', '101040026976', '101040026976', '101040026976', '101040026976', '101040026976']</td>
</tr>
</tbody>
</table></div>
","3","Answer"
"78134114","78134103","<p>I suggest to create a list of max values on each position and then compare each sublist to these values:</p>
<pre class=""lang-py prettyprint-override""><code>S = [[4, 5, 6], [3, 6, 9], [1, 4, 6], [2, 5, 8]]

out = [max(l) for l in zip(*S)]
out = next((l for l in S if all(a &lt; b for a, b in zip(l, out))), None)

print(out)
</code></pre>
<p>Prints:</p>
<pre><code>[1, 4, 6]
</code></pre>
<hr />
<p>For <code>S = [[4, 5], [3, 6]]</code> this prints:</p>
<pre><code>None
</code></pre>
","0","Answer"
"78134137","78134103","<p>You do it pretty well as a generalisation of how you might do it for a scalar.</p>
<p>Pass once through the list to find the minimum at each position.</p>
<p>Then pass a second time through the list to see if one row matches those minima.</p>
<pre><code>def minimumList( S ):
   N = len( S[0] )
   minima = S[0].copy()
   for row in S:
       for i, v in enumerate( row ):
           if v &lt; minima[i]: minima[i] = v
   for row in S:
       if row == minima: return True, row
   return False, []


print( minimumList( [[4, 5, 6], [3, 6, 9], [1, 4, 6], [2, 5, 8]]) )
print( minimumList( [[4, 5], [3, 6]] ) )
</code></pre>
<p>Output:</p>
<pre><code>(True, [1, 4, 6])
(False, [])
</code></pre>
","1","Answer"
"78134293","78134103","<p>Here is a solution:</p>
<pre class=""lang-py prettyprint-override""><code>s = [[4, 5, 6], [3, 6, 9], [1, 4, 6], [2, 5, 8]]
min_list = [min(x) for x in zip(*s)]
if min_list in s:
    print(f&quot;Min list found: {min_list}&quot;)
else:
    print(&quot;Min list not found&quot;)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>Min list found: [1, 4, 6]
</code></pre>
<p>Explanation</p>
<p>First, we calculate the minimum list, <code>min_list</code>, and then check to see if this list exists in <code>s</code>. But, how does the following works?</p>
<pre class=""lang-py prettyprint-override""><code>min_list = [min(x) for x in zip(*s)]
</code></pre>
<p>Let us first see the effect of <code>zip</code> on <code>s</code>:</p>
<pre><code>&gt;&gt;&gt; list(*zip(s))
[(4, 3, 1, 2), (5, 6, 4, 5), (6, 9, 6, 8)]
</code></pre>
<p>So in this case, zip will return a list of three sub-lists. The first sub-list corresponds to all first elements (or in op's terminology: entries). The second sub-list corresponds to to all second elements and so on.</p>
<p>We then apply <code>min()</code> to these sub-lists and end up with the minimum list, <code>min_list</code>.</p>
","3","Answer"
"78134774","78134618","<h2>base R:</h2>
<p>Here we subset each dataframe by passing the anonymous function <code>df[, c(&quot;A&quot;, &quot;D&quot;)]</code> to each data frame with lapply().</p>
<pre><code>lapply(MyDfList, function(df) df[, c(&quot;A&quot;, &quot;D&quot;)])

#As of R 4.1.0, it is possible to natively use \(x) {} instead of function(x) {} for anonymous function.
lapply(MyDfList, \(x) x[, c(&quot;A&quot;, &quot;D&quot;)])
</code></pre>
<h2>tidyverse:</h2>
<p>Here we pass the anonymous function <code>~select(., A, D)</code> with <code>map</code> to each dataframe.</p>
<pre><code>library(purrr)
library(dplyr)

 MyDfList %&gt;% 
  map(~select(., A, D))

</code></pre>
<pre><code>[[1]]
   A        D
1 S1 1.086504

[[2]]
   A        D
1 S2 1.031676

[[3]]
   A        D
1 S3 1.015718

</code></pre>
","1","Answer"
"78134795","78134618","<p>in base R:</p>
<pre><code>lapply(MyDfList, '[', c('A', 'D'))
[[1]]
   A        D
1 S1 1.086504

[[2]]
   A        D
1 S2 1.031676

[[3]]
   A        D
1 S3 1.015718
</code></pre>
","3","Answer"
"78134832","78134618","<p>Consider literally <code>subset</code> in base R, a useful method for subsetting by rows and/or columns:</p>
<pre class=""lang-r prettyprint-override""><code>lapply(MyDfList, subset, select=c(A, D))
# [[1]]
#    A        D
# 1 S1 1.086504
#
# [[2]]
#    A        D
# 1 S2 1.031676
# 
# [[3]]
#    A        D
# 1 S3 1.015718
</code></pre>
","3","Answer"
"78134981","78134803","<p>using the same <code>TextEditingController</code> for more than <code>TextField</code> has unexpected behavior which is:</p>
<p><strong>The text you are typing in a specific field will be simultaneously written to other fields that are controlled with the same controller.</strong></p>
<p>so, try to handle it through creating a <code>map of controllers</code> or even generate a <code>list</code> with specific length of controllers.</p>
","0","Answer"
"78134999","78134803","<p>Here is a method to create a dynamic list of <code>TextEditingController()</code> for every item/title without having to manually create them:</p>
<pre><code>List&lt;String&gt; titles = ['name','location'];
List&lt;TextEditingController&gt; controllers = [];

for (int i = 0; i &lt; titles.length; i++) {
      controllers.add(TextEditingController());
}
</code></pre>
<p>See demo: <a href=""https://dartpad.dev/?id=5019539e54a2f8434df83e6508d3ceea"" rel=""nofollow noreferrer"">https://dartpad.dev/?id=5019539e54a2f8434df83e6508d3ceea</a></p>
","0","Answer"
"78135297","78135033","<p>You're assigning your list incorrectly in your child component. It should be <code>this.props.suggestionsList</code></p>
<pre><code>class GoogleSuggestions extends Component {
  state = {suggestionsList: this.props.suggestionsList, searchInput: ''}
}
</code></pre>
","1","Answer"
"78135314","78135033","<p>You are trying to assign all props to state instead of only <code>suggestionsList</code>.</p>
<p>Also, you don't need to put <code>suggestionsList</code> to state. It makes additional variable mutable and can lead to potential bugs. Just use it from props directly.</p>
<p>Try this:</p>
<pre><code>// Write your code here
import {Component} from 'react'

import SuggestionItem from '../SuggestionItem'

import './index.css'

class GoogleSuggestions extends Component {
  state = { searchInput: ''}

  showoptions = event =&gt; {
    this.setState({searchInput: event.target.value})
  }

  render() {
    const {suggestionsList, searchInput} = this.state
    const { suggestionsList } = this.props;
    console.log(typeof suggestionsList)
    return (
      &lt;div className=&quot;bg-container&quot;&gt;
        &lt;img
          className=&quot;googleLogo&quot;
          src=&quot;https://assets.ccbp.in/frontend/react-js/google-logo.png&quot;
          alt=&quot;google logo&quot;
        /&gt;
        &lt;div className=&quot;input-container&quot;&gt;
          &lt;div&gt;
            &lt;img
              className=&quot;search-icon&quot;
              src=&quot;https://assets.ccbp.in/frontend/react-js/google-search-icon.png&quot;
              alt=&quot;search icon&quot;
            /&gt;
            &lt;input
              type=&quot;search&quot;
              value={searchInput}
              onClick={this.showoptions}
              className=&quot;input&quot;
              placeholder=&quot;Search Google&quot;
            /&gt;
          &lt;/div&gt;
          &lt;ul className=&quot;ul-cont&quot;&gt;
            {suggestionsList.map(eachItem =&gt; (
              &lt;SuggestionItem itemDetails={eachItem} key={eachItem.id} /&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}

export default GoogleSuggestions
</code></pre>
","0","Answer"
"78135537","78135033","<p>Not <code>state = {suggestionsList: this.props, searchInput: ''}</code>.</p>
<p>You should use <code>state = {suggestionsList: this.props.suggestionsList, searchInput: ''}</code></p>
<p>And You can use <code>onChange={this.showoptions}</code> for searchEngine not <code>onClick={this.showoptions}</code></p>
<p>Here is right <code>GoogleSuggestions.js</code> File</p>
<pre><code>
// Write your code here
import {Component} from 'react'

import SuggestionItem from './SuggestionItem'


class GoogleSuggestions extends Component {
  state = {suggestionsList: this.props.suggestionsList, searchInput: ''}

  showoptions = event =&gt; {
    this.setState({searchInput: event.target.value})
  }

  render() {
    const {suggestionsList, searchInput} = this.state
    console.log(suggestionsList);
    console.log(typeof suggestionsList)
    return (
      &lt;div className=&quot;bg-container&quot;&gt;
        &lt;img
          className=&quot;googleLogo&quot;
          src=&quot;https://assets.ccbp.in/frontend/react-js/google-logo.png&quot;
          alt=&quot;google logo&quot;
        /&gt;
        &lt;div className=&quot;input-container&quot;&gt;
          &lt;div&gt;
            &lt;img
              className=&quot;search-icon&quot;
              src=&quot;https://assets.ccbp.in/frontend/react-js/google-search-icon.png&quot;
              alt=&quot;search icon&quot;
            /&gt;
            &lt;input
              type=&quot;search&quot;
              value={searchInput}
              onClick={this.showoptions}
              className=&quot;input&quot;
              placeholder=&quot;Search Google&quot;
            /&gt;
          &lt;/div&gt;
          &lt;ul className=&quot;ul-cont&quot;&gt;
            {suggestionsList.map(eachItem =&gt; (
              &lt;SuggestionItem itemDetails={eachItem} key={eachItem.id} /&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}

export default GoogleSuggestions
// Write your code here
import {Component} from 'react'

import SuggestionItem from './SuggestionItem'


class GoogleSuggestions extends Component {
  state = {suggestionsList: this.props.suggestionsList, searchInput: ''}

  showoptions = event =&gt; {
    this.setState({searchInput: event.target.value})
    console.log(this.state.searchInput);
  }

  render() {
    const {suggestionsList, searchInput} = this.state;
    return (
      &lt;div className=&quot;bg-container&quot;&gt;
        &lt;img
          className=&quot;googleLogo&quot;
          src=&quot;https://assets.ccbp.in/frontend/react-js/google-logo.png&quot;
          alt=&quot;google logo&quot;
        /&gt;
        &lt;div className=&quot;input-container&quot;&gt;
          &lt;div&gt;
            &lt;img
              className=&quot;search-icon&quot;
              src=&quot;https://assets.ccbp.in/frontend/react-js/google-search-icon.png&quot;
              alt=&quot;search icon&quot;
            /&gt;
            &lt;input
              type=&quot;search&quot;
              value={searchInput}
              onChange={this.showoptions}
              className=&quot;input&quot;
              placeholder=&quot;Search Google&quot;
            /&gt;
          &lt;/div&gt;
          &lt;ul className=&quot;ul-cont&quot;&gt;
            {suggestionsList.map(eachItem =&gt; (
              eachItem.suggestion.indexOf(searchInput) ? &quot;&quot;:&lt;SuggestionItem itemDetails={eachItem} key={eachItem.id} /&gt; 
              
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}

export default GoogleSuggestions
</code></pre>
","1","Answer"
"78137820","78137780","<pre><code>var listB = new List&lt;string&gt;()
{
  [0] = &quot;Hello&quot;,
  [1] = &quot;World&quot;
};
</code></pre>
<p><a href=""https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCAzFATBAwhA3ihMVBiLBALIAUAlAUSUwG4CGAThADYCWAzgBcAQhAC8EAHYBTAO4QAMvwEAeGGAB8dFIWTEA2mAC6YiACIAElK5cA9qYA0jPdGPjTAdRvsuAE1MoAXyRdEgDAoA==="" rel=""noreferrer"">is compiled to</a>:</p>
<pre><code>List&lt;string&gt; list = new List&lt;string&gt;();
list[0] = &quot;Hello&quot;;
list[1] = &quot;World&quot;;
</code></pre>
<p><a href=""https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers#collection-initializers"" rel=""noreferrer"">From the Docs</a>:</p>
<blockquote>
<p>The preceding sample generates code that calls the <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.item?view=net-8.0#system-collections-generic-dictionary-2-item(-0)"" rel=""noreferrer"">Item[TKey]</a> to set the values.</p>
</blockquote>
<p>Of course, the exception makes sense because when you initialize the list, it has zero elements. Elements at index 0 and 1 don't exist.</p>
","6","Answer"
"78137904","78137780","<p>To complete <a href=""https://stackoverflow.com/a/78137820/284240"">gunr2171's answer</a>, the first example with the dictionary does not use the indexer as in the 2nd example with the list(which tries to assign strings to list-indexes which don't exist because the list is empty). But this ...</p>
<pre><code>var dictionary = new Dictionary&lt;int, string&gt;()
{
  [0] = &quot;Hello&quot;,
  [1] = &quot;World&quot;
};
</code></pre>
<p>... is the same as(which adds 2 new entries because it's using <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.item?view=net-8.0"" rel=""nofollow noreferrer"">this</a> property):</p>
<pre><code>var dictionary = new Dictionary&lt;int, string&gt;();
dictionary[0] = &quot;Hello&quot;; // adds a new dictionary entry with the key 0 and the value &quot;Hello&quot;
dictionary[1] = &quot;World&quot;; // adds a new dictionary entry with the key 1 and the value &quot;World&quot;  
</code></pre>
","6","Answer"
"78137996","78137934","<pre class=""lang-py prettyprint-override""><code>grouped_elements = [
    ['A', 'B', 'C'],
    ['D', 'E'],
    ['F', 'G', 'H', 'I']
]

count = [len(row) for row in grouped_elements]
count.append(1)
# count is [3, 2, 4, 1]

for i in range(len(count) - 2, -1, -1):
    count[i] = count[i] * count[i + 1]

# count is [3 * 2 * 4 * 1, 2 * 4 * 1, 4 * 1, 1]

for i in range(count[0]):
    row = []
    for j in range(len(grouped_elements)):
        idx = (i // count[j + 1]) % len(grouped_elements[j])
        
        row.append(grouped_elements[j][idx])
    
    print(row)
</code></pre>
<pre><code>result

['A', 'D', 'F']
['A', 'D', 'G']
['A', 'D', 'H']
['A', 'D', 'I']
['A', 'E', 'F']
['A', 'E', 'G']
['A', 'E', 'H']
['A', 'E', 'I']
['B', 'D', 'F']
['B', 'D', 'G']
['B', 'D', 'H']
['B', 'D', 'I']
['B', 'E', 'F']
['B', 'E', 'G']
['B', 'E', 'H']
['B', 'E', 'I']
['C', 'D', 'F']
['C', 'D', 'G']
['C', 'D', 'H']
['C', 'D', 'I']
['C', 'E', 'F']
['C', 'E', 'G']
['C', 'E', 'H']
['C', 'E', 'I']
</code></pre>
","-1","Answer"
"78138082","78137403","<pre><code>List list1 = [&quot;AA&quot;, &quot;BB&quot;, &quot;CC, &quot;DD&quot;]
List list2 = [&quot;CC&quot;, &quot;DD&quot;, &quot;EE&quot;, &quot;FF&quot;]
commons = []
list1.map((word)=&gt;if(list2.contains(word){
commons.add(word);}))
</code></pre>
","0","Answer"
"78140721","78140662","<p>You mean like this?</p>
<pre class=""lang-py prettyprint-override""><code># Example pixel data
pixels = [
    (255, 0, 0),    # Red
    (125, 111, 2),  # Some other color
    # Add more pixel data here
]

# Open a file in binary write mode
with open(&quot;image_data.bin&quot;, &quot;wb&quot;) as file:
    for pixel in pixels:
        # Write each color component as a byte
        for color_component in pixel:
            file.write(bytes([color_component]))

# Reading back the data
read_pixels = []
with open(&quot;image_data.bin&quot;, &quot;rb&quot;) as file:
    while True:
        # Read 3 bytes (one for each color component) at a time
        color_components = file.read(3)
        if not color_components:
            break
        # Unpack the bytes into a tuple representing the color
        color = tuple(color_components)
        read_pixels.append(color)

print(read_pixels[0][0]) # The first index represents the pixel, the second index represents the color from that pixel.
</code></pre>
","1","Answer"
"78141049","78140662","<p>I think you should use .bmp image file format as it is the standard format to store raw images without compression or data loss.</p>
<p>Python has the a lib called Pillow for working with images (to install with your dependency manager like pip).</p>
<p>Here some links that should help you :</p>
<ul>
<li><a href=""https://www.tutorialspoint.com/python_pillow/index.htm"" rel=""nofollow noreferrer"">https://www.tutorialspoint.com/python_pillow/index.htm</a></li>
<li><a href=""https://stackoverflow.com/questions/46923244/how-to-create-image-from-a-list-of-pixel-values-in-python3"">How to create image from a list of pixel values in Python3?</a></li>
</ul>
","0","Answer"
"78141414","78140662","<p>Lists of pixels are not a natural way to deal with images, since images are 2-d, I mean they have a height and a width and the rows and columns of pixels are naturally indexed like this:</p>
<pre><code>image[0,34]
</code></pre>
<p>The Python structure that most image processing packages use for images is the Numpy <code>ndarray</code>. That would look like this:</p>
<pre><code>#!/usr/bin/env python3

import numpy as np

# Create empty image 2 rows, 4 columns, and 3 RGB pixels at each location
image = np.zeros((2,4,3), np.uint8)

# 1st row: Red, Green, Blue, Black
image[0,0] = [255,0,0]
image[0,1] = [0,255,0]
image[0,2] = [0,0,255]
image[0,3] = [0,0,0]

# 2nd row: Cyan, Magenta, Yellow, White
image[1,0] = [0,255,255]
image[1,1] = [255,0,255]
image[1,2] = [255,255,0]
image[1,3] = [255,255,255]

# Save to a file
image.tofile('image.rgb')
</code></pre>
<p>Then if you use Numpy arrays, you have access to PIL/Pillow, OpenCV and scikit-image on your desktop computer to visualise and resize/convert/crop and manipulate images.</p>
<p>However your chosen format has the problem that it is a list and doesn't allow you to know the height and width of the image, so when you reload it you get a list, but no height and width:</p>
<pre><code>reloaded = np.fromfile('image.rgb', dtype=np.uint8)
</code></pre>
<p>If you print that, you get a list of 24 numbers:</p>
<pre><code>print(reloaded)
array([255,   0,   0,   0, 255,   0,   0,   0, 255,   0,   0,   0,   0, 0, 255, 255,   0, 255, 255, 255,   0, 255, 255, 255], dtype=uint8)
</code></pre>
<p>And if you check its shape you can see it is a 1-dimensional list of 24 numbers, not an image with a height and width:</p>
<pre><code>print(reloaded.shape)
(24,)
</code></pre>
<p>So you would need to <em>&quot;know&quot;</em> by other means the shape and then reshape it:</p>
<pre><code>reloaded = np.fromfile('image.rgb', dtype=np.uint8).reshape((2,4,3))
</code></pre>
<hr />
<p>You can then manipulate this image from the command-line on your desktop with <strong>ImageMaick</strong>, e.g. scale it up and convert it to PNG:</p>
<pre><code>magick -size 4x2 -depth 8 image.rgb -scale 300x bigger.png
</code></pre>
<p><a href=""https://i.sstatic.net/F9B7C.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/F9B7C.png"" alt=""enter image description here"" /></a></p>
<hr />
<p>I don't think Numpy exists in MicroPython, so you can read this image back on the Pico with the code by @hjuste on the Pico.</p>
<hr />
<h2>However...</h2>
<p>I don't think this format is very good because it doesn't have the height and width in the image and no other programs can easily read it, manipulate it or display it. I would suggest you use <a href=""https://en.wikipedia.org/wiki/Netpbm#PPM_example"" rel=""nofollow noreferrer"">PPM</a> format instead -  it is very simple with a short header on the front with the image size.</p>
<p>Also, you can write it in ASCII rather than binary so you can edit it with a text editor. It is somewhat inefficient, but as you said, your images are small.</p>
<p>So, in order to write such a plain (ASCII/uncompressed) PPM file, you can use <strong>OpenCV</strong> as follows to write the image I created at the start of my answer:</p>
<pre><code>import cv2 as cv

... create &quot;image&quot; like I did above ...

# Save image as ASCII PPM file
cv.imwrite('result.ppm', image, [cv.IMWRITE_PXM_BINARY,0])
</code></pre>
<p>Then you can read that on your Pico very simply - roughly like this:</p>
<pre><code>with open('result.ppm') as f:
    s = f.read()

# Find anything that looks like numbers
l = re.findall(r'[0-9P]+',s)

# Pick up width and height
w, h = int(l[1]), int(l[2])

# Pick up remaining pixels
pixels = l[4:]
</code></pre>
<hr />
<p>The benefit of using <code>PPM</code> format is that:</p>
<ul>
<li>your images remain compatible with other tools (ImageMagick, vips, Photoshop, MS-Paint, IrfanView) for visualisation and modification</li>
<li>they are easily read on the Pico</li>
</ul>
<p>You can make a red 24x8 PPM image, for example, very simply with <strong>ImageMagick</strong>:</p>
<pre><code>magick -size 24x8 xc:red -compress none -depth 8 red.ppm
</code></pre>
<p>Or resize a PNG and convert to PPM like this:</p>
<pre><code>magick image.png -resize 80x40 -compress none -depth 8 image.ppm
</code></pre>
","3","Answer"
"78142870","78137934","<p>When the file is already sorted, there is a simple solution:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import groupby

def read_data(filename):
    &quot;&quot;&quot;Yields one line at a time, skipping empty lines&quot;&quot;&quot;
    with open(filename) as file:
        for line in file:
            line = line.strip()
            if not line:
                continue
            yield line      

def grouping_key(x):
    &quot;Selects the part of the line to use as key for grouping&quot;
    return x.split()[0]   # The first word

groups = []
for k, g in groupby(read_data(&quot;sample.txt&quot;), grouping_key):
    groups.append(list(g))

print(groups)
</code></pre>
","0","Answer"
"78143221","78142787","<p>You could try adding new class ReportData instead of anonymous object and serialized it when sending it out to client application</p>
<p>New Class:</p>
<pre><code>public class ReportData
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public Reports[] Reports { get; set; }
}
</code></pre>
<p>and your function will be updated as:</p>
<pre><code>byte[] report1 = new UTF8Encoding(true).GetBytes(&quot;This is a test report1&quot;);
byte[] report2 = new UTF8Encoding(true).GetBytes(&quot;This is a test report2&quot;);
byte[] report3 = new UTF8Encoding(true).GetBytes(&quot;This is a test report3&quot;);

var a = new ReportData() { FirstName = &quot;&quot;, LastName = &quot;&quot; };

var reportOjbect = new ReportData()
{
    FirstName = &quot;John&quot;,
    LastName = &quot;Doe&quot;,
    Reports = new Reports[]
    {
        new Reports
        {
            ReportName = &quot;6 week Report&quot;,
            ReportFile = report1
        }
    }

};

var baseUrl = &quot;localhost:1111&quot;;
var endpoint = &quot;/api/validate-reports&quot;;

HttpClient httpClient = new HttpClient();
httpClient.BaseAddress = new Uri(baseUrl);

var content = new MultipartFormDataContent();
content.Add(new StringContent(reportOjbect.FirstName), &quot;FirstName&quot;);
content.Add(new StringContent(reportOjbect.LastName), &quot;LastName&quot;);
content.Add(new StringContent(JsonSerializer.Serialize(reportOjbect.Reports)), &quot;Reports&quot;);
</code></pre>
<p>Lets try if that works.</p>
","0","Answer"
"78143306","78142787","<p>Put your reports in a List&lt;byte[]&gt;.</p>
<pre><code>var reports = new List&lt;byte[]&gt; 
{
  report1,
  report2,
  report3
};
</code></pre>
<p>Then use .Select()</p>
<pre><code>reportObject.Reports = reports.Select(r =&gt; new[]
  {
    ReportName = &quot;6 week Report&quot;,
    ReportFile = report1
  }).ToArray();
</code></pre>
","0","Answer"
"78144568","78137403","<p>Please use below code for find exact matches with more than one word</p>
<pre><code>  List&lt;String&gt; uniqueMatches = [];
  // Convert to lowercase for case-insensitive matching
  List&lt;String&gt; lowercasedFilterResult = filterResult
      .map((item) =&gt; item['key']!.toLowerCase())
      .toList();

  for (String desiredString in desiredStrings) {
    // Check if desiredString exists in any item of filterResult
    bool matchFound = lowercasedFilterResult.any((item) =&gt;
        item.contains(desiredString.toLowerCase()));

    // If match found and not already in uniqueMatches, add it
    if (matchFound &amp;&amp; !uniqueMatches.contains(desiredString)) {
      uniqueMatches.add(desiredString);
    }
  }
</code></pre>
","1","Answer"
"78146773","78146728","<p>A better aproach would be to directly loop through the ellement of mylist as:</p>
<pre><code>   mynewlist = [] 
   for image in mylist:
       mynewlist.append(image[1][0])
</code></pre>
<p>This makes your code more readible. And now it doesn't matter how many images you have in your initial list.</p>
","2","Answer"
"78146792","78146728","<p>You have made a simple error, you missed the range function to make it act as an iterable</p>
<pre><code>for i in range(2):
    mynewlist.append(mylist[i][1][0])
</code></pre>
<p>without it <code>i</code> cant actually go over values since all it sees is a <code>2</code>
Though a more elegant solution has been suggested by @Bart van Woesik which ensures that you don't need to actually count the number of values and set a range</p>
","1","Answer"
"78147162","78147140","<p>This is a small update of your code:</p>
<pre><code>var allModels = Models()
    .SelectMany(item =&gt; item.ModelName.Select(model =&gt; $&quot;({model},{item.ModelID})&quot;));
</code></pre>
<p>then print models :</p>
<pre><code>foreach(var model in allModels)
{
    Console.WriteLine(model);
}
</code></pre>
","0","Answer"
"78147165","78147140","<pre><code>var models = Models().SelectMany(c =&gt; c.ModelNames.Select(n =&gt; $&quot;({n},{c.ModelID})&quot;)).ToList();
</code></pre>
","0","Answer"
"78147508","78140662","<pre><code>from PIL import Image
# read pixel data from 64x32 bmp image and store as 2-d array ie pixel[pixel number][rgb data]
im = Image.open('myimage.bmp')
pixels = list(im.getdata())
print(pixels)
with open(&quot;image_data.bin&quot;, &quot;wb&quot;) as file:
    for pixel in pixels:
        # Write each color component as a byte
        for color_component in pixel:
            file.write(bytes([color_component]))    
# ------------------------------------------------------
# 2nd program run on the pico to display the image
import hub75
DISPLAY_WIDTH,DISPLAY_HEIGHT = 64,64
image_x = 64
image_y = 32
h75 = hub75.Hub75(DISPLAY_WIDTH, DISPLAY_HEIGHT, stb_invert=False) # set up matrix
h75.start()

with open(&quot;image_data.bin&quot;, &quot;rb&quot;) as file:
    for y in range(image_y):
        for x in range(image_x):
            # Read 3 bytes (one for each color component) at a time
            color_components = file.read(3)
            if not color_components:
                break
            # Unpack the bytes into a tuple representing the color
            color = tuple(color_components)
            # light the relevant led immediately to save memory
            r,g,b = color[0],color[1],color[2]
            h75.set_pixel(x,y,r,g,b)
</code></pre>
","0","Answer"
"78147796","78147148","<p>If you want to check if the all of the contents of a sublist of <code>a</code> are in <code>b</code>, you can use a <code>set</code> and check the difference.</p>
<pre><code>compare = [[1, 3, 4],[1, 7, 9]]
moves   = [1, 7, 0, 9]

def check(a:list[list], b:list) -&gt; bool:
    y = set(b)
    return any(not (x-y) for x in map(set, a))
    
print(check(compare, moves))
</code></pre>
","0","Answer"
"78147837","78147148","<p>You want to check for each individual list in <code>a</code> whether it's a subset of <code>b</code>. If that's the case for any one, the result is true:</p>
<pre><code>a = [[1, 3, 4], [1, 7, 9]]
b = [1, 7, 0, 9]

b = set(b)
print(any(set(i) &lt;= b for i in a))
</code></pre>
","1","Answer"
"78147845","78147148","<p>Building from what you have tried, I think you want to do the following:</p>
<pre><code>a = [[1, 3, 4],[1,7,9]]
b = [1, 7, 0, 9]

for item in a:
    if set(item).issubset(b):
        print(item, 'is subset of', b)
</code></pre>
<p>or in general, if you want to check if any item of <code>a</code> is a subset of <code>b</code>:</p>
<pre><code>any(set(item).issubset(b) for item in a)
</code></pre>
","1","Answer"
"78147982","78147148","<p>Using <strong>super</strong>set:</p>
<pre class=""lang-py prettyprint-override""><code>a = [[1, 3, 4], [1, 7, 9]]
b = [1, 7, 0, 9]

print(any(map(set(b).issuperset, a)))
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=m72soLIkIz9vwYKlpSVpuhY3gxIVbBWiow11FIx1FExidRRATHMdBcvYWK4kkBSEawAS4eIqKMrMK9FIzKvUyE0s0ChOLdFI0tTLLC4uLUgtAvJ0FBI1NTUhJkMtgFkEAA"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","2","Answer"
"78151257","78151211","<p>Not sure how the rest of your backend is architected but you can try something like using LINQ to create a new Person object for each KVP you obtained from Firebase.</p>
<pre class=""lang-cs prettyprint-override""><code>public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string Phone { get; set; }
}
</code></pre>
<pre class=""lang-cs prettyprint-override""><code>public class FirebaseConverter
{
    public List&lt;Person&gt; ConvertToPersonList(List&lt;KeyValuePair&lt;string, string&gt;&gt; firebaseData)
    {
        return firebaseData
            .GroupBy(kv =&gt; kv.Key)
            .Select(group =&gt; new Person
            {
                FirstName = GetValueByKey(group, &quot;FirstName&quot;),
                LastName = GetValueByKey(group, &quot;LastName&quot;),
                Email = GetValueByKey(group, &quot;Email&quot;),
                Phone = GetValueByKey(group, &quot;Phone&quot;),
            })
            .ToList();
    }

    private string GetValueByKey(IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; group, string key)
    {
        return group.FirstOrDefault(kv =&gt; kv.Key == key).Value;
    }
}

</code></pre>
<p>If you don't want to use LINQ though, you can store all the KVPs in a list and iterate through them, and then map the key-value pairs to the properties of the Person class. I would personally choose LINQ implementation though as it makes the code cleaner.</p>
","1","Answer"
"78151291","78151211","<p>Something like the one below would work as well. This includes iterating through your dictionary and assigning values to <code>Person</code> object.</p>
<pre><code>                // Assume you have key value pair dictionary  as below
                Dictionary&lt;string, string&gt; firebaseDict = new Dictionary&lt;string, string&gt;
                {
                    { &quot;FirstName&quot;, &quot;Eric&quot; },
                    { &quot;LastName&quot;, &quot;EricLastName&quot; },
                    { &quot;Email&quot;, &quot;Eric@yahoo.com&quot; },
                    { &quot;Phone&quot;, &quot;12345&quot; }
                };
        
                // You can convert the Firebase dictionary to a list of Person objects
    
                List&lt;Person&gt; people = new List&lt;Person&gt;();
                foreach (var kvp in firebaseDict)
                {
                    Person person = new Person();
                        if (kvp.Key == &quot;FirstName&quot;)
                        {
                            person.FirstName = kvp.Value;
                        }
                        else if (kvp.Key == &quot;LastName&quot;)
                        {
                            person.LastName = kvp.Value;
                        }
                        else if (kvp.Key == &quot;Email&quot;)
                        {
                            person.Email = kvp.Value;
                        }
                        else if (kvp.Key == &quot;Phone&quot;)
                        {
                            person.Phone = kvp.Value;
                        }
                        else
                        {
                            // Handle unexpected keys or ignore them
                        }
                    people.Add(person);
                }
            
            
</code></pre>
","1","Answer"
"78151589","78151501","<p>yea,list can't use index method directly。
should used linear search to catch 'Name' == 'Empty'。</p>
","0","Answer"
"78151600","78151501","<p>I would be inclined to only populate the <code>character</code> list with active players, rather than empty ones. That way you can append new players directly to the list when they're created.</p>
<p>Nevertheless, this should give you what you're after:</p>
<pre><code># create a new player. NOTE: &quot;No&quot; is updated when appending to character list
player = {&quot;No&quot;: 1, &quot;Name&quot;:&quot;Player&quot;, &quot;Level&quot;: 30, &quot;Health&quot;: 300}

# find the character index
idx = 0
for c in character:
    if c['Name'] == 'EMPTY':
        break
    else:
        idx += 1

# update player number
player['No'] = idx + 1


# replace element in list
character[idx] = player
</code></pre>
","0","Answer"
"78154081","78153091","<p>when you add an item the the <code>goats</code> data list the composable function is not recomposed since no state has been changed here, you need to pass the goats list as a parameter to the composableFunction <code>GoatList</code> so whenever the goats mutable list is changed the compose compiler will trigger recomposition of this function.</p>
<p>although this is not a good architecture, the best practice would be to save your data in <code>flow</code> and collect this flow as state and pass it to your composable function.</p>
<pre><code>@Composable
fun GoatList(
    modifier: Modifier = Modifier,
    goats: List&lt;Goats&gt;
) {
    LazyVerticalGrid(columns = GridCells.Fixed(1), modifier.padding(8.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
        items(goats) { allGoats -&gt;
            GoatCard(allGoats = allGoats, viewModel = MainViewModel())
        }
    }
}
</code></pre>
","0","Answer"
"78154122","78153091","<p>In Jetpack Compose, you should not store any state outside of Composables or ViewModels. So the way you defined your <code>object DataSource</code> is not a good practice.</p>
<p>You should instead store your list in a Composable and pass it on to the child Composables that need it. By using <a href=""https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#mutableStateListOf()"" rel=""nofollow noreferrer""><code>mutableStateListOf()</code></a>, you can create a List where Jetpack Compose can detect when you add a new item, and recompose then.</p>
<p>A typical approach in Jetpack Compose would look like this:</p>
<pre><code>@Composable
fun GoatsApp(viewModel: MainViewModel) {

    val goatList: List&lt;Goats&gt; = remember {
        mutableStateListOf(
            Goats(R.string.red, R.string.alpine, 7),
            Goats(R.string.little_goat, R.string.alpine, 8),
            Goats(R.string.nana, R.string.alpine, 7),
            Goats(R.string.sharkie, R.string.alpine, 10)
        )
    }

    // ...
    Button(
        onClick = { 
            goatList.add(Goats(R.string.little_goat, R.string.alpine, 9))
        },
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier.background(Color.LightGray)
    ) {
        Text(text = &quot;+&quot;)
    }

    // ...
 
    GoatList(goats = goatList)
}
</code></pre>
<p>Then update your <code>GoatList</code> Composable as follows:</p>
<pre><code>@Composable
fun GoatList(
    modifier: Modifier = Modifier,
    goats: List&lt;Goats&gt;
) {
    LazyVerticalGrid(columns = GridCells.Fixed(1), modifier.padding(8.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
        items(goats) { aGoat -&gt;
            GoatCard(allGoats = aGoat, viewModel = MainViewModel())
        }
    }
}
</code></pre>
","1","Answer"
"78154611","78154508","<p>The easiest and fastest way to do this would be Powerquery.</p>
<ol>
<li>Convert the data to a table (Home &gt; format as table) =&gt; this will remove all merged cells.</li>
<li>Click on the table and go to menu Data &gt; From table/Range =&gt; this will open Powerquery.</li>
<li>Right click the column to fill and choose Fill &gt; down</li>
<li>Go to the Home menu and choose &quot;Close &amp; load&quot;</li>
</ol>
<p>Your normalized table will be loaded to a new worksheet.</p>
","1","Answer"
"78155299","78151501","<p>Here's how you can update the first occurrence:</p>
<pre><code>character = [{&quot;No&quot;: 1, &quot;Name&quot;:&quot;Jeff&quot;, &quot;Level&quot;: 29, &quot;Health&quot;: 290},
             {&quot;No&quot;: 2, &quot;Name&quot;:&quot;Bill&quot;, &quot;Level&quot;: 31, &quot;Health&quot;: 310},
             {&quot;No&quot;: 3, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 4, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 5, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0},
             {&quot;No&quot;: 6, &quot;Name&quot;:&quot;EMPTY&quot;, &quot;Level&quot;: 0, &quot;Health&quot;: 0}]


player = {&quot;No&quot;: 7, &quot;Name&quot;:&quot;Alex&quot;, &quot;Level&quot;: 25, &quot;Health&quot;: 250}

for character_hash in character:
    if character_hash[&quot;Name&quot;] == &quot;EMPTY&quot;:
        character_hash.update(player)
        break  # Break out of the loop after updating the first empty character

print(character)
</code></pre>
","0","Answer"
"78155560","78154508","<p>The following code will loop over all cells (of the active worksheet).</p>
<p>If will check if the cell is part of merged cells (<code>mergeArea.Count &gt; 1</code>). If yes, it will unmerge it and write the content of that cell into the cells that where part of the merged area and <em>below</em> the cell.</p>
<pre><code>Sub UnMerge()
    Dim cell As Range
    ' Change the following line if you don't want to work on the Active Sheet
    ' or if you don't want to process the complete &quot;UsedRange&quot;,
    ' eg: For Each cell In ThisWorkbook.Sheets(1).Range(&quot;A1:H123&quot;)
    For Each cell In ActiveSheet.UsedRange 
        If cell.mergeArea.Count &gt; 0 Then          ' Cell is the first cell of a merged Area.
            Dim mergeArea As Range, row As Long
            Set mergeArea = cell.mergeArea        ' Remember the mergeArea
            cell.UnMerge                          ' Unmerge cell
            ' Loop over all rows of the former merged area except first row
            For row = 2 To mergeArea.Rows.Count  
                mergeArea(row, 1).Value = mergeArea(1, 1).Value
            Next row
        End If
    Next cell
End Sub
</code></pre>
","0","Answer"
"78156034","78154508","<p><em>Microsoft documentation:</em></p>
<blockquote>
<p><a href=""https://learn.microsoft.com/en-us/office/vba/api/excel.borders.linestyle?WT.mc_id=M365-MVP-33461&amp;f1url=%3FappId%3DDev11IDEF1%26l%3Den-US%26k%3Dk(vbaxl10.chm181077)%3Bk(TargetFrameworkMoniker-Office.Version%3Dv16)%26rd%3Dtrue"" rel=""nofollow noreferrer"">Borders.LineStyle property (Excel)</a></p>
</blockquote>
<blockquote>
<p><a href=""https://learn.microsoft.com/en-us/office/vba/api/excel.range.specialcells?WT.mc_id=M365-MVP-33461&amp;f1url=%3FappId%3DDev11IDEF1%26l%3Den-US%26k%3Dk(vbaxl10.chm144203)%3Bk(TargetFrameworkMoniker-Office.Version%3Dv16)%26rd%3Dtrue"" rel=""nofollow noreferrer"">Range.SpecialCells method (Excel)</a></p>
</blockquote>
<pre class=""lang-vb prettyprint-override""><code>Option Explicit
Sub Demo()
    Dim lastRow As Long, oSht As Worksheet, c As Range
    Set oSht = ActiveSheet ' modify as needed
    ' Get the last row#
    lastRow = oSht.Cells(oSht.Rows.Count, &quot;C&quot;).End(xlUp).Row
    With Sheets(&quot;Sheet1&quot;).Range(&quot;A4:B&quot; &amp; lastRow)
        ' Unmerge cells on the first 2 cols
         .UnMerge
         ' Get the blank cells
         Set c = .SpecialCells(xlCellTypeBlanks)
         If Not c Is Nothing Then
            ' Fill down
             c.FormulaR1C1 = &quot;=R[-1]C&quot;
         End If
         ' Covert formulas to values
         .Formula = .Value
         ' Apply border line
         .Borders.LineStyle = xlContinuous
    End With
End Sub
</code></pre>
<p><a href=""https://i.sstatic.net/RHsUc.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/RHsUc.png"" alt=""enter image description here"" /></a></p>
","0","Answer"
"78156610","78156397","<p>I think we can solve it with two <code>*apply()</code> calls:</p>
<pre class=""lang-r prettyprint-override""><code>df[] = lapply(df, \(x) as.POSIXct(
  sapply(x, \(y) if(length(y)) y else NA), format = &quot;%Y-%m-%dT%H:%M:%S&quot;))
# without type coercion to POSIXct
df[] = lapply(df, \(x) sapply(x, \(y) if(length(y)) y else NA))
</code></pre>
<p>which gives</p>
<pre class=""lang-r prettyprint-override""><code>&gt; str(df)
'data.frame':   12 obs. of  2 variables:
 $ DateOpened: POSIXct, format: &quot;2022-07-15 00:00:00&quot; &quot;2022-10-03 08:53:38&quot; &quot;2021-04-01 00:00:00&quot; &quot;2022-09-12 00:00:00&quot; ...
 $ DateClosed: POSIXct, format: NA &quot;2023-06-01&quot; NA NA ...
</code></pre>
<p>As user @thelatemail mentions in the comments, <code>|&gt; list2DF()</code> is not needed. I suspect using <code>sapply()</code> instead of <code>unlist(lapply(...</code> is o.k. here. <code>if(length(y))</code> can be read as <code>if(length(y) &gt; 0L)</code>.</p>
","1","Answer"
"78157087","78156397","<p>Here is a tidyverse solution that uses the <code>tidyr</code> package (and a function from the <code>lubriate</code> package to transform the columns into date-time):</p>
<pre class=""lang-r prettyprint-override""><code>library(tidyr)

df |&gt; 
  unnest_longer(everything(), keep_empty = TRUE, transform = lubridate::ymd_hms)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>   DateOpened          DateClosed         
   &lt;dttm&gt;              &lt;dttm&gt;             
 1 2022-07-15 00:00:00 NA                 
 2 2022-10-03 08:53:38 2023-06-01 00:00:00
 3 2021-04-01 00:00:00 NA                 
 4 2022-09-12 00:00:00 NA                 
 5 2023-01-01 00:00:00 NA                 
 6 2023-04-11 18:56:08 NA                 
 7 2023-05-09 09:20:51 2023-10-31 00:00:00
 8 2022-10-03 00:00:00 2023-06-22 00:00:00
 9 2022-09-12 00:00:00 NA                 
10 2021-04-01 00:00:00 2024-01-22 00:00:00
11 2024-02-26 15:53:12 NA                 
12 2024-02-26 16:10:02 NA                 
</code></pre>
","2","Answer"
"78158158","78157864","<p>A simple way is use the built-in <code>multiprocessing</code> module. Split the data into multiple parts and process them independently.<br />
Check the doc for detail and example. <a href=""https://docs.python.org/3/library/multiprocessing.html"" rel=""nofollow noreferrer"">https://docs.python.org/3/library/multiprocessing.html</a></p>
","2","Answer"
"78158348","78157864","<p>The first thing you should do is remove all the repetition in your function. In this line:</p>
<pre class=""lang-py prettyprint-override""><code>words = [word.translate({ord(SYM): None for SYM in SYMBOLS}).strip() for word in words.split()]
</code></pre>
<p>You are building the translation dictionary <em>every</em> time you translate a word, and calling translate for each word in the text. It is far more efficient to do each of those once:</p>
<pre class=""lang-py prettyprint-override""><code>tr = str.maketrans('', '', SYMBOLS)
words = words.strip().translate(tr).split()
</code></pre>
<p>This makes about a 50x speed-up on a 1000-word string on my computer.</p>
<p>In the next line you are then joining all the words for every call to <code>nlp</code>. You should do that once:</p>
<pre><code>text = ' '.join(words)
filtered_nouns = [token.text for token in nlp(text) if token.pos_ == &quot;NOUN&quot;]
</code></pre>
<p>But note that you just split on spaces, so you might as well skip that step completely. In total:</p>
<pre><code>def filter_nouns(text):
    SYMBOLS = '{}()[].,:;+-*/&amp;|&lt;&gt;=~$1234567890#_%'
    tr = str.maketrans('', '', SYMBOLS)
    
    # Preprocess the text by removing symbols
    words = text.strip().translate(tr)
    
    # Process each word and filter only nouns
    filtered_nouns = [token.text for token in nlp(words) if token.pos_ == &quot;NOUN&quot;]
    
    return filtered_nouns
</code></pre>
<p>Finally, note that <code>.apply(lambda x: filter_nouns(x))</code> is the same as <code>.apply(filter_nouns)</code>.</p>
","2","Answer"
"78162182","78162097","<p>Just get rid of np.array.  Like this:</p>
<pre><code>x=list(range(51))
y=list(range(51))

def slopee(x1,y1,x2,y2):
    x=((y2 - y1) / (x2 - x1))
    return x

b = []

for i in range(0,46,1):
    a = slopee(x[i],y[i],x[i + 4],y[i + 4])
    if a&gt;0:
        b.append(a)

print(b)
</code></pre>
<p>Since I did not have your x and y I had to make some up but here is the output as a list.</p>
<pre><code>[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
</code></pre>
","0","Answer"
"78162207","78162097","<p>Instead of iterating over each (x_i, y_i), you could operate directly on x and y (assuming they are numpy arrays):</p>
<pre><code>import numpy as np
np.random.seed(42)
x = np.random.randint(1, 10, 60)
y = np.random.randint(1, 10, 60)

def slopee(x1,y1,x2,y2):
    x = (y2 - y1) / (x2 - x1)
    return x

b = []

for i in range(0,46,1):
    a = np.array(slopee(x[i],y[i],x[i + 4],y[i + 4]))
    if a&gt;0:
        b.append(a)

b2 = (y[4:50] - y[:46]) / (x[4:50] - x[:46])
b2 = b2[b2&gt;0]
print(b)
print(b2)
</code></pre>
<p>prints</p>
<pre><code>[array(4.), array(1.33333333), array(1.), array(3.5), array(2.66666667), array(0.71428571), array(0.75), array(2.), array(6.), array(0.5), array(inf), array(3.5), array(6.), array(1.), array(1.5), array(1.), array(0.8), array(0.4), array(0.14285714), array(0.66666667), array(2.), array(0.33333333)]
[4.         1.33333333 1.         3.5        2.66666667 0.71428571
 0.75       2.         6.         0.5               inf 3.5
 6.         1.         1.5        1.         0.8        0.4
 0.14285714 0.66666667 2.         0.33333333]
</code></pre>
<p>The following holds:</p>
<pre><code>assert np.array_equal(b2, np.array([e.item() for e in b]))
</code></pre>
","0","Answer"
"78162220","78162097","<p>use</p>
<pre><code>b.append(a.tolist())
</code></pre>
<p>instead of</p>
<pre><code>b.append(a)
</code></pre>
","0","Answer"
"78166989","78166361","<p>Why are you trying to benchmark this? <code>l[-1]</code> should never be a performance bottleneck. Use <code>l[-1]</code>, you can't do better. The other list elements are not copied during this operation. What you see is the time needed to copy and modify the vector of pointers and possibly to call the garbage collector (if your list elements are large).</p>
<p>Here is proof that list elements are not copied:</p>
<pre><code>l1 &lt;- as.list(1:10) 
l2 &lt;- l1[-1]
data.table::address(l1[[2]])
#[1] &quot;000001fbabbdd3f0&quot;
data.table::address(l2[[1]])
#[1] &quot;000001fbabbdd3f0&quot;
</code></pre>
","2","Answer"
"78167153","78166361","<p>I think big O notation is not very helpful here. Technically you can say it is O(n) as it scales linearly with the number of elements in the list. But as Roland's <a href=""https://stackoverflow.com/a/78166989/12545041"">answer</a> says, R is copying the vector of pointers, so the actual amount of time should not be the bottleneck.</p>
<h3>Some benchmarks</h3>
<p>We can replicate each of the methods in your code, and also in each case force a deep copy for comparison.</p>
<pre class=""lang-r prettyprint-override""><code>results &lt;- bench::press(
    list_length = 10^(1:4),
    {
        l &lt;- lapply(seq_len(list_length), \(x) sample(letters, x, replace = TRUE))
        bench::mark(
            min_iterations = 1,
            time_unit = &quot;ms&quot;,
            max_iterations = 100,
            subset__standard = {
                l[2:length(l)]
            },
            subset__deep_copy = {
                rlang::duplicate(l[2:length(l)])
            },            
            neg_index__standard = {
                l[-1]
            },
            neg_index__deep_copy = {
                rlang::duplicate(l[-1])
            },            
            assign_null__standard = {
                l2 &lt;- l
                l2[[1]] &lt;- NULL
                l2
            },
            assign_null__deep_copy = {
                l2 &lt;- rlang::duplicate(l)
                l2[[1]] &lt;- NULL
                l2
            },
        )
    }
)
</code></pre>
<h4>Output</h4>
<p>Although the time increases, none of these methods take more than 0.4 milliseconds. Conversely, with the deep copy methods, they take hundreds of times as long:</p>
<p><a href=""https://i.sstatic.net/j364Z.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/j364Z.png"" alt=""enter image description here"" /></a></p>
<p>Note that I've let the y-axis scale in the top and bottom facets differ as the time differences are so large. The numeric values are below, but ultimately I would not get too hung up on big O notation here. If you have lists so large that the time copying the pointers is an issue, any operations you are going to do on them will take much longer.</p>
<h4>Output table</h4>
<pre><code>   method      type      list_length        min     median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc
   &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1 subset      standard           10   0.00100    0.00170  231267.          0B     0      100     0
 2 subset      deep_copy          10   0.00220    0.00420  184366.          0B     0      100     0
 3 neg_index   standard           10   0.000500   0.000700 804504.          0B     0      100     0
 4 neg_index   deep_copy          10   0.00190    0.00250  176710.          0B     0      100     0
 5 assign_null standard           10   0.00100    0.00120  776399.          0B     0      100     0
 6 assign_null deep_copy          10   0.00250    0.00280  312208.          0B     0      100     0
 7 subset      standard          100   0.00140    0.00180  494067.      1.26KB     0      100     0
 8 subset      deep_copy         100   0.0168     0.0190    35372.     44.41KB     0      100     0
 9 neg_index   standard          100   0.00140    0.00190  317561.      2.14KB     0      100     0
10 neg_index   deep_copy         100   0.0145     0.0166    48181.     45.29KB     0      100     0
11 assign_null standard          100   0.00260    0.00290  325204.      1.65KB     0      100     0
12 assign_null deep_copy         100   0.0153     0.0169    51784.     43.98KB     0      100     0
13 subset      standard         1000   0.0111     0.0116    76063.      11.8KB     0      100     0
14 subset      deep_copy        1000   0.589      0.702      1391.      3.88MB     0      100     0
15 neg_index   standard         1000   0.0118     0.0128    51070.     19.72KB     0      100     0
16 neg_index   deep_copy        1000   0.614      0.724      1249.      3.89MB     0      100     0
17 assign_null standard         1000   0.0237     0.0247    30175.     15.71KB     0      100     0
18 assign_null deep_copy        1000   0.670      0.774      1054.      3.88MB     0      100     0
19 subset      standard        10000   0.144      0.192      5104.    117.27KB     0      100     0
20 subset      deep_copy       10000 277.       367.            2.73  382.15MB     0        2     0
21 neg_index   standard        10000   0.245      0.272      2625.     195.5KB     0      100     0
22 neg_index   deep_copy       10000  65.6       66.7          15.0   382.23MB     7.50     2     1
23 assign_null standard        10000   0.352      0.403      2363.    156.34KB     0      100     0
24 assign_null deep_copy       10000  65.4       72.9          13.7   382.12MB    20.6      2     3
</code></pre>
<h3>Code to generate the plot</h3>
<pre class=""lang-r prettyprint-override""><code>results |&gt;
    dplyr::mutate(expression = as.character(expression))  |&gt;
    tidyr::separate_wider_delim(
        expression,
        &quot;__&quot;,
        names = c(&quot;method&quot;, &quot;type&quot;)
    )  |&gt;
    ggplot(
        aes(x = list_length, y = median)
    ) +
    geom_point(aes(color = method, shape = type), size = 5) +
    facet_grid(rows = vars(type), cols = vars(method), scales = &quot;free&quot;) +
    theme_bw() +
    theme(legend.position = &quot;bottom&quot;)
</code></pre>
","1","Answer"
"78167341","78167217","<p>It seems like you want no duplicate in the <code>patients</code> list. With this property, you can either use a <code>map</code> or a <code>set</code>, to make the search time constant, which would exponentially improve the performance of the code you are presenting.</p>
<p>You can implement the <code>__hash__</code> function for a patient, and use it with a <code>set</code> data structure instead of relying on the <code>id</code> as a primary key.</p>
","1","Answer"
"78167434","78167217","<p>Taking the advise from another answer: <a href=""https://stackoverflow.com/questions/513882/python-list-vs-dict-for-look-up-table"">enter link description here</a>.</p>
<p>I would rewrite your code as follows:</p>
<pre><code>class Patient:
    def __init__(self, pat_id: int):
        self.pat_id : int = pat_id
        self.plans: list = []

patients: dict = {}
total_plans: int = 0

patient_id, patient_plan = index[4], index[11]
if not patient_id in patients:
    patients.update({patient_id:Patient(patient_id)})
else:
    if patient_plan not in patients[patient_id].plans:
        total_plans += 1
        patients[patient_id].plans.append(patient_plan)
print(len(patients))
print(total_plans)
</code></pre>
<p>This would keep your patients in a dictionary using the hash table for quick look up and reference.</p>
","1","Answer"
"78168489","78168283","<p>First observation:</p>
<pre class=""lang-py prettyprint-override""><code>        if Hx == 0:  # Check for 0 value specifically at index 11
            prev_Hx = Hlist[i - 1]
            next_Hx = Hlist[i + 1]
            Hx = (prev_Hx + next_Hx) / 2  # Calculate average for line 12 only
        elif Hx == 0:  # Apply the 0-replacement rule to other lines
            Hx = handle_missing_values([Hx])[0]
</code></pre>
<p>This part may be the problem because you're doing this in the same loop that constructs <code>Hlist</code> -- so the value at index <code>i+1</code> never exists. And your <code>elif</code> case is unreachable because it's testing the same condition as the <code>if</code> case.</p>
<p>My suggestion is to read in all the values into <code>Hlist</code>, pass <code>Hlist</code> through <code>handle_missing_values()</code> to clean it up, then loop over <code>Hlist</code> <em>again</em> and run the postprocessing code there (calculating the heat index, etc.):</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;blah&quot;) as Tf, blah blah:
    for Tl, Hl in zip(Tf, Hf):
        Tx = float(Tl.strip())
        Hx = float(Hl.strip())
        Tlist.append(Tx)
        Hlist.append(Hx)

    Hlist = handle_missing_values(Hlist)
    # same for Tlist if needed

    for Tx, Hx in zip(Tlist, Hlist):
        heat_index_val = cal_hi(Tx, Hx)
        stat = whatstatus(heat_index_val)
        print(f&quot;{i+1}\t{Tx:.2f}\t\t{Hx:.2f}\t\t{heat_index_val:.2f}\t\t{stat}&quot;)
        # rest of your loop
</code></pre>
<p>Although I am a bit unclear on the requirements for the &quot;boundary conditions&quot; (i.e. when a zero is the first or last element) as implemented in <code>handle_missing_values()</code> -- in the case of the first element being zero the <code>max()</code> will clamp the index to 0 and you'll wind up taking the average of the first and second element which might not be what you want.</p>
<p>(P.S. Nice use of iterating over a file to read the lines. I often forget that I can do that and end up writing <code>for line in f.read().split('\n')</code> and use more memory than necessary.)</p>
","0","Answer"
"78168498","78168281","<p>Your issue is that the keys must be unique in a dictionary (which is what you're using, not a list), so you can't have two (or more) values with the same 'n=1' key.
If you use the lists as the keys, then you can use the values to count occurences.</p>
<p>Something like</p>
<pre class=""lang-py prettyprint-override""><code>HH_dict = {'HH1': ['x'], 'HH2': ['y', 'x'], ... }
unique = {}
for element in HH_dict:
    elem_tuple = tuple(sorted(HH_dict[element]))
    if elem_tuple not in unique.keys():
        unique[elem_tuple] = 1
    else:
        unique[elem_tuple] += 1
for key, value in sorted(unique.items(), key=lambda item: item[1], reverse=True):
    print(f&quot;n={value}: {key}&quot;)
</code></pre>
<p>would work to print the output you're looking for.</p>
","1","Answer"
"78168601","78168356","<p>You can iterate over your list and use <code>==</code> to create a logical value to test if the sheet names are 'Alpha_Beta'. <code>which</code> return the index for the sheets that are 'Alpha_Beta'. If none are found the value will be <code>integer(0)</code>:</p>
<pre class=""lang-r prettyprint-override""><code>lapply(list_sheet_names, \(x) which(x[!nzchar(names(x))] == &quot;Alpha_Beta&quot;))
</code></pre>
<p><strong>Example</strong></p>
<p>Based on the data you added to your question this should work:</p>
<pre class=""lang-r prettyprint-override""><code>list_sheet_names &lt;- list(list(&quot;report&quot;, &quot;Menu&quot;, &quot;Title Sheet&quot;, &quot;H3_NG_EFS&quot;, &quot;AB Input&quot;, 
                              &quot;Alpha_Beta&quot;, &quot;B 375 Rpt&quot;, &quot;Iodines&quot;, &quot;Gross Data DB&quot;, &quot;Release DB&quot;, 
                              &quot;Gross Iodine (2)&quot;, &quot;Print Header&quot;, &quot;Get Iodine&quot;, &quot;Print Iodines&quot;, 
                              &quot;Print Alpha &amp; 375&quot;, &quot;Print Tritium &amp; Beta&quot;, &quot;Print Report&quot;, 
                              &quot;Clear Inputs&quot;, &quot;AEMR DATE Function&quot;, &quot;Get Tritium&quot;, &quot;Menu Macros&quot;, 
                              &quot;Notes &amp; Remarks&quot;, &quot;Module1&quot;, &quot;Module2&quot;, file_names = &quot;2002 reports/Ec2002/em020102.xls&quot;))

# Answer given above
lapply(list_sheet_names, \(x) which(x[!nzchar(names(x))] == &quot;Alpha_Beta&quot;))
# [[1]]
#   
# 6 
</code></pre>
","1","Answer"
"78168657","78168283","<pre class=""lang-py prettyprint-override""><code>def interpolate_zeros(data):
    if not data:
        return

    yield(data[0])
    if len(data) == 1:
        return

    prev_it = iter(data)
    curr_it = iter(data); next(curr_it)
    next_it = iter(data); next(next_it); next(next_it)

    for prev_val, curr_val, next_val in zip(prev_it, curr_it, next_it):
        if curr_val == 0:
            yield (prev_val + next_val) / 2
        else:
            yield curr_val

    yield(data[-1])

data = [1, 2, 0, 4, 0, 6]
print(list(interpolate_zeros(data)))
# -&gt; [1, 2, 3.0, 4, 5.0, 6]
</code></pre>
<p>This might do what you expect when the first or last value in the list is zero, but you didn't specify how that should be handled.</p>
","0","Answer"
"78168673","78168356","<p>Use <code>Filter</code> as follows:</p>
<pre><code> Filter(\(x)x[[1]] == 'Alpha_Beta', list_sheet_names)
</code></pre>
","0","Answer"
"78168751","78168283","<p>You can use enumerate() and list comprehension. Assuming neither first not last element of your list is 0 below should work:</p>
<pre><code>def handle_missing_values(dl):
    return [i if i != 0 else (dl[j-1]+dl[j+1])/2 for j,i in enumerate(dl)]
</code></pre>
","0","Answer"
"78168822","78168283","<p>You need to split your code and will need to use 2 loops</p>
<ul>
<li>First loop to create <code>Hlist</code> and <code>Tlist</code> from the files by iterating over lines</li>
<li>Call <code>handle_missing_values</code> function twice to clean up <code>Hlist</code> and <code>Tlist</code></li>
<li>Second loop to do calculations - <code>heat_index_val</code> and <code>stat</code> by iterating over <code>Hlist</code> and <code>Tlist</code></li>
</ul>
<p>Also, since your <code>handle_missing_values</code> function already accounts for the edge cases, you wouldn't need the specific fixes.</p>
<p>My suggestion would be to use a global mean or nearest neighbor in case of one or both neighbors being invalid. Or else remove the 0 values all together before further processing. It depends on your use case though.</p>
<p>P.S. By the way, your <code>if</code> and <code>elif</code> conditions are both same and for all <code>Hx==0</code>, the code tries to access the elements at indices <code>i-1</code> and <code>i+1</code>, the latter of which is not yet generated  (Former also if i =0).</p>
","0","Answer"
"78168838","78168283","<p>You can use <code>itertools</code> for it:</p>
<pre class=""lang-py prettyprint-override""><code>import itertools


data = [1, 2, 3, 4, 5, 6, 7]
prev_pool, current_pool, next_pool = itertools.tee(data, 3)
prev_pool = itertools.chain([-1], prev_pool)
next(next_pool)
next_pool = itertools.chain(next_pool, [-9])

for prev_element, current_element, next_element in zip(prev_pool, current_pool, next_pool):
    print(f&quot;{prev_element=}, {current_element=}, {next_element=}&quot;)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>prev_element=-1, current_element=1, next_element=2
prev_element=1, current_element=2, next_element=3
prev_element=2, current_element=3, next_element=4
prev_element=3, current_element=4, next_element=5
prev_element=4, current_element=5, next_element=6
prev_element=5, current_element=6, next_element=7
prev_element=6, current_element=7, next_element=-9
</code></pre>
<p>Notes</p>
<ul>
<li>We use <code>tee</code> to split the list into 3 iterables</li>
<li>For <code>previous_pool</code>, we prepend the value <code>-1</code>. It can be anything that is convenient to our calculations</li>
<li>For <code>next_pool</code>, we advance the pool and append <code>-9</code> to it. Again, this value can be anything that is covenient</li>
<li>After that, we can zip the pools together and iterate through them</li>
</ul>
","0","Answer"
"78169338","78168281","<p>You can do:</p>
<pre class=""lang-py prettyprint-override""><code>dct = {
    &quot;HH1&quot;: [&quot;x&quot;],
    &quot;HH2&quot;: [&quot;y&quot;, &quot;x&quot;],
    &quot;HH3&quot;: [&quot;x&quot;, &quot;z&quot;],
    &quot;HH4&quot;: [&quot;x&quot;],
    &quot;HH5&quot;: [&quot;x&quot;],
    &quot;HH6&quot;: [&quot;x&quot;],
    &quot;HH7&quot;: [&quot;x&quot;],
    &quot;HH8&quot;: [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;],
    &quot;HH9&quot;: [&quot;x&quot;],
    &quot;HH10&quot;: [&quot;x&quot;, &quot;y&quot;],
    &quot;HH11&quot;: [&quot;x&quot;],
    &quot;HH12&quot;: [&quot;x&quot;],
    &quot;HH13&quot;: [&quot;x&quot;],
    &quot;HH14&quot;: [&quot;x&quot;],
    &quot;HH15&quot;: [&quot;x&quot;, &quot;y&quot;],
    &quot;HH16&quot;: [&quot;x&quot;, &quot;y&quot;],
    &quot;HH17&quot;: [&quot;x&quot;, &quot;y&quot;],
    &quot;HH18&quot;: [&quot;x&quot;],
}

cnt = {}
for v in dct.values():
    t = tuple(sorted(v))
    cnt[t] = cnt.get(t, 0) + 1

for k, v in cnt.items():
    print(f&quot;n={v}: {k}&quot;)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>n=11: ('x',)
n=5: ('x', 'y')
n=1: ('x', 'z')
n=1: ('x', 'y', 'z')
</code></pre>
","0","Answer"
"78170289","78169382","<p>I played around with your code a bit and discovered that what actually happens is that the &quot;root node&quot; has data of <code>None</code>, and what looks like the node's data is actually a child with data set and no children.</p>
<p>What you may be intending is this:</p>
<pre class=""lang-py prettyprint-override""><code>    def add_child(self, child_node):
        if child_node.data is not None and child_node.children == []:
            # whoops, it's a leaf
            self.data = child_node.data
        else:
            self.children.append(child_node)
</code></pre>
<p>This would work if you know your input is always going to be 2-element lists, with at most one sub-list indicating the children.</p>
<p>In the case of something like @trincot's example <code>[['a', [9], 'b'],42]</code>, depending on whether or not this makes sense, all you may have to do is this instead to make sure the leaf nodes are always listed first in the children list:</p>
<pre class=""lang-py prettyprint-override""><code>    def add_child(self, child_node):
        if child_node.data:
            # it's a leaf so it comes first
            self.children.insert(0, child_node)
        else:
            # it's a branch node
            self.children.append(child_node)
</code></pre>
<p>Take your pick. Or maybe someone else will post another answer.</p>
","1","Answer"
"78174549","78174425","<p>A constant can be used as a subroutine, so you can call <code>scalar INFOFIELDS()</code> or <code>scalar &amp;INFOFIELDS</code> to access the number of items in the constant list.</p>
","1","Answer"
"78174796","78174425","<p>You don't need the <code>@</code>:</p>
<pre><code>use constant NELEMENTS =&gt; scalar (INFOFIELDS);
</code></pre>
","2","Answer"
"78175059","78174425","<p>I know that you are specifically asking about a constant subroutine made with the <code>constant</code> pragma, and other answers have already noted that you don't need to the <code>@</code> around the return value of a subroutine.</p>
<p>The general way to get the number of elements in a list is to assign the result of a list assignment. Even an assignment to the empty list is good enough:</p>
<pre><code>$ perl -le 'print $c = () = qw(a b c)'
3

$ perl -le '@c = qw(1 2 4 6); print $c = () = @c'  # but also scalar @c
4

$ perl -le 'print $c = () = 1 .. 37'
37

$ perl -le 'print $c = () = localtime'
9

$ perl -le 'use constant L =&gt; qw( v 7 ); $c = () = L; print $c'
2
</code></pre>
<p>If the thing supplying the list is an array (as it is in <code>constant</code>), <code>scalar</code> gives the right answer:</p>
<pre><code>$ perl -le 'use constant L =&gt; qw( v 7 ); $c = scalar  L; print $c'
2
</code></pre>
<p>This works because you are asking for scalar context on <code>L</code>, which puts the last evaluated expression in <code>L()</code> in scalar context. The expression is the array variable that <code>constant</code> made to hold your list.</p>
<p>However, the <code>scalar</code> goes wrong in the (non-array) list case, at least for what people blindly expect. This gives the last element of the list:</p>
<pre><code>$ perl -le 'print $c = scalar qw(a b c)'
c
</code></pre>
<p>Since many people use <code>qw(1 2 3)</code> as their input list when they try this, they accidentally get <code>3</code> and think it worked out. That's why I write so much about that in perlfaq4's <a href=""https://perldoc.perl.org/perlfaq4#What-is-the-difference-between-a-list-and-an-array?"" rel=""nofollow noreferrer"">What is the difference between a list and an array?</a>.</p>
","3","Answer"
"78177001","78176988","<p>Removing elements from lists does not work that way. If you try to subtract a list from list, it will throw an unsupported operand type error. For eg.:</p>
<pre><code>&gt;&gt;&gt; list = ['a', 'b', 'c']
&gt;&gt;&gt; print(list - ['a','c'])
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for -: 'list' and 'list'
</code></pre>
<p>You can use numpy to achieve list subtraction. In python 3.9 it looks something like:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; li = ['a', 'b', 'c']
&gt;&gt;&gt; print(np.setdiff1d(li, ['a', 'c']).tolist())
['b']
</code></pre>
","-1","Answer"
"78177060","78176988","<p>The &quot;TypeError: unsupported operand types for +: 'list' and 'list'&quot; exception in Tkinter typically arises when attempting to concatenate two lists using the '+' operator. To resolve this, ensure that you're using the correct data types and operations for list manipulation in your Tkinter application. You might need to convert the lists to compatible types or use alternative methods like list.extend() or list.append() for concatenation. Review your code and verify that list operations are performed correctly to avoid this error.</p>
","-2","Answer"
"78180529","78180490","<p>You could make them into tibbles first and save row names as a variable then use <code>bind_rows()</code>.</p>
<pre class=""lang-r prettyprint-override""><code>library(dplyr)
my_list &lt;-  list(structure(list(observations = c(1L, 5L), variables = c(4L, 8L)), class = &quot;data.frame&quot;, 
                           row.names = c(&quot;asp_202003...Copy.xlsx&quot;, &quot;asp_202003.xlsx&quot;)), 
                 structure(list(observations = c(3L, 1L), variables = 5:4), class = &quot;data.frame&quot;, 
                           row.names = c(&quot;eay_201008_a.xlsx&quot;, &quot;eay_202003.xlsx&quot;)), 
                 structure(list(observations = 3:4, variables = c(4L, 6L)), class = &quot;data.frame&quot;, 
                           row.names = c(&quot;wana_202309...Copy.xlsx&quot;, &quot;wana_202309.xlsx&quot;)))

bind_rows(purrr::map(my_list, ~as_tibble(.x, rownames=&quot;file&quot;)))
#&gt; # A tibble: 6 × 3
#&gt;   file                    observations variables
#&gt;   &lt;chr&gt;                          &lt;int&gt;     &lt;int&gt;
#&gt; 1 asp_202003...Copy.xlsx             1         4
#&gt; 2 asp_202003.xlsx                    5         8
#&gt; 3 eay_201008_a.xlsx                  3         5
#&gt; 4 eay_202003.xlsx                    1         4
#&gt; 5 wana_202309...Copy.xlsx            3         4
#&gt; 6 wana_202309.xlsx                   4         6
</code></pre>
<p><sup>Created on 2024-03-18 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.0.2</a></sup></p>
","2","Answer"
"78180547","78180490","<p>You can use base r and two lines of code:</p>
<pre><code>my_list &lt;-  list(structure(list(observations = c(1L, 5L), variables = c(4L, 
8L)), class = &quot;data.frame&quot;, row.names = c(&quot;asp_202003...Copy.xlsx&quot;, 
&quot;asp_202003.xlsx&quot;)), structure(list(observations = c(3L, 1L), 
variables = 5:4), class = &quot;data.frame&quot;, row.names = c(&quot;eay_201008_a.xlsx&quot;, 
&quot;eay_202003.xlsx&quot;)), structure(list(observations = 3:4, variables = c(4L, 
6L)), class = &quot;data.frame&quot;, row.names = c(&quot;wana_202309...Copy.xlsx&quot;, 
                         &quot;wana_202309.xlsx&quot;)))


mydf &lt;- do.call( rbind, my_list) 
mydf$file &lt;- row.names(mydf)
</code></pre>
","2","Answer"
"78180571","78180490","<p>You can <code>rownames_to_column</code> along with <code>rbind</code>, like below</p>
<pre><code>library(tibble)

do.call(rbind, my_list) %&gt;%
   rownames_to_column(var = &quot;file&quot;)
</code></pre>
<p>or, if you prefer base R solutions, you can try</p>
<pre><code>`row.names&lt;-`(
   do.call(
      rbind,
      lapply(my_list, \(x) cbind(
         file = row.names(x),
         x
      ))
   ), NULL
)
</code></pre>
<p>which gives</p>
<pre><code>                     file observations variables
1  asp_202003...Copy.xlsx            1         4
2         asp_202003.xlsx            5         8
3       eay_201008_a.xlsx            3         5
4         eay_202003.xlsx            1         4
5 wana_202309...Copy.xlsx            3         4
6        wana_202309.xlsx            4         6
</code></pre>
","3","Answer"
"78180795","78180490","<p>A <code>purrr::list_rbind</code> solution:</p>
<pre><code>my_merge &lt;- rownames_to_column(list_rbind(my_list), &quot;file&quot;)
</code></pre>
<p>Output:</p>
<pre><code>&gt; my_merge
                     file observations variables
1  asp_202003...Copy.xlsx            1         4
2         asp_202003.xlsx            5         8
3       eay_201008_a.xlsx            3         5
4         eay_202003.xlsx            1         4
5 wana_202309...Copy.xlsx            3         4
6        wana_202309.xlsx            4         6
</code></pre>
","2","Answer"
"78182352","78182191","<p>Find everything to the first underscore followed by everything until an underscore and 6 digits followed by anything.  Keep the part between the undersores.</p>
<pre><code>strings |&gt;
  unlist() |&gt;
  sub(&quot;.*?_(.*)_\\d{6}.*&quot;, &quot;\\1&quot;, x = _) 
## [1] &quot;ap&quot;          &quot;ap_thailand&quot; &quot;eay&quot;   
</code></pre>
","3","Answer"
"78182419","78182191","<p>Here is another solution using <code>stringr</code>. In this case, you can extract the string of interest using the look around operators, preceded <code>(?&lt;=)</code> and followed <code>(?=)</code>. In this case, the regular expression extracts anything <code>.*</code> that is preceded by an underscore <code>(?&lt;=_)</code> and followed by an underscore and six digits <code>(?=_[0-9]{6}</code>.</p>
<pre><code>library(stringr)

strings |&gt;
  str_extract(&quot;(?&lt;=_).*(?=_[0-9]{6})&quot;)

# [1] &quot;ap&quot;          &quot;ap_thailand&quot; &quot;eay&quot;  
</code></pre>
","2","Answer"
"78182455","78182191","<pre class=""lang-r prettyprint-override""><code>unlist(lapply(strings, function(s) strsplit(s, split = &quot;\\d+_|_\\d+&quot;)[[1]][2]))

#&gt; [1] &quot;ap&quot;  &quot;ap_thailand&quot;   &quot;eay&quot;
</code></pre>
","1","Answer"
"78182674","78182191","<p>With the assumption that what you want to extract contains only letters and eventually underscores:</p>
<pre><code>&gt; m &lt;- regexpr(&quot;_\\K[a-z_]*[a-z]&quot;, strings, perl = T)
&gt; regmatches(strings, m)
[1] &quot;ap&quot;          &quot;ap_thailand&quot; &quot;eay&quot;
</code></pre>
<p>Why doing a replacement when you want to extract?</p>
","2","Answer"
"78183790","78183769","<p>You can do something like this:</p>
<pre><code>q){[x;n]@[x;-1+n*1+til count[x]div n;:;&quot;,&quot;]}[;5]each names
&quot;Sain, Den,s&quot;
&quot;Rhod,s&quot;
&quot;Stra,berr,&quot;
&quot;Vale,tine&quot;
&quot;Omar&quot;
</code></pre>
<p>Explanation:</p>
<pre><code>q)x
&quot;Saint Denis&quot;
q)count[x]div 5 / Returns the greatest whole number that does not exceed x%y
2
q)-1+5*1+til count[x]div 5 / Get the indices to replace
4 9
q)@[x;-1+5*1+til count[x]div 5;:;&quot;,&quot;] / Ammend at indices
&quot;Sain, Den,s&quot;
</code></pre>
","3","Answer"
"78185590","78179620","<p>SharePoint Online PowerShell (SharePoint Online Management Shell) does not have any straight forward command like PnP PowerShell to get all lists from the SharePoint site.</p>
<p>You will have to use the CSOM methods for this requirements, like:</p>
<pre><code>#Load SharePoint CSOM Assemblies
Add-Type -Path &quot;C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.dll&quot;
Add-Type -Path &quot;C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.Runtime.dll&quot;
 
#Function to Get all/specific list from site
Function Get-SPOList()
{
    Param
    (
        [Parameter(Mandatory=$true)] [Microsoft.SharePoint.Client.Web] $Web,
        [Parameter(Mandatory=$false)] [string] $ListName
    )
    #Get the Context
    $Ctx = $Web.Context
     
    #Get a single list or All Lists
    If($ListName)
    {
        #sharepoint online get list powershell
        $List = $Web.Lists.GetByTitle($ListName)
        $Ctx.Load($List)
        $Ctx.ExecuteQuery()
        Return $List
    }
    Else
    {
        #sharepoint online get all lists powershell
        $Lists = $Web.Lists
        $Ctx.Load($Lists)
        $Ctx.ExecuteQuery()
        Return $Lists
    }
}
 
#Parameters
$SiteURL=&quot;https://&lt;tenant&gt;.sharepoint.com/sites/MySite&quot;
 
#Setup Credentials to connect
$Cred= Get-Credential
$Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($Cred.Username, $Cred.Password)
 
#Setup the context
$Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($SiteURL)
$Ctx.Credentials = $Credentials
 
#sharepoint online powershell get all lists
$Lists = Get-SPOList -Web $Ctx.Web
 
#Extract List data
$ListCollection = @()
ForEach($List in $Lists)
{
    $ListData = New-Object -TypeName PSObject
    $ListData | Add-Member -MemberType NoteProperty -Name &quot;Title&quot; -Value $List.Title
    $ListData | Add-Member -MemberType NoteProperty -Name &quot;Itemcount&quot; -Value $List.Itemcount
    $ListData | Add-Member -MemberType NoteProperty -Name &quot;BaseTemplate&quot; -Value $List.BaseTemplate
    $ListData | Add-Member -MemberType NoteProperty -Name &quot;Created&quot; -Value $List.Created
    $ListData | Add-Member -MemberType NoteProperty -Name &quot;LastItemModifiedDate&quot; -Value $List.LastItemModifiedDate
    $ListCollection += $ListData
}
#Export List Inventory to CSV
$ListCollection | Export-csv -Path &quot;C:\Temp\list-inventory.csv&quot; -NoTypeInformation
</code></pre>
<p>Replace <code>$SiteURL</code> variable value with your SharePoint site URL.</p>
","0","Answer"
"78186800","78186649","<pre><code>lst |&gt;
  lapply(&quot;[[&quot;, 1) |&gt;
  sapply(&quot;[&quot;, 1) |&gt;
  data.frame(record = _)
#    record
# 1 Class A
# 2 Class B
# 3 Class A
# 4 Class D
</code></pre>
<hr />
<p>Using this sample data (with the non-syntactic &quot;fancy&quot; quotes from the question replaced with regular quotes).</p>
<pre><code>lst&lt;- list(list(c(&quot;Class A&quot;, &quot;86&quot;, &quot;Missing&quot;)),
     list(c(&quot;Class B&quot;, &quot;76&quot;, &quot;Delay&quot;)),
     list(c(&quot;Class A&quot;, &quot;88&quot;, &quot;Missing&quot;)),
     list(c(&quot;Class D&quot;, &quot;Missing&quot;, &quot;56&quot;)))
</code></pre>
","3","Answer"
"78186844","78186649","<p>Maybe this could help</p>
<pre><code>&gt; data.frame(do.call(rbind, unlist(lst, FALSE)))[1]
       X1
1 Class A
2 Class B
3 Class A
4 Class D
</code></pre>
","3","Answer"
"78186885","78186649","<h3>base R solution</h3>
<p>You can index more than one level with <code>c()</code>, i.e.</p>
<pre class=""lang-r prettyprint-override""><code># They are both &quot;Class A&quot;
lst[[1]][[1]][1] == lst[[c(1,1,1)]]
</code></pre>
<p>So to pull the first element of the first vector of each sublist we can do:</p>
<pre class=""lang-r prettyprint-override""><code>data.frame(
    record = vapply(lst, \(l) l[[c(1,1)]], character(1))
)
#    record
# 1 Class A
# 2 Class B
# 3 Class A
# 4 Class D
</code></pre>
<h3><code>tidyverse</code> solution</h3>
<p>If you want a <code>tidyverse</code> solution instead, you could also use <a href=""https://purrr.tidyverse.org/reference/pluck.html"" rel=""nofollow noreferrer""><code>purrr::pluck()</code></a>, and provide an accessor function to extract the first element:</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr)
map_chr(
    lst, 
    \(l) pluck(l, 1, \(x) x[1])
)  |&gt;
    dplyr::as_tibble()  |&gt;
    set_names(&quot;record&quot;)

# # A tibble: 4 × 1
#   record 
#   &lt;chr&gt;  
# 1 Class A
# 2 Class B
# 3 Class A
# 4 Class D
</code></pre>
","3","Answer"
"78186965","78186401","<p>You should write a discrete function to calculate the value you need. This function will sum a list of integers, count the number of zeros in the list then divide the sum by the difference between the length of the list and the zero count.</p>
<p>This could result in a ZeroDivisionError exception.</p>
<p>You can use <em>zip()</em> to conveniently iterate over your input list</p>
<pre><code>data = [[0, 5, -3, 5, 0, 0], [-3, 0, 1, 0, 5, 0], [1, 0, 5, 0, -5, 0], [-3, 0, 3, 0, 0, 5]]

def average(e):
    try:
        return sum(e) / (len(e) - e.count(0))
    except ZeroDivisionError:
        pass

result = [average(e) for e in zip(*data)]

print(result)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[-1.6666666666666667, 5.0, 1.5, 5.0, 0.0, 5.0]
</code></pre>
","2","Answer"
"78187164","78186401","<p>For this kind of task (multi-dimensional array), you will see a huge benefit in using <code>numpy</code>. Not only is it more efficient (when large amount of data), but also everything is more natural.</p>
<p>With <code>numpy</code> you can get what you want in 1 line of code (<code>y = ...</code>):</p>
<pre><code>import numpy as np
x = np.array([
  [0, 5, -3, 5, 0, 0],
  [-3, 0, 1, 0, 5, 0],
  [1, 0, 5, 0, -5, 0],
  [-3, 0, 3, 0, 0, 5]
])
y = np.sum(x, axis=0) / np.sum(x != 0, axis=0)
print(y)  # [-1.66666667  5.          1.5         5.          0.          5.        ]

</code></pre>
<p>Here you do a sum &quot;vertically&quot; (<code>axis=0</code>), and you divide this <em>vector</em> by the vertical sum of 0 and 1 values (1 if <code>!= 0</code> and 0 if <code>== 0</code>), i.e. you are dividing by the count of non-zero elements in each column.</p>
","2","Answer"
"78188001","78187620","<p>Use <code>concat</code> instead of <code>merge</code> to stack datframes vertically.</p>
<pre><code>df_res = pd.concat([df[columns] for df in dataframes],ignore_index = True)
</code></pre>
<p>This will create a new dataframe df_res with columns =['server', 'ip'] by stacking all rows vertically. It also replaces the original index with new index.</p>
","0","Answer"
"78188059","78188025","<p>You could use Counter from the collections library.</p>
<p>It would look something like this:</p>
<pre class=""lang-py prettyprint-override""><code>from collections import Counter

def question10(ipaddresses: list[str]):
   counter = Counter(ipaddresses)
   return [counter[None], counter['129.128.1.1'], counter['192.128.1.4']]
</code></pre>
<p>Note that the <code>list[str]</code> syntax is only available in newer python versions like Python 3.9 and later.</p>
<p>For older versions you'd use something like:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import List
from collections import Counter

def question10(ipaddresses: List[str]):
    counter = Counter(ipaddresses)
    return [counter[None], counter['129.128.1.1'], counter['192.128.1.4']]
</code></pre>
<p>The usecase for these, however, will remain the same.
For example the list:</p>
<pre class=""lang-py prettyprint-override""><code>ipaddresses = ['192.128.1.1', '192.128.1.4', '129.128.1.1',
               '129.128.1.1', '129.128.1.4']
</code></pre>
<p>should output <code>[0, 2, 1]</code> in both cases</p>
","3","Answer"
"78188388","78188025","<p>You can use the built-in count() function :</p>
<pre><code>def question10(ipaddresses: list[str]):
    none_count = ipaddresses.count(None)
    host_count = ipaddresses.count('129.128.1.1')
    target_count = ipaddresses.count('192.128.1.4')    
    return [none_count, host_count, target_count]
</code></pre>
","0","Answer"
"78188614","78174425","<p>Can also get your read-only variables (constants) as plain old lexicals, using another library</p>
<pre><code>use Const::Fast; 

const my @constary =&gt; qw(one two); 
</code></pre>
<p>Then use it as any other array to get its length</p>
<pre><code>my $num_elems = @constary;                # or

const my $num_elems =&gt; scalar @constary;  # better as length is constant
</code></pre>
<p>or</p>
<pre><code>say &quot;Number of elements: &quot;, scalar @constary;  # or 0+@constary
</code></pre>
<p>to get the number of elements on the fly.  Here <a href=""https://perldoc.perl.org/functions/scalar"" rel=""nofollow noreferrer"">scalar</a> forces scalar context, in which an array is evaluated to its length (number of elements), and <code>0+...</code> forces numeric (and scalar) context.</p>
<p>Now there's no puzzle, use these lexical variables normally as any other. See <a href=""https://metacpan.org/pod/Const::Fast"" rel=""nofollow noreferrer"">Const::Fast</a>. Its <a href=""https://metacpan.org/dist/Const-Fast/source/lib/Const/Fast.pm"" rel=""nofollow noreferrer"">code</a> is 74 lines.</p>
","1","Answer"
"78188856","78169382","<p>What if we resort the node data by type as we process it:</p>
<pre><code>def assign_tree_nodes(input_data):
    if isinstance(input_data, list):
        data, children = sorted(input_data, key=lambda x: [int, list].index(type(x)))

        node = TreeNode(data)

        for child in children:
            node.add_child(assign_tree_nodes(child))
    else:
        node = TreeNode(input_data)

    return node

def print_tree(node, indent=0):
    print(&quot;  &quot; * indent, node.data, sep='')

    for child in node.children:
        print_tree(child, indent + 1)

example = [6, [[[[1, [2, 3]], [[-43, 44], 42]], 4], 5]]

print_tree(assign_tree_nodes(example))
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>% python3 test.py
6
  4
    1
      2
      3
    42
      -43
      44
  5
% 
</code></pre>
","0","Answer"
"78189079","78187620","<p>You can use join with set_index:</p>
<pre><code>[df.set_index(['server', 'ip'], inplace=True) for df in dataframes]
df_res = dataframes[0].join(dataframes[1:])
</code></pre>
","0","Answer"
"78191478","78179620","<p>If you want to using PnP PowerShell commands, you need to Install the PnP PowerShell Module for SharePoint Online.</p>
<pre><code>Install-Module PnP.PowerShell
</code></pre>
<p>Try to use the following PnP powershell to get all lists from the current SharePoint Online site:</p>
<pre><code>#Config Variables
$SiteURL = &quot;https://Crescent.sharepoint.com/sites/marketing&quot;
 
#Connect to PnP Online
Connect-PnPOnline -Url $SiteURL -Credentials (Get-Credential)
 
#Get all lists
$Lists = Get-PnPList
 
#Get List Title, Description and Number of Items
$Lists | Select Title, Description, ItemCount
</code></pre>
","0","Answer"
"78193098","78193031","<p>You absolutely can use a stream for this with <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F11%2Fdocs%2Fapi%2F%2F/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function)"" rel=""nofollow noreferrer"">Collectors.groupingBy</a>. Since your example has int two ints you can just create a string from the values. That will create a unique key for every integer combination.</p>
<pre><code>Map&lt;String, List&lt;Student&gt;&gt; graded = students.stream().collect( 
        Collectors.groupingBy( 
            s -&gt;{ return s.age + &quot;,&quot; + s.aveGrade;}
        )
    );
</code></pre>
<p>In this example I generated the key by combining the two integers as a string.</p>
<p>A more extensible approach would be to use List that way each object will be checked.</p>
<pre><code>Map&lt;List&lt;?&gt;, List&lt;Student&gt;&gt; graded = students.stream().collect( 
            Collectors.groupingBy( 
                s -&gt;List.of(s.age, s.ave)
            )
        );
</code></pre>
<p>Then you can decide which elements you want to use and it doesn't depend on unique string representations.</p>
","1","Answer"
"78193122","78193031","<p>You don't need sorting, you need to group (the answer is literally in the question).  To do the grouping by multiple fields use custom class:</p>
<pre><code>public class Key {

  private final int age;
  private final int avg;

  //constructor

  //getters, if needed

  //equals and hashCode overrides!!!
}
</code></pre>
<p>If you are using java 16+, use a <a href=""https://openjdk.org/jeps/395"" rel=""nofollow noreferrer"">record</a> instead:</p>
<pre><code>public record Key(int age, int avg) {
}
</code></pre>
<p>The grouping can be easily done with a <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-"" rel=""nofollow noreferrer"">groupingBy collector</a>:</p>
<blockquote>
<p>Returns a Collector implementing a &quot;group by&quot; operation on input elements of type T, grouping elements according to a classification function, and returning the results in a Map.</p>
</blockquote>
<p>Then just get the values of the map and transform to list (if needed):</p>
<pre><code>public class SoMain {

  public static void main(String[] args) {
    List&lt;Student&gt; list = List.of(new Student(&quot;I&quot;, 11, 5), new Student(&quot;C&quot;, 11, 4), new Student(&quot;D&quot;, 11, 5));
    List&lt;List&lt;Student&gt;&gt; grouped = list.stream()
            .collect(Collectors.groupingBy(student -&gt; new Key(student.getAge(), student.getAvgGrade())))
            .values() //values is Collection&lt;List&lt;Student&gt;&gt;
            .stream()
            .toList();
    System.out.println(grouped);
  }
}
</code></pre>
","7","Answer"
"78193919","78183769","<p>Another approach using fill</p>
<pre><code>q){x^count[x]#&quot;    ,&quot;}'[names]
&quot;Sain, Den,s&quot;
&quot;Rhod,s&quot;
&quot;Stra,berr,&quot;
&quot;Vale,tine&quot;
&quot;Omar&quot;
</code></pre>
","0","Answer"
"78199556","78199352","<p><code>[,xx]</code> (or <code>[,'xx']</code>) could not be a valid python object.</p>
<pre><code>[,'xx']
# SyntaxError: invalid syntax
</code></pre>
<p>Only <code>['xx']</code> would be, but in this case there is no way to differentiate something that would be converted to <code>['xx', NaN]</code> or <code>[NaN, 'xx']</code>.</p>
<p>Thus, assuming that you have <strong>strings representations of list-like objects</strong> (<code>'[,xx]'</code>), you could strip the <code>[</code>/<code>]</code> and split on <code>,</code> before exploding:</p>
<pre><code>cols = ['col1', 'col2', 'col3']

out = (df[cols]
       .applymap(lambda x: x.strip('[]').split(','))  # convert to lists
       .explode(cols)                                 # explode
       .join(df.drop(columns=cols))[df.columns]       # add other columns
      )
</code></pre>
<p><em>NB. in most recent versions of pandas, replace <code>applymap</code> by <code>map</code>.</em></p>
<p>Output:</p>
<pre><code>   index col1 col2 col3
0      1    A         1
0      1    B   xx    2
1      2    A   zz    3
1      2    C   xx    4
2      3    D   zz    2
2      3        yy    2
</code></pre>
<p>Used input:</p>
<pre><code>df = pd.DataFrame({'index': [1, 2, 3],
                   'col1': ['[A,B]', '[A,C]', '[D,]'],
                   'col2': ['[,xx]', '[zz,xx]', '[zz,yy]'],
                   'col3': ['[1,2]', '[3,4]', '[2,2]']})
</code></pre>
","0","Answer"
"78199729","78199573","<p>You could use this sort of approach and turn it into a function...</p>
<pre><code>gsub(&quot;\\..+&quot;, &quot;&quot;, grep(&quot;blueberry&quot;, names(unlist(my_list)), value = TRUE))

[1] &quot;C&quot;
</code></pre>
<p><code>unlist</code> produces nested names separated by dots, so the first element is the top level list you are looking for.</p>
","2","Answer"
"78199862","78199573","<p>An alternative using <code>Filter</code>:</p>
<pre><code>find_list &lt;- function(nm, lst) {
  res &lt;- names(Filter(\(x) nm %in% names(x), lst))
  if (length(res) &gt; 0) return (res) else (NULL)
}
</code></pre>
","2","Answer"
"78200397","78199352","<p>If the data as below and if you want to replace your null values with some special character you can do below.</p>
<p><code>np.nan</code> is nothing but the null in python.</p>
<pre><code>import pandas as pd
import numpy as np

data = [
    [['A','B'], ['A','C'], ['D',np.nan]],
    [[np.nan,'xx'], ['zz','xx'], ['zz','yy']],
    [[1,2], [3,4],[2,2]]
]
df = pd.DataFrame(data)
special_char = 'NaN'

def replace_null(x):
  if isinstance(x, list):
    return [replace_null(item) for item in x]
  else:
    return x if not pd.isna(x) else special_char

df = df.applymap(replace_null)
print(df)
</code></pre>
","0","Answer"
"78203019","78202993","<p>If you have a big list you should consider to not use List, because it's load everything in memory. In kotlin consider using Sequences (aka streams in Java) <a href=""https://kotlinlang.org/docs/sequences.html#from-an-iterable"" rel=""nofollow noreferrer"">https://kotlinlang.org/docs/sequences.html#from-an-iterable</a> which is lazily by nature and avoid loading every element of your &quot;big list&quot; in memory.</p>
","-1","Answer"
"78203090","78202993","<p>Both options are just as efficient, you should use the clearest one, which is the second option.</p>
","3","Answer"
"78203209","78203155","<p>The function round() does not determine the format when a list is printed out. It just rounds the number to three decimal places. 9.13 rounded to 3 places just stays 9.13.
If I understand you correctly, you want the numbers to be formatted all with exactly 3 decimal places.
For that you would have to use some kind of string format expression. For example you could use this instead of print():</p>
<pre><code>for num in generate_num(9,923):
    print(f'{num:.3f}')
</code></pre>
<p>Depending on your preference you could print the like a list if you print the brackets and the commas manually also.</p>
","0","Answer"
"78203263","78203155","<p><code>round()</code> changes the <em>value</em> of the number.  Formatting controls the <em>display</em>:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; n = 3.00256
&gt;&gt;&gt; n
3.00256
&gt;&gt;&gt; m = round(n,3)  # Make a new rounded number
&gt;&gt;&gt; m
3.003
&gt;&gt;&gt; n
3.00256
&gt;&gt;&gt; m==n
False
&gt;&gt;&gt; m = round(n,2)
&gt;&gt;&gt; m
3.0
&gt;&gt;&gt; n
3.00256
&gt;&gt;&gt; m==n
False
&gt;&gt;&gt; print(f'{n:.3f}')  # Display to 3 places
3.003
&gt;&gt;&gt; print(f'{n:.2f}')  # Display to 2 places
3.00
&gt;&gt;&gt; n                  # n is unchanged
3.00256
</code></pre>
<p>If you want a custom display of a list, you have to do it yourself:</p>
<pre><code>&gt;&gt;&gt; def display(L):
...   print('['+', '.join([f'{n:.3f}' for n in L]) + ']')
...
&gt;&gt;&gt; L = [1.1, 2.22, 3.333, 4.4444, 5.5555]
&gt;&gt;&gt; L
[1.1, 2.22, 3.333, 4.4444, 5.5555]
&gt;&gt;&gt; display(L)
[1.100, 2.220, 3.333, 4.444, 5.556]
</code></pre>
","2","Answer"
"78210331","78210058","<pre><code>this.Where(x =&gt; x.IsShort.Equals(onlyShorts)).ToList()
</code></pre>
<p>produces &quot;List&lt;Video&gt;&quot; which can't be <strong>upcasted</strong> to type VideoList.</p>
<p>If you still want GetVideos returns VideoList, you need to have and use the appropriate constructor (as a possible solution):</p>
<pre><code>public VideoList(List&lt;Video&gt; videolist) { ... }

public VideoList GetVideos(bool onlyShorts)
    =&gt; new VideoList(this.Where(x =&gt; x.IsShort.Equals(onlyShorts)).ToList());
</code></pre>
","-2","Answer"
"78210463","78210058","<p>As the extension method's name <code>Enumerable.ToList</code> implies, the return type is a <code>List&lt;T&gt;</code>. Having it return an e.g. <code>ObservableCollection</code> would be semantically wrong as this is not a <code>List&lt;T&gt;</code> (To<em><strong>List</strong></em>). Such a method would rather be named <code>ConvertTo</code> (from a member naming perspective).</p>
<p>The signature of <code>Enumerable.ToList</code> looks as follows:</p>
<pre><code>public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);
</code></pre>
<p>By looking at the signature you may understand that the method cannot know the actual collection type it is working on as the original source collection, which is a <code>VideoList</code> in your case, is downcasted to <code>IEnmumerable&lt;T&gt;</code>. In other words, <code>Enumerable.ToList</code> does not know that the source collection is of type <code>VideoList</code>.<br />
In addition, in order to return an e.g. <code>VideoList</code> the extension method <code>ToList</code> would have to invoke the constructor of <code>VideoList</code> in order to create a new instance. For simplicity and for performance reasons, the <code>Enumerable.ToList</code> avoids this.</p>
<p>To solve your problem, you can make use of deferred execution and the fact that all collections accept an <code>IEnumerable</code> as constructor parameter:</p>
<pre class=""lang-cs prettyprint-override""><code>public class VideoList : List&lt;Video&gt;
{
  public VideoList(IEnumerable&lt;Video&gt; videos) : base(videos)
  {
  }

  public VideoList GetVideos(bool onlyShorts)
  {  
    // At this point the query is not executed. It's deferred.
    IEnumerable&lt;Video&gt; videos = this.Where(x =&gt; x.IsShort.Equals(onlyShorts));

    // Realize the query (iterate the VideoList only once --&gt; deferred execution)
    return new VideoList(videos);
  }
}
</code></pre>
<p>The key point is that LINQ's key feature is that it produces deferred queries, called &quot;deferred execution&quot;.<br />
This means that <code>myList.Where()</code> does not immediately execute. For example, this behavior is achieved by using <code>yield return</code>.</p>
<p>Therefore, most of the <code>Enumerable</code> extension methods return an <code>IEnumerable&lt;T&gt;</code> that is only enumerated once the <code>IEnuemrable&lt;T&gt;.GetEnumerator</code> is called and the returned <code>IEnumerator&lt;T&gt;</code> is used. This is called realization: the actual query is executed and the result values are generated.<br />
For example, one way to realize the query is thr iteration of the <code>IEnumerable</code> result using a <code>foreach</code>.<br />
<code>Enumerable</code> also defines extension methods that lead to immediate realization. Those methods are for example, <code>ToList</code>, <code>Sum</code> or <code>OrderBy</code>. These types of methods are not able to return an example without having to iterate the complete source collection.
For this reason (performance) we should always make use of deferred execution and avoid <code>ToList</code> and its likes. Better think twice, as <code>ToList</code> can easily lead to having the source collection iterated twice or more (which can have a serious performance impact if the collection is big enough:</p>
<pre class=""lang-cs prettyprint-override""><code>var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };
var filteredNumbers = numbers
  .Where(number &gt; 3)
  .ToList(); // First complete iteration

// Second complete iteration
foreach (int number in filteredNumber)
{
}
</code></pre>
<p>For that reason, we always use deferred execution when possible:</p>
<pre class=""lang-cs prettyprint-override""><code>var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };

// At this point, filteredNumbersQuery still contains all the original values
IEnumerable&lt;int&gt; filteredNumbersQuery = numbers.Where(number =&gt; number &gt; 3);

// For example, modifying the source collection before the enumeration of the result collection will also modify the realized result
numbers.Add(6);

// Iterating the result using ToList.
// Realizes: 4, 5, 6! The 6 is added because the source collection 
// was modified before the result has been realized. 
// This resulting behavior is important to know as it can lead to &quot;unexpected&quot; 
// side effects if you pass around the returned query result (the `IEnumerable&lt;T&gt;`) 
// while the source collection is modified. 
// We can also make use of this feature, now that we know that 
// the `IEnumerable&lt;T&gt;` will be kept in sync with the source collection.
List&lt;int&gt; filteredNumbers = filteredNumbersQuery.ToList(); // Realizes: 4, 5, 6!

// Because LINQ also uses &quot;lazy evaluation&quot; 
// the following chained enumeration results in a single iteration (and not two).
// In other words, each value passes directly the chain of queries
// (instead of each query being applied to the complete collection):
IEnumerable&lt;string&gt; filteredTextNumbersQuery = numbers
  .Where(number =&gt; number &gt; 3) // First query
  .Select(number =&gt; number.ToString()); // Second query

// Because of lazy evaluation 
// the chained query results in a single iteration
// once we realize the deferred query e.g. by calling ToList.
List&lt;string&gt; filteredTextNumbers = numbers.ToList(); // Single iteration realizes: &quot;4&quot;, &quot;5&quot;, &quot;6&quot;
</code></pre>
","3","Answer"
"78213441","78213234","<p>Shorter input way, and four solutions.</p>
<pre class=""lang-py prettyprint-override""><code>seq = list(map(int, input().split()))

for a, b, c in zip(seq, seq[1:], seq[2:]):
    if a &lt; b &gt; c:
        print('Hunch:', a, b, c)

a, b = seq[:2]
for c in seq[2:]:
    if a &lt; b &gt; c:
        print('Hunch:', a, b, c)
    a, b = b, c

a = b = None
for c in seq:
    if None is not a &lt; b &gt; c:
        print('Hunch:', a, b, c)
    a, b = b, c

b = float('nan')
for c in seq:
    if c &lt; b &gt; a:
        print('Hunch:', a, b, c)
    a, b = b, c
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=rZLNSsQwFIVBd3mKAy7aQBQaFCWoKxeufAHpIlNTGsgkcZKC-ipuutGNb-TTeDOtAwNuFC_kh3OT853FfX2Pz3kIfprextwfX3weHCbziCs4m3K91rG2PgtYH8dc85MUnaWTc8b6sIEWWAl01MaLjTX9FKDtvlHtfJGq5YqByvbQuMQK1-hmpVTckH1d3Y6-G1Qlvg3J_sG4nT2OcGOcyQZ5MGsUMl3gzVNGCm7MNnjGymsKXrBKttt822RLjj_FKM3Ftwh7sYhYZFp3wZs93o5VOrAJPuR_5Ba5d0HTV699xX9mdwtP_543z8IyEtNHI9Gc4lziTM7SFw"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","0","Answer"
"78213444","78213234","<p><code>enumerate</code> always starts counting at zero unless given <code>start</code> parameter, so after you slice the list, the index is not representing the original position</p>
<p>Since you're not using the <code>data</code> variable, just use range</p>
<pre><code>for i in range(1, len(data_list) - 1):
    if data_list[i - 1] &lt; data_list[i] &gt; data_list[i + 1] :
        print(&quot;Hunch: &quot; + ' '.join(tokens[i-1:i+2]))
</code></pre>
","1","Answer"
"78213487","78213234","<p>You have not mentioned in your question about how many sets of huches will be there in the list.
i.e just one set of hunches or more than one set of hunches.
Assuming that the list will have multiple sets or hunches hunches, I'he given the solution.
You can modify the code according to your requirement. Understand how to use the f-string and change the code accordingly.</p>
<pre><code>l = [12, 14, 72, 52, 22, 78, 33] 
hunches = []

# Index based iteration till the last but one element
for i in range(1,len(l)-1):

    #if the number is greater than both previous and next number, make a list
    if l[i-1] &lt; l[i] &gt; l[i + 1]:
        sub = f'{l[i-1]} {l[i]} {l[i+1]}'

        # append this list to the list hunches
        hunches.append(sub)

print(f'Hunches: {hunches}') #Output: Hunches: ['14 72 52', '22 78 33']
</code></pre>
","0","Answer"
"78213730","78213234","<h1>Define a list</h1>
<p>my_list = [1, 2, 3, 4, 5]</p>
<h1>Iterate over the list using a for loop</h1>
<p>for item in my_list:
print(item)  # This will print each item in the list on a new line</p>
","-1","Answer"
"78213734","78213234","<p>For the core part of your code to run reliably you really need to do some input validation.</p>
<p>I suggest:</p>
<pre><code>while data := input(&quot;Enter at least 3 integers or press &lt;Return&gt; to exit: &quot;):
    try:
        if len(nlist := list(map(int, data.split()))) &lt; 3:
            print(&quot;\aNot enough values&quot;)
        else:
            for a, b, c in zip(nlist, nlist[1:], nlist[2:]):
                if a &lt; b &gt; c:
                    print(&quot;Hunch:&quot;, a, b, c)
                    break
            else:
                print(&quot;No hunch found&quot;)
    except ValueError as e:
        print(f&quot;\a{e}&quot;)
</code></pre>
","0","Answer"
"78216539","78216364","<p>The question needs narrowing down.</p>
<p>I would suggest looking at <a href=""https://stackoverflow.com/questions/tagged/prolog+successor-arithmetics"">Peano arithmetic</a>, which has useful relational properties. As a simple case:</p>
<pre><code>consecutive_peano_list([H|T]) :-
    consecutive_peano_list_(T, H).

consecutive_peano_list_([], _).
consecutive_peano_list_([H|T], P) :-
    H = s(P),
    consecutive_peano_list_(T, H).
</code></pre>
<p>This then creates an elegant list of successors, without caring about the starting point in the first element:</p>
<pre><code>?- consecutive_peano_list(L).
L = [_] ;
L = [_A, s(_A)] ;
L = [_A, s(_A), s(s(_A))] ;
L = [_A, s(_A), s(s(_A)), s(s(s(_A)))] ;
</code></pre>
","0","Answer"
"78217144","78217100","<p>Not surprisingly, to stack arrays you use the stack function:</p>
<pre><code>np.stack([a1, a2, a3, a4, a5])
</code></pre>
<p>Output:</p>
<pre><code>array([[[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[2, 2, 2],
        [2, 2, 2],
        [2, 2, 2]],

       [[3, 3, 3],
        [3, 3, 3],
        [3, 3, 3]],

       [[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]],

       [[5, 5, 5],
        [5, 5, 5],
        [5, 5, 5]]])

</code></pre>
","0","Answer"
"78217206","78217100","<p>Also you can directly list them and convert to array:</p>
<pre><code>np.array([a1,a2, a3, a4, a5])

array([[[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[2, 2, 2],
        [2, 2, 2],
        [2, 2, 2]],

       [[3, 3, 3],
        [3, 3, 3],
        [3, 3, 3]],

       [[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]],

       [[5, 5, 5],
        [5, 5, 5],
        [5, 5, 5]]])
</code></pre>
","1","Answer"
"78222486","78216364","<p>To test equality use <code>=:=/2</code> (predicate <a href=""https://www.swi-prolog.org/pldoc/doc_for?object=(is)/2"" rel=""nofollow noreferrer""><code>is/2</code></a> should be used with <strong>unbound</strong> left operand). Also, always use parentheses around disjunctions (<code>;/2</code>) and put them in evidence. So your code can be fixed as follows:</p>
<pre><code>% nested(+List, -Nested)
 
  nested([], []).
  nested([X], [[X]]).
  nested([X1,X2|Xs], Out) :-
     X1 + 1 =:= X2,
     (   Out = [[X1|Ys]]
     ;   Out = [ X1|Ys ] ),
     nested([X2|Xs], Ys).
</code></pre>
<p>Example:</p>
<pre><code>?- nested([1,2,3], N).
N = [[1, [2, [3]]]] ;
N = [[1, 2, [3]]] ;
N = [1, [2, [3]]] ;
N = [1, 2, [3]] ;
false.
</code></pre>
<p>To avoid unpacking/packing each list element twice, and provides <strong>determinism</strong> on the last answer, change your code as follows:</p>
<pre><code>% nested(+List, -Nested)

  nested([], []).
  nested([X1|Xs], Out) :-     % unpack first element
      nested(Xs, X1, Out).

  nested([], X1, [[X1]]).
  nested([X2|Xs], X1, Out) :- % unpack second element
      X1 + 1 =:= X2,
      (   Out = [[X1|Ys]]
      ;   Out = [ X1|Ys ] ),
      nested(Xs, X2, Ys).     % no need to pack
</code></pre>
<p>Example:</p>
<pre><code>?- nested([1,2,3], N).
N = [[1, [2, [3]]]] ;
N = [[1, 2, [3]]] ;
N = [1, [2, [3]]] ;
N = [1, 2, [3]].
</code></pre>
","1","Answer"
"78217631","78217579","<p>Having variables <code>List1</code>, <code>List2</code>, <code>List3</code> (presumably etc) is definitely a complication. You should have a single array and loop over its indices. Then the rest should be fairly trivial.</p>
<pre><code>floats = [
  [1.0] * 7,
  [2.0] * 7,
  [3.0] * 7,
  [4.0] * 7,
  [17.42] * 7,
  [6.0] * 7,
  [0.1, 12.2, 27.3, 18.4, 496.5, 7.6, 1.7]]

maxidx = []

for i in range(len(floats[0])):
    maxx = floats[0][i]
    maxi = 0
    for x in range(len(floats)):
        f = floats[x][i]
        if f &gt; maxx:
            maxx = f
            maxi = x
    maxidx.append(maxi)
</code></pre>
<p>This extracts the lowest-numbered index in the cases where there is a tie.</p>
<p>(For brevity, this only uses 7 lists of length 7; but it should be obvious that the logic extends to any dimensions.)</p>
<p>Because Python's variables are always references, you can actually build the outer array as a list of references to your existing variables if refactoring your current code seems like an excessive change.</p>
<pre><code>floats = [List1, List2, List3, ...]
</code></pre>
<p>Array indices in Python are zero-based, so index 0 in the result means <code>List1</code>.</p>
","2","Answer"
"78218525","78218345","<p><em>Edit</em>: adjusted answer to make sure that it works with duplicate values in column 'a'.</p>
<hr />
<p>Here's one approach:</p>
<p><strong>Data</strong></p>
<p>N.B. Below changing 'a' from <code>[1., 2., 3.]</code> to <code>[1., 1., 3.]</code> to exemplify the need for an extra temporary column 'idx' for the groupby.</p>
<pre class=""lang-py prettyprint-override""><code>import polars as pl

# changing 'a' from `[1., 2., 3.]` to `[1., 1., 3.]` to exemplify need temp `idx`
df_test = pl.DataFrame({'a': [1., 1., 3.], 
                        'b': [[2,2,2], [3,3,3], [4,4,4]]})
df_test

shape: (3, 2)
┌─────┬───────────┐
│ a   ┆ b         │
│ --- ┆ ---       │
│ f64 ┆ list[i64] │
╞═════╪═══════════╡
│ 1.0 ┆ [2, 2, 2] │
│ 1.0 ┆ [3, 3, 3] │
│ 3.0 ┆ [4, 4, 4] │
└─────┴───────────┘
</code></pre>
<p><strong>Code</strong></p>
<pre class=""lang-py prettyprint-override""><code>df_new = (
    df_test.with_columns(idx=pl.arange(0, pl.len()))
           .explode('b')
           .with_columns(new=(pl.col('a') * pl.col('b')))
           .group_by(['idx', 'a'], maintain_order=True)
           .agg(pl.col(&quot;b&quot;), pl.col(&quot;new&quot;))
           .drop('idx')
)

df_new

shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 1.0 ┆ [3, 3, 3] ┆ [3.0, 3.0, 3.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>First, create a column 'idx' (using <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.with_columns.html"" rel=""nofollow noreferrer""><code>pl.DataFrame.with_columns</code></a>,  <a href=""https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.arange.html"" rel=""nofollow noreferrer""><code>pl.arange</code></a>, and <a href=""https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.len.html"" rel=""nofollow noreferrer""><code>pl.len</code></a>) to keep track of each row. I.e., we use this column to differentiate between rows that have the <em>same</em> value in 'a'.</li>
<li>Now, use <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html"" rel=""nofollow noreferrer""><code>pd.DataFrame.explode</code></a> to get the list values for 'b' into separate rows.</li>
<li>Next, chain <code>pl.DataFrame.with_columns</code> to multiply column 'a' by column 'b', assigning the result to 'new'.</li>
<li>Finally, we want to get back the lists: use <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.group_by.html"" rel=""nofollow noreferrer""><code>pl.DataFrame.group_by</code></a> on columns 'idx' and 'a', adding <code>maintain_order=True</code> to keep the data in the correct order, and apply <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.html"" rel=""nofollow noreferrer""><code>groupby.agg</code></a> on columns 'b' and 'new'.</li>
<li>Clean up by dropping 'idx' (using <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.drop.html"" rel=""nofollow noreferrer""><code>pl.DataFrame.drop</code></a>).</li>
</ul>
","3","Answer"
"78218866","78217579","<p>Put all of your lists into a single list. You can then manage the sublists in terms of &quot;columns&quot; using zip.</p>
<p>Like this:</p>
<pre><code>List1 = [29.561801, 29.564141, 29.566480, 29.293966, 29.291252]
List2 = [26.602566, 22.752335, 22.755249, 22.754278, 22.756220]
List3 = [23.966560, 23.960471, 23.954381, 29.568819, 29.571159]

lists = [List1, List2, List3]

result = [c.index(max(c))+1 for c in zip(*lists)]

print(result)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[1, 1, 1, 3, 3]
</code></pre>
<p><strong>Note:</strong></p>
<p>Python list indexes are zero-based but it appears that the requirement is for 1-based indexing hence the addition</p>
","2","Answer"
"78219169","78218345","<p>With the release of <a href=""https://github.com/pola-rs/polars/releases/tag/py-1.10.0"" rel=""nofollow noreferrer"">Polars version 1.10.0</a> arithmetic of list columns as well as broadcasting of non-list columns is supported.</p>
<pre class=""lang-py prettyprint-override""><code>df_test.with_columns(
    new = pl.col(&quot;a&quot;) * pl.col(&quot;b&quot;)
)
</code></pre>
<pre><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<hr />
<p><strong>Outdated (as of October 2024).</strong></p>
<p>With the release of <a href=""https://github.com/pola-rs/polars/releases/tag/py-1.8.0"" rel=""nofollow noreferrer"">Polars version 1.8.0</a> arithmetic of list columns is directly supported. However, broadcasting is not.</p>
<p>Therefore, to leverage this, we multiply <code>b</code> with a list column created by repeating the elements in <code>a</code> for a suitable number of times.</p>
<pre class=""lang-py prettyprint-override""><code>df_test.with_columns(
    new = pl.col(&quot;a&quot;).repeat_by(pl.col(&quot;b&quot;).list.len()) * pl.col(&quot;b&quot;)
)
</code></pre>
<pre><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<hr />
<p><strong>Outdated (as of September 2024).</strong></p>
<p>Unfortunately, polars <a href=""https://github.com/pola-rs/polars/issues/7210"" rel=""nofollow noreferrer"">doesn't support</a> referencing named columns within <a href=""https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.Expr.list.eval.html"" rel=""nofollow noreferrer""><code>pl.Expr.list.eval</code></a>. Otherwise, that would've been the go-to solution.</p>
<p>I think, the solution by @ouroboros1 is already on the right track by exploding the column, performing the operation, and imploding again. However, it can be simplified quite a bit as follows.</p>
<pre class=""lang-py prettyprint-override""><code>(
    df_test
    .with_columns(
        (
            pl.col(&quot;b&quot;).explode() * pl.col(&quot;a&quot;)
        )
        .implode().over(pl.int_range(pl.len()))
        .alias(&quot;new&quot;)
    )
)
</code></pre>
<pre><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p>Especially, we can avoid explicitly creating and dropping the index column as well as the <code>pl.DataFrame.group_by().agg()</code> construct, which would become more tedious to handle if the DataFrame had more columns.</p>
","8","Answer"
"78219256","78219149","<p>Use <a href=""http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.last.html"" rel=""nofollow noreferrer""><code>GroupBy.last</code></a> with mapping columns with <a href=""http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.shift.html"" rel=""nofollow noreferrer""><code>Series.shift</code></a>, last convert 3 columns DataFrame to numpy array and then to lists:</p>
<pre><code>s = df.groupby('Trend')['Cycle'].last()

df['Arr'] = (df.assign(t1 = df.Trend.map(s.shift(2)),
                      t2 = df.Trend.map(s.shift()))[['t1','t2','Cycle']]
               .to_numpy().tolist())
print (df)
    Trend  Cycle                  Arr
0       1     14     [nan, nan, 14.0]
1       1     88     [nan, nan, 88.0]
2       1     50     [nan, nan, 50.0]
3       1    119    [nan, nan, 119.0]
4       1    107    [nan, nan, 107.0]
5       2     32   [nan, 107.0, 32.0]
6       2    111  [nan, 107.0, 111.0]
7       2     41   [nan, 107.0, 41.0]
8       2     88   [nan, 107.0, 88.0]
9       2     38   [nan, 107.0, 38.0]
10      3     37  [107.0, 38.0, 37.0]
11      3     72  [107.0, 38.0, 72.0]
12      3     79  [107.0, 38.0, 79.0]
13      3     98  [107.0, 38.0, 98.0]
14      3     69  [107.0, 38.0, 69.0]
15      4     62   [38.0, 69.0, 62.0]
16      4     38   [38.0, 69.0, 38.0]
17      4     86   [38.0, 69.0, 86.0]
18      4     26   [38.0, 69.0, 26.0]
19      4     30   [38.0, 69.0, 30.0]
20      5     52   [69.0, 30.0, 52.0]
21      5     91   [69.0, 30.0, 91.0]
22      5    122  [69.0, 30.0, 122.0]
23      5     90   [69.0, 30.0, 90.0]
24      5    127  [69.0, 30.0, 127.0]
</code></pre>
","3","Answer"
"78219274","78219149","<p>You could use incremental <a href=""https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html"" rel=""nofollow noreferrer""><code>groupby.shift</code></a> operations:</p>
<pre><code># number of columns in the output array
N = 3

# initial value
out = [df['Cycle']]
# only keep last value per group
m = df['Trend'].duplicated(keep='last')

# ffill and add as new column
for _ in range(N-1):
    out.append(out[-1].mask(m).shift().groupby(df['Trend']).ffill())

df['ArrayToBeMade'] = np.vstack(out[::-1]).T.tolist()
</code></pre>
<p>Output:</p>
<pre><code>    Trend  Cycle        ArrayToBeMade
0       1     14     [nan, nan, 14.0]
1       1     88     [nan, nan, 88.0]
2       1     50     [nan, nan, 50.0]
3       1    119    [nan, nan, 119.0]
4       1    107    [nan, nan, 107.0]
5       2     32   [nan, 107.0, 32.0]
6       2    111  [nan, 107.0, 111.0]
7       2     41   [nan, 107.0, 41.0]
8       2     88   [nan, 107.0, 88.0]
9       2     38   [nan, 107.0, 38.0]
10      3     37  [107.0, 38.0, 37.0]
11      3     72  [107.0, 38.0, 72.0]
12      3     79  [107.0, 38.0, 79.0]
13      3     98  [107.0, 38.0, 98.0]
14      3     69  [107.0, 38.0, 69.0]
15      4     62   [38.0, 69.0, 62.0]
16      4     38   [38.0, 69.0, 38.0]
17      4     86   [38.0, 69.0, 86.0]
18      4     26   [38.0, 69.0, 26.0]
19      4     30   [38.0, 69.0, 30.0]
20      5     52   [69.0, 30.0, 52.0]
21      5     91   [69.0, 30.0, 91.0]
22      5    122  [69.0, 30.0, 122.0]
23      5     90   [69.0, 30.0, 90.0]
24      5    127  [69.0, 30.0, 127.0]
</code></pre>
","2","Answer"
"78220155","78220063","<p>If I understand your question correctly, each list while having different unique values, would return the same <code>unique_indices</code> and <code>unique_counts</code> when running <code>np.unique</code> on each list. We can leverage this by only running <code>np.unique</code> on one list with <code>return_counts</code> and <code>return_index</code> set to <code>True</code>, and then use its output.</p>
<pre><code>uni, ind, cts = np.unique(l1, return_counts = True, return_index = True)
no_repeat_l1 = np.array(l1)[ind[cts == 1]]
no_repeat_l2 = np.array(l2)[ind[cts == 1]]
no_repeat_l3 = np.array(l3)[ind[cts == 1]]
</code></pre>
","1","Answer"
"78220927","78220063","<p>IIUC, you can do:</p>
<pre class=""lang-py prettyprint-override""><code>l1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;a&quot;, &quot;j&quot;, &quot;a&quot;]
l2 = [&quot;b&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;b&quot;, &quot;j&quot;, &quot;b&quot;]
l3 = [&quot;c&quot;, &quot;a&quot;, &quot;a&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;c&quot;, &quot;j&quot;, &quot;c&quot;]

out, found = [], False
for t in zip(l1, l2, l3):
    if t == (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;):
        if found is False:
            out.append(t)
            found = True
    else:
        out.append(t)

l1, l2, l3 = map(list, zip(*out))
print(f&quot;{l1=}\n{l2=}\n{l3=}&quot;)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>l1=['a', 'b', 'c', 'd', 'e', 'f', 'j']
l2=['b', 'a', 'b', 'd', 'e', 'f', 'j']
l3=['c', 'a', 'a', 'd', 'e', 'f', 'j']
</code></pre>
","0","Answer"
"78227143","78227058","<p>The <a href=""https://ramdajs.com/docs/#mapAccum"" rel=""nofollow noreferrer""><code>mapAccum</code></a> function should allow you to map the items, while storing the <code>index</code> for the next item:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const { range, mapAccum } = R

const transformListItem = (char, offset, dictionary) =&gt;
  range(0, dictionary.get(char)).map(i =&gt; ({
    'index': i + offset,
    'payload': `${char}${i}`
  }))
  
const transformList = (list, dictionary) =&gt;
  mapAccum(
    (index, char) =&gt; [
      index + dictionary.get(char),
      transformListItem(char, index, dictionary)
    ],
    0, 
    list
  )[1]

const myDictionary = new Map([['a', 4], ['b', 0], ['c', 3]])
const myList = ['a', 'b', 'c']

const result = transformList(myList, myDictionary)

console.log(result)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/ramda/0.29.1/ramda.min.js"" integrity=""sha512-PVSAmDFNqey8GMII8s9rjjkCFvUgzfsfi8FCRxQa3TkPZfdjCIUM+6eAcHIFrLfW5CTFAwAYS4pzl7FFC/KE7Q=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
","1","Answer"
"78228238","78228212","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code># apply ast.literal_eval if necessary:
from ast import literal_eval

df[&quot;Prices&quot;] = df[&quot;Prices&quot;].apply(literal_eval)

df = df.explode(&quot;Prices&quot;)
df[[&quot;date&quot;, &quot;price&quot;]] = df.pop(&quot;Prices&quot;).str.split(&quot;:&quot;, n=1, regex=False).to_list()

print(df)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>   Id   date price
0   1  March    59
0   1  April    64
0   1    May    62
1   2    Jan    55
</code></pre>
","2","Answer"
"78228266","78228212","<p>If you have valid lists, <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.explode.html"" rel=""nofollow noreferrer""><code>explode</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.str.split.html"" rel=""nofollow noreferrer""><code>split</code></a>:</p>
<pre><code>df = pd.DataFrame({'Id': ['001', '002'],
                   'Prices':   [[&quot;March:59&quot;, &quot;April:64&quot;, &quot;May:62&quot;], [&quot;Jan:55&quot;]]})

out = df.explode('Prices')
out[['date', 'price']] = out.pop('Prices').str.split(':', expand=True)
</code></pre>
<p>If you have strings, <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.str.extractall.html"" rel=""nofollow noreferrer""><code>str.extractall</code></a> with a regex and <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html"" rel=""nofollow noreferrer""><code>join</code></a>:</p>
<pre><code>df = pd.DataFrame({'Id': ['001', '002'],
                   'Prices':   ['[&quot;March:59&quot;, &quot;April:64&quot;, &quot;May:62&quot;]', '[&quot;Jan:55&quot;]']})

out = (df.drop(columns='Prices') 
          .join(df['Prices'].str.extractall(r'(?P&lt;date&gt;[^&quot;:]+):(?P&lt;price&gt;[^&quot;:]+)')
                .droplevel('match'))
       )
</code></pre>
<p>Output:</p>
<pre><code>    Id   date price
0  001  March    59
0  001  April    64
0  001    May    62
1  002    Jan    55
</code></pre>
<p><a href=""https://regex101.com/r/PrkODm/1"" rel=""nofollow noreferrer"">regex demo</a> for the second approach.</p>
","3","Answer"
"78229485","78229316","<p>I think one way you can optimize the algorithm is to sort the personality value list while keeping its original indices by storing the each item in the list in the tuple structure of <code>(&lt;p value&gt;, &lt;original index&gt;)</code></p>
<pre><code>sp = sorted([(p[i], i) for i in range(len(p))])
</code></pre>
<p>For each item with index <code>i</code> in the sorted list, you know that largest difference with its value is either in the left side or the right side of that item in the sorted list. You can use two pointers <code>l</code>, <code>r</code> representing the index of the left and right side of the item in the sorted list respectively and compare its difference with the item's value (<code>abs(value - sp[l][0]) &gt;= abs(sp[i][0] - sp[r][0])</code>). Initially, <code>l</code> and <code>r</code> are initialized with <code>0</code> and <code>n-1</code> respectively, represent the far left and far right end of the item <code>i</code> in the sorted list. If left side has larger difference than the right side, you know the left side has the largest difference so you increase <code>l</code> index by 1, closer to the item's index, to find the second largest difference. If right side has larger difference than the left side, you know the right side has the largest difference so you decrease <code>r</code> index by 1, closer to the  to find the second largest difference. You can keep doing this 3 times to get the third largest difference and apply the result to the array at the given original index. One thing to note, is that <code>l</code> boundary can only be <code>[0, i - 1]</code> and <code>r</code> boundary can only be <code>[i + 1, n - 1]</code> so that if <code>l</code> or <code>r</code> hit their boundary first, only the other pointer has the right result and can be continuously increase/decrease until it reaches 3 total iteration</p>
<p>The total time complexity would be <code>O(nlog(n) + n)</code> which is more efficient than <code>O(n^2)</code></p>
<pre><code>def third_enjoyment(p: list[int]) -&gt; list[int]:
    n: int = len(p)
    e: list[int] = [-1] * n
    
    # sorted data structure of p in the format (&lt;value&gt;, &lt;original index&gt;)
    # O(nlog(n))
    sp = sorted([(p[i], i) for i in range(len(p))])

    # O(n)
    for i in range(len(sp)):
        value, original_index = sp[i]

        # left, right pointer from sorted list
        l, r = 0, n - 1

        for itt in range(3):
            if l &lt; i:
                # left pointer still within bound
                abs_l = abs(value - sp[l][0])

                if r &gt; i:
                    # right pointer still within bound
                    abs_r = abs(value - sp[r][0])
                    if abs_l &gt;= abs_r:
                        e[original_index] = abs_l
                        l += 1
                    else:
                        e[original_index] = abs_r
                        r -= 1
                else:
                    # right pointer out of bound
                    e[original_index] = abs_l
                    l += 1
            elif r &gt; i:
                # left pointer out of bound, right pointer within bound
                e[original_index] = abs(value - sp[r][0])
                r -= 1
            else:
                # both left and right pointers out bound
                break
    return e

p = [2, 3, 4, 6]
print(third_enjoyment(p))
</code></pre>
","0","Answer"
"78229541","78229316","<p>For this specific problem, finding a solution with significantly lower complexity than <code>O(n^2)</code> is challenging due to the need to compute the enjoyment between each pair of individuals to determine the third largest unique value. The requirement to consider all pairwise comparisons inherently implies a quadratic complexity because each individual's enjoyment must be compared with every other individual's enjoyment.</p>
<p>You can simplify the code as follows.</p>
<pre><code>def third_enjoyment_optimized(personalities: list[int]) -&gt; list[int]:
n = len(personalities)
result = []

for i in range(n):
    # Compute a sorted list of unique absolute differences for the current person with everyone else
    unique_diffs = sorted({abs(personalities[i] - personalities[j]) for j in range(n) if i != j})

    # If there are fewer than three unique enjoyments, use the smallest; otherwise, use the third smallest
    third_largest_unique = unique_diffs[2] if len(unique_diffs) &gt;= 3 else unique_diffs[-1]
    result.append(third_largest_unique)

return result

personalities = [2, 3, 4, 6]
print(third_enjoyment_optimized(personalities))
</code></pre>
<p>The output is <code>[4, 3, 2, 4]</code></p>
","-2","Answer"
"78231774","78229316","<p>Here's an O(n) solution.</p>
<p>Call the input array A.</p>
<p>Use quickselect to find the three largest &amp; three smallest elements of A in linear time, and call this array A'. If |A| &lt; 6, then set A' = A.</p>
<p>Sort A' in O(1) (because it's size doesn't grow with the input, A).</p>
<p>For each element in A, the 3rd best match will be one of the 6  people in A'. Find which by comparing the element (say 'x') with the endpoints of A', moving in by one from the direction with the best score twice. We're doing constant work per member of A, so this step is O(n).</p>
<p>Example:</p>
<pre><code>A = [19, 62, 26, 51, 31, 74, 25, 32, 24, 44]
A' sorted = [19, 24, 25, 51, 62, 74]

Parse A. 
</code></pre>
<p>A[0] = 19. Score vs A' endpoints is 19-19=0 &amp; 74-19=55, so we move in one from the right &amp; repeat: 19-19=0 &amp; 62-19=43, so we move in one from the right &amp; repeat, this time taking the better result as our answer: 19-19=0 &amp; 51-19=32, so 51 gets us a score of 32.</p>
<pre><code>A[1] = 62. [19, 74] yields [43, 12]
           [24, 74] yields [38, 12]
           [25, 74] yields [37, 12]; pick 25 for a score of 37.

A[2] = 26. [19, 74] yields [7, 48]
           [19, 62] yields [7, 36]
           [25, 51] yields [7, 25]; pick 51 for a score of 12.

A[3] = 51. [19, 74] yields [32, 24]
           [24, 74] yields [27, 24]
           [25, 74] yields [26, 24]; pick 25 for a score of 26.
</code></pre>
<p>...and so on</p>
","1","Answer"
"78241031","78241016","<p>Try out python's build-in <a href=""https://www.w3schools.com/python/ref_func_zip.asp"" rel=""nofollow noreferrer"">zip</a> method, it joins together the same indexes of an iterable, then u could just do this:</p>
<pre><code>def lock_and_key(key_cuts, lock_pinning, minimum):
    for value_of_key, value_of_lock in zip(key_cuts, lock_pinning)
        sum = abs(value_of_key + value_of_lock -6)
        if sum &gt; minimum:
            return False
    return True
</code></pre>
","4","Answer"
"78241032","78241016","<p>If I got it correctly, you want to compare the same index of the each least with each other. For this purpose, you can zip the two arrays together ( if they are same size ) and do the check:</p>
<pre><code>def lock_and_key(key_cuts, lock_pinning, minimum):
    for v1, v2 in zip(key_cuts, lock_pinning):
        sum = abs(v1 + v2 - 6)
        if sum &gt; minimum:
            return False
    return True

if lock_and_key([2.1, 3.5, 2.7], [4.1, 2.5, 3.2], 0.25):
    print('Unlocked.')
else:
    print('Still locked.')
</code></pre>
","3","Answer"
"78244075","78244046","<p>In this line:</p>
<pre><code>int count = vehicles.Count(x =&gt; x == car);
</code></pre>
<p>It is not clear what <code>car</code> is.
If is it a specific object of type <code>Car</code> you will get the number of elements that are equal to that object.</p>
<p>But anyway if you want to count all elements which are instances of <strong>type</strong> <code>Car</code>s you need:</p>
<pre><code>//------------------------------vvvvvvvv--
int count = vehicles.Count(x =&gt; x is Car);
</code></pre>
<p>Note the usage of the <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator"" rel=""noreferrer""><strong>is operator</strong></a> to check if an object is of a specific type.</p>
","5","Answer"
"78244134","78244046","<p>Assuming all your Car,Boat,Mc objects implement <code>IVehicle</code>:</p>
<p>You can achieve this by using <code>OfType&lt;T&gt;</code> method which is LINQ extension method.</p>
<pre><code>int count = vehicles.OfType&lt;Car&gt;().Count();
</code></pre>
<p><code>OfType&lt;T&gt;</code> method as stated by Microsoft document:</p>
<blockquote>
<p>Filters the elements of an IEnumerable based on a specified type.</p>
</blockquote>
","10","Answer"
"78244311","78244243","<p>We could add a temporary column <code>&quot;.rm&quot;</code> (for remove), created from unlisting the <code>&quot;id&quot;</code> column and scanning it for <code>rev</code> <code>duplicated</code>. This gives a vector that can be <code>split</code>ted along <code>rep</code>eated consecutive integers each <code>nrow</code> times for each sub-list and added to the sub-lists using <code>`[&lt;-`()</code>. Finally we <code>subset</code> for not <code>TRUE</code>s in <code>&quot;.rm&quot;</code> and remove that temporary column.</p>
<pre><code>&gt; fn &lt;- \(x, idcol) {
+   Map(`[&lt;-`, x, '.rm', value=
+         lapply(x, `[[`, idcol) |&gt; 
+         unlist() |&gt; 
+         rev() |&gt; 
+         duplicated() |&gt; 
+         rev() |&gt; 
+         split(
+           sapply(x, nrow) |&gt; {
+             \(.) mapply(rep.int, seq_along(.), .) |&gt; unlist()
+           }()
+         )
+   ) |&gt; 
+     lapply(subset, !.rm, select=-.rm)
+ }
&gt; fn(my_list, '_uuid')
[[1]]
  _uuid     country
4 iiopz Switzerland

[[2]]
  _uuid country
1 xxxyz     USA
2 ppuip  Canada
3 zzuio  Canada
</code></pre>
<hr />
<p><em>Data:</em></p>
<pre><code>&gt; dput(my_list)
list(structure(list(`_uuid` = c(&quot;xxxyz&quot;, &quot;xxxyz&quot;, &quot;zzuio&quot;, &quot;iiopz&quot;
), country = c(&quot;USA&quot;, &quot;USA&quot;, &quot;Canada&quot;, &quot;Switzerland&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-4L)), structure(list(`_uuid` = c(&quot;xxxyz&quot;, &quot;ppuip&quot;, &quot;zzuio&quot;), 
    country = c(&quot;USA&quot;, &quot;Canada&quot;, &quot;Canada&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-3L)))
</code></pre>
","1","Answer"
"78244461","78244402","<p>Convert your inputs to vectors and then you can do this:</p>
<pre><code>## direct replacement
data[data %in% data_to_replace] = replacement[match(data, data_to_replace)]

## or with `ifelse` if you want to save it as a new name 
## and keep `data` unmodified
ifelse(data %in% data_to_replace, replacement[match(data, data_to_replace)], data)
</code></pre>
","4","Answer"
"78244475","78244402","<p>This already existys in <code>stringi::stri_replace_all_fixed</code>.</p>
<pre><code>&gt; data[] &lt;- stringi::stri_replace_all_fixed(data, data_to_replace, 
+                                           replacement, 
+                                           vectorize_all=FALSE)
&gt; data
[[1]]
[1] &quot;B-A&quot;

[[2]]
[1] &quot;D-C&quot;

[[3]]
[1] &quot;E-F&quot;

[[4]]
[1] &quot;G-H&quot;

[[5]]
[1] &quot;I-J&quot;
</code></pre>
<p>Note, there's also a <code>stringi::stri_replace_all_regex</code>.</p>
<p>Maybe the <code>reverse_words()</code> function can be simplified.</p>
<pre><code>&gt; reverse_words2 &lt;- \(x) paste(rev(el(strsplit(x, '-'))), collapse='-')
&gt; (replacement &lt;- lapply(data_to_replace, reverse_words2))
[[1]]
[1] &quot;B-A&quot;

[[2]]
[1] &quot;D-C&quot;
</code></pre>
","3","Answer"
"78244518","78244243","<p>Here's a shot, starting with a reduction and then <code>Map</code>-applying it to the original list of frames.</p>
<pre class=""lang-r prettyprint-override""><code>previous_ids &lt;- rev(Reduce(
  function(prev, this) unique(c(prev, this$id)),
  rev(my_list), init = character(0), accumulate = TRUE))[-1]
previous_ids
# [[1]]
# [1] &quot;xxxyz&quot; &quot;ppuip&quot; &quot;zzuio&quot;
# [[2]]
# character(0)
</code></pre>
<p>This gives us the ids from frames further in <code>my_list</code> that we need to remove &quot;here&quot;. We interpret this to mean that for the last frame, we have no IDs we need to remove from other frames; in the first frame, we have 3 ids that are seen later in the list, so they need to be removed from &quot;this&quot; (first) frame. (Side note: perhaps the name <code>previous_ids</code> is a misnomer ...)</p>
<p>With this, we can do simply:</p>
<pre class=""lang-r prettyprint-override""><code>Map(my_list, previous_ids,
    f = function(dat, rmid) {
      dat[!duplicated(dat$id, fromLast = TRUE) &amp; !dat$id %in% rmid,]
    })
# [[1]]
# [1] id      country
# &lt;0 rows&gt; (or 0-length row.names)
# [[2]]
#      id country
# 1 xxxyz     USA
# 2 ppuip  Canada
# 3 zzuio  Canada
</code></pre>
<p>Using your updated data, this still works. The only thing is since your ID field is non-standard (starting with a <code>_</code>, R does not like that), we need to either use backticks <code>dat$`_uuid`</code> or use <code>[[</code> <code>dat[[&quot;_uuid&quot;]]</code>.</p>
<pre class=""lang-r prettyprint-override""><code>
previous_ids &lt;- rev(Reduce(
  function(prev, this) unique(c(prev, this[[&quot;_uuid&quot;]])),
  rev(my_list), init = character(0), accumulate = TRUE))[-1]
previous_ids

Map(my_list, previous_ids,
    f = function(dat, rmid) {
      dat[!duplicated(dat[[&quot;_uuid&quot;]], fromLast = TRUE) &amp; !dat[[&quot;_uuid&quot;]] %in% rmid,]
    })
# [[1]]
#   _uuid     country
# 4 iiopz Switzerland
# [[2]]
#   _uuid country
# 1 xxxyz     USA
# 2 ppuip  Canada
# 3 zzuio  Canada
</code></pre>
","1","Answer"
"78245799","78245788","<p>change the
new_start_index to whatever you want and just do another for loop.</p>
<pre><code>MyList = [&quot;test&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;test4&quot;, &quot;test5&quot;, &quot;test6&quot;, &quot;test7&quot;]

for item in MyList:
    print(item)
    if item == &quot;test7&quot;:
        new_start_index = 3
        # Continue the loop from the new_start_index
        for new_item in MyList[new_start_index:]:
            print(new_item)
</code></pre>
","-2","Answer"
"78245901","78245788","<p>try this...i don't know if its what you want.</p>
<pre><code>MyList = [&quot;test&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;test4&quot;, &quot;test5&quot;, &quot;test6&quot;, &quot;test7&quot;] starting_index = 2 

for i, item in enumerate(MyList):
    print(item)
    if item == &quot;test7&quot;:
        for j in range(starting_index, len(MyList)):
           
            print(&quot;Processing:&quot;, MyList[j])
        break

</code></pre>
","-2","Answer"
"78246254","78244402","<p>In base R, you can simply use <code>replace</code> + <code>match</code></p>
<pre><code>&gt; replace(data, match(data_to_replace, data), replacement)
[[1]]
[1] &quot;B-A&quot;

[[2]]
[1] &quot;D-C&quot;

[[3]]
[1] &quot;E-F&quot;

[[4]]
[1] &quot;G-H&quot;

[[5]]
[1] &quot;I-J&quot;
</code></pre>
","0","Answer"
"78246383","78246316","<pre><code>let varL1 = ['a'; 'b'; '&amp;'; 'c']

let rec ConvertToString list =
    match list with
    | head :: tail -&gt; string head :: ConvertToString tail
    | [] -&gt; []

let varL2 = ConvertToString varL1
</code></pre>
<p>Try this.</p>
","1","Answer"
"78250246","78246316","<p>When you want to transform a list of <code>'a</code> into a list of <code>'b</code>, the <code>List.map</code> function is the most straight forward:</p>
<pre class=""lang-ml prettyprint-override""><code>let listOfChars = ['a';'b';'&amp;';'c']
let listOfStrings = 
  listOfChars 
  |&gt; List.map string
</code></pre>
<p>The <code>List.map</code> function expects a function from <code>'a</code> to <code>'b</code> (<code>'a -&gt; 'b</code>), and a list of <code>'a</code>, and returns list of <code>'b</code>: full signature being <code>('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>.</p>
<p>In the code above, I pass the <code>string</code> function, which converts the input (a char in this particular case) to a string.</p>
<p><a href=""https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#map"" rel=""nofollow noreferrer"">https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#map</a>
<a href=""https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-operators.html#string"" rel=""nofollow noreferrer"">https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-operators.html#string</a></p>
","1","Answer"
"78251783","78251695","<p>I would increase range and use additional value as exception:</p>
<pre class=""lang-cs prettyprint-override""><code>var index = Random.Next(2, 11);
if (index == 10)
    index = 15;
</code></pre>
","3","Answer"
"78251806","78251767","<p>You should sort the list of integers in descending order and then iterate through it, adding each number to the list with the smaller current sum, like the following:</p>
<pre class=""lang-py prettyprint-override""><code>import random

intList = []
for i in range(10):
    intList.append(random.randint(10, 200))

listX = []
listY = []

intList.sort(reverse=True)

sumX = 0
sumY = 0

for num in intList:
    if sumX &lt;= sumY:
        listX.append(num)
        sumX += num
    else:
        listY.append(num)
        sumY += num

print(f&quot;listx = {listX} \nlisty = {listY}\n sum x = {sumX}, y = {sumY}&quot;)
</code></pre>
<h2>Edit</h2>
<p>To ensure that both lists have exactly 5 elements and maintain balanced lengths, you can modify the algorithm to distribute the numbers based on the lengths of the lists. If one list has fewer than 5 elements, prioritize it adding numbers to that list until it reaches 5 elements.</p>
<p>Try this:</p>
<pre class=""lang-py prettyprint-override""><code>import random

intList = []
listX = []
listY = []

for i in range(10):
    num = random.randint(0, 5)
    intList.append(num)

intList.sort(reverse=True)

sumX = 0
sumY = 0

for num in intList:
    if len(listX) &lt; 5:
        listX.append(num)
        sumX += num
    elif len(listY) &lt; 5:
        listY.append(num)
        sumY += num
    elif sumX &lt;= sumY:
        listX.append(num)
        sumX += num
    else:
        listY.append(num)
        sumY += num

print(f&quot;listx = {listX} \nlisty = {listY}\n sum x = {sumX}, y = {sumY}&quot;)
</code></pre>
","2","Answer"
"78251842","78251828","<p>As you can read in the <a href=""https://docs.python.org/3/library/stdtypes.html#list.sort"" rel=""nofollow noreferrer"">documentation of <code>list.sort</code></a></p>
<blockquote>
<p>This method modifies the sequence in place for economy of space when sorting a large sequence. <strong>To remind users that it operates by side effect, it does not return the sorted sequence</strong> (use sorted() to explicitly request a new sorted list instance).</p>
</blockquote>
<p>(bold text by me)</p>
","2","Answer"
"78251846","78251828","<p><code>list.sort()</code> does not return any value. <code>print(list.sort())</code> prints <code>None</code> because that is the value that represents no value.</p>
","1","Answer"
"78251890","78251767","<p>One counter example to your solution is:</p>
<pre><code>[8, 7, 5, 4, 4, 1]
</code></pre>
<p>Adding as you have done would give the subsets:</p>
<pre><code>[8, 4, 4], [7, 5, 1]: difference of sums = 3
</code></pre>
<p>while the optimal solution is:</p>
<pre><code>[8, 5, 4], [7, 4, 1]: difference of sums = 1
</code></pre>
<p>Thus, to solve this problem, you need to brute force generate all combinations of (n choose floor(n/2)) and find the one with the smallest difference. Here is a sample code:</p>
<pre class=""lang-py prettyprint-override""><code>comb = []
def getcomb(l, ind, k):
    if len(comb) == k:
        return [comb[:]]
    if ind == len(l):
        return []
    ret = getcomb(l, ind+1, k)
    comb.append(l[ind])
    ret += getcomb(l, ind+1, k)
    comb.pop()
    return ret

def get_best_split(l):
    lsm = sum(l)
    best = lsm
    a = []
    for i in getcomb(l, 0, len(l)//2):
        sm = sum(i)
        if abs(sm - (lsm - sm)) &lt; best:
            best = abs(sm - (lsm - sm))
            a = i

    b = [x for x in l if x not in a]
    return best, a, b

print(get_best_split([8, 7, 5, 4, 4, 1])) 
# outputs (1, [7, 4, 4], [8, 5, 1])
</code></pre>
<p><strong>EDIT:</strong></p>
<p>If you don't care about the subsets themselves, then you can just generate all possible sums:</p>
<pre class=""lang-py prettyprint-override""><code>def getcomb(l, ind, k, val):
    if k == 0:
        return [val]
    if ind == len(l):
        return []
    return getcomb(l, ind+1, k, val) + getcomb(l, ind+1, k-1, val + l[ind]) 

def get_best_split(l):
    l = sorted(l, reverse=True)
    best = 1000000
    for i in getcomb(l, 0, len(l)//2, 0):
        best = min(best, abs(i - (sum(l) - i)))
    return best
</code></pre>
<p><strong>EDIT 2:</strong>
Another interesting thing to try out might be a modified knapsack solution, where you keep track of the set of the number of elements that can make each value. The complexity would be N^2 * sum(L), which is arguably better than N choose (N/2) depending on how large the average element in your list is:</p>
<pre class=""lang-py prettyprint-override""><code>def get_best_split_knapsack(l):
    sm = sum(l)
    dp = [[-1, set()] for _ in range(sm+1)]
    dp[0][0] = 1
    dp[0][1].add(0)

    best = sm 

    for i in l:
        for j in range(sm//2, i-1, -1):
            if dp[j-i][0] == 1:
                dp[j][0] = 1
                dp[j][1].update(k+1 for k in dp[j-i][1])
        
        for j in range(max(0,int(sm//2-best)), min(int(sm//2+best)+1, sm)):
            if dp[j][0] == 1 and len(l)//2 in dp[j][1]:
                best = min(best, abs(sm/2 - j))
        
    return int(2*best)
</code></pre>
","0","Answer"
"78252160","78251695","<p>I would go for a <strong>lookup array</strong> instead of programming edge-cases.</p>
<p>The reason for this is that when there are edge cases in data handling, you have to see if you can also solve it dynamically. So don't program it in the code. This makes your code less readable and less maintainable. Should (multiple) edge-cases be necessary in the future, you could also save the lookup array as data somewhere <em>(a data-file)</em> and adjust it without having to change the program. <em>(so no recompile is needed)</em></p>
<p>So, create a lookup array which contains the <strong>valid</strong> indices. This way you can easily do a normal random on a consecutive array. The selected value is the index you should use on the original array.</p>
<p>Here is an example how I would do it:</p>
<pre><code>public class Program
{
    private static Random _rnd = new Random();

    public static void Main()
    {
        // Some example array containing all the values.
        var myArray = &quot;abcdefghijklmnop&quot;.ToArray();

        // The lookup array containing the indices which are valid.
        var rndLookup = new[] { 2, 3, 4, 5, 6, 7, 8, 15 };

        // Choose a random index of the lookup-array and use
        // the length as maximum.
        var rndIndex = _rnd.Next(rndLookup.Length);

        // Select the value from the original array, via the lookup-array.
        // It would be wise to check if there is no index out of bounds
        // On the original array.
        Console.WriteLine(&quot;The random value is: &quot; + myArray[ rndLookup[rndIndex] ]);
    }
}
</code></pre>
","1","Answer"
"78252381","78252315","<p>You could try:</p>
<pre><code>lapply(
   my_list,
   \(x) if ('col3' %in% names(x)) transform(x, col3 = replace(col3, is.na(col3) &amp; col1 %in% c('v2', 'v3'), 'VAL')) else x
)
</code></pre>
<p>Output:</p>
<pre><code>[[1]]
  col1  col2 col3   col4
1   v1  wood  cup   &lt;NA&gt;
2   v2  &lt;NA&gt;  VAL   pear
3   v3 water fork banana
4   V2  &lt;NA&gt;  VAL   &lt;NA&gt;
5   V1 water &lt;NA&gt;  apple

[[2]]
  col1 col2 col4
1   v1 wood &lt;NA&gt;
2   v2 &lt;NA&gt; pear

[[3]]
  col1 col3   col4
1   v1  cup   &lt;NA&gt;
2   v2  VAL   pear
3   v3  VAL banana
4   V3  VAL   &lt;NA&gt;
</code></pre>
","2","Answer"
"78252521","78252315","<p>In such cases <code>for</code> loops can be much faster.</p>
<pre><code>&gt; for (s in seq_along(my_list)) {
+   x &lt;- my_list[[s]]
+   if ('col3' %in% names(x)) {
+     x$col3[is.na(x$col3) &amp; x$col1 %in% c('v2', 'v3')] &lt;- 'VAL'
+     my_list[[s]] &lt;- x
+   }
+ }
&gt; my_list
[[1]]
  col1  col2 col3   col4
1   v1  wood  cup   &lt;NA&gt;
2   v2  &lt;NA&gt;  VAL   pear
3   v3 water fork banana
4   v2  &lt;NA&gt;  VAL   &lt;NA&gt;
5   v1 water &lt;NA&gt;  apple

[[2]]
  col1 col2 col4
1   v1 wood &lt;NA&gt;
2   v2 &lt;NA&gt; pear

[[3]]
  col1 col3   col4
1   v1  cup   &lt;NA&gt;
2   v2  VAL   pear
3   v3  VAL banana
4   v3  VAL   &lt;NA&gt;
</code></pre>
<h2>Benchmark</h2>
<p>Runs 80% faster, which is quite significant. Demonstrated on a list with just 1,000 elements.</p>
<pre><code>$ Rscript --vanilla foo.R
Unit: milliseconds
   expr       min        lq      mean    median        uq       max neval cld
  floop  18.84617  19.95898  22.17803  22.08178  24.21662  27.02679   100  a 
 lapply 100.05645 106.24458 111.66269 111.17931 116.06089 150.08886   100   b
</code></pre>
<p><em>Benchmark code</em></p>
<pre><code>set.seed(42)
big_list &lt;- my_list[sample(1:3, 1e3, replace=TRUE)]

microbenchmark::microbenchmark(
  floop={
    for (s in seq_along(big_list)) {
      x &lt;- big_list[[s]]
      if ('col3' %in% names(x)) {
        x$col3[is.na(x$col3) &amp; x$col1 %in% c('v2', 'v3')] &lt;- 'VAL'
        big_list[[s]] &lt;- x
      }
    }
    big_list
  },
  lapply=lapply(
    big_list,
    \(x) if ('col3' %in% names(x)) {
      transform(x, col3=replace(col3, 
                                is.na(col3) &amp; col1 %in% c('v2', 'v3'), 
                                'VAL'))
    } else {
      x
    }),
  check='identical')
</code></pre>
<h2>Edit</h2>
<p>Add a <code>&quot;col3&quot;</code> that is filled with <code>&quot;VAL&quot;</code> if none exists yet:</p>
<pre><code>&gt; for (s in seq_along(my_list)) {
+   x &lt;- my_list[[s]]
+   if ('col3' %in% names(x)) {
+     x$col3[is.na(x$col3) &amp; x$col1 %in% c('v2', 'v3')] &lt;- 'VAL'
+   } else {
+     x$col3 &lt;- 'VAL'
+   }
+   my_list[[s]] &lt;- x
+ }
&gt; my_list
[[1]]
  col1  col2 col3   col4
1   v1  wood  cup   &lt;NA&gt;
2   v2  &lt;NA&gt;  VAL   pear
3   v3 water fork banana
4   v2  &lt;NA&gt;  VAL   &lt;NA&gt;
5   v1 water &lt;NA&gt;  apple

[[2]]
  col1 col2 col4 col3
1   v1 wood &lt;NA&gt;  VAL
2   v2 &lt;NA&gt; pear  VAL

[[3]]
  col1 col3   col4
1   v1  cup   &lt;NA&gt;
2   v2  VAL   pear
3   v3  VAL banana
4   v3  VAL   &lt;NA&gt;
</code></pre>
<hr />
<p><em>Data:</em></p>
<pre><code>&gt; dput(my_list)
list(structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;v2&quot;, &quot;v1&quot;), col2 = c(&quot;wood&quot;, 
NA, &quot;water&quot;, NA, &quot;water&quot;), col3 = c(&quot;cup&quot;, NA, &quot;fork&quot;, NA, NA
), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA, &quot;apple&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-5L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;), col2 = c(&quot;wood&quot;, 
NA), col4 = c(NA, &quot;pear&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, 
-2L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;v3&quot;), col3 = c(&quot;cup&quot;, 
NA, NA, NA), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA)), class = &quot;data.frame&quot;, row.names = c(NA, 
-4L)))
</code></pre>
","1","Answer"
"78252945","78252315","<p>Another slight variation for benchmark, though the change is not that radical.</p>
<pre class=""lang-r prettyprint-override""><code>df_update &lt;- function(df) {
  if(&quot;col3&quot; %in% names(df)){
    df$col3[is.na(df$col3) &amp; (df$col1 %in% c(&quot;v2&quot;, &quot;v3&quot;))] &lt;- &quot;VAL&quot;
  } 
  df
}
lapply(my_list, df_update)

# microbenchmark::microbenchmark() :
#&gt; Unit: milliseconds
#&gt;           expr     min       lq       mean    median       uq      max neval
#&gt;  lapply_subset  7.9087  8.46455   9.880332   8.72160   9.6610  24.2403   100
#&gt;          floop 12.8077 13.43235  15.302831  13.80615  14.6502  35.7991   100
#&gt;         lapply 91.1871 95.82220 101.641103 100.16710 104.2413 156.0194   100

</code></pre>
<pre class=""lang-r prettyprint-override""><code>my_list &lt;- list(structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;V2&quot;, &quot;V1&quot;), col2 = c(&quot;wood&quot;, NA, &quot;water&quot;, NA, &quot;water&quot;), col3 = c(&quot;cup&quot;, NA, &quot;fork&quot;, NA, NA), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA, &quot;apple&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -5L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;), col2 = c(&quot;wood&quot;, NA), col4 = c(NA, &quot;pear&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -2L)), structure(list(col1 = c(&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;V3&quot;), col3 = c(&quot;cup&quot;, NA, NA, NA), col4 = c(NA, &quot;pear&quot;, &quot;banana&quot;, NA)), class = &quot;data.frame&quot;, row.names = c(NA, -4L)))

set.seed(42)
big_list &lt;- my_list[sample(1:3, 1e3, replace=TRUE)]

microbenchmark::microbenchmark(
  lapply_subset=lapply(big_list, df_update),
  floop={
    for (s in seq_along(big_list)) {
      x &lt;- big_list[[s]]
      if ('col3' %in% names(x)) {
        x$col3[is.na(x$col3) &amp; x$col1 %in% c('v2', 'v3')] &lt;- 'VAL'
        big_list[[s]] &lt;- x
      }
    }
    big_list
  },
  lapply=lapply(
    big_list,
    \(x) if ('col3' %in% names(x)) {
      transform(x, col3=replace(col3, 
                                is.na(col3) &amp; col1 %in% c('v2', 'v3'), 
                                'VAL'))
    } else {
      x
    }),
  check='identical')
</code></pre>
","1","Answer"
"78252953","78252877","<p>It would be better for you to set your board in a different way. So far you have a unique list, <code>row</code>, which you print ten times to simulate a board. This will make it uncomfortable to keep track of changes, as you whish to do. Use a 2d list instead:</p>
<pre><code>board = [[&quot; # &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;],
       [&quot; # &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;, &quot;# &quot;],
       ...
       ]
</code></pre>
<p>Of course, you can generate this board automatically:</p>
<pre class=""lang-py prettyprint-override""><code>board = [[&quot;#&quot; for _ in range(10)] for _ in range(10)]
</code></pre>
<p>Then you can ask for two integers as input, call them <code>i</code> and <code>j</code>, and set <code>board[i][j] = &quot;X&quot;</code>. This will produce the desired result.</p>
","1","Answer"
"78253024","78252877","<p>To manage and print the grid you'll want to use a 2d list. Additionally you should store the battleship alphabet as one string instead of a list of characters, and you don't need to be case specific. Also you should take input 1-10 and not 0-9 because the game uses 1-10 and not 0-9 like normal list indices.</p>
<pre><code>turns = 10
alphabet = &quot;ABCDEFGHIJ&quot;

def create_grid():
    return [[&quot; # &quot; for _ in range(10)] for _ in range(10)]

def print_grid(grid):
    print(&quot;   &quot; + &quot;  &quot;.join(alphabet))
    for i, row in enumerate(grid, start=1):
        print(f&quot;{i: &gt;2} &quot; + &quot;&quot;.join(row))
    print(&quot;\n&quot;)

def get_user_choice():
    rowx = input(&quot;Choose a letter (A-J): &quot;).upper()
    rowy = input(&quot;Enter a number (1-10): &quot;)
    return rowx, rowy

def is_valid_choice(rowx, rowy):
    return rowx in alphabet and rowy.isdigit() and 1 &lt;= int(rowy) &lt;= 10

def update_grid(grid, rowx, rowy):
    x = alphabet.index(rowx)
    y = int(rowy) - 1  # Adjust for 0-indexed grid
    if grid[y][x] == &quot; # &quot;:
        grid[y][x] = &quot; X &quot;
        return True
    return False

def game_screen():
    grid = create_grid()
    print_grid(grid)
    while True:
        rowx, rowy = get_user_choice()
        if is_valid_choice(rowx, rowy) and update_grid(grid, rowx, rowy):
            print(f&quot;You chose {rowx}{rowy}&quot;)
            print_grid(grid)
        else:
            print(&quot;Please choose a valid point (A-J/1-10) or an unchosen cell.\n&quot;)

game_screen()
</code></pre>
","-1","Answer"
"78254330","78254249","<p>You can use PuLP or SciPY libraries for solving Linear Equations.</p>
<pre><code>from sympy import symbols, Eq, solve
import re
from pulp import LpMaximize, LpProblem, LpVariable, value

system_equations = [
    '5 = X0 + Y0',
    '6 = X0 + Y1',
    '5 = X0 + Y3',
    '5 = X0 + Y4',
    '3 = X1 + Y2',
    '0 = X2 + Y2',
    '1 = X2 + Y4'
]

variable_names = list(set(re.findall(r'[XY]\d+', ' '.join(system_equations))))

variables = {var: LpVariable(var, lowBound=None, cat='Integer') for var in variable_names}

prob = LpProblem(&quot;IntegerLinearProgramming&quot;, LpMaximize)
print(variables)
for equation in system_equations:
    lhs, rhs = equation.split('=')
    lhs = lhs.strip()
    rhs = rhs.strip()
    print(rhs)
    terms = re.findall(r'([+-]?\s*\d*\s*\*?\s*[XY]\d+)', rhs)
    constraint = sum(eval(term, {}, variables) for term in terms) == int(lhs)
    prob += constraint

prob.solve()

values_of_int_decomposition_variables = [[var, int(value(variables[var]))] for var in variable_names]

print(values_of_int_decomposition_variables)
</code></pre>
","2","Answer"
"78254401","78220063","<p>Use <code>np.unique([l1, l2, l3], axis=1)</code>.</p>
<p>For separated steps:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; import numpy as np

&gt;&gt;&gt; l1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;a&quot;, &quot;j&quot;, &quot;a&quot;]
&gt;&gt;&gt; l2 = [&quot;b&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;b&quot;, &quot;j&quot;, &quot;b&quot;]
&gt;&gt;&gt; l3 = [&quot;c&quot;, &quot;a&quot;, &quot;a&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;c&quot;, &quot;j&quot;, &quot;c&quot;]

&gt;&gt;&gt; a0 = np.array([l1, l2, l3])
&gt;&gt;&gt; a0
array([['a', 'b', 'c', 'd', 'e', 'f', 'a', 'j', 'a'],
       ['b', 'a', 'b', 'd', 'e', 'f', 'b', 'j', 'b'],
       ['c', 'a', 'a', 'd', 'e', 'f', 'c', 'j', 'c']], dtype='&lt;U1')

&gt;&gt;&gt; a1 = np.unique(a0, axis=1)
&gt;&gt;&gt; a1
array([['a', 'b', 'c', 'd', 'e', 'f', 'j'],
       ['b', 'a', 'b', 'd', 'e', 'f', 'j'],
       ['c', 'a', 'a', 'd', 'e', 'f', 'j']], dtype='&lt;U1')
</code></pre>
","0","Answer"
"78255661","78251695","<p>If you have a set of ranges from which you want numbers picked at random, you can calculate how many distinct numbers there are, pick a random number up to that, and then find which range the random number lies in, and calculate the result.</p>
<p>Something like this:</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp1
{
    class Program
    {
        public class DisjointRandom
        {

            private Random rng;

            private List&lt;Range&gt; ranges = new List&lt;Range&gt;();

            public DisjointRandom()
            {
                rng = new Random();
            }

            public DisjointRandom(Random rng)
            {
                this.rng = rng;
            }

            private class Range
            {
                public int Min { get; set; }
                public int Max { get; set; }

                public Range(int min, int max)
                {
                    Min = min;
                    Max = max;
                }

                public int RangeLength()
                {
                    return Max - Min;
                }

            }

            public int Next()
            {
                var howManyValues = ranges.Sum(ra =&gt; ra.RangeLength());
                var n = rng.Next(0, howManyValues);

                int howManySoFar = 0;

                for (int rangeNum = 0; rangeNum &lt; ranges.Count; rangeNum++) {
                    if (n &lt; howManySoFar + ranges[rangeNum].RangeLength()) {
                        return ranges[rangeNum].Min + n - howManySoFar;
                    }

                    howManySoFar += ranges[rangeNum].RangeLength();
                }

                return int.MinValue; // Something went wrong. Maybe throw an exception.
            }

            // Derived from Rosetta Code &quot;Range Consolidation&quot; -  https://rosettacode.org/wiki/Range_consolidation#C#

            public void AddRange(int min, int max)
            {
                var newRange = Normalize(min, max);

                ranges.Add(newRange);

                for (int z = ranges.Count - 1; z &gt;= 1; z--) {
                    for (int y = z - 1; y &gt;= 0; y--) {
                        if (Overlap(ranges[z], ranges[y])) {
                            ranges[y] = Consolidate(ranges[z], ranges[y]);
                            ranges.RemoveAt(z);
                            break;
                        }
                    }
                }

                OrderRanges();

            }

            private static bool Overlap(Range left, Range right) =&gt;
                Math.Max(left.Min, left.Max) &gt; Math.Max(right.Min, right.Max)
                ? Math.Max(right.Min, right.Max) &gt;= Math.Min(left.Min, left.Max)
                : Math.Max(left.Min, left.Max) &gt;= Math.Min(right.Min, right.Max);

            private static Range Consolidate(Range left, Range right) =&gt;
                new Range(Math.Min(Math.Min(left.Min, left.Max), Math.Min(right.Min, right.Max)),
                          Math.Max(Math.Max(left.Min, left.Max), Math.Max(right.Min, right.Max)));

            private static Range Normalize(Range range) =&gt;
                new Range(Math.Min(range.Min, range.Max),
                          Math.Max(range.Min, range.Max));

            private static Range Normalize(int left, int right) =&gt;
                new Range(Math.Min(left, right),
                          Math.Max(left, right));

            // End derived from Rosetta Code.

            private void OrderRanges()
            {
                ranges = ranges.OrderBy(r =&gt; r.Min).ToList();
            }

            public override string ToString()
            {
                return string.Join(&quot;, &quot;, ranges.Select(r =&gt; ($&quot;[{r.Min}, {r.Max})&quot;)));
            }
        }

        static void Main(string[] args)
        {
            /* Simple demo that the numbers are selected with equal probability. */
            var rrr = new Random(100);

            var q = new DisjointRandom(rrr);
            q.AddRange(1, 3);
            q.AddRange(4, 7);
            q.AddRange(9, 10);

            Console.WriteLine(q);

            int[] bin = new int[10];
            
            for (int i = 1; i &lt;= 1000000; i++) {
                var s = q.Next();
                bin[s]++;
            }

            for(int i = 0; i &lt;= 9; i++) {
                Console.WriteLine($&quot;{i,-2} {bin[i]}&quot;);
            }

            Console.ReadLine();

        }
    }
}
</code></pre>
<p>The simple demo shows that there is an equal chance of picking any number from the ranges:</p>
<pre class=""lang-none prettyprint-override""><code>[1, 3), [4, 7), [9, 10)
0  0
1  166846
2  166681
3  0
4  166921
5  166255
6  166977
7  0
8  0
9  166320
</code></pre>
<p>(If there are any off-by-one errors in my code, they appear to serendipitously cancel out.)</p>
","0","Answer"
"78256985","78256965","<p>You can do (note: <code>id</code> 80 is Adventure in your example, not Horror):</p>
<pre class=""lang-py prettyprint-override""><code>m = dict(zip(df2[&quot;id&quot;], df2[&quot;name&quot;]))
df1[&quot;genre_ids&quot;] = df1[&quot;genre_ids&quot;].apply(lambda l: [m.get(v) for v in l])

print(df1)
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>           title                       genre_ids
0  The Godfather             [Action, Adventure]
1     Fight Club                        [Action]
2     The Empire  [Adventure, Animation, Comedy]
</code></pre>
","5","Answer"
"78257030","78256965","<p>You can explode the <code>genre_ids</code> and merge the 2 dataframe.</p>
<pre><code>merged = df1.explode('genre_ids').merge(df2,left_on='genre_ids',right_on='id')[['title','name']]
</code></pre>
<p>Then using groupby convert the <code>name</code> column to the list.</p>
<pre><code>result = merged.groupby('title')['name'].apply(list).reset_index()
</code></pre>
<p>The result will be :</p>
<pre><code>           title                            name
0     Fight Club                        [Action]
1     The Empire  [Adventure, Animation, Comedy]
2  The Godfather             [Action, Adventure]
</code></pre>
","3","Answer"
"78257304","78256965","<p>You can also first map the genre IDs in <code>df1</code> to their corresponding names using <code>df2</code>, and then replacing the genre IDs with the mapped names, like the following:</p>
<pre class=""lang-py prettyprint-override""><code>import pandas as pd

df1 = pd.DataFrame({'title':['The Godfather','Fight Club','The Empire'], 'genre_ids':[[18, 80],[18],[12, 28, 878]]})
df2 = pd.DataFrame({'id':[18,80,12,28,878,99],'name':['Action','Adventure','Adventure','Animation','Comedy','Documentary']})

genre_map = dict(zip(df2['id'], df2['name']))

df1['genre_ids'] = df1['genre_ids'].apply(lambda x: [genre_map[id] for id in x])

print(df1)
</code></pre>
<p>Output:</p>
<pre><code>          title                   genre_ids
0  The Godfather            [Action, Adventure]
1     Fight Club                    [Action]
2     The Empire  [Adventure, Animation, Comedy]
</code></pre>
","0","Answer"
"78257363","78257312","<p>Try something like this:</p>
<pre><code>import re
import json

def cobol_to_json(cobol_statement):
    cursor_pattern = r'CURSOR\s+AT\s+([\w-]+\(\d+\))'
    for_pattern = r'FOR\s+FIELD\s+\((.*?)\)'
    cursor_match = re.search(cursor_pattern, cobol_statement, re.IGNORECASE)
    for_match = re.search(for_pattern, cobol_statement, re.IGNORECASE)
    if cursor_match and for_match:
        cursor = cursor_match.group(1)
        fields = [field.strip() for field in for_match.group(1).split(',')]
        result = {&quot;cursor&quot;: cursor, &quot;for&quot;: fields}
        return json.dumps(result, indent=4)
    else:
        return None


cobol_statement = &quot;MODIFY MAP CURSOR AT NBS-DS-01(1) FOR FIELD (NBS-DS-01, NBS-DS-02(2), NBS-DS-03(3))&quot;
json_result = cobol_to_json(cobol_statement)
if json_result:
    print(json_result)
else:
    print(&quot;Failed to parse COBOL statement.&quot;)
</code></pre>
<p>Output:</p>
<pre><code>{
    &quot;cursor&quot;: &quot;NBS-DS-01(1)&quot;,
    &quot;for&quot;: [
        &quot;NBS-DS-01&quot;,
        &quot;NBS-DS-02(2&quot;
    ]
}
</code></pre>
","0","Answer"
"78257435","78257312","<p>You can try this regular expression. If you use a different format you need to reconstruct the regex.</p>
<pre><code>import re
import json

def cobol_to_json(statement):
    pattern = r&quot;MODIFY MAP CURSOR AT ([\w-]+\(\d+\)) FOR FIELD \(([\w-]+(?:\(\d+\))?(?:, [\w-]+(?:\(\d+\))?)*)\)&quot;
    match = re.match(pattern, statement)
    if match:
        cursor = match.group(1)
        fields_str = match.group(2)
        fields = [field.strip() for field in fields_str.split(',')]
        result = {
            &quot;cursor&quot;: cursor,
            &quot;for&quot;: fields
        }
        return json.dumps(result, indent=4)
    else:
        return &quot;invalid statement&quot;


statement = &quot;MODIFY MAP CURSOR AT NBS-DS-01(1) FOR FIELD (NBS-DS-01, NBS-DS-02(2), NBS-DS-03(3))&quot;
result = cobol_to_json(statement)
print(result)
</code></pre>
<p>Output:</p>
<pre><code>{
    &quot;cursor&quot;: &quot;NBS-DS-01(1)&quot;,
    &quot;for&quot;: [
        &quot;NBS-DS-01&quot;,
        &quot;NBS-DS-02(2)&quot;,
        &quot;NBS-DS-03(3)&quot;
    ]
}
</code></pre>
","0","Answer"
"78258711","78254249","<p>If you use SymPy you can let it tell you what variables are used. <code>lpmax</code> can be used, too, or you can solve in terms of a single variable (in this case):</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; from sympy import *
# your definitions
&gt;&gt;&gt; eqs = Tuple(*[Eq(*[S(i) for i in i.split('=')]) for i in system_equations]) 
&gt;&gt;&gt; syms = var(str(eqs.free_symbols)) # local variables of symbols used in equation
&gt;&gt;&gt; sol = solve(eqs,exclude=[X0]); sol
{Y0: 5 - X0, Y1: 6 - X0, Y3: 5 - X0, X1: X0 - 1, X2: X0 - 4, Y2: 4 - X0, Y4: 5 - X0}
&gt;&gt;&gt; solve([sol[i]!=0 for i in sol])
[]
</code></pre>
<p>It looks like there is no way (for this system) to get all values to be non-zero. You can confirm by seeing that neither positive nor negative solutions in terms of x0 can be found:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; solve([sol[i]&gt;0 for i in sol])
False
&gt;&gt;&gt; solve([sol[i]&lt;0 for i in sol])
False
</code></pre>
","1","Answer"
"78262986","78262945","<p>You can combine <a href=""https://numpy.org/doc/stable/reference/generated/numpy.argmax.html"" rel=""nofollow noreferrer""><code>argmax</code></a> and <a href=""https://numpy.org/doc/stable/reference/generated/numpy.take_along_axis.html"" rel=""nofollow noreferrer""><code>take_along_axis</code></a>:</p>
<pre><code>import numpy

List1 = ['2.66', '3.79', '1.88', '1.61', '2.51', '1.29', '2.29', '2.56', '3.16', '2.05', '2.95', '2.64', '2.26', '3.17', '2.64', '2.25']
List2 = ['2.70', '4.40', '1.87', '1.56', '2.50', '1.26', '2.33', '2.60', '3.20', '2.04', '3.00', '2.65', '2.25', '3.20', '2.65', '2.22']

tmp = numpy.array([List1, List2]).astype(float)
idx = tmp.argmax(axis=0)

FinalList = numpy.take_along_axis(tmp, idx[None], axis=0)[0]
# or: FinalList = tmp[idx[None], numpy.arange(tmp.shape[1])][0]
# array([2.7 , 4.4 , 1.88, 1.61, 2.51, 1.29, 2.33, 2.6 , 3.2 , 2.05, 3.  ,
#        2.65, 2.26, 3.2 , 2.65, 2.25])

NamesLists = numpy.array(['List1', 'List2'])[idx]
# array(['List2', 'List2', 'List1', 'List1', 'List1', 'List1', 'List2',
#        'List2', 'List2', 'List1', 'List2', 'List2', 'List1', 'List2',
#        'List2', 'List1'], dtype='&lt;U5')
</code></pre>
<p>Note that <code>idx</code> is of the form:</p>
<pre><code>array([1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0])
</code></pre>
<p>which might be easier to use than <code>['List2', 'List2', 'List1', ...]</code></p>
","4","Answer"
"78262998","78262945","<p>in general, what you can do is use the argmax function:</p>
<p><code>max_indexes = numpy.array([List1, List2]).argmax(axis = 0)</code></p>
<p>This would return: <code>array([1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0])</code></p>
<p>This would give you the index of the list with the higher value.</p>
<p>If you want to turn this into the names you can do so using this line:</p>
<p><code>numpy.array(['List1', 'List2'])[max_indexes]</code></p>
","4","Answer"
"78263038","78262945","<p>You can also use <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""nofollow noreferrer""><code>zip()</code></a> with the list comprehension so:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

List1 = ['2.66', '3.79', '1.88', '1.61', '2.51', '1.29', '2.29', '2.56', '3.16', '2.05', '2.95', '2.64', '2.26', '3.17', '2.64', '2.25']
List2 = ['2.70', '4.40', '1.87', '1.56', '2.50', '1.26', '2.33', '2.60', '3.20', '2.04', '3.00', '2.65', '2.25', '3.20', '2.65', '2.22']

merged_lists = np.array([List1, List2]).astype(float)
max_indices = np.argmax(merged_lists, axis=0)

FinalList = [merged_lists[index, i] for i, index in enumerate(max_indices)]
NamesLists = [List1 if index == 0 else List2 for index in max_indices]
</code></pre>
<p>However, in terms of efficiency and readability, the provided solution with <code>argmax</code> and <code>take_along_axis</code> is quite good.</p>
","1","Answer"
"78265362","78265287","<p>You can use <code>Collectors</code> to do this:</p>
<p>First a <code>groupingBy</code> collector to create the top level map, which uses another <code>groupingBy</code> collector to create each sub map, with the values populated by a <code>toList</code>.</p>
<pre><code>package com.example.so;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


public class Eg {


    public static void main(String[] args) {
        List&lt;Root&gt; roots = List.of(
                new Root(1, &quot;A&quot;, &quot;B&quot;),
                new Root(1, &quot;A&quot;, &quot;C&quot;),
                new Root(2, &quot;A&quot;, &quot;B&quot;),
                new Root(2, &quot;A&quot;, &quot;C&quot;),
                new Root(1, &quot;Z&quot;, &quot;B&quot;),
                new Root(1, &quot;Z&quot;, &quot;C&quot;),
                new Root(2, &quot;Z&quot;, &quot;B&quot;),
                new Root(2, &quot;Z&quot;, &quot;C&quot;)
        );
        Map&lt;Integer, Map&lt;String,List&lt;Root&gt;&gt;&gt; maps = roots.stream().collect(Collectors.groupingBy(
                Root::level,
                Collectors.groupingBy(Root::path, Collectors.toList())
        ));
        System.out.println(maps);
    }

}

record Root(int level, String path, String siteId) {
}
</code></pre>
<p>Which produces the structure:</p>
<pre><code> {
 1=
   {
   A=[Root[level=1, path=A, siteId=B], Root[level=1, path=A, siteId=C]],
   Z=[Root[level=1, path=Z, siteId=B], Root[level=1, path=Z, siteId=C]]
   },
 2=
   {
   A=[Root[level=2, path=A, siteId=B], Root[level=2, path=A, siteId=C]],
   Z=[Root[level=2, path=Z, siteId=B], Root[level=2, path=Z, siteId=C]]
   }
 }
</code></pre>
","4","Answer"
"78265408","78265287","<p>You can use collectors and streams logic as below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>Map&lt;Integer, Map&lt;String, List&lt;Root&gt;&gt;&gt; sites = rootList.stream()
                .collect(
                        HashMap::new,
                        (map, root) -&gt; map.computeIfAbsent(root.getLevel(), k -&gt; new HashMap&lt;&gt;())
                                .merge(root.getPath(), new ArrayList&lt;&gt;(List.of(root)), (l1, l2) -&gt; {l1.addAll(l2); return l1;}), // Accumulator
                        HashMap::putAll
                );</code></pre>
</div>
</div>
</p>
","0","Answer"
"78268093","78267575","<p>You can do this linearly O(n) without sort.</p>
<pre><code>from collections import defaultdict
from typing import Iterable

my_intervals = [(1, 3), (2, 4), (5, 7), (6, 8), (2, 3), (2, 3), (2, 4)]


def merger(intervals: Sequence[tuple]) -&gt; Iterable[tuple]:
    max_val = max(i[1] for i in intervals)
    min_val = min(i[0] for i in intervals)
    breakpoints = [0] * (max_val - min_val + 1)

    min_val, max_val = intervals[0]
    for start, end in intervals:
        if end &lt; start:
            raise ValueError(f&quot;Improper interval: {start} !&lt;= {end}&quot;)
        breakpoints[start - min_val] += 1
        breakpoints[end - min_val] -= 1
        min_val = start if start &lt; min_val else min_val
        max_val = end if end &gt; max_val else max_val

    res = []
    current_start = min_val
    marker = 0  # marker is &gt; 0 when in an interval, else &quot;dead space&quot;
    for i in range(min_val, max_val + 1):
        marker += breakpoints[i - min_val]
        if current_start and marker == 0:  # close the interval
            end = i
            res.append((current_start, end))
            current_start = None
        elif not current_start and marker &gt; 0:  # start an interval
            current_start = i
    return res
</code></pre>
<h4>Output:</h4>
<pre><code>[(1, 4), (5, 8)]
</code></pre>
","1","Answer"
"78268830","78267575","<p>I not that good at python but I think this will help you, try this code:</p>
<pre><code>def merge_intervals(intervals):
&quot;&quot;&quot;
Merge overlapping intervals into a single interval.

Args:
- intervals (list of tuples): List of intervals represented as tuples (start, end).

Returns:
- merged (list of tuples): List of non-overlapping intervals after merging.

Example:
&gt;&gt;&gt; merge_intervals([(1, 3), (2, 4), (5, 7), (6, 8)])
[(1, 4), (5, 8)]
&quot;&quot;&quot;
sorted_intervals = sorted(intervals, key=lambda x: x[0])
merged = []
for interval in sorted_intervals:
    if not merged or merged[-1][1] &lt; interval[0]:
        merged.append(interval)
    else:
        merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1]))
return merged
my_intervals = [(1, 3), (2, 4), (5, 7), (6, 8)]
print(merge_intervals(my_intervals))d
</code></pre>
<p>And yeah, the output at least for me is exactly as you want:</p>
<pre><code>[(1, 4), (5, 8)]
</code></pre>
<p>let me know if worked.</p>
","1","Answer"
"78269057","78265287","<p>As an alternative to Streams, you can also use the enhancements to the Map interface, also available in Java 8.</p>
<p><a href=""https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function)"" rel=""nofollow noreferrer"">Map.computeIfAbsent</a> - creates the value for the supplied key if absent.  Then, always returns that value for subsequent operations.  In this case, another <code>computeIfAbsent</code> invocation.</p>
<pre><code>Map&lt;Integer, Map&lt;String, List&lt;Root&gt;&gt;&gt; maps = new HashMap&lt;&gt;();
 for (Root root : roots) {
     maps.computeIfAbsent(root.getLevel(), k -&gt; new HashMap&lt;&gt;())
             .computeIfAbsent(root.getPath(), k -&gt; new ArrayList&lt;&gt;())
             .add(root);
 }
</code></pre>
","0","Answer"
"78269169","78267575","<p>I see nothing wrong with your code, it is quite pythonic (simple, clear and readable), there is no sugar syntax I can think of to improve your code, no comprehension, functional style (map, filter, reduce...) that can help in this way.</p>
<p>To address your efficiency question, here is a vectorized version of your task using numpy.</p>
<pre><code>import numpy as np

my_intervals = [(1, 3), (2, 4), (5, 7), (6, 8), (9, 11), (10, 12), (11, 12), (1,2)]
my_intervals = np.array(my_intervals)

my_intervals.sort(axis=0)

start_bounds = my_intervals[:,0]
end_bounds = my_intervals[:,1]

start_bounds_filter = ~np.convolve(end_bounds &gt;= np.concatenate([start_bounds[1:], [np.inf]]), [False, True], mode='same')
end_bounds_filter = np.flip(~np.convolve(np.flip(start_bounds &lt;= np.concatenate([[-np.inf], end_bounds[:-1]])), [False, True], mode='same'))

result = np.vstack([start_bounds[start_bounds_filter], end_bounds[end_bounds_filter]]).T.tolist()
</code></pre>
<p>Using Jupyter %%timeit for benchmarking, you already see that your implentation is much faster (in the order of ns while the vectorized one in the order of micro seconds), and I also tried using the numba library for a JIT version of your implementation which had even worst results. Scaling the sample does not turn the tables in the performance.</p>
<p><strong>Loop solution:</strong>
<a href=""https://i.sstatic.net/evXEv.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/evXEv.png"" alt=""old_sol"" /></a>
<strong>Vectorized solution:</strong>
<a href=""https://i.sstatic.net/p3Aqs.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/p3Aqs.png"" alt=""new_sol"" /></a></p>
<p>In summary, in this case simple is best (in clarity and performance), be confident it is readable and scales well.</p>
","1","Answer"
"78269548","78269415","<p>Edit: This should be exactly what you need based on the pandas docs and how jinja expects template data:</p>
<pre><code>render_template('app.html', employees=emplList.to_dict('records'))
</code></pre>
<p>If this isn't working for you, feel free to comment on my answer here or edit your question to provide more detailed info on what your data is or problems you're having.</p>
","1","Answer"
"78272339","78227058","<p>I didn't know how to factor in the <code>const myList = ['a', 'b', 'c']</code> declaration, probably not essential to get to the <em><code>expected</code></em>.</p>
<p>I'd recommend recursion as a tool for your use case. <code>Array#from</code> is what you can leverage to work other data types into arrays.
The <code>cursor</code> parameter is needed to accumulate the index across iterations.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const toList = (dict) =&gt; {
  
  const worker = (list, cursor = 0) =&gt; {
    if(!list.length) {
      return [];
    }
    
    const [head, ...tail] = list;
    const [char, length] = head;
    
    const item = Array.from({ length }, (_, i) =&gt; {
      const index = i + cursor;
      const payload = `${char}${i}`
    
      return { index, payload };
    });


    return [item].concat(
      worker(tail, length + cursor),
    );
  };
  
  return worker(
    Array.from(dict),
  );
};


const dict = new Map([
  ['a', 4],
  ['b', 0],
  ['c', 3]
])

console.log(
  toList(dict),
);</code></pre>
</div>
</div>
</p>
","0","Answer"
"78274495","78274399","<p>Well I personally think that what you have is quite sufficient, but I will still try to give you an answer. The only part where I would say a readability improvement can be made is like this</p>
<pre><code>var tabDateWithTwo = table.Where(t =&gt; t.Data.Length == 2).ToList();

for (int i = 0; i &lt; tabDateWithTwo.Count; i++)
{
     tabDateWithTwo[i].Data = dteSubstringList[i].Mte;
}
</code></pre>
<p>Edit: if you want a more Linqy approach you can combine my Where Filter with Dmitry Bychenko s List.ForEach. I would do it in this Post but that would feel like shameless stealing of his answer.</p>
","1","Answer"
"78274530","78274399","<p>Linq is not that good in <em>data modification</em> (we usually use Linq to <em>query</em>); I suggest <a href=""https://learn.microsoft.com/ru-ru/dotnet/api/system.collections.generic.list-1.foreach?view=net-8.0"" rel=""nofollow noreferrer"">List.ForEach</a> instead:</p>
<pre><code>int index = 0;

table.ForEach(item =&gt; {
  if (item.Data.Length == 2)
    item.Data = dteSubstringList[index++].Mte;
});
</code></pre>
","3","Answer"
"78278186","78269415","<p>finally able to get past the error, given below is the code that worked</p>
<pre><code>{% for row in employees.employee_name %}
             &lt;option value='{{row}}'&gt;{{row}}&lt;/option&gt;
{% endfor %}
</code></pre>
","0","Answer"
"78284121","78284007","<p>The above <code>with statement</code> will automatically close the file after the nested block of code means object in the list have some memory address but actually the data has gone from there so you can create a <code>deep copy</code> using <code>PIL.Image.copy</code> method.</p>
<pre><code>from pathlib import Path
from PIL import Image
import numpy as np

path = Path(&lt;path-to-folder&gt;)

list_of_images = []
for img_path in path.iterdir():
    with Image.open(img_path) as img:
        print(img)
        list_of_images.append(img.copy())
</code></pre>
<p>Or you can do this thing read all the image object and do you operation and then close those file properly.</p>
<pre><code>from pathlib import Path
from PIL import Image
import numpy as np

path = Path(&lt;path-to-folder&gt;)
img_path = [img_path for img_path in path.iterdir()]

list_of_images = []
for img_path in path.iterdir():
    list_of_images.append(Image.open(img_path))

# Do something with the images
# ...
list_of_images[0].show()

# Close the images
for image in list_of_images:
    image.close()
</code></pre>
<p>Or if we call <code>convert</code> function to convert this image object to RGB which they might already be it also helps us to solve your problem because <code>PIL.Image.convert</code> function also return copy of that object even after with context end you have copy of that object</p>
<pre><code>list_of_images.append(img.convert('RGB'))
</code></pre>
<p>enter code here</p>
","1","Answer"
"78284144","78284007","<pre><code>list_of_images = []
for img_path in path.iterdir():
    img = Image.open(img_path)
    list_of_images.append(img)
    
list_of_images[0].show()
</code></pre>
<p>by using <strong>with</strong> the img closed after appending to the array you need to keep it open or reopen it before using show</p>
","0","Answer"
"78285348","78285316","<pre><code>using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List&lt;string&gt; list = new List&lt;string&gt; { &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot; };
        List&lt;string&gt; updatedList = new List&lt;string&gt; { &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;E&quot; };

        int firstDifferenceIndex = FindFirstDifferenceIndex(list, updatedList);

        Console.WriteLine(&quot;Index of the first difference: &quot; + firstDifferenceIndex);
    }

    static int FindFirstDifferenceIndex(List&lt;string&gt; list1, List&lt;string&gt; list2)
    {
        for (int i = 0; i &lt; list1.Count &amp;&amp; i &lt; list2.Count; i++)
        {
            if (list1[i] != list2[i])
            {
                return i;
            }
        }

        return Math.Min(list1.Count, list2.Count);
    }
}
</code></pre>
","2","Answer"
"78285357","78285316","<p>You can use LINQ's <code>Zip</code>, <code>Select</code>, and <code>FirstOrDefault</code> operators:</p>
<pre class=""lang-cs prettyprint-override""><code>int? index =
    list
    .Zip(updatedList, (item, updated) =&gt; (item, updated))
    .Select((pair, index) =&gt; (pair, index))
    .FirstOrDefault(x =&gt; x.pair.item != x.pair.updated)
    ?.index;
</code></pre>
<p>Not the most performant way, but in case it's fast enough, it will do the trick.</p>
","3","Answer"
"78286079","78285316","<pre><code>// with the data from your entry post

int i, diffIndex; i = diffIndex = -1;
list.FirstOrDefault(el =&gt; updatedList.Count &gt; ++i
                       &amp;&amp; !Equals(el, updatedList[i]) 
                       &amp;&amp; (diffIndex = i) &gt; -1);

// diffIndex is now 3 
</code></pre>
","1","Answer"
"78298123","78298089","<p>You should be able to do this by splitting each element and then taking the Cartesian product -</p>
<pre><code>import itertools

x = [&quot;FOO,BAR&quot;, &quot;BAZ&quot;]
total = []
for a in x:
    total.append(a.split(','))
print(list(itertools.product(*total)))
</code></pre>
","1","Answer"
"78298314","78298089","<p>Answering the question literally and making no assumption about the actual requirement, it's as simple as:</p>
<pre><code>x, y = [&quot;FOO,BAR&quot;, &quot;BAZ&quot;]

for t in x.split(&quot;,&quot;):
    print(str([t, y]).replace(&quot;'&quot;, '&quot;'))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[&quot;FOO&quot;, &quot;BAZ&quot;]
[&quot;BAR&quot;, &quot;BAZ&quot;]
</code></pre>
","0","Answer"
"78299947","78299860","<p>If you want to keep the same shape, you can use a pair of Maps.</p>
<pre><code>Map(function(top, topname) {
  Map(function(mid, midname) {
    path &lt;- paste0(&quot;.path/&quot;, topname,&quot;/&quot;, midname,&quot;_&quot;,topname, &quot;_table.csv&quot;, sep=&quot;.&quot;)
    path
    # read.csv(path)
  }, top, names(top))}, 
myList, names(myList))
</code></pre>
<p>Since I don't have the data, this just returns the paths, but you can do whatever you want with the path in the inner Map. This returns</p>
<pre><code>$A
$A$a1
[1] &quot;.path/A/a1_A_table.csv.&quot;

$A$a2
[1] &quot;.path/A/a2_A_table.csv.&quot;

$A$a3
[1] &quot;.path/A/a3_A_table.csv.&quot;


$B
$B$a1
[1] &quot;.path/B/a1_B_table.csv.&quot;

$B$a2
[1] &quot;.path/B/a2_B_table.csv.&quot;

$B$a3
[1] &quot;.path/B/a3_B_table.csv.&quot;


$C
$C$a1
[1] &quot;.path/C/a1_C_table.csv.&quot;

$C$a2
[1] &quot;.path/C/a2_C_table.csv.&quot;

$C$a3
[1] &quot;.path/C/a3_C_table.csv.&quot;


$D
$D$a1
[1] &quot;.path/D/a1_D_table.csv.&quot;

$D$a2
[1] &quot;.path/D/a2_D_table.csv.&quot;

$D$a3
[1] &quot;.path/D/a3_D_table.csv.&quot;
</code></pre>
","1","Answer"
"78300277","78299860","<pre><code>You could also do:

fn &lt;- function(x,y){
  nms &lt;- names(x)
  as.list(setNames(sprintf('/path/%s/%s_%s_table.csv', y, nms, y), nms))
}

purrr::imap(myList, fn)

$A
$A$a1
[1] &quot;/path/A/a1_A_table.csv&quot;

$A$a2
[1] &quot;/path/A/a2_A_table.csv&quot;

$A$a3
[1] &quot;/path/A/a3_A_table.csv&quot;


$B
$B$a1
[1] &quot;/path/B/a1_B_table.csv&quot;

$B$a2
[1] &quot;/path/B/a2_B_table.csv&quot;

$B$a3
[1] &quot;/path/B/a3_B_table.csv&quot;


$C
$C$a1
[1] &quot;/path/C/a1_C_table.csv&quot;

$C$a2
[1] &quot;/path/C/a2_C_table.csv&quot;

$C$a3
[1] &quot;/path/C/a3_C_table.csv&quot;


$D
$D$a1
[1] &quot;/path/D/a1_D_table.csv&quot;

$D$a2
[1] &quot;/path/D/a2_D_table.csv&quot;

$D$a3
[1] &quot;/path/D/a3_D_table.csv&quot;
</code></pre>
","0","Answer"
"78301657","78301596","<p>This is possible by storing the difference between two neighboring elements in a variable and then adding it to your array. You can then use [i-1] to reference the previous element:</p>
<pre><code>a = [5, 4, 3, 2, 1]
b = []
for i in range(1, len(a)):
    dif = a[i-1] - a[i]
    b.append(dif)
</code></pre>
","2","Answer"
"78301912","78299860","<p>There is a question of whether you really need <code>myList</code> at all.  This gets all files with names of the desired form creating a named nested list of them without reference to it.</p>
<pre><code>library(magrittr)

L &lt;- &quot;./path/*/*_*_table.csv&quot; %&gt;%
  Sys.glob %&gt;%
  split(., basename(dirname(.))) %&gt;%
  lapply(\(x) setNames(lapply(x, read.csv), sub(&quot;_.*&quot;, &quot;&quot;, basename(x))))
</code></pre>
<p>If you do need to use <code>myList</code> as the starting point then traverse it with <code>rrapply</code></p>
<pre><code>library(rrapply)

L &lt;- rrapply(myList, 
  classes = &quot;list&quot;,
  cond = \(x) length(x) == 0,
  f = \(x, .xparents) sprintf(&quot;./path/%s/%s_%s_table.csv&quot;, 
    .xparents[1], .xparents[2], .xparents[1]) |&gt;
    read.csv(),
  how = &quot;replace&quot;)
</code></pre>
","1","Answer"
"78302064","78301596","<p>We could use Python's <a href=""https://realpython.com/list-comprehension-python/"" rel=""nofollow noreferrer"">list comprehension</a> to accomplish this, pal. We can assign the result of the list comprehension to b. Take a look at the code example below:</p>
<pre><code>a = [5, 4, 3, 2, 1]
b = [a[i - 1] - a[i] for i in range(1, len(a))]
print(b)
</code></pre>
<p>Happy coding, bud!</p>
","1","Answer"
"78303165","78303058","<p><code>insert</code> is adding a value in a specific location and shifts right the value that is currently there. If you want to add value to the end of the list use</p>
<pre><code>lst.insert(len(lst), 'hello')
</code></pre>
<p>Which gives the same behavior as</p>
<pre><code>lst.append('hello')
</code></pre>
","2","Answer"
"78303190","78303058","<p>Consider using the Python <code>append</code> method instead, as it automatically adds items to the end of the list</p>
<pre class=""lang-py prettyprint-override""><code>list = [10,3,5,100,7,9]
list.append('hello')
print(list)
</code></pre>
<p>which gives</p>
<blockquote>
<p>[10, 3, 5, 100, 7, 9, 'hello']</p>
</blockquote>
<p>or you can also simply put the index of the place right after where you want to insert the data into, on this case being the same as the length of the list:</p>
<pre class=""lang-py prettyprint-override""><code>list = [10,3,5,100,7,9]
list.insert(len(list), 'hello')
print(list)
</code></pre>
<p>which will also yield the same results. For more info on the <code>append</code> method go <a href=""https://www.w3schools.com/python/ref_list_append.asp"" rel=""nofollow noreferrer"">here</a></p>
","3","Answer"
"78307667","78307639","<p>This is a little verbose, but one tidyverse approach, built to accommodate the potential for multiple id's.</p>
<pre><code>all_terms &lt;- &quot;2012 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2009, 2010 to 2011&quot;

library(tidyverse)
data.frame(id = 1, all_terms) |&gt;
  separate_longer_delim(all_terms, delim = &quot;, &quot;) |&gt;
  separate_wider_delim(cols = all_terms, names = c(&quot;from&quot;, &quot;to&quot;), delim = &quot; to &quot;) |&gt;
  mutate(row = row_number()) |&gt;
  reframe(year = seq(from, to, 1), .by = c(id, row)) |&gt;
  distinct(id, year) |&gt;
  arrange(id, year) |&gt;
  summarize(terms = max(cumsum(year &gt; lag(year,1,0) + 1)), .by = id)
</code></pre>
<p>This puts the string into a dataframe, splits into rows at each <code> ,</code>, splits that into columns <code>from</code> and <code>to</code>, then makes a sequence of years covering that range, picks one of each year per id, then check how many gaps there are per id.</p>
<p>It reports one term for the original data, two terms for the 2nd data.</p>
","2","Answer"
"78308245","78307639","<p>We can use <code>cummax</code> and <code>cumsum</code>. I created a function that would count number of non-consecutive terms. For more details on these functions, refer to this previous answer of mine: <a href=""https://stackoverflow.com/questions/53213418/collapse-and-merge-overlapping-time-intervals/53214186#53214186"">Collapse and merge overlapping time intervals</a>. <sup>*</sup></p>
<pre class=""lang-r prettyprint-override""><code>one_term &lt;- &quot;2012 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2009, 2010 to 2011&quot;
two_term &lt;- &quot;2013 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2009, 2010 to 2011&quot;
four_term &lt;- &quot;2013 to 2024, 2007 to 2007, 2001 to 2003, 2000 to 2005, 2010 to 2011&quot;

library(dplyr)

term_counter &lt;- function(string_dat) {
as.data.frame(
  do.call(rbind,
          strsplit(strsplit(string_dat,
                            &quot;, &quot;)[[1]],
                   &quot; to &quot;))) %&gt;% 
  mutate(across(everything(), as.numeric)) %&gt;% 
  arrange(V1, V2) %&gt;% 
  mutate(terms = 1 + c(0, cumsum(lead(V1 - 1) &gt;
                              cummax(V2))[-n()])) %&gt;% 
  pull(terms) %&gt;% max()
}
  
term_counter(one_term)
#&gt; [1] 1
term_counter(two_term)
#&gt; [1] 2
term_counter(four_term)
#&gt; [1] 4
</code></pre>
<h3>Update:</h3>
<p>If you want to get the length of each term and maybe start and end of it, you can use the modified version below;</p>
<pre class=""lang-r prettyprint-override""><code>term_counter_mod &lt;- function(string_dat) {
as.data.frame(
  do.call(rbind,
          strsplit(strsplit(string_dat,
                            &quot;, &quot;)[[1]],
                   &quot; to &quot;))) %&gt;% 
  mutate(across(everything(), as.numeric)) %&gt;% 
  arrange(V1, V2) %&gt;% 
  mutate(terms = 1 + c(0, cumsum(lead(V1 - 1) &gt;
                                   cummax(V2))[-n()])) %&gt;% 
  summarise(from = min(V1), to = max(V2), 
            len = to - from + 1, 
            .by = terms)
}

lapply(setNames(list(one_term, two_term, four_term), 
                c(&quot;one&quot;, &quot;two&quot;, &quot;four&quot;)), 
       term_counter_mod)
#&gt; $one
#&gt;   terms from   to len
#&gt; 1     1 2000 2024  25
#&gt; 
#&gt; $two
#&gt;   terms from   to len
#&gt; 1     1 2000 2011  12
#&gt; 2     2 2013 2024  12
#&gt; 
#&gt; $four
#&gt;   terms from   to len
#&gt; 1     1 2000 2005   6
#&gt; 2     2 2007 2007   1
#&gt; 3     3 2010 2011   2
#&gt; 4     4 2013 2024  12
</code></pre>
<p><sup>Created on 2024-04-11 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.0.2</a></sup></p>
<p><sub> * This is not a duplicate of that question. </sub></p>
","2","Answer"
"78308349","78308212","<p>You should not use a <code>NavigationLink</code>. You should do the navigation programmatically in the button's action closure.</p>
<p>Assuming the type of <code>nodes</code> is <code>[Node]</code>, you can add a <code>@State</code> representing the navigation path like this:</p>
<pre><code>@State private var path: [Node] = []
let nodes = [...]

var body: some View {
    NavigationStack(path: $path) {
        List(nodes, id: \.self) { node in
            NodeListItem(node: node) {
                // programmatic navigation
                path.append(node)
            }
            .contextMenu { ... }
        }
        .navigationDestination(for: Node.self) { node in
            UserMessageList(user: node.user!)
        }
    }
}
</code></pre>
<p>Note that the navigation destination of <code>UserMessageList</code> is declared on the <code>List</code>, instead of each individual <code>NodeListItem</code>.</p>
<p><code>NodeListItem</code> should be changed to take a closure for its button's action:</p>
<pre><code>struct NodeListItem: View {
    let node: Node
    let buttonAction: () -&gt; Void
    
    var body: some View {
        LazyVStack(alignment: .leading) {
            // ...
            HStack {
                // ...
                Button(&quot;DM&quot;) {
                    buttonAction()
                }
                .buttonStyle(.borderedProminent)
            }
        }
    }
}
</code></pre>
<p>Of course, you can also pass a <code>@Binding</code> of the navigation path, and do <code>path.append</code> in <code>NodeListItem</code>:</p>
<pre><code>struct NodeListItem: View {
    let node: Node
    @Binding var path: [Node]
    
    var body: some View {
        LazyVStack(alignment: .leading) {
            // ...
            HStack {
                // ...
                Button(&quot;DM&quot;) {
                    path.append(node)
                }
                .buttonStyle(.borderedProminent)
            }
        }
    }
}

// ...

NodeListItem(node: node, path: $path)
</code></pre>
<p>Personally I think the former makes more sense.</p>
","0","Answer"
"78309263","78309227","<p>Method 1: slicing and concatenation:</p>
<pre><code>subset_list = target_list[:3] + target_list[4:7]
</code></pre>
<p>Method 2: slicing and deletion:</p>
<pre><code>subset_list = target_list[:7]
del subset_list[3]
# if more than 1 items need to be skipped over, you can also delete a slice, e.g.:
# del subset_list[3:6]
</code></pre>
<p>The first method is probably more Pythonic.</p>
","1","Answer"
"78309714","78309627","<p>For N objects you have N-1 spaces, last number should be at <code>num_boxes-1</code></p>
<pre class=""lang-py prettyprint-override""><code>stepf = (num_boxes-1) / (num_objects-1)
indices = [int(i * stepf) for i in range(num_objects)]
</code></pre>
<p>To be always sure you end on the last index use</p>
<pre class=""lang-py prettyprint-override""><code>indices = [int(i / (num_objects-1) * (num_boxes-1)) for i in range(num_objects)]
</code></pre>
<p><code>i / (num_objects-1)</code> is <code>1.0</code> exact for last element, no rounding errors</p>
","0","Answer"
"78309752","78309627","<p>I am not sure if that is what you want, but you can try this:</p>
<pre><code>indices = np.round(np.linspace(0, num_boxes - 1, num_objects)).astype(int)
</code></pre>
<p>This would result in an arrangement of boxes like this for the case you mentioned:</p>
<pre><code>[ 0  6 11]
</code></pre>
","1","Answer"
"78310894","78309227","<p>Another way you can try is directly creating a condition in list comprehension.</p>
<pre><code>target_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
subset_list = [val for i,val in enumerate(target_list) if i in range(0,3) or i in range(4,7) ]
</code></pre>
<p>You can also try</p>
<pre><code>subset_list = [val for i,val in enumerate(target_list) if i not in range(3,4) and i not in range(7,len(target_list)) ]
</code></pre>
","0","Answer"
"78311772","78309627","<p>You could write a function that places the first and last indices  and then recurses to place the remaining indexes in the inside space which you can compute using an integer division.  The remainder of the division provides you with the extra space to spread progressively between positions:</p>
<pre><code>def spread(size,count,first=0):
    if count&lt;2: return [first+size//2]*count
    step,extra = divmod(size-1,count-1)
    inside     = size - 2*step - min(extra,2)
    return [first]+spread(inside,count-2,first+step+(extra&gt;0))+[first+size-1]

    
</code></pre>
<p>output:</p>
<pre><code>for c in range(1,13):
    print(c,spread(12,c))

1 [6]
2 [0, 11]
3 [0, 6, 11]
4 [0, 4, 7, 11]
5 [0, 3, 6, 8, 11]
6 [0, 3, 5, 7, 9, 11]
7 [0, 2, 4, 6, 7, 9, 11]
8 [0, 2, 4, 5, 6, 7, 9, 11]
9 [0, 2, 4, 5, 6, 7, 8, 9, 11]
10 [0, 2, 3, 4, 5, 6, 7, 8, 9, 11]
11 [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
12 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</code></pre>
<p>This will spread extra space from the outside-in (more or less centring the cluster of closer items) but you could use a different scheme if you want to have them placed differently.</p>
<p>For example, using a cumulative offset where you add one for the first items up to the extra space, which will increase spacing only on the left side of the result:</p>
<pre><code>def spread(size,count):
    if count&lt;2: return [size//2]*count
    step,extra = divmod(size-1,count-1)
    indices  =  [0]
    indices  += (indices[-1]+step+(i&lt;extra) for i in range(count-1))
    return indices
</code></pre>
<p>output:</p>
<pre><code>1 [6]
2 [0, 11]
3 [0, 6, 11]
4 [0, 4, 8, 11]
5 [0, 3, 6, 9, 11]
6 [0, 3, 5, 7, 9, 11]
7 [0, 2, 4, 6, 8, 10, 11]
8 [0, 2, 4, 6, 8, 9, 10, 11]
9 [0, 2, 4, 6, 7, 8, 9, 10, 11]
10 [0, 2, 4, 5, 6, 7, 8, 9, 10, 11]
11 [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
12 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</code></pre>
<p>You could even spread the extra space randomly:</p>
<pre><code>    from random import sample
    def spread(size,count):
        if count&lt;2: return [size//2]*count
        step,extra = divmod(size-1,count-1 or 1)
        offsets   = [step]*(count-1-extra) + [step+1]*extra
        indices   = [0]
        indices  += (indices[-1]+s for s in sample(offsets,count-1))
        return indices
</code></pre>
<p><strong>[Edit]</strong> Symetric spread from center.</p>
<p>The distribution of extra space can be done in many different ways.  To get a pretty good symmetrical distribution on the left and right side, you could use the function recursively:</p>
<pre><code>def spread(size,count):
    if count&lt;2: return [size//2]*count
    step,extra = divmod(size-1,count-1)
    chunks = [step]*(count-1)
    for i in spread(count-1,extra):
        chunks[i] += 1
    indices   = [0]
    indices  += (indices[-1]+c for c in chunks)
    return indices
</code></pre>
<p>output:</p>
<pre><code>for c in range(1,13):
    A = [&quot;_&quot;]*12
    for i in spread(12,c):
        A[i] = &quot;O&quot;
    A.insert(6,&quot;|&quot;)
    print(*A,&quot;&quot;,c,spread(12,c))

_ _ _ _ _ _ | O _ _ _ _ _  1 [6]
O _ _ _ _ _ | _ _ _ _ _ O  2 [0, 11]
O _ _ _ _ O | _ _ _ _ _ O  3 [0, 5, 11]
O _ _ _ O _ | _ O _ _ _ O  4 [0, 4, 7, 11]
O _ _ O _ _ | O _ O _ _ O  5 [0, 3, 6, 8, 11]
O _ O _ O _ | _ O _ O _ O  6 [0, 2, 4, 7, 9, 11]
O _ O _ O _ | O O _ O _ O  7 [0, 2, 4, 6, 7, 9, 11]
O _ O O _ O | O _ O O _ O  8 [0, 2, 3, 5, 6, 8, 9, 11]
O _ O O O _ | O O O O _ O  9 [0, 2, 3, 4, 6, 7, 8, 9, 11]
O _ O O O O | O O O O _ O  10 [0, 2, 3, 4, 5, 6, 7, 8, 9, 11]
O O O O O O | _ O O O O O  11 [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11]
O O O O O O | O O O O O O  12 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</code></pre>
","0","Answer"
"78312298","78312089","<p>Make a custom object eg- Params and as mentioned by @Randal Schwartz , use Equatable to ensure accurate object identity comparisons.</p>
<p>In your <code>pubspec.yml</code> file add <code>equatable</code></p>
<pre><code>dependencies:
  flutter:
    sdk: flutter
  equatable: ^2.0.5
</code></pre>
<p>Now make a custom class to pass as argument and extend it with <code>Equatable</code>. You can include any properties you want to consider when determining equality by passing them in the <code>props</code> list. In my case i just passed the whole list of string. But you can include additional properties in the class, such as another string, and include them in the <code>props</code> list for equality comparison.</p>
<pre><code>import 'package:equatable/equatable.dart';

class Params extends Equatable {
  final List&lt;String&gt; strings;

  Params(this.strings);

  @override
  List&lt;Object?&gt; get props =&gt; [strings];
}
</code></pre>
<p>When you pass arguments to Riverpod, it creates a provider for each argument. In your scenario, it generates a number of providers equal to the length of the list. <code>.family</code> . Riverpod distinguishes each provider by comparing it against its arguments using <code>==</code> to ensure provider identity. Since you passed a list, it created multiple providers with the same type but different values. So use custom object with Equatable and it will work.</p>
<p>And it's advisable to use <code>autodispose</code> when utilizing <code>family</code> in providers.</p>
","1","Answer"
"78312316","78312089","<p>From the documentation
<a href=""https://riverpod.dev/docs/concepts/about_code_generation#passing-parameters-to-a-provider-family"" rel=""nofollow noreferrer"">Passing parameters to a provider (family)</a> :</p>
<blockquote>
<p>When using code generation, we no-longer need to rely on the family modifier to pass parameters to a provider. Instead, the main function of our provider can accept any number of parameters, including named, optional, or default values.</p>
<p>Do note however that these parameters should have still have a consistent ==. Meaning either the values should be cached, or the parameters should override ==.</p>
</blockquote>
<p>The last paragraph matters to us now. Off the top of my head, the idea comes to making an immutable wrapper for the list (use freezed), or using an immutable list type (third-party packages).</p>
","0","Answer"
"78312480","78301596","<p>Just iterate through the list elements.</p>
<pre class=""lang-py prettyprint-override""><code>a = [5, 4, 3, 2, 1]
b = []

for i in range (0, len(a) - 1):
    b.append(a[i] - a[i + 1])
</code></pre>
<p>You can also start from <code>1</code> going to <code>len(a)</code> and use <code>a[i - 1] - a[i]</code> for finding the subtraction.</p>
<pre class=""lang-py prettyprint-override""><code>for i in range (1, len(a)):
    b.append(a[i - 1] - a[i])
</code></pre>
","0","Answer"
"78314789","78313832","<p>This could be as simple as appending <code>exp[a]</code> rather than <code>act[e]</code>. That will add &quot;certificate&quot; rather than &quot;certificatey&quot;.</p>
<p>By using the <code>in</code> keyword, each pass through <code>actual</code> is also a pass through <code>expected</code>. You may as well explicitly use a nested loop.</p>
<pre><code>def compare_lists(exp, act):
    temp_new = []

    range_start = 0  # ensure that elements in lists are in order
    for a in act:
        append_val = 'missing'
        for exp_idx in range(range_start, len(exp)):
            e = exp[exp_idx]
            if (e == a) or _string_partial_match(e, a):
                append_val = e
                range_start = range_start + 1
                break

        temp_new.append(append_val)

    return temp_new

def _string_partial_match(e:str, a:str):
    # return set(a.split()) &amp; set(e.split())
    return any([(ew == aw) for ew, aw in zip(e.split(), a.split())])

</code></pre>
<p>This function returns:
<code>['change of form', 'death certificate', 'authority form', 'payment form', 'lodgement form', 'supporting documentation', 'proof of authority', 'proof of executor', 'proof of identity', 'missing', 'reverse form', 'statutory declaration', 'agreements', 'transfers', 'mediators']</code></p>
<p>If it's OK for a value in the actual list to match an earlier value in the expected list, then you can do away with the <code>range_start</code> variable and just write <code>for e in exp:</code>.</p>
","1","Answer"
"78315078","78313832","<p>I'd be tempted to approach this using sets.</p>
<p>To find all the items in one set that also exist in the other, it's a one-liner, then you can finesse how you deal with those edge-cases that you might classify as being spelling vs additional values.</p>
<p>So, broadly:</p>
<pre><code>exp = ['change of form','death certificate','authority form', 'payment form','lodgement form','supporting documentation', 'proof of authority','proof of executor','proof of identity', 'reverse form','statutory declaration','agreements', 'transfers','mediators']

act = ['change of form','death certificatey', 'authority form','payment form','lodgement form','supporting documentation', 'proof of authority','proof of executor','proof of identity','proof of ownership', 'reverse form','statutory declaration','agreements','transfers','mediators']

exp_s = set(exp)
act_s = set(act)

exp_s.intersection(act_s)

&gt;&gt;  {'agreements',
    'authority form',
    'change of form',
    'lodgement form',
    'mediators',
    'payment form',
    'proof of authority',
    'proof of executor',
    'proof of identity',
    'reverse form',
    'statutory declaration',
    'supporting documentation',
    'transfers'}
</code></pre>
<p>Leaving you to classify the ones that don't match.</p>
<p>I like to use the following function to express the content of two sets I'm matching as a kind of Venn diagram:</p>
<p><a href=""https://i.sstatic.net/yIKsi.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/yIKsi.png"" alt=""enter image description here"" /></a></p>
<pre><code>def diffset(S1, S2):
    L = S1.difference(S2)
    I = S1.intersection(S2)
    R = S2.difference(S1)
    return L, I, R
</code></pre>
<pre><code>L,I,R = diffset(exp_s, act_s)
</code></pre>
<p>Which gives me 3 new sets, <code>L</code> is the items in <code>exp_s</code> that don't have a match in <code>act_s</code>, <code>I</code> contains all the &quot;good&quot; items that are in both sets, and <code>R</code> contains all those items in <code>act_s</code> that didn't have a match in <code>exp_s</code>.</p>
<p>In the data provided, this gives:</p>
<pre><code>L = {'death certificate'}

I = {'agreements',
    'authority form',
    'change of form',
    'lodgement form',
    'mediators',
    'payment form',
    'proof of authority',
    'proof of executor',
    'proof of identity',
    'reverse form',
    'statutory declaration',
    'supporting documentation',
    'transfers'}

R = {'death certificatey', 'proof of ownership'}
</code></pre>
<p>So we've got <code>I</code>, now we just need to classify the contents in <code>R</code> as being either spelling mistakes, or &quot;new&quot; items, with <code>L</code> containing the reference set of so-far unmatched items.</p>
<p>There's options here, like calculating the <a href=""https://en.wikipedia.org/wiki/Levenshtein_distance"" rel=""nofollow noreferrer""><code>Levenshtein</code></a> distance, but <a href=""https://docs.python.org/3/library/difflib.html#difflib.get_close_matches"" rel=""nofollow noreferrer""><code>difflib</code></a> has a neat and easy function for this kind of thing, so:</p>
<pre><code>spellings_s = set()
new_items_s = set()
import difflib
for r in R:
    spelling_candidates = difflib.get_close_matches(r, L)
    if len(spelling_candidates)&gt;0:
        spellings_s.add(r)
    else:
        new_items_s.add(r)
</code></pre>
<p>Which should categorise the contents of <code>R</code> into either spelling diffs, or new items.</p>
<p>So:</p>
<pre><code>spellings_s

&gt;&gt; {'death certificatey'}
</code></pre>
<p>and</p>
<pre><code>new_items_s

&gt;&gt; {'proof of ownership'}
</code></pre>
<p>There's lots of nuance you could add here, and in the above routine, I'm not removing possible matches from the option set once spelling-matches have been found, but hopefully that gives a broad outline of a possible approach.</p>
","0","Answer"
"78315594","78315483","<p>Could you please post the full code you used? I've tested it out with what I believe is the stdarray.create2D function that you're using- you forgot to include that!</p>
<p>(I suspect that the issue arises from your use of a variable 'piece' rather than a reference to a new array or other data structure. That suggests that either you're overwriting it at the wrong time, or that your code is simply not doing what you think it is.)</p>
","-1","Answer"
"78316372","78315483","<p>The only thing I can see that may be wrong about your code without the proper context is the variable piece. You may be changing piece somewhere within your code which does not change the actual matrix or changing <code>l[a][b]</code> after assigning piece and then printing out the old piece still.</p>
<p>Without the rest of the code I can't really help you.</p>
","0","Answer"
"78316834","78316557","<p>Firstly I am aware you mentioned to try and not use lamda, however I feel LINQ provides a nice solution to your problem as well as leaving it open for further functionality. I hope this example helps you understand it better.</p>
<p>Firstly I changed Rarity Enum to have values:</p>
<pre><code>public enum Rarity
{
    Common = 0,
    Uncommon = 1,
    Rare = 2,
    Epic = 3,
    Legendary = 4,
    Mythic = 5
}
</code></pre>
<p>Make sure you have this: <code>using System.Collections.Generic;</code> and <code>using System.Linq;</code></p>
<p>Here are some examples that achieve the asc and desc sorting as well as some other example that could be useful in the future:</p>
<pre><code>public static void OrderByExample()
{
    List&lt;FoodScriptableObject&gt; foodsList = new List&lt;FoodScriptableObject&gt;();//populate this list with some data

    List&lt;FoodScriptableObject&gt; foodsAsc = foodsList.OrderBy(foodItem =&gt; foodItem.Rarity).ToList();

    List&lt;FoodScriptableObject&gt; foodsDesc = foodsList.OrderByDescending(foodItem =&gt; foodItem.Rarity).ToList();

    List&lt;FoodScriptableObject&gt; orderedRarityThenName = foodsList
        .OrderBy(foodItem =&gt; foodItem.MainEffectValue)
        .ThenBy(foodItem =&gt; foodItem.name).ToList();
    
    List&lt;FoodScriptableObject&gt; furtherOrdering = foodsList
        .OrderBy(foodItem =&gt; foodItem.MainEffectValue)
        .ThenBy(foodItem =&gt; foodItem.name)
        .ThenBy(foodItem =&gt; foodItem.SubEffect).ToList();
}
</code></pre>
<p>I made a function to test this locally and seems to work perfectly, you can also then remove <code>IComparable</code> and the <code>CompareTo()</code> implementation.</p>
","0","Answer"
"78316870","78313509","<p>In the code:</p>
<pre><code>    for i in binary:
        if [i][1] == ‘1’:
            position = “west”
</code></pre>
<ul>
<li><code>[i]</code> is a single-element <code>list</code>.</li>
<li><code>[i][1]</code> attempts to access the second element of that single-element <code>list</code>.</li>
<li>Because single-element lists don't have a second element, the expression <code>[i][1]</code> will inevitably fail.</li>
<li>The highest (and lowest) valid index for a single-element array is <code>0</code>.</li>
</ul>
<p>As per <strong>Barmar</strong>'s second post, removing the square brackets is likely to fix the problem. If not, you need to debug to find out what the values of <code>i</code> are.</p>
<p>It could also be useful to add some length-checking to be sure that each value of <code>i</code> is adequately long.</p>
","0","Answer"
"78317202","78316557","<p>The standard interface for sorting is <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1?view=net-8.0"" rel=""nofollow noreferrer""><code>IComparer&lt;T&gt;</code></a>. This is generic, so you have type safety, and it allow for multiple implementations to sort your items in different ways:</p>
<pre><code>class FoodRarityComparer: IComparer&lt;FoodScriptableObject&gt;
{
    public int Compare(FoodScriptableObject x, FoodScriptableObject y)
    {
        if (ReferenceEquals(x, y)) return 0;
        if (ReferenceEquals(null, y)) return 1;
        if (ReferenceEquals(null, x)) return -1;
        return x.Rarity.CompareTo(y.Rarity);
    }
}
</code></pre>
<p>If you want to flip the sort order, just flip x and y. If you want to sort by multiple properties you can check if <code> x.Rarity.CompareTo(y.Rarity) == 0</code>, and then compare the next property. Just make sure to follow the <a href=""https://devblogs.microsoft.com/oldnewthing/20031023-00/?p=42063"" rel=""nofollow noreferrer"">rules of sorting</a>.</p>
<p>You can sort a list by <code>foodList.Sort(new FoodRarityComparer())</code> and an array by <code>Array.Sort(foodArray, new FoodRarityComparer() )</code></p>
<p>Note that List.Sort and Array.Sort are in-place sorts and not stable. <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby?view=net-8.0"" rel=""nofollow noreferrer"">Linq.OrderBy</a> is not in-place, but stable, and tend to be easier to use than having to create a bunch of comparer objects.</p>
","0","Answer"
"78319008","78318980","<p>Here's a way:</p>
<pre class=""lang-py prettyprint-override""><code>d1 = [{'type': 'excel_macro', 'Name': 'Nuevo Diseño de Registro de nominas.xlsm'}, {'type': 'pdf', 'Name': 'Presentación oferta comercial Nómina.pdf'}]
d2 = [{'id': 35630898}, {'id': 35630899}]

# union operator(|) supported for dicts as of Python 3.9.
result = [a | b for a, b in zip(d1, d2)]
print(result)
</code></pre>
<p>Output:</p>
<pre><code>[{'type': 'excel_macro', 'Name': 'Nuevo Diseño de Registro de nominas.xlsm', 'id': 35630898}, {'type': 'pdf', 'Name': 'Presentación oferta comercial Nómina.pdf', 'id': 35630899}]
</code></pre>
","1","Answer"
"78319054","78318980","<p>Ignoring that the items in the lists are dictionaries, the zip method will iterate through items in several sequences. Combining the dictionaries can be done using the unpacking operator (**).</p>
<pre><code>a = [{'type': 'excel_macro', 'Name': 'Nuevo Diseño de Registro de nominas.xlsm'}, {'type': 'pdf', 'Name': 'Presentación oferta comercial Nómina.pdf'}]  
b = [{'id': 35630898}, {'id': 35630899}]

combined_list = []
for x, y in zip(a, b):
  combined_list.append({**x, **y})
</code></pre>
<p><code>combined_list</code> will be:</p>
<pre><code>[{'type': 'excel_macro',
  'Name': 'Nuevo Diseño de Registro de nominas.xlsm',
  'id': 35630898},
 {'type': 'pdf',
  'Name': 'Presentación oferta comercial Nómina.pdf',
  'id': 35630899}]
</code></pre>
","1","Answer"
"78319773","78319574","<h1>Understanding the Problem</h1>
<p>The big problem is that <code>arr</code> is being copied potentially 100,000 and it may be of size 100,000 (<strong>O(n^2)</strong>). When you do slicing and pass the slice, Python will create a copy of the old one and send that to the new function call. I ran this on my computer with 64 GB of ram, and I ran out of memory.</p>
<h1>The Solution</h1>
<p>It seems weird for this problem to need to be recursive because <code>sum(arr[-m:])</code> is so simple, but can make it recursive and save memory by avoiding copying the array by not slicing into it.</p>
<pre class=""lang-py prettyprint-override""><code>def suffix_sum(arr,m):
    if m&lt;=0:
        return 0
    else:
        return arr[len(arr) - m] + suffix_sum(arr, m - 1)
</code></pre>
<p>Even though it recurs many times, it's still decently fast.</p>
<p><strong>Note:</strong> I had to run this with Python 3.11 because 3.10 and 3.9 can't recur that much without seg-faulting.</p>
","1","Answer"
"78320081","78319574","<p>Slicing costs memory: each slice is a new list. So you should avoid slicing and only use indexing to retrieve the values you need.</p>
<p>As 𝑚 could be as large as 10<sup>5</sup>, you'll want to avoid a recursion depth of O(𝑚). You can achieve that by partitioning the problem into halves, making two recursive calls, where to each you provide <em>two</em> indices defining the section of the list to sum up. This second index could also be a distance from the end of the input list, so it has a similar meaning as <code>m</code> and can get a default value of <code>1</code>:</p>
<pre><code>def suffix_sum(lst, m, last=1):
    if m == last:
        return lst[-m]
    mid = (m + last) // 2
    return suffix_sum(lst, m, mid + 1) + suffix_sum(lst, mid, last)
</code></pre>
<p>Now the recursion depth will be ⌈log<sub>2</sub>𝑚⌉, which for the worst case of 𝑚=10<sup>5</sup> will be 17.</p>
<p>Note that the base case relies on the fact that 𝑚 will be at least 1.</p>
","2","Answer"
"78320347","78320292","<p>Answering the original question before the edit:</p>
<blockquote>
<p>From what I understand a streaming approach should be used here. But I don't understand how to do this using e.g. the <code>list-t</code> package.</p>
</blockquote>
<p>You can use regular lists if your monad is sufficiently lazy:</p>
<pre class=""lang-hs prettyprint-override""><code>import Control.Monad (filterM)
import Control.Monad.Trans.State.Lazy (State, get)
import Data.Set (Set, member)

filterStateLazy :: Ord a =&gt; [a] -&gt; State (Set a) [a]
filterStateLazy = filterM $ \x -&gt; do
    s &lt;- get
    pure $ x `member` s

-- &gt;&gt;&gt; import Control.Monad.Trans.State.Lazy (evalState)
-- &gt;&gt;&gt; import qualified Data.Set as Set
-- &gt;&gt;&gt; take 5 . evalState (filterStateLazy [1..]) $ Set.fromList [1, 6, 22, 39, 54]
-- [1,6,22,39,54]
</code></pre>
<p>If you really want <code>ListT</code> though, you can use it as well and you won't need a lazy monad:</p>
<pre class=""lang-hs prettyprint-override""><code>{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE LambdaCase #-}

import ListT
import Control.Monad.State.Strict
import Data.Set (Set, member)

filterStateLazy :: (MonadState (Set a) m, Ord a) =&gt; ListT m a -&gt; ListT m a
filterStateLazy (ListT run) = ListT $ run &gt;&gt;= \case
    Nothing -&gt; return Nothing
    Just (x, rest) -&gt; do
        s &lt;- get
        if x `member` s
            then pure $ Just (x, filterStateLazy rest)
            else uncons $ filterStateLazy rest

-- &gt;&gt;&gt; import Control.Monad.Trans.State.Lazy (evalState)
-- &gt;&gt;&gt; import qualified ListT as ListT
-- &gt;&gt;&gt; import qualified Data.Set as Set
-- &gt;&gt;&gt; evalState (ListT.toList . ListT.take 5 . filterStateLazy $ ListT.fromFoldable [1..]) $ Set.fromList [1, 6, 22, 39, 54]
-- [1,6,22,39,54]
</code></pre>
","4","Answer"
"78320770","78315483","<p>I sort of figured it out, or rather, I found where my error is. I tried changing l[9][9] = b, and printed it out and the board had b's only. Meaning I made a mistake in my loop and 'piece' refers to l[9][9] only and I was not looping through l. So my program was using one object l[9][9] in the list and not all the objects in the list.</p>
<p>I guess using a list with different objects (instead of one with c's only) would have helped me see this sooner</p>
","0","Answer"
"78321364","78313509","<p>Problems in this code:</p>
<ol>
<li>You tried to use [i][1] to get a character from a string inside a list. This is incorrect because it looks like you're trying to use i as if it's already a string, but it's meant to be an index (a number telling the position of something in the list).</li>
<li>lines like &quot;none&quot; == 4 don't do anything useful. They just compare a word to a number, which won't change or set any values.</li>
<li>You missed some colons (:) and quotes in your if statements</li>
</ol>
<p>To fix:</p>
<pre><code>def set_directions(binary):
  directions_list = []
    for binary_string in binary: 
      position = []
      if len(binary_string) &gt; 1 and binary_string[1] == '1':
         position.append(&quot;west&quot;)
      if len(binary_string) &gt; 2 and binary_string[2] == '1':
         position.append(&quot;south&quot;)
      if len(binary_string) &gt; 3 and binary_string[3] == '1':
         position.append(&quot;east&quot;)
      if len(binary_string) &gt; 4 and binary_string[4] == '1':
         position.append(&quot;north&quot;)
      else: 
         position.append(0)
      directions_list.append(position)
   return directions_list
        
</code></pre>
","0","Answer"
"78321861","78320292","<p>While @effectfully's answer works fine, you're probably looking for <code>mfilter</code> from <code>Control.Monad</code>:</p>
<pre><code>func :: (MonadPlus m, MonadState (Set a) m, Ord a) =&gt; m a -&gt; m a
func act = do
  st &lt;- get
  mfilter (`Set.notMember` st) act
</code></pre>
<p>If your filtering function is itself monadic, then you might need to define your own:</p>
<pre><code>mfilterM :: (MonadPlus m) =&gt; (a -&gt; m Bool) -&gt; m a -&gt; m a
mfilterM f act = do
  a &lt;- act
  b &lt;- f a
  if b then pure a else empty
</code></pre>
<p>which, for example, would let you write a function that filters out the list of values seen so far, keeping the set of previous values in the state:</p>
<pre><code>unique :: (MonadPlus m, MonadState (Set a) m, Ord a) =&gt; m a -&gt; m a
unique = mfilterM firstTime
  where firstTime x = do
          isnew &lt;- gets (Set.notMember x)
          when isnew $ modify (Set.insert x)
          pure isnew
</code></pre>
<p>In context, and borrowing @effectfully's example:</p>
<pre><code>import ListT
import Control.Monad
import Control.Monad.State
import Control.Applicative
import Data.Set (Set)
import qualified Data.Set as Set

func1 :: (MonadPlus m, MonadState (Set a) m, Ord a) =&gt; m a -&gt; m a
func1 act = do
  st &lt;- get
  mfilter (`Set.notMember` st) act

mfilterM :: (MonadPlus m) =&gt; (a -&gt; m Bool) -&gt; m a -&gt; m a
mfilterM f act = do
  a &lt;- act
  b &lt;- f a
  if b then pure a else empty

unique :: (MonadPlus m, MonadState (Set a) m, Ord a) =&gt; m a -&gt; m a
unique = mfilterM firstTime
  where firstTime x = do
          isnew &lt;- gets (Set.notMember x)
          when isnew $ modify (Set.insert x)
          pure isnew

runM :: ListT (State (Set a)) a -&gt; Set a -&gt; [a]
runM act state0 = evalState (ListT.toList act) state0

main :: IO ()
main = do
  print $ runM (ListT.take 5 . func1 . ListT.fromFoldable $ [1..]) (Set.fromList [1,6,22,39,54])
  print $ runM (unique . ListT.fromFoldable $ [1,2,3,4,5,1,3,6,5,7]) (Set.empty)
</code></pre>
","4","Answer"
"78322163","78321875","<p>IIUC, you want an <em>alternating</em> <a href=""https://docs.python.org/3/library/functions.html#sorted"" rel=""nofollow noreferrer""><code>sorted</code></a> :</p>
<pre><code>from itertools import groupby, chain

out = list(
    chain.from_iterable(
        sorted(g, reverse=not i % 2)
        for i, (_, g) in enumerate(groupby(sorted(data), lambda t: t[0]))
    )
)
</code></pre>
<p>Output (<em>made with matplotlib/shapely, see <a href=""https://pastebin.com/raw/5Vaxd5pK"" rel=""nofollow noreferrer"">full code</a></em>):</p>
<p><a href=""https://i.sstatic.net/HXHJ5.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/HXHJ5.png"" alt=""enter image description here"" /></a></p>
<p>Used input :</p>
<pre><code># doesn't need to be sorted in any way

data = [
    (102, 102), (102, 206), (102, 310), (102, 414), (102, 518), 
    (193, 154), (193, 258), (193, 362), (193, 466), 
    (285, 102), (285, 206), (285, 310), (285, 414), (285, 518), 
    (376, 154), (376, 258), (376, 362), (376, 466), 
    (468, 102), (468, 206), (468, 310), (468, 414), (468, 518), 
    (559, 154), (559, 258), (559, 362), (559, 466)
]
</code></pre>
","2","Answer"
"78322238","78321875","<p>If I understand u clearly, you want to reverse for even rows. I tried to keep time complexity O(n) (it comes <strong>O(rows*cols)</strong> where rows*colms ≈ len(stored_seed_positions)) and I kept space complexity O(1).</p>
<p>Firstly, I checked if it is even rows or not. If it is then add <code>rows</code> to <code>s</code>. <code>s</code> is the index counter. If not I  switched list items by using a pointer.</p>
<pre><code>def zigzag_positions(cols, rows, stored_seed_positions):
    
    s=0    
    for i in range(int(cols)):
        if i%2 !=0:
            right = s+3
            while s&lt;right and right&lt;len(stored_seed_positions):
                stored_seed_positions[s],stored_seed_positions[right] =stored_seed_positions[right],stored_seed_positions[s]
                s+=1
                right-=1
            s += (rows-1) // 2 if (rows-1) % 2 == 0 else (rows-1) // 2 + 1
        else:
            s+=rows
        
                
    return stored_seed_positions
</code></pre>
<p>Output is like :</p>
<pre><code>[(102, 102), (102, 206), (102, 310), (102, 414), (102, 518), 
(193, 466), (193, 362), (193, 258), (193, 154),
(285, 102), (285, 206), (285, 310), (285, 414), (285, 518),
(376, 466), (376, 362), (376, 258), (376, 154),
(468, 102), (468, 206), (468, 310), (468, 414), (468, 518),
(559, 466), (559, 362), (559, 258), (559, 154)]
</code></pre>
","1","Answer"
"78325624","78325531","<p>Here's something that might fit your requirements.</p>
<p><em>code00.py</em>:</p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python

import sys
from typing import Any


def insert_fill(lst: list, index: int, element: Any, fill: Any = None):
    if index &lt; len(lst):
        lst.insert(index, element)
        return
    lst += [fill] * (index - len(lst))
    lst.append(element)


def main(*argv):
    l = []
    insert_fill(l, 2, &quot;two&quot;)
    insert_fill(l, 10, &quot;ten&quot;)
    print(l)
    insert_fill(l, 1, &quot;one&quot;)
    print(l)


if __name__ == &quot;__main__&quot;:
    print(
        &quot;Python {:s} {:03d}bit on {:s}\n&quot;.format(
            &quot; &quot;.join(elem.strip() for elem in sys.version.split(&quot;\n&quot;)),
            64 if sys.maxsize &gt; 0x100000000 else 32,
            sys.platform,
        )
    )
    rc = main(*sys.argv[1:])
    print(&quot;\nDone.\n&quot;)
    sys.exit(rc)
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre class=""lang-py prettyprint-override""><code>(py_pc064_03.10_test0) [cfati@cfati-5510-0:/mnt/e/Work/Dev/StackExchange/StackOverflow/q078325531]&gt; python ./code00.py 
Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] 064bit on linux

[None, None, 'two', None, None, None, None, None, None, None, 'ten']
[None, 'one', None, 'two', None, None, None, None, None, None, None, 'ten']

Done.
</code></pre>
</blockquote>
","0","Answer"
"78327956","78325531","<p>I think this might be the shortest way of doing this.</p>
<pre><code>def insert_into_list(orig_list: list, index: int, element: str) -&gt; None:
    orig_list.extend([None] * (index - len(orig_list)))
    orig_list.insert(index, element)
</code></pre>
<p>In case of</p>
<pre><code>msg: list = []
insert_into_list(msg, 2, &quot;two&quot;)  # msg = [None, None, &quot;two&quot;]
</code></pre>
<p>It extends the original list with <code>[None] * (2 - 0)</code> = <code>[None, None]</code> and in case of</p>
<pre><code>msg: list = [None, None, &quot;two&quot;]
insert_into_list(msg, 10, &quot;ten&quot;)  # msg = [None, None, &quot;two&quot;, None, None, None, None, None, None, None, &quot;ten&quot;]
</code></pre>
<p>It extends the original list with <code>[None] * (10 - 3)</code>.</p>
<p>However, when the list is longer, than the index, it will multiply <code>[None]</code> with a negative number and result in an empty list, which will effectively only insert the element normally.</p>
<p>Hope that helped.</p>
","0","Answer"
"78329126","78329057","<p>here's some of my code used in advent of code 2023</p>
<p><a href=""https://github.com/kenzo251/aoc-2023/blob/main/day5/range_intersect.py"" rel=""nofollow noreferrer"">source</a></p>
<pre><code>def intersect(l1, l2):
    min_intersect = max(l1[0],l2[0]) # lower bound of intersect
    max_intersect = min(l1[1],l2[1]) #upper bound of intersect
    if min_intersect&gt;max_intersect:
        return tuple() #same number intersect still included
    return (min_intersect,max_intersect)

for x,y in zip(exons_array, bins_list):
    print(intersect(x,y))
</code></pre>
<p>your first case seems to return the right values (excuse me if i'm running the intersections incorrectly); an empty tuple is returned if no intersect exists, in that case you should filter out that tuple</p>
","0","Answer"
"78329732","78329057","<p>I think you want to first exclude a bin/exon pair that don't overlap then for those that do, you want to find the minimum intersection between the ranges.</p>
<pre class=""lang-py prettyprint-override""><code>exons_array = [[7669608, 7670307]]
bins_list =   [[7669608, 7669690]]
valid_interval = []
for exon_start, exon_end in exons_array:
    for bin_start, bin_end in bins_list:
        ## -------------------
        ## this exon falls outside this bin
        ## -------------------
        if bin_start &gt; exon_end or bin_end &lt; exon_start:
            continue
        ## -------------------

        ## -------------------
        ## this exon is (partially) in this bin
        ## -------------------
        valid_interval.append((max(exon_start, bin_start), min(exon_end, bin_end)))
        ## -------------------

        ## -------------------
        ## we binned this exon so switch to the next one.
        ## -------------------
        break
        ## -------------------

print(valid_interval)
</code></pre>
<p>Giving you:</p>
<pre><code>[(7669608, 7669690)]
</code></pre>
","0","Answer"
"78335234","78251695","<p>If I find myself doing much with <code>Random</code> I tend to find myself writing extension methods to abstract away the intricacies.</p>
<p>So, for example, this:</p>
<pre><code>public static class RandomExtensions
{
    [ThreadStatic] private static Random __random = new Random();
    public static T Sample&lt;T&gt;(this T[] source) =&gt; source[__random.Next(source.Length)];
    public static T Sample&lt;T&gt;(this List&lt;T&gt; source) =&gt; source[__random.Next(source.Count)];
}
</code></pre>
<p>No I can easily write code like this:</p>
<pre><code>Item item = List.Sample();
</code></pre>
<p>Or this:</p>
<pre><code>int item = new [] { 2, 3, 4, 5, 6, 7, 8, 9, 15, }.Sample();
</code></pre>
<p>Now I feel my code is more readable with the work <code>Sample</code> meaning &quot;take a random sample from this list or array&quot;.</p>
<p>I then tend to go future and define <code>Samples</code> to give me a stream of samples from my source. It becomes very handy when trying to get a set of values.</p>
<pre><code>public static IEnumerable&lt;T&gt; Samples&lt;T&gt;(this T[] source) { while (true) yield return source.Sample(); }
public static IEnumerable&lt;T&gt; Samples&lt;T&gt;(this List&lt;T&gt; source) { while (true) yield return source.Sample(); }
</code></pre>
<p>That then means I can do things like:</p>
<pre><code>List&lt;int&gt; items = new[] { 2, 3, 4, 5, 6, 7, 8, 9, 15, }.Samples().Take(5).ToList();
</code></pre>
<p>And if I don't want repeating values then I add these:</p>
<pre><code>public static IEnumerable&lt;T&gt; Selection&lt;T&gt;(this IEnumerable&lt;T&gt; source)
    =&gt; source.OrderBy(x =&gt; __random.Next());
</code></pre>
<p>Now I can write:</p>
<pre><code>List&lt;int&gt; items = new[] { 2, 3, 4, 5, 6, 7, 8, 9, 15, }.Selection().Take(5).ToList();
</code></pre>
","0","Answer"
"78337010","78336917","<p>@Barmar's comment explains it well.</p>
<p>Assuming that <code>words</code> is your list, your code would look something like this:</p>
<pre class=""lang-py prettyprint-override""><code>latest_count = 1
new_words = []

for word in words:
    if word == &quot;latest.png&quot;:
        new_words.append(f&quot;latest{latest_count}.png&quot;)
        latest_count += 1
    else:
        new_words.append(word)
</code></pre>
<p><code>new_words</code> will contain your updated list and you will still have your original list.</p>
","1","Answer"
"78337025","78336917","<p>Try something like this:</p>
<pre><code>lst = ['hello world', 'latest.png', 'have a good day', 'stack overflow', 'the best'  
 'latest .png', 'i believe somebody will help me', 'latest.png', 'latest.png']

num_latest = 1

for i in range(len(lst)):
    if (lst[i] == 'latest.png'):
        temp = lst[i].split('.')
        lst[i] = temp[0] + str(num_latest) + '.' + temp[1]
        num_latest = num_latest + 1

print(lst)
</code></pre>
<p>The output:</p>
<pre><code>['hello world', 'latest1.png', 'have a good day', 'stack overflow', 'the bestlatest .png', 'i believe somebody will help me', 'latest2.png', 'latest3.png']
</code></pre>
","0","Answer"
"78337037","78336917","<pre class=""lang-py prettyprint-override""><code>def replace_repetitions(my_list):
    new_list = []
    word_counts = {}
    for word in my_list:
        base_word, extension = split_with_extension(word)
        if base_word in word_counts:
            count = word_counts[base_word] + 1
            word_counts[base_word] = count
            new_list.append(f&quot;{base_word}{count}{extension}&quot;)
        else:
            word_counts[base_word] = 1
            new_list.append(word)
    return new_list

def split_with_extension(word):
    parts = word.rsplit(&quot;.&quot;, 1)
    if len(parts) == 1:
        return word, &quot;&quot;
    else:
        return parts[0], &quot;.&quot; + parts[1]

trial = ['hello world', 'latest.png', 'have a good day', 'stack overflow', 'the best', 'latest.png',
     'i believe somebody will help me', 'latest.png', 'latest.png', 'the best']
print(replace_repetitions(trial))
</code></pre>
<p>This will help you with scenario as well as it will take care if you have a filename with extension in list. This is generic so it will also work if you have any other word that is repeated in list.</p>
<p>Example in below output <code>latest.png</code> as well aas <code>the best</code> is repeated:</p>
<pre><code>['hello world', 'latest.png', 'have a good day', 'stack overflow', 'the best', 'latest2.png', 'i believe somebody will help me', 'latest3.png', 'latest4.png', 'the best2']
</code></pre>
<p>If you want to do this for a specific word only like for example avoid <code>the best</code> and only consider <code>latest.png</code> then add <code>if condition</code> in for loop</p>
","1","Answer"
"78337066","78336917","<p>The easiest way would be to check if the word is &quot;latest.png&quot; and keep a counter.</p>
<pre><code>c = 1 
for i in range(len(x)):
    if x[i] == 'latest.png':
        x[i] = f&quot;latest{c}.png&quot;
        c += 1
</code></pre>
<p>This should change your every &quot;latest.png&quot; to counter value i.e &quot;latest1.png&quot; and so on.</p>
","1","Answer"
"78338301","78338196","<p>Try using double brackets instead of single ones.</p>
<pre><code>L &lt;- list(&quot;audrey&quot;, 19, TRUE)
L[[&quot;new&quot;]] &lt;- c(1,2,3)
</code></pre>
<p>This should work because single brackets are used to subset, while double brackets are used for extracting or replacing
I hope this helps</p>
","2","Answer"
"78338652","78338196","<p>In addition to the method posted by @Edward and @Blessing (<code>L1</code>) here two other methods. The second uses <code>c</code> to combine two lists, and the third converts the vector first to a list before using single brackets:</p>
<pre class=""lang-r prettyprint-override""><code>L1 &lt;- list(&quot;audrey&quot;, 19, TRUE)
L1[[&quot;new&quot;]] &lt;- c(1, 2, 3)

L2 &lt;- list(&quot;audrey&quot;, 19, TRUE)
L2 &lt;- c(L2, new = list(c(1, 2, 3)))

L3 &lt;- list(&quot;audrey&quot;, 19, TRUE)
L3[&quot;new&quot;] &lt;- list(c(1, 2, 3))
</code></pre>
","2","Answer"
"78340510","78340225","<p>Below code will solve your problem.</p>
<pre class=""lang-ballerina prettyprint-override""><code>import ballerina/lang.array;
import ballerina/io;

public function main() {
    string[] array = [&quot;abcd-4&quot;, &quot;abcd-1&quot;, &quot;abcd-3&quot;, &quot;abcd-2&quot;];

    string[] sortedArray = array.sort(array:DESCENDING, isolated function (string a) returns  string {
        return re `-`.split(a)[1];
    });

    io:println(sortedArray);
}
</code></pre>
<p>If you want to use a custom sorting logic, you can pass an isolated function as an argument to the same <code>sort()</code> function.</p>
","0","Answer"
"78342922","78340225","<p>Here is another way to meet your requirements using language-integrated query expressions.</p>
<pre><code>import ballerina/lang.regexp;

public function main() {
    string[] arr = [&quot;abcd-4&quot;, &quot;abcd-1&quot;, &quot;abcd-3&quot;, &quot;abcd-2&quot;];

    regexp:RegExp regex = re `-`;
    string[] sorted = from var e in arr
        let var k = regex.split(e)[1]
        order by k descending
        select e;

    io:println(sorted);
}
</code></pre>
","4","Answer"
"78343813","78343747","<p>IIUC, you can do:</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;your_file.txt&quot;, &quot;r&quot;) as f_in:
    cnt = 1
    for line in f_in:
        if &quot;latest&quot; in line:
            line = line.replace(&quot;latest&quot;, f&quot;latest{cnt}&quot;)
            cnt += 1
        print(line.strip())
</code></pre>
<p>Prints:</p>
<pre class=""lang-none prettyprint-override""><code>&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/north-pole/d-rap/`latest1`.png&quot;,
&quot;httpVersion&quot;: &quot;http/2.0&quot;,
&quot;headers&quot;: [
{
&quot;name&quot;: &quot;:authority&quot;,
&quot;value&quot;: &quot;services.swpc.noaa.gov&quot;
},
{
&quot;name&quot;: &quot;:method&quot;,
&quot;value&quot;: &quot;HEAD&quot;
},
{
&quot;name&quot;: &quot;:path&quot;,
&quot;value&quot;: &quot;/images/animations/d-rap/north-pole/d-rap/`latest2`.png&quot;
&quot;url&quot;: &quot;https://services.swpc.noaa.gov/images/animations/d-rap/global_f05/d-rap/`latest3`.png&quot;,
&quot;httpVersion&quot;: &quot;http/2.0&quot;,
&quot;headers&quot;: [
{
&quot;name&quot;: &quot;:authority&quot;,
&quot;value&quot;: &quot;services.swpc.noaa.gov&quot;
},
{
&quot;name&quot;: &quot;:method&quot;,
&quot;value&quot;: &quot;HEAD&quot;
},
{
&quot;name&quot;: &quot;:path&quot;,
&quot;value&quot;: &quot;/images/animations/d-rap/global_f05/d-rap/`latest4`.png&quot;
},
{
&quot;name&quot;: &quot;:scheme&quot;,
&quot;value&quot;: &quot;https&quot;
},
{
&quot;name&quot;: &quot;accept&quot;,
&quot;value&quot;: &quot;*/*&quot;
},
{
&quot;name&quot;: &quot;accept-encoding&quot;,
&quot;value&quot;: &quot;gzip, deflate, br&quot;

</code></pre>
","2","Answer"
"78343817","78343747","<p>Maybe the code below can help you out:</p>
<pre><code>def update_latest(lst):
    count_latest = 0
    updated_list = []

    for item in lst:
        if &quot;latest&quot; in item:
            count_latest += 1
            updated_list.append(&quot;latest{}{}&quot;.format(count_latest, item[6:]))
        else:
            updated_list.append(item)

    return updated_list

updated_list = update_latest(b)
print(updated_list)
</code></pre>
<p>For instance, given the input list <code>[&quot;latestsjfgjhgf&quot;, &quot;wyrt&quot;, &quot;latestfgjhgf&quot;]</code>, the function above yields <code>['latest1sjfgjhgf', 'wyrt', 'latest2fgjhgf']</code>.</p>
<p>Hope this helped! And may the code be with you...</p>
","1","Answer"
"78344836","78344750","<p>You can use <code>str.replace</code> to replace certain substrings with others.</p>
<p>For your example you could do</p>
<pre class=""lang-py prettyprint-override""><code>txt.replace(&quot;stack_overflow_is_used_for_queries&quot;, &quot;best_search_for_queries&quot;)
   .replace(&quot;stack_overflow&quot;, &quot;search_site&quot;)
   ...
</code></pre>
<p>and so on for all the strings you want to replace.</p>
<p>You can read more about <code>str.replace</code> on <a href=""https://www.w3schools.com/python/ref_string_replace.asp"" rel=""nofollow noreferrer"">W3 schools</a></p>
","-1","Answer"
"78344867","78344750","<p>Use python string find() and replace() methods according to your code.</p>
","0","Answer"
"78347019","78346963","<p>You can use <code>pathlib.Path</code> and <code>collections.Counter</code> to do this.</p>
<pre><code>from pathlib import Path
from collections import Counter

def count_ext(file_list: list[str]):
    return dict(Counter(Path(f).suffix.lstrip('.') for f in file_list))
</code></pre>
","2","Answer"
"78347105","78346963","<p>You <em>could</em> (not <em>should</em>) do this without any imported modules as follows:</p>
<pre><code>def count_file_types(filenames: list[str]) -&gt; dict[str, int]:
    result = {}
    for filename in filenames:
        suffix = filename.split(&quot;.&quot;)[-1]
        result[suffix] = result.get(suffix, 0) + 1
    return result

print(count_file_types([&quot;image1.jpg&quot;, &quot;image2.jpg&quot;, &quot;preso.pptx&quot;]))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'jpg': 2, 'pptx': 1}
</code></pre>
<p><strong>Note:</strong></p>
<p>For the sample data given in the question, this is significantly faster than the (arguably) more Pythonic approach proposed by @James</p>
","1","Answer"
"78347252","78346709","<p>Maybe you can try a hack using <a href=""https://docs.python.org/3/library/functions.html#eval"" rel=""nofollow noreferrer""><code>eval()</code></a>.</p>
<p>Depending on how much you trust your users you add some restrictions to the global and local variables they have access to, but if it is just trusted internal users just 🚢 it:</p>
<pre><code>from collections.abc import Sequence
from typing import Any


def query_data(data: Sequence[tuple[Any, ...]],
               condition: str) -&gt; Sequence[tuple[Any, ...]]:
  &quot;&quot;&quot;Returns a list of tuples that match the passed in condition.&quot;&quot;&quot;
  return [row for row in data if eval(condition)]


csv_data = [
    (1, 2, 3, 4, 5),
    (1, 2, 3, 5, 5),
    (10, 9, 8, 7, 6),
    ('Alice', None, 'Bob', 0, -1),
    ('Bob', 'Alice', 'Charlie', 0, 1),
    ('Daniel', None, 'Evan', 1, 0),
]
print(f&quot;&quot;&quot;{query_data(csv_data, 'row[1] == 2 and row[3] != 5') = }&quot;&quot;&quot;)
print(f&quot;&quot;&quot;{query_data(csv_data, 'row[0] == &quot;Bob&quot; and row[1] is not None and row[3] &gt;= 0') = }&quot;&quot;&quot;)
print(f&quot;&quot;&quot;{query_data(csv_data, 'row[4] &gt; 0') = }&quot;&quot;&quot;)
print(f&quot;&quot;&quot;{query_data(csv_data, 'isinstance(row[0], str) and row[0].startswith(&quot;A&quot;)') = }&quot;&quot;&quot;)
print(f&quot;&quot;&quot;{query_data(csv_data, 'row[1] == None') = }&quot;&quot;&quot;)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>query_data(data, 'row[1] == 2 and row[3] != 5') = [(1, 2, 3, 4, 5)]
query_data(data, 'row[0] == &quot;Bob&quot; and row[1] is not None and row[3] &gt;= 0') = [('Bob', 'Alice', 'Charlie', 0, 1)]
query_data(data, 'row[4] &gt; 0') = [(1, 2, 3, 4, 5), (1, 2, 3, 5, 5), (10, 9, 8, 7, 6), ('Bob', 'Alice', 'Charlie', 0, 1)]
query_data(data, 'isinstance(row[0], str) and row[0].startswith(&quot;A&quot;)') = [('Alice', None, 'Bob', 0, -1)]
query_data(data, 'row[1] == None') = [('Alice', None, 'Bob', 0, -1), ('Daniel', None, 'Evan', 1, 0)]
</code></pre>
","0","Answer"
"78347295","78346963","<p>perhaps another, more compact approach</p>
<pre><code>def count_file_ext(file_list):
    ext_list = [ext.split('.')[-1] for ext in file_list]
    return {ext:ext_list.count(ext) for ext in set(ext_list)}
</code></pre>
","1","Answer"
"78347303","78346709","<p>Here's the outline of a simple solution. Assuming that the CSV file is loaded into a list of dictionaries representing rows, each dictionary maps column headers to corresponding values.</p>
<pre class=""lang-py prettyprint-override""><code>def dynamic_query(rows, conditions):
    &quot;&quot;&quot;
    Perform a dynamic query on the list of rows based on specified conditions.
    conditions is a list of tuples, where each tuple contains (column_name, operator, value).
    &quot;&quot;&quot;
    filtered_rows = []
    for row in rows:
        if all(compare(row.get(col_name), op, value) for col_name, op, value in conditions):
            filtered_rows.append(row)
    return filtered_rows

def compare(value, op, target):
    &quot;&quot;&quot;
    Compare value with target based on the specified operator.
    Supported operators: &quot;==&quot;, &quot;!=&quot;, &quot;&gt;&quot;, &quot;&lt;&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;notnull&quot;, &quot;null&quot;.
    &quot;&quot;&quot;
    if op == &quot;==&quot;:
        return value == target
    elif op == &quot;!=&quot;:
        return value != target
    elif op == &quot;&gt;&quot;:
        return value &gt; target
    elif op == &quot;&lt;&quot;:
        return value &lt; target
    elif op == &quot;&gt;=&quot;:
        return value &gt;= target
    elif op == &quot;&lt;=&quot;:
        return value &lt;= target
    elif op == &quot;notnull&quot;:
        return value is not None
    elif op == &quot;null&quot;:
        return value is None
    else:
        raise ValueError(f&quot;Unsupported operator: {op}&quot;)
</code></pre>
<p>Example queries as described in the question using lists of tuples:</p>
<pre class=""lang-py prettyprint-override""><code>query1 = [(&quot;column1&quot;, &quot;==&quot;, 2), (&quot;column3&quot;, &quot;!=&quot;, &quot;5&quot;)]
query2 = [(&quot;column6&quot;, &quot;==&quot;, &quot;Bob&quot;), (&quot;column7&quot;, &quot;notnull&quot;, &quot;&quot;), (&quot;column12&quot;, &quot;&gt;=&quot;, &quot;0&quot;)]

# Perform queries
result1 = dynamic_query(rows, query1)
result2 = dynamic_query(rows, query2)
</code></pre>
<p>The results returned are the list of rows matching the conditions.</p>
","0","Answer"
"78351224","78351035","<p>This is a graph theory problem - you can think of each of your values as a node of a graph, and if they occur in the same row then there is an edge connecting the nodes. Your goal is to list the connected components (or clusters).</p>
<p>We can then use the <code>igraph</code> package to do the work:</p>
<pre><code>components = Y |&gt; graph_from_edgelist() |&gt; components() |&gt; groups()
# $`1`
# [1] 1 3
#
# $`2`
# [1]  2  4  5  9 10
#
# $`3`
# [1] 6 7 8
</code></pre>
","6","Answer"
"78351616","78351035","<p>Here is a solutions based on <a href=""https://stackoverflow.com/a/78351224/8245406"">Gregor's idea</a>. It uses the property that <code>order()</code> is its own inverse function to rearrange the graphs components.</p>
<pre class=""lang-r prettyprint-override""><code>y &lt;- c(6, 8, 2, 5, 2 ,10, 4, 10, 7, 8, 4, 9, 1, 3)
Y &lt;- matrix(y, ncol = 2, byrow = TRUE)

library(igraph)
#&gt; 
#&gt; Attaching package: 'igraph'
#&gt; The following objects are masked from 'package:stats':
#&gt; 
#&gt;     decompose, spectrum
#&gt; The following object is masked from 'package:base':
#&gt; 
#&gt;     union

g &lt;- Y |&gt; graph_from_edgelist()
cmp &lt;- g |&gt; components()

# get a permutation of vertices in 'i'
i &lt;- Y |&gt; t() |&gt; c() |&gt; unique() |&gt; order()
# permute the permutation and split
split(V(g)[order(i)], cmp$membership[order(i)])
#&gt; $`1`
#&gt; + 2/10 vertices, from db18a59:
#&gt; [1] 1 3
#&gt; 
#&gt; $`2`
#&gt; + 5/10 vertices, from db18a59:
#&gt; [1]  2  5 10  4  9
#&gt; 
#&gt; $`3`
#&gt; + 3/10 vertices, from db18a59:
#&gt; [1] 6 8 7
</code></pre>
<p><sup>Created on 2024-04-19 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
","0","Answer"
"78351747","78351035","<p>Since answers are being added, I would like to one with the same order as OP requested:</p>
<pre><code>library(igraph)

gr &lt;- graph_from_edgelist(Y, FALSE)
mem &lt;- membership(components(gr))
idx &lt;- which(table(t(Y)) == 1)
v &lt;- tapply(idx, mem[idx], subcomponent, graph = gr)
unname(v[order(match(sapply(v, head, 1) , t(Y)))])

[[1]]
+ 3/10 vertices, from 067185c:
[1] 6 8 7

[[2]]
+ 5/10 vertices, from 067185c:
[1]  5  2 10  4  9

[[3]]
+ 2/10 vertices, from 067185c:
[1] 1 3
</code></pre>
","4","Answer"
"78352061","78346963","<p>Edited my initial solution, this works, apparently:</p>
<pre><code>def count_file_types(string_arr): 

arr = []
for i in string_arr:
    arr.append(i.split(&quot;.&quot;))
    print(arr) 
    
freq = {}

for (name, ext) in arr:
    if ext in freq: 
        freq[ext] += 1
    else: 
        freq[ext] = 1
return freq
print(freq)
</code></pre>
","0","Answer"
"78352131","78351035","<p>Sticking to the <code>igraph</code> package, you can use <code>shortest_paths</code> or <code>all_simple_paths</code> to retain the vertex order, e.g.,</p>
<pre><code>g &lt;- graph_from_edgelist(Y, FALSE) %&gt;%
    set_vertex_attr(&quot;name&quot;, value = V(.))

grp &lt;- lapply(
    decompose(g),
    \(x) {
        as.integer(
            do.call(
                shortest_paths,
                c(list(g), as.list(names(V(x))[degree(x) == 1]))
            )$vpath[[1]]
        )
    }
)
</code></pre>
<p>which gives</p>
<pre><code>&gt; grp
[[1]]
[1] 1 3

[[2]]
[1]  5  2 10  4  9

[[3]]
[1] 6 8 7
</code></pre>
","4","Answer"
"78367292","78364833","<p>You can't pass through variable names though <code>lapply</code> like that. If you want your function to record the invocation and you care about vairable names, a better solution is to build the invocations. Here we can do that with <code>do.call</code>.</p>
<pre><code>lapply(c(&quot;df1&quot;, &quot;df2&quot;), function(x) 
  do.call(&quot;fn&quot;, list(as.name(x), x=666, z=z.))
)
# [[1]]
# [1] TRUE
# attr(,&quot;call&quot;)
# fn(d = df1, x = 666, z = 777)
# 
# [[2]]
# [1] TRUE
# attr(,&quot;call&quot;)
# fn(d = df2, x = 666, z = 777)
</code></pre>
","3","Answer"
"78369419","78369412","<p>Two possible options:</p>
<pre><code>library(purrr)
library(dplyr)

df |&gt;
  mutate(list_column  = pmap(pick(fastballs:curves), c)) 
</code></pre>
<p>or:</p>
<pre><code>df |&gt;
  rowwise() |&gt;
  mutate(list_column = list(c(c_across(fastballs:curves)))) |&gt;
  ungroup()
</code></pre>
","5","Answer"
"78369423","78369412","<p>Another option is <code>tidyr::nest</code>, which creates a list-column of data frames, which can be useful for some workflows but might not be what you want.</p>
<pre><code>data.frame(name = c('Bob','AJ'),
                 fastballs = c(20,13),
                 sliders = c(40,13),
                 curves = c(14,0)) %&gt;% 
  nest(list_column = -name)


df$list_column

#[[1]]
## A tibble: 1 × 3
#  fastballs sliders curves
#      &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
#1        20      40     14
# 
#[[2]]
## A tibble: 1 × 3
#  fastballs sliders curves
#      &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
#1        13      13      0
</code></pre>
","3","Answer"
"78369431","78369412","<p>What about using <code>Map</code></p>
<pre><code>library(dplyr)

df &lt;- data.frame(name = c('Bob','AJ'),
                 fastballs = c(20,13),
                 sliders = c(40,13),
                 curves = c(14,0)) %&gt;% 
  mutate(list_column = Map(f=list, fastballs,sliders,curves))

df
</code></pre>
","1","Answer"
"78369956","78364833","<p>I came up with this solution that uses elements of <em>@MrFlick</em>'s <a href=""https://stackoverflow.com/a/78367292/6574038"">answer</a>, to use <code>do.call()</code>, and from the answer to pass the names in <code>Map()</code> <a href=""https://stackoverflow.com/q/78263802/6574038"">quoted</a> in the OP.</p>
<p>We just need to insert one <code>if</code> clause in <code>fn()</code>. In the call <code>fn()</code> we replace <code>d</code> -- <code>if</code> present in the ellipsis -- with certain parameters and <code>attr</code>ibutes, or leave it as it is.</p>
<pre><code>&gt; fn &lt;- function(d, x=666, y=999, z, ...) {
+   cl &lt;- match.call()
+   fa &lt;- formals(fn)
+   fa[length(fa)] &lt;- NULL
+   ma &lt;- setdiff(names(fa), names(cl))
+   cl[ma] &lt;- fa[ma]
+   cl[-c(1, 2)] &lt;- lapply(cl[-c(1, 2)], eval, envir=parent.frame())
+   if (&quot;.name&quot; %in% names(list(...))) {
+     .name &lt;- sprintf('%s$%s', attr(d, 'lnm'), list(...)$.name)
+     cl$d &lt;- str2lang(.name)
+     cl$.name &lt;- NULL
+   } 
+   res &lt;- d[[1]]
+   attr(res, 'call') &lt;- cl
+   return(res)
+ }
</code></pre>
<p>In the <code>lapply</code> call, we pass the <code>names</code> in a <code>.name</code> parameter that triggers the <code>if</code> clause in <code>fn()</code> as well as the list name using <code>deparse(substitute(.))</code>.</p>
<pre><code>&gt; lapply(names(lst), \(x) {
+   do.call(&quot;fn&quot;, 
+           list(
+             d=`attr&lt;-`(
+               get(x, envir=as.environment(lst)), 'lnm', deparse(substitute(lst))
+               ), 
+             x=666, y=999, z=z., .name=x)
+   )})
$df1
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = lst$df1, x = 666, y = 999, z = 777)

$df2
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = lst$df2, x = 666, y = 999, z = 777)
</code></pre>
<p>This also works for single runs as intended. Both options allow the call to be copied and executed.</p>
<pre><code>&gt; fn(d=df3, x=666, z=z.)
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = df3, x = 666, z = 777, y = 999)
&gt; 
&gt; fn(d=lst$df1, x=666, z=z.)
[1] 1 2 3
attr(,&quot;call&quot;)
fn(d = lst$df1, x = 666, z = 777, y = 999)
</code></pre>
<p><strong>Limitations</strong></p>
<p>The <code>Map</code> call is not trivial. Also, <code>fn()</code> must be changed, which is not a problem for my use case, since <code>fn()</code> belongs to me, but can lead to problems if it came from a package. Issues may occur if it is used in several nested calls, which has not been tested.</p>
<hr />
<p><em>Data:</em></p>
<pre><code>&gt; lst &lt;- replicate(2, data.frame(matrix(1:12, 3, 4)), simplify=FALSE) |&gt; 
+   setNames(c('df1', 'df2'))
&gt; z. &lt;- 777
&gt; df3 &lt;- lst$df1
</code></pre>
","1","Answer"
"78374616","78374419","<p>As kindly alluded to in the comment, the logic of your function can use the various properties of addition and subtraction, whereby subtracting each value yields the same result as subtracting the sum of values.</p>
<p>For example:</p>
<pre><code>def fn1():
    a = [6, 7, 9, 5]
    return (a[0] - sum(a[1:]))
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; fn1()
-15
</code></pre>
<p>Subtract the sum of the list (except the first value) from the first value. The first value is isolated using <a href=""https://stackoverflow.com/a/509295/6340496"">slicing</a>; both in the forms of 'only the fist value' (<code>[0]</code>) and 'everything after the first value' (<code>[1:]</code>).</p>
<hr />
<p>If however, you wanted to use an explicit loop - it can look something like this, albeit slightly more messy to look at:</p>
<pre><code>def fn2():
    a = [6, 7, 9, 5]
    sum_ = a[0]
    for i in a[1:]:
        sum_ -= i
    return sum_
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; fn2()
-15
</code></pre>
<p>This works similarly by isolating the first element into a variable called <code>sum_</code>, then subtracting each following element in turn, using <code>a[1:]</code> as before. In case you aren't aware, the <code>sum_ -= i</code> operator combination is the same as <code>sum_ = sum_ - i</code>, just more concise.</p>
","0","Answer"
"78374675","78374419","<p>Using <a href=""https://docs.python.org/3/library/functools.html#functools.reduce"" rel=""nofollow noreferrer""><code>functools reduce</code></a>.</p>
<pre class=""lang-py prettyprint-override""><code>from functools import reduce
reduce(lambda x, y: x-y, [6, 7, 9, 5])
</code></pre>
","1","Answer"
"78376314","78376234","<p>I may have misunderstood, but one potential option could be:</p>
<pre class=""lang-r prettyprint-override""><code>library(mice)
library(ggeffects)

data(&quot;nhanes&quot;)
head(nhanes)
#&gt;   age  bmi hyp chl
#&gt; 1   1   NA  NA  NA
#&gt; 2   2 22.7   1 187
#&gt; 3   1   NA   1 187
#&gt; 4   3   NA  NA  NA
#&gt; 5   1 20.4   1 113
#&gt; 6   3   NA  NA 184
imp &lt;- mice(nhanes, print = FALSE, m = 10, seed = 24415)
df &lt;- complete(imp, &quot;long&quot;)
model_fit &lt;- lapply(1:10, function(i) {
  model = lm(bmi ~ age + hyp + chl,
             data = subset(df, `.imp`==i))
})

library(tidyverse)
list_of_results &lt;- map(model_fit, ggpredict, c(&quot;age&quot;, &quot;hyp&quot;))
ggpredicts &lt;- map(list_of_results, `[[`, &quot;predicted&quot;)
map(ggpredicts, mean)
#&gt; [[1]]
#&gt; [1] 25.93424
#&gt; 
#&gt; [[2]]
#&gt; [1] 26.01019
#&gt; 
#&gt; [[3]]
#&gt; [1] 26.18797
#&gt; 
#&gt; [[4]]
#&gt; [1] 26.69359
#&gt; 
#&gt; [[5]]
#&gt; [1] 25.90896
#&gt; 
#&gt; [[6]]
#&gt; [1] 26.26845
#&gt; 
#&gt; [[7]]
#&gt; [1] 26.10574
#&gt; 
#&gt; [[8]]
#&gt; [1] 25.81957
#&gt; 
#&gt; [[9]]
#&gt; [1] 26.34521
#&gt; 
#&gt; [[10]]
#&gt; [1] 26.89521

df &lt;- bind_cols(map(ggpredicts, mean))
colnames(df) &lt;- paste0(&quot;Model_&quot;, str_pad(1:10, 2, pad = &quot;0&quot;))
df %&gt;%
  pivot_longer(everything(),
               values_to = &quot;mean prediction&quot;,
               names_to = &quot;model&quot;) %&gt;%
  ggplot(aes(x = `model`, y = `mean prediction`)) +
  geom_col() +
  theme_bw()
</code></pre>
<p><img src=""https://i.imgur.com/P97Pr8N.png"" alt="""" /></p>
<p><sup>Created on 2024-04-24 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
<p>Is that close to your expected outcome?</p>
","1","Answer"
"78377895","78377675","<p>If you have an object and want to find its index in a list, you can use <a href=""https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1.indexof"" rel=""nofollow noreferrer"">IndexOf</a>:</p>
<pre><code>Dim index As Integer = Organism.IndexOf(org)
</code></pre>
<p>where, in this example, <code>org</code> is an <code>OrganismClass</code> instance.</p>
","0","Answer"
"78378424","78377675","<p>You can declare a shared field in the class that stores the next available index or Id. I will call it Id, as it will not necessarily be equal to the list index if you add or remove items from the list.</p>
<p>The shared field exist once and is shared among all the class instances (objects). You can then assign and increment the next Id in the constructor <code>Sub New()</code>.</p>
<pre class=""lang-vb prettyprint-override""><code>Public Class Predator
    Private Shared _nextId As Integer

    Public ReadOnly Property Id As Integer

    Public Sub New()
        Id = _nextId
        _nextId += 1
    End Sub
End Class
</code></pre>
<p>The following Console test...</p>
<pre class=""lang-vb prettyprint-override""><code>For i As Integer = 0 To 4
    Dim pred = New Predator()
    Console.WriteLine(pred.Id)
Next i
Console.ReadKey()
</code></pre>
<p>... prints</p>
<pre class=""lang-none prettyprint-override""><code>0
1
2
3
4
</code></pre>
","0","Answer"
"78379750","78376234","<p>Like this?</p>
<pre class=""lang-r prettyprint-override""><code>library(mice)
library(ggeffects)
library(tidyverse)

imp &lt;- mice(nhanes, print = FALSE, m = 10, seed = 24415)
df &lt;- complete(imp, &quot;long&quot;)
model_fit &lt;- lapply(1:10, function(i) {
  model = lm(bmi ~ age + hyp + chl,
             data = subset(df, `.imp`==i))
})

map(model_fit, ggpredict, c(&quot;age&quot;, &quot;hyp&quot;)) |&gt; 
  bind_rows(.id = &quot;id&quot;) |&gt; 
  rename(age = x, hyp = group) |&gt; 
  as_tibble() |&gt; 
  summarise(across(c(predicted, conf.low, conf.high), mean), .by = c(age, hyp))
#&gt; # A tibble: 6 × 5
#&gt;     age hyp   predicted conf.low conf.high
#&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;
#&gt; 1     1 1          28.6     26.5      30.6
#&gt; 2     1 2          30.7     26.4      35.0
#&gt; 3     2 1          25.2     23.3      27.0
#&gt; 4     2 2          27.3     24.1      30.5
#&gt; 5     3 1          21.8     18.3      25.2
#&gt; 6     3 2          23.9     20.5      27.2
</code></pre>
<p><sup>Created on 2024-04-24 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
","2","Answer"
"78380341","78380304","<pre><code>import os

folder_path = &quot;/path/to/your/folder&quot;
files = os.listdir(folder_path)

sorted_files = sorted(files, key=lambda x: int(x.split('.')[0].split('-')[-1]))

print(sorted_files)
</code></pre>
","1","Answer"
"78380546","78379598","<p>As mudskipper has commented, this is not a pandas problem. Its a floating point number calculation issue. you are not seeing the decimals when calling for the series because of display options.</p>
<p>I believe <a href=""https://stackoverflow.com/questions/69824184/numpy-array-tolist-problem-with-floating-point-values"">this</a> stack overflow post might clarify that...</p>
","0","Answer"
"78380599","78379598","<p>As others pointed out, this is caused by Python, not Panda.
<code>decimal</code> would be a way to handle it, but you need to convert each value to a Decimal.</p>
<pre class=""lang-py prettyprint-override""><code>from decimal import Decimal, getcontext

# Create a Pandas Series
series1 = pd.Series([Decimal('0.2'), Decimal('0.4'), Decimal('0.6'), Decimal('0.8')])

# Create a new Series from the original
series2 = series1 + Decimal('0.1')
</code></pre>
","0","Answer"
"78381742","78380304","<p>You can use <code>natsorted</code>, but you have to split each filename from its extension first.  The <code>.</code> in the extension can't be part of the comparison.</p>
<pre><code>import natsort
import os
files=[
    '920-1.jpg',
    '920-2.jpg',
    '920.jpg'
]
files_split = [os.path.splitext(os.path.basename(f)) for f in files]
files_split
[('920-1', '.jpg'), ('920-2', '.jpg'), ('920', '.jpg')]
[''.join(f) for f in natsort.natsorted(files_split)]
['920.jpg', '920-1.jpg', '920-2.jpg']
</code></pre>
","0","Answer"
"78381976","78381862","<p>One solution would be to use the <a href=""https://mapstruct.org"" rel=""nofollow noreferrer"">MapStruct</a> code generator to generate a mapping method between the existing types and a new flattened type.</p>
<pre class=""lang-java prettyprint-override""><code>public class FhListItem {
    String LoanNumber;
    String FILoanNumber;
    String error;
    Long loanId;
}
</code></pre>
<pre class=""lang-java prettyprint-override""><code>@Mapper
interface FhListItemMapper {
    @Mapping(target = &quot;LoanNumber&quot;, source = &quot;results.LoanNumber&quot;)
    @Mapping(target = &quot;FILoanNumber&quot;, source = &quot;results.FILoanNumber&quot;)
    FhListItem map(FhExtraImportResults results);
}
</code></pre>
<pre class=""lang-java prettyprint-override""><code>List&lt;FhExtraImportResults&gt; myList = retrieveList();

FhListItemMapper mapper = Mappers.getMapper(FhListItemMapper.class);
List&lt;FhListItem&gt; newList = myList.stream().map(mapper::map).toList();
</code></pre>
","1","Answer"
"78384099","78382710","<p>I found a solution with multiple helper columns from here:</p>
<p><a href=""https://contexturesblog.com/archives/2010/10/04/count-unique-items-in-excel-filtered-list/"" rel=""nofollow noreferrer"">https://contexturesblog.com/archives/2010/10/04/count-unique-items-in-excel-filtered-list/</a></p>
<p>There are multiple other solutions without helper columns but only with functions that work only for Excel and not for Libre Office Calc (e.g. UNIQUE).</p>
","0","Answer"
"78384931","78384833","<p><code>(4,) if True else ()</code> evaluates to either the tuple <code>(4,)</code> or empty tuple <code>()</code>, so unpacking it you can write <code>x = (1,2,3,*((4,) if True else ()),5)</code>.</p>
<p>Almost exactly the same thing works for lists, <code>x = [1,2,3,*((4,) if True else ()),5]</code>.</p>
<p>Unpacking a dictionary also works: <code>x = {'a':1, **({'b':2} if True else {})}</code>.</p>
","5","Answer"
"78384964","78384833","<p>I would just use <code>None</code> and then a filter.</p>
<pre><code>x = (1, 2, 3, None, 5)
x = tuple(filter(None, x))
</code></pre>
<p>If you want a one-liner:</p>
<pre><code>x = tuple(x for x in (1, 2, 3, None, 5) if x is not None)
# or
x = tuple(filter(None, (1, 2, 3, None, 5)))
</code></pre>
<p>If you want a function that constructs a tuple, you can use:</p>
<pre><code>def tup(*items):
    return tuple(filter(None, items))

x = tup(1,2,3,None,5)
</code></pre>
","4","Answer"
"78385085","78384833","<p>Each programming language comes with an own set of underlying concepts and ideas and even if many of them are shared among most of the popular languages, some are language-specific. Python as programming language and coding philosophy does not come with a concept of <em><code>Nothing</code></em> in the sense of Mathematica.</p>
<p>In Python the concept of <code>Nothing</code> needs to be expressed using <strong><code>None</code></strong> or when working with floating point numbers with <strong><code>float(&quot;nan&quot;)</code></strong> which are themselves special Python objects indicating absence of a valid value.</p>
<p>This said as an introduction let's provide a Python construct which <em>resembles</em> the usage of <code>Nothing</code> in sense of Mathematica as mentioned in the question:</p>
<pre class=""lang-py prettyprint-override""><code>x = (1, 2, 3, *(), 5)
</code></pre>
<p>in other words in <strong>this particular use case only</strong> the Python equivalent to Mathematica <code>Nothing</code> is:</p>
<h3>*<strong>()</strong></h3>
<p>And in the context of dictionaries:</p>
<h3>**{}</h3>
<pre><code>d = {'a':1, **{}, 'c':3 }
</code></pre>
<p>As mentioned in the comment by <em>deceze</em> this construct alone has only a very limited use as a placeholder for future replacements marking the position in the list for them. Let's give examples where using of such construct does make more sense:</p>
<pre class=""lang-py prettyprint-override""><code>x = [ 1, 2, *(3 if False else ()), 4 ]
d = {'a':1, **({'b':2} if False else {}) , 'c':3 }
</code></pre>
<p>Replace <code>False</code> with any for the use case appropriate condition to achieve a more useful case of use.</p>
<p>For the sake of completeness let's mention another possible ways of achieving same/similar functionality using list addition available for Python lists :</p>
<pre class=""lang-py prettyprint-override""><code>x = [ 1, 2 ] + [] + [ 4 ]
x = [ 1, 2 ] + [*([3] if False else ())] + [ 4 ]
</code></pre>
<p>This construct can be also used in case of dictionaries:</p>
<pre class=""lang-py prettyprint-override""><code>d = dict( [('a',1)] + [] + [('c',3)] )
d = dict( [('a',1)] + [*(('b',2) if False else ())] + [('c',3)] )
</code></pre>
<p>If you for some reason want to avoid usage of the keyword <code>else</code> in the conditional expression you can use following &quot;trick&quot;:</p>
<pre class=""lang-py prettyprint-override""><code>x = [ 1, 2, *(_ for _ in [3] if False), 4]
d = dict( [('a',1)] + [*(_ for _ in [('b',2)] if False)] + [('c',3)] )
</code></pre>
<p>which though maybe a bit &quot;dirty&quot;, is probably better understandable and more pleasing for the reading eye because of emphasizing the <strong>[3]</strong> and the <strong>[('b',2)]</strong> which are catching the eye making the embedding it expression less obtrusive.</p>
<hr />
<p>Please <em>notice</em> that neither <code>*()</code> nor <code>**{}</code> will work in Python like <code>Nothing</code> works in  Mathematica. For example you can't replace a list element with <code>Nothing</code> to make it vanish. To remove for example the 3 from the list x you need to actually remove it:</p>
<pre class=""lang-py prettyprint-override""><code>x.pop(x.index(3))
</code></pre>
<p>In other words, as already correctly mentioned by <em>deceze</em> in the comments to your question:</p>
<blockquote>
<p>Mathematica <code>Nothing</code> seems to have pretty specific use cases in mind, which are not relevant in Python, thus <strong>an equivalent doesn't exist</strong>.</p>
</blockquote>
<p>P.S.
I understand that the idea of replacing something with Nothing, so that this something vanishes to exist is a bit alien to Python coders and causes wondering what it could be good for. With another set of mind, different from the one influenced by coding Python the concept of Nothing can appear very useful and important to have and worth giving it another thought or even a reason for a PEP.</p>
<p>Worth a smile or a laugh is sure when you read the description of the feature in Mathematica's Documentation Center and don't pay attention to the capital letters. In such case you will read:</p>
<p><em>When hold is released, nothing is removed.</em></p>
<p>instead of</p>
<p><em>When the Hold is released, Nothing is removed.</em></p>
<p>:D :D :D :D :D :D :D :D :D :D :D :D :D :D :D</p>
<p>And yes ... also the concept of <code>Hold</code> is alien to Python, but plays well if combined with <code>Nothing</code>.</p>
","1","Answer"
"78386343","78386041","<p>Let's solve your problem with a help of Linq, we should</p>
<ul>
<li>group <code>player1dicerolls</code> by <code>score</code>s</li>
<li>filter out groups with just one item</li>
<li>let's order the groups by score</li>
<li>represent each group in <code>Element: Counter:</code> format</li>
<li>finally, join these representation with, say, new line delimiter</li>
</ul>
<p>For instance:</p>
<pre><code>var report = string.Join(Environment.NewLine, player1dicerolls
  .GroupBy(score =&gt; score)
  .Where(group =&gt; group.Count() &gt; 1)
  .OrderBy(group =&gt; group.Key) 
  .Select(group =&gt; $&quot;Element: {group.Key}, Counter: {group.Count()}&quot;));

Console.WriteLine(report);
</code></pre>
","1","Answer"
"78386365","78386041","<p>Let me declutter your last code snippet:</p>
<pre class=""lang-cs prettyprint-override""><code>//If you anonymous type was a tuple, the full typing will be `List&lt;(int Element, int Counter)&gt;`
var repeatedRolls = player1dicerolls
    .GroupBy(id =&gt; id)
    .Where(group =&gt; group.Count() &gt; 1)
    .Select(group =&gt; new 
    { 
        Element = group.Key, 
        Counter = group.Count() 
    })
    .ToList(); //Be mindful that is is *not* lazy since `.ToList()` is used here

foreach ((int Element, int Counter) value in repeatedRolls)
{
    Console.WriteLine(value); //We want to see the current element being iterated, not the collection
}

Console.WriteLine(string.Join(&quot;, &quot;, player1dicerolls)); //forgot `Console.WriteLine()` here
</code></pre>
<p>The entire issue really is just misuse of your variables and forgetting to apply certain things like Console.WriteLine(). <code>string.Join()</code> will return you a string, it will not print directly to console for you. Nothing does that except for the dedicated Console library methods</p>
<p>Lastly, a small note here on <code>.ToList()</code>: this specific snippet does qualify for use of lazy iteration, as you are only going to iterate and read the current element. This means that your iteration will execute 2 times (for loop + the string join) rather than 3 times (eager evaluation of the list, then the for loop, then the string join). It allows C# to wait and defer the execution until it is forced to do so</p>
<pre class=""lang-cs prettyprint-override""><code>//If you anonymous type was a tuple, the full typing will be `IEnumerable&lt;(int Element, int Counter)&gt;`
var repeatedRolls = player1dicerolls
    .GroupBy(id =&gt; id)
    .Where(group =&gt; group.Count() &gt; 1)
    .Select(group =&gt; new 
    { 
        Element = group.Key, 
        Counter = group.Count() 
    }); //NOTHING ACTUALLY HAPPENS IN MEMORY, we are just defining the query. Imagine this is like a SQL stored procedure

//1ST ITERATION
foreach ((int Element, int Counter) value in repeatedRolls)
{
    Console.WriteLine(value);
}

//2ND ITERATION
Console.WriteLine(string.Join(&quot;, &quot;, player1dicerolls));
</code></pre>
<p>Note: I am using a tuple in place of your anonymous object, but this may very well become a struct, record, etc etc. My key point is to highlight that a List is a classic collection that forces evaluation, while IEnumerable allows for deferred execution</p>
","0","Answer"
"78388194","78388087","<p>Obviously what you need is a <a href=""https://docs.python.org/3/tutorial/datastructures.html#sets"" rel=""nofollow noreferrer""><code>set</code> comprehension</a>, not a list comprehension (the syntax is the same):</p>
<pre class=""lang-py prettyprint-override""><code>my_list = [
    [0, 0, 1],
    [1, 0, 0],
    [0, 1, 0]
]

coordinates = {
    (row, column)
    for row in range(len(my_list))
    for column in range(len(my_list[row]))
    if my_list[row][column] == 1
}

print(coordinates)
</code></pre>
<p>This should print:</p>
<pre><code>{(1, 0), (0, 2), (2, 1)}
</code></pre>
","0","Answer"
"78388206","78388087","<pre><code>list = [[0, 0, 1],
        [1, 0, 0],
        [0, 1, 0]]

result = {(row_idx, col_idx) for row_idx, row in enumerate(list) for col_idx, value in enumerate(row) if value == 1}

print(result)
</code></pre>
","1","Answer"
"78388209","78388087","<p>You might consider using numpy for such tasks. This is essentially the <a href=""https://numpy.org/doc/stable/reference/generated/numpy.argwhere.html"" rel=""nofollow noreferrer"">argwhere</a> function of numpy:</p>
<pre><code>&gt;&gt;&gt; my_list = [[0, 0, 1],
...            [1, 0, 0],
...            [0, 1, 0]]
&gt;&gt;&gt; A = np.array(my_list)
&gt;&gt;&gt; np.argwhere(A)
array([[0, 2],
       [1, 0],
       [2, 1]])
</code></pre>
","0","Answer"
"78388755","78388087","<p>(Semantically) Straight forward is <a href=""https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html"" rel=""nofollow noreferrer"">numpy.nonzero</a> .
However, compared to wim's answer nonzero needs one step more as it returns rows, colums in their own sub list and it needs to be transposed to have to have individual pairs like you want.</p>
<pre><code>np.transpose(np.nonzero(my_list))
</code></pre>
","0","Answer"
"78388822","78388087","<p>you can try this function in which you can pass the value and it will give you all the coordinates. I use <strong>list comprehaninsion</strong>.</p>
<pre class=""lang-py prettyprint-override""><code>def find_coordinates(my_list, value):
    return {(row, col) for row, sub_list in enumerate(my_list) for col, val in enumerate(sub_list) if val == value}

# Example usage:
my_list = [[0, 0, 1], 
           [1, 0, 0], 
           [0, 1, 0]]

value = 1
coordinates = find_coordinates(my_list, value)
</code></pre>
<p>The Output is:</p>
<pre class=""lang-bash prettyprint-override""><code>{(1, 0), (0, 2), (2, 1)}
</code></pre>
","-1","Answer"
"78389014","78388955","<p>What's happening is fairly straightforward.</p>
<p><code>List&lt;T&gt;.AddRange</code> has a check to see whether the thing it was passed is an <code>ICollection&lt;T&gt;</code>. If so, it can optimize by using <code>ICollection&lt;T&gt;.Count</code> to allocate enough space for the new range in one go (instead of potentially resizing the list multiple times), and <code>ICollection&lt;T&gt;.CopyTo</code> to copy the collection's elements in one go, instead of adding them one-by-one.</p>
<p>The code is <a href=""https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs,e569d850a66a1771"" rel=""nofollow noreferrer"">here</a>:</p>
<pre><code>if (collection is ICollection&lt;T&gt; c)
{
    int count = c.Count;
    if (count &gt; 0)
    {
        if (_items.Length - _size &lt; count)
        {
            Grow(checked(_size + count));
        }

        c.CopyTo(_items, _size);
        _size += count;
        _version++;
    }
}
</code></pre>
<p><code>ConcurrentDictionare&lt;TKey, TValue&gt;</code> implements <code>ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</code>, and its implementations of <code>Count</code> and <code>CopyTo</code> are safe in themselves, but there's no inherent synchronization between them.</p>
<p>So <code>List&lt;T&gt;.AddRange</code> asks the dictionary for its size, allocates that number of new elements, then asks the dictionary to copy itself into that newly-allocated space. However, the dictionary has grown by that point, and throws an exception <a href=""https://source.dot.net/#System.Collections.Concurrent/System/Collections/Concurrent/ConcurrentDictionary.cs,706"" rel=""nofollow noreferrer"">here</a>:</p>
<pre><code>int count = GetCountNoLocks();
if (array.Length - count &lt; index)
{
    throw new ArgumentException(SR.ConcurrentDictionary_ArrayNotLargeEnough);
}
</code></pre>
<p>As for who's to &quot;blame&quot; here, I'm not sure. The optimization which <code>List&lt;T&gt;</code> is doing is sensible most of the time, and as a non-thread-safe collection it's not trying to be thread-safe. As @shingo notes,  <code>ConcurrentDictionary</code> doesn't guarantee thread-safety when accessed through one of its interfaces, although it does its best. <code>ICollection&lt;T&gt;.CopyTo</code> is <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.icollection.copyto?view=net-8.0"" rel=""nofollow noreferrer"">documented as throwing</a> if the space it's being asked to copy into isn't large enough.</p>
<p>As for workarounds, the simplest and most obviously correct is to create an intermediate collection: <code>list.AddRange(dict.ToArray())</code>. However, this of course comes with the cost of an intermediate allocation, which may be large.</p>
<p>You could also wrap loop over the dictionary and use <code>Add</code> with each element (<code>ConcurrentDictionary</code>'s <code>GetEnumerator()</code> is thread-safe), and this is effectively what you're expecting <code>AddRange</code> to do anyway.</p>
<p>I think in general you just need to be careful when mixing thread-safe and non-thread-safe types in this way. Make sure that you understand exactly what's going on, and exactly what thread-safe guarantees the types involved do and don't make.</p>
","5","Answer"
"78389124","78388955","<p>As an addendum to Canton7's answer, you can &quot;hide&quot; the type from the optimisation that causes the problem by using a method like this:</p>
<pre><code>public static IEnumerable&lt;T&gt; Enumerate&lt;T&gt;(IEnumerable&lt;T&gt; sequence)
{
    foreach (var item in sequence)
    {
        yield return item;
    }
}
</code></pre>
<p>Then you can call: <code>list.AddRange(Enumerate(dictionary));</code> and it won't throw an exception. This will avoid having to make a copy of the collection.</p>
","1","Answer"
"78390469","78390253","<p>This is working within the limited data set given...</p>
<ul>
<li>variable str changed to stm</li>
<li>int changed to float to account for decimals</li>
<li>Print statements for testing</li>
</ul>
<p>&lt;-SNIP-&gt;</p>
<pre><code>    for line in infile:
        if line.startswith('   '):
            stm = line.split()
            numbers = float(stm[0])
            print(numbers)
            if not (numbers &lt; 12000) or not (numbers &gt; -12000):
                print(line)
</code></pre>
<p>&lt;-SNIP-&gt;</p>
","-1","Answer"
"78391032","78390253","<p>If we ignore the irrelevant GUI parts of the OP and assume that the file needs to be modified <em>in situ</em> then:</p>
<pre><code>def skip(t):
    try:
        x = float(t)
        if x &lt; -12000 or x &gt; 12000:
            return True
    except ValueError:
        pass
    return False

with open(&quot;foo.txt&quot;, &quot;r+&quot;) as data:
    output = []
    for row in data:
        if not any(skip(t) for t in row.split()):
            output.append(row)
    data.seek(0)
    data.writelines(output)
    data.truncate()
</code></pre>
","1","Answer"
"78392123","78391980","<p>It is a list of all the objects that refer to 'a'</p>
<p>gc = Garbage Collector interface</p>
<blockquote>
<p>gc.get_referrers(*objs)
<strong>Return the list of objects that directly refer to any of objs</strong>. This function will only locate those containers which support garbage collection; extension types which do refer to other objects but do not support garbage collection will not be found.</p>
</blockquote>
<blockquote>
<p>Note that objects which have already been dereferenced, but which live in cycles and have not yet been collected by the garbage collector can be listed among the resulting referrers. To get only currently live objects, call collect() before calling get_referrers().</p>
</blockquote>
","-4","Answer"
"78392273","78391980","<p>if i recall correctly get_referrers gives you a list of all object that directly refer to the value (not variable) you try to ask for, in your case that would be your main file referring to the value <code>23764723</code> in addition you would list all other things your main file refers to as well as whatever other objects refer to that number</p>
<p>you can try something like</p>
<pre><code>a = {'x':[],'y':0}
ref = gc.get_referrers(a['x'])[0]
</code></pre>
<p>which prints the entire value of a (trying this with <code>a['y']</code> would be checking what refers to the value 0 which besides <code>a</code> additionally returns a whole host of other objects)
in this case you only get <code>a</code> as only this value refers to the unique instance of <code>[]</code></p>
","-2","Answer"
"78392306","78392238","<p>Just change from</p>
<pre><code>vega[coin][expiry] += data[coin].get('Vega', {}).get('Total', {}).get(expiry, 0)
</code></pre>
<p>to</p>
<pre><code>vega[coin][expiry] = vega.get(coin, {}).get(expiry, 0) + data[coin].get('Vega', {}).get('Total', {}).get(expiry, 0)
</code></pre>
<p>and you will not get the error.</p>
<p>But, notice that you didn't initialize it with <code>28-Jun-24</code>.</p>
","1","Answer"
"78392370","78392238","<p>This code is somewhat redundant, anyway a quick solution is to add '28-Jun-24' in the first data[coin]['columns'] assignment.</p>
<pre><code>data[coin]['columns']=['27-Apr-24', '28-Apr-24', '29-Apr-24', '03-May-24', '10-May-24', '17-May-24', '31-May-24','28-Jun-24']
</code></pre>
<p>This will work</p>
","-1","Answer"
"78398220","78381862","<p>You could use a map of fields vs values using reflection like:</p>
<pre class=""lang-java prettyprint-override""><code>import java.lang.reflect.*;
import java.util.*; 

public class MyClass {
    public static void main(String args[]) throws IllegalAccessException {
        MyClass.FhExtraImportResults obj = new MyClass.FhExtraImportResults();
        obj.loanId = 456L;
        obj.error = &quot;NA&quot;;
        obj.record = new MyClass.FhExtra();
        obj.record.LoanNumber = &quot;123&quot;;
        obj.record.FILoanNumber = &quot;321&quot;;
        Map&lt;String, Object&gt; map = getObjectAllowedFields(obj);
        
        System.out.println(map);

    }
    
    private static Map&lt;String, Object&gt; getObjectAllowedFields(Object obj) throws IllegalAccessException {
        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
        Field[] fields = obj.getClass().getDeclaredFields();
        for (Field field: fields) {
            field.setAccessible(true);
            Object value = getObjValue(obj, field);
            if (value != null) {
                if(value instanceof Map){
                    map.putAll((Map&lt;String, Object&gt;) value);
                } else {
                    map.put(field.getName(), value);
                }
            }
        }
        return map;
    }
    
    private static Object getObjValue(Object obj, Field field) throws IllegalAccessException {
        Class&lt;?&gt; type = field.getType();
        if (type.getTypeName().equals(MyClass.FhExtra.class.getTypeName()))
            return getObjectAllowedFields(field.get(obj));
        if (type.getTypeName().startsWith(&quot;java.lang&quot;))
            return field.get(obj);
        // Add more types here or filter by field name.
        return null;
    }
    
    public static class FhExtraImportResults {
        FhExtra record;
        String error;
        Long loanId;
    }
    
    public static class FhExtra {
        String LoanNumber;
        String FILoanNumber;
    }
}
</code></pre>
<pre><code>{error=NA, FILoanNumber=321, loanId=456, LoanNumber=123}
</code></pre>
<p><strong>Note that downsides of this solution are that it will override entries with the same key from the nested objects if any (which can be fixed by amending the parent field name) and reflection is a bit slow</strong></p>
","1","Answer"
"78399988","78399960","<p>Check out the following script:</p>
<pre><code>import random

# List of countries
countries = ['Argentina', 'France', 'Belgium', 'England', 'Brazil', 'Portugal', 'Netherlands', 'Spain', 'Italy', 'Croatia', 'United_States', 'Colombia', 'Morocco', 'Mexico', 'Uruguay', 'Germany', 'Senegal', 'Japan', 'Switzerland', 'Iran', 'Denmark', 'Ukraine', 'South_Korea', 'Australia', 'Austria', 'Hungary', 'Sweden', 'Poland', 'Wales', 'Nigeria', 'Ecuador', 'Peru', 'Serbia', 'Qatar', 'Russia', 'Czech_Republic', 'Czechia', 'Egypt', 'Ivory_Coast', 'Scotland', 'Türkiye', 'Tunisia', 'Chile', 'Algeria', 'Mali', 'Panama', 'Romania', 'Norway', 'Slovakia', 'Canada', 'Greece', 'Cameroon', 'Costa_Rica', 'Saudi_Arabia', 'Venezuela', 'Jamaica', 'Paraguay', 'Slovenia', 'Iraq', 'South_Africa', 'Republic_of_Ireland', 'Finland']

# Dictionary to store groups
groups = {}

# Initialize group number and member count
group = 1
membersInGroup = 0

# Loop until all 12 groups are created
while group &lt;= 12:
    # List to store members of the current group
    group_members = []
    # Loop until each group has 4 members
    while membersInGroup &lt; 4:
        # Check if there are no more countries to allocate
        if not countries:
            break
        # Randomly choose a country from the list
        person = random.choice(countries)
        # Add the chosen country to the current group
        group_members.append(person)
        # Remove the chosen country from the list of countries
        countries.remove(person)
        # Increment the member count for the current group
        membersInGroup += 1
    # Store the current group and its members in the dictionary
    groups[group] = group_members
    # Move to the next group
    group += 1
    # Reset the member count for the next group
    membersInGroup = 0

# Print groups with group number and list of members
for group_num, group_members in groups.items():
    print(&quot;Group {} consists of:&quot;.format(group_num))
    for member in group_members:
        print(member)
    print()
</code></pre>
","1","Answer"
"78400041","78399960","<p>You can use <code>sample(data, k=48)</code> to get all 48 random items at once.</p>
<p>And later you can slice it <code>groups[i+1] = items[ i*4 : (i+1)*4 ]</code></p>
<p>if you are not sure if it is random enough then you can also use <code>shuffle</code> to change order on list.<br />
(it works <code>in-place</code> so don't assign to variable)</p>
<pre><code>import random

countries = [ 'Argentina','France', 'Belgium',  'England','Brazil', 'Portugal', 'Netherlands',  'Spain',    'Italy',    'Croatia',  'United_States',    'Colombia', 'Morocco',  'Mexico',   'Uruguay',  'Germany','Senegal','Japan',    'Switzerland', 'Iran',  'Denmark',  'Ukraine', 'South_Korea',   'Australia',    'Austria', 'Hungary',   'Sweden', 'Poland', 'Wales',    'Nigeria',  'Ecuador',  'Peru',     'Serbia',   'Qatar',    'Russia',   'Czech_Republic', 'Czechia',    'Egypt',    'Ivory_Coast',  'Scotland', 'Türkiye',  'Tunisia',  'Chile',    'Algeria',  'Mali',     'Panama',   'Romania',  'Norway',   'Slovakia',     'Canada',   'Greece', 'Cameroon',   'Costa_Rica',   'Saudi_Arabia',     'Venezuela',    'Jamaica', 'Paraguay', 'Slovenia',  'Iraq','South_Africa',  'Republic_of_Ireland',  'Finland']

import random

items = random.sample(countries, k=48)
random.shuffle(items)  # optional, (it works `in-place` so don't assign to variable)

groups = {}

for i in range(12):
    groups[i+1] = items[i*4:(i+1)*4]
   
# --- display ---
 
for key, val in groups.items():    
    print(key, val)
</code></pre>
<p>Example result (without using <code>shuffle</code>)</p>
<pre><code>
1 ['Republic_of_Ireland', 'Norway', 'Costa_Rica', 'Panama']
2 ['Mali', 'Chile', 'Egypt', 'Nigeria']
3 ['Australia', 'Saudi_Arabia', 'Finland', 'Tunisia']
4 ['Spain', 'Hungary', 'Japan', 'Greece']
5 ['Poland', 'Slovakia', 'Ivory_Coast', 'Serbia']
6 ['Uruguay', 'Türkiye', 'Belgium', 'Netherlands']
7 ['Denmark', 'England', 'Venezuela', 'Czechia']
8 ['France', 'South_Korea', 'Jamaica', 'Iraq']
9 ['Germany', 'South_Africa', 'Sweden', 'Algeria']
10 ['Russia', 'Romania', 'Wales', 'Iran']
11 ['Cameroon', 'Scotland', 'Peru', 'Portugal']
12 ['Slovenia', 'Colombia', 'Paraguay', 'Morocco']
</code></pre>
<hr />
<p>You can even use <code>dictionary comprehension</code> and you will need only two lines:</p>
<pre><code>items = random.sample(countries, k=48)

groups = {i+1:items[i*4:(i+1)*4] for i in range(12)}
</code></pre>
","0","Answer"
"78400084","78399960","<p>You can use <a href=""https://docs.python.org/3/library/random.html#random.sample"" rel=""nofollow noreferrer""><code>random.sample</code></a> to pick 48 random countries from the input list, and then use <a href=""https://docs.python.org/3/library/itertools.html#itertools.batched"" rel=""nofollow noreferrer""><code>itertools.batched</code></a> to transform the list into a sequence of groups of 4:</p>
<pre><code>from random import sample
from itertools import batched

print(*batched(sample(countries, 48), 4), sep='\n')
</code></pre>
<p>Demo <a href=""https://ato.pxeger.com/run?1=bVO9ctNAEC7o_BTq5DCmo0iTwihOCEw8wUqgAEazltbSjU-3YnUXIz8FfZo08BTpeAuehtOe5DAJmpH03e7tfd_-3N2vprMVmfv7n85uXh3_efEjJ2csK2yjk-hzPOcSjVUG4lkUnzGYHHv0BnWpXN3DhSk1mEKsDHule3RFbF0JgpdoK-R-T9sv0waU6cGFBd3Fs0n07xMnTGCV0N0YZbHIUgsWJTQhTfU6OC-JKc9JIH5XAd2wKx10PTxHrsEITNHgoOUdNGCecaY7ZfdBoghjEIGnaGrgrRy8Za9aUk_J2Sp7T4yiY-5ay6DV4yLAt86UwIF_hwU-Z72ikfAT6JDgUpU4xC9yBwWxFBPZhTx4SP4DWBDXyrVtMCV7zKtshY1ba5UfLL3zCe-i7Bored4Sd1lC0MoyzcmOiq5_P_BWdZLwtTNqJKmUFttcH4Re-uRFJRioxbIiX_n_EC-Jd6E5qaZb2A5n-rhC0DkjhvFKoEYmMqHprYVspXLZk4IrVDZnGCrx0fd271BD6G4Nsu9ppYFhnIueGk0I9o3-9tjS-YYHkrGKGW2yC8axKGfKCPw6mWyY6siPSeF_qm78tEct1I3G4PFzy5ZIt6NzDTavsJg0rIydvhyW0xAzPVy5WfT6-Mh__NticxJ_MfFRuJjD_Rzv6V8"" rel=""nofollow noreferrer"">here</a></p>
","2","Answer"
"78400499","78400455","<p>I would first convert all lists to sets, then use <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.diff.html"" rel=""nofollow noreferrer""><code>diff</code></a>:</p>
<pre><code>df.assign(sets=lambda d: d['list_column'].apply(set),
          common=lambda d: d['sets']-d['sets'].diff(),
          n_common=lambda d: d['common'].str.len(),
         )
</code></pre>
<p>Output:</p>
<pre><code>   x              list_column                     sets            common  n_common
0  1  [apple, banana, cherry]  {apple, cherry, banana}               NaN       NaN
1  2         [banana, cherry]         {cherry, banana}  {banana, cherry}       2.0
2  3      [cherry, date, fig]      {date, cherry, fig}          {cherry}       1.0
3  4                 [orange]                 {orange}                {}       0.0
</code></pre>
<p>If you don't want the intermediates:</p>
<pre><code>df.assign(n_common=lambda d: (s:=d['list_column'].apply(set)).sub(s.diff()).str.len())
</code></pre>
<p>Or with a custom function:</p>
<pre><code>def common_set(s):
    s = s.apply(set)
    return [len(a&amp;b) for a,b in zip(s, s.shift(fill_value=set()))]

df.assign(n_common=lambda d: common_set(d['list_common']))
</code></pre>
","4","Answer"
"78400532","78400455","<p>This approach shifts more work to pandas while <code>apply</code> mainly uses Python. Depending on the real data it may be faster or slower:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({
    'x':[1,2,3,4],
    'list_column': [
        ['apple', 'banana', 'cherry'],
        ['banana', 'cherry'],
        ['cherry', 'date', 'fig'],
        ['orange']
    ]
})

df = df.explode('list_column')
df = pd.merge(df, df, left_on=['x', 'list_column'], right_on=[df['x'] - 1, 'list_column'])
del df['x']
df = df.groupby(by=['x_x', 'x_y']).agg('count')
print(df)
</code></pre>
<p>Prints:</p>
<pre><code>         list_column
x_x x_y             
1   2              2
2   3              1
</code></pre>
<p><code>x_x</code> and <code>x_y</code> are the 'x' values of the two compared rows. Rows without common items are omitted.</p>
","0","Answer"
"78400535","78400455","<p>Yes it is possible.  Here is one way to do it.</p>
<pre><code>df = pd.DataFrame({
    'x':[1,2,3,4],
    'list_column': [
        ['apple', 'banana', 'cherry'],
        ['banana', 'cherry'],
        ['cherry', 'date', 'fig'],
        ['orange']
    ]
})


commonlst=[]
for i in range(len(df)):
    if i==0:
        commonlst.append([])
    else:
        lister1=df.iloc[i]['list_column']
        lister2=df.iloc[i-1]['list_column']
        commonones=np.intersect1d(lister1, lister2)
        commonlst.append(commonones)
df['CommonOnes']=commonlst

outcountlst=[]
for j in range(len(df)):
    outcount=len(df.iloc[j]['CommonOnes'])
    outcountlst.append(outcount)
df['NumCommonOnes']=outcountlst
display(df)
</code></pre>
<p><a href=""https://i.sstatic.net/CidvUqrk.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/CidvUqrk.png"" alt=""enter image description here"" /></a></p>
","0","Answer"
"78404544","78404511","<p>You were almost there - in base R you can use <code>lapply</code> with your <code>strsplit</code> and <code>gsub</code> (instead of <code>substr</code>):</p>
<pre><code>unlist(lapply(strsplit(gsub(&quot;\\[|\\]&quot;, &quot;&quot;, df$Count), &quot;,&quot;), \(x) sum(as.numeric(x))))

# [1]   41.24547  403.27290 7075.55032
</code></pre>
<p>Data:</p>
<pre><code>df &lt;- read.table(text = 'Month       Count
                 Jan         &quot;[1.2445, 23.888883, 16.11208347]&quot; 
                 Feb         &quot;[2.6473, 400.6256]&quot;
                 March       &quot;[6723.1838282, 187.1212, 90.111, 75.1342899]&quot; ', h = TRUE)
</code></pre>
","2","Answer"
"78404557","78404511","<pre class=""lang-r prettyprint-override""><code>Data &lt;- read.table(text = 'Month       Count
Jan         &quot;[1.2445, 23.888883, 16.11208347]&quot; 
Feb         &quot;[2.6473, 400.6256]&quot;
March       &quot;[6723.1838282, 187.1212, 90.111, 75.1342899]&quot;', 
                   header = T, stringsAsFactors = F)

library(dplyr, warn.conflicts = F)

Data %&gt;% 
  mutate(Count = strsplit(gsub(&quot;\\[|\\]&quot;, &quot;&quot;, Count), &quot;, &quot;)) %&gt;% 
  tidyr::unnest_longer(Count) %&gt;% 
  summarise(Count = sum(as.numeric(Count)), .by = Month) %&gt;% 
  as.data.frame()

#&gt;   Month      Count
#&gt; 1   Jan   41.24547
#&gt; 2   Feb  403.27290
#&gt; 3 March 7075.55032
</code></pre>
<p>or</p>
<pre><code>Data %&gt;% 
  mutate(Count = purrr::map(strsplit(gsub(&quot;\\[|\\]&quot;, &quot;&quot;, Count),
                                     &quot;, &quot;), 
                            ~sum(as.numeric(.x))))
</code></pre>
<p><sup>Created on 2024-04-29 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.0.2</a></sup></p>
","2","Answer"
"78404685","78404630","<p>Make a boolean vector of which tibbles to keep, then subset with <code>[]</code>:</p>
<pre><code>ContractHistory[sapply(ContractHistory, \(x) &quot;Status&quot; %in% names(x))]
</code></pre>
<p>(<code>sapply()</code> here iterates over the elements of <code>ContractHistory</code> and tests each one using the anonymous function defined by <code>\(x)...</code>)</p>
<p>You can see that:</p>
<pre><code>&gt; sapply(ContractHistory, \(x) &quot;Status&quot; %in% names(x))
[1]  TRUE FALSE FALSE FALSE FALSE
</code></pre>
","0","Answer"
"78404859","78404511","<p>make use of the jsonlite package:</p>
<pre><code>transform(df, Count = sapply(Count, \(x)sum(jsonlite::fromJSON(x))))

  Month      Count
1   Jan   41.24547
2   Feb  403.27290
3 March 7075.55032
</code></pre>
<hr />
<p>using <code>py_eval</code> from reticulate:</p>
<pre><code>transform(df, Count = sapply(Count, \(x)sum(reticulate::py_eval(x))))
  Month      Count
1   Jan   41.24547
2   Feb  403.27290
3 March 7075.55032
</code></pre>
","2","Answer"
"78404906","78404511","<p>Another option using <code>parse_number</code></p>
<pre><code>library(readr)

transform(df, Count = sapply(strsplit(Count, &quot;, &quot;), \(x) sum(parse_number(x))))
  Month      Count
1   Jan   41.24547
2   Feb  403.27290
3 March 7075.55032
</code></pre>
","1","Answer"
"78404973","78404511","<p>Here is a base R approach where you convert the column into a <code>sum</code> expression to be evaluated (e.g. <code>sum(1.2445, 23.888883, 16.11208347)</code>):</p>
<pre class=""lang-r prettyprint-override""><code>df$Count &lt;- sapply(parse(text = paste0(&quot;sum&quot;, chartr(&quot;[]&quot;, &quot;()&quot;, df$Count))), eval)
#   Month      Count
# 1   Jan   41.24547
# 2   Feb  403.27290
# 3 March 7075.55032
</code></pre>
","1","Answer"
"78405778","78404630","<p>The function <code>keep</code> from the purrr package is perfect for this. If you try to access <code>Status</code> column in all the tibbles, where a tibble does not have this particular column, you will get NULL. You can then use <code>keep</code> to only keep the tibbles that return non-NULL.</p>
<pre><code>library(purrr)

ContractHistory %&gt;% 
  keep(function(x) !is.null(x$Status))
</code></pre>
<p>UPD: The above solution returns warnings when column Status is not found in other tibbles (but the solution is still valid). The solution below uses @PGSA's <code>&quot;Status&quot; %in% names(x)</code> predicate, but still uses <code>keep</code>:</p>
<pre><code>ContractHistory %&gt;% 
  keep(function(x) &quot;Status&quot; %in% names(x))
</code></pre>
","0","Answer"
"78405840","78405813","<p><code>if</code> comparison was incorrect.  You want to go back to zero after 5 not 4, and <em>always</em> want to do the <code>else:</code> part, so remove the <code>else:</code> line:</p>
<pre class=""lang-py prettyprint-override""><code>listota = ['28/02/2025', '16/03/2025', '16', '14', 'directos', '1.093.026', '29/10/2024', '25/11/2024', '27', '26', 'con', '1.333.784', '28/02/2025', '16/03/2025', '16', '14', 'directos', '1.444.026', '29/10/2024', '25/11/2024', '27', '29', 'con', '1.283.784']

p = 0
listas = [[] for _ in range(6)] 
for i, elemento in enumerate(listota):
    if p &gt; 5:  # 5 not 4.
        p = 0
    # remove else
    listas[p].append(elemento)  # unindent
    p += 1                      # unindent

print(listas)
</code></pre>
<p>Output:</p>
<pre><code>[['28/02/2025', '29/10/2024', '28/02/2025', '29/10/2024'], ['16/03/2025', '25/11/2024', '16/03/2025', '25/11/2024'], ['16', '27', '16', '27'], ['14', '26', '14', '29'], ['directos', 'con', 'directos', 'con'], ['1.093.026', '1.333.784', '1.444.026', '1.283.784']]
</code></pre>
<p>You can also simplify using modulo arithmetic as:</p>
<pre class=""lang-py prettyprint-override""><code>listota = ['28/02/2025', '16/03/2025', '16', '14', 'directos', '1.093.026', '29/10/2024', '25/11/2024', '27', '26', 'con', '1.333.784', '28/02/2025', '16/03/2025', '16', '14', 'directos', '1.444.026', '29/10/2024', '25/11/2024', '27', '29', 'con', '1.283.784']

listas = [[] for _ in range(6)] 
for i, elemento in enumerate(listota):
    listas[i % 6].append(elemento)

print(listas)
</code></pre>
","0","Answer"
"78406025","78405813","<p>You can transform the list into a sequence of groups of 6 with <a href=""https://docs.python.org/3/library/itertools.html#itertools.batched"" rel=""nofollow noreferrer""><code>itertools.batched</code></a>, and then <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""nofollow noreferrer""><code>zip</code></a> the groups of rows to produce groups of columns:</p>
<pre><code>from itertools import batched

print(list(map(list, zip(*batched(listota, 6)))))
</code></pre>
<p>This outputs:</p>
<pre><code>[['28/02/2025', '29/10/2024', '28/02/2025', '29/10/2024'], ['16/03/2025', '25/11/2024', '16/03/2025', '25/11/2024'], ['16', '27', '16', '27'], ['14', '26', '14', '29'], ['directos', 'con', 'directos', 'con'], ['1.093.026', '1.333.784', '1.444.026', '1.283.784']]
</code></pre>
<p>Demo <a href=""https://ato.pxeger.com/run?1=nZA7DoJAFEVjyyqmAw0yX2Ao3IWdsUDAMAkwk-FZ6FZsaHRRrsYwYNRSX3Hzfjc3Ode7OUOtu2G4neC4lo_F9mh1ixRUFrRueqRaoy2gQw5FXZVeo3rQkKMN2vlMYsIwIyz2Q-TTBBP-MTkVo5bKVgXo3m0ikvGIMHdmGaZktLg3FmNK31Pq1P0Vupu8nPMoldP9r3AhxA_h2Vc4k1P43jNWdRCMKII2N64J0UWZYDVjCmZMIUqWY01wZ8Yv1k8"" rel=""nofollow noreferrer"">here</a></p>
","0","Answer"
"78406449","78404630","<p>Using <code>grepl</code>.</p>
<pre><code>&gt; ContractHistory[grepl(&quot;Status&quot;, lapply(ContractHistory, names))]
[[1]]
# A tibble: 9 × 11
  Team    `Contract Type` Status       `Year Signed`   Yrs Total  APY   Guarantees `Amount Earned` `% Earned` `Effective APY`
  &lt;chr&gt;   &lt;chr&gt;           &lt;chr&gt;                &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;          
1 Bengals Drafted         Expired               2014     4 $2,40… $600… $181,652   $2,305,299      96.0%      $576,325       
2 Bills   UFA             Traded                2018     2 $10,0… $5,0… $4,900,000 $0              0.0%       $0             
3 Raiders UFA             Terminated            2018     2 $10,0… $5,0… $4,900,000 $900,000        9.0%       $900,000       
4 Texans  SFA             Expired               2019     1 $3,00… $3,0… $2,500,000 $3,000,000      100.0%     $3,000,000     
5 Texans  UFA             Expired               2020     1 $4,00… $4,0… $3,750,000 $4,000,000      100.0%     $4,000,000     
6 Falcons UFA             Expired               2021     1 $1,21… $1,2… $137,500   $1,212,500      100.0%     $1,212,500     
7 Bengals Practice        Renegotiated          2023     1 $306,… $306… $0         $0              0.0%       $0             
8 Bengals Practice        Elevated              2023     1 $289,… $289… $0         $0              0.0%       $0             
9 Bengals SFA             Terminated            2023     1 $1,16… $1,1… $0         $388,333        33.3%      $388,333   
</code></pre>
","0","Answer"
"78407000","78406892","<blockquote>
<pre><code>if *a.Next == nil{}
</code></pre>
<p>But the complier raise error that the type is not align. Does it not mean the object (referred by a point)'s Next property? After I wrapped the *a with () it works. So I don't know why the * operator is not work.</p>
</blockquote>
<p>Because <code>*a.Next</code> means <code>*(a.Next)</code>, not <code>(*a).Next</code>. If you mean the latter, you would have to write so explicitly... if Go creators didn't think it was annoying, and put in the exception that forms the second part of your question:</p>
<blockquote>
<p>Another question is that when I use the following</p>
<pre><code>if a.Next == nil {}
</code></pre>
<p>It also works fine. But it is strange. Since a should refer to a memory address value which contains object. Memory address can't have &quot;Next&quot; property, only object has it. So why the a.Next can get the value instead of raising exception?</p>
</blockquote>
<p>From <a href=""https://go.dev/ref/spec#Selectors"" rel=""nofollow noreferrer"">Spec (Selectors)</a>:</p>
<blockquote>
<ol start=""3"">
<li>As an exception, if the type of <code>x</code> is a <a href=""https://go.dev/ref/spec#Type_definitions"" rel=""nofollow noreferrer"">defined</a> pointer type and <code>(*x).f</code> is a valid selector expression denoting a field (but not a method), <code>x.f</code> is shorthand for <code>(*x).f</code>.</li>
</ol>
</blockquote>
<p>So, <code>(*a).Next</code> can be written <code>a.Next</code> without ambiguity.</p>
<p>Remember that while Go is <em>descended</em> from C, it does not mean its semantics is the same as C.</p>
","1","Answer"
"78407028","78406892","<p>What you have here is a <a href=""https://go.dev/ref/spec#Selectors"" rel=""nofollow noreferrer"">selector expression</a>: <code>a.Next</code> is shorthand for <code>(*a).Next</code> and is of type <code>*Node</code>, so it's a pointer and you can directly compare it to <code>nil</code>. ``</p>
<p><code>*a.Next</code> is a shorthand for <code>*(*a).Next</code> and of type <code>Node</code>, so you can't compare it to nil.</p>
","1","Answer"
"78408427","78408325","<p>Construct a list as you go and check if current amount of items matches index contained in missing values:</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = {2, 4, 5, 7}

out = []

for el in x0:
    while len(out)+1 in missing_values:
        out.append(0)
    out.append(el)
#to handle indexes at the end
while len(out)+1 in missing_values:
    out.append(0)
print(out) # [1, 0, 2, 0, 0, 3, 0, 4, 5]
</code></pre>
<p>(adding 1 to <code>len(out)</code> is needed as lists are 0-indexed)</p>
","3","Answer"
"78408436","78408325","<p>Since Lists are indexed from 0
you need to subtract 1 so it will end on index 1 and 3</p>
<p>Also we make a copy of a x0 so we dont break indexing via enumerate</p>
<p>and we only insert 0 on a positions that need inserting without any need of going through the full loop</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = [2, 4]


result = x0[:]


for i, position in enumerate(missing_values):
    # Convert 1-based position to 0-based index and adjust for previous insertions
    index_to_insert = position - 1
    # Insert zero at the calculated index
    result.insert(index_to_insert, 0)

print(result)
</code></pre>
","1","Answer"
"78408437","78408325","<p>As @user24803130 said, Python lists are zero-indexed. If you want your indices to start at 1, you will have to deduct that.
You can make use of the list's <code>insert</code> function:</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = [2, 4]  # indices to set to zero

for i in missing_values:
    x0.insert(i-1, 0)

print(x0)
</code></pre>
<p>This will give you your expected output:</p>
<pre><code>[1, 0, 2, 0, 3, 4, 5]
</code></pre>
<p>Note, that this code expects missing values to be an ordered list. If this is not the case you may replace <code>missing_values</code> in the for loop by <code>sorted(missing_values)</code>.</p>
","2","Answer"
"78408454","78408325","<p>You seem to have two issues in the code.</p>
<p>First, lists are 0-indexed, meaning that the first position in the list is <code>list[0]</code> and not <code>list[1]</code>. This can easily be fixed in your code:</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = [2, 4]  # indices to set to zero

# Create a set of indices from missing_values
indices_to_set_zero = set(missing_values)

# Initialize the result list
result = []

# Iterate through x0
for i, value in enumerate(x0):
    # If the index is in the set, append 0 before the value
    if (i + 1) in indices_to_set_zero: # (i + 1) to account for 0-indexing
        result.append(0)
    result.append(value)

# If the last index is in the set, append a 0 at the end
if len(x0) in indices_to_set_zero:
    result.append(0)

print(result)
</code></pre>
<p>An alternative to doing it this way would be to just set correct indices in <code>missing_values</code>.</p>
<p>Second, since you are appending <code>0</code> to <code>result</code> your subsequent appends are offset. This could be solved by changing the layout of your for-loop, try this code:</p>
<pre><code>x0 = [1, 2, 3, 4, 5]
missing_values = [2, 4]  # indices to set to zero

# Create a set of indices from missing_values
indices_to_set_zero = set(missing_values)

# Initialize the result list
result = []

# Iterate through len(x0) + len(missing_values)
x0_index = 0
for i in range(len(x0) + len(missing_values)):
    # Either append a zero or append from the x0 list
    if (i + 1) in indices_to_set_zero:
        result.append(0)
    else:
        result.append(x0[x0_index])
        x0_index += 1

print(result)
</code></pre>
<p>Note that this also gets rid of your check for the last indexed zero.</p>
<p>I hope this gives you some guidance</p>
","1","Answer"
"78408458","78408325","<p>You don't need to iterate over the list itself. Iterating the insertion points will be enough:</p>
<pre><code>x0 = [1, 2, 3, 4, 5, 6, 7 ]
missing_values = [2, 4, 5, 7, 9, 10,11,12,13,14,15,16,17,19, 21, 24]

# Create a set of indices from missing_values
indices_to_set_zero = sorted(missing_values)

# Make sure it contains only valid indices: 
while  indices_to_set_zero[-1] &gt; len(x0):
    indices_to_set_zero.pop()

# Initialize the result list
result = x0[:] # copy the original list

# If the last index is missing append a 0 at the end
if indices_to_set_zero[-1]==len(x0):
    result.append(0) 
    #indices_to_set_zero.pop()

for index in indices_to_set_zero :
    result.insert(index - 1, 0)

print(result)
</code></pre>
<p>gives:</p>
<pre><code>[1, 0, 2, 0, 0, 3, 0, 4, 5, 6, 7, 0]
</code></pre>
<p><code>sorted()</code> makes sure, that the list of missing values starts with the smallest value and next values are increasing. Without sorted list of missing values the algorithm will produce wrong results.</p>
<p><code>if indices_to_set_zero[-1]==len(x0):</code> makes sure that you append after the last item in the list and not before. <code>pop()</code> makes sure the last missing value is removed from the list of missing ones.</p>
<hr />
<p>Please NOTICE that the code by <em>matszwecja</em> will print:</p>
<pre><code>[1, 0, 2, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 7]

</code></pre>
<p>Which behavior is the expected and required one is not known as there is no information in the question about handling of edge cases. If adding zeros at any specified position is required than code by <em>matszwecja</em> does not fill up the sequence up to place the zeros there.</p>
<p>As the requirement for placing a zero at the end of the generated sequence is not addressed in the accepted answer contrary to the code suggesting it in question code it seems to be a not necessary requirement.</p>
","1","Answer"
"78408499","78376234","<p>Simply use <code>pool_predictions()</code>:</p>
<pre class=""lang-r prettyprint-override""><code>library(ggeffects)
# example for multiple imputed datasets
data(&quot;nhanes2&quot;, package = &quot;mice&quot;)
imp &lt;- mice::mice(nhanes2, printFlag = FALSE)
predictions &lt;- lapply(1:5, function(i) {
  m &lt;- lm(bmi ~ age + hyp + chl, data = mice::complete(imp, action = i))
  predict_response(m, &quot;age&quot;)
})
pool_predictions(predictions)
#&gt; # Predicted values of bmi
#&gt; 
#&gt; age   | Predicted |       95% CI
#&gt; --------------------------------
#&gt; 20-39 |     30.09 | 28.17, 32.02
#&gt; 40-59 |     24.60 | 21.48, 27.72
#&gt; 60-99 |     21.75 | 18.24, 25.26
#&gt; 
#&gt; Adjusted for:
#&gt; * hyp =     no
#&gt; * chl = 196.32

# and:
# pool_predictions(predictions) |&gt; plot()
</code></pre>
<p><sup>Created on 2024-04-30 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
<p>Note that <code>pool_predictions()</code> account for the missing values / multiple imputations and adjusts the standard error, thus you get slightly larger confidence intervals than just taking the mean.</p>
","1","Answer"
"78409673","78409585","<p>In powerquery, Add column ... custom column ... with</p>
<pre><code>= Text.Combine(let a=Text.Split([Measurements Taken],&quot;,&quot;), b=Text.Split([#&quot;# of Measurment&quot;],&quot;,&quot;) in List.Transform(List.Positions (a), each a{_}&amp;&quot;-&quot;&amp;b{_}),&quot;,&quot;)
</code></pre>
<p>or</p>
<pre><code>= Text.Combine(List.Transform(List.Zip({Text.Split([Measurements Taken],&quot;,&quot;),Text.Split([#&quot;# of Measurment&quot;],&quot;,&quot;)}), each _{0}&amp;&quot;-&quot;&amp;_{1}),&quot;,&quot;)
</code></pre>
<p><a href=""https://i.sstatic.net/Z44fjnAm.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/Z44fjnAm.png"" alt=""enter image description here"" /></a></p>
","1","Answer"
"78410302","78410264","<p>One option might be to keep a list of pointers (indexes) into the array, originally in order, that you don’t require to be in any particular order to sample and that you can swap and pop efficiently:</p>
<pre><code>rng = np.random.default_rng(seed=42)
indices = np.arange(len(x))
indices_left = len(x)
for _ in range(1000):
    i = rng.integers(indices_left)
    ## do something with x[indices[i]]
    indices[i] = indices[indices_left - 1]  # swap
    indices_left -= 1  # pop
</code></pre>
","0","Answer"
"78410311","78410264","<p>Just use <code>rng.choice</code> and generate the indices in advance (sample from range 0, N-1 without replacement), then iterate through them.</p>
<pre><code>rng = np.random.default_rng(seed=42)
idxs = rng.choice(range(len(x)), size=1000, replace=False)
for i in idxs:
    # do something with x[i]
</code></pre>
","4","Answer"
"78410414","78410264","<p>A flexible way to do this kind of thing is to take your explicit list of indices, and use your library's <code>shuffle()</code> function to scramble it (<code>random.shuffle(indices)</code> in plain Python, but I don't recall exactly how to spell it using <code>numpy</code>'s <code>random</code>).</p>
<p>Then your loop becomes:</p>
<pre class=""lang-py prettyprint-override""><code>for _ in range(1000):
    i = indices.pop()
    ## do something with x[i]
</code></pre>
<p>I say &quot;flexible&quot; because it isn't confined to a single loop. <code>indices</code> always contains the collection of indices not yet visited. So it can be reused by more loops, if wanted, or even passed to functions.</p>
<p>Or, e.g., if at some point you want a chunk of <code>k</code> fresh indices instead,</p>
<pre class=""lang-py prettyprint-override""><code>    ichunk = indices[-k:]
    del indices[-k:]
</code></pre>
<p>Using <code>pop()</code> is important to speed: removing from the end of a list is cheap. In effect, Python just decrements an internal pointer to where the list ends. Similarly for <code>del[-k:]</code>. In general, <code>remove()</code> has to physically move every element to the right of the removed element left by a position, to &quot;fill the hole&quot;. That takes average-case time proportional to the length of the list. But when removing from the end, there is no hole <em>to</em> fill.</p>
","2","Answer"
"78411560","78409585","<p>Do you really need the second column?
If you do not, you can create your Desired Column directly from just the first column:</p>
<pre><code>let
    Source = Excel.CurrentWorkbook(){[Name=&quot;Table1&quot;]}[Content],
    #&quot;Changed Type&quot; = Table.TransformColumnTypes(Source,{{&quot;Measurements Taken&quot;, type text}}),
    #&quot;Added Custom&quot; = Table.AddColumn(#&quot;Changed Type&quot;, &quot;Desired Column&quot;, each 
        let 
            nums=List.Transform(Text.Split([Measurements Taken],&quot;,&quot;),each Text.From(_)),
            pos = List.Transform(List.Numbers(1,List.Count(nums)),each Text.From(_)),
            zip = List.Zip({nums,pos}),
            combine = List.Transform(zip, each Text.Combine(_,&quot;-&quot;))
        in 
            Text.Combine(combine,&quot;, &quot;), type text)
in
    #&quot;Added Custom&quot;
</code></pre>
<p><a href=""https://i.sstatic.net/VC7B5Tct.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/VC7B5Tct.png"" alt=""enter image description here"" /></a></p>
","0","Answer"
"78412017","78411945","<p>If you know the two txt files will have the same exact lines in the same order:</p>
<pre><code>from pathlib import Path

population_path = Path('population.txt')
area_path = Path('area.txt')
output_path = Path('density.txt')
with open(population_path, 'r') as pop_file, open(area_path, 'r') as area_file, open(output_path, 'w') as output_file:
  for pop_line, area_line in zip(pop_file, area_file):
    city_state_pop, population = pop_line.rsplit(' ', 1)
    city_state_area, area = area_line.rsplit(' ', 1)
    density = int(population) / int(area)
    output_file.write(f&quot;{city_state_pop} {density:.2f}\n&quot;)
</code></pre>
<p><strong>Output <code>density.txt</code>:</strong></p>
<pre><code>Calico, California         6.00
Rhyolite, Nevada           1.00
Goldfield, Arizona         2.50
St. Elmo, Colorado         1.50
Terlingua, Texas           10.00
Virginia City, Montana     0.67
Nevada City, Montana       2.00
Bodie, California          0.45
Cahawba, Alabama           1.10
Kennecott, Alaska          0.01
Bannack, Montana           10.13
South Pass City, Wyoming   14.33
Centralia, Pennsylvania    1.00
Thurmond, West Virginia    1.10
Glenrio, Texas             1.00
Glenrio, New Mexico        1.00
Bulowville, Florida        0.90
</code></pre>
<p>Alternatively, if you cannot guarantee the same order in the two txt files, consider breaking down your task into steps and creating helper functions for each step:</p>
<pre><code>from pathlib import Path


def read_data(filename: Path) -&gt; dict[str, int]:
  &quot;&quot;&quot;Reads data from a given filename and parses it into a dictionary.
  
  Expected file only has lines with 'City, State' followed by whitespace and a integer.

  Args:
    filename (Path): The path to the file to read.

  Returns:
    A dictionary where keys are 'City, State' and values are integers.
  &quot;&quot;&quot;
  data = {}
  with open(filename, 'r') as file:
    for line in file:
      line = line.strip()
      if line:
        parts = line.rsplit(' ', 1)
        name = parts[0].strip()
        number = int(parts[1])
        data[name] = number
  return data


def calculate_density(population_data: dict[str, int],
                      area_data: dict[str, int]) -&gt; dict[str, float]:
  &quot;&quot;&quot;Calculates the population density by dividing the population by the area.

  Args:
    population_data: A dictionary of populations keyed by 'City, State'.
    area_data: A dictionary of areas keyed by 'City, State'.

  Returns:
    A dictionary of population densities keyed by 'City, State'.
  &quot;&quot;&quot;
  return {
    city_state: population / area_data[city_state]
    for city_state, population in population_data.items()
    if city_state in area_data
  }


def write_data(filename: Path, data: dict[str, float]) -&gt; None:
  &quot;&quot;&quot;Writes data dict to a file after sorting, with each key-value pair on a new line.

  Args:
    filename: The path to the file where data will be written.
    data: The data to write, where each key-value pair is a line.
  &quot;&quot;&quot;
  longest_key_length = max(len(key) for key in data)
  format_string = f&quot;{{:&lt;{longest_key_length}}} {{:&gt;10}}\n&quot;
  with open(filename, 'w') as file:
      for key, value in sorted(data.items()):
          # Right-align the value in a 10-character wide field.
          file.write(format_string.format(key, f&quot;{value:.2f}&quot;))

def main() -&gt; None:
  &quot;&quot;&quot;Entry point of script.&quot;&quot;&quot;
  write_data(filename=Path('density.txt'),
             data=calculate_density(
                 population_data=read_data(Path('population.txt')),
                 area_data=read_data(Path('area.txt')),
             ))


if __name__ == '__main__':
  main()
</code></pre>
<p><strong>Output <code>density.txt</code></strong>:</p>
<pre><code>Bannack, Montana              10.13
Bodie, California              0.45
Bulowville, Florida            0.90
Cahawba, Alabama               1.10
Calico, California             6.00
Centralia, Pennsylvania        1.00
Glenrio, New Mexico            1.00
Glenrio, Texas                 1.00
Goldfield, Arizona             2.50
Kennecott, Alaska              0.01
Nevada City, Montana           2.00
Rhyolite, Nevada               1.00
South Pass City, Wyoming      14.33
St. Elmo, Colorado             1.50
Terlingua, Texas              10.00
Thurmond, West Virginia        1.10
Virginia City, Montana         0.67
</code></pre>
","0","Answer"
"78412028","78411945","<p>You can try the following code:</p>
<pre class=""lang-py prettyprint-override""><code>import re

with open(&quot;area.txt&quot;, &quot;r&quot;) as a, open(&quot;population.txt&quot;, &quot;r&quot;) as p, open(&quot;population_density.txt&quot;, &quot;w&quot;) as d:
    areas = a.read().splitlines()
    populations = p.read().splitlines()
    for area, population in zip(areas, populations):
        city = re.search(r&quot;^[^,]+, [A-Za-z]+ ([A-Za-z]+)?&quot;, area)[0]
        area = int(re.search(r&quot;\d+&quot;, area)[0])
        population = int(re.search(r&quot;\d+&quot;, population)[0])
        d.write(f&quot;{city:&lt;27}{population/area:.3f}\n&quot;)
</code></pre>
<p><code>population_density.txt</code>:</p>
<pre><code>Calico, California         6.000
Rhyolite, Nevada           1.000
Goldfield, Arizona         2.500
St. Elmo, Colorado         1.500
Terlingua, Texas           10.000
Virginia City, Montana     0.667
Nevada City, Montana       2.000
Bodie, California          0.450
Cahawba, Alabama           1.100
Kennecott, Alaska          0.007
Bannack, Montana           10.130
South Pass City, Wyoming   14.333
Centralia, Pennsylvania    1.000
Thurmond, West Virginia    1.100
Glenrio, Texas             1.000
Glenrio, New Mexico        1.000
Bulowville, Florida        0.900
</code></pre>
","0","Answer"
"78416221","78416193","<p>It looks like you want to sort by 2 criteria: first, by the value of the number at the end of the string, and then by the starting letter.</p>
<p>It seems like you swapped the order of your criteria, and you also have <code>[1:0]</code> as your indexing to obtain the value of the number, which has an exclusive-end index of <code>0</code> which will result in an empty string.</p>
<p>Instead, you want to first sort by the number following the first character of the string. You can get the string value of this via <code>item[1:]</code>, and then apply <code>int(item[1:])</code> to cast it to a number. Then, your second criteria is just the first character itself (which for your list is always a letter), which can be obtained via <code>item[0]</code></p>
<p>So, your new key would be <code>(int(item[1:]), item[0])</code>.</p>
<p>To sort <code>zip(l1, l2)</code> by these criteria, the following should give you your desired output:</p>
<pre class=""lang-py prettyprint-override""><code>zipped = zip(l1, l2)
sorted_zip = sorted(zipped, key=lambda item: (int(item[0][1:]), item[0][0]))
</code></pre>
<p>This will sort the zipped list by the criteria for <code>l1</code>, since the corresponding <code>l1</code> entry is obtained by <code>item[0]</code> for an entry <code>item</code> in the zipped list. Then, if you want to unzip from this:</p>
<pre class=""lang-py prettyprint-override""><code>sorted_l1 = [item[0] for item in sorted_zip]
sorted_l2 = [item[1] for item in sorted_zip]
</code></pre>
","3","Answer"
"78416368","78416193","<p>If you want to sort the List of Tuples from 'zip' then you could use:</p>
<pre><code>sorted(list_sort, key=lambda item: (int(item[0][1:]), item[1]))
</code></pre>
<p>item[0] is the first element of the Tuple from <code>l1</code> and item[0][1:] is the digits after the first letter. item[1] is the second element of the tuple which derives from <code>l2</code>. The result is:</p>
<pre><code>[('A1', 90), ('C1', 120), ('D1', 120), ('E1', 120), ('F2', 40), ('G2', 40), ('H2', 90), ('D2', 120), ('A3', 90), ('E3', 90), ('A10', 90), ('B10', 90), ('C11', 120)]
</code></pre>
","1","Answer"
"78416728","78416349","<p>You need extra variable to control if you between <code>proc sql</code> and <code>quit</code></p>
<p>Before loop set i.e <code>found = False</code>.</p>
<p>In loop:</p>
<ul>
<li>when you find <code>proc sql</code> then set <code>found = True</code> (and set empty <code>fm</code>)</li>
<li>next use <code>if found: fm.append(i)</code></li>
<li>when you find <code>quit</code> then set <code>found = False</code> (and convert <code>fm</code> to string, and add to <code>lt</code>)</li>
</ul>
<p>It is important to do it in this order.</p>
<hr />
<p>Other method is to use <code>regex</code> for this - but I will skip it :)</p>
<hr />
<p>Minimal working code:</p>
<pre><code>row ='''proc sql;
        create table answer_1_stg1 as 
        select  distinct a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc
                ,sum(b.invoice_qty) as sum_invoice
                ,avg(b.invoice_qty) as avg_invoice
                ,max(b.invoice_qty) as max_invoice
                ,min(b.invoice_qty) as min_invoice
        from promo as a
        left join invoice as b
        on 
        a.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and
        a.basecode=b.basecode and
        a.SALESORG_CD=b.SALESORG_CD and
        a.LOCATION_CD=b.LOCATION_CD
        and b.INVOICE_DT between a.event_start_dt and a.event_end_dt
        where year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017
        group by a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc;
        quit;
        
%sort(answer_1_stg1,descending sum_invoice);

proc sql;
create table answer_1_stg2 as
select distinct promo_mechanic_desc
        ,sum(sum_invoice) as total
from answer_1_stg1;
quit;'''

found = False

lt = []
fm = []

for line in row.split('\n'):
    line = line.strip()
    if &quot;proc sql&quot; in line:
        found = True
        fm = []
    if found:
        fm.append(line)
    if &quot;quit&quot; in line:
        found = False
        lt.append( &quot;\n&quot;.join(fm) )
      
for item in lt:
    print(item)
    print('----')      
</code></pre>
","0","Answer"
"78417101","78416349","<p>Regex is handy for this.</p>
<pre><code>import re

row ='''proc sql;
        create table answer_1_stg1 as 
        select  distinct a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc
                ,sum(b.invoice_qty) as sum_invoice
                ,avg(b.invoice_qty) as avg_invoice
                ,max(b.invoice_qty) as max_invoice
                ,min(b.invoice_qty) as min_invoice
        from promo as a
        left join invoice as b
        on 
        a.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and
        a.basecode=b.basecode and
        a.SALESORG_CD=b.SALESORG_CD and
        a.LOCATION_CD=b.LOCATION_CD
        and b.INVOICE_DT between a.event_start_dt and a.event_end_dt
        where year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017
        group by a.CUSTOMER_HIERARCHY_LVL2_CD
                ,b.brand_cd
                ,b.category_cd
                ,a.promo_mechanic_nm
                ,a.promo_mechanic_desc;
        quit;
        
%sort(answer_1_stg1,descending sum_invoice);

proc sql;
create table answer_1_stg2 as
select distinct promo_mechanic_desc
        ,sum(sum_invoice) as total
from answer_1_stg1;
quit;'''

regex = r&quot;(proc sql.*?quit)&quot;

matches = re.finditer(regex, row, re.DOTALL)

m = [match.groups()[0] for match in matches]

print(m)
</code></pre>
<p>Here is the output. Note that you necessarily lose the formatting of the string so it really can't look exactly like the triple quote string you posted in the question.</p>
<pre><code>['proc sql;\n        create table answer_1_stg1 as \n        select  distinct a.CUSTOMER_HIERARCHY_LVL2_CD\n                ,b.brand_cd\n                ,b.category_cd\n                ,a.promo_mechanic_nm\n                ,a.promo_mechanic_desc\n                ,sum(b.invoice_qty) as sum_invoice\n                ,avg(b.invoice_qty) as avg_invoice\n                ,max(b.invoice_qty) as max_invoice\n                ,min(b.invoice_qty) as min_invoice\n        from promo as a\n        left join invoice as b\n        on \n        a.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and\n        a.basecode=b.basecode and\n        a.SALESORG_CD=b.SALESORG_CD and\n        a.LOCATION_CD=b.LOCATION_CD\n        and b.INVOICE_DT between a.event_start_dt and a.event_end_dt\n        where year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017\n        group by a.CUSTOMER_HIERARCHY_LVL2_CD\n                ,b.brand_cd\n                ,b.category_cd\n                ,a.promo_mechanic_nm\n                ,a.promo_mechanic_desc;\n        quit', 'proc sql;\ncreate table answer_1_stg2 as\nselect distinct promo_mechanic_desc\n        ,sum(sum_invoice) as total\nfrom answer_1_stg1;\nquit']
</code></pre>
<p>If you want to clean up the strings more you can iterate though the list and handle \n and white space.</p>
<p>for example</p>
<pre><code>m = ['\n'.join([o.strip() for o in n.split('\n')]) for n in m]
</code></pre>
<p>gives the strings with excessive whitespace removed but retains newline markers.</p>
<pre><code>['proc sql;\ncreate table answer_1_stg1 as\nselect  distinct a.CUSTOMER_HIERARCHY_LVL2_CD\n,b.brand_cd\n,b.category_cd\n,a.promo_mechanic_nm\n,a.promo_mechanic_desc\n,sum(b.invoice_qty) as sum_invoice\n,avg(b.invoice_qty) as avg_invoice\n,max(b.invoice_qty) as max_invoice\n,min(b.invoice_qty) as min_invoice\nfrom promo as a\nleft join invoice as b\non\na.CUSTOMER_HIERARCHY_LVL2_CD=b.CUSTOMER_HIERARCHY_LVL2_CD and\na.basecode=b.basecode and\na.SALESORG_CD=b.SALESORG_CD and\na.LOCATION_CD=b.LOCATION_CD\nand b.INVOICE_DT between a.event_start_dt and a.event_end_dt\nwhere year(a.event_start_dt) = 2017 and year(b.INVOICE_DT) = 2017\ngroup by a.CUSTOMER_HIERARCHY_LVL2_CD\n,b.brand_cd\n,b.category_cd\n,a.promo_mechanic_nm\n,a.promo_mechanic_desc;\nquit', 'proc sql;\ncreate table answer_1_stg2 as\nselect distinct promo_mechanic_desc\n,sum(sum_invoice) as total\nfrom answer_1_stg1;\nquit']
</code></pre>
","0","Answer"
"78427507","78425770","<ol>
<li><p>your source xml have 2 issues which makes xml broken on line 226 and 240
where value=33 -&gt; should be value=&quot;33&quot;, same value=8 should be value=&quot;8&quot;
and you still did not fix it in provided link (!)</p>
</li>
<li><p>values of conditions file path contaons one back slash instead of 2 (one as escape char)</p>
</li>
<li><p>the best approach was to Serialize to json, and from json Deserialize to object.</p>
</li>
</ol>
<p>P.S. it was an complexity to convert Condition/s so I had to implement custom  converter</p>
<pre><code>
void Main()
{
    XDocument doc = XDocument.Parse(File.ReadAllText(&quot;c:\\1\\file.xml&quot;));
    string myJsonResponse = JsonConvert.SerializeXNode(doc.Root, Newtonsoft.Json.Formatting.Indented);
    Root myDeserializedClass = JsonConvert.DeserializeObject&lt;Root&gt;(myJsonResponse).Dump();
}

public class Build
{
    public string BuildMachine { get; set; }
    public List&lt;Process&gt; Process { get; set; }
}

public class BuildVerification
{
    public string codeFreezeTime { get; set; }
    public List&lt;Build&gt; build { get; set; }
}

[JsonConverter(typeof(ConditionsConverter))]
public class Conditions
{
    public List&lt;Condition&gt; Condition { get; set; }
    public Conditions() { Condition = new List&lt;Condition&gt;(); }
    
}

public class Condition
{
    public string Name { get; set; }
    public string Value { get; set; }
}

public class Process
{
    public string ProcessName { get; set; }
    public string startTimeHeader { get; set; }
    public Conditions Conditions { get; set; }
    public SuccessCriteria successCriteria { get; set; }
}

public class Root
{
    public BuildVerification BuildVerification { get; set; }
}

public class SuccessCriteria
{
    [JsonProperty(&quot;field&quot;)]
    public string field { get; set; }
    [JsonProperty(&quot;comparison&quot;)]
    public string comparison { get; set; }
    [JsonProperty(&quot;value&quot;)]
    public string value { get; set; }
    public SuccessCriteria() {}
}

class ConditionsConverter : Newtonsoft.Json.JsonConverter
{
    public override bool CanConvert(Type objectType) =&gt; objectType == typeof(Conditions);
    public override bool CanRead =&gt; true;
    public override bool CanWrite =&gt; true;

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    {
        var lst = new Conditions();
        if (reader.TokenType == JsonToken.StartObject)
        {
            reader.Read();
            while (reader.TokenType != JsonToken.EndObject)
            {
                if (reader.TokenType != JsonToken.PropertyName)
                    throw new FormatException(&quot;Expected a property name, got: &quot; + reader.TokenType);
                string propertyName = reader.Value.ToString();
                reader.Read();
                if (propertyName == &quot;Condition&quot;)
                {
                    if (reader.TokenType != JsonToken.StartArray)
                    {
                        var item = JObject.Load(reader);
                        lst.Condition.Add(new Condition() { Name = item.GetValue(&quot;@name&quot;).ToString(), Value = item.GetValue(&quot;@value&quot;).ToString() });
                    }
                    else
                    {
                        reader.Read();
                        var values = new List&lt;string&gt;();
                        while (reader.TokenType != JsonToken.EndArray)
                        {
                            if (reader.Value != null)
                                values.Add(reader.Value?.ToString());
                            reader.Read();
                        }
                        values.Chunk(4).ToList().ForEach(fe =&gt;
                        {
                            lst.Condition.Add(new Condition() { Name = fe[1], Value = fe[3] });
                        });
                    }
                }
                reader.Read();
            }
        }
        return lst;
    }

    public override void WriteJson(JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
    {
        if (value == null)
        {
            writer.WriteNull();
            return;
        }
        var o = value as Conditions;

        JObject jo = new JObject();
        Type type = value.GetType();
        jo.Add(&quot;type&quot;, type.Name);

        jo.WriteTo(writer);
    }
}
</code></pre>
<p>result</p>
<p><a href=""https://i.sstatic.net/pBvPQjVf.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/pBvPQjVf.png"" alt=""enter image description here"" /></a></p>
","1","Answer"
"78429733","78425770","<p>You need to do a couple of things to fix up your code.</p>
<ol>
<li>Fix your classes to include actual <em>property definitions</em>. Your current class definitions have no actual properties, and the constructors just set and discard variables local to the constructor. Once the properties are defined, there is no particular need for an explicit constructor.</li>
<li>Change the <code>ProcessValidationInfo</code> class to use properties of type <code>List&lt;Condition&gt;</code> and <code>List&lt;SuccessCriteria&gt;</code> directly. You do not need separate wrapper classes for these lists.</li>
<li>Drop the now-unneeded <code>SuccessCriterium</code> and <code>Conditions</code> classes.</li>
<li>Replace the <code>new { ... initializer-list ... }</code> anonymous class constructors with explicity-typed constructors - <code>new ProcessValidationInfo { ... initializer-list ... }</code> and similar.</li>
<li>Add a line to populate <code>codeFreezeTime</code>. (This was missing from the earlier solution.)</li>
</ol>
<p>The updated class definitions would be something like:</p>
<pre><code>public class Condition
{
    public string cName { get; set; } = &quot;&quot;;
    public string cValue { get; set; } = &quot;&quot;;
}

public class SuccessCriteria
{
    public string f1 { get; set; } = &quot;&quot;;
    public string c1 { get; set; } = &quot;&quot;;
    public string v1 { get; set; } = &quot;&quot;;
}

public class ProcessValidationInfo
{
    public string codeFreezeTime { get; set; } = &quot;&quot;;
    public string startTimeHeader { get; set; } = &quot;&quot;;
    public string buildMach { get; set; } = &quot;&quot;;
    public string p1 { get; set; } = &quot;&quot;;
    public List&lt;Condition&gt; conditionList { get; set; } = new List&lt;Condition&gt;();
    public List&lt;SuccessCriteria&gt; successCriteriaList { get; set; } = new List&lt;SuccessCriteria&gt;();
}
</code></pre>
<p>The default initializers of the (<code>= 0;</code> and <code>= new List&lt;xxx&gt;()</code>) are probably not needed and can be eliminated from the above, unless you have a specific need for them. Common coding conventions would normally name the properties with an initial cap, but I have left those names unchanged for now.</p>
<p>I did take the liberty of renaming the collection properties to <code>conditionList</code> and <code>successCriteriaList</code>.</p>
<p>The XML parsing logic would then just need to add the explicit class names to the <code>new {...initializers...}</code> expressions.</p>
<pre><code>var results1 =
    xmlDoc2.Descendants(&quot;build&quot;)
    .SelectMany(b =&gt; b.Descendants(&quot;Process&quot;)
    .Select(p =&gt; new ProcessValidationInfo
    {
        codeFreezeTime = b.Parent.Element(&quot;codeFreezeTime&quot;).Value,
        buildMach = b.Element(&quot;BuildMachine&quot;).Value,
        p1 = p.Element(&quot;ProcessName&quot;).Value,
        startTimeHeader = p.Element(&quot;startTimeHeader&quot;).Value,
        conditionList = p.Descendants(&quot;Condition&quot;)
            .Select(c =&gt; new Condition
            {
                cName = c.Attribute(&quot;name&quot;).Value,
                cValue = c.Attribute(&quot;value&quot;).Value
            })
            .ToList(),
        successCriteriaList = p.Descendants(&quot;SuccessCriteria&quot;)
            .Select(sc =&gt; new SuccessCriteria
            {
                f1 = sc.Element(&quot;field&quot;).Value,
                c1 = sc.Element(&quot;comparison&quot;).Value,
                v1 = sc.Element(&quot;value&quot;).Value
            })
            .ToList()
    })).ToList();
</code></pre>
<p>The results are now of type <code>List&lt;ProcessValidationInfo&gt;</code>.</p>
<p>Results (partial):</p>
<pre><code>    {&quot;codeFreezeTime&quot;:&quot;19:00&quot;,&quot;startTimeHeader&quot;:&quot;StartTime&quot;,&quot;buildMach&quot;:&quot;mach46&quot;,&quot;p1&quot;:&quot;ParseISLogStats&quot;,&quot;conditionList&quot;:[{&quot;cName&quot;:&quot;BuildProject&quot;,&quot;cValue&quot;:&quot;KInstallerBuild&quot;},{&quot;cName&quot;:&quot;BaseBuildArea&quot;,&quot;cValue&quot;:&quot;D:\\R_Builds\\K\\v2.1\\nightly&quot;}],&quot;successCriteriaList&quot;:[{&quot;f1&quot;:&quot;Status&quot;,&quot;c1&quot;:&quot;equal&quot;,&quot;v1&quot;:&quot;Success&quot;}]}
</code></pre>
<p>(Note that the above results are just a JSON serialization of each <code>ProcessValidationInfo</code> object, because that was a convenient way of dumping their values in the demo code,</p>
<p>You can also just send the entire <code>ProcessValidationInfo</code> object to your <code>ParseLogFile1()</code> method as a single parameter.</p>
<pre><code>//send to parse log method:
foreach (var currentItem in results1)
{
   ParseLogFile1(currentItem);
}

// elsewhere
public void ParseLogFile1(ProcessValidationInfo item)
{
   // Here you can reference the properties as needed:
   //   item.codeFreezeTime
   //   item.buildMach
   //   item.p1
   //   item.startTimeHeader
   //   foreach (var condition in item.conditionList) { ... }
   //   foreach (var successCriteria in item.successCriteriaList) { ... }
}
</code></pre>
<p>See <a href=""https://dotnetfiddle.net/qfnMEK"" rel=""nofollow noreferrer"">this .NET fiddle</a> for a demo.</p>
","1","Answer"
"78431666","78430579","<pre><code>let l = [&quot;one&quot;; &quot;two&quot;; &quot;three&quot;]
printf &quot;%A&quot; l
</code></pre>
<p>FInd the docs about printing here: <a href=""https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/plaintext-formatting"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/plaintext-formatting</a></p>
","1","Answer"
"78431928","78431760","<p>the way you want to pass the parameter I into the URL string has to use &quot;f&quot; at the beginning of the string</p>
<p>instead of:</p>
<pre><code>exec_data = requests.get('https://datacenter-web.eastmoney.com/api/data/v1/get?reportName=RPT_EXECUTIVE_HOLD_DETAILS&amp;columns=ALL&amp;filter=(SECURITY_CODE%3D&quot;{i}&quot;)')\
    .json().get('result').get('data')
</code></pre>
<p>do:</p>
<pre><code>exec_data = requests.get(f'https://datacenter-web.eastmoney.com/api/data/v1/get?reportName=RPT_EXECUTIVE_HOLD_DETAILS&amp;columns=ALL&amp;filter=(SECURITY_CODE%3D&quot;{i}&quot;)')\
    .json().get('result').get('data')
</code></pre>
<p>that tells Python to use format style replacing what's in the curly brackets with its value</p>
","1","Answer"
"78431937","78431760","<p>First you're missing the f at the start of the string, meaning that the values for i in the braces aren't being evaluated. On top of that you're using <code>get</code> assuming you'll never get a stock number that isn't valid which can be another reason why it could return <code>None</code>. Instead of assuming it'll work you should try something like this:</p>
<pre><code>df_list, broken_values = [], []

for i in target_list_onlynumber:
    try:   
        exec_data = (
            requests.get(
                f'https://datacenter-web.eastmoney.com/api/data/v1/get?reportName=RPT_EXECUTIVE_HOLD_DETAILS&amp;columns=ALL&amp;filter=(SECURITY_CODE%3D&quot;{i}&quot;)'
            ).json().get('result').get('data')
        )
        df_i = pd.DataFrame(exec_data)
        df_list.append(df_i)
        print(df_i)
    except: 
        AttributeError as e:
            print(f&quot;{e} for {i}&quot;)
            broken_values.append(i)
</code></pre>
","1","Answer"
"78433033","78432995","<p>You can:</p>
<ol>
<li>Use slicing to get the desired values from each list</li>
<li>Use <code>zip</code> to get a an iterable of tuples containing a value from one slice and a value from the other</li>
<li>Use <code>itertools.chain</code> to flatten the iterable of tuples.</li>
</ol>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(zip(another_list[0::2], my_list[1::2])))
[1, 'b', 3, 'd', 5, 'f']
</code></pre>
<p>The <code>more-itertools</code> package on PyPi provides an <code>interleave</code> function which basically combines the <code>zip</code> and the <code>from_iterable</code> calls.</p>
<pre><code>&gt;&gt;&gt; from more_itertools import interleave
&gt;&gt;&gt; list(interleave(another_list[0::2], my_list[1::2]))
[1, 'b', 3, 'd', 5, 'f']
</code></pre>
","1","Answer"
"78433038","78425770","<p>use record type like this</p>
<pre><code>public record SuccessCriteria(string Field, string Comparison, string Value);

public record Condition(string Name, string Value);

public record ProcessValidationInfo(string CodeFreezeTime, string StartTimeHeader, string BuildMachine, string ProcessName, List&lt;Condition&gt; Conditions, List&lt;SuccessCriteria&gt; SuccessCriteria);

var results = xmlDoc2.Descendants(&quot;build&quot;)
    .SelectMany(b =&gt; b.Descendants(&quot;Process&quot;)
        .Select(p =&gt; new ProcessValidationInfo
        {
            BuildMachine = b.Element(&quot;BuildMachine&quot;)?.Value,
            ProcessName = p.Element(&quot;ProcessName&quot;)?.Value,
            StartTimeHeader = p.Element(&quot;startTimeHeader&quot;)?.Value,
            Conditions = p.Descendants(&quot;Condition&quot;)
                .Select(c =&gt; new Condition
                {
                    Name = c.Attribute(&quot;name&quot;)?.Value,
                    Value = c.Attribute(&quot;value&quot;)?.Value
                })
                .ToList(),
            SuccessCriteria = p.Descendants(&quot;SuccessCriteria&quot;)
                .Select(sc =&gt; new SuccessCriteria
                {
                    Field = sc.Element(&quot;field&quot;)?.Value,
                    Comparison = sc.Element(&quot;comparison&quot;)?.Value,
                    Value = sc.Element(&quot;value&quot;)?.Value
                })
                .ToList()
        }));

foreach (var currentItem in results)
{
    ParseLogFile1(currentItem.CodeFreezeTime, currentItem.StartTimeHeader, currentItem.BuildMachine, currentItem.ProcessName, currentItem.Conditions, currentItem.SuccessCriteria);
}
</code></pre>
","1","Answer"
"78433074","78432995","<p>The code below might help to get what you want:</p>
<pre><code> l=another_list.copy()
 l[1::2]=my_list[1::2]
 print(l)
</code></pre>
","1","Answer"
"78434032","78391980","<p>Edit added since poster said that they needed to know why gc was on the list. It is basically because the gc module is referring to the argument, it is always there because it has the reference in execution.</p>
<p>First of all, there is <a href=""https://docs.python.org/3/library/gc.html#gc.get_referrers"" rel=""nofollow noreferrer"">documentation</a> on this. Secondly, it does not include every literal on your code. It just refers to the list of objects that have references to the input objects. However, they need to support garbage collection and those that do not support them are not found.</p>
<p><strong>What is gc.get_referrers()?</strong></p>
<p>Instead of getting every literal on your code, this function returns a list of objects that refer to any of the arguments. In other words, it will give a list of every object that has references to the input object which has garbage collection enabled.</p>
<p>For example, let's say you use gc.get_referrers() on a integer, or any other data type (or even parts of it), you will get a lot of references, especially core Python elements. That is because a lot of objects will point to integers in your program or Python itself with core elements.</p>
<p>Here is another example: using it on the int data type will also return everything on your program that holds or uses a integer and also core Python elements that are used for the execution of your program.</p>
<p>Now, we can also test this by doing another test: using it on numbers that your program or core Python parts do not have. We can use it on a unknown number that you are not currently using.</p>
<pre><code>&gt;&gt;&gt; import gc
&gt;&gt;&gt; print(gc.get_referrers(1000000000))
[['gc', 'get_referrers', 1000000000], (1000000000, None)]
</code></pre>
<p>Now, that is a lot less than doing gc.get_referrers() on other data types or others that are used in your program. This is because this number has only been used this one time. Core parts or the program doesn't use these. gc and get_referrers are there since those are being pointed at the program and are being referenced to it.</p>
<p><strong>Why is this used?</strong></p>
<p>Well, this function is not used a lot, with searching it up leading to a few bits of information. However, the official documentation states:</p>
<p><strong>Warning</strong></p>
<p>Care must be taken when using objects returned by get_referrers() because some of them could still be under construction and hence in a temporarily invalid state. Avoid using get_referrers() for any purpose other than debugging.</p>
<p>In other words, you should only use it for debugging and some of the returned objects could be temporarily invalid.</p>
<p><strong>What is that list on your code?</strong></p>
<p>The yielded list were the references of that and most of them were core Python parts.</p>
<p>That question has more into it. It gets everything that has been referenced to that number. Most of them are as mentioned, core Python parts. There is also gc and get_referrers() which are due to the fact that they are being used as references. Then, it also gets the name of the argument and also the value. It also gets print().</p>
<p>The list basically contained those references, one of them being the variable name and the variable reference being a reference.</p>
<p>So, in other words, it gets the core Python functions and parts which are used for the code execution, the name and value of the argument and also gc and the used function.</p>
<p>To sum that all up, the function gets every object which is a reference to the argument (data type, variable etc.) which has garbage collection enabled. These also include Python elements.</p>
<p>Also, common data types or used stuff will have a lot of elements while specific and unknown pieces of data like random integers will have very few items.</p>
<p><strong>Should You Use This?</strong></p>
<p>No, documentation is rare and it can be confusing. While debugging is stated as a reason to use it, temporarily invalid items load too.</p>
<p><strong>Edit to Answer Question</strong></p>
<p>The comment by the poster said that they needed a explanation why the first item (gc) was on the list.</p>
<p>gc will forever be there because gc is referring to the object passed on gc.get_referrers().</p>
","-3","Answer"
"78436074","78436028","<p>There is a constructor in <code>List&lt;T&gt;</code> which accepts an <code>IEnumerable&lt;T&gt;</code>. You can call this from your subclass:</p>
<pre><code>public class MyList&lt;T&gt; : List&lt;T&gt;
{
    public MyList()
    {
    }

    private MyList(IEnumerable&lt;T&gt; items)
    : base(items)
    {
    }

    public MyList&lt;T&gt; GenerateSubList()
    {
        return new MyList&lt;T&gt;(this.Where(t =&gt; t.SomeCriteria));
    }
}
</code></pre>
<p>Of course, you can also make the constructor public if you want to use it from outside your class.</p>
<p>Online-demo: <a href=""https://dotnetfiddle.net/RxBMr0"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/RxBMr0</a></p>
","-2","Answer"
"78436175","78436028","<p>you can use &quot;Has relationship&quot; and not Is.</p>
<pre><code>   public class ListOfT : IList&lt;string&gt;
   {
       private readonly List&lt;string&gt; Strings = new();

       public ListOfT(List&lt;string&gt; list)
       {
           Strings = list;
       }


       #region IList implemnetions
           //.....

       #endregion

       public ListOfT GenerateSubList()
       {
           return new ListOfT(this.Where(t =&gt; t.Contains(&quot;.&quot;)).ToList());
       }

      
   }
</code></pre>
","0","Answer"
"78436180","78391980","<p>First off, that doesn't look like Python 3.10 output. That output should only happen on Python 3.8 or lower, due to parser changes. 3.10 produces a very different list.</p>
<p>The list you're seeing is the list of objects associated with the <a href=""https://en.wikipedia.org/wiki/Region-based_memory_management"" rel=""nofollow noreferrer"">arena</a> used to produce your code's abstract syntax tree. Quoting <a href=""https://github.com/python/cpython/blob/v3.8.19/Python/pyarena.c"" rel=""nofollow noreferrer""><code>Python/pyarena.c</code></a>:</p>
<pre class=""lang-c prettyprint-override""><code>/* The arena manages two kinds of memory, blocks of raw memory
   and a list of PyObject* pointers.  PyObjects are decrefed
   when the arena is freed.
*/
</code></pre>
<p>Most of the memory used by <code>Python/ast.c</code> is handled by an arena. In particular, every time it needs a new <a href=""https://github.com/python/cpython/blob/v3.8.19/Python/ast.c#L631"" rel=""nofollow noreferrer"">identifier</a>:</p>
<pre class=""lang-c prettyprint-override""><code>static identifier
new_identifier(const char *n, struct compiling *c)
{
    ...
    if (PyArena_AddPyObject(c-&gt;c_arena, id) &lt; 0) {
</code></pre>
<p><a href=""https://github.com/python/cpython/blob/v3.8.19/Python/ast.c#L2453-L2489"" rel=""nofollow noreferrer"">numeric constant</a>:</p>
<pre class=""lang-c prettyprint-override""><code>    case NUMBER: {
        ...
        if (PyArena_AddPyObject(c-&gt;c_arena, pynum) &lt; 0) {
</code></pre>
<p>or <a href=""https://github.com/python/cpython/blob/v3.8.19/Python/ast.c#L5595-L5612"" rel=""nofollow noreferrer"">string literal</a>:</p>
<pre class=""lang-c prettyprint-override""><code>/* Make a Constant node, but decref the PyUnicode object being added. */
static expr_ty
make_str_node_and_del(PyObject **str, struct compiling *c, const node* n)
{
    ...
    if (PyArena_AddPyObject(c-&gt;c_arena, s) &lt; 0) {
</code></pre>
<p>it calls <a href=""https://github.com/python/cpython/blob/v3.8.19/Python/pyarena.c#L203"" rel=""nofollow noreferrer""><code>PyArena_AddPyObject</code></a> to add the identifier, number, or string literal to the arena's list of objects.</p>
<p>When you run your file, execution goes through the <code>pyrun_file</code> function, <a href=""https://github.com/python/cpython/blob/3.8/Python/pythonrun.c#L1067-L1093"" rel=""nofollow noreferrer"">which looks like this</a>:</p>
<pre class=""lang-c prettyprint-override""><code>static PyObject *
pyrun_file(FILE *fp, PyObject *filename, int start, PyObject *globals,
           PyObject *locals, int closeit, PyCompilerFlags *flags)
{
    PyArena *arena = PyArena_New();
    if (arena == NULL) {
        return NULL;
    }

    mod_ty mod;
    mod = PyParser_ASTFromFileObject(fp, filename, NULL, start, 0, 0,
                                     flags, NULL, arena);
    if (closeit) {
        fclose(fp);
    }

    PyObject *ret;
    if (mod != NULL) {
        ret = run_mod(mod, filename, globals, locals, flags, arena);
    }
    else {
        ret = NULL;
    }
    PyArena_Free(arena);

    return ret;
}
</code></pre>
<p>First, it parses your code into an AST, populating the list you see as a side effect:</p>
<pre class=""lang-c prettyprint-override""><code>    mod = PyParser_ASTFromFileObject(fp, filename, NULL, start, 0, 0,
                                     flags, NULL, arena);
</code></pre>
<p>Then it calls <code>run_mod</code> to compile the AST and execute the resulting code object:</p>
<pre class=""lang-c prettyprint-override""><code>    if (mod != NULL) {
        ret = run_mod(mod, filename, globals, locals, flags, arena);
    }
    else {
        ret = NULL;
    }
</code></pre>
<p>And only <em>after</em> your code has been executed, the arena is freed, freeing the associated list:</p>
<pre class=""lang-c prettyprint-override""><code>    PyArena_Free(arena);
</code></pre>
","9","Answer"
"78436253","78436028","<p>The List returned by ToList() is a new instance that extracts a specific value from an instance of ListOfT and stores it in a new buffer, and in memory this List does not have an instance of ListOfT, which is a subclass of List. You need to create a new instance of List that implements ListOfT and save the value correctly.</p>
","0","Answer"
"78440895","78436028","<p>Even if you think it's not for you, I'd like to suggest another route for possible readers that have similar requirements:</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
                    
public class Program
{
    public static void Main()
    {
// List of instances, some of which have the property, some do not.
        List&lt;SomeBaseType&gt; list = [new SomeSubType(), 
                                   new SomeSubTypeWP(){SomeProperty=&quot;One&quot;},
                                   new SomeSubType(), 
                                   new SomeSubTypeWP(){SomeProperty=&quot;Two&quot;},
                                   new SomeSubType(), 
                                   new SomeSubTypeWP(){SomeProperty=&quot;Three&quot;}
                                  ];
// Filter and cast all instances that do have the desired property
// and perform some action on them.
        list.OfType&lt;IHasSomeProperty&gt;().Print();
    }
}

// The property for which to filter is defined in an interface
public interface IHasSomeProperty
{
    string SomeProperty {get; set;}
}

public abstract class SomeBaseType
{}

public sealed class SomeSubType : SomeBaseType
{}

// The Subtypes that have the Filter-Property implement above mentioned interface
public sealed class SomeSubTypeWP : SomeBaseType, IHasSomeProperty
{
    public string SomeProperty {get; set;}
}

// We can define extension methods for collections of types having the 
// filtered-for property
public static class ListOfTypesWithSomePropertyExtensions
{
    public static void Print(this IEnumerable&lt;IHasSomeProperty&gt; list)
    {
        foreach(var item in list) Console.WriteLine(item.SomeProperty);
    }
}
</code></pre>
<p>Fiddle: <a href=""https://dotnetfiddle.net/KP3l5c"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/KP3l5c</a></p>
<p>And that's just <em>one</em> out of many ways to handle this <em>without</em> the need to implement <code>IList&lt;T&gt;</code> or inherit from <code>List&lt;T&gt;</code>.</p>
","0","Answer"
"78442814","78442754","<p>I tryed the following in python and it works.</p>
<hr />
<pre><code>largest = None
smallest = None
a = []

while True:
    num = input(&quot;Enter a number: &quot;)
    if num == &quot;done&quot;:
        break
    try:
        num = int(num)  # Convert num to an integer
    except ValueError:
        print(&quot;that's not a number&quot;)
        continue
    a.append(num)

for num in a:
    if smallest is None:
        smallest = num
        largest = num
    if num &lt; smallest:
        smallest = num
    if num &gt; largest:
        largest = num

print(&quot;current list &gt;&quot;, a)
print(&quot;the smallest number is &gt;&quot;, smallest)
print(&quot;largest number is &gt;&quot;, largest)
</code></pre>
<hr />
<p>The output:
current list &gt; [23, 34, 68, 3, 566, 2, 1]</p>
<p>the smallest number is &gt; 1</p>
<p>largest number is &gt; 566</p>
","0","Answer"
"78442872","78442754","<p>After reviewing your code, I found the error that makes your code break in &quot;weird&quot; circumstances. It is the while loop where you input your numbers; if you look closely at the <a href=""https://docs.python.org/3/library/functions.html#input:%7E:text=converts%20it%20to%20a%20string"" rel=""nofollow noreferrer"">docs</a> for the input function, you can see that the returned value gets transformed into a string, meaning that all of the following arithmetic operations seemed to be okay up to a certain point, however, in reality, the operations don't make sense. I fixed the part that is problematic in the following code snippet:</p>
<pre><code>while True:
    num = input(&quot;Enter a number: &quot;)
    if num == &quot;done&quot;:
        break
    try:
        FailureCond = int(num)
    except ValueError:
        print(&quot;that's not a number&quot;)
        continue
    a.append(int(num)) # This line was fixed
    continue
</code></pre>
","0","Answer"
"78443285","78443220","<p>You're almost there! Simply replace</p>
<pre><code>        if key in col:
</code></pre>
<p>with</p>
<pre><code>        if key in col.split('_'):
</code></pre>
<p>and include the key-value pair <code>'strt': 'start'</code> in <code>data_dict</code></p>
<p>Depending on the size of <code>data_dict</code>, it might be inefficient to loop over the entire dict every time. An alternative approach would be to loop over <code>col.split('_')</code> first and using <a href=""https://docs.python.org/3/library/stdtypes.html#dict.get"" rel=""nofollow noreferrer""><code>dict.get</code></a> to replace an abbreviation:</p>
<pre><code>new_list = []
for col in col_list:
    new_list.append(
        '_'.join(
            data_dict.get(abbr, abbr)  # use original value if it isn't a known abbreviation
            for abbr in col.split('_')
        )
    )
</code></pre>
<p>Explanation:</p>
<ol>
<li>iterate over <code>col_list</code> just like before</li>
<li>split <code>col</code> at <code>'_'</code>, e.g. <code>'eff_strt_dte'</code> will be split to <code>['eff', 'strt', 'dte']</code></li>
<li>assume these parts are abbreviations that can be expanded with the help of <code>data_dict</code> by simply looking them up</li>
<li>if the lookup fails, it should return the original value. For example, <code>'birth_dt'</code> will be split to <code>['birth', 'dt']</code>, but <code>'birth'</code> is not a key of <code>data_dict</code>. <code>data_dict[abbr]</code> would raise a <code>KeyError</code> when <code>abbr</code> is <code>'birth'</code>, so something like <code>data_dict.get(abbr)</code> would be more appropriate. This returns <code>None</code> if the key is not found, instead of raising an exception. We can also specify a different default return value for that case, so we don't have to check for <code>None</code> manually. The custom default is the second argument of <code>data_dict.get(abbr, abbr)</code></li>
<li><code>'_'.join(...)</code> creates a string out of the new parts, separating them with an underscore. These are the strings we want to have in <code>new_list</code></li>
</ol>
","1","Answer"
"78446402","78443220","<p>You could also take a regex approach to this, making a regex from the keys of <code>data_dict</code> and using the matched string to look up its replacement:</p>
<pre class=""lang-py prettyprint-override""><code>col_list = ['eff_strt_dte', 'eff_sta_dt', 'birth_dt', 'cus_idr', 'cust_id']
data_dict = {
    'eff': 'effective',
    'dt': 'date',
    'dte': 'date',
    'str': 'start',
    'cus': 'customer',
    'cust': 'customer',
    'id':'identifier',
    'idr': 'identifier',
    'sta': 'start',
    'strt' : 'start'
}

pattern = re.compile('|'.join(sorted(data_dict.keys(), key=len, reverse=True)))
out = [pattern.sub(lambda m:data_dict[m.group()], col) for col in col_list]
</code></pre>
<p>Output:</p>
<pre><code>['effective_start_date', 'effective_start_date', 'birth_date', 'customer_identifier', 'customer_identifier']
</code></pre>
<p>Notes:</p>
<ol>
<li>for this to work properly you need to sort the match strings in order of descending length (so for example you don't match <code>id</code> in <code>idr</code>)</li>
<li>in this code I've added <code>'strt': 'start'</code> to <code>data_dict</code>.</li>
</ol>
","0","Answer"
"78447924","78447815","<h3>Lists with one level: iterate over names with <code>lapply()</code></h3>
<p>The easiest thing is to iterate over the list names. We can pass a named vector to <code>lapply()</code>, so the output list will have the desired names.</p>
<pre class=""lang-r prettyprint-override""><code>lapply(
    setNames(names(mylist), names(mylist)),
    \(nm, l = mylist) setNames(l[[nm]], sprintf(&quot;%s-%s&quot;, nm, l[[nm]]))
)  
# $Patient
# Patient-Pat1 Patient-Pat2 Patient-Pat3 
#       &quot;Pat1&quot;       &quot;Pat2&quot;       &quot;Pat3&quot; 

# $Cycle
# Cycle-C1 Cycle-C2 
#     &quot;C1&quot;     &quot;C2&quot;
</code></pre>
<h3>Arbitrarily deep lists</h3>
<p>You need another approach if your list may have more than one nested level, e.g.:</p>
<pre class=""lang-r prettyprint-override""><code>mylist$nested &lt;- list(
    list(&quot;nest1&quot;, &quot;nest2&quot;)
)
</code></pre>
<p>You can use <a href=""https://jorischau.github.io/rrapply/articles/articles/when-to-use-rrapply.html"" rel=""nofollow noreferrer""><code>rrapply::rrapply()</code></a> here which has the <code>.xparents</code> argument, which evaluates to the names of the parent of the current list element.</p>
<p>I'll pipe the below to json because it prints more nicely:</p>
<pre class=""lang-r prettyprint-override""><code>rrapply::rrapply(
    mylist,
    condition = Negate(is.list), # apply only to leafs (and not nodes)
    f = \(x, .xparents) setNames(x, sprintf(&quot;%s-%s&quot;, .xparents[1], x))
) |&gt;
    rjson::toJSON()
</code></pre>
<p>Output:</p>
<pre class=""lang-json prettyprint-override""><code>{
    &quot;Patient&quot;: {
        &quot;Patient-Pat1&quot;: &quot;Pat1&quot;,
        &quot;Patient-Pat2&quot;: &quot;Pat2&quot;,
        &quot;Patient-Pat3&quot;: &quot;Pat3&quot;
    },
    &quot;Cycle&quot;: {
        &quot;Cycle-C1&quot;: &quot;C1&quot;,
        &quot;Cycle-C2&quot;: &quot;C2&quot;
    },
    &quot;nested&quot;: [
        [
            {
                &quot;nested-nest1&quot;: &quot;nest1&quot;
            },
            {
                &quot;nested-nest2&quot;: &quot;nest2&quot;
            }
        ]
    ]
}
</code></pre>
","2","Answer"
"78447950","78447815","<pre><code>sapply(names(mylist), \(x) setNames(mylist[[x]], paste(x, mylist[[x]], sep = &quot;-&quot;)), USE.NAMES = TRUE)
#&gt; $Patient
#&gt; Patient-Pat1 Patient-Pat2 Patient-Pat3 
#&gt;       &quot;Pat1&quot;       &quot;Pat2&quot;       &quot;Pat3&quot; 
#&gt; 
#&gt; $Cycle
#&gt; Cycle-C1 Cycle-C2 
#&gt;     &quot;C1&quot;     &quot;C2&quot;
</code></pre>
","3","Answer"
"78448259","78447815","<p>We can use <code>Map</code>.</p>
<pre><code>&gt; Map(setNames, mylist, Map(paste, names(mylist), mylist, sep='-'))
$Patient
Patient-Pat1 Patient-Pat2 Patient-Pat3 
      &quot;Pat1&quot;       &quot;Pat2&quot;       &quot;Pat3&quot; 

$Cycle
Cycle-C1 Cycle-C2 
    &quot;C1&quot;     &quot;C2&quot; 
</code></pre>
","2","Answer"
"78448555","78447815","<p>Another with <code>purrr</code>'s <code>map2</code> and <code>set_name</code>.<br />
Differences:<br />
-- No <code>map(map(..))</code><br />
-- No <code>[]</code> or <code>[[]]</code></p>
<pre class=""lang-r prettyprint-override""><code>new_list &lt;- map2(
  mylist, names(mylist), 
  \(x, y) purrr::set_names(x, \(xx) paste0(y, &quot;-&quot;, xx)))
</code></pre>
<p>Output:</p>
<pre class=""lang-r prettyprint-override""><code>&gt; new_list
$Patient
Patient-Pat1 Patient-Pat2 Patient-Pat3 
      &quot;Pat1&quot;       &quot;Pat2&quot;       &quot;Pat3&quot; 

$Cycle
Cycle-C1 Cycle-C2 
    &quot;C1&quot;     &quot;C2&quot; 
</code></pre>
","3","Answer"
"78450176","78450114","<p>You can use <code>dplyr::bind_rows()</code> and take the column sums:</p>
<pre class=""lang-r prettyprint-override""><code>colSums(dplyr::bind_rows(cell_salts_atoms), na.rm = TRUE)
# Ca  F  O  P Fe  K Cl  S Mg Na Si As Br  I Li Mn Cu  H Al Zn  C Au Se Cr 
#  7  2 84  7  1 12  9  7  3  8  1  3  1  4  1  1  1 26  1  1  2  1  1  2 
</code></pre>
","1","Answer"
"78450181","78450114","<p>Use the <code>sum=</code> argument.  Omit <code>stack</code> if a named vector output is ok.</p>
<pre><code>makeup(chemical_formula, sum = TRUE) |&gt; stack()
</code></pre>
<p>giving</p>
<pre><code>   values ind
1       1  Al
2       3  As
3       1  Au
4       1  Br
5       2   C
6       7  Ca
7       9  Cl
8       2  Cr
9       1  Cu
10      2   F
11      1  Fe
12     26   H
13      4   I
14     12   K
15      1  Li
16      3  Mg
17      1  Mn
18      8  Na
19     84   O
20      7   P
21      7   S
22      1  Se
23      1  Si
24      1  Zn
</code></pre>
","4","Answer"
"78450399","78450114","<p>Please try</p>
<pre class=""lang-r prettyprint-override""><code>library(CHNOSZ)

cell_salts_atoms &lt;- CHNOSZ::makeup(chemical_formula, sum=F)

data &lt;- map(cell_salts_atoms, \(x) {
  data.frame(val=x %&gt;% as_vector()) %&gt;% rownames_to_column(var='element')
})

data1 &lt;- do.call(rbind, data) %&gt;% arrange(element) %&gt;% group_by(element) %&gt;% summarise(sum=sum(val))


# A tibble: 24 × 2
   element  sum
   &lt;chr&gt; &lt;dbl&gt;
 1 Al        1
 2 As        3
 3 Au        1
 4 Br        1
 5 C         2
 6 Ca        7
 7 Cl        9
 8 Cr        2
 9 Cu        1
10 F         2
# ℹ 14 more rows
# ℹ Use `print(n = ...)` to see more rows
</code></pre>
","1","Answer"
"78451464","78450114","<p>I devised the following solution to the question that I posed:</p>
<pre><code>chemical_formula &lt;- c(&quot;CaF2&quot;, &quot;Ca3(PO4)2&quot;, &quot;FePO4&quot;, &quot;KCl&quot;, &quot;K3PO4&quot;, &quot;K2SO4&quot;, &quot;Mg3(PO4)2&quot;,
&quot;NaCl&quot;, &quot;Na3PO4&quot;, &quot;Na2SO4&quot;, &quot;SiO2&quot;, &quot;CaSO4&quot;, &quot;KAsO2&quot;, &quot;KBr&quot;, &quot;KI&quot;, &quot;LiCl&quot;, &quot;MnSO4&quot;, &quot;CaS&quot;,
&quot;CuAsHO3&quot;, &quot;AlK(SO4)2&quot;, &quot;(H2O)12&quot;, &quot;ZnCl2&quot;, &quot;CaCO3&quot;, &quot;NaHCO3&quot;, &quot;AsI3&quot;, &quot;AuCl4Na&quot;, &quot;Se&quot;,
&quot;K2Cr2O7&quot;)

cell_salts_atoms &lt;- CHNOSZ::makeup(chemical_formula)

cell_salts_atoms_DF1 &lt;- lapply(cell_salts_atoms, as.data.frame, keep.rownames = TRUE)

cell_salts_atoms_DF2 &lt;- lapply(cell_salts_atoms_DF1, t)

cell_salts_atoms_matrix1 &lt;- lapply(cell_salts_atoms_DF2, as.matrix)

cell_salts_atoms_matrix2 &lt;- matsbyname::setrownames_byname(cell_salts_atoms_matrix1,
&quot;value&quot;)

cell_salts_atoms_matrix3 &lt;- matsbyname::cumsum_byname(cell_salts_atoms_matrix2)

cell_salts_atoms_final &lt;- cell_salts_atoms_matrix3[[28]]
</code></pre>
<p>The following is the result:</p>
<pre><code># &gt; cell_salts_atoms_final
#       Al As Au Br C Ca Cl Cr Cu F Fe  H I  K Li Mg Mn Na  O P S Se Si Zn
# value  1  3  1  1 2  7  9  2  1 2  1 26 4 12  1  3  1  8 84 7 7  1  1  1
</code></pre>
","0","Answer"
"78453949","78453805","<p>This is a combination of collection and property initialisers.</p>
<p>See <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers"" rel=""nofollow noreferrer"">documentation</a> for lots more details.</p>
<p>The key to understanding here is to break down things from the inside out. First inside:</p>
<pre><code>new ParamsList() {Name = OutParamName}
</code></pre>
<p>is creating an instance of <code>ParamsList</code> and initialising its <code>Name</code> property with the value of <code>OutParamValue</code>.</p>
<p>Around this then there is:</p>
<pre><code>new List&lt;ParamsList&gt;() {
    expression
};
</code></pre>
<p>is creating a <code>List&lt;T&gt;</code> collection specialised to <code>ParamsList</code> initialising the collection with a single value that is the result of <code>expression</code> which is covered above.</p>
","1","Answer"
"78453952","78453805","<p>So all this code is doing is:</p>
<p>Creating a new list called <code>OutParamList</code> inside the requestParams object.</p>
<p>This list is designed to store objects of type <code>ParamsList</code>.</p>
<p>It then immediately adds one new <code>ParamsList</code> object to the list, and this object has its <code>Name</code> property set to the value of <code>OutParamName</code>.</p>
<p>Essentially, it's initialising a list with one item, where that item is a customised <code>ParamsList</code> object.</p>
<p>As to why, let's say you have a method that executes a database query, and you need to pass different parameters to the query based on the user's input or other conditions.</p>
<p><code>ParamsList</code> in this context could represent a class that stores information about each parameter (like the name of the parameter and its value). The <code>OutParamList</code> is a list that holds these parameter objects and is used to dynamically manage which parameters are passed to a query.</p>
<p>This way allows you to easily add, remove, or modify parameters without changing the method signatures or the core logic of your database operations.</p>
<p>You can use the same list and classes (<code>ParamsList</code> and <code>requestParams</code>) across different parts of your application, which makes the code more maintainable and consistent.</p>
","1","Answer"
"78458285","78458216","<p>At the moment, you are creating the new node, but not adding it to your list.</p>
<p>As it needs to go at the end of your list, you need to know the current end of the list, so you can add the item onto it.</p>
<p>You can either:</p>
<ul>
<li><p>Find the end of the list by starting at the original start of l1 (which you have saved in <code>ans</code>) and looping forward via <code>next</code></p>
</li>
<li><p>or, as you are already looping through <code>l1</code> in your existing loop, keep track of the last node in the <code>l1</code> list (e.g. save <code>l1</code> in another variable before the <code>l1 = l1-&gt;next</code> line)</p>
</li>
</ul>
","1","Answer"
"78458302","78458216","<p>You are right to check if carry is more than 0 after the loop. However, you didn't successfully append the ListNode that you created to the end of the linked list.</p>
<p>To do that, you need to have access to the last element of the linked list. But now you are beyond that, so you need to trace back to the part where you do have access to the final node. This is during the final iteration of the while loop. So, I suggest you add this piece of code there:</p>
<pre><code>if (l1-&gt;next == nullptr &amp;&amp; carry) {
      l1 -&gt; next = new ListNode();
      l1 -&gt; next -&gt; val = 1;
      break;
} 
</code></pre>
<p>and remove the <code>if (carry)</code> check you have at the end.</p>
<p>I believe there might be some other issues with your code (HINT: it might not work if l2 is longer than l1) but this probably answers your question.</p>
","0","Answer"
"78458431","78458216","<p>You have to understand the <code>ListNode</code> first.<br />
The basically ListNode have at least 2 parameters, one is value, another is the pointer of the <code>next</code> ListNode.<br />
If you <code>new</code> a new node , you have to let the <code>next</code> pointer of the <code>previous node</code> to point to it.<br />
In your (carry) if block, I can't find any code can make previous node to pointer to this node.</p>
<p>It's much easy to read/understand :</p>
<pre><code>        }else{
            int tmpVal = (l1 -&gt; val + l2 -&gt; val + carry);
            l1 -&gt; val = tmpVal % 10;
            carry = tmpVal / 10;
            l2 = l2 -&gt; next;
        }
</code></pre>
<p>l2 is to the end:</p>
<pre><code>        }else if(l2 == nullptr &amp;&amp; l1){
            int tmpVal = (l1 -&gt; val + carry);
            l1 -&gt; val =  tmpVal % 10;
            carry = tmpVal / 10;
        }else{ ...
</code></pre>
<p>About this :</p>
<pre><code>        if(l1 == nullptr &amp;&amp; l2){
            l1 -&gt; val = (l2 -&gt; val + carry) % 10;
            carry = (carry + l2 -&gt; val) / 10;
            l2 = l2 -&gt; next;
        }else if(l2 == nullptr &amp;&amp; l1){
</code></pre>
<p>If <code>l1 == nullptr</code>, then you CAN <em>NOT</em> assign any value to it!<br />
You have to create one <code>new</code> l1 node  to assign it's val and make previoud node to point to it !</p>
<pre><code>        if(l1 == nullptr &amp;&amp; l2){
            l1 = new ListNode();        // !!
            // but I can *NOT* make the `next` pointer of previous node to point to it !! 
            l1 -&gt; val = (l2 -&gt; val + carry) % 10;
            carry = (carry + l2 -&gt; val) / 10;
            l2 = l2 -&gt; next;
        }else if(l2 == nullptr &amp;&amp; l1){ ...
</code></pre>
<p>Although I had new a l1 node here, but I have to make previous to know I am the <code>next one</code> node.<br />
So, I have to make another pointer to remember the <code>previous l1 node</code> .</p>
<p>So, the code become :</p>
<pre><code>ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    int carry = 0;
    ListNode* ans = l1;
    ListNode* prevl1 = l1;   //// !!!! ++++  
    while(l1 || l2){
        // xx if(l1 == nullptr) l1 = new ListNode();
        if(l1 == nullptr &amp;&amp; l2){    // It's IMPOSSIBLE to enter this block if previous line exist !!
        // Because `l1 = new ListNode()` at previous line, so it's *IMPOSSIBLE* `== nullptr` HERE !!! 
            l1 = new ListNode();    // !!
            prevl1-&gt;next = l1 ;     // !!
            l1 -&gt; val = (l2 -&gt; val + carry) % 10;
            carry = (carry + l2 -&gt; val) / 10;
            l2 = l2-&gt;next;
        }else if(l2 == nullptr &amp;&amp; l1){
            int tmpVal = l1-&gt;val + carry;
            l1-&gt;val = tmpVal  % 10;
            carry = tmpVal  / 10;
        }else{
            int tmpVal = l1-&gt;val + l2-&gt;val + carry;
            l1 -&gt; val = tmpVal  % 10;
            carry = tmpVal  / 10;
            l2 = l2-&gt;next;
        }
        prevl1  = l1;
        l1 = l1-&gt;next; 
    }
    
    if(carry){
        l1 = new ListNode();
        l1-&gt;val = carry;
        prevl1-&gt;next = l1;     // !! 
    } 
    return ans;
}
</code></pre>
","0","Answer"
"78465745","78465014","<p>I don't have spark installed so I'm guessing your result, but maybe you can get the idea.
I'd say easy way of doing it would be <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html"" rel=""nofollow noreferrer""><code>DataFrame.explode()</code></a> the list first, then <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.unnest.html"" rel=""nofollow noreferrer""><code>DataFrame.unnest()</code></a> the structure into columns <code>a</code> and <code>b</code> and then <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.group_by.html"" rel=""nofollow noreferrer""><code>DataFrame.group_by</code></a> and <a href=""https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.html"" rel=""nofollow noreferrer""><code>GroupBy.agg()</code></a> into result:</p>
<pre class=""lang-py prettyprint-override""><code>(
    df
    .explode('structures')
    .unnest('structures')
    .group_by('b')
    .agg(pl.col('a').unique())
)

┌─────┬───────────┐
│ b   ┆ a         │
│ --- ┆ ---       │
│ i64 ┆ list[i64] │
╞═════╪═══════════╡
│ 4   ┆ [3, 5]    │
│ 2   ┆ [1]       │
└─────┴───────────┘
</code></pre>
","0","Answer"
"78467230","78465014","<p>Ok, after thinking to answer @Roman Pekar, I made it work partially, this is how it looks (i still need to add with_row_index(&quot;rid&quot;), as jqurious suggested)</p>
<pre class=""lang-py prettyprint-override""><code>
   #Missing with_row_index
    df = df.withColumn(
     df.get_column(&quot;structures&quot;).list.explode().struct.unnest().group_by(&quot;b&quot;).agg(
            pl.struct(pl.col(&quot;a&quot;),pl.col(&quot;b&quot;))
        ).to_struct(&quot;structures&quot;)
    )

</code></pre>
<p>my mistake is that I was trying to work at &quot;expr&quot; level (so no dataframe was needed, lets say our library in spark only returns expressions) which is similar to what we do nowadays with Spark.</p>
<p>However this is sub-optimal IMO (not as bad as in Spark), as its doing a group_by of million of rows which should be worse (at least in parallelism) than doing it per-row. This is why I wanted to avoid explode (I was trying to avoid this answer :) )</p>
","0","Answer"
"78467277","78467266","<p>You might want to try using <code>items</code> in place of <code>like</code></p>
<pre><code>df2.filter(items=['Republic', 'United'], axis=0 )
</code></pre>
<ul>
<li><code>items</code>: list-like - Keep labels from axis which are in items.</li>
<li><code>like</code>: str - Keep labels from axis for which “like in label == True”.</li>
</ul>
<p>See <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.filter.html"" rel=""nofollow noreferrer"">documentation for <code>filter</code></a>.</p>
","1","Answer"
"78467343","78467266","<p>As you figured out the problem here is that the argument <strong>like</strong> in pd.DataFrame.filter() is expecting a string as in: <code>WHERE table.columnName LIKE 'something'</code>. (SQL Syntax)</p>
<p>There is no way to pass a list in the <strong>like</strong> field, however you can try concatenating different filtered dfs. Here is an example:</p>
<pre><code>filtered_dfs = []
filters = ['Republic', 'United']

for f in filters:
    tmp_df = df2.filter(like= f, axis= 0)
    filtered_dfs.append(tmp_df)

filtered = pd.concat(filtered_dfs)
</code></pre>
<p>I didn't try the code but let me know if it works!</p>
","0","Answer"
"78467719","78465014","<pre class=""lang-py prettyprint-override""><code>list_of_structs = [
    [{&quot;a&quot;:1, &quot;b&quot;: 2}, {&quot;a&quot;:3, &quot;b&quot;: 4}, {&quot;a&quot;:5, &quot;b&quot;: 4}],
    [{&quot;a&quot;:2, &quot;b&quot;: 5}, {&quot;a&quot;:3, &quot;b&quot;: 5}, {&quot;a&quot;:4, &quot;b&quot;: 3}]
]
        
df = pl.DataFrame({&quot;structures&quot;: list_of_structs})
</code></pre>
<pre class=""lang-py prettyprint-override""><code>(df.select(&quot;structures&quot;)
   .with_row_index()
   .explode(&quot;structures&quot;)
   .unnest(&quot;structures&quot;)
   .group_by(&quot;index&quot;, &quot;b&quot;, maintain_order=True) 
   .agg(
      pl.struct(&quot;a&quot;, &quot;b&quot;)
   )
   .drop(&quot;b&quot;)
   .group_by(&quot;index&quot;, maintain_order=True)
   .all()
)
</code></pre>
<pre class=""lang-py prettyprint-override""><code>shape: (2, 2)
┌───────┬───────────────────────────┐
│ index ┆ a                         │
│ ---   ┆ ---                       │
│ u32   ┆ list[list[struct[2]]]     │
╞═══════╪═══════════════════════════╡
│ 0     ┆ [[{1,2}], [{3,4}, {5,4}]] │
│ 1     ┆ [[{2,5}, {3,5}], [{4,3}]] │
└───────┴───────────────────────────┘
</code></pre>
<h3>Performance</h3>
<p>If I increase the row size as an example</p>
<pre class=""lang-py prettyprint-override""><code>df_big = df.sample(100_000, with_replacement=True)
</code></pre>
<p>And repeat the above approach:</p>
<ul>
<li>Elapsed time: <strong>0.45117 seconds</strong></li>
</ul>
<p>For comparison, if we perform the first <code>list.eval</code> step in your example:</p>
<pre class=""lang-py prettyprint-override""><code>df_big.with_columns(unique =
   pl.col(&quot;structures&quot;).list.eval(pl.element().struct[&quot;b&quot;])
     .list.unique()
)
</code></pre>
<ul>
<li>Elapsed time: <strong>1.99926 seconds</strong></li>
</ul>
<p>Incidentally, it seems <code>list.unique()</code> is the major slowdown here, which can be avoided:</p>
<pre class=""lang-py prettyprint-override""><code>df_big.with_columns(unique =
   pl.col(&quot;structures&quot;).list.eval(pl.element().struct[&quot;b&quot;].unique())
)
</code></pre>
<ul>
<li>Elapsed time: <strong>0.23198 seconds</strong></li>
</ul>
<p>Which is an improvement on the <code>list.unique()</code> version, but even then it is just a single piece of the functionality.</p>
<p>Adding further steps would likely end up much slower than the explode/group_by approach.</p>
","1","Answer"
"78469047","78468915","<pre class=""lang-cpp prettyprint-override""><code>list&lt;Account&gt;* log = new list&lt;Account&gt;()
</code></pre>
<p>This is called &quot;slicing&quot;: if you put a derived class into that list, only the <code>Account</code> &quot;sub-part&quot; is actually stored there. Same if you copy a <code>StudentAccount</code> to an <code>Account</code> -- the <code>Student</code>-part simply gets &quot;sliced off&quot; because it has no place to go.</p>
<p>The way around this is very simple: store pointers.</p>
<pre class=""lang-cpp prettyprint-override""><code>#include &lt;list&gt;
#include &lt;memory&gt;

...

typedef std::unique_ptr&lt;Account&gt; AccountPtr;
typedef std::list&lt;AccountPtr&gt; List;
List* log=new List;

bool Bank::add(AccountPtr acc)
{
    // do some checking here
    this-&gt;log-&gt;push_back(std::move(acc));
    return true;
}

bool Bank::addAccount(...parameter here...)
{
    return this-&gt;add(std::make_unique&lt;Account&gt;(...parameter here...));
}

bool Bank::addStudentAccount(...parameter here...)
{
    return this-&gt;add(std::make_unique&lt;StudentAccount&gt;(...parameter here...));
}
</code></pre>
","2","Answer"
"78469048","78468915","<p>I think one of the comments above has answered your question to a degree. To repeat, polymorphism is only possible when using a pointer to the base class for  method invocation - in this case a pointer of type &quot;Account *&quot;</p>
<p>On a side note - I strongly suggest playing with polymorphism to get used to the idea before you jump into combining it with Templates. It will make life much easier even if its only a prototype.</p>
<p>I wish you the best in your C++ journey!!</p>
","0","Answer"
"78472850","78472798","<p>Check for <code>content</code> key then print the value</p>
<pre><code>for i in mensagemmm:
  v = i.get('content')
  if v is not None:
    print(v)
</code></pre>
<p>If content key appears more than once in the list of dictionary, each would be printed</p>
","0","Answer"
"78472852","78472798","<p>If your question is about how to access the string inside the dictionary, then</p>
<pre><code>print(mensagemmm[4][&quot;content&quot;])  
</code></pre>
<p>returns 'Vai se fuder'</p>
<p>Or something like</p>
<pre><code>print(list(mensagemmm[4].keys())[0],&quot;: &quot;,mensagemmm[4][&quot;content&quot;])
</code></pre>
<p>which returns 'content :  Vai se fuder'</p>
<p>In other case please provide the expected output</p>
","0","Answer"
"78476540","78476447","<p>I suggest using <a href=""https://learn.microsoft.com/en-us/dotnet/standard/generics/math"" rel=""noreferrer"">generic math</a> here, e.g.</p>
<pre><code>using System.Numerics;

...

public static IEnumerable&lt;T&gt; Add&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) 
  where T : IAdditionOperators&lt;T, T, T&gt; {

  ArgumentNullException.ThrowIfNull(input1);
  ArgumentNullException.ThrowIfNull(input2);

  return input1.Zip(input2, (first, second) =&gt; first + second);
}
</code></pre>
<p>We can implement all the rest operations in the similar way:</p>
<pre><code>public static IEnumerable&lt;T&gt; Subtract&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) 
  where T : ISubtractionOperators&lt;T, T, T&gt; {

  ArgumentNullException.ThrowIfNull(input1);
  ArgumentNullException.ThrowIfNull(input2);

  return input1.Zip(input2, (first, second) =&gt; first - second);
}

public static IEnumerable&lt;T&gt; Multiply&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) 
  where T : IMultiplyOperators&lt;T, T, T&gt; {

  ArgumentNullException.ThrowIfNull(input1);
  ArgumentNullException.ThrowIfNull(input2);

  return input1.Zip(input2, (first, second) =&gt; first * second);
}

public static IEnumerable&lt;T&gt; Divide&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) 
  where T : IDivisionOperators&lt;T, T, T&gt; {

  ArgumentNullException.ThrowIfNull(input1);
  ArgumentNullException.ThrowIfNull(input2);

  return input1.Zip(input2, (first, second) =&gt; first / second);
}
</code></pre>
","7","Answer"
"78476690","78476447","<p>Generic Maths is the way to go, but if you don't have it then if you're happy to do some general set up code, then this would work with any type.</p>
<pre><code>public static class Calculate
{
    public enum Operator { Addition, Subtraction, Multiplication, Division, }
    
    public static void Register&lt;T&gt;(Operator @operator, Func&lt;T, T, T&gt; operation)
    {
        _operators[(typeof(T), @operator)] = operation;
    }
    
    private static Dictionary&lt;(Type, Operator), Delegate&gt; _operators = new Dictionary&lt;(Type, Operator), Delegate&gt;();
    
    private static IEnumerable&lt;T&gt; Operate&lt;T&gt;(this Func&lt;T, T, T&gt; operation, IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) =&gt;
        input1.Zip(input2, (first, second) =&gt; operation(first, second));
    
    public static IEnumerable&lt;T&gt; Add&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) =&gt;
        ((Func&lt;T, T, T&gt;)_operators[(typeof(T), Operator.Addition)]).Operate(input1, input2);

    public static IEnumerable&lt;T&gt; Subtract&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) =&gt;
        ((Func&lt;T, T, T&gt;)_operators[(typeof(T), Operator.Subtraction)]).Operate(input1, input2);

    public static IEnumerable&lt;T&gt; Multiply&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) =&gt;
        ((Func&lt;T, T, T&gt;)_operators[(typeof(T), Operator.Multiplication)]).Operate(input1, input2);

    public static IEnumerable&lt;T&gt; Divide&lt;T&gt;(IEnumerable&lt;T&gt; input1, IEnumerable&lt;T&gt; input2) =&gt;
        ((Func&lt;T, T, T&gt;)_operators[(typeof(T), Operator.Division)]).Operate(input1, input2);
}
</code></pre>
<p>Now, you have to do this set up at the beginning of your code:</p>
<pre><code>Calculate.Register&lt;double&gt;(Calculate.Operator.Addition, (x, y) =&gt; x + y);
Calculate.Register&lt;double&gt;(Calculate.Operator.Subtraction, (x, y) =&gt; x - y);
Calculate.Register&lt;double&gt;(Calculate.Operator.Multiplication, (x, y) =&gt; x * y);
Calculate.Register&lt;double&gt;(Calculate.Operator.Division, (x, y) =&gt; x / y);
</code></pre>
<p>Now, your test code works as is:</p>
<pre><code>List&lt;double&gt; doubles = new List&lt;double&gt;();
for (int i = 0; i &lt; 10; i++)
{
    doubles.Add((double)i);
}
foreach (var element in Calculate.Add(doubles, doubles))
{
    Console.WriteLine(element.ToString());
}
</code></pre>
<p>That produces:</p>
<pre><code>0
2
4
6
8
10
12
14
16
18
</code></pre>
","2","Answer"
"78478739","78478686","<p>You can use a custom implementation of a circular buffer. A circular buffer (also known as a ring buffer) is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end.</p>
<pre class=""lang-java prettyprint-override""><code>import java.util.*;

public class FixedSizeList&lt;E&gt; implements List&lt;E&gt; {
    private final int maxSize;
    private final Object[] buffer;
    private int head;
    private int size;

    public FixedSizeList(int maxSize) {
        if (maxSize &lt;= 0) {
            throw new IllegalArgumentException(&quot;Size must be greater than zero&quot;);
        }
        this.maxSize = maxSize;
        this.buffer = new Object[maxSize];
        this.head = 0;
        this.size = 0;
    }

    @Override
    public boolean add(E e) {
        head = (head - 1 + maxSize) % maxSize;
        buffer[head] = e;
        if (size &lt; maxSize) {
            size++;
        }
        return true;
    }

    @Override
    public E get(int index) {
        if (index &lt; 0 || index &gt;= size) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        int realIndex = (head + index) % maxSize;
        return (E) buffer[realIndex];
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public E remove(int index) {
        throw new UnsupportedOperationException(&quot;Remove operation is not supported.&quot;);
    }

    @Override
    public boolean remove(Object o) {
        throw new UnsupportedOperationException(&quot;Remove operation is not supported.&quot;);
    }

    @Override
    public void clear() {
        Arrays.fill(buffer, null);
        head = 0;
        size = 0;
    }

    @Override
    public boolean contains(Object o) {
        for (int i = 0; i &lt; size; i++) {
            if (o.equals(get(i))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Iterator&lt;E&gt; iterator() {
        return new Iterator&lt;E&gt;() {
            private int index = 0;

            @Override
            public boolean hasNext() {
                return index &lt; size;
            }

            @Override
            public E next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return get(index++);
            }
        };
    }

    @Override
    public Object[] toArray() {
        Object[] result = new Object[size];
        for (int i = 0; i &lt; size; i++) {
            result[i] = get(i);
        }
        return result;
    }

    @Override
    public &lt;T&gt; T[] toArray(T[] a) {
        if (a.length &lt; size) {
            return (T[]) Arrays.copyOf(toArray(), size, a.getClass());
        }
        System.arraycopy(toArray(), 0, a, 0, size);
        if (a.length &gt; size) {
            a[size] = null;
        }
        return a;
    }

    // Unsupported operations
    @Override public boolean addAll(Collection&lt;? extends E&gt; c) { throw new UnsupportedOperationException(); }
    @Override public boolean addAll(int index, Collection&lt;? extends E&gt; c) { throw new UnsupportedOperationException(); }
    @Override public boolean containsAll(Collection&lt;?&gt; c) { throw new UnsupportedOperationException(); }
    @Override public E set(int index, E element) { throw new UnsupportedOperationException(); }
    @Override public void add(int index, E element) { throw new UnsupportedOperationException(); }
    @Override public int indexOf(Object o) { throw new UnsupportedOperationException(); }
    @Override public int lastIndexOf(Object o) { throw new UnsupportedOperationException(); }
    @Override public ListIterator&lt;E&gt; listIterator() { throw new UnsupportedOperationException(); }
    @Override public ListIterator&lt;E&gt; listIterator(int index) { throw new UnsupportedOperationException(); }
    @Override public List&lt;E&gt; subList(int fromIndex, int toIndex) { throw new UnsupportedOperationException(); }

    public static void main(String[] args) {
        FixedSizeList&lt;String&gt; fixedList = new FixedSizeList&lt;&gt;(100);

        for (int i = 0; i &lt; 110; i++) {
            fixedList.add(&quot;Item &quot; + i);
        }

        for (int i = 0; i &lt; fixedList.size(); i++) {
            System.out.println(&quot;Index &quot; + i + &quot;: &quot; + fixedList.get(i));
        }

        System.out.println(&quot;Fixed Size List: &quot; + Arrays.toString(fixedList.toArray()));
    }
}

</code></pre>
","0","Answer"
"78478970","78478686","<h2><code>AbstractList</code></h2>
<p>The best way to create a new <code>List</code> implementation should be extending <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/AbstractList.html"" rel=""nofollow noreferrer""><code>AbstractList</code></a>.</p>
<pre><code>class FixedSizeList&lt;E&gt; extends AbstractList&lt;E&gt; {
  private final E[] elements;

  FixedSizeList() {
    this(100);
  }
  FixedSizeList(int size) {
    elements = (E[]) new Object[size];
  }

  @Override
  public E get(int index) {
    return elements[index];
  }

  @Override
  public int size() {
    return elements.length;
  }

  public E set(int index, E element) {
    E previous = elements[index];
    elements[index] = element;
    return previous;
  }
}
</code></pre>
<p>The creation of the array gives a compiler warning; for discussion on that, <a href=""https://stackoverflow.com/questions/529085/how-can-i-create-a-generic-array-in-java"">see this</a>.</p>
","1","Answer"
"78479050","78478686","<p>You can have your collection class implement a <code>List</code> and have it delegate to an internal <code>Deque</code>.</p>
<p>Here is the add method:</p>
<pre class=""lang-java prettyprint-override""><code>// Note: This is the only important method to implement
// The rest of the methods delegate to the deque field
@Override
public boolean add(T item) {
    // The first item falls off the deque if it's full
    if (deque.size() == maxSize) {
        deque.removeFirst(); // Remove the oldest element
    }
    return deque.add(item); // Add the new element to the end
}
</code></pre>
<h2>Complete example</h2>
<p>Here are two classes; the <code>FixedSizeDequeRunner</code> which contains a <code>main</code> entry-point, and the <code>FixedSizeDeque</code> collection class.</p>
<pre class=""lang-java prettyprint-override""><code>package org.example.collections;

import java.util.Arrays;
import java.util.List;

public class FixedSizeDequeRunner {
    public static void main(String[] args) {
        List&lt;String&gt; fixedDeque = new FixedSizeDeque&lt;&gt;(10);

        for (int i = 0; i &lt; 15; i++) {
            fixedDeque.add(&quot;Item &quot; + i);
        }

        int i = 0;
        for (String item : fixedDeque) {
            System.out.printf(&quot;Index %d: %s%n&quot;, i++, item);
        }

        System.out.printf(&quot;Fixed Size Deque: %s%n&quot;, fixedDeque);

        // Convert to an array
        String[] asArray = fixedDeque.toArray(new String[0]);
        System.out.printf(&quot;Array: %s%n&quot;, Arrays.toString(asArray));
    }
}
</code></pre>
<p>Here is a delegation pattern that defers to a <code>Deque</code>:</p>
<pre class=""lang-java prettyprint-override""><code>package org.example.collections;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Objects;

public class FixedSizeDeque&lt;T&gt; implements List&lt;T&gt; {
    private final int maxSize;
    private final Deque&lt;T&gt; deque;

    public FixedSizeDeque(int maxSize) {
        this.maxSize = maxSize;
        this.deque = new ArrayDeque&lt;&gt;(maxSize);
    }

    // Note: This is the only important method to implement
    // The rest of the methods delegate to the deque field
    @Override
    public boolean add(T item) {
        // The first item falls off the deque if it's full
        if (deque.size() == maxSize) {
            deque.removeFirst(); // Remove the oldest element
        }
        return deque.add(item); // Add the new element to the end
    }

    @Override
    public boolean remove(Object o) {
        return deque.remove(o);
    }

    @Override
    public boolean containsAll(Collection&lt;?&gt; c) {
        return deque.containsAll(c);
    }

    @Override
    public boolean addAll(Collection&lt;? extends T&gt; c) {
        boolean modified = false;
        for (T item : c) {
            if (add(item)) {
                modified = true;
            }
        }
        return modified;
    }

    @Override
    public boolean addAll(int index, Collection&lt;? extends T&gt; c) {
        if (index &lt; 0 || index &gt; size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        List&lt;T&gt; tempList = new ArrayList&lt;&gt;(this);
        tempList.addAll(index, c);
        if (tempList.size() &gt; maxSize) {
            tempList = tempList.subList(tempList.size() - maxSize, tempList.size());
        }
        deque.clear();
        deque.addAll(tempList);
        return true;
    }

    @Override
    public boolean removeAll(Collection&lt;?&gt; c) {
        return deque.removeAll(c);
    }

    @Override
    public boolean retainAll(Collection&lt;?&gt; c) {
        return deque.retainAll(c);
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    @Override
    public T get(int index) {
        if (index &lt; 0 || index &gt;= deque.size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        return (T) deque.toArray()[index];
    }

    @Override
    public T set(int index, T element) {
        if (index &lt; 0 || index &gt;= deque.size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        List&lt;T&gt; tempList = new ArrayList&lt;&gt;(deque);
        T oldElement = tempList.set(index, element);
        deque.clear();
        deque.addAll(tempList);
        return oldElement;
    }

    @Override
    public void add(int index, T element) {
        if (index &lt; 0 || index &gt; size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        List&lt;T&gt; tempList = new ArrayList&lt;&gt;(deque);
        tempList.add(index, element);
        if (tempList.size() &gt; maxSize) {
            tempList = tempList.subList(tempList.size() - maxSize, tempList.size());
        }
        deque.clear();
        deque.addAll(tempList);
    }

    @Override
    public T remove(int index) {
        if (index &lt; 0 || index &gt;= deque.size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        List&lt;T&gt; tempList = new ArrayList&lt;&gt;(deque);
        T removedElement = tempList.remove(index);
        deque.clear();
        deque.addAll(tempList);
        return removedElement;
    }

    @Override
    public int indexOf(Object o) {
        int index = 0;
        for (T item : deque) {
            if (Objects.equals(item, o)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    @Override
    public int lastIndexOf(Object o) {
        int index = deque.size() - 1;
        ListIterator&lt;T&gt; iterator = new ArrayList&lt;&gt;(deque).listIterator(deque.size());
        while (iterator.hasPrevious()) {
            if (Objects.equals(iterator.previous(), o)) {
                return index;
            }
            index--;
        }
        return -1;
    }

    @Override
    public ListIterator&lt;T&gt; listIterator() {
        return new ArrayList&lt;&gt;(deque).listIterator();
    }

    @Override
    public ListIterator&lt;T&gt; listIterator(int index) {
        if (index &lt; 0 || index &gt; size()) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + index);
        }
        return new ArrayList&lt;&gt;(deque).listIterator(index);
    }

    @Override
    public List&lt;T&gt; subList(int fromIndex, int toIndex) {
        if (fromIndex &lt; 0 || toIndex &gt; size() || fromIndex &gt; toIndex) {
            throw new IndexOutOfBoundsException(&quot;Index out of bounds: &quot; + fromIndex + &quot; to &quot; + toIndex);
        }
        return new ArrayList&lt;&gt;(deque).subList(fromIndex, toIndex);
    }

    @Override
    public int size() {
        return deque.size();
    }

    @Override
    public boolean isEmpty() {
        return deque.isEmpty();
    }

    @Override
    public boolean contains(Object o) {
        return deque.contains(o);
    }

    @Override
    public Iterator&lt;T&gt; iterator() {
        return deque.iterator();
    }

    @Override
    public Object[] toArray() {
        return deque.toArray();
    }

    @Override
    public &lt;T1&gt; T1[] toArray(T1[] a) {
        return deque.toArray(a);
    }

    @Override
    public void clear() {
        deque.clear();
    }

    @Override
    public String toString() {
        return deque.toString();
    }
}
</code></pre>
","0","Answer"
"78480706","78480671","<p>We can use <a href=""https://en.wikipedia.org/wiki/Depth-first_search"" rel=""nofollow noreferrer"">depth first search</a> algorithm here:</p>
<h3>Code</h3>
<pre><code>def calculate_total_sum(arr):
    def dfs(arr, total):
        if arr is None:
            return total
        if type(arr) == int:
            return total + arr
        for el in arr:
            total = dfs(el, total)
        return total
    total = 0
    return dfs(arr, total)


list1 = [3, 3, [[3, 3, [3, [3, [3, [3, [3, [3, [3, 3, 3]]]]]]], 3]]]
print(calculate_total_sum(list1))
</code></pre>
<h3>Prints</h3>
<p>42</p>
<h3>Note</h3>
<ul>
<li>We pass the total sum in the <code>dfs()</code> method.</li>
<li>There are two base cases that we define first in the <code>dfs()</code>.</li>
<li>We iterate, and recursively call the <code>dfs()</code> to find all the integers in the array or list.</li>
</ul>
<hr />
<h3>Side note: <code>isinstace()</code>:</h3>
<ul>
<li>Using <code>isinstance()</code> is generally preferred over <code>type()</code> for type checking because it allows for more flexibility and handles inheritance properly.</li>
</ul>
<pre><code>def calculate_total_sum(arr):
    def dfs(arr, total):
        if arr is None:
            return total
        if isinstance(arr, int):
            return total + arr
        for el in arr:
            total = dfs(el, total)
        return total
    total = 0
    return dfs(arr, total)


list1 = [3, 3, [[3, 3, [3, [3, [3, [3, [3, [3, [3, 3, 3]]]]]]], 3]]]
print(calculate_total_sum(list1))

</code></pre>
","0","Answer"
"78480720","78480671","<p>Typically problems like this use recursive solutions. Recursion isn't particularly performant in Python, but it's still used for illustrative purposes quite often.</p>
<p>Recursive functions need to have at least two paths of execution. The &quot;base case&quot; where we can calculate a straightforward answer, and one or more &quot;recursive cases&quot; where we have to ask the function to keep thinking. Let's try to define those cases before we write the code.</p>
<blockquote>
<p>Problem: given a (heterogenous) list of numbers that might be nested arbitrarily deeply, return the total sum of those numbers</p>
<p>Base case: the list is empty, in which case the sum is zero</p>
<p>Recursive case 1: the head of the list is a number, in which case the sum adds that number plus calling this function on the tail</p>
<p>Recursive case 2: the head of the list is a list, in which case the function recurses into both the head of the list <em>and</em> the tail of the list.</p>
</blockquote>
<p>Let's implement that, shall we?</p>
<pre class=""lang-py prettyprint-override""><code>from typing import List, Self

type RecursiveNumbers = List[int | Self]

def recursive_sum(numbers: RecursiveNumbers) -&gt; int:
    match numbers:
        case []:
            return 0
        case [head, *tail] if isinstance(head, int):
            return head + recursive_sum(tail)
        case [head, *tail]:  # if not isinstance(head, int) goes unsaid
            return recursive_sum(head) + recursive_sum(tail)

assert recursive_sum([1, [2, 3, 4], 5]) == 15
</code></pre>
<hr />
<p>As I mentioned, recursion isn't particularly performant in Python. A typical Pythonic solution to this sort of problem involves keeping a stack of <code>List[int]</code>s you haven't processed yet and teaching your code to aggregate into it and pull out of it. For instance, consider:</p>
<pre class=""lang-py prettyprint-override""><code>def iterative_sum(all_numbers: RecursiveNumbers) -&gt; int:
    stack = [all_numbers]
    total = 0
    while stack:  # is not empty
        numbers = stack.pop()
        for number in numbers:
            if isinstance(number, list):
                stack.append(number)
            else:
                total += number
    return number
</code></pre>
","0","Answer"
"78480753","78480671","<p>What types of inputs are being accepted? From the fact that you use the default <code>.split()</code> function, I assume that the elements are deliminated by a single whitespace. Is it a string that can look something like this: <code>&quot;1 2 3 [1 2 3 [1 2 [1]]] 4&quot;</code></p>
<p>If so you can't really use <code>list1=[int(x) for x in input().split()]</code> in order to build a list for this question. This is going to return something like <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;[1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;[1&quot;, &quot;2&quot;, &quot;[1]]]&quot;, &quot;4&quot;]</code></p>
<p>This is probably where your error is stemming from. However, python should be throwing an error when attempting to convert something that isn't convertible to an int into an int so the fact that <code>list1=[int(x) for x in input().split()]</code> is running itself is curious.</p>
<p>Your algorithm itself also has some errors since you're assuming that arr is a simple 2d array of ints (each element of arr is a list where each element of that list is an int), when in reality each element of arr could be an int or a list where each element of that list could also be an int or a list. However, others have already provided good solutions for how to sum a nested list of integers so I would point to their answers if you're looking for an algorithm.</p>
","-1","Answer"
"78480778","78480671","<p>DFS is a good option. But this code is faster a little bit.</p>
<pre class=""lang-py prettyprint-override""><code>def cumsum(l):
    for i, e in enumerate(l):
        if isinstance(e, (float, int)):
            continue

        if isinstance(e, list):
            l[i] = cumsum(e)
            continue

        raise TypeError

    return sum(l)

li1 = [1, 2, [3, [4, 5, [6, [7, [8, [9, [1, [2, [3, 4]]]], 5], 6]], 7]]]
li2 = [3, [3, [3], 3], 3]
li3 = [[[[[3, 3, 3]]]]]

print(cumsum(li1))  # output: 73
print(cumsum(li2))  # output: 15
print(cumsum(li3))  # output: 9
</code></pre>
<pre><code>li1 = [1, 2, [3, [4, 5, [6, [7, [8, [9, [1, [2, [3, 4]]]], 5], 6]], 7]]]
li1 = li1 * 1000

%%timeit
cumsum(li1)
# 171 µs ± 6.21 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
</code></pre>
<pre class=""lang-py prettyprint-override""><code>li1 = [1, 2, [3, [4, 5, [6, [7, [8, [9, [1, [2, [3, 4]]]], 5], 6]], 7]]]
li1 = li1 * 1000

%%timeit
calculate_total_sum(li1)
# 2.44 ms ± 18.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
","0","Answer"
"78483564","78483518","<p>It depends on what are you going to have. We can, say, filter out, unwanted types while keeping <code>DatabaseList</code> structure:</p>
<pre><code>var DatabaseListA = DatabaseList
  .Select(list =&gt; list.Where(item =&gt; item.Type == &quot;A&quot;).ToList())
  .ToList();

var DatabaseListB = DatabaseList
  .Select(list =&gt; list.Where(item =&gt; item.Type == &quot;B&quot;).ToList())
  .ToList();
</code></pre>
<p>If you want some kind of grouping, we can first get all <code>Type</code>s</p>
<pre><code>var allTypes = DatabaseList
  .SelectMany(list =&gt; list.Select(item =&gt; item.Type))
  .Distinct(tp =&gt; tp);
</code></pre>
<p>and then repeat the code above, so you can try something like this:</p>
<pre><code>var result = DatabaseList
  .SelectMany(list =&gt; list.Select(item =&gt; item.Type))
  .Distinct(tp =&gt; tp) 
  .OrderBy(tp =&gt; tp)
  .Select(tp =&gt; DatabaseList
     .Select(list =&gt; list.Where(item =&gt; item.Type == tp).ToList())
     .ToList())
  .ToList(); 
</code></pre>
","1","Answer"
"78484108","78483518","<p>It's not clear what result you want but here are two possible solutions:</p>
<h2>A. Sub-sub-lists: <code>List&lt;List&lt;List&lt;TestData&gt;</code></h2>
<pre><code>// Each sublist in split into two sublists 
List&lt;List&lt;List&lt;TestData&gt;&gt;&gt; l = new ()
{
    DatabaseList.Select(a =&gt; a.Where(c=&gt;c.Type == &quot;A&quot;).ToList()).ToList(),
    DatabaseList.Select(a =&gt; a.Where(c=&gt;c.Type == &quot;B&quot;).ToList()).ToList()
};

// Or

List&lt;List&lt;List&lt;TestData&gt;&gt;&gt; l2 = DatabaseList
      .Select(sublist =&gt; sublist
                .GroupBy(keySelector: t =&gt; t.Type) // Group by type
                .Select(group =&gt; group.ToList()) // Discard the key and make all elements that have that key a list
              .ToList()) 
      .ToList();
</code></pre>
<p>This would give you:</p>
<pre><code>sublist 0:
        subsubsublist 0:
                TestData { Balance = 10, Name = Data1 1, Type = A }
                TestData { Balance = 20, Name = Data1 2, Type = A }
        subsubsublist 2:
                TestData { Balance = 30, Name = Data1 3, Type = B }
sublist 1:
        subsubsublist 0:
                TestData { Balance = 100, Name = Data2 1, Type = A }
                TestData { Balance = 200, Name = Data2 2, Type = A }
        subsubsublist 2:
                TestData { Balance = 300, Name = Data2 3, Type = B }
sublist 2:
        subsubsublist 0:
                TestData { Balance = 1000, Name = Data3 1, Type = A }
                TestData { Balance = 2000, Name = Data3 2, Type = A }
        subsubsublist 2:
                TestData { Balance = 3000, Name = Data3 3, Type = B }
</code></pre>
<h2>B. Just sub-lists: <code>List&lt;List&lt;TestData&gt;</code></h2>
<p>It's also possible you want this:</p>
<pre><code>// One list with &quot;A&quot; and onther list with &quot;B&quot;
List&lt;List&lt;TestData&gt;&gt; l = new ()
{
    // All elements with &quot;A&quot; from all sublists
    DatabaseList.SelectMany(a =&gt; a.Where(c=&gt;c.Type == &quot;A&quot;).ToList()).ToList(), 
    // All elements with &quot;B&quot; from all sublists
    DatabaseList.SelectMany(a =&gt; a.Where(c=&gt;c.Type == &quot;B&quot;).ToList()).ToList()
};

// This would achieve the same:
List&lt;List&lt;TestData&gt;&gt; l2 = DatabaseList
      .SelectMany(l =&gt; l) // This will make single list, without sublists;
      .GroupBy(keySelector: l =&gt; l.Type) // Group by type
      .Select(l =&gt; l.ToList()) // Discard the key and make all elements that have that key a List
      .ToList();
</code></pre>
<p>This way gives you:</p>
<pre><code>tmaj@myhost:~/dev/games9$ dotnet run
sublist 0:
                TestData { Balance = 10, Name = Data1 1, Type = A }
                TestData { Balance = 20, Name = Data1 2, Type = A }
                TestData { Balance = 100, Name = Data2 1, Type = A }
                TestData { Balance = 200, Name = Data2 2, Type = A }
                TestData { Balance = 1000, Name = Data3 1, Type = A }
                TestData { Balance = 2000, Name = Data3 2, Type = A }
sublist 1:
                TestData { Balance = 30, Name = Data1 3, Type = B }
                TestData { Balance = 300, Name = Data2 3, Type = B }
                TestData { Balance = 3000, Name = Data3 3, Type = B }
</code></pre>
","1","Answer"
"78486827","78486788","<p>You will want to move the initialization of your global variable listY outside of your loop. If listY is inside the loop, it will re-initialize listY every time the loop iterates. Additionally, you might not need a global variable in which case you can just return listY from your function</p>
<pre><code>def findCypherP1():
    listY = []
    a = 0 # length of phrase to encrypt (cypher phrase)
    column = 0 # length of encryption section (shuffled alphabet)
    row = 0
    dictator = encryptionTable[0] # first row of the alphabet
    for p in range(len(phrase) * len(dictator)):
        if phrase[a] == dictator[column]:
            print(&quot;Column containing cypher Y:&quot;, str(column+1))
            column2 = column
            listY.append(column2)
            a += 1; column = 0
        if a &gt;= len(phrase):
            print(listY)
            break
        else:
            column += 1
    return listY
</code></pre>
","0","Answer"
"78486829","78486788","<p>Just in case you have trouble to understand the comments below your question the required change to the code:</p>
<pre><code>listY = []
def findCypherP1():
    a = 0 # length of phrase to encrypt (cypher phrase)
    column = 0 # length of encryption section (shuffled alphabet)
    row = 0
    dictator = encryptionTable[0] # first row of the alphabet
    for p in range(len(phrase) * len(dictator)):
        if phrase[a] == dictator[column]:
            print(&quot;Column containing cypher Y:&quot;, str(column+1))
            column2 = column
            listY.append(column2)
            a += 1; column = 0
        if a &gt;= len(phrase):
            print(listY)
            break
        else:
            column += 1
</code></pre>
","0","Answer"
"78490738","78490659","<p>One way to do this is, you create a dictionary <code>merged_data</code> where the keys are the &quot;id&quot; values from your original list. You then iterate over each dictionary in the original list and either add the &quot;sublist&quot; items to an existing entry in <code>merged_data</code> (if the &quot;id&quot; is already there) or create a new entry (if the &quot;id&quot; is not present). Finally, you convert the merged dictionary back to a list.</p>
<p>Here is an example implementation:</p>
<pre class=""lang-py prettyprint-override""><code>merged_data = {}

# iterate through your original list (called data here) and merge dictionaries with the same id
for item in data:
    item_id = item[&quot;id&quot;]
    if item_id in merged_data:
        merged_data[item_id][&quot;sublist&quot;].extend(item[&quot;sublist&quot;])
    else:
        merged_data[item_id] = item

# convert the merged dictionary back to a list
result = list(merged_data.values())

print(result)
</code></pre>
","0","Answer"
"78490770","78490659","<pre><code>dict = [{
   &quot;id&quot;: &quot;1&quot;,
   &quot;sublist&quot;: [
     {
       &quot;key&quot;: &quot;1&quot;
     }
   ]
  },
  {
   &quot;id&quot;: &quot;1&quot;,
   &quot;sublist&quot;: [
     {
       &quot;key&quot;: &quot;2&quot;
     }
   ]
  },
  {
   &quot;id&quot;: &quot;2&quot;,
   &quot;sublist&quot;: [
     {
       &quot;key&quot;: &quot;3&quot;
     }
   ]
  }
]
id_list = {}
new_dict = []
for index, element_dict in enumerate(dict):
    id = element_dict['id']
    if id in id_list:
        new_dict[id_list[id]]['sublist'] += element_dict['sublist']
    else:
        id_list[id] = index
        new_dict.append(element_dict)
print(new_dict)
</code></pre>
<p>The id_list will keep track of the sublists of past and we will add to id_list for new elements if old add to them</p>
","0","Answer"
"78497294","78497222","<p>Given that the parameter is fixed you can simply do</p>
<pre><code>open import Data.List.Base using (tabulate)
open import Data.Fin.Base using (toℕ)
open import Function using (_∘_)

func : (m n : ℕ) → List (idx (n + m))
func m n = tabulate {n = n + m} (num ∘ suc ∘ toℕ)
</code></pre>
","4","Answer"
"78497367","78497222","<p>It looks like you can generalize your function to an arbitrary index <code>k</code> so that recursion is no longer a problem:</p>
<pre><code>rev-list2 : (m n k : ℕ) → List (idx k)
rev-list2 m zero    k = []
rev-list2 m (suc n) k = num (suc m) ∷ rev-list2 (suc m) n k
</code></pre>
<p>Then you can define your special case:</p>
<pre><code>rev-list : (m n : ℕ) → List (idx (n + m))
rev-list m n = rev-list2 m n (n + m)
</code></pre>
","6","Answer"
"78501853","78501833","<p>If you are sure that the strings in the list are always of the same pattern; e.g. lettersDigits, you can do this using built-in regex library <code>re</code></p>
<pre class=""lang-py prettyprint-override""><code>import re

# Given list of strings
strings = ['abc1234', 'appa4567', 'kkakaka9876']

# Function to split the string using regex
def split_string(s):
    match = re.match(r&quot;([a-zA-Z]+)(\d+)&quot;, s)
    if match:
        return match.groups()

# Convert the list to a dictionary using map and dict comprehension
result = dict(map(split_string, strings))

print(result)
</code></pre>
<p>this should result in:</p>
<pre><code>{'abc': '1234', 'appa': '4567', 'kkakaka': '9876'}
</code></pre>
","1","Answer"
"78501863","78501833","<p>Other version using <code>itertools</code>:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import filterfalse, tee

lst = [&quot;abc1234&quot;, &quot;appa4567&quot;, &quot;kkakaka9876&quot;]


# from https://docs.python.org/3/library/itertools.html
def partition(predicate, iterable):
    &quot;&quot;&quot;Partition entries into false entries and true entries.

    If *predicate* is slow, consider wrapping it with functools.lru_cache().
    &quot;&quot;&quot;
    # partition(is_odd, range(10)) → 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(predicate, t1), filter(predicate, t2)


out = {}
for s in lst:
    k, v = partition(str.isnumeric, s)
    out[&quot;&quot;.join(k)] = &quot;&quot;.join(v)

print(out)
</code></pre>
<p>Prints:</p>
<pre><code>{'abc': '1234', 'appa': '4567', 'kkakaka': '9876'}
</code></pre>
<hr />
<p>OR:</p>
<pre class=""lang-py prettyprint-override""><code>out = dict(map(&quot;&quot;.join, partition(str.isnumeric, s)) for s in lst)

print(out)
</code></pre>
","1","Answer"
"78501867","78501833","<h2>You can try this simple nested for loop:</h2>
<h4>Caution : It will only work if you always have keys in alphabet and values in numbers.</h4>
<h3>if you want, you can modularize and optimize it accordingly</h3>
<pre><code>
for i in list :
    key = &quot;&quot;
    value = &quot;&quot;
    for j in i : 
        if j.isalpha():
            key += j
        if j.isnumeric():
            value += j
    
    print(key,&quot; -&gt; &quot;,value)

    
</code></pre>
","0","Answer"
"78501948","78501833","<p>You could use a generator to produce the key/value pairs that can then be passed to <em>dict()</em> as follows:</p>
<pre><code>data = [&quot;abc1234&quot;, &quot;appa4567&quot;, &quot;kkakaka9876&quot;]

def split(data):
    for item in data:
        for i, c in enumerate(item):
            if c.isdecimal():
                yield item[:i], item[i:]
                break

d = dict(split(data))

print(d)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'abc': '1234', 'appa': '4567', 'kkakaka': '9876'}
</code></pre>
","1","Answer"
"78502249","78501833","<p>Well, this is my take on this:</p>
<pre><code>src = ['abc1234', 'appa4567', 'kkakaka9876']
dict((''.join(filter(f, s)) for f in (str.isalpha, str.isdigit)) for s in src)
# {'abc': '1234', 'appa': '4567', 'kkakaka': '9876'}
</code></pre>
","1","Answer"
"78506334","78506307","<p>The issue in your code is that you are using the RemoveAt method, which removes a student based on the index, not the Id property. Additionally, RemoveAt expects a zero-based index, so if the id doesn't match the index, it will cause an exception.</p>
<p>To fix this, you should find the student by their Id property and then remove them from the list. Tell me if that worked for you :))</p>
","2","Answer"
"78506396","78506307","<p><a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.removeat?view=net-8.0"" rel=""nofollow noreferrer""><strong>List.RemoveAt</strong></a> is documented to do the following:</p>
<blockquote>
<p>Removes the element at the <strong>specified index</strong> of the List.</p>
</blockquote>
<p><em>(emphasis in mine)</em></p>
<p>In your case <code>id</code> is not the index of the element (which is a sequential numbering of the elements in the list starting at 0), but rather the value of a specific property of it.</p>
<p>In order to remove an element by a given property, you can use <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.removeall?view=net-8.0"" rel=""nofollow noreferrer""><strong>List.RemoveAll</strong></a> which:</p>
<blockquote>
<p>Removes all the elements that match the conditions defined by the specified predicate.</p>
</blockquote>
<p>In this predicate you can compare the <code>Id</code> property to the one you want to remove:</p>
<pre><code>//----------------------------vvvvvvvvvvvvvvvv--
students.RemoveAll(student =&gt; student.Id == id);
</code></pre>
","3","Answer"
"78508885","78508769","<p>The simplest solution seems to be just to construct a list of dicts in a loop:</p>
<pre class=""lang-yaml prettyprint-override""><code>---
- name: Assign the variable
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    instance_running:
      instance_ids: [
        &quot;i-05a765076f4cbf03b&quot;,
        &quot;i-096b8a656d875f38a&quot;,
        &quot;i-0b5156565ac17c9e4&quot;,
        &quot;i-0865656657565edd5&quot;
      ]
    host_port: 22
  tasks:
    - name: Generate the list of dicts
      set_fact:
        targets: &quot;{{ targets | default([]) + [{ 'id': item, 'port': host_port }] }}&quot;
      loop: &quot;{{ instance_running.instance_ids }}&quot;

    - name: Show the result
      debug:
        var: targets
</code></pre>
<p>The result would be as follows:</p>
<pre class=""lang-yaml prettyprint-override""><code>TASK [Show the result] *****************************************************************
ok: [localhost] =&gt; 
  targets:
  - id: i-05a765076f4cbf03b
    port: 22
  - id: i-096b8a656d875f38a
    port: 22
  - id: i-0b5156565ac17c9e4
    port: 22
  - id: i-0865656657565edd5
    port: 22
</code></pre>
","1","Answer"
"78509318","78508769","<p>Given the variables</p>
<pre class=""lang-yaml prettyprint-override""><code>  host_port: 80
  instance_running:
    instance_ids:
      - i-05a765076f4cbf03b
      - i-096b8a656d875f38a
      - i-0b5156565ac17c9e4
      - i-0865656657565edd5
</code></pre>
<p>There are many options on how to create <em>targets</em></p>
<pre class=""lang-yaml prettyprint-override""><code>  targets:
  - Id: i-05a765076f4cbf03b
    Port: 80
  - Id: i-096b8a656d875f38a
    Port: 80
  - Id: i-0b5156565ac17c9e4
    Port: 80
  - Id: i-0865656657565edd5
    Port: 80
</code></pre>
<ul>
<li>You can use either the filter <a href=""https://docs.ansible.com/ansible/latest/collections/community/general/docsite/filter_guide_abstract_informations_dictionaries.html#dictionaries"" rel=""nofollow noreferrer"">community.general.dict_kv</a></li>
</ul>
<pre class=""lang-yaml prettyprint-override""><code>  ids: &quot;{{ instance_running.instance_ids |
           map('community.general.dict_kv', 'Id') }}&quot;
</code></pre>
<p>, or <a href=""https://docs.ansible.com/ansible/latest/collections/community/general/json_query_filter.html"" rel=""nofollow noreferrer"">community.general.json_query</a></p>
<pre class=""lang-yaml prettyprint-override""><code>  ids: &quot;{{ instance_running.instance_ids |
           community.general.json_query('[].{Id: @}') }}&quot;
</code></pre>
<p>to create a list of dictionaries</p>
<pre class=""lang-yaml prettyprint-override""><code>  ids:
  - Id: i-05a765076f4cbf03b
  - Id: i-096b8a656d875f38a
  - Id: i-0b5156565ac17c9e4
  - Id: i-0865656657565edd5
</code></pre>
<ul>
<li>Then, create a <em>product</em> of the lists and <em>combine</em> the items</li>
</ul>
<pre class=""lang-yaml prettyprint-override""><code>  targets: &quot;{{ ids |
               product([{'Port': host_port}]) |
               map('combine') }}&quot;
</code></pre>
<ul>
<li>The next option is the filter <a href=""https://docs.ansible.com/ansible/latest/collections/community/general/docsite/filter_guide_abstract_informations_dictionaries.html"" rel=""nofollow noreferrer"">community.general.dict</a></li>
</ul>
<pre class=""lang-yaml prettyprint-override""><code>  targets: &quot;{{ instance_running.instance_ids |
               product([host_port]) |
               map('zip', ['Id', 'Port']) |
               map('map', 'reverse') |
               map('community.general.dict') }}&quot;
</code></pre>
<ul>
<li>But, the easiest option is to create the below query</li>
</ul>
<pre class=""lang-yaml prettyprint-override""><code>  _query: '[].{Id: @, Port: `{{ host_port }}`}'
  targets: &quot;{{ instance_running.instance_ids |
               community.general.json_query(_query) }}&quot;
</code></pre>
<hr>
<sup>
<p>Example of a complete playbook for testing</p>
<pre class=""lang-yaml prettyprint-override""><code>- hosts: all

  vars:

    host_port: 80
    instance_running:
      instance_ids:
        - i-05a765076f4cbf03b
        - i-096b8a656d875f38a
        - i-0b5156565ac17c9e4
        - i-0865656657565edd5

    ids1: &quot;{{ instance_running.instance_ids |
              map('community.general.dict_kv', 'Id') }}&quot;
    ids2: &quot;{{ instance_running.instance_ids |
              community.general.json_query('[].{Id: @}') }}&quot;
    target1: &quot;{{ ids1 |
                 product([{'Port': host_port}]) |
                 map('combine') }}&quot;
    target2: &quot;{{ instance_running.instance_ids |
                 product([host_port]) |
                 map('zip', ['Id', 'Port']) |
                 map('map', 'reverse') |
                 map('community.general.dict') }}&quot;
    _query: '[].{Id: @, Port: `{{ host_port }}`}'
    target3: &quot;{{ instance_running.instance_ids |
                 community.general.json_query(_query) }}&quot;

  tasks:

    - debug:
        var: ids1
    - debug:
        var: ids2

    - debug:
        var: target1
    - debug:
        var: target2
    - debug:
        var: target3
</code></pre>
</sup>
","2","Answer"
"78519819","78519792","<p>Loop over the list and assign to the correct variable based on the contents of the element:</p>
<pre><code>when = lines[3]
# initialize all the variables with default values
wind = gust = pressure = air_temp = water_temp = ''
for item in lines:
    if item.startswith('Wind:'):
        wind = item
    elif item.startswith('Gust:'):
        gust = item
    # and so on
</code></pre>
<p>You can also omit the initializations if you want to keep the missing values from the previous line. You should then do that initialization before processing the file.</p>
","3","Answer"
"78519961","78519792","<p>You can store them in a dictionary using the string at the start of each element as the dictionary key.</p>
<pre><code>dd = dict([t.split(': ') for t in lines[5:] if t != ''])
</code></pre>
<p>Output:</p>
<pre><code>{'Wind': 'SSW (210°), 9.9 kt',
 'Gust': '15.0 kt',
 'Pres': '29.96 falling',
 'Air Temp': '82.8 °F',
 'Water Temp': '68.5 °F'}
</code></pre>
<p>Then you can reference each dictionary entry to get information.</p>
","2","Answer"
"78520749","78520642","<p><code>list(nums)</code> and <code>deque(nums)</code> would create a completely different list object so it's not considered to be replacing in-place of the list. I think you would have to use general assign value statement to the list at index <code>i</code> (ie <code>nums[i] = &lt;value&gt;</code>). Below code is one of the approach using recursive dfs with in-place list modification</p>
<pre><code>class Solution:
    def rotate(self, nums: List[int], k: int) -&gt; None:
        &quot;&quot;&quot;
        Do not return anything, modify nums in-place instead.
        &quot;&quot;&quot;
        
        k = k % len(nums)
        def traverse(nums, i, k, value, count, origin):
            next_i = (i + k) % len(nums)
            if next_i != origin and count &lt; len(nums):
                count = traverse(nums, next_i, k, nums[i], count + 1, origin)
            nums[i] = value
            return count

        count = 0
        offset = 0
        while count &lt; len(nums):
            count = traverse(nums, k + offset, k, nums[offset], count + 1, offset + k)
            offset += 1
    
        return nums
</code></pre>
","0","Answer"
"78520769","78520642","<p>Your solution works, but not based on the requirement. It is simply not what the problem is about.</p>
<p>You need to not change the <code>nums</code> and perform all the operations in-place:</p>
<pre><code>class Solution:
    def rotate(self, nums: List[int], k: int) -&gt; None:
        &quot;&quot;&quot;
        Do not return anything, modify nums in-place instead.
        &quot;&quot;&quot;
        from collections import deque
        A = deque(nums[:])
        for i in range(k):
            A.appendleft(A.pop())
        nums[:] = list(A)
</code></pre>
<ul>
<li><p>To &quot;bypass&quot; the requirements, you define <code>A</code> as a new variable and copy <code>nums</code> into <code>A</code>.</p>
</li>
<li><p>Then again, copy back <code>A</code> into <code>nums</code> using <code>nums[:]</code>.</p>
</li>
<li><p>Note that, this is not what they asked, but to simply show you that you have solved the problem not based on the requirement though.</p>
</li>
</ul>
<hr />
<p>A much simple solution would be to use slicing as follows:</p>
<pre><code>class Solution:
    def rotate(self, nums: List[int], k: int):
        l = len(nums)
        if k &lt; 1 or l &lt; 2 or k == l:
            return

        k %= l
        nums[:] = nums[-k:] + nums[:l - k]
        print(nums)


if __name__ == '__main__':
    print(Solution().rotate([1, 2, 3, 4, 5, 6, 7], k=3))
    print(Solution().rotate([-1, -100, 3, 99], k=2))

</code></pre>
<h3>Prints</h3>
<p>[5, 6, 7, 1, 2, 3, 4]</p>
<p>[3, 99, -1, -100]</p>
","0","Answer"
"78520796","78520642","<p>list and deque create a different object it's not considered to be replacing in-place of list</p>
<pre class=""lang-py prettyprint-override""><code>class Solution:
    def rotate(self, nums: List[int], k: int) -&gt; None:
        &quot;&quot;&quot;
        Do not return anything, modify nums in-place instead.
        &quot;&quot;&quot;
        k = k % len(nums)
        l,r = 0, len(nums) -1

        while l&lt;r:
          nums[l],nums[r] = nums[r], nums[l]
          l,r = l+1, r-1

        l,r = 0, k-1
        while l&lt;r:
          nums[l],nums[r] = nums[r], nums[l]
          l,r = l+1, r-1
        
        l, r = k , len(nums) -1
        while l&lt;r:
          nums[l],nums[r] = nums[r], nums[l]
          l,r = l+1, r-1
        
        

</code></pre>
","1","Answer"
"78520814","78520642","<blockquote>
<p>My submission is correct ...</p>
</blockquote>
<p>It isn't.  Your code doesn't meet the requirements for this problem as other answers and comments have explained.</p>
<blockquote>
<p>Although it works correctly in other IDEs ...</p>
</blockquote>
<p>It doesn't.</p>
<p>The reason you <strong>think</strong> that it &quot;works&quot; is that your testing methodology is incorrect!</p>
<p>A proper test for your code would be something like this:</p>
<pre><code>test = [1, 2, 3, 4, 5, 6, 7]
Solution().rotate(test, k=3)
print(test)
</code></pre>
<p>That would show that your solution outputs something like this:</p>
<pre><code>[5, 6, 7, 1, 2, 3, 4]
[1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>The first line comes from the <code>print</code> statement in your method.  (It should not be there.  A method shouldn't output stuff unless the requirements explicitly say that it should.)</p>
<p>The second line is from the <code>print</code> after returning to your test code ... and it shows that <code>test</code> has NOT been <strong>modified in place</strong>.</p>
","0","Answer"
"78524378","78524320","<p>Are you looking for this?</p>
<pre><code>&gt; (l &lt;- list(month1=lapply(1:3 |&gt; setNames(paste0('year', 1:3)), \(x) rep_len(5*x, 4)),
+           month2=lapply(4:6 |&gt; setNames(paste0('year', 4:6)), \(x) rep_len(5*x, 4)),
+           month3=lapply(7:9 |&gt; setNames(paste0('year', 7:9)), \(x) rep_len(5*x, 4))
+ ))
$month1
$month1$year1
[1] 5 5 5 5

$month1$year2
[1] 10 10 10 10

$month1$year3
[1] 15 15 15 15


$month2
$month2$year4
[1] 20 20 20 20

$month2$year5
[1] 25 25 25 25

$month2$year6
[1] 30 30 30 30


$month3
$month3$year7
[1] 35 35 35 35

$month3$year8
[1] 40 40 40 40

$month3$year9
[1] 45 45 45 45
</code></pre>
<p></p>
<pre><code>&gt; str(l)
List of 3
 $ month1:List of 3
  ..$ year1: num [1:4] 5 5 5 5
  ..$ year2: num [1:4] 10 10 10 10
  ..$ year3: num [1:4] 15 15 15 15
 $ month2:List of 3
  ..$ year4: num [1:4] 20 20 20 20
  ..$ year5: num [1:4] 25 25 25 25
  ..$ year6: num [1:4] 30 30 30 30
 $ month3:List of 3
  ..$ year7: num [1:4] 35 35 35 35
  ..$ year8: num [1:4] 40 40 40 40
  ..$ year9: num [1:4] 45 45 45 45
</code></pre>
<p>Or more general:</p>
<pre><code>&gt; n_y &lt;- 2; n_m &lt;- 4; n &lt;- 6
&gt; lapply(setNames(seq_len(n_m), paste0(&quot;month&quot;, seq_len(n_m))),
+        \(y) lapply(setNames(seq_len(n_y)*y, paste0(&quot;year&quot;, seq_len(n_y))), 
+                    \(x) rep_len(5*x, n)))
$month1
$month1$year1
[1] 5 5 5 5 5 5

$month1$year2
[1] 10 10 10 10 10 10


$month2
$month2$year1
[1] 10 10 10 10 10 10

$month2$year2
[1] 20 20 20 20 20 20


$month3
$month3$year1
[1] 15 15 15 15 15 15

$month3$year2
[1] 30 30 30 30 30 30


$month4
$month4$year1
[1] 20 20 20 20 20 20

$month4$year2
[1] 40 40 40 40 40 40
</code></pre>
","0","Answer"
"78524413","78524320","<p>You can try using <code>split()</code> twice, first by month, then iterate over the result and split by year while replicating <code>x</code> to the desired length:</p>
<pre><code>res &lt;- lapply(split(df, ~ month), \(x) split(rep(x$x, 4), x$year)) 

str(res)

List of 3
 $ 1:List of 3
  ..$ 2000: num [1:4] 5 5 5 5
  ..$ 2001: num [1:4] 10 10 10 10
  ..$ 2002: num [1:4] 15 15 15 15
 $ 2:List of 3
  ..$ 2000: num [1:4] 20 20 20 20
  ..$ 2001: num [1:4] 25 25 25 25
  ..$ 2002: num [1:4] 30 30 30 30
 $ 3:List of 3
  ..$ 2000: num [1:4] 35 35 35 35
  ..$ 2001: num [1:4] 40 40 40 40
  ..$ 2002: num [1:4] 45 45 45 45
</code></pre>
","0","Answer"
"78525604","78525579","<p>Tuples are immutable, so you can't modify these in place. You need to construct new tuples containing the modified second element.</p>
<p>Use a conditional expression to avoid trying to access <code>x[1]</code> when there's only one element.</p>
<p>You also shouldn't have nested loops. Your inner loop is iterating over all the items in each tuple, but you only want to convert the second item.</p>
<pre><code>new_lst = [(x[0], float(x[1])) 
            if (isinstance(x, tuple) and len(x) == 2) 
            else x 
           for x in lst]
</code></pre>
","1","Answer"
"78525794","78525579","<p>You can test for length before the conversion or wrap the conversion in a try/except block to catch the error.</p>
<pre><code>for i in lst:
    for x in i:
        if len(x) &gt; 1:
            float(x[1])
</code></pre>
<p>or</p>
<pre><code>for i in lst:
    for x in i:
        try:
            float(x[1])
        except IndexError:
            pass
</code></pre>
<p>How you use the converted value may make one way or the other the better choice.</p>
","-2","Answer"
"78526734","78526001","<p>You can easily handle this with <code>array</code>s, which are essentially multidimensional matrices.</p>
<p><em>Example:</em></p>
<p>Two arrays,</p>
<pre><code>&gt; A1
, , 1

     [,1] [,2]
[1,]    3    3
[2,]    3    3
[3,]    3    3

, , 2

     [,1] [,2]
[1,]    2    2
[2,]    2    2
[3,]    2    2

&gt; A2
, , 1

     [,1] [,2]
[1,]    2    2
[2,]    2    2
[3,]    2    2

, , 2

     [,1] [,2]
[1,]    1    1
[2,]    1    1
[3,]    1    1
</code></pre>
<p>subtracted.</p>
<pre><code>&gt; A1 - A2
, , 1

     [,1] [,2]
[1,]    1    1
[2,]    1    1
[3,]    1    1

, , 2

     [,1] [,2]
[1,]    1    1
[2,]    1    1
[3,]    1    1
</code></pre>
<p>If your data is homogeneous (e.g., numeric), as it looks like, you can convert it into an array.</p>
<p>Here is an ad-hoc function to convert lists into arrays and vice versa,</p>
<pre><code>&gt; lstcnv &lt;- \(x, to=c('array', 'list')) {
+   to &lt;- match.arg(to)
+   if (identical(to, 'array')) {
+     list2array &lt;- \(x) {
+       if (is.atomic(x[[1]])) {
+         simplify2array(x)
+       } else {
+         simplify2array(lapply(x, list2array))
+       } 
+     }
+     list2array(x)
+   } else {
+     array2list &lt;- \(x) {
+       atl &lt;- \(x) {
+         if (is.array(x) &amp;&amp; length(dim(x)) &gt; 2) {
+           lapply(seq_len(dim(x)[length(dim(x))]), 
+                  \(i) atl(apply(x, seq_len(length(dim(x)) - 1), `[`, i)))
+         } else {
+           x
+         }
+       }
+       rc_atl &lt;- \(x) if (is.list(x)) lapply(x, rc_atl) else atl(x)
+       rc_atl(x)
+     }
+     array2list(x)
+   }
+ }
</code></pre>
<p>where <code>x=</code> is the object, and <code>to=</code> is the direction (can be abbreviated and defaults to <code>'array'</code>).</p>
<p>Using the function, you can do,</p>
<pre><code>&gt; res &lt;- lstcnv(lstcnv(list1) - lstcnv(list2), 'l')
</code></pre>
<p>where</p>
<pre><code>&gt; str(res)
List of 3
 $ 1:List of 3
  ..$ 2000: num [1:13] 4 4 4 4 4 4 4 4 4 4 ...
  ..$ 2001: num [1:13] 8 8 8 8 8 8 8 8 8 8 ...
  ..$ 2002: num [1:13] 12 12 12 12 12 12 12 12 12 12 ...
 $ 2:List of 3
  ..$ 2000: num [1:13] 16 16 16 16 16 16 16 16 16 16 ...
  ..$ 2001: num [1:13] 20 20 20 20 20 20 20 20 20 20 ...
  ..$ 2002: num [1:13] 24 24 24 24 24 24 24 24 24 24 ...
 $ 3:List of 3
  ..$ 2000: num [1:13] 28 28 28 28 28 28 28 28 28 28 ...
  ..$ 2001: num [1:13] 32 32 32 32 32 32 32 32 32 32 ...
  ..$ 2002: num [1:13] 36 36 36 36 36 36 36 36 36 36 ...
</code></pre>
<p>Of course, instead of constantly converting back and forth, you can perform the calculations directly with arrays, which would also be more efficient.</p>
","2","Answer"
"78526903","78526854","<p><code>transpose</code> swaps rows and columns.</p>
<p><code>[]</code> has 0 rows and a not-really-well-defined number of columns that the function just treats as 0. Swapping 0 rows with 0 columns doesn't change anything.</p>
<p><code>[[[]]]</code> and beyond each have 1 row and 1 column. Swapping 1 row with 1 column doesn't change anything either.</p>
<p><code>[[]]</code> has 1 row and 0 columns. Swapping 1 row and 0 columns produces an output with 0 rows: an empty list.</p>
","10","Answer"
"78527048","78526001","<p>use recursion. Note that this works with data that is homogeneous: ie similar structure.</p>
<pre><code>list_subtract &lt;- function(x, y) if(is.atomic(x)) x - y else Map(list_subtract, x, y)
list_subtract(list1, list2)
</code></pre>
","4","Answer"
"78527070","78526001","<p>You can try <code>unlist</code> + <code>relist</code></p>
<pre><code>&gt; relist(unlist(list1) - unlist(list2), list1)
$`1`
$`1`$`2000`
 [1] 4 4 4 4 4 4 4 4 4 4 4 4 4

$`1`$`2001`
 [1] 8 8 8 8 8 8 8 8 8 8 8 8 8

$`1`$`2002`
 [1] 12 12 12 12 12 12 12 12 12 12 12 12 12


$`2`
$`2`$`2000`
 [1] 16 16 16 16 16 16 16 16 16 16 16 16 16

$`2`$`2001`
 [1] 20 20 20 20 20 20 20 20 20 20 20 20 20

$`2`$`2002`
 [1] 24 24 24 24 24 24 24 24 24 24 24 24 24


$`3`
$`3`$`2000`
 [1] 28 28 28 28 28 28 28 28 28 28 28 28 28

$`3`$`2001`
 [1] 32 32 32 32 32 32 32 32 32 32 32 32 32

$`3`$`2002`
 [1] 36 36 36 36 36 36 36 36 36 36 36 36 36
</code></pre>
","5","Answer"
"78527127","78527079","<p>Probably the issue is you storing multiple copies of the entire list. To optimize memory usage, store only the changes made between snapshots:</p>
<pre><code>class SnapshotArray:
    def __init__(self, length: int):
        self.snapshots = [{}] 
        self.current = {}
        self.snap_id = 0
    def set(self, index: int, val: int) -&gt; None:
        self.current[index] = val
    def snap(self) -&gt; int:
        self.snapshots.append(self.current.copy())
        self.current = {}
        self.snap_id += 1
        return self.snap_id - 1
    def get(self, index: int, snap_id: int) -&gt; int:
        for i in range(snap_id, -1, -1):
            if index in self.snapshots[i]:
                return self.snapshots[i][index]
        return 0
</code></pre>
","0","Answer"
"78527202","78526854","<p>The type</p>
<pre><code>transpose :: [[a]] -&gt; [[a]] 
</code></pre>
<p>makes <code>transpose</code> take a list-of-lists of <code>a</code>. Here <code>a</code> is an arbitrary type, so <code>transpose</code> does not (and can not) inspect its input beyond two levels of lists.</p>
<p>Hence, the cases you posted are &quot;seen&quot; by <code>transpose</code> as follows:</p>
<pre><code>ghci&gt; transpose []
[]
ghci&gt; transpose [[]]
[]
ghci&gt; transpose [[something]]
[[something]]
ghci&gt; transpose [[something]]
[[something]]
ghci&gt; transpose [[something]]
[[something]]
ghci&gt; transpose [[something]]
[[something]]
</code></pre>
<p>Now, it's easier to understand. As user2357112 already explained in their answer, the input <code>[]</code> is a 0*? matrix, <code>[[]]</code> is a 1*0 matrix, and <code>[[something]]</code> is a 1*1 matrix.</p>
","7","Answer"
"78527350","78526854","<p>I like the consideration mentioned in the other answers when thinking of <code>[[a]]</code> as a matrix. But I do object slightly on the grounds that not all <code>[[a]]</code> really are matrices; it is quite often useful to have &quot;jagged&quot; nested lists, and <code>transpose</code> can still be sensible and useful on them. So I'd like to give some arguments that do not assume rectangular-ness. I have two.</p>
<p>First, suppose we lived in an alternative universe where <code>transpose [[]] = [[]]</code>. Now, what should <code>transpose [[], []]</code> do? There's not really a good way to reflect in the output that there were two empty lists in the input. So let's try choosing <code>transpose [[], []] = [[]]</code> again. But now we have an alternative broken pattern:</p>
<pre><code>&gt; transpose [[], [], []]
[[]]
&gt; transpose [[], []]
[[]]
&gt; transpose [[]]
[[]]
&gt; transpose []
[] -- whoops, not [[]] like the pattern would suggest
</code></pre>
<p>If we make all the changes described above <em>and</em> change to <code>transpose [] = [[]]</code> so that this pattern works, then your original pattern is broken again.</p>
<pre><code>&gt; transpose [[[[]]]]
[[[[]]]]
&gt; transpose [[[]]]
[[[]]]
&gt; transpose [[]]
[[]]
&gt; transpose []
[[]] -- whoops, not [] like the pattern would suggest
</code></pre>
<p>It seems it's just not possible to have a definition of <code>transpose</code> that makes all the patterns you might wish for work out.</p>
<p>Second, the current definition of <code>transpose</code> does have some nice algebraic properties. One such is this:</p>
<pre><code>length' (transpose xs) = foldMap length' xs
</code></pre>
<p>Here <code>length'</code> is just like <code>length</code>, but returns an unsigned number whose <code>Monoid</code> instance uses <code>mappend = max; mempty = 0</code>. This property forces <code>transpose [[]] = []</code>, because</p>
<pre><code>length' (transpose [[]]) = foldMap length' [[]]
                         = fold [length' []]
                         = fold [0]
                         = 0
</code></pre>
<p>and the only way to get <code>length' foo = 0</code> is <code>foo = []</code>.</p>
<p>(This second argument is very, very similar to the one given in the other answers, though it's stated in very different language!)</p>
","8","Answer"
"78527573","78527079","<p>A more efficient approach both time and space-wise would be to use a list for each index to keep track of the <code>snap_id</code>s at which <code>set</code> is called for the index, so that you can use <a href=""https://docs.python.org/3/library/bisect.html#bisect.bisect"" rel=""nofollow noreferrer""><code>bisect.bisect</code></a> to find the <code>snap_id</code> closest to the given <code>snap_id</code> in a <code>get</code> call, reducing the time complexity of <code>get</code> to <em>O(log n)</em> while maintaining a space complexity of <em>O(n)</em>:</p>
<pre><code>from bisect import bisect

class SnapshotArray:
    def __init__(self, length):
        self.snap_id = 0
        self.snaps = {}
        self.values = {}

    def set(self, index, value):
        if not (snaps := self.snaps.setdefault(index, [])) or snaps[-1] != self.snap_id:
            snaps.append(self.snap_id)
        self.values.setdefault(index, {})[self.snap_id] = value

    def snap(self):
        self.snap_id += 1
        return self.snap_id - 1

    def get(self, index, snap_id):
        if snaps := self.snaps.get(index):
            return self.values[index][bisect(snaps, snap_id) - 1]
        return 0
</code></pre>
<p>Demo: <a href=""https://ideone.com/hgsoes"" rel=""nofollow noreferrer"">https://ideone.com/hgsoes</a></p>
","0","Answer"
"78528039","78527980","<p>Yes, you can first compute the products and create a list:</p>
<pre><code>list1 &lt;- list(
  list(c(1,2,3), c(4,5,6),c(7,8,9)),
  list(c(2,4,6), c(8,10,12),c(14,16,18))
)

list2 &lt;- list(
  list(c(1,0), c(1,2,0),c(1,2,3,0)),
  list(c(1,0), c(1,2,0),c(1,2,3,0))
)

product_list &lt;- list()

for (i in seq_along(list1)) {
  sublist1 &lt;- list1[[i]]
  sublist2 &lt;- list2[[i]]
  product_sublist &lt;- list()
  
  for (j in seq_along(sublist1)) {
    vec1 &lt;- sublist1[[j]]
    vec2 &lt;- sublist2[[j]]
    length_vec2 &lt;- length(vec2)
    if (length(vec1) &gt; length_vec2) {
      vec1 &lt;- vec1[1:length_vec2]
    } else if (length(vec1) &lt; length_vec2) {
      vec2 &lt;- vec2[1:length(vec1)]
    }
    product_vec &lt;- vec1 * vec2
    product_sublist[[j]] &lt;- product_vec
  }
  
  product_list[[i]] &lt;- product_sublist
}

final_output &lt;- list()

for (i in seq_along(product_list)) {
  sublist &lt;- product_list[[i]]
  sum_sublist &lt;- lapply(sublist, function(x) sum(x))
  final_output[[i]] &lt;- sum_sublist
}

print(final_output)
</code></pre>
<p>which gives you</p>
<pre><code>[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[1] 14

[[1]][[3]]
[1] 50


[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 28

[[2]][[3]]
[1] 100
</code></pre>
","1","Answer"
"78528053","78527980","<p>A nested <code>Map()</code> solves this.</p>
<pre class=""lang-r prettyprint-override""><code>Map(\(x1, x2) {
  Map(\(y1, y2) {
    sum(y1[seq_len(length(y2))] * y2, na.rm = TRUE)
  }, x1, x2)
}, list1, list2)
</code></pre>
<pre><code>[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[1] 14

[[1]][[3]]
[1] 50


[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 28

[[2]][[3]]
[1] 100
</code></pre>
","3","Answer"
"78528177","78527980","<p>Again, you can use <code>relist</code> like below</p>
<pre><code>relist(
    mapply(
        \(x, y) sum(x[seq_along(y)] * y, na.rm = TRUE),
        unlist(list1, FALSE),
        unlist(list2, FALSE)
    ),
    rapply(list1, length, how = &quot;replace&quot;)
)
</code></pre>
<p>which gives</p>
<pre><code>[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[1] 14

[[1]][[3]]
[1] 50


[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 28

[[2]][[3]]
[1] 100
</code></pre>
","2","Answer"
"78529152","78529070","<p>That's ... not how slicing works. There are couple of misconceptions here, so we should sort them out one by one.</p>
<p>First of all, when you start with a negative index on a slice, we work from the end of the list. So <code>l[-1:] -&gt; [9]</code> is only ever going to produce a single value unless you also use a negative step. If you <em>do</em> use a negative step, you'll get more values, but it won't wrap around like you want, it'll work backward: <code>l[-1:2:-1] -&gt; [9, 8, 7, 6, 5, 4]</code>.</p>
<p>So that's our first problem. Next, you have to remember that list slices are <em>half intervals</em> (<code>[)</code>) - they include the start index, but not the end index. So even if it did wrap around, <code>l[-1:2]</code> wouldn't include <code>2</code>, it would stop at 1.</p>
<p>With all that said, you might be best served by a deque to rotate the list into the state you want so you can easily slice, and then restore it.  Ex:</p>
<pre><code>from collections import deque

d = deque(range(1,10))

def rolling(d, start, end):
  if start &lt; 0:
    d.rotate(-start)
  print(sum(list(d)[0:end+1])/len(list(d)[0:end+1]))
  if start &lt; 0:
    d.rotate(start)

rolling(d, -1, 2) # 4

print(d) # deque([1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
","1","Answer"
"78529157","78529070","<p>A slice is a block of a list basically, it can skip values but doesn't wrap around the edges. With your <code>list[-1:2]</code>, you're telling to return all values that are both past the 9th index and before the 2nd, which is obviously none of them.</p>
<p>The full list is the same as <code>list[:n1] + list[n1:-n2] + list[-n2:]</code>, and what you're needing is the first and last slice, so you're correct in that you have to do <code>list[:n]</code> and <code>list[-n:]</code> separately.</p>
<p>As to why your <code>MA</code> function is inputting weird behaviour for <code>index=1</code>, it's simply because you're using <code>original_list[-2 + index:]</code> instead of <code>original_list[-2 - index:]</code>. When you gave the input as <code>2</code>, the slice was returning the entire list, hence why you got way more values than expected.</p>
<p>With that fixed:</p>
<pre><code>def MA(index):
    to_be_averaged = original_list[-2 - index:] + original_list[:3 + index]
    print(to_be_averaged)
    print(sum(to_be_averaged) / len(to_be_averaged))

&gt;&gt;&gt; MA(0)
[8, 9, 1, 2, 3]
4.6

&gt;&gt;&gt; MA(1)
[7, 8, 9, 1, 2, 3, 4]
4.857142857142857

&gt;&gt;&gt; MA(2)
[6, 7, 8, 9, 1, 2, 3, 4, 5]
5.0
</code></pre>
","1","Answer"
"78529482","78527980","<p><strong>1) eList/zip</strong> We can use list comprehensions using the eList package.  First define a <code>mult</code> function that multiplies two vectors with the length handling requirement and then run a nested list comprehension.  To get <code>output</code> rather than <code>finaloutput</code> omit <code>sum</code>.</p>
<pre><code>library(eList)

mult &lt;- function(x, y) {
  length(x) &lt;- length(y)
  replace(x, is.na(x), 0) * y
}

finaloutput2 &lt;- List(
  for(a.b in zip(list1, list2))
    for(c.d in zip(a, b))
      sum(mult(c, d))
)

identical(finaloutput2, finaloutput)
## [1] TRUE
</code></pre>
<p><strong>2) eList/indexes</strong> A variation is to use indexes.  <code>multi</code> is from (1).</p>
<pre><code>finaloutput3 &lt;- List(
  for(i in seq_along(list1))
    for(j in seq_along(list1[[i]]))
      sum(mult(list1[[i]][[j]], list2[[i]][[j]]))
)

identical(finaloutput3, finaloutput)
## [1] TRUE
</code></pre>
<p><strong>3) rrapply</strong> The solutions above assume that the inputs are lists of lists of the same shape.  This one only assumes that they are the same shape.  <code>mult</code> is from (1).</p>
<pre><code>library (rrapply)

finaloutput4 &lt;- rrapply(list1, f = \(x, .xpos) sum(mult(x, list2[[.xpos]])))

identical(finaloutput4, finaloutput)
## [1] TRUE
</code></pre>
<h2>Note</h2>
<p>Inputs and expected output taken from question.</p>
<pre><code>list1 &lt;- list(
  list(c(1,2,3), c(4,5,6), c(7,8,9)),
  list(c(2,4,6), c(8,10,12), c(14,16,18))
)

list2 &lt;- list(
  list(c(1,0), c(1,2,0), c(1,2,3,0)),
  list(c(1,0), c(1,2,0), c(1,2,3,0))
)

output &lt;- list(
  list(c(1,0), c(4,10,0), c(7,16,27,0)),
  list(c(2,0), c(8,20,0), c(14,32,54,0))
)

finaloutput &lt;- list(
  list(c(1), c(14), c(50)),
    list(c(2), c(28), c(100))
  )
</code></pre>
<h2>Update</h2>
<p>Use <code>zip</code> to avoid indexes.  Show the index solution as an alternative.</p>
","1","Answer"
"78529496","78529070","<p><code>itertools.cycle</code> doesn't work like i thought, so i've come up with this:</p>
<pre><code>def cycle(arr, start, size):
    print(f'start: {start}, size: {size}')
    start = start % len(arr)
    end = start+size
    cycles = end // len(arr)
    arr=arr*(1+cycles)
    res = arr[start:end]
    print(res)
    print('average:', sum(res)/len(res))
    print()
</code></pre>
<p>works with really out of range indices and samples</p>
<pre><code>start: -15, size: 32
[4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8]
average: 5.15625

start: -11, size: 5
[8, 9, 1, 2, 3]
average: 4.6

start: -1, size: 3
[9, 1, 2]
average: 4.0

start: 0, size: 9
[1, 2, 3, 4, 5, 6, 7, 8, 9]
average: 5.0

start: 0, size: 18
[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
average: 5.0

start: 58, size: 3
[5, 6, 7]
average: 6.0
</code></pre>
","0","Answer"
"78531296","78531289","<p>Here is one solution which use <code>itertools.product</code>:</p>
<pre class=""lang-py prettyprint-override""><code>import itertools
lst1 = [['arg1', 'arg2']]
lst2 = ['arg3', 'arg4']
out = [sub_list + [element] for sub_list, element in itertools.product(lst1, lst2)]
print(out)
</code></pre>
<p>Output:</p>
<pre><code>[['arg1', 'arg2', 'arg3'], ['arg1', 'arg2', 'arg4']]
</code></pre>
","2","Answer"
"78531339","78531289","<ol>
<li><a href=""/q/61945503/4518341"">Avoid <code>list(map(lambda))</code>. Use a list comprehension instead.</a>
<ul>
<li>Then you can also use unpacking to give individual names to the product elements</li>
</ul>
</li>
<li>There's no need to do <code>list(product)</code></li>
<li>Your <code>chain</code> doesn't actually work. Instead you can put the 1D elements in a list and add.</li>
</ol>
<pre><code>&gt;&gt;&gt; [e1 + [e2] for e1, e2 in itertools.product(lst1, lst2)]
[['arg1', 'arg2', 'arg3'], ['arg1', 'arg2', 'arg4']]
</code></pre>
","1","Answer"
"78531372","78531289","<p>You just want</p>
<pre><code>[[*sub, x] for sub in list1 for x in list2]
</code></pre>
","1","Answer"
"78531769","78531734","<p>If you take a look at the structure of the list being returned by <code>tapply()</code>, you'll see that it has a dimension attribute and is a list <strong>and</strong> an array.</p>
<pre><code>str(lst.1)
List of 2
 $ A: int [1:5] 1 2 3 4 5
 $ B: int [1:5] 6 7 8 9 10
 - attr(*, &quot;dim&quot;)= int 2
 - attr(*, &quot;dimnames&quot;)=List of 1
  ..$ : chr [1:2] &quot;A&quot; &quot;B&quot;

is.array(lst.1)
[1] TRUE
</code></pre>
<p>This means when you call <code>as.data.frame()</code> the method being dispatched under the hood is <code>as.data.frame.array()</code> and not <code>as.data.frame.list()</code>.  To get around this you can invoke the method you want to use directly:</p>
<pre><code>as.data.frame.list(lst.1) 
  A  B
1 1  6
2 2  7
3 3  8
4 4  9
5 5 10
</code></pre>
<p>Or use:</p>
<pre><code>list2DF(lst.1)
  A  B
1 1  6
2 2  7
3 3  8
4 4  9
5 5 10
</code></pre>
","4","Answer"
"78531786","78531734","<p>From <code>?tapply</code>:</p>
<blockquote>
<p>If <code>FUN</code> does not return a single atomic value, <code>tapply</code> returns <em>&quot;an <code>array</code> of mode <code>list</code>&quot;</em> whose components are the values of the individual calls to <code>FUN</code>, i.e., the result is <em>&quot;a list with a <code>dim</code> attribute&quot;</em>.</p>
</blockquote>
<p>Therefore, <code>lst.1</code> is actually closer to an <code>array</code>, even though it looks like a <code>list</code>. The following table shows some differences in terms of their <code>class</code>, <code>dim</code>, and <code>dimnames</code>.</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th></th>
<th><code>class()</code></th>
<th><code>dim()</code></th>
<th><code>dimnames()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lst.2</code></td>
<td><code>&quot;list&quot;</code></td>
<td>NULL</td>
<td>NULL</td>
</tr>
<tr>
<td><code>lst.1</code></td>
<td><code>&quot;array&quot;</code></td>
<td>2</td>
<td>[[1]] <br> [1] &quot;A&quot; &quot;B&quot;</td>
</tr>
</tbody>
</table></div>
<p>Two solutions to convert <code>lst.1</code> into a data.frame:</p>
<ol>
<li><p>Explicitly call the <code>as.data.frame</code> method for class <code>'list'</code>:</p>
<pre class=""lang-r prettyprint-override""><code>as.data.frame.list(lst.1)
</code></pre>
</li>
<li><p>Use <code>c()</code> to untie the list-array as an ordinary list:</p>
<pre class=""lang-r prettyprint-override""><code>as.data.frame(c(lst.1))
</code></pre>
</li>
</ol>
<h5>Output</h5>
<pre><code>  A  B
1 1  6
2 2  7
3 3  8
4 4  9
5 5 10
</code></pre>
","4","Answer"
"78536117","78535999","<p>You can sort the point clockwise, <a href=""https://stackoverflow.com/a/41856340/16343464"">here</a> is an implementation. In your case you would have to <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""nofollow noreferrer""><code>zip</code></a> the x and y lists:</p>
<pre><code>origin = [0, 0]
refvec = [0, 1]

x2, y2 = zip(*sorted(zip(xdata, ydata), key=clockwiseangle_and_distance))

plt.plot(x2, y2, 'o-', c='blue')
</code></pre>
<p>Output:</p>
<p><a href=""https://i.sstatic.net/FcDfPmVo.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/FcDfPmVo.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://stackoverflow.com/a/41856340/16343464""><code>clockwiseangle_and_distance</code></a> function by @MSeifert</p>
<pre><code>import math

def clockwiseangle_and_distance(point):
    # Vector between point and the origin: v = p - o
    vector = [point[0]-origin[0], point[1]-origin[1]]
    # Length of vector: ||v||
    lenvector = math.hypot(vector[0], vector[1])
    # If length is zero there is no angle
    if lenvector == 0:
        return -math.pi, 0
    # Normalize vector: v/||v||
    normalized = [vector[0]/lenvector, vector[1]/lenvector]
    dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2
    diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2
    angle = math.atan2(diffprod, dotprod)
    # Negative angles represent counter-clockwise angles so we need to subtract them 
    # from 2*pi (360 degrees)
    if angle &lt; 0:
        return 2*math.pi+angle, lenvector
    # I return first the angle because that's the primary sorting criterium
    # but if two vectors have the same angle then the shorter distance should come first.
    return angle, lenvector
</code></pre>
","4","Answer"
"78536248","78535999","<p>If the xy coordinates have a consistent <em>zig-zag</em> pattern (odd/even), you could do :</p>
<pre><code>def unzigzag(data):
    data = list(data) # just in case
    return data[::2] + data[::-2] + [data[0]]

ax1.plot(*map(unzigzag, [xdata, ydata]), &quot;bo-&quot;)
</code></pre>
<p><em><strong>NB</strong>: This plot is annotated with the physical position (starting from 1) of x/y in their lists.</em></p>
<p><a href=""https://i.sstatic.net/263ms7nM.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/263ms7nM.png"" alt=""enter image description here"" /></a></p>
<p>If not, one option would be to use <a href=""/questions/tagged/shapely"" class=""s-tag post-tag"" title=""show questions tagged &#39;shapely&#39;"" aria-label=""show questions tagged &#39;shapely&#39;"" rel=""tag"" aria-labelledby=""tag-shapely-tooltip-container"" data-tag-menu-origin=""Unknown"">shapely</a> :</p>
<pre><code>from shapely import MultiPoint
from shapely.geometry.polygon import orient

def unzigzag(x, y, ori=-1): # -1: clock-wise
    p = MultiPoint(list(zip(x, y))).convex_hull
    return list(orient(p, ori).boundary.coords)

ax2.plot(*zip(*unzigzag(xdata, ydata)), &quot;-bo&quot;) # the ori has no effect
</code></pre>
<p>Animation to highlight the orientation :</p>
<p><a href=""https://i.sstatic.net/cWn409og.gif"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/cWn409og.gif"" alt=""enter image description here"" /></a></p>
","4","Answer"
"78536825","78536809","<p>You can use <code>unique()</code> and save those in a <code>dict()</code> (<code>fdf</code>):</p>
<pre><code>import pandas as pd


data = {
    'name': ['a', 'a', 'b', 'b'],
    'value': [10, 5, 4, 8]
}
df = pd.DataFrame(data)

fdf = {}
for i in df['name'].unique():
    fdf[f'df_{i}'] = df[df['name'] == i]

df_a, df_b = fdf['df_a'], fdf['df_b']

print(&quot;df_a:&quot;)
print(df_a)
print(&quot;\ndf_b:&quot;)
print(df_b)

</code></pre>
<h3>Prints</h3>
<pre><code>
df_a:
  name  value
0    a     10
1    a      5

df_b:
  name  value
2    b      4
3    b      8
</code></pre>
","1","Answer"
"78536938","78536809","<p><strong>Code</strong></p>
<p>Creating variables dynamically is not recommended in Python.</p>
<p>Create dict for that purpose.</p>
<ol>
<li><p>dictionary comprehension</p>
<pre><code> dict_grouped = {k: d for k, d in df.groupby('name')}
</code></pre>
<p>dict_grouped:</p>
<pre><code> {'a':   name  value
  0    a     10
  1    a      5,
  'b':   name  value
  2    b      4
  3    b      8}
</code></pre>
</li>
</ol>
<br>
<ol start=""2"">
<li><p><code>dict</code> func</p>
<p>Alternatively, you can also use the following code instead of dictionary comprehension.</p>
<pre><code> dict_grouped = dict(tuple(df.groupby('name')))
</code></pre>
</li>
</ol>
<br>
<hr />
<p>If you absolutely must create it dynamically as a variable, you can use the code below, but i don't recommend it.</p>
<pre><code>for k, d in df.groupby('name'):
    globals()[f'df_{k}'] = d
</code></pre>
<p>df_a:</p>
<pre><code>    name    value
0   a       10
1   a       5
</code></pre>
","0","Answer"
"78539207","78535547","<p>Something like this will check every column of a row for the word para</p>
<p>each List.Contains(Record.FieldValues(_),&quot;para&quot;)</p>
<p>If you want to find the column name in each row that contains <strong>aaa</strong> then use</p>
<pre><code>#&quot;Added Custom&quot; = Table.AddColumn(Source, &quot;Custom&quot;, each  Table.ColumnNames(Source){List.PositionOf(List.Transform(Record.FieldValues(_),each if Text.Contains(_,&quot;aaa&quot;) then _ else null),&quot;aaa&quot;)})
</code></pre>
<p>and later refer to the column as Record.Field(_,&quot;ColumnNameHere&quot;)</p>
","0","Answer"
"78540098","78540078","<ul>
<li><code>ranks</code> does not exist. Use <code>ranks</code> as a <code>list()</code>.</li>
<li>Append <code>card[0]</code> instead of <code>cards[i][0]</code> to <code>ranks</code>:</li>
</ul>
<pre><code>def check_pair(cards):
    ranks = []
    for card in cards:
        ranks.append(card[0])
    pairs = {k: ranks.count(k) for k in ranks}
    return pairs

community_cards = [(1, 'd'), (2, 'h'), (1, 'h')]

print(f'Checking pair: {check_pair(community_cards)}')

</code></pre>
<ul>
<li>If you have the <code>ranks</code>, then pass it to the function:</li>
</ul>
<pre><code>def check_pair(cards, ranks):
    ...
</code></pre>
","1","Answer"
"78540120","78540078","<p>When you iterate over list, you iterate over objects, not indexes.
So when you have</p>
<pre><code>x = ['el_1', 'el_2', 'el_3']
</code></pre>
<p>and you try to iterate</p>
<pre><code>for i in x:
    print(i)
</code></pre>
<p>you will see</p>
<pre><code>el_1
el_2
el_2
</code></pre>
<p>So in your case when you iterate over cards</p>
<pre><code>for i in cards:
</code></pre>
<p>i is already a card, not index. You just need to use</p>
<pre><code>ranks.append(i[0])
</code></pre>
","1","Answer"
"78540180","78540078","<p>Your code is crashing because you didn't declare the ranks variable. To run your code declare ranks as a list.</p>
<p>By the way your code can be more improved on the basis of time complexity as count(k) time complexity is O(n) and its for every element in ranks it is finally a O(n^2).</p>
<pre><code>def check_pair(cards):
    pairs = {}

    for card in cards:
        if card[0] not in pairs:
            pairs[card[0]] = 1
        else:
            pairs[card[0]] += 1

    return pairs


community_cards = [(1, 'd'), (2, 'h'), (1, 'h')]

print(f'Checking pair: {check_pair(community_cards)}')
</code></pre>
<p>This code doesn't need extra space also.</p>
","1","Answer"
"78540809","78535547","<p>Thank you very much, I have modified your example to fit my efforts.</p>
<pre><code>let
   Quelle = Excel.CurrentWorkbook(){[Name=&quot;Tabelle1&quot;]}[Content],
   #&quot;Gefilterte Zeilen&quot; = Table.SelectRows(Quelle, each List.ContainsAny(Record.FieldValues(_),{&quot;para&quot;,&quot;parb&quot;,&quot;parc&quot;,&quot;pard&quot;}))
in
   #&quot;Gefilterte Zeilen&quot;
</code></pre>
<p>But it would be really nice to know how I can convert this List item to table column reference. I hope this is not impolite.</p>
","0","Answer"
"78542996","78529070","<p>Thanks for the answers and comments, it really helped me to undertand the issue!</p>
<p>However, none of the addressed to the main question of how to do the moving average as it was presented. I ended up doing little tricks and a change of how to create the new list to be averaged (instead of slicing, list comprehension).</p>
<pre><code>import math
import numpy as np

def MA(index, sample):
    N = len(original_list)
    neighbors = math.floor(sample/2)
    desired_range = (np.array(range(sample)) - neighbors + index) % N
    
    to_be_averaged = [original_list[i] for i in desired_range]
    print(to_be_averaged)
    return sum(to_be_averaged)/sample
</code></pre>
<p>I try to explain line by line:</p>
<pre><code>N = len(original_list)
</code></pre>
<p>Gets the total lenght of the original list. In this case could be done only once but in my application I might use this function for different lists so I also input the list and this variable N changes.</p>
<pre><code>neighbors = math.floor(sample/2)
</code></pre>
<p>This allows me to know how many up and down samples I'll be taking, remember that for this type of calculations tend to use odd numbers so your index is in the center. <code>math.floor</code> just rounds to the lowest integral if nothing else is passed.</p>
<pre><code>desired_range = (np.array(range(sample)) - neighbors + index) % N
</code></pre>
<p>There is the funny part, here I try to get the range that I want but in indices to be used after. I create an <code>np.array</code> so I can perform addition and substraction operations to a list, which I create using <code>range</code>, the size of the range is the sample that I want and I adjust it to be previous and after samples just slicing it by substracting the neighbors, then I add the desired index so like that I have the indeces of the positions of interest, however it can happend that we add too much and get out of range of the list, that's why using the mod <code>% N</code> wraps around the list size and anything above N starts from the beginning of the list.</p>
<p>The rest is basically a list comprehension along to the desired range which we already created and suming and dividing by the sample size.</p>
<p>Hope it helps!</p>
<pre><code>original_list = [*range(5)]

# Tests

[print(MA(i,3)) for i in range((len(original_list)))]
# [4, 0, 1]
# 1.6666666666666667
# [0, 1, 2]
# 1.0
# [1, 2, 3]
# 2.0
# [2, 3, 4]
# 3.0
# [3, 4, 0]
# 2.3333333333333335
[print(MA(i,5)) for i in range((len(original_list)))]
# [3, 4, 0, 1, 2]
# 2.0
# [4, 0, 1, 2, 3]
# 2.0
# [0, 1, 2, 3, 4]
# 2.0
# [1, 2, 3, 4, 0]
# 2.0
# [2, 3, 4, 0, 1]
# 2.0
</code></pre>
","0","Answer"
"78547076","78547042","<p>use <code>late</code> to declare a variable that will be initialized at a later time</p>
<pre><code>List numlist = [1,2,3,4,5];
late double size = numlist.length.toDouble();
</code></pre>
<p>in this case, <code>size</code> should be initialized after <code>numlist</code></p>
","0","Answer"
"78547123","78547042","<p>Use <code>Getter</code>: Dynamically computes the size whenever it is accessed, ensuring it is always up-to-date with the current length of the list.</p>
<p>For example:</p>
<pre><code>  List&lt;int&gt; numlist = [1, 2, 3, 4, 5];

  double get size {
    return numlist.length.toDouble();
  }
  
  void test() {
    final result = size;
  }
</code></pre>
","0","Answer"
"78548425","78547042","<p>From the error message, I seems that the variables you are trying to define are instance members of a class. In that case, you could also use constructor initializers:</p>
<pre><code>class MyClass {
  MyClass(this.list)
      : length = list.length.toDouble();
  final List&lt;num&gt; list;
  final double length;
}
</code></pre>
<p>The other options are:</p>
<ul>
<li>declaring a getter like mikeyyang suggested,</li>
<li>marking <code>length</code> as a <code>late</code> variable and initializing it where you define it as Zhentao suggested.</li>
</ul>
","0","Answer"
"78550316","78550262","<p>A simple list comprehension does it:</p>
<pre><code>list_of_lists = [[x,y] for (x,y) in list_of_tuples]
</code></pre>
<p>as in the following:</p>
<pre><code>list_of_tuples = [(123, 456), (789, 101), (321, 654), (98, 765), (432, 213), (856, 987)]  
list_of_lists = [[x,y] for (x,y) in list_of_tuples]
list_of_lists                                      
[[123, 456], [789, 101], [321, 654], [98, 765], [432, 213], [856, 987]]
</code></pre>
<p>Note that the number <code>098</code> is not valid as Python sees the leading zero as specifying that this is an octal number, but the digits 8 and 9 do not exist in octal numbers.</p>
","0","Answer"
"78550318","78550262","<p>When I tested the <code>[list(elem) for elem in element_list]</code> it worked, I think you just referenced the wrong list.</p>
<pre><code>list_of_tuples = [(123, 456), (789, 101), (321, 654), (98, 765), (432, 213), (856, 987)]
  
list_of_lists = [list(item) for item in list_of_tuples]
print(list_of_lists)
</code></pre>
<p>This ended up printing <code>[ [123, 456], [789, 101], [321, 654], [098, 765], [432, 213], [856, 987] ]</code></p>
<p>For each item in the list, such as (123, 456), can be converted into a list. Instead you need to change each instance of these groups into a list.</p>
<p>I will note that when I was playing around the 0 in front of the 98 did cause an issue. I got <code>SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers</code></p>
<p>Adding on from OldBoy's answer: the number 098 is not valid as Python sees the leading zero as specifying that this is an octal number, but the digits 8 and 9 do not exist in octal numbers.</p>
","1","Answer"
"78553000","78552932","<p>Use <a href=""https://docs.python.org/3/library/itertools.html#itertools.pairwise"" rel=""nofollow noreferrer""><code>itertools.pairwise</code></a> to compare the successive values:</p>
<pre><code>def cons(L):
    from itertools import pairwise
    return all(a==b-1 for a,b in pairwise(L))

df['cons'] = df['a'].apply(cons)
</code></pre>
<p>Output:</p>
<pre><code>              a   cons
0  [10, 11, 12]   True
1  [10, 11, 12]   True
2  [10, 11, 12]   True
3  [10, 11, 13]  False
</code></pre>
","1","Answer"
"78553024","78552932","<p>Use list comprehension with test if sorted values are same like generated list by minimal and maximal values of lists:</p>
<pre><code>df['cons'] = [sorted(l) == list(range(min(l), max(l)+1)) for l in df['a']]
#alternative
df['cons'] = df['a'].apply(lambda l: sorted(l) == list(range(min(l), max(l)+1)))
</code></pre>
<p>Another idea is use <code>np.diff</code> for test if difference is <code>1</code> for all values:</p>
<pre><code>df['cons'] = [np.all(np.diff(sorted(l)) == 1) for l in df['a']]
#alternative
df['cons'] = df['a'].apply(lambda l: np.all(np.diff(sorted(l)) == 1))
</code></pre>
<p>If want use your solution:</p>
<pre><code>def cons(L):

    return all(n-i==L[0] for i,n in enumerate(L))

df['cons'] = df['a'].apply(cons)
#alternative
df['cons'] = [all(n-i==L[0] for i,n in enumerate(L)) for L in df['a']]
</code></pre>
<hr />
<pre><code>print (df)
              a   cons
0        [0, 2]  False
1   [9, 11, 12]  False
2     [0, 1, 2]   True
3  [10, 11, 13]  False
</code></pre>
","1","Answer"
"78558550","78558198","<p>public actual fun  listOf(element: T): List = java.util.Collections.singletonList(element)</p>
","-4","Answer"
"78558584","78558198","<p>Unknown, and irrelevant.</p>
<p>The documentation promises only that you get a read-only <code>List</code>. The programmers implementing that method are free to use any class they want as long as it meets the requirements of a read-only <code>List</code>. Their choice of class may vary between versions of their implementation. Their choice of class may even vary at runtime, choosing among various classes depending on the particular situation.</p>
<p>If you value certain behaviors of a certain <code>List</code> implementation, then use that specific implementation rather than <code>listOf</code>. You cannot expect anything more of <code>listOf</code> than is promised by its documentation.</p>
<p>To satisfy curiosity, call the override of <a href=""https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/lang/Object.html#getClass()"" rel=""nofollow noreferrer""><code>Object#getClass</code></a>. Or look at the source code for an implementation. The implementation at the <a href=""https://en.wikipedia.org/wiki/OpenJDK"" rel=""nofollow noreferrer""><em>OpenJDK</em></a> project is open source. But beware: other versions, and other implementations , may vary.</p>
","4","Answer"
"78559833","78559821","<p>Sets are unordered, so <code>list(set(...))</code> loses the ordering of <code>...</code>.</p>
<p>You'll want <a href=""https://docs.python.org/3.12/library/functions.html#sorted"" rel=""nofollow noreferrer""><code>sorted(set(...), reverse=True)</code></a> to turn the set of unique values into a reverse-sorted list.</p>
","2","Answer"
"78559834","78559821","<p>Using <code>set</code> does not preserve the order of the input list.  You need to sort the set.</p>
<pre class=""lang-py prettyprint-override""><code>unique_list = sorted(set(arr1))
print(&quot;Second element after making list unique:&quot;, unique_list[-2])
</code></pre>
","3","Answer"
"78560260","78560166","<p>This worked for me:</p>
<pre><code>def find_ids(row):
    numbers = row[&quot;Number&quot;]
    matches = df1.loc[df1[&quot;Number&quot;].isin(numbers)]
    return matches[&quot;Id&quot;].tolist() or float('NaN')

df2[&quot;Ids&quot;] = df2.apply(find_ids, axis=1)
</code></pre>
","0","Answer"
"78560305","78560166","<p>You can use a custom function and indexing:</p>
<pre><code>def mapper(lst, ref):
    idx = [x for x in lst.strip('[]').split(', ') if x in ref.index]
    return ref.loc[idx].tolist() if idx else None

df2['Ids'] = df2['Number'].apply(mapper, ref=df1.set_index('Number')['Id'])
</code></pre>
<p>If your inputs in <code>df2</code> are <strong>lists</strong> (not strings), simplify to:</p>
<pre><code>def mapper(lst, ref):
    idx = [x for x in lst if x in ref.index]
    return ref.loc[idx].tolist() if idx else None
</code></pre>
<p>Variant using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Index.intersection.html"" rel=""nofollow noreferrer""><code>Index.intersection</code></a> (suggested by @wjandrea):</p>
<pre><code>def mapper(lst, ref):
    idx = ref.index.intersection(lst)
    return None if idx.empty else ref.loc[idx].tolist()

df2['Ids'] = df2['Number'].apply(mapper, ref=df1.set_index('Number')['Id'])
</code></pre>
<p>Output:</p>
<pre><code>    Client    Number              Ids
0     John  [A1, B1]  [101, 103, 104]
1      Mia      [Z4]             None
2  Claudia      [A2]            [102]
</code></pre>
","1","Answer"
"78560761","78560166","<p>First, I recommend using a list of strings in the Number column of df2, instead of a single string with brackets and commas. If this isn't possible, see the workaround at the end. The initial dataframes would look like this:</p>
<pre><code>import pandas as pd

df1 = pd.DataFrame(
    {
        'Id': {0: 101, 1: 102, 2: 103, 3: 104},
        'Number': {0: 'A1', 1: 'A2', 2: 'B1', 3: 'B1'},
    }
)
df2 = pd.DataFrame(
    {
        'Client': {0: 'John', 1: 'Mia', 2: 'Claudia'},
        'Number': {0: '[A1, B1]', 1: '[Z4]', 2: '[A2]'},
    }
)
</code></pre>
<p>Now we can create a column with empty lists and fill them with the Ids.
Note: I'm not claiming this is the fastest or most human-readable solution. It's just the first method I found.</p>
<pre><code>df2['Ids'] = df2.shape[0] * [[]]

for row, number_lst in df2['Number'].items():
    for number in number_lst:
        df2['Ids'].iloc[row] = (
            df2['Ids'].iloc[row] + df1[df1['Number'] == number]['Id'].to_list()
        )
</code></pre>
<p>The result would be this:</p>
<pre><code>    Client  Number  Ids
0   John    [A1, B1]    [101, 103, 104]
1   Mia     [Z4]        []
2   Claudia [A2]        [102]
</code></pre>
<p>Please note that Mia's entry displays an empty list instead of NaN as per your request. You can resolve this by including the following line at the end:</p>
<pre><code>import numpy as np

df2.loc[df2['Ids'].isin([[]]), 'Ids'] = np.nan
</code></pre>
<p>Alternative solution for manipulating df2 with a single string containing brackets and commas instead of a list of strings.</p>
<pre><code>df2 = pd.DataFrame(
    {
        'Client': {0: 'John', 1: 'Mia', 2: 'Claudia'},
        'Number': {0: '[A1, B1]', 1: '[Z4]', 2: '[A2]'},
    }
)

for row, number_lst in df2['Number'].items():
    df2['Number'].iloc[row] = number_lst.strip('[]').replace(&quot; &quot;, &quot;&quot;).split(',')
</code></pre>
<p>Finally, here is the full code:</p>
<pre><code>import pandas as pd
import numpy as np

# Original dataframes
df1 = pd.DataFrame(
    {
        'Id': {0: 101, 1: 102, 2: 103, 3: 104},
        'Number': {0: 'A1', 1: 'A2', 2: 'B1', 3: 'B1'},
    }
)
df2 = pd.DataFrame(
    {
        'Client': {0: 'John', 1: 'Mia', 2: 'Claudia'},
        'Number': {0: '[A1, B1]', 1: '[Z4]', 2: '[A2]'},
    }
)

# # Uncomment this to create the second dataframe as I suggested:
# df2 = pd.DataFrame(
#     {
#         'Client': {0: 'John', 1: 'Mia', 2: 'Claudia'},
#         'Number': {0: ['A1', 'B1'], 1: ['Z4'], 2: ['A2']},
#     }
# )

# Coment/remove this if you used the second creation sugestion.
for row, number_lst in df2['Number'].items():
    df2['Number'].iloc[row] = number_lst.strip('[]').replace(&quot; &quot;, &quot;&quot;).split(',')

df2['Ids'] = df2.shape[0] * [[]]

for row, number_lst in df2['Number'].items():
    for number in number_lst:
        df2['Ids'].iloc[row] = (
            df2['Ids'].iloc[row] + df1[df1['Number'] == number]['Id'].to_list()
        )

# Coment/remove this if than NaN aren't important, use empty lists instead.
df2.loc[df2['Ids'].isin([[]]), 'Ids'] = np.nan
</code></pre>
","0","Answer"
"78561306","78558198","<p>The exact implementation of <code>listOf()</code> has not been exposed and It is not mentioned directly in the official documentation.</p>
<p>It doesn't return a specific implementation(In contrast to the specification that <code>mutableListOf()</code> returns an ArrayList). <code>listOf()</code> focuses on performance and returns an efficient implementation. That's why it is Immutable.</p>
<p>The official documentation mentions that MutableList can be considered a resizable array in Kotlin. Therefore, I think we can consider <code>listOf()</code> as returning an optimized array. You can refer to the item about <strong>List</strong> in the <a href=""https://kotlinlang.org/docs/collections-overview.html"" rel=""nofollow noreferrer"">Kotlin collections documentation</a>.</p>
","2","Answer"
"78563187","78535547","<p>You'd better organize your filter table something like this:</p>
<p><a href=""https://i.sstatic.net/AJEn0K68.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/AJEn0K68.png"" alt=""Filter table"" /></a></p>
<p>Suppose you've called this table as Tabelle1.</p>
<p>Then you can use following code to filter your original table Quelle:</p>
<pre><code>FilterValues = Table.ToRecords(
    Table.SelectRows(
        Excel.CurrentWorkbook(){[Name=&quot;Tabelle1&quot;]}[Content],
        each not([Column] is null)
    )
),
#&quot;Gefilterte Zeilen1&quot; = Table.SelectRows(Quelle, each List.Accumulate(FilterValues, true, (state, current) =&gt; state and (try Record.Field(_, current[Column]) = current[Value] otherwise false)))
</code></pre>
<p>This will filter your table to select only records where all columns having names listed in table Tabelle1 have stated values.</p>
<p>If all values in filter are non-empty text values you can alsj apply this code:</p>
<pre><code>Filter = List.Accumulate(FilterValues, &quot;true&quot;, (state, current) =&gt; (state &amp; &quot; and (rec[#&quot;&quot;&quot; &amp; current[Column] &amp; &quot;&quot;&quot;] = &quot; &amp; &quot;&quot;&quot;&quot; &amp; current[Value] &amp;&quot;&quot;&quot;)&quot;) ) ,
#&quot;Gefilterte Zeilen1&quot; = Table.SelectRows(Quelle, each Expression.Evaluate(Filter, [rec = _]))
</code></pre>
","0","Answer"
"78565220","78565203","<p>It's best to use <code>list()</code>:</p>
<pre><code>step = 0.05
sublist = [round(i * step, 2) for i in range(int(25 / step) + 1)]
res = [sublist.copy() for _ in range(9)]
print(res)
</code></pre>
<p>You can use <code>tolist()</code> with <code>deepcopy()</code>:</p>
<pre><code>import numpy as np
import copy

sublist = np.arange(0, 25.05, 0.05).tolist()
res = [copy.deepcopy(sublist) for _ in range(9)]

print(res)
</code></pre>
<h3>Note</h3>
<ul>
<li>This is an unnecessary way to do it, though. Just use <code>list()</code>.</li>
</ul>
","-1","Answer"
"78565787","78501833","<p>Just use regx. It will be easy for you.</p>
<pre><code>import re

def split_alphanumeric(lst):
    result = {}
    for item in lst:
        # Use regex to separate alphabetic and numeric parts
        match = re.match(r&quot;([a-zA-Z]+)(\d+)&quot;, item)
        if match:
            alpha_part = match.group(1)
            numeric_part = match.group(2)
            result[alpha_part] = numeric_part
    return result

# Example usage
lst = ['abc1234', 'appa4567', 'kkakaka9876']
split_dict = split_alphanumeric(lst)
print(split_dict)
</code></pre>
","1","Answer"
"78566256","78565203","<p>You can create such a list of lists wihtout numpy and converting ranges to and from lists.</p>
<p>Just use list concatenations to add elements to the lists:</p>
<p>The example below creates a smaller example:</p>
<pre><code>[[x/20 for x in range(int(1.05*20))] for _ in range(3)]
</code></pre>
<p>The output is</p>
<pre><code>[[0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0], [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0], [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]]
</code></pre>
<p>So, to generate the one you asked for in the original post would be:</p>
<pre><code>[[x/20 for x in range(int(25.05*20))] for _ in range(9)]
</code></pre>
","-1","Answer"
"78574082","78573933","<p>You want to have a Map of <code>String : List</code> and then you can retrieve the desired List.</p>
<pre class=""lang-java prettyprint-override""><code>// Making the map and adding items to it
Map&lt;String, List&lt;String&gt;&gt; listMap = new HashMap&lt;&gt;();

List&lt;String&gt; A = new ArrayList&lt;&gt;();
List&lt;String&gt; B = new ArrayList&lt;&gt;();

listMap.put(&quot;A&quot;, A);
listMap.put(&quot;B&quot;, B);

// Retrieving wanted list from map
String userInput = in.nextLine();
List&lt;String&gt; userList = map.get(userInput);

doSomething(userList);
</code></pre>
","1","Answer"
"78575926","78573933","<p>Just another concept utilizing User Input Validation. Read the comments in code:</p>
<pre><code>/* Open a keyboard input stream. The JVM will auto-close 
   this stream when the application closes:        */
final Scanner userInput = new Scanner(System.in);
// OS newline character sequence.
final String NL = System.lineSeparator();

// Using `LinkedHashMap` so to ensure insertion order:
java.util.LinkedHashMap&lt;String, java.util.List&lt;String&gt;&gt; listMap = new java.util.LinkedHashMap&lt;&gt;();

/* Create a few Lists for testing. Create as many Lists as you
   like but be sure to apply them to the LinkedHashMap:      */
List&lt;String&gt; listA = Arrays.asList(&quot;List A: Value1&quot;, &quot;List A: Value2&quot;);
List&lt;String&gt; listB = Arrays.asList(&quot;List B: Value1&quot;, &quot;List B: Value2&quot;);
List&lt;String&gt; listC = Arrays.asList(&quot;List C: Value1&quot;, &quot;List C: Value2&quot;);

// Add Lists to LinkedHashMap:
listMap.put(&quot;A&quot;, listA);
listMap.put(&quot;B&quot;, listB);
listMap.put(&quot;C&quot;, listC);

// Create a `Set` containing all the LinkedHashMap keys: 
java.util.Set&lt;String&gt; keys = listMap.keySet();

/* Build the menu based on what is in the LinkedHashMap for keys.
   The menu selection will not be letter case sensitive:     */
StringBuilder menu = new StringBuilder(&quot;&quot;);
// Prompt Info:
menu.append(&quot;Select the desired List to work with:&quot;).append(NL);

// Used for building validation regex. 
StringBuilder regex = new StringBuilder(&quot;[&quot;); 
    
// Iterate through the `Set` of keys:
for (String key : keys) {
    regex.append(key);  // Add to regex:
    menu.append(&quot;  &quot;).append(key).append(&quot;) List: &quot;).append(key).append(NL); // Add to menu:
}
regex.append(&quot;]&quot;);  // Add to regex (now complete):
menu.append(&quot;  Q) Quit!&quot;).append(NL);   // Apply a quit option to menu:
menu.append(&quot;Your Choice? -&gt; &quot;);        // Prompt (menu now complete):

// Retrieving desired list from User (with validation):
String choice = &quot;&quot;;
while (choice.isEmpty()) {
    // Display menu:
    System.out.print(menu.toString());
    /* Get User Input. Also trim off any possible leading or trailing
       whitespaces, tabs, etc and, convert the input to uppercase in
       case the supplied the menu choice in lower letter case:     */
    choice = userInput.nextLine().trim().toUpperCase();

    // Did User choose Quit?
    if (choice.equalsIgnoreCase(&quot;q&quot;)) {
        System.out.println(&quot;Quiting! - Bye Bye&quot;);
        return;
    }
    // Otherwise, validate User's menu choice input:
    // Is a valid menu choice entered by User?
    else if (!choice.matches(regex.toString())) {
        // NO...Inform User and allow to try again:
        System.out.println(&quot;Invalid menu choice (&quot; + choice + &quot;)! Try again...&quot; + LS);
        choice = &quot;&quot;;    // Empty `choice` to ensure re-loop:
    }
}

// Menu choice is valid...retrieve List. 
List&lt;String&gt; usersDesiredList = listMap.get(choice);

// Do something with `usersDesiredList`.
// Display selected List:
System.out.println(usersDesiredList);
</code></pre>
","0","Answer"
"78582488","78582450","<p>You have to loop over all phrase until you find a match. An efficient option would be to use sets (<a href=""https://docs.python.org/3/library/stdtypes.html#frozenset.issubset"" rel=""nofollow noreferrer""><code>set.issubset</code></a>) combined with <a href=""https://docs.python.org/3/library/functions.html#any"" rel=""nofollow noreferrer""><code>any</code></a>:</p>
<pre><code># convert the phrases to set
sets = [set(s.split()) for s in phrases]
# [{'screenshot', 'mac'}, {'until', 'christmas', 'days'},
#  {'google', 'pixel', '7a'}]

# for each string, check if one of the sets is a subset
# if a match is found, return True immediately
df['Match'] = [any(S.issubset(lst) for S in sets)
               for lst in map(str.split, df['Search'])]
</code></pre>
<p>Output:</p>
<pre><code>                                           Search  Random_Column  Match
0                        how to screenshot on mac              0   True
1                         how to take screenshot?              0  False
2               how to take screenshot on windows              0  False
3                               when is christmas              0  False
4                   how many days until christmas              0   True
5                  how many weeks until christmas              0  False
6              how much is the new google pixel 8              0  False
7       which google pixel versions are available              0  False
8  how do I do google search on my pixel phone 7a              0   True
</code></pre>
","2","Answer"
"78582501","78582450","<p>You can use <code>set()</code> and define a <code>_match</code> function:</p>
<pre><code>def _match(x, sets):
    s = set(x.lower().split())
    for ps in sets:
        if ps.issubset(s):
            return True
    return False
</code></pre>
<hr />
<h4>Pre-compute the sets initially, for efficiency (see @mozway comments below)</h4>
<pre><code>sets = [set(phrase.lower().split()) for phrase in phrases]

</code></pre>
<p>Then, <code>apply()</code> the <code>_match</code> method, as a lambda:</p>
<pre><code>df['Match'] = df['Search'].apply(lambda x: _match(x, sets))

</code></pre>
<h3>Code</h3>
<pre><code>import pandas as pd
import numpy as np

def _match(x, sets):
    s = set(x.lower().split())
    for ps in sets:
        if ps.issubset(s):
            return True
    return False

text = [('how to screenshot on mac', 0),
        ('how to take screenshot?', 0),
        ('how to take screenshot on windows', 0),
        ('when is christmas', 0),
        ('how many days until christmas', 0),
        ('how many weeks until christmas', 0),
        ('how much is the new google pixel 8', 0),
        ('which google pixel versions are available', 0),
        ('how do I do google search on my pixel phone 7a', 0)]
labels = ['Search', 'Random_Column']
df = pd.DataFrame.from_records(text, columns=labels)

phrases = ['mac screenshot', 'days until christmas', 'google pixel 7a']
sets = [set(phrase.lower().split()) for phrase in phrases]
df['Match'] = df['Search'].apply(lambda x: _match(x, sets))

print(df)

</code></pre>
<h3>Prints</h3>
<pre><code>                                           Search  Random_Column  Match
0                        how to screenshot on mac              0   True
1                         how to take screenshot?              0  False
2               how to take screenshot on windows              0  False
3                               when is christmas              0  False
4                   how many days until christmas              0   True
5                  how many weeks until christmas              0  False
6              how much is the new google pixel 8              0  False
7       which google pixel versions are available              0  False
8  how do I do google search on my pixel phone 7a              0   True

</code></pre>
<h3>Note</h3>
<p>If you wanted to make any changes, you can simply modify <code>_match()</code>. It is easy to maintain.</p>
","2","Answer"
"78589665","78589637","<p>We can use <code>lapply</code> to apply an anonymous function over <code>vector_list</code>. <code>\(x) ...</code> (introduced in R 4.1.0 from May 2021) is the equivalent of <code>function(x) {...}</code>, and here that function is essentially &quot;take <code>x</code> and only output those elements not in <code>remove_list</code>.&quot;</p>
<pre><code>lapply(vector_list, \(x) x[!x %in% remove_list])
</code></pre>
<p>result</p>
<pre><code>[[1]]
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;

[[2]]
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;

[[3]]
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;
</code></pre>
","0","Answer"
"78589840","78589637","<p>Apparently you want the <code>intersect</code> of the column names of all datasets. In your simplified example, put the column names in a list,</p>
<pre><code>&gt; (cols_lst &lt;- mget(ls(pattern='cols_import_\\d+')))
$cols_import_1
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;f&quot;

$cols_import_2
[1] &quot;a&quot;  &quot;b&quot;  &quot;c&quot;  &quot;aa&quot; &quot;cc&quot; &quot;f&quot; 

$cols_import_3
[1] &quot;a&quot;  &quot;b&quot;  &quot;c&quot;  &quot;bb&quot; &quot;e&quot;  &quot;f&quot; 
</code></pre>
<p>use <code>Reduce</code> to get the <code>intersect</code> in column names, and</p>
<pre><code>&gt; (cols_int &lt;- Reduce(intersect, cols_lst))
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;
</code></pre>
<p>again <code>intersect</code> the individual column names.</p>
<pre><code>&gt; lapply(cols_lst, intersect, cols_int)
$cols_import_1
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;

$cols_import_2
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;

$cols_import_3
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;
</code></pre>
<p>Since I assume, your example is oversimplified, you may import your data in a list, which I resemble here,</p>
<pre><code>&gt; (imp_lst &lt;- mget(ls(pattern='^import_\\d+')))
$import_1
   a  b  c  d  f
1 NA NA NA NA NA
2 NA NA NA NA NA
3 NA NA NA NA NA

$import_2
   a  b  c aa cc  f
1 NA NA NA NA NA NA
2 NA NA NA NA NA NA
3 NA NA NA NA NA NA

$import_3
   a  b  c bb  e  f
1 NA NA NA NA NA NA
2 NA NA NA NA NA NA
3 NA NA NA NA NA NA
</code></pre>
<p>determine the <code>intersect</code> of the column <code>names</code>,</p>
<pre><code>&gt; (icols_int &lt;- Reduce(intersect, sapply(imp_lst, names)))
[1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;f&quot;
</code></pre>
<p>and subset the data frames using the bracket function <code>`[`()</code>.</p>
<pre><code>&gt; lapply(imp_lst, `[`, icols_int)
$import_1
   a  b  c  f
1 NA NA NA NA
2 NA NA NA NA
3 NA NA NA NA

$import_2
   a  b  c  f
1 NA NA NA NA
2 NA NA NA NA
3 NA NA NA NA

$import_3
   a  b  c  f
1 NA NA NA NA
2 NA NA NA NA
3 NA NA NA NA
</code></pre>
<hr />
<p><em>Data:</em></p>
<pre><code>cols_import_1 &lt;- c('a', 'b', 'c', 'd', 'f') 
cols_import_2 &lt;- c('a', 'b', 'c', 'aa', 'cc', 'f')
cols_import_3 &lt;- c('a', 'b', 'c', 'bb', 'e', 'f')

import_1 &lt;- as.data.frame(
  array(NA, c(3, 5), dimnames=list(NULL, c('a', 'b', 'c', 'd', 'f')))
)
import_2 &lt;- as.data.frame(
  array(NA, c(3, 6), dimnames=list(NULL, c('a', 'b', 'c', 'aa', 'cc', 'f')))
)
import_3 &lt;- as.data.frame(
  array(NA, c(3, 6), dimnames=list(NULL, c('a', 'b', 'c', 'bb', 'e', 'f')))
)
</code></pre>
","0","Answer"
"78594216","78594212","<p>You can read all lines to a list, then sort the lines according the first integer and as a last step flatten the list with sorted lines:</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;test.txt&quot;, &quot;r&quot;) as f_in:
    lines = [i for i in map(str.strip, f_in) if i]

out = [
    word
    for line in sorted(lines, key=lambda x: int(x.split()[0]))
    for word in line.split()
]

print(out)
</code></pre>
<p>Prints:</p>
<pre><code>['1', 'I', '2', 'dogs', '3', 'love', '4', 'cats', '5', 'you', '6', 'computers']
</code></pre>
","1","Answer"
"78594413","78594212","<p>The key for sorting is first integer part of each line.</p>
<pre class=""lang-py prettyprint-override""><code>text = &quot;&quot;&quot;
3 love
6 computers
2 dogs
4 cats
1 I
5 you&quot;&quot;&quot;.strip()

new_text = '\n'.join(
    sorted(
        text.splitlines(),
        key=lambda x: int(x.split()[0]),
    )
)

print(new_text)
result = new_text.split()
print(result)
</code></pre>
<pre class=""lang-py prettyprint-override""><code>1 I
2 dogs
3 love
4 cats
5 you
6 computers
['1', 'I', '2', 'dogs', '3', 'love', '4', 'cats', '5', 'you', '6', 'computers']
</code></pre>
","0","Answer"
"78594449","78594212","<p>If the keys for sorting are the first digits in the line then your expected output should be<br />
<code>['1', 'I', '2', 'dogs', '3', 'love', '4', 'cats', '5', 'you', '6', 'computers']</code></p>
<p>This can be attained by splitting the lines without separating the keys from the words then sort them and split again to get your expected format.</p>
<pre><code>text = &quot;&quot;&quot;
3 love
6 computers
2 dogs
4 cats
1 I
5 you
&quot;&quot;&quot;
text = text.strip()
message = text.split('\n')
message.sort(key = lambda x: x[0])
ans = []
for string in message: # splitting each of the keys from its words
    temp = string.split(&quot; &quot;)
    ans.extend(temp)
print(ans)
</code></pre>
","0","Answer"
"78594512","78594212","<p>If you're sorting a list like ['3', 'love', '6', 'computers'] then obviously it's going to put those in order like ['3', '6', 'computers', 'love'] and it is correct to do so.</p>
<p>What you want is to sort the lines, not each separate word. You could split(&quot;\n&quot;) but python makes it easy to read a file line by line by just iterating over the file. You do have to remove the newlines, though.</p>
<pre><code>def decode(message_file):
    # read line by line
    decoded_message = []
    with open(message_file, 'r') as file:
        for line in file:
            decoded_message.append(line.strip())

    # split each line into pairs so you can look at the first word of each
    pairs = [line.split() for line in decoded_message]
    
    # now sort the lines
    # you had x[0] in the comments, but typoed it as [0]
    # also you need to convert to int because if they are strings then &quot;10&quot; &lt; &quot;9&quot; 
    pairs.sort(key = lambda x: int(x[0]))
    
    # and here I'm just making it pretty,
    # so it looks like the output format you want
    result = []
    for pair in pairs:
        result.extend(pair)
    return result

result = decode(&quot;data/test.txt&quot;)
print(result)
</code></pre>
<p>You do want your function to return a value, so you can write tests. If you want to print it, you just print it.</p>
","2","Answer"
"78604750","78604712","<p>You can use a pattern <code>r'[A-Z]+[^\r\n;]*?(?:\b[A-Z]\.\s*)+'</code>:</p>
<pre><code>import re
def _ut(s):
    p = r'[A-Z]+[^\r\n;]*?(?:\b[A-Z]\.\s*)+'
    f = [subs.strip() for subs in re.findall(p, s)]
    return f
s = 'ARCADI, G.; DORSCH, G. C.; NETO, J. P.; QUEIROZ, F. S.; OVIEDO-TORRES, Y. M. Probing a dark sector with collider physics, direct detection, and gravitational waves.'
print(_ut(s))

</code></pre>
<h3>Prints</h3>
<pre><code>['ARCADI, G.', 'DORSCH, G. C.', 'NETO, J. P.', 'QUEIROZ, F. S.', 'OVIEDO-TORRES, Y. M.']
</code></pre>
","0","Answer"
"78604751","78604712","<p>One possible solution is to remove the string you don't want and then split:</p>
<pre class=""lang-py prettyprint-override""><code>import re

s = &quot;ARCADI, G.; DORSCH, G. C.; NETO, J. P.; QUEIROZ, F. S.; OVIEDO-TORRES, Y. M. Probing a dark sector with collider physics, direct detection, and gravitational waves. Physics Letters, Section B: Nuclear, Elementary Particle and High-Energy Physics, v. 848, Jan. 2024.&quot;

out = re.sub(r&quot;\s[A-Z][a-z].*&quot;, &quot;&quot;, s).split(&quot;; &quot;)
print(out)
</code></pre>
<p>Prints:</p>
<pre><code>['ARCADI, G.', 'DORSCH, G. C.', 'NETO, J. P.', 'QUEIROZ, F. S.', 'OVIEDO-TORRES, Y. M.']
</code></pre>
","3","Answer"
"78610560","78610394","<p>You can try applying a custom function like this:</p>
<pre><code>def parse_list(s: str):
    q = []
    for c in s:
        if c == '[':    # indicate beginning of a list
            q.append(c)
        elif c == ']':  # indicate end of a list
            e = []      # create that list
            while True:    
                b = q.pop()  # pop the queue until we see the beginning  
                if b == '[':
                    break
                e.append(b)  # append the element to the list
            q.append(e[::-1]) # reverse the list and add back to queue
        elif c == ',' or c == ' ': # these does nothing
            # do nothing
            continue
        else:
            q.append(c)            # element, may need to modify this a bit
                
    return q[0]

out = df['col'].apply(parse_list).to_list()
</code></pre>
<p>Output:</p>
<pre><code>[[['a', 'b', 'c'], ['a', 'b']], [['a', 'b'], ['c']], [['x']]]
</code></pre>
<p><strong>Note</strong>: this only works for singleton strings (a,b,c,...). One needs to modify it to work with general strings, where one needs to work out the role of <code>,</code></p>
","2","Answer"
"78610690","78610394","<p>If your strings are simple (no escaped quotes/brackets), then you could use a simple regex and <a href=""https://docs.python.org/3/library/ast.html#ast.literal_eval"" rel=""nofollow noreferrer""><code>ast.literal_eval</code></a>:</p>
<pre><code>from ast import literal_eval
import re

out = [literal_eval(re.sub(r' *([^][ ,]+) *', r'&quot;\1&quot;', s))
       for s in df['col']]
</code></pre>
<p>Output:</p>
<pre><code>[[['a', 'b', 'c'], ['a', 'b']],
 [['a', 'b'], ['c']],
 [['x']]]
</code></pre>
","0","Answer"
"78616275","78616206","<p>v3</p>
<p>Probably increases performance:</p>
<pre class=""lang-r prettyprint-override""><code>lapply(names(df), \(i) {
  a = table(df[[i]]) |&gt; as.data.frame()
  names(a)[1L] = i; x = sum(a$Freq) 
  a$Perc = sprintf(&quot;%.2f%%&quot;, 100L * a$Freq / x); a }) 
</code></pre>
<p>v2</p>
<p>Create tables with <code>table</code> and <code>prop.table</code>, combine to <code>data.frame</code>, and &quot;<code>setNames</code>&quot; in one <code>lapply</code> call:</p>
<pre class=""lang-r prettyprint-override""><code>lapply(seq_along(df), \(i) {
  a = table(df[[i]])
  b = sprintf(&quot;%.2f%%&quot;, round(prop.table(a), 4L)*100L)
  setNames(data.frame(a, b), c(names(df)[i], &quot;Freq&quot;, &quot;Perc&quot;)) })

#&gt; [[1]]
#&gt;   gender Freq   Perc
#&gt; 1 female    2 50.00%
#&gt; 2   male    2 50.00%
#&gt; 
#&gt; [[2]]
#&gt;   score1 Freq   Perc
#&gt; 1      1    2 66.67%
#&gt; 2      3    1 33.33%
#&gt; 
#&gt; [[3]]
#&gt;   score2 Freq   Perc
#&gt; 1      3    1 33.33%
#&gt; 2      4    1 33.33%
#&gt; 3      5    1 33.33%
#&gt; 
#&gt; [[4]]
#&gt;   score3 Freq   Perc
#&gt; 1      2    2 50.00%
#&gt; 2      3    2 50.00%
</code></pre>
<h2>Data</h2>
<pre class=""lang-r prettyprint-override""><code>df &lt;- data.frame(gender = c(&quot;male&quot;, &quot;female&quot;, &quot;&quot;, &quot;male&quot;, &quot;female&quot;),
                 score1 = c(1, 1, NA, NA, 3),
                 score2 = c(NA, NA, 3, 4, 5),
                 score3 = c(2, 2, 3, 3, NA))
df[df == &quot;&quot;] = NA
</code></pre>
","3","Answer"
"78616394","78616206","<p>You can use <code>table()</code> to calculate the counts, <code>tibble::enfram()</code> to convert each table into a dataframe, and <code>transform()</code> to obtain proportions. Here we take advantage of the feature that <code>table</code> ignores missing values by default.</p>
<pre class=""lang-r prettyprint-override""><code>Map(\(x, name) {
  tibble::enframe(c(table(x[x != ''])), name, &quot;N&quot;) |&gt;
    transform(Prop = proportions(N) * 100)
}, df, names(df), USE.NAMES = FALSE)
</code></pre>
<pre><code>[[1]]
  gender N Prop
1 female 2   50
2   male 2   50

[[2]]
  score1 N     Prop
1      1 2 66.66667
2      3 1 33.33333

[[3]]
  score2 N     Prop
1      3 1 33.33333
2      4 1 33.33333
3      5 1 33.33333

[[4]]
  score3 N Prop
1      2 2   50
2      3 2   50
</code></pre>
","2","Answer"
"78620543","78616206","<pre class=""lang-r prettyprint-override""><code>lapply(names(df), \(colname) {
  df[[colname]] |&gt;
    table() |&gt;
    as.data.frame() |&gt;
    set_names(colname, &quot;freq&quot;) |&gt;
    mutate(perc = freq / sum(freq))
})
</code></pre>
","0","Answer"
"78631344","78631331","<p>I would use <a href=""https://docs.python.org/3/library/itertools.html#itertools.groupby"" rel=""nofollow noreferrer""><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby

def consec(lst):
    return max((len(list(g)) for k,g in
                groupby(lst, lambda x: x=='S') if k), default=0)

df['iCount'] = df['col4'].map(consec)
</code></pre>
<p><em>NB. using <code>max</code> here to get the longest sequence since there could be more than one stretch of S's, but you could use <code>min</code>/<code>sum</code> or any other logic.</em></p>
<p>If you are sure there is a maximum of <strong>one</strong> series of S per list, you could simplify to:</p>
<pre><code>df['iCount'] = [sum(x=='S' for x in lst) for lst in df['col4']]
</code></pre>
<p>Output:</p>
<pre><code>  col1 col2  col3          col4  iCount
0    1    6    67    [1, 6, 67]       0
1    S    S  None  [S, S, None]       2
2    3    8    87    [3, 8, 87]       0
3    4    9    79    [4, 9, 79]       0
4    S    S     S     [S, S, S]       3
</code></pre>
","2","Answer"
"78631371","78631331","<p>Just use the column values.</p>
<pre><code>iCount_list = []
for row in df['col4']:
    count = 0
    consecutive_s = 0
    for value in row:
        if value == &quot;S&quot;:
            consecutive_s += 1
            count = max(count, consecutive_s)
        else:
            consecutive_s = 0
    iCount_list.append(count)

df['iCount'] = iCount_list
</code></pre>
<p>It will give :</p>
<pre><code>col1 col2  col3          col4  iCount
0    1    6    67    [1, 6, 67]       0
1    S    S  None  [S, S, None]       2
2    3    8    87    [3, 8, 87]       0
3    4    9    79    [4, 9, 79]       0
4    S    S     S     [S, S, S]       3
</code></pre>
","1","Answer"
"78631447","78631331","<pre><code>count=0
list1=[]
for i in df[&quot;col4&quot;]:
    for j in i:
        if j==&quot;S&quot;:
            count +=1
    print(count)
    list1.append(count)
    count=0
df['count']=list1
</code></pre>
<p>we can not directly iterate through the columns first you need to select the column you want to iterate through then using that you can iterate through the list in that column and check if that list contains the object you are searching.</p>
","1","Answer"
"78631930","78631331","<p>One liner approach!</p>
<pre class=""lang-py prettyprint-override""><code>df['iCount'] = df['col4'].apply(lambda x: (series:=pd.Series(x)).groupby(series.ne(series.shift()).cumsum().iloc[series[series==&quot;S&quot;].index]).cumcount().max() + 1).fillna(0)
</code></pre>
<p>As a function:</p>
<pre class=""lang-py prettyprint-override""><code>def func(x):
    series = pd.Series(x)
    groups = series.ne(series.shift()).cumsum().iloc[series[series == &quot;S&quot;].index]
    out = series.groupby(groups).cumcount().max() + 1
    return out
                                                     
df['iCount'] = df['col4'].apply(func).fillna(0)
</code></pre>
<p>Output:</p>
<pre class=""lang-py prettyprint-override""><code>   col1 col2 col3          col4  iCount
0     1    6   67    [1, 6, 67]     0.0
1  None    S    S  [None, S, S]     2.0
2     3    8   87    [3, 8, 87]     0.0
3     4    9   79    [4, 9, 79]     0.0
4     S    S    S     [S, S, S]     3.0
</code></pre>
<p>Use <code>pd.Series.groupby</code>, and filter items that are equals to <code>&quot;S&quot;</code>, then get those indexes to filter the groups for <code>cumsum</code> and <code>cumcount</code>.</p>
","1","Answer"
"78631932","78631331","<p>For max consecutive occurrence of <code>&quot;S&quot;</code> you can try following:</p>
<pre class=""lang-py prettyprint-override""><code>s = df['col4'].explode()==&quot;S&quot;
df['iCount'] = pd.Series(
    np.where(
        s,
        s.groupby(s.ne(s.shift()).cumsum()).cumcount() + 1,
        0,
    ),
    index = s.index).groupby(level=0).agg(max)
</code></pre>
<p>The idea is flatten the lists, calculate max consecutive occurrences and then aggregate them back.</p>
<p>Or this way:</p>
<pre class=""lang-py prettyprint-override""><code>s = df['col4'].explode()==&quot;S&quot;
df['iCount'] = (s.groupby((s!=s.shift()).cumsum()).transform('size')*s).groupby(level=0).agg(max)
</code></pre>
<p>For just count number of <code>S</code> in the lists you can try this:</p>
<pre class=""lang-py prettyprint-override""><code>df['iCount'] = df['col4'].apply(pd.Series.value_counts)['S'].fillna(0)
</code></pre>
<p>The idea here is to use <code>value_counts</code> function per row for the specified column, filter by required string, in your case it is <code>'S'</code>, and fill 0s for no occurrence rows.</p>
","2","Answer"
"78632046","78631331","<pre><code>import pandas as pd

df = pd.DataFrame({
    'col1': ['1', 'S', '3', '4', 'S'],
    'col2': ['6', 'S', '8', '9', 'S'],
    'col3': ['67', None, '87', '79', 'S'],
    'col4': [[1, 6, 67], ['S', 'S', None], [3, 8, 87], [4, 9, 79], ['S', 'S', 'S']]
})

df['S_count'] = df['col4'].apply(lambda col : pd.Series(col).eq('S').cumsum()
                                 .mul(pd.Series(col).eq('S'))
                                 .max() )
                                                            
print(df)     
'''
 col1 col2  col3          col4  S_count
0    1    6    67    [1, 6, 67]        0
1    S    S  None  [S, S, None]        2
2    3    8    87    [3, 8, 87]        0
3    4    9    79    [4, 9, 79]        0
4    S    S     S     [S, S, S]        3
'''                                                       
</code></pre>
","1","Answer"
"78634158","78634134","<p><code>GENSYM</code> creates a new symbol each time it's used, so those two uses of <code>#:G808</code> are actually different symbols with the same name.</p>
<p>Assign it to a variable so you'll have the same symbol in both places.</p>
<pre><code>(let ((sym (gensym)))
  (position sym (list sym)))
</code></pre>
<p>Or use a comparison function that just compares the symbol names:</p>
<pre><code>(position '#:G808 (list '#:G808) :test #'string=)
</code></pre>
","4","Answer"
"78634201","78634134","<p>If we evaluate <code>(position '#:G808 (list '#:G808))</code>, then the reader sees <code>#:G808</code> and creates a new <em>uninterned</em> symbol with the name <code>G808</code>. It later sees another <code>#:G808</code> and creates another <code>G808</code>. They are not EQ.</p>
<pre><code>CL-USER &gt; (eq '#:G808 '#:G808)
NIL
</code></pre>
<p><em>Uninterned</em> means, that the symbols are not interned in a package.</p>
<pre><code>CL-USER &gt; (symbol-package '#:G808)
NIL

CL-USER &gt; (position '#:G808 (list 'G808 '#:G808)
                    :test (lambda (a b)
                            (and (null (symbol-package a))
                                 (null (symbol-package b))
                                 (string= (symbol-name a)
                                          (symbol-name b)))))
1
</code></pre>
","4","Answer"
"78635911","78634134","<p>Every time the reader sees <code>#:</code> it creates a new symbol which is not <code>eq</code> and hence not <code>eql</code> to any other symbol.</p>
<p>Thus for something like <code>(position '#:x '(#:x))</code> there are <em>two distinct symbols whose name happens to be the same</em>, and the first one indeed does not occur in the list.</p>
<p>(You can think of <code>position</code> as being implemented in terms of <code>eql</code>:</p>
<pre><code>(defun pos (o l)
  (labels ((ploop (lt n)
             (cond
               ((null lt) nil)
               ((eql o (first lt)) n)
               (t (ploop (rest lt) (1+ n))))))
    (ploop l 0)))
</code></pre>
<p>)</p>
<p>Note that symbol equality <em>is not string equality</em>: symbols are objects which are more than their names.</p>
<p>Compare this code:</p>
<pre><code>(let ((s '#:x))
  (position s (list s)))
</code></pre>
<p>Now there is only one symbol, and it indeed is in the list.</p>
<p>Rather than using <code>gensym</code> a way to reduce this to its bare bones is to use <code>make-symbol</code>, which makes a new symbol with a specified name.  Every such symbol is unique and is not <code>eq</code> to any other symbol.  You can think of the reader macro for <code>#:</code> as implemented in terms of <code>make-symbol</code>.</p>
<p>Things are made harder to see because the printer, by default, does not keep track of which object is which.  So <code>(print '(position '#:x '(#:x)))</code> will print the two symbols the same, even though they are not the same object.  Worse, it will print</p>
<pre><code>(let ((s '#:x))
  `(position ',s '(,s)))
</code></pre>
<p>in the same way, even though the symbols now <em>are</em> the same.</p>
<p>You can avoid this by making the printer keep track of object identity when printing, which you do by making <code>*print-circle*</code> be true.  With <code>*print-circle*</code> true the two examples above might print as</p>
<pre><code>(position '#:x '(#:x))
</code></pre>
<p>and</p>
<pre><code>(position '#1=#:x '(#1#))
</code></pre>
<p>which tells you that, in the second case, the two symbols are the same object.</p>
","3","Answer"
"78636047","78634134","<p>The simplest solution (I could find) seems to convert uninterned symbols like <code>#:G800</code> to string by <code>(string s)</code>, then obtained strings can be compared by <code>string-equal</code> and searched in the given list by `position'.</p>
","1","Answer"
"78638593","78638542","<p>Try:</p>
<pre class=""lang-py prettyprint-override""><code>def flatten(obj):
    if isinstance(obj, list):
        for v in obj:
            yield from flatten(v)
    else:
        yield obj


N = [1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]]

out = [list(flatten(v)) for v in N]
print(out)
</code></pre>
<p>Prints:</p>
<pre><code>[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
","2","Answer"
"78638662","78638542","<p>You can flatten each item conditionally using recursion:</p>
<blockquote>
<p><strong>Note:</strong> This assumes that the nested lists are already sorted correctly, and that each first-level depth group will consist of identical values. This will avoid the need to explicitly group.</p>
</blockquote>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python3

def flat_group(nested_list):
    def flatten(el):
        if not isinstance(el, list):
            return [el]
        flat_list = []
        for sub in el:
            flat_list.extend(flatten(sub))
        return flat_list
        
    return [flatten(sub) for sub in nested_list]


if __name__ == '__main__':
    result = flat_group([1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]])
    print(result)  # [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
<p>Here's more list-comprehension:</p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python3

def flat_group(nested_list):
    def flatten(el):
        return [x for sub in el for x in flatten(sub)] if isinstance(el, list) else [el]

    return [flatten(sub) for sub in nested_list]


if __name__ == '__main__':
    result = flat_group([1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]])
    print(result)  # [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
<p>And here is a lambda version:</p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python3

f1=lambda l: [f2(s) for s in l]
f2=lambda e: [x for s in e for x in f2(s)] if isinstance(e, list) else [e]

# [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
print(f1([1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]]))
</code></pre>
","2","Answer"
"78638676","78638542","<p>You can do:</p>
<pre><code>from itertools import groupby, chain
flatten = lambda N: chain.from_iterable(map(flatten, N)) if isinstance(N, list) else [N]
[list(g) for _, g in groupby(flatten(N))]
</code></pre>
<p>Output:</p>
<pre><code>[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
","3","Answer"
"78638893","78638542","<p>This works for me:</p>
<pre><code>def f(x, ll):
    if (isinstance(x, list)):
        for e in x:
            f(e, ll)     
    else:
        ll.append(x)
        return

l = [1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]]
lout = []

for entry in l:
    li = []
    f(entry, li)
    lout.append(li)

print(lout)
</code></pre>
<p>Output:</p>
<pre><code>[[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
","2","Answer"
"78639629","78639613","<p>You can use a simple for loop with <code>isdigit()</code>:</p>
<pre><code>def _collect(L):
    nums, alphas = [], []
    for i, val in enumerate(L):
        if val.isdigit():
            nums.append(i)
        else:
            alphas.append(i)
    return nums, alphas


print(_collect(['F', 'G', 'H', '1', '5', 'H']))
</code></pre>
<p>Prints</p>
<pre class=""lang-none prettyprint-override""><code>([3, 4], [0, 1, 2, 5])
</code></pre>
","1","Answer"
"78639790","78639613","<p>Just another take - this time using sets...</p>
<pre><code>myList = ['F', 'G', 'H', '1', '5', 'H']

theNumbers = [pos for pos in range(len(myList)) if myList[pos].isdigit()]

theOthers = sorted(list(set(range(len(myList))) - set(theNumbers) ))

print(&quot;numbers:&quot;, theNumbers )
print(&quot; others:&quot;, theOthers )
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>numbers: [3, 4]
 others: [0, 1, 2, 5]
</code></pre>
","0","Answer"
"78639799","78639613","<p>You can use list comprehensions with built-in functions <code>isdigit()</code> and <code>isalpha()</code>:</p>
<pre><code>li = ['F', 'G', 'H', '1', '5', 'H']

numb_l = [i for i in range(len(li)) if li[i].isdigit()]
print(&quot;Number positions:&quot;, numb_l)
char_l = [i for i in range(len(li)) if li[i].isalpha()]
print(&quot;Character positions:&quot;, char_l)
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>Number positions: [3, 4]
Character positions: [0, 1, 2, 5]
</code></pre>
","0","Answer"
"78640064","78640042","<p><code>combinations.append(wordlist_copy)</code> is appending the same instance every time. Each invocation of <code>wordlist_copy[i] = char</code> is mutating that some instance. In the end <code>combinations</code> is a list where every element is a reference to the same instance.</p>
<p>Using <code>list()</code> creates a new list, with all of the elements of its parameter - essentially in this use: a copy. After creating these copies, each copy is not being modified, so you see them in the state they were when you created and appended them after the completion of the loop.</p>
","0","Answer"
"78640065","78640042","<p><code>wordlist_copy</code> is a named reference to a list. <code>combinations.append(wordlist_copy)</code> appends another reference to that list to the <code>combinations</code> list. Now you have multiple references to the same list. Change a value through one reference and all other references will see that same change because it's only one underlying object. Print out the references in <code>combinations</code> while your program is running and you'll see the problem:</p>
<pre><code>def foo(word):

    wordlist = list(word)
    wordlist_copy = wordlist.copy()

    combinations = []
    for char in wordlist:
        for i,let in enumerate(wordlist_copy):
            wordlist_copy[i] = char
            print(wordlist_copy)
            combinations.append(wordlist_copy)
            print(&quot;----&quot;, &quot;ITERATION&quot;, i, &quot;----&quot;)
            for c in combinations:
                print(id(c), c)
            
    return combinations


foo(&quot;ab&quot;)
</code></pre>
<p>prints</p>
<pre><code>['a', 'b']
---- ITERATION 0 ----
139817235422848 ['a', 'b']
['a', 'a']
---- ITERATION 1 ----
139817235422848 ['a', 'a']
139817235422848 ['a', 'a']
['b', 'a']
---- ITERATION 0 ----
139817235422848 ['b', 'a']
139817235422848 ['b', 'a']
139817235422848 ['b', 'a']
['b', 'b']
---- ITERATION 1 ----
139817235422848 ['b', 'b']
139817235422848 ['b', 'b']
139817235422848 ['b', 'b']
139817235422848 ['b', 'b']
</code></pre>
<p>By that final iteration, you have 4 references to a single list.</p>
<p>Your code keeps appending a reference to the single <code>wordlist_copy</code> list to the <code>combinations</code> list.</p>
<p>Since you haven't make new copies for <code>combinations</code>, changes to <code>wordlist_copy</code> are seen by all of the references in <code>combinations</code>.</p>
<p><code>list(wordlist_copy)</code> fixes the problem because it creates a new list which to add to the list. It does the same thing as <code>wordlist_copy.copy()</code>.</p>
","2","Answer"
"78640420","78638542","<p>Here is one option in the classical functional style, using recursion, pattern matching and structural construction/deconstruction:</p>
<pre><code>N = [1, [2, 2], [[3, 3], 3], [[[4, 4], 4], 4], [[[[5, 5], 5], 5], 5]]

def flatten(n):
    match n:
        case []: return []
        case [*hd], *tl: return [*flatten(hd), *flatten(tl)]
        case hd, *tl: return [hd, *flatten(tl)]

def groupflat(n):
    match n:
        case []: return []
        case [*hd], *tl: return [flatten(hd), *groupflat(tl)]
        case hd, *tl: return [[hd], *groupflat(tl)]

groupflat(N)   # outputs: [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]]
</code></pre>
","1","Answer"
"78642351","78642298","<p>Try this:</p>
<pre><code>def calcUs(lst):
    cnt = 0
    for x, y in zip(lst, lst[1:]):
        if (x == 'U' and y != 'U' and y != None):
            cnt += 1
    return cnt
df['iCount'] = df['col1'].apply(lambda x: calcUs(x))
df
</code></pre>
<p>Output:</p>
<pre><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
","2","Answer"
"78642352","78642298","<p>If you only want to test if there is at least one case in which a non-None follow a <code>U</code>, use <a href=""https://docs.python.org/3/library/itertools.html#itertools.pairwise"" rel=""nofollow noreferrer""><code>itertools.pairwise</code></a> and <a href=""https://docs.python.org/3/library/functions.html#any"" rel=""nofollow noreferrer""><code>any</code></a>:</p>
<pre><code>from itertools import pairwise

def count_after_U(lst):
    return int(any(a=='U' and b not in {'U', None} for a, b in pairwise(lst)))

df['iCount'] = list(map(count_after_U, df['col1']))
</code></pre>
<p>Output:</p>
<pre><code>                                            col1  iCount
0        [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                                [6, 5, 4, 3, 2]       0
2                                [0, 0, 0, U, U]       0
3                                [0, 1, U, U, U]       0
4                             [0, U, U, U, None]       0
5  [U, U, 4, U, U, 1, 0, U, U, None, 1, U, None]       1
6                                [U, None, 1, U]       0
</code></pre>
<p>If you also want to check the other values until the next <code>U</code>, use a custom function:</p>
<pre><code>def any_after_U(lst):
    flag = False
    for item in lst:
        if item == 'U':
            flag = True
        else:
            if flag and item is not None:
                return 1
    return 0

df['iCount'] = list(map(any_after_U, df['col1']))
</code></pre>
<p>Example:</p>
<pre><code>                                            col1  iCount
0        [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                                [6, 5, 4, 3, 2]       0
2                                [0, 0, 0, U, U]       0
3                                [0, 1, U, U, U]       0
4                             [0, U, U, U, None]       0
5  [U, U, 4, U, U, 1, 0, U, U, None, 1, U, None]       1
6                                [U, None, 1, U]       1
</code></pre>
<hr />
<h3>original answer before clarification</h3>
<h4>approach 1: considering only the first item after <code>U</code></h4>
<p>IIUC, use a custom python function:</p>
<pre><code>from itertools import pairwise

def count_after_U(lst):
    return sum(a=='U' and b not in {'U', None} for a,b in pairwise(lst))

df['iCount'] = list(map(count_after_U, df['col1']))
</code></pre>
<p>Or, to be more flexible with the conditions:</p>
<pre><code>def count_after_U(lst):
    flag = False
    iCount = 0
    for item in lst:
        if item == 'U':
            flag = True
        else:
            if flag and item is not None:
                iCount += 1
            flag = False
    return iCount

df['iCount'] = list(map(count_after_U, df['col1']))
</code></pre>
<p>Output:</p>
<pre><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
<p>More complex example:</p>
<pre><code>                                            col1  iCount
0        [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                                [6, 5, 4, 3, 2]       0
2                                [0, 0, 0, U, U]       0
3                                [0, 1, U, U, U]       0
4                             [0, U, U, U, None]       0
5  [U, U, 4, U, U, 1, 0, U, U, None, 1, U, None]       2
</code></pre>
<h4>approach 2: considering all values after <code>U</code>:</h4>
<p>Just indent the flag reset in the previous approach to only reset it if a value was not yet found:</p>
<pre><code>def count_after_U(lst):
    flag = False
    iCount = 0
    for item in lst:
        if item == 'U':
            flag = True
        else:
            if flag and item is not None:
                iCount += 1
                flag = False
    return iCount

df['iCount'] = list(map(count_after_U, df['col1']))
</code></pre>
<p>Example:</p>
<pre><code>                                            col1  iCount
0        [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                                [6, 5, 4, 3, 2]       0
2                                [0, 0, 0, U, U]       0
3                                [0, 1, U, U, U]       0
4                             [0, U, U, U, None]       0
5  [U, U, 4, U, U, 1, 0, U, U, None, 1, U, None]       3
</code></pre>
","2","Answer"
"78642364","78642298","<p><strong>Code</strong></p>
<pre><code>s = df['col1'].explode()
s1 = s.groupby(level=0).shift(-1)
cond = s.eq('U') &amp; s1.notna() &amp; s1.ne('U')
df['icount'] = cond.groupby(level=0).any().astype('int')
</code></pre>
<p>df</p>
<pre><code>                                      col1  icount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
","2","Answer"
"78642368","78642298","<p>You can use <code>explode</code>, <code>groupby</code> on the index, then aggregate with a sum of when the condition is <code>True</code>:</p>
<pre><code>df[&quot;iCount&quot;] = (
    df.explode(&quot;col1&quot;)
    .groupby(level=0)
    .agg(lambda x: ((x == &quot;U&quot;) &amp; (~x.shift(-1).isin([&quot;U&quot;, None]))).sum())
)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
<hr />
<p>If you need <code>'iCount'</code> to only contain <code>0</code> or <code>1</code>, and not a sum of the values that match the condition, instead of <code>sum</code> you can use <code>any.astype(int)</code>:</p>
<pre><code>df[&quot;iCount&quot;] = (
    df.explode(&quot;col1&quot;)
    .groupby(level=0)
    .agg(lambda x: ((x == &quot;U&quot;) &amp; (~x.shift(-1).isin([&quot;U&quot;, None]))).any().astype(int))
)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                 [0, U, 0, U, 0, U, None]       1
</code></pre>
","2","Answer"
"78642387","78642298","<p>Use <code>np.vecorize</code> with a function and <code>pd.Series</code>:</p>
<pre class=""lang-py prettyprint-override""><code>def func(x):
    lst = pd.Series(x)
    return int(lst[lst.eq('U') &amp; (~lst.shift(-1).isin({'U', None}))].any())

df['iCount'] = np.vectorize(func)(df['col1'])
</code></pre>
<p>Or create a minimalist function with <code>zip</code>.</p>
<p>Looks like as OP mentioned, the values can only be <code>1</code> or <code>0</code>.</p>
<pre class=""lang-py prettyprint-override""><code>def func(x):
    lst = zip(x, x[1:])
    for a, b in lst:
        if (a == 'U') and (b not in {'U', None}):
            return 1
    return 0

df['iCount'] = np.vectorize(func)(df['col1'])
</code></pre>
<p>Output:</p>
<pre class=""lang-py prettyprint-override""><code>                                      col1  iCount
0  [U, U, U, U, U, 1, 0, 0, 0, U, U, None]       1
1                          [6, 5, 4, 3, 2]       0
2                          [0, 0, 0, U, U]       0
3                          [0, 1, U, U, U]       0
4                       [0, U, U, U, None]       0
</code></pre>
","2","Answer"
"78644694","78644659","<p>It's impossible to convert <code>numpy.ndarray</code> elements directly into a set.
You need to convert the <code>numpy.ndarray</code> to a hashable type such as a tuple.</p>
<p>Something like this:</p>
<pre><code>import numpy as np

def evaluate_retrieval(query_idx, retrieved_indices, relevant_indices):
    retrieved_indices_tuples = tuple(tuple(tuple(pixel) for pixel in row) for row in retrieved_indices)
    
    retrieved_indices_set = set(retrieved_indices_tuples)
    
    relevant_indices_set = set(relevant_indices)
    
    # Calculate the intersection of the sets
    relevant_retrieved = len(retrieved_indices_set.intersection(relevant_indices_set))
    
    precision = relevant_retrieved / len(retrieved_indices_set) if len(retrieved_indices_set) &gt; 0 else 0
    
    return precision

retrieved_indices = np.random.randint(0, 256, (128, 128, 3))  # Sample data
relevant_indices = [((0, 0, 0), (1, 1, 1), (2, 2, 2))]  # Sample relevant indices

precision = evaluate_retrieval(0, retrieved_indices, relevant_indices)
print(f&quot;Precision: {precision}&quot;)
</code></pre>
","0","Answer"
"78649430","78644659","<p>I solved this problem in this way:</p>
<pre><code>retrieved_indices_tuples = tuple(
    tuple(
        tuple(
            tuple(pixel) for pixel in slice
        ) for slice in row
    ) for row in retrieved_indices
)
    print(type(retrieved_indices_tuples))  # Should print &lt;class 'tuple'&gt;
    print(type(retrieved_indices_tuples[0]))  # Should print &lt;class 'tuple'&gt;
    print(type(retrieved_indices_tuples[0][0]))  # Should print &lt;class 'tuple'&gt;
    print(type(retrieved_indices_tuples[0][0][0]))  # Should print &lt;class 'tuple'&gt;
    print(type(retrieved_indices_tuples[0][0][0][0])) # Should print &lt;class 'int'&gt;
</code></pre>
","0","Answer"
"78652823","78652713","<p>It's a little tricky to use the right quoting, but here's an example:</p>
<pre><code>global reglist = `&quot; &quot;Saratov Region&quot; &quot;Samara Region&quot;  &quot;'
foreach var of global reglist {
 di &quot;`var'&quot;
}
</code></pre>
<p>Basically, wrap individual region names in double quotes and then wrap everything with the additional local quotation.</p>
","0","Answer"
"78653320","78652713","<p>The problem one level back is reading in a series of files with the twist that the filenames may contain spaces. Many people avoid that by never including spaces in filenames, but naturally the filenames may be beyond your control.</p>
<p>A better solution than populating a global (or local) macro by typing in filenames is to get Stata to collect the filenames automatically. You can use a local macro function <code>dir</code> ... <code>files</code>. Start at <code>help macro</code> and look for <code>macro functions</code>.</p>
<p>A wrapper for that is <code>fs</code> from SSC with which you can do things like</p>
<pre><code>fs *.xls
</code></pre>
<p>with the result that the filenames will be gathered into <code>r(files)</code> so that you can then loop over its elements.</p>
<pre><code>foreach f in `r(files)' { 
   import excel &quot;`f'&quot;, clear
   &lt;other commands&gt;
}
</code></pre>
<p>That way there are no work-arounds for spaces, beyond using <code>&quot; &quot;</code> in the body of the loop.</p>
","0","Answer"
"78655093","78655079","<p>Python is just printing too fast and deleting first prints as it prints more, so you miss the first three prints. Try changing &quot;while&quot; to &quot;for&quot;:</p>
<pre class=""lang-py prettyprint-override""><code>lst = [6, 3, 0]

keepGoing = True

for i in range(10):
    for element in lst:
        thiselem = element
        if lst[lst.index(thiselem)] != lst[-1]:
            nextelem = lst[lst.index(thiselem) + 1]
            if int(thiselem) &gt; int(nextelem):
                lst[lst.index(thiselem) + 1] = thiselem
                lst[lst.index(thiselem)] = nextelem
            print(lst)
</code></pre>
","1","Answer"
"78655095","78655079","<p>Executing your code as-written produces the behaviour you seem to be seeking:</p>
<pre class=""lang-py prettyprint-override""><code>[3, 6, 0]
[3, 0, 6]
[0, 3, 6]
[0, 3, 6]
[0, 3, 6]
[0, 3, 6]
...
</code></pre>
<p>If you wanted to stop execution after sorting was completed, you'd have to add an <code>else</code> after your <code>if</code>, like this:</p>
<pre class=""lang-py prettyprint-override""><code>lst = [6, 3, 0]

keepGoing = True

while keepGoing == True:
    for element in lst:
        thiselem = element
        if lst[lst.index(thiselem)] != lst[-1]:
            nextelem = lst[lst.index(thiselem) + 1]
            if int(thiselem) &gt; int(nextelem):
                lst[lst.index(thiselem) + 1] = thiselem
                lst[lst.index(thiselem)] = nextelem
            else:
                keepGoing = False
            print(lst)
</code></pre>
<p>Running this modified code produces:</p>
<pre class=""lang-py prettyprint-override""><code>[3, 6, 0]
[3, 0, 6]
[0, 3, 6]
[0, 3, 6]
</code></pre>
","0","Answer"
"78657658","78657609","<p>I think you can use <code>filter</code> or list comprehension, as described in this question: <a href=""https://stackoverflow.com/questions/35101426/how-to-return-a-subset-of-a-list-that-matches-a-condition"">How to return a subset of a list that matches a condition</a></p>
<pre class=""lang-py prettyprint-override""><code>answer = [p for p in points if p[1] == 3]
</code></pre>
<hr />
<p>And to query the set of distinct heights that have at least one point, you could use Python's Set and iterate through the list, adding all heights. Sets don't allow duplicate values, so you'll get only distinct values.</p>
<pre class=""lang-py prettyprint-override""><code>heightSet = {p[1] for p in points}
</code></pre>
<p>If you want the result as list, just call list method.</p>
<pre class=""lang-py prettyprint-override""><code>distinctHeightsList = list(heightSet)
</code></pre>
","0","Answer"
"78658370","78657609","<p>If you will only do this operation once, then indeed you can't do better than iterate on all points and test whether <code>y==3</code> for each point.</p>
<p>In python this can be done using a list comprehension:</p>
<pre class=""lang-py prettyprint-override""><code>points = [[1,2],[1,3],[2,1],[2,3]]
points_at_height3 = [(x,y) for (x,y) in points if y == 3]
</code></pre>
<p>With library numpy the syntax is even more convenient:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

points = np.array(points)

points_at_height3 = points[points[:,1] == 3]
</code></pre>
<p>However, if this is an operation that you're going to repeat a lot, then you can preprocess the data first into a data structure that makes this operation faster.</p>
<p>For instance, you can group the points by height into a dictionary:</p>
<pre class=""lang-py prettyprint-override""><code>points = [[1,2],[1,3],[2,1],[2,3]]

by_height = {}
for (x,y) in points:
   by_height.setdefault(y, []).append((x,y))

print(by_height)
# {2: [(1, 2)], 3: [(1, 3), (2, 3)], 1: [(2, 1)]}

print(by_height[3])
# [(1, 3), (2, 3)]
</code></pre>
<p>Or alternatively you can sort the points by height, then use binary search to find the height you want:</p>
<pre class=""lang-py prettyprint-override""><code>from operator import itemgetter
from bisect import bisect_left, bisect_right

y_coordinate = itemgetter(1)

sorted_points = sorted(points, key=y_coordinate)

def get_points_at_specific_height(sorted_points, y):
    i = bisect_left(sorted_points, y, key=y_coordinate)
    j = bisect_right(sorted_points, y, key=y_coordinate)
    return sorted_points[i:j]

print(sorted_points)
# [[2, 1], [1, 2], [1, 3], [2, 3]]

print(get_points_at_specific_height(sorted_points,3))
# [[1, 3], [2, 3]]
</code></pre>
","1","Answer"
"78659071","78658989","<p>If you really wanna use commas and not dots for floating-points do below</p>
<pre><code>box = [float(x.replace(',','.')) for x in input(&quot;Type numbers here: &quot;).split()]

box.sort(reverse=False)

print(box)
</code></pre>
<p>where a replace function changes , to .</p>
","0","Answer"
"78659117","78658989","<p>You know that the input is considered as string even if we type numbers. And that is why you are converting this into int to create a list(like <code>box = [int(x) for x in input(&quot;Type numbers here: &quot;).split()]</code>).</p>
<p>So the characters which can't be converted into integers will naturally raise value error. If at all you want to give mixed types of data in your code, You have to pre-process your input in your coding according to your requirement. For example, if you need some of the special characters to use in later steps, you can create another list with containing special characters; And one list containing numbers.</p>
<p>Few examples:</p>
<p>If the input is numbers separated by commas,</p>
<pre><code>numbers = input(&quot;Type numbers here: &quot;)
numbers = numbers.split(',')
numbers = [int(x) for x in numbers]
</code></pre>
<p>If you want to use float numbers separated by space, Rest of the characters to use in later stage</p>
<pre><code>numbers = input(&quot;Type numbers here: &quot;)
numbers = numbers.split(' ')
ints = [float(x) for x in numbers if x.replace('.','').isdigit()]
char = [x for x in numbers if not x.replace('.','').isdigit()]
</code></pre>
<p>and so on.</p>
","0","Answer"
"78663631","78663584","<p>You're only building two lists: <code>greater_or_equal</code> and <code>lessthan</code>, yet it is clear that the expected result could have any number of sublists, not just two. So every time you switch category, you'll have to create a new list (to serve as sub list).</p>
<p>Here is how you could do it:</p>
<pre><code>def group_ints(lst, key):
    if not lst:
        return []
    
    result = [lst[:1]]  # start with the first value already in its own sublist

    for i in lst:
        # Is the current value of a different category than the last one?
        if (i &gt;= key) != (result[-1][0] &gt;= key):  # We need a new list
            result.append([])  # create and add it to the result
        result[-1].append(i)
    return result
</code></pre>
","4","Answer"
"78663647","78663584","<p>You can use <code>itertools.groupby()</code> and pass <code>lambda x: x &gt;= key</code> as the <code>key=</code> parameter to achieve this:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import groupby


def split_list(lst: list[int], key: int):
    return [list(g) for _k, g in groupby(lst, key=lambda x: x &gt;= key)]


assert split_list([1, 1, 1, 0, 0, 6, 10, 5, 10], key=6) == [[1, 1, 1, 0, 0], [6, 10], [5], [10]]
assert split_list([], key=6) == []
</code></pre>
","1","Answer"
"78665835","78665822","<p>Assuming that the &quot;Year built&quot; entries would always be in even elements (starting at zero), and the &quot;Floor&quot; elements always in odd elements, we could just use the following two list comprehensions:</p>
<pre class=""lang-py prettyprint-override""><code>years = [lst for i, lst in enumerate(base_list) if i % 2 == 0]
floors = [lst for i, lst in enumerate(base_list) if i % 2 == 1]
</code></pre>
<p>If we can't rely on the indices here, we could also use a string filter approach:</p>
<pre class=""lang-py prettyprint-override""><code>years = [x for x in base_list if x.startswith('Year Built')]
floors = [x for x in base_list if x.startswith('Floor')]
</code></pre>
","0","Answer"
"78665847","78665822","<p>Try this once:</p>
<p>year_built_list = []</p>
<p>floor_list = []</p>
<p>for item in base_list:</p>
<pre><code>if item.startswith('Year Built'):
    year_built_list.append(item)
elif item.startswith('Floor'):
    floor_list.append(item)
</code></pre>
<p>print(&quot;Year Built List:&quot;, year_built_list)</p>
<p>print(&quot;Floor List:&quot;, floor_list)</p>
","0","Answer"
"78665887","78665822","<p>if you're sure the base_list is alternated, you can simply skip lookups and branches</p>
<pre><code>year_built_list = base_list[0::2]
floor_list = base_list[1::2]
</code></pre>
","1","Answer"
"78665888","78665822","<p>Just a little bug in your current approach. Instead of using base_list[i].startwith('Y') use i.startswith('Year Built'), as i represents each item in your list. So your code would be like this</p>
<pre><code>year_built_list = [i for i in base_list if i.startswith('Year Built')]
floor_list = [item for item in base_list if item.startswith('Floor')]
</code></pre>
<p>Here is a link for your reference <a href=""https://www.w3schools.com/python/python_lists_comprehension.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/python/python_lists_comprehension.asp</a></p>
","1","Answer"
"78665916","78665822","<p>You could use <code>iteration_utilities.grouper</code> like this:</p>
<pre><code>from iteration_utilities import grouper
years, floors = zip(*grouper(base_list, 2))
</code></pre>
<p>After this assignment, <code>years</code> and <code>floors</code> will have these values:</p>
<pre><code>('Year Built 2016', 'Year Built 2019', 'Year Built 2015', 'Year Built 2006', 'Year Built 2015', 'Year Built 2015', 'Year Built 2008', 'Year Built 2014', 'Year Built 2019', 'Year Built 1997', 'Year Built 2015', 'Year Built 2015', 'Year Built 1996', 'Year Built 2009', 'Year Built 2008', 'Year Built 2006', 'Year Built 2018', 'Year Built 2008', 'Year Built 2019', 'Year Built 2022', 'Year Built 2006', 'Year Built 2021', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2019', 'Year Built 2015', 'Year Built 2015')
('Floor 7', 'Floor 23', 'Floor 12', 'Floor 8', 'Floor 23', 'Floor 28', 'Floor 19', 'Floor 3', 'Floor 33', 'Floor 31', 'Floor 17', 'Floor 33', 'Floor 8', 'Floor 3', 'Floor 13', 'Floor 30', 'Floor 2', 'Floor 34', 'Floor 23', 'Floor 31', 'Floor 14', 'Floor 7', 'Floor 36', 'Floor 10', 'Floor 32', 'Floor 26', 'Floor 40', 'Floor 8', 'Floor 6')
</code></pre>
<p>These are tuples. If you really need them to be lists, then add a <code>map</code> call:</p>
<pre><code>years, floors = map(list, zip(*grouper(base_list, 2)))
</code></pre>
<p>If you are running Python 3.12+, then you can use <a href=""https://docs.python.org/3.12/library/itertools.html#itertools.batched"" rel=""nofollow noreferrer""><code>itertools.batched</code></a>, which has similar functionality:</p>
<pre><code>from itertools import batched
years, floors = zip(*batched(base_list, 2))
</code></pre>
","0","Answer"
"78665921","78665822","<p><code>base_built=['Year Built 2016', 'Floor 7', 'Year Built 2019', 'Floor 23', 'Year Built 2015', 'Floor 12', 'Year Built 2006', 'Floor 8', 'Year Built 2015', 'Floor 23', 'Year Built 2015', 'Floor 28', 'Year Built 2008', 'Floor 19', 'Year Built 2014', 'Floor 3', 'Year Built 2019', 'Floor 33', 'Year Built 1997', 'Floor 31', 'Year Built 2015', 'Floor 17', 'Year Built 2015', 'Floor 33', 'Year Built 1996', 'Floor 8', 'Year Built 2009', 'Floor 3', 'Year Built 2008', 'Floor 13', 'Year Built 2006', 'Floor 30', 'Year Built 2018', 'Floor 2', 'Year Built 2008', 'Floor 34', 'Year Built 2019', 'Floor 23', 'Year Built 2022', 'Floor 31', 'Year Built 2006', 'Floor 14', 'Year Built 2021', 'Floor 7', 'Year Built 2015', 'Floor 36', 'Year Built 2015', 'Floor 10', 'Year Built 2015', 'Floor 32', 'Year Built 2015', 'Floor 26', 'Year Built 2019', 'Floor 40', 'Year Built 2015', 'Floor 8', 'Year Built 2015', 'Floor 6']</code></p>
<p><code>base_years=[base_built[i] for i in range(len(base_built)) if base_built[i].startswith('Y')]</code></p>
<p>print(base_years)</p>
<p>Output:['Year Built 2016', 'Year Built 2019', 'Year Built 2015', 'Year Built 2006', 'Year Built 2015', 'Year Built 2015', 'Year Built 2008', 'Year Built 2014', 'Year Built 2019', 'Year Built 1997', 'Year Built 2015', 'Year Built 2015', 'Year Built 1996', 'Year Built 2009', 'Year Built 2008', 'Year Built 2006', 'Year Built 2018', 'Year Built 2008', 'Year Built 2019', 'Year Built 2022', 'Year Built 2006', 'Year Built 2021', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2019', 'Year Built 2015', 'Year Built 2015']</p>
<ul>
<li>Another way</li>
</ul>
<p><code>base_years=[base_built[i] for i in range(len(base_built)) if i==0 or i%2==0]</code></p>
<p>print(base_years)</p>
<p>Output:['Year Built 2016', 'Year Built 2019', 'Year Built 2015', 'Year Built 2006', 'Year Built 2015', 'Year Built 2015', 'Year Built 2008', 'Year Built 2014', 'Year Built 2019', 'Year Built 1997', 'Year Built 2015', 'Year Built 2015', 'Year Built 1996', 'Year Built 2009', 'Year Built 2008', 'Year Built 2006', 'Year Built 2018', 'Year Built 2008', 'Year Built 2019', 'Year Built 2022', 'Year Built 2006', 'Year Built 2021', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2015', 'Year Built 2019', 'Year Built 2015', 'Year Built 2015']</p>
<p><code>base_floors=[base_built[i] for i in range(len(base_built)) if base_built[i].startswith('F')]</code></p>
<ul>
<li>Another way</li>
</ul>
<p><code>base_floors=[base_built[i] for i in range(len(base_built)) if i%2!=0]</code></p>
<p>print(base_floors)</p>
<p>Output:['Floor 7', 'Floor 23', 'Floor 12', 'Floor 8', 'Floor 23', 'Floor 28', 'Floor 19', 'Floor 3', 'Floor 33', 'Floor 31', 'Floor 17', 'Floor 33', 'Floor 8', 'Floor 3', 'Floor 13', 'Floor 30', 'Floor 2', 'Floor 34', 'Floor 23', 'Floor 31', 'Floor 14', 'Floor 7', 'Floor 36', 'Floor 10', 'Floor 32', 'Floor 26', 'Floor 40', 'Floor 8', 'Floor 6']</p>
","0","Answer"
"78665951","78665822","<p>You can leverage on filter and lambda to achieve this as follow</p>
<pre><code>  base_list = [
        'Year Built 2016', 'Floor 7', 'Year Built 2019', 'Floor 23', 'Year Built 2015', 'Floor 12',
        'Year Built 2006', 'Floor 8', 'Year Built 2015', 'Floor 23', 'Year Built 2015', 'Floor 28',
        'Year Built 2008', 'Floor 19', 'Year Built 2014', 'Floor 3', 'Year Built 2019', 'Floor 33',
        'Year Built 1997', 'Floor 31', 'Year Built 2015', 'Floor 17', 'Year Built 2015', 'Floor 33',
        'Year Built 1996', 'Floor 8', 'Year Built 2009', 'Floor 3', 'Year Built 2008', 'Floor 13',
        'Year Built 2006', 'Floor 30', 'Year Built 2018', 'Floor 2', 'Year Built 2008', 'Floor 34',
        'Year Built 2019', 'Floor 23', 'Year Built 2022', 'Floor 31', 'Year Built 2006', 'Floor 14',
        'Year Built 2021', 'Floor 7', 'Year Built 2015', 'Floor 36', 'Year Built 2015', 'Floor 10',
        'Year Built 2015', 'Floor 32', 'Year Built 2015', 'Floor 26', 'Year Built 2019', 'Floor 40',
        'Year Built 2015', 'Floor 8', 'Year Built 2015', 'Floor 6'
    ]

year_built_list = list(filter(lambda x: x.startswith('Year Built'), base_list))
floor_list = list(filter(lambda x: x.startswith('Floor'), base_list))

print(&quot;Year Built List:&quot;, year_built_list)
print(&quot;Floor List:&quot;, floor_list)
</code></pre>
<p>The filter is a function that requires 2 arguments,</p>
<ol>
<li>The first is the function that returns a boolean (in our case, a <code>lambda</code> function).</li>
<li>The second is a list (in our case base-list)</li>
</ol>
<p>The <code>lambda</code> uses x as each item, thus, checks if the item starts with 'Year Built', if it does, it returns True, otherwise, False.</p>
<p>The result is then passed to the filter which returns an iterator.</p>
<p>We then convert this back to a list using the <code>list()</code> function</p>
<p>See references below</p>
<p><a href=""https://www.w3schools.com/python/python_lists.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/python/python_lists.asp</a>
<a href=""https://www.w3schools.com/python/python_lambda.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/python/python_lambda.asp</a></p>
","0","Answer"
"78666688","78666607","<p>So as commented you just want to analyze the file content, not the actual folders in your OS, then this should work as expected:</p>
<pre><code>public static Dictionary&lt;string, int&gt; GetTopLevelFolderCount(IList&lt;string&gt; lines)
{
    return lines
        .GroupBy(l =&gt; l)
        .ToDictionary(
            g =&gt; g.Key,
            g =&gt; lines.Count(l =&gt; l.StartsWith(g.Key, StringComparison.OrdinalIgnoreCase)
                                  &amp;&amp; l[g.Key.Length..].Count(c =&gt; c == '/') == 1));
}
</code></pre>
<p>Edit: here's a demo: <a href=""https://dotnetfiddle.net/iitkb9"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/iitkb9</a></p>
","2","Answer"
"78666762","78666607","<p>An efficient way to handle this is to fill a tree with the data.</p>
<p>First we define a <code>TreeNode</code>:</p>
<pre><code>public class TreeNode
{
    private readonly Dictionary&lt;string, TreeNode&gt; _children = new();

    public IReadOnlyDictionary&lt;string, TreeNode&gt; Children =&gt; _children;

    public void Push(IEnumerable&lt;string&gt; pathParts)
    {
        var currentNode = this;
        foreach (var pathPart in pathParts)
        {
            currentNode = currentNode.GetOrCreateChildNode(pathPart);
        }
    }

    private TreeNode GetOrCreateChildNode(string pathPart)
    {
        if (_children.TryGetValue(pathPart, out var childNode))
            return childNode;

        childNode = new TreeNode();
        _children[pathPart] = childNode;
        return childNode;
    }
}
</code></pre>
<p>Then we create a root node and fill the tree from here:</p>
<pre><code>var rootNode = new TreeNode();
foreach (var line in File.ReadLines(fileName))
{
    rootNode.Push(line.Split('/'));
}
</code></pre>
<p>Finally we traverse the tree to display desired information:</p>
<pre><code>void Print(TreeNode treeNode, string path)
{
    foreach (var kvp in treeNode.Children)
    {
        var subPath = path is &quot;&quot; ? kvp.Key : path + '/' + kvp.Key;
        Console.WriteLine($&quot;{subPath}, {kvp.Value.Children.Count}&quot;);
        Print(kvp.Value, subPath);
    }
}
</code></pre>
<p>And call it like that:</p>
<pre><code>Print(rootNode, string.Empty);
</code></pre>
<p>Working code available <a href=""https://github.com/Orace/SO/tree/main/SO_78666607"" rel=""nofollow noreferrer"">here</a>.</p>
","1","Answer"
"78668874","78668248","<p>You'll want to parse it using a suitable grammar etc. If your list uses Python syntax you can use a library like astroid, e. g.:</p>
<pre class=""lang-py prettyprint-override""><code>from astroid import parse

list_code = '''
[
    ('example', 7),
    ('list', 'with'),
    'tuples',
    ()
]
'''

m = parse(list_code)
print(m.body[0].value.elts)
</code></pre>
<p>In this case <code>m.body[0].value.elts</code> will be a list of astroid AST nodes.</p>
<p>If you want actual python objects instead of AST nodes you can just use your 5th method:</p>
<pre class=""lang-py prettyprint-override""><code>list_code = '''
[
    ('example', 7),
    ('list', 'with'),
    'tuples',
    ()
]
'''

print(eval(list_code))
</code></pre>
<p>You got an error for this method because <code>PaginatedManagedEntityHeaders</code> was not defined. <code>eval</code> actually evaluates and runs python code, so you have to create/import every class/function that is called in the list before calling <code>eval</code>.</p>
","0","Answer"
"78668963","78653260","<p>I suspect that what you are actually doing is comparing a tuple type with a list type.</p>
<p>Here's some <code>terraform console</code> evaluations to demonstrate:</p>
<pre><code>&gt; type([&quot;arm64&quot;])
tuple([
    string,
])
&gt; type(tolist([&quot;arm64&quot;]))
list(string)
&gt; [&quot;arm64&quot;] == [&quot;arm64&quot;]
true
&gt; tolist([&quot;arm64&quot;]) == [&quot;arm64&quot;]
false
&gt; tolist([&quot;arm64&quot;]) == tolist([&quot;arm64&quot;])
true
</code></pre>
<p>Two values in Terraform can only be equal (as defined by <code>==</code>) if they are of exactly the same type. Terraform's automatic type conversion rules mean that <em>in most cases</em> we don't need to worry too much about the difference between a tuple type and a list type, but the <code>==</code> operator doesn't give Terraform any hints about what types you might have intended and so it must compare the values exactly as given, without any automatic type conversions.</p>
<p>If you force both expressions to be of type <code>list(string)</code> using the <code>tolist</code> function, as I did in the last expression from my console session above, then they will compare equal if both lists contain the same strings in the same order.</p>
","1","Answer"
"78672924","78653260","<p><a href=""https://stackoverflow.com/users/281848/martin-atkins"">@Martin Atkins</a> provided a very insightful answer, answering indeed your question of how to compare two lists.</p>
<p>On another side, I have a feeling that what you may want to do in your code is something like that</p>
<pre><code>contains(aws_lambda_function.this.architectures, &quot;arm64&quot;) ? &quot;something&quot; : &quot;something_else&quot;
</code></pre>
","-1","Answer"
"78674057","78668248","<p>The comments offered were critical in helping me arrive at a solution. I ended up needing to change <code>tzinfo=TzInfo(UTC)</code> to <code>tzinfo=datetime.timezone.utc</code> as it seems that the previous syntax is deprecated. So, the string representation of the list I use is:</p>
<pre><code>[(3479865,
  PaginatedManagedEntityHeaders(
  success=True, 
  count=0, 
  rows=[
  ManagedEntityHeader(
  case_role='Reference',
  display_name='Person A',
  entity_type='PERSON', 
  unique_id=247878382, 
  is_active='1', 
  date_created=datetime.datetime(2021, 10, 18, 16, 29, 6, 535000, tzinfo=datetime.timezone.utc)),
  ManagedEntityHeader(
  case_role='Reference', 
  display_name='Person B', 
  entity_type='PERSON', 
  unique_id=247563788, 
  is_active='0', 
  date_created=datetime.datetime(2021, 9, 8, 21, 4, 29, 631000, tzinfo=datetime.timezone.utc))]
))]
</code></pre>
<p>What looks like a function within the list ends up being a class from the API that generates the actual data. With the modified string representation of the list and the classes imported, a successful solution is the following:</p>
<pre><code>import os

from internal_package.swag.externalservice import PaginatedManagedEntityHeaders

from internal_package.swag.externalservice import ManagedEntityHeaders

import datetime

the_file = os.path.join(r&quot;test_fixture.json&quot;)

file_str = open(the_file).read()

meth_that_worked = eval(file_str)
</code></pre>
","0","Answer"
"78674942","78674911","<p>You need to iterate over your list and skip every other item so that you only grab the cities name as the key, then you can use i+1 to grab the coordinates</p>
<pre><code>cities = [
    'Kaivopuisto', ('24.950292890004903', '60.155444793742276'),
    'Laivasillankatu', ('24.956347471358754', '60.160959093887129'),
    'Kapteeninpuistikko', ('24.944927399779715', '60.158189199971673'), 
    'Viiskulma', ('24.941775800312996', '60.16098589997938'), 
    'Sepankatu', ('24.93628529982675', '60.157948300373846'), 
    'Hietalahdentori', ('24.929709900391629', '60.162225100108344'), 
    'Designmuseo', ('24.945959999554361', '60.163103199952786'),
    'Vanha kirkkopuisto', ('24.939149900447603', '60.165288299815245'), 
    'Erottajan aukio', ('24.944134928883898', '60.166911666939939')
]

# Create an empty dictionary
cities_dict = {}

# Step is 2 so that we skip the coordinates and only grab the cities as the key
for i in range(0, len(cities), 2):
    name = cities[i] 
    coordinates = cities[i+1]  
    cities_dict[name] = coordinates

print(cities_dict)
</code></pre>
","2","Answer"
"78674957","78674911","<p>one-liner solution</p>
<pre><code>mydict=dict(zip(mylist[0::2], mylist[1::2]))
</code></pre>
","1","Answer"
"78675323","78675314","<p>First store the itertools generated combinations in a set for fast membership testing.</p>
<pre><code>   combinations_of_5 = set(combinations(lst, 5))
</code></pre>
<p>Next filter your list into <code>collections.Counter</code>:</p>
<pre><code>   data = map(tuple, lst_of_lsts)
   c = Counter(comb for comb in data if comb in combinations_of_5)
   print(c.most_common(10))
</code></pre>
<p>That said, I think you may actually be looking for permutations rather than combinations.</p>
","1","Answer"
"78675365","78675314","<p>You can simply use the Counter, as <code>[Counter(l) for l in lst_of_lsts]</code>:</p>
<h3>Code 1</h3>
<pre><code>from collections import Counter

lst_of_lsts = [
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
    [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]
]

counters = [Counter(l) for l in lst_of_lsts]
res = [counter.most_common(1)[0] for counter in counters]
print(counters)
print(res)


</code></pre>
<h3>Prints</h3>
<pre><code>[Counter({'d': 2, 'c': 2, 'b': 2, 'e': 1, 'a': 1}), Counter({'e': 2, 'b': 2, 'c': 2, 'a': 1}), Counter({'a': 4, 'b': 2, 'd': 1}), Counter({'c': 2, 'd': 2, 'a': 1, 'b': 1, 'e': 1}), Counter({'e': 1, 'd': 1, 'c': 1, 'b': 1, 'a': 1})]
[('d', 2), ('e', 2), ('a', 4), ('c', 2), ('e', 1)]
</code></pre>
<hr />
<h3>Code 2</h3>
<pre><code>from collections import Counter

lst_of_lsts = [
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
    [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]
]

counter = Counter([tuple(sorted(l)) for l in lst_of_lsts])
print(counter.most_common(1)[0])

</code></pre>
<h3>Prints</h3>
<pre><code>(('a', 'b', 'b', 'c', 'c', 'd', 'd', 'e'), 1)
</code></pre>
<hr />
<h3>Code 3</h3>
<pre><code>from collections import Counter

lst_of_lsts = [
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
    [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]
]

counter = Counter([tuple(sorted(set(l))) for l in lst_of_lsts])
print(counter)
print(counter.most_common(1)[0])
</code></pre>
<h3>Prints</h3>
<pre><code>Counter({('a', 'b', 'c', 'd', 'e'): 3, ('a', 'b', 'c', 'e'): 1, ('a', 'b', 'd'): 1})
(('a', 'b', 'c', 'd', 'e'), 3)
</code></pre>
<hr />
<h3>Code 4:</h3>
<pre><code>import string
from collections import Counter
from itertools import combinations

lst = string.ascii_lowercase[0:6]
combinations_of_5 = tuple(combinations(lst, 5))
# print(combinations_of_5)

lst_of_lsts = [
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;],
    [&quot;e&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;c&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;],
    [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;],
    [&quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]
]

res = Counter([tuple(sorted(l)) for l in lst_of_lsts if len(l) == len(set(l)) and len(l) == 5])
print(res)


</code></pre>
<h3>Prints</h3>
<pre><code>Counter({('a', 'b', 'c', 'd', 'e'): 1})
</code></pre>
","1","Answer"
"78678538","78668248","<p>Here is an approach that stores the data as a pickle.</p>
<pre><code>from internal_package.swag.externalservice import PaginatedManagedEntityHeaders

from internal_package.swag.externalservice import ManagedEntityHeaders

import datetime

list_string = &quot;&quot;&quot;[(3479865,
  PaginatedManagedEntityHeaders(
  success=True, 
  count=0, 
  rows=[
  ManagedEntityHeader(
  case_role='Reference',
  display_name='Person A',
  entity_type='PERSON', 
  unique_id=247878382, 
  is_active='1', 
  date_created=datetime.datetime(2021, 10, 18, 16, 29, 6, 535000, tzinfo=datetime.timezone.utc)),
  ManagedEntityHeader(
  case_role='Reference', 
  display_name='Person B', 
  entity_type='PERSON', 
  unique_id=247563788, 
  is_active='0', 
  date_created=datetime.datetime(2021, 9, 8, 21, 4, 29, 631000, tzinfo=datetime.timezone.utc))]
))]&quot;&quot;&quot;

the_list = eval(list_string)

with open(&quot;the_list.pkl&quot;, &quot;wb&quot;) as f:
    pickle.dump(the_list, f)
</code></pre>
<p>The stored list can then be retrieved for unit testing:</p>
<pre><code>with open(&quot;the_list.pkl&quot;, &quot;rb&quot;) as f:
    the_list = pickle.load(f)
</code></pre>
<p>I have to change <code>tzinfo=TzInfo(UTC)</code> to <code>tzinfo=datetime.timezone.utc</code> and import the functions that get called in the list.</p>
","0","Answer"
"78681785","78681724","<p>I'm not 100% sure about what you want to achieve, but judging by your desired output maybe something like this?</p>
<pre class=""lang-py prettyprint-override""><code>def split_list(lst):
    output = []
    temp = []
    for i in lst:
        if i != 0:
            temp.append(i)
        elif temp:
            output.append(temp)
            temp = []
    if temp:
        output.append(temp)
    return output
</code></pre>
","1","Answer"
"78681876","78681724","<p>It can be done quite easily by iterating the list and tracking a flag to know if we are currently filling a list of positive numbers, or if we are going through zeros. When we get a positive number and this flag is <code>true</code>, we create a new list of positive numbers and set this flag to <code>false</code>. If the flag is <code>false</code>, then we simply append this number to the current list of positive numbers. When we encounter a zero, we reset this flag to <code>true</code>, so the next time we hit a positive number, we create a new list for it:</p>
<pre class=""lang-py prettyprint-override""><code>def split_list(lst):
    results = []
    start_new_list = True
    for x in lst:
        if x &gt; 0:
            if start_new_list:
                results.append([])
                start_new_list = False
            results[-1].append(x)
        else:
            start_new_list = True
    return results


List = [1, 2, 3, 0, 0, 0, 0, 4, 5, 6, 0, 0, 0, 7, 8, 9]
print(split_list(List))
</code></pre>
<p>There is another way to do it in one line using <code>itertools.groupby</code> and list comprehension. The <code>itertools.groupby(it, key_func)</code> function accepts an iterable (our input list) and a <code>key_func</code> function to group the elements of the iterable by. It will return an iterator of the groups of our iterable. Each group is a <code>tuple</code> of the form <code>(key, g)</code> where <code>key</code> is the value the <code>key_func</code> function returned for this group and <code>g</code> is the group of elements matching this key. In our example, we can group the list by positive numbers:</p>
<pre class=""lang-py prettyprint-override""><code>result = groupby(List, key=lambda x: x &gt; 0)
</code></pre>
<p>For the <code>List</code> in your example this would return</p>
<pre class=""lang-py prettyprint-override""><code>[
    (True, [1, 2, 3]),  # First group of positive numbers
    (False, [0, 0, 0, 0]),  # Second group of zeros
    (True, [4, 5, 6]),  # 3rd group of positive numbers
    (False, [0, 0, 0, 0]),  # 4th group of zeros
    (True, [7, 8, 9]),  # Last group of zeros
]
</code></pre>
<p>Note that the groups returned by <code>groupby</code> aren't actually lists, but rather iterators, so we need to convert them into lists. We also need to discard the groups of zeros we don't want. Both of these goals can be accomplished with a list comprehension:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import groupby

List = [1, 2, 3, 0, 0, 0, 0, 4, 5, 6, 0, 0, 0, 7, 8, 9]
res = [list(g) for is_positive, g in groupby(List, key=lambda x: x &gt; 0) if is_positive]
print(res)
</code></pre>
","4","Answer"
"78682856","78681724","<p>Three solutions using an explicit iterator:</p>
<pre class=""lang-py prettyprint-override""><code>def split_list1(lst):
    results = []
    it = iter(lst)
    for x in it:
        if x:
            pos = [x]
            results.append(pos)
            for x in it:
                if not x:
                    break
                pos.append(x)
    return results

def split_list2(lst):
    results = []
    it = iter(lst)
    for x in it:
        if x:
            results.append([x, *iter(it.__next__, 0)])
    return results

def split_list3(lst):
    it = iter(lst)
    nx = it.__next__
    return [
        [x, *iter(nx, 0)]
        for x in it
        if x
    ]

List = [1, 2, 3, 0, 0, 0, 0, 4, 5, 6, 0, 0, 0, 7, 8, 9]
for f in split_list1, split_list2, split_list3:
    print(f(List))
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=tVJLTsMwEJVY-hSzjJGpaMOnrcQNuEFkWUW1hUXkWPZEMmdh0w3cgatwGhznU6d0waajLDJvxu-9Gc3Hl33H18YcDp8tqpv1z9X3XirwttYoau1xWdQe6ZZADCd9W6OHJ6h4AjTGf43SpaYEqcZBAG0i3D9KfQrCMevCNokm8Bk6CCx21kqzL2ITndXPkmcipsFToTFenNy9_alEhVEs0GFGbJ0ZnRAy38bqMts4mbsKDK4TkcaFEEYGFILBLeX_8VhmHs9YMiFBE2_OWE2ujhZMSMpTJRtpNlFKOCHP0UK3kyWDFYMyPs6-Owb3DB4y5JHBmsGGk45XdbzZ7bF89XlS9uNZpw0Wqug0Ke0veDjk8aB_AQ"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","0","Answer"
"78683042","78680199","<p>For a quick improvement:</p>
<p>All your combinations and all your lists are in the form of <strong>arrays</strong>.
If you construct these as <strong>sets</strong> instead; then you should get some improvement as the checks to see if elements are contained will be faster.</p>
","1","Answer"
"78683644","78680199","<p>I don't think you need PySpark for this at all.</p>
<p>As I alluded to in my comment, you can use a dict for indexing and set intersections to find the results.</p>
<p>On my machine, the original (<code>orig_main</code>) code takes about 1.5 minutes for the test data, and the new code is instantaneous. The results are different, though, because I think the original code has a bug where it mis-counts combinations like <code>x,x,x</code>, but that's up to you to decide (or it might be that my code has a bug too!).</p>
<p>With 150,000 combinations (not exactly 3.8 million) and 170,000 sequences, the new code is still instantaneous.</p>
<p>(You'll need the <code>tqdm</code> package for progress bars to run the below thing.)</p>
<pre><code>import random
import string
from collections import defaultdict, Counter

import tqdm


def generate_test_data():
    actions = list(string.ascii_letters)
    n_combs = 50_000
    n_seqs = 10_000
    comb_len = 3
    seq_len = 6

    assert (
        n_combs &lt; len(actions) ** comb_len
    ), &quot;can't generate more combinations than mathematically possible&quot;

    combinations_of_n = set()
    while len(combinations_of_n) &lt; n_combs:
        combinations_of_n.add(
            tuple(random.choices(actions, k=comb_len))
        )

    dfs = set()
    while len(dfs) &lt; n_seqs:
        dfs.add(tuple(random.choices(actions, k=seq_len)))

    return (combinations_of_n, dfs)


def print_result(combination_count):
    print(&quot;Top 5 most frequent combinations:&quot;)
    for comb, count in combination_count.most_common(5):
        print(f&quot;{comb}: {count} occurrences&quot;)


def orig_main(combinations_of_n, dfs):
    combination_count = Counter()

    for df in tqdm.tqdm(dfs):
        for comb in combinations_of_n:
            if all(elem in df for elem in comb):
                combination_count[comb] += 1

    print_result(combination_count)


def new_main(combinations_of_n, dfs):
    # generate a mapping of action -&gt; df indices
    dfs_by_actions = defaultdict(set)
    for df_index, df in enumerate(dfs):
        for action in df:
            dfs_by_actions[action].add(df_index)

    combination_count = Counter()

    for comb in tqdm.tqdm(combinations_of_n):
        # get the set of df indices that contain all elements of the combination
        df_indices = dfs_by_actions[comb[0]]
        for action in comb[1:]:
            df_indices &amp;= dfs_by_actions[action]
        combination_count[comb] += len(df_indices)

    print_result(combination_count)


if __name__ == &quot;__main__&quot;:
    combinations_of_n, dfs = generate_test_data()
    orig_main(combinations_of_n, dfs)
    new_main(combinations_of_n, dfs)

</code></pre>
","1","Answer"
"78691692","78691438","<p>I am unsure if I have understand the requirements.</p>
<p>I think this should do the trick:</p>
<pre><code>result = [groups_assigned[int(example[0], 10)][k] for k in example]
</code></pre>
<p>So instead of hard coding the index to <code>1</code> you can read the wanted index from the first element of the iterable (string or list in your case) and convert it to int. This way you have the a zero based index access.</p>
<p>If you change it to</p>
<pre><code>result = [groups_assigned[int(example[0], 10) - 1][k] for k in example]
</code></pre>
<p>You should have what you want. For a list starting with ['1', ...] you have the dict with index 0 for ['2', ...] you have the index 1 and so on.</p>
<p>Of course this way fails if you have only a list with three dicts and you have example lists like ['5', ...], or ['-1', ...]</p>
<p>But this could be easly done</p>
<pre><code>group1 = {&quot;1&quot;: [0, 0], &quot;2&quot;: [2, 2], &quot;3&quot;: [3, 3], &quot;4&quot;: [4, 4], &quot;5&quot;: [5, 5]}
group2 = {&quot;1&quot;: [2, 2], &quot;2&quot;: [0, 0], &quot;3&quot;: [4, 4], &quot;4&quot;: [5, 5], &quot;5&quot;: [6, 6]}
group3 = {&quot;1&quot;: [3, 3], &quot;2&quot;: [4, 4], &quot;3&quot;: [0, 0], &quot;4&quot;: [6, 6], &quot;5&quot;: [7, 7]}

group_selection = [group1, group2, group3]

def assigned_groups(example: list[str]) -&gt; list[list[int]]:
    global group_selection

    # -1 to convert 1 based index to 0 based index
    index = int(example[0], 10) - 1
    if not (0 &lt;= index &lt; len(group_selection)):
        raise ValueError(&quot;first element of example is invalid&quot;)

    return [group_selection[index][k] for k in example]
</code></pre>
","1","Answer"
"78691723","78691438","<p>this should do</p>
<pre><code>result = [group_selection[int(example[0])-1][x] for x in example]
</code></pre>
","1","Answer"
"78691740","78691438","<pre><code>#declare variables group1, group2, group3 and their values as key, value pair of a dict 
dct =   {'group1' : {'1': [0, 0], '2': [2, 2], '3': [3, 3], '4': [4, 4], '5': [5, 5]},
         'group2' : {'1': [2, 2], '2': [0, 0], '3': [4, 4], '4': [5, 5], '5': [6, 6]},
         'group3' : {'1': [3, 3], '2': [4, 4], '3': [0, 0], '4': [6, 6], '5': [7, 7]}}

example = ['2', '5', '3', '3', '1', '2']

for x in dct.keys():

    # As the first element of example should be the order(index + 1) of dct
    if example[0] in x:

        # declare the reference dict if the condition fulfilled  
        ref_dct = dct[x]
        break

# values of ref_dct if keys being elements of example. Create as list
ls = [ref_dct[x] for x in example]

print(ls) # Output : [[0, 0], [6, 6], [4, 4], [4, 4], [2, 2], [0, 0]]
</code></pre>
","0","Answer"
"78693584","78693574","<p>Split-off the index &amp; use it to append to the right list:</p>
<pre><code>sortd_dict[item.split('_')[1]].append(item)
</code></pre>
","2","Answer"
"78693588","78693574","<p>You can use the builtin <code>split</code> function to split the input items on <code>_</code> character.</p>
<pre class=""lang-py prettyprint-override""><code>sortd_dict = {}
def add_in_dict(k, v):
    if k not in d:
        sortd_dict[k] = [v]
    else:
        sortd_dict[k].append(v)

for item in master_list:
    add_in_dict(item.split(&quot;_&quot;)[-1], item)
</code></pre>
","4","Answer"
"78693924","78693574","<p>with <code>groupby</code></p>
<pre><code>from itertools import groupby

sort_func = lambda x: x[2]
master_list = sorted(master_list, key=sort_func)
res = {key: list(group) for (key, group) in groupby(master_list, key=sort_func)}
print(res)
</code></pre>
","3","Answer"
"78694277","78692207","<p>I think you may not realize that this code is actually enumerating (foreaching):</p>
<pre><code>mapDictionary[codeReviewId] = workItemBatchResponses
.SelectMany(x =&gt; x.value)
.Where(x =&gt; codeReviewResponseIds.Contains(x.fields.SystemId));
</code></pre>
<p>and for every iteration we call <code>codeReviewResponseIds.Contains(x.fields.SystemId)</code> which is enumerating as well.</p>
<p>The issue as mentioned in the comments is that we have <code>Where</code> and <code>Select</code> operations on the Enumerable that execute every time we enumerate it - which in our case are happening for every iteration of the &quot;outer enumeration&quot;.</p>
<p>The best way to illustrate is via a short example:</p>
<pre><code>static int _operationsExecuted = 0;

public static bool IsEvenOperation(int number) {
    _operationsExecuted++;
    return number % 2 == 0;
}

public static int MultiPlyBy10Operation(int number) {
    _operationsExecuted++;
    return number * 10;
}

static void Main() {

    IEnumerable&lt;int&gt; itemsToSearch = Enumerable.Range(1, 1000);
    IEnumerable&lt;int&gt; enumerableWithOperations = Enumerable.Range(1, 10)
        .Where(IsEvenOperation)
        .Select(MultiPlyBy10Operation);


    _operationsExecuted = 0;
    // this is really foreach
    List&lt;int&gt; found = itemsToSearch
        .Where(x =&gt; enumerableWithOperations.Contains(x))
        .ToList();

    Console.WriteLine(_operationsExecuted); // 14970
    Console.WriteLine(found.Count()); // 5 [20,40,60,80,100]

    _operationsExecuted = 0;
    found = new List&lt;int&gt;();
    foreach (var element in itemsToSearch) {
        if (enumerableWithOperations.Contains(element)) {
            found.Add(element);
        }
    }

    Console.WriteLine(_operationsExecuted); // 14970
    Console.WriteLine(found.Count()); // 5

    _operationsExecuted = 0;
    var materialized = enumerableWithOperations.ToList();
    Console.WriteLine(_operationsExecuted); // 15
    // 10 ops for IsEven
    // 5 ops for MultiplyBy10

    _operationsExecuted = 0;
    found = itemsToSearch
        .Where(x =&gt; materialized.Contains(x))
        .ToList();
    Console.WriteLine(_operationsExecuted); // 0
    Console.WriteLine(found.Count()); // 5

}
</code></pre>
<p>If we materialize we pay a cost of 15 operations, if we don't we pay 14970. That's mostly a factor of the length of the outer enumeration (1000). The bigger it is the slower it will run.</p>
","2","Answer"
"78694525","78694506","<p>Code review time.</p>
<pre><code>numbers = [2, 1, 3, 1, 2]
x = 2
</code></pre>
<p>Ok, good.
(I might have opted for index <code>i = 2</code>, but fine, whatever, LGTM.)</p>
<pre><code>get_shuffled_number = numbers[x]
</code></pre>
<p>This is just Wrong.
We choose a verb when naming a <code>def get_shuffled_number(...):</code> function,
and we choose a noun for such an assignment.
So prefer to assign <code>shuffled_number = ...</code>.</p>
<p>Choosing the wrong name affects how you and your colleagues
reason about the code.
And not in a good way.</p>
<p>What you wanted to do was</p>
<ul>
<li>shuffle</li>
<li>extract the x-th element</li>
<li>shuffle again</li>
<li>extract the x-th element again</li>
</ul>
<p>But you didn't do that.
You assigned the variable exactly once,
before the shuffle,
so understandably it never changed thereafter.</p>
<hr />
<p>As a separate item, you chose three distinct values
for a 5-element list.
Prefer to populate that list with five distinct values.
Even then, please understand that after a shuffle()
you would still have a 20% chance of the selected
number being unchanged.
Use a longer list of distinct values
if you wish to reduce that likelihood.</p>
","1","Answer"
"78694543","78694506","<p>The line <code>get_shuffled_number = numbers[x]</code> doesn't do what you're looking for. You seem to expect your print statement to see &quot;get_shuffled_number,&quot; then go back and find <code>numbers[x]</code>.</p>
<p>However, <code>get_shuffled_number</code> doesn't represent a process; it represents a value. In this case, when you first initialize it, the interpreter <em>immediately</em> looks into <code>numbers[x]</code>, pulls out the number 3, and puts that number into the variable.</p>
<p>In other words, <code>get_shuffled_number</code> doesn't mean &quot;whatever <em>is</em> at the x'th index of the list.&quot; It means &quot;whatever <em>was</em> at the x'th index of the list.&quot;</p>
<p>What you want to do instead is re-access <code>numbers</code> after you shuffled the list, without referring to <code>get_shuffled_number</code>. This code sample might help you understand the differences between the two approaches. (Of course, the numbers will be different.)</p>
<pre class=""lang-py prettyprint-override""><code>import random
numbers = [2, 1, 3, 1, 2]
x = 2 # I plan to import x from a dict with various values 

get_shuffled_number = numbers[x]
print(numbers)
print(get_shuffled_number) # Prints 3 in your example
random.shuffle(numbers) 

print(numbers) # Prints the list in its entirety

print(get_shuffled_number) # Prints 3 again, since g_s_n remembers what 
                           # it was set to first
print(numbers[x]) # Prints 2 in your example, since you're getting the
                  # current value instead of what you initially stored.
</code></pre>
","0","Answer"
"78694544","78694506","<pre><code>get_shuffled_number = numbers[x]
</code></pre>
<p>It seems that you expect this statement to establish a permanent formula; that <code>get_shuffled_number</code> shall always be equal to the third element of <code>numbers</code>, even if the contents of <code>numbers</code> changes.</p>
<p>No.  It doesn't work like that.  The assignment is performed <strong>once</strong>, and that's the end of it.  There is no ongoing relationship between <code>get_shuffled_number</code> and <code>numbers</code>.</p>
<p>(Excel does work like that, though.  Have you done a lot of work with Excel?)</p>
","3","Answer"
"78705093","78705016","<p>Coderbyte seems to be pre-processing the input you provided before passing it to the code.</p>
<p>So, it is taking <code>[&quot;1, 3, 4, 7, 13&quot;, &quot;1, 2, 4, 13, 15&quot;]</code> as <code>list</code> instead of a <code>string</code> (in VS-Code).</p>
<p>Here is the updated code: I have removed <em>&quot;Split the input string&quot;</em> part.</p>
<pre><code>def FindIntersection(strArr):
    # The lists are at indices 1 and 3 after splitting by '&quot;'
    first = strArr[0]
    second = strArr[1]
    
    # Convert the strings to lists of integers
    One = [int(x) for x in first.strip(&quot;[] &quot;).split(&quot;, &quot;)]
    Two = [int(x) for x in second.strip(&quot;[] &quot;).split(&quot;, &quot;)]
    
    # Find the intersection using set intersection
    intersection = list(set(One).intersection(Two))
    
    # Create a comma-separated string from the intersection
    strArr = &quot;, &quot;.join(map(str, intersection))
    
    # Return the result
    return strArr
# Keep this function call here
print(FindIntersection(input()))

</code></pre>
","2","Answer"
"78705097","78705016","<p>Your code is fine. Maybe coderbytes interpreter takes inputs as sys.argv so they are taken in whatever format you pass instead of string.</p>
","1","Answer"
"78705526","78705440","<p>This was trickier than I thought with <code>purrr</code>. It's simple to specify that you want to keep elements which have <code>&quot;col3&quot;</code> in the name but then you end up with a list with nested <code>NULL</code> elements. Here is a function to remove those:</p>
<pre class=""lang-r prettyprint-override""><code>remove_nulls &lt;- function(l) {
    l |&gt;
        # Replace nested NULLs with NULL
        map(\(x) if (is.null(unlist(x))) NULL else x) |&gt;
        # Remove NULLs at 2nd level or below
        map(compact) |&gt;
        # Remove NULLs at top level
        compact()
}
</code></pre>
<p>Then it's just a case of using <a href=""https://purrr.tidyverse.org/reference/modify_tree.html"" rel=""nofollow noreferrer""><code>purrr::modify_tree()</code></a> to modify every leaf, using a predicate function to define leaves as data frames, and searching for <code>&quot;col3&quot;</code>.</p>
<pre class=""lang-r prettyprint-override""><code>out &lt;- modify_tree(
    ls,
    is_node = negate(is.data.frame),
    leaf = \(x) if (&quot;col3&quot; %in% names(x)) x else NULL
) |&gt;
    remove_nulls()

identical(out, desired)
# [1] TRUE
</code></pre>
","3","Answer"
"78705849","78705440","<p>I know you ask for <code>purrr</code>, but here's a convenient one-liner with <code>rrapply</code>.</p>
<p><code>rrapply</code> is based on base R <code>rapply</code> and aims at applying functions recursively to a set of elements of a list. Here, I use the <code>condition</code> argument to specify which elements should be evaluated, and <code>how = &quot;prune&quot;</code> to remove any elements that are not matching the condition. <code>classes = &quot;data.frame&quot;</code> specifies that the <code>condition</code> function should be applied at the level of the <code>data.frame</code> (and not, for instance, at the levels of the columns of the data.frames).</p>
<pre class=""lang-r prettyprint-override""><code>library(rrapply)
rrapply(ls, condition = \(x) &quot;col3&quot; %in% names(x), classes = &quot;data.frame&quot;, how = &quot;prune&quot;)

# $b
# $b$df2
#   col1 col2 col3
# 1    1    6    1
# 2    2    7    2
# 3    3    8    3
# 4    4    9    4
# 5    5   10    5
# 
# 
# $c
# $c$df2
#   col1 col2 col3
# 1    1    6    1
# 2    2    7    2
# 3    3    8    3
# 4    4    9    4
# 5    5   10    5
</code></pre>
","6","Answer"
"78707746","78705016","<p>Your code is correct. It seems, in Coderbytes, the input is being pre-processed or interpreted differently. It's likely converting your input string [&quot;1, 3, 4, 7, 13&quot;, &quot;1, 2, 4, 13, 15&quot;] directly into a list before passing it to your function. For enhanced clarity and user experience, it would be beneficial for Coderbytes to explicitly detail how input is handled internally in their environment before users attempt to code within the instructions section, if this information is not already provided.</p>
<p>Here's my updated code using list comprehension for clarity, assuming Coderbytes handles input as mentioned above.</p>
<pre><code>def FindIntersection(strArr):
   # Assuming the input list contents are surrounded with extra quotes
   strArr2 = [item.strip('&quot;') for item in strArr]

   # Convert the list of two strings to two different list of integers
   One = [int(x) for x in strArr2[0].split(&quot;, &quot;)]
   Two = [int(x) for x in strArr2[1].split(&quot;, &quot;)]

   # Find the intersection using set intersection
   intersection = list(set(One).intersection(Two))

   # Create a comma-separated string from the intersection
   strArr = &quot;, &quot;.join(map(str, intersection))

   # Return the result
   return strArr

# Keep this function call here
print(FindIntersection(input()))
</code></pre>
","1","Answer"
"78709052","78708727","<p>The problem seems somewhat under-specified, but also over-specified. For example, what do tuples really have to do with it?</p>
<p>I'll presume to reframe it like so: you have a list of strings, <code>needles</code>, and another list of strings, <code>haystacks</code>. You want to find all the haystacks that contain a (at least one) needle.</p>
<p>First thing that comes to mind then is to preprocess the needles, to build a trie structure that allows searching for any of them more efficiently. Then march over the haystacks, one at a time, using that structure to test them.</p>
<p>Here's simple code off the top of my head. It doesn't sound like RAM will be a problem for you, but if it is there are fancier ways to build &quot;compressed&quot; tries. BTW, if it's the case that <em>all</em> your needles contain the 3-character substring <code>&quot; &amp; &quot;</code>, then best guess is that most haystacks won't, so you could get out cheap in most cases by checking for just that much first.</p>
<pre class=""lang-py prettyprint-override""><code>from collections import defaultdict

class Node:
    __slots__ = 'final', 'ch2node'

    def __init__(self):
        self.final = False
        self.ch2node = defaultdict(Node)

def add(trie, s):
    for ch in s:
        trie = trie.ch2node[ch]
    trie.final = True

# Does s[i:] start with a string in the trie?
def find(trie, s, i):
    for i in range(i, len(s)):
        if trie.final:
            return True
        ch = s[i]
        if ch in trie.ch2node:
            trie = trie.ch2node[ch]
        else:
            return False
    return trie.final

def search(trie, s):
    return any(find(trie, s, i) for i in range(len(s)))

needles = [&quot;a &amp; b&quot;, &quot;kik&quot;, &quot;c &amp; as&quot;]
haystacks = [&quot;sldjkfa &amp; b&quot;, &quot;c&amp;as&quot;, &quot;akiko&quot;, &quot;xc &amp; asx&quot;, &quot;kkc &amp; a&quot;]

root = Node()
for n in needles:
    add(root, n)
print(list(h for h in haystacks if search(root, h)))
</code></pre>
<p>Which prints</p>
<blockquote>
<p>['sldjkfa &amp; b', 'akiko', 'xc &amp; asx']</p>
</blockquote>
<h2>EDIT</h2>
<p>A comment mentioned the Aho-Corasick algorithm, which is roughly related to the simple trie code above, but fancier and more efficient (it effectively searches &quot;everywhere in the haystack simultaneously&quot;).</p>
<p>I haven't yet used it, but there's what looks like a capable Python package for that <a href=""https://pypi.org/project/pyahocorasick/"" rel=""nofollow noreferrer"">available on PyPI</a>.</p>
<h2>EDIT2</h2>
<p>I'm trying to get you unstuck, not give you a theoretically optimal solution. Try stuff! You may be surprised at how well even the simple code I gave may work for you.</p>
<p>I fiddled the above to create 5 million &quot;needles&quot;, each composed of 2 dictionary words (each at least 10 letters) separated by a single space. Building the trie took under 45 seconds (Python 3.12.4). Checking 5_008_510 lines against them took another 55 seconds, well under 2 minutes from start to finish. Contrast with &quot;the better part of 1000 hours&quot; you think you're facing now.</p>
<p>This with no attempt to &quot;optimize&quot; anything, beyond just using a dirt simple trie.</p>
<p>If I were to pursue it, I'd look first at memory use rather than speed. This consumed about 8.2GB of peak RAM. One way to cut that is to post-process the trie, to delete the empty dict on <code>final</code> nodes (or to not allocate a dict at all unless it's needed). But that would complicate the code some. Another is to look at using byte strings instead of Unicode strings. Then there's gonzo absurdities, like not using a <code>Node</code> class at all, instead using raw 2-tuples or 2-lists.</p>
<p>But given all you said about your problem, it would be &quot;good enough for me&quot; already.</p>
<h2>TRADEOFFS</h2>
<p>The great advantage of a trie is that it's insensitive to how many needles there are - the time to check a haystack is about the same whether there's one or a billion needles to look for.</p>
<p>The great potential disadvantage is the memory needed to hold a needle trie. 5 million needles is certainly on the large side, which is why I used as simple a trie structure as possible.</p>
<p>The tradeoff there is that for a haystack of length L, it may need to do L distinct searches. The related Aho-Corasick automaton only needs to do one search, regardless of how large L is. But that's a fancier trie variant that requires more memory and hairier code.</p>
<p>In the absence of any info about the distribution of your haystack (or even needle) sizes, &quot;first try the simplest thing that could possibly work&quot; rules. The potential quadratic (in L) time nature of the dirt-simple-trie search would kill it if, e.g., L could be as large as a million - but is a relatively minor thing if L won't get bigger than, say, 100 (being 100 times slower than theoretically necessary just doesn't matter much compared to saving a factor of 5 million).</p>
<p>Sketching all the possible tradeoffs would require a small book. To get more focused suggestions, you need to give quantified details about your expected needles and haystacks.</p>
<p>In case it's not obvious, here's a pragmatic thing: if the RAM for a needle trie is &quot;too large&quot;, you can shave it by about a factor of K, by doing K runs, using only <code>len(needles)/K</code> needles per run. In that case, the needles should be sorted first (common prefixes are physically shared in a trie, and sorting will bring needles with common prefixes together).</p>
<p>Or you can do a lot more work to build a disk-based trie.</p>
<p>The possible solution space is large.</p>
<h2>QUICK COMPARISON</h2>
<p>As above, 5 million needles, but I cut their average size about in half, from around 21 characters to about 10.5 - RAM pressure otherwise with the other package. Somewhat over 5 million haystacks. Most had len under 70, but a few in the hundreds. Few haystacks contained a needle (only 910 total).</p>
<p>For other code, I used <a href=""https://pypi.org/project/ahocorapy/"" rel=""nofollow noreferrer"">ahocorapy</a>, a pure-Python implementation of full-blown Aho-Corasick.</p>
<p>Memory use for the other package was significantly higher. Expected. Where my <code>Node</code> class contains only 2 members, its similar <code>State</code> class contains 7. It needs to save away a lot more info to guarantee worst-case linear-time performance.</p>
<p>For the same reason, building the needle trie was also slower. About 24 seconds for my code, about 60 for ahocorapy.</p>
<p>But you get what you pay for ;-) Searching the 5M+ haystacks took about 55 seconds for my code, but only about 22 for ahocorapy. Since needles were rarely found, this is close to a worst case for my code (it has to try <code>len(haystack)</code> distinct searches to conclude that no needles are present).</p>
<p>In all, my code was slightly faster overall, thanks to it doing much less work to build its dirt-dumb needle trie to begin with.</p>
<p>Under the PyPy implementation of Python, all this code runs at least twice as fast.</p>
<p>And with either code base, pickle could be used to save away the needle trie for reuse on a different collection of haystacks.</p>
<h2>ANOTHER STAB</h2>
<p>Here's new &quot;dirt dumb&quot; code, running faster, using less memory, better structured, and generalized to give the possibility of finding all contained needles. For terrible cases, consider a set of needles like</p>
<pre><code>x
ax
aax
aaax
aaaax
aaaaax
...
aaaaa.....aaax
</code></pre>
<p>and a haystack like <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay</code>. There are no matches, but one-at-a-time seaarching will take a long time. Full Aho-Corasick much faster.</p>
<pre class=""lang-py prettyprint-override""><code>from collections import defaultdict

class Node:
    __slots__ = 'final', 'ch2node'

    def __init__(self):
        self.final = &quot;&quot;
        self.ch2node = None

class Trie:
    def __init__(self):
        self.root = Node()
        self.leaders = set()

    # Add a needle.
    def add(self, s):
        if not s:
            raise ValueError(&quot;empty string not allowed&quot;)
        trie = self.root
        for ch in s:
            if (ch2node := trie.ch2node) is None:
                ch2node = trie.ch2node = defaultdict(Node)
            trie = ch2node[ch]
        trie.final = s
        self.leaders.add(s[0])

    # Search a haystack `s`. Generates a 2-tuple, (needle, i), for each needle the
    # haystack contains. The needle starts at s[i].
    def search(self, s):
        leaders = self.leaders
        root = self.root
        for i, ch in enumerate(s):
            if ch not in leaders:
                continue
            trie = root
            for i in range(i, len(s)):
                if ((ch2node := trie.ch2node)
                      and (ch := s[i]) in ch2node):
                    trie = ch2node[ch]
                    if trie.final:
                        yield trie.final, i - len(trie.final) + 1
                else:
                    break
</code></pre>
<p>Then, e.g.,</p>
<pre class=""lang-py prettyprint-override""><code>t = Trie()
for n in 'eat', 'tea', 'car', 'care', 'cares', 'arc':
    t.add(n)

for m in t.search('eateacarcares'):
    print(m)
</code></pre>
<p>displays:</p>
<pre><code>('eat', 0)
('tea', 2)
('car', 5)
('arc', 6)
('car', 8)
('care', 8)
('cares', 8)
</code></pre>
<h2>RABIN-KARP</h2>
<p>A different approach is to use the <a href=""https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"" rel=""nofollow noreferrer"">Rabin-Karp</a> (RK) algorithm to match multiple needles. A particular hash code is precomputed for each needle, and all the storage needed is a dict mapping a hash code to a list of the needles with that hash code.</p>
<p>Searching a haystack is just a matter of going over it once, left to right, computing RK's &quot;rolling hash&quot; for each window. The hash function is designed so that the next window's hash can be computed using a small &amp; fixed number (independent of window size) of arithmetic operations. If the hash is in the dict, directly compare each needle with that hash against the haystack window.</p>
<p>It's simple, fast, and very memory-frugal. BUT. Alas, it's only straightforward if all the needles have the same length, so that the window size is fixed. If there are K different needle lengths, it gets messy. You can, e.g., use K different rolling hashes, but that slows it by a factor of K. Or you can use a window size equal to the length of the shortest needle, but then the number of false positives can zoom.</p>
<p>I used the latter strategy, and couldn't make it competitive under CPython. However, PyPy excels at speeding Python code doing arithmetic on native machine-size ints, and speed was comparable under that. Memory use was 10x smaller, a massive win. RK is also good at avoiding pathological cases, although that's probabilistic, not guaranteed.</p>
<h2>FOR SHORT--BUT NOT TOO SHORT--NEEDLES</h2>
<p>Now that we know your needles are neither tiny nor huge, this should yield a nice speedup, and requires vastly less memory:</p>
<p>EDIT: added <code>leaders</code>, which gives a highly significant speedup on my data.</p>
<p>EDIT: in searching, <code>.startswith()</code> avoids needing to construct a new string object.</p>
<pre class=""lang-py prettyprint-override""><code>class RK: # not Rabin-Karp, but inspired by it
    def __init__(self):
        from collections import defaultdict
        self.needles = []
        self.h2ns = defaultdict(list)
        self.leaders = set()

    def add(self, s):
        if not s:
            raise ValueError(&quot;empty string not allowed&quot;)
        if self.h2ns:
            raise ValueError(&quot;cannot add() after finalize() called&quot;)
        self.needles.append(s)
        self.leaders.add(s[0])

    def finalize(self):
        h2ns = self.h2ns
        if h2ns:
            return # already finalized
        w = self.w = min(map(len, self.needles))
        for n in self.needles:
            h2ns[hash(n[:w])].append(n)
        del self.needles

    def search(self, s):
        if not self.h2ns:
            raise ValueError(&quot;must call finalize() before search()&quot;)
        h2nsget = self.h2ns.get
        w = self.w
        leaders = self.leaders
        for i in range(len(s) - w + 1):
            if (s[i] in leaders
                  and (ns := h2nsget(hash(s[i : i + w])))):
                for n in ns:
                    if s.startswith(n, i):
                        yield n, i
</code></pre>
<p>Then, e.g.,</p>
<pre class=""lang-py prettyprint-override""><code>t = RK()
for n in 'eat', 'tea', 'car', 'care', 'cares', 'arc', 's':
    t.add(n)
t.finalize()

for m in t.search('eateacarcares'):
    print(m)
</code></pre>
<p>prints</p>
<pre><code>('eat', 0)
('tea', 2)
('car', 5)
('arc', 6)
('car', 8)
('care', 8)
('cares', 8)
('s', 12)
</code></pre>
<p>The searching part isn't actually faster, but <code>finalize()</code> is very much faster than building a trie. The length of the shortest needle is vital: the shorter it is, the more likely searching will have to weed out &quot;false positives&quot;.</p>
<p>On my same test data, total time from start to finish is about 15 seconds with this.</p>
<p>Variant: why hash at all? <code>h2ns</code> could instead map a w-character string to the needles starting with that string. Hashing would still occur, of course, but under the covers, as part of Python doing the dict lookup. It makes little difference to speed, but boosts memory use (w-character dict keys require more space than machine int keys). That in turn can be reduced by storing <code>needle[w:]</code> in the lists instead, for a possible reduction in total character storage needed. But that makes <code>finalize()</code> slower - slicing isn't free. All such variants look &quot;good enough&quot; to me.</p>
","5","Answer"
"78709149","78708727","<p>This would require some complex data structures to run efficiently, done the proper way - in a way that the term on the second list can be found from the search term in a better than linear form.</p>
<p>For example, if the search term is fixed (always both strings concatenated with an <code>&amp;</code>, and always come in the beginning of the string in the target (list2) list, it would be a matter of sorting that second list, and making a binary search on it - that would allow you to retriev items proportional to LOG(N)  (where N is the number of items on list2).</p>
<p><a href=""https://stackoverflow.com/questions/60244988/how-can-i-use-the-fts5-extension-with-the-sqlite3-python-module-with-python-3-7"">How can I use the FTS5 extension with the sqlite3 python module with Python 3.7?</a></p>
<p>If, however, the search term won't be always in the beginning of the strings in list2, you will need some other data structure, like a Trie. A nice trie implementation could likely handle this amount of data. I have a pure-python one, which makes use of some high-level data-structures under the hood, and would not be able to handle anything close to 5 million phrases.</p>
<p>But then, you can just drop your phrases to a database, add a full-text search index to the &quot;list2&quot; table, and just query it.</p>
<p>Even the sqlite3 DB shipped with Python has full-text search on - check this question - the answers include snippets on how to use it.
By backing the 5 million phrases to disk, which sqlite can do, you should have no memory constraints:</p>
<p><a href=""https://stackoverflow.com/questions/60244988/how-can-i-use-the-fts5-extension-with-the-sqlite3-python-module-with-python-3-7"">How can I use the FTS5 extension with the sqlite3 python module with Python 3.7?</a></p>
","2","Answer"
"78709464","78709357","<p>I think the section where you're comparing whether the value is equal to 2 or 3 is not behaving as expected. The python &quot;or&quot; operator works as OR(value on left, value on right), so if you write &quot;i == 2 or 3&quot; this is actually OR(i == 2, 3) and will always return true since the value on the right is greater than 0 and considered True.</p>
<p>It should be &quot;i == 2 or i == 3&quot; instead (which would be OR(i==2,i==3)). Same idea for &quot;k&quot;,&quot;j&quot;, and &quot;l&quot;.</p>
<p>Old:</p>
<pre><code>    box_b = list()

for i in range(1, 5) :
    if i == 1 :
        box_b.append(0)
    if i == 2 or 3 :
        box_b.append([0, 1])
    if i == 4 :
        box_b.append([0, 0, 1])
    print(i,box_b)
</code></pre>
<p>New:</p>
<pre><code>box_b = list()

for i in range(1, 5) :
    if i == 1 :
        box_b.append(0)
    if i == 2 or i == 3 :
        box_b.append([0, 1])
    if i == 4 :
        box_b.append([0, 0, 1])
    print(i,box_b)
</code></pre>
","0","Answer"
"78709488","78709357","<p>This is how simulating the problem would look like:</p>
<pre><code>import random

random.seed(1)


def calc_prob(bag, sims):
    def pick():
        card = None
        while card is None:
            card = random.choice(bag)
            if card is not None:
                bag[card] = None
                break
        return card

    eights = 0
    blacks = 0
    for _ in range(sims):
        box_b = []
        for _ in range(4):
            card = pick()
            if card == 1:
                box_b.append(0)
            elif card == 2 or card == 3:
                box_b.extend([0, 1])
            elif card == 4:
                box_b.extend([0, 0, 1])

        if len(box_b) == 8:
            eights += 1
            if box_b.count(1) == 2:
                blacks += 1

    return blacks / eights if eights else 0


sims = 100000
bag = [1, 2, 3, 4] * (sims + 1)
print(calc_prob(bag, sims))


</code></pre>
<h3>Prints</h3>
<pre><code>0.08484606447865234
</code></pre>
<h3>Note:</h3>
<ul>
<li>Every time you pick a card, the card should be removed from the bag and that card is no longer in the &quot;pool&quot; of cards.</li>
</ul>
","0","Answer"
"78709640","78709598","<p>I think set creation is taking most of the tim as it involves hashing each element, as mentioned by @tim-peters,.</p>
<p>Here, I have created set and list before performing a search operation and the search time seems to be a lot faster for sets than that of list.</p>
<pre><code>import random
import timeit

def setup(n):
    data = list(range(n))
    random.shuffle(data)
    return set(data), data

def test_set(s, value):
    return value in s

def test_list(l, value):
    return value in l

n = 1000000
s, l = setup(n)

# Test with a value that's guaranteed to be in both
value_in = random.choice(l)

# Test with a value that's guaranteed not to be in either
value_out = n + 1

print(&quot;Searching for a value that exists:&quot;)
print(&quot;Set:&quot;, timeit.timeit(lambda: test_set(s, value_in), number=1000))
print(&quot;List:&quot;, timeit.timeit(lambda: test_list(l, value_in), number=1000))

print(&quot;\nSearching for a value that doesn't exist:&quot;)
print(&quot;Set:&quot;, timeit.timeit(lambda: test_set(s, value_out), number=1000))
print(&quot;List:&quot;, timeit.timeit(lambda: test_list(l, value_out), number=1000))
</code></pre>
<h2>Result:</h2>
<pre><code>Searching for a value that exists:
Set: 0.00023545200008356915
List: 28.11379308300002

Searching for a value that doesn't exist:
Set: 0.0002436169999100457
List: 52.67750670600003
</code></pre>
","4","Answer"
"78709662","78709598","<p>Python sets use hashmaps, which makes them really fast at lookups. But since hashmaps require you to hash every element, they take a long time to construct. Lists don't do any hashing, which makes construction much faster and lookups much slower.</p>
<p>Searching is pretty fast in either case anyways, so for just one lookup, execution time will be dictated mostly by construction. The set lookup will only outpace the list lookup if you're doing a whole lot of searches with the same set; otherwise, the construction difference will simply be too great.</p>
<p>You can verify that set/list creation is the bottleneck - as well as that set construction is slower than list construction - by removing the lookup from your <code>timeit</code> calls and just creating the set/list:</p>
<pre><code>python -m timeit -n 100 &quot;set(range(1000000))&quot;

python -m timeit -n 100 &quot;list(range(1000000))&quot;
</code></pre>
<p>For me, the first call took about twice as long as the second, and there was very little difference between these calls and the ones that included <code>300 in</code>.</p>
","2","Answer"
"78709674","78709598","<p>My original comment, which I was asked to incorporate into this answer (good idea!): Lookup time accounts for very little of what you're timing. You're mostly timing how long it takes just to do the <code>set(range(1000000))</code> and <code>list(range(1000000))</code> parts. Building the set/list to begin with are far more expensive than the lookup. Use the <code>-s</code> argument to take the setup cost out of what you're timing.</p>
<p>Elaborating on my comment, and since other answers didn't show the use of <code>-s</code>, here it is:</p>
<pre><code>$ python -m timeit -n 100 -s &quot;n = 1; c = set(range(1000000))&quot; &quot;n in c&quot;
100 loops, best of 5: 46 nsec per loop

$ python -m timeit -n 100 -s &quot;n = 1; c = list(range(1000000))&quot; &quot;n in c&quot;
100 loops, best of 5: 45 nsec per loop

$ python -m timeit -n 100 -s &quot;n = 10000; c = set(range(1000000))&quot; &quot;n in c&quot;
100 loops, best of 5: 60 nsec per loop

$ python -m timeit -n 100 -s &quot;n = 10000; c = list(range(1000000))&quot; &quot;n in c&quot;
100 loops, best of 5: 71.4 usec per loop
</code></pre>
<p>The code given to <code>-s</code> is <em>not</em> timed. It lets you set up objects for the timed code to use. <code>n in c</code> is the only code timed now.</p>
","8","Answer"
"78710706","78710656","<pre><code>starting_list = [1, 5, 3]
increment = 7

additional_items = 5

for index in range(3, 3+additional_items):
    starting_list.append(starting_list[index - 1] + increment)

print(starting_list)
</code></pre>
<p>Just remove the enumerate, and just iterate over indexes.
Additionally, instead of writting <code>3</code>, if your goal is to always start at the end of the previous list, you can use it as a constant.</p>
<p>Therefor, you may change your code like that :</p>
<pre><code>starting_list = [1, 5, 3]
increment = 7

additional_items = 5 # number of additional_items you want 
initial_list_size = len(starting_list)
final_list_size = initial_list_size + additional_items

for index in range(initial_list_size, final_list_size):
    starting_list.append(starting_list[index - 1] + increment)

print(starting_list)
</code></pre>
","0","Answer"
"78710711","78710656","<blockquote>
<p>by taking the <strong>last value</strong> and adding a constant to it</p>
</blockquote>
<p>You can get the last value of the list using <code>starting_list[-1]</code>. This removes the need for the index variable altogether, simplifying the code like this:</p>
<pre class=""lang-py prettyprint-override""><code>starting_list = [1, 5, 3]
increment = 7

additional_items = 5

for _ in range(additional_items):
    starting_list.append(starting_list[-1] + increment)

print(starting_list)
</code></pre>
","5","Answer"
"78711218","78710656","<p>Just for the sake of it, you could do this (though it's actually less readable than the accepted answer):</p>
<p><code>starting_list.extend(range(starting_list[-1] + increment, starting_list[-1] + increment * (additional_items + 1), increment))</code></p>
","0","Answer"
"78713451","78613621","<p>A couple of other methods to try:</p>
<pre class=""lang-py prettyprint-override""><code>found = len([c['type'] for c in universe_creatures if c['type'] == typ]) &gt; 0
</code></pre>
<p>or</p>
<pre class=""lang-py prettyprint-override""><code>any(filter(lambda c: c['type'] == typ, universe_creatures))
</code></pre>
<p>The upside of these approaches is that it is quite easy to get the dictionaries which match you criteria.</p>
","0","Answer"
"78714034","78613621","<p>Inspired by @chepner</p>
<pre class=""lang-py prettyprint-override""><code>def logAndReturn(i):
    print(&quot;evaluating:&quot;, i)
    return i

found_return_immediately = any(logAndReturn(i) == 1 for i in range(3))
print(&quot;===separator===&quot;)
found_return_after_loop_end = 2 in (logAndReturn(i) for i in range(3))
</code></pre>
<p>output:</p>
<pre><code>evaluating: 0
evaluating: 1
===separator===
evaluating: 0
evaluating: 1
evaluating: 2
</code></pre>
<p>Although, your search operation in a <strong>list</strong> is in the time complexity of O(n). If your list is really big, you should consider using other data structure like dictionary or say, a <a href=""https://en.wikipedia.org/wiki/Hash_table"" rel=""nofollow noreferrer"">Hash Table</a></p>
","0","Answer"
"78714126","78714113","<p>This can be done using two nested calls to <code>zip</code>:</p>
<pre><code>list_a = [1, 2, 3, 4, 5]
list_b = [6, 7, 8, 9, 10]
list_c = [11, 12, 13, 14, 15]
list_d = [16, 17, 18, 19, 20]

lists = [list_a, list_b, list_c, list_d]

output = [y for x in zip(*lists) for y in zip(x, x[1:])]

print(output)
</code></pre>
<p>Output:</p>
<pre><code>[(1, 6), (6, 11), (11, 16), (2, 7), (7, 12), (12, 17), (3, 8), (8, 13), (13, 18), (4, 9), (9, 14), (14, 19), (5, 10), (10, 15), (15, 20)]
</code></pre>
<p>The first call to zip produces tuples of the first element, second element, etc of each list.</p>
<p>The second call to zip creates pairs of (first, second), (second, third), (third, fourth), etc.</p>
","2","Answer"
"78714191","78714113","<p>Solution using <code>map</code> and <code>itertools</code></p>
<pre><code>import itertools
list_a = [1, 2, 3, 4, 5]
list_b = [6, 7, 8, 9, 10]
list_c = [11, 12, 13, 14, 15]
list_d = [16, 17, 18, 19, 20]
result = list(itertools.chain.from_iterable(map(lambda a,b,c,d:((a,b),(b,c),(c,d)),list_a,list_b,list_c,list_d)))
print(result)
</code></pre>
<p>gives output</p>
<pre><code>[(1, 6), (6, 11), (11, 16), (2, 7), (7, 12), (12, 17), (3, 8), (8, 13), (13, 18), (4, 9), (9, 14), (14, 19), (5, 10), (10, 15), (15, 20)]
</code></pre>
","0","Answer"
"78714619","78714113","<pre class=""lang-py prettyprint-override""><code>from itertools import *

list_a = [1, 2, 3, 4, 5]
list_b = [6, 7, 8, 9, 10]
list_c = [11, 12, 13, 14, 15]
list_d = [16, 17, 18, 19, 20]
lists = list_a, list_b, list_c, list_d

result = [*chain(*map(pairwise, zip(*lists)))]

print(result)
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=NdBNDoIwEAXgfU8xSyBj4uAfLjyJIQYQQhOgTVti9Cpu2OidPIR3cKB19RYv30xmnm99d60apuk1umaVfb6NUT1IVxunVGdB9loZB4kQnbTuUsAJzoSQImwQtgi73BflXOwRDggZwhGB1qGpFsKGGBErYkZ_d11ahsSSmBLbNFjLpV-LPsuQVcirEKa2Y-fmKUnVFnKIkr7QkS6kuUlbIzykjpJlWBzHuRDayMFFXsX-6HD7_wc_"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","0","Answer"
"78715466","78715435","<p>Assuming the provided string contains the first value as a key and the second is the value in the provided string</p>
<pre><code>value1/672/value2/32/value3/21413
</code></pre>
<p>Here's how you can achieve the above:</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        string input = &quot;value1/672/value2/32/value3/21413&quot;;
        string[] parts = input.Split('/');
        var dictionary = parts
            .Select((value, index) =&gt; new { value, index })
            .Where(x =&gt; x.index % 2 == 0) // Select only even indexed elements as keys
            .ToDictionary(x =&gt; x.value, x =&gt; parts[x.index + 1]); // Use the next element as value      
        
        foreach (var kvp in dictionary)   // Loop for printing the result only
        {
            Console.WriteLine($&quot;{kvp.Key}: {kvp.Value}&quot;);   // Output the dictionary key and values
        }
    }
}
</code></pre>
<blockquote>
<p>Refer to the working .netfiddle <a href=""https://dotnetfiddle.net/aQ88Pv"" rel=""nofollow noreferrer"">here</a></p>
</blockquote>
","0","Answer"
"78715471","78715435","<p>If you really want to you can do this with a couple LINQ operators but i don't see a lot of added value there :</p>
<pre><code>var str = &quot;value1/672/value2/32/value3/21413&quot;;

// Array containing [value1, 672, value2, 32, value3, 21413
var arr = str.Split('/');

arr
    // Zip gives you pairs between 2 collections, here i'm zipping arr with itself with first element skipped
    // this gives both the key =&gt; value but also the value=&gt; key pairs
    // so this results in {value1, 672} which we want, but also in {672, value2} which we do not want
    .Zip(arr.Skip(1))
    // Keep only the even indexes to get rid of the pairs we don't want mentioned above
    .Where((item, index) =&gt; index % 2 == 0)
    // Convert those tuples to a dictionary
    .ToDictionary(item =&gt; item.First, item =&gt; item.Second);
</code></pre>
","0","Answer"
"78716661","78715435","<p>Toadd another approach, simple regex pattern will also work here:</p>
<p>just use pattern <code>([^/]+)/([^/]+)</code> which uses:</p>
<ul>
<li><code>(...)</code> - capturing group</li>
<li><code>[^/]+</code> - match one or more (<code>+</code> operator) character other from <code>/</code> (negated character class <code>[^/]</code></li>
</ul>
<p>This will match &quot;pairs&quot; of values delimited by <code>/</code>.</p>
<p>Here's C# code example:</p>
<pre><code>var values = Regex
    .Matches(
        &quot;value1/672/value2/32/value3/21413&quot;,
        &quot;([^/]+)/([^/]+)&quot;)
    .ToDictionary(x =&gt; x.Groups[1], x =&gt; x.Groups[2]);
</code></pre>
","1","Answer"
"78716795","78716763","<p>You are almost there, Just need to take out the value from the list.</p>
<pre><code>import csv
import random

CSVars = []

# Read the CSV file
with open('greeting.csv', 'r') as f:
    reader = csv.reader(f)
    for _ in range(16):  # Assuming there are 16 rows in the CSV
        # NOTE: You need to take the first value from the next(reader) because it 
         #is giving you a list.
        CSVars.append(next(reader)[0]) 
    print(random.choice(CSVars))

print(CSVars)
</code></pre>
","1","Answer"
"78716807","78716763","<p>Each iteration of <em>reader</em> returns a list. It does this because it's assumed that your CSV file has multiple columns per row. Each element of the list would represent a column value.</p>
<p>So, without limiting your list to a certain number of rows (not a good idea as you may not have as many rows in the CSV as you had hoped):</p>
<pre><code>import csv
import random

with open(&quot;greetings.csv&quot;, &quot;r&quot;, newline=&quot;&quot;) as f:
    reader = csv.reader(f)
    lst = [e[0] for e in reader]
    print(random.choice(lst))
</code></pre>
<p>...alternatively...</p>
<pre><code>import csv
import random

with open(&quot;greetings.csv&quot;, &quot;r&quot;, newline=&quot;&quot;) as f:
    reader = csv.reader(f)
    lst = list(reader)
    print(*random.choice(lst))
</code></pre>
","2","Answer"
"78716867","78716763","<p>If <code>greetings.csv</code> only contains one value per line, no need to consider it as a csv! A simple readlines will do:</p>
<pre><code>with open(&quot;greetings.csv&quot;) as f:
    CSVars = [line.strip() for line in f.readlines()]
</code></pre>
","0","Answer"
"78718427","78718381","<p>There is no such function in the standard library, but it wouldn't take much code to write one:</p>
<pre><code>def recursive_list(f, x, n):
    return [x] + [x := f(x) for i in range(n-1)]
</code></pre>
","2","Answer"
"78718430","78718381","<p>You could use <a href=""https://docs.python.org/3/library/itertools.html#itertools.accumulate"" rel=""nofollow noreferrer""><code>itertools.accumulate</code></a>, which works like reduce but gives you every intermediate value</p>
<pre><code>def repeated_application(f_unary, x0, n):
    def f_binary(acc, _):
        return f_unary(acc)
    return itertools.accumulate(range(n), f_binary, initial=x0)
</code></pre>
<p>You just have to turn the unary function into a binary one.</p>
<p>Note, this returns an iterator (more general that way).</p>
<p>Also, the way <code>n</code> is supposed to work is underspecified, you can twiddle with it to fit your requirements</p>
<p>I also want to point out, the straightforward way using basic language constructs is perfectly acceptable;</p>
<pre><code>def recursive_application(f, x0, n):
    acc = x0
    result = [acc]
    for _ in range(n):
        acc = f(acc)
        result.append(acc)
    return result
</code></pre>
<p>Or as a generator, it's very clean:</p>
<pre><code>def repeated_application(f, x0, n):
    acc = x0
    yield acc
    for _ in range(n):
        acc = f(acc)
        yield acc
</code></pre>
","5","Answer"
"78718606","78718381","<p>As suggested <a href=""https://stackoverflow.com/a/64904597/2314737"">here</a> use <a href=""https://docs.python.org/3/library/itertools.html#itertools.repeat"" rel=""nofollow noreferrer""><code>repeat</code></a> and <a href=""https://docs.python.org/3/library/functools.html#functools.reduce"" rel=""nofollow noreferrer""><code>reduce</code></a>:</p>
<pre><code>from itertools import repeat
from functools import reduce
def repeated(func, n):
    def apply(x, f):
        return f(x)
    def ret(x):
        return reduce(apply, repeat(func, n), x)
    return ret

recursive_list = [repeated(f, i) for i in range(5)]
</code></pre>
<p>The elements in the recursive list are functions.</p>
<p>For example:</p>
<pre><code>def f(x):
    return x*x
recursive_list[3](2)
# 256
</code></pre>
","-1","Answer"
"78718911","78718891","<p>It's not a matter of bias. By convention, lists are used for homogeneous data, and tuples are used for heterogeneous data, unless a requirement for mutability or hashability forces the opposite.</p>
<p>You can see this convention stated in places like the documentation for built-in types, where lists are <a href=""https://docs.python.org/3/library/stdtypes.html#lists"" rel=""noreferrer"">described</a> as</p>
<blockquote>
<p>mutable sequences, typically used to store collections of homogeneous items</p>
</blockquote>
<p>and tuples are <a href=""https://docs.python.org/3/library/stdtypes.html#tuples"" rel=""noreferrer"">described</a> as</p>
<blockquote>
<p>immutable sequences, typically used to store collections of heterogeneous data</p>
</blockquote>
<p>So for example, if <code>seq[2]</code> represents &quot;the third thing&quot; and <code>seq[3]</code> represents &quot;the fourth thing&quot;, you use a list, while if <code>seq[2]</code> represents &quot;income&quot; and <code>seq[3]</code> represents &quot;birthday&quot;, you use a tuple.</p>
","5","Answer"
"78718951","78718891","<p>I've been using Python since the start, and the intended use cases between lists and tuples have always been a bit fuzzy. Year after year, though, I tend to use tuples more.</p>
<p>While I have no compelling way to argue this case, I always thought a lot of it came down to dislike of the syntax in the first simple cases a programmer tried. Parentheses are &quot;overused&quot; in Python's syntax.</p>
<pre class=""lang-py prettyprint-override""><code>x = ()
</code></pre>
<p>looks more like a syntax error at first (&quot;which function did they intend to call?&quot;), while</p>
<pre class=""lang-py prettyprint-override""><code>y = 42,
</code></pre>
<p><em>still</em> looks like a syntax error to my eyes ;-)</p>
<p>The corresponding cases for lists are self-evident at first sight:</p>
<pre class=""lang-py prettyprint-override""><code>x = []
y = [42]
</code></pre>
<p>&quot;Readability counts&quot;, and first impressions are hard to shake off.</p>
<p>EDIT: BTW, there's another underappreciated reason to use tuples for &quot;very large&quot; sequences, when possible: when CPython's cyclic gc runs and determines that a tuple, and all its components, are immutable &quot;all the way down&quot;, the entire tuple is exempted from being scanned in future runs of cyclic gc (it's been proved that it can never become part of a cycle). The same isn't true of lists. Even if a list is immutable &quot;all the way down&quot;, there's nothing to stop the programmer from doing, e.g., <code>L[0] = L</code> next, making it part of a cycle.</p>
<p>Exempting large sequences from being scanned by cyclic gc can save lots of cycles in long-running programs. For that reason, e.g., I routinely create tuples with millions of ints rather than use lists.</p>
<p>Example:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; import gc
&gt;&gt;&gt; t = tuple(range(100))
&gt;&gt;&gt; gc.is_tracked(t)
True
&gt;&gt;&gt; gc.collect()
0
&gt;&gt;&gt; gc.is_tracked(t) # gc determined `t` can never be in a cycle
False
</code></pre>
","5","Answer"
"78720060","78718381","<p>Not in Python's <em><strong>standard</strong></em> library, but more-itertools (recommended by Python's <a href=""https://docs.python.org/3/library/itertools.html#itertools-recipes"" rel=""nofollow noreferrer"">itertools</a> documentation) has <a href=""https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.iterate"" rel=""nofollow noreferrer""><code>iterate</code></a> and <a href=""https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.take"" rel=""nofollow noreferrer""><code>take</code></a>:</p>
<pre><code>from more_itertools import iterate, take

f, x0, n = lambda x: 2*x, 1, 10

print(take(n, iterate(f, x0)))
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
</code></pre>
","4","Answer"
"78723913","78723343","<p>You need to use a <code>for</code>-loop to iterate through the list <code>alphabet</code>. Use an <code>if</code>-statement to check if the new index (<code>current_index+shift</code>) is over the length of the <code>alphabet</code> list. If <em><code>True</code></em>, index the <code>alphabet</code> list by the new index minus length of list will do. The following code will address your problem:</p>
<pre><code>def shift_word(character_list):
    l=character_list
    word, shift = input('enter word and shift amount; don\'t separate with comma').split(' ')
    shift = int(shift)
    res=''
    for t in word:
        ind = l.index(t)
        new = ind + shift
        if new &gt;= len(l):
            char = l[new - len(l)]
        else:
            char = l[new]
        res += char
    return res

if __name__ == '__main__':

    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
                'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 
                'y', 'z']

    r=shift_word(alphabet)
    print(r)
</code></pre>
<p>Console output:</p>
<pre><code>enter word and shift amount; don't separate with commahello 5
mjqqt

Process finished with exit code 0

</code></pre>
<p>Note: the code above is tested and executed in PyCharm Professional, Python 3.11.2. The code above should work fine in all Python 3 releases, though. Also, I think being able to change the character set every time is very convenient if you want different datasets; for example, if you want a words list someday. For this reason, I put the code inside a function that takes the character set as an argument.</p>
","0","Answer"
"78724899","78723343","<p>As I understand it, you are trying to implement something like <a href=""https://en.wikipedia.org/wiki/Caesar_cipher"" rel=""nofollow noreferrer"">Caesar's cipher</a>. To make it work correctly for both negative shifts and positive shifts, use modulo division. We need to find the index of the current character, add the shift and divide by the number of letters in your <code>alphabet</code> list. This will give you the index of the new character in the <code>alphabet</code> list. However, your description doesn't say anything now about if the character is not in your <code>alphabet</code> list, in that case I just leave the original character. Here is the code that shows how this can be done:</p>
<pre class=""lang-py prettyprint-override""><code>import string

alphabet = string.ascii_lowercase  # abcdefghijklmnopqrstuvwxyz


def encode_word_use_caesar_cipher(target_string: str, shift: int) -&gt; str:
    result_symbols = []
    alphabet_length = len(alphabet)
    for symbol in target_string:
        #  if the symbol is not in the alphabet list, symbol_index = -1
        symbol_index = alphabet.find(symbol)
        result_symbols.append(
            symbol if symbol_index == -1
            else alphabet[(symbol_index + shift) % alphabet_length]
        )
    return ''.join(result_symbols)


print(encode_word_use_caesar_cipher('hello', 5))  # mjqqt
print(encode_word_use_caesar_cipher('hello', -5))  # czggj
print(encode_word_use_caesar_cipher('hello world', 5))  # mjqqt btwqi
print(encode_word_use_caesar_cipher('hello', 26 * 2))  # hello
print(encode_word_use_caesar_cipher('hello', -26 * 2))  # hello
</code></pre>
","1","Answer"
"78724976","78723343","<p>As pointed out by @jasonharper in the comments, you can also concat the alphabet at the end of itself to avoid any issue with indexes.</p>
<pre class=""lang-py prettyprint-override""><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
alphabet_size = len(alphabet)
alphabet2 = alphabet + alphabet
</code></pre>
<p>Then ensure that the shift is smaller than the size of the alphabet, and you’re done:</p>
<pre class=""lang-py prettyprint-override""><code>def shift_word(word, n):
    # Account for large shifts (30 -&gt; 4)
    n %= alphabet_size

    return &quot;&quot;.join(
        alphabet2[alphabet2.index(letter)+n]
        for letter in word
    )
</code></pre>
<pre class=""lang-py prettyprint-override""><code>print(shift_word(&quot;&quot;.join(alphabet), 1))
# =&gt; &quot;bcdefghijklmnopqrstuvwxyza&quot;

print(shift_word(&quot;zaza&quot;, 100))
# =&gt; &quot;vwvw&quot;
</code></pre>
","1","Answer"
"78726519","78726485","<p>I can see that you are asking for a dynamic way to create variables from strings. But since you have imported pandas, I'm guessing you may be looking for a way to organise a Dataset and access the features without having to deal with raw strings everytime. If so, you can try this:</p>
<pre><code>import pandas as pd

listOfChars = ['feature1','feature2']
listOfBins = [[0,1,2],[15,20,30]]

df = pd.DataFrame(dict(zip(listOfChars, listOfBins)))
print(df.feature1) # Access the feature without the annoying raw string.
print(df.feature2)

</code></pre>
","3","Answer"
"78726559","78726485","<p>You can use <a href=""https://docs.python.org/3/library/functions.html#locals"" rel=""nofollow noreferrer""><code>locals</code></a> to update the current &quot;local symbol table&quot;, e.g.,</p>
<pre><code>listOfChars = ['feature1', 'feature2']
listOfBins = [[0,1,2], [15,20,30]]

l = locals()
for lob, feature in zip(listOfBins, listOfChars):
    l[feature] = lob

print(feature1, feature2)
[0, 1, 2] [15, 20, 30]
</code></pre>
<p>Just to note, I'd be very wary of playing about with <code>locals</code> in &quot;production&quot; code.</p>
","-1","Answer"
"78731925","78731904","<p>Use a single generic method with reflection to dynamically map JSON properties to model objects, avoiding multiple MapFromJson implementations. This centralizes and simplifies the mapping process across different types.</p>
<pre><code>public interface IJsonResult
{
}


public class JsonResult1 : IJsonResult
{
    public List&lt;Product&gt; ProductLists { get; set; }
}

public class JsonResult2 : IJsonResult
{
    public List&lt;User&gt; UserLists { get; set; }
}

public class Result1
{
    public string Price { get; set; }
    public string Id { get; set; }
}

public class Result2
{
    public string firstName { get; set; }
    public string lastName { get; set; }
    public string Id { get; set; }
}

public class Product
{
    public string Price { get; set; }
    public string ID { get; set; }
}

public class User
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string ID { get; set; }
}

public class DataService
{
    public async Task&lt;List&lt;T&gt;&gt; GetMethod&lt;T, J&gt;(string id, string jsonString) where J : IJsonResult
    {
        return await Task.Run(() =&gt; MapFromJson&lt;T, J&gt;(jsonString));
    }

    private List&lt;T&gt; MapFromJson&lt;T, J&gt;(string jsonString) where J : IJsonResult
    {
        var info = JsonConvert.DeserializeObject&lt;J&gt;(jsonString);
        var mylist = new List&lt;T&gt;();

        // Use reflection to get the lists and map to the result type
        var listProperty = typeof(J).GetProperties().FirstOrDefault(p =&gt; p.PropertyType.IsGenericType);
        if (listProperty != null)
        {
            var itemList = (IEnumerable&lt;object&gt;)listProperty.GetValue(info);

            foreach (var item in itemList)
            {
                var result = Activator.CreateInstance&lt;T&gt;();

                foreach (var prop in typeof(T).GetProperties())
                {
                    var itemProp = item.GetType().GetProperty(prop.Name, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
                    if (itemProp != null)
                    {
                        prop.SetValue(result, itemProp.GetValue(item));
                    }
                }

                mylist.Add(result);
            }
        }

        return mylist;
    }
}

// Usage
public async Task ExampleUsage()
{
    var dataService = new DataService();

    string jsonString1 = &quot;&quot;; // Your JSON string for Result1
    List&lt;Result1&gt; result1List = await dataService.GetMethod&lt;Result1, JsonResult1&gt;(&quot;someId&quot;, jsonString1);

    string jsonString2 = &quot;&quot;; // Your JSON string for Result2
    List&lt;Result2&gt; result2List = await dataService.GetMethod&lt;Result2, JsonResult2&gt;(&quot;someId&quot;, jsonString2);
}
</code></pre>
","-1","Answer"
"78732222","78731904","<p>We can do the following (not pretty but we can't modify <code>JsonResult</code>*)</p>
<pre><code>public async Task&lt;List&lt;TResult&gt;&gt; GetGenericMethod
&lt;TResult, TJsonResult, TItem&gt;(
string id, string a, Func&lt;TItem, TResult&gt; mapper
, Func&lt;TJsonResult, IEnumerable&lt;TItem&gt;&gt; getIterator)
 {
    TJsonResult info = JsonConvert.DeserializeObject&lt;TJsonResult&gt;(a);
    // shorter version
    //return getIterator(info)
    //.Select(mapper)
    //.ToList();
    List&lt;TResult&gt; mylist = new List&lt;TResult&gt;();
    IEnumerable&lt;TItem&gt; enumerable = getIterator(info);
    foreach (var item in enumerable) {
        mylist.Add(mapper(item));
    }
    return mylist;
}
</code></pre>
<p>Example use:</p>
<pre><code>var jsonResult1 = new JsonResult1();
jsonResult1.ProductLists = new List&lt;Product&gt;();
jsonResult1.ProductLists.Add(new Product { ID = &quot;3&quot;, Price = &quot;4&quot; });
jsonResult1.ProductLists.Add(new Product { ID = &quot;7&quot;, Price = &quot;8&quot; });

var serialized = JsonConvert.SerializeObject(jsonResult1);
Func&lt;Product, Result1&gt; mapper = p =&gt; new Result1 {
    Price = p.Price,
    Id = p.ID
}; // this can be a method and not a lambda

var result = await GetFirstMethod&lt;Result1, JsonResult1, Product&gt;(
&quot;&quot;, serialized, mapper, r =&gt; r.ProductLists);
foreach (var element in result) {
    Console.WriteLine(element);
}
</code></pre>
<p>I've originally used a derived type from <code>JSonResult1</code> that implemented <code>IEnumerable&lt;T&gt;</code> to get the enumerator to use, but inspired by another answer (from ipodtouch0218), there seems to be no real need for it and we can just have a <code>Func&lt;TJsonResult, IEnumerable&lt;TItem&gt;&gt;</code> for less verbose and just as functional code.</p>
","1","Answer"
"78732224","78731904","<p>This is the most probably convoluted answer imaginable, but you can use a dictionary to keep delegates to map between the three different types:</p>
<pre class=""lang-cs prettyprint-override""><code>public class Mapping {
    public static readonly Dictionary&lt;(Type,Type), Mapping&gt; RegisteredMappings = new();
    public Func&lt;object,IEnumerable&lt;object&gt;&gt; enumerate;
    public Func&lt;object,object&gt; map;
    
    public static void Register&lt;T,M,R&gt;(Func&lt;T, IEnumerable&lt;M&gt;&gt; enumerateFunc, Func&lt;M, R&gt; mappingFunc) where T : class where M : class where R : class {
        RegisteredMappings.Add((typeof(T), typeof(R)), new Mapping {
            enumerate = (object input) =&gt; enumerateFunc((T) input),
            map = (object input) =&gt; mappingFunc((M) input),
        });
    }
}

public static List&lt;R&gt; Get&lt;T,R&gt;(string id, string a) {
    if (!Mapping.RegisteredMappings.TryGetValue((typeof(T), typeof(R)), out Mapping mapping)) {
        throw new ArgumentException($&quot;No mapping exists between {typeof(T).Name} and {typeof(R).Name}&quot;);
    }

    T info = JsonConvert.DeserializeObject&lt;T&gt;(a);
    List&lt;R&gt; list = new();

    foreach (var item in mapping.enumerate(info)) {
        list.Add((R) mapping.map(item));
    }

    return list;
}
</code></pre>
<p>Example usage:</p>
<pre class=""lang-cs prettyprint-override""><code>public static void Main()
{
    // Example JSON for JsonResult1 (Product) and JsonResult2 (User)
    string productJson = &quot;{\&quot;ProductLists\&quot;: [{\&quot;Price\&quot;: \&quot;100.00\&quot;, \&quot;ID\&quot;: \&quot;XYZ\&quot;},{\&quot;Price\&quot;: \&quot;50.00\&quot;, \&quot;ID\&quot;: \&quot;ABC\&quot;}]}&quot;;
    string userJson = &quot;{\&quot;UserLists\&quot;: [{\&quot;FirstName\&quot;: \&quot;Mark\&quot;, \&quot;LastName\&quot;: \&quot;B.\&quot;, \&quot;ID\&quot;: \&quot;XYZ\&quot;},{\&quot;FirstName\&quot;: \&quot;Joseph\&quot;, \&quot;LastName\&quot;: \&quot;S.\&quot;, \&quot;ID\&quot;: \&quot;ABC\&quot;}]}&quot;;

    // Register the mapping from JsonResult1 -&gt; Result1 and JsonResult2 -&gt; Result2 (using the Product/User classes as an intermediary)
    Mapping.Register&lt;JsonResult1, Product, Result1&gt;(EnumerateProducts, MapProduct);
    Mapping.Register&lt;JsonResult2, User, Result2&gt;(EnumerateUsers, MapUser);

    // Example usage
    List&lt;Result1&gt; productResults = Get&lt;JsonResult1, Result1&gt;(&quot;unused&quot;, productJson);
    Console.WriteLine(string.Join(',', productResults.Select(product =&gt; product.Price)));
    // -&gt; 100.00,50.00

    List&lt;Result2&gt; userResults = Get&lt;JsonResult2, Result2&gt;(&quot;unused&quot;, userJson);
    Console.WriteLine(string.Join(',', userResults.Select(user =&gt; user.firstName)));
    // -&gt; Mark,Joseph
}

public static IEnumerable&lt;Product&gt; EnumerateProducts(JsonResult1 jr1) =&gt; jr1.ProductLists;
public static Result1 MapProduct(Product p) {
    return new Result1 {
        Price = p.Price,
        Id = p.ID,
    };
}
public static IEnumerable&lt;User&gt; EnumerateUsers(JsonResult2 jr2) =&gt; jr2.UserLists;
public static Result2 MapUser(User u) {
    return new Result2 {
        firstName = u.FirstName,
        lastName = u.LastName,
        Id = u.ID
    };
}
</code></pre>
<p>This way you only need to register each mapping once on boot, and then you never have to reference them again. Simply calling the function with the input/result types specified will work.</p>
","3","Answer"
"78733309","78692207","<p>Whenever you return an <code>IEnumerable&lt;&gt;</code> from a method you run the risk of returning an expensive to compute collection of items.</p>
<p>Your <code>Dictionary&lt;int, IEnumerable&lt;CodeReviewResponse&gt;&gt;</code> is very expensive as it has <code>SelectMany</code> on <code>workItemBatchResponses</code> and then does a <code>codeReviewResponseIds.Contains</code> to match up items. It's <code>O(n^2)</code> complexity.</p>
<p>The simplest solution is for you is to add <code>.ToArray()</code> when you build your dictionary:</p>
<pre><code>mapDictionary[codeReviewId] = workItemBatchResponses
    .SelectMany(x =&gt; x.value)
    .Where(x =&gt; codeReviewResponseIds.Contains(x.fields.SystemId))
    .ToArray();
</code></pre>
<p>That forces an iteration at the time you build the dictionary element.</p>
<p>Alternatively, it might be nicer to refactor your code entirely. It took me forever to figure out exactly what you were doing! I think I got it.</p>
<p>Try this instead:</p>
<pre><code>private Dictionary&lt;int, IEnumerable&lt;CodeReviewResponse&gt;&gt; MapToCodeReviewRequests2(
    IEnumerable&lt;WorkItemBatchResponse&gt; workItemBatchResponses,
    WiqlResponse? workItemRelations)
{
    var query =
        from wir in workItemRelations?.workItemRelations
        where wir.source is not null
        join crr in
            from wibr in workItemBatchResponses
            from x in wibr.value
            select x
                on wir.target.id equals crr.fields.SystemId
        group crr by wir.source;

    return query.ToDictionary(x =&gt; x.Key.id, x =&gt; x.ToArray().AsEnumerable());
}
</code></pre>
<p>Again, though, the <code>.ToArray()</code> is there to force the execution at build time.</p>
","0","Answer"
"78733866","78430579","<p>There are multiple ways to print lists in F#. The simplest way, as shown by citykid is as follows:</p>
<pre><code>let l = [&quot;one&quot;; &quot;two&quot;; &quot;three&quot;]
printf &quot;%A&quot; l
</code></pre>
<p>Otherwise, you can also use a for loop with string interpolation like so:</p>
<pre><code>let l = [&quot;one&quot;; &quot;two&quot;; &quot;three&quot;]
for s in l do
    printf $&quot;{s}, &quot;

</code></pre>
<p>the only slight advantage this has over the other method is that it'll work without adjustment for arrays/lists and can be modified quite simply to print multi-dimensional arrays neatly</p>
","0","Answer"
"78738293","78738226","<p>This is a good problem to use a for loop in:</p>
<pre class=""lang-py prettyprint-override""><code>max_word_len = 0
longest_word_index = -1

for i in range(len(list1)):
    if len(list1[i]) &gt; max_word_len:
        max_word_len = len(list1[i])
        longest_word_index = i

temp_long_word = list1[index]
del list1[longest_word_index]
list1.push(temp_long_word)
</code></pre>
<p>Of course, this example can be condensed a bit, but since you mentioned you were just starting I gave this so that you could understand what was happening clearly.</p>
","0","Answer"
"78739544","78738226","<p>Determine the length of the longest word. Then use a sort function that checks whether the current word has the maximum length or not.</p>
<pre><code>list1 = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;]
maxlen = len(max(list1, key=len))
list1.sort(key=lambda s: (len(s) == maxlen, s))
</code></pre>
<p>The result is <code>['five', 'four', 'one', 'six', 'two', 'seven', 'three']</code>. &quot;seven&quot; and &quot;three&quot; are the longest words and are placed at the end of the list.</p>
<p>The key function returns a tuple in which the first value is 1 if the length is equal to the maximum length, and 0 otherwise. This is consequently the first sort criterion. The second value is the string itself, so that the words are sorted alphabetically in their respective groups.</p>
","2","Answer"
"78740700","78740659","<p>How about something like this which reads files and put it in an list inside a dict:</p>
<pre><code>import os

folders = {
    'appointment': 'temp_folder/stats/appointments/',
    'data_transfer': 'temp_folder/stats/data_transfer'
}

folder_contents = {}

for folder_name, folder_path in folders.items():
    folder_contents[folder_name] = []
    files = os.listdir(folder_path)
    for file in files:
        name, extension = os.path.splitext(file)
        folder_contents[folder_name].append(name)

print(folder_contents)
</code></pre>
","1","Answer"
"78740760","78740659","<pre><code>from pathlib import Path

folders_dict = {}
for folder in Path(&quot;.&quot;).glob(&quot;*/&quot;):
    csv_files = list(Path(f&quot;./{folder}&quot;).glob(&quot;**/*.csv&quot;))

    if csv_files:
        folders_dict[str(folder)] = [
            str(file.relative_to(folder).with_suffix(&quot;&quot;)) for file in csv_files
        ]
</code></pre>
","-1","Answer"
"78741076","78740659","<p>Making some assumptions here.</p>
<ol>
<li>You don't want a recursive search</li>
<li>You're only interested in CSV files</li>
<li>You have a Python list of folder (directory) names that are accessible from your current working directory</li>
</ol>
<p>On that basis it's as simple as:</p>
<pre><code>from pathlib import Path

list_of_folders = [
    Path(&quot;temp_folder/stats/data_transfer&quot;),
    Path(&quot;temp_folder/stats/appointments&quot;),
]

result = {}

for folder in list_of_folders:
    key = folder.name
    for file in folder.glob(&quot;*.csv&quot;):
        result.setdefault(key, []).append(file.stem)

print(result)
</code></pre>
<p>Given the folder hierarchy in the OP and their contents, this would produce:</p>
<pre><code>{'data_transfer': ['united_configs', 'united_history', 'extraction', 'united_sync'], 'appointments': ['appointment_configs', 'united_history', 'appointment_history']}
</code></pre>
","1","Answer"
"78741137","78740659","<pre><code>
import os

def get_folder_contents_with_suffix(folder_paths, suffix):
    
    folders_dict = {}

    # Iterate through the folder paths
    for folder_name, folder_path in folder_paths.items():
        try:
            # List all files in the folder
            files = os.listdir(folder_path)
            # Filter and extract file names without extensions if they have the specified suffix
            file_names = [os.path.splitext(file)[0] for file in files if file.endswith(suffix) and os.path.isfile(os.path.join(folder_path, file))]
            # Add the folder name and its file names to the dictionary
            folders_dict[folder_name] = file_names
        except FileNotFoundError:
            print(f&quot;Error: The folder '{folder_path}' does not exist.&quot;)
        except Exception as e:
            print(f&quot;An error occurred while processing the folder '{folder_path}': {e}&quot;)

    return folders_dict

# Define your folder paths
folder_paths = {
    'appointment': 'temp_folder/stats/appointments/',
    'data_transfer': 'temp_folder/stats/data_transfer/'
}

# Define the suffix to filter files
suffix = '.csv'

# Get the folder contents with the specified suffix
folder_contents = get_folder_contents_with_suffix(folder_paths, suffix)

# Print the resulting dictionary
print(folder_contents)

</code></pre>
","2","Answer"
"78744890","78744879","<p>Try</p>
<pre><code>list_of_tuples = [(k, *v) for k, v in dictionary.items()]
</code></pre>
<p><code>*v</code> unpacks <code>v</code>.</p>
","9","Answer"
"78745163","78744879","<p>This works for me too:</p>
<pre class=""lang-py prettyprint-override""><code>list_of_tuples = [(key,*dictionary[key]) for key in dictionary]
</code></pre>
","0","Answer"
"78745861","78745844","<p>You need to initialize a blank matric by creating separate lists for each row in the transpose matrix.</p>
<pre><code># Creating a blank matrix with 0s of transpose shape
t_mtx = [[0 for _ in range(t_cols)] for _ in range(t_rows)]
</code></pre>
","1","Answer"
"78745885","78745844","<p>The problem is that you are using a list as an element of the list(as it should in the matrix), but the problem here is you are using all rows as the same list (that is <code>row</code>), and if you know that lists are mutable means they can update from anywhere and it will change for all reference of it.</p>
<p>Now in this case the t_mtx is using all rows as the same reference list(<code>row</code>), which means each time you update any row it will update all the rows, that is why your all rows are the same as the last row.</p>
<p>So here you can either create a new row each time or use the .copy() method to create a new copy of the row list.</p>
<pre class=""lang-py prettyprint-override""><code>t_mtx = [row.copy() for _ in range(t_rows)]
</code></pre>
<p>OUTPUT</p>
<p><a href=""https://i.sstatic.net/YB3NtZx7.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/YB3NtZx7.png"" alt=""enter image description here"" /></a></p>
<p>Hope you understand, sorry for my bad English.</p>
","1","Answer"
"78746534","78738226","<p>Find the max length, then sort by whether words have that length.</p>
<pre class=""lang-py prettyprint-override""><code>m = max(map(len, list1))
list1.sort(key=lambda s: len(s) == m)
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=ndDBCsIwDADQ-74i4GEtqOBNhPojskOnsRbXrSwtbN_iZRf9JGF_49ZW2FE8vaYkTdLHy_bu1tTD-K40uR0IOOUlqnwNMxTUMfRflEZKx2QAlUqEUMUy8mUEZzxhXmTYWTy7n3r902AxZfH07rrZj0czdTOyY0ZaVmG9hrAu51lwS03r2B17UUlTXiTQAaYsRhzEVMfTKyvb6tqx9FMC4h48W1yn1GGIfgA"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","0","Answer"
"78756504","78756393","<p>So here, you are creating an empty list here,</p>
<blockquote>
<p>List lstSentence = new List();</p>
</blockquote>
<p>but in below line you are trying to access the value at index 'i' of this list and then assign a new value &quot;*&quot;</p>
<blockquote>
<p>lstSentence[i] = &quot;*&quot;; //Error appears here</p>
</blockquote>
<p>you created an empty list to start with, which is why you are getting error in this line.</p>
<p>So possible solution would be to push these values in the list instead of assigning them by index</p>
<p>OR</p>
<p>create a list with some random values and then assign &quot;*&quot; or &quot; &quot; depending on your logic.</p>
","0","Answer"
"78757046","78756393","<p>If 'sSentence' always contains letters and/or white spaces, you can re-write your code to:</p>
<pre><code>List&lt;string&gt; lstSentence = new List&lt;string&gt;();
List&lt;string&gt; lstGuesses = new List&lt;string&gt;();

for (int i = 0; i &lt; sSentence.Length; i++)
{
    if (char.IsLetter(sSentence[i]))
    {
        sRevealedSentence += &quot;*&quot;;
        lstSentence.Add(&quot;*&quot;);
    }
    else
    {
        if (char.IsWhiteSpace(sSentence[i]))
        {
            sRevealedSentence += &quot; &quot;;
            lstSentence.Add(&quot; &quot;);
        }
    }
}
</code></pre>
<p>If you prefer to have a predefined list, you can use the following code (Remember that Enumerable requires System.Linq in your project).</p>
<pre><code>// lstSentence initialization with &quot;&quot;s
List&lt;string&gt; lstSentence = Enumerable.Repeat(&quot;&quot;,sSentence.Length).ToList();
List&lt;string&gt; lstGuesses = new List&lt;string&gt;();

for (int i = 0; i &lt; sSentence.Length; i++)
{
    if (char.IsLetter(sSentence[i]))
    {
        sRevealedSentence += &quot;*&quot;;
        lstSentence[i] = &quot;*&quot;;
    }
    else
    {
        if (char.IsWhiteSpace(sSentence[i]))
        {
            sRevealedSentence += &quot; &quot;;
            lstSentence[i] = &quot; &quot;; 
        }
     }
</code></pre>
<p>When a character is different from a letter or white space:</p>
<p>a) first approach will ignore it and 'lstSentence' will have fewer elements than the number of characters in 'sSentence' and</p>
<p>b) second approach will keep 'lstSentence' with same size of 'sSentence' and will insert the default character (&quot;&quot;, defined in list initialization) into 'lstSentence'.</p>
","0","Answer"
"78759579","78756393","<p>Unless you're doing something more with the lists which requires that they be lists, you can use arrays of stings instead:</p>
<pre><code>string[] lstSentence = new string[sSentence.Length];
</code></pre>
<p>This way it is easier to declare the size of the array early</p>
","-1","Answer"
"78759793","78759529","<p>You can't really process that file in the way you're approaching it. It's not entirely clear what data structure you're trying to end up with, but I'd suggest something like:</p>
<pre><code>exports = {
    'America': {1998: 30407.5, 1999: 31517.7, ...},
    'Asia': {1998: 50197.3, ...},
    ...
}
</code></pre>
<p>To get from your CSV file to that data structure, this'd be the code:</p>
<pre><code>exports = {}

with open(&quot;.../sgexports_dataset.csv&quot;) as f:
    reader = csv.reader(f)
    headers = next(reader)
    years = list(map(int, headers[1:]))  # [1998, 1999, ...]

    for row in reader:
        exports[row[0]] = dict(zip(years, map(float, row[1:])))
</code></pre>
<hr />
<p>Your approach was wrong because treated columns and rows the wrong way around. Each row is one area, not each column.</p>
","0","Answer"
"78760907","78759529","<p>The basic problem is that your code expects the csv file to be organized in a different way than it actually is.</p>
<p>Your code expects each csv row to have the year as the first column, then the America exports for that year as the second column, then the Asia exports for that year as the third column, etc etc.</p>
<p>But the csv file is not organized that way.</p>
","0","Answer"
"78761230","78761077","<p>I think that <code>Unsupported operation: add</code> happens because list is also constant in second case. So basically it is :</p>
<pre class=""lang-dart prettyprint-override""><code>  final Person person = const Person(const [&quot;Livia&quot;, &quot;Lima&quot;]); // analyser will say second const is redundant
</code></pre>
<p>And of course, because it is constant, it is immutable list.</p>
<p>In first case, code does not invokes constant constructor because it must not be constant in this context. In that case, you should use at least one <code>const</code> modifier to show your intensions to compiler.</p>
<p>So, yes. In first case <code>person</code> is not constant. In second case – it is constant indeed.</p>
<p>Speaking of <code>final</code> and immutability (second question) – no, list not necessarily immutable if it is <code>final</code>. In that context, it only means that one can not reassign field <code>names</code>. But modifying that list is not prohibited</p>
","1","Answer"
"78761508","78761470","<p>One way to do it if your item_properties is &quot;ordered and well behaved&quot;:</p>
<pre><code>df['desired_column'] = df['item_properties'].str[1].str['property_value']
</code></pre>
<p>Output:</p>
<pre><code>                         desired_column  
0                    [property_value_1]  
1  [property_value_1, property_value_2]  
2  [property_value_1, property_value_2] 
</code></pre>
","1","Answer"
"78761528","78761470","<p>You can first explode the <code>item_properties</code> column and from that column (which is a json) create a dataframe using <code>json_normalize</code> and then concat &quot;item_id&quot; column followed by filtering on <code>property_id</code></p>
<pre><code>t = df.explode(&quot;item_properties&quot;)
out = pd.concat([t[[&quot;item_id&quot;]].reset_index(drop=True), 
                 pd.json_normalize(t[&quot;item_properties&quot;])], axis=1)
out = out[out[&quot;property_id&quot;].eq(2)]
print(out)

   item_id  property_id property_name                        property_value
1        1            2        name_2                    [property_value_1]
3        2            2        name_2  [property_value_1, property_value_2]
5        3            2        name_2  [property_value_1, property_value_2]
</code></pre>
","1","Answer"
"78762581","78761077","<p>Defining a constructor as const just means your class can produce Immutable objects (meaning it only contains consts <strong>or</strong> final variables).</p>
<p>So this won't compile:</p>
<pre><code>class Person {
  List&lt;String&gt; names;

  const Person(this.names);
}
</code></pre>
<p>The <a href=""https://dart.dev/language/constructors#constant-constructors"" rel=""nofollow noreferrer"">documentation</a> states:</p>
<blockquote>
<p>Constant constructors don't always create constants. They might be
invoked in a non-const context.</p>
</blockquote>
<p>It further <a href=""https://dart.dev/language/classes#using-constructors"" rel=""nofollow noreferrer"">says</a>:</p>
<blockquote>
<p>Some classes provide constant constructors. To create a compile-time
constant using a constant constructor, put the const keyword before
the constructor name:</p>
<p><code>var p = const ImmutablePoint(2, 2);</code></p>
</blockquote>
<p>The part of the documentation you mentioned means that everything inside a constructor being called as const is also const. So the list being passed as a parameter is a const list in the second example. What that part of the documentation is saying not to do is:</p>
<pre><code> final Person person = const Person(const [&quot;Livia&quot;, &quot;Lima&quot;]);
</code></pre>
<p>Even</p>
<pre><code>final Person person = const Person([&quot;Livia&quot;, &quot;Lima&quot;]);
</code></pre>
<p>is not necessary you could just write</p>
<pre><code>const Person person = Person([&quot;Livia&quot;, &quot;Lima&quot;]);
</code></pre>
","0","Answer"
"78764109","78763878","<p>Start at the player:</p>
<pre><code>player_index = occupants.index(&quot;player&quot;)
</code></pre>
<p>Find the first thing to the left that isn’t empty, if there is anything:</p>
<pre><code>nonempty_index = player_index - 1

while nonempty_index != -1 and occupants[nonempty_index] == &quot;empty&quot;:
    nonempty_index -= 1
</code></pre>
<p>If it’s an enemy, move it to the right:</p>
<pre><code>if nonempty_index != -1 and occupants[nonempty_index] == &quot;enemy&quot;:
    if nonempty_index + 1 == player_index:
        raise NotImplementedError(&quot;TODO: handle enemy next to player&quot;)

    occupants[nonempty_index + 1] = &quot;enemy&quot;
    occupants[nonempty_index] = &quot;empty&quot;
</code></pre>
<p>Repeat on the other side.</p>
<hr />
<p>Another way: make one pass over the list, keep track of the last non-empty thing you saw and where it was, and take action when appropriate.</p>
<pre><code>def move_by(occupants, i, d):
    if i + d &lt; 0:
        raise ValueError(f&quot;Tried to move {occupants[i]} past left edge&quot;)
    if i + d &gt;= len(occupants):
        raise ValueError(f&quot;Tried to move {occupants[i]} past right edge&quot;)
    if occupants[i + d] != &quot;empty&quot;:
        raise ValueError(f&quot;Tried to move {occupants[i]} into {occupants[i + d]}&quot;)

    occupants[i + d] = occupants[i]
    occupants[i] = &quot;empty&quot;


last_nonempty, last_nonempty_index = None, None

for i, x in enumerate(occupants):
    if x == &quot;empty&quot;:
        continue

    match last_nonempty, x:
        case &quot;enemy&quot;, &quot;player&quot;:
            move_by(occupants, last_nonempty_index, 1)
        case &quot;player&quot;, &quot;enemy&quot;:
            move_by(occupants, i, -1)

    last_nonempty, last_nonempty_index = x, i
</code></pre>
","1","Answer"
"78764246","78763878","<p>This should solve your problem. The function takes your list of occupants as input and returns that list but with the closest enemy moved one step to closer to the player.</p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python3


def move_enemy(occupants: list) -&gt; list:
    player_idx = occupants.index(&quot;player&quot;)
    enemy_indexes = [i for i, x in enumerate(occupants) if x == &quot;enemy&quot;]
    closest_enemy = min(enemy_indexes, key=lambda x: abs(x - player_idx))

    distance = player_idx - closest_enemy
    left_or_right = int(distance / abs(distance))

    occupants[closest_enemy], occupants[closest_enemy + left_or_right] = (
        occupants[closest_enemy + left_or_right],
        occupants[closest_enemy],
    )

    return occupants


if __name__ == &quot;__main__&quot;:
    occupants = [&quot;enemy&quot;, &quot;empty&quot;, &quot;enemy&quot;, &quot;empty&quot;, &quot;empty&quot;, &quot;player&quot;, &quot;empty&quot;]
    print(move_enemy(occupants))
</code></pre>
","0","Answer"
"78764380","78764361","<p>Use a list comprehension.</p>
<pre><code>&gt;&gt;&gt; marks = marks.split(',')
&gt;&gt;&gt; [(int)(e.split('marks')[1]) for e in marks.split(',')]
[1, 2, 3]
&gt;&gt;&gt; 
</code></pre>
","0","Answer"
"78764447","78764361","<p>If your string is <code>'marks1,marks2,marks3'</code>, you can't convert it directly to integers by casting, as it contains non-numeric characters.</p>
<p>But, if you used it to explain your problem and string is actually like <code>'31,78,45'</code>, you can convert it to a list of int with list comprehension:</p>
<pre class=""lang-py prettyprint-override""><code>marks = [int(m) for m in marks]
</code></pre>
<pre class=""lang-py prettyprint-override""><code>marks = '31,78,45'
marks = marks.split(',')
marks = [int(m) for m in marks]
</code></pre>
","0","Answer"
"78765036","78764894","<p>I'd suggest making a class for each &quot;strategy&quot;; looping through a list of all the strategies; and letting each one determine if it is applicable and if so contribute its result to a list of results. Then interpret the list, or assert it is size 1.</p>
<pre><code>interface IStrategy{
    bool IsApplicable(Globals globals);
    Result result(Globals globals);
}

class StochasticLongStrategy: IStrategy{
    bool IsApplicable(Globals globals){
        return Globals.SRSI &lt; 10 &amp;&amp; Globals.SRSI != 0 &amp;&amp; Globals.ATR14 != 0;
    }
    Result result(Globals globals){
        return Result(.....)
    }
}


List&lt;IStrategy&gt; strategies = {new StochasticLongStrategy(),..........}
List&lt;Result&gt; strategyResults = new();

foreach (IStrategy strategy in strategies) {
    if (strategy.IsApplicable(globals)) strategyResults.Add(strategy.Result(globals))
}

......interpret strategyResults here
</code></pre>
","0","Answer"
"78765046","78764894","<p>You can follow this pattern to separate your &quot;rules&quot; from the logical flow of the application.</p>
<p>I didn't rewrite all of your code because if you're taking this approach to make your code more expressive and readable then what you name the functions is really important.</p>
<pre><code>// strategies / functions / rules
Func&lt;bool&gt; lowStoEntryLongStrat = () =&gt; Globals.SRSI &lt; 10 &amp;&amp; Globals.SRSI != 0 &amp;&amp; Globals.ATR14 != 0;
Func&lt;bool&gt; rsiREboundLongStrat = () =&gt; Globals.RSI &lt; 20 &amp;&amp; Globals.RSI != 0 &amp;&amp; Globals.ATR14 != 0;

// procedure
if (lowStoEntryLongStrat()) //Low Stochastic Entry Long Strategy
{
    dStochRSIPriceLong = markPrice - (0.1 * Globals.ATR14);
    ECStrategy = &quot;Stochastic Long&quot;;
}
else if (rsiREboundLongStrat()) //RSI Rebound Long Strategy
{
    dRSIPriceLong = markPrice - (0.2 * Globals.ATR14);
    ECStrategy = &quot;Rebound Long&quot;;
}
// ...
</code></pre>
<p>You should also consider looking at F# or other functional languages to store your formulas and calculations in a more readable way.</p>
","0","Answer"
"78765062","78764894","<p>You can use a list of conditions and corresponding actions to make this block of if/else statements more structured, condensed, and easier to maintain. This can be achieved by creating a list of tuples or a custom class to hold the condition and action and then iterating through this list. Here's one way to do it using a custom class:</p>
<pre><code>public class Strategy
{
    public Func&lt;bool&gt; Condition { get; set; }
    public Action Action { get; set; }
}

public void DetermineStrategy(double markPrice)
{
    double dStochRSIPriceLong = 0, dRSIPriceLong = 0, dMACDCrossoverLong = 0;
    double dLoCandleLong = 0, dMA2PriceLong = 0, dMAPriceLong = 0, dPullbacksPriceLong = 0;
    string ECStrategy = string.Empty;

    var strategies = new List&lt;Strategy&gt;
    {
        new Strategy
        {
            Condition = () =&gt; Globals.SRSI &lt; 10 &amp;&amp; Globals.SRSI != 0 &amp;&amp; Globals.ATR14 != 0,
            Action = () =&gt; { dStochRSIPriceLong = markPrice - (0.1 * Globals.ATR14); ECStrategy = &quot;Stochastic Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; Globals.RSI &lt; 20 &amp;&amp; Globals.RSI != 0 &amp;&amp; Globals.ATR14 != 0,
            Action = () =&gt; { dRSIPriceLong = markPrice - (0.2 * Globals.ATR14); ECStrategy = &quot;Rebound Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; Globals.MACDLINEPrevious &lt; Globals.MACDSigLINEPrevious &amp;&amp; Globals.MACDLINE &gt; Globals.MACDSigLINE,
            Action = () =&gt; { dMACDCrossoverLong = markPrice - (0.2 * Globals.ATR14); ECStrategy = &quot;Crossover Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; Math.Abs(markPrice - Globals.SMA25) &gt; 300 &amp;&amp; Globals.PreviousCandleLo &gt; Globals.SMA25 &amp;&amp; markPrice &gt; Globals.SMA25 &amp;&amp; Globals.SMA25 &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100,
            Action = () =&gt; { dLoCandleLong = Globals.PreviousCandleLo; ECStrategy = &quot;Runaway Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; markPrice &gt; Globals.SMA25 &amp;&amp; Globals.SMA25 &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100,
            Action = () =&gt; { dMA2PriceLong = Globals.SMA25; ECStrategy = &quot;Knife Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; markPrice &gt; Globals.SMA50 &amp;&amp; Globals.SMA50 &gt; Globals.SMA100,
            Action = () =&gt; { dMAPriceLong = Globals.SMA50; ECStrategy = &quot;Momentum Long&quot;; }
        },
        new Strategy
        {
            Condition = () =&gt; markPrice &gt; Globals.SMA100,
            Action = () =&gt; { dPullbacksPriceLong = Globals.SMA100; ECStrategy = &quot;Breakout Long&quot;; }
        }
    };

    foreach (var strategy in strategies)
    {
        if (strategy.Condition())
        {
            strategy.Action();
            break;
        }
    }

    dPositionEntryPriceLong = SearchArray(markPrice, new List&lt;double&gt; { dStochRSIPriceLong, dRSIPriceLong, dMACDCrossoverLong, dLoCandleLong, dMA2PriceLong, dMAPriceLong, dPullbacksPriceLong });
}
</code></pre>
<ol>
<li>The Strategy class encapsulates a condition and an action.</li>
<li>A list of Strategy objects is created, each holding a condition and
the corresponding action.</li>
<li>The DetermineStrategy method iterates through the list and executes
the action of the first strategy whose condition is met.</li>
</ol>
<p>This approach makes it easier to maintain and read the conditions and actions. You can add, remove, or modify strategies without changing the structure of the DetermineStrategy method.</p>
","1","Answer"
"78765124","78764361","<p>So, you can use <strong>regular expressions</strong> (<code>import re</code>), which are built to get a list of all the included digits.</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; marks = 'marks1,marks2,marks3,marks4,marks5,marks10,marks4093'
&gt;&gt;&gt; list(map(int, re.findall(r'(\d+)', marks)))
[1, 2, 3, 4, 5, 10, 4093]
</code></pre>
<p>This will also help you to track if you have different markers and you are only interesseted in a specific <strong>keyword</strong> before the integer.</p>
<pre><code>&gt;&gt;&gt; marks = 'marks1,narks2,carks3,marks4,Sarks5,marks10,tarks4093'
&gt;&gt;&gt; list(map(int, re.findall(r'marks(\d+)', marks)))
[1, 4, 10]
</code></pre>
<p>Make sure the brackets <code>(...)</code> are around the elements you are interested in. In this case, numeric values. Otherwise, the <code>int</code> conversion will fail.</p>
","0","Answer"
"78770145","78767166","<p>Similar to the comment above:</p>
<pre><code>lapply(ori_df, function(x) x[!is.na(x)])
</code></pre>
","1","Answer"
"78770496","78769470","<p>You can just use <a href=""https://docs.python.org/3.3/library/stdtypes.html#str.split"" rel=""nofollow noreferrer""><code>str.split</code></a> to split each line into the numbers it contains. Keep track of them all in a dictionary. After reading the entire file, loop over the dictionary and write all the lines to your output file.</p>
<pre><code>seen_lines = {}
with open('test1.txt') as f:
    for line in f:
        numbers = tuple(line.strip().split()) # e.g. ('1', '1')
        seen_lines[numbers] = line

with open('output.txt', 'w') as wf:
    for line in seen_lines.values():
        wf.write(line)
</code></pre>
","0","Answer"
"78771002","78767166","<p>Same idea but with <code>purrr</code>:</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr) 
my_purrr_list &lt;- map(as.list(my_df), discard, is.na)

my_purrr_list
#&gt; $category
#&gt; [1] &quot;a&quot; &quot;b&quot;
#&gt; 
#&gt; $subcategory
#&gt; [1] &quot;w&quot; &quot;Z&quot;
</code></pre>
<p>Or without <code>map</code>/<code>apply</code>:</p>
<pre class=""lang-r prettyprint-override""><code>library(tidyverse) # tidyr, dplyr
library(magrittr)  # %$% pipe

my_dplyr_list &lt;- my_df %&gt;% 
  pivot_longer(everything()) %&gt;% # columns must be the same type
  filter(!is.na(value)) %$% 
  split(value, .$name)
        
my_dplyr_list
#&gt; $category
#&gt; [1] &quot;a&quot; &quot;b&quot;
#&gt; 
#&gt; $subcategory
#&gt; [1] &quot;w&quot; &quot;Z&quot;
</code></pre>
<p>Toy data:</p>
<pre class=""lang-r prettyprint-override""><code>my_df &lt;- data.frame(category = c('a', 'b', NA), subcategory = c('w', NA, 'Z'))
</code></pre>
<p><sup>Created on 2024-07-19 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
","1","Answer"
"78771292","78769470","<p>I think the major issue of the code is how newlines are handled. You can try:</p>
<pre class=""lang-py prettyprint-override""><code>import re

duplicates = set()
write_next_newline = False

with open(&quot;input.txt&quot;, &quot;r&quot;) as f_in, open(&quot;output.txt&quot;, &quot;w&quot;) as f_out:
    for line in f_in:
        if not line.strip():
            if write_next_newline:
                f_out.write(line)
            continue

        tpl = tuple(re.findall(r&quot;\d+&quot;, line))
        if tpl not in duplicates:
            f_out.write(line)
            duplicates.add(tpl)
            write_next_newline = True
        else:
            write_next_newline = False
</code></pre>
<p><code>output.txt</code> will contain after running this script:</p>
<pre class=""lang-none prettyprint-override""><code>1  1

2   1

3   1

4   1
</code></pre>
","0","Answer"
"78773756","78400455","<p>Here is a way with <code>str.join()</code> and <code>str.get_dummies()</code></p>
<pre><code>df['list_column'].str.join('|').str.get_dummies().rolling(2,min_periods=1).sum().eq(2).sum(axis=1)
</code></pre>
<p>Output:</p>
<pre><code>0    0
1    2
2    1
3    0
</code></pre>
","0","Answer"
"78787133","78787110","<p>One option would be:</p>
<pre><code>as.list(setNames(raw_df$value, raw_df$cat))

$a
[1] &quot;high&quot;

$b
[1] &quot;mid&quot;

$c
[1] &quot;low&quot;
</code></pre>
","4","Answer"
"78787136","78787073","<p>Here is the quickest way that I can think of:</p>
<pre class=""lang-r prettyprint-override""><code># Positions where `mlist` has the value `c(&quot;ordered&quot;, &quot;factor&quot;).
pos &lt;- which(sapply(mlist, function(x) identical(x, c(&quot;ordered&quot;, &quot;factor&quot;))))
# Change these
mlist[pos] &lt;- &quot;character&quot;
# Result
mlist
</code></pre>
<p>Note that this doesn't change the class variable of your data set but merely the values is the list <code>mlist</code> that you generated.</p>
","2","Answer"
"78787149","78787110","<p>One way to solve your probem:</p>
<pre><code>split(raw_df$value, raw_df$cat)

$a
[1] &quot;high&quot;

$b
[1] &quot;mid&quot;

$c
[1] &quot;low&quot;
</code></pre>
","4","Answer"
"78787175","78787110","<p>Simplifying to <code>character</code> (vector) might be another option:</p>
<pre class=""lang-r prettyprint-override""><code>with(raw_df, structure(value, names=cat))
#&gt;      a      b      c 
#&gt; &quot;high&quot;  &quot;mid&quot;  &quot;low&quot;

## with class #&gt; [1] &quot;character&quot;
</code></pre>
<p>If <code>list</code> format is no strict requirement.</p>
","2","Answer"
"78787435","78787163","<p>You're after the <code>$pstate</code>, which contains the <em>concatenated</em> probabilities for the two levels of <code>sex</code> (females are the first level).</p>
<pre><code>levels(mgus$sex)
#[1] &quot;female&quot; &quot;male&quot; 
</code></pre>
<p>The length of <code>mfit2$pstate</code> (and <code>mfits$time</code>) is 454, the first 227 corresponds to probabilities for females (red).</p>
<pre><code>mfit2$strata
sex=F sex=M 
  227   227
</code></pre>
<p>You can see that this is correct by plotting the fitted object and overlaying the lines based on the above information.</p>
<pre><code>plot(mfit2)
lines(mfit2$time[1:227], mfit2$pstate[1:227, 2], type=&quot;s&quot;, col=&quot;red&quot;, lty=2)
lines(mfit2$time[228:454], mfit2$pstate[228:454, 2], type=&quot;s&quot;, col=&quot;green&quot;, lty=2)
lines(mfit2$time[1:227], mfit2$pstate[1:227, 3], type=&quot;s&quot;, col=&quot;red&quot;, lty=2)
lines(mfit2$time[228:454], mfit2$pstate[228:454, 3], type=&quot;s&quot;, col=&quot;green&quot;, lty=2)
</code></pre>
<p><a href=""https://i.sstatic.net/YjNOwyux.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/YjNOwyux.png"" alt=""enter image description here"" /></a></p>
","2","Answer"
"78788010","78787110","<p>Or you can use <code>tibble::deframe</code></p>
<pre><code>&gt; as.list(tibble::deframe(raw_df))
$a
[1] &quot;high&quot;

$b
[1] &quot;mid&quot;

$c
[1] &quot;low&quot;
</code></pre>
","2","Answer"
"78788020","78787110","<p>Using Map():</p>
<pre><code>with(raw_df, Map(\(x,y) y, cat, value))
# $a
# [1] &quot;high&quot;
# 
# $b
# [1] &quot;mid&quot;
# 
# $c
# [1] &quot;low&quot;
</code></pre>
","2","Answer"
"78788119","78787163","<p>I found <code>survminer</code> which extracts the data and makes plots. But to me it is better to do it by my own in order to be able to make changes to the plot more easily. For example, I prefer different lines with colours and linetypes rather than areas and facets. What I did is:</p>
<pre><code># Load library
library(survival)
library(magrittr)
library(ggplot2)


# Data
mgus2$etime &lt;- with(mgus2, ifelse(pstat==0, futime, ptime))
event &lt;- with(mgus2, ifelse(pstat==0, 2*death, 1))
mgus2$event &lt;- factor(event, 0:2, labels=c(&quot;censor&quot;, &quot;pcm&quot;, &quot;death&quot;))
mgus2 &lt;- within(mgus2, hgb_group &lt;- hgb &lt; mean(hgb, na.rm= TRUE))
mgus2 &lt;- within(mgus2, age_group &lt;- cut(age, quantile(age, 0:3/3)))
mfit2 &lt;- survfit(Surv(etime, event) ~ sex + hgb_group, data=mgus2)

# Own function.
cuminc_plot &lt;- function(fit){
  vars &lt;- strsplit(as.character(fit$call[2]), &quot;~&quot;)[[1]][2] %&gt;%
    {strsplit(., &quot;\\+&quot;)[[1]]} %&gt;%
    trimws()
  df &lt;- as.character(fit$call[3])
  states &lt;- fit$states[-1]

  levels_order &lt;- lapply(rev(vars), function(var_i){
    eval(parse(text= paste0(&quot;unique(sort(&quot;, df, &quot;$&quot;, var_i, &quot;))&quot;)))}) %&gt;%
    do.call(&quot;expand.grid&quot;, .) %&gt;%
    setNames(., nm= rev(vars))

  plot_data &lt;- cbind.data.frame(time= fit$time,
                                fit$pstate[ , -1])

  plot_data &lt;- cbind.data.frame(plot_data,
                                levels_order[rep(1:nrow(levels_order), times=     mfit2$strata), , drop= FALSE])

  plot_data &lt;- plot_data %&gt;%
    tidyr::pivot_longer(cols= states,
                        names_to= &quot;state&quot;,
                        values_to= &quot;p&quot;) 

  plot_obj &lt;- ggplot(plot_data, aes(time, p, col= !!sym(vars[1]), linetype= state)) +
    geom_line()

  if(length(vars) == 2){
    plot_obj &lt;- plot_obj +
      facet_wrap(as.formula(paste(&quot;. ~&quot;, vars[2]))) +
      scale_x_continuous(sec.axis = sec_axis(~ . , name= vars[2], breaks = NULL, labels = NULL))

  } else if(length(vars) == 3){
    plot_obj &lt;- plot_obj +
      facet_grid(as.formula(paste(vars[3], &quot;~&quot;, vars[2]))) +
      scale_x_continuous(sec.axis = sec_axis(~ . , name= vars[2], breaks = NULL, labels = NULL)) +
      scale_y_continuous(sec.axis = sec_axis(~ . , name= vars[3], breaks = NULL, labels = NULL))
  }

  return(plot_obj)
}
cuminc_plot(mfit2)
</code></pre>
<p><a href=""https://i.sstatic.net/v887Vdwo.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/v887Vdwo.png"" alt=""my plot"" /></a></p>
<p>Compare to source code from survminer (<a href=""https://rdrr.io/cran/survminer/src/R/ggcompetingrisks.R"" rel=""nofollow noreferrer"">https://rdrr.io/cran/survminer/src/R/ggcompetingrisks.R</a>)</p>
<pre><code>ggcompetingrisks_lines &lt;- function(fit){
  times &lt;- fit$time
  psta &lt;- as.data.frame(fit$pstate)
  colnames(psta) &lt;- fit$states
  if (is.null(fit$strata)) {
    psta$strata &lt;- &quot;all&quot;
  } else {
    psta$strata &lt;- rep(names(fit$strata), fit$strata)
  }
  psta$times &lt;- times

  .rename_empty_colname &lt;- function(df, newname = &quot;.&quot;){
    empty.col &lt;- colnames(df) == &quot;&quot;
    empty.col.exist &lt;- length(empty.col) &gt; 0
    if(empty.col.exist)
      colnames(df)[empty.col] &lt;- newname
    df
  }


  psta &lt;- .rename_empty_colname(
    psta, newname = &quot;.&quot;
  )

  event &lt;- value &lt;- strata &lt;- NULL
  pstal &lt;- tidyr::gather(psta, event, value, -strata, -times)

  #ggplot(pstal, aes(times, value, fill=event)) + geom_area() + facet_wrap(~strata)
  # instead:
  ggplot(pstal[pstal$event != &quot;(s0)&quot;, ], aes(times, value, col=event)) +
    geom_line() + facet_wrap(~strata)
}

ggcompetingrisks_lines(mfit2)
</code></pre>
<p><a href=""https://i.sstatic.net/6dhuL1BM.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/6dhuL1BM.png"" alt=""surv with lines"" /></a></p>
<p>But this gives facets instead of linetye and col. So adjusting my function:</p>
<pre><code>cuminc_plot_fac &lt;- function(fit){
  vars &lt;- strsplit(as.character(mfit2$call[2]), &quot;~&quot;)[[1]][2] %&gt;%
    {strsplit(., &quot;\\+&quot;)[[1]]} %&gt;%
    trimws()
  df &lt;- as.character(mfit2$call[3])
  states &lt;- mfit2$states[-1]

  levels_order &lt;- lapply(rev(vars), function(var_i){
    eval(parse(text= paste0(&quot;unique(sort(&quot;, df, &quot;$&quot;, var_i, &quot;))&quot;)))}) %&gt;%
    do.call(&quot;expand.grid&quot;, .) %&gt;%
    setNames(., nm= rev(vars))

  plot_data &lt;- cbind.data.frame(time= mfit2$time,
                                mfit2$pstate[ , -1])

  plot_data &lt;- cbind.data.frame(plot_data,
                                levels_order[rep(1:nrow(levels_order), times= mfit2$strata), , drop= FALSE])

  plot_data &lt;- plot_data %&gt;%
    tidyr::pivot_longer(cols= states,
                        names_to= &quot;state&quot;,
                        values_to= &quot;p&quot;) 

  plot_data$both &lt;- paste0(&quot;sex=&quot;, plot_data$sex, &quot;, &quot;, &quot;hgb_group=&quot;, plot_data$hgb_group)
  plot_obj &lt;- ggplot(plot_data, aes(time, p, col= state)) +
    geom_line() +
    facet_wrap(as.formula(&quot;~ both&quot;))

  return(plot_obj)
}
cuminc_plot_fac(mfit2)
</code></pre>
<p><a href=""https://i.sstatic.net/JpIZaOl2.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/JpIZaOl2.png"" alt=""my code with facets"" /></a></p>
<p>Finally, Trying to make a function that gives &quot;same&quot; plot as survminer, i.e. with areas and facets:</p>
<pre><code>cuminc_plot_like_survminer &lt;- function(fit){
  vars &lt;- strsplit(as.character(mfit2$call[2]), &quot;~&quot;)[[1]][2] %&gt;%
    {strsplit(., &quot;\\+&quot;)[[1]]} %&gt;%
    trimws()
  df &lt;- as.character(mfit2$call[3])
  states &lt;- mfit2$states

  levels_order &lt;- lapply(rev(vars), function(var_i){
    eval(parse(text= paste0(&quot;unique(sort(&quot;, df, &quot;$&quot;, var_i, &quot;))&quot;)))}) %&gt;%
    do.call(&quot;expand.grid&quot;, .) %&gt;%
    setNames(., nm= rev(vars))

  plot_data &lt;- cbind.data.frame(time= mfit2$time,
                                mfit2$pstate)

  plot_data &lt;- cbind.data.frame(plot_data,
                                levels_order[rep(1:nrow(levels_order), times= mfit2$strata), , drop= FALSE])

  plot_data &lt;- plot_data %&gt;%
    tidyr::pivot_longer(cols= states,
                        names_to= &quot;state&quot;,
                        values_to= &quot;p&quot;) 


  plot_data$both &lt;- paste0(&quot;sex=&quot;, plot_data$sex, &quot;, &quot;, &quot;hgb_group=&quot;, plot_data$hgb_group)
  plot_obj &lt;- ggplot(plot_data, aes(time, p, fill= state)) +
    geom_area() +
    facet_wrap(as.formula(&quot;~ both&quot;))


  return(plot_obj)
}
survminer::ggcompetingrisks(mfit2)
cuminc_plot_like_survminer(mfit2)
</code></pre>
<p>Plots are same in meaning (theme and so on are different but that does not matter).</p>
","1","Answer"
"78790749","78787073","<p>Here is a tidyverse way of doing this:</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr)

modify_if(mlist, ~ all(.x %in% c(&quot;ordered&quot;, &quot;factor&quot;)), ~ &quot;character&quot;)
</code></pre>
","1","Answer"
"78794808","78794703","<p>Here's a generic implementation of the <em>caesar-cipher</em>, that should work for any <em>shift</em> amount, and any <em>charset</em>.</p>
<p>Feel free to get rid of the type hinting if you feel it hinders readability. I personally would prefer to have it though.</p>
<pre><code>import string
from typing import Hashable, Iterable, Sequence, TypeVar

T = Hashable
def caesar_ciper(message: Iterable[T], k: int, charset: Sequence[T] = string.ascii_lowercase) -&gt; Iterable[T]:
    n = len(charset)
    char_idx = dict(zip(charset, range(n)))
    shift = lambda x: charset[(char_idx[x] + k) % n]
    return map(shift, message)
    
message = 'abcxyz' # read from user
k = 3 # read from user

encoded = ''.join(caesar_ciper(message, k))
assert encoded == 'defabc'
</code></pre>
","0","Answer"
"78794830","78794703","<p>I'm not sure I fully understand what you are asking, but if you are just trying to shift by a constant amount to make a Cesar cipher, then this is fairly straightforward, you could have done with this a string rather than a list as well. The main thing to think about is the wrapping, which we can do with modulus operator. Lets say you want to shift 3 places:
So if the index + shift is less than 26, the modulo operation doesn't change anything 2 + 3 % 26 = 5
If index + shift is 26 or greater, the modulo operation wraps it around.
24 + 3 % 26 = 1</p>
<pre><code>example = &quot;zebra&quot;
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

encrypted = ''
    
for char in example:
    if char in alphabet:
        i = alphabet.index(char)
        j = (i + 3) % 26
        encrypted += alphabet[j]
    else:
        encrypted += char
</code></pre>
","0","Answer"
"78796169","78796157","<p>This is how you can calculate sum of each row having multiple list of char and int.</p>
<pre><code>list_a =[
    [[&quot;a&quot;,2], [&quot;c&quot;,3], [&quot;e&quot;,3]],
    [[&quot;g&quot;,4], [&quot;i&quot;,4], [&quot;k&quot;,3]],
    [[&quot;b&quot;,3], [&quot;d&quot;,2], [&quot;f&quot;,2]]
]
#Iterating over row
for row in list_a:
    # Initializing sum with zero  before calculating sum for each row
    sum_of_row = 0
    # Iterating over cells in row
    for cell in row:
        # Here cell[0] is string and cell[1] is int
        sum_of_row = sum_of_row + cell[1]
    if sum_of_row &gt; 8:
        print(sum_of_row)
        
</code></pre>
","0","Answer"
"78796198","78796157","<p>Check This</p>
<pre><code>my_list = [[['a', 2], ['c', 3], ['e', 3]],
           [['g', 4], ['i', 4], ['k', 3]],
           [['b', 3], ['d', 2], ['f', 2]]]

filter_data = []

for inner_list in my_list:
    # Calculate the sum of the second elements (index -1)
    total = sum(item[1] for item in inner_list)

    # Check if the sum is less than or equal to 8
    if total &lt;= 8:
        print(f'Inner List : {inner_list} and total: {total}')
        filter_data.append(inner_list)
    else:
        print(f'Inner List : {inner_list} and total: {total}')
print(f'\n Final filter output:{filter_data} ')
</code></pre>
","0","Answer"
"78796240","78796157","<p>You can do this very succinctly by making a simple generator expression to sum the row. Then print the one you want:</p>
<pre><code>list_a =[
    [[&quot;a&quot;,2], [&quot;c&quot;,3], [&quot;e&quot;,3]],
    [[&quot;g&quot;,4], [&quot;i&quot;,4], [&quot;k&quot;,3]],
    [[&quot;b&quot;,3], [&quot;d&quot;,2], [&quot;f&quot;,2]]
]

# a generator to generate the sums of each row's last elements
row_sums = (sum(j[-1] for j in i) for i in list_a)

# selectively print them with a newline between them
print(*(sum for sum in row_sums if sum &lt;= 8), sep=&quot;\n&quot;)
</code></pre>
<p>This will print:</p>
<pre><code>8
7
</code></pre>
","0","Answer"
"78796243","78796157","<p>You can do it as a pythonic 1-liner like below:</p>
<pre><code>xss = [
    [['a', 2], ['c', 3], ['e', 3]],
    [['g', 4], ['i', 4], ['k', 3]],
    [['b', 3], ['d', 2], ['f', 2]],
]


yss = [xs for xs in xss if sum(x[-1] for x in xs) &lt;= 8]
print(yss)
</code></pre>
","1","Answer"
"78796585","78796157","<p>In keeping with the <a href=""https://peps.python.org/pep-0020/"" rel=""nofollow noreferrer"">Zen of Python</a> and therefore <strong>not</strong> writing convoluted / hard to understand and unnecessary one-liners I propose:</p>
<pre><code>_list = [[[0, 2], [0, 3], [0, 3]], [[0, 4], [0, 4], [0, 3]], [[0, 3], [0, 2], [0, 2]]]

for e in _list:
    if sum(_e[-1] for _e in e) &lt;= 8:
        print(e)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[[0, 2], [0, 3], [0, 3]]
[[0, 3], [0, 2], [0, 2]]
</code></pre>
","0","Answer"
"78799890","78653260","<p>Since the lexographical order of a list matters when you compare two lists, I would advice to always use sort(). Furthermore, they need to be of the same type, comparing a tuple with a list will always render false.</p>
<pre><code>[&quot;b&quot;, &quot;a&quot;] == [&quot;a&quot;, &quot;b&quot;] =&gt; false, different lexographical order

sort([&quot;b&quot;, &quot;a&quot;]) == sort([&quot;a&quot;, &quot;b&quot;]) =&gt; true, same lexographical order

sort([&quot;b&quot;, &quot;a&quot;]) == tolist([&quot;a&quot;, &quot;b&quot;]) =&gt; true, sort returns a list as well

tolist([&quot;a&quot;, &quot;b&quot;]) == tolist([&quot;a&quot;, &quot;b&quot;]) =&gt; true, both are list

[&quot;a&quot;, &quot;b&quot;] == tolist([&quot;a&quot;, &quot;b&quot;]) =&gt; false, comparing a tuple with a list
</code></pre>
","0","Answer"
"78806003","78400455","<p>For Huge datasets, Use : from sklearn.preprocessing import MultiLabelBinarizer</p>
<pre><code>import pandas as pd
import numpy as np
from sklearn.preprocessing import MultiLabelBinarizer

df = pd.DataFrame({
    'x': [1, 2, 3, 4],
    'list_column': [
        ['apple', 'banana', 'cherry'],
        ['banana', 'cherry'],
        ['cherry', 'date', 'fig'],
        ['orange']
    ]
})

# Initialize MultiLabelBinarizer
mlb = MultiLabelBinarizer()

# Transform the list_column to a binary matrix
binary_matrix = mlb.fit_transform(df['list_column'])
'''
binary_matrix :

[[1 1 1 0 0 0]
 [0 1 1 0 0 0]
 [0 0 1 1 1 0]
 [0 0 0 0 0 1]]
'''
# Shift the binary matrix
shifted_matrix = np.roll(binary_matrix, 1, axis=0)
'''
shifted_matrix :

[[0 0 0 0 0 1]
 [1 1 1 0 0 0]
 [0 1 1 0 0 0]
 [0 0 1 1 1 0]]
'''
# Set the first row to 0 since it has no previous row
shifted_matrix[0, :] = 0  

# Calculate the number of common items
common_counts = (binary_matrix &amp; shifted_matrix).sum(axis=1)

# Assign the result to the DataFrame
df['nr_common'] = common_counts

'''
   x              list_column  nr_common
0  1  [apple, banana, cherry]          0
1  2         [banana, cherry]          2
2  3      [cherry, date, fig]          1
3  4                 [orange]          0
'''
</code></pre>
","0","Answer"
"78810857","78218345","<p>If you do not insist on Polars implementation, you can use <code>numpy</code> for the vector product as</p>
<pre><code>import numpy as np
df_test.with_columns(new=np.stack(df_test.to_numpy().prod(axis=1)))
</code></pre>
","0","Answer"
"78859299","78382710","<p>I see these ways for you:</p>
<p>(A) Define &quot;unique&quot; in the 'Standard Filter' itself and count the values by function SUBTOTAL, which reacts on filtering.</p>
<p>(B) Define &quot;unique&quot; in the 'Standard Filter' itself. Let the filter result be written on a separate sheet (which you may hide) and count the values there. You need to refresh the source data range after changes on filter or source values.</p>
<p>(C) Do filtering directly with the FILTER function, and then count with COUNT(UNIQUE(...)). That would be something like
<code>=COUNT(UNIQUE(FILTER(B23:B2000; B23:B2000&gt;=DATE(2024;2;18))))</code>
The functions FILTER, UNIQUE (and others) are available in LibreOffice 24.8. That is currently in prerelease and will come soon.</p>
<p>UNIQUE will not help you with a range filtered by 'Standard Filter', because it returns the values too that are filtered out.</p>
","0","Answer"
"78927929","78308212","<p>Using this method you can navigate form any button to any other screen and also impose conditions note the buttons are inside a List {} so, It can also manage that.</p>
<p><code>first create some variable to control i.e  </code></p>
<p>struct ServicePackage: View {</p>
<pre><code>@State private var selectedService: Service? = nil
@State private var isButtonClick = false
@State private var navigator = 0
</code></pre>
<p>then create a method for handling the navigation something like these according to your use</p>
<pre><code> private func destinationView(for service: Service? ,nav : Int) -&gt; some View {
    guard let service = service else {
        return AnyView(Text(&quot;Invalid service&quot;))
    }
    // Decide destination based on the service properties
    if(navigator == 1){
        return AnyView(PackageDescription())
    }
    else if navigator == 2 &amp;&amp; !service.proPackages.isEmpty {
        return AnyView(PackageDetails())
    } else if navigator == 2 &amp;&amp; service.proPackages.isEmpty {
        return AnyView(PackageCost())
    }else {
        return AnyView(EmptyView())
    }
}
</code></pre>
<p>then on the button click impose the navigation i.e</p>
<pre><code>Button(action: {
    selectedService = service
    isButtonClick = true
    navigator = 1
}) {
    Text(&quot;See Details &gt;&quot;)
        .padding(8)
        .foregroundColor(.blue)
}
.background(
    NavigationLink(
        destination: destinationView(for: selectedService, nav: navigator),
        isActive: $isButtonClick,
        label: { EmptyView() }
    )
    .hidden()
)
.buttonStyle(PlainButtonStyle())
</code></pre>
","-1","Answer"
"78959716","78465014","<p>Coming back to my question after a few weeks playing with polars and hitting it in my real problem.</p>
<p>the solution, while waiting for list.eval to be more powerful.</p>
<p>Exploding the whole dataframe is bad for my performance (my dataframe has maaaany columns) and memory.</p>
<p>The key here is to be aware that you can &quot;for-free&quot; add a Series to a DataFrame if it has the same length (which you guarantee with row count)</p>
<pre class=""lang-py prettyprint-override""><code>
# This is &quot;pseudocode&quot;, might not be fully 100% syntax correct

#column = column of type List(Struct(...))
row_index = &quot;__tmp_rowindex&quot;
exploded_df = df.select(column).with_row_count(row_index).explode(column)
exploded_df = exploded_df.with_columns(
    pl.col(column).struct.with_fields(pl.lit(&quot;Example&quot;).alias(&quot;blabla&quot;)
)

exploded_df = (
    exploded_df.group_by(row_index, maintain_order=True)
    .agg(
        pl.col(column).alias(column)
    ).select(pl.col(column).list.drop_nulls().alias(column))
)
df = pl.concat([df.drop(column), exploded_df], how=&quot;horizontal&quot;)]).alias(column)
)
</code></pre>
","0","Answer"
"79010336","78218345","<p><strong>updated</strong>.
Since version <a href=""https://github.com/pola-rs/polars/releases/tag/py-1.10.0"" rel=""nofollow noreferrer""><code>1.10.0</code></a> arithmetic operations between lists and scalars are supported:</p>
<pre class=""lang-py prettyprint-override""><code>df_test.with_columns(
    new = pl.col.a * pl.col.b
)
</code></pre>
<pre><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p><strong>outdated</strong>. Latest polars version <code>1.8.0</code> supports arithmetic operations on lists. Broadcasting is not supported yet, so the solution still use <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.repeat_by.html"" rel=""nofollow noreferrer""><code>repeat_by()</code></a> method to create a list of elements, using <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.len.html"" rel=""nofollow noreferrer""><code>list.len()</code></a>.</p>
<pre class=""lang-py prettyprint-override""><code>df_test.with_columns(
    new = pl.col.a.repeat_by(pl.col.b.list.len()) * pl.col.b
)
</code></pre>
<pre><code>shape: (3, 3)
┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p><strong>outdated</strong>. Unfortunately, operations on list are not yet supported, but you can work around it using Struct or Arrays. Both data structures support multiplication between them. So you can create a list out of column <code>a</code> and then solve it by multiplying Structs or Arrays.</p>
<ul>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.repeat_by.html"" rel=""nofollow noreferrer""><code>repeat_by()</code></a> to create a list of values from column <code>a</code> using <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.len.html"" rel=""nofollow noreferrer""><code>list.len()</code></a> of list in column <code>b</code>.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.to_struct.html"" rel=""nofollow noreferrer""><code>list.to_struct()</code></a> to convert list to Struct.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.struct.field.html"" rel=""nofollow noreferrer""><code>struct.field()</code></a> to get all the fields of the struct (using <code>*</code>) as columns.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.concat_list.html"" rel=""nofollow noreferrer""><code>concat_list()</code></a> to concat the column into the list.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>(
    df_test
    .with_columns(new = pl.col.a.repeat_by(pl.col.b.list.len()))
    .with_columns(pl.col.new.list.to_struct() * pl.col.b.list.to_struct())
    .with_columns(new = pl.concat_list(pl.col.new.struct.field(&quot;*&quot;)))
)
</code></pre>
<pre><code>┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
<p>If you know the length of the lists, you can also use <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/array.html"" rel=""nofollow noreferrer""><code>array</code></a></p>
<ul>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.to_array.html"" rel=""nofollow noreferrer""><code>list.to_array()</code></a> to convert lists to arrays.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.arr.to_list.html"" rel=""nofollow noreferrer""><code>arr.to_list()</code></a> to convert array back to list.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>l = 3

(
    df_test
    .with_columns(new = pl.col.a.repeat_by(l))
    .with_columns(pl.col.new.list.to_array(l) * pl.col.b.list.to_array(l))
    .with_columns(pl.col.new.arr.to_list())
)
</code></pre>
<pre><code>┌─────┬───────────┬────────────────────┐
│ a   ┆ b         ┆ new                │
│ --- ┆ ---       ┆ ---                │
│ f64 ┆ list[i64] ┆ list[f64]          │
╞═════╪═══════════╪════════════════════╡
│ 1.0 ┆ [2, 2, 2] ┆ [2.0, 2.0, 2.0]    │
│ 2.0 ┆ [3, 3, 3] ┆ [6.0, 6.0, 6.0]    │
│ 3.0 ┆ [4, 4, 4] ┆ [12.0, 12.0, 12.0] │
└─────┴───────────┴────────────────────┘
</code></pre>
","0","Answer"
"79221797","78552932","<p>You can try that code to solve your issue:</p>
<pre><code>cons=df1.apply(lambda ss:pd.Series(ss[0]).diff().iloc[1:].eq(1).all(),1)
df1.assign(cons=cons)


             a   cons
0        [0, 2]  False
1   [9, 11, 12]  False
2     [0, 1, 2]   True
3  [10, 11, 13]  False
</code></pre>
","0","Answer"
"78798098","78798057","<p>You can manually get the values from the list like so:</p>
<pre><code>items
items[value]
items[value][value]
items[value][value][value]
</code></pre>
","0","Answer"
"78798117","78798057","<p>Use while loop instead</p>
<pre><code>items = [[[1, 2], [3, 4], [5, 6]], [[10, 9], [8, 7], [6, 5]]]

# Make items as an element of list and declare it as x 
x = [items]

while True:

    # break the loop if x[0] is integer
    if isinstance(x[0], int): break
    
    print(x[0])
    x = x[0] # Now x[0] becomes x
    
</code></pre>
<p>Output :</p>
<pre><code>[[[1, 2], [3, 4], [5, 6]], [[10, 9], [8, 7], [6, 5]]]
[[1, 2], [3, 4], [5, 6]]
[1, 2]
</code></pre>
<p>This method follows a structure and conditional automation rather calling the values directly.</p>
","1","Answer"
"78798151","78798057","<p>try this one simple solution with recursion 😃</p>
<pre><code>def zer(arr):
    print(arr)
    return None if type(arr[0]) is not list else zer(arr[0])
zer(items)
</code></pre>
<p>##output</p>
<pre><code>[[[1, 2], [3, 4], [5, 6]], [[10, 9], [8, 7], [6, 5]]]
[[1, 2], [3, 4], [5, 6]]
[1, 2]
</code></pre>
","1","Answer"
"78805187","78805145","<p>An easy way using the format you showed, is to collect all the keys then <code>.get()</code> each key with a default of 0 and add into a new dictionary.</p>
<p>Here is that basic structure that shows it in action:</p>
<pre><code>dictA = {'A': 1, 'B': 2, 'C': 3}
dictB = {'C': 1, 'D': 2, 'E': 3}
dictC = {'A': 2, 'C': 4, 'E': 6, 'G': 8}
dict_list = [dictA, dictB, dictC]

# Collect all the keys from each dict
all_keys = set()
for dictx in dict_list:
    all_keys.update(dictx.keys())

# Iterate through each key adding it to the result
resultDict = {}
for key in all_keys:
    # Pre-init with a 0 then grab it or default to 0 from each dict
    resultDict[key] = 0
    for dictx in dict_list:
        resultDict[key] += dictx.get(key, 0)

print(resultDict)
</code></pre>
<p>Here is a sample code condensed to a oneliner:</p>
<pre><code>resultDict = {key: sum([x.get(key, 0) for x in dict_list]) for key in set().union(*(d.keys() for d in dict_list))}
</code></pre>
<p>Mainly inspired by <a href=""https://stackoverflow.com/questions/11399384/"">this answer</a>.</p>
<p>Let me know if you have any questions.</p>
","0","Answer"
"78805194","78805145","<p><a href=""https://docs.python.org/3/library/collections.html#collections.Counter"" rel=""nofollow noreferrer"">collections Counter</a> makes this very simple since you can add Counter objects together. In other words, this does what you want:</p>
<pre><code>Counter(dictA) + Counter(dictB) + Counter(dictC)
</code></pre>
<p>If you want to generalize, you can use <code>sum()</code> and provide an empty Counter for the start parameter, so make the very succinct:</p>
<pre><code>from collections import Counter

dictA = {'A': 1, 'B': 2, 'C': 3}
dictB = {'C': 1, 'D': 2, 'E': 3}
dictC = {'A': 2, 'C': 4, 'E': 6, 'G': 8}

dicts = [dictA, dictB, dictC]

counts = sum(map(Counter, dicts), Counter())
# Counter({'E': 9, 'C': 8, 'G': 8, 'A': 3, 'B': 2, 'D': 2})
</code></pre>
<p>A counter object acts just like a dictionary, but if you specifically  need a dict, you can just use <code>dict(counts)</code>.</p>
","0","Answer"
"78809338","78809315","<p>With python one-liner:</p>
<pre><code>res = [x for x in array2 if x not in array1]
print(res) # Output : [8, 9, 10]
</code></pre>
<p>Equivalent method for conventional iteration</p>
<pre><code>lst = []
for x in array2:
    if x not in array1:
        lst.append(x)
print(lst) # Output : [8, 9, 10]
</code></pre>
","2","Answer"
"78809340","78809315","<p>Your code is comparing every element in the first array to every element in the second array, and will print the element every time the two elements don't match.</p>
<p>Instead, you need to compare every element in the first array to all elements in the second array, and only print the element if there is no match.</p>
<pre><code>arr1 = [1,2,3,4,5,6,7]
arr2 = [1,2,3,4,5,6,7,8,9,10]
for num in arr2:
    if num not in arr1:
        print(num)
</code></pre>
<p>I would note that this implementation is not very efficient. In many cases, it makes sense to compare sets:</p>
<pre><code>arr1 = [1,2,3,4,5,6,7]
arr2 = [1,2,3,4,5,6,7,8,9,10]
output = list(set(arr2) - set(arr1))
print(output) 
</code></pre>
","5","Answer"
"78809359","78809315","<p>You could you use the set() to find only the unique entries and subtract both the sets and convert the answer to a list using the list() func.</p>
<pre><code>arr1 = [1, 2, 3, 4, 5, 6, 7]
arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

arr1.sort()
arr2.sort()

if arr1 == arr2:
    print(&quot;The arrays are equal.&quot;)
else:
    arr3=list(set(arr2) - set(arr1))
    print(arr3)
</code></pre>
","2","Answer"
"78816266","78816193","<p>With <code>reverse(nums[1:-1])</code> you create a copy of the sub-list, then &quot;reverse&quot; that, without changing the original list (except for the first and last element). Instead, you should pass the original list together with the next index to change, e.g. something like this:</p>
<pre><code>def reverse(nums, i=0):
    if i &gt;= len(nums) // 2:
        return
    nums[i], nums[-1-i] = nums[-1-i], nums[i]
    reverse(nums, i+1)
</code></pre>
<p>Of course, for all practical applications you should use a slice with negative step <code>A = A[::-1]</code> or the builtin function <code>A = list(reversed(A))</code>.</p>
","2","Answer"
"78817436","78816193","<p>I like your approach and @tobias_k points out the issue. I think you may enjoy this alternative solution -</p>
<pre class=""lang-py prettyprint-override""><code>def reverse(t):
  if len(t) &lt; 2:
    return t
  return t[-1] + reverse(t[1,-1]) + t[0]

print(reverse(A))
</code></pre>
","0","Answer"
"78818366","78816193","<p>The issue lies in how you're applying recursion.  Each recursive call focuses on a shrinking sublist <code>(nums[1:-1])</code>, which does swap the first and last elements of that sublist. However, these swaps are happening in isolation and don't propagate the changes back up to the original list.</p>
<p>Every time you shrink the list, you pass a copy of it, and when you do the flip, you technically doing that flip in the local copy of the list that you passed.</p>
<p>so you should pass the list itself not a copy of it!</p>
<p>This is a functioning version of your function:</p>
<pre><code>def reverse(nums):
    def _reverse(nums, start, end):
        if start &gt;= end:
            return
        nums[start], nums[end] = nums[end], nums[start]
        _reverse(nums, start + 1, end - 1)

    _reverse(nums, 0, len(nums) - 1)
</code></pre>
","0","Answer"
"78820746","78820603","<p>To replicate your desired double nested loop using variable dereference:</p>
<pre class=""lang-bash prettyprint-override""><code>for i in {0..99}; do v=&quot;list_$i[@]&quot;
  for j in &quot;${!v}&quot;; do
    echo &quot;$j&quot;
  done
done
</code></pre>
<pre><code>1
2
3
4
5
6
7
8
9
22
7
34
88
:
:
23
67
80
</code></pre>
","0","Answer"
"78821202","78820603","<p>Could use a nameref:</p>
<pre class=""lang-bash prettyprint-override""><code>list_0=(1 2 3 4 5 6)
list_1=(7 8 9)
list_2=(22 7 34 88)
list_3=(23 67 80)

for name in list_{0..3}; do
  declare -n arr=$name
  printf '%s\t%s\n' &quot;$name&quot; &quot;${arr[*]}&quot;
done
</code></pre>
<pre class=""lang-none prettyprint-override""><code>list_0  1 2 3 4 5 6
list_1  7 8 9
list_2  22 7 34 88
list_3  23 67 80
</code></pre>
","1","Answer"
"78822776","78822603","<p>Either retain the array by modifying its items using <code>map</code>, then <code>add</code> them to summarize the object:</p>
<pre class=""lang-bash prettyprint-override""><code>.result | map({(.sys_name): .state_value}) | add
</code></pre>
<p>Or, simpler, <code>reduce</code> over the items, and successively build up the object:</p>
<pre class=""lang-bash prettyprint-override""><code>.result | reduce .[] as $i ({}; .[$i.sys_name] = $i.state_value)
</code></pre>
","1","Answer"
"78824947","78824885","<p>Here's a linear time (<code>O(n)</code>) solution for parts 2 and 3 (1 can be implemented with some tweaks):</p>
<p>First we convert the second and third arguments into a set, which is O(n).</p>
<p>Then we calculate the frequency of each element at position 0 and 1, again O(n).</p>
<p>Then we iterate over the list and check whether it matches our criteria. Lookups in <code>Counter</code> and sets are both O(1) so this thing is again efficient, O(n) overall.</p>
<pre><code>from collections import Counter


def my_filter(list: list[tuple[int, int]], first: list[int], second: list[int]):
    first_set = set(first)
    second_set = set(second)
    first_counter = Counter(a for (a, _) in list)
    second_counter = Counter(b for (_, b) in list)
    return [
        (a, b)
        for (a, b) in list
        if first_counter[a] in first_set and second_counter[b] in second_set
    ]


print(
    my_filter(
        [(1, 2), (1, 3), (2, 4), (3, 1), (3, 4), (3, 5), (5, 2), (5, 4)], [2], [1]
    )
)

print(
    my_filter(
        [(1, 2), (1, 3), (2, 4), (3, 1), (3, 4), (3, 5), (5, 2), (5, 4)], [2], [1, 3]
    )
)
</code></pre>
<p>Output:</p>
<pre><code>[(1, 3)]
[(1, 3), (5, 4)]
</code></pre>
","1","Answer"
"78825487","78822603","<p><a href=""https://jqlang.github.io/jq/manual/#to_entries-from_entries-with_entries"" rel=""nofollow noreferrer""><code>from_entries</code></a> comes in handy in such use cases:</p>
<pre><code>.result | map({key:.sys_name, value:.state_value}) | from_entries
</code></pre>
","1","Answer"
"78826069","78824885","<p>A performance improvement over the otherwise excellent proposition by @Dogbert</p>
<pre><code>from collections import Counter
from timeit import timeit

# code from the accepted answer
def my_filter1(list: list[tuple[int, int]], first: list[int], second: list[int]):
    first_set = set(first)
    second_set = set(second)
    first_counter = Counter(a for (a, _) in list)
    second_counter = Counter(b for (_, b) in list)
    return [
        (a, b)
        for (a, b) in list
        if first_counter[a] in first_set and second_counter[b] in second_set
    ]

# code that avoids use of Counter
def my_filter2(list: list[tuple[int, int]], first: list[int], second: list[int]):
    first_set = set(first)
    second_set = set(second)
    first_counter = {}
    second_counter = {}
    for a, b in list:
        first_counter[a] = first_counter.get(a, 0) + 1
        second_counter[b] = second_counter.get(b, 0) + 1
    return [
        (a, b)
        for (a, b) in list
        if first_counter[a] in first_set and second_counter[b] in second_set
    ]


X = [(1, 3), (2, 4), (3, 1), (3, 4), (3, 5), (5, 2), (5, 4),(1,2)]
Y = [2]
Z = [1]

assert my_filter1(X, Y, Z) == my_filter2(X, Y, Z)

for func in my_filter1, my_filter2:
    print(func.__name__, timeit(lambda: func(X,Y,Z)))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>my_filter1 2.4996074590017088
my_filter2 1.1667742919817101
</code></pre>
<p><strong>Platform:</strong></p>
<pre><code>Apple M2
macOS Sonoma 14.6
Python 3.12.4
</code></pre>
","1","Answer"
"78826564","78826520","<pre class=""lang-r prettyprint-override""><code>idx &lt;- sapply(seq_along(listy), \(i) any(sapply(listy[-i], \(j) all(listy[[i]] %in% j))))
listy[!idx]
# $item1
# [1]  10 210 300 400 500 600 500
# 
# $item5
# [1] 700 800 900
</code></pre>
<p><strong>How it works</strong></p>
<p>This is essentially a double loop. The first <code>sapply</code> is iterating over an index (<code>i</code>) of <em>all</em> elements in your list. The second <code>sapply</code> iterates over all the elements of your list <em>except</em> <code>i</code> and compares them. You need to remove that index otherwise, there will always be a match.</p>
<p>Here is a version of what is happening to help you visualize:</p>
<pre class=""lang-r prettyprint-override""><code>for (i in seq_along(listy)) {
  for (j in listy[-i]) {
    lgl &lt;- all(list[[i]] %in% j)
    cat(&quot;All c(&quot;, toString(listy[[i]]), &quot;) in c(&quot;, toString(j), &quot;)? --&gt; &quot;, lgl, &quot;\n&quot;, sep = &quot;&quot;)
  }
}
</code></pre>
","4","Answer"
"78827184","78826520","<p>Here is an <code>igraph</code> option</p>
<pre><code>library(igraph)
outer(listy, listy, Vectorize(\(x, y) all(y %in% x))) %&gt;%
  graph_from_adjacency_matrix(diag = FALSE) %&gt;%
  degree(mode = &quot;in&quot;) %&gt;%
  subset(. == 0) %&gt;%
  names() %&gt;%
  `[`(listy, .)
</code></pre>
<p>which gives</p>
<pre><code>$item1
[1]  10 210 300 400 500 600

$item5
[1] 700 800 900
</code></pre>
","3","Answer"
"78830394","78830347","<p>In your loop the <code>digit</code> string gets longer and longer, and this slows down the process. It makes the time complexity worse than O(𝑘log𝑛).</p>
<p>You could use this insights:</p>
<ul>
<li><p>There are only 10 different cases per digit to deal with when adding 1, so instead of storing every digit separately, you could maintain a count of how many you have of each distinct digit: so you'd have 10 counters.</p>
</li>
<li><p>In every iteration, the number of &quot;2&quot; digits is the same as the number of &quot;1&quot; digits you had before. Similar for the other digits (where the number of &quot;0&quot; becomes the number of &quot;9&quot; you had before), except that the number of &quot;1&quot; is the sum of both the numbers of &quot;0&quot; and &quot;9&quot; you had before.</p>
</li>
</ul>
<p>Here is how that translates into code:</p>
<pre><code>from collections import deque

MOD = 10**9 + 7 

def digitwise_addition(n, k):
    digits = deque([0] * 10)
    for digit in str(n):
        digits[int(digit)] += 1
    for i in range(k):
        digits.rotate()
        digits[1] += digits[0]
            
    return sum(digits) % MOD
</code></pre>
<p>Instead of rotating the list <code>digits</code>, we could rotate the <em>index</em> over the list. Secondly, we could apply the modulo operation at every addition so that the complexity of each iteration of the second loop is O(1) once <code>i &gt;= 10</code>.</p>
<pre><code>MOD = 10**9 + 7 

def digitwise_addition(n, k):
    digits = [0] * 10
    for digit in str(n):
        digits[int(digit)] += 1
    for i in range(k):
        i = -i % 10
        digits[i] = (digits[i] + digits[(i-1) % 10]) % MOD
            
    return sum(digits) % MOD
</code></pre>
<p>The time complexity is within the limits suggested in the code challenge and the test cases all pass within the time limit.</p>
","1","Answer"
"78830517","78830347","<p>You have not indicated how big <code>k</code> is. If <code>k</code> is small, then @trincot's algorithm is great.  But if <code>k</code> is large, you'll want to use an algorithm that's logarithmic in k.</p>
<p>You'll notice that in the first loop of trincot's program, if the queue originally has
<code>D=(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9)</code> then after one iteration of the loop, the queue will contain <code>D'=(d9, d9+d0, d1, d2, d3, d4, d5, d6, d7, d8)</code>.  This is just a linear combination so it can be accomplished by a matrix multiplication in which <code>D' = M x D</code>.</p>
<pre><code>       | 0 0 0 0 0 0 0 0 0 1 |
       | 1 0 0 0 0 0 0 0 0 1 |
       | 0 1 0 0 0 0 0 0 0 0 |
       | 0 0 1 0 0 0 0 0 0 0 |
M =    | 0 0 0 1 0 0 0 0 0 0 |
       | 0 0 0 0 1 0 0 0 0 0 |
       | 0 0 0 0 0 1 0 0 0 0 |
       | 0 0 0 0 0 0 1 0 0 0 |
       | 0 0 0 0 0 0 0 1 0 0 |
       | 0 0 0 0 0 0 0 0 1 0 |
</code></pre>
<p>Matrix multiplication is much harder than just shifting the queue and adding two elements. But when <code>k</code> is large, we're calculating</p>
<pre><code>D' = M x M x ...... M x D = (M**k) * D
</code></pre>
<p>where <code>M</code> is repeated <code>k</code> times.  But there are fast algorithms for exponentiation that can calculate <code>M**k</code> in log k time.</p>
<pre><code>M ** k = (M ** (k / 2)) ** 2 if k is even
M ** k = M * (M ** (k / 2)) ** 2 if k is odd
</code></pre>
<p>Since the elements of <code>M**k</code> can grow large quickly, after each multiplication, we can mod the elements of the array by <code>MOD = 10**9+7</code>.</p>
<p>We can quickly calculate (M**k) * D, and then sum up the digits in the result.</p>
","1","Answer"
"78830837","78830794","<p>The main issue is in this line:</p>
<pre class=""lang-py prettyprint-override""><code>solution = [sum([nums[x], nums[y], nums[z]]) for x in nums for y in nums for z in nums if x != y != z != x]
</code></pre>
<p>This is problematic because it's using the values in <code>nums</code> as indices, not as the actual numbers to sum. This will cause an <code>IndexError</code> if any value in <code>nums</code> is greater than or equal to the length of <code>nums</code>.</p>
<p>Also the condition <code>x != y != z != x</code> doesn't guarantee that <code>x</code>, <code>y</code>, and <code>z</code> are different indices which was your former intention. In Python, <code>a != b != c</code> is equivalent to <code>(a != b) and (b != c)</code>, which doesn't imply <code>a != c</code>.</p>
","0","Answer"
"78830839","78830794","<p>What happens in the case <code>x == y == z</code>?
The <code>solution</code> is an empty list! That is the source of the index error. You can try updating the logic to consider indices instead.</p>
","0","Answer"
"78841992","78838771","<p>Append is more efficient with O(1) as it always adds to the end of the list. Insert will be less efficient with O(n) as it will move around items as it needs to deal with cases of inserting in the middle.
Hope this helped</p>
","-1","Answer"
"78844236","78844160","<p>You would need to create a class that holds a reference to the original lists.</p>
<p>You don't want a copy of the lists, you just need a reference. This class knows how to access and update the values at each of the lists it holds.</p>
<p>You can access any item in the list in O(log n) search complexity (binary search) without using any additional memory to store a flattend list.</p>
<h2>Implementation</h2>
<p>Imports for types to follow:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import Any, Callable, Iterable, List, Tuple, Union
</code></pre>
<p>If you want the view to listen to changes in the underlying lists, you will need to create an <code>ListWrapper</code> that can delegate to the underlying list and notify the view that things changed in the lists.</p>
<p>We want to make sure <code>self._notify()</code> is called whenever a list changes.</p>
<pre class=""lang-py prettyprint-override""><code>class ListWrapper:
    def __init__(self, lst: List[Any]):
        self._list: List[Any] = lst
        self.callbacks: List[Callable[[], None]] = []

    def __getitem__(self, index: int) -&gt; Any:
        return self._list[index]

    def __setitem__(self, index: int, value: Any) -&gt; None:
        self._list[index] = value
        self._notify()

    def __len__(self) -&gt; int:
        return len(self._list)

    def append(self, item: Any) -&gt; None:
        self._list.append(item)
        self._notify()

    def extend(self, iterable: Iterable[Any]) -&gt; None:
        self._list.extend(iterable)
        self._notify()

    def insert(self, index: int, item: Any) -&gt; None:
        self._list.insert(index, item)
        self._notify()

    def remove(self, item: Any) -&gt; None:
        self._list.remove(item)
        self._notify()

    def pop(self, index: int = -1) -&gt; Any:
        item = self._list.pop(index)
        self._notify()
        return item

    def clear(self) -&gt; None:
        self._list.clear()
        self._notify()

    def _notify(self) -&gt; None:
        for callback in self.callbacks:
            callback()

    def add_callback(self, callback: Callable[[], None]) -&gt; None:
        self.callbacks.append(callback)
</code></pre>
<p>Here is a class which provides a &quot;flat view&quot; of multiple lists, where updates to the original lists are reflected in the flat view.</p>
<pre class=""lang-py prettyprint-override""><code>class FlatView:
    def __init__(self, lists: List[ListWrapper]) -&gt; None:
        self.lists = lists
        self.update_lengths()
        for lst in self.lists:
            lst.add_callback(self.update_lengths)

    def update_lengths(self) -&gt; None:
        self.sub_lengths = self._compute_overall_length()

    def _compute_overall_length(self) -&gt; List[int]:
        lengths = [0]
        for lst in self.lists:
            lengths.append(lengths[-1] + len(lst))
        return lengths

    def __getitem__(self, index: int) -&gt; Any:
        if index &lt; 0 or index &gt;= len(self):
            raise IndexError(&quot;list index out of range&quot;)
        list_index = self._find_list_index(index)
        sublist_index = index - self.sub_lengths[list_index]
        return self.lists[list_index][sublist_index]

    def _find_list_index(self, index: int) -&gt; int:
        # Binary search to find the list that contains the index
        low, high = 0, len(self.sub_lengths) - 1
        while low &lt; high:
            mid = (low + high) // 2
            if self.sub_lengths[mid] &lt;= index &lt; self.sub_lengths[mid + 1]:
                return mid
            elif index &lt; self.sub_lengths[mid]:
                high = mid
            else:
                low = mid + 1
        return low

    def __len__(self) -&gt; int:
        return self.sub_lengths[-1]

    def __repr__(self) -&gt; str:
        return repr([item for lst in self.lists for item in lst])
</code></pre>
<h2>Usage</h2>
<p>The following wrapper function creates a <code>FlatView</code> instance for the provided list of lists.</p>
<p>We wrap each list in a <code>ListWrapper</code> so that we can attach a callback function to update the view's overall lengths that are used to access the data.</p>
<pre class=""lang-py prettyprint-override""><code>def flat_view(lists: List[List[Any]]) -&gt; Tuple[FlatView, List[ListWrapper]]:
    wrappers = [ListWrapper(lst) for lst in lists]
    return FlatView(wrappers), wrappers
</code></pre>
<p>Here is how you would use it. Please note that we need to modify the wrappers for the view to understand how the lists change.</p>
<p>For example, <code>b[0] = &quot;x&quot;</code> would not work.</p>
<pre class=""lang-py prettyprint-override""><code>if __name__ == &quot;__main__&quot;:
    a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
    b = [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
    view, [a_wrapper, b_wrapper] = flat_view([a, b])
    
    print(view)                # Output: ['a', 'b', 'c', 'd', 'e', 'f']
    
    b_wrapper[0] = &quot;x&quot;
    print(view)                # Output: ['a', 'b', 'c', 'x', 'e', 'f']
    
    print(view[3], len(view))  # Output: 'x' 6
    
    a_wrapper.append(&quot;y&quot;)
    print(view, len(view))     # Output: ['a', 'b', 'c', 'y', 'x', 'e', 'f'] 7

    print(a, len(a))           # Output: ['a', 'b', 'c', 'y'] 4
    print(b, len(b))           # Output: ['x', 'e', 'f'] 3
</code></pre>
","3","Answer"
"78844248","78844160","<p>You can write a generator that flattens the structure contained in it. This will reflect all the changes to the structure, so will behave like view you need.</p>
<pre><code>class FlatView:
    def __init__(self, sequence):
        self.sequence = sequence
    def __iter__(self):
        yield from FlatView.flatten(self.sequence)
    @staticmethod
    def flatten(item):
        for i in item:
            if hasattr(i, '__iter__') and not isinstance(i, str):
                yield from FlatView.flatten(i)
            else:
                yield i
    
a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
b = [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
c = [a,b]
view = FlatView(c)
print(list(view)) # ['a', 'b', 'c', 'd', 'e', 'f']
b[0] = &quot;x&quot;
print(list(view)) # ['a', 'b', 'c', 'x', 'e', 'f']
c.append([&quot;g&quot;, &quot;h&quot;, &quot;i&quot;])
print(list(view)) # ['a', 'b', 'c', 'x', 'e', 'f', 'g', 'h', 'i']
print(c)          # [['a', 'b', 'c'], ['x', 'e', 'f'], ['g', 'h', 'i']]
</code></pre>
","1","Answer"
"78844479","78844160","<p>This simple class accepts arbitrary nested sequences and at each access it computes the indices referencing the item to be returned.</p>
<pre><code>from collections.abc import Sequence

def generate_refs(nested, prefix):
    for i, value in enumerate(nested):
        idx = prefix + [i] 
        if isinstance(value, Sequence) and not isinstance(value, str):
            yield from generate_refs(value, idx)
        else:
            yield idx 

class FlatView:
    def __init__(self, nested):
        self._nested = nested

    def __getitem__(self, n): 
        if not isinstance(n, int):
            raise TypeError(&quot;integer indices only&quot;)
        if n &lt; 0:
            raise IndexError(&quot;negative indices not supported&quot;)
        gen = generate_refs(self._nested, [])
        try:
            for _ in range(n+1):
                ref = next(gen)
        except StopIteration:
            raise IndexError(&quot;index out of range&quot;) from None
        # print(f&quot;debug: position [{n}]: {ref}&quot;)
        value = self._nested
        for i in ref:
            value = value[i]
        return value

a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
b = [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
test = [a, [b, &quot;g&quot;, &quot;h&quot;], &quot;i&quot;]

fw = FlatView(test)
print(&quot;nested:&quot;, test)
print(&quot;flattened:&quot;, list(fw))
print(&quot;item [5]:&quot;, fw[5])
a.extend([&quot;c2&quot;, &quot;c3&quot;]) ; print(&quot;extended the list 'a'&quot;)
print(&quot;item [5]:&quot;, fw[5])
</code></pre>
<p>Output:</p>
<pre><code>nested: [['a', 'b', 'c'], [['d', 'e', 'f'], 'g', 'h'], 'i']
flattened: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
item [5]: f
extended the list 'a'
item [5]: d

</code></pre>
","0","Answer"
"78845515","78845504","<p>You are overwriting your list instead of appending to it, thus only leaving the last item in the list. Try this instead:</p>
<pre><code>post_obj = []
if len(data) &gt; 0:
    for id in data:
        post_obj.append(
            {
                &quot;cityName&quot;: id[&quot;place&quot;],
                &quot;displayOrder&quot;: id[&quot;seq&quot;]
            }
        )
else:
    post_obj.append({&quot;areas&quot;: []})
</code></pre>
","1","Answer"
"78845532","78845504","<p>You can use a <a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow noreferrer"">list comprehension</a> like this:</p>
<pre class=""lang-py prettyprint-override""><code>data = [
    {'place': 'San Jose', 'seq': 1},
    {'place': 'San Diego', 'seq': 2},
    {'place': 'San Fransisco', 'seq': 3}
]

post_obj = [{'cityName': item['place'], 'displayOrder': item['seq']} for item in data]

print(post_obj)
[{'cityName': 'San Jose', 'displayOrder': 1}, {'cityName': 'San Diego', 'displayOrder': 2}, {'cityName': 'San Fransisco', 'displayOrder': 3}]
</code></pre>
","5","Answer"
"78845533","78845504","<p>small typo in code, you need to append to list, so use &quot;+=&quot; instead of just &quot;=&quot; and you code should run fine.</p>
<pre><code>post_obj = []
if len(data) &gt; 0:
    for id in data:
        post_obj += [
            {
                &quot;city&quot;: id[&quot;place&quot;],
                &quot;display&quot;: id[&quot;seq&quot;]
            }
        ]
else:
    post_obj[&quot;areas&quot;] += []
</code></pre>
","0","Answer"
"78845542","78845504","<p>It would help if you tried this,</p>
<pre class=""lang-py prettyprint-override""><code>if len(data) &gt; 0:
    for item in data:
        post_obj.append(
            {
                &quot;cityName&quot;: item[&quot;place&quot;],
                &quot;displayOrder&quot;: item[&quot;seq&quot;]
            }
        )
else:
    post_obj.append({&quot;areas&quot;: []})

print(post_obj)
</code></pre>
<p>Here is the output,
<a href=""https://i.sstatic.net/AJaGA3F8.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/AJaGA3F8.png"" alt=""output"" /></a></p>
","1","Answer"
"78846008","78844947","<blockquote>
<p>How do I dynamically create a list of prime numbers?</p>
</blockquote>
<p>Make check_prime check if a number is prime (and nothing else):</p>
<pre><code>check_prime(1).
check_prime(2).
check_prime(X1) :-
    X1 &gt; 2,
    succ(X0, X1),
    forall(between(2, X0, N), \+ (0 is X1 mod N)).
</code></pre>
<p>Then use it to make a list of primes, e.g:</p>
<pre><code>?- findall(X, (between(1, 50, X), check_prime(X)), Primes).
Primes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
</code></pre>
<p>or</p>
<pre><code>primes_to(X, Primes) :-
    numlist(1, X, Nums),
    include(check_prime, Nums, Primes).

?- primes_to(50, Primes).
Primes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
</code></pre>
<p>if you actually do want to do it recursively instead of conveniently, a builder that adds a counter onto the list of primes if the counter is prime, and doesn't if it isn't:</p>
<pre><code>primes_to(0, []).

primes_to(Counter, [Counter|Primes]) :-
    check_prime(Counter),
    Counter0 is Counter - 1,
    primes_to(Counter0, Primes).

primes_to(Counter, Primes) :-
    \+ check_prime(Counter),
    Counter0 is Counter - 1,
    primes_to(Counter0, Primes).


?- primes_to(50, Primes).
Primes = [47, 43, 41, 37, 31, 29, 23, 19, 17, 13, 11, 7, 5, 3, 2, 1]
</code></pre>
","2","Answer"
"78848144","78848091","<p>You can use <a href=""https://docs.python.org/3/library/functions.html#sum"" rel=""nofollow noreferrer""><code>sum()</code></a> with a <a href=""https://docs.python.org/3.12/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow noreferrer"">generator expression</a> to convert each number in the list to <code>float</code> utilizing <a href=""https://docs.python.org/3/library/stdtypes.html#str.join"" rel=""nofollow noreferrer""><code>str.<b>join</b></code></a>:</p>
<pre><code>nums = [
    ['2', '.', '7'],
    ['۳'],
    ['۳', '۰', '۶'],
    ['۷', '۴'],
    ['۵'],
    ['۹', '۰'],
    ['۱', '۰'],
    ['۱', '۵'],
    ['۲', '۶'],
]

for num in nums:
  print(f'{num} =', float(''.join(num)))

total = sum(float(''.join(num)) for num in nums)
print(f'{total = }')
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['2', '.', '7'] = 2.7
['۳'] = 3.0
['۳', '۰', '۶'] = 306.0
['۷', '۴'] = 74.0
['۵'] = 5.0
['۹', '۰'] = 90.0
['۱', '۰'] = 10.0
['۱', '۵'] = 15.0
['۲', '۶'] = 26.0
total = 531.7
</code></pre>
","2","Answer"
"78848273","78848091","<p>Based on what you've provided, you're looking to:</p>
<ul>
<li>Accumulate numbers (Persian and Arabic) from a .docx into a list</li>
<li>Sum that list and return a float</li>
</ul>
<p>In addition to the solutions already suggested, this is another way to do it:</p>
<pre class=""lang-py prettyprint-override""><code>from docx import Document
import re

document = Document(&quot;File.docx&quot;)
text = &quot; &quot;.join(paragraph.text for paragraph in document.paragraphs)

# Find numbers, converting the Persian numbers to Arabic
persian_to_arabic = str.maketrans(&quot;۰۱۲۳۴۵۶۷۸۹&quot;, &quot;0123456789&quot;)
numbers = re.findall(pattern=r&quot;-?\d+\.\d+|-?\d+|[۰۱۲۳۴۵۶۷۸۹]+&quot;, string=text)
converted_numbers = [num.translate(persian_to_arabic) for num in numbers]

# Sum the list and return a float
total = sum(map(float, converted_numbers))
print(total)
</code></pre>
<p>Testing with the following input:</p>
<pre class=""lang-py prettyprint-override""><code>document = Document()
document.add_paragraph(&quot;The total cost is $45.67 and the discount is $5.50.&quot;)
document.add_paragraph(&quot;The Persian digits for 123 are ۱۲۳.&quot;)
document.add_paragraph(&quot;A negative number like -123.45 should be considered.&quot;)
</code></pre>
<p>This gives us <code>['45.67', '5.50', '123', '123', '-123.45']</code>, which sums to <code>173.72000000000003</code>.</p>
","1","Answer"
"78848882","78848856","<p>You can try</p>
<pre><code>list2env(
  lapply(
    mget(ls(pattern = &quot;^list_\\d+&quot;)),
    \(x) do.call(rbind, x)
  ),
  envir = .GlobalEnv
)
</code></pre>
<p>and you can check</p>
<pre><code>&gt; mget(ls(pattern = &quot;^list_\\d+&quot;))
$list_1
  A  B
1 1  4
2 2  5
3 3  6
4 7 10
5 8 11
6 9 12

$list_2
  X Y
1 1 3
2 2 4
3 5 7
4 6 8

$list_3
   M  N
1  1  5
2  2  6
3  3  7
4  4  8
5  9 13
6 10 14
7 11 15
8 12 16
</code></pre>
","2","Answer"
"78849858","78848856","<p>You could use <code>assign</code> function in a loop. This function works like <code>&lt;-</code> but the variable name is specified as a string.</p>
<pre><code>for(nm in ls(pattern=&quot;^list_\\d+&quot;)) assign(nm, do.call(rbind, get(nm)))

list_1
  A  B
1 1  4
2 2  5
3 3  6
4 7 10
5 8 11
6 9 12


list_2
# ...

list_3
# ...
</code></pre>
","2","Answer"
"78851599","78851557","<p>You need <code>mapply</code>.</p>
<p>But first, always set the seed when simulating data.</p>
<pre><code>set.seed(1234)

A &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(10:30, size = 30, replace = TRUE)))
B &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(4:22, size = 30, replace = TRUE)))
C &lt;- data.frame(&quot;D&quot; = c(1:30), &quot;T&quot; = c(sample(14:35, size = 30, replace = TRUE)))
</code></pre>
<hr />
<pre><code>mapply(\(x,y) x[which(x[,2] &gt; y),], x=climate, y=thresh95, SIMPLIFY=FALSE)
</code></pre>
<hr />
<pre><code>$Alist
    D  T
19 19 30

$Blist
[1] D T
&lt;0 rows&gt; (or 0-length row.names)

$Clist
    D  T
17 17 35
</code></pre>
","1","Answer"
"78851650","78851557","<h1>What's Wrong?</h1>
<p>Your <code>thres95</code> is a list like</p>
<pre><code>&gt; thresh95
$Alist
95%
 29

$Blist
95%
 22

$Clist
95%
 34
</code></pre>
<p>but <code>x</code> is just a vector. So you have error if you apply <code>x &gt; thresh95</code></p>
<h1>Workaround Option</h1>
<p>You can run the code below (data borrowed from <a href=""https://stackoverflow.com/a/78851599/12158757"">@Edward</a>)</p>
<pre><code>lapply(
  climate,
  function(x) {
    subset(
      x,
      T &gt; quantile(T, probs = 0.95)
    )
  }
)
</code></pre>
<p>which gives</p>
<pre><code>$Alist
    D  T
19 19 30

$Blist
[1] D T
&lt;0 rows&gt; (or 0-length row.names)

$Clist
    D  T
17 17 35
</code></pre>
","4","Answer"
"78852546","78852506","<p>First:</p>
<pre><code>data = {
    'Language': 'Tamil',
    'Capital': 'Chennai',
    'Place': ['Chennai', 'Vellore', 'Trichy', 'Madurai']
}
</code></pre>
<p>Next, you can create a DataFrame by repeating the values for Language and Capital and expanding the Place list into multiple rows:</p>
<pre><code>df = pd.DataFrame({
    'Language': [data['Language']] * len(data['Place']),
    'Capital': [data['Capital']] * len(data['Place']),
    'Place': data['Place']
})
</code></pre>
<p>Output:</p>
<pre><code>     Language  Capital    Place
0    Tamil     Chennai    Chennai
1    Tamil     Chennai    Vellore
2    Tamil     Chennai    Trichy
3    Tamil     Chennai    Madurai
</code></pre>
","-1","Answer"
"78852614","78852506","<pre><code>from itertools import product

data = {
    &quot;Language&quot;: &quot;Tamil&quot;,
    &quot;Capital&quot;: &quot;Chennai&quot;,
    &quot;Place&quot;: [&quot;Chennai&quot;, &quot;Vellore&quot;, &quot;Trichy&quot;, &quot;Madurai&quot;]
}

results = list(product([data[&quot;Language&quot;]], [data[&quot;Capital&quot;]], data[&quot;Place&quot;]))

for result in results:
    print(f'{result[0]: &lt;10} {result[1]: &lt;10} {result[2]}')
</code></pre>
","3","Answer"
"78853179","78852506","<p>Assuming this input and that you want to convert to <a href=""/questions/tagged/pandas"" class=""s-tag post-tag"" title=""show questions tagged &#39;pandas&#39;"" aria-label=""show questions tagged &#39;pandas&#39;"" rel=""tag"" aria-labelledby=""tag-pandas-tooltip-container"" data-tag-menu-origin=""Unknown"">pandas</a> DataFrame:</p>
<pre><code>data = {
    'Language': 'Tamil',
    'Capital': 'Chennai',
    'Place': ['Chennai', 'Vellore', 'Trichy', 'Madurai']
}
</code></pre>
<p>If you <strong>know</strong> the key that contains the list, just <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.explode.html"" rel=""nofollow noreferrer""><code>explode</code></a> it:</p>
<pre><code>import pandas as pd

out = pd.DataFrame(data).explode('Place')
</code></pre>
<p>If you want to programmatically identify the keys that contain lists:</p>
<pre><code>from itertools import product

out = pd.DataFrame(product(*(v if isinstance(v, list) else [v]
                             for v in data.values())),
                   columns=data
                  )
</code></pre>
<p>Output:</p>
<pre><code>  Language  Capital    Place
0    Tamil  Chennai  Chennai
1    Tamil  Chennai  Vellore
2    Tamil  Chennai   Trichy
3    Tamil  Chennai  Madurai
</code></pre>
","0","Answer"
"78855508","78855022","<p>I am assuming that it is just a typo in your expected result, which is missing 14 &amp; 15, if so here is an answer.</p>
<p>For this, the easiest way I could think of to convert from a <code>DataFrame</code> to a sequential list is to use the <code>iterrows</code> method to loop over the flagged rows and then append the ranges between the rows MIN and MAX together.</p>
<p>For the appending used here, you can see this answer for a more detailed explanation of how that works: <a href=""https://stackoverflow.com/a/953097/12766634"">https://stackoverflow.com/a/953097/12766634</a>.</p>
<pre><code>import pandas as pd
import itertools

df = pd.DataFrame(data={
    &quot;FLAG&quot;:[1, 0, 0, 1, 1],
    &quot;MIN&quot;: [1,10,12,14,16],
    &quot;MAX&quot;: [9,11,13,15,25]})

flagged_rows = df[df[&quot;FLAG&quot;] == 1]
sequence_list = list(itertools.chain.from_iterable(
    range(_row[&quot;MIN&quot;], _row[&quot;MAX&quot;] + 1) for _, _row in flagged_rows[[&quot;MIN&quot;, &quot;MAX&quot;]].iterrows()))
</code></pre>
","0","Answer"
"78855578","78855022","<p>Your output should probably include values 14 &amp; 15 (based on your description).</p>
<p>For the data shown there are no &quot;overlaps&quot;. However, in case there are, you would probaby want to use a set to build your values.</p>
<p>Something like this:</p>
<pre><code>from pandas import DataFrame

d: dict[str, list[int]] = {
    &quot;FLAG&quot;: [1, 0, 0, 1, 1],
    &quot;MIN&quot;: [1, 10, 12, 14, 16],
    &quot;MAX&quot;: [9, 11, 13, 15, 25],
}
df: DataFrame = DataFrame(d)
result: set[int] = set()
for _, row in df[df[&quot;FLAG&quot;] == 1].iterrows():
    _range = range(row[&quot;MIN&quot;], row[&quot;MAX&quot;] + 1)
    result.update(_range)
print(sorted(result))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
</code></pre>
","1","Answer"
"78862585","78838771","<p><strong>From python FAQ:</strong></p>
<blockquote>
<p>CPython’s lists are really variable-length arrays, not Lisp-style
linked lists. The implementation uses a contiguous array of references
to other objects, and keeps a pointer to this array and the array’s
length in a list head structure.</p>
<p>This makes indexing a list a[i] an operation whose cost is independent
of the size of the list or the value of the index.</p>
<p>When items are appended or inserted, the array of references is
resized. Some cleverness is applied to improve the performance of
appending items repeatedly; when the array must be grown, some extra
space is allocated so the next few times don’t require an actual
resize.</p>
</blockquote>
<p>I recommend to read <a href=""https://www.laurentluce.com/posts/python-list-implementation/"" rel=""nofollow noreferrer"">Laurent Luce's article</a> to understand how Python list is implemented and how <code>append()</code> vs <code>insert()</code> work.</p>
<h3>Regarding you question:</h3>
<p>As you can see below <code>append</code> is faster BUT there are faster ways. The best one <em>In this test</em> is list comprehension.</p>
<p>I didn't used <code>map</code> because <code>map</code> in python3 returns <code>'map' object</code> which needs to converted to list using <code>list()</code> (and takes the fun out of the test).</p>
<h3>Results:</h3>
<pre><code>Using list() 0.7724313329672441
Using listc 1.007791625102982
Using Append 1.175513125024736
Using Insert 1.6196119580417871
Using Extend 2.6952341250143945
Using += 2.795624832971953
</code></pre>
<h3>The code:</h3>
<pre><code>import timeit
import inspect

def using_list():
    l = list(range(5000000))

def using_listc():
    l = [i for i in range(5000000)]

def using_append():
    l = []
    for i in range(5000000):
        l.append(i)

def using_insert():
    l = []
    for i in range(5000000):
        l.insert(i,i)

def using_extend():
    l = []
    for i in range(5000000):
        l.extend([i])

def using_add():
    l = []
    for i in range(5000000):
        l += [i]


if __name__ == '__main__':

    using_list_code = inspect.getsource(using_list) + 'using_list()'
    using_listc_code = inspect.getsource(using_listc) + 'using_listc()'
    using_append_code = inspect.getsource(using_append) + 'using_append()'
    using_insert_code = inspect.getsource(using_insert) + 'using_insert()'
    using_extend_code = inspect.getsource(using_extend) + 'using_extend()'
    using_add_code = inspect.getsource(using_add) + 'using_add()'

    number_of_runs = 10

    t = timeit.timeit(stmt=using_list_code, number=number_of_runs)
    print(f'Using list() {t}')
    t = timeit.timeit(stmt=using_listc_code, number=number_of_runs)
    print(f'Using listc {t}')
    t = timeit.timeit(stmt=using_append_code, number=number_of_runs)
    print(f'Using Append {t}')
    t = timeit.timeit(stmt=using_insert_code, number=number_of_runs)
    print(f'Using Insert {t}')
    t = timeit.timeit(stmt=using_extend_code, number=number_of_runs)
    print(f'Using Extend {t}')
    t = timeit.timeit(stmt=using_add_code, number=number_of_runs)
    print(f'Using += {t}')
</code></pre>
","0","Answer"
"78865989","78865921","<p>You can do it in one iteration:</p>
<pre><code>def minimumAbsDifference(self, arr: List[int]) -&gt; List[List[int]]:
    result = []
    if len(arr) &lt; 2:
        return result
    arr.sort()
    
    min_diff = 1 + arr[-1] - arr[0]
    for idx in range(1,len(arr)):
        diff = arr[idx] - arr[idx-1]
        if diff &lt; min_diff:
            result = []
            min_diff = diff
        
        if diff == min_diff:
            result.append([arr[idx-1], arr[idx]])
    return result
</code></pre>
","0","Answer"
"78868332","78865921","<p>Your algorithm degrades to O(𝑛²) time complexity because of using <code>arr.index(i)</code>. The first time this returns quickly, because <code>i</code> is found at index 0, but the next iterations will need to look further and further in the array to find the match.</p>
<p>You could get the list of consecutive values from the sorted list:</p>
<pre><code>        pairs = list(zip(arr, arr[1:]))
</code></pre>
<p>Then, get the minimimum among those (your first loop):</p>
<pre><code>        mindiff = min((b - a for a, b in pairs))
</code></pre>
<p>And finally, filter the pairs to those that have that difference (your second loop):</p>
<pre><code>        return [pair for pair in pairs if pair[1] - pair[0] == mindiff]
</code></pre>
<p>Taken together:</p>
<pre><code>class Solution:
    def minimumAbsDifference(self, arr: List[int]) -&gt; List[List[int]]:
        arr.sort()
        pairs = list(zip(arr, arr[1:]))
        mindiff = min((b - a for a, b in pairs))
        return [pair for pair in pairs if pair[1] - pair[0] == mindiff]
</code></pre>
","0","Answer"
"78868806","78868771","<pre><code>x&gt;Lower2SD or x&lt;Upper2SD
</code></pre>
<p>This condition is the problem.  It does not exclude any values at all.</p>
<p>If x is a very low score, <code>x&lt;Upper2SD</code> will be true, so it will be included in the filtered list.</p>
<p>If x is a very high score, <code>x&gt;Lower2SD</code> will be true, so it will be included in the filtered list.</p>
<p>I think you want an <code>and</code> condition here, not <code>or</code>.</p>
<p>Python even has a special syntax for this kind of comparison:</p>
<pre><code>Lower2SD &lt; x &lt; Upper2SD
</code></pre>
","2","Answer"
"78868826","78868771","<pre><code>import pandas as pd

data = pd.read_csv('/Users/myname/Documents/Data/MyData.csv')

mean = data[&quot;Area&quot;].mean()
sd = data[&quot;Area&quot;].std()
upper = mean + 2 * sd
lower = mean - 2 * sd

adjusted = data.loc[(data[&quot;Area&quot;] &lt; upper) &amp; (data[&quot;Area&quot;] &gt; lower)]

adjusted.to_csv('/Users/myname/Documents/Data/AdjustedData.csv', index=False)
</code></pre>
","1","Answer"
"78869669","78865921","<p>You have multiple iterations over the input list when one pass is all you need.</p>
<p>Also, setting <em>s = 1000</em> may work for the test data but it's not a general solution.</p>
<p>Try this:</p>
<pre><code>class Solution:
    def minimumAbsDifference(self, arr: List[int]) -&gt; List[List[int]]:
        result = []
        arr.sort()
        a = arr[0]
        mad = arr[-1] - a
        for b in arr[1:]:
            diff = b - a
            if diff &lt; mad:
                result = [[a, b]]
                mad = diff
            elif diff == mad:
                result.append([a, b])
            a = b
        return result
</code></pre>
","0","Answer"
"78870094","78869910","<p>This question falls into the general (and popular) category of &quot;My data is a mess; how do I work around it?&quot; There are two basic approaches:</p>
<ol>
<li>Figure out how to work around it</li>
<li>Prevent it from becoming a mess in the first place</li>
</ol>
<p>Both can be viable depending on your circumstances. People usually frame the question as (1), as you've done; but I urge you to consider (2) first. It is usually not that hard, and people don't usually even try it because their immediate &quot;next&quot; problem is how to work with the data as it is now, i.e. already a mess.</p>
<p>To work around messy data, you need to more carefully define what kinds of messes you're expecting, because there is no one-size-fits-all answer to &quot;somewhere in a sea of parentheses, there might be some data&quot;. For example, if for some reason your data is always a nested list of depth at most 3 and each list has at most 1 element and the deepest-nested non-list is a keyword, then the approach you've laid out will work fine, although it could be made more convenient. But if any of those assumptions are wrong, you'll need to handle exceptions more carefully. Do you need to handle <code>(foo (:thing))</code>, for example? Or <code>({:mode :thing})</code>? The permutations are endless, and you can't solve the problem without defining it first.</p>
<p>Preventing your data from becoming a mess requires a different approach. How did you get here? Surely you didn't read a text file containing the string <code>(((:thing)))</code>. For example, likely you got some data from somewhere, which probably was in a format that's at least halfway reasonable, and then you transformed it somehow, and as a result <a href=""https://stackoverflow.com/questions/5232350/clojure-semi-flattening-a-nested-sequence"">you accidentally wrapped it in too many lists</a>. If something like this happened, go back and try to work out how not to do this. This may lead to asking a new Question about the right way to transform your data.</p>
","4","Answer"
"78870991","78869910","<p>I agree with @amalloy that it looks like some weird data modelling issue.</p>
<p>If you really need this, i'd propose using zippers for that:</p>
<pre><code>(require '[clojure.zip :as z])

(let [x (z/seq-zip st)]
  (-&gt; x z/down z/down z/down z/node #{:thing}))

;;=&gt; :thing

(let [x (z/seq-zip st)]
  (-&gt; x z/down z/down z/down z/node #{:think}))

;;=&gt; nil
</code></pre>
","0","Answer"
"78871973","78869910","<pre class=""lang-clj prettyprint-override""><code>user&gt; (first (flatten '(((:thing)))))
:thing
user&gt; (first (flatten '((:thing))))
:thing
user&gt; (first (flatten '(:thing)))
:thing
</code></pre>
","1","Answer"
"78872424","78872414","<p>One of the fastest way would be to do the following:</p>
<pre><code>from string import ascii_letters

sen = 'Ab df ec'
sen_idx = [ord(x)-64 for x in sen.upper() if x in ascii_letters]
</code></pre>
<ol>
<li><code>ord(x)</code> - each symbol in python has it's own number value. Like <code>A - 65</code>, <code>Z - 90</code>, <code>a - 97</code>, <code>z - 122</code>. Basically letters are ordered, but upper and lower case letters have their own numbers.</li>
<li>convert your string to <code>upper</code> and apply <code>ord</code> only to upper letters (because in your case upper case and lower case letters must have same numbers).</li>
<li>avoid taking <code>ord</code> from spaces, commas and other punctuation by checking that all letters belong to <code>ascii_letters</code></li>
</ol>
<p><strong>Second solution:</strong></p>
<pre><code>from string import ascii_uppercase

# dict with all letters and their index
# {'A': 1, 'B': 2, 'C': 3, ...}
data = {letter: idx+1 for idx,letter in enumerate(ascii_uppercase)}

sen = 'Ab df ec'

# for non letters use 0
sen_idx = [data.get(x, 0) for x in sen.upper() ]

print(sen_idx) # [1, 2, 0, 4, 6, 0, 5, 3]
</code></pre>
","1","Answer"
"78872429","78872414","<p>A simple dictionary is all you need.  Pandas is not helping you here.</p>
<pre><code>data = [['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]
data = {a:b for a,b in data}
data[' '] = 0

sen = 'Ab df ec'
print(sum(data[i.upper()] for i in sen))
</code></pre>
<p>Output:</p>
<pre><code>21
</code></pre>
","1","Answer"
"78875769","78844947","<p>Break it down like this!</p>
<p><code>check_primes/1</code> tests if a single (integer) number is a prime.</p>
<p>We define it like this: &quot;for <code>P</code> to be prime, it must be greater than <code>1</code> and there may not be some integer <code>P0</code> lying between <code>2</code> and <code>P</code> such that <code>P0</code> evenly divides <code>P</code>&quot;:</p>
<pre><code>check_prime(P) :- P &gt; 1, \+ (between(2,P,P0), P0 &lt; P, P mod P0 =:= 0).
</code></pre>
<p>Let's use it in combination with <code>findall/3</code> in a sample query:</p>
<pre><code>?- findall(X, (between(1,100,X), check_prime(X)), Primes).
Primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97].
</code></pre>
<p>Or why not use it in a slighter <em>bigger</em> query?</p>
<pre><code>?- findall(X, (between(1,2000,X), check_prime(X)), Primes).    
Primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999].
</code></pre>
","2","Answer"
"78876901","78869910","<p>Following up on Harold's answer, <code>flatten</code> will accept any <em><strong>sequence</strong></em> and do a maximal &quot;unnest&quot; operation, returning a single sequence:</p>
<pre><code>(flatten.  [:a]   ) =&gt; (:a)
(flatten  [[:a]]  ) =&gt; (:a)
(flatten [[[:a]]] ) =&gt; (:a)

(flatten (quote   (:a)   )) =&gt; (:a)
(flatten (quote  ((:a))  )) =&gt; (:a)
(flatten (quote (((:a))) )) =&gt; (:a)

(flatten (quote (((:a [[[:b]]] ))) )) =&gt; (:a :b)
</code></pre>
<p>Note it does not work for maps:</p>
<pre><code>(flatten {:a {:b 2}}) =&gt; ()
</code></pre>
<p>See the <a href=""https://clojure.org/api/cheatsheet"" rel=""nofollow noreferrer"">Clojure CheatSheet</a> for full details.</p>
","0","Answer"
"78876943","78876875","<p>You want to reference &quot;pieces&quot; of the original dataframe that correspond to the filters that you specified. You also probably want to set the student_id as index to speed up the process. Try this:</p>
<pre><code>df = df.set_index('UW ID')
dfs = {k: df.loc[v] for k, v in student_numbers.items()}
#         ^ use df.loc[v].copy() if you want a new object
dfs['F10']
</code></pre>
","0","Answer"
"78877012","78876875","<p>Perhaps this solves your problem?</p>
<pre><code># create a dict to store data by student groups
student_numbers_with_data = {}

# iterate through dictionary items
for student_group, student_ids in student_numbers.items():
    student_group_data = df[df['UW ID'].isin(student_ids)]
    # store in new dict
    student_numbers_with_data[student_group] = student_group_data
    # print results
    print(f&quot;Data for student group {student_group}&quot;)
    print(student_group_data)
</code></pre>
","2","Answer"
"78877332","78876875","<p>You can do it this way and create a dictionary of dataframes with the keys same as in your student_numbers dictionary.  No need for an explicity for-loop, you can use dictionary comprehension:</p>
<pre><code>r_map = {e:k for k, v in student_numbers.items() for e in v}
dfs = dict(tuple(df.groupby(df['UW ID'].map(r_map))))
</code></pre>
<p>Outputs:</p>
<pre><code>#dfs['F10']
   UW ID    Term
0      1  201001
1      2  201101
6      7  201101
  

#dfs['F11']
   UW ID    Term
2      3  201201
3      4  201201
7      8  201201
</code></pre>
<p>and,</p>
<pre><code>#dfs['F12']
   UW ID    Term
4      5  201001
5      6  201001
</code></pre>
","2","Answer"
"78877515","78869910","<p>You can always rely on <code>reduce</code> for such thing (repeatedly doing something on a sequence of input, the input which you can ignore in such a case; just modeling the accumulating state &amp; implement the reduce logic):</p>
<pre><code>(defn n-first?
  ([n l]
   (first? n nil l))
  ([n default l]
   (let [acc0 [l true]]
     ;; acc: [value, success?]
     ;; n=0: reduce returns the reducer-function's zero-arity call result
     ;; n=1: reduce returns the only element, make sure it's what we want
     ;; n&gt;1: the acc + input -&gt; new-acc logic
     (letfn [(rf
               ([] acc0)
               ([[v success?] _input]
                (if-not success?
                  [v success?]
                  (if (list? v)
                    [(first v) true]
                    [v false]))))]
       (let [[v success?] (reduce rf (take n (repeat (rf acc0 nil))))]
         (if success? v default))))))
</code></pre>
<p>There is a entire section which introduces <a href=""https://clojure.org/reference/reducers"" rel=""nofollow noreferrer"">reducers</a>. And another section which introduces how you can compose reducers with <a href=""https://clojure.org/reference/transducers"" rel=""nofollow noreferrer"">transducers</a></p>
","0","Answer"
"78879145","78879096","<p>If your goal is to generate primes up to a certain number, using Sieve or Eratosthenes would be a much more efficient approach, which might also solve the issue of the program abruptly stopping:</p>
<pre><code>def sieve_of_eratosthenes(end_point):
    sieve = [True] * (end_point+ 1)
    sieve[0] = sieve[1] = False  # 0 and 1 are not primes
    for start in range(2, int(end_point**0.5) + 1):
        if sieve[start]:
            for multiple in range(start*start, end_point+ 1, start):
                sieve[multiple] = False
    return [num for num, is_prime in enumerate(sieve) if is_prime]

</code></pre>
","0","Answer"
"78880147","78879096","<p>The problem is that your process is aiming to produce about 50 million primes for the input 999999937, accumulating them in a list, and does this in an non-optimal way, as for each integer 𝑘 between 1 and 999999937 you call <code>is_prime</code>, which executes √𝑘/2 iterations when 𝑘 is prime.</p>
<p>Then, after a long running time, you concatenate those 50 million numbers with their decimal representation into one, long string, which will be about 500 million characters long. That is half a GB if we assume a 1-byte character representation. It may be that your program runs out of memory... if it ever finishes producing the primes in the first place.</p>
<p>Running your code with a small adaptation, turning <code>primeLister</code> into a <em>generator</em>, and then printing the primes one by one (well, I only printed one per 100000 to save time), I could monitor the progress, I got that generating the first million of primes took about 2 minutes, and it continued like this:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th>number of primes</th>
<th>time needed</th>
</tr>
</thead>
<tbody>
<tr>
<td>1,000,000</td>
<td>2 minutes</td>
</tr>
<tr>
<td>2,000,000</td>
<td>5 minutes</td>
</tr>
<tr>
<td>3,000,000</td>
<td>9 minutes</td>
</tr>
<tr>
<td>4,000,000</td>
<td>14 minutes</td>
</tr>
<tr>
<td>....</td>
<td>...</td>
</tr>
</tbody>
</table></div>
<p>I stopped there, but extrapolating, I estimate that it would take about 22 hours to finish the call to <code>primeLister</code> with input 999999937, and only then the string of 0.5 GB would be created from it. I suppose your system just kills the process either because of memory or time constraints. In my test it didn't get killed for the 15 minutes I waited for it. Then I killed it myself.</p>
<p>But it is clear that this is not practical. You should use a sieve approach.</p>
","2","Answer"
"78881070","78881023","<p>You can use <code>unnest_longer</code> and <code>unnest_wider</code> from <code>tidyr</code>.</p>
<pre><code>listexample |&gt; 
  tibble::enframe() |&gt; 
  dplyr::filter(name == &quot;books&quot;) |&gt; 
  tidyr::unnest_longer(value) |&gt; 
  tidyr::unnest_wider(value) |&gt; 
  dplyr::select(title, authors) |&gt; 
  tidyr::unnest_longer(authors) |&gt; 
  tidyr::unnest_wider(authors)
</code></pre>
<p>You can run the code adding one line at a time to see what everything does. In short, we turn the list into a two-row tibble (row one is <code>books</code>, row two is <code>misc</code>), then expand the nested information.</p>
<p>Read the <code>tidyr</code> <a href=""https://tidyr.tidyverse.org/articles/rectangle.html"" rel=""nofollow noreferrer"">&quot;rectangling&quot;</a> vignette for more information. In fact, you can probably reduce the code here by using <code>tidyr::hoist()</code>.</p>
","2","Answer"
"78881535","78881023","<p><strong>1)</strong> Use <code>tibblify</code> to create a tibble and from that select the <code>title</code> and <code>authors</code> columns.  The latter is a list column so <code>unnest</code> it.</p>
<pre><code>library(dplyr)
library(tidyr)
library(tibblify)

listexample %&gt;%
  .$books %&gt;%
  tibblify %&gt;%
  select(title, authors) %&gt;%
  unnest(authors)
</code></pre>
<p>giving</p>
<pre><code># A tibble: 6 × 3
  title  name  location    
  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       
1 Book 1 bob   north dakota
2 Book 1 susan california  
3 Book 1 tim   &lt;NA&gt;        
4 Book 2 tom   north dakota
5 Book 2 sally california  
6 Book 2 erica berlin      
</code></pre>
<p><strong>2)</strong>  A variation of the above is to use <code>tibblify</code> with a specification as shown below.  The specification can be created by running <code>guess_tspec_df(listexample$books)</code> and then editing that down to what is wanted.</p>
<pre><code>spec &lt;- tspec_df(
  tib_chr(&quot;title&quot;),
  tib_df(
    &quot;authors&quot;,
    tib_chr(&quot;name&quot;),
    tib_chr(&quot;location&quot;, required = FALSE),
  )
)
tibblify(listexample$books, spec) %&gt;% unnest(authors)
</code></pre>
","4","Answer"
"78881701","78881023","<p>In base R, using <code>lapply</code> and <code>do.call</code> you might do</p>
<pre class=""lang-r prettyprint-override""><code>&gt; lapply(listexample[[1L]], \(i) { 
+   tmp = i[names(i) %in% c(&quot;authors&quot;, &quot;title&quot;)] 
+   tmp2 = do.call(&quot;rbind&quot;, lapply(l&lt;-tmp[[&quot;authors&quot;]], `length&lt;-`, max(lengths(l))))
+   cbind.data.frame(&quot;title&quot; = rep(tmp[[&quot;title&quot;]], nrow(tmp2)), tmp2)
+   }) |&gt; do.call(what=&quot;rbind&quot;)

   title  name     location
1 Book 1   bob north dakota
2 Book 1 susan   california
3 Book 1   tim         NULL
4 Book 2   tom north dakota
5 Book 2 sally   california
6 Book 2 erica       berlin
</code></pre>
","1","Answer"
"78883095","78883070","<p>Combine date and time into a <code>datetime</code> object, then you can simply sort by it.</p>
<pre><code>from datetime import datetime

sorted_indexes = sorted(
    [idx for date, idx in date_list],
    key=lambda idx: datetime.strptime(
        f&quot;{date_list[idx][0].decode('utf-8')} {next(t[0] for t in time_list if t[1] == idx).decode('utf-8')}&quot;,
        '%d-%m-%Y %H-%M-%S'
    )
)
</code></pre>
<p>Output:</p>
<pre><code>[0, 2, 1]
</code></pre>
","1","Answer"
"78883101","78883070","<p>The key is to find a suitable data structure which allows you to use the built-in <code>sorted</code> function directly.</p>
<p>For example, if your date strings were in YYYY-MM-DD format and your data was structured like this,</p>
<pre><code>data = [
    ('2024-07-05', b'15-21-00', 0),
    ('2024-08-16', b'23-41-01', 1),
    ('2024-08-16', b'15-20-55', 2)
]
</code></pre>
<p>then you could use</p>
<pre><code>sorted_indexes = [i for date, time, i in sorted(data)]
</code></pre>
<p>because <code>sorted</code> sorts lists of tuples lexicographically (i.e., first by date, then equal dates by time, and as a bonus, equal times by index).</p>
<p>Since you don't have this format and structure, you need to create it (temporarily).</p>
<p>You can use the <code>datetime</code> module to convert each date string:</p>
<pre><code>from datetime import datetime

def convert_date(date):
    &quot;&quot;&quot;Convert byte string in DD-MM-YYYY to Unicode string in YYYY-MM-DD format.&quot;&quot;&quot;
    return datetime.strptime(date.decode(), &quot;%d-%m-%Y&quot;).strftime(&quot;%Y-%m-%d&quot;)
</code></pre>
<p>You can use a dictionary to combine the corresponding dates and times:</p>
<pre><code>tmp = {}
for date, i in date_list:
    tmp[i] = [convert_date(date)]
for time, i in time_list:
    tmp[i].append(time)  # assuming that i was already contained in date_list
data = [(date, time, i) for i, (date, time) in tmp.items()]
</code></pre>
<p>You can put everything in a function to keep it tidy:</p>
<pre><code>def sort_dates_and_times(dates, times):
    tmp = {}
    for date, i in dates:
        tmp[i] = [convert_date(date)]
    for time, i in times:
        tmp[i].append(time)  # assuming that i was already contained in date_list
    data = [(date, time, i) for i, (date, time) in tmp.items()]
    return [i for date, time, i in sorted(data)]

sorted_indexes = sort_dates_and_times(date_list, time_list)
</code></pre>
<hr />
<p>Another suitable data structure would be</p>
<pre><code>data = {
    0: ('2024-07-05', b'15-21-00'),
    1: ('2024-08-16', b'23-41-01'),
    2: ('2024-08-16', b'15-20-55')
}
</code></pre>
<p>which incidentally already exists as <code>tmp</code> above.</p>
<p><sup>(The difference between tuples and lists as values doesn't matter now.)</sup></p>
<p>Then instead of post-processing the output of <code>sorted</code> to get the indexes,</p>
<pre><code>data = [(date, time, i) for i, (date, time) in tmp.items()]
return [i for date, time, i in sorted(data)]
</code></pre>
<p>you would use a <code>key</code> argument to specify to sort the indexes not <em>by</em> the indexes but by the corresponding dates and times:</p>
<pre><code>def date_time_of_index(i):
    return tmp[i]

return sorted(tmp, key=date_time_of_index)
</code></pre>
<p>Or more succinctly:</p>
<pre><code>return sorted(tmp, key=lambda i: tmp[i])
</code></pre>
<p>Or even more succinctly <sup>(as suggested by <a href=""https://stackoverflow.com/users/16759116/no-comment"">no comment</a> in a comment)</sup>:</p>
<pre><code>return sorted(tmp, key=tmp.get)
</code></pre>
","1","Answer"
"78884917","78884897","<pre><code>for ti in theta:
    list_i.remove(ti)
    S += f(t1, ti, t3, *list_i)
</code></pre>
","-1","Answer"
"78884919","78884897","<p>The error happens because you're passing a tuple instead of separate arguments to f. To fix it, unpack the tuple like this:</p>
<pre><code>def g(t1, t3, *theta):
    S = 0
    for i, ti in enumerate(theta):
        remaining = theta[:i] + theta[i+1:]
        S += f(t1, ti, t3, *remaining)
    return S
</code></pre>
","1","Answer"
"78886384","78886330","<p>There are more options, like working with local lists in the functions, but IMO the cleanest way is to just send a copy of the list to the next function</p>
<pre><code>def outer():
    lst = ['outer']
    middle(lst[:])
    print(&quot;back to outer:&quot;, lst)


def middle(lst):
    lst.append('middle')
    inner(lst[:])
    print(&quot;back to middle:&quot;, lst)


def inner(lst):
    lst.append('inner')
    print(&quot;inner:&quot;, lst[:])
</code></pre>
","2","Answer"
"78890111","78886330","<p>Just showing how I incorporated feedback from @Guy and @juanpa into my test script. I appreciate the help and explanations about &quot;mutability&quot;.</p>
<pre><code>def outer():
    myList = ['outer']
    middle(myList)
    print(&quot;back to outer:&quot;, myList)
    
def middle(lst):
    theList = lst.copy()
    theList.append('middle')
    inner(theList)
    print(&quot;back to middle:&quot;, theList)

def inner(lst):
    expandedList = lst.copy()
    expandedList.append('inner')
    print(&quot;inner expandedList:&quot;, expandedList)
    
outer()


&gt;&gt;&gt;
inner expandedList: ['outer', 'middle', 'inner']
back to middle: ['outer', 'middle']
back to outer: ['outer']
&gt;&gt;&gt; 
</code></pre>
<p>I did also find <a href=""https://nedbatchelder.com/text/names.html"" rel=""nofollow noreferrer"">https://nedbatchelder.com/text/names.html</a> suggested by @juanpa quite helpful. It took me a few days to find time to read it.</p>
","0","Answer"
"78894228","78894219","<p>You're trying to find the index of a <code>new</code> array, not the one in the list. If you assign your array to a variable it will find it.</p>
<pre><code>var yourArray = new int[] { 3, 4 };
coordinates.Add(yourArray);

//...

var index = coordinates.IndexOf(yourArray); //1
</code></pre>
","1","Answer"
"78894230","78894219","<p>Arrays in C# are equal if they are the same array, not if they have the same content. You'll want to scan the list with a loop or using LINQ methods like <code>list.First(x =&gt; x.SequenceEqual(needle))</code></p>
","1","Answer"
"78894265","78894219","<p>Arrays in C# are reference types. They are equal to each other when the underlying object is the same.</p>
<p>In your code, you use <code>new</code> keyword when searching for matching array, which creates new underlying array object, just with the same elements, but it is different object underneath.</p>
<p>To correctly find index of an array with desired items you can first find the desired array (by using <code>FirstOrDefault</code> and <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sequenceequal?view=net-8.0"" rel=""nofollow noreferrer""><code>SequenceEqual</code></a> - mind that items must be in order for that to work) and then look for its index, like below:</p>
<pre class=""lang-cs prettyprint-override""><code>var matchingArray = coordinates.FirstOrDefault(x =&gt; x.SequenceEqual(new int[] { 3, 4 }));
var index = coordinates.IndexOf(matchingArray);
</code></pre>
<p>If you use C# 12, you can use <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions"" rel=""nofollow noreferrer"">collection expression</a>:</p>
<pre class=""lang-cs prettyprint-override""><code>x.SequenceEqual([3, 4])
</code></pre>
","2","Answer"
"78894284","78894219","<p>IndexOf method will not work directly on array elements since it uses the Equals method for arrays. This checks for reference equality rather than content equality. Therefore, you need to compare the contents of the arrays manually.</p>
<p>So, instead of using int array I would prefer values represented as strings which makes easy to find the index of the value.</p>
<pre><code>using System.Collections.Generic;

var coordinates = new List&lt;string&gt;();
coordinates.Add(&quot;1,2&quot;);
coordinates.Add(&quot;3,4&quot;);
coordinates.Add(&quot;5,6&quot;);
coordinates.Add(&quot;7,8&quot;);
coordinates.Add(&quot;9,10&quot;);
coordinates.Add(&quot;11,12&quot;);

foreach (string item in coordinates)
{
    Console.WriteLine(item);
}

var _valueToSearch = &quot;7,8&quot;;
var index = coordinates.IndexOf(_valueToSearch);
Console.WriteLine(index);
</code></pre>
<p>Also, you may try to implement your own search logic some thing like this:</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        var coordinates = new List&lt;int[]&gt;();
        coordinates.Add(new int[] { 1, 2 });
        coordinates.Add(new int[] { 3, 4 });
        coordinates.Add(new int[] { 5, 6 });
        coordinates.AddRange(new int[3][] { new int[] { 7, 8 }, new int[] { 9, 10 }, new int[] { 11, 12 } });

        foreach (int[] array in coordinates)
        {
            Console.WriteLine(string.Join(&quot;, &quot;, array));
        }

        var _valueToSearch = new int[] { 3, 4 };

        int index = FindIndex(coordinates, _valueToSearch);
        Console.WriteLine(index);
    }

    static int FindIndex(List&lt;int[]&gt; list, int[] valueToSearch)
    {
        for (int i = 0; i &lt; list.Count; i++)
        {
            if (AreArraysEqual(list[i], valueToSearch))
            {
                return i;
            }
        }
        return -1; // Not found
    }

    static bool AreArraysEqual(int[] array1, int[] array2)
    {
        if (array1.Length != array2.Length)
        {
            return false;
        }

        for (int i = 0; i &lt; array1.Length; i++)
        {
            if (array1[i] != array2[i])
            {
                return false;
            }
        }

        return true;
    }
}
</code></pre>
","1","Answer"
"78894462","78894219","<pre><code>using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        var coordinates = new List&lt;int[]&gt;();
        coordinates.Add(new int[] { 1, 2 });
        coordinates.Add(new int[] { 3, 4 });
        coordinates.Add(new int[] { 5, 6 });

        coordinates.AddRange(new int[3][] 
        {
            new int[] { 7, 8 }, 
            new int[] { 9, 10 }, 
            new int[] { 11, 12 } 
        });

        foreach (int[] array in coordinates)
        {
            Console.WriteLine(string.Join(&quot;, &quot;, array));
         }

        var searchArray = new int[] { 3, 4 };
        var index = coordinates.FindIndex(arr =&gt; arr[0] == searchArray[0] 
&amp;&amp; arr[1] == searchArray[1]);
        Console.WriteLine(index); // This should now return the correct 
index.
    }
}
</code></pre>
","1","Answer"
"78894472","78894402","<p>Here is one possible approach using <code>Reduce</code> and a custom function:</p>
<pre class=""lang-r prettyprint-override""><code>split_df &lt;- function(x, split) {
  if (is.data.frame(x)) {
    split(x, x[split])
  } else {
    lapply(x, split_df, split = split)  
  }
}

Output2 &lt;- Reduce(split_df, Factors_to_Split_by, init = Data_Frame)

identical(Output, Output2)
#&gt; [1] TRUE
</code></pre>
","5","Answer"
"78894512","78869910","<p>This seems like a great problem for recursion.</p>
<pre class=""lang-clj prettyprint-override""><code>(defn nth-in
  ([coll indices] (nth-in coll indices nil))
  ([coll [index &amp; indices] default]
   (cond (nil? index) coll
         (coll? coll) (recur (nth coll index default) indices default)
         :else default)))
</code></pre>
<pre class=""lang-clj prettyprint-override""><code>(it &quot;nth-in&quot;
  (should= nil (nth-in nil [0 1 2 3]))
  (should= nil (nth-in nil [0 1 2 3] nil))
  (should= :default (nth-in nil [0 1 2 3] :default))
  (should= :default (nth-in [] [0] :default))
  (should= &quot;first&quot; (nth-in [&quot;first&quot;] [0] :default))
  (should= :default (nth-in [&quot;first&quot;] [1] :default))
  (should= &quot;third&quot; (nth-in [[[&quot;third&quot;]]] [0 0 0] :default))
  (should= :default (nth-in 1 [0 0 0] :default))
  (should= :default (nth-in [&quot;infinite&quot;] (range) :default))
  (should= :thing (nth-in '(((:thing))) [0 0 0] false))
  (should= false (nth-in '((:thing)) [0 0 0] false)))
</code></pre>
","0","Answer"
"78894583","78894402","<p>You can define a recursive function like this</p>
<pre><code>f &lt;- function(data, fct) {
  if (length(fct) == 1) split(data, data[fct])
  lapply(split(data, data[fct[1]]), f, fct = fct[-1])
}
</code></pre>
<p>such that</p>
<pre><code>&gt; f(Data_Frame, Factors_to_Split_by)
$A
$A$a
$A$a$`1`
  Factor_1 Factor_2 Factor_3 Response
1        A        a        1 25.91996
2        A        a        1 25.12079

$A$a$`2`
  Factor_1 Factor_2 Factor_3 Response
3        A        a        2 24.88218
4        A        a        2 24.77660


$A$b
$A$b$`1`
  Factor_1 Factor_2 Factor_3 Response
5        A        b        1 25.63426
6        A        b        1 24.64074

$A$b$`2`
  Factor_1 Factor_2 Factor_3 Response
7        A        b        2 26.60224
8        A        b        2 25.17982


$A$c
$A$c$`1`
   Factor_1 Factor_2 Factor_3 Response
9         A        c        1 24.90249
10        A        c        1 26.12602

$A$c$`2`
   Factor_1 Factor_2 Factor_3 Response
11        A        c        2 25.87801
12        A        c        2 24.82886



$B
$B$a
$B$a$`1`
   Factor_1 Factor_2 Factor_3 Response
13        B        a        1 25.29955
14        B        a        1 24.74579

$B$a$`2`
   Factor_1 Factor_2 Factor_3 Response
15        B        a        2 25.06018
16        B        a        2 27.33450


$B$b
$B$b$`1`
   Factor_1 Factor_2 Factor_3 Response
17        B        b        1 25.78050
18        B        b        1 24.96464

$B$b$`2`
   Factor_1 Factor_2 Factor_3 Response
19        B        b        2 24.04945
20        B        b        2 23.52038


$B$c
$B$c$`1`
   Factor_1 Factor_2 Factor_3 Response
21        B        c        1 25.68414
22        B        c        1 25.25209

$B$c$`2`
   Factor_1 Factor_2 Factor_3 Response
23        B        c        2 24.32218
24        B        c        2 25.81953



$C
$C$a
$C$a$`1`
   Factor_1 Factor_2 Factor_3 Response
25        C        a        1 23.61297
26        C        a        1 25.52444

$C$a$`2`
   Factor_1 Factor_2 Factor_3 Response
27        C        a        2 27.80018
28        C        a        2 24.85324


$C$b
$C$b$`1`
   Factor_1 Factor_2 Factor_3 Response
29        C        b        1 24.63975
30        C        b        1 23.95888

$C$b$`2`
   Factor_1 Factor_2 Factor_3 Response
31        C        b        2 24.93261
32        C        b        2 23.85798


$C$c
$C$c$`1`
   Factor_1 Factor_2 Factor_3 Response
33        C        c        1 25.29823
34        C        c        1 25.16727

$C$c$`2`
   Factor_1 Factor_2 Factor_3 Response
35        C        c        2 25.36553
36        C        c        2 24.99169



$D
$D$a
$D$a$`1`
   Factor_1 Factor_2 Factor_3 Response
37        D        a        1 24.53971
38        D        a        1 24.72733

$D$a$`2`
   Factor_1 Factor_2 Factor_3 Response
39        D        a        2 25.74960
40        D        a        2 24.56601


$D$b
$D$b$`1`
   Factor_1 Factor_2 Factor_3 Response
41        D        b        1 22.72847
42        D        b        1 24.29836

$D$b$`2`
   Factor_1 Factor_2 Factor_3 Response
43        D        b        2 24.69552
44        D        b        2 23.77094


$D$c
$D$c$`1`
   Factor_1 Factor_2 Factor_3 Response
45        D        c        1 24.07517
46        D        c        1 26.21868

$D$c$`2`
   Factor_1 Factor_2 Factor_3 Response
47        D        c        2 26.46018
48        D        c        2 24.44250
</code></pre>
","3","Answer"
"78895303","78894219","<p>Because your list is called coordinates, I assume all arrays of the list will always have 2 elements. Because your arrays are not just some amount of numbers, but have an actual meaning, it is recommended to create a class:</p>
<pre><code>public class Coordinate
{
   public int X { get; set; }
   public int Y { get; set; }
}
</code></pre>
<p>This is a great improvement, because <code>coordinates[0].X</code> or <code>coordinates[0].Y</code> will tell you more what is going on in your code than <code>coordinates[0][0]</code> or <code>coordinates[0][1]</code>. But you will still have problems finding your coordinate with <code>IndexOf</code> method as pointed out in the other answers, because your coordinate is a reference type. Hence it is wise to implement <code>IEquatable&lt;Coordinate&gt;</code> and create your own comparision:</p>
<pre><code>public class Coordinate : IEquatable&lt;Coordinate&gt;
{
   public int X { get; set; }
   public int Y { get; set; }

   public bool Equals(Coordinate other)
   {
       return this.X == other?.X &amp;&amp; this.Y == other?.Y;
   }

   public override bool Equals(object other)
   {
       return other is Coordinate coordinate &amp;&amp; Equals(coordinate);
   }

   public override int GetHashCode()
   {
        return (X,Y).GetHashCode();
   }
   
   public  static bool operator ==(Coordinate left, Coordinate right)
   {
        if(left is null)
        {
            return right is null;
        }
        return left.Equals(right);
   }
   
   public  static bool operator !=(Coordinate left, Coordinate right)
   {
        return !(left == right);
    }
}
</code></pre>
<p>If you override Equals, you also have to override GetHashCode, that objects that are equal also have the same hash code. I just calculated the hashcode of a value tuple containing the X and the Y property. For convenience, I also overloaded the <code>==</code> and <code>!=</code> operator. This means, you will be able to do stuff like <code>if(coord1 == coord2) { }</code>. With the class, your code will become:</p>
<pre><code>var coordinates = new List&lt;Coordinate&gt;();
coordinates.Add(new Coordinate { X = 1, Y = 2 });
coordinates.Add(new Coordinate { X = 3, Y = 4 });
coordinates.Add(new Coordinate { X = 5, Y = 6 });
int index = coordinates.IndexOf(new Coordinate {X = 3, Y = 4});
</code></pre>
<p>Online-demo: <a href=""https://dotnetfiddle.net/ZE7BLr"" rel=""nofollow noreferrer"">https://dotnetfiddle.net/ZE7BLr</a></p>
","0","Answer"
"78898711","78898706","<p>Your looping has a lot more state management than you need.</p>
<pre><code>import time
import sys

text = &quot;hello&quot;
alphabet = [
    &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;,
    &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;
]
rtext = []
for char in text:
    for achar in alphabet:
        print(f&quot;\b{achar}&quot;,end=&quot;&quot;)
        sys.stdout.flush()
        time.sleep(0.2)
        if char == achar:
            print (&quot; &quot;, end=&quot;&quot;)
            break
print(&quot;\b&quot;)
</code></pre>
","0","Answer"
"78899436","78899394","<p>I‘m not entirely sure if you need help in specifically writing your recursive function or if you want to be able to dynamically pass the number of columns to split by.</p>
<p>If the latter you could simply do:</p>
<pre><code>library(tidyverse)

col_names &lt;- c('Factor_1', 'Factor_2', 'Factor_3')


Data_Frame %&gt;%
  group_by(across(all_of(!!col_names))) %&gt;%
  group_split()
</code></pre>
<p>In this example I manually define the three columns, but in other use cases you could automate this dynamically as well, e.g.:</p>
<pre><code>col_names &lt;- names(Data_Frame)[2:6]
</code></pre>
<p>or things like that.</p>
","0","Answer"
"78899792","78899394","<p>Here's a simple recursive function to split a data frame sequentially by column.  Be warned that this will perform poorly as the number of columns and also distinct values within columns increases.</p>
<pre><code>recursive_split &lt;- function(data, n = 1) {
  if (n &gt; ncol(data)) return(data)
  lapply(split(data, data[[n]]), recursive_split, n + 1)
}

res &lt;- recursive_split(Data_Frame)

identical(res, Split_Data)
[1] TRUE
</code></pre>
<p>A more performant and flexible recursive split function is available in the <code>collapse</code> package:</p>
<pre><code>collapse::rsplit(Data_Frame, Data_Frame, keep.by = TRUE)
</code></pre>
","1","Answer"
"78914968","78914941","<p>You can use <strong>Walrus</strong> operator</p>
<p><strong>python &gt;=3.8</strong></p>
<p><a href=""https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions"" rel=""nofollow noreferrer"">Walrus</a></p>
<pre><code>j=0
[j:= j + 2 * i for i in range(1,10)]
</code></pre>
<p>Output</p>
<pre><code>#[2, 6, 12, 20, 30, 42, 56, 72, 90]
</code></pre>
","2","Answer"
"78914984","78914941","<p>List comprehensions can't access their previous result, so a list comprehension isn't ideal here without some hacks. What <em>is</em> ideal is <a href=""https://docs.python.org/3/library/itertools.html#itertools.accumulate"" rel=""nofollow noreferrer""><code>itertools.accumulate</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; list(accumulate(range(10), lambda j, i: j + 2 * i))
[0, 2, 6, 12, 20, 30, 42, 56, 72, 90]
</code></pre>
","0","Answer"
"78918999","78914941","<p>Your desired series is essentially the result of mapping</p>
<pre><code>0 -&gt; 0
1 -&gt; 2
2 -&gt; 6
3 -&gt; 12
4 -&gt; 20
...
9 -&gt; 90
</code></pre>
<p>If you plot these on graph paper on using a graphics calculator such as Desmos, you can quickly see that these are the points of the quadratic function <code>f(x) = x * (x+1)</code>. Or in other words: to get the i-th number in your sequence, you need to multiply i with (i+1). Therefore, you can use the following comprehension:</p>
<pre class=""lang-py prettyprint-override""><code>[x * (x+1) for x in range(0,10)]
</code></pre>
","0","Answer"
"78920880","78920812","<p>We could use <code>reduce2</code> to iteratively apply <code>filter</code> statements, e.g.:</p>
<pre><code>library(purrr); library(dplyr)

out &lt;- starwars |&gt; 
  reduce2(
    .x = filter_list, .y = names(filter_list), .init = _,
    .f = \(df, x, y) filter(df, .data[[y]] %in% x)
  )
</code></pre>
<blockquote>
<pre><code># A tibble: 8 × 14
  name     height  mass hair_color skin_color eye_color birth_year sex   gender homeworld species films vehicles
  &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;list&gt;  
1 Leia Or…    150    49 brown      light      brown             19 fema… femin… Alderaan  Human   &lt;chr&gt; &lt;chr&gt;   
2 Beru Wh…    165    75 brown      light      blue              47 fema… femin… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   
3 Padmé A…    185    45 brown      light      brown             46 fema… femin… Naboo     Human   &lt;chr&gt; &lt;chr&gt;   
4 Cordé       157    NA brown      light      brown             NA NA    NA     Naboo     NA      &lt;chr&gt; &lt;chr&gt;   
5 Dormé       165    NA brown      light      brown             NA fema… femin… Naboo     Human   &lt;chr&gt; &lt;chr&gt;   
6 Raymus …    188    79 brown      light      brown             NA male  mascu… Alderaan  Human   &lt;chr&gt; &lt;chr&gt;   
7 Rey          NA    NA brown      light      hazel             NA fema… femin… NA        Human   &lt;chr&gt; &lt;chr&gt;   
8 Poe Dam…     NA    NA brown      light      brown             NA male  mascu… NA        Human   &lt;chr&gt; &lt;chr&gt;
</code></pre>
</blockquote>
<p>Check if correct:</p>
<pre><code>all.equal(
  out, 
  dplyr::starwars |&gt; 
    dplyr::filter(
      hair_color %in% filter_list[[&quot;hair_color&quot;]],
      skin_color %in% filter_list[[&quot;skin_color&quot;]]
    )
)
</code></pre>
","9","Answer"
"78920899","78920812","<p>Using base <code>Map</code>ing and <code>Reduce</code>ing:</p>
<pre><code>
    names(filter_list) |&gt; 
      Map(f = \(varname) starwars |&gt; filter(.data[[varname]] %in% filter_list[[varname]])) |&gt; 
      Reduce(f = \(stack, piece) inner_join(stack, piece))

</code></pre>
<p>Note that the accepted solution with <code>purrr::reduce2</code> is more than twice as fast.</p>
","4","Answer"
"78920969","78920812","<p>You can try <code>rowMeans</code> + <code>mapply</code> like below</p>
<pre><code>starwars %&gt;%
  filter(
    rowMeans(mapply(`%in%`, select(., names(filter_list)), filter_list)) == 1
  )
</code></pre>
<p>or <code>Reduce</code> + <code>Map</code></p>
<pre><code>starwars %&gt;%
  filter(Reduce(`&amp;`, Map(`%in%`, select(., names(filter_list)), filter_list)))
</code></pre>
<p>or just a base R combo <code>subset</code> + <code>Reduce</code> + <code>Map</code></p>
<pre><code>subset(starwars, Reduce(`&amp;`, Map(`%in%`, starwars[names(filter_list)], filter_list)))
</code></pre>
<p>which gives</p>
<pre><code># A tibble: 8 × 14
  name      height  mass hair_color skin_color eye_color birth_year sex   gender
  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 
1 Leia Org…    150    49 brown      light      brown             19 fema… femin…
2 Beru Whi…    165    75 brown      light      blue              47 fema… femin…
3 Padmé Am…    185    45 brown      light      brown             46 fema… femin…
4 Cordé        157    NA brown      light      brown             NA NA    NA
5 Dormé        165    NA brown      light      brown             NA fema… femin…
6 Raymus A…    188    79 brown      light      brown             NA male  mascu…
7 Rey           NA    NA brown      light      hazel             NA fema… femin…
8 Poe Dame…     NA    NA brown      light      brown             NA male  mascu…
# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,
#   vehicles &lt;list&gt;, starships &lt;list&gt;
</code></pre>
<hr />
<h1>Benchmark</h1>
<p>If &quot;Efficiency&quot; (in the title) refers to the speed, you can check it out the benchmarking here</p>
<pre><code>axeman &lt;- \() {
  starwars |&gt;
    reduce2(
      .x = filter_list, .y = names(filter_list), .init = _,
      .f = \(df, x, y) filter(df, .data[[y]] %in% x)
    )
}

i_o &lt;- \() {
  names(filter_list) |&gt;
    Map(f = \(varname) starwars |&gt; filter(.data[[varname]] %in% filter_list[[varname]])) |&gt;
    Reduce(f = \(stack, piece) inner_join(stack, piece))
}

tic1 &lt;- \() {
  starwars %&gt;%
    filter(
      rowMeans(mapply(`%in%`, select(., names(filter_list)), filter_list)) == 1
    )
}

tic2 &lt;- \() {
  starwars %&gt;%
    filter(Reduce(`&amp;`, Map(`%in%`, select(., names(filter_list)), filter_list)))
}

tic3 &lt;- \() {
  subset(starwars, Reduce(`&amp;`, Map(`%in%`, starwars[names(filter_list)], filter_list)))
}

microbenchmark(
  axeman(),
  i_o(),
  tic1(),
  tic2(),
  tic3(),
  unit = &quot;relative&quot;,
  check = &quot;equal&quot;
)
</code></pre>
<p>which shows</p>
<pre><code>Unit: relative
     expr       min         lq      mean    median        uq       max neval
 axeman()  11.98158   9.977999  9.679677  10.74786  9.652521  4.009427   100
    i_o() 172.43091 130.316298 96.607907 121.01399 96.094325 15.142344   100
   tic1()  12.45654  11.237299 11.433905  12.15965 12.796552  2.417425   100
   tic2()  12.14343  10.864622 10.723350  11.55505 11.580282  4.656169   100
   tic3()   1.00000   1.000000  1.000000   1.00000  1.000000  1.000000   100
</code></pre>
","7","Answer"
"78923040","78923016","<p><code>j &lt; lists.get(i).size() - 1</code></p>
<p>But you could also use the <code>String.join</code> method.</p>
","0","Answer"
"78923073","78923016","<p>With your original loop.</p>
<pre><code>for (int i = 0; i &lt; lists.size(); i++) {
    for (int j = 0; j &lt; lists.get(i).size(); j++) {
        if (???) {
            System.out.print(lists.get(i).get(j) + &quot;, &quot;);
        } else {
            System.out.print(lists.get(i).get(j));
        }
    }
    System.out.println();
}
</code></pre>
<p>The inner loop can be replaced with String.join.</p>
<pre><code>for (int i = 0; i &lt; lists.size(); i++) {
    System.out.println( String.join(&quot;, &quot;, lists.get(i) ) );   
}
</code></pre>
<p>The alternative is to replace <code>???</code> with <code>j  &lt; lists.get(i).size() - 1</code></p>
","1","Answer"
"78923174","78923016","<p>A more compact version to solve this (if you want each list's elements to be printed in the same line with commas) using streams would be the following:</p>
<pre><code> lists.forEach(list -&gt;  System.out.println(list.stream().collect(Collectors.joining(&quot;, &quot;))));
</code></pre>
","1","Answer"
"78923206","78923016","<p>Alternatively Use String.join() to handle comma separation automatically,</p>
<pre><code>for (List&lt;String&gt; list : lists){
System.out.println(String.join(&quot;, &quot;, list));
}
</code></pre>
<p><em>String.join()</em> - this method joins the elements of the list into a single string separated by commas.</p>
<p>Also, this removes the need for manual checking of the last element.</p>
<p>Further, we can utilize java streams,</p>
<pre><code>lists.stream()
.map(list -&gt; list.stream().collect(Collectors.joining(&quot;, &quot;)))
.forEach(System.out::println);
</code></pre>
","0","Answer"
"78923250","78923016","<p>I add this answer, just to show another way, since the answer of <strong>matt</strong>, perfectly fulfills the premise.</p>
<pre><code>String out = &quot;&quot;;
for( List&lt;String&gt; items : lists ) {
   for( String name : items ) {
        // to all lines we add ”, ” 
      out += name + &quot;, &quot;;
   }
     // we remove the last ”, ” and add the line break  
   out = out.substring( 0, out.length() -2 ) + &quot;\n&quot;;
}
System.out.print( out );
</code></pre>
<p>In this way, we have the result stored in a variable.</p>
","0","Answer"
"78923258","78921713","<p>I would use something like <code>//ul/li[table//tr/td[1] = '0234']</code> to select the <code>li</code> element that contains a <code>table</code> with the first <code>td</code> of a row having the value <code>0234</code>.</p>
<p><a href=""https://martin-honnen.github.io/xpath31fiddle/?xpath=%2F%2Ful%2Fli%5Btable%2F%2Ftr%2Ftd%5B1%5D%20%3D%20%270234%27%5D&amp;input=%21DOCTYPE%20html%3E%0A%3Chtml%20lang%3D%22en%22%3E%0A%3Chead%3E%3Ctitle%3ETest%20Selection%3C%2Ftitle%3E%3C%2Fhead%3E%0A%3Cbody%3E%0A%20%20%20%20%3Cul%20id%3D%27navlist%27%3E%0A%3Cli%3E%0A%20%3Ctable%20style%3D%27border%3A1px%20solid%20black%27%3E%3Ctr%3E%3Ctd%3E1234%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EJohnas%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EActive%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftable%3E%0A%20%3C%2Fli%3E%0A%20%3Cli%3E%0A%20%3Ctable%20style%3D%27border%3A1px%20solid%20blue%27%3E%3Ctr%3E%3Ctd%3E0234%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EPhilips%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EActive%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftable%3E%0A%3C%2Fli%3E%0A%3Cli%3E%0A%3Ctable%20style%3D%27border%3A1px%20solid%20green%27%3E%3Ctr%3E%3Ctd%3E2235%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EJoseph%3C%2Ftd%3E%3Ctr%3E%3Ctd%3EInActive%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftable%3E%0A%3C%2Fli%3E%0A%3C%2Ful%3E%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E&amp;input-type=HTML"" rel=""nofollow noreferrer"">Example fiddle</a>.</p>
","0","Answer"
"78926732","78921713","<p>I don't know why you had two results for your query, but perhaps you made a mistake and queried for the string <code>234</code> rather than <code>0234</code>.</p>
<p>To search for <code>table</code> elements which contain a particular piece of text which might be spread throughout the entire table, including text that begins in one table cell and continues in another, you would use this:</p>
<pre class=""lang-xpath prettyprint-override""><code>/html/body/ul/li/table[contains(., '0234')]
</code></pre>
<p>In that expression, the expression <code>contains(., '0234')</code> passes the <code>table</code> element as the first parameter of the <code>contains</code> function. Because the <code>contains</code> function expects a string value, this has the effect of converting the entire <code>table</code> element to a string value, by concatenating all the element's descendant text nodes, e.g. for the tables in your examples the tests would effectively be:</p>
<pre class=""lang-xpath prettyprint-override""><code>contains('1234JohnasActive', '0234'),
contains('0234PhilipsActive', '0234'),
contains('2235JosephInActive', '0234')
</code></pre>
<p>Another approach would be to check if <em>any one</em> of the cells in the <code>table</code> match the search string individually:</p>
<pre class=""lang-xpath prettyprint-override""><code>/html/body/ul/li/table[.//td[contains(., '0234')]]
</code></pre>
<p>This expression would check each table by finding all the descendant <code>td</code> elements, and seeing if any of them contained the string <code>0234</code>. e.g. the tests would be:</p>
<pre class=""lang-xpath prettyprint-override""><code>contains('1234', '0234'),
contains('Johnas', '0234'),
contains('Active', '0234'),
contains('0234', '0234'),
contains('Philips', '0234'),
contains('Active', '0234'),
contains('2235', '0234'),
contains('Joseph', '0234'),
contains('InActive', '0234')
</code></pre>
<p>If you actually want to check if there's an <em>exact match</em> between your search string and any of the cells in a table, then you should use the <code>=</code> operator rather than the <code>contains()</code> function, e.g.</p>
<pre class=""lang-xpath prettyprint-override""><code>/html/body/ul/li/table[.//td='0234']

</code></pre>
<p>The effective tests would be, for table 1:</p>
<pre><code>'1234'='0234',
'Johnas'='0234',
'Active'='0234'
</code></pre>
<p>... for table 2 only one test would be performed, because the first <code>td</code> in the table would return <code>true()</code> and the other cells would not need to be checked.</p>
<pre><code>'0234'='0234'
</code></pre>
<p>... for table 3:</p>
<pre><code>'2235'='0234',
'Joseph'='0234',
'InActive'='0234'
</code></pre>
<p>Note that when using the <code>contains()</code> function, the values are treated as strings, not as numeric values, because the <code>contains()</code> function expects string-valued parameters.</p>
<p>However, it's different when you compare an element to another value using the <code>=</code> operator. The <code>=</code> operator will have the effect of converting the element into a data type which matches the data type of the other operand. If you compare the element to a string, the test will be <em>string equality</em>, but if you compare it to a number, the test will be <em>numeric equality</em>. e.g. This expression will return the second <code>table</code> (because its descendant <code>&lt;td&gt;0234&lt;/td&gt;</code> will be converted to the number <code>234</code> by the <code>=</code> operator).</p>
<pre class=""lang-xpath prettyprint-override""><code>/html/body/ul/li/table[.//td=234]
</code></pre>
<p>... but the following expression will not return anything, because the <code>=</code> operator will convert the <code>&lt;td&gt;0234&lt;/td&gt;</code> into the string <code>0234</code>, which is not equal to the string <code>234</code>:</p>
<pre class=""lang-xpath prettyprint-override""><code>/html/body/ul/li/table[.//td='234']
</code></pre>
","0","Answer"
"78927051","78923016","<p>Unless You must use Looping Constructs, a functional approach could be much concise and simpler. Just for clarity, the <code>for(...){}</code> Construct is replaced with a simple <code>printData()</code> Method.</p>
<pre><code>  public static void printData(List&lt;List&lt;String&gt;&gt; objectList) {
    return objectList.stream().map( o -&gt; { // map through outer list:
        o.remove(o.size() - 1);// remove last element of inner list

        // join remaining items with comma [ as string ]
        String result = o.stream().reduce( (a, b) -&gt; a + &quot;, &quot; + b).get();
        System.out.println(result); // Print out the result of each row
        return result; 
    }).collect(Collectors.joining(&quot;\n&quot;)); // return result - should you need it;
}
</code></pre>
<p>If you'd replace the Looping part with a call to <code>printData(lists);</code>, and also add the Method to your Program... You may get what you intended...</p>
<p>Otherwise, you could just directly replace the Looping Construct <code>for(...){...}</code>, with this functional equivalent like so:</p>
<pre><code>    lists.stream().forEach( o -&gt; {
        o.remove(o.size() - 1);
        System.out.println( o.stream().reduce( (a, b) -&gt; a + &quot;, &quot; + b).get() );
    });
</code></pre>
","0","Answer"
"78930001","78929975","<pre><code>n &lt;- c(10, 5, 35, 16, 2)
s &lt;- lapply(
  seq_along(n), 
  \(i) data.frame(CT = sample(-18:18, n[i], replace = TRUE), ID = i)
)
do.call(rbind.data.frame, s)
</code></pre>
<p>gives:</p>
<blockquote>
<pre><code>    CT ID
1    9  1
2  -15  1
3   10  1
4   10  1
5   -9  1
6   -3  1
7    3  1
8   18  1
9    2  1
10  15  1
</code></pre>
</blockquote>
<p>Using <code>tidyverse</code>:</p>
<pre><code>n &lt;- c(10, 5, 35, 16, 2)
map(n, \(N) data.frame(CT = sample(-18:18, N, replace = TRUE))) |&gt; 
  bind_rows(.id = 'ID')
</code></pre>
","2","Answer"
"78931404","78929975","<p>If one call to sample (i.e. <code>sum(n)</code>) is not what you want, we can <code>Vectorise</code> <code>sample()</code> like</p>
<pre class=""lang-r prettyprint-override""><code>set.seed(1)
n = c(10, 5, 35, 16, 2)
data.frame(ID=rep(seq(n), n), 
           CT=unlist(Vectorize(sample, &quot;size&quot;)(-18:18, n, TRUE)))
</code></pre>
<p>giving</p>
<pre class=""lang-r prettyprint-override""><code>   ID  CT
1   1 -15
2   1 -18
3   1  15
4   1   4
5   1  -5
6   1  -1
7   1  14
8   1   2
9   1   2
10  1  -9
11  2 -12
12  2 -10
13  2  -4
14  2   2
15  2  18
16  3   6
17  3  18
18  3  18
19  3  15
20  3   6
21  3  -4
22  3  14
23  3   1
24  3  16
25  3 -13
26  3  -9
27  3   1
28  3   9
29  3   1
30  3   4
31  3 -13
32  3   6
33  3 -13
34  3 -13
35  3   5
36  3  13
37  3  -5
38  3 -17
39  3  -1
40  3   3
41  3  -5
42  3 -18
43  3 -13
44  3   4
45  3 -13
46  3  -8
47  3  -2
48  3  17
49  3  -6
50  3   6
51  4   6
52  4   4
53  4   1
54  4  10
55  4  -6
56  4   3
57  4  10
58  4   9
59  4  14
60  4   2
61  4  12
62  4  -2
63  4 -10
64  4   4
65  4   0
66  4   7
67  5  11
68  5  13
</code></pre>
","1","Answer"
"78931718","78929975","<p>Here are two other options</p>
<ul>
<li><code>dplyr</code> with <code>enframe</code> + <code>unnest</code></li>
</ul>
<pre><code>n %&gt;%
  map(sample, x = -18:18, replace = TRUE) %&gt;%
  enframe() %&gt;%
  unnest(value)
</code></pre>
<p>which gives</p>
<pre><code># A tibble: 68 × 2
    name value
   &lt;int&gt; &lt;int&gt;
 1     1   -15
 2     1   -18
 3     1    15
 4     1     4
 5     1    -5
 6     1    -1
 7     1    14
 8     1     2
 9     1     2
10     1    -9
# ℹ 58 more rows
# ℹ Use `print(n = ...)` to see more rows
</code></pre>
<ul>
<li>base R with <code>lapply</code> + <code>stack</code></li>
</ul>
<pre><code>stack(
  lapply(
    setNames(n,seq_along(n)),
    sample,
    x = -18:18,
    replace = TRUE
  )
)
</code></pre>
<p>which gives</p>
<pre><code>   values ind
1     -15   1
2     -18   1
3      15   1
4       4   1
5      -5   1
6      -1   1
7      14   1
8       2   1
9       2   1
10     -9   1
11    -12   2
12    -10   2
13     -4   2
14      2   2
15     18   2
16      6   3
17     18   3
18     18   3
19     15   3
20      6   3
21     -4   3
22     14   3
23      1   3
24     16   3
25    -13   3
26     -9   3
27      1   3
28      9   3
29      1   3
30      4   3
31    -13   3
32      6   3
33    -13   3
34    -13   3
35      5   3
36     13   3
37     -5   3
38    -17   3
39     -1   3
40      3   3
41     -5   3
42    -18   3
43    -13   3
44      4   3
45    -13   3
46     -8   3
47     -2   3
48     17   3
49     -6   3
50      6   3
51      6   4
52      4   4
53      1   4
54     10   4
55     -6   4
56      3   4
57     10   4
58      9   4
59     14   4
60      2   4
61     12   4
62     -2   4
63    -10   4
64      4   4
65      0   4
66      7   4
67     11   5
68     13   5
</code></pre>
<h1>Data</h1>
<pre><code>set.seed(1)
n &lt;- c(10, 5, 35, 16, 2)
</code></pre>
","2","Answer"
"78933606","78933527","<p>The main issue goes back to your loop. If you correct, the other part of code is right.</p>
<pre><code>two_pairs = 0

for c in range(0, len(lst)-1, 2):
  if lst[c] == lst[c+1]:
        #c += 2 as loop counter is 2 so I commented this line.
        two_pairs += 1

print(two_pairs)
</code></pre>
","-2","Answer"
"78933634","78933527","<p>In your answer you are looping on the value of the list item instead of the position,
you can use a solution like this</p>
<pre><code>lst = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4]

two_pairs = 0
i = 0

while i &lt; len(lst) - 1:
    if lst[i] == lst[i + 1]:
        two_pairs += 1
        i +=1
    i += 1  

print(two_pairs)
</code></pre>
","1","Answer"
"78936334","78936323","<p><code>df['id'].apply(lambda x: ', '.join(x))</code> is trying to apply <code>', '.join</code> to all rows, including the one that has a <code>NaN</code>.</p>
<p>Instead you can use something like this:</p>
<pre><code>df[&quot;id&quot;] = df.loc[df[&quot;id&quot;].notna(), &quot;id&quot;].str[0].str.split().apply(&quot;, &quot;.join)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>                                           id
0                        54930058LIMFSJIOLQ48
1                                         NaN
2  5493006B6WMKNQ8QNP51, 254900425JAG3QVRMM28
</code></pre>
","2","Answer"
"78936336","78936323","<p>The “np.nan” code you entered is the cause of the problem because NaN is not an iterable type. Therefore python issues an error message when you try to run <code>', '.join(x)</code> on <code>NaN</code></p>
<p>If you still want to run the code, you can use <code>isinstance</code> to ensure <code>x</code> is a list and you can run the code.</p>
<p>Try this one</p>
<pre class=""lang-py prettyprint-override""><code>df['id'] = df['id'].apply(lambda x: ', '.join(x) if isinstance(x, list) else x)
</code></pre>
<p>The code will check <code>x</code> whether it is a list or not. If <code>x</code> is not a list, it will return <code>x</code> itself.</p>
","3","Answer"
"78936347","78936323","<p>The second value in the column NaN, which is not an iterable and will throw an error if passed to <code>str.join</code>.</p>
<p>Your current solution skips that row on the left side of the assignment, but on the right side (where all the processing is occurring), you're still iterating over the entire <code>df['id']</code> column, including the NaN.</p>
<p>You could do as <a href=""https://stackoverflow.com/a/78936334"">e-motta suggested</a> and move the filtering over to the right, but you can also just use the <code>Series.str.join</code> method. It'll handle all the NaNs for you, and is syntactically much shorter:</p>
<pre class=""lang-py prettyprint-override""><code>import pandas as pd
import numpy as np

data = {'id': [['54930058LIMFSJIOLQ48'],np.nan,['5493006B6WMKNQ8QNP51',  '254900425JAG3QVRMM28']]}
df = pd.DataFrame(data)
df['id'] = df['id'].str.join(', ')
print(df)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>                                           id
0                        54930058LIMFSJIOLQ48
1                                         NaN
2  5493006B6WMKNQ8QNP51, 254900425JAG3QVRMM28
</code></pre>
","0","Answer"
"78936573","78936557","<p>You ask why you are getting different outputs when running your program, and a sufficient answer is ensuring ordering (see 1 or 2). The better question, however, is why you are getting invalid output, and for that you want to ensure the algorithm is correct for any order of intermediate data (see 3).  You haven't told us what the correct output is, and I don't know what the rules are for Wordle.</p>
<ol>
<li>Use the ordered <code>dict.fromkeys(data)</code> instead of unordered <code>set(data)</code> for a consistent output.</li>
<li>&quot;#Sorts based on index&quot; is a partial sort.  Elements with the same index is unordered.  For example <code>'PI2', 'PC2', 'PW2'</code> vs <code>'PC2', 'PI2', 'PW2'</code>.  If you change this to a full sort it will also resolve the issue with inconsistent output.</li>
<li>In the sometimes case you end up with two instances of <code>PI2</code> in the list <code>remove</code>.  This is because you either remove <code>data[x]</code> or <code>data[x+1]</code> and if the sequence is just right you end up removing the same element multiple times in this case <code>PI2</code> twice.  You want to make this deterministic regardless of order (or order input per 1 or 2).  For example, look at all elements with the same index and decide which of elements of that set you want to retain.</li>
</ol>
","0","Answer"
"78936598","78936557","<ol>
<li>Instead of converting data to a set to remove duplicates, use a
different approach that maintains the order.</li>
<li>You can iterate through the list and build a new list that only includes unique elements while preserving the original order.</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>#Word and Guess
word = &quot;APPLE&quot;
guess = &quot;AMPLE&quot;

#The soon to be list of letters that will lead to the output
data = []

#Checking if guess is valid
if len(guess) != 5:
    print(&quot;Guess should be 5 letters long.&quot;)
if not guess.isalpha():
    print(&quot;Guess should be an English word.&quot;)
else:
    for x in range(5):
        for y in range(5):
            #Adds each letter of the guess with its status and index
            #C - Correct Place, W - Wrong Place Correct Letter, I - Incorrect
            if word[x] == guess[y]:
                if x == y:
                    data.append(guess[y] + &quot;C&quot; + str(y))
                else:
                    data.append(guess[y] + &quot;W&quot; + str(y))
            else:
                data.append(guess[y] + &quot;I&quot; + str(y))

    # Remove duplicates while preserving order
    seen = set()
    unique_data = []
    for item in data:
        if item not in seen:
            unique_data.append(item)
            seen.add(item)
    data = unique_data

    # Sorts based on index
    for x in range(len(data)):
        for y in range(len(data) - x - 1):
            if data[y][2] &gt; data[y + 1][2]:
                temp = data[y]
                data[y] = data[y + 1]
                data[y + 1] = temp

    # Removes all unnecessary letters, e.g., removes AI0 if there is AC0
    remove = []

    for x in range(len(data) - 1):
        if data[x][2] == data[x + 1][2]:
            if data[x][1] == &quot;C&quot;:
                remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;W&quot;:
                if data[x + 1][1] == &quot;C&quot;: 
                    remove.append(str(data[x]))
                elif data[x + 1][1] == &quot;I&quot;: 
                    remove.append(str(data[x + 1]))
            elif data[x][1] == &quot;I&quot;: 
                remove.append(str(data[x]))

    oL = [x for x in data if x not in remove]

    # Makes output have colorful letters for convenience 
    output = &quot;&quot;

    for x in range(len(oL)):
        if oL[x][1] == &quot;C&quot;:
            output = output + &quot;\033[1;33;40m&quot; + oL[x][0]
        elif oL[x][1] == &quot;W&quot;:
            output = output + &quot;\033[1;32;40m&quot; + oL[x][0]
        elif oL[x][1] == &quot;I&quot;:
            output = output + &quot;\033[1;37;40m&quot; + oL[x][0]
    output = output + &quot;\033[0;37;40m&quot;

# Tests
print(data)
print(remove)
print(oL)

# Output
print(output)
</code></pre>
<p>This approach ensures that duplicates are removed while maintaining the original order of elements, so your outputs should be consistent.</p>
","0","Answer"
"78936629","78936557","<p>I do believe the problem you are encountering has to do with converting to a set and then back into a list.  It may be better to avoid having duplicates in the first place by changing up your flow of logic.  Here's a version that works and avoids duplicating:</p>
<pre><code>def check_letter(index, word, guess):
    letter = guess[index]

    # check letter in word
    if not letter in word:
        # return incorrect result
        return f'{letter}I{index}'
    # letter is in word; check position
    if letter == word[index]:  # positions match
        # return correct result
        return f'{letter}C{index}'
    else:
        # return correct letter, wrong position
        return f'{letter}W{index}'

def main():
    word = &quot;APPLE&quot;
    guess = input(&quot;Enter guess: &quot;)

    while len(guess) != 5 or not guess.isalpha():
        print(&quot;Please enter a five-letter guess.&quot;)
        guess = input(&quot;Enter guess: &quot;)

    guess = guess.upper()  # ensure capital letters

    results = []  # to be populated

    # check each letter
    for index in range(0, 5):
        results.append(check_letter(index, word, guess))

    print(results)

# Run the script
main()

</code></pre>
<p>This accomplishes your desired output but is a bit cleaner.  If you're unfamiliar with any concepts used here, feel free to comment, I'm happy to clarify this code and my thinking in writing it!</p>
","0","Answer"
"78937386","78937366","<p>You can indeed use bisect module to find the index of the tuple with the id you've given.</p>
<pre><code>import bisect
# sorting
records_by_id = [(0, 'bubble4'), (3, 'bubble5'), (4, 'bubble3'), (5, 'bubble2'), (10, 'bubble1')]

# id you wanna find
target_id = 4

# create a list of the first ids from the tuples
ids = [x[0] for x in records_by_id]

# use bisect_left to find the index where the target_id would be inserted to maintain sorted order and check if the id at that index is the target_id
index = bisect.bisect_left(ids, target_id)
if index &lt; len(records_by_id) and records_by_id[index][0] == target_id:
    print(f&quot;Found at index: {index}&quot;)
else:
    print(&quot;Not found&quot;)
</code></pre>
","0","Answer"
"78937402","78937366","<p>You're not far from the actual solution. Since you already sorted the list by the first element of the tuple, you can indeed use <code>bisect</code> module to find the index of the tuple given the first element of it.</p>
<pre class=""lang-py prettyprint-override""><code>import bisect

def find_tuple_index(sorted_list, target_id):
    index = bisect.bisect_left(sorted_list, (target_id,))
    if index &lt; len(sorted_list) and sorted_list[index][0] == target_id:
        return index
    return -1  # Not found

# Your sorted list
records_by_id = [(0, 'bubble4'), (3, 'bubble5'), (4, 'bubble3'), (5, 'bubble2'), (10, 'bubble1')]

# Search for the tuple with id 4
result = find_tuple_index(records_by_id, 4)
print(result)  # Output: 2
</code></pre>
<p>Let me elaborate a bit on the explanation of the code.</p>
<ul>
<li><p>First we use bisect.bisect_left() to find the insertion point for the target ID. This function works because our list is sorted by the first element of each tuple.</p>
</li>
<li><p>Now <code>bisect_left()</code> returns the leftmost place in the list where we can insert the target value while maintaining the sort order.</p>
</li>
<li><p>We then check if the found index is within the list bounds and if the first element of the tuple at that index matches our target ID.</p>
</li>
<li><p>If there's a match, we return the index, otherwise we return -1 to say the item wasn't found.</p>
</li>
</ul>
<p>Btw I've assumed that the IDs in your list are unique. If you might have duplicate IDs you'd need to modify the function to handle that case, maybe by returning a list of all matching indices.</p>
<p>Edit: the complexity of the approach is <strong>O(log n)</strong> btw</p>
","0","Answer"
"78937405","78937366","<p>Reuse the sort key for bisecting:</p>
<pre class=""lang-py prettyprint-override""><code>from bisect import bisect_left

records_by_id = [(10, 'bubble1'), (5, 'bubble2'), (4, 'bubble3'), (0, 'bubble4'), (3, 'bubble5'),]

key = lambda x: x[0]
records_by_id.sort(key=key)

index = bisect_left(records_by_id, 4, key=key)

print(index)
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=VZBBCoMwEEX3OcXsjGCLVoVS8CQiYkykoWokRtCzdOOmvVOv0RN0SK3WxSwe_D_z59-f3WSuqp3nx2Cqw_n1rrRqgMlelAZk0yltFsprURlCtCiV5n3OplxySCClge-BwwbGahE4rgc0XvlkOVo5tLzpI8vhyjFyRshNTLi5LhrGCxgvMKZ-tj987DEYRV2C4xIiWy5G9PxFpTuDB5hi03datoZal_v9fCngV8QH"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
<p>If it's possible that the given number doesn't occur, add a check at the end checking whether it actually occurs at the resulting index.</p>
","2","Answer"
"78937416","78937366","<pre><code>import bisect

records_by_id = [(0, 'bubble4'), (3, 'bubble5'), (4, 'bubble3'), (5, 'bubble2'), (10, 'bubble1')]

def find_tuple_index(records, target_id):
    # Create a list of just the IDs for binary search
    ids = [record[0] for record in records]
    
    # Use bisect to find the insertion point
    index = bisect.bisect_left(ids, target_id)
    
    # Check if the index is valid and the ID matches
    if index != len(records) and records[index][0] == target_id:
        return index
    return -1  # Not found

# Example usage
target_id = 4
result_index = find_tuple_index(records_by_id, target_id)
print(f&quot;Tuple with ID {target_id} found at index: {result_index}&quot;)
</code></pre>
<p>Given a target ID (For example 4), I need to efficiently find the index of the corresponding tuple in this list. In this case,I want to find the index of</p>
<blockquote>
<p>(4,'bubble3')</p>
</blockquote>
<p>A Linear search is not ideal as the list is already sorted. And we are using bisect.</p>
<p>My Answer imports bisect and uses</p>
<blockquote>
<p>bisect.bisect.left()</p>
</blockquote>
<p>to find isertion point of the target ID.</p>
<p>Checks if the found index is valid and if the ID matches the target, returns the index is found, or -1 if not.</p>
","-2","Answer"
"78944089","78944066","<p>I am going to assume you do want to remove it from the original list. But don't want to recreate it(lst).</p>
<pre><code># list  of Named tuples
lst = [Car(name='car_1', mileage=100), Car(name='car_2', mileage=200)]

# find the matching tuple
car_to_remove = next((car for car in lst if car.name == 'car_1'), None)

# if it exists remove
if car_to_remove:
    lst.remove(car_to_remove)

print(lst)  
[Car(name='car_2', mileage=200)]
</code></pre>
","1","Answer"
"78944158","78944066","<p>You can use a list comprehension to find the first car named <code>car_1</code> in the <code>lst</code> and remove it using <code>remove()</code> method:</p>
<pre class=""lang-py prettyprint-override""><code>lst.remove([car for car in lst if car.name == 'car_1'][0])
</code></pre>
<p>To avoid iterating over the whole list, you can use <code>next</code> like this:</p>
<pre class=""lang-py prettyprint-override""><code>lst.remove(next(car for car in lst if car.name == 'car_1', None))
</code></pre>
","-1","Answer"
"78944198","78944066","<p>If you want to delete a &quot;Car&quot; element by its name, you can create a custom class with modified logic for removing elements.</p>
<pre class=""lang-py prettyprint-override""><code>from typing import NamedTuple

class MyList(list):
    def remove(self, a):
        for x in self:
            if x.name == a:
                super().remove(x)
                break

class Car(NamedTuple):
    name: str
    mileage: int

lst = MyList([Car(name=&quot;car_1&quot;, mileage=100), Car(name=&quot;car_2&quot;, mileage=200)])
lst.remove(&quot;car_1&quot;)

print(lst) # [Car(name='car_2', mileage=200)]
</code></pre>
","0","Answer"
"78946178","78946135","<p>A function is not a name. The blessed way is to use a dictionary to map names to functions:</p>
<pre><code>casts={'int': int, 'float': float, 'str': str}
cast = casts[input('Enter the cast name')]
</code></pre>
<p>An anti-pattern allows to search for names in a module:</p>
<pre><code>import builtins
cast = getattr(builtins, input('Enter the cast name)]
</code></pre>
<p>But beware, although it is allowed by the language, this breaks the separation between the user code and the internals of the language. You should avoid it if you can...</p>
<hr />
<p>From your comments, what you are looking for is something close to:</p>
<pre><code>cast_ref = {'int': int, 'float': float, 'str': str}
casts = [cast_ref[src] for src in input('Enter the casts: ').split()]
</code></pre>
","8","Answer"
"78946494","78946135","<p>If you don't know the data types ahead of time, you can use pandas' built-in data type inference mechanisms to automatically detect the data types of each column.</p>
<pre><code>import pandas as pd

# Read the data file into a pandas DataFrame
df = pd.read_csv('data.csv')

# Infer data types for each column
df = df.infer_objects()

# Print the resulting DataFrame
print(df)

</code></pre>
","1","Answer"
"78946503","78946135","<pre><code>casts = [float, float, int, str, int, str, str]

def tonumtype(item,num)
tonumb = f&quot;&quot;&quot;
{item}({num}) &quot;&quot;&quot;
return eval(tonumb)

tonumtype(casts[1],10) = float(10)
</code></pre>
","-2","Answer"
"78949002","78948915","<p>You're thinking about this the wrong way.</p>
<p>As you said, in a database this index will (typically) already exist, and this looks like Entity Framework... which will let you structure the code to take advantage of the index such that only the matching records are ever returned to your app at all.</p>
<p>This greatly reduces memory use in both your app and on the database server, and greatly reduces time waiting for the data transfer over the wire.</p>
<p><em><strong>That is, loading the whole table to a list is pretty much always a mistake in the first place.</strong></em></p>
<p>It's also typically better to prefer using an <code>IQueryable&lt;T&gt;</code> or <code>IEnumerable&lt;T&gt;</code> in your app code over a list for as long as possible. This includes when defining things like method arguments and return types.</p>
<p>But I think I get what you're trying to do: this is a bunch of separate queries to the table in a tight loop. It seems like it should be better to cache the data locally <strong>once</strong> for this process.</p>
<p>That idea is still mistaken.</p>
<p>I do understand this specific code might be a little trickier, but it is still possible to send the whole set of parts up to the database as a table-value parameter you can use in a JOIN, to get this down to <em>ONE ROUND TRIP</em> to and from the database, where only the matching records are ever transferred or held in memory.</p>
<p>I'm personally more of a bare-SQL guy, so I won't attempt here to show what that will look like as EF code. In fact, this is a good demonstration for why I don't really love ORMs: when it comes down to it, you still have know about the SQL you need to create, and now you <em>also</em> need to know what to do to get your ORM to generate your desired SQL. This means an ORM ultimately tends to <em>increase</em> cognitive load on the developer, since now you have to know about <em>both</em>. ORMs are only really useful for the simplest of queries, and those were easy to build the SQL for anyway.</p>
<p>I'll finish by saying it's likely the <code>ListOfParts</code> set is also based on criteria from the database in the first place. It could be based on user selections, but database criteria is just as likely, in which case this should be structured more as a normal JOIN from the beginning, at the point when the parts list is first loaded.</p>
","4","Answer"
"78949079","78948915","<p>So you want to find and process all parts which have a non existing product? Let the database find them, so don't use a loop so early and ask for each part the Database. Do you have already loaded that local list of parts into memory or do you get them from the DB, then you could optimize the query further. If the former you could use this approach:</p>
<pre><code>var partsWithProductId = ListOfParts.Where(p =&gt; p.ProductId != null);
IQueryable&lt;Part&gt; partsWithNonExistingProduct = db.Parts
    .Where(p =&gt; partsWithProductId.Contains(p.Id) 
            &amp;&amp; !db.Products.Any(p =&gt; p.Id == part.ProductId)); 
</code></pre>
<p>Now you can use a <code>foreach</code> loop to process the parts and  you need only one request to the DB.</p>
","2","Answer"
"78954778","78954735","<p>one possible solution would be to slice the list into chunks based on <code>num</code> in a list comprehension:</p>
<pre><code>num = 2
test = ['1', '1', '1', '1', '1', '1']  

out = [test[i:i + num] for i in range(0, len(test), num)]
</code></pre>
<p>Output:</p>
<pre><code>[['1', '1'], ['1', '1'], ['1', '1']]
</code></pre>
<p>Explanation:</p>
<p><code>range(0, len(test), num)</code> is equivalent to <code>range(start, stop, step)</code> so it will produce 3 iterations: <code>0,2,4</code> since stop is exclusive in the range</p>
<p><code>test[i:i + num]</code> creates a slice of test starting at index <code>i</code> and ending at <code>i + num</code></p>
<p>When <code>i = 0</code>, it returns <code>test[0:2]</code>, which is <code>['1', '1']</code></p>
<p>When <code>i = 2</code>, it returns <code>test[2:4]</code>, which is <code>['1', '1']</code>.</p>
<p>When <code>i = 4</code>, it returns <code>test[4:6]</code>, which is <code>['1', '1']</code>.</p>
","1","Answer"
"78954843","78954735","<p>The recipe list in the <a href=""https://docs.python.org/3/library/itertools.html"" rel=""nofollow noreferrer"">itertools docs</a> has a function to do that.</p>
<pre><code>def grouper(iterable, n, *, incomplete='fill', fillvalue=None):
    &quot;Collect data into non-overlapping fixed-length chunks or blocks.&quot;
    # grouper('ABCDEFG', 3, fillvalue='x') → ABC DEF Gxx
    # grouper('ABCDEFG', 3, incomplete='strict') → ABC DEF ValueError
    # grouper('ABCDEFG', 3, incomplete='ignore') → ABC DEF
    iterators = [iter(iterable)] * n
    match incomplete:
        case 'fill':
            return zip_longest(*iterators, fillvalue=fillvalue)
        case 'strict':
            return zip(*iterators, strict=True)
        case 'ignore':
            return zip(*iterators)
        case _:
            raise ValueError('Expected fill, strict, or ignore')
</code></pre>
","0","Answer"
"78959876","78959695","<p>When you use comparison in Dart, the '==' condition means that the references of the objects are identical, not their value.
There is, however, a class named 'collection'. So, first, add it:</p>
<pre><code>dependencies:
  collection: ^1.15.0
</code></pre>
<p>Then, the following code should work:</p>
<pre><code>import 'package:collection/collection.dart';  // Import the collection package

List&lt;Map&lt;String, Object&gt;&gt; orderList = [{&quot;Nasi Goreng&quot;: 1}];

ElevatedButton(
  onPressed: () {
    print(orderList);

    // Now we will use MapEquality to compare the map contents (not reference)
    final mapEquality = MapEquality();
    bool isEqual = mapEquality.equals(orderList[0], {&quot;Nasi Goreng&quot;: 1});
    
    // Print whether the maps are equal
    print(isEqual);  // Now it should print true now

    // Assert based on map content equality, to be on the safe side
    assert(isEqual);
  },
  child: Text(&quot;+&quot;),
)
</code></pre>
","0","Answer"
"78959889","78959695","<p>When you try to compare Maps in Dart by using <code>==</code>, Dart will basically compare each <code>hashCode</code> of those Maps. Since these Maps are two different Object, the hashCode of each Map is distinct, and <code>==</code> comparison will always return <code>false</code>:</p>
<pre><code>print(orderList[0].hashCode) // 329301310
print({&quot;Nasi Goreng&quot;: 1}.hashCode) // 743029473
</code></pre>
<p>To compare equality of <code>Map</code>, you can use <code>mapEquals</code> from <a href=""https://pub.dev/packages/foundation"" rel=""nofollow noreferrer"">https://pub.dev/packages/foundation</a></p>
<p>(As one of solutions of similar question produced in <a href=""https://stackoverflow.com/questions/61765518/how-to-check-two-maps-are-equal-in-dart"">how to check two maps are equal in dart</a>)</p>
<p>Example:</p>
<pre><code>import 'package:flutter/foundation.dart';

void main() {
  const orderedList = [{&quot;Nasi Goreng&quot;: 1}];
  print( mapEquals(orderedList[0], {&quot;Nasi Goreng&quot;: 1}) );
}
</code></pre>
","0","Answer"
"78963004","78962955","<p>You can do:</p>
<pre><code>library(tidyverse)
my_list[my_list %&gt;%
          map(.f = ~ any(.x$text == 'letuce')) %&gt;%
          unlist()]
</code></pre>
<p>which gives:</p>
<pre><code>[[1]]
  x  y    text
1 1 12  banana
2 2 11 avocado
3 3 10  letuce

[[2]]
  x y    text
1 7 6  letuce
2 8 5 apricot
3 9 4   apple
</code></pre>
<p>The solution currently assumes that you want to match whole cases being 'letuce'. If you want to match cases merely containing the word 'letuce', you can do:</p>
<pre><code>my_list[my_list %&gt;%
          map(.f = ~ any(str_detect(.x$text, 'letuce'))) %&gt;%
          unlist()]
</code></pre>
<p>Inspired by B.Grothendieck‘s comment (I totally forgot about <code>keep</code>), we could simply do:</p>
<pre><code>my_list %&gt;%
  keep(.p = ~any(str_detect(.x$text, 'letuce')))
</code></pre>
","2","Answer"
"78963226","78962955","<p>You could solve your problem as follow:</p>
<pre><code># match if text column has value &quot;letuce&quot;
my_list[sapply(my_list, \(df) &quot;letuce&quot; %in% df$text)]

[[1]]
  x  y    text
1 1 12  banana
2 2 11 avocado
3 3 10  letuce

[[2]]
  x y    text
1 7 6  letuce
2 8 5 apricot
3 9 4   apple


# match if text column has pattern &quot;letuce&quot;
my_list[sapply(my_list, \(df) any(grepl(&quot;letuce&quot;, df$text)))]
</code></pre>
","2","Answer"
"78963687","78963669","<p>This implements what I auggested above:</p>
<pre><code>from collections import defaultdict

list1 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:1}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]
list2 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:2}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]
months = defaultdict(int)
for l in (list1,list2):
    for d in l:
        months[d['month']] += d['amount']

print(months)
target = [{'month':k,'amount':v} for k,v in months.items()]
print(target)
</code></pre>
<p>Output:</p>
<pre><code>defaultdict(&lt;class 'int'&gt;, {'Jan': 3, 'Feb': 8})
[{'month': 'Jan', 'amount': 3}, {'month': 'Feb', 'amount': 8}]
</code></pre>
<p>I used a defaultdict for simplicity, but a normal dictionary would also work with the usual <code>if d['month'] not in months:</code> protection.</p>
","-1","Answer"
"78963689","78963669","<p>How about this:</p>
<pre><code>list1 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:1}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]
list2 = [{&quot;month&quot;: &quot;Jan&quot;, &quot;amount&quot;:2}, {&quot;month&quot;: &quot;Feb&quot;, &quot;amount&quot;:4}]

count = dict()

for lst in list1 + list2:
    m = lst.get('month')
    if m not in count:
        count[m] = 0
    count[m] += int(lst.get('amount', 0))

target = [{'month': m, 'amount': c} for m, c in count.items()]
</code></pre>
","0","Answer"
"78967428","78967416","<pre><code>list1 = [0] + list(range(2,235))
</code></pre>
<p><code>list</code> will expand a lazy enumerator.</p>
","2","Answer"
"78967441","78967416","<p>Another efficient way, combining simplicity and performance, is to use unpacking:</p>
<pre><code>list1 = [0, *range(2, 235)]
</code></pre>
","4","Answer"
"78967788","78967772","<p>You have asked for a list to return a different thing each time the last element is referenced.  That cannot happen.  The last entry isn't going to change.</p>
<p>So, what you should do is write a function to get the last name.  That function can either return a static element, or generate one from the first name list.</p>
<p>Here is a function such as I described:</p>
<pre><code>import random

first_names = ['James','Ida','Crocodile']
last_names = ['Smith','Williams','Ramos']

def get_last_name(i):
    if i &gt;= len(last_names):
        return random.choice(first_names) + 'son'
    return last_names[i]

for i in range(4):
    print(get_last_name(i))
print(get_last_name(3))
</code></pre>
<p>Output:</p>
<pre><code>Smith
Williams
Ramos
Idason
Jamesson
</code></pre>
","0","Answer"
"78967902","78967772","<p><a href=""https://stackoverflow.com/a/78967788"">Tim Roberts's answer</a> is probably what I would go with.</p>
<p>If you're absolutely bent on having <code>last_names</code> be a list for some reason, I suppose you can define a <code>LastNameGenerator</code> class that stores a list of first names and picks one at random when its <code>__str__</code> method is called.</p>
<pre class=""lang-py prettyprint-override""><code>import random

class LastNameGenerator:
    def __init__(self, first_names):
        self.first_names = first_names.copy()

    def __str__(self):
        return random.choice(first_names) + 'son'

first_names = ['James','Ida','Crocodile']
last_names = ['Smith','Williams','Ramos', LastNameGenerator(first_names)]
</code></pre>
<p>This has the unfortunate downside of, well, not being a string. If you want your code to work reliably, you'll have to manually call <code>str()</code> on the generated last name to make sure it's the right type. Otherwise, you'll likely run into a lot of TypeErrors.</p>
<pre class=""lang-py prettyprint-override""><code>print(last_names[-1]) # Fine since print() calls __str__ implicitly
print(&quot;Ida &quot; + str(last_names[-1])) # Fine since str() is being called manually
print(&quot;Crocodile &quot; + last_names[-1]) # TypeError: can only concatenate str (not &quot;LastNameGenerator&quot;) to str
</code></pre>
","0","Answer"
"78970430","78970408","<p>You can test this ( for me it works ) :</p>
<pre><code>def split_list(lst):
    result = []
    sublist = []
    for item in lst:
        if item == '1':
            if sublist:  # append the sublist to result if not empty
                result.append(sublist)
                sublist = []  # reset sublist
        else:
            sublist.append(item)
    if sublist:  # append the last sublist
        result.append(sublist)
    return result

# Example usage:
original_list = ['1', 'A', 'B', 'C', '1', 'D', '1', 'E', 'F', '1', 'G', 'H', 'I']
result_list = split_list(original_list)
print(result_list)  # Output: [['A', 'B', 'C'], ['D'], ['E', 'F'], ['G', 'H', 'I']]
</code></pre>
","0","Answer"
"78970438","78970408","<p>One method would be to use <a href=""https://docs.python.org/3/library/itertools.html#itertools.groupby"" rel=""nofollow noreferrer""><code>itertools.groupby()</code></a> to split the list into consecutive groups based on whether they are equal to <code>'1'</code>. As the docs note:</p>
<blockquote>
<p>The key is a function computing a key value for each element.</p>
</blockquote>
<p>If we set it to <code>lambda x: x != '1'</code> then we can get the desired output by only including groups where <code>key==True</code>.</p>
<pre><code>import itertools

l = ['1', 'A', 'B', 'C', '1', 'D', '1', 'E', 'F', '1', 'G', 'H', 'I']

def split_list(l: list[str], split_by: str):
    return [
        list(group) for key, group in 
        itertools.groupby(l, lambda x: x != split_by) if key
    ]

split_list(l, '1')
# [['A', 'B', 'C'], ['D'], ['E', 'F'], ['G', 'H', 'I']]
</code></pre>
","3","Answer"
"78970701","78970278","<p>While both operations are similar in nature, somehow most languages support it for strings and very few support it for collections. The reason may be that it is uncommon to do this for collections, while it is a very common operation for strings. Also, chars are very easy to compare and we can even do some optimizations by utilizing the fact they can be processed as numbers. Collections require to use <code>equals</code> for all comparisons. I suppose above reasons make it not very practical to include such operation in the stdlib and I believe Kotlin doesn't support it.</p>
<p>If you look for the most elegant or idiomatic solution, it could be:</p>
<pre class=""lang-kotlin prettyprint-override""><code>fun &lt;T&gt; List&lt;T&gt;.findSublist(sublist: List&lt;T&gt;) = asSequence()
    .windowed(sublist.size) { it }
    .indexOf(sublist)
</code></pre>
<p>It is probably suboptimal for the performance, but mostly because of the overhead of sequences and keeping it object-oriented. Technically, it does a similar thing to a more optimized version where we iterate over indexes manually.</p>
<p>Please note <code>windowed</code> doesn't actually create a new sublist with each iteration. It uses a sliding window, so with each iteration we get exactly the same object with updated contents. For the same reason we are generally not allowed to pass <code>it</code> anywhere as it holds a temporary snapshot of the data. I believe the above solution is fine, because we use a sequence, so the execution flow alternates between the producer (<code>windowed</code>) and the consumer (<code>indexOf</code>).</p>
","3","Answer"
"78970875","78970824","<p>I would go about this like this:</p>
<pre><code>equal = True
for i in range(hrc_list):
    if hrc_list[i] != int(fp_list[i[len(url):]]):
        equal = False
        break
</code></pre>
<p>This first assumes that they are equal. Then, it iterates through both lists. It takes the value in <code>hrc_list</code> and then the value from <code>fp_list</code> but slices the string to only include the integer part. It then converts it to an integer so that it can be compared with the value at <code>hrc_list</code>. If the comparison is not True, then it just continues iterating through the list until it has finished. However, if at any point it is True, it changes qual to be False and then breaks as it is no longer necessary to check the rest of the lists.</p>
<p>I hope this helps.</p>
","0","Answer"
"78971034","78970904","<p>There were a number of things wrong with your code that have been corrected. First of all, you did not create a valid <code>ggplot2</code> plot in <code>myFunc()</code> because it was missing the <code>geom</code> necessary to create the plot.</p>
<p>Secondly, <code>myFunc()</code> was not returning anything. Nevertheless, here is the corrected version of your code:</p>
<pre><code>library(ggplot2)

myFunc &lt;- function (df1) {
  
  #this is the animals data
  my_plot_1 &lt;- ggplot(df1, aes(x=size, y=avg_sleep_hours,color = animal))+
    geom_point(stat = &quot;identity&quot;)
  
  return(my_plot_1)
}

animal_parameters &lt;- list(super_sleepers, no_sleepers)

# apply function to list of data frames
ggps &lt;- lapply(animal_parameters,myFunc)

# access each plot in the list using its index number
ggps[[1]]
</code></pre>
<p><a href=""https://i.sstatic.net/oTF2V50A.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/oTF2V50A.png"" alt=""enter image description here"" /></a></p>
<p>With this, your plots are stored up in a list and can be accessed using their index numbers.</p>
","0","Answer"
"78971187","78970904","<p>First of all, we do not need to clutter the environment with all those vectors. Instead, we can define them via <code>=</code> inside <code>data.frame</code> like</p>
<pre class=""lang-r prettyprint-override""><code>super_sleepers = data.frame(rating=seq(4), animal=c('koala', 'hedgehog', 'sloth', 'panda'), 
                            country=c('Australia', 'Italy', 'Peru', 'China'), 
                            avg_sleep_hours=c(21, 18, 17, 10), size=c(221, 418, 417, 410))
no_sleepers = data.frame(rating=seq(4), animal= c('bear', 'moose', 'alpaca', 'snake'), 
                         country=c('USA', 'Mongolia', 'Argentina', 'Japan'), 
                         avg_sleep_hours=c(1, 8, 7, 1), size=c(261, 558, 227, 2))
l = list(super_sleepers, no_sleepers)
</code></pre>
<p>Secondly, <code>myFunc()</code> in it's most simplified form can be re-written as</p>
<pre class=""lang-r prettyprint-override""><code>library(ggplot2)
myFunc = \(df) ggplot(df, aes(x=size, y=avg_sleep_hours)) + geom_point()
</code></pre>
<p>However, I recommend against this. It does not make much sense to hard-code the xy-variables inside the function. Passing them as arguments is much preferred.</p>
<p>Notice that <code>\(x)</code> is conveniece for <code>\function(x)</code>; we do not need <code>{...}</code> if it's one line; assigning and <code>return</code>ing is also not necessary inside such short functions.</p>
<p>For instance, we can do</p>
<pre class=""lang-r prettyprint-override""><code>library(ggplot2)
library(rlang)
myFunc2 = \(df, x, y) ggplot(df, aes(x={{x}}, y={{y}})) + geom_point()
</code></pre>
<p>instead. <a href=""https://rlang.r-lib.org/reference/glue-operators.html"" rel=""nofollow noreferrer"">Here</a> is the <em>name injection</em> explained. Finally, we can execute--or execute and assign--via</p>
<pre class=""lang-r prettyprint-override""><code># result=
lapply(l, myFunc2, size, avg_sleep_hours)
</code></pre>
<p>If we use a loop, we need <code>print()</code>, see <a href=""https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-do-lattice_002ftrellis-graphics-not-work_003f"" rel=""nofollow noreferrer"">this resource</a> or search on SO.</p>
","1","Answer"
"78978024","78977970","<p>As everything is loaded in memory, I would just iterate the keys, counting the number of <code>'X'</code> per key. Assuming your list of dictionary is <code>ld</code> I would try:</p>
<pre><code>keys = ld[0].keys()    # ignore this if you already have a list of the keys
missing = {k: sum(d[k] == 'X' for d in ld) for k in keys}
</code></pre>
<p>With your sample data, it returns - as expected:</p>
<pre><code>{'a': 0, 'b': 1, 'c': 2}
</code></pre>
<p>Of course this only makes sense if no dictionary after the first one contains a new key...</p>
","1","Answer"
"78978102","78977970","<p>There are several solutions.  You can use the <code>collection.Counter</code> and iterate through the items in your list, checking if the value is <code>'X'</code>.</p>
<pre><code>from collections import Counter

data = [
    {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:&quot;X&quot;},
    {&quot;a&quot;:1,&quot;b&quot;:&quot;X&quot;,&quot;c&quot;:3},
    {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:&quot;X&quot;}
]
counts = Counter(k for d in data for k, v in d.items() if v=='X')

for k, v in sorted(counts.items(), key=lambda tup: tup[1]):
    if v &lt; 5:
        print(f'{k} has less than 5 &quot;X&quot; responses ({v})')
    if v &gt; 50:
        print(f'{k} has greater than 50 &quot;X&quot; responses ({v})')
</code></pre>
<p>If you want a sledgehammer, you could use pandas and load the data into a data frame and then sum when values are equal to 'X'</p>
<pre><code>import pandas as pd

df = pd.DataFrame(data)
counts = df.ne('X').sum(axis=0).sort_values()
print('Keys with less than 5 &quot;X&quot; responses:')
print('\n'.join(repr(counts[counts.lt(5)]).split('\n')[:-1]))
print('Keys with more than 50 &quot;X&quot; responses:')
print('\n'.join(repr(counts[counts.gt(50)]).split('\n')[:-1]))
</code></pre>
","0","Answer"
"78978918","78967416","<p>This is probably not as efficient as the other two answers but is a direct translation of your code to a 1 liner.</p>
<p><code>list1 = [0] + [i for i in range(2,235)]</code></p>
","0","Answer"
"78987351","78987342","<p>You are almost there.</p>
<p>If you want to overwrite your original data frames, do the following two things:</p>
<ol>
<li>when creating your list, assign names to the elements.</li>
<li>After your loop, use <code>list2env</code> to assign your list elements to the environment:</li>
</ol>
<p>.</p>
<pre><code>library(tidyverse)
library(lubridate)
hourly &lt;- list(hourlyIntensities1, hourlyIntensities2, hourlySteps1, hourlySteps2) %&gt;%
  set_names(c('hourlyIntensities1', 'hourlyIntensities2', 'hourlySteps1', 'hourlySteps2'))
for (i in 1:length(hourly)) {
df_loop &lt;- hourly[[i]]
df_loop$ActivityHour &lt;- mdy_hms(df_loop$ActivityHour)
hourly[[i]] &lt;- df_loop
print(class(df_loop$ActivityHour))
}

list2env(hourly)
</code></pre>
","0","Answer"
"78987497","78987342","<p>If you (think you) need to change objects in your global environment in such way, you can loop through a list of object names and use <code>get()</code> &amp; <code>assign()</code>:</p>
<pre class=""lang-r prettyprint-override""><code>(hourly &lt;- ls(pattern = &quot;^hourly.*&quot;))
#&gt; [1] &quot;hourlyIntensities1&quot; &quot;hourlyIntensities2&quot; &quot;hourlySteps1&quot;      
#&gt; [4] &quot;hourlySteps2&quot;

str(hourlyIntensities1$ActivityHour)
#&gt;  chr [1:4] &quot;3/12/2016 12:00:00 AM&quot; &quot;3/12/2016 2:00:00 AM&quot; ...

for (df in hourly){
  message(&quot;Updating &quot;, df)
  assign(df, transform(get(df), ActivityHour = lubridate::mdy_hms(ActivityHour)))
}
#&gt; Updating hourlyIntensities1
#&gt; Updating hourlyIntensities2
#&gt; Updating hourlySteps1
#&gt; Updating hourlySteps2

str(hourlyIntensities1$ActivityHour)
#&gt;  POSIXct[1:4], format: &quot;2016-03-12 00:00:00&quot; &quot;2016-03-12 02:00:00&quot; &quot;2016-03-12 16:00:00&quot; ...
</code></pre>
<hr />
<p>More idiomatic approach would be building your workflow on top of lists and <code>lapply()</code> / <code>purrr::map()</code> &amp; friends, perhaps just few threads to start with (it's also worth checking answers with latest updates, not just with highest number of votes) :<br />
<a href=""https://stackoverflow.com/q/11433432/646761"">How to import multiple .csv files at once?</a><br />
<a href=""https://stackoverflow.com/q/17499013/646761"">How do I make a list of data frames?</a></p>
","1","Answer"
"78987749","78987732","<p>Check if the user entered <code>stop</code> elsewise add the input to the list:</p>
<pre><code>def listsample():
    sample = []
    killcode = str(&quot;stop&quot;)
    while 1:  # simply loop until stop is recevied!
        user_input = input(&quot;Enter number: &quot;)
        if user_input == killcode:
            return sample
        sample.append(user_input)


def printsample(sample):
    print(sample)


printsample(listsample())
</code></pre>
<p>Out:</p>
<pre><code>Enter number: 1
Enter number: 2
Enter number: foo
Enter number: 44444
Enter number: stop
['1', '2', 'foo', '44444']
</code></pre>
","3","Answer"
"78987817","78987732","<pre><code>def listsample():
    sample = []
    while True:
        user_input = input(&quot;Enter a number or 'stop': &quot;)
        if user_input == &quot;stop&quot;:
            break
        sample.append(user_input)
    return sample

sample = listsample()
print(sample)
</code></pre>
","-2","Answer"
"78988408","78987732","<p>Having to stop the code if a string is input by the user. you can create a custom IntList class (that inherits the list class) that only takes int values. Here's how you can achieve this:</p>
<pre class=""lang-py prettyprint-override""><code>class IntList(list):
    # override the append method
    def append(self, value: str): # I have set the type of `value` as str as the input() function returns a string
        # check if the value is integer or not
        if value.isnumeric():
            super().append(value)
        else:
            raise TypeError(&quot;IntList can only have integer values&quot;)
</code></pre>
<blockquote>
<p>Note: The above class stores the numbers as a string and not as integer.
if you want to store as integer you can replace the logic to:</p>
</blockquote>
<pre class=""lang-py prettyprint-override""><code>class IntList(list):
    # Override the append method to ensure only integers are appended
    def append(self, value):
        if not isinstance(value, int):
            raise TypeError(&quot;Only integer values can be appended.&quot;)
        super().append(value)
</code></pre>
<p>This is terminal output for the same:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; sample = IntList()
&gt;&gt;&gt; sample.append(10) # this goes okay
&gt;&gt;&gt; sample.append(&quot;Hello&quot;) # this does not
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 4, in append
TypeError: IntList can only have integer values
</code></pre>
<p>Now to use this in your code:</p>
<pre class=""lang-py prettyprint-override""><code># Custom class IntList
class IntList(list):
    # override the append method
    def append(self, value):
        # check if the value is integer or not
        if not isinstance(value, int):
            raise TypeError(&quot;IntList can only have integer values&quot;)
        # finally append the value if it is integer
        super().append(value)

# your code:
def list_sample():
    # create sample
    sample = IntList()
    # now since no string will be allowed to append,
    # kill code or kill command is unnecessary.
    while True:
        try:
            sample.append(input(&quot;Enter Number: &quot;))
        except TypeError:
            pass # since we want to stop inputting.
</code></pre>
<blockquote>
<p>Remember the input() function always returns a string, if you wanted to use the <code>IntList</code> implementation where the numbers are stored as an integer, You need to typecast the value of the input() function. At the same time, the code will throw an error if you try to typecast a string that contains letters to int.</p>
</blockquote>
","1","Answer"
"78993091","78987732","<p>Since no one else pointed out the mistake in your code which prevents you from getting desired output, I am listing them below along with the reasons and solution.</p>
<blockquote>
<p>elements in a list are always strings</p>
</blockquote>
<p>this statement is wrong, <code>list.append</code> methods adds whatever you provide it to append. The <code>input()</code> function is the one which returns everything as string.</p>
<p>Focusing on your first code:</p>
<pre class=""lang-py prettyprint-override""><code>def listsample():
    sample = []
    killcode = str(&quot;stop&quot;)
    sample.append(input(&quot;enter number&quot;))
    while sample[-1] != killcode:
        if killcode not in sample:
                sample.append(input(&quot;enter number&quot;))
        elif killcode in sample:
            return sample
        

def printsample(sample):
    print(sample)
    

listsample()
printsample(listsample())
</code></pre>
<blockquote>
<p>Problem: When you enter &quot;stop&quot; your while loop terminates and therefore your <code>sample</code> list doesn't get returned.<br><br>
Solution: use <code>else</code> clause of along with while loop.</p>
</blockquote>
<blockquote>
<p>Problem: Strings are also appended, since you have not converted string which input() returns into integer.<br><br>
Solution: typecaste result of <code>input()</code> to int.</p>
</blockquote>
<p>After appling above fixes, your code looks like:</p>
<pre class=""lang-py prettyprint-override""><code>def listsample():
    sample = []
    killcode = &quot;stop&quot; # &quot;stop&quot; is already string, therefore no need to str(&quot;stop&quot;) 
    while killcode not in sample:
        value = input(&quot;enter number: &quot;)
        if value.isdigit(): # check if all index of string are digits
            sample.append(int(value))
        elif value == killcode:
            sample.append(value)
        else: 
            print(&quot;Enter Integer or 'stop' only!&quot;)
    else:
        return sample[0:-1] # Return all elements execpt last that is 'stop'

def printsample(sample):
    print(sample)


printsample(listsample())
</code></pre>
","0","Answer"
"78998048","78997912","<p>Use a custom function and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.apply.html"" rel=""nofollow noreferrer""><code>groupby.apply</code></a>:</p>
<pre><code>def f(g):
    s = g['purchase_country'].value_counts()
    return pd.Series({'num_region_split': ', '.join(s.index+':'+s.astype('str')),
                      'pct_region_split': ', '.join(s.index+':'+s.div(s.sum()).astype('str')),
                     })

df.groupby(['cust_id', 'product_id'], as_index=False).apply(f)
</code></pre>
<p>Output:</p>
<pre><code>  cust_id  product_id      num_region_split          pct_region_split
0     abc          12  Australia:7, India:3  Australia:0.7, India:0.3
</code></pre>
","1","Answer"
"78998129","78998092","<p>A relatively quick &quot;fix&quot; would be: split the work into manageable chunks (say, 10k records each) - insert that much, and then start afresh with a new data context entirely. The <code>Enumerable.Chunk</code> extension method might make this trivial:</p>
<pre class=""lang-cs prettyprint-override""><code>foreach (var chunk in stagingUnits.AsEnumerable().Chunk(10_000))
{
    using var ctx = new YourDataContextHere(...);
    var toAdd =
        (from stg in chunk
        select new ImportJobValidation
        {
            Guid = Guid.NewGuid(),
            StudyProductStagingID = stg.Id,
            IsValidationSuccessful = !errors.Exists(e =&gt; e.StagingId == stg.Id),
            Type = &quot;UPLOAD&quot;,
            IsActive = true,
            CreatedBy = userId,
            CreatedOn = DateTime.UtcNow
        });
    await ctx.AddRangeAsync(toAdd);
    await ctx.SaveChangesAsync();
}
</code></pre>
<hr />
<p>If you're adding that much data, you might prefer to drop a few levels of abstraction and look at <code>SqlBulkCopy</code>, perhaps using a tool like <code>FastMember</code> or DapperAOT to turn the <code>IEnumerable&lt;T&gt;</code> into an <code>IDataReader</code> suitable for streaming use; for example (similar to <a href=""https://aot.dapperlib.dev/bulkcopy"" rel=""nofollow noreferrer"">here</a>):</p>
<pre class=""lang-cs prettyprint-override""><code>using var reader = TypeAccessor.CreateDataReader(stagingUnits.AsEnumerable(),
    /* TODO: property names to include */);

using var table = new SqlBulkCopy(connection)
{
    DestinationTableName = &quot;YourTableHere&quot;,
    ColumnMappings =
    {
        // TODO: specify column-property map
    }
};
table.EnableStreaming = true;
table.WriteToServer(reader);
return table.RowsCopied;
</code></pre>
","2","Answer"
"78998134","78998092","<p>I could suggest paginating the result and save records in batches:</p>
<pre class=""lang-cs prettyprint-override""><code>var batchSize = 1000;
var batchCount = 1000000 / batchSize;

for (var i = 0; i &lt; batchCount; i++)
{
    var query = from stg in stagingUnits.AsEnumerable()
    select new ImportJobValidation
    {
        Guid = Guid.NewGuid(),
        StudyProductStagingID = stg.Id,
        IsValidationSuccessful = !errors.Exists(e =&gt; e.StagingId == stg.Id),
        Type = &quot;UPLOAD&quot;,
        IsActive = true,
        CreatedBy = userId,
        CreatedOn = DateTime.UtcNow
    };
    
    var batch = await query.Skip(i * batchSize).Take(batchSize).ToArrayAsync();
    // AddRangeAsync is not recommended to be used.
    _supplyManagementHangFireContext.AddRange(batch);
    await _supplyManagementHangFireContext.SaveChangesAsync();
}
</code></pre>
<p><code>AddRangeAsync</code> is not recommended in standard operations. <a href=""https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.addrangeasync?view=efcore-8.0"" rel=""nofollow noreferrer"">From docs</a>:</p>
<blockquote>
<p>This method is async only to allow special value generators, such as the one used by 'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo', to access the database asynchronously. For all other cases the non async method should be used.</p>
</blockquote>
","0","Answer"
"78998137","78997912","<p>Your original code:</p>
<pre><code>df['total_purchases'] = df.groupby(['cust_id', 'product_id'])['purchase_country'].transform('size')
df['unique_country'] = df.groupby(['cust_id', 'product_id'])['purchase_country'].transform('nunique')
</code></pre>
<p>It only gives total purchases and the number of unique countries, but not individual counts or percentages for each country within each group.</p>
<p>The below gives the output you need:</p>
<pre><code>import pandas as pd

data = {
    'cust_id': ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc'],
    'product_id': [12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    'purchase_country': ['India', 'India', 'India', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia', 'Australia']
}
df = pd.DataFrame(data)

country_counts = df.groupby(['cust_id', 'product_id', 'purchase_country']).size().reset_index(name='count')

country_counts['total_purchases'] = country_counts.groupby(['cust_id', 'product_id'])['count'].transform('sum')

country_counts['pct'] = (country_counts['count'] / country_counts['total_purchases'] * 100).round().astype(int)

country_counts = country_counts.sort_values(['cust_id', 'product_id', 'pct'], ascending=[True, True, False])

def aggregate_splits(group):
    pct_split = ', '.join([f&quot;{row['purchase_country']}:{row['pct']}%&quot; for _, row in group.iterrows()])
    num_split = ', '.join([f&quot;{row['purchase_country']}:{row['count']}&quot; for _, row in group.iterrows()])
    return pd.Series({'pct_region_split': pct_split, 'num_region_split': num_split})

split_df = country_counts.groupby(['cust_id', 'product_id']).apply(aggregate_splits).reset_index()

final_df = split_df[['cust_id', 'product_id', 'pct_region_split', 'num_region_split']]

print(final_df)
</code></pre>
<p>Output:</p>
<div class=""s-table-container""><table class=""s-table"">
<thead>
<tr>
<th></th>
<th>cust_id</th>
<th>product_id</th>
<th>pct_region_split</th>
<th>num_region_split</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>abc</td>
<td>12</td>
<td>Australia:70%, India:30%</td>
<td>Australia:7, India:3</td>
</tr>
</tbody>
</table></div>
<ul>
<li>Count the number of purchases each country has for each customer and product</li>
<li>Compute total purchases for each group so as to calculate percentages</li>
<li>Find out what percentage each country's purchases are of the total</li>
<li>Sort countries from highest to lowest percentage</li>
<li>Create the 'pct_region_split' and 'num_region_split' strings</li>
<li>Create final dataframe</li>
</ul>
","1","Answer"
"78999813","78970278","<p>The question is close enough to it's string version to allow you to take advantage of many of the existing algorithms and their implementations.</p>
<p>An example, no claims about production readiness of end result:</p>
<ul>
<li>Start with an existing Java <a href=""https://www.geeksforgeeks.org/java-program-for-kmp-algorithm-for-pattern-searching/"" rel=""nofollow noreferrer"">implementation</a> here,from Geeks for Geeks of the <a href=""https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"" rel=""nofollow noreferrer"">Knuth–Morris–Pratt</a> (KMP) algorithm</li>
<li>Let IntelliJ auto convert to Kotlin</li>
<li>Replace references to <code>String</code> with <code>List&lt;T&gt;</code> + the necessary minor tweaks.</li>
</ul>
<pre class=""lang-kotlin prettyprint-override""><code>fun &lt;T&gt; List&lt;T&gt;.findSublistKMP(sublist: List&lt;T&gt;): List&lt;Int&gt; {
    
    fun computeLPSArray(sublist: List&lt;T&gt;, lps: IntArray) {
        var len = 0
        var i = 1
        lps[0] = 0

        while (i &lt; sublist.size) {
            if (sublist[i] == sublist[len]) {
                len++
                lps[i] = len
                i++
            } else
            {
                if (len != 0) {
                    len = lps[len - 1]
                } else  // if (len == 0)
                {
                    lps[i] = len
                    i++
                }
            }
        }
    }

    val result = mutableListOf&lt;Int&gt;()

    val lps = IntArray(sublist.size)
    var j = 0

    computeLPSArray(sublist, lps)

    var i = 0
    while (i &lt; this.size) {
        if (sublist[j] == this[i]) {
            j++
            i++
        }
        if (j == sublist.size) {
            result.add(i - j)
            j = lps[j - 1]
        } else if (i &lt; this.size &amp;&amp; sublist[j] != this[i]) {
            if (j != 0) j = lps[j - 1]
            else i += 1
        }
    }
    return result
}
</code></pre>
<p>Test code:</p>
<pre class=""lang-kotlin prettyprint-override""><code>
fun main() {
    data class Dat(
        val id: Int,
        val name: String = &quot;$id is my name&quot;,
        val date: LocalDate = LocalDate.parse(&quot;2023-12-12&quot;)
    )

    val list = List(1_000) { i -&gt; Dat(i) }
    val listX2 = list + list
    val sublist = listX2.subList(800, 900)

    listX2.findSublistKMP(sublist).also { println(&quot;KMP matches:$it&quot;) }
    // prints: KMP matches:[800, 1800]
}
</code></pre>
","1","Answer"
"79006292","79006076","<p>The following codes may solve your problems:</p>
<pre><code>df1[&quot;indf2&quot;] = df1.apply(
    lambda row: 1 if any(row[&quot;data1&quot;] in i for i in df2[&quot;data2&quot;]) else 0, 
    axis=1
)
# with 'df1.apply(..., axis=1)' statement will apply function to eacy row of df1
# 'for i in df2[&quot;data2&quot;]' means we will get every row's string from df2[&quot;data2&quot;], so we can use 'row[&quot;data1&quot;] in i' to see if data of df1[&quot;data1&quot;] presents in df2[&quot;data2&quot;] column
</code></pre>
","0","Answer"
"79006490","79006076","<p>Cleaner solution using panda's <code>str.contains</code> instead of list comprehension:</p>
<blockquote>
<p>df1[&quot;present_in_df2&quot;] = df1.apply(
lambda row: any(df2['data2'].str.contains(row['data1'], regex=False)),
axis=1
)</p>
</blockquote>
<p>The <code>True if ... else False</code> in the other answer is also not necessary, the statement already evaluates to a bool.
(Btw - the expected output you gave in your question is incorrect)</p>
","1","Answer"
"79006753","79006637","<p>Looks like you only have first name in both the lists. So you could clean up the <code>invitee_list</code> by splitting it by space and then do a set intersection.</p>
<pre class=""lang-py prettyprint-override""><code>my_team_list = ['Andy', 'Bernice', 'Charlotte', 'David', 'Evan']
invitee_list = ['Mandy (Team A)', 'Navin - Team A', 'Olive Team B', 'Peter Team C', 'Queenie (D)', 'Royston -D team', 'Steven (E team)', 'Tammy (E team)', 'Bernice (Z team)', 'Victor (A Team)', 'Wendy (Team B)', 'David (Team Z)']

for i in range(len(invitee_list)):
    invitee_list[i] = invitee_list[i].split(&quot; &quot;)[0]

print(set(my_team_list)&amp;set(invitee_list))
</code></pre>
","0","Answer"
"79006788","79006637","<p>If your format is more complex than you've posted (e.g. there are names with spaces in them, or other funny characters), you might consider using a regular expression:</p>
<pre class=""lang-py prettyprint-override""><code>import re
my_team_list = ['Andy', 'Bernice', 'Charlotte', 'David', 'Evan']
invitee_list = ['Mandy (Team A)', 'Navin - Team A', 'Olive Team B', 'Peter Team C', 'Queenie (D)', 'Royston -D team', 'Steven (E team)', 'Tammy (E team)', 'Bernice (Z team)', 'Victor (A Team)', 'Wendy (Team B)', 'David (Team Z)']
my_team_re = re.compile(&quot;|&quot;.join(re.escape(name) for name in my_team_list))
for name in invitee_list:
    if my_team_re.search(name):
        print(name)
</code></pre>
<p>This is guaranteed to behave the same as your current solution, but should run substantially faster, as it will run in O(n+m) time.</p>
","0","Answer"
"79015249","79015172","<p>Assuming your array is really a string, the following code will break apart the string and rebuild it in the format you desire:</p>
<pre><code>Private Function AddQuotes(ByVal PartList As String) As String
   Dim pl As Variant
   Dim p As Variant
   
   pl = Split(PartList, &quot;,&quot;)
   
   For Each p In pl
      AddQuotes = AddQuotes &amp; &quot;&quot;&quot;&quot; &amp; p &amp; &quot;&quot;&quot;,&quot;
   Next
   
   AddQuotes = Mid(AddQuotes, 1, Len(AddQuotes) - 1)
End Function
</code></pre>
","1","Answer"
"79015264","79015172","<p>You can concatenate the quotation marks to each string in the array. For example, try this (open an immediate window to see the debug output):</p>
<pre><code>Sub test()

Dim myStrings(1 To 3) As String
myStrings(1) = &quot;Part1&quot;
myStrings(2) = &quot;Part2&quot;
myStrings(3) = &quot;Part3&quot;

Dim i As Integer
For i = LBound(myStrings) To UBound(myStrings)
    Debug.Print &quot;myStrings(&quot; &amp; i; &quot;) = &quot; &amp; myStrings(i)
Next i

For i = LBound(myStrings) To UBound(myStrings)
    myStrings(i) = &quot;&quot;&quot;&quot; &amp; myStrings(i) &amp; &quot;&quot;&quot;&quot;
Next i

For i = LBound(myStrings) To UBound(myStrings)
    Debug.Print &quot;myStrings(&quot; &amp; i; &quot;) = &quot; &amp; myStrings(i)
Next i

End Sub
</code></pre>
<p>You should see this in the immediate window:</p>
<blockquote>
<p>myStrings(1) = Part1<br />
myStrings(2) = Part2<br />
myStrings(3) = Part3<br />
myStrings(1) = &quot;Part1&quot;<br />
myStrings(2) = &quot;Part2&quot;<br />
myStrings(3) = &quot;Part3&quot;</p>
</blockquote>
<p>To put a quotation mark in a string literal you double it: &quot;&quot;. You can also use <code>chr(34)</code>. (See <a href=""https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/string-data-type."" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/string-data-type.</a>)</p>
","0","Answer"
"79015281","79015172","<p>Another alternative using <code>Regular Expressions</code> and <strong>creating a new array</strong> with double quoted strings is;</p>
<pre><code>Sub Test()
    Dim PartList(), strArray As String, regExp As Object
    Dim strList As String, newArray As Variant
    
    PartList = Array(&quot;Part1&quot;, &quot;Part2&quot;, &quot;Part4&quot;)
    
    strArray = Join(PartList, &quot;,&quot;)
    
    Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)
    
    regExp.IgnoreCase = True
    regExp.Global = True
    regExp.Pattern = &quot;([A-Z0-9]+)&quot;
    
    strList = regExp.Replace(strArray, &quot;&quot;&quot;$1&quot;&quot;&quot;)

    newArray = Split(strList, &quot;,&quot;)
    
'    Show the first element of the new array
    MsgBox newArray(0)
    
    Set regExp = Nothing
End Sub
</code></pre>
","0","Answer"
"79015320","79015172","<p>As one-liner:</p>
<pre><code>PartList = &quot;&quot;&quot;&quot; &amp; Replace(PartList, &quot;,&quot;, &quot;&quot;&quot;,&quot;&quot;&quot;) &amp; &quot;&quot;&quot;&quot;
</code></pre>
<p>or, to have it more readable:</p>
<pre><code>Const Quote = &quot;&quot;&quot;&quot;
PartList = Quote &amp; Replace(PartList, &quot;,&quot;, Quote &amp; &quot;,&quot; &amp; Quote) &amp; Quote
</code></pre>
","0","Answer"
"79015814","79015172","<p>To save myself counting quotation marks, I use <code>chr(34)</code>, such that:</p>
<pre><code>    Dim arr As Variant:  arr = Array(&quot;Cat&quot;, &quot;House&quot;, &quot;Goose&quot;)
    Dim i As Long:  For i = LBound(arr) To UBound(arr)
        Debug.Print Chr(34) &amp; arr(i) &amp; Chr(34)
    Next i
</code></pre>
<p><a href=""https://i.sstatic.net/oTBLYDuA.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/oTBLYDuA.png"" alt=""enter image description here"" /></a></p>
","0","Answer"
"79017237","79006637","<p>I'd convert <code>invitee_list</code> to a dict to be accessed directly by key.</p>
<pre><code>my_team_list = ['Andy', 'Bernice', 'Charlotte', 'David', 'Evan']
invitee_list = ['Mandy (Team A)', 'Navin - Team A', 'Olive Team B', 'Peter Team C', 'Queenie (D)', 'Royston -D team', 'Steven (E team)', 'Tammy (E team)', 'Bernice (Z team)', 'Victor (A Team)', 'Wendy (Team B)', 'David (Team Z)']

invitee_list_dict = {name.split(' ')[0] : name for name in invitee_list}

#=&gt; {'Mandy': 'Mandy (Team A)', 'Navin': 'Navin - Team A', ...}
</code></pre>
<p>I used list comprehension to present a list of result as <code>res</code>, but you can do whatever you want.</p>
<pre><code>res = [invitee_list_dict[k] for k in my_team_list if k in invitee_list_dict.keys()]

#=&gt; ['Bernice (Z team)', 'David (Team Z)']
</code></pre>
","0","Answer"
"79020441","79020424","<p>You can not override existing functions. Haskell uses <em>ad-hoc polymorphism</em> for this.</p>
<p>What you <em>can</em> however do in the case of a list, is work with the <a href=""https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/overloaded_lists.html"" rel=""nofollow noreferrer""><strong><code>OverloadedLists</code></strong> extension <sup>[ghc-doc]</sup></a>.</p>
<p>If you thus have a data type <code>Foo</code> with:</p>
<pre class=""lang-hs prettyprint-override""><code>data <em>Foo</em> a = <em>MyEmpty</em> | <em>MyCons</em> a (<em>Foo</em> a)</code></pre>
<p>You can use:</p>
<pre class=""lang-hs prettyprint-override""><code>import GHC.IsList (IsList)

instance IsList (<em>Foo</em> a) where
  type Item (<em>Foo</em> a) = a
  toList = foldr <em>MyCons</em> <em>MyEmpty</em>
  fromList <em>MyEmpty</em> = []
  fromList (<em>MyCons</em> x xs) = x : fromList xs</code></pre>
<p>If you then compile with <code>-XOverloadedLists</code>, you can use list <em>literals</em> in your code that are then of type <code>Foo a</code>.</p>
<p>But this does <em>not</em> overload the <code>(:)</code> function: if you use <code>:</code>, it will still use the <code>(:) :: a -&gt; [a] -&gt; [a]</code> one.</p>
","1","Answer"
"79020669","79020424","<p>I recommend simply extracting the <code>Foo</code> application outside of the recursion. (In fact... is a new type really needed, or have you just made it as a guess? What does <code>Foo</code> do that <code>[Char]</code> doesn't?)</p>
<pre><code>fooFromList :: [Int] -&gt; Foo
fooFromList xs = Foo (map convertDigitToChar xs)
</code></pre>
<blockquote>
<p>So if I am trying to make Foo an instance of Eq and Show, how would I do that?</p>
</blockquote>
<p>The compiler can write those instances for you, and it's rare to do something different than what the deriver does.</p>
<pre><code>data Foo = Foo [Char] deriving (Eq, Show)
</code></pre>
","1","Answer"
"79021932","79021907","<p>I think you're looking for <a href=""https://stat.ethz.ch/R-manual/R-devel/library/base/html/funprog.html"" rel=""nofollow noreferrer""><code>Map()</code></a>, which is <a href=""https://stat.ethz.ch/R-manual/R-devel/library/base/html/mapply.html"" rel=""nofollow noreferrer""><code>mapply()</code></a> without simplification:</p>
<blockquote>
<p><code>mapply</code> is a multivariate version of <code>sapply</code>. <code>mapply</code> applies <code>FUN</code> to the first elements of each <code>...</code> argument, the second elements, the third elements, and so on.</p>
</blockquote>
<p>For reasons that I imagine are only known to the R devs, unlike <code>lapply()</code>, <code>sapply()</code> and <code>tapply()</code>, the function is the first argument of <code>mapply()</code> and <code>Map()</code>.</p>
<pre class=""lang-r prettyprint-override""><code>Map(
    \(x1, x2) if (x2 &gt;= 10) x1 + 100 else x1,
    list1,
    list2
)
# [[1]]
# [1] 5

# [[2]]
# [1] 108

# [[3]]
# [1] 109
</code></pre>
<p>If you want to be fancy you could remove the <code>if()</code> statement and define the function as <code>\(x1, x2) x1 + 100 * (x2 &gt;= 10)</code> but personally I think the lack of explicitness makes it less comprehensible.</p>
<p>Of course you could also do this with <code>ifelse(list2 &gt;= 10, unlist(list1) + 100, list1)</code> in this case but <code>Map()</code> is more general.</p>
<p>Your second example could be expressed as <code>Map(\(x, y) if (y &gt;= 10) x + 100 - y else x, list1, list2)</code>.</p>
","4","Answer"
"79022296","79021907","<p>Given the toy example, I do not see why we use a list format. Things get easier if we work with vectors instead:</p>
<pre class=""lang-r prettyprint-override""><code>list1 &lt;- as.list(c(5, 8, 9))
list2 &lt;- as.list(c(8, 10, 11))
x1 = unlist(list1)
x2 = unlist(list2)
</code></pre>
<p>and then apply a fully vectorised</p>
<pre class=""lang-r prettyprint-override""><code>x1 + 100 * (x2 &gt;= 10)
# [1]   5 108 109
</code></pre>
<p><em>Note.</em> Notation taken from user @SamR's <a href=""https://stackoverflow.com/a/79021932/20002111"">solution</a>.</p>
","3","Answer"
"79022812","79021907","<p>A variant of using <code>Map</code></p>
<pre><code>&gt; Map(`+`, list1, 100 * (unlist(list2) &gt;= 10))
[[1]]
[1] 5

[[2]]
[1] 108

[[3]]
[1] 109
</code></pre>
","1","Answer"
"79023652","79023187","<p>One of infinitely many ways to do this:</p>
<p>Imagine a number line with cells 1, 2, 3, and up to infinity. Now think of a binary number representation, with bits indicating if there is a &quot;break&quot; at the cell border. So,</p>
<pre><code>1  -&gt; [1]
10 -&gt; [2]
11 -&gt; [1,1]
100 -&gt; [3]
101 -&gt; [2, 1]
110 -&gt; [1, 2]
</code></pre>
<p>Note how number of bits is the same as the sum of the list, and number of positive bits indicates the number of list elements. Code would look somewhat like:</p>
<pre class=""lang-py prettyprint-override""><code>def list_gen(n):
    res = []
    counter = 0
    while n:
        counter += 1
        n, flag = divmod(n, 2)
        if flag:
            res.append(counter)
            counter = 0
    return res
</code></pre>
","4","Answer"
"79023729","79023711","<p>you can try</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

a = [
    np.array([0.2, -2.3, 5.3]),
    np.array([-1.6, -1.7, 0.3]),
    np.array([2.4, -0.2, -3.0]),
    np.array([-4.1, -2.3, -2.7])
]

list1 = [arr[0] for arr in a]
list2 = [arr[1] for arr in a]
list3 = [arr[2] for arr in a]

# your result
print(&quot;list1:&quot;, list1)
print(&quot;list2:&quot;, list2)
print(&quot;list3:&quot;, list3)
</code></pre>
","1","Answer"
"79023730","79023711","<p>You can achieve this by using <a href=""https://numpy.org/doc/stable/reference/generated/numpy.ndarray.T.html"" rel=""nofollow noreferrer"">NumPy's <code>transpose</code> or <code>T</code></a> method like this:</p>
<pre><code>transposed = np.array(array_list).T
list1, list2, list3 = transposed.tolist()
</code></pre>
<hr />
<p><a href=""http://tpcg.io/_4A0MZR"" rel=""nofollow noreferrer""><strong>Full example</strong></a></p>
","6","Answer"
"79023736","79023711","<p>You can use zip</p>
<pre><code>a = [
    np.array([0.2, -2.3, 5.3]),
    np.array([-1.6, -1.7, 0.3]),
    np.array([2.4, -0.2, -3.0]),
    np.array([-4.1, -2.3, -2.7])
]
</code></pre>
<p>With list comp in one line using <code>zip</code>:</p>
<pre><code>list1,list2,list3 = [list(x) for x in zip(*a)]
</code></pre>
","3","Answer"
"79023746","79023711","<p>You could stack the list into a 2D numpy array and transpose it.</p>
<pre><code>import numpy as np


array_list = [np.array([0.2, -2.3, 5.3]),
              np.array([-1.6, -1.7, 0.3]),
              np.array([2.4, -0.2, -3.0]),
              np.array([-4.1, -2.3, -2.7])]


stacked_array = np.vstack(array_list).T


list1, list2, list3 = stacked_array[0].tolist(), stacked_array[1].tolist(), stacked_array[2].tolist()

print(list1) print(list2) print(list3)
</code></pre>
","0","Answer"
"79023794","79023711","<p>Assuming your list of arrays has been defined as follows:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

array_list = [np.array([ 0.2, -2.3,  5.3]),
              np.array([-1.6, -1.7,  0.3]),
              np.array([ 2.4, -0.2, -3.0]),
              np.array([-4.1, -2.3, -2.7])]
</code></pre>
<p>Then you can use the following one-liner:</p>
<pre class=""lang-py prettyprint-override""><code>list1, list2, list3 = np.transpose(array_list).tolist()
</code></pre>
<p>NumPy's <a href=""https://numpy.org/doc/stable/reference/generated/numpy.transpose.html"" rel=""nofollow noreferrer""><code>transpose()</code></a> function will implicitly convert <code>array_list</code> into a two-dimensional NumPy array (so no need to do this explicitly) before transposing it (i.e. turning rows into columns and columns into rows). Calling <a href=""https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tolist.html"" rel=""nofollow noreferrer""><code>tolist()</code></a> on the resulting array will turn it into a list of lists, with three elements (corresponding to the original three columns) on the topmost level. Assigning the result with <code>list1, list2, list3 = ...</code> will &quot;unpack&quot; this three-element list into the three target variables.</p>
<p>If you are fine with the results (<code>list1</code>, <code>list2</code>, <code>list3</code>) being again NumPy arrays rather than lists, you can omit <code>tolist()</code>, thus only writing:</p>
<pre class=""lang-py prettyprint-override""><code>list1, list2, list3 = np.transpose(array_list)
</code></pre>
","1","Answer"
"79023926","79023899","<p>Your problem is here:</p>
<pre><code>user_cards.append(give_card(2))
</code></pre>
<p><code>user_cards</code> is a list, and <code>give_card(2)</code> returns another list of two numbers. Appending a list to a list makes the appended list itself be an element of the resulting list:</p>
<pre><code>list = [1, 2]
list.append([3,4])
print(list) # prints [1, 2, [3, 4]]
</code></pre>
<p>What you need instead is</p>
<pre><code>user_cards.extend(give_card(2))
</code></pre>
<p>or</p>
<pre><code>user_cards += give_card(2)
</code></pre>
<p>This will produce what you require in <code>user_cards</code> because the <code>extend</code> function or the <code>+=</code> operator appends <em>each element</em> of the given list.</p>
<p>By the way, instead of iterating through <em>indexes</em> of a list, it's more readable to iterate through its <em>elements</em>:</p>
<pre><code>    for card in user_cards:
        score += card
</code></pre>
<p>But even better would be to use the <code>sum</code> function:</p>
<pre><code>    score = sum(user_cards)
</code></pre>
","1","Answer"
"79023941","79023899","<p>The problem is at the line:</p>
<pre><code>user_cards.append(give_card(2))
comp_cards.append(give_card(2))
</code></pre>
<p>you can update the code to use <code>extend</code> and also rather than using for loop to add it to the score, use sum() on the list.</p>
<pre><code>import random
cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
user_cards = []
comp_cards = []
user_score = 0
comp_score = 0

# Define Functions

def give_card(num):
    &quot;&quot;&quot;Returns random cards of a certain amount (num)&quot;&quot;&quot;
    num = int(num)
    cards_give = []
    for card in range(0, num):
        cards_give.append(random.choice(cards))
    return cards_give


def calc_score(player):
    &quot;&quot;&quot;Calculates the score of the specified player (player)&quot;&quot;&quot;
    score = 0
    if player == &quot;user&quot;:
        score = sum(user_cards)
    elif player == &quot;comp&quot;:
        score = sum(comp_cards)
    else:
        return
    return score

user_cards.extend(give_card(2))
comp_cards.extend(give_card(2))
print(user_cards)
print(comp_cards)

user_score = calc_score(&quot;user&quot;)
comp_score = calc_score(&quot;comp&quot;)
print(user_score)
print(comp_score)
</code></pre>
","0","Answer"
"79024886","79023187","<p>With a recursive helper and an ever-increasing budget, where each number costs itself+1:</p>
<pre class=""lang-py prettyprint-override""><code>def genlists():
    def gen(budget):
        if not budget:
            yield []
        for x in range(budget):
            for y in gen(budget-(x+1)):
                yield [x] + y
    budget = 0
    while True:
        yield from gen(budget)
        budget += 1
</code></pre>
<p>Demo:</p>
<pre><code>for lst in genlists():
    print(lst)
</code></pre>
<p>Output (<a href=""https://ato.pxeger.com/run?1=ZVBLCsIwEMWdeIrZCCmlYHci9BbupAulSRuISUmm2JzFTTd6Jz2NTZN-1LfL-8xM3v1ZW6yU7LpHgyzZv1frgjIoqRTcoCHRYQM9AkcuTVFSDKQDZyAVgudn2sFyKgo45RPJlIYWuAR9liX9nzV6rPPM2xLSxmn041ssaHOIwQ6qD0AGu-F5q7igcNQNncM-xLS6Lj80yWFCnEHqC3lt3UnCYDjqq5Zac4mkFyNvHlv8AA"" rel=""nofollow noreferrer"">Attempt This Online!</a>):</p>
<pre><code>[]
[0]
[0, 0]
[1]
[0, 0, 0]
[0, 1]
[1, 0]
[2]
[0, 0, 0, 0]
[0, 0, 1]
[0, 1, 0]
[0, 2]
[1, 0, 0]
[1, 1]
[2, 0]
[3]
[0, 0, 0, 0, 0]
[0, 0, 0, 1]
...
</code></pre>
","2","Answer"
"79027216","79027200","<p>A general approach can be based on an <a href=""https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.when.html"" rel=""nofollow noreferrer""><em>when-then-otherwise</em></a> construct. Here, I use <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.int_range.html"" rel=""nofollow noreferrer""><code>pl.int_range</code></a> to access the element's index in the list.</p>
<p>We can easily compare it against a fixed index or implement more complex conditions.</p>
<pre class=""lang-py prettyprint-override""><code>index_expr = pl.int_range(pl.element().len())

df.with_columns(
    pl.col(&quot;values&quot;).list.eval(
        pl.when(index_expr == 3).then(1).otherwise(pl.element())
    )
)
</code></pre>
<pre><code>shape: (3, 1)
┌───────────────────┐
│ values            │
│ ---               │
│ list[i64]         │
╞═══════════════════╡
│ [10, 20, 30, 1]   │
│ [50, 60, 70, 1]   │
│ [90, 100, 110, 1] │
└───────────────────┘
</code></pre>
","3","Answer"
"79027217","79027200","<ul>
<li>take first 3 elements with <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.head.html"" rel=""nofollow noreferrer""><code>list.head()</code></a>.</li>
<li>add <code>1</code></li>
<li>add remaining elements of list with <a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.list.tail.html"" rel=""nofollow noreferrer""><code>list.tail()</code></a> using <code>-4</code> to get all elements except first 4.</li>
<li><a href=""https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.concat_list.html"" rel=""nofollow noreferrer""><code>concat_list()</code></a> to concat elements together.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>df.with_columns(
    pl.concat_list(
        pl.col.values.list.head(3), 1,
        pl.col.values.list.tail(-4)
    )
)
</code></pre>
<pre><code>shape: (3, 1)
┌───────────────────┐
│ values            │
│ ---               │
│ list[i64]         │
╞═══════════════════╡
│ [10, 20, 30, 1]   │
│ [50, 60, 70, 1]   │
│ [90, 100, 110, 1] │
└───────────────────┘
</code></pre>
","3","Answer"
"79029048","79029031","<p>You could use a list of dicts, that'd be the simplest:</p>
<pre><code>people = [
  {&quot;name&quot;: &quot;John&quot;, &quot;tel&quot;: &quot;123&quot;},
  {&quot;name&quot;: &quot;Lottie&quot;, &quot;tel&quot;: &quot;456&quot;},
]

while True:
    q = input(f&quot;Enter index (0..{len(people) - 1}) + field:&quot;)
    if not q:
        break
    idx_str, field = q.split(None, 1)
    try:
        idx = int(idx_str)
    except ValueError:
        print(&quot;Invalid index (not a number)&quot;)
        continue
    try:
        person = people[idx]
    except IndexError:
        print(&quot;Invalid index (no such person)&quot;)
        continue
    print(person.get(field, &quot;No such field&quot;))
</code></pre>
<pre><code>Enter index (0..1) + field:1 tel
456
Enter index (0..1) + field:1 name
Lottie
Enter index (0..1) + field:0 name
John
Enter index (0..1) + field:0 address
No such field
Enter index (0..1) + field:4 address
Invalid index (no such person)
Enter index (0..1) + field:foo foo
Invalid index (not a number)
Enter index (0..1) + field:
</code></pre>
","0","Answer"
"79029260","79029031","<p>Here's a code that uses a class <code>ContactBook()</code> to create a contact book. You can add and modify the methods here but in general, the <code>record()</code> method lets you add a contact. You can call it how many ever times you want. Here I call it twice. Then, the <code>save_in_rec()</code> method basically appends the info to a <code>defaultdict()</code>. There are other ways you can do this but to answer your question and what you need, I think this is simple and can be adapted to your needs. Lastly, the <code>get_info()</code> method takes in the information type you are looking for and the number in the entry to get you the info you need. Hope this helps!</p>
<pre><code>from collections import defaultdict

class ContactBook:
    def __init__(self):
        self.reg_number = None
        self.name = None
        self.address = None
        self.phone = None
        self.master = defaultdict(list)

    def record(self):
        self.name = input('Name: ')
        self.address = input('Address: ')
        self.phone = input('Phone: ')
        self.reg_number = input('Registration number: ')
        self.save_in_rec()

    def save_in_rec(self):
        self.master['reg_number'].append(self.reg_number)
        self.master['name'].append(self.name)
        self.master['address'].append(self.address)
        self.master['phone'].append(self.phone)

    def get_info(self, info_type, number):
        return self.master[info_type][number]

if __name__ == '__main__':
    contact = ContactBook()  # Create the address book
    contact.record()  # Record a contact
    contact.record()  # Record another contact
    print(contact.get_info('name', 0))  # Print the first name
</code></pre>
","0","Answer"
"79034039","78970824","<p>As suggested by Scott, you might want to use zip:</p>
<pre><code>equal = True
for a, b in zip(hrc_list, fp_list):
    equal = equal and (str(a) == b[len(url):])
    if not equal:
        break  # Don't do extra work

if equal:
    print(&quot;Equal&quot;)
else:
    print(&quot;Not Equal&quot;)
</code></pre>
","0","Answer"
"79036228","79036220","<p>Your code is faulty because casting the list to a <a href=""https://docs.python.org/3/tutorial/datastructures.html#sets"" rel=""nofollow noreferrer""><code>set</code></a> doesn’t guarantee preserving the original sorted order and is not <strong>&quot;in-place&quot;</strong>. While sets remove duplicates, <a href=""https://stackoverflow.com/questions/61414947/why-dont-python-sets-preserve-insertion-order"">they don’t maintain the insertion order of elements</a>, which is required here (otherwise, you would need to sort again afterwards, which is obviously inefficient).</p>
<p>A more efficient approach is to use two-pointers since the array is already sorted. You can iterate through the list, and whenever you find a unique element, just move it to the front:</p>
<pre class=""lang-py prettyprint-override""><code>class Solution:
    def removeDuplicates(self, nums: list[int]) -&gt; int:
        if not nums:
            return 0
        k = 1
        for i in range(1, len(nums)):
            if nums[i] != nums[i - 1]:
                nums[k] = nums[i]
                k += 1           
        return k
</code></pre>
<p>This keeps the original order running in O(n) time with O(1) space since it modifies the array in-place.</p>
","1","Answer"
"79036438","79036220","<p>The main issue is that you do not modify the list in-place. The intended solution is to take advantage of the input being sorted, which means that all equal elements are adjacent. This allows you to simply take the first occurrence of each distinct value (when the current value is not the same as the value at the previous index).</p>
<p>For a simple way to fix your code, you can assign to a slice of the whole list, i.e. <code>nums[:]</code>, which changes its actual content. However, <code>set</code> does not preserve insertion order, so this would not be fully correct. Instead, you can create a <code>dict</code>, which preserves the insertion order of its keys.</p>
<p>This produces a very concise solution:</p>
<pre class=""lang-py prettyprint-override""><code>class Solution:
    def removeDuplicates(self, nums: list[int]) -&gt; int:
        nums[:] = dict.fromkeys(nums)
        return len(nums)
</code></pre>
","-1","Answer"
"79036455","79036220","<p>Oops, you should first understand what it the difference between changing a mutable object in place, and replacing a variable with a new object.</p>
<p>Here:</p>
<pre><code>a = [1, 2, 3]
a[1] = 4
</code></pre>
<p>I have <em>changed</em> the mutable list referenced by the <code>a</code> variable</p>
<p>But there:</p>
<pre><code>a = [1, 2, 3]
a = [1, 4, 3]
</code></pre>
<p><code>a</code> points to a new list object, totally unrelated with the original one.</p>
<p>Let's go one step further:</p>
<pre><code>def alter_good(lst, val):
    lst.append(val)

def alter_wrong(lst, val):
    lst = lst + [val]
</code></pre>
<p>Here, <code>alter_good</code> will correctly alter the passed list, and the caller will be able to see the change. But <code>alter_wrong</code> will create a new list, only referenced by the local <code>lst</code> variable. On return that now object will be destroyed, and the caller will see no change in its list.</p>
<p>Said differently, while your code contains <code>nums[i]=smthing</code> you respect the contract; but as soon at it contains <code>nums=...</code>, you are wrong.</p>
","0","Answer"
"79038054","79037901","<p>The <code>intersperse</code> function will insert a single <code>Char</code> between every pair of characters in a <code>String</code> (or more generally, a single element of type <code>a</code> between every pair of elements in a list <code>[a]</code>). For example:</p>
<pre><code>&gt; intersperse ' ' ['a','b','c']
&quot;a b c&quot;
&gt; intersperse ' ' &quot;abc&quot;
&quot;a b c&quot;
</code></pre>
<p>You can also convert a list of characters into a list of single-character strings by mapping the function <code>singleton</code> over the list, like so:</p>
<pre><code>&gt; map singleton ['a','b','c']
[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]
</code></pre>
<p>which would allow you to apply <code>unwords</code>, or use <code>intercalate</code> to insert a multi-character string between the characters, as in:</p>
<pre><code>&gt; intercalate &quot;, &quot; $ map singleton ['a','b','c']
&quot;a, b, c&quot;
</code></pre>
","6","Answer"
"79044759","79044704","<p>you can try to add a new item to each dictionary using a for loop like this.</p>
<pre><code>for i in range(len(user_data)):
    user_data[i]['c'] = available_times_array[i]
</code></pre>
","1","Answer"
"79044761","79044704","<pre><code>user_data = [{'a': '1', 'b': '3'}, {'a': '2', 'b': '4'}, {'a': '5', 'b': '1'}]
available_times_array = ['12:00', '12:10', '12:20']

for data, time in zip(user_data, available_times_array):
    data['c'] = time

print(user_data)
</code></pre>
","4","Answer"
"79056598","79056582","<p>In the second code, each series that counts the counter i rebuilds the list and empties it, so you only see the last number in it.</p>
","0","Answer"
"79056608","79056582","<p>You're just <em>recreating</em> <code>new_list</code> as an empty list at each iteration.</p>
","0","Answer"
"79056614","79056582","<p>The statement <code>new_list = []</code> is initialising the variable <code>new_list</code> as an <em>empty list</em>.</p>
<p>When this is placed <em>inside</em> the loop, the list will be re-initialised (replaced with an empty list) on <em>each</em> iteration.</p>
<p>Whereas when placed <em>outside</em> the loop, the list is initialised first, then updated inside the loop, as expected.</p>
<hr />
<p>There is no ‘right’ nor ‘wrong’ here, as there are valid use cases for both variations.</p>
<p>However, in your use case, <em>outside</em> the list is the correct choice.</p>
<hr />
<p>Purely as an aside: If <em>order does not matter</em> another way to remove duplicates from a list is to simply create a <code>set</code>, as:</p>
<pre><code>nodups = set(my_list)
</code></pre>
<p>Same approach, but returning a list:</p>
<pre><code>nodups = list(set(my_list))
</code></pre>
","1","Answer"
"79056796","79056740","<p><code>b = list(a)</code> is a shallow copy. <code>b</code> is a new list with the references to the same inner lists as <code>a</code></p>
<p><code>a[0]=[9,10]</code> changes the 1st inner list reference in <code>a</code>. This leaves <code>b</code> unaffected</p>
<p><code>a[1][0]=11</code> modifies the 1st element of the 2nd inner list of <code>a</code>. This is reflected in <code>b</code> as <code>a</code>&amp;<code>b</code> still share the same reference to that 2nd inner list</p>
","2","Answer"
"79056805","79056740","<p>I think the confusion arises from <em>how shallow copies work in Python</em> and how the elements are referenced. To break down what happens in your code snippets:</p>
<p>When you perform <code>b = list(a)</code>, a shallow copy of the list <code>a</code> is created. This means that <code>b</code> is a new list object, but the inner lists within <code>a</code> are not copied. Instead, both <code>a</code> and <code>b</code> still reference the same inner lists -&gt; So you're basically copying the outer list, but not the stuff inside. This means <code>b</code> gets its outer list, but both <code>a</code> and <code>b</code> still share the same inner lists.</p>
<p>Now, when you do this:</p>
<pre class=""lang-py prettyprint-override""><code>a[1][0] = 11
</code></pre>
<p>You are <strong>modifying one of the elements within the inner list</strong>. Since both <code>a[1]</code> and <code>b[1]</code> still refer to the same inner list, the change you make in <code>a[1][0]</code> also appears in <code>b[1][0]</code>.</p>
<p>But when you replace an entire element (the entire inner list):</p>
<pre class=""lang-py prettyprint-override""><code>a[0] = [9, 10]
</code></pre>
<p>In this case, you're <strong>replacing the entire inner list</strong> <code>a[0]</code> (the <strong>whole object</strong>) with a new list [9, 10]. A new reference is created. Since <code>b</code> only holds a reference to the original list at position <code>b[0]</code> (which was [0, 1]), this assignment does not affect <code>b[0]</code>. The reference in <code>b</code> is unchanged, so <code>b[0]</code> still points to the old list [0, 1], while <code>a[0]</code> points to the new list [9, 10].</p>
","1","Answer"
"79059027","79037901","<blockquote>
<p>PS: <a href=""https://hackage.haskell.org/package/base-4.20.0.1/docs/Prelude.html#v:unwords"" rel=""nofollow noreferrer""><strong><code>unwords :: [String] -&gt; String</code></strong> <sup>[Hackage]</sup></a> does not take <code>Char</code>s.</p>
</blockquote>
<p>You are right, it doesn't. But that is not that much of a problem: we can just convert the characters to strings with one character, we can use <a href=""https://hackage.haskell.org/package/base-4.20.0.1/docs/Prelude.html#v:pure"" rel=""nofollow noreferrer""><strong><code>pure :: Applicative f =&gt; a -&gt; f a</code></strong> <sup>[Hackage]</sup></a> for this, for example, or <a href=""https://hackage.haskell.org/package/base-4.20.0.1/docs/Data-List.html#v:singleton"" rel=""nofollow noreferrer""><strong><code>singleton :: a -&gt; [a]</code></strong> <sup>[Hackage]</sup></a>, so:</p>
<pre class=""lang-hs prettyprint-override""><code>unwords (<b>map pure</b> ['_', 'a', 'b', '1'])</code></pre>
<p>If you want to work with an arbitrary separator, you can use the <a href=""https://stackoverflow.com/a/79038054/67579""><strong><code>intersperse :: a -&gt; [a] -&gt; [a]</code></strong> function in K. A. Buhr's answer</a>.</p>
","0","Answer"
"79060345","79060295","<p>Based on your requirement, there are two ways of accomplishing your requirement in constant time.</p>
<p>The first way is by creating an array the size of the largest expected integer and just assigning the values to the array so you can map one value to another.</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define LIST_SIZE 7
int main() {
    int inputs[LIST_SIZE] = {28525, 30068, 25975, 26740, 29286, 24947, 30067};
    int mapper[30069] = {};
    mapper[28525] = 0;
    mapper[30068] = 1;
    mapper[25975] = 2;
    mapper[26740] = 3;
    mapper[29286] = 4;
    mapper[24947] = 5;
    mapper[30067] = 6;
    int results[LIST_SIZE];

    for (int i = 0; i &lt; LIST_SIZE; i++) {
        results[i] = mapper[inputs[i]];
    }

    // Display results
    for (int i = 0; i &lt; LIST_SIZE; i++) {
        printf(&quot;%d &quot;, results[i]);
    }

    return 0;
}
</code></pre>
<p>This will always return a in constant time.</p>
<p>The next way is to go through the array in constant time.</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

#define LIST_SIZE 7

int mapper(int input){
    static int checker[] = {28525 ,30068 ,25975 ,26740 ,29286 ,24947 ,30067};
    static int length = sizeof(checker) / sizeof(checker[0]);
    int output = -1;

    // Don't return early to make it constant time.
    for(int i = 0; i &lt; length; i++){
        if(checker[i] == input) output = i;
    }
    return output;
}

int main() {
    int numbers[LIST_SIZE] = {28525, 30068, 25975, 26740, 29286, 24947, 30067};
    int results[LIST_SIZE];

    for (int i = 0; i &lt; LIST_SIZE; i++) {
        results[i] = mapper(numbers[i]);
    }

    // Display results
    for (int i = 0; i &lt; LIST_SIZE; i++) {
        printf(&quot;%d &quot;, results[i]);
    }

    return 0;
}
</code></pre>
","0","Answer"
"79060423","79060295","<p>I came up with this expression:
<code>(0x2C070010003 &gt;&gt; (n % 14 * 3) &amp; 7)</code>
, which is certainly not optimal.</p>
","0","Answer"
"79061486","79060295","<p><code>x * 0x3160du &gt;&gt; 16 &amp; 7</code>.</p>
<p>Found by brute force.</p>
","6","Answer"
"79076590","79076479","<p><a href=""https://hackage.haskell.org/package/base-4.20.0.1/docs/Data-List.html#v:break"" rel=""nofollow noreferrer""><code>break</code></a>, which splits a list on the first match, seems like a good starting point:</p>
<pre class=""lang-hs prettyprint-override""><code>cutAfter :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe [a]
cutAfter p xs = case break p xs of
    (start, mid : _) -&gt; Just (start ++ [mid])
    _ -&gt; Nothing
</code></pre>
<p>It also seems like a plausible choice to want a list that doesn’t contain a matching element to be taken in its entirety:</p>
<pre class=""lang-hs prettyprint-override""><code>cutAfter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
cutAfter p xs =
    let (start, end) = break p xs
    in start ++ take 1 end
</code></pre>
<p>This option is nice because it’s more efficient and lazy – no need to find the match before using the list.</p>
","4","Answer"
"79076913","79076724","<p>A workaround is to use a nested <code>map</code>, which can take a <em>purrr</em>-style formula as input and avoid the use of <code>rlang::as_function()</code>.</p>
<pre class=""lang-r prettyprint-override""><code>library(purrr)

imap(fun_list, \(f, var) map(df[var], f)[[1]])

# $X2
#       10%       90% 
# -1.289408  1.058432 
# 
# $X4
# [1] -2.465898194 -0.737146704 -0.003508661  0.693634712  2.571458146
</code></pre>
<p>or briefly, <code>imap(fun_list, ~ map(df[.y], .x)[[1]])</code>.</p>
","3","Answer"
"79077126","79076479","<p>We can use <em>explicit recursion</em>:</p>
<pre class=""lang-hs prettyprint-override""><code>cutAfter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
cutAfter p = go
  where
    go [] = []
    <b>go (x : xs)</b>
      | p x = [x]
      | otherwise = x : go xs</code></pre>
<p>If the list does not contain any element that satisfies the predicate <code>p</code>, it will return the entire list. So it just keeps yielding elements until (and including) the first element that satisfies the predicate.</p>
<p>This can also be done with a foldr-pattern:</p>
<pre class=""lang-hs prettyprint-override""><code>cutAfter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
cutAfter p = foldr (\x -&gt; <b>if p x then const [x] else (x :)</b>) []</code></pre>
","5","Answer"
"79077362","79076724","<p><strong>1)</strong> Here is a base R solution. First we create a function, <code>fo2fun</code>, which accepts a formula and outputs the corresponding function. Then <code>execute</code> is a function with a one-statement body using <code>Map</code> to apply it to each formula and list name/index.</p>
<pre><code>fo2fun &lt;- function(formula) {
    f &lt;- function(.x) {}
    body(f) &lt;- formula[[2]]
    environment(f)  &lt;- environment(formula)
    f
}

execute &lt;- function(funs, envir = parent.frame()) {
  Map(\(fo, index) fo2fun(fo)(envir[[index]]), funs, names(fun_list))
}

# test
expected &lt;- list(
  X2 = quantile(df$X2, c(0.1, 0.9), na.rm = TRUE), 
  X4 = fivenum(df$X4, na.rm = TRUE)
)

execute(fun_list, df) |&gt; identical(expected)
## [1] TRUE

execute(fun_list, list2env(df)) |&gt; identical(expected)
## [1] TRUE

list2env(df, .GlobalEnv)
execute(fun_list) |&gt; identical(expected)
## [1] TRUE
</code></pre>
<p><strong>2)</strong> This is the same as (1) except we have used <code>match.funfn</code> from the gsubfn package in place of <code>fo2fun</code>.</p>
<p>With this approach the formal argument is not restricted to be <code>.x</code> but rather <code>match.funfn</code> assumes that any free variable found in the formula is the argument. Optionally specify the argument variable on the left hand side of the formula. This latter syntax should be used if there are non-argument free variables in the formula to distinguish the argument but can also be used even if not.</p>
<pre><code>library(gsubfn)

fun_list2 &lt;- list(
  X2 = ~ quantile(var, c(0.1, 0.9), na.rm = TRUE),
  X4 = x ~ fivenum(x, na.rm = TRUE)
)

execute &lt;- function(funs, envir = parent.frame()) {
  Map(\(fo, index) match.funfn(fo)(envir[[index]]), funs, names(fun_list))
}

# test

execute(fun_list, df) |&gt; identical(expected)
## [1] TRUE

execute(fun_list2, df) |&gt; identical(expected)
## [1] TRUE
</code></pre>
<h2>Note</h2>
<p>Input from question:</p>
<pre><code>set.seed(123)
df &lt;- data.frame(matrix(rnorm(500), 100, 5))

fun_list &lt;- list(
  X2 = ~ quantile(.x, c(0.1, 0.9), na.rm = TRUE),
  X4 = ~ fivenum(.x, na.rm = TRUE)
)
</code></pre>
","3","Answer"
"79079567","79079532","<p>You were close to the right solution. You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"" rel=""nofollow noreferrer""><code>Object.keys()</code></a> to get the name of the key in the condition object. Now compare the value of the list with the value of the condition.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const list = [{name:'John',age:38,role:'Dad'},{name:'Jane',age:38,role:'Mom'},{name:'Patricia',age:11,role:'Daughter'},{name:'Mike',age:6,role:'Son'}];
const conditions = [{age:38}, {role:'Son'}];
const result = list.filter(item =&gt; conditions.some(condition =&gt; {
  const [key] = Object.keys(condition);
  return item[key] === condition[key];
}));
console.log(result);</code></pre>
</div>
</div>
</p>
","1","Answer"
"79079572","79079532","<p>Breaking the problem into smaller pieces can help.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [
  { name: ""John"", age: 38, role: ""Dad"" },
  { name: ""Jane"", age: 38, role: ""Mom"" },
  { name: ""Patricia"", age: 11, role: ""Daughter"" },
  { name: ""Mike"", age: 6, role: ""Son"" },
]
const b = [{ age: 38 }, { role: ""Son"" }];

//compare a single ""a"" element against a single ""b"" criterion
function matchesThisCriterion(aObj,bCrit) {
    returnResult =  Object.keys(bCrit).every(bKey =&gt; {
    return aObj[bKey] == bCrit[bKey]
  });
  return returnResult;
}

//filter the items that match
let d= a.filter(
    aObj =&gt; {
    //determine if a single ""a"" element matches at least some of the ""b"" criteria
    return b.some(bCrit =&gt; {
        return matchesThisCriterion(aObj,bCrit)
    })
  }
);
console.log(d)</code></pre>
</div>
</div>
</p>
","1","Answer"
"79080112","79060295","<p>If you are on a recent x86 (Haswell or later, as this requires BMI2, and <code>#include &lt;immintrin.h&gt;</code>), you can do some bit manipulation as follows:</p>
<ol>
<li><p>Find 3 bits that distinguish every input from one another and extract them: <code>0x1402</code></p>
</li>
<li><p>Encode the numbers 0 to 7 in a uint32_t, 4 bits at a time, using the indexes obtained from step 1: <code>0x61472053u</code></p>
</li>
<li><p>Extract the bits from step 2 using the index from step 1</p>
<pre><code>_bextr_u32( 0x61472053u, _pext_u32( x, 0x1402) &lt;&lt; 2, 3 )
</code></pre>
</li>
</ol>
<p>Not sure if this is faster than the multiplication method or not, but it's probably a bit less brute force.</p>
","1","Answer"
"79084202","79084169","<p>Zip up the two lists to generate pairs <code>(x, cond)</code>, then check if <code>&quot;Yes&quot;</code>:</p>
<pre><code>list3 = [
    x
    for x, cond in zip(list1, list2)
    if cond == &quot;Yes&quot;
]
</code></pre>
<p>Since <code>len(list3) ≤ len(list2)</code>, this is a good indicator that we need an <code>if</code> <em>after</em> the <code>for</code>.</p>
","3","Answer"
"79084236","79084169","<p>You can filter List1 using values from List2:</p>
<pre><code>List1 = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]
List2 = [&quot;Yes&quot;, &quot;No&quot;, &quot;Yes&quot;]
List3 = [value for i, value in enumerate(List1) if List2[i] == &quot;Yes&quot;]
print(List3)
</code></pre>
","0","Answer"
"79084623","79084587","<p>Your solution has a few issues and this is how I would update your code for clarity.
Hope this helps.</p>
<pre><code>def has_33(my_list):
    i = None  
    for j in my_list:
        if i == 3 and j == 3:
            return True
        i = j
    return False
</code></pre>
<p>Pythonic way to write this:</p>
<pre><code>def has_33(my_list):
    return any(x == 3 and y == 3 for x, y in zip(my_list, my_list[1:]))
</code></pre>
<p>References:</p>
<ol>
<li><a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer"">https://docs.python.org/3/library/functions.html#zip</a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#any"" rel=""noreferrer"">https://docs.python.org/3/library/functions.html#any</a></li>
</ol>
","5","Answer"
"79084631","79084587","<p>Your online instructor's code will work. Your code won't; it'll only look for duplicate numbers without checking whether they're both <code>3</code>.</p>
<p>I personally wouldn't use either, though. I'd opt for the <a href=""https://docs.python.org/3/library/itertools.html#itertools.pairwise"" rel=""nofollow noreferrer""><code>itertools.pairwise</code></a> function, which iterates over each pair of consecutive values in an iterable. Then, you can directly compare each pair to the tuple <code>(3, 3)</code>. Here's an iterative version for readability:</p>
<pre class=""lang-py prettyprint-override""><code>import itertools

def has_33(my_list):
    for pair in itertools.pairwise(my_list):
        if pair == (3, 3):
            return True
    return False
</code></pre>
<p>Of course, the better solution is just to use <code>in</code> (kudos to <a href=""/users/390785/sureshvv"">@sureshvv</a> for pointing this one out):</p>
<pre><code>def has_33(my_list):
    return (3, 3) in itertools.pairwise(my_list)
</code></pre>
","2","Answer"
"79084781","79083100","<p>Your code seems mostly correct, but I think you might encounter an Index out of Bounds error, because you are comparing  (list[i]) with the next element (list[i+1]). This means when i reaches the second-to-last element (i = lastPosition - 1), you’ll be trying to access list[i+1], which is out of bounds.</p>
","1","Answer"
"79085771","79083100","<p>If you want to sort your list of students, simply write</p>
<pre><code>list = list.OrderBy(x =&gt; x.GetName()).ToArray();
</code></pre>
","0","Answer"
"79087459","79087299","<p><code>bind_rows</code> uses <code>vctrs::data_frame</code> under the hood. It turns out <code>vctrs::data_frame</code> creates empty dataframe when there is an element with 0 length (i.e. list(0), integer(0), character(0).etc):</p>
<pre><code>vctrs::data_frame(!!!list(q = 1880L, properties = list(), last_Import_Date = &quot;2024-09-16&quot;),.name_repair=&quot;unique&quot;)
[1] q                properties       last_Import_Date
&lt;0 rows&gt; (or 0-length row.names)

vctrs::data_frame(a=list(&quot;a&quot;),b= integer(0))
[1] a b
&lt;0 rows&gt; (or 0-length row.names)

vctrs::data_frame(a=list(),b= 1)
[1] a b
&lt;0 rows&gt; (or 0-length row.names)
</code></pre>
<p>One alternative is to use <code>vctrs::vec_rbind</code>:</p>
<pre><code>vctrs::vec_rbind(!!!x)
     q properties last_Import_Date
1 1880       NULL       2024-09-16
2 1888       x, y       2024-09-16
3 1890       x, y       2024-09-16
</code></pre>
","5","Answer"
"79087467","79087299","<h1>Update</h1>
<p>If you want to use <code>unnest</code> without removing empty entries in <code>properties</code>, you should specify the option <code>keep_empty = TRUE</code> (based on <a href=""https://stackoverflow.com/a/79087459/12158757"">@one's <code>vec_rbind</code> approach</a>)</p>
<pre><code>vctrs::vec_rbind(!!!x) %&gt;%
    unnest(cols = everything(), keep_empty = TRUE)
</code></pre>
<p>which gives</p>
<pre><code># A tibble: 3 × 3
      q properties       last_Import_Date
  &lt;int&gt; &lt;list&gt;           &lt;chr&gt;
1  1880 &lt;NULL&gt;           2024-09-16
2  1888 &lt;named list [2]&gt; 2024-09-16
3  1890 &lt;named list [2]&gt; 2024-09-16 
</code></pre>
<p>and its base R equivalence might be</p>
<pre><code>list2DF(
    lapply(
        as.data.frame(do.call(rbind, x)),
        \(v) unlist(replace(v, lengths(v) == 0, list(list(NULL))), FALSE)
    )
) 
</code></pre>
<p>which gives</p>
<pre><code>     q properties last_Import_Date
1 1880       NULL       2024-09-16
2 1888       x, y       2024-09-16
3 1890       x, y       2024-09-16
</code></pre>
<p>and the structure looks like</p>
<pre><code>'data.frame':   3 obs. of  3 variables:
 $ q               : int  1880 1888 1890
 $ properties      :List of 3
  ..$ : NULL
  ..$ :List of 2
  .. ..$ a: chr &quot;x&quot;
  .. ..$ b: chr &quot;y&quot;
  ..$ :List of 2
  .. ..$ a: chr &quot;x&quot;
  .. ..$ b: chr &quot;y&quot;
 $ last_Import_Date: chr  &quot;2024-09-16&quot; &quot;2024-09-16&quot; &quot;2024-09-16&quot;
</code></pre>
<hr />
<h1>Older (quick fixup)</h1>
<p>Here is a base R quick fix</p>
<pre><code>&gt; as.data.frame(do.call(rbind, x))
     q properties last_Import_Date
1 1880       NULL       2024-09-16
2 1888       x, y       2024-09-16
3 1890       x, y       2024-09-16
</code></pre>
<p>and its structure looks like</p>
<pre><code>&gt; as.data.frame(do.call(rbind, x)) %&gt;% str()
'data.frame':   3 obs. of  3 variables:
 $ q               :List of 3
  ..$ : int 1880
  ..$ : int 1888
  ..$ : int 1890
 $ properties      :List of 3
  ..$ : list()
  ..$ :List of 1
  .. ..$ :List of 2
  .. .. ..$ a: chr &quot;x&quot;
  .. .. ..$ b: chr &quot;y&quot;
  ..$ :List of 1
  .. ..$ :List of 2
  .. .. ..$ a: chr &quot;x&quot;
  .. .. ..$ b: chr &quot;y&quot;
 $ last_Import_Date:List of 3
  ..$ : chr &quot;2024-09-16&quot;
  ..$ : chr &quot;2024-09-16&quot;
  ..$ : chr &quot;2024-09-16&quot;
</code></pre>
","4","Answer"
"79087899","79087299","<p><strong>1) bind_rows</strong> <code>bind_rows</code> will work if you pre and post process the input like this:</p>
<pre><code>library(dplyr)
x |&gt; lapply(unlist) |&gt; bind_rows() |&gt; type.convert(as.is = TRUE)

## # A tibble: 3 × 4
##       q last_Import_Date properties.a properties.b
##   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;       
## 1  1880 2024-09-16       &lt;NA&gt;         &lt;NA&gt;        
## 2  1888 2024-09-16       x            y           
## 3  1890 2024-09-16       x            y           
</code></pre>
<p><strong>2) transpose</strong> Transposing <code>x</code> and then removing the extra layer of lists in <code>properties</code> allows us to use <code>hoist</code> to hoist <code>a</code> and <code>b</code> from <code>properties</code>.</p>
<pre><code>library(purrr)
library(tidyr)
x |&gt;
  transpose() |&gt;
  list2DF() |&gt;
  transform(properties = lapply(properties, unlist)) |&gt;
  hoist(properties, &quot;a&quot;, &quot;b&quot;)

##      q    a    b last_Import_Date
## 1 1880 &lt;NA&gt; &lt;NA&gt;       2024-09-16
## 2 1888    x    y       2024-09-16
## 3 1890    x    y       2024-09-16
</code></pre>
<p><strong>3) Base R</strong> If a list column for <code>properties</code> is sufficient then this double iteration uses only base R:</p>
<pre><code>Map(\(z) sapply(x, &quot;[[&quot;, z), names(x[[1]])) |&gt; list2DF()

##      q properties last_Import_Date
## 1 1880       NULL       2024-09-16
## 2 1888       x, y       2024-09-16
## 3 1890       x, y       2024-09-16
</code></pre>
<p><strong>4) rrapply</strong> <code>rrapply</code> can create the data frame directly:</p>
<pre><code>library(rrapply)
rrapply(x, how = &quot;bind&quot;)

##      q last_Import_Date properties.1.a properties.1.b
## 1 1880       2024-09-16           &lt;NA&gt;           &lt;NA&gt;
## 2 1888       2024-09-16              x              y
## 3 1890       2024-09-16              x              y
</code></pre>
<p><strong>5) Recursive</strong> This base R solution is longer than the others but maybe it is of interest anyways.  We define <code>getField</code> which given a list that represents a row finds and returns the value of the input field name (argument <code>field</code>) or NA if none found.  <code>Map</code> iterates over <code>Names</code> (q, a, b, last_Date_Modified).  It  uses <code>sapply</code> to iterate over the rows for a given name.</p>
<pre><code>getField &lt;- function(x, field) {
  ret &lt;- NA
  if (is.list(x)) {
    if (field %in% names(x)) ret &lt;- x[[field]]
    else for(el in x) if (!is.na(ret &lt;- Recall(el, field))) break
  } 
  ret
}

# Names &lt;- c(&quot;q&quot;, &quot;a&quot;, &quot;b&quot;, &quot;last_Import_Date&quot;)
Names &lt;- sub(&quot;.*\\.&quot;, &quot;&quot;, unique(names(unlist(x))))
Map(\(fld) sapply(x, getField, field = fld), Names) |&gt; list2DF()

##      q last_Import_Date    a    b
## 1 1880       2024-09-16 &lt;NA&gt; &lt;NA&gt;
## 2 1888       2024-09-16    x    y
## 3 1890       2024-09-16    x    y
</code></pre>
","5","Answer"
"79099592","79099555","<p>The encryption algorithm isn't really the question.  You have an <code>np.array</code> in this format:</p>
<pre><code>import numpy as np

arr = np.array([[4, 3]])
print(arr)
</code></pre>
<p>Output:</p>
<pre><code>[[4 3]]
</code></pre>
<p>and want the two-digit value:</p>
<pre><code>num = arr[0][0] * 10 + arr[0][1]
print(num)
</code></pre>
<p>Output:</p>
<pre><code>43
</code></pre>
","0","Answer"
"79101066","79099555","<p>If you want the output to be made up of strictly 2-digit values (e.g., 04) then you could do this:</p>
<pre><code>import numpy as np

polybius_square = np.array(
    [
        [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;],
        [&quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;],
        [&quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;],
        [&quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;],
        [&quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;],
    ]
)

word = &quot;hello&quot; # the input word
numbers = []

for c in word:
    r = np.argwhere(polybius_square == c)
    if len(r) == 1: 
        numbers.append(&quot;{}{}&quot;.format(*r[0]))

print(*numbers)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>12 04 21 21 24
</code></pre>
","0","Answer"
"79101408","79101313","<p>Here is a function that will either  return <code>x</code> when <code>all_x</code> has one value or none, or otherwise take the element from <code>all_x</code> that corresponds to the row number:</p>
<pre class=""lang-r prettyprint-override""><code>get_x2 &lt;- function(x, all_x, row_num) {
    if (length(all_x) &lt;= 1) {
        return(x)
    }
    all_x[[row_num]]
}
</code></pre>
<p>Then it's just a case of creating the <code>row_number()</code> by <code>id</code> and using <a href=""https://stat.ethz.ch/R-manual/R-devel/library/base/html/funprog.html"" rel=""nofollow noreferrer""><code>Map()</code></a>:</p>
<pre class=""lang-r prettyprint-override""><code>df |&gt;
    mutate(row_num = row_number(), .by = id) |&gt;
    mutate(
        x2 = Map(get_x2, x, all_x, row_num)
    )
#        id    x    all_x row_num  x2
# 1 1358792  123      123       1 123
# 2 1358792  123      123       2 123
# 3  333482  456 456, 789       1 456
# 4  333482  456 456, 789       2 789
# 5  747475 &lt;NA&gt;     NULL       1  NA
# 6  747475 &lt;NA&gt;     NULL       2  NA
</code></pre>
","2","Answer"
"79101489","79101313","<p>I think you should use <code>ifelse</code> (rather than <code>if_else</code>), with the minimal effort to make it fly</p>
<pre><code>&gt; df |&gt;
+     mutate(x2 = ifelse(lengths(all_x) &gt; 1, all_x[[1]][row_number()], x), .by = id)
       id    x    all_x   x2
1 1358792  123      123  123
2 1358792  123      123  123
3  333482  456 456, 789  456
4  333482  456 456, 789  789
5  747475 &lt;NA&gt;     NULL &lt;NA&gt;
6  747475 &lt;NA&gt;     NULL &lt;NA&gt;
</code></pre>
<p>Note: the difference between <code>if_else</code> and <code>ifelse</code></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/50708366/if-else-false-must-be-type-double-not-integer-in-r/50708505#50708505"">if_else() `false` must be type double, not integer - in R</a></li>
<li><a href=""https://stackoverflow.com/questions/50646133/dplyr-if-else-vs-base-r-ifelse"">dplyr if_else() vs base R ifelse()</a></li>
</ul>
","2","Answer"
"79102653","79102605","<p>A simple loop should work:</p>
<pre><code>new_list=[]
# data is the original list
for sublist in data:
    if sublist[0] == &quot;INS&quot;: new_list.append([])
    new_list[-1].append(sublist)
</code></pre>
","0","Answer"
"79102687","79102605","<p>iterate through intial list, check if first element is INS or not, and based on that structure your final output</p>
<p>below is example</p>
<pre><code>x = [
        ['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
        ['REF', '0F', '708066255'], ['REF', '1L', '708066255'],
        ['DTP', '303', 'D8', '20240901'],
        ['DTP', '356', 'D8', '20240801'],
        ['NM1', 'IL', '1', 'FIGUEROA', 'LILIET', '', '', '', '34', '536899858'],
        ['N3', '2670 SO A W GRIMES BO', '#6102'],
        ['N4', 'ROUND ROCK', 'TX', '786642849', '', 'CY', '246'],
        ['DMG', 'D8', '19931219', 'F', '', 'H'],
        ['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
        ['REF', '0F', '811229070'],
        ['REF', '1L', '811229070'],
        ['DTP', '303', 'D8', '20240901'],
        ['DTP', '356', 'D8', '20240201'],
        ['NM1', 'IL', '1', 'MORILLO RUZA', 'OMARLY', 'V', '', '', '34', '000000000'], 
        ['PER', 'IP', '', 'HP', '5129233526'], 
        ['N3', '154 TERRI TL'], 
        ['N4', 'ELGIN', 'TX', '786218937', '', 'CY', '011'], 
        ['DMG', 'D8', '20040628', 'F', '', 'H']
]

sol = []
tmp = []



for i in x:
    if i[0]!=&quot;INS&quot;:
        tmp.append(i)
    else:
        if tmp:
            sol.append(tmp)
        tmp = [i]

if tmp:
    sol.append(tmp)

print(sol)

# output
&quot;&quot;&quot;
[
    [
        ['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
        ['REF', '0F', '708066255'],
        ['REF', '1L', '708066255'],
        ['DTP', '303', 'D8', '20240901'],
        ['DTP', '356', 'D8', '20240801'],
        ['NM1', 'IL', '1', 'FIGUEROA', 'LILIET', '', '', '', '34', '536899858'],
        ['N3', '2670 SO A W GRIMES BO', '#6102'],
        ['N4', 'ROUND ROCK', 'TX', '786642849', '', 'CY', '246'],
        ['DMG', 'D8', '19931219', 'F', '', 'H']
    ],
    [
        ['INS', 'Y', '18', '024', '07', 'A', '', '', 'TE'],
        ['REF', '0F', '811229070'],
        ['REF', '1L', '811229070'],
        ['DTP', '303', 'D8', '20240901'],
        ['DTP', '356', 'D8', '20240201'],
        ['NM1', 'IL', '1', 'MORILLO RUZA', 'OMARLY', 'V', '', '', '34', '000000000'],
        ['PER', 'IP', '', 'HP', '5129233526'],
        ['N3', '154 TERRI TL'],
        ['N4', 'ELGIN', 'TX', '786218937', '', 'CY', '011'],
        ['DMG', 'D8', '20040628', 'F', '', 'H']
    ]
]
&quot;&quot;&quot;
</code></pre>
","1","Answer"
"79102821","79102763","<p><strong>1)</strong> to get rid of the leading blanks, just use the function <code>Trim</code></p>
<pre><code>Trim(WorksheetFunction.Substitute(strName,strSalutation,&quot;&quot;))
</code></pre>
<p><strong>2)</strong> Instead of <code>WorksheetFunction.Substitute</code>, you should use the native VBA function <code>Replace</code>. This is not only much faster, but ensures also that the code would work in any VBA environment (eg VBA for Word or Powerpoint).</p>
<pre><code>Trim(Replace(strName, strSalutation, &quot;&quot;))
</code></pre>
<p><strong>3)</strong> With your given example, you could get a bad surprise:<br />
Look at the input <code>DATIN SERI PADUKA JOHN DOE</code>. Your code starts to run, and the first entry in the list is <code>DATIN SERI</code>. The code will remove that from the name, leaving <code>PADUKA JOHN DOE</code>.<br />
Now you look at the second entry <code>DATIN SERI PADUKA</code> of the list. This is no longer part of the name, so the term <code>PADUKA</code> will stay and you end up with <code>PADUKA JOHN DOE</code>.</p>
<p>Either change the order in your list (put the longest entry to the top), or add another entry <code>PADUKA</code> into the list (but then the entry <code>DATIN SERI PADUKA</code> is no longer needed).</p>
","2","Answer"
"79103022","79102763","<p>With this code create a dictionary of the salutations by word. After it the code removes all words found. Apply as a function and the return value will be the pure name.</p>
<pre><code>Sub sallute()  'function sallute(inp as string) as string  REPLACE
purename = &quot;DATIN SERI PADUKA JOHN DOE&quot;  'purename=inp  REPLACE
Set salrng = Range(&quot;A1:A2&quot;)  'the range of salutations
Dim dict As Scripting.Dictionary
Set dict = New Dictionary
For Each cel In salrng

spl = Split(cel, &quot; &quot;, , vbTextCompare)
For i = 0 To UBound(spl)
If Not dict.Exists(spl(i)) Then
dict.Add spl(i), spl(i)
End If
Next i
Next cel

On Error Resume Next  'eliminate missing salutation
For i = 0 To dict.Count - 1

strSalutation = dict.Keys(i)
purename = WorksheetFunction.Substitute(purename, strSalutation, &quot;&quot;)
Next i
On Error GoTo 0
purename = Trim(purename)
'sallute=purename   REPLACE
End Sub

</code></pre>
<p><strong>UPDATE</strong></p>
<p>To enable the usage of partially identical salutations can several solutions applied, for me seems to enhance the check with the leading/trailing spaces and replace the found word with a space. For this apply the following mod:  (in 3 lines)</p>
<pre><code>Sub sallute()  'function sallute(inp as string) as string  REPLACE
purename = &quot; &quot; &amp; &quot;DATIN SERI PADUKA JOHN DOE&quot; &amp; &quot; &quot; 'purename=inp  REPLACE MOD
Set salrng = Range(&quot;A1:A2&quot;)  'the range of salutations
Dim dict As Scripting.Dictionary
Set dict = New Dictionary
For Each cel In salrng

spl = Split(cel, &quot; &quot;, , vbTextCompare)
For i = 0 To UBound(spl)
If Not dict.Exists(spl(i)) Then
dict.Add spl(i), spl(i)
End If
Next i
Next cel

On Error Resume Next  'eliminate missing salutation
For i = 0 To dict.Count - 1

strSalutation = &quot; &quot; &amp; dict.Keys(i) &amp; &quot; &quot;    'MOD
purename = WorksheetFunction.Substitute(purename, strSalutation, &quot; &quot;)   'MOD
Next i
On Error GoTo 0
purename = Trim(purename)
'sallute=purename   REPLACE
End Sub
</code></pre>
","1","Answer"
"79103235","79101313","<p>Working with <code>NULL</code> is always a bit clunky and mostly only works in a list context. You can replace <code>NULL</code> with <code>NA</code>, this way nothing can complain about <code>NULL</code> in a non-list context</p>
<pre><code>df %&gt;% 
  mutate(x2 = replace(all_x, lengths(all_x) == 0, NA), 
         x2 = unlist(x2)[row_number()], .by = id)
       id    x    all_x   x2
1 1358792  123      123  123
2 1358792  123      123  123
3  333482  456 456, 789  456
4  333482  456 456, 789  789
5  747475 &lt;NA&gt;     NULL &lt;NA&gt;
6  747475 &lt;NA&gt;     NULL &lt;NA&gt;
</code></pre>
","2","Answer"
"79103604","79102763","<p>Assuming you list of salutations is in a vertical range in the worksheet named <code>Salutations</code>, the following code uses Regular Expressions to remove all the Salutations:</p>
<pre><code>Option Explicit
Function ReplaceSalutations(S As String) As String
    Dim RE As Object
    Dim sPat As String, vPat As Variant
vPat = [Salutations]

'Convert Salutations into a Pipe-delimited string of the individual words or phrases
'If you use Phrases, they must be sorted by length order longest to shortest
'Also, there must be more than a single entry in Salutations
sPat = Join(WorksheetFunction.Transpose(vPat), &quot;|&quot;)
Set RE = CreateObject(&quot;vbscript.regexp&quot;)
With RE
    .Global = True
    .ignorecase = True
    .Pattern = sPat
    ReplaceSalutations = Trim(RE.Replace(S, &quot;&quot;))
End With
End Function
</code></pre>
","0","Answer"
"79107759","79107009","<p>We assume that the problem is to input a list of single column matrices and output it zero filled at the end to the length of the longest.  Dimnames should be dropped.</p>
<p>We calculate the lengths <code>lens</code> and a template <code>template</code>.  Then we update the
template using <code>replace</code> for each input list element.</p>
<pre><code>lens &lt;- lengths(mymatrix.list)
template &lt;- matrix(0, max(lens), 1)

Replace &lt;- function(m, len) replace(template, seq_along(m), m)
out &lt;- Map(Replace, mymatrix.list, lens)

identical(out, myoutput.list)
## [1] TRUE
</code></pre>
<p>If the number of columns is not necessarily 1 then use this more general formulation:</p>
<pre><code>dims &lt;- lapply(mymatrix.list, dim)
template &lt;- array(0, Reduce(pmax, dims))

Replace &lt;- function(m) {
  template[seq_len(nrow(m)), seq_len(ncol(m))] &lt;- m
  template
}

out &lt;- Map(Replace, mymatrix.list)

identical(out, myoutput.list)
## [1] TRUE
</code></pre>
<h2>Note</h2>
<pre><code>mymatrix.list &lt;- list(
  matrix(c(1, 2, 3), 3, dimnames = list(c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), NULL)),
  matrix(seq(4, 7, by = 1), 4, dimnames = list(c(&quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;), NULL)),
  matrix(seq(7, 11, by = 1), 5, dimnames = list(c(&quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;), NULL))
)

myoutput.list &lt;- list(
  matrix(c(1, 2, 3, 0, 0), 5),
  matrix(c(4, 5, 6, 7, 0), 5),
  matrix(seq(7, 11, by = 1), 5)
)
</code></pre>
","3","Answer"
"79110986","79110954","<p>You can try this:</p>
<pre><code>for item in myArray:
        print (f'something {item:6.2f} rest', sep=&quot;\n&quot;))
</code></pre>
","2","Answer"
"79111068","79110954","<p>Try:</p>
<pre><code>arr=map(float, range(1,11))
print('\n'.join([f'something {item:6.2f} rest' for item in arr]))
</code></pre>
<p>Prints:</p>
<pre><code>something   1.00 rest
something   2.00 rest
something   3.00 rest
something   4.00 rest
something   5.00 rest
something   6.00 rest
something   7.00 rest
something   8.00 rest
something   9.00 rest
something  10.00 rest
</code></pre>
","1","Answer"
"79111867","79110954","<p>Make a template and apply it elementwise. Format &amp; f-string notation do not require an <em>explicit</em> cast to string which make them preferable wrt an explicit string join, <code>str.join</code>.</p>
<p>Notice that for the f-string notation <code>{}</code> are escaped by nesting them <code>{{}}</code>. Then, to use <code>format</code>, you need a further nested pair.</p>
<p>You can pass your own element separator to the <code>print</code> to customize, with no extra manipulation, the final output.</p>
<pre><code>myArray = [[1.23456, 2.4680, 13.579], [1, 2, 3]]

sf = 6  # significant figures
dp = 2  # decimal places

apply_float_pattern = f&quot;{{:{sf}.{dp}f}}&quot;.format
el_SEP = ', '
line_SEP = '\n'

# method 1
for a in myArray:
    print(*map(apply_float_pattern, a), sep=el_SEP)
</code></pre>
<p>Ouptut</p>
<pre class=""lang-none prettyprint-override""><code>  1.23,   2.47,  13.58
  1.00,   2.00,   3.00
</code></pre>
<p>or by constructing a <em>single</em> string representing the whole output</p>
<pre><code># method 2
output = line_SEP.join(el_SEP.join(map(apply_float_pattern, a)) for a in myArray)
print(output)
</code></pre>
","1","Answer"
"79113353","79107009","<p>Following only targets <a href=""https://stackoverflow.com/revisions/79107009/2"">2nd revision</a> (list of frames with a factor column), which is quite different from the <a href=""https://stackoverflow.com/revisions/79107009/1"">original question</a> (list of matrices)</p>
<hr />
<p>You could first unify the levels of list of factors with <code>forcats::fct_unify()</code> , once original <code>age</code> values are replaced with unified variants, <code>tidyr::complete()</code> can turn implicit missing values into explicit missing values, i.e. complete a frame with all <code>age</code> levels.</p>
<p><code>purrr::map()</code> is used to extract a column from a list of frames, returns a list of <code>age</code> factors.<br />
<code>purrr::map2()</code> is used to iterate over pairs of items in <code>mydf.list</code> &amp; list of <code>age</code>.</p>
<pre class=""lang-r prettyprint-override""><code>purrr::map2(
  mydf.list, 
  purrr::map(mydf.list, &quot;age&quot;) |&gt; forcats::fct_unify(),
  \(df, age_unif_lvl)  dplyr::mutate(df, age = age_unif_lvl) |&gt; tidyr::complete(age, fill = list(Freq = 0))
)
#&gt; [[1]]
#&gt; # A tibble: 10 × 2
#&gt;    age    Freq
#&gt;    &lt;ord&gt; &lt;dbl&gt;
#&gt;  1 0         1
#&gt;  2 1         2
#&gt;  3 2         3
#&gt;  4 3         7
#&gt;  5 4         8
#&gt;  6 6         9
#&gt;  7 7        10
#&gt;  8 8         5
#&gt;  9 9        10
#&gt; 10 10       10
#&gt; 
#&gt; [[2]]
#&gt; # A tibble: 10 × 2
#&gt;    age    Freq
#&gt;    &lt;ord&gt; &lt;dbl&gt;
#&gt;  1 0         0
#&gt;  2 1         0
#&gt;  3 2         0
#&gt;  4 3         0
#&gt;  5 4         0
#&gt;  6 6        10
#&gt;  7 7         5
#&gt;  8 8        10
#&gt;  9 9        10
#&gt; 10 10       21
#&gt; 
#&gt; [[3]]
#&gt; # A tibble: 10 × 2
#&gt;    age    Freq
#&gt;    &lt;ord&gt; &lt;dbl&gt;
#&gt;  1 0         1
#&gt;  2 1         5
#&gt;  3 2         9
#&gt;  4 3         4
#&gt;  5 4         0
#&gt;  6 6         0
#&gt;  7 7         0
#&gt;  8 8         0
#&gt;  9 9         0
#&gt; 10 10        0
</code></pre>
<p>Example data:</p>
<pre class=""lang-r prettyprint-override""><code>mydf.1 &lt;- data.frame(age=factor(c(0:4,6:10),levels=c(0:4,6:10),ordered=TRUE), Freq=c(1,2,3,7,8,9,10,5,10,10))
mydf.2 &lt;- data.frame(age=factor(6:10,levels=c(6:10),ordered=TRUE),Freq=c(10,5,10,10,21))
mydf.3 &lt;- data.frame(age=factor(0:3,levels=c(0:3),ordered=TRUE),Freq=c(1,5,9,4))
mydf.list &lt;- list(mydf.1,mydf.2,mydf.3)
str(mydf.list)
#&gt; List of 3
#&gt;  $ :'data.frame':    10 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 10 levels &quot;0&quot;&lt;&quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;..: 1 2 3 4 5 6 7 8 9 10
#&gt;   ..$ Freq: num [1:10] 1 2 3 7 8 9 10 5 10 10
#&gt;  $ :'data.frame':    5 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 5 levels &quot;6&quot;&lt;&quot;7&quot;&lt;&quot;8&quot;&lt;&quot;9&quot;&lt;..: 1 2 3 4 5
#&gt;   ..$ Freq: num [1:5] 10 5 10 10 21
#&gt;  $ :'data.frame':    4 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 4 levels &quot;0&quot;&lt;&quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;: 1 2 3 4
#&gt;   ..$ Freq: num [1:4] 1 5 9 4

#desired output
myout.1 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE), Freq=c(1,2,3,7,8,0,9,10,5,10,10))
myout.2 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE),Freq=c(0,0,0,0,0,0,10,5,10,10,21))
myout.3 &lt;- data.frame(age=factor(0:10,levels=c(0:10),ordered=TRUE),Freq=c(1,5,9,4,0,0,0,0,0,0,0))
myout.list &lt;- list(myout.1,myout.2,myout.3)
str(myout.list)
#&gt; List of 3
#&gt;  $ :'data.frame':    11 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 11 levels &quot;0&quot;&lt;&quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;..: 1 2 3 4 5 6 7 8 9 10 ...
#&gt;   ..$ Freq: num [1:11] 1 2 3 7 8 0 9 10 5 10 ...
#&gt;  $ :'data.frame':    11 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 11 levels &quot;0&quot;&lt;&quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;..: 1 2 3 4 5 6 7 8 9 10 ...
#&gt;   ..$ Freq: num [1:11] 0 0 0 0 0 0 10 5 10 10 ...
#&gt;  $ :'data.frame':    11 obs. of  2 variables:
#&gt;   ..$ age : Ord.factor w/ 11 levels &quot;0&quot;&lt;&quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;..: 1 2 3 4 5 6 7 8 9 10 ...
#&gt;   ..$ Freq: num [1:11] 1 5 9 4 0 0 0 0 0 0 ...

</code></pre>
<p><sup>Created on 2024-10-22 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.1</a></sup></p>
","1","Answer"
"79113468","79107009","<p>Eventually, I got it but my solution requires more lines of code.
Thank you very much to anyone who has provided a solution and I apologies again for the confusion between the first post and the definitive one.</p>
<p>Stef</p>
<pre><code>myrows.in &lt;- list()
myrows.out &lt;- list()

for (i in c(1:3)){
myrows.in[[i]] &lt;- match(mydf.empty$age,mydf.list[[i]]$age)
myrows.out[[i]] &lt;- match(mydf.list[[i]]$age,mydf.empty$age)
}
myrows.in
myrows.out

#creating an empty list of dataframe
mydf.empty &lt;- 
data.frame(age=factor(0:14,levels=c(0:14),ordered=TRUE),Freq=c(rep(0,15)))
mydf.out.list &lt;- list()
for (i in c(1:3)){
mydf.out.list[[i]] &lt;- mydf.empty
}
mydf.out.list

#filling the empty list of dataframe
for (i in c(1:3)){
mydf.out.list[[i]]$Freq[unlist(myrows.out[i])] &lt;- 
mydf.list[[i]]$Freq[na.omit(unlist(myrows.in[i]))] 
}
mydf.out.list
identical(myout.list[1],mydf.out.list[1])
identical(myout.list[2],mydf.out.list[2])
identical(myout.list[3],mydf.out.list[3])
</code></pre>
","0","Answer"
"79119541","79119501","<p>Your groups exist at indices 0 and 1. A trick for alternating between the two indices is to subtract each index from 1 to get the other.</p>
<pre><code>i = 0
for p in players:
  groups[i].append(p)
  i = 1 - i  # 1 - 0 == 1, 1 - 1 = 0
</code></pre>
<hr />
<p>Using an import from the standard library (there's little reason to avoid it),</p>
<pre><code>from itertools import cycle

for player, team in zip(players, cycle(groups)):
    team.append(player)
</code></pre>
<p>Iterating over <code>cycle(groups)</code> just iterates over the contents repeatedly for as long as <code>zip</code> needs value. <code>team</code> is alternate set to <code>groups[0]</code>, <code>groups[1]</code>, <code>groups[0]</code>, <code>groups[1]</code>, etc, for as long as there is an available player for <code>zip</code> to pair with a group.</p>
","1","Answer"
"79119545","79119501","<p>Using your current approach as a starting point, you don't need a nested loop.  The index to be used in <code>groups</code> can be determined by a modulo operation on <code>i</code>.  For example:</p>
<pre><code>for i in range(len(players)):
    groups[i % len(groups)].append(players[i])
</code></pre>
<p>So player 0 goes to group 0, player 1 to group 1, player 2 to group 0, etc.</p>
<hr />
<p>Alternatively, you can slice lists.  For example:</p>
<pre><code>for i in range(len(groups)):
    groups[i].extend(players[i::len(groups)])
</code></pre>
<p>This should, for each group, slice the players into a list which starts at <code>i</code> and includes another player every <code>len(groups)</code> number of indices.  So players 0 and 2 are in group 0, 1 and 3 are in group 1, etc.</p>
<hr />
<p>As a general word of advice, you might find dictionaries which <em>contain</em> lists to be an easier data structure to use.  These &quot;groups&quot; appear to have two distinct properties, a single &quot;leader&quot; value and a list of &quot;player&quot; values.  Keeping them separate is probably best.</p>
","0","Answer"
"79122624","79122612","<p>A list is a single value. You need to unpack the contents of the list, so that each element is passed as a separate argument:</p>
<pre><code>print(Tester(*contestents))
</code></pre>
<p>This assumes that <code>contestants</code> has exactly 3 items. Too few or too many, and you'll get a <code>TypeError</code>.</p>
","0","Answer"
"79122638","79122612","<p>You need to <a href=""https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments"" rel=""nofollow noreferrer"">unpack the list</a> to pass the arguments:</p>
<pre><code>class Tester:

    def __init__(self, first: int, second: int, third: int) -&gt; None:
        self.first = first
        self.second = second
        self.third = third

    def __str__(self) -&gt; str:
        return f&quot;Tester(first={self.first}, second={self.second}, third={self.third})&quot;


contestants = [54, 56, 32]
print(Tester(*contestants))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Tester(first=54, second=56, third=32)
</code></pre>
","3","Answer"
"79127351","79127320","<p>Break down what you need:</p>
<ul>
<li>what do you need to modify?</li>
<li>exactly how do you need to modify it?</li>
</ul>
<p>The data you have is a dictionary (say <code>d</code>), and you know that the part of the dictionary you need to modify is a list, which is the value for key <code>'rules'</code>. You can access that list with <code>d['rules']</code>. And you can access elements of that list with <code>d['rules'][index]</code>.</p>
<p>The list contains dictionaries, but all you need to is remove the last one in the list, so it doesn't really matter what type of object you're removing. You can access the last element in a list, by counting from the rear <code>d['rules'][-1]</code>. Note that Python starts from 0 at the start, but has to start from -1 at the rear (since there's no difference between 0 and -0).</p>
<p>And to remove/unset a variable in Python, you can use <code>del</code>, which also works for removing dictionary entries:</p>
<pre><code>del d['rules'][-1]
</code></pre>
","1","Answer"
"79127368","79127320","<p>If the dictionary is always on last position, you can use <code>pop</code> function:</p>
<pre class=""lang-py prettyprint-override""><code># I am assuming you have a dict response
response = {'rules': [
 {'comment': 'XXX', 'policy': 'deny', 'srcCidr': 'IP', 'destCidr': 'IP'},
 {'comment': 'Remove', 'policy': 'allow', 'srcCidr': 'IP', 'destCidr': 'IP'}
]}

# removes the last item in a list
response['rules'].pop()

print(response)
</code></pre>
<p>If that can be in any position or if you can have multiple dictionaries to delete, maybe you can use a comprehension or <code>filter</code> function to filter the desired dictionaries:</p>
<pre class=""lang-py prettyprint-override""><code>response = {'rules': [
 {'comment': 'XXX', 'policy': 'deny', 'srcCidr': 'IP', 'destCidr': 'IP'},
 {'comment': 'Remove', 'policy': 'allow', 'srcCidr': 'IP', 'destCidr': 'IP'}
]}

key = 'comment'
value = 'Remove'

# Option1 - comprehension
rules = [d for d in response['rules'] if d[key] != value]

# Option2 - filter
rules = list(filter(lambda d: d.get(key) != value, response['rules']))

response['rules'] = rules

print(response)
</code></pre>
","1","Answer"
"79131782","79131769","<p>The error occurs because you are trying to include a list (<code>ptrn_wlsap</code>) within another list (<code>dvc_ptrns</code>). When you iterate over dvc_ptrns, the <code>re.search</code> function expects each pattern to be a string, but instead, it encounters a list.</p>
<pre class=""lang-py prettyprint-override""><code>dvc_ptrns = [ptrn_print] + ptrn_wlsap
</code></pre>
","0","Answer"
"79131806","79131769","<p>This error occurs because <code>dvc_ptrns</code> contains a nested list <code>ptrn_wlsap</code>.
When you iterate over dvc_ptrns in your <code>count_matching_lines</code> function, Python treats <code>ptrn_wlsap</code> as a list, which isn't hashable and cannot be used directly in a <code>re.search</code> function. In other words, in the second iteration of <code>if re.search(pattern, line):</code>, pattern results to <code>['2022:34e','2022:34f']</code> which the <code>re.search</code> function doesn't expect. It expects a string.</p>
<p>To fix this, you have to flatten <code>dvc_ptrns</code> to a single list of strings like so:</p>
<pre><code>dvc_ptrns = [ptrn_print] + ptrn_wlsap
</code></pre>
","0","Answer"
"79133129","79126873","<p><strong>Question 1</strong></p>
<p>Your approach gives <code>O(log(unknown))</code> calls to <code>realloc</code> and about <code>O(unknown)</code> of extra copying (10 + 20 + ... + unknown / 2 is a geometric series and approximately equal to unknown). This is not bad, but you can exploit that allocation is lazy, at least on Linux systems. You can start by allocating some upper bound (e.g. twice the RAM you have available), and then just fill your array. When you are done, you can realloc. This requires no extra copying and only one call to <code>realloc</code>. Allocating too much memory will only reserve virtual address space, it will not use RAM until you write to it.
You could even consider not using any <code>realloc</code> at all as you have plenty of virtual address space and the <code>realloc</code> will likely copy your data.</p>
<p><strong>Question 2</strong></p>
<p>In most code I see, people just pass the size into functions explicitly, but I don't think there is anything wrong with using a struct. I would suggest to use</p>
<pre><code>typedef struct list
{
    size_t size;
    int *array;
} list;
</code></pre>
<p>otherwise you are limited to an array of 8 GiB, assuming <code>int</code> is 32 bits.</p>
","1","Answer"
"79133334","79126873","<blockquote>
<p>the common procedure is to start small and then keep doubling the size and reallocating it as we go along right?</p>
</blockquote>
<p>I'd say the most common approach is to start reasonably and then indeed keep doubling the size. Usually to a multiple of the CPU word alignment.</p>
<blockquote>
<p>And then I assume once we are done we will want to realloc once more to free up the excess memory</p>
</blockquote>
<p>No. Pre-allocating and doubling the size is an execution speed over memory optimization, since <code>realloc</code> calls are expensive. If you are using that approach, you have already decided that execution speed matters and memory use is less important.</p>
<blockquote>
<p>Question 1: Is this the most performant way of tackling this problem?</p>
</blockquote>
<p>You wouldn't check for sizes in the middle of iteration, but before it. Also repeated <code>if</code> checks in a loop are to be avoided if possible since that creates extra branching.</p>
<p>Instead check if new size fits in the allocated chunk, if not realloc, and <em>then</em> start the loop doing stuff on the data. From a program design perspective, allocation and algorithm should ideally <em>not</em> get mixed together in a tight-coupled mess, if that can be avoided.</p>
<p>And as mentioned, you wouldn't do a final realloc call either.</p>
<blockquote>
<p>Question 2: Since we need to keep track of the size of the array do most people create a struct for this?</p>
</blockquote>
<p>Yes and keep that struct private through the &quot;opaque type&quot; design pattern, hiding details about allocation away from the caller.</p>
","2","Answer"
"79139175","79138681","<p>Just use <a href=""https://hexdocs.pm/elixir/Enum.html#concat/1"" rel=""nofollow noreferrer""><code>Enum.concat/1</code></a>:</p>
<pre class=""lang-none prettyprint-override""><code>Enum.concat([
  [[1, 2, 3], [4, 5, 6]],
  [[1, 2, 3], [4, 5, 6]]
])
</code></pre>
<p>returns</p>
<pre class=""lang-none prettyprint-override""><code>[[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]
</code></pre>
","4","Answer"
"79139427","79139391","<p>This is basic logic and arithmetic:</p>
<pre><code>offset = index1 - index2

# left
# reorder lists so left part always comes from l1
l1, l2 = (list1, list2) if offset &gt; 0 else (list2, list1)
offset = abs(offset)
final_list = l1[:offset]

# middle
for z in zip(l1[offset:], l2):
    final_list.extend(z)

# right
# (at most one of these lines will add more elements) 
final_list.extend(l1[offset+len(l2):])
final_list.extend(l2[len(l1)-offset:]) 
# (note that len(l1) &gt; offset otherwise the problem statement is nonsensical...)
</code></pre>
","2","Answer"
"79139529","79139391","<pre class=""lang-py prettyprint-override""><code>list1 = [1, 2, 3, 4, 5, 6]
list2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
index1 = 2 # list1[index1] is 3
index2 = 1 # list2[index2] is &quot;b&quot;

sub = min(index1, index2)
index1 -= sub
index2 -= sub
left = list1[:index1] or list2[:index2]
zipped_middle = [x for xs in zip(list1[index1:], list2[index2:]) for x in xs]
add = len(zipped_middle) // 2
right = list1[index1+add:] or list2[index2+add:]
final_list = left + zipped_middle + right

print(left)
print(zipped_middle)
print(right)
print(final_list)
</code></pre>
<p><a href=""https://ato.pxeger.com/run?1=VVHdasMgFGa3PsUhu4nEUmK3MYQ-SZGSTrMKqQ3RQrZX2U1vtofaXmbqUdrciJ7vV87Xz_jhj2d7vX5ffL96_X34G4zzLWxh1zLgDDYMnhg8M3iRJEI8QlVXMagO8XirJDFW6TlqODxC0u9wJME42CAehW3GOeI84cGHEHc5BPxkbI1KBsigxXy1hcApVvk16N4HGUaKknmecojIKeTTjKNW-5NRatDxAzP0gTW7kAIBrO9LC8kWJYWkyI7k2UnSKRVDta0XvhTWa-BkMu_HWym0bIJE3BVDY5yS3thu2EcguYYfNbAs3EAyJWScjPV15NB8XzbIw8Quj5s9xR3nVZeV_wM"" rel=""nofollow noreferrer"">Attempt This Online!</a></p>
","2","Answer"
"79142397","79138681","<p>You also can use <a href=""https://hexdocs.pm/elixir/Enum.html#flat_map/1"" rel=""nofollow noreferrer""><code>Enum.flat_map/1</code></a></p>
<pre><code>iex&gt; [
...&gt;   [[1, 2, 3], [4, 5, 6]],
...&gt;   [[1, 2, 3], [4, 5, 6]]
...&gt; ] |&gt; Enum.flat_map(fn x -&gt; x end)
[[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]
</code></pre>
","0","Answer"
"79143438","79143422","<p>I'm assuming that by resultant clause variable you mean a string. If so this may be achieved by:</p>
<pre><code>fruits = ['apple', 'blackberry', 'peach', 'kiwi']
clause = &quot; Or &quot;.join([&quot;item_field = {}&quot;.format(fruit) for fruit in fruits])
</code></pre>
<p>Edited to follow @Julien's suggestion</p>
","0","Answer"
"79143452","79143422","<p>If you are looking for a string, then this is an easy solution:</p>
<pre><code>&quot; Or &quot;.join(f&quot;item_field = '{fruit}'&quot; for fruit in fruits)
</code></pre>
","1","Answer"
"79147314","79138681","<p>For the sake of completeness, here is another solution.</p>
<pre class=""lang-none prettyprint-override""><code>iex|🌢|1 ▶ Enum.reduce(input, &amp;++/2)
[[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]
</code></pre>
","1","Answer"
"79147672","79147645","<p>You're trying to return a tuple but you're not accounting for that when assigning to L1 and L2.</p>
<p>You can remedy that as follows:</p>
<pre><code>count = 0

def merge(L1, L2):
    m = len(L1)
    n = len(L2)
    i = 0
    j = 0
    c = []
    k = 0

    while i &lt; m and j &lt; n:
        if L1[i] &lt;= L2[j]:
            c.append(L1[i])
            i += 1
        else:
            c.append(L2[j])
            j += 1
    while i &lt; m:
        c.append(L1[i])
        i += 1
    while j &lt; n:
        c.append(L2[j])
        j += 1
    return c

def subordinates(L):
    length = len(L)
    global count
    count = count + 1

    if length &lt;= 1:
        return L, 0

    L1, _ = subordinates(L[: length // 2])
    L2, _ = subordinates(L[length // 2 :])
    sorted_list = merge(L1, L2)

    return sorted_list, count

x = [10, 33, 45, 67, 92, 100, 5, 99, 105]
print(subordinates(x))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>([5, 10, 33, 45, 67, 92, 99, 100, 105], 17)
</code></pre>
<p>Of course, there's no real need to return <em>count</em> as it's available globally</p>
","0","Answer"
"79147755","79147645","<p>This is happening because, when you modify the <code>subordinates function</code> to return a <code>tuple (sorted_list, count)</code>, the recursive calls is returning <code>tuples</code> instead of <code>lists</code>. The <code>merge</code> function is expecting lists of int, but it's receiving tuples, thats why you are getting this <code>TypeError</code>.</p>
<p>you just need to unpack the tuple when you call <code>subordinates</code>, so you can do something like this-</p>
<pre><code>count = 0

def merge(L1, L2):
    m = len(L1)
    n = len(L2)
    i = 0
    j = 0
    c = []
    k = 0

    while i &lt; m and j &lt; n:
        if L1[i] &lt;= L2[j]:
            c.append(L1[i])
            i += 1
        else:
            c.append(L2[j])
            j += 1
    while i &lt; m:
        c.append(L1[i])
        i += 1
    while j &lt; n:
        c.append(L2[j])
        j += 1
    return c


def subordinates(L):
    length = len(L)
    global count
    count = count + 1

    if length &lt;= 1:
        return L, count

    L1, _ = subordinates(L[: length // 2])
    L2, _ = subordinates(L[length // 2 :])
    sorted_list = merge(L1, L2)

    return sorted_list, count


x = [10, 33, 45, 67, 92, 100, 5, 99, 105]
print(subordinates(x))
</code></pre>
","0","Answer"
"79151384","79151228","<p>You may use <code>os.path.split(os.path.split(&quot;C:\Users\Name\New\Data\Folder1\Folder1-1&quot;)[0])[1]</code> construction: it will produce <code>&quot;Folder1&quot;</code>
Sure, if I understood right what your issue is.</p>
","1","Answer"
"79151388","79151228","<p>To check if each main directory contains any <code>.txt</code> files in its subdirectories, we can combine the logic you've started with and streamline it to match only the main directory name (one of the 35).
Here's the code to achieve this and generate a <code>yes/no</code> spreadsheet using <code>pandas</code>.</p>
<pre><code>import os
import pandas as pd

main_dir = r'C:\Users\Name\New\Data'
main_folders = os.listdir(main_dir)
results = {folder: &quot;No&quot; for folder in main_folders}

for root, dirs, files in os.walk(main_dir):
    if any(file.endswith('.txt') for file in files):
        main_folder_name = os.path.basename(os.path.dirname(root))        
        if main_folder_name in results:
            results[main_folder_name] = &quot;Yes&quot;

df = pd.DataFrame(list(results.items()), columns=['Folder', 'Has_txt_file'])
output_path = r'C:\Users\Name\New\output.xlsx'
df.to_excel(output_path, index=False)
</code></pre>
<p>I hope this will help you a little.</p>
","1","Answer"
"79154019","78898706","<p>Try it:</p>
<pre><code>import time

text = &quot;hello&quot;
alphabet = [
    &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, 
&quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;
]
text1 = [i for i in text]

for j in range(len(text)):
    for k in range(26):
        if text1[j] != alphabet[k]:
            print(text[:j] + alphabet[k])
        if text1[j] == alphabet[k]:
            print(text[:j] + alphabet[k])
            break  
        time.sleep(0.2)
</code></pre>
","0","Answer"
"79157947","79157923","<p>If you know the position in the list, you can use indexes:</p>
<pre><code>my_list=[&quot;apple&quot;,&quot;banana&quot;,&quot;orange&quot;]
my_list[1] = my_list[1].upper() # ['apple', 'BANANA', 'orange']
</code></pre>
","0","Answer"
"79157953","79157923","<p>You can use the list's index to access and update the item.</p>
<pre><code># Sample list
my_list = ['apple', 'banana', 'cherry']

# What element do we want to change to uppercase?
item_to_upper = input(&quot;Enter the item to convert to uppercase: &quot;)

# Check if the item exists in the list and update it if found
if item_to_upper in my_list:
    index = my_list.index(item_to_upper)  # Find the index of the item
    my_list[index] = my_list[index].upper()  # Convert the item to uppercase
else:
    print(f&quot;'{item_to_upper}' not found in the list.&quot;)

print(my_list)
</code></pre>
","1","Answer"
"79157968","79157923","<p>I think it would be more elegant to use list comprehension here, for example:</p>
<pre><code>my_list=[&quot;apple&quot;,&quot;banana&quot;,&quot;orange&quot;]
my_list=[l.upper() if l == &quot;banana&quot; else l for l in my_list]
</code></pre>
","0","Answer"
"79157974","79157923","<p>In general you need to use a conditional that embodies your criteria of when you want to convert to uppercase.  Whatever that condition is you can use an if statement to only convert to upper case if that condition is met.</p>
<p>Rather than specifically looking for 'banana' let's do something more general, let's assume we want to convert to uppercase any string that is exactly 6 characters long (like 'banana')</p>
<pre><code>fruit = [&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]
new = []
for f in fruit:
    new.append(f.upper() if len(f) == 6 else f)

print(new)
</code></pre>
<p>produces:</p>
<pre><code>['apple', 'BANANA', 'pear', 'ORANGE']
</code></pre>
<p>this idea of iterating through every item in an iterable and transforming it if the item meets a given condition is very elegantly and compactly embodied in a list comprehension:</p>
<pre><code>new = [ f.upper() if len(f) == 6 else f for f in fruit ]
print(new)
</code></pre>
<p>again produces:</p>
<pre><code>['apple', 'BANANA', 'pear', 'ORANGE']
</code></pre>
<p>You could also do the same thing using the map function and embody your conditional in a separate &quot;decision&quot; function</p>
<pre><code>def some_upper(s):
    if len(s) == 6:
        return s.upper()
    else:
        return s

# or more compactly

def some_upper(s):
    return s.upper() if len(s) == 6 else s

new = list(map(some_upper, fruit))

print(new)
</code></pre>
<p>once again produces:</p>
<pre><code>['apple', 'BANANA', 'pear', 'ORANGE']
</code></pre>
","0","Answer"
"79160398","79160356","<p>When list items all have the same length, it's usually easier to have them as a data frame. I would do</p>
<pre><code>mylist |&gt;
  as.data.frame() |&gt;
  rowSums()
# [1] 107 129  59
</code></pre>
<p>If you don't want to rely on the list being convertible to a data frame, and instead want to extract the <code>i</code>th element of each item and sum them, then I would do it like this:</p>
<pre><code>i = 1
sapply(mylist, &quot;[&quot;, i) |&gt;  ## extract `i`th element 
  sum()                    ## and sum
# [1] 107
</code></pre>
<p>Which you could then repeat for whichever values of <code>i</code> you want.</p>
","4","Answer"
"79160418","79160356","<p>There is a n+1 solutions. For data manipulation data.frame/tibble is preferred. Possible way:</p>
<pre class=""lang-r prettyprint-override""><code>mylist &lt;- list(points_ex1=c(15,18,12), points_ex2=c(9,16,8), points_ex3=c(83,95,39))

mylist |&gt;
  as.data.frame()
#&gt;   points_ex1 points_ex2 points_ex3
#&gt; 1         15          9         83
#&gt; 2         18         16         95
#&gt; 3         12          8         39
</code></pre>
<p>But then we can rearrange the columns/rows a bit:</p>
<pre class=""lang-r prettyprint-override""><code>mylist |&gt;
  as.data.frame() |&gt;
  dplyr::mutate(n = dplyr::row_number()) |&gt;
  tidyr::pivot_longer(c(1:3)) |&gt;
  dplyr::group_by(n) |&gt;
  dplyr::reframe(sum(value))
#&gt; # A tibble: 3 × 2
#&gt;       n `sum(value)`
#&gt;   &lt;int&gt;        &lt;dbl&gt;
#&gt; 1     1          107
#&gt; 2     2          129
#&gt; 3     3           59
</code></pre>
<p>In fact, every solution which leads to proper results is a proper one. Just a matter of computing efficiency/code readability and reproducibility.</p>
<p><sup>Created on 2024-11-05 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.0</a></sup></p>
","0","Answer"
"79160467","79160356","<p>One way to solve your problem:</p>
<pre><code>rowSums(simplify2array(mylist))
# [1] 107 129  59
</code></pre>
","1","Answer"
"79160707","79160356","<p>In the sense of code golf I would like to add</p>
<pre class=""lang-r prettyprint-override""><code>&gt; rowSums(list2DF(mylist))
[1] 107 129  59 
</code></pre>
","1","Answer"
"79171449","79171107","<pre class=""lang-r prettyprint-override""><code>library(tidyverse)

df1 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(0.01, 0.2, 0.1))
df2 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(-0.01, -0.2, -0.1))
df3 &lt;- data.frame(&quot;CNNgroup&quot; = c(90, 91, 92), &quot;CS&quot; = c(0.06, 0.8, 0.85))
mylist &lt;- list(df1,df2,df3)

# or reframe() or summarise()
bind_rows(mylist) %&gt;%
  reframe(value_mean = mean(CS, na.rm = TRUE), 
          lower_bound = quantile(CS, c(.025)),
          upper_bound = quantile(CS, .975), .by = CNNgroup)
#&gt;   CNNgroup value_mean lower_bound upper_bound
#&gt; 1       90  0.0200000      -0.009      0.0575
#&gt; 2       91  0.2666667      -0.180      0.7700
#&gt; 3       92  0.2833333      -0.090      0.8125
</code></pre>
","3","Answer"
"79171758","79171107","<p>This can be done beautifully in base R (no dependencies).</p>
<pre class=""lang-r prettyprint-override""><code>do.call(&quot;rbind&quot;, mylist) |&gt;
  aggregate(. ~ CNNgroup, FUN = \(x) c(mu = mean(x), low = quantile(x, .025), up = quantile(x, .975)))
</code></pre>
<p>giving</p>
<pre><code>  CNNgroup      CS.mu CS.low.2.5% CS.up.97.5%
1       90  0.0200000  -0.0090000   0.0575000
2       91  0.2666667  -0.1800000   0.7700000
3       92  0.2833333  -0.0900000   0.8125000
</code></pre>
<p>Complete with <code>na.rm=TRUE</code> if needed. As long as you do not explain what you need besides the <em>mean</em>, we cannot demonstrate a solution.</p>
<hr />
<p>Edit.</p>
<p><code>|&gt;</code> is the forward pipe operator introduced in R 4.1.0, see <code>help(`|&gt;`)</code>. If you are using older versions of R do</p>
<pre class=""lang-r prettyprint-override""><code>mydf = do.call(&quot;rbind&quot;, mylist)
aggregate(. ~ CNNgroup, mydf, FUN = \(x) 
          c(mu = mean(x), 
            low = quantile(x, .025), 
            up = quantile(x, .975)))
</code></pre>
<p>Also have a look on the documentation of <code>aggregate</code> and <code>formula</code>.
<code>. ~ CNNgroup</code> means &quot;<em>operate on all columns grouped by</em> <code>CNNgroup</code>&quot;.</p>
","4","Answer"
"79179366","79171107","<p>I was able to get this to work thanks to the help above. First, I bind all lists into one long data frame (they have the same columns).
Then, I grouped by <code>CNNgroup</code>, and did the stats.</p>
<pre><code>library(dplyr)
 
BindSUB &lt;- bind_rows(mylist)

BindSUB %&gt;%
  group_by(CNNgroup) %&gt;%
   summarise(value_mean = mean(CS, na.rm = TRUE), 
           lower_bound = quantile(CS, c(.025), na.rm = TRUE),
           upper_bound = quantile(CS, .975),na.rm = TRUE)
</code></pre>
","-1","Answer"
"79181082","79181014","<p>You need to extract the number from the values first:</p>
<pre><code>library(stringr)
data &lt;- list(NULL, NULL, &quot;19.9 nmol/L&quot;, &quot;0.7 nmol/L&quot;, NULL, NULL, &quot;22.6 nmol/L&quot;, &quot;3.7 nmol/L&quot;, &quot;6.6&quot;, &quot;3.7&quot;)

ifelse(as.numeric(str_extract(data, &quot;[0-9]+.?[0-9]*&quot;)) &lt; 18, &quot;low&quot;, &quot;high&quot;)
</code></pre>
<p>Note that this approach ignores the unit and thus assumes all values are within the same unit, i.e. nmol/L.</p>
","2","Answer"
"79181111","79181014","<p>I suspect your data reading routine can be improved. This looks like an import issue.</p>
<p>If the data is already loaded, we can do in base R</p>
<pre class=""lang-r prettyprint-override""><code>x = as.numeric(sub(&quot;\\s.*&quot;, &quot;&quot;, l)) # readr::parse_number(unlist(l))
y = ifelse(x &gt; 18, &quot;high&quot;, &quot;low&quot;)
</code></pre>
<p>giving</p>
<pre class=""lang-r prettyprint-override""><code>&gt; x
 [1]   NA   NA 19.9  0.7   NA   NA 22.6  3.7  6.6  3.7
&gt; y
 [1] NA     NA     &quot;high&quot; &quot;low&quot;  NA     NA     &quot;high&quot; &quot;low&quot;  &quot;low&quot;  &quot;low&quot; 
</code></pre>
<hr />
<p>Note</p>
<pre class=""lang-r prettyprint-override""><code>l = list(NULL, NULL, &quot;19.9 nmol/L&quot;, &quot;0.7 nmol/L&quot;, NULL, NULL, &quot;22.6 nmol/L&quot;, &quot;3.7 nmol/L&quot;, &quot;6.6&quot;, &quot;3.7&quot;)
</code></pre>
","1","Answer"
"79181415","79181014","<p>It's somewhat &quot;difficult&quot; to construct a data.frame with <code>NULL</code>, but here we go</p>
<h5>Data</h5>
<pre><code>OHP &lt;- structure(list(dat = 1:10, ohp17.value = list(NULL, NULL, 
  &quot;19.9 nmol/L&quot;, &quot;0.7 nmol/L&quot;, NULL, NULL, &quot;22.6 nmol/L&quot;, &quot;3.7 nmol/L&quot;, 
  &quot;6.6&quot;, &quot;3.7&quot;)), row.names = c(NA, -10L), class = &quot;data.frame&quot;)
</code></pre>
<p>Using <code>parse_number</code> with <code>sapply</code> to get single elements from the list, then replacing <code>NULL</code> with <code>NA</code>. Otherwise <code>NULL</code> gets omitted in <code>unlist</code> operations and the resulting vector will be truncated.</p>
<pre><code>library(readr)

cbind(OHP, flag = c(&quot;high&quot;, &quot;low&quot;)[(parse_number(sapply(OHP$ohp17.value, \(x) 
  if(is.null(x)) NA else x)) &lt; 18) + 1])
</code></pre>
<p>output</p>
<pre><code>   dat ohp17.value flag
1    1        NULL &lt;NA&gt;
2    2        NULL &lt;NA&gt;
3    3 19.9 nmol/L high
4    4  0.7 nmol/L  low
5    5        NULL &lt;NA&gt;
6    6        NULL &lt;NA&gt;
7    7 22.6 nmol/L high
8    8  3.7 nmol/L  low
9    9         6.6  low
10  10         3.7  low
</code></pre>
","1","Answer"
"79182665","79182496","<p>You're right that it's probably inefficient your way. I'm not sure you actual input, but the number of initial solutions (valid or invalid) will grow substantially if the length grows. Instead you can approach this via recursion/backtracking. I generally hate backtracking, but this seems like a good use case.</p>
<p>Basically start by forming a map from <code>int -&gt; str</code> to know <code>source -&gt; dest</code> node. This can be done like so:</p>
<pre class=""lang-py prettyprint-override""><code>for number, letter in all_edges_array:
    number_to_letters[number].append(letter)
</code></pre>
<p>So now if we want to know what 1 attaches to, we can do this:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; number_to_letters[1]
['a', 'b', 'c']
</code></pre>
<p>Next is the actual algorithm. Basically go through until you reach length N, in this case 3. Once you've reached it add a copy of whatever that list is and  return.</p>
<p>If you're still building the list then look at the next valid source node. Remember, we've essentially created islands for the source nodes within the mapping. Then we check the edges that connect from the next source, and if that destination isn't in a set of our &quot;used&quot; ones, then we can add it. Then we just recurse + backtrack.</p>
<p>That can be done below:</p>
<pre class=""lang-py prettyprint-override""><code>sources = list(number_to_letters.keys())

def find_combinations(current_combination, used_letters, results):
    # If we've reached the target length, add to results
    if len(current_combination) == number_of_connections:
        results.append(current_combination[:])
        return

    # Find the next number to add a pair for
    # NOTE below
    next_idx = len(current_combination)
    if next_idx &gt;= len(sources):
        return
    next_number = sources[next_idx]

    # Try each letter for the current number and make sure it's not used
    for letter in number_to_letters[next_number]:
        if letter not in used_letters:
            # Add the pair and recurse
            current_combination.append((next_number, letter))
            used_letters.add(letter)
            find_combinations(current_combination, used_letters, results)
            # Backtrack
            current_combination.pop()
            used_letters.remove(letter)
</code></pre>
<p>and running it:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; find_combinations([], set(), results)
&gt;&gt;&gt; results
[[(1, 'a'), (2, 'c'), (3, 'b')],
 [(1, 'a'), (2, 'd'), (3, 'b')],
 [(1, 'a'), (2, 'd'), (3, 'c')],
 [(1, 'b'), (2, 'd'), (3, 'c')],
 [(1, 'c'), (2, 'd'), (3, 'b')]]
</code></pre>
<p>Now for the NOTE above. Depending how your sources are laid out, you could potentially just look at the next number. So if your sources are all numerically increasing by 1, then you could just add +1 and not have to list the sources.</p>
","1","Answer"
"79182825","79182496","<p>If you want combinations of length <code>comb_length</code>, they have to contain exactly <code>comb_length</code> different numbers.</p>
<p>We first generate all possible combinations of this many numbers (in <code>all_combinations</code>).</p>
<p>Then, for each of these combinations of numbers, we generate recursively the possible combinations (in <code>edge_combinations</code>), keeping track of the letters we used and the index of the current number. Using a generator, we can yield the combinations one by one, building them in reverse when we have remaining letters for the last number.</p>
<pre><code>from collections import defaultdict
from itertools import combinations


def edge_combinations(letters_for_nums, nums, max_num_idx, used_letters=set(), curr_idx=0):
    available_letters = letters_for_nums[nums[curr_idx]] - used_letters
    
    # If there are no available letters left, we abandon this path immediately
    if not available_letters:
        return

    num = nums[curr_idx]

    if curr_idx==max_num_idx:
        # We have available letters for the last number, we start yielding from the end
        for letter in available_letters:
            yield [[num, letter]]
    else: 
        for letter in available_letters:
            for subcomb in edge_combinations(letters_for_nums, nums, max_num_idx,
                                             used_letters=used_letters | {letter},
                                             curr_idx = curr_idx+1):
                yield [[num, letter]] + subcomb


def all_combinations(edges, comb_length):
    # We build a dict {number: set of corresponding letters}
    letters_for_nums = defaultdict(set)
    for num, letter in edges:
        letters_for_nums[num].add(letter)
    
    # And make a list of numbers:
    all_nums = [num for num in letters_for_nums]

    # We try all combinations of comb_length of these numbers
    for nums in combinations(all_nums, r=comb_length):
        yield from edge_combinations(letters_for_nums, nums, max_num_idx=comb_length-1)
</code></pre>
<p>Sample run</p>
<pre><code>edges = [[1,'a'],[1,'b'],[1,'c'],
         [2,'c'],[2,'d'],
         [3,'b'],[3,'c']
        ]

for c in all_combinations(edges, 3):
    print(c)
</code></pre>
<p>Output</p>
<pre><code>[[1, 'a'], [2, 'c'], [3, 'b']]
[[1, 'a'], [2, 'd'], [3, 'b']]
[[1, 'a'], [2, 'd'], [3, 'c']]
[[1, 'b'], [2, 'd'], [3, 'c']]
[[1, 'c'], [2, 'd'], [3, 'b']]
</code></pre>
<p>With combinations of length 2, we would get:</p>
<pre><code>[[1, 'a'], [2, 'c']]
[[1, 'a'], [2, 'd']]
[[1, 'b'], [2, 'c']]
[[1, 'b'], [2, 'd']]
[[1, 'c'], [2, 'd']]
[[1, 'a'], [3, 'b']]
[[1, 'a'], [3, 'c']]
[[1, 'b'], [3, 'c']]
[[1, 'c'], [3, 'b']]
[[2, 'c'], [3, 'b']]
[[2, 'd'], [3, 'b']]
[[2, 'd'], [3, 'c']]
</code></pre>
","0","Answer"
"79182826","79182496","<p>You throw away and ignore the structure you already had, in your dict. We can instead use the product of its values, which avoids pointless generation and filtering of combinations with equal numbers. Just still needs checking the letters.</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import product

number_letter_dict = {1:['a','b','c'], 2:['c','d'], 3:['b','c']}

all_good_combinations = [
    list(zip(number_letter_dict, letters))
    for letters in product(*number_letter_dict.values())
    if len(set(letters)) == len(number_letter_dict)
]

for c in all_good_combinations:
    print(c)
</code></pre>
<p>Output (<a href=""https://ato.pxeger.com/run?1=bVAxjsIwENS1fsV2cU4BibvmhJSGbyAUJY5zrOR4LXuDBIiX0NDAo3jNOSGhyVlyMbM7M6u5PtyR92Rvt3vHzeLn-bFpPLWArD0TmQDYOvIMzlPdKRbCdm2lfWE0x5WiRsWQw3m13iZlkiVV_CrZZfAVCRVB3YPvCMbJRYjSmOKXqC4UtRXakpFsiCZbAfEZDCxP6OQ8KIMXCGk6rDbkJwbQTifKz7lyeShNp4MchdhEnZVBs3w7Qp4P5Fycip0QfZbqU_69fj3YOo-WpUpfVY6NTs3-AQ"" rel=""nofollow noreferrer"">Attempt This Online!</a>):</p>
<pre><code>[(1, 'a'), (2, 'c'), (3, 'b')]
[(1, 'a'), (2, 'd'), (3, 'b')]
[(1, 'a'), (2, 'd'), (3, 'c')]
[(1, 'b'), (2, 'd'), (3, 'c')]
[(1, 'c'), (2, 'd'), (3, 'b')]
</code></pre>
","2","Answer"
"79182868","79182496","<p>You can treat this as more of a graph problem than a combinatorics problem. Your <code>all_edges</code> example would be the graph where nodes that are adjacent share either a letter or a number:</p>
<pre><code>      3b
     /  \
   1b    3c
  /  \  /  \
1a -- 1c -- 2c -- 2d
</code></pre>
<p>The graph helps identify partitions of the original graph where numbers and letters aren't shared between partitions because once you've selected a node, all its neighbors are no longer eligible.</p>
<p>One possible partitioning method is finding all trees with height 5. Then for each tree, the 1st, 3rd, and 5th levels constitute a valid partition b/c the 2nd and 4th levels separate them.</p>
<p>For each partition, call <code>itertools.product()</code> to generate all solutions. There may be some duplicates, but shouldn't be very many.</p>
","0","Answer"
"79182895","79182496","<pre><code>def find unique combinations(pairs):
    # Helper function to check if a combination is valid
    def is_valid_combination(combo):
        first_elements = set()
        last_elements = set()
        for pair in combo:
            if pair[0] in first_elements or pair[1] in last_elements:
                return False
            first_elements.add(pair[0])
            last_elements.add(pair[1])
        return True

    # Recursive function to generate combinations
    def generate_combinations(index, current_combo):
        # If the current combination is valid, store it
        if is_valid_combination(current_combo):
            results.append(list(current_combo))

        # Iterate over remaining pairs to form new combinations
        for i in range(index, len(pairs)):
            current_combo.append(pairs[i])
            generate_combinations(i + 1, current_combo)
            current_combo.pop()

    results = []
   
</code></pre>
","-1","Answer"
"79183348","79183315","<p>From this <a href=""https://stackoverflow.com/a/28467760/6361531"">post</a>:</p>
<pre><code>!pip install thefuzz

x1 = ['lock-service',
 'jenkins-service',
 'xyz-reporting-service',
 'ansible-service',
 'harbor-service',
 'version-service',
 'jira-service',
 'kubernetes-service',
 'capo-service',
 'permission-service',
 'artifactory-service',
 'vault-service',
 'harbor-service-prod',
 'rundeck-service',
 'cruise-control-service',
 'artifactory-service.xyz.abc.cloud',
 'helm-service',
 'Capo Service',
 'rocket-chat-service',
 'reporting-service',
 'bitbucket-service',
 'rocketchat-service']

from itertools import combinations
from thefuzz import fuzz

[(ratio, a, b) for a, b in combinations(x1, 2) if (ratio:=fuzz.partial_ratio(a, b)) &gt; 90 ]
</code></pre>
<p>Output:</p>
<pre><code>[(91, 'lock-service', 'rundeck-service'),
 (100, 'xyz-reporting-service', 'reporting-service'),
 (100, 'harbor-service', 'harbor-service-prod'),
 (100, 'artifactory-service', 'artifactory-service.xyz.abc.cloud'),
 (94, 'rocket-chat-service', 'rocketchat-service')]
</code></pre>
<p>Added lowercase transformation:</p>
<pre><code>[(ratio, a, b) for a, b in combinations(x1, 2) if (ratio:=fuzz.partial_ratio(a.lower(), b.lower())) &gt; 90 ]
</code></pre>
<p>Output:</p>
<pre><code>[(91, 'lock-service', 'rundeck-service'),
 (100, 'xyz-reporting-service', 'reporting-service'),
 (100, 'harbor-service', 'harbor-service-prod'),
 (92, 'capo-service', 'Capo Service'),
 (100, 'artifactory-service', 'artifactory-service.xyz.abc.cloud'),
 (94, 'rocket-chat-service', 'rocketchat-service')]
</code></pre>
","0","Answer"
"79183354","79182496","<p>It is always inefficient to generate all combinations and throw away unwanted combinations when you can selectively generate wanted combinations to begin with.</p>
<p>The desired combinations can be most efficiently generated by recursively yielding combinations of unused letters paired with the number of the current recursion level, where a set can be used to keep track used letters:</p>
<pre><code>def unique_combinations(number_letter_dict):
    def _unique_combinations(index):
        if index == size:
            yield ()
            return
        number, letters = number_letters[index]
        for letter in letters:
            if letter not in used_letters:
                used_letters.add(letter)
                for combination in _unique_combinations(index + 1):
                    yield [number, letter], *combination
                used_letters.remove(letter)
    number_letters = list(number_letter_dict.items())
    size = len(number_letters)
    used_letters = set()
    return list(_unique_combinations(0))
</code></pre>
<p>so that:</p>
<pre><code>number_letter_dict = {1: ['a', 'b', 'c'], 2: ['c', 'd'], 3: ['b', 'c']}
print(unique_combinations(number_letter_dict))
</code></pre>
<p>outputs:</p>
<pre><code>[([1, 'a'], [2, 'c'], [3, 'b']), ([1, 'a'], [2, 'd'], [3, 'b']), ([1, 'a'], [2, 'd'], [3, 'c']), ([1, 'b'], [2, 'd'], [3, 'c']), ([1, 'c'], [2, 'd'], [3, 'b'])]
</code></pre>
<p>Demo: <a href=""https://ideone.com/FfZwod"" rel=""nofollow noreferrer"">https://ideone.com/FfZwod</a></p>
","2","Answer"
"79183975","79183943","<p>You just need to change <code>.push()</code> with <code>.unshift()</code>.</p>
<p>Here's partially working (localStorage is disabled in the snippet so I commented it alongside the extension context feature):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let myLeads = []
const inputEl = document.getElementById(""input-el"")
const inputBtn = document.getElementById(""input-btn"")
const ulEl = document.getElementById(""ul-el"")
const deleteBtn = document.getElementById(""delete-btn"")
const leadsFromLocalStorage = []; //JSON.parse( localStorage.getItem(""myLeads"") )
const tabBtn = document.getElementById(""tab-btn"")

if (leadsFromLocalStorage) {
    myLeads = leadsFromLocalStorage
    render(myLeads)
}

tabBtn.addEventListener(""click"", function(){    
    //chrome.tabs.query({active: true, currentWindow: true}, function(tabs){
        // EDIT:
        myLeads.unshift(tabs[0].url)
        // localStorage.setItem(""myLeads"", JSON.stringify(myLeads) )
        render(myLeads)
    //}) 
})

function render(leads) {
    let listItems = """"
    for (let i = 0; i &lt; leads.length; i++) {
        listItems += `
            &lt;li&gt;
                &lt;a target='_blank' href='${leads[i]}'&gt;
                    ${leads[i]}
                &lt;/a&gt;
            &lt;/li&gt;
        `
    }
    ulEl.innerHTML = listItems
}

deleteBtn.addEventListener(""dblclick"", function() {
    // localStorage.clear()
    myLeads = []
    render(myLeads)
})

inputBtn.addEventListener(""click"", function() {
    // EDIT:
    myLeads.unshift(inputEl.value)
    inputEl.value = """"
    // localStorage.setItem(""myLeads"", JSON.stringify(myLeads) )
    render(myLeads)
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""text"" id=""input-el""&gt;
&lt;button id=""input-btn""&gt;SAVE INPUT&lt;/button&gt;
&lt;button id=""tab-btn""&gt;SAVE TAB&lt;/button&gt;
&lt;button id=""delete-btn""&gt;DELETE ALL&lt;/button&gt;
&lt;ul id=""ul-el""&gt;&lt;/ul&gt;</code></pre>
</div>
</div>
</p>
","1","Answer"
"79183994","79183315","<p>This may not be a general solution but it works for your sample data.</p>
<p>You will need to:</p>
<pre><code>pip install python-Levenshtein
</code></pre>
<p>Then:</p>
<pre><code>from Levenshtein import jaro
from itertools import combinations
import re

x1 = [
    &quot;lock-service&quot;,
    &quot;jenkins-service&quot;,
    &quot;xyz-reporting-service&quot;,
    &quot;ansible-service&quot;,
    &quot;harbor-service&quot;,
    &quot;version-service&quot;,
    &quot;jira-service&quot;,
    &quot;kubernetes-service&quot;,
    &quot;capo-service&quot;,
    &quot;permission-service&quot;,
    &quot;artifactory-service&quot;,
    &quot;vault-service&quot;,
    &quot;harbor-service-prod&quot;,
    &quot;rundeck-service&quot;,
    &quot;cruise-control-service&quot;,
    &quot;artifactory-service.xyz.abc.cloud&quot;,
    &quot;helm-service&quot;,
    &quot;Capo Service&quot;,
    &quot;rocket-chat-service&quot;,
    &quot;reporting-service&quot;,
    &quot;bitbucket-service&quot;,
    &quot;rocketchat-service&quot;,
]

x2 = [
    &quot;journal-service&quot;,
    &quot;lock-service&quot;,
    &quot;jenkins-service&quot;,
    &quot;xyz-reporting-service&quot;,
    &quot;ansible-service&quot;,
    &quot;harbor-service&quot;,
    &quot;version-service&quot;,
    &quot;jira-service&quot;,
    &quot;kubernetes-service&quot;,
    &quot;capo-service&quot;,
    &quot;permission-service&quot;,
    &quot;artifactory-service&quot;,
    &quot;vault-service&quot;,
    &quot;rundeck-service&quot;,
    &quot;cruise-control-service&quot;,
    &quot;helm-service&quot;,
    &quot;database-ticket-service&quot;,
    &quot;rocket-chat-service&quot;,
    &quot;ansible-dpservice&quot;,
    &quot;reporting-service&quot;,
    &quot;bitbucket-service&quot;,
    &quot;rocketchat-service&quot;,
]

def normalise(s):
    return re.sub(r&quot;-\s&quot;, &quot;&quot;, s.lower())

for x in x1, x2:
    for a, b in combinations(x, 2):
        if len(a) &gt; len(b):
            a, b = b, a
        A = normalise(a)
        B = normalise(b)
        if A in B or jaro(A, B) &gt; 0.9:
            print(a, b)
    print()
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>reporting-service xyz-reporting-service
harbor-service harbor-service-prod
capo-service Capo Service
artifactory-service artifactory-service.xyz.abc.cloud
rocketchat-service rocket-chat-service

reporting-service xyz-reporting-service
ansible-service ansible-dpservice
rocketchat-service rocket-chat-service
</code></pre>
","0","Answer"
"79184416","79183943","<p>Style the <code>&lt;ul&gt;</code> as a reverse column flexbox with JavaScript:</p>
<pre><code>document.querySelector(&quot;ul&quot;).style.cssText += 
&quot;display: flex; flex-direction: column-reverse&quot;;
</code></pre>
<p>OR with CSS:</p>
   <pre class=""lang-css prettyprint-override""><code>ul {
  display: flex;
  flex-direction: column-reverse;
}
</code></pre>
<p><code>localStorage</code> doesn't function on this site so if you want to see a functioning demo see this <a href=""https://plnkr.co/edit/e9vDMBz19V4aB0wd?open=lib%2Fscript.js"" rel=""nofollow noreferrer""><kbd>PLUNKER</kbd></a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let data = JSON.parse(localStorage.getItem('data')) || [];
const ui = document.forms.ui;
const io = ui.elements;
const list = document.getElementById('list');

const render = (array) =&gt; {
  const frag = document.createDocumentFragment();
  array.forEach((url) =&gt; {
    const item = document.createElement('li');
    const link = document.createElement('a');
    link.href = url;
    link.textContent = url;
    link.target = '_blank';
    item.append(link);
    frag.append(item);
  });
  list.replaceChildren();
  list.append(frag);
};

ui.addEventListener('click', (e) =&gt; {
  if (e.target.id === 'del') {
    list.replaceChildren();
    localStorage.clear();
    data = [];
  } else if (e.target.id === 'add') {
    data.push(io.input.value);
    render(data);
    localStorage.setItem('data', JSON.stringify(data));
  } else {
    return false;
  }
});

let test = () =&gt; {
  let testData = [1, 2, 3, 4, 5, 6, 7, 8, 9];
  localStorage.setItem('data', JSON.stringify(testData));
  data = JSON.parse(localStorage.getItem('data'));
  render(data);
};

render(data);
// test();
// Solution
list.style.cssText += ""display: flex; flex-direction: column-reverse"";</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;form id=""ui""&gt;
  &lt;input id=""input""&gt;
  &lt;button id=""add"" type=""button""&gt;Add&lt;/button&gt;
  &lt;ul id=""list""&gt;&lt;/ul&gt;
  &lt;button id=""del"" type=""button""&gt;Delete All&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
</p>
","0","Answer"
"79189467","79189182","<p>You can use compare by ignoring fields from AssertJ library.</p>
<pre><code>var actualList = service.getActualList(...);

assertThat(actualList)
    .usingRecursiveFieldByFieldElementComparatorIgnoringFields(&quot;f2&quot;)
    .containsExactlyInAnyOrder(
        new MyDto(&quot;a1&quot;, &quot;&quot;, &quot;c1&quot;),
        new MyDto(&quot;a2&quot;, &quot;&quot;, &quot;c2&quot;)
    );
</code></pre>
<p>Or if you still want to use Hamcrest, then create custom comparator as per your wish and then use</p>
<pre><code>assertTrue(myDto1.customCompareTo(myDto2));
</code></pre>
","0","Answer"
"79189491","79189182","<p>You can use <a href=""https://hamcrest.org/JavaHamcrest/javadoc/3.0/org/hamcrest/Matchers.html#containsInAnyOrder(org.hamcrest.Matcher...)"" rel=""nofollow noreferrer""><code>containsInAnyOrder(Matcher...)</code></a> and pass a vararg list of <a href=""https://hamcrest.org/JavaHamcrest/javadoc/3.0/org/hamcrest/Matcher.html"" rel=""nofollow noreferrer""><code>Matcher</code></a> instances instead of a list of <code>MyDto</code>. You may be able to find a suitable <code>Matcher</code> from the Hamcrest library, such as perhaps <code>HasPropertyWithValue</code> or something similar. Otherwise, write your own class implementing <code>Matcher</code>:</p>
<pre><code>class MyMatcher implements Matcher&lt;MyDto&gt; {
    private final MyDto expected;

    public MyMatcher(MyDto expected) { this.actual = expected; }

    @Override
    public boolean matches(MyDto actual) {
        return actual.abc = expected.abc &amp;&amp; actual.xyz = expected.xyz;
    }
}
...
assertThat(actualList, containsInAnyOrder(MyMatcher(new MyDto(...)),...));
</code></pre>
","2","Answer"
"79189666","79188161","<p>It calls <code>body</code> to figure out how many <code>View</code>s there are per row. It needs to do that to calculate the size of the List. It is much faster if you have constant number of Views per row, i.e. avoid any any <code>if</code>s. It isn't a big deal, <code>View</code> structs are just values like <code>Int</code>s, negligible performance-wise. As long as you don't do anything slow in <code>body</code>, e.g. accidentally init a heap object or a sort. This was actually recently covered at WWDC 2023
<a href=""https://developer.apple.com/videos/play/wwdc2023/10160?time=806"" rel=""nofollow noreferrer"">https://developer.apple.com/videos/play/wwdc2023/10160?time=806</a></p>
<p>To speed it up you can just do:</p>
<pre><code>List(items) { item in
    ItemRow(itemID: item.id) // since you only need the id it wont call body if another property of item is changed.
}
</code></pre>
<p>or</p>
<pre><code>List(items) { item in
    Text(item.id, format: .number)
    Text(item.text)
}
</code></pre>
<p>It's best to only pass in the data Views need to keep them small and fast. E.g. in the last example it avoids the pointless wrapper <code>ItemRow</code>.</p>
","0","Answer"
"79189989","79189695","<pre class=""lang-py prettyprint-override""><code>
def remove_nested(my_list: list) -&gt; list:
    i = 0
    vlen = len(my_list)
    while i != vlen:    # Until we reach end of list
        pos_search = 0
        for _str in my_list:
            # If the current item isn't at the same position
            # And if the string _str contains the item
            if i != pos_search and my_list[i] in _str:
                del my_list[i]  # Delete
                vlen = vlen - 1 # Update list length
                i = i - 1       # Decrement i that will be incremented after (so i remains the same)
                break
            pos_search = pos_search + 1
        i = i + 1
    return my_list

my_list = [&quot;/var/html/site1&quot;, &quot;/var/html/site1/nested_web_root1&quot;, &quot;/var/html/site1/nested_web_root2&quot;]

print(remove_nested(my_list))
</code></pre>
<p>Output:</p>
<pre class=""lang-py prettyprint-override""><code>['/var/html/site1/nested_web_root1', '/var/html/site1/nested_web_root2']
</code></pre>
<p><em>As I commented my code I'm not sure I have to explain more</em></p>
","0","Answer"
"79190584","79189695","<p>You appear to be comparing file paths and want to compare the start of the strings rather than comparing sub-strings at any location.</p>
<p>Sort the list and then, for each value in the list, do not include it in the output if it starts with any previous value:</p>
<pre><code>def substring_sieve(data):
    output = []
    for value in sorted(data):
        if not any(value.startswith(prev) for prev in output):
            output.append(value)
    return output

data = [&quot;/var/html/site1&quot;, &quot;/var/html/site1/nested_web_root1&quot;, &quot;/var/html/site1/nested_web_root2&quot;]

print(substring_sieve(data))
</code></pre>
<p>Which outputs:</p>
<pre class=""lang-none prettyprint-override""><code>['/var/html/site1']
</code></pre>
<hr />
<p>You can make it more efficient by just checking that the latest value does not start with the most recently output value:</p>
<pre><code>def substring_sieve(data):
    if not data:
        return data
    prev, *remaining = sorted(data)
    output = [prev]
    for value in remaining:
        if not value.startswith(prev):
            output.append(value)
            prev = value
    return output
</code></pre>
<p>Which outputs the same.</p>
<p><a href=""https://stackoverflow.com/questions/79189695/python-function-to-remove-strings-from-a-list-if-a-substring-already-exists/79190584?noredirect=1#comment139641921_79190584"">@nocomment gave an alternate version</a> using list comprehension:</p>
<blockquote>
<pre><code>def substring_sieve(data):
    prev = ()
    return [
        prev := value
        for value in sorted(data)
        if not value.startswith(prev)
    ]
</code></pre>
</blockquote>
<hr />
<p>If you do want to match sub-strings rather than the start of strings then use:</p>
<pre><code>def substring_sieve(data):
    output = []
    for value in sorted(data, key=len):
        if not any(prev in value for prev in output):
            output.append(value)
    return output
</code></pre>
","1","Answer"
"79190606","79189695","<p>Create url trees and add branches whenever a url has a shared root. We note any nodes on a tree that is an actual listed url with an <code>end</code> flag.</p>
<p>Then we do a depth-first-search traversal of each tree but we terminate searching whenever hitting an end node.</p>
<pre><code>from collections import deque

class UrlNode:
    def __init__(self, name, end = False, parent = None):
        self.name = name
        self.children = {}
        self.end = end
        self.parent = parent
    
    def full_name(self):
        if not self.parent:
            return f&quot;/{self.name}&quot;
        else:
            return f&quot;{self.parent.full_name()}/{self.name}&quot;


def create_trees(urls):
    roots = {}

    for url in urls:
        root, *descs = url.split(&quot;/&quot;)[1:]

        roots[root] = roots.get(root, UrlNode(root))

        parent = roots[root]

        for name in descs:
            parent.children[name] = parent.children.get(name, UrlNode(name))
            parent.children[name].parent = parent
            parent = parent.children[name]
        
        parent.end = True

    return roots

def dfs(root):
    nodes = deque([root])

    urls = []

    while nodes:
        node = nodes.pop()

        if node.end:
            urls.append(node)
        else:
            for child in node.children.values():
                nodes.append(child)

    return urls


urls = [
    &quot;/var/html&quot;,
    &quot;/var/html/site1/nested_web_root1&quot;,
    &quot;/var/html/site1/nested_web_root2&quot;,
    &quot;/var2&quot;,
    &quot;/var3/html/site1&quot;,
    &quot;/var3/html/site2&quot;,
]

roots = create_trees(urls)

[url.full_name() for root in roots.values() for url in dfs(root)]
</code></pre>
<p>Output:</p>
<pre><code>['/var/html', '/var2', '/var3/html/site2', '/var3/html/site1']
</code></pre>
","0","Answer"
"79192147","79189695","<p>Thanks to everyone who made suggestions. Especially <a href=""https://stackoverflow.com/users/1509264/mt0"">MTO</a> and <a href=""https://stackoverflow.com/users/16759116/no-comment"">no-comment</a>.</p>
<p>In the end the following code worked:</p>
<pre><code>def substring_sieve(data):
    prev, *remaining = sorted(data)
    output = [prev]
    for value in remaining:
        value = value.rstrip('/') + '/'
        if not value.startswith(prev):
            output.append(value)
            prev = value
    return output
</code></pre>
<p>This handles edge cases where there is a duplicate entry in the input list, and where one of the paths is a substring of another. For example: <code>['/home/greatlon/test_site2', '/home/greatlon/test_site']</code></p>
<p>Thanks again all!</p>
","-1","Answer"
"79193068","79193031","<p>Try making the combinations sublist and results sublists a set, and check if results sublist set is a subset of the other.</p>
","0","Answer"
"79193090","79193031","<p>If you are working on <strong>big</strong> <strong>sorted</strong> lists concider using binary search algorithm.</p>
<p>See ([1]: <a href=""https://www.geeksforgeeks.org/python-program-for-binary-search/"" rel=""nofollow noreferrer"">https://www.geeksforgeeks.org/python-program-for-binary-search/</a>)</p>
","0","Answer"
"79193098","79193031","<p>I would probably convert the list of lists into a list of sets since we just want to know if the smaller list is a subset of one of the larger ones (and if so, what is its index).</p>
<p>Try:</p>
<pre><code>numbers = [
    [1, 3, 5, 7, 12, 14, 19, 21, 26, 31, 42, 44, 48, 53, 54, 58, 59, 61, 62, 78],
    [4, 6, 8, 11, 16, 19, 22, 27, 28, 33, 38, 45, 46, 52, 53, 54, 61, 70, 71, 77],
    [1, 4, 5, 7, 11, 16, 31, 33, 37, 44, 46, 49, 53, 59, 62, 64, 68, 70, 73, 78],
    [5, 7, 8, 15, 19, 20, 27, 35, 41, 42, 45, 51, 53, 55, 60, 66, 68, 72, 77, 80],
    [3, 14, 18, 21, 25, 26, 29, 36, 43, 44, 45, 53, 55, 56, 61, 62, 64, 66, 71, 72],
    [2, 7, 10, 12, 16, 24, 34, 40, 42, 43, 46, 51, 52, 53, 56, 57, 60, 65, 72, 79],
    [6, 7, 11, 14, 18, 25, 30, 34, 47, 52, 53, 57, 62, 65, 67, 68, 71, 72, 77, 78],
    [1, 2, 3, 7, 9, 16, 20, 26, 27, 30, 32, 35, 38, 48, 54, 63, 64, 65, 69, 72],
    [3, 8, 10, 15, 19, 20, 34, 40, 44, 48, 51, 52, 56, 58, 62, 66, 69, 70, 76, 77],
    [3, 7, 13, 17, 24, 28, 31, 36, 37, 39, 48, 50, 52, 58, 59, 61, 63, 64, 74, 79]
]
numbers_lookup = [set(r) for r in numbers]

find = [
    [7, 16, 20],
    [7, 16, 42],
    [7, 16, 52],
    [7, 50, 52]
]

for test in find:
    print(f&quot;Searching for match for {test}&quot;)
    for index, row in enumerate(numbers_lookup):
        if row.issuperset(test):
            print(f&quot;\tmatch found at row {index}&quot;)
</code></pre>
<p>That gives me:</p>
<pre><code>Searching for match for [7, 16, 20]
        match found at row 7
Searching for match for [7, 16, 42]
        match found at row 5
Searching for match for [7, 16, 52]
        match found at row 5
Searching for match for [7, 50, 52]
        match found at row 9
</code></pre>
","0","Answer"
"79193099","79193031","<p>I renamed the variables as per my convenience</p>
<pre><code>list_dump = [[1, 3, 5, 7, 12, 14, 19, 21, 26, 31, 42, 44, 48, 53, 54, 58, 59, 61, 62, 78],
        [4, 6, 8, 11, 16, 19, 22, 27, 28, 33, 38, 45, 46, 52, 53, 54, 61, 70, 71, 77],
        [1, 4, 5, 7, 11, 16, 31, 33, 37, 44, 46, 49, 53, 59, 62, 64, 68, 70, 73, 78],
        [5, 7, 8, 15, 19, 20, 27, 35, 41, 42, 45, 51, 53, 55, 60, 66, 68, 72, 77, 80],
        [3, 14, 18, 21, 25, 26, 29, 36, 43, 44, 45, 53, 55, 56, 61, 62, 64, 66, 71, 72],
        [2, 7, 10, 12, 16, 24, 34, 40, 42, 43, 46, 51, 52, 53, 56, 57, 60, 65, 72, 79],
        [6, 7, 11, 14, 18, 25, 30, 34, 47, 52, 53, 57, 62, 65, 67, 68, 71, 72, 77, 78],
        [1, 2, 3, 7, 9, 16, 20, 26, 27, 30, 32, 35, 38, 48, 54, 63, 64, 65, 69, 72],
        [3, 8, 10, 15, 19, 20, 34, 40, 44, 48, 51, 52, 56, 58, 62, 66, 69, 70, 76, 77],
        [3, 7, 13, 17, 24, 28, 31, 36, 37, 39, 48, 50, 52, 58, 59, 61, 63, 64, 74, 79]]


source_list_dump = [[7, 16, 20],
        [7, 16, 42],
        [7, 16, 52],
        [7, 50, 52]]

def count_dict(n_list):
    c_dict = {}
    for e in n_list:
        if e in c_dict.keys():
            c_dict[e] += 1
        else: c_dict[e] = 1
    return c_dict

def matches(dict_1, dict_2):
    dict_2_keys = dict_2.keys()
    for key in dict_1.keys():
        if key not in dict_2_keys or dict_1[key]&gt;dict_2[key]:
            return False
    return True

def find_matching(n_list_count_dict, list_dump_count_dict):
    list_len = len(list_dump_count_dict)
    for i in range(list_len):
        if matches(n_list_count_dict, list_dump_count_dict[i]):
            return i
    return -1

list_dump_count_dict = [count_dict(n_list) for n_list in list_dump]
resultIndex = [find_matching(count_dict(n_list), list_dump_count_dict) for n_list in source_list_dump]

print(resultIndex)
</code></pre>
","0","Answer"
"79193436","79193031","<h1>Vanilla Python optimized sequence indexing</h1>
<pre class=""lang-py prettyprint-override""><code>
def find_exact_sequence(numbers, sequences):
    &quot;&quot;&quot;
    Find indices of rows where the exact sequence appears in order.

    Args:
        numbers (List[List[int]]): 2D list of rows.
        sequences (List[List[int]]): List of sequences to find.

    Returns:
        List[int]: List of indices where sequences are found.
    &quot;&quot;&quot;
    result_indices = []

    # For each sequence to find
    for sequence in sequences:
        # For each row in numbers
        for idx, row in enumerate(numbers):
            # Check if the sequence exists as a subsequence in the row
            if any(row[i:i+len(sequence)] == sequence for i in range(len(row) - len(sequence) + 1)):
                result_indices.append(idx)
                break  # Stop after the first match for this sequence

    return result_indices
</code></pre>
<h1>Options</h1>
<ol>
<li><strong>sets</strong> Try using sets, since sets have the set.issubset method, python will be using hashing to find subsets, this is perfect time complexity.</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>def set_based_find_rows(numbers, subsets):
    &quot;&quot;&quot;
    Find indices of rows that contain all elements of subsets using sets.

    Args:
        numbers (List[List[int]]): 2D list of rows.
        subsets (List[List[int]]): List of subsets to find.

    Returns:
        List[int]: List of indices where subsets are found.
    &quot;&quot;&quot;
    # Convert each row in numbers to a set for fast lookup
    numbers_sets = [set(row) for row in numbers]

    # Result list to store indices
    result_indices = []

    # For each subset
    for subset in subsets:
        subset_set = set(subset)  # Convert subset to a set
        for idx, row_set in enumerate(numbers_sets):
            if subset_set.issubset(row_set):  # Check if subset is in the row
                result_indices.append(idx)
                break  # Stop after finding the first matching row

    return result_indices

</code></pre>
<ol start=""2"">
<li><p><strong>C Extensions</strong>. C extensions can speed up code, try using cython for ease of use.</p>
</li>
<li><p><strong>arrays</strong>. since all rows are same size and datatype, use numpy array or some other library to create faster arrays.</p>
</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

def numpy_find_rows(numbers, subsets):
    &quot;&quot;&quot;
    Find indices of rows that contain all elements of subsets using NumPy.

    Args:
        numbers (List[List[int]]): 2D list of rows.
        subsets (List[List[int]]): List of subsets to find.

    Returns:
        List[int]: List of indices where subsets are found.
    &quot;&quot;&quot;
    # Convert the 2D list to a NumPy array
    numbers_array = np.array(numbers, dtype=object)

    # Result list to store indices
    result_indices = []

    # For each subset
    for subset in subsets:
        subset = set(subset)  # Convert subset to a set for quick checks
        for idx, row in enumerate(numbers_array):
            if subset.issubset(row):  # Efficient subset check
                result_indices.append(idx)
                break  # Stop after finding the first matching row

    return result_indices


</code></pre>
<h1>Choosing the Right Algorithm</h1>
<ul>
<li><p><strong>Set-Based Membership Check</strong>: Best choice for large datasets due to O(1) set membership checks.</p>
</li>
<li><p><strong>Brute Force</strong>: Simplest, but only practical for small datasets.</p>
</li>
<li><p><strong>Binary Search</strong>: Useful if rows are already sorted or can be sorted once.</p>
</li>
</ul>
<h1>Advanced Large Dataset techniques</h1>
<ol>
<li>multiprocessing - for each row, have a process that searches that row for that subset.</li>
</ol>
<pre><code>import multiprocessing

def search_sequence_in_rows(args):
    &quot;&quot;&quot;
    Search for sequences in a chunk of rows.

    Args:
        args (tuple): A tuple containing the subset of rows, sequences to find, and the starting index of the rows.

    Returns:
        List[tuple]: A list of tuples (row_index, sequence_index) for matches.
    &quot;&quot;&quot;
    rows, sequences, start_index = args
    results = []

    for row_index, row in enumerate(rows):
        for sequence_index, sequence in enumerate(sequences):
            if any(row[i:i+len(sequence)] == sequence for i in range(len(row) - len(sequence) + 1)):
                results.append((start_index + row_index, sequence_index))
                break  # Stop after finding the sequence in this row

    return results

def find_exact_sequence_parallel(numbers, sequences):
    &quot;&quot;&quot;
    Find the exact sequences in the list of rows using multiprocessing.

    Args:
        numbers (List[List[int]]): 2D list of rows.
        sequences (List[List[int]]): List of sequences to find.

    Returns:
        List[tuple]: A list of tuples (row_index, sequence_index) for matches.
    &quot;&quot;&quot;
    num_processes = multiprocessing.cpu_count()
    chunk_size = len(numbers) // num_processes
    chunks = [
        (numbers[i:i + chunk_size], sequences, i)
        for i in range(0, len(numbers), chunk_size)
    ]

    with multiprocessing.Pool(processes=num_processes) as pool:
        results = pool.map(search_sequence_in_rows, chunks)

    # Flatten results
    flat_results = [item for sublist in results for item in sublist]
    return flat_results

</code></pre>
<ol start=""2"">
<li>SIMD - np.array_equal leverages NumPy's fast C-backed array comparisons.
Using a vectorized sliding window instead of manual loops, NumPy handles vectorized slicing internally. Numpy has a similiar implementation.</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>import numpy as np

def find_exact_sequence_simd(numbers, sequences):
    &quot;&quot;&quot;
    Find the exact sequences in rows using SIMD-accelerated NumPy.

    Args:
        numbers (List[List[int]]): 2D list of numbers.
        sequences (List[List[int]]): List of sequences to find.

    Returns:
        List[tuple]: A list of tuples (row_index, sequence_index) for matches.
    &quot;&quot;&quot;
    results = []
    numbers_array = np.array(numbers)  # Convert to NumPy array for SIMD operations

    for seq_idx, sequence in enumerate(sequences):
        seq_len = len(sequence)
        sequence_array = np.array(sequence)

        for row_idx, row in enumerate(numbers_array):
            # Use a sliding window to find the sequence
            for start in range(len(row) - seq_len + 1):
                if np.array_equal(row[start:start + seq_len], sequence_array):
                    results.append((row_idx, seq_idx))
                    break  # Move to the next row after finding the sequence
    return results
</code></pre>
<ol start=""3"">
<li>Numba NJIT</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>from numba import njit

@njit
def find_exact_sequence_numba(numbers, sequences):
    results = []
    for seq_idx, sequence in enumerate(sequences):
        seq_len = len(sequence)
        for row_idx, row in enumerate(numbers):
            for start in range(len(row) - seq_len + 1):
                if all(row[start + i] == sequence[i] for i in range(seq_len)):
                    results.append((row_idx, seq_idx))
                    break
    return results
</code></pre>
","0","Answer"
"79193478","79193031","<p>Assuming you want to know not only the row index but also the items indices in the row, you may use <code>bisect</code>.</p>
<pre><code>from bisect import bisect

numbers = [
    [1, 3, 5, 7, 12, 14, 19, 21, 26, 31, 42, 44, 48, 53, 54, 58, 59, 61, 62, 78],
    [4, 6, 8, 11, 16, 19, 22, 27, 28, 33, 38, 45, 46, 52, 53, 54, 61, 70, 71, 77],
    [1, 4, 5, 7, 11, 16, 31, 33, 37, 44, 46, 49, 53, 59, 62, 64, 68, 70, 73, 78],
    [5, 7, 8, 15, 19, 20, 27, 35, 41, 42, 45, 51, 53, 55, 60, 66, 68, 72, 77, 80],
    [3, 14, 18, 21, 25, 26, 29, 36, 43, 44, 45, 53, 55, 56, 61, 62, 64, 66, 71, 72],
    [2, 7, 10, 12, 16, 24, 34, 40, 42, 43, 46, 51, 52, 53, 56, 57, 60, 65, 72, 79],
    [6, 7, 11, 14, 18, 25, 30, 34, 47, 52, 53, 57, 62, 65, 67, 68, 71, 72, 77, 78],
    [1, 2, 3, 7, 9, 16, 20, 26, 27, 30, 32, 35, 38, 48, 54, 63, 64, 65, 69, 72],
    [3, 8, 10, 15, 19, 20, 34, 40, 44, 48, 51, 52, 56, 58, 62, 66, 69, 70, 76, 77],
    [3, 7, 13, 17, 24, 28, 31, 36, 37, 39, 48, 50, 52, 58, 59, 61, 63, 64, 74, 79]
]

find = [
    [7, 16, 20],
    [7, 16, 42],
    [7, 16, 52],
    [7, 50, 52]
]

for rowindex, row in enumerate(numbers):
    print(f&quot;Searching for matches in row {rowindex}&quot;)
    seen = {}
    for testindex, test in enumerate(find):
        found = []
        lo = 0
        for itemindex, item in enumerate(test):
            if item in seen:
                found.append(seen[item])
                continue
            ip = bisect(row, item, lo)
            if ip &gt; 0 and row[ip-1] == item:
                seen[item] = ip-1
                lo = ip
                found.append(seen[item])
            else:
                break
        if len(found) == len(test):
            print(f&quot;\tmatch found for {test} at positions {found}&quot;)
</code></pre>
<p>The output is</p>
<pre><code>Searching for matches in row 0
Searching for matches in row 1
Searching for matches in row 2
Searching for matches in row 3
Searching for matches in row 4
Searching for matches in row 5
    match found for [7, 16, 42] at positions [1, 4, 8]
    match found for [7, 16, 52] at positions [1, 4, 12]
Searching for matches in row 6
Searching for matches in row 7
    match found for [7, 16, 20] at positions [3, 5, 6]
Searching for matches in row 8
Searching for matches in row 9
    match found for [7, 50, 52] at positions [1, 11, 12]
</code></pre>
<p>This will be ~2x slower than JonSG's solution.</p>
<p>Note that I check each &quot;find&quot; sublist against all &quot;numbers&quot; sublist, not the opposite, in order to introduce a little optimization and avoid looking for the same item multiple times in the same list.</p>
","0","Answer"
"79193585","79188161","<p>TL;DR wrap all the rows in a <code>VStack</code> or similar container.</p>
<p>At a high level, laziness requires a <code>List</code> to know from its <code>Content</code> type that all iterations will result in the same number of cells, and how many that is. Evidently the algorithm to do this only crawls known concrete classes and does not check the <code>View.Body</code> associated type on custom views.</p>
<p><code>List</code> will be lazy if and only if its body conforms to the above. If the <code>List</code> body contains one or more <code>ForEach</code> loops, either directly or nested in <code>Section</code>, the <code>List</code> itself will be greedily iterated but the <code>ForEach</code>(es) will be lazy iff their bodies meet the same requirements.</p>
<p>An extensive but probably not comprehensive list of acceptable views:</p>
<p>Container views, regardless of contents</p>
<ul>
<li><code>HStack</code> / <code>VStack</code> / <code>ZStack</code></li>
<li><code>LazyHStack</code> / <code>LazyVStack</code></li>
<li><code>LazyHGrid</code> / <code>LazyVGrid</code></li>
<li><code>Grid</code></li>
<li><code>Table</code></li>
<li><code>ScrollView</code></li>
<li>Probably nested <code>List</code>s, I didn't check.</li>
</ul>
<p>Leaf/Control views</p>
<ul>
<li><code>Text</code></li>
<li><code>Image</code></li>
<li><a href=""https://developer.apple.com/documentation/swiftui/controls-and-indicators"" rel=""nofollow noreferrer"">Controls and indicators</a>, e.g. <code>Button</code></li>
<li><a href=""https://developer.apple.com/documentation/swiftui/drawing-and-graphics"" rel=""nofollow noreferrer"">Drawing and Graphics</a>, e.g. <code>Color</code></li>
<li><a href=""https://developer.apple.com/documentation/swiftui/shapes"" rel=""nofollow noreferrer"">Shapes</a>, e.g. <code>Circle</code></li>
</ul>
<p>Certain transparent/helper views if and only if their content meets the requirements, e.g.</p>
<ul>
<li><code>TupleView</code> (implicit wrapper for multiple views)</li>
<li><code>Group</code> (only groups for purpose of modifiers; is NOT a container.)</li>
<li><code>ScrollReader</code></li>
<li><code>GeometryReader</code></li>
</ul>
","1","Answer"
"79193806","79183315","<p>My solution adds cleanup steps before and after fuzzy matching. Shoutout to @Scott Boston, I learned about variable naming within list comprehension from his answer.</p>
<pre><code>!pip install RapidFuzz


import re
from rapidfuzz import fuzz, utils

def dedup(lst):
    lst = list(set([re.sub(r'-service.*$', r'-service', x) for x in lst])) #clean up values with extra characters after &quot;-service&quot;
    vals = {val1:{val2:ratio for val2 in lst
                  if val1!=val2 #avoid matching to self
                  and (ratio:=fuzz.WRatio(val1, val2, processor=utils.default_process))&gt;=90} #fuzzy match
            for val1 in lst 
            if len(subs:=val1.split('-'))==2 #name-service format requested by OP
            and subs[-1]=='service'} #check if ends in &quot;-service&quot;
    not_captured = [x for x in lst if x not in list(vals.keys())+sum([list(x.keys()) for x in vals.values()], [])] #vals from original list not in match dict keys or values
    new_x = list(vals.keys())+[''.join(x.replace('-service', '').split('-'))+'-service' for x in not_captured] #deduplicated list forcing name-service format for longer values with extra &quot;-&quot;
    return new_x #returns only deduplicated list


dedup(x1)

['jenkins-service',
 'artifactory-service',
 'rocketchat-service',
 'rundeck-service',
 'harbor-service',
 'bitbucket-service',
 'lock-service',
 'reporting-service',
 'permission-service',
 'capo-service',
 'jira-service',
 'version-service',
 'ansible-service',
 'vault-service',
 'helm-service',
 'kubernetes-service',
 'cruisecontrol-service']

dedup(x2)

['jenkins-service',
 'artifactory-service',
 'rocketchat-service',
 'rundeck-service',
 'harbor-service',
 'bitbucket-service',
 'lock-service',
 'reporting-service',
 'permission-service',
 'capo-service',
 'jira-service',
 'version-service',
 'journal-service',
 'ansible-service',
 'vault-service',
 'helm-service',
 'kubernetes-service',
 'cruisecontrol-service',
 'databaseticket-service']
</code></pre>
","1","Answer"
"79196502","79196485","<p>You can use below code to get exact answer in which you can split the user input and filter out the result.</p>
<pre><code>numbers = input(&quot;Enter a list of numbers separated by spaces.&quot;)
list_content = numbers.split(&quot; &quot;)
result = [x for x in list_content if x != &quot;&quot;]
print(result)
</code></pre>
","-1","Answer"
"79196509","79196485","<p>There is a function in Python called <em>&quot;string.split(separator, maxsplit)</em></p>
<p>Here if you provide &quot;space&quot; as separator, you'll achieve your goal.</p>
<pre><code>user_input = input(&quot;Enter the numbers: &quot;)

user_input_list = user_input.split(' ')

print(user_input_list)
</code></pre>
<p>OUTPUT:</p>
<pre><code>Enter the numbers: 1 12 13 14 255
['1', '12', '13', '14', '255']
</code></pre>
","0","Answer"
"79199756","79199654","<p>If Lists is a list of lists then, to make a copy, you could do this:</p>
<pre><code>Lists = [List_1, List_2, List_3, List_4, List_5]
New_lists = [e.copy() for e in Lists]
</code></pre>
<p>Note that a list's <em>copy()</em> function is shallow</p>
","1","Answer"
"79199874","79199654","<ul>
<li>Instead of creating individual variables like New_list_1, New_list_2, etc., you can use a dictionary to store the lists. This allows you to map each list dynamically to a key, where the key can be the list number (e.g., 1, 2, ..., 700), and you can access or modify them easily.</li>
</ul>
<pre><code># Example of original lists (List_1, List_2, ..., List_5)

    List_1 = [1, 2, 3]
    List_2 = [4, 5, 6]
    List_3 = [7, 8, 9]
    List_4 = [10, 11, 12]
    List_5 = [13, 14, 15]
    
    # Put your original lists in a dictionary
    
    lists = {
        1: List_1,
        2: List_2,
        3: List_3,
        4: List_4,
        5: List_5
    }
    
     # If you have more lists, you can extend this dynamically or use a loop
     # For example, simulating 700 lists (as an example)
    
        for i in range(1, 701):    
            lists[f&quot;New_list_{i}&quot;] = lists[i].copy()
    
         print(lists['New_list_1'])
</code></pre>
","0","Answer"
"79210395","79210377","<p>Lists (and lots of other things) <em>use</em> arrays. This is like asking &quot;why have bricks when we have houses?&quot;. If they aren't the right fit for your scenario: fine, don't use them! In the same way that we can use bricks to build a lot of things, not just houses: arrays (as the key metaphor for a contiguous size-fixed-at-creation chunk of managed-heap memory) are used <em>just about everywhere</em> in the runtime and libraries.</p>
<p>If your needs align more with higher-level abstractions like lists, queues, etc: great! Do that!</p>
<p>It should also be noted that a list by necessity involves an array (at least one, possibly many if it is grown gradually) <em>and</em> a wrapper list object, adding additional allocations and overheads that you might need to avoid in low-level library code, although to be fair <em>most</em> of that can be avoided by creating the list with the correct size initially, and bypassing the accessors via <code>MemoryMarshal</code>... but at that point, you are pretty much using it as a gift-wrapped array <em>anyway</em>, so...</p>
","8","Answer"
"79211438","79211387","<p>You could convert them to to sets and use the bitwise operator/logical(<code>&amp;</code>) to effectively combine to 2 lists and meet your criteria.</p>
<pre class=""lang-py prettyprint-override""><code>def find_common_elements(list1 :list, list2:list):
    set1 = set(list1)
    set2 = set(list2)
    
    return list(set1 &amp; set2)
</code></pre>
","0","Answer"
"79211482","79211387","<p>Use a set to store elements from the second list, which allows for O(1) average-time complexity for membership checks.
Use a second set to keep track of elements already added to the result to avoid duplicates.
Iterate over the first list and check if the element is in the second list's set and has not already been added to the result.</p>
<pre><code>def find_common_elements(list1, list2):
    set_list2 = set(list2)  
    seen = set()           
    result = []
    for elem in list1:
        if elem in set_list2 and elem not in seen:
            result.append(elem)
            seen.add(elem)
    return result
list1 = [1, 2, 3, 4, 5, 6]
list2 = [3, 6, 9, 12]
result = find_common_elements(list1, list2)
print(result)  
</code></pre>
","0","Answer"
"79211617","79211494","<p>If you put this code inside a test class... and set two breakpoints at the arrange and assert calls, you will be able to use the diagnotics window in VS2022 to inspect the details</p>
<p><a href=""https://learn.microsoft.com/en-us/visualstudio/debugger/memory-windows?view=vs-2022"" rel=""nofollow noreferrer"">Microsoft documentation for VS2022</a></p>
<pre><code>struct ExampleStruct
{
    public int ID;
    public List&lt;ExampleStruct&gt; children;
}

public class StackOverflowStructQ
{
    [Fact]
    public void Method_Condition_Expectation()
    {
        // Arrange
        ExampleStruct es = new() { ID = 1, children = [] };

        // Act

        // Assert
        Assert.NotNull(es.children);
    }
}
</code></pre>
<p>The when the first breakpoint is hit - &quot;take a snapshot&quot; from the Diagnostics window.</p>
<p>You should be able to drill down and see &quot;Referenced Objects&quot;.  This means the reference is stored in the struct, but the object it references is stored on the heap.</p>
<p>So try and keep your structs lightweight.  If you need to reference objects which will ultimately reside on the heap, probably best to use a class?</p>
","0","Answer"
"79211826","79211807","<p>Use a  list comprehensions with <code>ast.literal_eval()</code></p>
<pre><code>import ast

sample_string = '[[15,&quot;name&quot;,12],[2002,&quot;another name&quot;,345]]'
parsed_list = ast.literal_eval(sample_string)

int_list1 = [item[0] for item in parsed_list]
str_list = [item[1] for item in parsed_list]
int_list2 = [item[2] for item in parsed_list]

print(&quot;Integer List 1:&quot;, int_list1)
print(&quot;String List:&quot;, str_list)
print(&quot;Integer List 2:&quot;, int_list2)
</code></pre>
<p>Output</p>
<pre class=""lang-none prettyprint-override""><code>Integer List 1: [15, 2002]
String List: ['name', 'another name']
Integer List 2: [12, 345]
</code></pre>
","1","Answer"
"79211831","79211807","<p><code>ast.literal_eval</code> can turn that string into native Python lists, <code>zip</code> can do the regrouping:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; s = '[[15,&quot;name&quot;,12],[2002,&quot;another name&quot;,345]]'
&gt;&gt;&gt; int_list1, str_list, int_list2 = zip(*literal_eval(s))
&gt;&gt;&gt; int_list1
(15, 2002)
&gt;&gt;&gt; str_list
('name', 'another name')
&gt;&gt;&gt; int_list2
(12, 345)
</code></pre>
","1","Answer"
"79212232","79210377","<p>It's not silly question, actually for lot of developers List is default thing when it comes to collections.</p>
<p>Arrays and List serve different purposes, List is more flexible and its built on top of Array but adds helpful features like resizing and extra methods while arrays are simple way to store fixed-size data and are very fast and memory-efficient.</p>
<p>The reason why we teach arrays is that it helps you to understand how data is stored and managed in memory, It's foundation to understand how more advanced data structures like List works.</p>
<p>The reason why both exist is that sometimes you need the speed and simplicity of array and other times you need flexibility of List.</p>
","1","Answer"
"79215249","79213728","<p>I would do it this way:</p>
<pre class=""lang-none prettyprint-override""><code>set csv {a b c e f g}
if {[cfg::get enable_all_columns]} {
    set csv [linsert $csv 3 d]
}
</code></pre>
","0","Answer"
"79218457","79218431","<p>I think that answer would be to create the key, value pair and add it to a new dictionary, this allows to transform the value of the corresponding keys in a list and then just append each element to an empty dictionary, let me know if this answers your question.</p>
<p>Here is an example:</p>
<pre><code>def merge_dictionaries(dict1, dict2):
    merged_dict = {}

# Add all keys from the first dictionary
    for key, value in dict1.items():
        if key in dict2:
# Combine values into a list
            merged_dict[key] = [value] if not isinstance(value, list) else value
            merged_dict[key].append(dict2[key])
        else:
        # Add value as-is
            merged_dict[key] = value

# Add remaining keys from the second dictionary
    for key, value in dict2.items():
        if key not in dict1:
            merged_dict[key] = value

# Flatten lists if necessary
    for key, value in merged_dict.items():
        if isinstance(value, list):
            merged_dict[key] = [v for sublist in value for v in (sublist if isinstance(sublist, list) else [sublist])]

    return merged_dict
</code></pre>
","0","Answer"
"79218532","79218431","<p>You might use set arithmetic for detecting which keys are in both dicts and which keys are exactly in one following way and then process each accordingly</p>
<pre><code>import collections
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 3, 'c': 4, 'd': 5}
double = set(dict1).intersection(dict2)
single = set(dict1).symmetric_difference(dict2)
merged = {k: collections.ChainMap(dict1, dict2)[k] for k in single} | {k:[dict1[k],dict2[k]] for k in double}
print(merged)  # {'d': 5, 'a': 1, 'c': [3, 4], 'b': [2, 3]}
</code></pre>
<p>Note that <code>|</code> here is one as described <a href=""https://peps.python.org/pep-0584/"" rel=""nofollow noreferrer"">PEP 584</a> and as such requires python3.9 or newer to work. See linked material if you need to port it to older versions.</p>
","-1","Answer"
"79218590","79218431","<p>you need to check if type of key is list or a number and based on that merge or append the values</p>
<p>here is the code</p>
<pre><code>dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 3, 'c': 4, 'd': 5}
 
from collections import defaultdict

def merge_dicts(dict1, dict2):

    merged_dict = defaultdict(list)

    for d in (dict1, dict2):
        for key, value in d.items():
            if isinstance(value, list):
                merged_dict[key].extend(value)
            else:
                merged_dict[key].append(value)
    return dict(merged_dict)
 
result = merge_dicts(dict1, dict2)
print(result) # {'a': [1], 'c': [3, 4], 'b': [2, 3], 'd': [5]}

</code></pre>
","1","Answer"
"79219816","79219435","<p>Here are some hints:</p>
<pre><code>(defun limits (x) 
  (if (or (&lt; x 3) (&gt; x 12))
      (nconc x)              ; why is NCONC here???
      ()))

(defun out-of-limits (l) 
  (mapcar #'limits l)        ; This value is never used
  (remove nil))              ; REMOVE needs more arguments
</code></pre>
<p>You are calling <code>REMOVE</code> with one argument: the thing to be removed. <code>REMOVE</code> requires two arguments. Where is the missing argument? From what do you want to remove it?</p>
<p><code>NCONC</code> is an operation to concatenate lists. But you are calling it on a single number? What's the idea behind that? Is a number a list? Definitely not.</p>
<p><code>(mapcar #'limits l)</code> returns a list. But your function <code>out-of-limits</code> doesn't do anything with the result list. Why? The result list is never used. It is not returned from the function <code>out-of-limits</code> and it is not used by other functions. Why do you compute a list, which is never used for anything?</p>
","2","Answer"
"79220709","79219435","<p>Start by rewriting your <code>limits</code> function to just return true or false if its argument is in range. I'd give it a better name too, following the Common Lisp tradition of functions that test something having names ending in <code>p</code> for <code>predicate</code>:</p>
<pre><code>;;; Note the change in logic to return t if a number is IN a given range, not
;;; outside of it.
(defun in-range-p (x)
  (&lt;= 3 x 12))
</code></pre>
<p>Then your <code>out-of-limits</code> function can use that predicate and standard list operations to return a list of just the elements that pass the test (<code>mapcar</code> doesn't do any filtering; there are more suitable functions that do).</p>
<p>One approach, using <code>loop</code>:</p>
<pre><code>(defun out-of-limits (l)
  (loop for elem in l
        unless (in-range-p elem)
          collect elem))
</code></pre>
<p>or using the <a href=""https://www.lispworks.com/documentation/HyperSpec/Body/f_rm_rm.htm"" rel=""nofollow noreferrer""><code>remove-if</code></a> higher order function:</p>
<pre><code>(defun out-of-limits (l)
  (remove-if #'in-range-p l))
</code></pre>
<p>With either of these definitions, <code>(out-of-limits '(1 7 8 2 5 1 215))</code> returns the list <code>(1 2 1 215)</code></p>
","2","Answer"
"79225307","79225243","<p>I think this gets you the essentials of what you want. The column order and column names are easily adjusted.</p>
<pre class=""lang-r prettyprint-override""><code>nested_list &lt;- list(
  ID1 = list(
    FEAT = list(
      feat1 = list(start = &quot;1&quot;, end = &quot;15&quot;, label = &quot;CDR1&quot;),
      feat2 = list(start = &quot;20&quot;, end = &quot;25&quot;, label = &quot;CDR2&quot;)
    ),
    SEQ = &quot;ACTGATCGTAGCTAGCTAGATGCTGATGTGTC&quot;
  ),
  ID2 = list(
    SEQ = &quot;ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA&quot;
  )
)
library(purrr)

Unpack2 &lt;- function(L) {
  map_dfr(L, .f = \(Row) unlist(Row))
}

Unpack1 &lt;- function(NAME) {
  LIST &lt;- nested_list[[NAME]]
  if(!is.null(LIST$FEAT)) {
    tmp &lt;- LIST$FEAT
    Nms &lt;- names(tmp)
    DF &lt;- Unpack2(tmp)
    DF$feat &lt;- Nms
  } else {
    DF &lt;- data.frame(start = NA, end = NA, label = NA)
  }
  DF$ID &lt;- NAME
  DF$Seq &lt;- LIST$SEQ
  return(DF)
}

ListNames &lt;- names(nested_list)
map_dfr(ListNames, Unpack1)
#&gt; # A tibble: 3 × 6
#&gt;   start end   label feat  ID    Seq                                        
#&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                                      
#&gt; 1 1     15    CDR1  feat1 ID1   ACTGATCGTAGCTAGCTAGATGCTGATGTGTC           
#&gt; 2 20    25    CDR2  feat2 ID1   ACTGATCGTAGCTAGCTAGATGCTGATGTGTC           
#&gt; 3 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  ID2   ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA
</code></pre>
<p><sup>Created on 2024-11-25 with <a href=""https://reprex.tidyverse.org"" rel=""nofollow noreferrer"">reprex v2.1.1</a></sup></p>
","2","Answer"
"79225433","79225243","<p>Use <code>as.data.frame</code> in <code>lapply</code>, assign <code>'id'</code> variable, <code>merge</code> and <code>reshape</code>.</p>
<pre><code>&gt; lapply(nested_list, as.data.frame) |&gt; 
+   {\(.) Map(f=`[&lt;-`, ., 'id', value=names(.))}() |&gt;
+   Reduce(f=\(...) merge(..., all=TRUE)) |&gt; 
+   reshape(timevar=NULL, varying=list(c(3, 6), c(4, 7), c(5, 8)), 
+           v.names = c(&quot;feat_start&quot;, &quot;feat_end&quot;, &quot;feat_label&quot;),
+           direction='long') 
                                              SEQ  id feat_start feat_end feat_label
ID2.1 ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA ID2       &lt;NA&gt;     &lt;NA&gt;       &lt;NA&gt;
ID1.1            ACTGATCGTAGCTAGCTAGATGCTGATGTGTC ID1          1       15       CDR1
ID2.2 ACTGATCGGCGGTGGCTAGCTGTGGGGCGCGCGACCGGGAAAA ID2       &lt;NA&gt;     &lt;NA&gt;       &lt;NA&gt;
ID1.2            ACTGATCGTAGCTAGCTAGATGCTGATGTGTC ID1         20       25       CDR2
</code></pre>
","3","Answer"
"79228215","79228095","<p>I did find one solution on my own that seems to work. Taking advantage of the fact that normal Python sees NaN as <code>float</code> but a Pandas array as a <code>list</code>, I changed the <code>secret_sauce</code> method to the following:</p>
<pre><code>def secret_sauce(my_row):
    if (type(my_row[&quot;col1&quot;]) is float and
        my_row[&quot;col2&quot;] != &quot;BAD_VAL&quot;):
        return False
    return True
</code></pre>
<p>I'm unsure whether this would be a good way to do things in Pandas-world, but it does seem to work for me.</p>
","0","Answer"
"79228270","79228095","<p>Why not</p>
<pre class=""lang-py prettyprint-override""><code>df = df.assign(
    new_col = df['col1'].notna() | (df['col2'] == 'BAD_VAL')
)
</code></pre>
<p>? There's no need to mess around with <code>apply</code>.</p>
","1","Answer"
"79228277","79228095","<p>For me, this is an <a href=""https://meta.stackexchange.com/q/66377/343832"">XY problem</a> because you don't need to use <code>.apply()</code> in the first place; instead you should use <code>isna</code> and <code>!=</code> on the whole columns instead of single elements, and in that case, the problem disappears.</p>
<pre><code>my_df.assign(
    my_boolean_col=lambda df: ~(df['col1'].isna() &amp; df['col2'].ne('BAD_VAL'))
)
</code></pre>
<pre><code>  mypk              col1      col2  my_boolean_col
0  ABC           [HELLO]  GOOD_VAL            True
1  DEF               NaN  GOOD_VAL           False
2  GHI  [GOODBYE, ADIOS]  GOOD_VAL            True
</code></pre>
<p>Check out <a href=""https://stackoverflow.com/a/55557758/4518341"">cs95's answer on &quot;How can I iterate over rows in a Pandas DataFrame?&quot;</a>, which says, first prefer vectorized methods (as I'm using here), and then <code>.apply()</code> is lower down the list.</p>
","1","Answer"
"79229492","79213728","<p>Expansion  allows you to make something that disappears when empty.</p>
<pre><code>set csv [list]
lappend csv [list a b c {*}[if {[cfg::get enable_all_columns]} {
    list d
}] e f g]
</code></pre>
","0","Answer"
"79229743","79211494","<blockquote>
<p>Would the following line of code create an object on the heap?</p>
</blockquote>
<p>No. Since <code>Examplestruct</code> is a value type memory for it will be allocated on stack. Since you are not creating an instance of <code>List&lt;ExampleStruct&gt;</code> (which is a reference type) there is no need to allocate memory on the heap.</p>
<p><a href=""https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null"" rel=""nofollow noreferrer""><code>null</code></a> denotes:</p>
<blockquote>
<p>a literal that represents a null reference, one that does not refer to any object. null is the default value of reference-type variables</p>
</blockquote>
<p>So there is nothing on the heap to point to, so no need to allocate anything there.</p>
<p>There are multiple ways to check this. For example by using <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.gc.gettotalallocatedbytes?view=net-9.0"" rel=""nofollow noreferrer""><code>GC.GetTotalAllocatedBytes(Boolean)</code></a>:</p>
<pre class=""lang-cs prettyprint-override""><code>// &quot;warm up&quot;
Measure(() =&gt; new ExampleStruct() {ID = 5, children = null}, 10); 

Measure(() =&gt; new ExampleStruct() {ID = 5, children = null}, 10000);
Measure(() =&gt; new ExampleStruct() {ID = 5, children = new List&lt;ExampleStruct&gt;()}, 10000);

static void Measure(Action action, int iterations)
{
    var cur = GC.GetTotalAllocatedBytes(true);
    for (int i = 0; i &lt; iterations; i++)
    {
        action();
    }

    Console.WriteLine($&quot;Total Allocated Bytes: {GC.GetTotalAllocatedBytes(true) - cur:N0}&quot;);
}
</code></pre>
<p>Which prints &quot;on my machine&quot;:</p>
<pre><code>Total Allocated Bytes: 2,008
Total Allocated Bytes: 0
Total Allocated Bytes: 320,288
</code></pre>
","2","Answer"
"79230808","79230752","<p>I think this works</p>
<pre class=""lang-py prettyprint-override""><code># ... your code
if complement in seen:
  pairs.add((num,complement))
# ... your code
</code></pre>
","0","Answer"
"79230817","79230752","<p>I assume that by &quot;duplicate&quot; you mean, for example (3, 7) and (7, 3).</p>
<p>If that is the case then:</p>
<pre><code>from itertools import combinations

# added another 3 so that there's at least one significant duplicate
data = [1, 2, 3, 3, 4, 5, 6, 7, 8]
target = 10
results = set()
print(data)
for a, b in combinations(data, r=2):
    if a + b == target:
        if a &gt; b:
            results.add((b, a))
        else:
            results.add((a, b))
print(results)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[1, 2, 3, 3, 4, 5, 6, 7, 8]
{(3, 7), (4, 6), (2, 8)}
</code></pre>
","0","Answer"
"79231491","79231450","<pre><code>import pandas as pd

month_list = [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]
months = { 'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5, 'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11, }
data = [['Sep', '2024', 112], ['Dec', '2022', 79], ['Apr', '2023', 114], ['Aug', '2024', 194], ['May', '2022', 140], ['Jan', '2023', 222]]

sorted_data = sorted(data, key=lambda x: (int(x[1]), months[x[0]]))


print(sorted_data)
</code></pre>
<p>The code sorts the data list first by year (ascending) and then by the month's order using the months dictionary.</p>
","1","Answer"
"79233582","79231450","<p>You can conveniently create your month lookup dictionary with locale specific data from the <em>calendar</em> module.</p>
<p>You don't seem to take account of the 3rd value in the sub-lists. As those values are all different (in your sample) it doesn't really matter. However, it probably makes sense to account for that value for situations where your list has multiple entries for a certain year / month pair.</p>
<p>Therefore, I suggest:</p>
<pre><code>import calendar

months = {m: i for i, m in enumerate(calendar.month_abbr[1:])}

data = [
    [&quot;Sep&quot;, &quot;2024&quot;, 112],
    [&quot;Dec&quot;, &quot;2022&quot;, 79],
    [&quot;Apr&quot;, &quot;2023&quot;, 114],
    [&quot;Aug&quot;, &quot;2024&quot;, 194],
    [&quot;May&quot;, &quot;2022&quot;, 140],
    [&quot;Jan&quot;, &quot;2023&quot;, 222],
]

def key(lst):
    month, year, n = lst
    return int(year), months.get(month, -1), n

print(*sorted(data, key=key), sep=&quot;\n&quot;)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['May', '2022', 140]
['Dec', '2022', 79]
['Jan', '2023', 222]
['Apr', '2023', 114]
['Aug', '2024', 194]
['Sep', '2024', 112]
</code></pre>
","0","Answer"
"79244367","79244282","<p>Just use <code>join</code> to join all elements into a string</p>
<pre><code>result = [('4824CF8B', '2986', '11EC', '80F0', '84A93851B964')]

result_string = &quot;-&quot;.join(result[0])

'4824CF8B-2986-11EC-80F0-84A93851B964'
</code></pre>
<p>Now, in the example you posted the list contains only one tuple, if you want a more general solution where result have more tuples, then the result cannot be a string, but needs to be a list of strings. Just iterate them in a comprehension list.</p>
<pre><code>result = [('4824CF8B', '2986', '11EC', '80F0', '84A93851B964'),
          ('4824CF8B', '2986', '11EC', '80F0', '84A93851B964'),
          ('4824CF8B', '2986', '11EC', '80F0', '84A93851B964')]

result_list_of_strings = [&quot;-&quot;.join(i) for i in result]

['4824CF8B-2986-11EC-80F0-84A93851B964'
'4824CF8B-2986-11EC-80F0-84A93851B964'
'4824CF8B-2986-11EC-80F0-84A93851B964']
</code></pre>
","1","Answer"
"79244681","79244282","<p>Use <code>[\w\-]</code> to denote word-constituting character or dash, that is</p>
<pre><code>import re
text = &quot;foo BOT ID: 4824CF8B-2986-11EC-80F0-84A93851B964 bar&quot;
for found in re.findall(r&quot;BOT ID: ([\w\-]+)&quot;, text):
    print(found)
</code></pre>
<p>gives output</p>
<pre><code>4824CF8B-2986-11EC-80F0-84A93851B964
</code></pre>
","0","Answer"
"79245475","79245363","<p>You can read two lines at a time, and store them as the name and score.</p>
<pre class=""lang-py prettyprint-override""><code>def parse_scores(filename):
    player_names = []
    high_scores = []

    file = open(filename, &quot;r&quot;)
    try:
        while (
            name := file.readline().strip()
        ) and (
            score := file.readline().strip()
        ):
            player_names.append(name)
            high_scores.append(int(score))
    finally:
        file.close()

    return player_names, high_scores


def main():
    player_names, high_scores = parse_scores(&quot;game.txt&quot;)
    print(&quot;Player Names:&quot;, player_names)
    print(&quot;High Scores:&quot;, high_scores)


if __name__ == &quot;__main__&quot;:
    main()
</code></pre>
<p>This assumes that <code>game.txt</code> is in the following format:</p>
<pre class=""lang-none prettyprint-override""><code>John
7
Mary
5
Larry
9
Mark
4
</code></pre>
<p>The program output should be:</p>
<pre class=""lang-py prettyprint-override""><code>Player Names: ['John', 'Mary', 'Larry', 'Mark']
High Scores: [7, 5, 9, 4]
</code></pre>
<h2>Alternative</h2>
<p>The more pythonic or idiomatic alternative would be to use <code>splitlines()</code> and then take alternating slices.</p>
<pre class=""lang-py prettyprint-override""><code>def parse_scores(filename):
    with open(filename, &quot;r&quot;) as file:
        lines = file.read().splitlines()
        player_names = lines[::2]
        high_scores = list(map(int, lines[1::2]))

    return player_names, high_scores


def main():
    player_names, high_scores = parse_scores(&quot;game.txt&quot;)
    print(f&quot;Player Names: {player_names}&quot;)
    print(f&quot;High Scores: {high_scores}&quot;)


if __name__ == &quot;__main__&quot;:
    main()
</code></pre>
","2","Answer"
"79247204","79245363","<p>The question states that the input file contents are, for example, &quot;John\n 7\n Mary\n 5\n Larry\n 9\n Mark\n 4\n&quot;</p>
<p>In other words, it has alternating lines of name / score.</p>
<p>That being the case and given the (slightly bizarre) restrictions, I suggest:</p>
<pre><code>FILENAME = &quot;foo.txt&quot;

names = []
scores = []

def get_name_and_score():
    data = open(FILENAME)
    while name := data.readline().strip():
        score = int(data.readline())
        yield name, score
    data.close()

for name, score in get_name_and_score():
    names.append(name)
    scores.append(score)

print(names)
print(scores)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['John', 'Mary', 'Larry', 'Mark']
[7, 5, 9, 4]
</code></pre>
","0","Answer"
"79247818","79245363","<p>Iterating over pairs like this is well-supported by a common <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""nofollow noreferrer""><code>zip</code></a> trick to get all complete batches of size <code>n</code>:</p>
<pre><code>def read_file():
    with open(FILENAME, 'r') as infile:  # Use with statements, get guaranteed deterministic close
        for name, score in zip(*[map(str.strip, infile)]*2):
            player_names.append(name)
            high_scores.append(score)  # Change to .append(int(score)) if conversion desired
</code></pre>
<p>This works by making a single-pass iterator (files are already single-pass, and even if they weren't, wrapping in <code>map(str.strip, ...)</code> to eliminate leading/trailing whitespace as we go would do so), putting it in a <code>list</code>, repeating it <code>n</code> times (in this case, two times), then unpacking it as arguments to <code>zip</code>. <code>zip</code> pulls from each argument once for each <code>tuple</code> it returns, and since you passed the <em>same</em> argument <code>n</code> times, that means it reads <code>n</code> lines from the same file.</p>
<p>More Pythonically, you'd receive the file name as an argument, and return the two <code>list</code>s as return values (constant global state isn't the worst, but it's less reusable; mutable global state is a nightmare for reentrancy, repeated calls, etc.). And if you wanted to get fancy, <code>zip</code> can take the pairs that <code>zip</code> itself produced, and convert them to two sequences (as <code>tuple</code>s, not <code>list</code>s, but conversion back to <code>list</code> is trivial if you care):</p>
<pre><code>def read_file(filename):  # Receive filename as argument
    with open(filename, 'r') as infile:  # Use with statements, get guaranteed deterministic close
        return zip(*zip(*[map(str.strip, infile)]*2))

        # Or replace the return line to convert the scores to int and return true lists
        names, scores = zip(*zip(*[map(str.strip, infile)]*2))
        return list(names), [int(score) for score in scores]
        # Or for maximum efficiency, but a more obscure:
        # return [*names], [*map(int, scores)]
</code></pre>
<p><code>zip(*...)</code> here is passing each of the pairs to <code>zip</code> as an argument, causing it to zip all of the first elements of the pairs together, then all the second elements, producing <code>names</code> and <code>scores</code> directly. They begin as <code>tuple</code>s, but converting a <code>tuple</code> to a <code>list</code> is highly optimized, and if we want to convert the <code>scores</code> to <code>int</code> anyway, a listcomp will convert them and produce a true <code>list</code> at the same time.</p>
","0","Answer"
"79249106","79249078","<p>You can get an O(m*n) solution as long as the &quot;key&quot; you are using is O(m*n). This can be accomplished in two ways.</p>
<p>If the inner lists can't contain duplicates, then a set of frozen sets is an elegant solution. Note, <code>frozenset(mylist)</code> is O(n):</p>
<pre><code>def unique(lists):
    seen = set()
    result = []
    for sub in lists:
        key = frozenset(sub)
        if key not in seen:
            result.append(sub)
            seen.add(key)
    return result
</code></pre>
<p>The above returns the first seen &quot;unique&quot; list that is actually in the input. If any order of a unique list is valid, even an order not seen in the original input (I presume this is the case because that is what your solution does) then perhaps more tersely:</p>
<pre><code>def unique(lists):
    return list(map(list, set(map(frozenset, lists))))
</code></pre>
<p>If the inner lists can contain duplicates, then the above won't work, but you can use a <code>collections.Counter</code> which can act like a multiset, then use a frozent-set of the items in the counter:</p>
<pre><code>from collections import Counter

def unique(lists):
    seen = set()
    result = []
    for sub in lists:
        key = frozenset(Counter(sub).items())
        if key not in seen:
            result.append(sub)
            seen.add(key)
    return result
</code></pre>
<p>Note, if <code>n</code> is smallish, I bet the <code>sorted</code> solution is faster.</p>
","3","Answer"
"79249304","79249078","<p>Here is a graph-theory approach, using <a href=""https://python.igraph.org/en/stable/index.html"" rel=""nofollow noreferrer""><code>igraph</code></a> to turn list of tuples into an undirected graph</p>
<pre><code>import igraph as ig
g = ig.Graph.TupleList(lists).simplify()
vnm = g.vs()[&quot;name&quot;]
[[vnm[p], vnm[q]] for p, q in g.get_edgelist()]
</code></pre>
<p>which gives</p>
<pre><code>[[1, 2], [3, 4]]
</code></pre>
","1","Answer"
"79252016","79251914","<p>you need to keep track of number of consecutive numbers, and add rules accordingly.</p>
<p>you can achive this by using follow way</p>
<pre><code>res = [4, 5, 6, 7, 8, 9, 10, 22, 23, 26, 62, 63, 113, 137, 138, 139]

result = []
tmp = []
if len(res) &gt; 0:
    for i, v in enumerate(res):
        if not tmp:
            tmp.append(v)
        else:
            if v - tmp[-1] == 1:
                tmp.append(v)
            else:
                if len(tmp) &gt; 2:
                    result.append(f'{tmp[0]}-{tmp[-1]}')
                else:
                    result.extend([str(i) for i in tmp])
                tmp = [v]
    if tmp:
        if len(tmp) &gt; 2:
            result.append(f'{tmp[0]}-{tmp[-1]}')
        else:
            result.extend([str(i) for i in tmp])
            
    sol = ', '.join(result)
    print(sol) # 4-10, 22, 23, 26, 62, 63, 113, 137-139

</code></pre>
","1","Answer"
"79252477","79251914","<p>Track first and last of a range of consecutive numbers, collect the string of the range when a number is non-consecutive.  I used a sub-function to avoid repeated code:</p>
<pre class=""lang-py prettyprint-override""><code>res = [4, 5, 6, 7, 8, 9, 10, 22, 23, 26, 62, 63, 113, 137, 138, 139]

def span(numbers):
    if len(numbers) == 0:  # empty case
        return ''
    result = []
    def _process(first, last):
        if first != last:  # range, but handle consecutive case
            result.append(f&quot;{first}{'-' if last - first &gt; 1 else ', '}{last}&quot;)
        else:
            result.append(str(first))  # first==last, single number
    first = last = numbers[0]  # initialize range tracking to first number
    for item in numbers[1:]:  # iterate remaining numbers
        if item &lt;= last:  # input not increasing
            raise ValueError('not consecutive numbers')
        if item == last + 1:  # next number is consecutive
            last = item
        else:
            _process(first, last)  # next number not consecutive
            first = last = item    # reset for next range
    _process(first, last)  # no more numbers, finish last range
    return ', '.join(result)

print(res)
print(span(res))

# Test cases
print(span([]))
print(span([1]))
print(span([1,2]))
print(span([1,2,3]))
print(span([1,2,4]))
print(span([1,3]))
print(span([1,3,4]))
print(span([1,3,4,5]))
print(span([1,2,3,5]))
print(span([1,2,4,5,6]))
print(span([1,2,3,5,6]))
print(span([1,2,3,5,6,7]))
</code></pre>
<p>Output:</p>
<pre class=""lang-none prettyprint-override""><code>[4, 5, 6, 7, 8, 9, 10, 22, 23, 26, 62, 63, 113, 137, 138, 139]
4-10, 22, 23, 26, 62, 63, 113, 137-139

1
1, 2
1-3
1, 2, 4
1, 3
1, 3, 4
1, 3-5
1-3, 5
1, 2, 4-6
1-3, 5, 6
1-3, 5-7
</code></pre>
","1","Answer"
"79254682","79254641","<p>Use this corrected version, I used JSON.stringify():</p>
<pre><code>class Square {
      constructor() {
        this.value = null;
        this.next = null;
      }
    }
    
    let arrayOfValues = [[1,2], [2, 3], [4, 5]];
    let resultArray = [];
    
    arrayOfValues.forEach(v =&gt; {
      let newSquare = new Square();
      newSquare.value = [0, 0];
      
      let nextNode = new Square();
      nextNode.value = v;
      newSquare.next = nextNode;
      
      resultArray.push(JSON.parse(JSON.stringify(newSquare)));
    });
    
    console.log(resultArray);
</code></pre>
","-1","Answer"
"79254951","79254641","<p>The problem is in this line:</p>
<pre><code>let copy = sqaure
</code></pre>
<p>Objects (and inherently arrays) are passed reference in Javascript, so after this line copy and square are both pointing to the same object.</p>
<p>to create a copy you need to initiate a new instance and copy the values. you can create a copy method in the class or simply create a new instance.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"" data-babel-preset-react=""false"" data-babel-preset-ts=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class Square {
  constructor(value = null, next = null) {
    this.value = value
    this.next = next
  }

  clone() {
    return new Square(this.value, this.next)
  }
}

let square = new Square([0, 0])

let arrayOfValues = [[1,2], [2, 3], [4, 5]]
let resultArray = []

arrayOfValues.forEach(v =&gt; {
  let current = square.clone()
  let nextNode = new Square(v)
  square.value = v

  current.next = nextNode
  resultArray.push(current)
})
console.log(resultArray)</code></pre>
</div>
</div>
</p>
","-1","Answer"
"79265884","79264212","<p>As someone in the comments mentioned, the whole problem with the code is that i'm setting <code>L</code> to <em>something</em> once it was deleted, meaning its memory isn't in control anymore and can be changed at any time(also is this why they say C++ is memory unsafe?) so when i'm setting it to <code>nullptr</code> it's like throwing it into the river and there's no telling it'll still be <code>nullptr</code> once i check it later anymore!</p>
<p>I actually thought i solved it before reading the comments, by doing this:</p>
<pre><code>#include &lt;iostream&gt;
struct node {
    int item;
    node *next = nullptr;
};
node *L;
class list {...}
</code></pre>
<p>But then they mentioned it's actually <em>luck based</em> once i change <code>L</code> to <code>nullptr</code> or <em>whatever</em>, since that memory isn't in control of the program anymore it's just luck when i get the result i want. Since the whole point of <code>if (L == nullptr)</code> was just to check if the object is deleted, and there's no way to delete <code>L</code> and wanting this <code>if</code> to work, the i guess just using the <code>deleted</code> boolean is gonna help, although they said it's not really my own problem when a user calls a function of an object which its memory's been freed.</p>
<p>So i wrote this as the final solution to it:</p>
<pre><code>class list {
    private:
        struct node {
            int item;
            node *next = nullptr;
        };
        node *L;
        bool deleted;
        unsigned int size;
    public:
        list() {
            deleted = false;
            size = 0;
            L = new node;
            L-&gt;next = L;
        }
        ~list() {
            if (!deleted) {
                popAll();
                delete L;
                deleted = true;
            }
        }
        ...
        void printArray() {
            if (deleted) return;
            node *p = L-&gt;next;
            std::cout &lt;&lt; '[';
            while (p != L) {
                std::cout &lt;&lt; p-&gt;item;
                if (p-&gt;next != L) std::cout &lt;&lt; &quot;, &quot;;
                p = p-&gt;next;
            }
            std::cout &lt;&lt; ']';
        }
</code></pre>
<p>just putted <code>if (deleted) return;</code> at the beginning of any other function.</p>
","-1","Answer"
"79266130","79264212","<blockquote>
<p>...setting it to <code>nullptr</code> so when the user tries to use the object's functions again, the <code>if (L == nullptr) return;</code> will stop them.</p>
</blockquote>
<p>The word &quot;user&quot; is referring here to some code with bugs. It is a bug to access a deleted object (the <code>list</code> instance). We imagine a scenario like this for the &quot;user&quot; code:</p>
<pre><code>list *mylist = new list;
// ... some more code
// ... and when done:
delete mylist;
// ...but then they still make an access:
mylist-&gt;printArray();
</code></pre>
<p>That last statement is a bug. It leads to undefined behaviour. The user code is bad, it must be fixed. The memory that <code>mylist</code> points to has been freed and might have unrelated content. There is nothing in that memory you can leave behind as a protection, since you told the system that it is free, and that means the system can do with (and <em>write</em> to) it whatever else it can use it for.</p>
<blockquote>
<p>the <code>L = nullptr</code> actually works fine</p>
</blockquote>
<p>That statement in the destructor is unnecessary, and doesn't help. No other code can reliably read that <code>nullptr</code> value after the destructor has completed and the memory has been freed.</p>
<blockquote>
<p>but when i use another function like <code>printArray()</code> or any other one like <code>get()</code> (which haven't included in the code) it actually shows that <code>L</code> is equal to 4 very random memory addresses</p>
</blockquote>
<p>That is not unusual. After the destructor has run, any code that tries to access a method or field of the deleted object represents a bug. That memory that previously held <code>L</code>, is no longer under your code's control, and could be anything. It should <em>not</em> be accessed. Any code that does access it, has a bug.</p>
<blockquote>
<p>I also have the <code>deleted</code> boolean</p>
</blockquote>
<p>That doesn't help. Your destructor sets <code>deleted</code> to <code>true</code>, but that is useless, because the very next moment, when the memory of the list has been freed, that <code>deleted</code> resides in freed memory, so the value at that location could be anything, as it could already be in use for something else. It should not be accessed by your (or user's) code, nor is it reliable.</p>
<blockquote>
<p>if i use the <code>deleted</code> as a detector for when the object is deleted, it'll work fine</p>
</blockquote>
<p>That is just a matter of chance. Accessing the <code>deleted</code> field of a deleted list instance leads to <em>undefined behaviour</em>. Undefined behaviour may mean it does something else, crashes the program, or... does what you expect. It can be determined by factors that are not under the program's control.</p>
<blockquote>
<p>but i wanna know why the <code>L</code> is a <code>nullptr</code> after i set it to it in the destructor, but it doesn't change it in the other functions and it's like it's only been deleted and not even set to <code>nullptr</code>.</p>
</blockquote>
<p>The memory occupied by <code>L</code> has been freed. It can be used for other purposes. It should not be accessed. Any code that <em>does</em> attempt to access it, represents a bug.</p>
<h3>What to do</h3>
<p>Don't worry about bugs in code that is not under your control. If someone writes &quot;user&quot; code that accesses a list instance after they have deleted it, they have introduced a bug in their program. That is their responsibility. You should not try to fix that situation in your class, nor can you. It is the responsibility of the coder to never write code that accesses memory that has been freed.</p>
<p>Your destructor should not set any instance fields to some other values in the hope that it will serve a purpose after the destructor has finished, as that is useless.</p>
<p>Instead just do the following in your destructor, and let all coders using your code take their responsibility to write code that does not access freed memory:</p>
<pre><code>        ~list() {
            // It is guaranteed that `L` is not `nullptr`, as there is no code
            //    anymore that sets it to that value.
            popAll(); // Free all data nodes
            delete L; // Delete the &quot;sentinel&quot; node allocated in the constructor
        }
</code></pre>
<p>Remove all those initial <code>if</code> statements that try to detect that it is running on a deleted object. That is useless. This should never happen. Your code should never hit a situation where <code>L</code> is <code>nullptr</code>. It must assume that the instance on which it runs, has <em>not</em> been deleted.</p>
","0","Answer"
"79278540","79278506","<p>As commented, you can use while loops. We are assuming that this is not a <a href=""https://en.wikipedia.org/wiki/Linked_list#Circular_linked_list"" rel=""nofollow noreferrer"">circular</a> list:</p>
<pre><code>def is_perfect(lst):
    vis, curr_index = set(), 0
    while 0 &lt;= curr_index &lt; len(lst):
        if curr_index in vis:
            return False

        vis.add(curr_index)

        if not lst[curr_index]:
            break

        curr_index = lst[curr_index]

    return len(vis) == len(lst) and lst[curr_index] == 0


print(is_perfect([2, 2, 3, 2, 0]))
print(is_perfect([3, 0, 1, 4, 2]))
print(is_perfect([1, 0]))

</code></pre>
<h4>Results</h4>
<pre><code>False
True
True
</code></pre>
<h4>Details</h4>
<ul>
<li><code>vis</code>: We use an empty <code>set()</code> to store visited indices. This is important missing part from your approach.</li>
<li><code>curr_index</code>: Starts at <code>0</code>, representing the current index position.</li>
<li>The while loop iterates <code>while</code> the <code>curr_index</code> is within the valid range of <code>lst</code> (i.e., <code>0 &lt;= curr_index &lt; len(lst)</code>).</li>
<li>If the <code>curr_index</code> has been visited already, the sequence has a cycle, which should return <code>False</code>.</li>
<li>Otherwise, we add <code>curr_index</code> to the <code>vis</code> set and update the <code>curr_index</code> to the value at the current index (<code>lst[curr_index]</code>).</li>
<li>The while loop exits if it encounters a <code>0</code> or goes out of bounds.</li>
<li>If our list traversal covers all the list indices (<code>len(vis) == len(lst)</code>) and stops at a <code>0</code> (<code>lst[curr_index] == 0</code>), the sequence is &quot;perfect&quot; and returns <code>True</code>, otherwise it returns False.</li>
</ul>
","4","Answer"
"79278700","79278506","<p>Use a set to note which indices have alreay been visited. Visiting an index more than once would lead to an infinite loop.</p>
<p>The problem statement indicates that the list will not contain negative numbers - so no need to test for that. However, it does not say that all values are guaranteed to be in range - i.e., that all values will be less than the length of the list. So a sanity check should be employed.</p>
<p>Thereafter, it's straightforward:</p>
<pre><code>def is_perfect(lst: list[int]) -&gt; bool:
    visited = {0}
    current_index = 0
    # test current_index against the length of the list in case of rogue values
    # if you know that all indices are viable then it's just *while True*:
    # no need to test against -ve values as that's not possible according to the problem statement
    while current_index &lt; len(lst):
        if (current_index := lst[current_index]) == 0:
            return len(visited) == len(lst)
        # if we've already visited this index then the list is imperfect
        if current_index in visited:
            break
        visited.add(current_index)
    return False

print(is_perfect([2,2,3,2,0]))
print(is_perfect([3,0,1,4,2]))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>False
True
</code></pre>
<p><strong>Edit:</strong></p>
<p>Having re-read the problem statement, it is apparent that we should only return True if <strong>all</strong> elements have been visited. Code amended accordingly.</p>
","3","Answer"
"79285044","79284971","<p>A workaround to save the datarange before removing duplicates, and later restore it.</p>
<pre><code>Sub rest()

Dim lo As ListObject
Set lo = Range(&quot;A1&quot;).ListObject
backup = lo.DataBodyRange  'save original table
lo.DataBodyRange.RemoveDuplicates 1, xlNo
filtered = lo.DataBodyRange 'this is the filtered result
lo.DataBodyRange.Resize(UBound(backup)) = backup  'restore original data

End Sub
</code></pre>
","1","Answer"
"79285150","79284971","<p>Add the values to a collection using the cell value as the key - you can't have duplicate keys in a collection.</p>
<pre><code>Public Sub Test()

    On Error GoTo Err_Handler

    Dim MyCol As Collection
    Set MyCol = New Collection
    
    Dim Cell As Range
    For Each Cell In ThisWorkbook.Worksheets(&quot;Tab&quot;).ListObjects(&quot;TableName&quot;).ListColumns(&quot;ColumnName&quot;).DataBodyRange
        MyCol.Add Cell.Value2, Cell
    Next Cell
    
    Debug.Assert False
    
    On Error GoTo 0
    
Exit Sub
Err_Handler:
    Select Case Err.Number
        Case 457 'This key is already associated with an element of this collection
            Resume Next
        Case Else
            MsgBox Err.Number &amp; vbCr &amp; Err.Description, vbOKOnly + vbCritical, &quot;Module1.Test()&quot;
    End Select

End Sub  
</code></pre>
<p><a href=""https://i.sstatic.net/pBoveyyf.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/pBoveyyf.png"" alt=""enter image description here"" /></a></p>
<p><strong>Or</strong></p>
<p>You can use <code>Application.Worksheetfunction.Unique</code>:</p>
<pre><code>Public Sub Test()

    Dim MyVar As Variant
    MyVar = Application.WorksheetFunction.Unique(ThisWorkbook.Worksheets(&quot;Tab&quot;).ListObjects(&quot;TableName&quot;).ListColumns(&quot;ColumnName&quot;).DataBodyRange)
    
End Sub  
</code></pre>
<p><a href=""https://i.sstatic.net/FQ7aaDVo.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/FQ7aaDVo.png"" alt=""enter image description here"" /></a></p>
","2","Answer"
"79285151","79284971","<p>I'd suggest to use a dictionary if you want to store only unique values</p>
<pre><code>Option Explicit

Sub returnNoDuplicates()
    Dim dict As Object
    Set dict = CreateObject(&quot;Scripting.Dictionary&quot;)

    Dim lo As ListObject
    Dim ws As Worksheet
    

    Set ws = ThisWorkbook.Worksheets(&quot;Sheet1&quot;)
    Set lo = ws.ListObjects(&quot;tblData&quot;)
    
    Dim vDat As Variant
    vDat = lo.ListColumns(&quot;B1&quot;).DataBodyRange

    Dim i As Long
    
    For i = LBound(vDat) To UBound(vDat)
        ' Add the value to the dictionary
        ' If the value already exists,
        ' it will not be added again (ensuring uniqueness)
        dict(vDat(i, 1)) = vDat(i, 1)
    Next i
    
    vDat = dict.Keys
End Sub
</code></pre>
<p>The array <code>vdat</code>, like the dictionary <code>dict</code>,  will contain the result. It's up to you which data structure you want to use.</p>
","1","Answer"
"79285239","79284971","<h2>Retrieve Distinct Rows</h2>
<p><strong>Criteria (Single) Column</strong></p>
<pre class=""lang-vb prettyprint-override""><code>Sub RetrieveDistinctColumn()

    ' Reference the workbook
    Dim wb As Workbook: Set wb = ThisWorkbook ' workbook containing this code
    
    ' Reference the source objects and return the criteria column values
    ' in a 2D one-based (single-column) array.
    Dim sws As Worksheet: Set sws = wb.Sheets(&quot;Tab&quot;)
    Dim slo As ListObject: Set slo = sws.ListObjects(&quot;TableName&quot;)
    Dim slc As ListColumn: Set slc = slo.ListColumns(&quot;ColumnName&quot;)
    ' Assumes more than one cell.
    Dim sData() As Variant: sData = slc.DataBodyRange.Value
    
    ' Retrieve the source number of rows.
    Dim sRowsCount As Long: sRowsCount = UBound(sData, 1)
    
    ' Create and reference a dictionary object.
    Dim dict As Object: Set dict = CreateObject(&quot;Scripting.Dictionary&quot;)
    dict.CompareMode = vbTextCompare ' A=a
    
    ' Declare addtional variables.
    Dim Value As Variant, rStr As String, sRow As Long
    
    ' Loop through the rows of the source array and return each valid (first)
    ' dictinct string representation of the criteria column in the keys,
    ' and the corresponding row index in the items (values) of the dictionary.
    For sRow = 1 To sRowsCount
        Value = sData(sRow, 1)
        If Not IsError(Value) Then ' no error
            rStr = CStr(Value)
            If Len(rStr) &gt; 0 Then ' no blank
                If Not dict.Exists(rStr) Then dict(rStr) = sRow
            End If
        End If
    Next sRow
    
    ' Define the (resulting) destination array.
    Dim dRowsCount As Long: dRowsCount = dict.Count
    If dRowsCount = 0 Then Exit Sub ' only errors and blanks
    Dim dData() As Variant: ReDim dData(1 To dRowsCount, 1 To 1)
    
    ' Declare addtional variables.
    Dim dRow As Long
    
    ' Loop through the keys of the dictionary and use the corresponding
    ' items, the source row indices, to write the required (dictinct) rows
    ' from the source to the destination array.
    For Each Value In dict.Items
        sRow = Value ' current source row
        dRow = dRow + 1 ' current destination row
        dData(dRow, 1) = sData(sRow, 1)
    Next Value
    
    ' Do something with the destination array ('dData')...

End Sub
</code></pre>
<p><strong>All Columns</strong></p>
<pre class=""lang-vb prettyprint-override""><code>Sub RetrieveDistinctRows()

    ' Reference the workbook
    Dim wb As Workbook: Set wb = ThisWorkbook ' workbook containing this code
    
    ' Reference the source objects and return the source table values
    ' in a 2D one-based array.
    Dim sws As Worksheet: Set sws = wb.Sheets(&quot;Tab&quot;)
    Dim slo As ListObject: Set slo = sws.ListObjects(&quot;TableName&quot;)
    Dim slc As ListColumn: Set slc = slo.ListColumns(&quot;ColumnName&quot;)
    ' Assumes more than one cell.
    Dim sData() As Variant: sData = slo.DataBodyRange.Value
    
    ' Retrieve the source criteria column and the number of rows and columns.
    Dim CriteriaColumn As Long: CriteriaColumn = slc.Index
    Dim sRowsCount As Long: sRowsCount = UBound(sData, 1)
    Dim ColumnsCount As Long: ColumnsCount = UBound(sData, 2)
    
    ' Create and reference a dictionary object.
    Dim dict As Object: Set dict = CreateObject(&quot;Scripting.Dictionary&quot;)
    dict.CompareMode = vbTextCompare ' A=a
    
    ' Declare addtional variables.
    Dim Value As Variant, rStr As String, sRow As Long
    
    ' Loop through the rows of the source array and return each valid (first)
    ' distinct string representation of the criteria column in the keys,
    ' and the corresponding row index in the items (values) of the dictionary.
    For sRow = 1 To sRowsCount
        Value = sData(sRow, CriteriaColumn)
        If Not IsError(Value) Then ' no error
            rStr = CStr(Value)
            If Len(rStr) &gt; 0 Then ' no blank
                If Not dict.Exists(rStr) Then dict(rStr) = sRow
            End If
        End If
    Next sRow
    
    ' Define the (resulting) destination array.
    Dim dRowsCount As Long: dRowsCount = dict.Count
    If dRowsCount = 0 Then Exit Sub ' only errors and blanks
    Dim dData() As Variant: ReDim dData(1 To dRowsCount, 1 To ColumnsCount)
    
    ' Declare addtional variables.
    Dim dRow As Long, Col As Long
    
    ' Loop through the keys of the dictionary and use the corresponding
    ' items, the source row indices, to write the required (dictinct) rows
    ' from the source to the destination array.
    For Each Value In dict.Items
        sRow = Value ' current source row
        dRow = dRow + 1 ' current destination row
        For Col = 1 To ColumnsCount
            dData(dRow, Col) = sData(sRow, Col)
        Next Col
    Next Value
    
    ' Do something with the destination array ('dData')...

End Sub
</code></pre>
","1","Answer"
"79287161","79287103","<p>I will not change your code. In the end you are getting the x element, but remember in the arrays the element <em>always</em> starts counting from 0. This means that the last element in the array would be x-1 instead of an x. This would be your correct solution:</p>
<pre class=""lang-java prettyprint-override""><code>ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;();
arr.add(0, 0);
arr.add(1, 1);

if (x == 0 || x == 1) {

    return arr.get(x);

} else {
    for (int i = 2; i &lt; x; i++) {
        int valueOfTerm = 0;
        arr.add(i, valueOfTerm);
        valueOfTerm = arr.get(i - 1) + arr.get(i - 2);
        arr.set(i, valueOfTerm);


    }
}
return arr.get(x - 1);
</code></pre>
","-1","Answer"
"79293411","79292983","<p>Add word-wrap and overflow properties to the table cells to handle long text:</p>
<pre><code>.pkgtable {
    width: 100%;
    table-layout: fixed;
}

.pkgtable th, .pkgtable td {
    vertical-align: top;
    word-wrap: break-word;
    overflow: hidden;
    text-overflow: ellipsis;
}

.pkgtable ul {
    font-size: 10px;
    line-height: 20px;
    width: 100%;
    list-style-type: square;
    padding-left: 20px;
}

.pkgtable li {
    margin-left: -12px;
    text-align: left;
    text-transform: uppercase;
}
</code></pre>
<p><strong>Note:-</strong> if you will get any further issues change the above css as per your scenario, mainly you have to play with overflow and word-wrap properties.</p>
","1","Answer"
"79295585","79295576","<p>Try to lower the words first:</p>
<pre><code>result = [s for s in STR if to_match in s.lower()]
</code></pre>
","3","Answer"
"79295615","79295576","<p>Use <a href=""https://docs.python.org/3/library/re.html#re.search"" rel=""nofollow noreferrer""><code>re.search</code></a>, with the flag <a href=""https://docs.python.org/3/library/re.html#re.IGNORECASE"" rel=""nofollow noreferrer""><code>re.IGNORECASE</code></a> to do case-insensitive matching, as shown below.</p>
<p>Note that I also renamed your variables for clarity and to conform with Python naming conventions.</p>
<pre><code>import re

strings = ['aa', 'dffg', 'aa2', 'AAA3']
pattern = 'aa'
matching_strings = [s for s in strings if re.search(pattern, s, re.IGNORECASE)]
print(matching_strings)
# ['aa', 'aa2', 'AAA3']
</code></pre>
<p>Note that <a href=""https://docs.python.org/library/re.html#re.findall"" rel=""nofollow noreferrer""><code>re.findall</code></a> returns a list, which is why the code you posted returns a list of lists. Some of these inner lists are empty, corresponding to the elements of your original list where the pattern was <strong>not</strong> found.</p>
","1","Answer"
"79297687","79292983","<p>Here is a working example of CSS that fixes the problem. The key fix is adding &quot;width: 100%&quot; to the &quot;.pkgtable li&quot; element. This ensures that the list items stay contained within their table cell and prevents any overflow.</p>
<pre><code>.pkgtable {
  width: 100%;
  table-layout: fixed;
}

.pkgtable th,
td {
  vertical-align: top;
  border: 1px solid #ddd;
  padding: 10px;
}

.pkgtable ul {
  font-size: 10px;
  line-height: 20px;
  width: 100%;
  list-style-type: square;
  padding-left: 20px;
  margin: 0;
}

.pkgtable li {
  margin-left: -12px;
  text-align: left;
  text-transform: uppercase;
  width: 100%;
}
</code></pre>
<p>On this image you can see the final result:</p>
<p><a href=""https://i.sstatic.net/M6k6MsIp.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/M6k6MsIp.png"" alt=""Image of the problem"" /></a></p>
","0","Answer"
"79301246","79287103","<p>The issue in your code is an off-by-one bug.</p>
<p>This line:</p>
<pre class=""lang-java prettyprint-override""><code>for(int i = 2; i &lt; x; i++)
</code></pre>
<p>means that <code>i</code> will never be equal to x, and so that <code>arr.add(i,valueOfTerm);</code>  will only ever add items at indexes strictly below
x.</p>
<p>In order to compute all the Fibonacci numbers up to <code>x</code> included, you simply need to change your loop condition from <code>i &lt; x</code> to <code>i &lt;= x</code>:</p>
<pre class=""lang-java prettyprint-override""><code>for(int i = 2; i &lt;= x; i++)
</code></pre>
","0","Answer"
"79301260","79287103","<p>You can do this in constant space, without using a list.</p>
<pre class=""lang-java prettyprint-override""><code>public static int fib(int n) {
    if (n &lt;= 1) {
      return n;
    }

    int prev = 0, curr = 1;

    for (int i = 2; i &lt;= n; i++) {
      int next = prev + curr;
      prev = curr;
      curr = next;
    }

    return curr;
}

fib(n-1); // from main

</code></pre>
<p>If you absolutely want to use a list, you can replace the two variables <code>prev</code> and <code>curr</code> with a list of size 2, and calculate the <code>next</code> index to replace by <code>i % 2</code> inside the loop. In the end, you return <code>n % 2</code> element of the list. Even then, an array would be a better fit than a list since the size is known.</p>
","-1","Answer"
"79351451","79199654","<p>Here is your answer
use this function and give the required value then it is gonna search for all of the lists in that namespace to create a copy of it.</p>
<pre><code>def copy_all_lists(namespace):
    &quot;&quot;&quot;
    Finds all lists in the given namespace (e.g., globals() or locals()),
    creates a copy of each list, and assigns the copy to a new variable 
    with the name `copy_&lt;original_list_name&gt;`.
    
    Args:
        namespace (dict): The namespace to search for lists (e.g., globals(), locals()).
    &quot;&quot;&quot;
    for name, value in namespace.items():
        if isinstance(value, list):
            # Create a copy of the list
            namespace[f'copy_{name}'] = value.copy()
</code></pre>
<p>Here is an example of using this function</p>
<pre><code># Example usage
my_list = [1, 2, 3]
another_list = ['a', 'b', 'c']

print(&quot;Before copying:&quot;, globals())

# Call the function with globals() or locals() as the namespace
copy_all_lists(globals())

print(&quot;After copying:&quot;, globals())

</code></pre>
","-1","Answer"
"79479985","79126873","<p>If you malloc'd the array. You can use platform specific methods to get the size of the array. On Windows you can use <code>VirtualQuery</code> with <code>mbi.RegionSize</code> to get the size.</p>
","0","Answer"