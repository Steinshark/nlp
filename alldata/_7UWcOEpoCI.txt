the rise of worse is better by Richard P Gabriel of lucid Incorporated this feels like are we gonna get lisped do you like the coloring of this article what the hell is this okay I think I think this one's better what do you guys want some light turned brown or P yellow uh I think I'm gonna go with turd Brown it's just easier on the uh easier on the old eyes the rise of worse is better I and just about every designer of common lisp and cloth has had extreme exposure to the MIT Stanford style of design the essence of this style can be captured by the phrase the right thing to such a designer it is important to get all of the following characteristics right Simplicity the design must be simple both an implementation interface it is more important for the interface to be simple than the implementation see a really good statement this is a great [Music] I stream on Windows and when I receive a slack message from my boss it makes that sound Flip can you take the previous Port out can you take that I don't want people to not use Windows okay because if they know I use Windows you know how many stupid comments I'm going to get in the YouTube section flip if you don't take this out it's gonna be like oh heels as Windows he won't dye his hair blue oh he uses Windows where's the blue mustache Prime Shin hey Prime gen when are you gonna dye your hair blue hey well you use Windows what a rookie I use Arch by the way the design must not be inconsistent let's probably just say it the other way uh a design is allowed to be slightly less simple and less complete to avoid inconsistency consistency is as important as correctness okay I I can buy that completeness a design must uh cover as many important situations as is practical all reasonable uh accepted cases uh must be covered Simplicity is not allowed to uh overly reduce completeness oh these are actually really okay so this is probably the greatest definition I've ever seen for things you should consider when writing a library right this is like the best advice I've I've heard of for writing a library I love this I love this I believe most people would agree that these are good characteristics yeah I will call this use uh I will call the use of this philosophy of the design the MIT approach common lisp with Klaus and the scheme represents the MIT approach to design and implementation the worst is better philosophy is only slightly different Simplicity oh interesting okay it's like it has the exact same it has the exact same names in the same order but different the design must be simple both in implementation and interface it is important for the implementation to be simple uh to be simple than the interface Simplicity is the most important consideration in a design correctness the design must be correct in all observable aspects it is slightly better to be simple than correct consistency the design must not be overly inconsistent consistency can be sacrificed for Simplicity in some cases but it is better to drop those parts of the design that deal with less common circumstances than to introduce either implementational complexity or inconsistency completeness the design must cover as many important situations as is practical all reasonable expected cases should be covered completeness can be sacrificed in favor of other quality in fact completeness must be sacrificed when other whenever implementation Simplicity is jeopardized consistency can be a sacrifice to achieve completeness if the Simplicity is retained especially worthless let's see especially worthless is consistency of interface the worst is better philosophy I wonder where he's getting this philosophy from right because in some aspects I see some Modern web design in this one but I also see a lot of modern web design in this one earlier Unix and see examples of the use of this school of design and I will call those use of this design strategy the New Jersey approach New Jersey kids it's always them New Jersey kids you know it's always Ken wheeler that that can wheeler I have an intentionally uh caricatured the worst is better philosophy to convince you that it is obviously a bad philosophy in that the new the New Jersey approach is a bad approach Ken wheeler uh however I believe that worse is better even in straw man form has a better survival characteristics than the right thing and that the New Jersey approach when used for software is better approached than the MIT approach okay this this has gotten interesting okay okay let me start out by retelling a story that shows that the MIT New Jersey distinction is a valid and the proponents of each philosophy actually believe their philosophy is better two famous people the one MIT and the other one from Berkeley Ethan Berkeley sockets but working on Unix once a Mets to discuss operating system issues the person from MIT was knowledgeable about uh it's its uh the mitai lab operating system and had been reading the reading the Unix sources he was interested in how Unix solved the PC uh losering a problem the PC losering problem occurs when a user program uh invokes a system routine to perform a lengthy operation that might have significant State such as I O buffers if an interrupt occurs during the operation the state of the user program must be saved losering what a loser get in loser we're going losering it's because the invocation of the system routine is usually a single instruction the PC of the user program the program counter I assume is what they mean by this uh of the user program does not adequately capture the state of the process the system routine must either back out or press forward the right thing is to back out and restore the user program uh program PC to the instruction that was invoked uh the system routine so that the resumption of the user program after they interrupt for example re-enters the system subroutine it is called PC losering because the PC as being coerced into loser mode where loser is the affectionate name for a user at MIT okay okay losers let's go to MIT get in loser we're going to MIT the MIT guy did not see any code that handled this case and asked the New Jersey guy how to the problem was handled the New Jersey guy said that the Unix folks were aware of the problem but the solution was for the operating for the system routine to always finish but sometimes an error code would be returned that signaled that the system routine had failed to complete its action a correct user program then had to check the error code to determine whether to simply try the system routine again the MIT guy did not like the solution because it was not the right thing the New Jersey guy said that the Unix solution was right because the design philosophy of Unix was Simplicity and that the right thing was too complex besides programmers could easily insert this extra test and loop the MIT guy pointed out that the implementation was simple but the interface to the functionality was complex the New Jersey guy said that the right trade-off had been selected in Unix namely implementation Simplicity was more important than interface simplicity I think I see now I understand more user versus not Arch user the MIT guy then muttered that sometimes it takes a tough man to make a tender chicken but the New Jersey guy didn't understand I'm not sure I do either I think I'm gonna I'm gonna try to use this at everyday talk and see what people say what this article is riddled with platitudes uh I think I see what they're trying to say here now I want to argue that worse is better is better C is a programming language designed for writing Unix and it was designed using the New Jersey approach C is therefore a language which is easy to write a decent compiler and in required requires the programmer to write text that is easy for the compiler to interpret some have called c a fancy Assembly Language both earlier Unix and C compilers had simple structures are easy to Port require a few machine resources to run and provide about 50 to 80 percent of what you want from an operating system in programming language fair and half of the computers I mean audio working is not one of them that ever works on any machine I've ever used in my lifetime half of the computer is uh that exist at any point are worse than median smaller or slower Unix and C work fine on them the worst is better philosophy means that implementation Simplicity has the highest priority which means Unix and C are easy to port on such machines therefore one expects as if let's see that if the 50 functionality Unix and C supports is satisfactory they will start to appear everywhere and they have haven't they Unix and C are the ultimate computer viruses I mean you know a further benefit of the worst is better philosophy is that programmers uh programmer is conditioned to sacrifice some safety convenience and hassle to get good performance in modest resource use programs written using the New Jersey approach will work uh were will work well both in small machines and large ones and the code will be portable because it's written on top of a virus this is the saltiest lisp programmer I have ever read in my entire lifetime uh it is important to remember that the initial virus has uh has to be basically good if so the viral spread is assured as long as it is portable once the virus has spreaded there will be pressure to improve it possibly by increasing its functionality closer to 90 but users have already been conditioned to accept worse than the right thing therefore the worst is better software first will gain acceptance second will condition its users to expect less and third will improve to the point that it is almost the right thing in concrete terms even though lisp compilers in 1987 were about as good as C compilers there are many more compiler experts who want to make C compilers better than to make C of the lisp compilers foreign this is a great this is a great statement by the way everything that was just said right here this was a great statement okay this is great the good news is that in 1995 we will have a good operating system and programming language the bad news is they'll still be uh they'll still be Unix and C plus plus what foresight this guy has this is great uh this will this is uh there is a final benefit to the worst is better because a New Jersey language and system are not really powerful enough to build complex monolith software large system must be designed to reuse components therefore a traditional a tradition of integration Springs up how does the uh the right thing stack up there are two basic scenarios the big complex system scenario in the diamond-like jewel scenario did this guy predict micro services this article is from 1991. 1991. and he's over here just giving us facts about our day today what the hell's Happening Here dude okay you know how sometimes people say you know the previous generation was better and that the modern generation lacks blah blah blah blah yeah well okay in this case they might be right because this is incredible the big complex system scenario goes like this first the right thing needs to be designed then its implementation needs to be designed finally it is implemented because it is the right thing it is nearly 100 of the desired functionality and implementation Simplicity was never a concern so it takes a long time to implement yeah this is waterfall and why waterfall is always really really hard it is large and complex it requires complex tools to use properly the last 20 takes eighty percent of the effort and the right thing takes a long time to get out and it only runs satisfactory on most sophisticated Hardware this is an incredibly great statement it is yes the diamond like a jewel scenario goes like this the right thing takes forever to design but it is quite small at every point along the way to implement it to run fast as either impossible or beyond the capabilities of most implementers two scenarios correspond to common lisp and scheme the first scenario is also the scenario for classic artificial intelligence software the right thing is frequently a monolithic piece of software but for no reason other than that the right thing is often designed monolithically that is the characteristic is happen a happenstance the less lesson to be learned from this is that often undesirable to go for the right thing first it is better to get half of the right thing available so that it spreads like a virus once people are hooked on it it takes time to improve to the 90 of the right thing [Applause] I mean honestly this is like an incredible statement man invent he clearly predicted I mean he he's predicted react he's predicted Zig he's predicted rust he's predicted like every like this is how it works a wrong lesson is to take uh the parable literally and conclude that c is the right is the right vehicle for AI software the 50 solution has to be basically right and in this case it isn't but one can conclude that the lisp Community needs to seriously rethink its position on lisp design and I'll say more about this later why is ocamel coming back oh camel's in a great spot oh camel is really in a good spot people are starting to desire more functional programming languages it's becoming a very mainstream thought to think more functional and JavaScript is just not a functional language I know we want it to be it has all the appearances of being functional but it's just a garbage fire underneath the hood and rust has all the appearances of being functional while maintaining extremely high brows dislikes the common person and has a borrow Checker that sometimes becomes really frustrating but ultimately writes really nice software so oh camels like this weird Middle Ground where it is functional it feels like rust in some aspects and it's even getting things about rust like uh lifetimes but they're really really simple lifetimes they cause really really simple items and it actually just is is shockingly good so I think oh Campbell is truly making the greatest Resurgence because it is one of the most it it somehow meets all the things and I want to dive significantly deeper into it but we'll see what happens the name is maybe the worst is better because it's kind of like a virus again