- Death to Microsoft. The open source community is ready to send you to your grave. You tyrannical reign over
PC gamers is on the end. Freedom! (button clicks) Is what I would say if I lived with Linus Wallace III
over here in fantasy land where any of that was true. So far, the one-month Linux
gaming challenge has been as advertised, a challenge. And in part two, Luke and
I are gonna be taking it to the next level by not
just gaming on Linux, but by recording and
streaming our gameplay to viewers on Twitch. Now, I'd be lying if I said I'm not
expecting some speed bumps, like this small one here to
tell you about our sponsor. Are you running into
poor-quality video meetings? Use Glasswire and instantly see what apps are wasting your bandwidth
during your meeting and block them. Get 25% off today using offer code LINUS at the link in the video description. (upbeat music) With our desktop environment set up, Luke and I have a deceptively
short pre-flight checklist of tasks to complete,
to be streaming ready. We'll need comms to chat and collaborate with our fellow creators, and software that's capable of capturing our gameplay, audio, and face cams. - And obviously, we'll need the aforementioned audio interfaces and cameras both working. - We both use Elgato Key Lights, which we've always controlled
using Windows software. So we'll both need to find
a work around for that. - And no points will be awarded for having an ugly or bad-sounding stream. It's got to look every bit as legit from a viewer perspective
as it did on Windows. - Immediately, I started
overthinking things.. Sometimes that's the problem with knowing just enough to be dangerous. I tried to apt-get OBS, the industry standard for desktop capture and streaming in the terminal, only to discover that Manjaro, the Linux distribution that I'm using, doesn't come with apt because apt is for managing packages on
Debian and related OS's. Oops. Making life more difficult, the message that comes up when you try to execute the command doesn't say, "Hey, you should probably
be using pacman, you dunce." It tries to install some
kind of dependency for apt, then just quietly fails and prompts you to do the same thing again
when you try to use it. Infinite loop, baby. Speaking of which, I had a panic moment when I checked OBS compatibility and found out that it
is actually unsupported in Arch by the way and its derivatives. But the good news is that upon launch, I was immediately relieved to find that it works exactly as
expected with some exceptions. For example, the NVENC new
encoder doesn't show up as an option, which appears to be down to NVIDIA's pooptastic drivers on Linux. Side note here, I always kind of assumed that the Linux community was
grousing about Nvidia primarily for their locked-down,
proprietary approach to things, and that it had less to do with the actual quality of the product. Now, I properly understand
that it is definitely both. As mentioned, core product functionality from like a couple of
years ago is missing, the control panel looks
like it's from 10 years ago, and the interface is kind of confusing. Thankfully, I was able to
enable G-Sync on my display, but for whatever reason, you allow it in order
to actually turn it on, which you then verify in a
completely different tab. And this kind of confusion
is not a deal-breaker, it's just obvious that the Linux software has never gotten the kind
of TLC from the UX team that the Windows software does. - For me, acquiring OBS was no problem. I just got it from the package
manager and it was all okay. Once installed though,
we noticed something. Window capture on Linux can
be a little problematic. We couldn't seem to get it
working at all at the start. I had an option for
it, but it didn't work, and Linus didn't even have that. But a few days later I tried it again for a different project
and it worked just fine. I checked in with Linus and his did too. Neither of us know what might've fixed it, but that's cool, I guess. - The bigger issue for me
ended up being the software that just doesn't exist. There are third-party tools, for example, that allow key remapping. Keyboarding Master is
evidently a popular one. But if your peripherals have
a manufacturer-provided tool that is used to reconfigure RGB lighting, or the liftoff distance of your mouse, or the sensitivity steps
of your DPI button, then get ready to install
Windows in a virtual machine, pass those devices
through, configure them, and then hand them back over to Linux. It's extremely tedious and doesn't even remotely
restore full functionality. For example, don't expect
to get a low-battery warning for your G Pro wireless mouse. And it's even worse
for my audio interface. The GoXLR has a handful
of unique features, including decent preamps,
reprogrammable screen labels, a built-in soundboard function,
and the infamous beep button that I am so fond of using
during my livestreams. About the kind of bull (beep)
that Nvidia puts them through. I'll have it in the affiliate
link down below, by the way. The bad news about it is
that, as far as I can tell, TC Helicon has given exactly zero thought to Linux whatsoever. But wait, there's a solution. All I have to do is follow
these simple instructions to download a random script off GitHub and run it with no
indication given whatsoever for how exactly to run a script. Even the process of
downloading it was unintuitive. And I know GitHub is for
developers and not for end users, but it's really hard to hide behind that shield when it took me less than two days to run into a situation where I had to use it. I mean, at that point, if
GitHub is only for developers, then desktop Linux is only for developers. You can't have it both ways. Unlike on LTT Store, where
you can find great merch at fair prices. Our mouse mats are rated five stars with literally thousands of reviews. Go see what all the fuss
is about at the link below. Anyway, I found a guide
on how to run a script. I'm grateful for that, but I'm frustrated by
the condescending tone. I mean, my assumption that a file with a .sh extension would behave as I would expect it to
and launch in some kind of script-running application doesn't seem that unreasonable. News flash, random contributor, you can also change a
file extension in Windows, and it will attempt to
launch in the default program for that file type. It actually serves exactly
the same fundamental purpose, hinting at the contents of the file. The only difference is that these hints for the user are also used as hints for the operating system. It's actually a lot more
convenient than digging into the properties of the
file to find out what it does. Anyway, pompous tone aside, that contributor did help me
figure out my GitHub download. So it turns out that right click, save target as gets you an
HTML file in .sh clothing because, I don't know, some borderline arbitrary reason probably. And in order to get it
to be an actual .sh file, I had to copy it into a text editor, Kate, and then save that as a script and execute it in the terminal. It spat out a bunch of errors and, as I expected, most of
the buttons don't work, but all of the inputs and outputs that I had already configured
in Windows did show up. My faders work. I even have my (beep) button, until my GoXLR loses power for any reason. At which point I will have to
pass it through to Windows, reconfigure it in Windows, and then pass it back over to
Linux without losing power. Compared to that, all the
other stuff is minor, I hope. - The most notable issue I had was that my audio devices were
just kind of screwy in OBS. My voice came across a
very unnaturally deep, and it sounded like my mic
input had been duplicated. My voice just feels deeper now. I don't know if I've got
something lodged or what. - [Man] Man. - Yeah. Chat was pretty convinced that I had set something up incorrectly. And if I was a viewer of my stream, I probably would have said the same thing. But I've been using OBS for
like six or seven years now, so I had my doubts. I even streamed my OBS
settings panel to prove it, but eventually, feeling out of options, I just restarted OBS and yeah, that solved pretty much everything. Which was kind of frustrating because I've heard time and time again that you don't have to turn things off and on again to get them working in Linux. But hey, maybe that's just 'cause I'm not really great at Linux yet. Maybe there's something
else I could have done. Not sure On the good side of things though, my mixers worked
flawlessly from the start, though it is pretty simple
as far as mixers go. I didn't have to change any settings. I didn't have to install anything for it. I just set it as my default
input device and was good to go. - Once I got Pamac figured out, getting comms going was
surprisingly simple. Pamac is a program with a
graphical user interface that functions similarly to
the pacman package manager that you operate in the terminal. At least it does once you
find the hidden button in Pamac to search Snap, Flatpak, and Arch User Repository entries. It's basically like the
Pop Shop from Pop!_OS, except it didn't try to break my system the first
time I used it. (chuckles) The only really difficult
thing was choosing the right package to install for Discord. There's regular Discord and then there's Canary
Discord, whatever that is. I chose the most official looking package, and I was up and running
almost immediately once I found the super convenient per application volume mixer
in the bottom right corner. The interface is kind of kludgy. Like scrolling with
your mouse wheel scrolls through both the audio devices and the levels of the individual devices, which is not great. But other than that, it works really well and my first voice called to Luke went completely without a hitch, or it would've if I'd
known that it was starting. Unfortunately, I actually
still have not figured out how to get desktop notifications working. I found a guide, but the instructions fell
apart almost immediately when my Discord package didn't show up in the list where it's supposed
to be for me to fix it. I think that's probably a
project for another day. - Discord was an easy install for me. Again, it was just automatically available in package manager. That being said, there was
certain missing features. Screen-sharing across Slack teams and Discord are kind of sketchy at best. They feel less stable or they're even missing
some features here or there. Outside of that, there's even really simple stuff
missing every now and then. Like if I download a file in Slack and then try to click the
Open Containing Folder button, just nothing happens. And speaking of missing features, I use the phone app for the Elgato Control
Center just like Linus did. I had found another solution
through a script on GitHub, but I thought that way would
potentially be problematic in the longterm, so I just avoided it. Unfortunately for my camera, however, Canon EOS utilities doesn't work on Linux. I'd been using that software on Windows for quite a while now to get a live feed from my Canon 70D over USB to my computer. It was flawless and didn't
require a capture card. I do have an AV.io 4K capture card which does work on Linux, but I don't have the Micro HDMI cable that it would need to
connect to my camera. I could pick one up, but
just for this challenge, I decided to go with my old Logitech C920, which while it doesn't
remotely look as good, it works just fine. And when you make the
window for it really small, no one can really tell. - I think overall the easiest part for me was getting my Cam
Link 4K up and running. It was garbled when I selected one of the duplicate sources in OBS, but immediately after
trying the second one, it cleared up and has been
picture perfect ever since. So it works, but there's a
much larger upfront investment in getting it working. The question is just
whether it feels worth it. - In the end, it worked. If you connected to the stream after we were done about 15
minutes of troubleshooting while we were just in the
thick of trying not to starve, I'm sure any random viewer
wouldn't have been able to tell a difference between one of my old Windows streams and this one. Audio was good, capture was good. That's where the good ends, however. Literally everything I
use past this point was a lesser experience compared
to its Windows counterpart. Almost everything was
missing at least one feature, and some, I'd say most
notably OBS and Teams, were just buggy, requiring
restarts for simple settings to actually apply and had
other various problems. It definitely wasn't impossible, and it was actually
easier than I expected, but due to various bugs, missing features, and
incompatible software, it wasn't as simple or clean
as doing it on Windows. But I wouldn't say that was enough for it to be a deal-breaker. - For me, the bottom line
is what you're looking to get out of it. If you're daily driving
Linux for games streaming out of a genuine passion
for learning more about it, then have at it. Have fun. But just know
what you're getting into. PC gaming already requires a
certain amount of tinkering. I mean, there's a reason that
more people game on consoles. You know, whether it's trying
to track down save files in some Vista-era folder or forcing an aspect ratio in an INI file. But a Linux gaming PC, it
requires all of that crap and then another mountain
of crap on top of it. Like when something doesn't
work, you can tell, you know, "Well, I never wanted to
use that functionality" or "I never wanted to
play that game anyway." But honestly it just comes
across as sour grapes. It is not that easy to use. The good news though, is that a shocking number
of experiences don't start and end with, sorry, you can't do this. So stay tuned for part three, where Luke and I are
gonna be trying to get as many games up and running as possible, starting with Twitch's top 20 and then expanding into some
of our personal favorites. It's gonna be a really good one. Just like this message from our sponsor. Thanks to Pulseway for
sponsoring today's video. Pulseway is an all-in-one
platform management tool that can help protect your business from things like phishing and ransomware. How? Pulseway's got features
like automated patching, central user and system management, disaster recovery backup, and
stolen credential monitoring. So protect your business today and try Pulseway for free at the link in the video description. It's sponsors like that that are gonna put him through college. Wanna say hi to YouTube? - Hi. - All right. Do you wanna be in the video? Okay. Off you go. - Yay. - If you guys are looking
for another video to watch, check out part one of the series, so you don't miss any of the action. Or if you've already watched that, maybe check out my iSwitched to Mac series from a little while back. Okay, it was quite a while back, but it was definitely interesting.