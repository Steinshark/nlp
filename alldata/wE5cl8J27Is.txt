uh we'll be looking at oblivious transfer um which is a a technology that um involves sending data um such that only a part of it will arrive and the sender doesn't know which part will actually arrive it will be the receiver choosing what they can read to give you an example to Illustrated is a problem where you want to know who has the most money no one wants to brag about how much money they have but they've decided that the richest person needs to pay the bill for dinner so now you want to compare who has the highest amount of money but you don't want to reveal to the others how much money you have so they all run a multi-party computation protocol where they input their amount of money and the protocol will spit out the winner the person with the most money uh but it won't reveal to anyone involved how much money anyone has that's a sort of application that you could do with oblivious transfer but let's first talk about uh oblivious transfer itself um the most basic protocol is called one out of two oblivious transfer I'm thinking of two values now in this case I can think of the two values of these two cards now obviously you don't know what these values are but I know what they are right now you're not supposed to know this but this card is the seven of diamonds and this card is the nine of Spates but you don't know this right I'm putting them here and I want you to read the value of one of these cards but you don't want me to know which one of the two cards you've read right so you're thinking of a bit bit zero corresponding to this card the seven of diamonds bit one corresponding to this card the nine of Spades and I'm not supposed to know which card you're thinking of so I give you these two cards and then you open one and look at them while I'm not looking at what you're doing right mhm so now now you know either the seven of diamonds or the nine of Spades I don't know which one you know but you know one of them and you don't know the other right so that's the sort of physical example of it but how do we do this with uh cryptography how do we do this electronically right we might naively think why don't I just encrypt the two values I just encrypt seven of diamonds with key zero and nine of Spades with key1 and then you can ask me for key Zer or key one ah but if you do that I will know whether you were thinking of zero or of one so that doesn't work what if I give you both keys key Zer and key 1 then I can look at both then you can look at both so that's also broken right we have two requirements which is I can rely on the fact that you can only read one card and you can rely on the fact that you can read at least one card after your choice so in order to do this we uh can modify RSA a little bit to accomplish this and this is the sort of most well-known one out of two oblivious transfer so let's refresh our memory on what RSA is there's there's a video that I did about this topic we don't need to know all the details there's really only one important fact that we need to know so RSA works in the modular world so to remind ourselves if we have a number X mode let's say 12 what this means is that we divide the number X by 12 and we are only interested in the remainder of that in other words if we have a clock with 12 hours and it's 15 hours well 15 / 12 is 1 with a remainder of three and it's the remainder we're interested in right so all the values we'll ever see will be between 0o and 11 because we're computer scientists we we like to include zero there so instead of 1 to 12 it will be0 0 to 11 now RSA Works in this modular world as well but instead of having a small number like 12 we have a big number n and n is a is a really really big number like a th000 bits nowadays is already considered to be not enough um you know every once in a while n will have to go up um as our computational power gets bigger um so but let's say that n is 1,24 bits right so then you have a a message number n and you're doing your mathematics modulo n then the special property that we have for RSA is that there are two values e and D such that if you take x to the power e to the power D this is equal to X modul N now how this property is created you'll have to look at the RSA video obviously we have to just accept this as a fact for oblivious transfer so one party say Ellis can generate e d and n such that this property here that desirable property holds now how can we use this property for oblivious transfer I'll draw something called a message sequence chart to explain the the protocol so we have two parties involved Ellis and Bob we're drawing a line here and here and this allows us to sort of visualize the communication between the two parties if we draw something for Ellis on the left or for Bob on the right so on the outside it means that it's their private information that they're not sending and if we draw an arrow from Ellis to Bob or from Bob to Ellis it means that they're communicating this information to the other party so Ellis starts off with two hidden messages so let's call them message zero and message one in the example before message zero was seven of diamonds and message one was the nine of uh Spades right um and now Alice wants to communicate this to Bob but only one at a time so the first thing she does is she creates a public private key pair in RSA right so she generates the N the E and the D with the property that we just discussed she keeps the d a secret that's her private key and she sends n and e to Bob that's the public key part n and E are sent to Bob the next thing she does is she sends two completely random values to Bob these are values smaller than big n but generally quite large random values let's call them x0 and X1 so these are just random numbers that Bob will receive now B Bob before anything started thought of a bid right he wants to read either the top card or the bottom card so he selects which card he wants to read and call that bit B so that's a value he's thinking of now after he receives the two messages x0 and X1 he will um select a value XB right so if he's thinking of zero he will select X zero and if he's thinking of one he will select X1 so after Bob receives x0 and X1 he selects a random key k then with that k key K which is a secret for Bob he does the following computation he takes XB plus K to the power e all of that modulo n he can do that because he was given e by Ellis so he knows that value he was given n so he knows that value K is a value that he randomly selected and so is B XB is simply one of these two values depending on the value of x so he can compute this and and that value that's a single value let's call that value V what Ellis can do is she can take the value V and privately compute two versions the first one is P0 which is equal to the formula she just got which is v- x0 to the^ D similarly P1 is equal to vus X1 to the power D so again this is something that Ellis can compute because she's given the value V she knows the values x0 and X1 because she created them and sent them to Bob and she knows the value D so she can simply compute p 0 and P1 now the final step is where the the magic happens she sends two values to Bob which is M Prime 0 which is defined to be m0 + p 0 mod n and the other value is called M Prime 1 which is equal to M1 + P1 also mod n and this allows Bob to then do the final step which is to compute mstar which is equal to M Prime of the bit he chose minus k+ p b and what it turns out is that this value M Star is equal to m p and that's exactly what we want right so Bob at the end of the protocol now knows MB so to illustrate this protocol let's go with the bit that you selected right you selected the bottom card which was bit one so we have B is equal to 1 and we fill in this value for the protocol so m0 is going to be filled in as the seven of diamonds and M1 is going to be filled in as the nine of Spades um I'm then thinking of some crypto values we're not going to ineni those and similarly for the random values doesn't need to be this complicated um what is important here is that XB here is of course going to be X1 so V will equal X1 plus K to the E mod n then I will compute p 0 and P1 so what will p 0 be and what will P1 be let's start with P1 because that's the interesting case so P1 will be the value V what is the value V well okay P1 is V minus X1 all of that to the power D now we can instantiate V because we know now because you chose bit one that it's X1 + K to ^ e so this is equal to X1 plus K to ^ e which is the value for V - X1 all of that to the power D now obviously X1 - X1 cancels out so what we're left with is K to the^ e to the power D more than and that's the whole Magic of RSA K to the^ e to the^ D was equal 2 K mod n right so it nicely cancels out and what we're left over is a value K so P1 is equal to K now for P0 this isn't going to work we're not going to do the math for p 0 because it's not going to lead anywhere right uh because the value V is X1 + K to ^ e and if we then subtract x0 and raise that to the power D it's not going to have any nice properties so let's ignore that for now um so P1 has the nice property that is equal to K and P 0 does not have this property now if we look at the final computation here we see that M Prime 0 is going to be m0 + p 0 that doesn't have any nice properties because p 0 doesn't have any nice properties but M Prime 1 has nice properties because it's going to be equal to let's work this out M Prime 1 is equal to M1 plus P1 P1 is equal to K so that means that this is equal to M1 minus K if we then look at the definition of m star M Star is equal to m 1 - k + K which is equal to M1 and that's exactly what we wanted so this is how oblivious transfer works now the other question is how do I know that you can't read the other bit of information I'm not going to go into the technical details here but remember that the definition of P0 was just some random formula to the power D if you can work out any random thing to the power D then you can actually break RSA so the whole point of RSA is that you can't work out a random number to the power D unless you know D which you don't um so that's that's where that comes from it the you know there's a lot of technical details that are very interesting but that don't fit into this video so now we have one out of two oblivious transfer how can we get you know more interesting versions of oblivious transfer let's first instead of thinking about small pieces of information like a single card what if I want to send you a file um you know RSA only allows small messages because our messages m0 and M1 have to be in the domain of n right if they're bigger than n they they definitely can't can't work um and N is a,2 4 bits so any message longer than a kilobyte we're not going to be able to do this what we can do however is we can take two files file Zer and encrypt it with a symmetric key s0 and we can take file F1 and encrypt it with symmetric key as one I'm now going to send you both encrypted files and I'm going to now run the oblivious transfers on the symmetric key so you will only know the symmetric key of file file Z or the symmetric key of file one depending on your chosen bit and I don't know which chosen bit that is so that is how we can send entire files using oblivious transfer and now the final step uh which is one out of n one out of n oblivious transfer so what is the trick here so we'll do one out of four oblivious transfer as an example and after that it will be I think quite clear how we can generalize this to n so what we do instead of having two files encrypted with symmetric keys we're going to have four files now and based on your choice you can read only one of those files and I won't know which file it is so the first file we're going to call it file 0 0 for the binary notation of a Two Bit Zero uh so file 0 0 is going to be encrypted with s upper zero lower zero and all of that will be encrypted again so there's two layers of encryption with s upper one lower zero and we do this for the next file F 01 which will be encrypted the inner key so that's s upper zero is going to be zero again because the first bit is zero but the outer key this time will be as one because it's the outer key but then the subscript here will be one because this bit is one similarly the next up will be file 1 Z which will be encrypted by s0 is going to be one because the inner bit is one and the outer bit is zero the same is true for the for the fourth file um in this case both the inner and the outer key will have Bit Zero so now now we can do a little tree of oblivious transfer so I do an oblivious transfer and you're going to either select inner key zero or inner key one so that will be s0 0 on one side and s0 one on the other I won't know which of the two bits you've selected and that means that I don't know which one of the two symmetric Keys you've selected and then we do the same for the outer key so you either select at your will uh S10 or S11 and this is true in both cases so that means that at the end you've made two choices for two bits and this allows you to then have a pair of symmetric Keys let's say that you went for Zer one so that means that your inner key is zero and your outer key is one so that means that you have the following Keys you have keys s0 0 and you have the key S11 and you can now decrypt file 01 and you don't have S10 so you cannot decrypt this you can't decrypt this because you don't have uh S01 and here you also can't decrypt it because again you're missing one of the two keys of course you can now instead of having a tree of depth two you can have a tree of depth three or four or five and this means that with logarithmically many oblivious transfers I can make you select one out of any number if you then want to select k out of any number I can simply run the protocol K times is that the best way of doing it no uh but it's it's a way of doing it um so of course there's a lot of technical details and a lot of optimizations to be had um but I think it's really cool that I can send you some information uh that you can only read a part of but I don't know which part so the applications of this we've mentioned multiparty computation um so here I want to go into more details about this later so there's a particular protocol called garbled circuits and which is extremely powerful it allows you to run any arbitrary logic over any arbitrary input without any of the parties learning any of the input it's it's very powerful um and very cool um but there are other things you can do with this um another one is private information retrieval so let's say that I'm a data storage um and you don't want uh the people making the queries don't want the data storage to learn what they are interested in right um simply the metadata of people keep accessing the same file might in itself be a privacy violation um so there are some interesting ideas surrounding there as well this is one of the worst things that can happen so instead of using a single input we need to use two inputs the other input being again Sean maybe you can tell me reasons why G3 should be more similar to G1 and maybe reasons that it should be more similar to G2