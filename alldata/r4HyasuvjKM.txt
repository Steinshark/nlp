I made jsx for Lua because I hate static sites you know without reading anything in this article Hate's a strong emotion and it can make you build almost anything and this seems like one of them all right here we go I like jsx but for Lua you can write a Lua file that returns a chunk of HTML you can compose more interesting Pages by writing functions that return HML here's what the homepage of my site looks like in Lua x i define whatever data I want in plain old Lua okay okay okay article okay look at this I cannot believe I cannot believe this is real someone made this oh my goodness Ben Ben viness this is the Ben viness this is the business you're giving him the business business dude this is awesome you can use Lua package system to organize my templates that's pretty sweet whatever oh my goodness that is actually pretty okay this is actually pretty sweet why yeah why because I hate static sites no seriously I actually hate static sites I got into programming because I wanted to make websites when I started out you could just copy hito files up to your server and you had a website it was magical and PHP made it even better you could throw in a little snippet of serers side code and you had a dynamic page those days are gone they're gone because react strangled it in its bed slowly today I spend my time organizing markdown files and folders so a janky tool can Cobble them together into a website I spend my time learning weird template languages with weird functions and bad control flow I spend my time in Cloud control panels getting confused by bucket permissions and CDN settings this man's been you can tell right away it feels like we've regressed 15 years ago it was fine to run a script from scratch on every single request but today we insist that you have to serve every personal website from a CDN that means no fun allowed if you aamai no fun never so if you want as much as the cc20 copyright 2023 in the footer update you'll need to rebuild and deploy the site I don't want that I want my 2023 update dynamically damn it what's saddest to me is that when people do want that dynamism and they often do they end up doing it with JavaScript making their Pages heavier and slower then to compensate for this they'll add some kind of serverless backend serving rendering plus hydration in a pile of extra complexity instead of just doing a little server side code they're wasting people's CPU time and their own money I don't know who this person is business with the business but I love you I love this this is so this is so good I love the fact that he got so frustrated by today's development experience just wrote a gosh just literally wrote Lua X I mean how pissed off do you have to be to write Lua X so the reason why okay so people are always wondering why do I hate jsx but I do something like Lua X or Temple right so if you don't know temple temple is the same thing not that Temple this is different this right here why do I like these but I hate the other it's very very simple when you do Lua X it only executes on the server there is no client side integration here I think that's the big downfall of jsx is that jsx is both a serers side and a client side language and so you end up getting this weird things where you start tying stuff in together and you're trying to reason about client and server constantly when something like a web component or something else could do such a good job cuz most your functionality is pretty thin when you really understand the difference between server and client side functionality and now you have this huge thing that you end up having to create because once you go down that route that also means all of your client side rendering has to go through all of the jsx so that means you need to start figuring out how you're going to be doing your State updates this is why Redux was born is because you can't simply just update a place you have to update the gosh darn whole thing luckily solid with signals and all that kind of helps the entire thing but you still end up with this giant replication state tree all over the place it makes development really confusing and upsetting and and emotionally bruising okay okay buddy but why jsx because I like it I've tried so many templating languages over the years like mustache liquid nunchucks blade Jango and of course go templates commonly seen in systems like Hugo go templates aren't half bad but I'd put them as they're almost there they're missing like a couple things but they're pretty good of all these languages have basically the same design which I'll call a pre-processor model yep they all start with the assumption that a template is mostly a static piece of content and in this case HTML with some slots to paste Dynamic values it's more or less just c pre-processor a simple find and replace Passover the original content legitimate JavaScript emotionally damaging I love it but this is never actually enough you start out with simple values and ranges but rapidly escalate to tricky conditional logic weird inheritance systems and eventually custom functions written in a host language that are injected into the template Language Fair this is actually Fair The Inheritance system is dude I forget what I forget what templating system is a Ginga but the inheritance is like all backwards and I absolutely hate it I think go templates are as close as you can get to pretty good basically these languages are too weak to do anything interesting when I write my article about doing Advent of code on a PS5 I found myself frequently reusing specific layouts on a wide layout that displayed two columns side by side but reflowed to Vertical mode on mobile in go templates this was an utter disaster okay Define wide start Define wide middle Define wide end I wonder if there's a better way to do this I wonder if there's a better way to do this there might just be a better way to do this but that's funny the problem that is that no pre-processor style templates actually allow you to manipulate the HTML as data the HTML is opaque the template language doesn't understand it the web pages are complex documents that often need serious logic to assemble logic that requires the template language to work with the document structure instead of just text I'm shook shook right now even PHP falls short of this standard language Jank and terrible design aside PHP is at least a real programming language it has arrays and loops and functions and so on but it still doesn't understand HTML it's just basically a fancier version of a pre-processor model yeah that's fair that's a fair take but isn't Lua isn't this just all pre-processor fancy aren't we all just in the end just pre-processor fancy when you really think about it we're all just string concatenating I mean at the end of the day you're just string concatenating that's it that's all you do if you think that you're doing anything else you're mapping you're filtering and your string concatenating over and over and over again at the end of the day it's night it's true unarguable facts I've been doing someone's back end for the main portion of my life okay how does that feel and once in a while when I peek at the front end I get scared and run back to the back end huh I don't even know what that means to tell you the honest truth real string processing is the friends we made along the way it's true it's absolutely true this is why jsx is so much better better than JS inside HTML it's HTML inside of JS it flips the ownership around when you need to do something interesting you don't need to learn some underpowered language or contort your work to fit a broken system or remember which escaping functions to use you just write code and the rest sorts itself out so my one disagreeance here besides for the client side stuff drop the client side stuff one thing that I find true among Temple I find it the same among uh jsx on the server and I find it the same probably in Lua as well is that you end up making really complex abstractions for things that if you just took a little bit more time and thought about you could probably do much simpler if you reduce the language the complexity of the language bleeds into the complexity of the ways you solve problems and JavaScript is an extremely simple extremely complex language it allows you to do anything in any way shittily sometimes and so that causes just like I swear I've seen some of the craziest code because JavaScript lets you do it JavaScript I love it sometimes yeah sometimes sometimes you there's some clean JavaScript out there there's some clean ones okay I've seen arrays being used as objects yeah we did that in falor of course we did by the way you should use arrays to look up values until you have like 30 values in the array then you should switch it to a set or a map depending on your need carac said any programming language feature will eventually show up in a good code base that is such a good way to put it that's actually really funny that's actually really really funny uh am I preferring go templates over Temple I'm not sure I I honestly don't know I need more time to tell you which one I like I'm going to I'm going to try I'm going to try leptos again which is rust's version effectively of Temple and I'm going to try that all over again and see how it goes and really just try to make my decision on these things because I just keep on doing back and and keep doing them over and over again I think Temple is better because of the compile time syntax checking I agree with that compile time syntax checking right and type checking very very good it's important to note that jsx is distinct from react or spelt or whatever front end we usually associate it with I'm not a fan of those Frameworks they have they have a lot of ideas about client side reactivity that I don't like and don't care about but I really like writing HTML inside of a real programming language okay I I mean I get the motivation right I I I'm kind of in this Camp that's why I keep coming back to lepto Temple is because I I want that right I want that to be true why Lua because I like it that's actually just a good enough reason I've considered using jsx but my website is built in go and I wanted to keep that it that way I find GH toing to be Best in Class when it comes to deploying a server build a binary start it up the end in contrast every time I've deployed a node app I have suffered immensely yeah and also go super fast you can literally build a million line go project in like a second and a half it's incredible and then you throw a little bit of air on there it rebuilds so fast I can't navigate to the browser and this is me navigating to a browser it's like going D D D D D D D it's already refreshed it's blazingly fast what I wanted was uh something I could embed easily into an existing app this is so good already this is actually a dude this is why people love Lua and I I'm shocked that Lua is not used more is that this guy is using a Gob back end and he's going to just put Lua in it okay just take a second and think about that Lua fit the build nicely but even more importantly Lua is extremely easy to parse the entire grammar fits on one screen and the official parser is less than 1,500 lines of code furthermore Lua didn't use this for anything except comparisons so there was no ambiguity HML tags could be used wherever tables were used it was therefore easy to create a custom recursive descent parser I mostly just ported the official parser to go and modified parse simple expression to parse tags as well as tables this is this is badass I want you to know that this is badass my transpiler doesn't even produce an abstract syntax tream it doesn't need to it just emits vanilla Lua code as is and converts htl tags to Lua tables as it goes the the end result is less than a thousand lines of code about 700 of them are just parsing Lua with the remaining 300 being used for my new features and it took me only a couple days this is super sweet embedding Lua into a go took about 17 minutes of my time on a Saturday and I haven't really changed anything about the runner since then there is something very nice about Dynamic languages like I'm totally on team Dynamic language but I like constraining it and this is like such a cool I I should figure out how more times how to use Lua maybe I want to play with Lua I bet you there's already a Lua to rust thing and so you can build bits of your rust system with Lua something about that just sounds super compelling because Lua when if you've ever used enough Lua uh here sorry this is rust you may have heard of rust by the way that's uh markdown APM uh one thing that I actually have become i' be begun to like about Lua is that you can just simply use these simple doc comments something like J uh something like uh whatever you call what's the stupid thing called uh JS Doc and I can just be like emitter and it just tells me right I here's my functions right I can put little app comments on it I get all the auto complete not only do I get auto complete complete I get all the jump I like you get all the pain of you you just get it all it's like right there if I wanted to you know uh there we go I just added a type to that thing and now it knows do you even Java bro I put that comment there I put that comment there okay I put it right there you can see it Lu is pretty neat Lu is a embedded language that is used in a lot of like C++ lower level projects Vim being one of them so Vim embeds Lua into it because it's just it's just a great scripting language I think I've spent more time fig fing out Louis package system than writing the transpiler be aware of that that's fine oh my goodness let's go let's go business with the business oh my goodness thank you this by the way this article is freaking awesome I just want to let you know this article is awesome uh I absolutely love that and yes the the package system is probably the confusing part of Lua you have to have think I don't really understand how pathing Works other than at least I understand it from a a Vim based thing one based arrays annoying but it's not the most annoying thing it just isn't the most annoying thing I don't like it that's it D nice I like to see that all right before go templates oh yes you have to do this picture Source yep you have to do these this if you guys don't know what's happening here you can Define your own functions you want to be able to call inside of your go templates right and so you can see that there's this whole template thing going on right here a lot of blah blah blah blah whereas you get to do the exact same thing in Lua and LU is probably just easier to do it in because you're not really caring too much about types you got fast iterators you actually have iterators which is great unlike JavaScript loser there we go this is great my uh demos 3D article required me to generate unique IDs for each uh Desmos graph in Hugo I had to use the scratch system to store and manipulate data in Hugo itself I can just do a global in my Lua x file furthermore I register a new DES Desmos short code globals across my entire site this is now just a Lu of function specific to the article this is cool I think this is a this is actually a really great argument for why you should do it I I I like this maybe I could be more into this maybe just maybe I could be into this this is great I'm not going to dude uh too long I'm not going to read all of that congratulations or I'm sorry closing thoughts my goal with this project was to make myself happy and I think I succeeded again I keep I feel like I'm a broken drum sometimes this is one of the most important goals of any side project find something that upsets you and fix it your way what you think is a great way go research and come up with a stupid new solution doesn't it doesn't have to be life-changing it doesn't have to be Twitter cred just do it and make something and guess what you're G You're Gonna Learn a crap ton this guy's writing a descent parser okay viness over here is writing a descent parser just to get everything done added in some htx into the parsing called it a day it's beautiful absolutely beautiful beautiful I love it I'm very happy now with lu XF so far I it's it's not ready for production in the sense that I have cut several corners on the parser but it meets all my needs right now and I love using it taking a step back though it's very gratifying to be able to bang out a transpiler in a weekend earlier in my career I would have started with Lex and yak and probably got gotten lost this has happened multiple times these days though I understand compilers well enough just to sit down and write one and it feels great this is awesome business are you are you in the chat are you still in the chat if you're still in the chat what what's your go-to book don't build reactant Lua please don't do that produ Temple jsx good enough what's your book please cuz I personally am a big fan of interpreter book I think that interpreter book is the best one the Bible it's a pretty good one but that's not really it's not really good for learning how to make a compiler I like this one a lot and you get 30% off and I get zero money for Lou is my passion at least emojis at least emojis aren't your culture okay let's see if I don't know if viness is still here but if he is Thorston is a legend Thorston is a legend Rus go to rust exactly the Dragon book The Dragon book is pretty definitive for compilers I agree I like the Dragon book is really good but I really really do like the thorsten one it's super simple and it just it gets you right into the saddle and it's really really good and you can complete honestly if you really sat down and you were really motivated you could complete it in an extremely small amount of time 20 hours complete the whole gosh darn thing Jonathan Blow things the Dragon book sucks I mean to be fair Jonathan Blow things everything sucks okay I like the guy don't get me wrong oh he did Gary Bernard's uh screencast about making kers nice okay okay my bad I I like John okay I think he's great I think his advice is super good he also hates everything so it's like is it bad I don't know John Blow is hypers specialized in one area of programming how come everyone cares so much about what he thinks contrarian equals John I'm pretty contrarian myself though so like I I don't want to I don't want to dunk on the guy I'm pretty contrarian myself I'm I feel like the lone voice in the wilderness crying that you shouldn't use react constantly I'm just trying to be like people stop using react for everything maybe like maybe JavaScript isn't the best answer for everything I spent almost all my year working on projects for other people while I'm am proud of the work I did I and I enjoy it there's still something special about making tools for yourself does anyone else in the world want to make their websites in a weird dialect of Lua maybe not but I do and that's enough agreed I don't know what the future holds for Lua X and it's not ready for other people to use and I'm not sure it'll ever be so rather than tell you to go to Lu xdev and start building your website with my tool here's what I'll say try building something yourself my goodness this guy is just based just there's going to be a literally on YouTube there's going to be a wall of comments that are just based that's it business based business based try writing code for you and you alone don't worry about whether it will look good on your resume or attract lots of stars on GitHub just write something that feels good for you explore weird ideas and see where it takes you who knows maybe someday other people will like it too earned earned based and followed and reported so good love that this is great this is absolutely great this is I mean this is the literal reason why I'm building APM I just want I just want to have an APM counter it's just a I just want an APM counter notice how the profile isn't an animu waiu facts and logic that is not an anime waiu I can tell right away that's not one I can tell with using just my eyes it's not glad you enjoyed it dude it was this is such a good article uh I like go templates but I can I can tell that they can become a bit of a pain in the ass I'm still worried about jsx though I think okay here's my real take I'm going to give you guys an honest ass take and not just like a stupid take okay go templates suck temple. guide sucks Lua X sucks react sucks lepto sucks they all suck they just suck differently choose your suck and enjoy it HDMX sucks like everything sucks it's all broken none of it solves the problem universally because you can't have a universal solution embrace the suck discover each way things suck and then choose the least sucky for your project there you go that's it the name the sucken wow