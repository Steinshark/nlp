Hello and welcome to mCoding. In what's currently my most popular video of all time, we compared the speed of a bunch of different ways to compute sum of range n. And a surprise to absolutely no one, the fastest way is, of course, to use the pre-computed answer. But to my surprise, I received hundreds of comments and even a pull request to my Github saying that the formula was wrong. All of the comments gave the same wrong answer. They all suggested that this minus should be a plus. But James, the sum of the first n numbers is n(n+1)/2. Here's a whole Wikipedia article on it. They're called triangle numbers and the proof is actually very simple. Make a triangle where the n-th row has n dots. Double the number of dots and flip them over in order to make a rectangle. It has height n and width n+1. The rectangle has n*(n+1) dots. So, the triangle has half that. Okay, okay. I admit that's a nice proof. And yet, when we run the program, we see that's not the right answer. Try a different value, still not the right answer. The correct formula uses the minus. And if you want to get an int back, so even the types match, then use integer division. One of these two factors is even. So, there won't be any rounding issues. So, how is it that with the correct answer right in front of them, hundreds of people not just caught the question wrong but all came up with the same wrong answer? A wrong answer that could be shown to be wrong by trying even a single example. And it's not like these commenters are dumb or trolling or something like that. They're intelligent enough to know that there's a closed-form formula for this sum. And the overwhelming majority of them were not trolling. They genuinely believed that the formula was wrong. I attribute this to what I call 'Notational Fixation'. In simple terms, all these people knew the formula which has an n in it. But the n in the formula is not the n in the problem. The n in this formula is the biggest number in the sum. But the biggest number in this range is (n - 1). So, if you want to use the formula with the plus, you need to plug in (n - 1), not n. That terms this into n and this into (n - 1). Rearranging, that's how we get the formula with the minus sign. In the time that I've spent teaching undergraduates, this 'Notational Fixation' has been one of the biggest sources of errors. It's what makes you think that this is a plot of y equals x squared. When, in fact, it's y equals square root of x. This is, of course, a primitive model of the number of xylophones over the course of years. And it's what might make you think that the area of this inner circle is pi * r squared. When, in fact, it's pi * r. Notational Fixation starts because it's an easy way to remember formulas and keep things straight in your head. Always using the same names for variables can be both helpful as well as a great tool for communicating your ideas with others. If I say, a squared plus b squared equals c squared, everybody knows I'm talking about a right triangle. But in the real world, problems aren't going to come to you with their variables labeled like they are in your textbook. If you're worried about making mistakes due to Notational Fixation, then here's what I recommend. Practice scrambling all your variables. Make an x that's a function of f. Call all of your variables J. And of course, don't forget to try real examples that use good names and reasonable numbers. All these things will help you see past the notation and understand the meaning. Just remember not to leave any scrambled variables in your code, of course. When you're communicating with others and with yourself in the future, it's important to use the notation that everyone's familiar with. Anyway, that's all I've got. As usual, thank you to my patrons and donors for supporting me. See you in the next one.