all right hey hey hey hey hey 2800 of you I hope you guys are ready for this because maybe you do need kubernetes now before when I used to read boot dodev articles I used to say hey this was an advertisement but now I I work for boot. so I don't know how to say that this is an advertisement without saying this is an advertisement because now like I work there I'm building courses for them so it's a little bit different so is it an advertisement yes it's an advertisement boot. dprime boot. Dev Prime boot. deprime 25% off or some something like that I don't even know maybe you do need Cooper dennies by Lane Wagner March 8th 2024 by the way I do I am a big fan of Lane he he has written the best articles we I think he has consistently delivered Banger articles every single time all right Theo has a great video on kubernetes currently titled you don't need kubernetes I am a kubernetes enjoyer but I'm not here to argue about that the part of the video I do want to discuss has nothing to do with k8s uh it's where Theo draws the line of prime engine hey this is me hey hey uh he explains that some technologies trade scalability performance flexibility whatever for a speed of development deploying nextjs using versell and Firebase is quick but it comes at a cost as you scale up either by adding users or by adding more complex features you need to do one of two things rewrite with something more flexible or performant pay a lot of money to a third party to handle your problems for you I think one of the problems you know i' I I've never loved this tradeoff generally like I understand you want to make the tradeoff to move as fast as possible but one thing I really dislike just generally about this tradeoff is that you get to this place where the services that you're using is costing you like one developer per year but for you to fix it is going to take three developers due to the um due to like the size of your application now like you can't just re architect everything you're going to have to Halt all feature production you're going to have to do like so much stuff to rewrite it right and the technical becomes really high so you just choose to push forward and then you develop more features your program gets a lot larger and then what happens it's now costing you two or three developers but for you to fix it is going to take all of your developers for six months time and you're like I still can't make this tradeoff it's the one thing I really dislike I mean there's some programs out there that you write that simply will never run into that scale issue and then I think it's super smart to take advantage of these type of items right like if you're working at a program if you're working on a program and let's say it's a B2B program where your maximum audience is like 10,000 businesses it's like why wouldn't you go that route right why wouldn't you just fully lean into managed everything and just trade off all the complexity because you know you're not going to have like your problem will never be a large amount of requests but the inverse is like if you have something that you're trying to shoot for millions of people making requests like there there does become a difficulty at some point in trying to scale these two things at the same time and that's always my worry about using third party Services is they're both super amazing and they're also provide hurdles at some point you know what I mean what I did for a local roofing company I actually think I think that that that's like exactly what you should do you're if you're building like a local website for a local company like why wouldn't you just use like the easiest thing right you're just like hey you only get charged for the request you make you don't have to monitor anything you don't even have to run your own server it just runs that's it I'm here better late than ever hey Wags I'm actually reading your article right now and so to me that makes perfect sense and so this tradeoff has always been such a hard trade-off to make cuz I think for you to make this tradeoff you have to know yourself and that is a difficulty for a lot of people right can you deliver the features in reasonable amount of time without using the things you think are going to become expensive or maybe you should just do that because you believe that you will be able to scale and rewrite it effectively as time comes or whatever you want to do L node $5 I mean literally lenot is actually $5 a month for their small one right but it also sucks to manage right like managing sucks right can we all be real it sucks right it's not like it's fun you need a team at some point if you're doing your own stuff there's definitely like a difficulty there that it everyone should be completely willing to recognize anyways okay so the idea is that you should choose the fastest ship technology the idea is that you should choose the fastest by the way Linux scrolling Linux scrolling sometimes is a little bit Linux screen tearing scrolling great times so the idea is that you should choose a fastest ship technology so that you can move faster and hire more cheaply I can ship a Go app to k8s faster than I can get eslint TSC vs code thank you for the thank you for the um you know like you you didn't know if this was a family-friendly stream or not so I I genuinely appreciate that to cooperate but I digress again so this is one of those fun facts that I like to talk about right here this is uh when someone says developer speed what they're meaning is developer familiarity right what they really mean here is like because I'm familiar with go and k8s I can launch something super fast oh you're familiar with tsse and how forel does things and how forel does say environment variables and how it does this and that and the other and so therefore you're faster at that side whereas I'm faster at this side it's it's it's I really dislike General talks about developer experience because it's almost like they should rename it the experience of developers not developer experience anyways then you stick with that strategy until you scale up to the line of prime this is where things just get really expensive right the Firebase curve and some not all curves are the same right not all curves are are are the same and some are more expensive and some are less expensive right dude I don't know what happened to my voice but it's like falling apart right now uh it represents the point where you're spending so much money due to slow code or third party cost that it's worth it to do the hard things required to uh to uh to oh my goodness I had a stroke it represents the point where you're spending so much money due to slow code or third party cost that it's worth it to do the hard things required to more effectively efficiently scale whatever that means in your case by the way my wife had three night tears last night I didn't get enough sleep and whenever I don't get enough sleep I get the worst dyslexia it's like I can't read and every word looks like the word had I don't know what happens but it's like I see had all day long and I can't read and it just it just make I just see hes hes are everywhere why are there so many hes um all right okay you got a hire a rust Chad and kick those react Andes to the curb I know hell yeah you tell or some or something dude I know I don't know what happens what's wrong with this idea well nothing real Theo's correct if you're a Founder Indie hacker or engineer number one at a startup that is exactly how you should be thinking yeah I'm actually pretty fine I'm pretty fine with this that if you're just trying to see if something works if you're trying to get spaghetti to stick to a wall sometimes it's better just to take as many shortcuts as possible like that's why I don't like it's again it's a reason why I don't abstract right away right I don't like abstracting right away because I don't even know if I'm correct in my premise to be honest that sentence needed some commas maybe maybe my brain was also also hurting right and so it's just like people like when you meet somebody that's always the person that tries to write the best version of software first try you often find that that person writes software in which you just have more abstraction more difficulty more hard times trying to get through things it's like not everything needs to be perfect to begin with sometimes it's actually perfect to not be perfect sometimes it's better to just simply get the thing out to see if it even works as opposed to get the thing out that's in its idealistic State hold on my phone's not on do not disturb so I'm just getting like pinged like wild pring pring pring there we go the problem is that you weren't a Founder an indie hacker or engineer number one at a start of 99% of my readers want to be a great engineer and earn high salaries as employee 2 through 10,000 at a tech company there's nothing nothing wrong with that but it means you should think about this stuff differently see again I tell you guys this I'm telling you Lane is so good at his takes I love Lane's takes Lane it's a good take it's a good take the usual Lane W usual L common Lane W just standard Lane W what should you do when I look at the graph above I think how can I be the one they throw money at to come in and do the hard things in other words when you're making a business decision it's generally good to pick the simplest fastest and cheapest option when you're making a career decision it pays to be an expert in hard things good job Lane you're great Lane W Lane W just W's you got a standing I think I Now understand what Trump means when he says we'll be sick of winning Lane you're just tossing out too many W's today I actually am sick of it can you just have one bad take at least so I can pretend that I'm better than you I'm sick of this uh to be clear I'm not saying that you should solve simple problems in complicated ways uh just to inflate your market value that can have opposite effect bad Engineers do that I'd say uh gain the hard skills required to solve complex problem but only deploy complex Solutions when they're needed dang it Lane another damn man this is so good it's just so good just stop with all these things like this is I see this is again this is another thing that I you you put it perfectly because here's the problem you're going to hear on the internet constantly you know complex code is bad simple you should always just do simple it's just like you know what complex problems sometimes just have complex Solutions there's no easy way around it uh FAMU if you're here how easy was it to do Neo's options with your local global global global global local this that the other buffer window these these these these these right like doing options for something like Vim is a complex difficult problem it's yeah Pro proper answer right here by the way Neil Vim core contributor right here that's the proper answer that problem is complex as and it's hard like sometimes there's not a simple solution to things sometimes it's hard and you need to know when hard is needed or when when complex is needed but I'll tell you a real trick is when you can make a complex solution have a simple interface that's the real trick of life it's truly the real trick of life is to have that is that if you can hide it man it can make such a difference you got to know when hard is needed the prime gen go fine here I'm G to take that we'll copy it add quote I think that's how you do it quote quote add that there you go quote 52 of the stream let's go quote I love that we're using a modern HTML 5 browser to send commands over the 21st century network uh to get read by a bot that uses 30-year-old protocol to read it by the way this is talking about uh uh uh IRC written written and C using a language design in the 70s over a network model that was designed in the 80s to enter commands and an editor built in 76 to stream video to people in 9 this is when I was playing around with sending stuff from twitch to my Vim experience this is a fact anyways good quote good quote good quote all right maybe you should learn kubernetes by the way I don't know kubernetes maybe I need to learn kubernetes okay I know stuff about networks I don't really know stuff about this stuff I should learn kubernetes uh people don't like to hear this but difficulty is a moat when something gets easy it gets cheap if you want to be paid a lot you really need to be good at something that's both in demand and hard if if it were easy everyone would be doing it that's why very few people actually made money Drop Shipping in 2015 or buying nfts in 2017 this I mean it's a it's a good point few people few people did the did the thing right he dude somehow he even got a w statement with the word nfts in there and nfts are a scam but somehow he did it somehow this is still a w statement and you just used de of teas that's hard the line of making money aen I fully agree with this graph this graph this graph is absolutely 100% correct the graph is fully erect fully correct fully everything uh it's also why I hate when coding boot camps talk about how easy it is to learn to code it's not easy at least not if you're doing interesting stuff that pays well I do love this take two and also like I I I actually hate that take just in general because your first time learning about an if statement is not all that hard your first time learning about a function and it being attached say to a class and how like how you have these State containers and all this stuff mixed together is actually extremely difficult your first time I I genuinely struggled to learn how to program and then I learned about recursion recursion is genuinely a hard topic the first time you learn it it just is because it's just fundamentally not how your brain works now there's going to be some people that are going to be like well actually I had a math I I I found it super duper easy okay you again are the exception that proves the rule you are not the rule okay when everybody else around you goes I don't get it and you go ah it's easy it's because you're not you're not normal you're you're unnormal you're unusual okay I am the rule I'm the person that completely struggled okay I completely struggled or you're lying or you're a liar there's people who struggle to tweet tweet tweet incoming tweet incoming there are two types of people people who struggled to learn recursion and people who lied about how dang it how do I say this how hard uh uh recursion is to learn what how do I say that how do I say this there's there's like a good one there's a and people who lied about it and Liars I like that I like it I like it and liars and Liars okay what's what's the meaning of this phrase an exception that proves the rule okay the easiest way to do this what's the meaning uh what the why why the hell exception proves a rule here's a very simple here's a very simple thing here's a rule humans should have two legs you can find an exception though right what does the exception say about the rule the exception says trust me you guys don't have three legs okay you guys don't I can tell you right now you're below statistically average Third Leg does not count as a leg okay I just hate to tell you this but that ain't that ain't a leg my friend okay it's barely an appendage so don't don't don't don't try to Pat yourself on the back too hard there okay quit breaking an arm patting yourself on the back but uh F F you I'm just saying it's a little baby arm okay you got yourself you know that hand on Scary Movie too baby hand okay you got a baby leg um but real talk like when I say that rule that is a well accepted established rule but if you meet somebody that does not have two legs you don't go ah rule broken humans don't have two legs you go oh this is unusual this is abnormal this is actually a rule like this is an exception that proves the rule is what that means so that's what it means by an exception that proves the rule right and so when everybody says man recursion was really hard and everybody says that and then one person goes I thought it was easy you're not proving the like you're not proving that the rule is not true you're an exception and you're so exceptional that it actually makes it like it makes the case for the rule more strong is how's this how is this shocking how I know this may be difficult exceptions how how is this hard right so when when someone when everybody around you says recursion was hard to thing and it's like literally everywhere and then one person thinks it's easy it only makes it only makes that Gap larger does that make sense so like when there's when there's 100,000 people that cannot figure out recursion right away and then one person that can you're like damn that's like a one out of 100,000 person this is so exceptional right and so it's called the it's called the exception that proves the rule right the exception that proves the rule right because there's there's except that don't like that that disprove the rule which is also a very common thing that happens right so if I if I tell you you know that usually those things are in uh any sort of like more formal rigorous proof proof right it means the rule is not a topology yes that's that's what that means thank you for all your MTH speak right if I say that you know all people are fast and you can find exceptions EV everywhere it's no longer like sorry dog that's these like these exceptions they're actually disproving your rule people are not fast right you you're wrong you're wrong anyways let's keep on going you can find the opposite right two standard deviations you think that's the that's the thing can you please explain what is hard about recursion asking for my future self to explain it recursion the hardest part about recursion is the fact that recursing is the path to the answer and that a complex problem can be boiled down to an if statement and to be able to understand that that if statement and that return point is how you build up the answer answer from the simple thing that's what's so hard right it's just that to be able to see it for me it was to be able to like visualize it it happening and that's why for me the easiest thing to learn how to do um recursion is a maze solver effectively do a depth first search on a maze to find the exit to me that became something that was very very simple way to visualize it cuz then I'm like oh yeah you literally just go left and you keep going left and then you eventually can't go left anymore and then you go down at that last point and then you can like watch it happen and it's a lot easier I have a free I have a literally free uh algorithms course where I go over what I think is the best way to learn recursion it's free forever no credit card none of that crap go check it out frontend Masters uh I think it's just fantastic I think recursion is extremely difficult it is a very it's a very difficult thing to do right PR Masters yeah yeah they're very nice for me to be able to do that um to be clear I don't believe in standing in the way of progress I want coding and software engineering to get simpler easier faster the result of that however is that the winning strategy for software Engineers is to continually build expertise in in demand hardto learn stuff so should I not learn xjs I'm not trying to single out any individual Technologies except for Java don't don't do Java kids based not cool okay real talk though if you're just trying to get a job in back end in general having Java at least as a familiarity slash being okay with is is a a good thing okay it's a good thing just to have it in in in your in your tool belt just to say you have it it will it will it will help you um I'm saying that you shouldn't be scared of the hard stuff don't jump from easy tutorial to easy tutorial once you found your bearings in this whole coding thing start tackling some harder problems the work will pay off I agree so just something to kind of kind of like uh to kind of uh what's the draft off of there you go draft off of is that like four uh boot. Dev right after I get done with this git course that I'm doing right now the next thing I'm doing is we're going to be going deep probably onto the networking side maybe right and so building out what it takes to understand how like HTTP is actually created like how does TCP actually work how do like how do networks actually exist right um and so like that's going to be a lot of fun DNS we we will raw dog DNS packets we will raw dog them because they're not hard like it's a DNS is not crazy we will R DOA we will send out DNS packets and we will find our way to places and we will and we will then connect via networks right uh for free interesting yeah you're making G course I'm making a g course I have a g course that's going to be on boot. here soon uh I can only get so hard and so like that's that's the hard stuff I think it's really I think it's really nice to learn I think even having a basic understanding of networks will help you in so many ways like have you ever thought about like when you do like say an Express app for all those JavaScript kitties in this room when you do an Express app and you literally just go like you know Express you know Express const app equals Express app.get slon ID what do you think goes on there like a lot of people don't even realize like that goes on like that that that all HTTP requests come with a path that's included that path is then able to be parsed out the colon ID is simply just telling the underlying item to use a Rex even though I hate that idea or really an index EV more more than likely uh and to be able to find the next slash and then to be able to take that yes Santa's reply absolutely so there you go way too dank and like that's how those things work and people don't really a Rex is gross I personally wouldn't even use a Rex you could just literally you could just use index of next Ford slash because Ford slashes are considered special characters you have the URL you have to URL encode those to be able to use them in in that so you actually don't have to use Rex's at all it's pretty pretty straightforward but anyways there you go anyways I I really like L I really like his articles I think his articles are fantastic I love this idea of learn the hard learn the hard things that are in demand the demand of the thing plus the difficulty of the thing means how you make money okay because the reality is if all you know how to do is WR react for Simple Sites and build simple looking CSS stuff like I hate to tell you this but I can also go to v.d and say build me a calculator right and this nice little website besides for flash banging you will also go on here and build you a gosh darn calculator Devon can do that there we go awesome look at that I even have myself a nice little react component fantastic I have some nice Tailwind in here some nice react components bada bing bada boom I don't need you to do that right and so it's just like if this is your skill set you must understand that your skill set though in demand difficulty is like zero bro it doesn't work of course it doesn't work but I'm just saying if you're ski dude how did you miss the point of this how the hell did you just miss the point of what I just did I said if your skill set is building pretty react and CSS that shit's easy okay that's like AI level stuff cuz there's no that's just an autocomplete like we can all see the autocomplete part it's not pretty it's prettier than you're going to make in the in in 15 minutes right or how long do this take me to do 45 seconds you're not going to you're not going to beat you're not going to beat that right that's what I mean like if you're just simply making something simple you got to get better right and so this idea that your skill set and your pay is based on these two axes this makes sense right this makes sense that if you're a highly in demand job you're simply going to get paid more even if the difficulty is low right if your demand's super high but the difficulty is low you will still get paid pretty well but if the difficult is high and the demand is really low guess what it's hard to get that job it doesn't but the thing that this graph does miss the thing the graph does Miss which I think is is very very true is that let's just say uh difficulty is extremely high uh diff we're going to put diff down here and demand up here you can have the difficulty be extremely high and the demand low but the cost right here is incredible cuz it also means the supply is probably really really low as well so like think about compilers think about the people building Swift okay there's only like six people building Swift they're not looking to hire but how much do you want to bet that people building Swift are making a ton of money so is it good to is it the pro maybe it's better to say this right here represents the chance of making great money right that's probably better to say is that the chance of making good money right and so if you have difficulty high and demand low the chance of you making good like uh great money great money is a standard deviation above the average software engineer right if you want to make a standard deviation above the average software engineer then assuming assuming that it's a normal distribution for pay right that there's some people right here some put a number on it where do you live what country what time pre- or post pandemic during Pand like this not the number changes continuously the number from six months ago to today is much much different right so no I'm not putting a number behind it I'm saying there exists a curve and if you don't want to be the nipple of the curve but you want to be that deep inside thigh guess what you're going to need to have something that's really difficult now the hard part is what is the probability of you Landing here well the probability of you Landing here is going to be the Demand right so if the demand is high for this position and the difficulty is high for this position you will you will get that thigh okay you'll get that under boob it's it's gonna be fantastic but if you're over here not as good right bro just stop doing maths just give us the number sometimes okay you know how I said I like you guys I actually take it back I don't like you guys you're a bunch of smelly nerds and I don't like you guys okay I don't like him I don't like any of you the name be in demand learn the difficult things it's worth it every single time boot. de got him it's hashtag ad I think I think this is considered an ad it's hard for me to consider this an ad because it's like is it an ad if you're selling yourself I don't know yeah ad not ad ad not ad I don't know is it is it though I know you guys are saying yes but I don't think I don't think it's uh I like because okay then then then here here hold on we're going to have this conversation even as a part of this if I say follow me on Twitter is that an advertisement and if you say it's if you say it's not then guess what you're a hypocrite really saying follow me on Twitter is an ad really so if I say follow me on Twitter I should also put hashtag ad I know don't be silly I know I'm just saying you're promoting your I know that's the hard part is what is it anyways now you know the difference I just want I always want to make sure that I'm very very clear about these things cuz my my biggest fear is that somebody thinks that I'm not clear about something or that I'm trying to hide something I never try to hide something I've been I've been trying to be very very very very clear on what is and what isn't because it is uh is an indirect ad since you advocate for yourself and the site yeah I would consider an IND indirect one it's in fact boot dodev is the reason why if I choose to leave Netflix it's actually a very feasible route and so this is why it's so important to me is because boot. deev is actually like it's actually it's going to be the thing that saves my BAC and and allows me to do it so it's actually the reason why I get to consider full-time streaming so big thank you boot Dev