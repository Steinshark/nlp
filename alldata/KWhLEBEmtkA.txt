you know what I've always asked myself if assembly is so great why haven't we had assembly to well it looks like we have assembly 2 everybody I have this dumb series where I write stuff in assembly huh but assembly isn't that for old people [Laughter] well [ __ ] assembly is not for old people it's for the truly depraved okay there is a special place reserved for those that just try to write things in assembly okay assembly hell's real anymore meat construct it's basically assembly Plus+ but I didn't name it that because that is a stupid name it's similar to and also transpiles to nasm the assembl for L I don't know who this man is but I am already giving this a thumbs up and I am subscribing this is the greatest this is just the greatest off the rip this is fantastic next but with some very nice abstraction without sacrificing speed or control which is of course what it all about writing small programs in nasm is actually a very good time unless you use all sorts of tricks you wouldn't be able to use in a higher level language because in assembly you can freely use the CPU registers without having to do whatever the hell this is but desite this I didn't realize in C you had to do uh string dude there there is honestly no the moment you program and you program it via strings you already know you're done [ __ ] up like you should just know at this point that you you're goofed right you goofed hard now with C I can understand cuz C is obviously the language that is already you done [ __ ] up C is you know my teacher once when I started learning how to program this was nay 20 years ago uh got up and said when you use Java it's like you're using one of those sauce where you have to put your feet on two pedals to release the safety then you grab with both hands and you bring it down and you make one cut and that's it that's all you're doing when you use C++ it's like you have a skill saw and you're and you're and you're making it like you you can mess up but it's still kind of safe you know it's a little bit safe and C is kind of like a saw blade just floating and moving in the air and you're just swinging wood at it and that's how you cut things that's how he described it to me I always thought that was a really funny way to describe it but it's even more funny today that I'd rather program in C than C++ but with see you don't measure you don't measure or cut you just throw you just throw wood at a floating moving saw and it might not work for a long time it does a little of little things that make it a very frustrating experience like let say you want to call a function you have to manually move every argument in the CPU register before calling it then you get to writing the function itself and it gets even worse cuz there are no actual arguments you have to either remember or come in what register holds what parameter and then try not to confuse RDI with RSI which takes up like 90% of your brain power I mean that's because assembly is not assembly is assembly was was for humans when we didn't have any memory okay we got memories now we can just waste everything come on we got CPUs we got memories we not supposed to use RDI anyways this is actually really awesome I'm loving this this is this is this is super cool NASA make assembly great again coding so how did I attempt to fix these issues here's a function that makes a string all lowercase it checks if the current character is not a n Terminator first then if it's in the uppercase range if so it subtracts 32 which turns the character into its lower case equivalent I gave functions a pretty average syntax except you still have to call them with the call keyword there's just so much thex in assembly code that doing it C style didn't seem like a great ID to me that's not bad look at that hey that's hey that's kind of cool hey that's kind of neat now to really avoid having to remember in what context which registers mean what I implemented scope macro that are only valid in their respective scope you can mcro them to just about anything as long as it doesn't have any white spaces then there's if statements they use pretty unique Syntax for the comparison operators they're derived from the in is that son of a [ __ ] using white space significant oh no I'm out and therefore I am out I thought we had something special here code nibble okay I thought I thought I was in love I thought I was in love okay instruction names for the conditional jums there are currently no and or oral paraders now I wasn't sure about implenting I feel like one of the strong points of writing in pure assembly is the creativity you can apply to the program's control flow interesting a while loop okay okay okay okay I thought you were cool this is really cool but I figured in most cases a simple wall Loop is all you need so I might as well yeah and there we go besides some small stuff that's what makes up the construct language so let's get around to actually compiling or more so transpiling this program to nasm we read the file pass into the compiler then parse it into a list of tokens that look like this by the way until until you until you have your language as the compiler for your language it's not a real language I believe that is step one of any real language is that you have to bootstrap yourself that's how you know you are the ultimate language is when you can write your own compiler the typescript well all I mean what do you think the C compilers written in in an assembly come on Rob Pike does not agree with that well hey what what do you think the go compiler is written in what's the what what is what is what do you think Go's written in see okay well that's pretty badass you can also write you can also you can also write it and see but it is currently in go if I'm not mistaken if I am not mistaken it is fully full ass in go and by the way yes it is it is a requirement okay I don't want I don't want to hear your guys' crap okay a language is not a language until it can compile itself requirement has a token type and indentation cuz this language is in Den sensitive a bunch of pointers to the different stres for the possible types it could be and a bunch of pointers to the different Stripes that it could possibly be hey by the way kids you don't need no unions okay we don't we don't need no some types we just got all the types all right oh you don't got all the types what your language requires you to do a lift operation sounds shitty to me I would much I I have all of them a list of child tokens for ifs Wells and functions which is assigned in the next step the linearized tokens function what this does is just recognize what tokens belong to a certain if while or function and as okay so this is going to sound incredibly pedantic and Incredibly Petty okay incredible so I want you to know that before I say it out loud but my greatest programming pet peeve is when fours and ifs look like functions not four space inting honestly the two versus four I just don't like two it's hard for me to read okay it's it's hard for me to read that's it okay I I'm just not used to it I'm sure I could get used to two spacing I'm sure I could fall in love with two spacing it's just a matter of me using it right but not having a space it it just makes me it just it just you know it just hurts me okay it just it just hurts me a little bit all right I appreciate all the rest of your spacing the fact that you space in between here in between the parentheses and the first argument confuses me that you don't put a space right here you Dell and Dell learner were you Dell and Dell you kind of seem like a dell and Dell kind of guy okay code nibbles the D okay it's ch tokens it works by using a stack where it keeps pushing the token changes indentation and all the tokens on that new indentation then by the way can I just take a sidebar here for a quick second can we sidebar there I don't know what it is but ever since I started using languages that don't don't require parenthesis around if statements and all that kind of stuff it's like there's there is there is absolutely nothing more glorious than not putting parentheses around an if statement I had no idea I wanted it that bad I liter I had no idea that's what I wanted in my life but it is it is like it is so good shook Shook and dismayed was my feeling iten happed about a year ago I was using rust for about a year I always kind of didn't like the idea of not having parentheses around things I was like you know you know what I mean and then all of a sudden I realized wait a second I love this no semicolons uh the whole no semicolon thing I don't really care about it really like honestly copium detected okay shut up we're sidebar over and Pops it off once the indentation goes back down and now it's time for the magic the apply functions that convert all the construct code into nasm code the construct tokens still remain but they're just ignored in the last step of the program let's start with applying the functions first it adds a tack for the code to jump to when calling the function it then Loops over all the arguments and transforms them into construct macros which get applied later then it adds a return cuz otherwise everything will just flow into other then come the statements here that is really clever I think it's really clever that he transforms his code into later steps in which are transformed again that's pretty clever that's that's pretty dang clever you know what I like that so much I'm going to subscribe to you your cleverness knows no bounds like with the functions it adds attack but at the end of the f- statement it then adds a compar instruction that compares the two values from the condition after that it can jump to the end or continue to the body of the if depending on the result of the comparison now since we want to jump to the end if the condition is not met we have to inverse the comparison first now we can slap a j character in front of it and that will make it jump to the end if the condition is not met while Loops are pretty much identical to if statements except they have an additional tag at the start and a jump to it at the end so it Loops as long as super clever function calls are very simple as well it just Loops over the arguments and moves them into their respective registers then calls the specified function with the nasm call instruction then lastly are applied and the tokens are linearized and converted back into a string in this process all construct tokens are ignored it's then written to a file for us to assemble and Link so let's do exactly that first we run construct to transp power program into nasm code let's do l64 format since we wrote it in 64bit then we assemble it into an object file with [Music] nasm lastly we link it with the c standard Library since we do use print F in our code and Tada hello world in its Peak form lowercase let's go it is such Peak form hello world without the comma and lowercase it is truly truly so good it's that simple you know you know okay can I be can can we just be real for just one quick second here okay can I hey hey can I can we be real there were less build steps than modern JavaScript okay less build steps so that's about it I'll put a link in the description to the GI up and maybe Discord for it anyone ends up using it and has any questions or idas or whatever I do realize that the use of assembly nowadays is is mostly just writing very small optimized programs so most abstractions aren't really welcome but I think even if you're not going to use the wall Loops or if statements the rest of the features are still very convenient anyway that's all thanks for watching and I will see you next time amazing that was a great that was a great video I like how they literally this is I I released this video this morning and and and I'm on the account that released it why are you doing this I just don't get it why are you merching me my own videos that was a great video that was super cool I actually loved I loved it I loved it I absolutely loved that video go check out this guy hey go give the video a like here first off give this guy a like this guy was so fantastic second off go give this guy a subscribe absolutely fantastic absolutely love this um live and subscribed thank you good uh last ly by the I I I expect this number to go way up um but lastly you know this is something that you should take away from this is that even though this is I don't know how useful this actually would ever be building an assembly thing like this I don't know how useful you'd actually ever be able to use this in any sort of real sense uh but the fact that he went through all of this learned assembly was able to create something that's pretty cool like the thing is is that if I was looking to hire some guy you know who I would like to hire the people that make interesting projects right this is awesome Tom no I don't want to do Tom I'm not doing Tom anyways I just like I love seeing interesting projects because I just want to see someone talk about something that's complex and hard and takes your time you know what I mean it's it's super it's super cool absolutely love this uh think this was fantastic uh I thought his video format was really really well like the whole thing was done just super super well not even Tom not even Tom not even Tom I'm not even doing Tom not even doing Tom okay the name it's the primeag