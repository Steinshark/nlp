the Stockholm syndrome of squeal why relational databases need a diverse competitive ecosystem of query interfaces I don't know what it means I don't know what it means this is part one of a series analyzing the relational database landscape and criticizing the design of structured query language this article our ecosystem of Technology tools is a modeled after a free market is all of our technology tools free market win we have many platform tooling uh and people competing to be the best the best browser the best language the best text editor neovin by the way the best terminal emulator uh the default one probably you may have heard of xterm 256 back in 1986 you may have heard of that one the best shell the best line of text that appears above the bit where you type commands into your terminal there's competition everywhere and that's great it's great for people who build infastructure and products because better tools make their jobs easier it's also great for people using the infrastructure and those products because they get better experience doing whatever they need to do with those things a question I've asked myself my mentors my friends and colleagues is what the hell's wrong with viewer what's the deal what's the deal with databases and why is there no richf free market of competing D ideas what isn't there literally like 9,000 databases I've often met with responses such as squeal is fine don't fix what ain't broken everybody uses it why Try To Change okay so I'm actually really intrigued by this what is he what is what is Barnaby trying to sell us here because obviously maybe there's something different that we have all missed I can always buy that there is a better way of doing things that we've optimized into a local Minima that may seem nice but actually isn't good which is honestly odd considering that uh this is a the industry within which there are entire movements almost religious in nature around fixing and replacing old tools with new tools yep of course asking these questions as a developer straight out of University was not normal the general Vibe was that the bright eyed and bushy tailed desire to make everything perfect would soon disappear well I mean I think I feel the the the the first problem which is that one can strive for but obtaining H but now but I'm now a senior engineer I've built a ton of products and tools from Dev tools to consume apps and I've written a huge amount of database related code from simple queries to long chains of or methods calls method calls and all manner of multi-level joins recursive spaghetti and the odd mongod DB aggregation who doesn't love a good mongod DB aggregation where you accid put limit first and then you never get any results and you're just confused as to what's going on because you didn't realize that your serialization method for your mongod DB abstraction puts limit first and you didn't know that cuz you handrolled your own mongod DB aggregation thing that one time you know you did that you know you did it and it was a mistake okay I may or may not have done that last year I've still got a lot to learn at this stage in my career but I feel like I'm at a point where I can vocalize my thoughts on this Gap in the market okay so let's talk about the free market of software okay I'm ready uh just call me trustbuster big big data okay here we go I'm ready trustbuster Big Data let's do this typescript is an entire language backed by a trillion doll Corporation with the sole purpose of reducing the likelihood of undefined is not a function popping up in air messages I love how wrong that is but I love I love that it's stated that way you know what I mean I love I love it I absolutely love it the T the goal of typescript is to make it more like C so that c programmers think the web is Microsoft I also love that take a lot Dino was started by Ryan D who created node.js in an effort to provide a better platform to build applications V8 I think there's nothing more hilarious than Ryan dll after seeing his first child and going you're ugly and created a new child and created effectively the same child again I just think there's something very funny about that there's just something so funny about it it's just so good uh it's pronounced vate wait what what uh uh you can't escape Heritage dto throws out backwards compatibility and attempt to fresh start and do things right uh it has a decent following and looks somewhat promising it uses normal typescript compiles to JavaScript under the hood and executes on the V8 runtime yes of course because I mean it's V8 you can't can't run typescript uh it's basically no. JS but with Native typescript support and a different approach to dependency management okay okay okay it's actually pron wait stop shut up llv M and jvm both facilitate the existence of about 16 major languages not including small side projects and non-commercial stuff I don't think I've ever really heard these two things compared in this way this is the first time I've ever heard these two together at the same time okay just throwing it out there they're both lowish level platforms that provide a runtime optimization and crossplatform usage if you write a new programming language and it can be compiled with llvm or jvm your new language will run on basically any computer on the planet Barnaby got me on that one Barnaby got me he managed to start off a statement in which I didn't I didn't see coming and ended it in a way in which I can't technically disagree with just saying just saying might have done it might have just done I've been barnab I've been barnab on that one there are three major web browsers currently on the market Market Chrome chromium and chromium uh well Firefox and Safar yes they all have slightly different advantages it can be frustrating for a developer sometimes to build a website and we web experiences because of because of this but it's all for a net good consumer Choice Innovation and Market competition Safari introduced a way to check if the user prefers a dark color scheme and shortly after it became a standard across all browsers Firefox created development tools and they are ubiquitous nowadays which is funny because I can barely use Firefox development tools you know Chrome pushed for web assembly and that exists now so that's cool I guess oh my goodness oh my goodness that bird was too intense Barnaby the Barnaby burn just was so intense I don't even know what to do with I don't even know what to do with that you get the idea there are examples of Market competition modeled all over the industry even though the vast majority of these products are often free to use open source and accessible uh access I they are still treated as products and the teams building them treat competition products as competition or competing products as competition okay the database Market it's far less interesting trust me okay pretty much every mainstream relational database out there uses some dialect of squeal there are no mainstream relational databases that use any other method of interfacing with data the top 10 databases according to DB b engines.com seven of them are relational all of them use squeal okay this isn't very diverse why do you think that is I'm kind of just thinking about that why why is that and so I'm just going to throw something out there as like my kind of guess okay is that at some point you had a relational database that used squeal and then for a second database to come in and compete they too used squeal so that it was an easy translation from one to the other I'm just just throwing it out there as my guess the reliable operation of databases is about 10,000 times harder than drawing clippy it's much much much harder to evolve product under those circumstances with this kind of change uh of change resistance Fair thank you princess again I appreciate that it's an interesting take it's it's certainly an interesting take I'm trying to kind of wrap my head around why why squeal is the culmination of 50 years of engineering by some of the most brilliant people in the world it's not so easily replaced Fair uh that's what you'd still have new projects being non squeal but you don't really I mean some projects just use Excel right dump all your data into Excel every attempt at no squeal has been a total cluster fck yeah it really has this isn't very diverse is diverse the goal right like is that just simply the goal I thought the diversity on these things was what they offered not the language that it's back ended by right like I thought tiger beetle was a finance hyperfast database still using squeal but what it does is the competition I'm a little confused as why squeal has to be the point of competition and I'm not sure if I'd want squeal to be the point of competition because then you have three different versions or five different versions or X different versions of squeal you're going to have to do versus Just Simply Having the operation of the database itself be the competition to me that seems better but let's keep going I'm just saying to me that seems much much better each database has its own dialect of squeal uh with Innovations on top of the bass language but there are no really new ideas here squeal is actually a backronym it was originally named squl uh as in a SQL to square specifying queries using a relational environment yes that's the whole mouthful why do nerds love long acronyms so much I don't know uh we also love initialisms okay because if you say it SQL It's actually an initialism uh so next time you're arguing with someone about the how to pronounce squeal you can drop this knowledge bomb yeah it's pronounced squeal squeal was designed in 1973 and made available in 1979 it hasn't really changed much since unlike the rest of software development World okay yeah but do you see what they're working on okay do you even know what that is and aim database admin mixing on a turntable in order to perform a join query yeah I mean is is she a a DJ I don't even know I don't even know okay I don't even know the problem here's the actual criticism part because there's a lot of to unpack here regarding what's uh actually problematic with the status of status quo of relational databases I'm going to summarize the issues here and expa expand in the future posts I'm aiming to keep this less of a rant and more of a set of proposals for future work in the relational database Market each future post will outline the issue and a detailed solution in hypothetical new product okay a human machine interface versus application programming interface why not both I can't say quite understand this I might I honestly just might be too dumb a language within a language via string literals is how you lose all static analysis and type Safety Fair Fair that sounds like a JavaScript problem honestly other languages do have type safety built into it and even sounds like JavaScript might even have type safety being built in with like squeal templates right uh squeal is too high level to Foster an ecosystem of Novel approaches to interface design I think there's just like a lot of fundamental problems even with that statement which is I mean real talk who here would want a novel approach to interface design for your production database it sounds a little risky I mean I think that's part of the problem is that there's a reason why squeal sticks around shout out me on Twitter yeah yeah South Claus I mean I I like the name South Claus that's a great name by the way um I I I don't I mean I there's a lot of worries here which is it's just oopsies I accidentally clicked it it's just it's interesting there you go boom follow did it oh it's his birthday yay birthday ah birthday um anyways happy birthday happy birthday isn't it all just a huge waste of time trying to change the status quo may feel like a sopian task but there's value in it did you guys watch uh sisifus on is it called sisifus on uh Netflix Korean drama space time travel I watched it it was nice uh the squeal specification is fairly antithetical to the open source and free software world uh you don't have to pay to get access to the latest an specification if a budding new software engineer wants to dig into this document for whatever reason and understand what text is behind the world's most common data query languages they need to Fork out 150 Yo which is a lot of money if you're not already earing earning a fairly decent software engineering salary in the US UK or Europe meanwhile I can freely access the poix specification the HP specification the ecmascript specification better known as yavas script the TCP specification or anything written by the ietf which are actual web pages not awkward PDF files I like this that's good take I do like that I think any of these things should be fully available I do think that it's very interesting that ansy specifications are pay to play we're not that Den degenerate okay calm down Ryan Winchester I can take essentially anything uh any existing technology the world software depends on by the way that I mean I when I got to implement uh websocket protocols it literally it was just me opening up the RFC reading it and making it and then it worked with Autobon it's like pretty cool like that's a pretty cool aspect of JavaScript or of not of JavaScript of rfc's it's pretty cool I can take essentially any existing technology in the world uh the world's software depends on and build my own version of it and test my implication against a written specification yep uh if I do decide to pay the price and read the spec I'm greeted with a huge document because squeal is a huge complex language and it's far from structured and far from declar ative I read part of the ansy 1999 specification which is 23 chapters spread over a thousand pages every spec gets ever more comp complex sounds familiar C++ suffers the same fate to the point where professional C++ programmers I know have told me their company just sticks to C++ 11 because the majority of the new features in 17 and 21 are superflous there's some nice things that happen later on okay there's some nice things if you want an open standard just use postgress just use the postgress one there are plenty of examples of attempts uh some successful to break away from the status quo and build something better go rust and Deno are brilliant examples of these both rust and Dino aims uh to not only provide languages uh but also ecosystems rust cargo and rust up tooling is far superior to the sparse landscape of C++ package managers and compilers fair statement that is a fair statement it's a rust article by the way it's a rust article uh and by the way rust rust is just C++ o camel Dina throws out compatibility for a newer go inspired approach to dependency management I'd honestly like to see a similar movement in the database World hot take what uh prior art some people already trying to build better tooling for databases most of this work Builds on top of squeal similar to how languages built on top of JavaScript there's some great projects out there that are attempting to make working with databases easier I do think all of these are just Frankenstein's monster style abstractions on ever still complexity that is squeal though I do love that it's correctly instead of saying Frankenstein said Frankenstein's monster did you know that there's a line from Frankenstein in which the author Shelly uh she was reading it and I believe it made her lover pass out from how scary the line was and it's a line from the rhyme of the Ancient Mariner my wife read me rhyme of the Ancient Mariner last night it was very beautiful it was it was a beautiful moment we read poetry together weird by the way not a big deal it's a woman it's a real woman you wouldn't understand I get it you wouldn't understand I'm probably going to air you guys if you reach out on Discord cuz I'll be hanging with a woman a real one you wouldn't get it back in 2019 uh prevus wrote we can do better than squeal uh and it was received with fairly decent sentiment across Hacker News and lobsters this is definitely a rust we're definitely we're we're running towards rust real fast there's a lot of don't fix that ain't broken mentality and no desire to innovate on The Hacker News side which is to be expected but there's clear desire between those replies for something novel in the database world that being said I don't think hdb really solves the problem it's still string literal oriented query language not an API sure it proposes some more logical syntax but it's a whole new language see part one of the follow-up post uh for more details on this isn't the string literal API like isn't the string literal I mean I have a slight problem with this because isn't the API wouldn't that just be an omm right like if a database offered an API isn't that just an OM string literal is a literal transport to a separate process across IPC yes no yes and no no yes kind of right because you couldn't just have it like what would the API B you'd have to it' have to be like chainable it would have to be within your process to build up something to send across the quote unquote wire to the other process Andor other service across the internets camera died come on gosh I left it on all night again okay I left it on all night again dang it come on okay I'm dead all right Prisma I love this tool it's really something useful that saves a ton of time while not succumbing to the usual downsides of traditional ORS uh the ones that map objects to relations I think there's a lot of database world can learn from Prisma it solves the type safety and schema source of Truth problems outlined in part two by generating type safe code so in other words I feel like I got pretty close there and saying maybe just maybe it's not the database that needs this problem solved this is not uh without criticism though some of the existing complaints behind ORS are valid for prism uh such as they need to perform complex queries not being Satisfied by the generated code another issue is the code generator must support your language Prisma users have already been burned by this when they dropped support for Go I mean it's why I don't use Prisma it's as simple as that well I mean there's other reasons but one of them is Javascript exclusive Library boo uh an an is a goto replacement for Prisma for go developers it's another code generating database first tool for go programmers to talk to relational databases I've been using this on a few projects since 2021 and it's fantastic I've not had to write any raw squeal yet apart from one instance where I needed recursive common uh table expression okay okay okay interesting I mean I maybe I should check out end and feels like the conical database adapter for go I'm using it for all my go projects now and I have no real complaints except for how the source code BAS schema definition is quite complex and requires frequently reading of the documentation combined with trial and error that is this is just not a way to sell it man I feel like I just walked into that one that was just like such a glass door walking right into the glass door it's fantastic but it sucks uh prisma's fully declarative schema format also generates safe uh migrations is hard to beat yeah no raw dog in that squeal uh squeal C there's another uh go tool I'm a go programmer by profession so naturally a lot of my evaluations are in the go ecosystem fair and this uh this one parses squeal files and uses that to generate go code that binds uh the arguments to the squeal statements it's a neat idea and definitely a solid choice if you don't mind uh writing raw squeal I don't mind writing raw squeal real talk I I'm fine writing raw squeal one benefit of writing squeal files is that you can get sometimes decent editor integration if your editor is hooked up to live databases which you can totally do that's an LSP I mean that's literally an LSP if you can send your credentials over the LSP or have them available in an environment you can create an LSP that queries the tables and understands what you're saying like to me I I don't understand the problem with that since squeal has no native way of writing declarative schemas you have to connect to a running database yes visual Paradigm this is an old school uh business process modeling Suite that also happens to provide code generation from database schema definitions is actually the only other tool I could find that does one it works with Java only yeah there's like my sque I think there's my squeal editor isn't there isn't there like uh my squeal something like that it's a some sort of visual editor where you can create your tables and do everything and then you can generate the squeal from it if we didn't have squeal we would need some other way to do condensed and audit the uh the operations that the client is trying to send to the server even just for debugging I don't see the problem my squeal workbench that's what it's called workbench yeah my schol workbench I used that way back in the day it was nice that was a long time ago though I was using PHP during those days I was PHP with the best of them can we do recursive of for loops and squeal what uh all right cockroach DB I'm throwing this in here because this is an example of modern implementation of an squeal of an squeal database that's post post squeal compatible it's written in go and has Venture backing driving the development of software cockroach labs also provides a cloud offering which claims to be scalable across regions oh very interesting their blog is a brilliant resource for the internals and the database core is open source so it's been a great Learning Resource for me but what I really think is impressive with cockroach D DB is how they've managed to disrupt the status quo being post squeal uh post squeal compatible and horizontally scalable is a huge sell for a large applications which need to store a ton of data and be fail resistant very cool okay so cockroach is pretty neat all right now all right all right all right all right and now one interesting detail is that cockroach DB isn't fully a conforming of the squeal specification or even post GRE squeals dialect of and features uh it still Rose to fame and became a fantastic tool why because a lot of the applications literally just need four features create read update delete what cockroach DB shines in is providing an amazing overall experience all the way from deployment to queering to scaling out see again I I still think that there's like a confusion in this article which is tying squeal the query language to the tooling around squeal right like what makes cockroach nice isn't the squeal it's the things around the squeal and so I feel like there's like this this this this this General confusion that I'm seeing which I I don't disagree with I actually really agree with what he's saying like completely Barnaby I agree with you it's just that landing on squeal as the problem just seems weird because Dino still uses JavaScript so the problem wasn't JavaScript if you're saying Dino fixes it right like I'm just saying it's it's the tooling around it that you want uh there are some great tools out there but a lot of them in my opinion don't quite solve the true underlying problems with existing relational databases I think there's a lot that can be learned from cockroach DB rust go and Deno I like to say it different every time focusing on the ecosystem and Tool chain side of things and understanding that they don't need to be perfect and satisfying every use case if a language has a decent package management decent performance decent community and a decent compile time then it's far superior to a language that only has perfected performance and sucks everywhere else go versus C anyone bold statement because I think there's there's definitely time for C like the reasons why I'd use C go wouldn't be the like alternative does that make sense low-level learning is not happy not happy about that like I know go and see are practically the same language like they are super close in how they feel and how they look it's just C is not meant to be used in the same places literally go is like if C had a baby that's meant for web if feels odd to compare yeah it does feel odd to compare it's just an odd two to put to pit against each other it'd be better to say go versus like say JS right JS does not have perfect performance but it it also has like sucks everywhere else right just saying it sucks everywhere else and it doesn't have perfect performance it seems like JS would be a fair comparison may maybe you want two garbage collected languages but one with great tooling versus one without great tooling that probably be a fair way to compare uh so I think there's a huge gap in the market here for database system that provides a decent features decent type safety via code generation decent command line interfaces and a decent API it doesn't need recursive Common Table expressions and windowing functions because the people who need those features will likely stick with existing databases anyways um if you like this article uh or if this article makes you feel things at me on Twitter I think there's a lot of cool things said in this art honestly a lot of cool things uh I know I'm sponsored by turo but definitely check out turo I think that turo offers something very compelling which is squeal light edge-based replicated squeal light which I think is really cool local reads remote wrs like there's a lot of cool things and so again that's a tooling around a database which kind of falls into this category which is you want tooling right people want tooling squeal light is actually amazing there's a lot of super cool things with squeal light like the fact that you can just point a squeal light driver to a file URL and it just works means that you can do some really interesting things with testing and I mean that there let's see I still think every programmer should learn C so many computer science Concepts explained I do agree see there's a lot of great things a lot of great things I use lib squeal I just say squeal light because everyone knows squeal light but lib squeal is turo for work and it has more stars than squeal light and it's open to the public to make contributions to so it's kind of like the neovim of squeite it's the neovim of squeite you're a squeal heavy kind of guy yeah yeah yeah I get that I get that welcome to Costco I didn't mean to turn on alerts I meant to turn on that hey hey the name is hold on what is this hot take what is the hot take we're looking at I want to see the hot take give me this hot take dude I wish I could just see the thread or click to it all right uh my hot take is a beginner should learn on SE I don't think that's a hot take it always uh it was always that or Pascal fair I do think you can learn a lot by learning C even if you're like even if you've been programming JavaScript for 10 years and you have absolutely no other language experience learning C can really help you in day-to-day life honestly there's so much you will understand about JavaScript by programming and C there's so much you will understand about the World by programming and see even if it's just for a moment you don't need to do it always like I'm not someone that's that that that is like a c supremacist right I don't I don't think it's the greatest language ever I think C is incredibly inconvenient uh I would rather go use go and just make a web server but you can you see can C help me get my girlfriend back I mean you would have been a chat to begin with I'm just saying I learned all about UB pointers and segals when I got into C exactly you get the exact idea which is it just helps you understand what's happening in JavaScript it helps you understand what's happening in go it just helps you look at a language and go okay I think I get this I think I think I can get this you got to be careful though C does transfer hair from your head to your to your to your chin okay they call neck beards for a reason SE fault will teach them something all right yeah C paid for my Honda Civic let's go let's go uh you actually talk to a computer and see like literally you talk to the computer you're like give me some memory I'm going to make the memory say these values and I'm going to point to it and I'm going to interpret those values in this shape and it like works it's great there's a lot of cool things about it the name is the primagen is the cagen