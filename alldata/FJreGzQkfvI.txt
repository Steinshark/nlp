all right hey throw away your first draft of your code okay just throw it away get it out of there get it out of there Monday July 31st 2023 the next time you start on a major project I want you to write code for a couple days and then delete it all just throw it away so hey here's what I literally did I I want to take a quick break guess what I just got done doing I'm getting pulled on to a major project where they want me to integrate my library into some sort of react ecosystem using some high high charts which is like a paid for service in which I went to their site and their docs were down and like 500 all the time and it was a piece of crap and so instead of doing all of that what I did is I made a little client I made a little server that would act as if it was a production server behind all of our VPN and everything then I made a simple little react site that used chart JS and I actually built everything in its own throw away a little bit you know platform and then I use that as an example for people to look at how to use my library now I'm going to that project and I'm building out the end point I'm not actually doing all the stuff stuff but I have given an example of how to use everything and providing an endpoint in the project and I'm hoping I never actually have to touch the react part of the uh of the thing but it's totally true make like these drafts use something as something different you know what I mean by the way using react was terrible I had to use like use ref I had all these issues I could I I every time I use react I remember why I hate it every single time I forget it's not solid render functions are not Constructor functions I do everything wrong I just ah anyways I'm serious and you should probably have some of your best Engineers doing this throwaway work it's going to save you time in the long run absolutely in fact you know what I actually think this is such a good point uh and and why do you delete it why delete it instead of just simply reworking it uh one reason to delete it is that when you delete it you contain in your memory all the places where you fell short but without any of the exploratory code to kind of put you into a box do you know what I mean because when you have code already written you tend to stay in the box or deviate slightly to rewrite it or to refactor it sometimes it's harder to rewrite it on smaller pieces of code so to just simply delete it you remember all the places you went wrong you can restart your architecture from a good point this time and it will be better like it will be better in the end the usual approach in terms let's see in software teams a common approach for developing new features is something like this the product manager collaborates with the engineering team to come up with the description for the next major feature this probably will include acceptance criteria and there will also be a designs of varying Fidelity yeah this seems about right uh then the engineer on the team takes the point of the feature or takes point on the feature and decomposes it into smaller tasks which can be split among the team they take the high level feature description and turn it into a complete list of all the things which need to be done to complete the feature okay some of these are open-ended if complexity is unknown or more investigation is needed so they are time boxed so the others are given some estimates story points are popular the issues are all assigned and loaded into a Sprint then we go on our way and complete the feature and ship it on time by on time we all know what we actually mean you first get it delayed because you were way too aggressive on your estimations then it's on time after you've reworked it twice okay well we we all do that except we don't shift the feature on time while working on this feature we inevitably run into things we didn't anticipate maybe the data is messy in the database and we didn't realize that now we need to add a data cleaning task maybe there was a portion of the ux that was more complex than we realized that task takes longer than we expect and maybe there was a portion of the technical design that was just sub-optimal and we had to redo it we can save a lot of this trouble and a lot of this work by making a quick and dirty first draft and throw it away let's go always and you know the best part about doing a draft is you can build it outside of the product do you know what I mean like sure you can still use the same data source but you don't have to build it in the application just build it like you know just build it just kind of like get the pieces running and that's one thing that I I just love doing that because it just makes life so much easier what I'm talking about is prototyping why prototype when you develop a major feature product anything one of the defining characteristics is that you don't know what you are building the only way you know what you are building is if you've built it before this leads to a problem if you don't know what you are building how do you know where the rough edges are how do you know what the design demands and what tactical decisions to make foreign I love this I love this some of this you can glean from experience by the way I always get this thing and I with this take right here I get the exact same thing all the time which is this you don't need that because this happens on Tick Tock because inevitably what will I what will happen is I'm gonna say something like this learn how to type fast as a programmer it's going to help you a ton then someone on Tick Tock inevitably will cut that out and be like actually this guy is kind of an because really I spend all my time thinking no you spend all your time thinking about a problem you don't know where the rough edges are you make a dumb design you finally program out your uml diagram and what happens at the end you were completely wrong because you didn't prototype and you didn't prototype because you don't know how to type fast and it takes you way too long to prototype just learn your tools get good at your tools prototype and boom magic happens you can get so much more done if you just learn your tools and guess what a keyboard is one of your tools learn it do you see that you see how pretty that looks okay learn it touch it feel good with it you know what I mean anyways I've been around enough blocks enough times to know that yes we do need to put in retry Logic for requests but there are usually some aspects that you just cannot predict and some of these are unknown unknowns absolutely for the unknown unknowns nothing beats exploring that territory firsthand this is where the Prototype comes in when you develop a prototype you get to actually go develop the feature a first time so that the real Feature work is the second time and you have more information you know the database is a little messy because you got there and found out you know oh my goodness I love that so much my database was so messy on my last project uh and then we actually got a V2 which went from Json to prototypes and literally I spent two weeks refixing it and some of my stuff isn't even fixed up completely yet you know that this section of the back end code is hard to extend because you had to hack around it with a machete so how does this work there's a there is a Mystique for prototyping but the actual process of it is pretty approachable for context I'm talking about one approach to prototype here others could work as well the process of prototyping that I like to use at work is to take a rough high-level description of the problem and give it to one to two highly skilled Engineers just to implement gosh I love this just uh give them a couple days and see where they get yes I like it to be one of those Engineers but sometimes other people should get to have fun too that's it okay that's a little bit of a draw the owl just draw the owl already uh but it really ends up being pretty simple the director for the engineers is not to make it a complete feature but to make something to demo if you can and figure out what's going to be hard that is the part of why I think prototyping work is often best completed with some of the more experienced Engineers they'll move fast they'll learn a lot and they'll have the contacts needed to know which parts to prototype the most for the investigation oh gosh this is such a good take this is such a good take dang there are a couple of ways that this can be integrated into a team process organize hack days uh we do these at work and they are a source of a lot of the ideas and prototypes of major features that get into the product when a feature comes out out on one of these uh it's already vetted and prototyped okay I don't like this idea dedicated uh Sprint Time Photo Pro I like this idea if you know a feature is coming down the road you can get out ahead of it and give someone time to do a prototype before it makes it into the Sprint this is something we've done at work too I did a prototype like this recently and we were able to save some time on a project okay for me this is what I like this makes sense I I don't like hack days in general unless if they're meant to be light-hearted meaning like none of it's actual work it's pure exploratory fun developers come up with your favorite ideas and make them we'll have a competition we'll have voting and we'll see who wins right I don't like the idea of hack days being like hey it's a hack day everybody do your same work but more more of it can you do it in 24 hours we'll get you Pizza get the pizza get the pizza get that no I don't want your pizza or your everything bagels with your almond Maple spread okay I don't want it so far what we found is uh is that features which have prototypes have much smoother development of features which did not go through prototyping tend to hit more bumps some of these bumps might be due to the nature of the features some are just as amidable amenable uh to prototyping but prototyping could help with others in that light I've been pushing to get prototyping as part of our official process and the reception has been very positive you get to work for 12 hours or more come on down wait do I really have to throw away the code yes all of it this I do think that this is an important part when you absolutely have no idea right uh typically what I'll even do as part of this is when my features are small enough like say that one thing where I had to make the react graphs I put everything into like two or three functions and just made it's huge we're talking about each one of these functions were like 400 lines I didn't care I just wanted the thing to work and I wanted everything to understand and then once I did that I went okay what is the purpose here well I know in production I'm gonna have this Source on the command line I'll have this source so I'm going to make a little like oh I'm going to make a like a little component that I can di in a source and it will work out okay and I need to be able to request these so we got we can't make assumptions okay we'll do this and then I need like a data aggregator that will make as like literally millions of rows into as small of data as possible so I can optimize each one of those processes but I kind of got the idea let's make it happen right oh no I know that functions can get bigger trust me I'm not saying for 400 is huge it's Reckless but someone can always do better I get that there's the Olympic Athlete there is a line in Old JavaScript core that's 8 000 lines Long Function okay I'm not saying I'm not saying that you can't beat me okay I've mutated an 8 000 line Long Function have you done that you know how comfortable it feels it doesn't feel comfortable it's really tempting to hang onto the code after a prototype to speed up the feature development but it won't do that it'll just sabotage the prototyping absolutely keeping the code and knowing that you might completely changes the psychology of the prototyping phase for the worse absolutely let's go if you know that you're possibly keeping the code you do things in a proper way which means moving slower put it all the exception put in all the exception handlers all the log statements structure the code nicely refactor things while you're in there modulize them properly after all it's going to be reused gosh yes and yes this is like a this is like developers wet dreams right here this is fantastic I'm loving everything I'm hearing if you do all that you end up covering less ground and learning a lot less in the prototyping phase the alternative is that you go fast make a mess and then you keep that code if so then I don't want to work in that code base it's going to be a mess so for the sake of the overall timeline keep things fast and efficient by keeping your promise and throwing away the code the first draft it empowers you to move quickly and learn a lot with the Prototype and then make better decisions that save time and effort When developing the real feature so one thing I I don't technically throw away the code I actually keep the code off to the side and I go okay how did I parse out the messages okay yeah I want that piece I want that piece because that piece was really hard I'm going to keep you right like I keep I keep some things around um this was a great great great article if you haven't seen the meme the meme is one of my favorite one learn to draw an owl well that's step two we're step one oh yeah there you go step one step two this is a great meme I love that I just love it I just love it I just love it oh my goodness I loved that article that was ah if you want the link it's literally it's literally on the primagen react it's like it's right here it's right here this was fantastic upvote that SOB beautiful remember if you want me to read an article put it on here so I can see it the name is the primogen