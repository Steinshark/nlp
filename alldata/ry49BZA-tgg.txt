gnu parallel where have you been all of my life I I'm not gonna I'm not gonna lie to you about three years ago somebody some coding guy twitch.tv you may have heard of him he goes like this yo yo baby he actually doesn't talk like that at all uh he doesn't talk like that at all and he's probably a CIA CIA plant anyways uh anyways he told me why aren't you using gnu parallel and I was just like gnu parallel I just use xargs that's all I need and then it turns out no I do I do need parallel now I use it like every day of like literally every day of my life I love gnu parallel I love it it's the greatest thing in the universe it's the greatest thing I was recently trying to figure out how likely a bunch of end-to-end tests were uh were to be flaking then I wanted to gather some stats about their pass fail rates on my local machine before including them in the broader test Suite these tests uh run for a long time and they execute extensive scenarios against live Services over HTTP in this post I'll share an approach I ended up using with good new parallel this is a great case for gnu parallel by the way this is so good you don't even know it you don't even know why it's so good it's so good it's so effing good I love it you love it we all love it okay uh quick aside if you want to follow along and run the upcoming examples in your own terminal use this command to generate some test files they'll emulate a flaky test by sleeping between 5 to 15 seconds then randomly exiting with the failure xcode 1 or success exocode zero now that's something I can do okay here we go parallel Echo sleep print pass all right print fail exit one let's go potentially flaky test and I'm not really sure what this this is right here but okay this seems exciting I don't I I don't know what the syntax is what is this is this fish is this python is this new rust rust 2.0 what is this what the hell does that even mean but is this really something I don't even know about turbo fish it I think it's a turbo fish but it has too many turbos on it and so I don't know what it does new Bash bash2 bash better bash me Daddy what is it called run it refuse uh typically to gather flakiness stats I've used a couple of the nested Loops one for each test I've wanted to run and another loop uh for each attempt I like doing uh this kind of stuff in bash for Simplicity slash a portability Tess classic array in bash my general rule of thumb is that if you see an array in Bash you've programmed too much bash you've just you've done too much you've done too much this is this is how you know it's time to switch to a new language for test in tests at this at me Daddy uh do for each attempt of that test a one through ten uh four attempt sequence one through ten capture the timestamp now test me pipe everything to devnal except for errors apparently keep the errors in pipe standard out to there what's the previous status that this is get the you know get the previous Pro whatever previous executions exit code calculate duration duration of the test Bam Bam don't you love doing math and Bash it's the all the dollar double print open do your math double parent close don't you just love it it just makes you want to just love it uh printf uh do all this one if status equals this then pass else fail is this why I always fail doing bash because I never remember when to use the dollar sign and when not to use the dollar sign I feel like you're supposed to use the dollar sign here why is there no dollar sign being used here I can't bash I cannot bash it is an impossible language it's why porque Moria always use the dollar sign I thought it was always use the dollar sign people make fun of bash for the stupidest reasons really well again my general rule of thumbs don't once you hit here I feel like once you start seeing this you're you're starting to you're starting to get into that region where you should maybe go a little bit different uh this approach ended up being tediously slow though since the tests take a while to execute to running them sequentially wasn't going to cut it exactly don't do it this way parallel me Daddy and then you don't even need this you don't you can use xargs or you can just use parallel itself you know what I mean uh this approach ended up being tediously slow though since the tests uh take a while to execute running them sequentially wasn't going to cut it I knew about gnu parallel but I've never used it before man parallel and 15 minutes later I was living life in The Parallel Lane it's really people you just Dash J it hit him with the dash K call it a day it's like that simple sometimes you don't want Dash K uh rewriting the above work in parallel ended up looking like this do your tests parallel progress jobs five delay two timeout 360. uh Shuffle results uh out CSV and then do all this Bash one super turbo fish Tess Ultra turbo fish sequences I really don't know what this is I still don't quite know what this is my assumption of how to read this is that okay we're gonna execute bash with the argument from here which is going to be determined by this no no no no that's not it it has to be something different there's something different here I just don't know what it is my guess is it run okay I'm redoing it I'm redoing it we're gonna run test one through one through five right we're gonna have one through five going here and then we're gonna do that ten times and this is an inclusive sequence from zero including ten so 10 times that's what I'm thinking that's what I'm thinking right so this is all the values so 50 tests we're gonna run 50 tests and we're going to do this with a uh with all this beautiful stuff right here five separate jobs all that kind of stuff basharrays test files Shuffle the order yeah uh gnu parallel specific no this is not parallel specific this must be a bash thing I don't know about the tripler I honestly have never seen the tripler in my life uh okay that just expands then huh okay I didn't know that but pretty cool there's some there's something that goes on there that I don't quite get I don't understand this this yet but anyways pretty neat I don't do a lot of uh I don't do a lot of that you know what I mean I'm not a big basher anyways uh the joy of finding the right tool for the job can't be beat more performance functionality with less code let's go into a bit of detail so here's a little story about how I use parallel I had this thing where I'd have to go query the database uh in the Netflix Game stuff uh get out a bunch of uh data from there and then in a separate database all together I then have to query more data and then in a separate database from that I'd have to query more data and to be able to query each one of those I need to be able to actually get the data here do some morphing query the next part do some morphing query the next part and then I'd be able to get I got some gen Z Hair going on yeah baby I'm finally a Zoomer um and so parallel was fantastic because what I could do is I could get like a nice big query for the very first one that just dumps out rows of data and then I take each one of those standard outs in just one line at a time pipe it into the next one which then pipe it into the next one and so I could do the whole flow just raging it and I can say okay I can only have app Max 10 connections to the database so jobs Dash J10 right and just it just is so fantastic because then you don't write the parallelizing code yourself so many people write code in which they write the actual parallelizing themselves when you shouldn't do that just use parallel use gnu parallel it's so fantastic because then your program becomes really small and simple and it's just like one step at a time or you could just use JavaScript why would you ever use JavaScript to write your parallelization like this that's so stupid right it's already there you can use JavaScript to do your querying which I was forced to do because we had a library that connected to all the databases in there so I had to do that but nonetheless I use JavaScript for just writing the basic item and then I would parallel over the top of it I was joking no you weren't you wanted JavaScript you know you do it now you're caught in 4k on YouTube trying to avoid that okay don't pause the music you SOB imagine using go weight groups gross you know it that's it Mario Ben you know what I'm gonna say to you Mario Ben it's me a Mario oh yes I'm going cancelable inside of a YouTube video anyways parsing or passing inputs and gnu parallel you specify command that is able to execute in parallel in the example provided the co the command is Bash one the one is a placeholder that gets replaced by each input value if you have more than one input you can use two three Etc the inputs to the command are specified after the triple colon operator in this case the inputs are rlse are the array of tests there's an array of tests uh the sequence of numbers a zero uh one through ten these inputs are provided to the command in all possible combinations nice okay nice beautiful so in this case we have five test scripts that we want to run uh each ten times parallel all right controlling concurrency parallel provides a number of options to use to avoid uh resource contention here are a few that I found useful J get those jobs out parallel will execute as many jobs as you have CPU cores a delay ensures that each job waits for two seconds before starting preventing a Thundering Herd problem like it time out terminates any job that has been running for over an hour beautiful uh runs the jobs in a shuffled order again beautiful very very beautiful click that for B scale what about node closure I don't even know what you're talking about at this point okay we're trying to talk here is parallel written and go I would assume not it's old I'm pretty sure it's older than go uh and it's also gnu I'm sure it's just C baby I'm sure it's just a little C baby oh let's rewrite it and rust oh dang hey bisco I just clicked the little uh firmware thing just for you uh by default the output of your command will be printed to your terminal however in the case since I wanted to capture the stats using parallel's capability to Output to CSV files instead was very helpful results this uh yeah you can definitely do that I usually just you know I usually just do like a little little pipe well I do that sometimes I'll T along the way if I have multiple parallels I'm running uh I'll put the job completion results to the given file which includes duration exit codes and captured standard out uh standard error progress prints live progress as the jobs are executing the CSV file ends up looking like this only the first lines of it for brevity what about all the area you're capturing right look at all that goodness look at all that goodness this is great uh it's trivial to use this uh uh output to aggregate charts uh chart or aggregate slash chart stats exploring further uh this barely scratching the surface will parallel can do I strongly recommend the excellent free and funny book by the parallels author Ole Tanki the first chapter takes about 15 minutes to get through and covers 80 of what you're likely going to use by the way this look at this look at what you can do limiting limiting this it's so good parallel is so damn good it is so damn good you gotta you gotta use it okay this has been a public service announcement okay this is not even a prime time react this is just me telling you learn to use the tools that are available okay learn it happy parallel outing read uh dude while Primus reading start talking about JavaScript no I'm trying to tell you about gnu parallel and you're talking about JavaScript the name is the parallelogen