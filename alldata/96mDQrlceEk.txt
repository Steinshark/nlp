you probably already know how to raise an error if there is something wrong in your program and how to handle that so in this video we're going to be taking that a step further with the assert keyword and the third keyword really helps us make sure that the logic in our code is actually working before putting it into production so let's go ahead and create a few examples so we can see exactly how this is supposed to work so for this example I'm going to go ahead and create a function called Start program which should be run at the beginning of our program and it's going to take data of type dictionary so this data is needed for our program to function and if we do not have this data our program should not work at all it shouldn't be something that we should throw an error for because it's missing an essential Lego block of our program so with that we need to go ahead and make sure we actually have the data or else we're going to throw an error so here we can go ahead and use a new keyword called assert an assert is a very common keyword that you would use in unit testing and it just makes sure that an expression evaluates to True otherwise it's going to crash our program so here we can go ahead and say first we want to make sure that the data is of type dictionary and that's so that we can pass in the Json data and if we try to pass in a text file or something else the program shouldn't even try to run because it's just the wrong data type so here we want to First go ahead and check that the data type is of type dictionary and if it's not we're going to provide a user-defined message that says that this is not the correct data type so here we can go ahead and say invalid Json so this line here is already going to help us understand whether we're using the correct data type for our program and another thing we want to make sure is that we actually have some data inside the dictionary if we insert a Json with no data then the program is just going to be empty and we don't want that to happen either so here we're going to go ahead and say no data found so now we created these two checks that are going to crash the program if we do not have the correct data type or if we don't have any data at all otherwise we're going to go ahead and print loaded successfully now let's go ahead and try to run this so if we go ahead and create our if names equal to Main Check and inside here the first thing we're going to do is start the program and the data is going to be equal to a string that says lull so it's not even the correct data type and we already get that error that we're not using the correct data type but some people might just ignore that and they might say actually we're going to try lol.txt and if we go ahead and run that you're going to get an assertion error and as you can see it says invalid Json which helps us as a programmer understand that we did something completely wrong here and it's really good that it gives us this user-defined message and I actually want to bring up real quick that as you can see here you create a user-defined message by inserting this comma here after you create that assertion so it's important you follow this syntax and you don't try to put this in parentheses because that becomes something completely different and when you run the program it's not going to give you the result you wanted it's going to say syntax warning and it's still going to load the program even if we gave it an expression and an error message so it's a really common mistake to add these parentheses but don't do it make sure you only add the comma when you're giving it a user defined error message but now we will rerun that and we will get this same assertion error so let's go ahead and create some Json we're going to say this is the Json for example and we're just going to end and we will just create an empty dictionary so now we can go ahead and insert this Json so if we insert the Json we're now going to get the second assertion error the first one is not going to trigger because of course now we have a valid Json file but we don't have any data in the Json so the program still shouldn't function because we don't have anything to display to the user so we get another assertion error and as you can see really quickly this becomes very nice for debugging because now we understand that we have some very important logic errors in our program such as we don't have a Json file which is the main part of the program or that there's no data in the file so we shouldn't even try to run the program until we get this sorted out and assertions should be used for that kind of logic not logic that can be user defined but logic that you as a programmer are defining you want to make sure that everything in your program that you've created works properly so what I'm trying to say is I wouldn't use this for handling user input but more just the logic of your program to make sure that it is actually robust bust and let's go ahead and insert some data here now that we have a full program up and running we can say user is one two three now when we go ahead and run this the program will load successfully because we have the data that the program needs to run and you can create some more assertions of course to make sure that the data is formatted correctly and all of those kind of things before even trying to run the program so use assertions to make sure that your logic is working nicely now there's one thing that's really important about assertions and that is how to toggle debug mode and how to untoggle it because assertions can take a considerable amount of memory in your program as you can see this is logic being run so it is going to take some extra time when you are executing it and for a program running in production you don't need assertions these are just messages for yourself and they're never going to reach the user so what we need to do now is go ahead and first we're going to go ahead and print the debug done the method to see what it gives us and right now it is in true and that means that we're compiling everything including the assertions but ideally we just want the logic of our program to be run not the assertions because it does take time so what we're going to do now is manually open up the terminal and also manually run our program so that we can add some settings to our program such as omitting the assertions so here we need to go ahead and type in Python and uppercase O So minus o and here we're going to go ahead and use main.pi for this so we need to call it via the terminal and when we run it we're going to get loaded successfully and the debug mode is going to be set to false now I also want to mention that if we go back and insert an extra o here we're going to get now dash double O and when we run this we're going to get the same output except you should also note that when we're using double O that it's also going to omit the doc strings making our program feel lighter because we're not including doc strings now and if you think about it we don't really need dark strings when we're running the program the user is never going to see the doc strings and every dog string does take up some memory so why would we want to make our program heavier for no reason when the user is not going to see it so that's another good reason to run your program without the doc strings and without the assertions it's just it just speeds up the program I don't know if that's going to be significant depending on your program or not but it's definitely going to save some memory and some of the resources for the user that's actually using the program so that can be considered a big win but that just about covers everything I wanted to go over regarding assertions if you feel like I missed something do feel free to leave it in the comment section down below I would love to read it and learn a bit more but otherwise with that being said thanks for watching and I'll see you in the next lesson