stop trying to write perfect code Yes you heard me right perfect code is actually a trap that's holding us back now before some of you were like what are you stupid you want us to write bad and terrible code no that's not what I mean at all well actually sloth I write perfect code because I use rust so I'm currently reading clean code by Robert C Martin the pragmatic programmer by David Thomas and Andrew hunt and I just finished reading the Perfection Trap by Thomas curan and these books had me thinking wow Perfection sucks now if you want to read those books and get a little bit smarter I'll leave them in the description I 100% recommend them but in this video I'll be connecting points from these books to explain why this Obsession of Perfect Clean code is not only unnecessary it's actually counterproductive so let's get [Music] started okay let's start off with the idea of perfect code when people describe perfect code it's usually code that's clean and just works sloth what the does clean code mean well luckily for us Robert C Martin asked a lot of developers what this means and to sum it up it's optimized it's elegant it's easy to read easy to change easy to test and it runs without breaking production now if you want a more detailed explanation of what clean coat is from experienced Engineers read the book or if you're too lazy I made a newsletter called sloth bites which is designed for lazy programmers like me and you where every week I send you bite-sized information which could be key insights from books like this jobs and internship opportunities hackathons program pring tips and much more straight to your email where I do all the work and you get all the benefits so if you'd rather spend more time coding and less time reading about it check out sloth bites it'll be in the description clean code is the Holy Grail for many programmers and some might even consider it perfect code and there's good reasons why a lot of people chase this ideal most of us start coding with the best intentions we just want to write good code and trying to write high quality code teaches us a lot of valuable lessons it pushes us to learn the best practices in coding it deepens our understanding of programming and it improves our problem solving skills but if you're one of those people that chase this ideal and keep trying to clean up and perfect your code you're probably a perfectionist if you aim for clean Flawless code because anything less feels wrong you're pushing for Perfection because you're so passionate and that sucks because that passion is hurting you more than helping sloth isn't passion supposed to be good yes passion is great it fuels us it motivates us to grind to hustle to go crazy to go stupid but too much passion can lead to perfectionism and this perfectionism leads to you trying to write quote unquote perfect code and that's bad because that code will never look perfect to you and you'll end up being in the Perfection trap this is how it'll go first you'll set up some really high standards for yourself now because you set those standards so high you're not going to meet them and because you didn't meet them you fail and because you failed you're going to feel depressed anxious ashamed and how are you going to cope with it setting yourself to even higher standards which takes you back to step one and this will keep going until you feel like you're not enough or programming is not for you you're basically like Rock Lee from Naruto where instead of getting superhuman strength you get depression now in the book The Perfection trap our boy Thomas Curran says perfectionism is not black or white so you can't really say you're a perfectionist and you're not a perfectionist it doesn't work like that instead perfectionism is more of a spectrum so some people are more of a perfectionist than others and that's really obvious in programming since a lot of people are pretty picky about their code compared to others but it doesn't stop there Thomas Curran says that perfectionism can manifest in a lot of different ways he describes three specific types of perfectionism in the book the first one is self-oriented perfectionism this type is the one that everyone knows it's the type of perfectionism where you impose incredibly high standards on yourself it's that internal monologue that's saying I must be perfect and nothing but perfect I have to solve more leak code problems I have to use Arch and vin it's you pushing yourself to be perfect every single time and it leads to a NeverEnding cycle of refinement the second type of perfectionism is socially prescribed perfectionism this type of perfectionism comes from the pressure from the environment it's you believing that everyone around you expects you to be perfect I've actually seen a lot of people have this type of perfectionism and they don't realize it and I struggle with this all the time too it usually happens when you're too scared to share your code because you think other people will say it's garbage or you're too scared to interview because you think the interviewer expects perfect code from you and I don't blame you this one's hard to get over and now for the last type of perfectionism other or oriented perfectionism this type of perfectionism is actually directed outwards you're the one expecting Perfection from others a lot of people in the tech industry have this type of perfectionism an example is people expect software Engineers from Big tech companies to write really good code they expect them to be super smart just because they work there and if they don't meet that expectation then people get mad wondering how they even got a job there I think these three types of perfectionism increase as you continue learning how to code because at a certain point you'll have to learn optimization and once you start learning how to optimize your code that's all you want to do at least in my experience every time I learn some new technique or some new way of doing something I look at my old code and it looks a 100 times worse now and I'm sitting there thinking wow I should not be a programmer use this design pattern use this data structure use this algorithm oh wow time complexity I got to write my code in 0420 time you start to develop a terrible habit and it leads to a term that I liked called premature ejacul premature optimization pre optimization is spending a lot of time optimizing something that you may not actually need to do and it's so common that it has a saying premature optimization is the root of all evil but what's wrong with that sloth isn't it a good thing to write optimize code well yeah of course it's good nobody wants this they want this but once it becomes an obsession it stops being about making the code better and optimized and it becomes more about making it perfect and that's where the problem starts there's a difference between optimizing your code by choosing a good data structure and trying to improve the speed of a fing for Loop so basically there's a difference in trying to write optimized code and trying to write perfect code because when you're writing optimized code you know when to stop let me explain some of the problems you'll have if you keep trying to write perfect code the first one is burnout if you're trying to be perfect you're probably spending hours obsessing over every single line of code you're not sleeping because it's not good enough you're not happy with your Le code performance I don't know your database query is 1 millisecond too slow and guess what you're taking the fun out of it you're stressing yourself out for no reason and if you keep this up this is going to lead to stress anxiety and ultimately you're going to get burnt out because of how much time you're spending the other problem you're going to have especially for beginners is you're going to learn slower you're going to be too scared to make mistakes and that's going to prevent you from stepping out of your comfort zone and that's going to mess up your learning I personally believe when it comes to learning how to code it's all about quantity over quality which is a little weird because it's a field where they want high quality stuff but Pro programming is a skill the more time you spend doing it the better you're going to get however the way you use that time is also important a programmer who completes multiple projects is probably going to learn faster than another programmer who spends that same amount of time perfecting a single project and that's because each new project has its own unique set of challenges and learning opportunities the programmer who completed multiple projects probably made more mistakes and that's okay because those mistakes made him a way better programmer than the one who spent that time perfecting a single project when you don't allow yourself to make mistakes you miss out on the essential learning opportunities that come from trial and error making mistakes and facing challenges headon are some of the best ways to gain deep insight and practical knowledge and coding and the same goes if you have experience you're probably going to avoid taking on projects that involve unfamiliar Technologies just because you'll be back to Step One of producing bad code and making mistakes and I get it you have to install your tools set up your environment read documentation to deal with it and not only that perfectionism can lead to you overthinking even the simp tasks you might spend hours tweaking and refining code that already meets the requirements and you're missing the chance to move on to a new challenge and some new learning opportunity you're stressing yourself out because you want to create perfect code and all of a sudden programming's hard and then you want to quit because of the pressure you put on yourself this type of stress can Cloud your thinking it reduces your cognitive abilities and it makes it harder to absorb new information okay I think you get the idea of why trying to write perfect code is bad so what can we do to get this mindset out this is where the pragma aut atic programmer comes in why this book well because it says right here tip number 30 you can't write perfect software and it also says this right here tip number 31 use brilliant what's brilliant well I'm glad you asked it's today's sponsor brilliant is a learning platform where you learn by doing with thousands of interactive lessons in math data analysis programming and AI brilliant is designed to be effective their approach to learning helps you build understanding from the ground up each lesson is filled with Hands-On problem solving that lets you play with Concepts this method of learning is proven to be six times more effective than watching lecture videos plus all the content on brilliant is crafted by an award-winning team of teachers researchers and professionals from MIT Caltech Duke Microsoft Google and more their lessons help you build your critical thinking skills through problem solving not memorizing so while you're building real knowledge on specific topics you'll also become a better thinker I've been using brilliant for a few months now and one of my favorite courses is how llms work where you essentially get to learn how AIS like Chach PT work work it's pretty cool you get hands-on experience with real language models and you get to explore how they build their vocabulary choose their next word and more you also get to learn how training data affects the models by comparing models that are trained on different types of training data and not only that you'll also learn how to tune a language model and this will let you see how to generate different kinds of output whether it's something more professional or something more casual so if this all sounds interesting to you and you'd like to try everything brilliant has to offer for free for a full 30 days visit brilliant.org thee coding sloth or click the link in the description you also get 20% off in annual premium subscription all right back to the video throughout the pragmatic programmer David Thomas and Andrew hunt reminds us that our primary role as programmers is to solve problems not to write perfect code and in the book there's a specific section called good enough software where instead of writing something perfect write something that's good enough now does that mean write terrible and sloppy code well you already do that but no what they're trying to say here is instead of focusing on refining every single line of code Focus more about the features that truly add value to the project and you should only refine your code when there's a new requirement or when you have feedback from other people instead of you just pursuing Perfection and the decision on whether the code is good enough should be based off the developer judgment and the user's input but I don't have anybody to give me feedback then join my Discord we'll gladly give you feedback to improve your code now there is some situations where this doesn't apply maybe you just want to learn how something works or you have some super strict requirement from a professor or manager that's a whole different thing that's out of your control I'm sorry but if you're the one that's making everything perfect for no reason and stressing yourself out I strongly recommend reading the pragmatic programmer it'll help you out so much there's a really good analogy in the book that compares programming and painting where it basically says just as an artist knows when to stop adding layers to a painting a programmer must learn when to stop embellishing their code over embellishment can spoil a perfectly good program just as excessive details can ruin a painting so stop trying to write perfect code and start writing code that's good enough I'll end this with a description by Ed Jordan who was a really smart programmer which states you can discipline yourself to write software that's good enough good enough for your users for future maintainers for your own Peace of Mind you'll find that you are more productive and your users are happier and you may well find that your programs are actually better for their shorter incubation if you like this video like comment and subscribe dislike it if you disliked it and I'll see you all in the next video