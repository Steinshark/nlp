there was a brief and glorious moment in Tech History where Twitter was regularly in the news for technical reasons seems hard to believe now but they used to be and it was around those days that I first heard about something called the Lambda architecture and the Lambda architecture was proposed as a solution to Twitter's big urgent problem you have these two roles you need to fill you've got a huge set of historical data that needs to be queried in all the usual ways but there's this much smaller set of live data that's really urgent has to be processed right now if it's to be of any value and there's a mismatch between those two kinds of data they have different storage requirements they have different access patterns and of course they have different performance constraints plus there's the extra problem that the new data is going to become old data So eventually every piece of data you have will live in both of those roles can be very difficult to deal with because you can't optimize one without sacrificing the other and the Lambda architecture proposed this solution accept it you're going to have two different Data Systems and what you have to do is build them optimized for each use case and then do all that difficult integration work that makes those two systems appear like they're one system it's very hard I remember it taking a long time but they did it but what if you could get all that integration both of those systems neatly coupled together off the shelf it seems to me that that's the question being asked by this week's guest Joe Jong and his answer is the recently open source database proton well if that's his answer I have questions what's a database like that for what does it do well how does it work and how are you making that difficult integration piece simple enough that I can rely on it but transparent enough that I can forget about it that's the trick I suggest we find out I'm your host Chris Jenkins this is developer voices and today's voice is Joe [Music] Jong I'm joined today by Jo Jong Jo how are you I'm doing good hi Chris so glad to enjoy this podcast I'm glad you've joined us you've got so you're in a world with a lot of people competing to try and solve this problem right of streaming data and it seems to me that everybody has a slightly different way of solving the problem and those architectural decisions that they make play out in different and interesting ways so I want to I want to pick your brains on the architectural decisions you've made and how it plays out in the system proton that you've ended up co-designing right but before we get into that I think we should try and ground ourselves in what's this for what's an end user going to actually use this for yeah sure yeah um so portum U I would say there a for people who are not that familiar with idea of streaming processing you can just considering this is a Next Generation like ETL even supp people know what is ETL so you want to move data from A to B and you want this as fast as possible no latency you don't have to wait for the next batch say next one day next one hour Whenever there something happening for example there's a new order come in there's a new people click your web page there's a person uh being attacked a server is going to be those information can be sent to the system uh in in the almost zero uh latency and you can apply some uh alert you can have some automated actions so uh at web at kind of at common use cases this is really good for build a real time or streaming ETL so um and uh beyond that that we also really is a true streaming processor so meaning that is uh it's not just fast enough it's also have this uh state for processing uh so the difference that is so we we can do some state for processing such as say I can count every one second how many uh click for that particular page then you know I accumulate a state within that one second or one minute even you can do some fancy things such as this a session window whenever a signal meaning that session start and the session end and we keep this session window for example when the user log in do a bunch of action until they check out or log out this is a session the session window can be uh can be as long as say two hours or can be just 5 second if the person is not patient enough it's the digital equivalent of someone comes into your shop and you want to kind of understand them until they leave right yeah yeah so all those uh simple transmission or filtering or those sophisticated St processing all those are in the category of stream processor so some of the big player in the space for example like Apache uh flank and there's some other vendor as you briefly mention that is it's a yeah it's not a new space but still at early stage because people are really want to guess things more real time they may still struggle on the batch side but more and more people want to get to the next chapter which is streaming so this idea of stream processing uh analytics is really a new thing and people really want to try different solutions yeah this is the thing that interests me and I keep coming to like I want to hear about everyone because like everyone everyone in this space is scrabbling to come up with the ideal solution or the solution that's optimized for a particular subset of that market and everyone has a large piece of the answer but and everyone's saying that they've got the whole of the answer and I just kind of want to explore it right exactly first I'm going to pick you up on a word use a specific I'm going to nitpick your word that you said it's a true stream processor you said what's a true stream processor um yeah again uh so there a this definition of stream processor is really about how to handle the streaming data in a meaningful way right the the streaming data is the data you constantly get so you get not uh not just batch by batch you always get new data all the time and you also want to process data in the streaming way not in the batch way so uh more like a common or na solution that is you always get the data from your olab system uh there's a lot ofab system I guess the market of olab system is even busier than our streaming processing Market but anyway you can always put the data into your olab system and you can quiry it every one second right then if your system is powerful enough you get a quite nice dashboard or alert with the limitation of you get this every one second or every one minute I think most syst don't really uh happy to support per second query because that's too much too frequent and what is worse that is imagine you want to get hey what's my uh Revenue this month and you want that number update every second or maybe every minute that if you are using a olab system then you query this every one second or one minute but you are wasting a lot of resource right because uh the number you get last time maybe it's uh say 10,000 and between this two query you might get a few transaction and you may get 10,200 but because you are run this as a batch query you end up with query all the data over over again even that's a very small incremental thing right so this is the common we call realtime solution and for the streaming processing we have this state so we know what's the last time we quered is this say 1,000 then there's a some new event we know the Delta so we can give you the uh we get the data combining with the previous uh result we give you the new thing and what is more interesting that is usually this streaming processing is a long running process so you only run your query once and it never ends until you cancel it even the server start restart or scale out usually the system can still keep the State and resume what is left until you uh speciically cancel it so back to that previous example that is you want to know what's the live number of the this month's revenue and you just run one single query something like select some uh amount from stream and that streaming processing will keep give you new results whenever new data is available so you are happy to render this nay or you can set some alert so this is the streaming processing and mean for uh portum is really doing something very interesting that is we take this to the next level we also have our storage behind so you don't have to using your streaming processing to send the data to DIYs system such as olab or C car but you actually just do everything in our own system alone we we give you the serving layer for both uh real time part but also the historical part even you can have a quiry to cover both the uh historical part and and the real time part so this is I don't want to throw too many idea but you might get the the the the keyword like Lambda or Kaa architecture we need to get into that but yes yeah that that's something we can we can discuss for sure we will dive into that so is it fair to say that your your definition then of a true stream processor is something that live it's not very very fast batch or micro batching it has to be a continual transformation of a state by a single event Yeah by by event by interval uh by other conditions you limit but uh you define your atom of change but it has to be sufficiently small to count as true stream processing yeah yeah uh yeah yeah the pom is uh again we we start from those uh ETL use cases and uh we also uniquely design our system to have more historical part not just rely on the other system to do the historical part and uh yeah that's uh uh and also we made some design choices to not depend on too many Cloud technology so that we can be easily deployed in those smaller servers even Edge devices or uh Ed uh or disputed way so that you can you can you can get this some data from the local sensors to some fing and aggregate together in a central way yeah okay right I'm going to get into that but next I mean we're going to unpack this slowly the the thing I find particularly curious about this is you seem to have a dual storage model inside proton take me through that and especially the why yes so U take a like other uh common choices of uh stream processing such as Flink uh even I think recently uh it's recently two or three years the community of Flink also involved right they they do very good on the Computing side now they are adding the storage side so there's a project called Apache Pon originally it is called Flink table store as a a sub project of the Flink but they realize it's it's just more than flank and they are aiming for much bigger space they want create uh call stream data warehouse or streaming house have the both the Computing side but also the storage side and the stor side can be it's yeah I'm not saying this is next uh or the other Iceberg but they really being very ambitious and they want to uh support other system such as Spike uh Apachi Spar so anyway I what I'm why I mention this that is in the Flink Community they they move from or they involve from a pure Computing engine to add the storage part but in the case of proom or our compy 10 plus at the very beginning we see this is the future so on the day one we're not just focusing on the streaming processor on the Computing side we really want to have the vision of hey in the future this should be one single system people really needed to process data no matter they're comfortable using streaming way or using the the batch way so we choose clear housee as our our key foundation and it's it's already a very mature batch based system Orab system we really add extra streaming capability into this uh cbase so that you can process data in the streaming way just as a stream processor or stream ETL very similar to patch Flink or k DB but in the same time the storage the data is stored in uh in the in the Playhouse historical uh part so you can you can qu it say I want to not just know what is happening right now but I also want to know what is the pattern or Trend in the last two weeks two months or even two years it is possible you just quate in in proton along without asking other system and also there's other interesting things such as backfield U backfield is a special term I think very popular in the fintech area that they want to figure out what is my best trading strateg based on those uh uh those uh ticks or those stock price or those offers things like that then right uh usually they want to build a good strateg for the real time part but also they needed to validate that strategy using the data in the past I don't know maybe one year or two year they call this back view and it is very common people have two teams uh one team building this streaming or or real time trading power the other team building the historical power even they can be using different language so it's at the extra cost and the inconsistency so in in our case everything is SEC based and we are using the same engine so you can easily build the same code for both the real time trading and also the backf test so there some benefit to have a system to have both yeah so this is very much the Lambda architecture that I I remember first hearing about at Twitter where they're dealing with the historical tweet data I'm not going to call them X's uh the Tweet data plus the live hot stream of people tweeting right now wanting to see timelines right now yeah yeah Lambda again is a very popular and relative easy to understand but the people also see the challenge of having maybe two serving layer right one serving layer for the real time power the other serving layer for the historical power even data is saved into different places yeah it can be complex so that's why people come into uh CA architecture I would say in the case of proton it's more like Coppa but it's more like ca in a single banner so because we we have everything uh written in F us as our core engine and it can be compiled to a single binary and that single binary can serve for both uh uh real time or streaming query but also the histal par query and all the storage is uh uh is also also unified so we internally we do have uh historical storage based on clear housee so this is a column based storage you know and uh it is very fast for you to accretion uh especially if you don't need to scan all columns right for example there are 10 or 15 columns you really want to do uh mean Max for two column uh the beauty of column uh column database is that is you only uh get the data part for that two column without getting extra data and you can apply some uh uh uh same s SD Vector processing to to get results in a single CPU call something like that without have to minut stuff but so that's is we inherit from K house but also in the meantime we have our own portum streaming storage we call it a native log so it's a it's a internal component but the purpose of that is all the data is arrived in that streaming storage first it's more like red head loog apparently very similar to cka but much more lightweight then the data is there then uh we can do some streaming stuff then the data also replicated to the hisorical power so that we can get both so you're saying internally there's a right head calf caress glog which you're querying for the hot set of data and also writing it across to in bundled click house for classic analytics yeah that's right yeah that's I can begin to see why that architecture has a balance to it but that sounds like a lot of work on your side to try and is it is it a problem keeping those consistent is it a difficult thing to know how do you know when to query which layer for instance yeah that's really an interesting thing we to discuss so uh yeah in the in the streaming where everything looks very beautiful and easy at the first CL so that's oh yeah of course why not but when you really work on that you might realize there's a there's a lot of challenge for example like this uh uh out of order right so you you might get data from different sensor you might get from different Gateway uh they might using different clock or even certain certain Channel may have a some certain delay so all when the data is Consolidated into your system uh you are not guaranteed that the data will be in exact the same order maybe some some first yeah see that somebody's using a mobile app but they were on the underground or the subway and they sent the analytics data like half an hour late that yeah yeah we have some use cases people uh using our solution for those uh Fleet Management uh the sensor on their truck and if they go into a tunnel I don't know maybe it can be 5 minutes 10 minutes the signal will be very bad yeah so but they will still send try to send out and you get them late so there some out of order event there some late event and also how to keep this uh State manageable right so uh as I mentioned that is usually the streaming uh CQ is long running as it's always wrong in the in the backand but if you are doing some calculation it's it's always add the new data in the state never reduce then no matter how big your memory is it will be om eventually right so how to have a certain way to uh control the size of the state and also stuff like how you can uh change on schema is changed or how you uh react when the server scale out or scale down so that's a lot of challenges uh in our case we uh we do have extra design uh one of key uh important part of that is we introduce our own format we call it uh 10 plus data format tdf uh so the tdf is our key uh data format to uh have some design to aiming to solve those challenges for example we have a uh a column of flag called sequence number so the sequence number is the important uh information to let us know say when you ingest for example three data in a single batch to to prot then then we know uh each each event have ID and then we assign a sequence number and later on when there's the other event come in they have a a different or a newer sequence number those sequence number will the data will be in our streaming stage first then we will keep uh replicate them to our historical storage but also keeping that sequence number so that when uh we don't really need to in some cases the data can be in both site but when we quir it making sure based on that s number we only get the data once so I give example say uh in our streaming storage the data you you can set a retention policy for one day for example again this is configurable in the streaming storage the rotation policy is one day in the historical storage it can be say one month then in our case if you wanted to hey can you give me uh the number of event with this condition for the past one week then we start around our streaming storage and we get one day data and then we know it's not enough then we can go back to our historical storage to to get the data from from that uh one one week to that minus one day and because we know this sequence number so we we making sure there's no overlap so for example EX in the Stream storage the the the six number last number is say 500 then the other one should be uh 5001 or or 499 I don't know but making sure that's a very smoothly we can we can grab data from both s side but we don't have any duplication so uh that that's how we can solve those uh uh old issues or other issues yeah where so that does sound like there's an extra storage layer in there because where are you storing that state the STA we today we still save in our uh Native log which is our streaming storage it's essentially it's a file based yeah but we canate to other so you're kind of snapshotting back to a different right head log yes yeah and then we have uh because it's our own format we can do lot of a crazy uh optimization have to wait for the community yeah okay so your system goes down let's let's not say it crashes it it goes down neatly it comes back up you're going to then to reserve that query walk back along the event stream until you find a snapshot and then add that into the historical is that how it works yeah yeah so for example we do upgrade for example say the version is a and we need to upgrade to B and the uh EV you have to restart the server right Sobe just a 2 second or two minute whatever then yeah we making sure when we start a new server we pick up where we left so what's the previous uh internal State as well as the what's the what's the last sequence number we scanned so the last sequence number for example is 1,000 but uh now in the our uh stream storage there's a 10 10 more event uh we we know those new event we never compute so we can use that sence number to figure out what's the what's the Gap we should process right yeah I'm with you I'm with you okay uh let me give you another difficult architectural question so what's your approach with um let's say my fleet of trucks is huge right um and I'm dealing with I don't know what counts as huge these days let's say a million for sake of argument I'm dealing with a million trucks whose State I would like to calculate over time how do you deal with with when that gets too large to hold in memory what what's your what's your sharding strategy for very large um stateful set yeah sure um it's uh it's not so uncommon right so uh we cannot put everything in memory I know some database they really want to put everything in memory even have some claster version of a memory based system so again uh as you previous uh mentioned that is the problem is there are people TR to solve in different uh way different solution uh it's very difficult to have one thing fit for all everyone have their own assumption and design choices or even design preference or depends on which customer they talk to right so some customer hate Cloud some people only use clouds for example um yes in in in in the case of lar of state or data we do have this sharting strateg I think this is very common that they say U to make it simple everything is a single shot but F fre to design a shouting strateg for example you think oh maybe three shot is enough or 10 shot is enough then it's yeah Shing partition those are just acronyms I think so you can design a sharing strategy based on certain key uh so that data in the same shot is a is more relevant or or similar in some way then combining the shouting stage uh with the cluster because you might know even on a single single host you can have multiple shot right so uh and essentially each shot can can be independent IO so for example uh if you monitor observe that is in your server uh the I PS capacity is very high uh you uh you cannot get a higher throughput the CPU CPU is uh uh C uh the you for example you can you can create a more shot so that you can have more in parel uh data IO so so that's the good reason why you might want to have multiple shot in in on single server but also you want to have some certain a have Val or dis Discovery then you uh you might want to have multiple servers then each servers will uh take different shot right so I guess this is quite similar to how cka work right you can have a multiple partition for one topic and you can have multiple server handle different partition even you can have a replication Factor uh each partition need to be replicated say at least twice or three times so combining together you have a relative uh common distributed architecture so support almost any number of uh event uh depends on whether you have enough disk IO or disk servers yeah and the network within them is good yeah okay that so that raises another question for me which is you've chosen to embed click house as um an olap platform but you haven't chosen to embed Kafka you've written your own wrer head log what's the thinking behind that decision we want a system can be deployed as a single boundary as simple as that Al or it can be a cluster as I mentioned we do support cluster and even the way how spun support cluster that is it's also a single binary but you can run the same Banner in different role say I want to run this as a master I want to run this as a indexer as a search head similarly in our case even it's a same Banner but based on the configuration file or based on some Le election different things can can can uh can mean different role and also because of the single binary story um it is is this is purely it is possible even even today uh there's a community user in our slack asking can I use uh c car to replace uh Native log and the answer is yes for sure okay so so we made this as a more like interface that is we need a stream storage and uh we have our own one we call native log it's part of our process but if you really want to configure uh external Master box such as C call or even rap Panda you can you can do so then uh we we we just leverage uh this as a streaming storage for put our letter log or put our tdf format so that is configurable so that state snapshot you're talking about that could be written to red panda instead yeah that's right the that's the data part but also besides the data there's also other for example metadata information uh how you define things like materialize view how you define a stream and uh do you create the stream on this node how other node aware of that right so those uh information or Comm data information is uh I think today is still stored in the file file format and and then we replicate to other node uh using uh the ra protocol so again uh internally there can be some data in the streaming storage some data in the his storage some metadata information in the form of file and the file can be replicated to each other yeah okay okay that makes me want to talk about because you've talked about how this is um embedded how there's a tradeoff between the historical and the Real Time stuff makes me want to think a bit about performance like what kind kind of what kind of queries does it perform really well on what kind of size can you optimize for this kind of hybrid internal architecture yes performance is really one of the key kind of a driving Factor when we design things uh uh we have similar some of the similarity with r Randa for example Randa basically is a version of kavka right yeah yeah and the fair summary uh in some over simplified way pum is a Cass version of Flink or we call it native engine of Flink you you know what is happening interesting right now that is there's some native engine for spark spark is written mainly in Java some part written in Scala right uh but in some use cases people are not very impressed for the performance of spark the Java version gvm version so there's a few project coming from Facebook uh coming from even Apple I think they they are written this in either super pass or rust as a native engine for uh for that even you know uh the company behind spark data breaks they they have been building this for four or five years and used this for at least three years they call it I don't know how to pronounce it it's a photon it's pH T and it's very similar to proton but with the letter H so that that is a native engine I'm not sure whether it's R plus but it's a in in Place replacement for spark so you can run your spark worklow but it's it's executed using the engine so you see people if really want to uh aiming for the next level of performance gvm may give you some something but may give you some limit right if you want to leverage a SMD you want to leverage the vector Computing you want to have some Modern F system I ring the memory management those stuff you might have to do this manually yeah Java is vastly faster than it was when it first came out it's incredibly fast but if you want to have an argument with the CPU directly you kind of need rust or C++ or C yeah I yeah yeah I even see some uh some folks they are tuning for arm there's a lot of details if you do this carefully you can get way more faster but it is under underestimated so I mean a lot of program should run faster on arm if they do properly but they require a lot of effort but anyway long story short that is a we choose C plus as our uh language implement we leverage a lot of high performance Library we always use the latest uh seong VM all those uh cool things uh so we can get a very very low latency without require a lot of uh uh a lot of computing resource I give you example for example one of our community user they they need to do uh they call uh High cardinality groupy uh the term is fancy but essentially it's just a groupy you know uh in the CQ groupy key right but what if the key is not 1,000 maybe say 10 million so imagine you have a 10 million unique key and each key you need get a certain agregation for example the count the mmax or even some crazy one like P99 all right so if you want to do the extreme case that is you have a 10 million unique key each key you need to do some P99 P99 is tricky because you need to get all the data and figure out which value is at the 99% right so uh it's small comp than sum or or or average yeah yeah yeah so but in such cases U many system um cannot handle that but because we Implement in we have our own control for the DAT structure we can actually spin off multiple uh internal process to Leverage The the modern CPU uh and the all the Linux stuff to to get this result correctly without uh uh have a lot of memory I think uh I don't remember the details I think it's more like uh 4X or even 10x uh less memory compared to Flink for the same high cality uh groupy and this is high con good is very common for some use cases such as cber security you may know uh for example if if you have firewall access log I mean you want to figure out which IP keep sending you some package and the IP can be easily a large number of so it's high conned and some other cases such as F you might have a lot of stock or or Bitcoins like that especially if you go into like IPv6 grouping by that yeah that's that's big I'm not saying is a really big challenge yeah how is that what's you're saying you get 4X or whatever out of that what's the key part of that what's the thing really making the difference yeah I would say it's really we can leverage the lowlevel uh CPU or IO or Linux stuff and uh I think Flink in many way it's designed in a very generic way and with also with some limitation of uh a gvm uh you might have to do certain things uh uh in the in the generic way but uh when you have the chance to handle things I give you very simple example for example as simple as this a a bunch of integer yeah right so uh again I I I haven't write for a long time but if you put your design your data format in the proper way for example every integer is um for example uh two bytes or four bytes you you make this as a fixed waste and using the same representation as the memory then essentially it's just more like a memory dump right then then you you you do the minimal Marshall and maral things I guess this is also similar idea as aach Arrow right they have the memory representation of the memory in the in the network in the disk so same thing that is if if you do this in a careful enough way uh you are handling data package in a very efficient way I I I'm not quite sure whether you can do this easily using Java yeah I I'm gonna I'm GNA say you can't I don't think you can do it easily I'm sure someone will tell me that you can do it but it doesn't sound like it's a natural fit for a for a virtual machine that tries to abstract away from these things someone someone will educate us both on that one but okay so you've mentioned this a couple of times and while we're talking about architecture I have to ask this if you're talking about arm and embedded systems you've mentioned is this if I want to stick a Raspberry Pi out in a field Gathering interesting data is this a good choice for that yeah it can be um so I at earlier days I I use uh I I forgot what's the instance type name it's a T2 Nano it's a very small instance on EAB I guess it's a half CPU 1 gab memory okay I use that for a long time for my demo yeah because we uh our Banner is so small it's a few hundred megabytes it can be even smaller but what is not that is if you just run some filtering or some uh bounded uh T window so it just press data cons constantly uh and the send data back to Kafka for example then it don't really require a lot of memory so say uh again I I want to pick I don't want to pick up on fling but uh just as a standard that is you you want to have a fling you need to have a uh the right version of gvm there are so many different gvm versions uh different random want to have certain uh control on the gvm anyway you choose the gvm and uh you download flank uh maybe you put in a certain pass you start it then you yeah cool I want to get data from kka and then you you you copy the CQ from the documentation and run it it show you a result that it uh c f and then you figure out oh I need to download the C ja file somewhere and put it into the library then you your server this yeah then then you you run this and you want to oh maybe I need to create a jav file and deploy that jav file as my customer code so and and the the the server uh require certain amount of CPU on the memory I know there are certain way you can customize your flank to consume less data but it's not default so my point that is uh uh yeah again Flink is already a great product but you still need to figus on many details but in the case of prum uh because we are so focusing on the Simplicity you just uh run a single command to download as a single binary or have a a very small doc image and it can connect to your cka immediately and uh we are using the uh lib RT cka I mean the superas library from Kafka so it can connect to Kafka and uh to read right and uh I think it's fairly easy to support uh for example uh the resource on the rest p uh we also uh support arm for for a long time uh because us uh we have multiple uh cluster and some of some of the cluster is based on the arm chip Amazon is that called gravity something like that so uh graan yeah sorry about that so Amazon Amazon have a very uh very nice Arm based chip with a as up to what's the number up to 30% discount or something like that so it's it's much cheaper than the than the MD or x 64 uh chip so we use that for a lot of our internal test so that's there's some difference uh but not huge so if if you really want to run stream processing on your rasp on your embedded device I think port is almost the best choices even I think Lambda no no I mean rapand is doing something similar it is might be possible to run c car in your in your helmet in your other device but it's much easier you run Randa in those small devices and you can maybe put Porton there to do some secq based stream processing okay yeah because that seems like fun to me to be able to do the processing as well as the storage all in one simple Place yeah and uh yeah one one more thing to add that is we of even talk to some of the uh users they for example they are in the energy space they needed to get the oil and they have a lot of sight because uh sometimes it's just like lucky jaw you put a lot of stuff there and the figure out among those 10 uh say 3,000 s which one have the a lot of oil behind so you need to have a lot of sensor and those are remot space you don't really have good enough uh Network even you apply like 4G 5G it can be very expensive yeah so the solution is more like you have a lot of a more like local data center or Micro Data Center and you get the data you do some filtering processing you might able to consolid them into the central servers one day but if you can solve those uh disputed environment uh network uh air guy but if you can apply stream processing or real time processing they can fit out a lot of uh garbage data and figure out what's the real signal and help you to figure out which which well you should spend more money on because those kind of infield processes tend to pick up a lot of noise along with the signal if you could pre-process that in the field that makes sense yeah do you think there'll be or maybe there is already a way in the architecture to then say okay so I've got this proton node which has filtered out some of the uninteresting data but still got a lot of interesting data can I now sync that back into my Mothership cluster when the connection comes up yeah yeah it's it's it's already ready right so this is this our design goal that is uh we uh each each node is I'm not saying self driving but it they can do everything by themselves do some filtering figure out those information that interesting stuff then they can send them to uh a cenal server when they detect the network is good okay so because we have some storage or like buffer right so you never lose data but when when the network is recovered or when you turn on the network then that kind of data can be synced to the central server the central server can know all the data along different side do some maybe correlation search or pattern detection yeah so it's it's pretty much like uh c car mulite or or the mirror thing it's similar to the that but yeah yeah yeah so we just implement this in the proon side okay so come the day that Amazon have their drones flying around us in the sky you'll be hoping they've embedded a proton server in each one uh I I hope that is there a many choices but uh assume they have good uh like 4G 5G so they can generate the data and send back to a server um yeah I get some some user really want to do everything locally yeah but uh uh yeah if the network or Len say is okay I think having each sensor on the Drone sent to uh Central kesis or C car do the processing there will be easier I mean we don't have to looking for trouble but uh there's a lot of choices for sure that would be interesting trouble to get into yes and then you'll have to optimize your binary for the weight yes yeah yeah um if someone wanted to kick the tires on proton where do we go first yeah of course yeah go go to our uh repos on the GitHub you can also get this from our temp pass.com uh yeah that will be easier you just uh temp pass.com I think we have a big enough icon to guide you to our uh GitHub and in our repos uh there's a command line it has many options right you can have using C to to grab our Banner from our uh server and you can run this directly or you can install it I mean install it just meaning you install to a certain pass and with some confusion file but it's optional you can just uh run that Banner in your current folder so everything is very easy and also we have dock image uh beside that we have a bunch of dock compost so dock compost is really a good way to oh yeah create some sample stuff right for example we have a sample how to uh using Randa to generate some data about click stream and visualize using for example Guana right I mean because I mentioned we have not just uh a stream processor but also a serving layer so that that's something if you are somehow no flank I don't think that's easily you can do that is using Guana to visualize your Flink query uh because uh Flink essentially want to get the data process it maybe sent to sent to a cka or to ol lab then you can quy from there I mean Flink is not really designed as a serving layer maybe they have something like gway recently but it's I GA it's trying to just do transformation and not do storage or serving yeah yeah yeah so you might have to send this at to uh clear housee then using Guana or other B to query it but in our case of proton you can just using Guana to query P directly showing ni chart yeah Gana metabase red Das will also port how's that working are you just embedding a web server in it and graph is going to there or is it going if you got some native connector yes that's also we largely leverage clle housee right so we uh again we uh portum is we call Power by uh CL housee it's not it's not really running a separate clouse process in our Stu because there's only one process is called pum if you choose the single node way right so it's interesting pum is a process then we just have this a lot of uh uh nice thing from clear housee and including this uh Port right so for example clear housee support it's it's interesting people in CL house really focusing a lot on the Simplicity and the on the flexibility so they have uh HTP Port they have TTP Port they even have different port for different database for example you can you can turn on certain port to using postgress or my CQ client to connect to clear housee it is oh really I didn't so so those stuff we get almost for free right so because P leverage that so we we really customize uh the clear housee Guana pring so that it can uh have much better integration was ort but that that kind of a channel that TTP HTP all those stuff is largely inherited from K house so that's the reason why we really get a lot of benefit from K house all those nice uh uh different driver for different language uh we have integration for bi systems but also we are contribute back to the CL house for example uh we we contribute some PR regarding How We Do streaming processing back to the community so that if CL house team want to merge it then uh you can get some basic stream processing in the in official clear housee version but if you want to more features for sure uh Porton will be the best way but we but in the same time Port because we are a small team with can iterate uh try different things faster and we uh we willing to share all the stuff to kous te but they might be more focusing on I don't know maybe Data Warehouse Market as a primary goal for them uh streaming is something you want to do but they they they willing to us as contributor but they may don't have enough team focusing on the stream a lot in today yeah yeah here's the code do do with it what you will yeah okay well I'm going to go and play with that then I I have installed and tried proton but I didn't know I could connect grafana to it and get nice pretty graphs for free so I'm going to go and do that Joe thanks very much for joining me thank you thank you Joe as usual you'll find links to all the things we discussed in the show notes including links to proton source and its docs and time plus and if that's left you curious about click housee specifically as an noap database I've added a link to a previous episode we we did with Al Brown where we did a deep dive into click house you might find that fun hat tip to Al while we're here before you check out that or another of our many episodes we're closing in on 50 now please take the time to like this one maybe rate it share it uh review the podcast it's all good for my heart and my feedback and good for the future of developer voices a future I now leave you to I've been your host Chris Jenkins this has been developer voices with Joe Jong thanks for listening o