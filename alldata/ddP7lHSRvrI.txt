so you want to become a programmer but let's be honest here you don't just want to become a programmer for the sake of it programming is a tool to achieve your goals in life and for most people the main goal is making lots of money and for most people 100K a year is an ambitious but a very realistic goal to set but no matter what you might have been told getting to this kind of success in the tech industry is not easy and it requires the right principles to get there the saddest thing is seeing all these motivated people working super hard to make make their dreams a reality but I can just tell that they will never ever get there because they are applying the wrong principles in their learning their practice and in the way they look at how to get into the industry that is why you need to be aware of these seven guiding principles that all programmers who actually get to a 100K plus salary have implemented and that the aspiring beginners who fail and quit have ignored or just not been aware of and they have massively helped me but not just as a software engineer actually also as an entrepreneur or and in life as well as we will before we dive in one bonus principle of an effective programmer is being up to date with the latest tools especially AI Tools in today's world for example today's sponsor did allows you to transform photos into AI video presenters at scale using a simple API so let's say you've created a side project and you want to monetize it somehow one thing that you're going to absolutely need is to have some sort of tutorial video to show your potential users on how to use your product in fact let me demonstrate this to you while I show you how to use D ID to get started open up did's documentation and click on the create a talk endpoint enter any script under the script tag then you can use an app called Postman to test out the request first click on authorization and paste your API key in there like this with the key authorization and value basic space your API key then copy the endpoint select post as the request type and type your script in the Json body you can change your speech voice from a range of options and choose what your presenter looks like from a list of speaker options and speaking Styles or even upload your own then did Will generate your AI talk for you just like this to retrieve it copy the given script ID and send a get request to the same endpoint then open the result IRL and voila internet made coder is the sexiest YouTuber ever oh stop stop the is a lifesaver for anyone who wants to shoot video content like tutorials or promo videos really quickly but doesn't want to spend the time and effort to film these videos yourself so if you would like to use it in your projects you can check it out from my link down below thank you for Di for sponsoring this video this first one is the most important principle of all although I'll probably say this about all the principles anyway this one's super important because it's related to how you actually supposed to solve problems as a programmer and knowing how to solve problems is quite important by the way because that is at the end of the day what programming really is so I want to tell you about the actual way you can actually solve any coding problem and find the root cause to any any bug that you encounter so let's say you see a bug and you see like a massive error code what most people are going to do is they're just going to look at the eror code maybe just paste it on Google paste it on chat DBT and just hope that they give them some suggestion that's going to end up solving the bug or whatever without actually properly understanding what they're doing and this is a big mistake what you supposed to do and this is very practically how you solve problems is that when you look at an error code which you'll see a lot of by the way as a programmer there's usually some indication of the line of code that is causing the bug what you want to do is just find that line and then just like follow the sort of path of the different lines where the errors have encounted and try to get where is the root course where is the root cause of the error and you finally find that one line of code maybe right now you don't even know what is causing that error but you know that there is a problem on this line of code right here and now you have essentially isolated the problem the very particular point of your program and you can look at that line and then ask maybe chat gbt or Google okay what is wrong with this line and try to fix it that way when you do it this way it might be a slightly slower way of solving bugs solving problems but you actually learn a lot more you learn to discover the root causes of the problems that you're encountering and this is how I think about when I solve problems in any domain in my life let's say I'm feeling lethargic during my day and I don't really know why what most people would do is like oh this is how it is you're thinking through this lens of finding the root cause of problems when you mind do is like think about okay what do I usually do before when I feel lethargic and you might be like okay I usually have like a very carb heavy lunch for lunch like every day oh maybe there's something there and then you maybe change it and you like tweak some of the inputs in real life okay when I have a less carb heavy lunch now I'm not feeling lethargic so now you found the root cause you might learn about why it does that things like this and this is a really key way of looking at problem solving not just Rec coding but in life in general of just looking at the individual problem and Diving as deep as you possibly can to find the root cause of the problems which is exactly what is going to be expected of you if you want to be a software engineer worth that 100K salary to take us to the second principle I want to tell you about my time in the Finish military so in Finland we have the military service that is mandatory for all men you do it around 19 and it's basically 6 months where you basically have to do a lot of very very difficult things you have to be in the forest wake up it's 5:30 in the morning is minus 25Â° with is this much s and you just have to go and walk in some Forest to where the enemy apparently is or whatever and there's some things that you definitely learn through a process like this the main one of which which I've also learned to apply to coding is that in any difficult situation never helps to become emotional it never helps to start complaining the kind of people that you actually want to be around in these difficult situations are people who are able to stay calm who are able to take things slow who don't get get flustered we can just look at the situation rationally and this is the second principle that you want to be able to follow because in your job as a soft year if you get to these hypertensions a lot is going to be expected of you there's going to be a lot of very stressful moments and I'm telling you if you just learn to stay calm in every situation you're going to get so much further than your peers who cannot do that when I started learning the code there was another person who started learning at the same time at the beginning we would always like compare our progress we'd be like oh I've been learning this and this oh I've been doing this and this and for a while we were doing that but at some point I started realizing that whenever I was asking him where he was in his journey he sort of tended to always be at the same stage and he was sort of start falling behind from me and today he has completely stopped whereas I am still going I keep thinking why is it that I was able to keep going where my friend completely stopped and the conclusion I came to is that what most people who fail rely on is motivation but actually relying on motivation no matter how much you might have of it in the beginning is the best way to fail because at some point motivation is going to die out there going to be moments when you really really don't want to do it the only thing that is going to keep you going in these moments is that you actually want to learn like you actually have this infinite curiosity for actually doing the thing that you want to do be learning the code or becoming like whatever you want to become so the third principle is to have infinite curiosity for the thing that you're doing if you're not interested in it like freaking find the interest find the things that spark some interest like some intrinsic motivation to actually keep learning about the thing because that is the only way to keep going when things get tough but let's not get confused here infinite curiosity for learning a Mastery does not mean that you simply start here and you get here in one straight line it never works that way the journey from start to success doesn't look like this he always looks more like this where there's ups and downs what most people think is that in these up moments that's when the success is made that is what differentiates the successful people from the failures but I actually think that success is made in the Downs the very very difficult moments the moments of failure because it's the moments of failure when you actually learn and this is what the most successful programmers have learned it's when you are struggling with that bug rather than complaining about it see it as a moment of learning and a chance for you to discover something new about your program that wasn't working that you can now learn about and then next time you don't have to make that same mistake again it's only when you choose to let the failure stop you that you truly fail so just don't do that so principle number four is to embrace failure another thing you must do is to quit being a complainer so I went through a period when I read about the stoic philosophy and I promise this will relate back to programming in a second the stoicism is this ancient Greek philosophy and the most important of their teaching at least for me personally is how they talk about things that we can control and things we cannot control so in life we have certain things that are internal and in our control like thoughts emotions and actions and things that are external that we cannot control like events like other people and angry bosses or the economy or whatever and the thing about these external things as much as they might affect us we cannot do anything to them we cannot change them and it still baffles me how most people spend all their time and energy worrying and blaming the external world for why their life still sucks like listen there will always be things happening in the industry that affect you maybe the interviewer was a take maybe the economy does suck but even if those things are true focusing on them changes nothing so the fifth principle is to always focus on what you can control which is the case of coding is simply continuing to improve your skills so let me tell you something about what coding in a real company or a startup actually looks like there actually one thing to build personal projects but a completely another thing to build things in the real world that you will actually be building at your real job so when you're building a personal project you might be following a tutorial you might have some like very basic like very clear steps to follow and it's sort of a very streamlined process and if you expect the real world to be like this then you're going to be mistaken because in the real world the thing that creates value is always going to be building something new that might never have been done before so what follows is that as an engineer to create value you need to do things that have not necessarily been done before which means that you might not have an exact tutorial to follow you might not have have exact clear steps to follow on to know exactly what to do every single day as a real engineer you're going to be in situations we have no idea what to do we being conditioned by the world and the education system and whatever we always supposed to have like very clear instructions on exactly what to do and when you get into the real world and it no longer looks this way most people just let this completely paralyze them if you want to Be an Effective engineer in the real world you need to be resourceful you need to have the ability to take a problem where you might not know exactly what to do and then go and dive online and just find the steps to do that yourself and that is where the sixth principle is the ability to find things out yourself last but definitely not least if you do everything else right you will still fall short unless you do this one last thing there's really no magical pill or hack or project that can suddenly make you into the kind of developer needed to get the highest salaries like that is just the cold hard reality you can look at the process of going from 0 to 100 K developer as like a game first you learn the basics that is level one then you perhaps build your first project that is level two eventually you're get into Data struction and algorithms and level five or whatever the point is whatever step you're in there's always that one most important action or thing that you need to do next to make progress and the truth is that nothing will get you closer to completing that step than just doing the work that is in front of you you can never escape the fact that the work just just needs doing to become a 100K developer you don't need high IQ you don't need a CS degree you don't need a certain age to be or to be from a certain country all you need to do is to pick up your laptop think about what is the most important thing that I can do today to make progress towards my goals and this is the seventh and final principle do the work in front of you and as long as you do that whatever else you do like eventually you just keep doing step after step after step after step you will get there other people just like you have done it before and so there's no reason why you cannot do it as well if you want to know what these practical steps are from zero to becoming a master programmer this year starting right now you should watch this video right here and keep these principles in mind from this video while you apply those principles into these steps so see you there