while python is a beautiful and friendly language it's not known for its speed or type safety but rust is so today I'm going to make your python code just a little bit Rusty and we're going to look at ways to combine Python and rust to get the best of both worlds if you'd like weekly updates on interesting topics like this make sure you join my free newsletter by going to iron codes.com I've also put the link in the description of this video I'm going to show you a couple of basic examples of how you can combine Python and rust code what I have here is a lip. RS file a rust file that contains a couple of simple functions in the overall project setup that I'm using there is a couple of things that you need to do in order for this to work so one is that we have a source foldo that contains my rust file then I also have a cargo tomal file that contains dependencies and in this case I'm using p 3 that I'll talk more about in a minute and then finally there's a Tomo file that contains a project name in this case that's P3 rust as you see there's some errors here that's because we're using a non-standard p project file which is because of the build system I'll also talk about that in a minute but what you need to make sure is that this name here is the same as the module name that's right here and that's how pio3 actually works so pio3 is a library that allows you to write Rost based python modules and this basically allows you to get the best of both worlds on the one hand you can have your very performant typ saave rust code and then call that code from your python script so you can kind of move off the things that are computationally heavy into a rust Library that's going to be very optimized stable memory save everything that rust offers and then you can call that directly from Python and then also get the flexibility and the ease of use of python at the same time so Pio 3 basically allows to get the best of both world and how it works is that it defines these tags like Pi module and Pi function to actually expose the rust functionality to the python module one thing that you see here is the pi result type so the way that rust does error handling is different from how it works in Python and that's why when you make the connection between the rust code and the python code you need to make sure to do that in a particular way and in this case that's done by using the pi result type and this basically represents you can also see it in a documentation here the result of a python call and what this basically does is that if for some reason the function fails then it's going to raise an error in Python so this is then the definition of a function that's going to be available in Python it's called sum as string and it simply adds two numbers and turns that into a string nothing special but you know you can write any Ross code here that you like and you can then run it from python next is that we Define a module which contains this function and that's what we see here here so this looks a bit complicated but actually what it does is that it gets a module reference and then you can add functions to that module and then those functions are going to be available in Python when you import the module so in this case the only thing we do is that we add a function sum as string to the module and there are some wrappers involved in order to make this work but that's basically what it does and then in your python script you can simply import this module and then run the code so now I'm running some string from this P3 rust module now this doesn't work out of the box because if I try to run python main step 1pi you see that actually there is no module it can't find the module and that's because we haven't built it yet and in order to build a rust module and turn it into a python module we need something else in this case I'm going to use Maturin now before we can start using Maturin I'm going to need to install it so what is maturing exactly well it's a tool that allows you to easily buil deploy rust based python modules exactly like the thing that we're building here it's sort of comparable to poetry and it uses this pip project Tomo file so as you can see it's not completely compliant to the way that poetry Works which is why I'm getting all these errors but it basically works in the same way with just a few commands you can build your rust based python module and then import it in your python script and it can even publish your module to PPI so that's quite helpful maturing is not just for rust based module it also supports other things like uh CFI or cpython if you want to create a new project then you simply write Maturin in it and this is going to create folders and files already for you but since I've already done that I don't need to do that in this case but what it basically generates is a source folder containing a lip. RS file it adds a cargo. file which is what we have here and it adds a by project tho file now you can also do this by hand obviously but mature in has has an easy initialization mechanism for you one thing in particular that's interesting to note in the PIP project file is this part which allows you to configure Maturin like in this case for example we note that it uses p 3 so now that we have Maturin installed and set up we can simply write mature and develop so this is going to compile everything installing any crates that you need in order to run this particular project and then when it has built this then we can actually simply run our main step one and we get the expected result so what we did in the main function simply call sum a string on the numbers one and two and as you can see predictably this prints 3 now there's way more things that you can do with pi 3 than just exposing simple functions I have another example here so in this case we have an enumerated type defined in Rust and we can also export that to python using the py class tag or here's another example I have a struct attachment so this is an email example and there we can also expose that using using p class we can indicate the module that it should be part of and you can even indicate using get all and set all that you're able to read and write the values in this struct in this object with P methods you can expose an implementation so remember that rust doesn't have classes it has structs and you can add via the imput keyword uh methods to a struct so using p methods this will actually be part of a class in Python and then I'm kind of repeating the same thing for other rust structure so here is another struct email that has attachments so these links also work email also has methods such as a new method and a two string method and send method and what I've added here is a couple of macros to easily add classes and functions which I then use in the bio3 rust function which is the function that defines the module where I simply add the classes attachment attachment type and email so again if you want to use this in Python and here I have script that actually does that so now from bio3 rust I import attachment attachment type and email and as you can see the way I'm using it here is that this is simply a class in Python so we have the attachment class this we can use as an enumerator type we have an email and then we can also call methods on the email object and then it can simply run the python script as I did before and then it's going to print out this information and what's nice you see that I'm actually printing the things here and that's possible because in my uh rust code I actually implemented the string D method function so as you can see in Rust you actually have quite a bit of control of how you can use these objects that are exposed to python by the way if you're enjoying this video make sure you also join my free Discord server and let us know how you would like to use rust in your python projects we have a really lovely community of pythonistas R stations C+ plusi I don't even know what that's called people normal people very friendly they love to code join via description below now that we've created our rust based python module it's very easy using Maturin to also publish it to pip you simply write Maturin publish and this is going to start the publication process and then once it's published you can simply install it with Pip final thing I want to show you quickly is that if you just need a bit of rust code and you don't need an entire module there is actually another option to do this using the r R import module so after you've installed that it's actually quite easy to use so here I have another example of a rust script this is sort of a copy of what I had in the other example as well so there's a couple of enom structs in here also using p 3 the only thing I've added is a rust import comment at the top so rust import knows that it should use pile 3 to import this as a python module and then what you can do is simply in your main script you add a import the rust import. import hook import that makes sure that you can actually dynamically import these things and then from the rust file I can directly import attachment attachment type and email and now I can run this code just as I do regularly using the python interpreter and then you see it dynamically gets the necessary rust grades it compiles everything and then finally it runs script and you get the expected result just as before so you might wonder why not always use this well in some cases you might need multiple rust files or you know more complicated module and it makes sense to actually build it out as an actual rust module in that case using Maturin and actual uh rust Source folders with different files may make more sense but this is an easy way to just import a bit of rust code in your python script and just work with it without going through the complication of creating an actual rust Library you know perhaps you just want to prototype something or or just get something done quickly then rust import is great choice so whether you're using rust import or mature in both of these are nice ways of being able to use rust code in your python script Maturin is more suitable for complete modules that you also might want to publish to ppip rust import is very useful if you just want to quickly import some Rust code in your Python scripts so I have question for you have you used any of these tools are you considering using rust code more in your python script why is that let me know in the comments personally I really enjoy working with rust I've been working on developing a couple of tools lately I'll do another dedicated video on Rust showing you a bit how I did that and the kind of things that I learned from it it's a really nice programming language to work with I don't think it's going to replace python I mean python has its own Pros as well which I still really enjoy but it's nice to know a little bit of both and being able to combine them is just awesome if you want to learn more about about rust and the possibilities that it offers check out this video next where I dive deep into rust thanks for watching and see you next time