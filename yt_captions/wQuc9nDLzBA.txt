everybody shut up hey look at this I'm actually taking I'm turning off alerts right now I demand everybody clap for me right here dang it I didn't get it in Russ fact versus fiction five insights from Google's rust journey in 20 22. this just came out this just came out like today all right let's do this reaching version 1.0 in just 2015 rust is relatively new language with a lot to offer developers eyeing the performance and safety guarantees that rust provides have to wonder if it's possible to just use Russ in place of what they've been using previously what would happen if large companies tried to use it in their existing government environment I'm not sure I got government out of there how long would it take for developers to learn the language once they do would be productive oh this is an exciting oh this feels good this feels good can we all agree with that uh in this post we'll analyze some data covering years of early adoption of rust here at Google at Google we have been seeing an increased rust adoption especially in our consumer applications and platforms pulling from over 1 000 Google Developers uh who have authored and committed rust code as some part of their work in 2022 will address some rumors head on both confirming some issues that could be improved and sharing some enlightening discoveries we have made along the way all right okay this is a little intense on the foreplay but let's get to the point we would like to particularly thank one of our key Training vendors Frost systems as we started our rust adoption here at Google we wanted to highlight some new freely available self-serving training materials called comprehensive rust crap yeah that by the way is that is that I can't tell is this uh supported by the rust Foundation I can't tell I can't it has the word rust in it it has to be obviously no one would use the word rust unless if they're a part of the foundation right maybe uh that we in the community have worked on over the last few quarters rumor one Russ takes more than six months to learn debunked you're right it takes a year all survey participants are professional software developers or a related field employed at Google while some of them had prior rust experience about 13 most of them are coming from C plus plus uh python Java go or Dart okay uh based on our studies more than two-thirds of the respondents are confident in contributing to a rust code base within two months or less when learning Russ yeah but okay so one thing that they're not putting in here which is are they doing it full time if it's full-time job I would expect this right maybe an hour count would be a little bit better because again six months six months what six months full time six months part-time six months hobby six months weekends six months weeknights like what are we talking here what is six months of what right uh further a third of the response became as uh as productive using rust as other languages in two months or less within four months that number increased over 50 percent anecdotally these ramp up numbers are in line with the time we've seen for developers to adopt other languages both inside and outside of Google ah ah I mean you can adopt go in like an hour what are you doing with go uh I don't know you just you just kind of write it like uh you're writing uh just some language you know what I mean uh overall uh we've seen no data to indicate that there's any productivity penalty for using rust relative to any other language these developers previously used at Google this is supported by the students who take comprehensive rust class oh interesting I wonder if this is okay okay the question that I asked on the second and third day show that experienced software developers can become comfortable with rust in a very short period of time very interesting actually time until uh confident writing rust still ramping up uh more than four months three to four months one to two months two to three weeks interesting I I wonder I wonder if there's uh what's it called I wonder if there's like a uh language background breakdown right so if you've only if you're self-taught and you've never written anything but JavaScript where do you fall into this bucket if you're going to a university where you have to learn about programming languages stack frames all that and you programmed nothing but C plus plus I bet your experience is a lot different right you are you're doing a very very very different you know experience here and so I don't know I'm curious what this means and confident writing rust I mean I'm confident writing rust but there's things that I'm not confident in right so I don't know rumor two the rust compiler is not fast as fast as people would like confirmed that's the that's the dumbest wording I've ever seen if there's ever been a rust simp ever to write a line right here this is like official rust Foundation language the rust compiler isn't as fast as people would like it to be you know what I mean so are you saying it slow it compiles at such a rate in which people find less appealing as other compilations so you're saying it's slow what we're trying to say here slow build speeds were by far the number one reported challenge that developers have when using rust with only a little more than 40 percent of respondents finding their speed acceptable um yeah I guess it probably depends again I wonder 40 of their respondents are C plus plus people because guess what it's like C plus plus is faster but it's you know linking takes forever on all systems and so it's like uh you know is it because even a fully cached build for the Netflix code base still with linking and all that it takes like it takes multiple multiple multiple seconds and so it's like yeah okay whatever you know there's already a fantastic community-wide effort improving and tracking Rusty performance there has supported both or by both volunteers and several companies including Google and we're delighted to see key developers working in the space but clearly continuing and potentially growing additional support here would be beneficial rumor three unsafe code and interop are always the biggest challenge challenges debunked oh interesting okay because I've always heard that this was a very difficult thing is interrupting um the top three challenges areas of rust uh for current Google developers were macros okay reasonable ownership and borrowing but wait that doesn't make any sense based on this graph this graph and that and that how wait how is this and that even possible is it just me or is that kind of like a weird grouping to say that everyone becomes confident pretty dang quick but ownership and borrowing is hard ownership and borrowing should be the easy part once you understand yeah confidence what the hell's confidence because async programming I mean what do you mean you're confident async programming's hard it's hard and rust turns out there are things that are more challenging yeah like are you confident in contributing yeah you can be confident in the language but find some parts still challenging you're right but this is like rust 1.0 like you can't you you can't do anything in Rust if you don't understand this yeah I know ownership and borrowing is rust this is confusing line anyways confusing line whatever whatever okay people okay okay ownership and borrowing as layers yeah layered these nuts something uh writing unsafe code and handling C plus plus uh interops were cited as something Google developers had encountered but were not top challenges if writing C C plus plus interops is less challenging than ownership and borrowing I'm having I'm having a hard time because ownership and bar I mean ownership and borrowing is a superset of C and C plus plus uh interrupting right because you have to be able to create these structs and blah blah blah blah and get them out and unsafe and yada yada yada yada until you have them into something you do uh macros I mean macros totally get macros are like their own Island right so for those that are going well what about macros macros are kind of like their own Island you can be great at rust and never touch a macro you just know how to use them that's fine right especially uh what's it called uh proc macros proc macros are like final boss level you know what I mean it's that's hard uh these three other areas Place uh where Russ language design team has been investing in flattening the learning curve overall as well as continued Evolution uh in our internal survey strongly agrees with these areas investment uh rust has amazing compiler error messages confirmed simp uh Russ is commonly regarded as having the most helpful error messages in compiler space ah clearly they haven't seen a c plus error message uh that held up the survey very well only nine percent of respondents are not satisfied with the quality of Diagnostic and debugging information in Rust feedback from comprehensive rust participants show the same people are amazed by the compiler messages uh the let's see at first this is a surprise people are used uh to ignoring large compiler errors but after getting used to it people love it yeah I mean I agree there's some nice ones but you know the thing is is I always find that the errors that are nice are errors that are really easy to understand right so anyone that's in the I understand confident writing rust those errors go away it's the new errors that are like that get progressively harder you know like one of the things I find the hardest uh which has has been gotten a lot better lately in Rust is when you need a trait and you don't know the trait you just know you want to like say read from an async socket and you don't know how to read from the gosh thing right you're like what is the trait something Auto is it read is it or receiving like what what is it right like what is the thing I'm trying to get out of it and oh man that's I find that to be hardest and you there's not really like a good way to get it you know what I mean uh the following are excerpts from the exercise of some of uh internal googlers uh have been doing practice let's see doing to practice we're all solving Advent of code yes yes let's go I love that this is great day five exercises we need to perform a search for entries within a table the air the error below not only detects that our pattern matching on the result was missing a case but also makes a suggested fix uh have you seen this p you haven't seen the P they only accept seeing the p and that's it on day 11 we need to check for whether an element is within the bounds of a grid the rust from warning below the text that you have a redundant comparison to the fact that the types are unsigned and suggest code that could be removed okay yeah yeah due to type limits yeah that makes sense that makes sense it's always greater than or equal to rust because I assume I is a u size right um the survey group uh have answered that the borrow Checker was the top headache when learning the language but once they've learned they understand it so we're talking back above here but anyways that makes perfect sense because when you're learning how to use rust why would you be doing this it doesn't make any sense like so like this whole it's you know like when when stack Overflow put electron and Cuda in the same category in the survey this feels like that right it's just like I don't quite get it why are these two things together um all right the respondent said that the quality of rust code is high 77 of developers were satisfied with the quality of rust code in fact when asked to compare whether they felt that rust code was more correct than the code they re uh write in other languages an overwhelming 85 percent of respondents are confident that the rest code is correct yeah um interesting I I have zero percent confidence that my code is ever correct uh and it's not just correct it's also easy to review more than half response say that rust code is incredibly easy to review as an engineering manager that result is in many ways at least as interesting to me as the code authoring results since code reviewing is at least as large a part of the role of a professional software engineer as authoring interesting okay yeah I mean if people think it's easier to read I think that's that's awesome I I don't necessarily feel like it's easier to read right I definitely don't feel that way but okay uh as we both let's see uh as both we at Google and others have noted developer satisfaction and productivity are correlated with both code quality and how long it takes to get a code review if rust is not only better for writing quality code but also better for getting that code landed that's pretty compelling set of reasons behind even performance and memory safety for a company or for companies to be evaluating and considering adopting it yeah I'd say that that's very compelling if true big if true right I I personally am I am not convinced it's uh big for readability uh I I think the reasoning especially around lifetimes and stuff like that could be a little bit tricky in PRS because you really have to understand the use cases and what is going on and if there's multiple of them how are you going to do that you don't want things being pinned to one lifetime blah blah blah blah well over a thousand developers is a good sample of Engineers we're looking forward further adoption and uh future survey that includes many more use cases in addition while many of the developers surveyed join teams without rust experience this population does have uh more excited early adopters than we would like or then we would like from a broader survey stay tuned over the next years for another update okay so obvious critiques here is one this is a Google sampling so if they work at Google there's just a certain kind of nerd that can get hired at Google right now do you know what I mean there's a certain there's a certain nerd level do you know what I mean and when there's a nerd level at like that someone that's diving deep into doing you know lead code every day they might be perhaps more willing to do something you know what I mean they might be a little bit more into it uh so we have a very yeah they're very uh they're very you know into it uh number two another thing that kind of sticks out to me is that this is a self-report survey I would love to see the problem is is that you can't really tell if things are actually better or not right perception is nine tenths of of the law at this point and so if you perceive you're writing better code right like I perceived that this code was nice to write well guess what you're gonna like writing the code then and you're gonna think it's better is it is it actually true now there may be less memory problems I got a hair in my mouth there may be less memory problems perhaps it has more safety guarantees and such as like you know match statements and all that I'm totally I'm I'm totally on board with that rust is a great language but one thing I've noticed about rust which is different than other languages when you get to the point that you've made a mistake in your design and you need to refactor what I find in Rust that is different than other languages is that my refactor tends to be larger because typically you know like lifetimes are extremely leaky abstraction right they they like as you go like everything just balloons because they're a part of the type I just find that it's when I'm wrong I'm much harder wrong in Rust and so you know what I mean like is it good is it bad I don't know it's hard to say but I just find that to be the case you know what I mean uh yeah uh literally restarted a three-week project because of that exactly you will that's the thing with rust is that you you will you will find you're getting yourself much much further out you know what I mean uh Prime gen your favorite person has a new video for you to react to oh thank you uh lifetimes are so painful they can be they can become very very painful like I love that you can hide it behind stuff and you can eventually make really nice you know you know interfaces for it but it's really hard rust kills you if you make a bad code or with compiler or with lifetimes yes that rustin's rust is fun until it's not and you have to spend the next eight hours refactoring stuff instead of working on a feature you wanted to yeah see that's what I find with rust this I find this to be very true when you're wrong you are just much further wrong now with JavaScript or go or even C plus plus or any of these other languages you can kind of get around it you know what I mean you can kind of like you know that Meme with the bricks and then they become like all crappy and then they're putting more bricks on top to like make it less crappy again you can kind of do that with other languages whereas I feel with rust you really don't have that as a feature right you can't really do that um you can't really just have like a shitty thing and then try to make it nice and nice again uh it's just making a debt faster it's hard you know it's hard yeah so rust is a compiled language where you still just rewrite it like in JavaScript but instead of refactoring because it's easier noted yeah you got it all right there you go hey guess what I mean first off the name is the primogen second off that's why we're going to learn oh camel okay