recently in Python 3.11 they released a new feature called the exception group and this was released with python 3.11 of course but let's go ahead and see how it actually works and what we can do with it in Python so to get started we're going to go ahead and create a function called create EG which is just going to create an exception group now here we will type EG is equal to an exception group so we can actually manually create the exception group and the first thing we have to provide is a title for this exception group so here we can type exception message exclamation mark and then we need to pass in a list of errors and it can be one or it can be multiple but here we're going to go ahead and get started with the file not found error and this is going to be a fake error that we create so we're going to say for example anime.png not found ellipses we'll add a comma and we will duplicate this line so we have two of these file not found errors and we don't need that second square bracket and this time we're going to say bob.png not found so we have two file not found errors and to finish this we will add a value error and here we will type in that mayonnaise is not an instrument and I'm just going to do this so it stays on this line so as you can see we have a list of errors that have been grouped into an exception group and you're going to notice these much more often in Python 3.11 so it's good to know how they work now we also need to go ahead and raise this exception group so we can get the exception immediately now if we go ahead and run this we can go ahead and say create EG run the program we're going to get this funky new exception message back and as you can see we have the exception group with the exception group message which is our custom message followed by the errors in order so what we want to do is learn how we can handle each and every one of these errors using the exception group so what we're going to do first is go ahead and create a try and accept block so try creating this exception which it will do 100 of the time and we're going to accept the exception group as EG now inside here we can type exceptions and say EG dot exceptions so this will retrieve the exceptions from the exception group now if we run this we're going to get a two pullback with all the errors that we put inside the exception group but that's not really useful at the moment because we put everything in this one exception which makes it really hard to handle these errors appropriately so while we could get all the exceptions by using this syntax there's an even better way to single them out so we can handle them appropriately so what we're going to do here is use some new syntax we're going to type in accept star which is used specifically with exception groups and this says that if you find an error of file not found error you want to take all of those and put it into this section of the exception Handler so we're going to still type in as EG and this time we can go ahead and handle these eg.exceptions however we like because now we're retrieving this specific error for this specific exception and we can do the same thing with the value error so except star and we're going to pass in the value error as EG then we can print EG exceptions because there can be multiple so you might want to Loop through that you might want to handle each one of the file not found errors separately that's up to you you're not going to get a tuple returned with all the errors from the file not found error and all the errors from the value error so if we try to run this one more time we're going to get the errors handled in their respective cases so we have value error and file not found error in their respective blocks and you can verify this by typing in for error in EG dot exceptions print error and if you run that you're going to get both of these errors printed in the file not found error so we were able to extract those errors from the exception group and handle them accordingly now it's also worth mentioning that if you forget to add one from the exception group it's going to tell us which one we forgot so as you can see we didn't handle the value error for mayonnaise it's not an instrument so it's going to still tell us that we need to handle that and that's something good because now we know that we only try to handle file not found error so we should also handle the value error and the same thing happens if you do the opposite it's going to say that there's these two errors that we should handle but we didn't and they're part of the exception group another thing worth mentioning is that you can have an exception group nested inside another exception group so here you can say exception group nested exception and we can add another array inside here and we're going to add a value error that says okay which is a terrible message but that's what I'm going to type in and if we remove this try and accept block and type in create EG and run it we're going to get the nested exception inside this exception group so down here at line number four you can see we raised an exception group exception and this is a nested exception with the value error inside so that's something to look out for but let's go ahead and see wow it's it's snowing nice but let's go ahead and see a real example of where you might see this so to do it we're going to go ahead and import async IO now we're going to have two functions here or two async functions and one is going to read the file So async Def read file it takes a file name it opens the file name and it tries to read it and if it can read it it will return the data if it doesn't find a correct file it's going to throw an error then we also have a dummy function that says fetch data which takes some data type integer and returns to us a dictionary now I went ahead and said that if the data is equal to zero we're going to raise an exception just to show that there's no data and something went wrong in this request otherwise it's going to just return the data with whatever data we inserted now we need to create an entry point So async Def Main and inside here we can play around with the code so we can say try async with async IO task group as TG and this is some new syntax that I will cover in another lesson but just know that you will find exception groups being used with the new async IO task group so here we'll type in TG create task and we want to read the file for example we'll say anime dot PNG I don't have anything that's called that so it's going to throw an error for sure then we will duplicate this so we can have another file and this will be hello.png again that doesn't exist for me and we will type in TG create task and we also want to fetch some random data at zero which at this point as I mentioned earlier it's going to throw an error because if data is equal to zero it's going to raise this exception now if all of this goes good we're just going to print completed and that's never going to happen due to all the errors we have here what we can do next is go ahead and create the accept block so here we can type accept file not found error as EG and thanks to that we can type in for error in eg.exceptions print the error and I'm getting some syntax highlighting here because I forgot to instantiate the task group but if we go ahead and run this so we call async IO dot run and insert Main the other Main and run it it's going to give us some errors so right now we still get the error exception group traceback because we did not handle the exception that says no data found which is the exception that we get when we're handling fetch data but we did get the errors for file not found so as you could see in the console we got the error message printed out one by one so it's important we go ahead and handle the other exception so we'll go ahead and say accept exception as EG print exception or EG dot exceptions now if we print that we're going to get all the exceptions back and we can even do this at the index of zero since we are guaranteed to have that we don't have to be scared about accessing it although I would recommend using the for Loop because it is much easier to handle multiple this can easily go wrong and raise another exception if there's no exception there so we're just going to print eg.exceptions and that's perfectly fine now with the task group it's important to note that you're not always going to get all of these exceptions showing up down here because if we do something such as a weight async IO dot sleep for two seconds for example these two tasks are going to start and throw an error but we're not going to reach this task because as soon because as soon as a co-routine raises an error it's going to exit out of this task group and we're only going to be able to handle the errors that were raised so if we run this now we're not going to get the third exception because we didn't have time to reach it but if we happen to start Three core routines at the exact same time then we can easily get a task group back for that so if we run that again without the awaits.sleep you'll see that we will get all of the errors back and the last thing to mention is that you cannot combine accept asterisk with the a normal accept log it's not going to allow you to do it it just does not like that try statement cannot contain both accept and accept but that's actually all I wanted to cover in this lesson regarding exception groups please do let me know in the comment section down below what you think about them and whether there's something I missed I would love to hear about it but as always with that being said thanks for watching and I'll see you in the next lesson