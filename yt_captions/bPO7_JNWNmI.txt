hi everyone in this short series we'll be looking at creating a scene based editor tool for constructing 2d shapes one possible use for this might be defining regions to quickly place props into a scene anyway the point is of course more just about learning how to create editor tools in general so that you can make whatever you need just to be clear I'll only be covering the editor scripting side of things in these videos so for some of the background stuff like triangulating the shapes I'll be providing some scripts for download okay now the goal for this first episode is very simple just wanna be able to left-click in the scene view to add in points and have these points be joined together by dotted lines to show the outline of the shape and also to have this work with unities undo and redo functionality okay let's start by creating to see shop scripts the first called something like shape creator and the second something like shape editor and the shape editor script is going to go into the editor folder so let me create that quickly drag that in now and I'll open up the  crater so for the time being this is just going to hold a public list of vector3 is for all of the points in our shape and I'll just initialize that straight away to a new list of vector threes and I don't want this to show up in the inspector so I'll just add this hide in inspector attribute here alright you can save that and head over to the shape editor script so organs you need to use the unity editor namespace and this will inherit from editor instead of monobehaviour and we need to say that this is a custom editor of the shape creator script so type of shape creator like so alright and then to actually start drawing in the scene we're going to use this on scene GUI method so this method is called automatically whenever there's any sort of input in the scene so obviously things like key presses or mouse movement but it's also called separately for layout and repaint events which we'll worry about a little bit later on for now we can get the current event using the event class and I'll just call this GUI event and set this equal to event dot current all right I'd like to start by getting the position of the mouse so we can use GUI event dot Mouse position but this is just the position of the mouse in screen coordinates so we want to convert this to world coordinates now the way we'll do this is by first constructing a array I'll call this the mouse ray by using handle utility dot a GUI point to world Ray so the GUI point will just be the GUI event dot math position now array is of course made up of two values its origin which is its position in 3d space and its direction what we want to do is choose a height for our draw plane and then project this mouse ray onto the draw plane and that will be our draw point the problem of course is how to actually do this mathematically so we know that if we start at the origin of the Ray and move in the direction of the Ray for some distance then we're going to arrive at the draw point unfortunately there are two unknowns in this equation the draw point and the distance but we do know something about the draw point we know its height since that's just a value we chose so we can rewrite this equation using the y component of all of the vectors so origin dot y plus Direction dot y multiplied by the distance is equal to H the Y component of the draw point so if we simply rearrange this we can find that the distance is equal to H minus the Y component of the origin all divided by the Y component of the direction we then just plug that value into there to find out draw point okay so back in the script I'll create a float called a draw plane a height might as well just set at zero I guess and then float distance to draw plane is going to be as we saw the draw plane height minus the Ray origin dot Y and all of that divided by the REA direction dot y then our actual mouse position is going to be Mouse rate of origin plus mass for a dot Direction multiplied by the distance to the draw plane and if you prefer we can actually rewrite this in a slightly simpler fashion which is just mouse ray dot get point passing in the distance to the draw plane okay now what I'd like to do is when we press the left mouse button I want to add a new point to the shape creators points list and that point is of course going to be the mouse position so let's say that if in Kiwi event dot type is equal to a vent type dot mouse down and gooey event dot a button is equal to zero which means that it was the left mouse that was pressed down then we'll want to add a point to the shape greatest point list but currently we don't have a reference to the shape creator so let's make one up at the top here say shape creator it's called shape crater and this needs to be assigned to whenever the editor becomes enabled so to start at the bottom here I'm gonna create avoid on enable and when it's enabled will say shape crater is equal to target so that's the object being inspected as defined by our custom editor attribute up here and we'll convert this from an object to a shape creator okay so now in this little if statement we can say shape creator and dot points and dot add and who add our mouse position to test if this is working let's just have a debug dot lochia and we'll print out ad plus the mouse position okay let's save that go into unity I'm going to create a new empty game object and just assign the shape greater script to that so now if I left click in the scene I shall print out ad and the position of the mouse at that moment but irritatingly of course when we left click we're also deselecting our object and so we're no longer on the editor and I have to reselect the object to click and add in a second point now the way we can get around this is in the unseen GUI method we create a default control with handled utility dot add default control and this means that if we don't click on anything then it's going to pick up this invisible default control as being pressed on and so it won't deselect our object now we need to give this default control a control ID and we can generate a unique ID for us using the GUI utility George get control ID and we just need to give us a focus type which basically just means can it be selected using the keyboard and in this case it can't so we just see this focus type dot passive all right so we now have that default control and we only need to add the default control by the way if the GUI event type is equal to event type dot layout so I'll just include that quickly all right so now we save this go into unity wait for that to compile and we can now press around and we get our ad print out and the object remains selected okay let's go back to the editor script and I want you to draw in each of these points we've been adding so I'm going to use a for loop from I equals 0 to I less than the shape creator dot points dot count I'm not using a for each loop for this because we'll actually need the index a little bit later on so here I'm gonna say handles dot draw a solid disk so we redraw that disk of course at the current point location so shape crater dot points with an index of I and the normal will be vector three up so that the disk is just pointing upwards and of you say 0.5 for the radius let's then save that and go back into unity and once this compiles we should see disks popping up for all the clicking around I did earlier and if I left click in the scene now we'd of course hopes that a new disk will appear but if we did this a bunch of times you'll notice that it's not always quite working sometimes the disk is just a little bit delayed in appearing and sometimes it doesn't actually appear at all and we have to do something like right click drag to change the scene view to actually force the editor to repaint the scene to fix this we're going to ask the editor to do an immediate repaint whenever we left click so going back into the script I'm going to create a new booboo called needs repaint up at the top here and whenever we click to add in a new point and we reset needs repaint equal to true and then somewhere down here I'll say if it needs to be repainted then handled utility dot repaint okay so if we save this now go back into unity and once it's compiled we should be able to click and we'll see the point's being added in instantly now it will be nice to have this set up with unities undo functionality so let's quickly come into here and before we add the point to the shape crater gray say undo dot record object and we want to record the shape crater object and we can give a name to this action so I'll just call this add point alright so very roughly how this works is it records the state of the object over here and then compares it to the state of the object after we modify it to figure out what changed so let's quickly remove this debug bloke save this go into unity to test the sound I'm just gonna clear the console here and also reset the shape creator to just get rid of all of those points and I can now click to add in a new point and if we go into the Edit menu you can see it says undo edge point and if I undo that then the point disappears and I can of course use the keyboard shortcut and also use command shift said to redo what we've undone like so so that's pretty nice let's now go back into the script and get those points joined up with dotted lines so in this for loop where we were drawing the disks let's create a vector three called something like next point which will be equal to shape greater dot points with an index of I plus one but then of course we need to wrap that around to zero if it reaches the number of points in the list so I'll write mode shape greater dot points dot count all right and we can then say handles dot draw in dotted line from shape greater dot points with an index of I to the next point and we need to specify the distance between the dots so I'll just use a value of 4 for that and I'd like to have these drawn in different colors so before I draw the dotted line I'll say handles dot color is equal to color dot black and I'll draw the disks in white okay let's save this and see how that looks so we've got these dotted lines here and we quickly reset this and draw a little shape all right that looks cool we've now implemented everything that we set out to implement this episode but I'd like to spend a little bit of time just tidying the script up a little bit so the first thing I want to do is move all of this drawing code so this entire for loop into its own method called draw so I'll paste that in there and once we've drawn everything we can also just say needs repaint is now false all right so at the top of unseen GUI we can say if the if the current GUI event is a repaint event then we're going to want to call the draw method otherwise if it's a layout event then we can add the default control and if it's not a repaint or a layout revenge then it's going to be a input event and so we're going to be calling a new method called handle input which is going to take in event in QB event and it's going to do all of this stuff so we just need to call that in here a handle input and pass in the GUI event the early time is going to need a repaint is after it's handled some input so we can stick that in there as well all right let me just delete this white space and that is sufficiently tidied up for now so let's save that and make sure that that little bit of refactoring hasn't actually broken anything so let me reset this and just try creating another shape and it all still seems to be working one slightly irritating thing though is if I hold down alt and then left click drag to shift the view around it obviously adds in a new point so let me quickly fix that by going into the handle input here and in this mouse down this statement can add another condition that the GUI event dot modifiers must be equal to event modifiers dot none so if I come back here and now alt left click it doesn't add a new point in and if I just regularly click then it does cool that is everything for this episode will of course continue working on this in episode two so until then Cheers