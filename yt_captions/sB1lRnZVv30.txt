so we've been talking about mel who's this kind of like mythical is he mythical do we know he's a real person so yeah mel was a real person in i think 1956 to 60 when computing was real cutting edge and memory was at a premium so i think he had 4096 bytes to work with or something like that so luxury luxury yeah every bike counted so we did the self-modifying code and as ever on youtube there were some comments saying don't tell me what to do i'll self-modify my code if absolutely yeah putting that to one side um what's the next sort of chapter in the story then well this sort of brings it all together as uh sort of the the finale of the thing which uh is comes back to the email that uh came around in goodness days when early on in the internet anyway when people were discussing these real programmers and this guy sent this story of mel we should do real there really should we really yes the real programming so this is not what you really want to do because although it works great it's almost un unmaintainable so the story goes that he worked on this royal mcb computer which um i've never heard of before or since but it was quite popular at the time i believe and there's a new version of it coming out and whenever they went to trade shows they always sat there in front of this computer and got people to come along and play and they had a blackjack program so anyway this blackjack program was really popular so he was asked to port it to their brand new machine with this 4096 bytes of drum memory and so on okay got it all running and it was all working perfectly and it was very very popular shows but then the sales people said this is all great but unfortunately the program beats the customers too often this is something we could do somehow to uh just just install a um you know something to tip the odds in the customer's favor and you know this would really help us sell a few things you know just create a nice atmosphere and mel was no not keen on this that's no that goes against all my principles for changing this and that and anyway he was lent on apparently by management and by other people and so on and you know we really need to do a little bit more just to just to help the sales of this thing come through so eventually he uh decided okay he would and there was a switch on the front of the computer it was to signal something but anyway he could tap into that and say right if this button is pressed i'll i'll do something so he wrote some new code to say if the button's pressed then i'll stack the odds slightly and did that produced it and sent it out when they tried it out it turned out that it actually stacked the odds in the computer's favor and not not the customer's favor and mel thought this was great apparently he thought this was uh you know this was justification that you shouldn't try and fiddle with the you know the the probabilities and so on and you should just play the real thing so uh he refused to fix it and actually went on to work somewhere else i don't know where else he went anyway after mel had left to go to pastures new the guy who posted this he was brought in by management and said mel did this change and unfortunately it changed in the wrong way can you go and have a look at the program and just adjust it and fix it and his uh his comments on that were quite a revelation he said you know i knew mel was quite a smart guy but you know i looked at this program and i just couldn't really understand how it's going i spent a couple of weeks pouring through the details it was bringing in code it was modifying it changing it putting it back things like that and he said the absolute ultimate uh bit was where i came across a loop that had absolutely no exit so the code went into this loop and it just continued forever so i'm sure you've done things like this you know in the early basics you'd do you know 10 print hello 20 go to 10 run and they would just you know print hello continuously so he found a loop like that in the code and just couldn't explain it every time he ran it it ran through the loop exited perfectly and he just couldn't figure out how this was happening this is one reason why self-modifying code and things like that is just so dangerous dangerous absolutely i mean when you're writing it it seems like oh wow you know i'm sort of on the cutting edge here i've found this great hack here that can cut through things but you give it to someone else and they just can't understand it you know without considerable amount of effort there are cases where it is useful but usually this is sort of generated by compilers or things like that where people sort of uh letting the machine do the modifying and not not the users directly modifying it anyway this this loop it turned out it was running right at the top of his available memory and although the machine had index registers where you can automatically apply an offset to something so it's typically used for stepping through a raise you you say go and read this information from this bit of memory but add in this index register and that will sort of move you along the memory without having to change anything else he didn't use index registers they they were they were far between him he actually read in the instruction with the address which was attached to it and he incremented the address in memory and then would rewrite it back so he would be changing the code all the time what mel was doing with this he was incrementing these instructions and stepping along this array or something like that but at one point because it was right at the top of the memory he would increment it and it would actually go beyond the biggest integer that would fit into this bit and actually overflow onto the next bit so this would set the the sort of bottom few um bits to zero and it would overflow a bit into the next bit of the instruction and this would change the instruction which was probably a fetch or something into a different instruction which happened to be a jump so it would get to this point and what would normally be a fetch suddenly changed into a jump to location zero and it jumped to the beginning of the program which was where it needed to go anyway so would sit in this loop and then some part of it would overflow changing the actual code change the code into from a fetch into a jump jump to the beginning of the program and carry on as though nothing had happened but there was no way of seeing this apart from completely pulling the whole program apart pulling it apart and working through exactly what was going on here and finally finally the light dawning that oh okay i can't yeah because if you just looked at the code it was just fetching instructions instructions and fetching bits of memory and there was no no jump out of the loop whatsoever but yeah finally he managed to work out that you know the critical thing was that you were not only modifying the address you were reading from you're actually going to modify the instruction so at this point he threw his hands up went back to management and said you know there's actually no way i'm going to be able to change this program it's just so so intertwined and you know if i do make a change here it's going to fall apart here you know i'm just going to leave well alone and you'll just have to set it with the switch and the customers will just have to play it on the regular blackjack setting but the other bigger thing which sort of pervades the industry now is don't try and be too clever you know if if you are extremely clever then the people that come after you who have to look after the code are going to be spend so much time understanding it that you know you might save a few milliseconds here and there but actually you're going to waste hours and hours of programmer time trying to understand this what you're doing and and fix it so you know the the the moral of the story is being too clever can be uh be quite quite a quite an issue for you later down the line i was trying to think of a good analogy i was kind of imagining like you're driving the car along and you can't work out why it turns corners you shift yeah into third fourth fifth gear and the sixth gear starts to turn the wheels suddenly oh i wasn't expecting that but whenever i get to this bend i've got to change your gear and that will turn the corner yeah it's yeah but do we know what happened whatever happened to mel did he just retire no no it says in the story that he went on to pass his new with a few dollars associated with it so he probably got a better offer to go and do something else which and uh he does end up with saying i wonder if you know mel was ever embraced the new idea of you know sort of object-oriented design and testing and all this sort of thing or whether he was probably still twiddling bits and uh looking for shorter cuts that uh and he probably thinks that he he'd probably stick with the uh the twiddling bits and uh working close to the metal as they say yeah it seems to me like he's the sort of person who thinks in binary very much so yes remember that and in modern cpus you would have a link register of some sort that remembers didn't have that in the very early days but boy did it dawn on them that you needed it someone voted for my oh he doesn't even let you vote for mike might be a bit of favoritism in the voting here sister