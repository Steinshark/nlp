discussion on parallelism I'm not sure about turkey especially what do you think about C plus plus usability and connection with concurrency and parallelism in general or in comparison with other languages do you see any interesting features what should be definitely added yeah okay so I my background with this stuff goes back a long way I'm not going to say I'm totally up to speed with everything that everybody's doing these days but I originally got a master's degree in parallel computer systems and one of the things that on that I I studied CSP communicating sequential processes which was the basis for the Occam language and the open language has channels um which go sort of has a bit of a go at um and I also studied my my thesis was on um the actor model and these are very clean models of expressing uh concurrency constructs and by the way I'm just going to use concurrency generally to refer to anything where there is potentially simultaneous activity I'm not going to try and say that concurrency in parallelism are two different categories they're not they're kind of depending on how you define they either overlap subset each other or whatever I'm going to use concurrency to refer to all of these um I feel that c plus is not as usable as it could be it started um uh there was a thing the first so we first got proper standard threads in C plus 11. that's a long time after people wanted a standard solution but as the standard was deferred it was kind of inevitable um C plus plus has to have a Threading model if it's to be a credible language that for systems programming you cannot say I am a systems programming language but I don't I can't talk at the level of the operating system threat then you're not a system as programming language okay so you have to have that level I'm not going to say you don't want it but the first thing we need to recognize with threads is that they are very raw they are a they are a primitive and yeah they are a threat you know yeah they really are you know here is a thread of control and oh here's locks good it's you know this is I I mentioned Ikea furniture you know this is probably more Ikea furniture in this sense it's like you have to build this you have to build up your own construct yourself in others before you can actually be producing useful code you've got to choose your Paradigm and your your whole approach to threads people are not aware that this is a decision they can take so they often end up programming at the level of threads oh look I have a function here let me just launch it as a thread oh my goodness we're going to need to lock this and I'm gonna have to lock that and it's basically like trying to put out fires yes Kevin is frozen or is me Frozen not sure let me see yeah Kevin drop now out of the studio too I have no idea what that outage was um I've just checked everything I have no idea yes if you've got a nice screenshot of me just freezing yeah okay so um so the the thing is this idea of building up Primitives we could just say just like you know a jump state but a go-to is a primitive from A Primitive you can build if statements while statements and all the rest of these other constructs and we would much rather use the built up things than have to rebuild it ourselves having programmed an assembler but also programmed in Old Fortran the idea of making my own while loop just has very little attraction um but that doesn't stop people working at that level so a lot of people are working at the raw level which is not usable it's error-prone unless you go at it with a clear abstraction and just adding threads is a recipe for um recipe for a mess and it won't give you performance benefits necessarily so what you're kind of expecting the evolution of the language is that you rise through the levels unless your claim is we are a high level programming language just targeted to make um all concurrency approaches easy or the main concurrency approach which is easy and to be very opinionated about it this is what Arkham did that in Occam you only had channels there was nothing else you could do and you were it was very opinionated you could not share data between running processes if the data was mutable the only way you could share data with another running process running thread is by passing it through a channel and the compiler would stop you if you're trying to do anything else it was a massively opinionated language but the thing is if your code compiled it properly rare um C plus plus as a systems program language doesn't come from that tradition but it also doesn't hasn't really risen through the levels um I remember at the time we were working on the memory model in the mid-2000s mid to late 2000s I kind of considered that to be a a level zero you've got to get the memory model right and then on top of that you can build the kind of primitive construct the go-to which is thread which is something we have we have a memory model yeah and we have that the next level what I called at the time level two is where you get people away from using that in other words these are available for you but then we have much where and we have a much more a much richer vocabulary we're kind of getting that a little bit but it's been a long time coming it was and I wanted it to be there in the beginning asynchronicity [Music] of these constructs that basically mean you will not have people passing pointers to Shared State between that has been very slow in coming and my original Hope was that was all going to be present originally I even had a Threading proposal you know in the mid-2000s which was future based and got took the idea of threads and said let's make this a function based concept and um not the way that it is now it was much richer it was a higher level approach I mean I'd still make it even more high level but it was based on the idea of fully asynchronous execution pasting Futures around with a possibility of doing channels and that is not the path that we have taken so I think from the C plus perspective C plus is very capable it allows us a lot of this access um but it has not added at the higher level constructs at the right rate in a way that makes people's lives easier um and so therefore I would say the higher level constructs that's what I would like to see I would like to basically have it so that people are not sitting there worrying about thread pulls and stuff like that and basically saying I just need this executed um you know asynchronously and here's the channels we're sharing um and this is a Long Way Beyond async as it stood uh proper continuation model all of this kind of stuff that would have made that would have made I think C plus plus a much a much more different language to program in um from a a kind of concurrency perspective um I'm I'm actually kind of happy that we didn't like try to synergize the C plus 11 perspective on this um because we probably wouldn't have had the needed representation in the committee from other sources of concurrency was gpus Etc yeah and that's a very yeah and I think you're right there because there's a whole load of other stuff there as well right I mean exactly at that at having a framework which does concurrency and parallelism with algorithms and everything in the seedless past world but which just not like says well it's that's that's threats of course but you can have um of course another concurrency targets yeah the parent a lot of the parallelism stuff again has come from a different route and you can look at you know you look at the parallels and stuff you look at the threading stuff the the parallel algorithms look very different they feel very different um I don't think they're mutually exclusive but they're not they don't they don't spring from the same Source but in terms of kind of like more classic Mindy multiple instruction multiple data um I did I I do wish it had been more opinionated I do wish there had been more high level stuff I would have gone for something based on my personal preference is for futures and channels that's what you know that's kind of way I tend to think and I found that's a very useful way of working and that could have been in there from the beginning but it wasn't and we are making up times slowly um with that I remember at the time there are a lot of exciting ideas and possibilities I know I remember herb had a whole load that would have been really cool um for composition in other words really to try and think about this in terms of composability threads and mutexes on their own are not composable um and this whole idea of being able to just bind things together in a very natural way with a fairly with a very high sense of comfort and safety that that's what we kind of um that's what we should have threading is unnecessarily hard the way that we've got the the C Legacy and the C plus Legacy of how we think about threading has made it unnecessarily hard I feel indeed um