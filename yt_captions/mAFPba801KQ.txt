I have so many things to say about JavaScript I think the most important thing you need to know about JavaScript is that when you go to twitter.com JavaScript it's owned by Oracle like if you don't know that this should blow your mind and the best part is is that during this whole rust debacle over uh like the trademarks and like will they actually sue people or ask people to take things down and everyone's like no you guys are just overreacting some person made types or rust for JavaScript devs they unironically made that course and JavaScript asked them to take down the website Oracle put legal pressure on them to take it down because they use the term JavaScript so if you don't think that happens you're crazy people do that now let's find out what's actually gonna happen in JavaScript in 2023 are you guys excited I'm excited I got turn off alerts I always forget to turn off alerts Oracle sucks Oracle does suck okay it Oracle always sucks ain't no way yeah way someone find the Twitter thing paste it in there someone put it in there someone put that in there all right new JavaScript features coming in 2023 the next JavaScript update brings smaller editions uh familiar with other languages but there are more uh significant developments in the wings well I really hope what I really would love in JavaScript is pattern matching I think that would be really helpful and the other feature I would also like is if JavaScript could hold its breath and you put it under water and then it Wiggles and then it stops wiggling do you know that feature that's the feature I most want out of JavaScript but let's find out some other features that may be happening all right this year's annual update to ecmascript which formally standardized the JavaScript language will be approved July 2023 but four proposals for new language features have already reached stage four damn that means it's like very possible for them to happen this means they've been signed off from the editors of ecmascript in the tc39 working group that manages the language standards by the way every story I've heard from insiders about tc39 is that it's a horrible group to be a part of like every time I've heard of anyone who's ever worked with it or is adjacent to it is that it's like awful that it's just like one of the worst things ever it's like it's purely like it's all political like you have to get people to be you know you have to like get them all to sign on to your ideas so it's like all about getting people to like you and stuff oh man it just sounds awful uh have passed the test suite and shipped in the latest implementation of two implementations to check for real world performance issues okay cool small but helpful symbols as weak map Keys a fill in small Gap in the language explained okay interesting so there's one thing small but uh is this is this supposed to be what it is where's the four features okay so is this it so we got symbols as weak Maps let's see this proposal extends a weak map API to allow usage of unique symbols as Keys okay currently weak maps are limited uh to only let's see to only allow objects as keys and this limitation for weak Maps uh is the goal to have okay I'm very con you know the idea of a weak map in JavaScript it just it's hard for me to understand you know what I mean like it kind of feels like it breaks some of the JavaScript Paradigm you know what I mean hey thank you very much I've already done it you're welcome look at me being responsible but really like it kind of breaks some of the the purpose like JavaScript I don't know many people that are I'm very curious what the use cases are maybe I should back up maybe I don't understand the use cases but in my head the idea of a weak map is that what you'd want to use it for is that you don't control the life cycle yes that was bread and watermelons and what's the sandwich watermelons and some chips but you don't control the life cycle of the object but you want to be able to refer to it while it does exist right but you don't want to actually you don't want to have to be responsible for any of the cleanup and if you hold on to it longer you want it to be cleaned up when it's time to clean up but there's like a lot of things that happen with JavaScript that I think makes it confusing right like one sense that javascript's GC is not it's not deterministic right so how do you know isn't that what a weak map is isn't it just a bunch of weak references or have I got this completely incorrect I thought that was the thing is that with a weak map you don't actually you don't you don't you don't own onto it am I wrong I could be I could be completely incorrect I could be completely incorrect because if that was the case I was very confused because because garbage collection is really hard it's really hard to think about right because you can own you you will no longer refer to that object but it it will exist for some amount of time so your weak map could be potentially out of date with reality you know I don't know just feels weird because it's the you know the shadow realm yep there's the shadow realm there's the shadow realm membranes and virtualization all standard words that you should be saying to sound smart okay an object with something without having to modify the object okay okay interesting I don't know what I'd use this for so maybe this isn't something that I you know this must be for this this has to be for some sort of libraries that make sense probably a bunch more this has to be for UI Library stuff that I just don't understand very very potential I use weak maps all the time when writing third-party libraries okay okay interesting yeah all right uh let's see all right all right uh two of the proposals improve working with arrays which he noted become increasingly powerful in JavaScript avoiding the need to write functions and loop over data to process it yeah I can't even use those uh one thing that's really bothersome for me is that you know the project that I work on has millions of data points and when I change from a for Loop to a four each over an array it literally adds seconds to the program and so array methods are effectively out of bounds for me I can't even use them and when I do like a full machine like when I do one of my full searches that I have to do I use like six to eight gigabytes and if I were to use map I would blow I blow out the Heap every single time so like I have to be super careful of how I copy when I copy all that kind of stuff right let's see change array by copy gives developers a new method of for sorting and reversing and overwriting data without mutations uh without mutating the array it's uh stored in you've always wanted to be able to sort arrays but when you call sword uh function it would change the current array in a handful of programming language patterns that has become very popular yeah to avoid mutations this is how we get the runaway greenhouse effect okay my array but I hate mutation so I want non-mutation sorting I feel like the default is that you want to sort your array and in the rare time you don't want to sort or mutate that one you can just call slice am I crazy am I crazy on that one no it's not going to break a bunch of code because it's a new name right it's going to be like reverse something what is it oh yeah two reversed and two sorted you know what I mean this is actually helpful yeah I'm curious I mean reversed I get because reverse is confusing in the sense that when you reverse an array it reverses the underlying one sort I is also interesting I can see why people okay I can give it to you I can see why it's useful but I would still argue that if you sort an array I would like to see a situation where a bit of thought makes this more worth it to copy I I just hate copying I hate copying it makes me feel bad okay you know what I mean it just it it it it it it hurts me you know what I mean it just hurts me I don't know why it shouldn't hurt me but it does okay anyways cool all right this proposal lets developers called method to change a single element in an array oh yeah so yeah there's that there's that let's see I guess there was one that said uh change right what was it with with okay so what is with motivation Tuple prototype introduces these functions as a way to deal with immutable aspect of tuples and Records while arrays are not immutable by Nature this style of programming can be beneficial for users dealing with dozens uh with frozen array instances okay so this is effectively to create like poor man tuples is that with changes the underlying right so this changes the underlying item and it will change it yeah so I want to take my array change the third uh the third index into C yeah okay shy Ryan it's not my fault that I I had to okay shy Ryan but a lot of people are I think I'm starting to get some Zig buy-in so we'll see what happens all right so okay I get this you get to you can have like tuple-like Behavior I guess I've I can see that maybe um okay the inconsistency between weather array of prototype changes the original array or not is something that drove me nuts in PHP you do the do a conversion send it to a variable and then there's nothing in the variable uh because some function uh don't change the original one and others do change it any consistency we can bring to things so people don't have to look up uh every day uh is a very good idea I've never had to look things up I kind of just got bit by something once but I get the I get the idea which is what what he's really saying or what this person's really saying is that they wish they had uh really what you're wishing you said is that you wish you had something like this right that's really what you want because the reason why that makes a lot of sense is you want that is that when I call a function say get next token right here and I look at it I can see that it requires a mutable self I know that when I call this function I'm mutating the Thing versus when you call something without mutable self you know that you can't mutate it right and so it's it's very important this concept I totally get it I am on team you should know when you're mutating and I should know when you're not mutating Russ by the way just so you know this is Russ by the way that was Russ and like I totally am on that team I find that most people in JavaScript land go to immune immutability because they were told that it's easier to program like is that greater is that better you know there's plenty of programs where immutability can be quite frustrating and so it's it's like you know again it's not a clean simple as you know people make things and so I'm just not I'm just not into has Tom signed off to those changes no uh I don't wanna I don't want to let Tom know you know what I mean I like my memory all right array from let's see array find from last that's exactly what the name suggests returning matching elements in the array starting from the end and working backwards okay awesome okay this is cool cool doc uh or save extra code if you have a huge array it's really beneficial because you don't have to look up the whole thing or reverse it I feel like there might be some better you know typically you use an array for a couple items for you know a couple reasons you know I I convert things to Maps when it makes sense when the conversion to a map plus the looking up is less than finding an array uh I feel like if you're searching an unsorted array and you're just linearly searching all the time and that's how you're going to improve performance is by searching from the end I kind of just like I personally feel like you kind of just like goofed up am I right on that like I feel like you're just not using the right data structure at that point it kind of seems like if you have an array and you need to search up a bunch maybe you need something better maybe you need a sorted array that you can do a binary search on maybe that's better maybe you know depending on what you're looking from you know depending on your needs maybe you need a heap maybe you do want to just go to a hash map maybe that's the play but it's just like this is a just a weird the argument as it it's great because it's going to help improve performance I'm a little skeptical but it could be convenient maybe there's like a convenient because you just want to find the last one that I totally get you just want to find the last occurrence of an item I'm on that team that makes perfect sense it's a convenience item for that for anything else it doesn't make any sense all right the most let's see most comments in JavaScript are there for developers working in the source code to document how it works or record why it is written that way hashbang comments that start with this are for specifying the path to the JavaScript interpreter that you want to use really ah what what I feel like I've just totally missed out on some important thing because this feels like it's coming out of nowhere a convention inherited from the Unix script files yes uh CLI JavaScript hosts like node.js already strip out hashtag or hashbang out and pass the valid code into the JavaScript engine but putting this in the standard moves that responsibility responsibility to the JavaScript engine and make sure it's done in a uniform way oh making hashbang crammar uh official interesting what is what is the purpose of this I know but what like so what let's see in order to generate valid.js text before passing I'm just trying to think of like what what is the purpose of this does someone want to help me with this one no I mean I I use this but this but that the hash the the shebang at the top is all handled via my my sweet sweet dash line my Bash my sweet sweet or technically I use this but it's all handled there so I'm just conf I'm confused as to what what this means like how so in other words what is it validating She Bangs She does maybe it's for Windows users yeah maybe there's some other yeah node versus Dino I don't really see that guy people think in different ways just let me think my way okay stop trying to convince me that I can't go you know when you're doing this and I and I really think about something just let me be me okay he really wants to change me um I thought dino thing I just don't know if I buy the dino thing and what I mean by buying the dino thing is that if you try to run it with node it's just gonna fail it's just gonna it's just gonna it's gonna tank so like what are you what what are you getting out of this you know what I mean like what are you getting out of it for CLI tools like the the thing that chooses what program to run when you do that is going to be your environment it's not going to be like the JavaScript engine isn't choosing to run node the JavaScript engine is used by node to interpret this code right I I just don't get it I I really wish I got that I don't I just simply don't maybe I miss I'm positive I'm missing something I just don't get it while server side JavaScript is far from new uh he said it feels more like JavaScript has finally arrived as a server-side language with this why the JavaScript engine again still isn't the one choosing what to execute okay there's several things I dislike about this it still isn't the JavaScript engine that's choosing it's it's like what the JavaScript engine by the time the JavaScript engine sees the code the environment for JavaScript has already been set up the program has already been chosen and the file has already been read and it's being piped into node or into Dino or into whatever so I don't understand what this even means whatever I you know whatever whatever I can't argue it I'm just not going to argue it I don't get it though let's see although it's another small change and it's possible this will make it easier for JavaScript to participate in the AI oh okay so to be fair again I wrote a JavaScript AI thing 11 years ago okay as before I knew anything okay I didn't know life okay I was learning about radial basis functions and and colony optimizations and particle swarm optimizations and MLPs and adaptive neural inference systems and all that kind of stuff okay I totally get it I I totally get it and back then I I you know I I I was the original this problem okay I get that it ran a node and it used IX my evolutionary algorithms used IX I looking back on that I feel so stupid using IX yeah I used IX people this is just an attempt to put in iterators into JavaScript I have some of the blame okay I used IX because I actually wanted to understand how IX Works real talk I just wanted to get IX rxjs is like the opposite rxjs is for reactive streams ixes for like pull based streams right she I know I'm not push based so rxjs is push ixjs is for pull like a rust iterator whatever uh iterator is a yeah yeah okay okay okay here we go here we go these four proposals are likely uh to be everything we see in ecmascript 20 uh 23. okay so pretty much nothing that will impact me in any sort of way now I could I could imagine that if you're if you're a UI person maybe like too reversed or too sorted could be useful because it's just easier for you mentally to think about just copying an array as opposed to the state of the ray buy it purchase it uh but everything else doesn't seem like it's going to be very large uh iterator helpers I'm very curious about iterators just in general reaching stage three isn't guaranteed that this feature will make it into the standard because the implementation can reveal that changes needed to be made but iterator helps temporal explicit resource management and decorator are all at stage three I really am kind of scared of decorators not gonna lie to you always makes me a little bit worried about decorators right always makes me a little bit worried um every time I've dealt with decorators it has been painful you know what I mean debugging is always hard it is always hard you know I always I I'm very it's hard it's hard decorators are poop I every time I use a decorator okay okay here here you go you always have the same use case for decorators which is I want to function and I want to time the function or I want a log that it happens only in specific environments or I want to do something to every function right and it's always the same and it's always this thing we tell ourselves and you're just adding like a layer of abstraction to everything you do that just in general makes everything in the universe slower and the heavier weight and just annoying and blah blah blah blah blah and I I get why you want them but they always make me queasy when seeing it right I I did find one good use case for a foreign for a decorator though I did this uh I did this just recently uh I did decorator I did a decorator in which I had to go into Netflix's uh uh what's it called networking engine and I had to kind of siphon out some details and override some details with mocks and stuff like that but there was like an entire algorithm based on it and it was kind of hard and some things that were built were very very difficult and so I just needed to test the output at a couple layers and I just wanted to know the thing was working correct and so I put a couple decorators in to get some data out that was the only time I've ever used a decorator and it was okay if I had more time I would have done it differently but that was like the only time I really thought it was like a good thing at that point would you rather add ifs I mean I feel like something's a little goofy whenever those aren't the those aren't like the the two trade-offs there anyways all right uh iterator helpers I love better iterators I'd love to see better iterators the problem with anything to do with iterators it always comes down to the same thing which is if it's not the problem with iterators is that if you don't have like a rust-like experience if you don't have the trade system they're always difficult to work with I'm not trying to be a goofball here I'm actually not trying to rust by the way but this is one of those places where it's just like it is just much better to have a language like rust and you can't do it uh and so because anytime you want to chain a couple things and you have your own custom iterators you now have to start doing like this function wrapping and it just gets more and more parentheses and it just it just it just sucks uh because Haskell Daddy was first yeah yeah it's Haskell I understand it's Haskell but nobody cares about Haskell rust on the other hand great language um and so anyways all right I feel like we're making pretty good progress towards catching up with python from 15 or 20 years ago okay almost time for temporal okay what's temporal uh isn't that how people like similar sushi uh which former let's see uh which former ecmascript co-chair Brian Telson once described uh to us as the replacement for our broken data object other developers call it date full of too many uh yeah yeah let's see so temporal so this is supposed to fix date interesting it's been waiting for the internet engineering task force to standardize string formats used for calendar and time zone annotations wow okay so this is just a bureaucracy problem yeah iterators need a lot of things to really work well that's the hard part is iterators need a lot of things to work well and I'm very curious how iterators are going to work with in in a in in a uh an interpreted language how's it all going to work out what is garbage going to look like like there's a lot um anyway so I I guess I don't have a huge problem with date because I rarely use date you know most of the time stamps I get are like uh UTC micro or Millie and so not a big deal but I could totally see that if you're working with dates a lot it would be really really awesome I don't care about any of this let's keep on going I'm really hopeful that this will be the year when we will see temporal shipping at least one browser that'd be nice uh I'm sure people like that I'm Gonna Keep I'm just gonna go down to decorators the tc9 tc39 working group I spent more than five years working on different iterations of decorator proposals a way of adding functionality to an object without altering its original code or affecting other objects from the same class I like whoever was saying that uh decorators is like inheritance there's definitely some level of Truth to that there is something weird about decorators and inheritance there's there's definitely something there I don't know what the something is but there's something about that but it's not I don't think it's quite fair to say it's the same thing I think it's more like you're mixing the top you're mixing this idea of a higher order function with a class which I think is sometimes hard you know what I mean it's like two different concepts kind of you know happening all at the exact same time and it just feels inheritance but harder to debug yeah it's inheritance and it's harder to debug it's it's difficult it's the worst of Both Worlds it's it feels like a higher order function but it feels very you know I'm always worried about anything that anything that you can access properties on an object and there's layers of abstraction and there's programming around the ability to add access the dot this object or the dot the the the this dot object it always worries me right there's just something about that intertwining the intertwining of properties and functions that are that are inherently not a part of the class that just makes it feel really tightly coupled and feels kind of well anyways uh let's see a way of adding functionality to an object without altering its original source code or affecting the other objects from the same class decorating functions are also available in other languages like Python and c-sharp and JavaScript developers have been using transpowers like Babel and typescript to get them those differ slightly from what ecmascript decorator's proposal will finally deliver but it will help to Pro let's see but with the help of The Proposal from the typescript team tc39 is able to avoid breaking change nice a lot of people are using experimental typescript decorators or Babel Legacy decorators uh and in either case you need to explicitly opt into it but a lot of Frameworks use decorators and do have them present that include them and those original decorators are a little bit different from what ends up being stage 3 decorators man that's yeah that is one thing that's really hard about JavaScript is because of the Advent of Babel and uh and typescript you have these like running you have these running implementations that are running ahead of you and then people build their product around that it sucks yeah well I'm just pronouncing Babel correctly whoever calls it Babel I know the person who created it called it Babel clearly doesn't know their language uh it's it's pronounced Babel sorry Babylon is different than Babel and if you think Babel and Babylon are the same thing you're about thousands of years off from each other just saying you might be a little bit wrong now during the time of the of Babel uh they're the same no Babylon is a city it's a city-state in what 500 to 980 or BC and uh Babel is a place in which Nimrod or Gilgamesh was Captain of in three thousand four thousand BC you guys don't know nothing okay they both collapsed absolutely yeah uh yeah Babel would be a city Babylon was like a city-state a little bit different you know this guy babes yeah come on you got to know the difference between Babylon and Babel I mean the fact that people are like well it's called Babel because Babylon of course you're like dude I didn't realize Java and JavaScript were the same thing either wow Java JavaScript are the same based on that right that's literally what it means like that's that's that is literally the comparison you're making uh do you uh do any mL no both on by Oracle yeah both owned by Oracle Babel became Babylon well you're missing out on the Chaldeans and the sabines during that time period okay like there's a whole groups of people that you're missing okay come on don't forget about the Chaldeans okay or the sabines uh Babel is a Hebrew name uh of Babylon weak knowledge old man there are thousands of years apart from each other dog what are you saying what are you okay we're moving on uh anyways a lot of community was uh pretty upset about the change because they would have uh would have transition costs and there was a lot of strong opinions in both directions at the very last minute we decided to you know what you're you're allowed to do either but not both in one particular exported class declaration the decorators came uh can come either before or after the exported keyword but because we saw the transition path from existing use of decorators was important we wanted to enable incremental adoption and treat the existing ecosystem as real we're not designing this in a vacuum damn yeah see this would be really hard designing designing something while someone was running while someone's like running implementation that's really hard that's really confusing right that is really really confusing that would be super super hard um making Resource Management obvious okay having a garbage collector doesn't mean that JavaScript developers don't need to think about managing memory [Laughter] oh my goodness oh this is funny uh yeah okay uh cleaning up resources like file handlers and network requests that are no longer needed uh some of the options of doing that worked uh differ depending on your code uh will run you return a JavaScript iterator because but close a node.js file handle handle and they depend on the developer remembering to write code and getting that code right um it's pretty good uh this makes it difficult to translate front-end development skills where you might primarily work with the Dom to backend development where you might be working with something like node apis and vice versa uh the inconsistency also makes it difficult for package authors to build lifetime management into their packages in a way that allows for reuse on both web and server yes yes I do agree I do think that um do you think it's tricky okay explicit Resource Management what is this this is very very interesting hmm hmm how do we feel about explicit Resource Management in JavaScript let's sort immutable rays you like that you like it not impressed 69 I mean non-local flow control I mean I hate the fact that yeah I hate the fact they're using flow control with try and finally I think that's crazy talk I'm eating bathroom Ramen nice but real talk like how do you feel about that I don't know how I feel about it because in some sense we already have it with node.js right uh because in in some sense we do have import FS from fs and if you go in here uh here what is it is it colon or slash promises it's slash promises right and we have async function uh Foo you can go in here you can go const file equals or really it'd be okay I don't know what that was all about uh FH and you can go read file do that Foo you can get going here or actually not that we go what is it is it open do we have open okay open yep there we go we're gonna go for reading and so now you really can go like FH dot or let's do writing uh FR yep there we go let's do a right so you can really like you can write a bunch of stuff so let's go four let I equal zero I has to be less than ten I plus plus do one of those move it up into here go f s dot right and then you can go FH dot hello world right uh oh dangan is this the one that it doesn't I always get these these ones confused which one is the right no which one has right in it damn it which one has right is it not FS dot promises dang it I always forget one of them has it and the other one doesn't have it uh I thought this one had it I okay so this one does have that one three to six arguments but got two there's a couple things you have to do in here what are the other things I always forget the other things what is it tell me expose it to me uh file number above said offset okay so do you want me to add in that one you got to add in so many of them blah blah I can't remember how to use it okay you guys get the idea I can't remember how to use it but it looks something along these lines where you're actually writing into this and then at some point you call fs.close and you pass in the file handle okay right right oh function okay great all right uh return zero how do you want a zero in there let's see uh argument of type void is not assignable what do you mean a type signable this thing is a void weight doesn't FS return does this thing uh return oh crap it goes through dang it goes through this thing uh handle right or is it ER handle oh gosh like node apis are always so funny feeling I'll let okay you get the idea right you get the idea blah blah blah blah you get the handle in here right is this where the handle comes through this is where the handle comes through then you go through here and then you close it and Bam right so you're still like explicitly you're still explicitly doing it syntax from 2000 update I know well that's the problem is that this promises doesn't allow you to I want to use that thing you know what I mean uh const there you go I like I like that thing okay I like that one it makes me feel better about myself okay so it must is Right file to say I thought right file replaces the data to the file gosh is there not a right when you're using promises are is there no right is there really no right I swear there's a right right because this thing asynchronously writes data to the file replacing the file if it already exists there has to be just right there is then why okay so why maybe why don't I see it where's the function why isn't it uh why is that there is it on the handle that no this is not rust okay the handle is just a number no no no no no the handle is just a number doc they literally the right isn't it okay maybe it's not yeah it's it's it uh okay hold on oh it is on that thing damn it okay it's not that damn I'm stupid man I'm stupid man I'm stupid okay there you go the Scavenging there you go okay now I see where we're going with this and let's see FH can you close on this thing there we go okay there you go you still have okay this took way too long stupid I know but there you go you still have this thing you still have like explicit resource management I just don't understand why would okay first try uh easily easy easy easy get stream reader release lock uh should have been in a try finally oh man imagine having a try finally handle clothes yep it's okay to use handle but still in scope yeah it's not okay to use handle I can't wait for all the problems that go on with managing your own resources this will be great before you were looking at the previous syntax oh this is the previous syntax which way which one is okay status okay so this is the this is the one yeah it's still I mean what's a lock a read write lock oh you telling me on you tell me this is old this was the one that was linked to me it's right here so it's not this one it's not the stage three proposal it's not this one so it's not this one what is it then so it's not from the article there's a newer one oh I see it okay I think I see what you're trying to say oh I think I see what you're saying now 900 IQ okay it's a hard day it's a hard day oh yeah this you know block scope declaration makes a lot of sense you know I'm totally and I I you know blocks block scope stuff pretty great um interesting I think people are gonna be uh a little uh you know I think this is gonna be a hard concept I love that we now have uh we now have block scope I love I hate I love scope of mutexes okay they're great okay scoped new text is just fine I still you know I wonder what I've I'm very much so worried about this is a really complicated feature for JavaScript I went I wonder where these things are going yeah we're gonna yeah we're gonna start getting Deadlock there's gonna be some hard stuff like if you've never worked with it it's really hard it's it's it it's not easy working with locks it's very it's very complicated it's for Tom okay so this is a j diesel feature they're trying to make JS into a real language I know but the problem is it's not a real language oh is this them getting close to trying to make JavaScript multi-threaded is this really where they're trying to like is this the part where they're actually Gonna Let Us Go full idiot and go multi-threaded we have a thread lock in a language that only exec that has no parallelism we have a lock in a language like this is like uh conditional variables effectively you got me you got me this is great this is imagine the amount of bad performance you could throw in there you could throw in some incredibly poor performance in JavaScript because remember it's in an async function and you're acquiring a lock so someone's gonna unnaturally acquire a lock and then do an async operation and then the lock will be released at the end right like think about the level we're about to get into with locks locks I love them right so there's a lot of things you're gonna have to think about when it comes to locks locks are like not easy you know everything still tells me I'm gonna break my app with this everything you know it's gonna be interesting it will be I mean the problem about tools is that they feel cool but I'd have to really understand the purpose of them I've never once thought to myself you know what I need right now I need a lock in JavaScript I've never thought that I've never thought that once in my life ever you know what I mean shy Ryan wants to cheer some bits but to Once notice turned on you need to hold on we're almost there all right I think this will be a big win for JavaScript developers because previously uh to get this effect reliably you had to use a try finally statement so when people yep yep okay so I do agree that using and file handles is really good I'm on the using file handles right if you have a resource that can clean itself up that has some sort of pattern that you need to fulfill I'm I'm totally for using using seems cool big fan of it like it um the feature is called explicit to remind developers that the resource cleanup will be done immediately and explicitly as opposed to though implicit and somewhat opaque Resource Management you'll get with weak Maps week refs finalization registry or Garbage Collection okay yeah yeah I'm gonna skip over all this because I don't think we need to worry about that after a good many years class Fields including private Fields was included in ecmascript 2022 but even though they've been shipping in browsers for years some of the node Community found that they were uh there were some performance penalties using these what okay just fix the brow fix the engine for that why why uh to address that Bloomberg a funded egalia to optimize private field performance in V8 now private field access is at least as fast as public fields and sometimes even faster how about we just make them all this all the same that's kind of crazy magic sometimes fast and sometimes it's faster you're like why why party came Mariah what the new decorator okay we're back to decorators apparently uh the new decorator uh decorators provide a path towards a more expressive private Fields you know that's what JavaScript needs right now that's what JavaScript needs is more expressiveness okay we're really missing out on better meta programming that could be done um okay well I'm sure that 80 of this is that I don't understand the use case as well I would love to see iterators first class iterator support in JavaScript I'd like to be able to create my own iterators I'd love to be able to attach methods to iterators such that like in a trade style way I'd love to be able to do that or even register it globally I'd love a way to be able to register my own iterator method so I can go like dot map dot filter dot my iterator because this is the one I really really want and I don't want to have to wrap you an excessive amount of parentheses and then gold list Style on this like I would love to have that that would be my favorite but uh without this you know without that how much do I love iterators they're okay they're okay I know not gonna happen exactly and so it's just like that's cool array by copy uh decorators please get away the hash bang I just totally don't understand because if v8's the one parsing it you've already chosen the program that's running before V8 ever gets the chance to run it doesn't make any sense to me I'd love to you know uh temporal great fix time always fix time fantastic uh always in in for that delivering decorators it scares the hell out of me um Resource Management love using uh anything else uh class Fields better performance yay right totally in for that anyways there's a lot of weird things that happened way back in the day with with all of this you know like some of us some of the performance stuff was all wonky you know uh this all you know people don't realize that there's a lot of performance irregularities in all this like when constant let were first introduced there was a huge performance hit for using let versus VAR and so there's just like odd things that happen you know it's it's it's truly a wonder the JavaScript engine and it is like literally I did low bit tiles uh algorithm uh I I did I did some I did a couple different algorithms for uh stuff and you could see a significant difference between the running times even in micro benchmarks uh using just like let versus that it was crazy it was just a weird it was a weird time to be alive you know what I mean it's just weird and so you know there's a lot of there's a lot of craziness that goes into all this a V8 engine is largely misunderstood or not understood by everybody there's a few people that know what's happening and there's most people that don't general rule of thumb just use just use things that are syntax based because they will probably get better at some point right it's as simple as that just use the things that are syntax Don't Be Clever and for the most part everything will run fine