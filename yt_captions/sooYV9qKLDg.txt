for a while now we've been working on learn till which is a tool that can generate quizzes from text websites and even YouTube videos if you want to try this out for free go to learn.com now figure out the best way to work with promps has been sort of a journey for us we've started with just very simple text based promps but then we realized we wanted something more complicated a bit more control so we started using yo files then we've also used Lang chain for a while which ultimately we didn't really feel was good enough in terms of design and what we've now landed on is Ginger 2 which is very capable templating engine combined with a basic setup for interacting with the open AI API which we use for learn tail now typically Ginger 2 is used for generating HTML but actually it's really suitable for tools that need to interact with an llm so I'm going to show you a really simple way to set it up you you can find the full code in get report store that's Linked In the description now this is just going to be an introduction video I might do more in-depth Ginger 2 video in the future if you'd like that let me know in the comments the first thing that I want to show you is a very simple function that helps us interact with the open AI API now in principle the API is not that complicated there's even a python SDK but I've written a simple wrapper around the API that makes it even simpler to use and that's what you see here so I've defined a couple of models in this case that's gpt3 and GPT 4 of course you can add any models here that you would like I've also defined a type that I'll talk about in a minute this by the way is the new type Syntax for python 3.12 and then I have a function called chatter and what that does is that it creates a chat interface for us that's really simple to use and the way this works is by using a closure so what this function does that it first creates an open a client but then it defines another function closure that actually can send a chat request and that function uses the scope that it's been defined in which contains the AI clients that's defined here so send chat request simply gets a query which is a string and then also returns a string and there I've written the code to actually interact with the chat interface so I'm passing the model I'm passing the message and then I'm also extracting the chat result from the response and then if there is no chat response I'm simply raising a value error and otherwise I return that result so basically this function wraps around all of this uh complexity and then I return that function which is actually really cool because then when I want to use this I can call the chatter function and then I get another function as a result that I can then simply call with a query so short this really a simple function but I think it's actually a nice application of a concept from functional programming so that's one of the ingredients that we need the second ingredient that we need is a way to formulate the promps and that's what we're using Ginger 2 templates for now if you want to use ginger 2 you of course need to install it and make sure you actually install Ginger 2 and not Ginger which is a separate package but once you do that then you can start defining templates I might find it helpful to install some of the extensions that are available for ginger for example this one I like very much called better ginger and this has syntax highlighting for ginger too so in my project here I've created a couple of Ginger templates so this is one of them and the nice thing about Ginger is that you can then incorporate these kinds of tags and then replace them by actual values so as an example for this video I've written a prompt that writes an email for a specific customer that a product is out of stock and I can just inject the product that's out of stock I can suggest a similar product I can also indicate a particular tone of voice so you could even personalize this to various customers and then the email should be signed by the CEO of the company so you can even swap out the CEO really easily which is awesome I'm just showing a very basic example of Ginger 2 here there's way more capabilities like if else statements and lots of different things I'm not going to go through it now but those things are also incredibly helpful if you want to construct more complicated prompts final thing that I did is that I create a little helper function called process template that gets a template file that's a string and that also gets the data that should be passed to the template so I'm interacting here with the ginget 2 package to load that file and then render the template and return the result so how do we then use that well I have a main file here where I first get an API key of course you need an API key if you want to interact with open AI API and then I call this chatter function and pass the API key and here I'm simply using gpt3 which is fine for this particular example but you can also switch it to another model if you wish then I've written some data so a customer name a product a similar product so purple widgets are obviously very popular so everybody wants those right so uh they're out of stock and only orange widgets are there we can indicate the tone of voice in this case we want it to be short and to the point no fluffy language and the CEO name is iron codes I'm the boss anyway what we can now do is create an email template and we can then use the process template function that we defined before so this is not called email template. ginger but this is called let me take a look create unavailable email there we go and the next thing that we need to do is then send the email template that we constructed to the chat function and that's going to give us a response which we're going to print so let me run this file so here you go we now have an email that the purple widget is no longer available and that the orange widget is a great alternative and what's nice about using templates like this that we can now very easily change them for example let's say I want a different tone of voice I like the co-pilot suggestion here there let's try it again I'm really curious now oh there we go oh we even get like banana and clown emojis I love this I have a question for you what do you use for managing your prompts and llm interactions do you use some something simple like what I've shown you today are you using a package like L chain something else let me know in the comments so today I covered just the basics and there's of course a ton of other things you can integrate in a flow like this as well such as Json parsing storing the result in database and so on however there are a few things that you need to think about when you're using something like open AI API in your project watch this video next to learn more thanks for watching and see you next time