Hello and welcome. I'm James Murphy. What do you do when your website goes down? Well, I guess for a lot of us, we just wait until we happen to notice and then reboot the machine. But if people are depending on your website or if you're running your business from your website like I am, then downtime is lost money because that's time that a client or customer can't see your page. How about we build an app or a service that just notifies me if my website goes down. Then I don't have to worry. Okay, let's do it. I think writing user interface code is kind of annoying. And this video is also sponsored by anvil. So, let's use anvil to make the app. Let's just start with a blank app. I don't really care that much about the design. So, I'll just choose the first option Let's go ahead and rename the app. Very descriptive, I know. Here, we have our first form. This is basically the frontend of the application. Let's go ahead and just drag the title label on there, call it title. Since this isn't going to change in our code, I'll just put the fix text down here Let's start out with just a button that's going to populate a label. I'll just call it the run button. Before I have this thing run automatically or anything like that, Let's just make it so that I click a button and it displays whether or not the website's up in this label. Of course, give it a good name. For now, that's all I want for the layout. Let's get to the code to actually populate this label when we click on the button. So, I didn't write any of this code. It seems to sort of automatically populate and do some imports based off of you know what you drag and drop and what it thinks you're going to be needing. You can turn that off if you want. But I'm  not super familiar with anvil yet. So, I'm going to go ahead and keep it on and see if it makes good suggestions. It looks like if I go back to the design panel and click on the button, then I can click this button to add code to be run when the button is clicked. For now, I'll just hard code that the website is up and then see if I can populate the label. To test the app so far, you just hit this run button. So, I click the button and it says it's currently up. That is actually true. But I just hard coded it. So now, let's figure out how to make a web request. I'm not quite sure what's installed. So, let's just try to import requests and see what happens. When I run it this time, I get an import error. So, request is not installed. But I do get this thing telling me that I should use the anvil http module. Here's how you make the request. And basically, if anything goes wrong it just throws an exception. So, we'll just return true if no exception is thrown. And it says: My website is down. My website is definitely online. So, clearly, I'm doing something wrong. So, I printed out the exception this time and I'm getting an http error zero. zero is not a valid http error. So, something else is going on. Apparently, this is some kind of security thing with browsers Because this is the client-side code, this is actually translating into having the client go out and do some kind of http request. Apparently, a lot of browsers block this functionality for security reasons. The solution is to do this request on the server side instead. So, let's figure out how to make some server code. On the left hand side, we can clearly see client code and server code. So, I guess, I just need to add a server module. And while I'm at it, I gave these things better names. I moved the function to the server module. And you just mark it with this decorator in order to make it callable from the client module. Then here instead of calling the function directly, we mark it as a server call. Here, I just pass the name of the function followed by the parameters. Okay, now it looks like it can correctly tell that the website is up. I don't really want to be clicking on this button to tell if my website is up.  Of course, I could just go to the website. So, what I really want to do is to run this code automatically on some kind of schedule. Every hour I basically want to check if my website is up and then if not, send an email to me. The documentation says to just slap your function with this background_task decorator that will allow it to be called on a schedule. To make this run on a schedule, I need to add a scheduled task and that's just this first option when you go to add on the left hand side here. Click add task and then the name is this check_up_hourly. When I'm done with everything, I'm going to set this to run every hour. But for testing purposes, let's just set it to really short, just one minute for now. I should let you know that adding scheduled tasks and sending emails, it looks like our paid features. You can still create and spawn off background tasks if you're on the free plan. You just can't run them automatically on a schedule. So, they would pretty much have to be spawned off based off of something that a user did in your app. I'm actually kind of curious to see what happens if an exception is thrown in one of these background tasks, like, where does that error show up. So, let's just add this in and see where that shows up. Okay. So, you can see the error here. It just showed up inside the logs tab. It looks like it should just be this easy in order to send a very basic text email. So, let's just see if it works. Let's go ahead and stop my web server and see if it actually sends me an email. All right, it looks like the emails are starting to pour in. It looks like it's coming from some no reply add random garbage anvil stuff. I turned it back on and the emails have stopped. So, this works. I'll get emails if my site goes down. That was the main use. But how about we also have it keep track of all of the downtime and then show a plot of how long the downtime was? So, the next thing I need is a database in order to store the data that we're going to be plotting. It looks like we can just go to this data tab and add a new table to the default database. Rename it to online_status. I think you can just click to add columns. Yeah. So, I'll go ahead and just add those columns. Okay. So, I'll store the request_time, the url and the whether or not it was online. Now, we need to actually populate this data. This is the way that you add rows to the database. You use this app_tables variable and then the table name and then add_row. Then you just pass all your variables in as keyword arguments. Now, whenever I check whether or not the url is up, I will also log the result in the database. And we're already starting to see some data come into the table. Let's also go ahead and make another callable so that the client code can call the database and get all of the recent uptime data. I'll just make a query for all the data within the last 48 hours. So, I just do app_tables, table name, search and then I say I want to search where the request time and this queue is for query. So, query greater than after this time. Back to our form. Let's go ahead and drag a plot onto there. Let's call this one the uptime_plot. So, I went ahead and added update_plot into the initialization of the form and whenever you click the button. Let's get the recent data by calling that function from the server module. It looks like plots are plotly plot. So, let's go ahead and import graph_objects. Then we just go ahead and set the plot data to a scatter plot with the data in it. And indeed, it is showing me that for the four or five measurements that it has taken, the website has been up. Let's go ahead and put the website down again and take a few more measurements. Check now, check now, check now. And then after I put the website back up and check a few more times, then we see that it goes back up to one. That's pretty much all the functionality that I had in mind. I'm going to call this app done. So, let's go ahead and publish it. I just go up here and click this publish. Then I just hit add public url. It looks like you can actually change this. But that's a pretty funny name. So, I'll just leave it. Check out honored-velvety-chicken.anvil.app And it's online. Once again, thanks to anvil for sponsoring this video. And as always, thank you to my patrons and donors for supporting me and helping me grow my channel. Don't forget to leave a comment. Share with your friends and slap that like button an odd number of times. Thank you for watching.