hi everyone in this episode we're going to create scriptural objects to hold the planets shape and color settings we'll have a custom editor to display these inner planets in spectra and have any changes to them cause the planet to update automatically the reason for doing it this way is that later on it will be extremely easy to save the shape and color settings for planets that we generate and load them in as we want alright so in unity I'm going to create a new C sharp script call this shape settings and then a second one called the color settings alright I will open this up these are both going to inherit from scriptable object so that we can create actual assets out of them and I'll just have this great asset menu attribute up at the top here shape settings it will eventually have loads of stuff but for now let's just have a public float for the planet radius and I'll set that to maybe one by default save that and open up the color settings file so this in-house from scriptable object and once again have this great asset menu attribute up here and for now this can just hold a public color for the color of the planet alright so if we save this go into unity and just wait for that to compile then when we right-click under the create menu we'll now have our shape and color settings go to create a new folder first I'll call the settings and then inside there I'll create a new shape settings squad shape and a new color settings call color alright in here we can then set the color of our planet as well as the radius like so of course these settings currently aren't linked to anything so let's go back into the year planet script and this is going to have a public shape settings as well as a public color settings all right then coming down here along with the generate mesh method let's have a generate colors method for now this is just going to loop through the meshes and set the materials color to the color we have in our settings so I'll say for each mesh filter just collect em in the mesh filters array we need to get its mesh renderer component you can do it like so and then set the shared material color equal to color settings dot planet color all right we can then have a public for ade on color settings updated where we first call initialize and then generate colors also have a public void for when the shape settings are updated and here we'll call initialize followed by generate mesh now generate mesh is calling this construct mesh method on each of the faces so when you get that to use the planet radius from our settings so we could simply give each terrain face access to the shape settings but of course later on the shape generation is going to be a little more complex than just the radius so I'm going to go ahead and create a new C sharp script which I'll call the shape generator and then I'll open that up and this isn't going to inherit from mana behavior and it's going to have a shape settings object here which can be assigned in the constructor and then it's going to have a public method returning a vector3 I'll call this calculate point on planet and we'll take in a vector3 point on unit sphere all right so at the moment this method will just be very simple it will return the point on the unit sphere multiplied by setting start Planet radius okay yeah so I'll save that go into the planet script and here we'll want a shape generator object call that shape generator and in initialize we can just set that equal to a new shape generator and pass in the current shape settings all right now we'll want each terrain face to have access to that shape generator so I'll just pass it in as an argument here shape generator and then we'll need to go into the terrain face to actually update the constructor so I'll add the shape generator as the first parameter here okay I'll quickly copy that says we can have a reference to it outside of the constructor and then just assign that in here this dot shape generator is equal to the given shape generator all right then when we're assigning to the vertices here we can say a vertices I is equal to shape generator dot calculate point on planet passing in the point on the unit sphere okay going back to the planet script quickly I'm going to create a public void a generate planet and this will call initialize it will call generate mesh and we'll call generate colors so basically this is the method you want to call to generate the planet but if only the shape settings have changed then you can call this method and if only the color settings have changed you can call this method alright so coming up to our on validate thing here let's just call generate planet so I'll save that and if we go into unity we'll probably get some errors when this tries to generate the planet but it doesn't have the shape or color settings assigned yet so let's go into the settings here and just assign both of these quickly and now you can see that this is green as defined by our color and it has a radius of 2 so if we change this to red you can see a doesn't actually update immediately we have to go onto the planet and actually trigger the on validate method by doing something like changing the resolution now that's obviously not ideal what I would like is for first of all the shape and color settings to be editable right here in the inspector of our planet object and secondly when you change to the settings to immediately update the planet so to achieve this we're going to need a custom editor so let's create a editor folder and inside of the go to create a new C sharp script called the planet editor and eleven that up alright so up at the top here we can say using the unity editor and we can inherit from the editor let's just say that this is a custom editor type of planet and then we can have a reference to our planet which will set in the on enable method by saying planet is equal to and then casting the target object to a planet like so we can then override the on inspector GUI method and then we want to draw an editor for the shape and color settings so I'm going to make a method called draw settings editor this will take in an object for the settings object and we can for now simply say editor is equal to and we can create a new editor passing in the settings object and then to display it we just call editor dot on inspector GUI okay so from this on inspector GUI we can call draw settings editor passing in planet dot shape settings and then draw settings editor again this time passing in the color settings okay so if we save this now and go into unity then once this finishes compiling we should see over here we have our settings and we can change the planet radius right there and we've also got the color settings and we can change the planet color here and of course this isn't updating automatically just yet so let's go back into the scripture and we can check if anything in the editor has changed in the following way we say using the new crater variable called something like check set this equal to a new editor GUI dot change check scope and then at the end of this we can say if check dot changed then obviously something has changed so in here we'll want to call the planets on shape settings updated or on color settings updated method depending on which settings object were currently drawing so in the method parameters here let's add a action which I'll call on settings updated and in here we can just say if on settings updated is not equal to null then we will invoke that and then up here where we're passing in the shape settings we can pass in planet dot on shape settings updated and where we're drawing the color settings planet dot on color settings updated alright let's save that and go into unity and once that compiles we can now change the planet radius and we see that updates immediately and same story with the colors all right now currently it's not so clear where the different editors start and end so let's make things a little clearer by drawing a title bar for each of them so I'll go back into the planetary script and before we create the editor we can just call editor GUI layout dot inspector title bar and we can pass in a value of true and then our settings object this value of true I'll explain in a moment but let's just save that and into unity again quickly so now we can see this is looking much nicer but currently if we click on this little fold out arrow here it's not actually hiding the editor as it does with say our planet script and that is what this value of true is saying is just that it's always folded out so to make that work let's add a bool fold out to the parameters here and we can pass that in instead and then this method returns a bool telling us the new value of the fold out in the case that the users actually pressed the little arrow so we can update the value by saying fold out is equal to the result of that method then obviously we only want to actually draw the editor if fold out is true all right now this fold out value needs to be stored somewhere and we can't store it in our editor here because values aren't serialized here which means it's going to keep losing its value so instead we'll just store it in the planet script I'll create public pool shape settings fold out and don't want that to be displayed in the inspector so I'll just add hide an inspector here and I'll just copy paste that for the color settings fold out as well okay save that go back to the planet editor and now over here we can pass this in so that's in planet Dodge shape settings fold out and planet dot color settings fold out all right now in order for us to be able to change the value of the full dot variable that is actually in the planet class we're going to need to have this bool passed in by reference so let's add the ref keyword there and we'll also need to add those two keywords in front when we call the method okay so we should now be able to save this go into unity and once this compiles we should be able to control the fold out of our two set that is all right so the functionality that we wanted is now all there there are just a couple of small changes I want to make for one I don't want toggling the fold out of the inspector title bar to actually trigger checked or changed so I'm just gonna move this outside of the change check like so then I also don't want to have to create a new editor each time we draw this because that's a little bit inefficient so instead I'm going to define an editor outside here call this the shape editor and another for the color editor then in the parameters here we can have a reference to the appropriate editor and pass the right one in here so ref shape editor and ref color editor then instead of using this great editor method we can use create cached editor and here we pass in our settings we can just use null for the editor type that we'll just use the default editor type and then we can pass in our editor by reference so with this method the editor that we pass in is getting saved up here and it's only creating a new editor when it actually has to okay let's also handle the case where the settings object hasn't been assigned in the inspector and so it's a null so we'll only try and draw the settings editor if the settings object is not equal to null okay then I need to copy this change check scope line and risk around this call to base dot on inspector GUI with that and then here say if check but are changed then I'll call planet dot and generate planet this is going to be replacing the on validate method in the planet script just so that all of the updating is being done from within the editor script then it might also be nice to have a button to just manually generate a planet so if QB layout dot button I'll call this generate planet if that button is pressed then we can call planet dot generate planet alright last thing is just in the planet script I'm going to have a public pool auto update which I'll set it true by default and then we'll only run these on settings updated methods if auto update is true just like so alright let's save that and I'll go into unity one last time to just make sure that this is all still working so with auto update on can change the planet radius and the color of the planet and that works fine if I turn on auto update off you can change say the radius here and then generate a planet manually and that updates alright so that is going to be everything for this episode until next time Cheers