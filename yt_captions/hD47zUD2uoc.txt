welcome to your daily dose of Lee code today we're doing the question kth largest element in a stream let's read the question design a class to find the kth largest element in a stream note that it is the kth largest element in the sorted order not the case distinct element Implement case largest class so in simple terms this problem is asking you to create a class named kth largest and we have to implement the two methods the Constructor case larges that takes in an integer k and a stream of numbers nums where K is the position of the largest element we're interested in while nums is the initial list of numbers we also have to implement the add method which appends an integer value to the stream and then we return the kth largest element in the updated Stream So what are the key takeaways from this problem well the first key takeaway is that we have to design the class itself the second key takeaway is that we have to find the case largest in sorted order not in the order that we're given the third key takeaways that we need to initialize the class with two member variables K and nums the fourth key takeaway is that the add method only needs to add the number to our nums and then return turn the case largest after adding the number the last key takeaway is that we're guaranteed that there will be at least K elements so we won't have a situation where K is greater than the length of nums so let's start thinking about some solutions The Brute Force solution that we could do for this is that in our nums array we could simply just every time we add a number we store the number in the array and then we'll sort the array in descending order where the largest element is at the top after we sort the array we're just going to return the case largest by returning the element at the index of K minus 1 since K is not zero index like our array so let's write the code for this solution alright so the first thing we're going to do is set up our Constructor so set up our member variables nums and K and now we're going to go on to our add method so the first thing we're going to do is we're going to add the value to our nums array and then we're going to sort the array and remember to sort it in descending order where the largest element is at the beginning and all we have to do now is return the case largest element which is going to be the element in our nums array at the index of K minus 1 since K is not 0 index like our array the time complexity for this is split into two parts the Constructor and then the add method the time complexity for a Constructor is going to be o of n since we're just storing all n elements as for the add method the time complexity for this depends on the programming language that you use and the Sorting algorithm but since I use the built-in python sorting algorithm it's going to be o and log n since we're sorting our array every time we add an element to it now for the space complexity it's going to be o of n since we're storing all n initial elements in the Constructor let's start thinking of an optimized solution currently we're sorting the array every single time we add an element to it in order to get the largest elements at the beginning of the array so let's think about this is there some sort of data structure that we can use that gives us the smallest element at the top or the largest element at the top and there is a data structure that does exactly that and it's a heap we can use a Min Heap for this problem and the nice thing about a minheep is that it has a property where the smallest element is always at the top we can take advantage of this property for this problem by making the Min Heap a size of K since if we keep the size of the mini heap Decay this means that the top element in the Min Heap is always going to be the case largest number so in the add method every single time we add a new number we're going to check if the size of the Heap is greater than K if it is then we're just going to pop a number out while maintaining the heat property since if we maintain the heat property every time we access the first element of our Heap it's still going to be the case largest element let's write the code for this I think it'll make more sense if you see it in code alright so first things first once again let's create our member variables and nums and K and now we're going to transform our nums variable into a heap and now we're going to shrink the Heap size into a size of K and now for our add method we're going to add the value into the Heap and make sure we keep the heat properly and now we're going to check if the size of the Heap is greater than k then if it is we're going to pop an element from the Heap while maintaining the property by the time that's done we're going to return the top of the Heap which is going to contain the case largest element the time complexity for this is once again split into two parts the time complexity for the Constructor is going to be oven login because we have to do the keepify operation and that takes all of end time and then we have to shrink our Heap into size of K and every time we remove an element from our Heap that takes log n time now the time complexity for our add method is going to be all of log n and this is because whenever we do the add method there's a chance we have to remove an element from our Heap and removing an element from our Heap takes log n time now the Constructor method can be optimized a little bit more but overall it's still the same strategy of just keeping a heap of size K alright so those are the two main methods of solving this problem and if you guys have a specific problem you want me to go over let me know but I'll see you guys in the next video so see ya [Music]