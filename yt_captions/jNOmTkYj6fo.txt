thank you yes for this opportunity to speak uh to have a short talk i start my timer just to not go beyond our limits um so hi my name is mirosev boca and um before in this short talk i'd like to uh talk about uh single entry and single exit rule basically for the software development as we all know we have different rules we apply on our discipline of software development just to make our software more reliably reliable uh to keep it maintainable and most of all readable sps is especially important when several people are working on the same code base so one of those rules is single entry single exit and i had when i stumbled upon this we i've got have a closer look at the rule so what is the rule all about so this is the the rule more or less it says that sub programs should have only a single entry and single exit uh point so single entrancing exit only and it is written like this in this safety norm uh iec you can see it on screen in the part 7 and given section which gives us some techniques and measurement measures that we should apply to our software to make it safe and good for safety related systems as a reference it it quotes a structured design book which is uh pretty old 79 which in turn says that it is highly is it's really was highly influenced by uh the notes uh on structure programming wrote by mr dixtra in 1970. so the idea back then was to simplify the flow of the program because uh uh back then the typical programming languages used were assembler fortran cobalt there was no c there was no c plus plus and in those languages especially in assembly and fortran it is easy to jump all over the place in assembler it is clear but in even in fort run we can jump into a subroutine procedure and start it not from the beginning but a little bit later it is possible of course you can jump out of it also earlier so that led to the code which was kind of spaghetti and sooner or later people realized we have to do something about it because the code becomes unmaintainable and hard to understand so that was the the proposal to to solve this problem or to address this problem and and mr dixon wrote quite a lot about this uh not only about the structure of programming but also about the go-to in general she said it's not a good idea to use okay where is the rules uh used so as mentioned already these iec standards say that explicitly misra took this standard from this standard from eac and it says with a little bit different form as you can see this function should have a single point of exit at the end it is clear because they adapted it to the modern languages model so in 90s so when we start a procedure procedure we start always from the beginning so we are not jumping to middle of it but we can still jump out of it quite easily in google style guide it is not mentioned at all so it is left to the user autos are explicitly said that we are permitted to jump out before at different places and iso c plus plus coding guidance go one step uh forward saying that just we should not insist on applying this rule uh so they are just a bit more on a liberal side and so just briefly what their rule how the rule looks in a practice left side on the right side we see the same code but on the left side we have this rule implemented on the right set note on the left side uh in both sides there are just three conditions to do something and uh and that three different situation and return different error code when when conditions are not met so it looks like like this more or less and but we have one single exit point on the other side we can just uh check the conditions at the beginning and exit early returning the appropriate error code and only when all conditions are met we are doing our stuff so this is more or less the difference in in a style and yeah so for my personal point of view i prefer the second version because it gives me a bit more um easier to understand code and if we compare different uh the advantages and disadvantages of this this style i sorted them out into three categories readability resources and debugging readability i meant in bold because i think this is this is something which is for me personally extremely important so on the the single exit single leg single entry and exit rule uh as you we could see before um pretty quickly gets hard to understand when we have a lot of nesting inside then it it gets a bit problematic on the other side uh when we are a bit relaxed about this and we can exit early that makes it makes our code easier to read and uh which was not visible but it's worth mentioning uh it frees our mental resources when we when we know that at some point in the code from this moment on we can focus on our task because our pre the preconditions are already solved or taken care of so that's that's one thing on the other side is more sometimes people are saying it's more about resources so they are in uh using the rule we can ensure that resources are free uh are freed at place and the rule is not that on the other side uh it was a pro it could have been a problem before but using um c plus plus and uh resource allocation is initialization we can we can pretty nice get around it so even if we exit early and we allocated something we may make the code so that we don't lose resources i've heard also opinion that then debugging is easy regarding single entry signal exits because we can set this one breakpoint somewhere at the end and we know what is when we stop there we know what was before when we can inspect uh the previous variable you know in on the other side we have to take a several break points so that's that's the uh that's the comparison um all the links are two standards i i mentioned before i collect it on one place and uh here are the links if if later we are going to share these these slides and uh also i collected some links regarding the some discussions there was on stack overflow regarding this uh which was quite interesting to read um so finally what was the conclusion well i would say so it was just a quick overview in few minutes and in my personal opinion to that is that as i mentioned before readability is the most important uh value at least for me so if using the rule makes the code clearer and more understandable and readable i would definitely go for it uh if the other thing if it's not the case so if applying the rule like in the example makes the code harder to understand i will not use it so is up to you to apply it or not i would say if it makes sense do it if not don't so that is it and thank you for attention thank you mr