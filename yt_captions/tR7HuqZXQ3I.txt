Google has been doing a lot in the open Hardware space and it has caught my eye so recently I got on a call with Tim Ansel who leads this initiative at Google as well as his colleague poppy in Japan those were very fun conversations and it gave me the chance to learn a bit about Google's thinking Behind These open source moves in this short video I want to talk about these initiatives and a note before we start Google didn't sponsor this video but they did give me a few helpful links and resources as well as show me some cool software things I am appreciative for their time probably the biggest happenings for this space in the past year were Google's announcements that they had partnered with skywater e-fabulous and now global foundries to make it possible for people to actually Fab their custom silicon designs I did a video about skywater before they are one of the few Pure Play foundries left in the United States Google partnered with them to open source the pdks for their 130 nanometer process node a pdk or process design kit is a set of design rules and physical limitations packaged with simulators third-party pre-designed IP libraries design rural Checkers and other design tools this is the information fabulous designers need from their manufacturer to design Hardware notably that skywater pdk received as many GitHub stars in a week as other Hardware projects like riosis and chisel did over their entire lifetimes they're also working on open sourcing skywaters 90 nanometer fully depleted silicon on insulator process node which is more of a specialty process that uses an insulator to prevent electrons from inappropriately burrowing through under the gate now this latest announcement in August 2022 open sources the pdk for Global foundries 180 nanometer process node and makes it possible for people to apply to Fab their open source designs it's a pretty big deal since Global foundries is quite a significant Foundry to me it says that Google's efforts are making Headway in the larger semiconductor manufacturing industry now obviously Google is not doing this out of the goodness of their hearts what is the business strategy behind what they're doing here right now there exists no significant open source silicon ecosystem that designers and customers can use to produce data center or consumer applications this means that if Google wants to design and produce hardware for internal or external use like the famed Google GPU for instance most of that design has to be done with proprietary IP this in part has contributed to Hardware design getting exponentially more expensive so Google wants to build a community of world-class Open Source Hardware design projects in an attempt to bend that cost curve and at Google scale using billions of chips or whatever every little project IP that gets good enough to replace a proprietary or internally developed item has significant financial or performance payback benefits so yes Google benefits from it but so will everyone else all right then so what is Google's Grand strategic plan for building this ecosystem in my previous video about Open Source Hardware design I mentioned the goal of improving ultimate ease of use rather than achieving ultimate performance there is no intention to produce a next a series Apple chip or Nvidia h100 super GPU you can't do that with a 130 nanometer process Fab anyway instead these early stages are more about making it easier for ordinary folks to download and use tools to make and share their own chip designs perhaps even fapping that design and critically doing this without having to buy or sign ndas for expensive electronic design automation or Eda software so the team's execution steps have been to first open up and unify the various softwares and Tool chains for Designing Hardware this includes the aforementioned open sourcing of the various pdks from semiconductor foundries Global foundries skywater Etc on the tooling side Google is backing things like open Lane open Lane is an automated flow that bundles together various tools like yosys magic and open road so to take you right from a design abstraction like RTL to a Foundry ready gdsii file and second creating on-ramps and carrots to get talents to start using these tools this includes tutorials and cloneable projects that are easy to start with as well as this free shuttle Fab program so that people can actually get real chips in their hands from their designs all right the first thing that you might be thinking what can you do with a 130 nanometer process node the process debuted in 2001 and 2002 which makes it about 18 to 20 years old the first question that might come to mind as it did for me what can we do with this the 130 nanometer process produced the IBM powerpc 970 chips and 118 square millimeter chip with 58 million transistors these chips in turn powered the Power Mac G5 introduced by Steve Jobs in June 2003. it had clock speeds from 1.6 to 2 gigahertz sounds pretty Cutting Edge to me what more can you want just kidding you're not going to get performance on par with today's desktop class computers but then again that was never the intention nor the goal but 130 makes a lot of sense with iot projects sensor systems or microcontroller spaces you can make certain things that are as good as anything that is on the market today especially if that thing needs to be low power I want to pause here to an award an Asian Armitage dear favorite to my favorite 130 nanometer published project this one comes from a team at the University of Michigan people know that I am a sucker for neural network Hardware I've done a lot of videos about the memory and power consumption challenges that neural networks present to existing Von Neumann architectures so this team proposed an ultra low power compute in-memory neural network accelerator made with analog principles the concept is similar to the approach of the Silicon photonic base neural network accelerator I profiled in an older video anyway this accelerator concept stores each of the model's weights as a threshold voltage within an on-chip volatile memory then in order to do the necessary linear multiplication calculations for newer Network inference and access transistor then receives a neural network input in the form of a voltage the voltage goes through the chip and the current that comes out at the other end can be mapped to the multiplication output of the input and the weight Nifty right well the Mad Lads actually built the thing using a Sonos 130 nanometer process so yes this is what you are capable of doing with a 130 nanometer process okay sorry let me get back on track right now many of these projects are still toys or academic Concepts but is that not how several major open source software projects started too I remember speaking with Matthew van who runs the zero to Asic course about this and he cited the example of Linux the open source operating system and GCC the open source compiler for a long time Linux and GCC were also just toys that nobody really paid attention to then suddenly people came to the collective realization that these toys had gotten good enough to be used for real world business applications when would such a thing happen in software who knows I don't like to make predictions but in a recent semi-analysis post Dylan and his team mentions that apple is working to convert at least a dozen non-customer facing cores from an arm-based design to risk five so I thought that was interesting okay one last thing to add I think the take-up on the Academia side for Open Source Hardware design has been really impressive there is some real traction here professors and their teams want to be able to share their code so that anyone anywhere can replicate their work that's not possible if those teens have to sign ndas for closed Source Eda software npdks for example a team in Brazil presented a hardware accelerator design for encoding in the open and royalty-free av-1 video coding format the whole work relied on open source tools like open Lane and the skywater 139 meter pdk so if you have now gotten interested in hacking around with this sort of stuff how would you get started I asked property this exact question and he pointed me to the notebooks the team maintains a number of IPython or Jupiter notebooks which are neat self-contained files that let you run arbitrary lines of python code Google has a service called collaboratory that lets you run these notebooks right in your browser without having to install anything once you get The Beginner's project running in the browser you can start learning by changing things and seeing how they affect the final thing that is generally how I have hacked around whenever I tried to learn new libraries and languages it teaches you the lingo and gets you familiar enough for the more advanced projects available on the build custom silicon with Google website try some stuff if your custom silicon gets accepted by the shuttle program shoot me an email and tell me about your experience I would love to hear from you all right everyone that's it for tonight thanks for watching subscribe to the Channel Sign up for the newsletter and I'll see you guys next time