Lee Robertson has two spicy takes okay one developer content is sometimes at odds with what's best for developers two most boilerplate templates include way too much I actually really like this take and there's some things that I really wanted to talk about when I saw this I just couldn't really express it on Twitter because I don't like making long messages on Twitter okay so I I you know the only thing I I tweet out on Twitter is completely useless things okay I don't tweet out like news stuff oh we're not like I'm not keeping up with the times okay I just make the worst possible content ever for Twitter which is just pure mean nonsense okay anyways so I have two spicy takes so number one this one's a very interesting uh observation because I really do feel strong about this because uh you know one thing I noticed is that when I say report on Rust Foundation being just just horrible people which they just somehow managed to just do it over and over again I get a bunch of private messages being like Oh I should I should quit I should quit I should quit doing rust right it's like no you shouldn't do that because that's that's not that's not what I'm saying I'm saying that the leadership sucks and you don't have to do that right you don't have to quit it's not about that if you want to keep doing it go keep doing it that's right crab leg man um anyways but I can I can understand this there's a lot of responsibility and I've kind of toned down a lot of the things I've been saying just because of that because I realized that when I say something people actually take it as gospel and not as a meme Lord okay and I gotta be careful I don't I want I don't want to be that guy all right there is an increasing trend of content being created uh the day let's see the day a new developer tool or update is released the race to the first can be harmful I totally agree with this so I actually was thinking about doing something similar with this because I realized like one of the easiest ways to hack YouTube and grow fast is to Simply do something with every single update because everyone jumps on YouTube and tries to find out what people are saying about it like right away it was like an instantaneous success trick and I realized I can't do that like it was like an emotional burden on me and I didn't want to have to think about that because it's not the content I want to make right I don't want to be in that but it's a real thing people do this constantly where it's like first one to make the release kind of gets to ride the initial wave and say it's a it's a real thing It's Tricky developers are excited about new things they want to stay up to date on the latest trends but the message of the content creators can easily accidentally shift from this is interesting and new versus the old thing is bad this is better by the way I think this is a direct attack against htmx okay htmx may feel old but it's amazing okay htmax is King we all know that we all know that not PHP don't even try that with me in the rush to talk about something new I see folks miss a lot of nuance in the discourse uh or maybe that new thing still has pieces to be figured out and that might be fine you know I I think obviously he has a very unique perspective in the sense that he works at triangle company which means that he is uh you know like the whole they've had a whole bunch of stuff around app router they've had a whole bunch of stuff around and react server components which is you know fairly new in in the universe uh they've had a whole bunch of new things oh my goodness LK 99 I didn't realize this was okay so that is the superconductor I'm not gonna do it um he likes react and so I know that he gets he he probably gets a lot in a lot and a lot of just stuff dumped on him all the time about this stuff uh but it's a really interesting take which is the newest stuff doesn't necessarily mean it is Mega better it's a New Perspective and I think a lot of times people kind of forget that and I think there's a lot of you know like Twitter influence Twitter influencers that are constantly trying to push stuff like that and it gets um and it gets weird because I see these people that adopt all these new technologies and then they're like this is the way to do it but as someone who's been around long enough who wrote react server or class components who wrote transducers and higher order uh components who wrote hooks who wrote and went through all these things who went and used use effect a whole bunch and had to do that for various things at my job I watched every single Trend go oh that was the worst decision ever and all these ideas about no this is the newest this is the greatest this is exactly what you have to do I lived through so many of those already that I have just become so disenfranchised by it which is that all these new things they may not be any better and they may actually be significantly worse you just haven't had a large enough playground to test it because the thing is is that there's someone at the end of the day that has built some uis that have done stuff that looks at it and goes okay I don't like these aspects I'm gonna try to change something to make those aspects better but by doing that they have solved the problem they're attempting to solve but they've created an entirely new problem which is just like you just don't even know what it's going to be until the software gets big enough to actually handle it and so these Trends have been really really I think just crazy and I think web development is by far the craziest of it all in my my theory on all this is why that happens is Javascript is such an amazingly loosey-goosey language you can create any abstraction you want at any point do you know what I mean like you can you can create the craziest abstractions and so no matter like there is no hurdle you can't overcome with just even like some amount of effort and so it allows devs to create their dreams which is cool but it also creates a bunch of stuff that we have out there like every week it's just like new framework new way of doing things trust me this is the best one and it's just kind of it's kind of wild because of what JavaScript allows and then on top of it typescript since it has like this touring complete type system that's very programmatic it allows you to become like this typescript Artisan that writes these exceptionally complex libraries and all this to make it feel magical when someone uses it but the just the insanity that goes into these libraries to make them possible is out of control and it's just like when when a refactor happens you get thoroughly dominated and so I have a lot of feelings about this if you're wondering okay I have a lot of feelings about I feel this is at odds with what's best with uh for developers because you should likely not immediately adopt the new thing you might start to pay more attention to it and maybe read through the docs but not put it in production right away I mean I know people say that right but that's not how it feels right I think he's making an incredibly good point which is like how many people right now when you go on Twitter are saying that say react component react server components are the greatest thing ever you see it all the time yet the thing is is that we're only just barely into yet another new shift in react this is the fourth or fifth shift in react as of right now and all the previous ones are considered debunked right is he saying that htmx is the greatest yeah I think he is saying HDMX is truly the greatest and so it's like one of these things where I I feel I I feel like I don't really know what to do with it because I've I've been through it too many times at this point to really like trust anything I see and I feel like uh people just get this takeaway that it's the greatest thing ever which we just simply don't even know it could be great I'm not saying that it can't be great I'm saying I don't know if it is great right with uh yeah with no incentive yeah I know uh in reality any non-trivial site slash happening is an incremental path to a new thing you know I don't really okay so here's the problem here's my kind of problem with incremental not all things can be incrementally done and what I mean by that is that let's just say that svelte really is the best way to go how much how like how much can you do actual incremental things do you know what I mean it's very very hard to go say say you had react server components and now you're trying to use svelt right you've kind of built yourself into a box that's almost impossible to incrementally get out of and so you're going to see the same you're going to see a lot of these problems which is just like you can't incrementally get yourself out of because it's not what you what you are including is more like a virus than anything else it's extremely leaky it just takes over everything and that's the way you do it and I'm not saying it's bad I'm saying that that can be very very nice I think svelte is really really nice I think solid.js is really really nice I think at the end of the day I'd rather use htmx for 80 of the things I build and felt for the other 20. and that's about it because I feel like I like I like those two the best that's just me personally you know and but I realized that with htmx you have the chance to incrementally change with something with these new kind of meta Frameworks you don't have that choice anymore that choice is starting to die uh Astro you might have the greatest chance because Astro at least allows you to kind of like send down stuff so theoretically you could start programming different components and different things with Astro but then you actually send down two Frameworks to dictate your UI which sounds crazy right I don't think Library framework authors think about the impact of the change I assume they do think about the impacts of the changes um good stuff so what can content creators do present both the pros and cons acknowledge the design trade-off state that something is new and probably should not be a DOT uh not yet adopted yeah like I think the hard thing is is that we have a very develop in open world which means that if someone's using it like you know you can even take Theo with 3x server components he loves them he's using them in production so he thinks they're ready to be used in production is that a bad thing I don't think it's a bad thing I think that's the reality of how software goes which is you use something it works for you and now you're like you should use this because this is really amazing I think it's a really amazing experience so it's like it's hard for me to like dog on anybody for doing that because I do the same thing I've built one application in ocamel for my job one and I'm already I'm already like you absolutely oh camel's the greatest thing ever right I'm I do the same stuff okay I do the I saw three days of Advent of code and built one CLI application and I'm like oh yeah okay almost the end game end game oh camel I've built like half an application with uh HDMX again all there right and so it's you know I I totally get this I totally get the problem that's happening and it's just because I think one thing that happens with software is that we get excited we get really excited about things right and it feels really good to use something different you know I I think one thing that happens is that we we're constantly eating uh just vegetables right every single day you go to work and you work on the exact same thing over and over and over again right and so then all of a sudden you get to see something that feels a bit more novel and you know they they say that variety is the spice of life and so when you get this new thing it feels really awesome you know all the problems that exist you don't really take as seriously because you're just too busy having fun again you get to relive the having fun moment again you know what I mean like the same thing happened like I I was rust peeled pretty hard luckily the Russ Foundation took care of that rust pill really easily for me but I was pretty rust-pilled but then I also had to build kind of a few production level services with it and it was really like just unfun honestly I just didn't have as much fun doing it right the type system is great but the rest of rust is just like not that much fun to to work with um and so it's like I enjoy it but not like a ton and so I know yeah I know it really it wasn't a Keck W it was definitely a Keck Society okay whoa oh no okay I I put the next one that's how I felt right this is how I felt using rust in production right um and so it's like there's some things that it's really great like I'm still right now building more things in Rust for Netflix right now I like it I enjoy it but it's not great in all situations right I feel like oh camel is different so I get like this exciting thing right I get really exciting uh getting excited is good taking his gospel is not I think this is the biggest problem with dads right now is that excitement is seen as oh as as gospel right and I think there's I think there's definitely I think you're spot on and I think it's it's a problem but I think it's something we all suffer from my my first boss at Netflix told me uh UF shiny object syndrome careful because it can be a good thing it can be a bad thing you gotta figure out how to apply it well and how to avoid it and then you know what I did I went and wrote Falcor F's in the chat for Falcor okay shiny object syndrome to the max I still think it was a good idea I still liked the idea but I like I still like the idea trpc is effectively Falcor um I love the idea but I think it was done wrong what Russ isn't meant for shipping code no this for telling other people you program in Ross okay spend extra time before creating content to form a more rounded opinion I see see this I actually disagree with this statement uh pretty heavily and the reason why is that there is presenting the thing itself right like hey this is what they solve you don't you know like I could like when if sales felt drops a is felt five I can read the docs and I can be excited about the things they're trying to do right that's content in of itself here's a first glance here is what the thing is then there's second videos which is like I've been using this for three months here's my opinion on the item then you can give a more complete one but I think there's definitely like a two thing like the oxidizing oh Camel stuff yeah I didn't have to know anything about Oak like at that point I barely programmed any ocamel uh I I obviously uh like kindergarten level at rust and I'm sitting there reading about adding lifetimes to oh camel I can be excited about news and read through something new but you don't necessarily have to you know you can create content that's kind of like bleeding edge and that's what I've been trying to do the template that never stops okay this is part two so this is kind of like an a different part of this whole thing uh a common starting point for newer developers are boilerplate starter repositories that include a bunch of service libraries all hooked together in a single example so this is very interesting because I can't the problem I have with this like right away just off the rip uh one thing is that I think a lot of people so when I learned how to program I learned how to program and the goal was to learn how to program today yeah I'm old I'm a boomer I get it call me a boomer but today when people learn how to program they learn how to program to get a job as soon as possible and I think there's a shortcut that happens that is different than when I started and I don't mean this in a bad I don't I honestly don't mean this in a bad way I it's just simply different which means that you you lose you lose some pieces that you otherwise would have learned because you had a different like North Star so today the North Star is just get a job I'm a react engineer right react engineer that's not even a real thing react is not a language um it's actually JavaScript slash react or as I've been recently calling it JavaScript plus react um react is a UI framework that is powered by core utils and common libraries provided by JavaScript uh I don't know what's happening here what what is my brain doing uh but real talk like I think one thing that a bunch of these new developers are doing is they're getting thrown into this as where to start you do have to Market yourself I'm definitely not agreeing with that I'm definitely not disagreeing with that absolutely absolutely I agree you have to Market yourself that's why I give the two the two points the two points of how to get hired now I'll I'll address that here shortly um but it's just like with this how can you ever um how can you ever learn the basics when you're given like everything like everything at once how do you even know how these things work when everything's tied for you then when something breaks you feel helpless right Chad Jeopardy has really made life better because you could be given these huge things now and when something breaks you can go I know W wife that was a huge W wife you could actually go and ask chat Jeopardy and chat Jeopardy will will help you through this which I think is incredible I actually really have grown a great fondness for chat Jeopardy in places that I'm not used to but at the exact same time how are you ever supposed to know how an HTTP request works right like you have to know that you need to find out about that you have to know that you should probably like do that you have to learn like oh this is how pathing works these Frameworks they're really just pathing are they really just doing like regexes over what I'm providing right like that's what they're doing and you're like oh oh yeah okay I see this oh this is how this works okay so Express really is just doing this starting an HTTP service then I call this function a bunch it just adds a bunch of input right like you start to realize what's happening and so when something goes wrong you understand I think starting with the boilerplate or framework is good I would have never learned a lot of stuff uh I know now I let's see if I didn't have the tools to build stuff and learn things along the way I would have gotten bored and gave up along the way I I okay Fair Point fair point when I learned how to program I got the program inside of a game and so by programming inside of a game I gotta see my changes right away which felt more exciting which probably led me to go further because of that so you know what I can buy that whole argument what I worry about is people don't jump back right the goal isn't learning the program the goal is getting hired and I feel like there's something there that massively under like under uh under serves you to get hired I'll give my two re the the two ways to get hired here shortly in my opinion most of the times these are not helpful this reminds me of how uh reminds me of the now universally painful es lint configs that get forced on folks I hate eslint uh I really hate eslint plus prettier when you have them side by side and you get into situations where they try to make changes against each other uh all of these extremely opinionated changes were made and I don't understand why yeah like the recent one where you did you see the recent one if you go like this they say hey you can't do that you're not allowed to Define this like what kind of I hate like unless if there's something here I'm missing there could be something here I'm missing right there could be something like maybe there's a type difference between number like maybe there's something that like you can say that these aren't the same if these are not the same I get that if these are not the same then okay maybe I'm ignorant in this situation I get that but if they are the same why what's the point what are you trying to do right what are what are you actually serving anybody really what you're doing is it just it you're taking like why take away things that make no sense it's the real Toki it is the real Toki uh yeah the key is that you're interested in we'll keep learning out that's why that's why I constantly harp on do the thing that's interesting don't do the thing that I do you know what I mean all right I frequently see starter templates that include entirely stylistic things to the point of diminishing returns do you really need conventional commits in your starter template for building a project probably not 100 degree most importantly you've just dropped uh dependency hell on a new developer again a credible statement Lee these templates can be hard to maintain and often our worst starting point than the minimum a viable template ooh the mvt I really like this phrase I actually really love this there is something about getting someone started versus giving them the production template right because what you do in production versus what you're doing just to build a CLI application that you want to kind of explore very very very different you don't necessarily need the whole nine yards to begin with uh so what can we do smaller Focus templates if there's a pain point in getting two Services slash libraries to work together that's a good starting point it doesn't need 15 other things included that's all for today hahaha sorry Lee I know you didn't go D if Lee's gonna see this at some point and be like classically laugh um but I actually really really like this I I really do like this you you do know he didn't do it how do you know he didn't do it do you like how I misread that perfect Smiley rendition I know it is all right anyways I think you guys can convince me that that templates are good but I I do hope that the end goal of why you use a template is that you want to learn and you want to get going and you want to be able to see changes that become someone who understands programming I hope at the end of the day I can convince you that a job is a result not necessarily the aim and why I say that is that the more you focus on your abilities the more hirable you are the more you focus on what people want you to be good at the more hirable you are the more Foundation knowledge you have the easier it is to debug problems that come up and by having that kind of foundation where you're you're aiming more for becoming good at the craft as opposed to just getting hired as soon as possible the more prepared you're going to be and when you walk into an interview and they toss you a question that you have never seen before if all you know how to do is work in an extremely sandboxed environment it will be harder for you to be able to like accomplish this question you've never seen before because you don't know how to leave your sandbox you've effectively created learned helplessness you are stuck where's chat Jeopardy I don't know how to answer that I know how to find the answer but I could never answer this on my own well the problem with that is that your programming will also do the same thing and it's hard for me to trust somebody I'm trying to hire if they don't have like the fundamental concepts down because I want to make sure that what they put in the code base doesn't have to be constantly gate kept right I want to know that they're able to figure out and do the right things and often that requires a certain amount of Base knowledge so my two things to want to get hired uh is one set programming as a goal two figure out what people want for you to get hired yeah react isn't the only thing to get hired go Java they're very hirable skills right now there's tons of it C sharp there's tons of it python there's tons of it like learn react because it's easy to talk about learn other things it's really easy to talk about right the more you know the more hireable you are and once I hate react but I would still learn react to get a job right I would learn react to get a job for that exact reason so you got to put those two things together I know I even said the word c sharp I know I know I said the word c sharp and you know I hate it I know I you know I hate it but it's the reality um and so it's like one of those things where play the game to get hired then play the game to do what you want to do right if you think rust is the coolest language or you think oh camel's the coolest language and you want to go work at Jane Street guess what you should do guess what you should do first get hired so you can pay the bills then learn oh camo all you can and then you can go work Jane Street because you're now awesome and you can actually just keep on investing in those skills over and over and over and over again right like take the small steps to take the big steps and don't just try you know like again I really feel like if your only goal is to get a job it can be difficult there's like this uh quote by C.S Lewis that I think is really good about uh happiness I think it's happiness quote um no no no no no it's not a happiness quote it's uh Comfort it's the Comfort quote uh if you look for truth you may find comfort in the end if you look for comfort you will not get either Comfort or truth only soft soap and Wishful Thinking to begin and in the end despair I think about this quote quite a bit in my head I wanted to get the exact one correct I think about this quite a bit because what is your what is your goal what is your aim aim for the right thing you know what I mean if you aim for the classic computer science Lewis W like honestly aim for the right thing because it will serve you more the more you understand the more hirable you are if you only optimize for just something someone wants you may fail the interview over and over again because you don't have you know what I mean you don't have like the the you don't have that gauge you don't have that wider field a soft soap equals clean code absolutely anyways I just think about that a lot so love this take great take Lee um the name is I really appreciate you Lee rob a Jed