question came up actually from dr steve bagley um which i have quite an interest in myself which is what programming language would you start with so you know for a child 8 10 something like that where'd you start i think one of the options is certainly scratch which was designed as something that was meant for young kids and it seems to be extremely successful you can do interesting things you can animate stuff you can have games that kids can play they can build on each other's work there's an ecosystem there and i think in many ways for young kids let's make up a number 8 10 something like that i think that would work really well my experience with scratch which i used briefly with google's app inventor when it was a thing some years ago the problem from a programmer's standpoint is that you run out at some point scratch is great for certain kinds of things and then you run into a wall something that just can't do or is so incredibly complicated that you wouldn't possibly want to do it at that point i think you have to shift to mainstream kinds of programming languages if i were going to do that today i would probably teach kids python because that's the best combination in my mind of easy to learn because it is an easy language it doesn't have any limitations you keep going with it it has an enormous ecosystem of useful programs libraries modules packages so that pretty much anything that somebody has wanted to do you could do with python and somebody's done a package that will make it your job easier so i think that would be the next step and then after that who knows at that point you know enough about programming that any other language you could just pick it up good practice stuff so if you're learning a musical instrument you want kind of like instant gratification you want to be able to do something and accomplish something quickly and one thing that scratch is great for is like it's got all the built-in icons and i think that's still a possibility with python it's harder i i think you've hit on something that's very important that instant gratification kid sees a video game thinks i would like to build my own version of a video game with scratch you can do that if you're going to do it in something like let's call it python it's just harder because getting all of the things that make things move or then interact with people and so on that's not what the language was meant for there are certain aspects the language like the library mechanism maybe somebody's done it for you but fundamentally no you don't get the gratification as quickly unless you get your enjoyment by manipulating text in which case it's great i suppose my thing is because i'm not a programmer people have heard the story before about how i failed miserably after a bit of basic but what you know you've written something in something like python can you distribute it as a kid i'm thinking or is that i think the answer is not really you just have to distribute the python program you have to hope that the recipient has a python interpreter compiler uh on site which probably they do or alternately you can probably put it on one of the websites that support python and there's a bunch of those the one that i've been using lately in classes is it's an online version of jupiter notebooks google's collab which i think is extremely useful and you can take people who aren't programmers and get them started doing python by dropping them into an environment which has some of the stuff loaded and then they can start adding their own bells and whistles to it without they can slide into programming without realizing that that's what they're doing and and so i think that environment has worked pretty well for me with people who are basically not very technical and certainly not going to be computer programmers but would profit from being able to use computing in their environments in their day-to-day life one thing to say about the scratch thing is are you are you getting transferable skills there and versus like python where perhaps i think perhaps you are obviously i think i i haven't used scratch enough to know whether it's really transferable some of the ideas do transfer the idea of a loop for example the idea perhaps of a function call the idea of variables that take on different values as program progresses uh the idea of how you make things move all of those things are transferable skills that would go into another language although the syntax as soon as you move into a conventional language is utterly unrelated because you're not sticking together these little boxes um so i think then the same thing might happen with python where you learn how to program to to figure out algorithms data structures whatever in python and then you might run out of you know you might need something that was more robust that ran faster that could be encapsulated into a single executable that we hand to somebody rather than source code and for those things you need to move to a can let's call it a conventional programming language c c plus plus java the skills that you learned in python that and in fact probably many of the actual bits and pieces of the code would transfer relatively straightforwardly into some other programming language so at that point you can you know you've done something you built watermelons to a prototype let's say in python then you can do something more substantial in more you know more industrialized in a mainstream language let's call it c do you think most people do sort of move through different language or experiment with different things or do people find a language learn it and stick with it is that i think it depends very much on what your environment is if you're a professional programmer you probably have a collection of make up a number half a dozen languages which you are comfortable in and you're probably using one at any or two at any given point because that's what your employer uses or in some way that's what your source of income depends on and then something changes and you move to another language and it probably takes you a brief period like an hour or a day or something to get up to speed or to recall what you used to know in the other language or you go to some place completely different and they're using a language you've never tried before let's say rust and you say gotta learn rust okay and if you're if you've done n programming language the n plus first language is usually not very hard to get off the ground and then it probably takes some while to get to be a real solid pro at it but yeah i think the the average programmer has a repertoire of things they're comfortable in a somewhere between half a dozen and a dozen languages and then there are people who collect languages because they're fun i think they want to explore them i have a friend alan donovan who i've worked with on the go book he's one of these guys who just oh there's a new language let's try it see what happens and i i'm not one of those people yeah this stuff but i admire people who can do that so as i'm guessing there's sort of two sizes of learning the idea of programming and then learning the actual nuts and bolts of the language itself yeah right how would you go about choosing the language for a particular task that you need to program ah how do you choose the language well it's like i suggested it may be imposed on you because that's what you do i mean you said you're teaching see it nottingham because that's sort of imposed maybe you're part of the imposition but that that's what you do um if it's a free choice i would think that in many cases that's an opportunity to learn a new language i have something to do and i could learn pick a new language rust haskell whatever uh by trying this thing i want to do in this new language but that's back to sean's question earlier about instant gratification if it takes you too long to do it in this new language then the tendency is to heck with that i want to get the thing done and so i'll use the language i'm comfortable with so just a delicate balance between wanting to do the language but also wanting to get the program to do whatever it is it's supposed to do and so i beyond that i don't know but i guess i would probably pick language where i want to know something more about it for some reason for some people that would be economic like i'm a consultant i could make more money if i knew how to program in node something like that and so i better learn that if your income stream depends on something then you better to focus on what you already know and have control over and understanding of the trade-offs and i guess there comes a point where you realize that it's the wrong language for the job when you have to make that call between i've invested this time in writing this in go but now i need unmanaged memory do i translate it to rust or c and how do you find that balance i honestly don't know i guess that's the sort of thing that comes with more experience certainly than i have this kind of thing talk about long in the tooth we're replaying our lost youth or something like that but why would you use it today and i think the answer is that it's an example of what's the right tool for a job and then once you've factored it you can just do these steps to completely calculate the private key