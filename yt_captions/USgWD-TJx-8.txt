bubble sort in pure CSS okay okay experiment on the web uh 10p part series all right so we're in we're in we're in part nine all right a pure CSS neural network that somehow sounds crazier so it turns out the next article is actually the craziest article that has ever been proposed ever and it's apparently easier hi future flip hey flip you're going to be editing this all right well hey that's weird this guy's kind of uh he loves CSS okay imagine you're in interview and you get asked Can you implement bubble sort and you answer the interview sure do you want that in JavaScript or css what a flex what a flex would that be I yes but which direction is it row or column now I like what you're thinking no interview no interview will be impressed by you creating an animation that simulates bubble sword actually I would be and you would be right no that's not true but what uh if we would create a functioning bubble sort algorithm in pure CSS and add visualizations to it well you have come to the right place instructions there are five values at the top of the root element this is already this is already disgusting okay this is already not okay we are we are in not a good place right now uh these are our unsorted array so the above represents this this is not okay we're we're letting them cook and we're burning down the house and you can change those values anywhere between zero and 20 okay okay all right 0 and 20 classic and then press run in the code pen UI and it will actually sort them for you warning on mobile the last few animations might not play and just go blank on your PC and your fan May spin up it's pretty good that's pretty good this is a limitation of using so many calculations that rely on previous calculations I'm not sure if it runs out of memory or what but I defo pushed the limits of CSS here anyways the warning the warning is out of the way give it a go you may need to press rerun in the bottom animation to if it only plays once okay oh that's bubbling oh we've been bubbling oh we're bubbling oh that's good bubble sorted that was good that was bubble sort for sure beautiful beautiful uh look this is silly I'm not going to do a tutorial but there are a couple of things that are interesting uh getting a booing for V1 V2 is greater one than two step one I don't even know what this means like I look at this like I can understand all the individuals things we're creating a variable that has Min and Max we expect a one for minimum we have a VAR which I'm not sure what this even means is this the VAR value we're getting the VAR value and doing a subtraction and we're getting a Max at the zero Mark with zero being the max okay okay looks complicated but it isn't we are performing The Following operation subtracting the value uh of position two from the values of position one in our array let's call this diff one and two for ease uh find the maximum of diff one and uh two and Z and we do this uh as a way of saying if one is bigger than two we want a positive value if two is bigger than one we want it to return zero let's call the result of this one greater or zero happen if they're the same value you know what I mean do you just like you're rotating them probably on the same value right yeah yeah yeah yeah yeah then we take one greater or zero make sure it is not greater than uh one by using Min so if one greater let's see or zero was six we could reduce that to one but if it was Zero then it would return zero ah okay so we're really getting a booing here oh this is a booing oh this little mini Max thing is truly a booing either we get a zero if it's less than or a one if it's greater than okay okay okay here we go oh no we got it now we don't need to look at that we got this swapping array positions so how do we swap positions in our array boan for a bubble sort to work we need to be able to swap two values if the first value is is larger than the second we can't do any temp variable magic like we would in JS so uh well that is what this is for okay array 1 S1 calculate VAR greater than let's see is two greater one step one multiplied by what a great swap do you guys see this this is way too dank do you see what's happening here because this is a Boolean a Boolean this will either be a one or a zero and this one will be the opposite which will be a zero or a one they will be opposites of each other so either this one's a zero which is multiplied by the value or the other one's a zero which is multiplied by a value so it does a swap it's super smart and so then they just do the inverted inverse over here and look they assign the values right here into new variables so those are like the temporary variables right yet again looks complicated it's actually re uh reasonably simple uh in principle it is they're cooking in an arc furnace they are this is insane uh in our previous functions we created a Boolean to see if one was greater than two so we have either a one or a zero we can easily get the inverse is two greater than this one one minus the VAR of this look at that knot gate the man built a knot gate that is straight up a variable knot gate right there let's go let's go let's go let's go this is actually like genuinely genius this is beautiful the best part is that I feel like this is really understandable the beauty of this is we can now do the following trick yeah this is just swapping out the array right see look you can see that right here see it's saying that it multiplies by zero or by one and then the other one will be inverted hell yeah hell yeah uh NE trick huh if one is greater or two is greater were swapped then it would return the original values all right let's go yep the original values remain the same perfect that is effectively all we need to do bubble sort the only reason we have so much CSS is because we cannot do Loops in vanilla CSS yet by the way please if you're listening CSS don't add a loop you add a loop and you're literally going to make the language insane people are going to write so much there's going to literally be react CSS if you write a loop if there's a loop we're going to have a virtual CSS Dom don't do it we don't need this so we have to manually write out swaps for each stage of bubble uh sort check one yep okay okay That's all folks as I said not a tutorial but I need to introduce some interesting CSS switches and booleans uh that may be useful in some strange scenario serers side CSS incoming please don't CSS form actions uh in a scenario future to you I hope uh you enjoy my silliness now I have to just wait for someone to ask me if I can Implement bubble sorts so I can Flex on them in my CSS silliness dude if you can that'd be so good dude I I fully agree that if someone brought this out in a in an interview I would love it I would absolutely love this this I'm going to be asking people all right you have two you have two options here number one Implement bubble sort or number two you implement this other question which I'll explain Implement bubble sort without Googling or that way in case I inter ever interview this guy I'm ready I'm ready and he's ready and we could do it at the same time and it'll be fantastic this is so good I didn't realize you could do this I didn't realize Min and Max were variables or were functions available in CSS but this makes perfect sense he's just constricting a value and then using it to move things around now here's the real question do you think it's faster than C because I've heard HTML is faster than C so do you think CSS is faster than C my guess is it probably is because honestly either you use CSS or uh squeal and I typically choose squeal over CSS I mean we all know squeal is slower than C but is CSS slower than C I don't even know Linux kernel runs in CSS absolutely okay it's it's honestly it's better than C or C++ plus CSS is my favorite C family language personally it just is cuz I think it's honestly the best it's just the best all right the name is the CSS agent