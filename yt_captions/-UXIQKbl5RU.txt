hello in this episode we're going to be adding the ability to insert points along a segment as well as to right click on points to delete them ok let's begin by looking at deleting points so first of all the idea of deleting a control point by itself doesn't really make sense we'd never want to do that instead we can only remove anchor points and then its control points will get removed along with it so say we do want to delete this anchor point here so this is a point with an index of 3 then we also want to delete points 2 and 4 so I can write this out as a rule which I'll call the default case which is to delete points I minus 1 I and I plus 1 where I is the anchor index now there are of course exceptions to this default case say for example we want to delete this first Anchor Point here this is with an index of 0 well for a open path we'll want to delete it's a single control point as well as the first control point of the next anchor point so we're deleting points 0 1 & 2 I'll write this out as the rule if I is equal to 0 and it's an open path then delete points 0 1 & 2 now what if I make this a closed path and we again want to delete this first anchor point well here it's got two control points so it looks like this is just the default case we just want to delete points I minus 1 I and I plus 1 but if we do that we end up with a problem which is that this control point over here becomes element 0 the first point in our points list and the reason that's an issue is in the code we're relying on the fact that the first point is always an anchor point so what I recommend we do is before deleting and if the points or we take this last point in the list and we set its position equal to the position of the second point in the list and then we delete the anchor point we delete its control point and we delete this next control point so as a rule this could be written as if I is equal to zero and it's a closed path then first set the position of the last point in the list equal to the position of the second point in the list and then delete point zero one and two there's just one last case to deal with which is for an open path when we want to delete the last anchor point so in this example that's the point with an index of nine here we want to delete its single control point so that's point eight as well as this control point here which is point seven so we can write this rule out as if I is equal to the last element in the list and it's an open path then delete points i minus 2 i minus 1 and i all right so i'm going to go into the path class and i'm going to add a new method called a delete segment this will take in an int and current acts and if that anchor index is equal to zero then if it's an open path we want to delete the first three points and if it's a closed path we want to first set the position of the last point equal to the position of the second point and then delete the first three points so we can simplify that a little bit by first checking if it's a closed path and then setting points with an index of points count minus one equal two points then index of two and then remove the first three points by saying points dot a remove range starting at zero with a count of three all right now if anchor index is equal two points or count minus one and this is a open path then I'm going to do point start remove range starting at anchor and X minus two and removing the three after that and then the default case points dot remove range and current x -1 removing three alright now I always want there to be at least one segment remaining or in the case of a closed path at least two segments from ailing so I'm going to only allow a segment to be deleted if the number of segments is greater than two or in the case of an open path if the number of segments is greater than one alright silent close that all in there and then I'll save this and I now want to call the delete segment method from the path editor when a anchor point is right clicked on so I'm going to come into the input and in here I'll say if gooey event dot type is equal to event type dot Mouse down and it is the right mouse button so gooey event dot button is equal to one then I'm going to loop through all of the anchor points to determine which one is closest to the mouse so I'll start by creating a float min distance to anchor and I want to initialize this with some threshold value so the mouse has to be closer than that value to an anchor for it even to be considered so I think I hard-coded the diameter of the handles as 0.1 so I'll put that in a variable later on but for now let me just set this to half that so 0.05 and then I'll have an inch for the closest anchor index and I'll set that to negative one at the start so a sort of invalid index and then I'm going to loop through all of the points so I less than path dot numbers and I incrementing by three so we're just catching the anchor points I'll say float distance is equal to vector to the distance between the mouse pose and path with an index of I and if that distance is less than the men distance then of course we set them in distance equal to the distance and we have a new closest anchor index all right so once that loop is finished we can say that if the closest anchor index is no longer equal to negative one then we have an anchor that we want to delete so I'll call a path and dot delete segment passing in the closest anchor index just before deleting that I want to record it with the undo system so undo top record object passing in the Creator and I'll call this delete segment now I don't know if I mentioned this before but here just like when adding a segment we don't need to request a repaint because repaints are automatically done when a key or mouse is pressed so let's just save this go into unity and when that compiles I'll shift left click to add in a bunch of points here and then I'll try right-clicking on some of these anchor points and see that those get deleted correctly so they make a few more turn on water set control points and the toggle is closed and I'll make sure that this is working as well and okay once we come down to two segments we can no longer delete and the undo functionality is working there as well okay now just as a quick side quest I want to turn this toggle closed button into an actual toggle I'm not sure why I made it a button before so I'm going to go into the path script and somewhere up here I need to have a public pool property so this will be called is closed and in the get block I will return the is closed value and in the set block I'll say if is closed is not equal to the given value then I'm going to quickly come down here to the toggle closed method and I'm going to cut all of that stuff out of there delete the toggle close method and paste that inside of here and just set is closed equal to value all right I'll save that go to the path editor and I'll use same sort of setup here that are used for the auto set control points so starting with bull is closed equal to Q layout toggle passing in a slot is closed and a label just called closed and then if is closed is not equal to the e paths current is closed value then I'll record the object and then set path that is closed equal to this local is closed value all right so can save that and any moment now I should see the button replaced with a nice little closed total okay I know what a lot of points to be inserted into a segment so I'm going to come into the path class and just below the add segment method I'm going to create a new public void called split segment taking an a vector2 for the new anchor position and an integer for the index of the segment that we're going to be inserting that point into okay so we want to insert the anchor along with its two control points after the first control point of this segment so I'm going to say points and dot insert range and the index will be segment index times three plus two so that's after the first control point of that segment then I need to pass in a collection of three points for a to insert so I'll say new vector2 array open curly brackets and for the first control point of this pass in vector 2.0 then I'll pass in the anchor position and vector 2.0 again for the second control point now to actually set the positions of those control points I'll say if the auto set control points is turned on then alcohol auto set all affected control points passing in the index of this new anchor point which is second index at times three plus three and then if we're not using auto set control points we can still use one of the auto set methods to determine the initial positions of the control points but we don't want to use the all effected control points method since that will change the control points of some of the other anchors as well so I'll just use auto set anchor control points to just set the control points of this new anchor so segment index times three plus three all right I'll save that and go into the path editor and up at the top here I'm going to create a constant flute and this is going to determine how close the mouse has to be to a segment for it to actually insert a point on that segment so I'll call this perhaps something like the segment select distance threshold and I'll give that a value maybe of 0.1 and then I'm also gonna have an integer here for the index of the currently selected segment so I'll call this selected segment index and I'll be negative one at the start okay now in the input method just like we looped through all of these points to find the closest point to the mouse we're going to loop through all of the segments to find the closest segment to the mouse so I'm going to start by saying float min distance to segment is equal to the threshold distance and then I'll have an inch new selected segment index I'll set that to negative one by default and I'm going to loop through from I equal to naught I less than path dot number of segments I plus plus get a vector to array for the points in that segment so set that equal to path dot get points in segment of the segment index I and now we can say float distance is equal to and we can use this handy handles utility dot distance point in busy a passing in the mouse position and then they start end and to control points of our Bezier curve so you can get points 0 points 3 then points 1 then points to enough will calculate the distance from the mouse to the base acre for us and now you can just say if distance is less than the in distance to segment then in distance the segment is equal to that distance and the new selected segment into X is equal to I now the selected segment index is only ever going to change if the mouse has actually moved so let's put this inside a if statement checking if GUI event dot type is equal to event type dot Mouse move okay and then at the end of this will say that if the new selected segment index is not equal to the current selected segment index then first I'm going to set the selected segment index equal to this new one and then I'm going to request a repaint with handle utility dot revenge so we do need to request a repaint here because mousemove events don't automatically trigger a revenge okay coming up to this ad segment culture I mean to say if the selected segment index is not equal to negative one then instead of adding a segment we're going to split that segment so I'll call this split segment and make a call to the split segment method passing in the mouse position as well as the selected segment index otherwise we can just add a segment as usual but I only wanted to be able to add a segment if the path is an open path adding segments to a closed path doesn't make so much sense so I'll say else if path dot is closed is false let me just add my exclamation mark that then that should work so I just want to add one little graphical thing quickly which is the color of the segment when the mouse is over it so just before I draw the Bezier curve here and maybe create a color called segment color and using a ternary operator I'll say that if I is equal to the selected segment index and also if shift is held down so if event dot current shift then I want the color to be say colored red otherwise it will be color green and then instead of passing in colors of green here I'll pass in the segment color alright so let me save that you're into unity and it's hope that this works so once that compiles I'll hold down shift and you can see once I come within a point one units of a segment it highlights in red and if I now click there it's actually inserting a segment let me quickly try turning on auto set control points and adding in a couple of points here just to make sure that that's working fine and then let me also try this with is closed turned on and it all basically seems to be working now it's currently not terribly easy to see which are the anchor points and which of the control points and so on so I'd like to add some settings to the path crater to determine the color and size of these various handles so I'm going to go into the path crater script and I'll create first of all a couple of public color variables this will be the anchor color I'll set that to color dot red by default then I'm just going to copy this a bunch of times so I want a control color which I'll set to colored or white I want a segment color gel set to green and a color for the segment when it is selected and not set that may be - color - yellow all right I then want a size for the anchors so say anchor diameter is equal to say 0.1 and then a float for the control diameter as well I'll just make that a little bit smallest 0.075 perhaps and then I also wanted a bool to say whether or not to display the control points and I'll set that to true by default then let's save that go into the editor and I'll replace this with crater dot selected segment color and this was crater dot regular segment color and then we need to change the color of the points depending on whether or not it's an anchor point so if I mod 3 is equal to zero then I'll set it to crater dot anchor color otherwise created control color and also create a float handle size so here if it's an anchor point then this will be create a dot anchor diameter otherwise crater Dodge control diameter and can pass in the handle size here and now I only actually want to draw the point if either it's an anchor point so if I mod 3 is equal to 0 or if we are displaying control points like so okay now I do just want to come up here to the input and replace this hard-coded value with crater and dodge anchor diameter multiplied by 1/2 I've actually forgotten one thing which is that when we're drawing these lines going to the control points we only want those to be visible if we're actually drawing the control points so I'll put that in a if statement as well if create a dot display control point okay let me save that go into unity and when this compiles we'll get a bunch of stuff over here so we can set the sizes of all of these which is nice and of course we can muck around with these colors as well and decide if we want control points to be displayed or not there's one very last problem that I'd like to resolve which is that if we research this path creator then the path disappears and if I try adding a point I get an error here so I'm going to come into the path crater and create a void research which is called automatically when that reset option is pressed and here I'm simply gonna call create path now it's a bit of a problem in that in the path editor this path variable won't be set to that so I'm going to turn this variable into a property and in the get block it's just going to return create a dot path all right so that just means you have to remove all instances of actually setting the path equal to create a type path I think they're just two of them so one down somewhere here all right and it's complaining about the naming convention here and just rename this to be a capital P ooh okay yeah let me save that and go into unity and now if I research everything works fine okay so that is actually the end of the editor part of this series in the next two episodes we'll be looking at two examples of actually working with the curves but yeah that is it for now so until then Cheers