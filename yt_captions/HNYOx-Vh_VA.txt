Hey everyone, I'm James Murphy. And you're watching mCoding where we try to take credit 
 for the achievements of the compiler. Today we're talking about what I consider 
 to be the most important C++ compiler optimization. It helps your code go so fast 
 it would make Sonic the Hedgehog jealous. This optimization is so important 
that all major compilers do it, even in O0 mode. Yes, common misconception, 
 O0 doesn't turn off all optimizations. Just most of them. For example, just returning 
 the sum of two literal constants, the compiler will still just compute 
 the answer even at optimization level zero. This is called constant folding and it's also 
 important but not the most important, in my opinion.   My vote goes to return value optimization. Otherwise known as RVO and/or Copy Elision. Here we have a simple 
 struct S that just contains an int, But it also prints to standard out 
 whenever you construct it or copy it. In main, let's just construct an 'S' 
 and then print out the x data member. There we go, construct S of 21, 
 then the answer is 21. Now, what if instead of directly 
 constructing S, we got it returned from a function? Functions are incredibly important. They're the building blocks of abstractions that allowed the early greats of 
 programming languages to ascend above the spaghetti code and write code that other 
 people can actually understand. Surely, pushing the construction of S 
 inside a function won't slow down my code. Otherwise, there would always be that 
 incentive to devolve into our primal spaghetti nature.   And indeed, no change, 
 even at optimization level zero. But in fact, that's only because return 
 value optimization is still turned on even at O0.   So let's manually turn it off. We do that with this '-fno-elide-constructors' flag. And now we see copy, copy. Not just one, but two copies of our S. And if we had a more complex stack
 of operations to put this object together, say 'make_double_value' calls 'make_value'. Now we see copy, copy, copy, copy. That's four copies, Two new copies every time we try to return our struct.   Get rid of that flag. And again, they disappear. Now, this is just a simple struct. Copying it is just copying an int. But still, four copies to return it up two levels. And imagine if this is how it was for all of your code. Strings and any other objects 
 containing real data would be basically unusable, forcing you to pass pointers or 
 references instead for anything but trivial data. That would be annoying because 
 pointers are a bit trickier than just values. And also referencing everything through 
 pointers means paying for dereferencing all over the place. not to mention the 
 slowdown from all the memory allocations needed to get the memory underlying all those pointers. But luckily, that's not the C++ world we live in. In our world, no copies. I hope that convinces you of what this 
 copy elision can do for us in terms of performance. But now, what exactly is it doing? Where are all those 
 copies coming from in the first place? And why are we allowed to get rid of them? Okay, we've got four copies 
 here. Where are they all coming from? We call this function. That calls this function. That ultimately constructs the S. The memory for this 
 temporary S is allocated on the stack in the space made 
 available for the 'make_value' function. At the call site, we need space 
 for another S, the return value of that call. The return value is another temporary. Its space is allocated on the stack made 
 available for the 'make_double_value' function. So basically, we need 
 to copy it from here to here. But we don't want to just throw away the value. We want to store it in this variable S. So we need to make another 
 copy from this temporary into this little s.   When we return our little s, we make 
 another copy into the return value at this call site. Which we then copy again into this little s. Return value optimization and copy 
 elision allow us to get rid of all of those copies. But at this point, 
 something might feel a little bit off. My constructors had print statements in them. So copy elision isn't just 
 making more efficient assembly code. It's changing what my program does at runtime. If I made 'Hello World', the 
 compiler can't just remove my print statements. And say, "Oh yeah, I made your 
 code faster by just not printing Hello World." The print statement was part of the program. You can't just remove it. But clearly, copy elision is 
 removing my print statements. And that's because return value optimization and 
 copy elision are blessed by the language. These optimizations are so 
 important that in the standard that defines C++, it specifically states that "the compiler is allowed and sometimes even required" "to omit calling a copy constructor" "when returning from a function 
 or when copying from a temporary." "even if the copy constructor has side effects" "like printing, setting a global variable, and so on." This is why you should not use your copy constructor to do anything besides copy. Because it might not happen. And it's why you should use 
 the copy constructor to make copies. Because if you write your own copy function, it can never be as efficient as a copy constructor. Because the compiler may not be 
 allowed to get rid of calls to your copy function. So in short, be careful. But copy elision is awesome. It lets us just return things by value and still go fast. So in what situations is the 
 compiler actually allowed to do this? Well, this is C++ I mean, if you want the 
 real correct answer, it's complicated. You need to know all about value categories, 
 prvalues, xvalues, glvalues, which I'm not going to cover here. But I can give you a rule of  
thumb that's correct in a lot of situations. Basically, the compiler is allowed 
 to do copy elision in a return statement. Or when initializing from a temporary. If the types match, so 
 no conversion is required. And it can uniquely determine 
 where the memory should end up. For example, where should 
 the memory for this S of x live? Well, it's just immediately constructed and returned. So instead of living in the stack 
 space for this function, why don't we just put it 
 in the stack space for its caller? This is the situation that's 
 technically referred to as 'Return Value Optimization'. And where should the memory for 
 the temporary of this call go? Well, it's being immediately used 
 to construct another S. So let's just put it in that space. And where should the space for this S live? Well, we always return that S. So why don't we just make 
 it live at wherever its caller is? And where should its caller live? Well, once again, that temporary 
 value is just being used to initialize another S. So let's just put it in the storage for that S. That S is never returned. So 
 its space just lives in the space for main. So when these are created, all five of these 
 are directly created in the space for this S in main. On the other hand, take a look at 
 this example where we can't get rid of the copy.   Here we make two S's. And then depending on whether x is 
 positive or negative, return one or the other of them. Could we just put the memory for s1 
 at the spot of where the return value goes? No, we can't do that because we might return s2.   And just the same, we can't put 
 s2 there because we might return s1. So the memory for this s1 and s2 has to live here. It can't be pushed up to the caller. That means whichever one gets 
 returned, it has to be copied into the caller's memory. On the other hand, here's an unexpected 
 situation where it can actually go the other direction. This time we put the print 
 inside a function and pass a temporary. Where should the memory 
 for this temporary in the caller go? Just construct it directly into 
 the space for this function parameter. No copy. Copy elision can also happen when you 
 throw or catch an exception and inside coroutines. But I'm not going to talk about those. As of C++17, in some instances like this basic 
 case of return value optimization, eliding the copy is not even a choice anymore. It's not an optimization 
 the compiler is required to do it. In these required cases, this "not copy copy" 
 can happen even when the copy constructor is deleted. That's right. You can return something that's not 
 even copyable like a unique pointer or a mutex by value. And this is allowed because in 
 C++17, technically the copy was not elided. Technically, due to this guaranteed return 
 value optimization, it was never there in the first place. As you can see, in C++11, 
 when I try to return this S of x by value, since the copy constructor is deleted, it's not allowed. But in C++17, due to 
 guaranteed copy elision, there was no copy. The S that's being returned is 
 directly constructed wherever it needs to go. You can even write what looks like a 
 bunch of manual copies, and it doesn't matter. All of those copies are required to 
 never exist in the first place because of this. Because of this, you would have 
 what I might call a language lawyer say that return value optimization in 17 and 
 onwards is technically not copy elision. Because the standard defines 
 that there was no copy in the first place. But colloquially speaking, 
 no one's going to be confused if you say that return value optimization is copy elision. Everybody knows what you mean. Now until now, I haven't 
 said anything about move operations. If you know what those are, and yes, 
 copy elision works in a similar way for moves. The compiler is allowed and 
 sometimes required to get rid of moves. But honestly, me just listing out more cases 
 at this point probably isn't going to do a lot of good. So what I recommend is to 
 just open up Compiler Explorer. And try a bunch of cases for yourself. Hopefully, now you agree that return 
 value optimization and copy elision are awesome. Without them, C++ would be much, much slower. Thank you for sticking 
 around to the end. That's all I've got. If you especially enjoy my content, please do consider becoming a patron or donor. And don't forget to subscribe. And of course, don't forget to 
 slap that like button an odd number of times. See you next time.