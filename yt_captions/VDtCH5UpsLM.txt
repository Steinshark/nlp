this is Magnus Carlsen a Norwegian chess Grand Master and a reigning five-time world chess champion Magnus Carlsen has reached the level of expertise with chess but in this game he is being shown board positions from previous chess games he's able to recall which game the position belongs to from memory I'm sure you've seen this opening before against the butter and wherever I used to watch this I would never understand how anyone can have such incredible memory so you might be thinking to yourself well that's cool but what does this have anything to do with coding the principles that these people apply to their crafts are actually the exact same principles that can be applied to learning to code your brain is actually really good at learning things but sadly most people don't know the right ways to allow you to brain to learn things as efficiently as possible and sadly even at schools the wrong techniques are often encouraged that is why for the past literally months I've been studying the human brain I've been studying psychology I've been reading books I've been listening to podcasts about specifically the topics of how can we maximize our brain's ability to learn things as fast as possible and through these I have learned four key principles that I want to present to you in this video number one deliberate retrieval with effort number 2 practicing multiple contacts number three frequent testing and number four timely accurate feedback so in this first section we're going to dive into each of these principles in turn I'm going to describe the science I'm going to describe why these principles work and why these are the things that you need to be applying to your Learning Journey after that I'm going to describe how I specifically use these in my own process every single day whenever I'm learning anything related to coding and how I'm able to use these things to master really complex topics surprisingly fast firstly we need to change the way we think about work and making progress the only type of work that produces results is something called deliberate practice what this means specifically is a couple of things number one working without distractions you shouldn't have your phone around you for any reason when you're working like your phone does not belong in the same area as you when you're supposed to get worked out because the thing is if you get distracted for even two seconds you can take like literally reach sure to show that it can take up to like 15 minutes for your brain to get back into focus and being able to be in focus for long extended periods of time is the type of work that actually induces your brain to really make productive progress you need to always be working at the edge of discomfort Comfort does not create results thinking takes effort solving any difficult Problem by definition takes effort when you actually learn something what actually happens is your brain is actually sort of lazy what it does is when you learn something new it seeks to make doing that thing again automate it so that next time when you do something you no longer have to produce effort because your brain doesn't like doing effort so that is why whenever you repeatedly do something at the level of discomfort your brain will seek to create connections inside of it to then make that process automated the next time in general there's two kinds of things you can do when you learn it you can be injecting information or you can be retrieving information most people and schools and all that focus on the injecting of information part but the thing is whenever you're taking information in the information is just being placed sort of in a staging area like a short-term memory where in a very short period of time it's just gonna be lost the only way for that information to be Consolidated is to try to retrieve it out of your brain because the only way to tell your brain that something is important like important enough to expand resources to build Connections in your brain is to retrieve it out of the brain when you're telling your brain constantly to retrieve some beautiful information that is telling your brain that this is something that we need to learn is going to make using that and retrieving that information again automatic which is exactly what we want and is exactly what expertise really means specifically in the domain of coding what this really means is just coding a lot building a lot of varied different kinds of projects where every project that you build should be teaching you something new so then you don't already know how to do again being at the level of discomfort building projects this way also has the added benefit of building a very buried portfolio with different kinds of projects that you can then show to potential employers when you're applying for jobs and to Showcase these projects to employers you want to have a portfolio website the hosting service that I use for my personal website is hosting it who are also the sponsor of this video those thing is the world's fastest growing web hosting company I personally love using hostinger simply because the setup process is just so easy and using and managing my website through the hpanel dashboard is just so intuitive and so simple basically to get started you just sign up and you have this onboarding questionnaire that asks you what kind of website you want to build then you can choose from the big library of templates to get started mine is WordPress based which is really excellent because hosting is so incredibly well integrated with WordPress for example here we have all my websites if I click on manage I basically have access to everything I need through this minimal interface like access to my WordPress editor and malware scanner and much much more for all the features I get hosting it is honestly the best value hosting service that I have ever seen for example with the Premium plan you also get a free domain for your website like I have with my internetmatecorder.com domain so if you haven't already I highly recommend you go check out hosting and if you do it from the link below and you use my code internet make code at checkout you can get an additional 10 off on top of all the ongoing offers they already have and that's still not all because currently they actually have a Black Friday discount going so with all of these plus the Black Friday discount you can get up to 91 of your premium subscription which to me is just insane value because you're gonna need a portfolio website anyway so you might as well do it and if you don't know how to actually build yourself a portfolio website I actually made a full tutorial I'll put the link to that or the description down below and with that thank you for hosting it or sponsoring this video and let's move on to principle number two whenever you learn a concept don't just apply in one context so in one type of example let's say you're learning graphs and you learn to apply graphs to the context of understanding how people are related through their friendship connections like in a social network for example that's one use case for graphs but if you just use graphs in this one use case your brain only learns to apply graphs in the use case of friendship connections or social networks so then if you have a problem of solving something related to map the best way to represent something like that with a computer is also using graphs but if you've never seen graphs in enough context your brain is not going to understand the underlying utility of graphs that allows that concept to be used in this example as well and by practicing Concepts through many different examples you learn the fundamental principles that problem solving with coding is really all about at the end of the day just become a really good problem runs over in general rather than someone who has just memorized some examples and some particular kinds of problems you might be good at solving those particular kinds of problems but that's not what makes for a good programmer the third key principle Is frequent testing and specifically what I don't mean by frequent testing is rereading or re-watching tutorials and again unfortunately this is a strategy that is that is encouraged at school we are sort of taught to think that as long as we read the textbook three times we're going to understand it three times better like science has shown that this is an extremely ineffective and inefficient way to learn sort of going back to what we discussed in the beginning you have injecting of information and you have retrieving of information based on that what do you think is actually the correct way to go about frequent testing exactly testing like you're taking the information you're trying to take the information out of your brain on a frequent basis that is when you're reminding and telling your brain that hope this information is important you better not remove those connections you better keep them there because you don't want to expand effort to you your brain developed to be good at doing things that are important for survival and even though coding might not be important for survival you can sort of trick your brain into thinking that is super important by constantly exposing it to the discomfort of having to solve coding problems and so the only problem with this is that with coding there are so many different things that you need to be learning so how do you make sure that you prioritize telling your brain to keep the connections for the things that are actually most important well there's actually a really easy way to do this for like you just have to figure out what is the area of programming that you want to work in and then just make sure you focus on building a lot of projects on the kinds of projects that you actually want to do because then when you do that you're naturally going to keep repeatedly testing the things that are important in that area like for example I'm a back-end developer even before getting my job I knew that I wanted to be a back-end developer so that project I kept working on web back end related tool naturally I kept on repeatedly testing the skills that are actually important for backend development sure this might mean that my CSL skills are a bit Rusty now but that's fine because as a back-end developer I don't need to be good at CSS just by repeatedly building projects related to the things that you are interested in again remembering to be at the level of discomfort is going to ensure that you frequently test the things that are most important the fourth principle is timely and accurate feedback and luckily with coding you sort of get this automatically because whenever you code something and you run it if it works you know that it works and if it doesn't work you're gonna get an error code which is going to describe to you where the error is and then you can Google it then you can figure out how to fix this error with a lot of other things like for example when I apply the same principles to learning Germans or human language I need to be a lot more deliberate about getting timely and accurate feedback by for example speaking to German in German for example he gives the sort of thing feedback is not as built into the process as it is recording but obviously when you're just building your projects on your own you don't necessarily get feedback on like the quality of your code that is why the best way to actually keep learning is to get a full-time job and to actually work with teams so with these core principles in mind what is the actual process that I use to master difficult quality concept but if you just look at it first of all I learned something so you might say that this goes against everything I just said about not focusing on injecting information but at the beginning it is still useful to sort of get a head start by actually watching a tutorial learning something theoretically in a course so then you can go and immediately apply it much faster so the second part of understanding both consists of really thinking about it how to make sure I actually fundamentally understand what is going on in the second part of understanding is immediately applying it and like actually coding up the thing I'm learning essentially I'm demonstrating to myself that I've understood it by actually doing it myself rather than just watching someone else do it the third bar which might sound the most confusing one is to wait and to explain this if you learn something now even if you apply it it's still not fully Consolidated into your printing I think I read somewhere that he actually takes up to like 24 to 48 hours for your brain to then consolidate that information into its long-term memory and to build those connections that's why getting really good sleep is actually really important this might sound like boring advice but it's actually like crucially important because during sleep and during rest is when these connections are actually being built so I will intentionally wear it and even intentionally sort of forget what I learned so that then after like a day or two I will then try to retrieve it again and I will have to work so much harder to retrieve the information now essentially it's been removed from my short-term memory but it's sort of being Consolidated into my long-term memory so that with effort I can retrieve it this is the stage I will then execute so apply it into something a bit more complex or maybe this might mean at the end of doing some course on react or something I will build something bigger where I will then apply all the things and so all of this if you look at it it can be a bit of a grind yes but the difference between successful people like chess players successful athletes and successful programmers from unsuccessful chess players athletes unsuccessful programmers is that successful people are willing to make the sacrifice to do the boring work even when they don't feel like it so the reason why Magnus Carlsen is such an expert at chess the reason why he's able to literally memorize chessboards just by looking at them is because since he was like seven years old he's been playing chess every single day your brain is literally designed to build the connections to build the patterns the metal models to make you a good programmer if you're just willing to do the hard work but once you do the hard work and you sort of start to see the fruits of your labor what you'll find is that doing the hard work and doing the boring work can be the most fulfilling thing you ever do thank you for watching this video so this and many of the other topics that I talk about on this channel are obviously not only applicable to coding so that is why I have actually started a second Channel where I talk about primarily entrepreneurship and YouTube and sort of the general success and life principles that I learned from all the books I read and all of that that I apply to my life in general rather than being constrained in to the domain of coding so if you're interested in that definitely go and check it out and subscribe if that's something that's interesting to you if not that is completely fine absolutely nothing is changing on this channel so with that I hope you have a wonderful day I hope you got something out of this video if you did I would appreciate a like in this video because it tells me that you found this useful and that I will see you next time [Music]