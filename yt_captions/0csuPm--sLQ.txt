how's it going guys in today's video we're going to be learning about an encryption method called rot13 which essentially just means we're going to rotate the Alphabet by 13 places hence the name Rod 13 or maybe you can even say wrote 13 for rotate 13 places anyway our script is going to look like this it's going to prompt the user to enter some sort of message that they want to encrypt such as this is a message of course I'm creative as always and as soon as we enter that it's going to encrypt it using the rod 13 encryption and obviously we want to make sure that we actually encrypted it correctly so we also will create a way to decrypt it and that's why you see the decrypted message immediately under the encrypted message anyway I'm going to be showing you two ways you can create it the first way is going to be using vanilla python or actually both of these ways are going to be using vanilla python but the first one is more of a manual implementation then I'll show you you the one that only takes maybe two lines of code so first of all let's import string because we're going to have to use these symbols and characters from there next we need to create a translator and I'm going to call this Rod 13 translator and that's going to return to us a dictionary now first we want to get all of the lowercase characters and that's going to be of type string and to save time we're going to type in string Dot ashy lowercase and that's going to give us the lowercase alphabet which consists of 26 letters and we're going to do the same thing for uppercase so uppercase Ashi uppercase then we're going to create a variable called shift of type integer which is going to be the amount of places we want to shift this alphabet and with that we can also create our shift so first we need to shift the lowercase symbols which is going to be of type string that's going to equal lowercase at the index of the shift onwards Plus lowercase at the index of everything up until that shift and we can actually print this out real quick so I can show you exactly what we did there and right now it doesn't return a dictionary obviously but if we were to run this Rod 13 translator I'm going to insert that into if name is equal to Main you will see that we're going to get this alphabet back and when you see this the first thing that should come to your mind is Rod 13 because it starts with NOP and ends with KLM which means we rotated everything 13 places so a actually starts 13 places in anyway we did that for the lowercase and we also need to do that for the uppercase so we will duplicate that and say shift underscore uppercase and of course we need to change this to uppercase and this one also to uppercase and immediately below this we're going to create a translator and that's going to be of type dictionary which is going to take the string and with this we're going to use the make translation method so make trans and first that will take the lowercase plus the uppercase and we want to map that to the shift lowercase plus the shift uppercase and at the end we're going to return this translator and it was as simple as that so now every time we insert a letter or a group of letters it's going to map each one of those to the shifted version next we're going to create a function called Rod 13 which actually performs the operation so that's going to take a message of type string and it will return to us a string then we're going to create a table of type dictionary which is going to equal our rot 13 translator since that will give us back a dictionary which we will use as the table and we want to return the message dot translate and inside here we need to pass in the table and that will Cipher and decipher this message and I probably should have mentioned this earlier but Rod 13 is perfect for the English alphabet or any language that uses the standard 26 letter alphabet because 13 is the perfect midpoint for that which means we do not need to create an additional method to decipher our message it's going to rotate it 13 places which means we can use the exact same method to decipher what we just ciphered so if you want to create this for your own native language you're going to have to get a bit more creative and do a quick Google search on how you can decipher the message that we're about to Cipher anyway now let's create our main function and inside here we're going to create some user input so they can insert whatever they want and that's going to take the input that says your message and first of all we're going to have an encrypted message so n Cryptid I can never spell that message of type string and that's going to equal the rot 13 with our user input and once we execute this function we can print the encrypted message and just to make sure that decrypting it also works we're going to create something called decrypted message of type string which will equal raw 13 once again with the encrypted message inside then we can print the decrypted message just like that and that was the manual implementation of Rod 13. if we want to test it out we can just type in Main and run our script now we can type in anything we want such as hello world and it's going to encrypt it and then decrypt it now let's look at the alternative that saves us from writing this entire mess so I'm going to remove all of that and everything inside here and instead we're going to import codecs and I actually learned this approach from a user in the community section on this channel so thanks to that user but what we're going to do here is import codex and then we're going to create a variable called encoded which should be of type string and now we can type in codex dot encode and we want to encode the user inputs with the rot 13 encoding and then we can print encoded now we can run the exact same script and we can say the exact same thing and it's going to encode it using the rod 13 encryption so codecs is pretty powerful I might actually do a video on that so I'm going to look more into it because it's absolutely brilliant that we can save so many lines of code using a simple module but it was still nice to understand how Rod 13 actually worked under the hood and to decode we can do something quite similar we can say that's equal to codex dot decode and we're going to pass in encoded with the rod 13 encoding now we can print the decoded and once again we can say goodbye and it's going to encrypt it and then decrypt it just like that anyway that just about covers everything I wanted to talk about in this video do let me know in the comment section down below if you would like to learn more about encryption I would love to make a few videos on it but with all that being said as always thanks for watching and I'll see you in the next video