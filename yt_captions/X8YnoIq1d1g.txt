hello the fourth task in the sliding blocks project is to get the blocks to move smoothly from place to place only one block should be able to move at a time so if the player clicks quickly on a bunch of blocks they should all just wait their turn so to implement this i'm neatly onto the block script and i'm going to create a kuru teen it's alright iron numerator and i'll call this something like animate move let's see were taken a vector two for the target position and a float for the duration of the movement i'll then start by recording the initial position in a vector two so i'll set this equal to transform dot position and also create a float percent starting at zero and it's just how fun to the movement we are so at 1 the movement will be complete I'll just say wild percent is less than one I can increase percent by time.deltatime divided by the duration all right it's then as simple as saying transformed a position is equal to a vector to develop between the initial position and the target position with the percent as our value there and then we can just say yield return null so that it weights a frame between each iteration of the while loop alright we're now just need a waist who conveniently call this from the puzzle class so I'll just make a public void cold move to position taking in vector to target position and also throat duration let's were to say start co-routine animate move passing the target and duration parameters okay so i'll save that go into the puzzle script and now instead of setting the block to moves position directly I'll just say block to move dot move to position passing in the target position and a duration I'll just say point three maybe okay let me save that and give it a quick try so these are now although smoothly but of course if I click on a bunch of these in rapid succession you can see them overlapping because they're all trying to move at once so let me go into the script and up at the top here I'm going to create a queue of type block chuckle my inputs and then I'm going to just cut all of this stuff out of the player move block input method and replace that with inputs dot NQ blocks remove so just adding that block to move to the end of the queue and then I'll make a new method called simply move block taking it block block to move and I'll paste in that movement code okay now I obviously need to know when a block is finished moving so in the block script and groove just copy this on block pressed event and rename this on finished moving I'll take out the block parameter since you don't really need that and when the animate move co-routine is finished running I'll just say if the unfinished moving event is not equal to null then I will invoke it back in the puzzle script can then have a method which I'll call simply unblock finished moving and up here I'll subscribe it to the block dot unfinished moving event by saying plus equals unblock finished moving okay so now I want a rule to keep track of whether or not there is a block that's currently in movement so block is moving and whenever we move a block I'll set that to true and when this method is called I'll set block is moving back to false when the current block is finished moving I'll want to see if there are any blocks waiting to be moved in the input queue so I can say move block passing in the next item the CUSO inputs DQ but of course inputs could be empty and also the next item in the queue could be an illegal move in which case it won't actually move the block of course so I'll put this in a while loop saying while inputs count is greater than zero and while no block is moving so now if this is empty then it obviously won't be called and as soon as a block is successfully set in motion then the while loop will also terminate now this is all good but of course if there's no block currently moving when the player clicks on a block then this co-chair will never actually get called so I'm going to put this in a method of its own I'll just cut that out there and make a method called make next play a move paste that in and so in this player input method can immediately try to make the next player move and when the block is finished moving we can also try make the next player move okay last thing that I need to remember to do is just to actually initialize this input skew shall do at the bottom of the correct puzzle method just set this equal to a new cue I'll write another unity press play and we should see that if I click on these rapidly they all wait that time to be moved I should definitely turn down the move duration a little bit but it's basically looking good okay your task 5 is about shuffling the puzzle so you should be able to say how many moves you want the shuffle to take and then press some sort of input to say the spacebar and it should do its thing all right so in to shuffle the blocks I'm going to need a reference to them so let me create a two dimensional block array I'll just call blocks and I'll initialize that over here blocks is equal to a new block array with size blocks per line blocks per line and then I'll just add each one to the array after I've initialized it so blocks with an index of X comma Y is equal to this new block okay I'm going to have a method called make next shuffle move and in here I just want to pick a block that is above below or to the left or right of the empty block and try and move that so I'm going to start by creating a vector 2-inch array called offsets and I'll just initialize this with a new vector to int 1 comma 0 so that's to the right and then let me just copy this and paste it three times so I can then have negative 1 comma 0 for left 0 comma 1 for above and 0 comma negative 1 for below I'll then create int random index is equal to random dot range between 0 and the number of elements in the offset array I'll now use this random index to get the offset that I want from the offset array so offsets with an index of random index and then I can say that the coordinate of the block that I want to move so move block coordinate is equal to empty block dot coordinate plus the offset now of course this move block coordinate might be out of bounds for example if the empty block is at the top edge of the puzzle and we try get the block above that so let's do a check if move block coordinate dot X is greater than or equal to zero and move la coordinate X is less than a number of blocks per line then we're okay on the x-axis and we just need to do the same check on the y-axis will block coordinate of y greater than equal to zero and move block coordinate y less than blocks per line okay so if that bounds check succeeds I'll call move block and passing the block with an index of move coordinate X comma move coordinate dot Y if the move block coordinate is ultra bounce however I don't just give up but rather keep trying until find an offset that works so I'm going to put this code inside of a for loop going from I equals 0 to I less than offsets dot length so let me paste that in here and for the index I mean she say random index plus I and I don't have to go out of bounds so I'll just loop that around by saying mod offsets dot length as soon as I've moved a block though I want to break out of this loop so I'll just add break okay let me go up to the top and create a public int I'll call the shuffle length set that equal to say 20 by default I'll also need an in somewhere to keep track of the number of shuffle moves remaining so they make shuffle moves remaining and then I'm just going to start shuffling when the spacebar is pressed so I'll create an update method here and say if input key down key code got spacebar then I'll call a start shuffle method which I'll create somewhere down here void start shuffle and this will just say shuffle moves remaining is equal to the defined shuffle lengths and then make next ruffle move after this initial call I'll one subsequent calls to be made from the unblocked finished moving method so here I'll just say if the number of shuffle moves remaining is greater than zero then I'll make the next shuffle move and inside shear when I move a block I'll say shuffle moves remaining gets decreased by one all right let me save and see how that's looking so I'll press spacebar and I see that it's not getting very far before stalling so the reason for that is that it's referencing these blocks at a certain coordinate but when I move the blocks their positions in the array on being updated so let me go to the move block method and here I just want to say blocks with an index of block to move and chord by block to move Kauai is equal to the empty block and then blocks with an index of empty block to coordinate X and empty blocked a coordinate of Y is equal to the block to move so just swap their positions in the array okay should have more success this time so I press spacebar and it's shuffling nicely but the one kind of silly looking thing is when they shuffled back and forth and preferably that would never happen so let me create a vector to end up here and I'm going to call this the previous shuffle offset and now in the make next ruffle move method when I get my offset I'll say if this offset is not equal to the previous offset multiplied by negative one because obviously having moved the block all and I'll be on the other side only in that case will I move that block and then when moving a block I'll just set previous shuffle or set equal to the offset all right another thing I quickly want to adjust is the speed of the block movement so I'm going to have here public float which I'll call default move duration set that equal to maybe point two but then I'd also like to define an even shorter duration to use when it's shufflings that you don't have to wait so long for it to finish so I'll create a public float shuffle move duration set that equal to maybe 0.1 and now I'll have the move block method taking a float in duration and it'll pass in that duration over here and now when I'm calling move block from the make next play a move method I'll pass in the default move duration but from the shuffle move method i'll of course pass in the shuffle move duration instead okay so if I save that press play I can get the shuffling and that looks good now I don't allow players to click on blocks while the shuffling is going on because that could seriously screw things up so I'm quickly going to make a UNAM which I'll call the puzzle stage and the puzzle can be in one of three states it's solved or it's shuffling all the player is busy working on it in which case I'll just call it in play all right I'll then have a puzzle state variable called state and this will default to the first value in the enum so it will be solved from the outset now I think I'm only going to allow a shuffle to begin when the puzzle is solved so I'll say if state is equal to puzzle state dot solved and obviously the space key is pressed then in the input method I'll just make sure that the state is equal to puzzle state dot in play in order for the input to be accepted and should take this into account in the unblocked finished moving method as well so only make next player move if state is equal to state or in play and only need to worry about shuffling if the state is equal to puzzle state shuffling and if shuffle moves remaining is no longer greater than zero then obviously leaving the shuffle state and transitioning to the in play state alright last thing I need to do is just say he inside the star shuffle method state is now equal to puzzle state dot shuffling okay we can now move on to task six which is the final task and here the goal is just to get the hidden block to reveal itself once the player completes the puzzle okay I want an easy way of checking if a block is that it's starting coordinate so I'm going to go into the block class and create a vector two inch starting coordinate and in the initialization method I'll say this dot starting coordinate is equal to the given starting coordinate and then I can have a public method returning a pool called something like is at starting coordinate and this will just return whether or not the current coordinate is equal to the starting coordinate okay so going into the puzzle script I can somewhere have a method check if solved inhale simply loop through all of the blocks so for each block Block in the blocks array if any of the blocks is not at it starting coordinates if not block dot is that starting coordinate then obviously the puzzle isn't solved so I'll just return from the method but if I get through all of the blocks without returning then the puzzle is solved so I'll set state equal to puzzle state dot solved and I'll reveal the missing piece with empty block game object dot set active true okay now if the player shuffles again then I want the empty block to once again be hidden so in the start rifle method I'll just say empty block game object that set active false and since I'm hiding it in there I'm not only going to hide it in the crate puzzle method so I'll just remove that line there the only thing left to do now is to call the check of salt method whenever a block finishes moving so I'll come down here and just say check if solved all right so let me save that and test this out so I'll give this a shot and I'll speed up the video while I solve this but once the last piece falls into place we should see the missing piece revealed one final detail is that if I actually build this project you can see all of the blocks come up pink and the reason for that is that in the block script I am setting the shader over here using shader dot find unlit texture but unity is not seeing that shader being used anywhere in the project and it's currently not smart enough to look for references to shaded find in the scripts so to save space it's leaving that shader file out of the final build which is why the materials are coming up pink so I'm going to work around this by creating a resources folder and as you may know everything inside the resources folder will be included regardless of whether or not it's actually used in the project so here I can create a material just call this my block material and I'll set that to a shader under texture and this will now work fine because you know she is forced to include this unlit extra shader in the final build because the block material references that now it does feel kind of weird just having this block material and it not being used so even though this isn't entirely necessary I'm going to replace the shaded out find with resources load and I'm gonna load a material with the name of block all right I'll save that and the project is now complete so I hope you've enjoyed this little programming practice series and until next time Cheers