recently I learned that python actually has a way of defining literal types which are also known as value types so what I'm going to be showing you in this video is how to use the literal type so to get started we're going to import from the typing module both the type Alias and the literal and right below we're going to create something called a mode which is going to be a type Alias so we're explicitly telling python that this is a type Alias and we're just going to assign it the type of string so mode is now considered a string next pretend we have some function that's called open file and it takes a file of type string and it also takes a mode of type mode now if you've been programming in Python you'll notice that this is very similar to the syntax we use when we're using with with open file name in some sort of mode so practically we're doing the exact same thing and whatever happens we want to return a string so next we can return that we are reading the file in and quotation marks mode mode so this will simulate us reading or doing some sort of operation on the file next let's try to use this so here we'll type in open file and we can say indently dot txt in read mode and that's going to work perfectly if we actually print this you'll see that we will get back that we are reading indently.txt in our mode and that works fine but let's duplicate this and let's insert something random such as T now as far as my understanding goes there's no such thing as reading something in t mode but the code editor is not going to give us any warnings and of course we're probably going to find out the brutal truth as soon as we run the program that he's not a valid reading mode anyway there is a type that will prevent us from passing in an invalid literal because right now I just defined the mode to be a string which means any string would be valid but what we really wanted to do is use the literal type and here we can Define the value types that we want to accept for example there is read mode there's write mode and we can even type in something such as append immediately you'll see that we are going to get the syntax highlighting for the second file that we're going to open because T is now considered an invalid type as you can see we expected a literal with r w and a but we got a literal of T instead so now the code editor will tell us if we're passing in something that doesn't make sense for example if we pass in P we will get some syntax highlighting if we pass in zero we will get some syntax highlighting but if we pass in a literal that actually makes sense we're not going to get any more syntax highlighting because we passed in the correct type and going back to the with open with open itself does not have this feature I wish they would add it to code editors because that would be quite cool to catch before running the program if I insert something random such as M just by accident it would be cool if the code editor would warn me and I personally don't really know why open doesn't have it but I really do enjoy that we can Define it for our own functions because I think it's super cool that we can get some warnings back for passing in invalid literals anyway I would love to hear what you think about this typing feature in the comment section down below but otherwise with all that being said as always thanks for watching and I'll see you in the next video