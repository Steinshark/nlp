here I've written some C code that's vulnerable to a buffer overflow the fgets function reads in HEX 100 more bytes than the buffer has room for obviously this bug is fairly trivial but this scenario is very easy to recreate in the real world when you're calculating things like buffer space remaining in a operation that requires multiple reads this code is vulnerable to a buffer overflow but I have stack canaries enabled which is a default feature in GCC and if I give the program more data than it has room for the program will gracefully fail with a stack Overflow detected so here the file or input file is twice the size of the buffer which does overflow the stack but when I run the program I don't get a full crash I get a semi-graceful fail that a hacker could not take over the way this works is actually pretty cool so every time a process is created the kernel creates a random number that will be the stack can narrative that random number is meant to be a complete secret to the user so the user cannot replay it when they do a buffer overflow attack that number is put into a special memory segment at offset hex 28 and we move that into Rax then we store that Rax on the stack very very very close to the bottom here near RBP and again remember the RBP is the base pointer that's the bottom of our Stacks anything above it is going to be negative to it so it's right at the bottom of our stack just above the base so this is a function prologue the beginning and this happens before any of my code gets ran so here is where my code begins here's a little snippet that actually reveals the stacking area for a future example but eventually I print it out and I open up the file and I call fgets all of this is code that I wrote and during this time the stat Canary sitting there he's looking all cute he's on the stack he's ready to die for us respect the canary comment after that we begin What's called the function prologue and where the stack Canary actually gets its use so what we do is we move the canary at rbp-8 into rcx and then we xor it with that magic value again and if the result is zero that means our Canary was not corrupted nothing to worry about but if we don't take this jump we will call the stack check fail function which means our Canary has died and our program is full of carbon monoxide pretty cool so what does the canary actually look like what does it do how does it smell how does it taste here I've ran the program three times each time I've added a little snippet of code to show you the secret Canary it's not actually a secret you know you could check it out yourself the kernel doesn't care if you know the reason for that is that every time you run a program you get a new canary from the kernel and just C's and K's in there notice a few things one each time it runs it is random and unique pretty cool extremely hard to guess nigh impossible unless your RNG is bad and you'll notice this last little character here is zero why is that why would a random value a value that's supposed to be non-predictable have a predictable value a lot of operations that lead to a buffer overflow are typically related to Strings and how are strings terminated they're terminated with a null byte which means if you filled up a string buffer right up to the end of a canary and didn't have a zero as the least significant bit you could actually just print out your string and the canary would be revealed and again that's supposed to be a secret so by putting a zero at the front of the canary it basically gets rid of the possibility of you being able to leak out the canary via a string operation there may be other ways to leak it maybe with a hard read or a hard memory copy now I know hold on this sounds crazy I know hold on hear me out hear me out let's disable the stack Canary let's try it let's see what happens now we gotta try some new things in life and this is going to be one of them disable the stacking area we're gonna do GCC tech oh all the regular stuff canary.c we're gonna say attack f for function or feature I don't know what the [ __ ] it stands for but attack F no stack protector boom so now the binary is there and if we run check SEC on it again you'll see that there is no Canary found so what does that mean for us what does that change about our functionality remember before we ran the program we ran it on the file instead of it being a stacked check failed buffer overflow detected we got a segmentation fault core dumped that is a very different error and the most important reason that it's different is because of what happened to our program in Wyatt craft if we do we can run this in GDB real quick and just see what's going on so we'll GDB the canary program and then we'll say that we're going to run it with the the file as the argument and then we're going to see that our program crashed trying to execute instructions at hex 414141 4141414141414 there's a reason why this is extremely dangerous now if you're not sure what these four ones mean let's go ahead and Cat our the file all of these A's are hex four one if you don't believe me we can do in Python 3s we can do bytes Dot from hex four one four one four one four one quad a boom by not putting a stack protector or a snack canary on our function we gave the file the ability to determine where the program returned to and ultimately what instructions got ran by the program this is the classic buffer overflow scenario for a hacker that wants to do evil stuff so in summary don't disable you damn Canary now let's Circle back to all you damn heat people okay I know there are some of you probably the minute you saw this video you're like oh my God just allocated in the Heap all right fine fine you want to play that game okay I made the data buffer a pointer into the Heap where we call Malik X100 you had a notation to make sure that we actually get a variable back from Malik and then we're going to do is we're just gonna load that file same thing and we're gonna also read in double the size of the buffer again you can buffer overflow on the stack you can buffer overflow on the Heap and I'm not even going to disable it I'm going to use the default flags on the compiler boom we do get one little error about not including standard lib for Malik but that's not a big deal get rid of that run the canary on the file why are there not canaries in the Heap I'm looking at you libc maintainers obviously I'm joking I'm not making any real assertion that any kind of memory is more safe than the other obviously the Heap contains data the stack contains control flow information so completely different and before you go I want to talk about a long time supporter of this channel that allows me to keep making videos like this improving the equipment and keeping the low level learning going this video is sponsored by brilliant.org the best way to learn something thing is to get your hands dirty and try it out and brilliant.org knows this their Hands-On visual approach is an effective and easy way to make daily learning a habit in your life they have thousands of lessons that go from foundational to Advanced and topics like math AI computer science and neural networks instead of just staring at presentations or slides all day you'll learn something new and then immediately be able to go in and try it for yourself and the best part is you can try brilliant for free right now if you use my link brilliant.org level learning you get a free 30-day trial and the first 200 of you to sign up get 20 off an annual subscription thank you again brilliant for sponsoring this video