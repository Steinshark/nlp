all right hey how's it going uh so yesterday we had a little talk on Twitch in which Theo and I had a bit of a debate about explicit versus implicit returns and so it kind of got me thinking throughout the night and you know I I do like to go into things thinking I can be wrong right there is definitely a chance I can be wrong and in this case I don't think I'm wrong you should always explicitly type your return functions and so let me go over a couple reasons why I think it is better to do that so right here you take this function so this is effectively the example given trying to do my best to you know you know represent uh the thoughts here so let's just say you are a new person coming into this code base you're you're new and you have to make an update to this function tell me about the function well you'll notice right away that down here it's called get permissions okay so this thing's probably getting some sort of permission set here right uh and you realize that you get a roll in here and you get an admin a user or a guest okay so it's some sort of different set of permissions depending on the user but that's the only information you get what does it return well you know a good function probably should be shorter you could imagine that these things should probably be refactored out blah blah blah blah but nonetheless as a new person coming into this you can't even tell what's returned instead you have to inspect code to see hey what is being returned in these functions am I doing the right thing what updates am I making if I update something right here and realize that I have I mean how do I know that I've made a mistake early return what do I put right here return what right like how do I even know what to do because I don't even have a guide I don't even have the original intentions of the author saying this is what we expect instead I can make changes and I will discover throughout the code base those who relying on it in a certain way or I can know what the original attentence go okay well I can't return a null in this situation maybe I shouldn't do that maybe I should go ask somebody hey is null valid thing should we even consider it or you just have the Wild West test in which you don't have any types defined second there's a whole other thing that goes along with this let's just say that you had a type user that had some sort of like right user permissions that had something in here uh shoot I don't even know what what do we put in here uh food number doesn't really matter and then also we had a you know an admin P right let's just say this thing had a bar number and then we also had a you know a guest permission right and so you're like well but then you're gonna get into this situation where it's you know user P guest P admin p and that looks really confusing I I agree with you that does look confusing to me this is a really great example of why having a return type makes you realize hey you know I should probably finish out this typing job here this does not look like a good experience if someone takes these permissions and then has to pass them out on the outside it can be rather inconvenient not only that but they have to do runtime guard checking by checking for Fields as opposed to say some sort of type discriminator and what I mean by that is if you got this like user admin guest back you'd have to do something along the lines of is baz in the permission to know that oh this thing is a guest permission set right so this is very complicated it doesn't lead to very good code and you may or may not know this or see this as clearly if you don't have things typed right away so instead you can do some nice little permissions right equals the user P guest P whatever and then maybe you want to do something even better here which would be some sort of a role which can be this and then data which can be that and you can actually have a nice object wrapper that gives you a very clear and obvious thing what you're attempting to do and allows for things that maybe are a little uh you know you know a little a little nicer you know and so that's kind of like my initial thought is that it gives clear intention you can really see what's going on second you can catch yourself doing something strange right you can catch yourself making the wrong decision earlier on uh I had a couple other things um oh yeah there was another one which was one of the arguments effectively provided is that down here you are returning say some sort of from Json now Json whenever you encode it what ends up happening is that this comes out as an any right and so you have to cast it so the argument is is better that cast it right here say user you know user data right than it is to cast it up on top because now you you don't even know well again argument comes down to the exact same thing which one would you rather you know which one would you prefer finding all the places in which you return to find which of the polymorphic data that you're returning or would you rather have it defined up here and then when you go down here and you cast it down here which I do recommend casting it down here it makes sense you're like okay this is the part that does this part of the program I understand this and more so by me seeing this up here and not just returning these three things you'll also notice that down here I can go okay well I need to have a roll oh crap I put user right here and I'm in the admin block it becomes a clear set of items because I refactored earlier on I made more concrete types I am looking at what I am doing and then of course lastly uh uh uh let's see this argument I find to be really silly right oh but when you're refactoring your code having return types uh it just takes longer uh first off get good at typing honestly uh LSP helps you copilot helps you type faster thirdly you're going to be doing this for 40 to 60 hours a week this idea that you don't you shouldn't have to learn to type fast is just crazy talk okay it is just crazy talk just get good with your tools it will seem like nothing second kid good with your editing use some sort of at least like Vim in vs code so that way you can come here and just do things fast you're not trying to constantly do this third learn your tools I don't want it to be called perm anymore awesome let's call permissions well guess what it changes it everywhere you can do this anywhere you want right like it's it's just a silly argument if you wanted to change these things you can change them however you want swiftly if you have to rewrite a function or refactor a function the lowest amount of time should be spent on typing out the return type versus the actual code within the function if you are changing a function you should ask yourself why am I changing it how am I affecting the data shape and how does this affect the world by having this right here the intentions are clear it is up front it makes people new to the code base be able to grab things and grok things way quicker I do not understand the argument against just implicit return everything yes You're Gonna Save a couple keystrokes but I really do think in the end having any sizable code start growing you're going to just make weird type decisions and of course you'll catch them on the other side and you'll just type guard everything out but it just leads to more if statements more type guard checking perhaps weirder looking data sets I don't know just thought anyways think I'm wrong make a comment like the video you know this is the second channel so I just say a bunch of stupid stuff you know uh it is what it is you know ultimately in the end uh software developers all have an opinion about everything and we all feel very strongly about the opinions and I feel strongly about my opinions yeah it's the truth it's the truth okay and you should just know that like as someone getting new maybe maybe you're newer in the industry maybe you uh have been in here for a little bit and you find it bothersome that's the nice part is you don't have to play the game you don't have to have a strong opinion ultimately when I'm in a code base I just try to do what other people do in the code base because I find that playing by other people's rules in their you know in their playground is better than trying to assert how I think things should be done everywhere I go now there are times where hey maybe I think you should write a unit test for this part hey maybe this is better tested in you know with an integration test like there's times where doing it your way is beneficial to the ecosystem as a whole but I try never to assert everything I think on other people's areas hey thanks for watching