we're basically using the edsack as a classic example of a very early von neumann computer into the great credit of cambridge i mean they did get it working by i think it was april may 1949 something like that and it went on to great glory afterwards and calculations on there from many cambridge scientists i mean it's no exaggeration to say nobel prizes were won because of the availability of exact in all sorts of areas we're going to take a look and try and answer this this question of how on earth do you get this wretched headsack to boot up and with the help of martin campbell kelly's emulator we're able to gonna be able to show you something of that um because what i want to do is to describe how the initial boot programs first stabbed it was called initial orders one second law stab was called initial orders two written by a really bright guy who was the phd student of morris wilkes who led of the ed sac team of course that chap's name was david wheeler a really nice chap i didn't know him only slightly but he was fearfully bright and always good for a chat about low level issues like this about how did you get this wretched thing to work given that i suspect inherited on edsack but feeding back into early things again like tommy flowers is colossus um how do you get a bit pattern in here to tell it to do what to do because if you want to get the bit pattern in the electronics the logic and everything inside it will execute it correctly that will have been checked out but how do you get the wretched things in and the answer certainly on the colossus machine was you used a set of what we call unit selectors to set up the ones and zeros and by having enough unit selectors plus usually a sort of load lever to load it into the current location in memory then you have to have an automated way inside the hardware of stepping onto the next word to be loaded um people like me didn't use unicollectors but learned this up when you booted up an early pdp 11. even as late as the 60s and 70s it wasn't union selectors it was hand keys on front of the panel i think we've shown those once or twice same thing up for a one down for a zero one one load another pattern load another pattern load it's bad enough loading up a little boot program it's unthinkable to load in an entire multi-kilobyte program that way but on the basis of hand switches and unit selectors in this case yes these wonderful initial orders 2 and initial orders 1 were loaded in from uni selectors once you've downloaded martin's emulator it comes with a tutorial guide and it makes it very clear in there that on the actual headsack when you wanted to load initial orders you just press a button john is working here on the unit selector unit i talked about the boot rom or the initial instructions those are coded by how he's wired up these uniselectors when the operator presses the start button a rotor spins in here and as it passes each set of contacts that gets injected into the memory to download the program to give you some idea the initial orders i think were about 42 words not 42k not 42 meg like it might be on a modern bias 42 words because memory was fantastically precious what was a word then is that a 16 word is well actually it was 18 bits in edsack but basically yeah an 18-bit word could be loaded in um and you could load the whole thing in by hand but you wouldn't want to so here's the challenge then there's all this memory here in mercury available what you want is something sitting down at the bottom of memory to help you get bit patterns in of paper tape okay so that will be your boot program now that's the kind of thing sitting in low memory which nowadays is the bios and it's a heck of a sight more complicated than the initial orders one so what david wheeler did for initial orders one said just to get us started early 1949 i will write a set of initial orders that sits there all the time and other people's tapes that come along i've got to say two things to them first of all please do not trample all over my initial orders that have been pre-loaded don't go into very low memory addresses like zero and start trying to overwrite it kill the program stone dead but starting from i think he finished at 42 with his initial orders but to allow for future expansion i think the recommendation was start off at location 64 in memory 64 and above you put your program there i will now help you load it because when you uh put your paper tape in it will be my initial orders one that is asking to read your tape character by character okay and initially in initial orders one he said i will do the following if you type a i know that a is a certain bit pattern meaning add and i will put that in the correct field of the correct word for you you may then want to write an explicit decimal number to be added like 10. to save your brain i will translate your decimal numbers in your instructions into binary so two things i'm doing for you is i'm translating the op code and translating obviously decimal numbers into binary and i'm keeping track of where i'm loading them for you into memory i will start if you say start at 64 i'll start at 64. and i'll put them in successively one after the other so far it sounds to me like he's doing the job of a modern cpu with registers and an interpreter to interpret the code yeah it's like a very elementary assembler but whereas with assembly it's a two-pass process you run the assembler then you've got your binary here you're using assembly codes to make your own binary on the fly is this a great grandfather of the operating system there oh yeah the great great great grandfather operating system first of all we are starting with a loader because that's all this is it loads into memory but it's very crude initial orders one right what drove people mad about it was that unfortunately you had to be in control of your addresses because if your program said jump to location 70 you started 64 fine but what happens if you want to intervene a few more orders a few more instructions between 64 and 70 you've got to alter all the addresses in your program because what was at 70 where you wanted to go to is now at 76. so you've got to go and say don't jump to 70 jump to 76. so although it was a loader it couldn't do anything much about being at all adaptive or helping you to relocate as it was called so this was realized very quickly that any alteration to your program involved changing all your addresses on the tape so initial orders two david wheeler became celebrated throughout the computer science world for this he only in his life ever published 11 papers did david but he was still an frs that's how much he was rated i remember meeting don smith once saying uh you know who have you met recently what you've been doing i said i saw david not dj wheeler he said you know r-e-s-p-e-c-t initial orders two i mean yes david was really celebrated for this it seems obvious now but it certainly was not obvious at the time everybody wow your initial orders too is going to help us be able to alter the program and just feed the tape in again without changing all of the addresses all we have to do is to change the load point at the top say or something like that maybe we don't want to put it at 64. we want to put it somewhere else but what david wheeler said was so long as you throughout your orders indicate and flag up to me the addresses that will need changing i will keep track of them and i will alter them for you are these like variables then yeah they basically it was it was doing what modern assemblers can do anyway but very early on saying no matter where you choose to place this in memory you might want to put it at 128 or 256 or anywhere just tell me and i will load it there and i will fix up all the addresses you can just sort of say like zero one two if you like but i will add on 64 to them or 128 add it on them or whatever you want all you must do is flag up to me the addresses that need to be altered in a special way that my initial orders understand and it just revolutionized the use of edsac because what uh of course every computer scientist wants to do and admittedly this was not done in 1949 it was done recently is get your computer to say hello world well there's a contributive program here that for the sake of brevity just gets it to say hi and perhaps we ought to run high first and then say how the heck does initial orders to enable this to be loaded in and to work correctly so here we go then this is the program that will first of all load when i say start start loads the program that is showing in your window on the left it has loaded in the high program however with my fading memory of edsac codes i can see that the third instruction there zf means stop that was a very common trick to use as an edsack program is make it stop in its execution early on because then you can check in your peep your peephole into the tanks does it look plausible does all of this stuff here look like a binary interpretation of all your elementary assembler op codes and people would know what to see oh they would say oh yes you could look in there and say oh you know that looks like an ad instruction to me yes so there we are now that stopped here but what you can now do is to single shot it those of you again assembler will know you often have a single shot capability for debugging this is like a step through is it yeah just a step through but the bit of luck single ep ah i've got a cursor now if i single ep again look it's printly the letter h single shot again hi so i think one of the exercises in martin's instructions i encourage you all to do it is to get it to actually say hello world just make it a bit longer but here when we look at the program we can see an awful lot of what is actually happening here it's saying stop but then it goes on to actually outputting the message how does it do it it uses an oh output instruction and that is part of the sockop code it basically means punch this to tape which is the way it would have come out initially with this at symbol that was one of the signals to david wheeler's initial orders this is a relative address not an absolute one and i want you to adjust it for me and because right at the top we've said t64k for assembler programmers that's like saying org origin equals 64 in many assemblers but here it's starting point 64. but look at this 05 at symbol means output the thing that is five locations beyond where i currently am the app says you've got to add on the baseline now to the 5. 69. so down here then what it does first of all is it outputs star f that is the code that says turn into letter shift now if you go back and watch my previous five whole paper tape program you'll find that whether it's bordeaux code or red sac code you have to make sure if you want to print out letters be doubly sure you are in letter shift not in figure shift and vice versa otherwise it will all look like junk so here is the code in headset that says turn me into letter shift and make sure next instruction beyond here says output the thing that is six beyond this location and when you look there right it just says h f so in other words the letters h and i that are to be output are being picked up as data from instructions further down and are being output by using this memory relocation capability so that's all you have to do is to put down asterisk it's shortcut in edsack for saying switch the letter shift print the letter h print the letter i but it's all done very carefully by adjusting these addresses here to actually be 69 70 and 71 in real life and if you do that you then say output the bit button that is in 69 it's a change to the letter shift request do the one in 70 it's the letter h because i've planted that there and so on so i hope that if you work through that very painfully you can see that just that ability to use relative offsets yeah rather than absolute addresses means that you the amount of rewriting of your program just because it gets bigger can be greatly minimized so what is initial orders ii it's arguably the world's first elementary relocating loader it is keeping your program well away from traveling on initial orders too but it's relying on initial orders too for translation for well doesn't even need to translate opcodes into binary they are binary binary to decimal conversion and now relocation all done for you and all in much less than 64 words so that's why it's so celebrated this empty rack is one we haven't started very much work on yet this would have been the circuits to drive the paper tape reader and the teleprinter we do have a teleprinter and we do have a tape reader we've been driving those using a modern computer to test them out we've now got to design the interface circuits that fit here