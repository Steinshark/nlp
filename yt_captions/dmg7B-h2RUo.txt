every major coding mistake I made in 2023 trying to fit three code bases into one I thought I could do this really fancy thing where I had this react native project that built an IOS app an Android app a web app and also had the serverless functions built into the same codebase and that was deployed through netlify crazy mistake let's talk about why i' never used react native before and I didn't realize at first that it could build to web but it can but not really problem was if I created a new feature in the app the iOS or Android version of the app that didn't play well with the web version the deployment of the back end would fail because the web version wasn't able to build but the app was the more important part so the app would be fine but the server wouldn't deploy because the web version which I didn't care about as much had failures and that caused so many problems I ended up replacing the web version with an HTML tag that just said I failed so every time I did a netlify deployment it pretty much deployed the serverless functions and that's it and I think that sums it up pretty well I failed I think what I learned from that is you can't have your cake and eat it too you can't have this one elegant solution that has everything built into the one system it's okay to separate out different repos for different purposes I ended up building a nextjs app that did only the web version it looked six times better than the weird janky one that was created through the react native app anyway and I was able to move the serverless functions into Edge functions to go out with that deployment it made way more sense now before I continue I want to say 2023 was a big year for me I left Microsoft after 4 years of working on The NET Framework I started my own company I became the CTO and sole engineer at this company we raised $4 million and I had to learn a lot of new technologies very quickly and I made a lot of major mistakes so let's go through what the rest of the mistakes are next using JavaScript instead of typescript it was so stupid I've used typescript in an electron app in a Chrome extension in a back end in a front end I've used it everywhere but I didn't use it in this app this Expo project I used normal JavaScript for a kind of stupid reason I hate configuration I want to get the project going already I want to be deep in the code I want the features to be flying off the shelf I want them to be landing every few minutes so when I get started on a project it's hard for me to hold back and make sure the configuration is just right before I get my hands dirty and get going into it I made this mistake because I started trying to integrate typescript and it took a few more minutes than I expected and I said ah screw this I just want to get started already so I threw it to the side and I used bebs JavaScript it was a major mistake I never do that anymore if I'm going to be developing in a codebase for years it makes sense even if you have to spend an extra few hours making sure the configuration is right it's definitely worth doing next using Firebase o I used Firebase o because I've used it before I've always felt like off packages should be significantly easier like you have a set of pages you're allowed to see if you're not logged in and if you have a set of pages that you are allowed to see if you're logged in and that's pretty much it but off packages make you do this weird thing where you kind of have to implement all of those things yourself except for clerk I came across clerk recently I am not sponsored by them in any way shape or form they have a tag signed in and you can wrap any react component in that tag and it won't be viewable unless the person signed in you can also do the same with signed out so these things are only visible if they're signed out they have a pre-built signin page where you can select all of the ooth things to work with like sign in with Google or sign in with GitHub it's so significantly easy that I feel stupid I didn't know about it before I never going back to Firebase o I'm always using clerk from now on now when I started my startup I made another major mistake stick with me to the end of this one because it's pretty crazy one thing you have to do when you start a company is manage lists of investors customers you know deals in the pipeline you have to manage projects you have to manage features bugs you have to manage people what I learned is that everybody and somehow I actually mean everybody uses notion I met a Founder believe it or not that doesn't use email in the entire company this is a company valued at $100 million they have thousands of customers they have dozens of people on the team and everybody communicates through notion notion has this notifications ability so you can tag people and they get a notification on their phone it became so rare that they were communicating about projects on anything other than an ocean do that they literally just killed email inside the company and believe it or not they would even do this with clients now if you think that's crazy this next one is actually out of this world crazy and it's so crazy that I kind of want to try it I have a Founder friend that has a company that does a few thousand in Revenue every month I think about 3 to five they have probably about 300 monthly active users and they don't have a database they use notion as their database I'm completely serious so in notion you can make pages and you can make Pages within Pages Pages reference other pages and each page can have a table so they thought screw it why don't we just make this our database one of the features in their product is you can create documents to share with other people so instead of creating a page where you can input a bunch of information and then saving it in somewhere in mongodb and then creating another page where you can hydrate the data from your database into it and then share that with a friend they thought well notion has document sharing built in and it has tables that we can use for uh keeping track of users so they literally do it all through notion so when you create a new page that you can share with a friend it's literally a notion page now what you're probably thinking is oh it's just for the share feature no they manage all of their users in a table in notion I actually can't believe that they do this but they do and it and they like it they say it works now I'm not here to promote using notion as your DB I don't think it's a good idea I think it's a funny one but my point here is that you can do a lot of stuff with notion I mean you can kind of use it as your startup or your University operating system you can give it as much or as little responsibility as you want but either way it can play a major role in helping you organize and be successful in your life all the most successful people I know use notion so I mean probably you should try it now this video is sponsored by notion but don't let let that fool you into thinking that it's biased it's actually a tremendous product and I'm being genuine when I say all of the most successful people I know use it I even use their AI feature to help me structure this segment right now obviously it it didn't do everything but it did a decent amount of it I'm going to put a sign up link in the description I really highly recommend checking it out it's free and it's going to help you organize your life next using instead of postgress I'm all about doing things quickly so if you know one technology and you can get off the ground very quickly I always opt for that instead of trying to learn some new technology I think I made a major mistake here for this one I'd used with a few friends before it's no SQL so I figured I could just get started with it very quickly but it ended up being a major pain in my ass so I launched the company app pair we got 10,000 downloads in just like 2 or 3 weeks on each user object we had how much time the user had spent on the app how many videos they' watched how long they've spent watching videos on our platform but it was really difficult to get any kind of insights on our users because we could really combine across collections we couldn't do any kind of joins and so it made the data really hard to work with and I had to write all of these custom scripts that took forever to run and were just disgusting so from now on I use superbase I use Prisma to interact with it and they have a beautiful UI I can do searches on very quickly I can figure out all of the analytics that my CEO wants me to run all the time oh it's so much easier I cannot believe I didn't do this before the next major issue was using Expo man manage workflows now I haven't spoken about what Expo is yet so let me tell you Expo is this really cool project it helps you develop your react native projects and iterate quickly on them that helps you build them and deploy them when you're using Expo you run your code locally it generates a QR code you can scan it with your phone and it will literally run a version of the app on your phone instantly it's unbelievably cool they also let you push over theair updates so you can literally bypass the App Store review process which is a pain in the ass and takes Days by just pushing updates over the air and all of the phones will detect a change and pull the new version and Patch it and you never even had to talk to the App Store review process it's kind of crazy that it's even possible to be honest with you but it's not all sunshine and rainbows there are a few major problems with it the thing about Expo is a lot of the major issues I had came because I decided to use a managed workflow for those of you that don't know there are two ways to use Expo you can use a managed workflow or a Bare Bones workflow now the managed workflow means that you basically develop in this abstraction and your builds will all happen on Expo servers so they have their own Mac servers and they have their own Linux and windows servers and they will generate your Mac and your Android version on their servers so you don't even have to manage any of your keys you can develop an IOS app on Windows it's pretty cool in fact it sounds too good to be true and it's a little too good to be true when you use a Bare Bones workflow you get an Android and an iOS folder on your machine and this contains some dedicated code to each of these platforms sounds kind of boring and maybe not that important right wrong the number of times the build.gradle generation failed for some versioning reason some dependency wasn't available and I had to just guess at how to fix it so that it would finally generate a good build Gradle I can't tell you how many cycles I wasted and on top of that there's no way to run the build locally cuz the whole point is it happens on the Expo servers so if you want to see if you fixed this weird code generation thing you just have to keep sending the builds up to Expo servers keep waiting in Q and if I had a dedicated Android folder I could have just pulled up that build. Gradle made a few changes and bang I'd have been back to normal look at this actual screenshot these are all the iOS failures I had in a row this is about half the screen one time I had the most ridiculous failure streak it just kept going and actually that leads me to my second Point Expo has random failures all the time now again Expo is great I love it and if I had to make a new app tomorrow I would still use it but there are some really funky failures that happen that take days to fix for example there's this one package called Expo blur and it lets you basically blur the background of a container there was no indication that there was any problem with this package but if you included it in the project the app would crash it wouldn't crash in Expo go Expo go worked fine so as your developing you think everything's good you work on it for a few days you add a bunch of features when you finally make a build of the app and you put it on your phone bang crashes no indication of why no logging no understanding if it's that package or a million other packages you added or if if it's just a bug in your code you have no idea it took days of trial and error and I'm talking days of sending to the Expo servers waiting a que getting it on my phone failure days of this and there was no indication this is an expo package you would assume it would work but the second I removed it bang problems were gone stupidly difficult things to debug sometimes so another issue that I had with Expo is this idea of over-the-air updates I thought that I was going to be really clever and I was going to be able to skip most of the App Store review process I do not re recommend doing that so when you're using Expo there are instances where you're changing native code and you cannot do an over-the-air update because when Expo doesn't over theair update it basically just bundles the JavaScript part of the app and it's able to update and patch that bit it's not able to change the native underlying code so if you're making a change that requires a native code change you cannot do an overthe a update the problem is you don't always know if you're doing that you could be adding a new dependency to your project that requires native code change but you don't know and you just send an over theair update and your app will crash and again you get no feedback on this there's no easy way to iterate on it you have to go through the Expo servers if you're using a managed project but it also is just too many things to manage so you have branches so in Expo when you push an update over the air it's called an update and you have update branches so you have strings of updates that you do right and all of these branches are on a certain runtime so if you update your version of Expo that updated version gets its own branch of updates so now you have updates in branch anches of updates and these branches of updates are specific to different versions of Expo and then you add in git branches on top of that so then you have git branches and you have multiple Expo update branches and then there's no revert in Expo updat so if you want to revert a change you made you have to create a revert commit and then update with that and you just get these disgusting configurations you can't keep it all straight in your head all of these different branches my recommendation don't try to skip the App Store review process push your updates through it unless you have a hot fish and then get that through the update Channel I was pretty vulnerable in this video about all the major mistakes I made and I made way more mistakes on a day-to-day basis there are going to be a few people that say oh you didn't use this one thing right you could have used it better I'm sure I could have I made mistakes I'm sure I made more leave a comment with your major coding mistakes instead of feeling Shame about this stuff we should just be telling each other because then we will hopefully not make the same mistakes as each other I hope you don't make my ones but I'm destined to make more in 2024