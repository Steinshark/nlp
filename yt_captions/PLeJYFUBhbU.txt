there is something I do want to like mention about Jonathan Blow he is one of the old old school twitch streamers bringing in stuff and all that we've been doing it for a while and uh I think that I've always had a general appreciation for him he seems kind of like a grumpy guy but ultimately I think he has a lot of really good ideas and so I'm very curious what he has to say here and why he has to say it uh should be kind of fun you know should be should be I got my thesis for the rest of this talk is that software is actually interesting right now uh it's in maybe a soft decline that just makes things really inconvenient for us but it could lead to a hard decline later on because our civilization depends on software we put it everywhere all our communication systems are software our vehicles are software so you know we now have airplanes that kill hundreds of people due to bad software and bad software only right there was no other problem with those airplanes um now I don't think most people would believe me if I say software is in Decline it sure seems like it's flourishing so I have to convince you at least that this is a plausible perspective and that's my goal for the rest of this talk I'm actually really curious about this because I wonder what he means by decline so before you know obviously I I do like to take a moment and kind of think about when someone says these things like what could they mean you know try to solve this idea on my own and so I'm actually a little bit kind of I'm curious what he means by decline does he mean just like General skill in developers in Decline does he mean uh software quality decline does he mean the languages that we use quality decline like obviously uh you know no matter which way you you put it rust by all sense of the language is significantly better than JavaScript um higher level abstraction is not a decline absolutely I am I'm totally on that board so I'm actually curious what he means by this like what is what is the decline of software I I don't have an answer right away which makes me I don't know a little itchy I want to know I want to know I want to get I want to get there I want to get in there and what I'll say about that is these collapses like we're talking about that Bronze Age collapse was massive like all these civilizations were destroyed but it took a hundred years so if you're at the beginning of that collapse in the first 20 years you might think well things aren't as good as they were 20 years ago yeah they call that a late stage Empire right so you know uh technically like America is in in a late stage Empire we may or may not be in the decline yet but we're still at the the final stage it's kind of interesting right I I understand where I I understand this point it's kind of interesting basically the same right but then you keep thinking that you keep thinking that every 20 years another couple cities get burned to the ground and then eventually there's like nothing right yeah um fall of the Roman Empire was about 300 years so if you're in the middle of a very slow collapse like that would you recognize it would you know what it looked like from the inside no so of course I expect the reply to what I'm saying to be your crazy software is doing great look at all these internet companies that are making all this money and changing the way that we live you know and I would say yes that is all happening but what is really happening is that software has been free riding on Hardware for the past many decades we've had amazing advances in Hardware technology computers keep getting faster and faster it's really one of the greatest accomplishments in human history that we've somehow managed to do that and software gets better in air quotes because it has better Hardware to run on that's the main reason software technology itself has not improved in quite a while I claim I wonder what he means again what does he mean by this because I I don't know I feel like this is actually a hotter take because you know that's like a spicy ass take because if you think about like when C was invented to Pascal to Java I mean C plus plus also happened that was an accident you know we all we all had that one on accident but I mean still you had JavaScript python uh Lua like all these languages it is actually I mean what does he mean software hasn't gotten really amazing you know what I mean like there's a lot of things about software that has gotten really good and I really really do like that you know what I mean this is really really good yeah see one over Pascal Pascal it was an interesting language it had closures uh it had fairly easy function passing it was a very unique language it's it's I don't know it's there's been a lot of iteration on languages lately so what does he mean by this even functional languages are now becoming more mainstream they're adopting more C style syntax while having uh more of the functional side software has gotten wasteful well software building has most certainly gotten wasteful because we make the abstraction or we make the trade-off that to build really good software we would rather trade off some Hardware cycles for developer ease right and that's the whole kind of trade-off the files perhaps it's a Faustian bargain perhaps it's a bargain in which we're making where it sounds good in the beginning but ultimately leads to us making a deal with the devil which is like a total net negative for us um yeah I uh oh don't I think that might be a little too specific so DX versus n product efficiency right like that's a very hard trade-off to make and I'm very wary of that trade-off right it's a very scary trade-off to make because we make it constantly without realizing that you still have to use your software in two years or a lot of companies do right startups don't think that way because they think we'll just burn down the world in here in six months whereas you know longer running companies when you build something you're not building it because today it's going to be you know used today it's gonna be used for the next five years have you built something that's ran for five years you really have to think about it it's not so easy to simply just make the DX trade-off right you can't just do that it's kind of wild they'll rewrite everything yeah the rewrite everything is kind of wild so I'm okay let's keep on going this is very exciting you know same right and you can say but look at all these examples of cool stuff we can do even in the past couple of years so like alphago was an AI that'll beat human players that go and you can go on like Instagram or whatever app and like make your face look like somebody else's face that's crazy we didn't used to be able to do that and that's true but one uh most of these again are products of Hardware being fast most of these cool okay so I I disagree with that that technical thing it's it's a it's a combination of Hardware being available and algorithms I mean you got to know that like ml algorithm research is really intense there uh I I mean I was getting my masters and and AI 10 years ago and we were just starting to talk about like reinforcement learning right taking your output and as part of your input is the previous output and that's like a huge thing and like building your own ML and all that yeah like Hardware accelerated it but the the the the the algorithms were really like this hard research that took a decade to get somewhere right like it is or I mean technically ai's been being researched for gosh 50 60 years straight and there's like been it's mostly been tree based stuff mini maxing and only recently have we gone more into this graph ml World which is very very interesting um I wish I would have finished my you know I wish I would have finished my masters you know looking back well actually I don't wish I would have I'm really happy I work at Netflix but at the same time it would have been sweet you know things that we do now are due to machine learning algorithms and it's you know those really are relying on quantity of computation right now that's really produce impressive results it's hard to imagine being able to train it's it's I'd say they're more like their Co you know they're kind of more like co-regions than they are like King and subservient if you know what I mean by that uh word I bet you most you don't even know what a co-region is anyways uh the idea that they're without the good Hardware these algorithms couldn't exist without these good algorithms the output could not exist they are like co-equals green alphago 20 years ago on the computers we had at that time right so it's not as there are software technology improvements here right machine learning learning algorithms have legitimately gotten better but there's two things to say about that um uh well the the main thing to say about it I will say is just that it's a minority of actual software technology right so the of the volume of things that we run the thing that runs the machine learning algorithm that produces the actual impressive result is a very small piece of the program it's actually really simple uh once you understand the math and especially if you don't have to train it if you just have to use it right that's reasonable um and so when you take an app on your phone like that that does something funny with your picture the part of it that does the thing that we think is cool and really value that piece of software is tremendously simple compared to all the stuff about like loading the bitmap for your face or responding to user input events right that part of the software is huge and complicated and is the part that's kind of falling apart so I would characterize software as having small local technological improvements like machine learning um with overall inertia or degradation in the rest of the field and we're hmm I don't know if I like that example it gave okay curious curious I would say uh all right we're very impressed by the improvements though right and let me illustrate the degradation Parts uh as best I can and it's to say that we simply don't expect software to work anymore and I'm not sure when this happened you know computers always had a reputation for being a little bit funny uh but it you know if you go back many decades ago it was generally due to like not being user friendly or or hard to understand how to use it but today if you're using a program and it does something wrong you're just like yeah it's software restart it whatever that's actually a really good point I mean right now if I if I type in Twitter in a private message and I hit enter and start typing until that message is sent the message I'm typing will be deleted once that message is sent right it resets the state of the whisper component on desktop it's super frustrating it's super annoying but my default like my Modis operandi is that I'm going to accept that because that is the natural state of software software just is inherently shitty um perhaps he's right perhaps I mean again I still think that that is actually a limitation of the language we've chosen to use as our main language or our main gateway into the the world I think that that that the imprecision of the language is very difficult and we being imprecise logical creatures using an imprecise language has compounding effects I think it's really really hard uh also exciting the language yeah the language I'm keeping it in general because there's more than one I mean even rust has its own downfalls right you can't protect somebody from making bad logic and that's the hard part is no matter what uh even you know even rust or even you know these more quote unquote modern languages still suffer from Bad programmers I'm a bad programmer I make bad decisions I write shitty software so it's like my bad ability to write software compounded by a language that is loosey-goosey like JavaScript running on millions of people's machines is by the very nature just gonna break in totally weird places you know what I mean it's totally weird and that's my expectation it used to be and if our standards are shrinking over time how low can they shrink before it becomes unsustainable so I decided uh to say I do want to pause this here he also I think is being unfairly characterizing this in the sense that uh when he said that our standards are shrinking I would also argue the surface area in which the program has to consider has greatly increased if you think about 30 years ago when you write a computer computer program a huge proportion of computer programs 30 years ago were strictly like CLI style programs or programs that have exceptionally small amount of avenues for input and small amount of avenues for output whereas now our input Avenues have a huge like like a surface area right we have we have requests we have data coming from all sorts of different external services or uh Services all of which could break plus you have the internet itself breaking in betwixty you and the services you wish to be using then on top of that you have user input which can be a whole variety of different ways on top of that you have a whole variation of various types of Hardware software versions all of that on top of that you have languages in which are you know are not maybe the West the best designed on top of that you have me programming it using these libraries in which I have no fundamental understanding of what's happening I know how to use the library so if the library is doing something weird I don't know that because I don't understand the under like what's actually undergirding the library itself the lay the layers of abstraction and problems has greatly grown in comparison to 30 years ago so have we relaxed our standards or has what we've been doing or has the surface area of our problem expanded at like a two to the n so yeah you gotta own the lips if 100 you gotta pound the lips absolutely that's the problem not pounding the lips right if you would opponed react you would have known all about react you know I want to quantify or illustrate how much I put up with this from day to day so from now on I'm just going to take a screenshot every time any piece of software that I use has an obvious bug or you know unintuitive or incorrect piece of behavior and uh well I write it right when I decided that I was working uh on my compiler uh in the command line and the console that I use after a while just starts saying attempt to index annual value in the prompt because it's written in Lua for some reason then I go to emacs and I'm working on my code and uh emacs is set to reload files that have been modified and that used to work fine but at some point they broke it so that it reloads the file too early and doesn't get the whole thing and half of it is cut off and I have to well that's the using emacs problem I'm sorry but he is right he is right our our willingness to ship broken product has definitely increased our ability to think that the user won't care if something's broken I think actually let me let me think about this different let's try to think of like why this could be I hop I hypothesize this hear me out on this that part of the reason why this exists is that so many years ago to think of software that you could ship at any moment was just effectively unheard of if you think about software today how often do you think it updates right like when do you think you deliver updates or things like that there's maybe there's like a little bit less of a uh of a severity on bugs because you you you don't have to worry about the fact that if you ship it you can't unship it right like think about television software even five years ago when you shipped it that was it that was the only thing you could ship and when it's in the field you will never update it again what do you think what do you think the mindset is about that it's much much different right Game Boy games exactly that is much much different than say today's world where things can be updated much faster yeah television software like TV TV stuff right or or game boys or uh Super Nintendo games right any of those things it's yeah it's a difference between waterfall versus agile and I'm not saying waterfall was bad I'm not saying it was good either I'm just saying it's a different time in a different world right maybe that's why this kind of stuff is so intense maybe that's why you don't see a lot of breakage in older software because they just didn't have a choice they're like this is our one and only opportunity it has to be correct I don't know like manually reset that every time it happens um then I go to Gmail and I'm going to send an email to the rest of the team about some graphics stuff making decisions about what to do and I copy a line of a previous email and paste it into the reply box and then I start typing my reply and it goes into like a three character wide column over here because somehow they've managed to reproduce all the kinds of stupid Microsoft Word formatting bugs that everyone was frustrated with in the 90s and 2000s now those are in Gmail and I don't know how to fix it like you fight with it for a while to get it to stop happening you have to like collapse again invisible I don't know very annoying so then I say okay I'm gonna get some real programming done I go to visual studio and I say I'm going to type in my command line arguments up there and as soon as I do that we get this box that says hey uh collection was modified enumeration option may not your operation may not execute uh why I don't exactly know I understand that sort of well I don't even know what this means why that's a problem like I'm just telling it a string we're not even trying to do anything with the string it's just like save this for later for when we want to run the program yeah but apparently that's too hard right and this is far from the only problem with Visual Studio Visual Studio has many many bugs but this is the funniest one because it's so simple what I'm trying to do and it can't do it all the time this is pretty much me using rust I'm like trying to do something they're like sorry you can't enumerate and mutate there buddy guy and I'm just like just let me just I'm gonna go backwards to the list just let me go backwards and remove items come on come on man I just want to go backwards and remove an item just let me do this they're like no no no no no no no no no no no no no no no no all right this I don't know what percentage of the time this happens is probably like five percent I don't know four percent so then I decided to break off blow off some steam and play some games so let me download a game on the Epic store uh but we're unable to start the download for some reason I might be able to go to steam by the way I'm in HD I don't know if you can see this I don't know if you can see the little HD symbol right here uh I don't know this is like 69p or something because that's a more reliable longer lasting oh nice camera here and I'm able to actually download a game but then when I go to the install window it's just like a black window and I have to restart steam to play the game then I managed to play the game and then I all Tab out for a second to check something hold on uh let's mute this because I think that we're going to be getting little pings there don't don't stop it quality I know we got some quality software 69ps there's a lot of people and now full screen is all messed up in the game is like up in the corner of a window I love when this happens to get full screen again have you ever tried doing that to Apex it is by far the worst thing ever when you like that this whole full or window borderless full screen that's going on with games and all you want to do is just have full screen and it appears to be full screen but it's actually borderless window and you just like end up clicking crap and it's just so frustrating uh and then I'm watching some Counter-Strike there was a really good match between Cloud9 gaming about a month ago and uh but for the entire match there was a mysterious sixth player on the cloud nine side called undefined up in the corner there let me zoom in on that map for you Counter-Strike fans it's undefined is on the left a hundred thousand people who are watching this match and it was there the whole time did CS go embed V8 is there UI written in or not V8 Maybe quickjs is there quick JS in this list no oh no oh oh it's a third party program okay okay okay okay I just I mean I understand people do Lua but [Laughter] oh man okay okay everyone we're calming down um I was thinking about a game I like called ultimate four so I went to this website that had the map and the map was like screwed up because it was like rapping into extra lines so I opened a different browser to see it correctly I needed to get a visa to come to the Russian Federation so I go to the Visa site and I start typing my information and maybe I type out my boom this right here stop using rejects for phone numbers stop stop it this is why it never works the moment you do this every time I swear I swear this is no this is exactly what's happening right here someone got clever with it and someone got clever with the regex and it did not work out my phone number I put the plus one and it didn't like it or something so it says phone number is invalid over here uh but I couldn't fix the phone number no matter what I put in it wouldn't accept it because whatever the variable was for phone number is invalid would never get reset so I had to like stop the application close the website like clear my cookies go back and reapply in order to be able to and be very careful when I was typing my phone number uh there's just so many of these um all of this was within a couple days like I didn't have to try hard to find these right I just had to stop collecting them but then I come here and as if to give me more examples in this talk so here in this hotel where I've been writing this talk for a couple days they have this software controlled Heating and lighting system right here where it's like I don't know what in the world people want software for heating and cooling I am one of those people that like I like Hardware I like the feel of the physical world for adjusting things like why do you want this what do you want in there do you really do you really do you really want people who are writing JavaScript to control your house like you don't want this okay you don't want this okay Dick's gonna be in fan okay it's gonna be terrible it's just not what you want this is not what you want I don't understand it maybe I'm maybe I'm a lodite at this point but to me it just seems like the old one where it's just like it just goes from like 90 to 60. and there's like an AC off and uh heat button like there's like two things and that's all you need come on and things happen and some percentage of the time not all the time when I turn the air conditioning on or off on Donna the phone rings it's not a full ring even it's just like a little and then it stops but I know it's not intentional because it doesn't happen every time and I am not making this up this actually happens in my room right now okay and then for this talk two hours ago I was working at the last minute to make a diagram and I downloaded fully legitimate licensed Creative Cloud Photoshop to my machine the first thing I do is go file new document bam the new document extension could not be loaded because of a program error right new document is an extension engineering let's go and so my whole point though is we are not surprised by any of this my other point is that it's getting worse over time so try this every day yourself because we've gotten used to it I didn't even think it would be as much when I had the idea to record this I didn't think it would be as much as it was try counting for yourself just every day just make a little list of all these things and I think you'll be surprised how many there are that's that that is an okay do you like that face I made that's actually an interesting point I why is it recommending me my own video I literally made that this morning um oh there's a longer version what no I was wondering what the point of this was it felt like he got he got like it was going and there was something to it and then it stopped and I don't quite feel like it ended the way I wanted to do uh yeah a whole hour is way too hard um I agree with these points I think he's really really really right on the fact that we are totally and completely fine with the fact uh that software just doesn't work that it's okay that it breaks and it breaks at an exceedingly High rate it feels like it feels like I can't use anything today without several things being broken uh I don't know maybe maybe there is something to that maybe there is a lot of Truth to that maybe there is something that says uh we really have you know we've really crossed a point in which software is just like in this permanent state of suck our life is in a permanent state of being inconvenient and we're just okay with it it does grow in complexity I I do agree with that I think that he did he he most certainly like soft pedal the complexity growth but there most certainly is there most certainly is an okayness with quality of software that just wasn't present before I remember every time we discovered a bug it was like I had to stay up all night until that thing was fixed there was no waiting there was no anything it was like I was there doing it every single time and when something went wrong whoever was working that's the person that had to find out and make it fixed immediately right and it sucked it was hard yeah I mean see again I I have I really am worried about all of that kind of stuff yeah why did it become okay well because you know software is hard I think we can all agree that software's hard why did this happen uh I would say that we we've we've reached a world in which there's like several conflating points the the standard I'd say the all shallows is clear easy uh bullcrap low low room temperature IQ thinker will say well because companies are greeting they want to ship ship out stuff as fast as possible I'd say you have room temperature IQ go sit down take a moment um we have a couple of different things kind of I think colliding to make this possible one we have the ability to shift software at rates in which has just never existed we do not plan for this it's just way too much two uh I think that there's just a huge surface area of complexity that just simply was not present even 10 years ago the complexity is just insane right now uh the first cup of software engineer I know live it's like a box of chocolates um react is kind of like a box of Frameworks you never know which one you're gonna get uh and then three we have I think a general acceptance that software is going to break and four I do think that the pressures of making money and shipping new features and being competitive is allowing for this so I think there's kind of like a four-fold thing maybe the whole like being okay with broken software is a result of all three and we've just come to expect it or people are fine with it so people take advantage of it so I don't know which one it is right you know what I mean like it there's definitely like it's hard to know which one's which right it's hard to know which one's which