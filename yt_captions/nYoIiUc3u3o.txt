so playing video games one frame at a time and I'm Alla wer this is my face I'm a senior software developer at F lines and I luckily with an Icelandic name there aren't that many that uh have the same handle as you so I'm this username on most platforms I all over the place not on Twitter though because Twitter doesn't exist uh I work for f lines uh we deal with supply chain compliance so discover your your sustainable supplier networks of like getting follow-ups and risk levels half of you are going to be what on Earth this is and the other half are going to be this is so tricky and if you're in the second half you should look it up look us up that's what I thought at first like what what's this and then yeah it's very tricky very tricky all right it's been a theme over the past couple of years if I I start every every talk with a philosophy quote uh and this one is people say nothing is impossible but I do nothing every day this is of course the famous philosopher we need the Pooh and that's been also the theme all the quotes that I've been using we need the Poo quotes look them up they're very philosoph Phil philosophical there we go that's a word uh so who is this person on stage that's a picture of me when I was younger which is a great joke uh I worked in air traffic control systems for a couple years wrote these uh yeah overflight systems and yeah it's it's very very tricky very tricky stuff to code and then I work in the gaming industry for seven years I'm there somewhere you can find me that uh but trust me I am there and then I was a there we go I was a consultant in Norway for a couple of years and then uh now working at that fact L company in Norway and I occasionally yell at people like I'm doing right now good so what is this talk about because you're probably intrigued by the title right so a good way to describe this talk is it's a bit of silly fun right it's a bit bit of curiosity like a little Obsession of mine and there is a real life use case that you might be able to use even if you don't work in games right so I'm going to give you that one thing but it's mostly the first two right it's like an 8020 right okay so and also this is probably not an area a lot of people have thought about uh maybe one person there in the front row that has probably thought about this no he works in games uh so also uh last year my big talk last year um was way more serious than this one right and it was about how humans learn information that was like the main point of the talk it's on YouTube if you want to watch it it's called learning Rush the wrong way it's not much about rust it's about learning um and in that talk I said this and you can like you can cut into this video of like a video of me when I was younger like unfortunately in this case there's considerable evidence that in many situations that this strategy the one- hour lecture is rather poor this is from 1971 we've known that lectures for learning is not good since the 70s a lecture May Inspire it might motivate and it might inform but it rarely fulfills the principle for Effective learning it's it's certainly inadequate for developing high level skills right so I cannot in good conscience make a talk the next year that tries to effectively teach you something I might do it the year after everybody has forgotten about the first talk but uh so instead I decided to make a fun talk but that has some real life applications so we're going to have fun along the way and then you like have a little one nugget in your head be like oh okay I could maybe think about that also he has a lot of preamble to this talk before I start I will do stuff stuff to video games in this talk if you're going to do similar stuff please and I'm asking nicely only do this to single player non-online games yes a lot of people will thank you for that it's not crazy stuff but it's like I feel I need to add this warning all right cool that's Preamble done okay I have about 300 slides so we're going to keep going right so boring backstory playing video games is a great fun but also I'm a programmer so how can I marry these two things together huh how can programming video games ever ever come together as a whole well you can make games well I as you saw I worked in the game industry for seven years okay done but what if there's another way to put together video games and programming so games are just applications often sometimes very boring applications but what they do is fun so what can we do to control these applications remotely M what are the different challenges you will face by doing this when you trying to interact with complex software like this so even though sometimes what the games are doing is kind of boring that's a lot of it so it can be very very complicated so and can some of this apply to interacting with other software good and since I'm talking about video games I have to be on theme so this is level one all right we're going to level up what if the game I want to play supports this supports playing it programmatically right out the box right who can think of an example of a game that does this yeah sure one bil one billion humans there's a lot of these like these Sim games that are really cool of this um let's talk about Doom yeah who here doesn't know what Doom is oh yeah there we go so Doom I'm going to explain it anyway so Doom is a 1993 first person shooter all right and it kind of redefined a few aspects of video games okay the look and feel I mean some of the earlier games kind of did that but generally Doom Miss is the what people are looking at when designing these games uh online multiplayer and game modifications so there's a lot of things that one game did so no wonder like people talk about this game like it's some Holy Grail right but there's also another thing this game kind of redefined it's video game speed running Aha and in this talk I'm can't go over everything but I'm going to look at the last one right who here has done a speedrun of a game any oh very good very good you would like this talk uh so let's talk about psychology whenever there's a timer people try to be the best try to be the fastest right nobody here everybody here competitive yeah of course and Tom is no exception after every single level you get a timer and you also get a par which was the developer time oh now we got to beat the power right also I love the screenshot because they got no kills all the items and all the secrets in a minute on some level like okay that's pretty cool so because yes at the end of the stage there was a timer and as you can see people are still playing and people are still trying to get better there's a time there from 2019 this is just an example people do stuff to to this day and there are these files these zip files so E1 M1 hanger Alexi in 2019 there's E1 M1 and then uh P 897 which is if I I looked at it correctly it's the number of attempts he's done so he's done a couple of attempts but uh yeah good stuff um so let's download this file right we're curious you notice that they're pretty small few kilobytes and of course from the 1993 internet this is great you're going to have to have the the files pretty small these are called demo files even though the exter is thought LMP so they're lumps uh these are usually called demo files and you can play them um because these files only contain the inputs that the user pressed and during what frame during this Frame they press this button during this Frame they press this button that's the only information that's there this is the header of the file looks like this you're defining the the them the version if in expansion packs any of the flags they might be setting and any of the multiplayer sets and then a little bit of a player State information so that's the header and then every line is a packet that looks like this if you're moving forwards or backwards strafing turning and then some of the actions you can do you can shoot a gun you can open a door y y which means that you can't shoot a gun while you the you press the button to open the door but I I mean it came from 98 93 so that's fine and that's it that's the data and you can load a program this is called X XD and you can see the lens moving forward moving forward and strafing pressing some buttons and if you play them frame by frame you can watch the game unfold and all the statistics and information that's happening here it's pretty cool Doom supported this from the GetGo 93 this is possible because of one thing and this is the the game Loop if you're curious about reading Doom is deterministic okay Doom is a single thread application where every single entity in the map patiently Waits their turn and always in the same order more of the game Loop if you're curious you can press screenshot now right okay no and when they want to do something random it's very simple they pick a number from this table that's the only thing they do it's a pretty random table right seem seems to be random enough and this in index here at the bottom there actually two of them but this index over here uh will be incremented and then the next time some entity wants to do something around them they get the next index and then it's just incremented and incremented cool right that means that if I play a game and save the file and you load it up with the same version as I do I have there we go we have a deterministic view of the world great this is 93 good stuff so what if you wanted to take doom and convert it to C++ or some language whatever you want to do right uh this was initially started by Jason Turner where he did a 400 hour live stream on YouTube to try to convert uh Doom to C++ he didn't succeed because even though Doom is an old game it's still pretty big uh then Patricia o got the same idea and took his fork and said like okay let's try to keep going and since I was working with her at the time I was dragged into the the mess or the fun if you want to compare it and I'm like okay um she compiled the game did some changes compiled the game and then I asked cool did the thing you did work did you break the game and she was like I don't know I haven't run it yet cuz she hadn't played it she was more interested in the coding part of it so I showed her how to play it and lo and behold we had broken something okay cool how can we make sure that that doesn't happen in the future we need to make sure that she can go and just go nuts and do all her friendship re refactoring and then the game is kind of okay after all right so how can you move forward on that project knowing that your code changes and refactorings haven't broken the game or the project right we could try playing the game sure is that going to cover everything probably not we can write unit tests that can help some of it we actually wrote some of them but we have that tool in our hands right now right so there's a thing called approval testing for those who don't know about that it's a methodology where you focus on comparing the output of the old known bit of code with the output of the new one so think of it kind of like a git diff there's a you you get the output you have a bunch of output that you know is good you do the output of the new one and if there's any difference uh oh we don't approve of this right so this is useful when you want to do a complete rewrite or when the original source code might not be available good stuff Doom can run the old demo files and if you give it a flag it will output this kind of little statistic screen telling you what level how long did it take and what did you do similar to the other screen cool yeah the thing I said all right good stuff well and if I play the demo on the new version I should get the same file right all right another tidbit uh the game doesn't need to render anything because the rendering is just a pretty output of the simulation that's happening some of you are like catching along What's Happening Here Yeah the graphic are just the nice thing right then we can add and modify some of the flags that we have to get the game to run terminal only with the demo files this also means that we don't need any of the Sleep functions or whatever we can just run the game as fast as possible because it's deterministic so we just go through the whole thing right the simulation is the same so putting one and one together you play the game with a good known version you collect the outputting stat files you save the stat files next to the demo you run write some bash because of course you hack something together with Bash that's always how everything every good things get done which then runs the game makes the new output file and does a diff of the old output file with a new one and if there is a difference exit one cool AKA Doom running in GI of actions so a lot of the setup is thanks to Patricia doing all the versions in release and debug and whatever um fun fact uh loading the game in 64-bit uh and then creating a save file and then loading the save file will crash the game because the game actually saves the pointer addresses in the save file to recreate the same structure you had in memory it doesn't use the same structure it's just to know which thing was the next thing in the link list right so if you save a 32-bit file and a 32-bit version and load it in a 64-bit version of the game it doesn't work vice versa yeah that's still an open bug but I don't think do people care but anyway so we can build it you can see that building took 10 minutes and there's a fourth to the bottom is demo check it took zero seconds even though I'm running like I think like 10 15 demos it takes no time to run and here for those who those who have run Doom in the old eyes remember this little thing we actually do have the shareware version of the Doom wat file in the GitHub because it's shareware so we can share it so all the demos are running on the share one but yeah runs the game does the diff works fine and then we have a all green build you know that the thing you did is good right cool so now we programmatically run Doom good all right we've leveled up game number one done what's our time o it's good good good time so level two what if the game you want to play doesn't have the support that Doom does now I want audience participation be  who's played this game or who's not played this game maybe maybe a better one H okay 5 six hands good stuff then I can teach you what p is because they will this will be your new Addiction it's a great game so p 3 is a match 3 game it's not the three that matters but anyway where you pick a gym and move it left or right up or down to make a match three or more right that's the only thing that happens when that happens those gems explode and the gems above it move down simple as that you get points you move on very good stuff you can also join four or more then you get a gem that's on fire and then that explodes with a bigger one you get more points and you can do other crazy joints and there's a special Gem and yeah lots of fun things uh after much has been made the Gams go away and new gems Dro down good so I need to play p 3 automatically because that's my need right now and the plan of action is very simple what gem is where that's the first thing we need to do because we need to find out what is the stuff we need to move we need then to pick a good move whatever that means right and then we need to move that gem simple right what is where what should we move and let's move it cool have a loop good uh the project is C++ CM VC package and open CV it's not that much code it's like a few pages uh an open CV uh for those who haven't used this a computer vision Library uh I used this initially I only used it for uh getting a screenshot of the game but you will see I will I I use it a bit more later on but I mostly use it to get the capture the the screenshot of the game or to work with the pixels after I captured the screenshot yeah so step one what gem is where so if you have a modern monitor like I have uh the the game can kind of run in a bigger resolution but if you run it in 800 by 600 it doesn't have the super special fancy effects uh and there's a few other benefits you have but that also means that when you're working on it it looks this big which is not great but it's okay so for your benefit I will make the screenshot bigger so um so first of all what's ms1 if I if you play on the 800x 600 every single gem is 64x 64 pixels which is a great number of course right yeah yes good this also means that the board starts at 261 * 37 that's where the game board starts so if I then just extrapolate I know where each gem is I know the center of it they're always the same size nothing happens like there's a bit of an explosion effect but we kind of don't care about it but from this information I know at least where they are but what gem is it so how do I know that this is the green gem right that's the problem I want to solve now so like with any computer stuff you do let's start simple let's just look at the center pixel cuz they are they're all occupying that Center area so let's just look at that color and if it's the greenish thing I want to to have entone then that's the green one right right yeah there's a problem by doing that because if you click the gem it spins which is great for the game makes the game really fun but for me right now that's a problem so what do we do let's use this open CV that I used to get the initial pixel data they have a thing called template matching so I thought like hey let's be cool the gems like each one of them has like its own shape has like its own color and and everything they are kind of distinct I know where they are power so I can create these templates so this is a a photo of Messi this is from the the documentation from the opcv library they want to find that very excited photo of Messi over there and try to find that in a bigger picture all right so we have I have a thing called template matching so what they do is they have this is the output result this the matching result here and the higher the color the more confident confident it is that the picture is there so so they know that Messi is there because the most brightest color is in that spot and again with a lot of these things this is just statistics so what's the likelihood of the the photo of the template being here not very high because the color isn't so high so there's always some place you can find right so and they have different kind of coefficients they can apply on the the output image but it's kind of the same you could kind of similar results good so I used this try to find out where each gem is so I went up out and created a bunch of templates don't worry they didn't look like this but I just took a a couple of screenshots for the the slides but I got a few of the templates get the images and then I have the application and then I have the application that's detecting the templates can who can see the problem show me hands problem problem yeah one missing why is the one missing can you so yeah so there you can see on the yellow below it because I had the application running for a little while and the game is like well this user isn't very good at the game because they're not doing anything so I'm going to give the user a hint hey user if you move that yellow one something will happen so it's like putting an arrow on the yellow one which messes up with my template matching right this happens once in a while so it's not great but you can see I have a threshold so what if I just mess with the threshold right you could just find a good number and that works right no then I'm too greedy so then this glowing orange one is kind of too much like the red one apparently according to the the matching one um so this doesn't work this I tried different algorithms different coefficients different thresholds I spent like an evening on this this was yeah this doesn't work and I'm trying to figure out like why doesn't this work well the thing with this algorithm is they make the images black and white which kind of kills one of my advantages is that the gems are all separate colors and a lot of these algorithms use black and white some of them use color but yeah I thought like I'm going to have a problem going forwards if I have this issue here so there must be a better way must be like if I go back to the simple simple world so let's go back to the idea of color because that's definitely where my advantage is right what if I don't check for one pixel in the center what if I check for the general Hue of the area so I grab a 32 by 32 pixel area of the center and then I ask open CV what's the average color of that area so if the gem spins like yeah the color is going to like go up and down a little bit in the Hue but it's going to be roughly greenish right so and I check against the Hue saturation and and value of the the color and not the RGB what will happen in the future I will actually also use the RGB as well but let's start with the with the h Q so I've turned the problem into a linear algebra problem CU now I just have an arrow I have a vector that points in this is Direction it's not a vector but it's a number but it's you think about it that way that the green gems are roughly going to be in this area right who thinks that's going to work right I have five confident okay bit more thank you good so we check the through the so this was another thing that was a fun one I had to go and click on every Gem and record the Hue values into a file and get the average number get the max and the Min number and do this for every gem do this for every shining gem uh do this with gems and different black background elements um so this took like another evening of just collecting the data uh but I made a chart of what is the max and the Min of the Hue value of each Gem and you can see for a lot of them they don't overlap like the orange and the the yellow one was kind of like on the The Edge and you can see with the red and the purple there's a part where they do overlap but hey it's a lot of it is is uh decidable so then I got a very complicated function an incredibly complicated function that just takes in the two scalers the hu value and also use the re Rec green and blue to just help dis disambiguate fut them out get the values and this is a very complicated statement if the Hue is roughly between those two values then you are blue and then it just keep going on like if you are between these you are green if you are between these etc etc I simplified it a bit because it's like was mixing things together but you get the get the idea right so you think this works huh yeah beautiful there's one gem where this doesn't work cuz there's like this super gem that's like black and it has all of the colors and it spins so but don't tell anybody about that one that's a we can ignore that one all right but yeah this works and I get all these beautiful colors and if I play the game and I I did like sample test on this and yeah I get the correct values out that was step one step one where are the gems CU step two is pick a good move CU what's a good move who knows right initially again like oh let's do some cool algorithm deep learning yada yada but after all the color Fiasco I'm like no let's see if something simple works first and it was so this was great excuse to go and play the game cuz I hadn't played the game much before that like Patricia like no no no I'm I'm interested in colors who wants to play video games so I play the game a little bit only 14 hours which isn't much in in many cases but yeah I played the game a little bit uh I haven't recommended it yet but uh we'll see maybe in the future and I had an idea there aren't actually that many moves in this game I was playing it of like that there are just a handful of of basically not moves but only four moves like what are the set of matches that can happen and there aren't that many you can match three you can match four and five and then they have a little bit of variation of where the gem is so can't we just map all them out can I just make a list of them so I did so I made a little format very simple format where I have the idea that there's I want to make a b and c but there's some X in the way looks kind of like this so the C is always the point that I want to move and the a b and other letters are the point that are stable that are not going to move so we're always looking for the C so I put push in the points that are the a point and the B point so the a point is the the basically the origin and then the B is minus one in the X from that one and then the C is then minus three I call it something give it an enum and then I have the solution so if you have this setup where is 0 -1 -3 the solution is to do this kind of math operation you do plus one on the First Column you do nothing on the second column that's how you solve that one so if you if you ever detect this setup then this is how you solve it right I give an ID and then I give it a value so this value has one because and I put it in a list because if there are more complicated setups that have more gems in it so a b e d and then the C comes in in the corner I put all of them in and the C is the one last one it's called Corner five you do a minus one on the last one it's id30 and I give it a value of three because if I find this one in cuz what I'm I'm creating I'm creating an array of all the colors which are just the which are just U the character values so if if I find this one and I also find the other one I want this one first because this one has more points this is more valuable so I give it a value of three which is some just some value so and I don't know if this is fate or whatever or I probably miss some there are 32 of them which is kind of like as a programmer brain like wait that's must be wrong but maybe there's some mathematical higher higher thing about why this is 32 but there are uh and then for every image that I'm looking at I go through I find all of the uh possible solutions of this current state and then I sort them and I pick the top one that's it and then I perform that action so what but which one of them should I pick so okay I do the Sorting but there's one other thing yeah higher value moles are always sorted above the lower value moves but what if all of them have the same value well then I pick a move that is is lower on the board that has a higher y value because it's lower on the board because it creates more opportunities because when the gems break the column moves down and if the column moves down there's more opportunities for like an automatic match because there's more stuff happening if you match at the top one only one row is going to move down if if you get the bottom one you get weigh more right so I pick that one and if there's two in the same row I just pick the whoever I decided to be first that's fine so step two way easier step three is even easier move that gem because now it's time to interact with the actual application so the windows SDK has a lot of nice Mouse input functions so let's just use them right I basically want this function I have the window because I have the handle I know where I have to start because I know where all the gems are and I know the distance the offset of where I want to move to because I know what move I picked because there was a solution to the the earlier problem so and this is one uh that someone can come and help me out later this is the function to get the mouse position when you have an absolute window so sorry about the nerdy technicalities I say in a in a programming conference but I have to do this and I try to use client to screen or screen to client or whatever it doesn't work I have to do this magical multiplication or division or whatever I'm doing just so I can do the cast of the mouse position of where I am so if you have a simpler way let me know or do a PO request there's a there's a thing at the end but anyway this is a way to get the mouse position from the I want to get the game world uh position of the mouse right so and this is going to look like a lot of code but this function is actually pretty simple I call this function I called before so now I know where on the screen uh I want to start from I move the mouse to that position so I create a move object give it the values say it's an absolute absolute uh coordinates and I I want to move and I then send the input and then I click the mouse I get the same coordinates for the end position I move the mouse I release the mouse that's it so this is a wonderful function that takes up a lot of code because who doesn't love a lot of code all right so who wants to see this yes all right good stuff well too bad no I'm kidding so I have the game here running been running the whole time and I want to make a new game here it is I can have fun I'm sorry I'm just going to play the game no I'm kidding and then I clink CLI this and demo guards yes there we go um yeah so here's the thing um oh oh we got the black one good it matched it of of course of course yes yes yes very smart smart [Applause] AI so it finished the level um and then it just continues it just plays the game i' I've gotten it to go through multiple levels thank you thank you and uh I have gotten a couple of times where it gets stuck uh but that's pretty rare I I just make it Loop x mon of times there's another thing I haven't talked about which is if I go to I think it's in window of course the I can do this I'm searching for sleep oh here it is it's a big ass sleep yeah uh I do it 100 times I do an update and then I do a draw and I sleep for 300 milliseconds because it's too fast so there's a thing with the game is that if you do a match and stuff is falling down you can do the match in the air this is the thing I learned about the game the game doesn't lock the state of the world when it's doing the moving so I've I've seen it do like crazy stuff where it's like matching things in the air or doing another column while the other columns falling down and so for demonstration purposes I make it sleep so it looks more like a human but uh it's too fast that's the other thing cuz I thought it was like it's doing a yeah yeah you gave me a hint uh I thought it would be like like taking a screenshot doing these analysis andever like no no no it's very fast so it works pretty well and there's a link to the repo after the end if you want to have fun like I did uh I haven't done any measurements on it but it's uh like it's clearly more than 60 times a second like it's it's very fast oh that one I haven't actually looked at so this is you can go and try it out go play with with it uh yeah so should we level up what's our time o our time is good let's level up what if the game has none of this right so who's played this game I asked I asked instead who has played this instead of who has not played this because there not probably not a lot of so I got like three four hands who's played this game so this game is called VV VV v v v yes so I'm just going to call it V just for the sake of of gravity it looks kind of like this this is like a demo level it's a platformer uh and the gimmick is that you can't jump but you can invert the gravity so uh and of course spikes are bad so you click the the space bar button and it flips the gravity and you of course want to avoid the the with the spikes and sometimes get these little Trinkets and have a little fun so it's a platformer game it's a lot of fun and I recommend so this game does not have built-in support for giving the game inputs all right so I thought like hey I can use something like the the bed setup but the game doesn't have a simple game State like the game the like the B game because you're going between screens there different levels yeah there's a lot of things you have to look out for and also like each level has like different color themes and different patterns so there's a lot of things you have to think out I look out for so it's end fast paced you need to be pretty accurate with your movement and and do all these things so I thought do the POS I thought like hey I'm going to be hacker man I'm going to do something really cool hacking what ended up happening is I was more like this because yeah this is uh can can can go Cy weird uh one thing before I continue because not everybody has worked on games uh there's one concept concept I need to talk about that is the game Loop all right games are applications just like anything else and they usually follow a certain set of steps they get the input from the user they update the state of the world and then they draw the state right that's what generally the idea that's happening there's a a few caveats that can make this harder there's probably more uh so a lot of the stuff that I'm showing you has probably an asterisk at the end of it uh getting the input from the user well there might be no input or if you handle the input badly we might delay it or we might miss it like if someone captures the input uh or grabs the input before we do uh updating the state can take a long time sometimes uh and also might be multi threadit or when it happens might be hard to hard to find out and drawing the current state I mean we might be drawing the Old State or it might be offloaded to the graphics card or you have no idea what's happening so a lot of a lot of it depends here so but usually what's happening is you initialize the game you process the input you update the game State you draw the game State and then you go back up and this usually called a frame this is usually less than one millisecs and the fun thing is how long this is it depends and how long this is it depends but for many games you want this to happen at least part of it 60 uh every with 16.66% theory about what a game Loop should look like but just to give people examples so we can get some initial data and and a clock time we have an infinite Loop because of course we have we get the time and we accumulate the time so how much time has been uh spent we process the input and then we ask while the accumulator is more than Delta time we might update the game state with the Delta time we decrement the accumulator so we've we've processed one uh one section of the the time and then we might draw the game state so in this example of a game Loop we process input as often as we can we sometimes might not update the game State we sometimes might update it many times but we try to draw as often as we can and in some cases uh when you process input you might also sometimes not uh might sometimes uh sometimes not always uh like depleted from the queue you might say like there is input to look at but there are many ways to do this so we process the input this thing because if if the loop is happening or we're running through it every 1 milliseconds then every 16 times this if is going to hit so we're going to say okay let's run this one time then we subtract one duration from that you might also owe time sometimes that happens if you click the the status bar on the windows the application kind of freezes and you let go then you've owed a bunch of time so you update the game state that way so anyway uh then you draw the game state so V actually has a few advantages and it's kind of why I picked the game for that project it's open source so if there's any questions that I have I can just go and check so here's the loop and there's a certain thing about this Loop because it's asking for what's called over 30 FPS mode uh and the game actually has the one of the advantages that make solving this problem easy here is that it does one input check one uh update state of the game State and then one draw every frame always does the same thing and then it sleeps for the remaining time and goes back up not all games can do this but this makes our problem solving way easier so it's single threaded as well and it has a lot of customizations it even has speedrun options so if you want to go through speed ring you can do that so here's my plan I'm going to launch the game in a PA child process of some loader so I have the game process so now the game process is a child process of me and I will inject the dll into the game process I will then hook the function that creates the diex device which is the thing that the game uses to draw to the screen I will get the address of that device and then intercepts the game's draw call and then call our draw functions and our my code whatever I want to do first and before each frame I will then send to Windows my keyboard inputs because then after the game is finished drawing the next thing it does is looking for inputs then it's my inputs I sent before the previous frame I will go on and have fun so if you go back to this image I'm hooking here I'm intercepting the game is draw function and sending our inputs some of you might thought wait couldn't you just hook the input process like that's the place where the inputting inputting happen so you put your input there and then you let the the game do the inputting the reason why we do it down there is also we want to draw some deug UI so that's a nice place to do it so we we intercepted a draw call because it's going to happen anyway the input checks all right so another things you might think is wait that's illegal and windows thinks so too operation did not complete successfully because file contains a virus because yeah this is what viruses are doing or some of them not all of them but yeah this is very viracy Behavior Uh and the issue I had was I could not run this by the life of me except like turning off Windows Defender which I didn't want to do but the benefit was uh there is a way to do hooking that the Windows Defender doesn't yell at you I don't use that way cuz when I did the talk previously someone mentioned there's a different way also it doesn't happen in debug mode so what you're going to see see is debug mode that's what you're going to look at all right uh I use detours and the other way is there's another hooking package that you can use but DS is from Microsoft um and it's a bunch of helpful utilities to do this kind of thing where you're injecting code into other code so and detours it's kind of a fun way um for those people who haven't done this kind of uh things uh usually the idea is you need the you need the address of the function that they are going to call and then you place that address with your basically function pointer and then when they call your function by accident because you changed the address uh your function is called and then you can call their function so you can do your stuff either before or after their con function has been called that's kind of the idea of of what we want to do uh and for those who haven't done any dll stuff uh we initialize detours so there's a TL Main and usually when you have a TL Main you have an attach in them that happens because the dll main might be called many times so we have an reason for call is an attach or a reason for call is a detou and then you can do your stuff in that place that's kind of the the idea I won't do it this way but if someone wants to have fun with DLS this is kind of the the things that are happening so again also I thought okay I need to do all this like Dix 9 because that's what the game is using like hooking of the draw calls and LA isn't there someone who has just done this there must be someone on GitHub that's just done this stuff so thank you Tom gascoin and if you're watching this video you're very helpful your code from 12 years ago was basically the basis for this project uh and I like his last commit whoops forgot to commit a new class same I have I have been in your shoes as well but this was a very like very barebones way of like the only thing he was doing in this project was just hooking The Rock H and printing some stuff so I was like great this is exactly what I need which was good stuff so what I do is I need to know what dll I'm loading so I I have a have that saved there and what the flags of the application I want to uh start so I want to create an application that's suspended so Windows is going to spawn the process of the game but the process isn't allowed to do anything isn't allowed to continue until I say so basically and then I create that process but what happens is my dll is allowed to do things but the game process uh it's not allowed to do things so I can run my code but the game isn't allowed to run his their code and then at some point um the thread is resumed after I've done my stuff and then we'll wait forever until the game quits and then I have a little exit message at the end that's kind of the the the structure of my code so my D main looks something like this I will call a function I call hook create device and then I will go away that's the only thing I do I don't do any cleanup because I own the process it's not a process process spawn by someone else so I don't have to care too much about it and you get this uh you can notice that I have a me message box a for for an error message if you're doing DL stuff or or this kind of thing message box a is going to be your best friend because that's often you can't debug into these applications or we do like debug stepping so putting up a message box is going to be very common uh can be very helpful but if you can debug wonderful good stuff so the first thing we do is to hook create device so this is the first bit of sneaky stuff I do is I create the diex 9 device okay do I care about this diex 9 device no I only want the virtual function table so I get the address which is a I love this cast that it de D reference a dword star but get the dword star which kind of yeah gets the thing exract it and yeah now I have a pointer to the the virtual function table and then I release the device because I don't care about the device I only care about where in the address the virtual function table is and then I have a little helper class for VM protect uh and then I I know where in the virtual function table the create device uh function is because it's always the same offset so I know the offsets that I'm going to save so I have that saved somewhere the size of it is a dword uh I want to make that read and writable because it's not read writable to begin with and then this is the action little Lambda this is the action I do so I save the original function pointer and then I put my create device hook into that address so again I want to know what their function pointer address is and I replace it with mine so when they call their function they're actually calling my function and fun fact if you run things like Ops or fraps or any kind of these applications they are all doing this and replacing so when you're Runing an applications and someone is calling a function it might actually go through a few layers of these uh indirect redirections or they're all thinking they're very sneaky but they're just replacing the other applications pointer and whatever so everybody is being very sneaky all right so summary spawn the game process it's passed good attach our DL to the game process we've done that good hook the create device function okay it's now hooked then once the game calls the create device function we just get the device that they made because we make it for them and we hook the end scene function we can't do that in the beginning because we need the actual device they're using for the for the create one that's a fun that's a function pointer we can replace initially so this is the create device hook that the game will initially call and of course we're being nice so we just create the device for them that's good stuff uh have a little error message and then uh I make it routable again so I I'm I'm a nice boy and I put the memory back and then I get the V table of the device that I just make I get the end scene function pointer so for those who don't know nend scene is the game sets everything up makes everything ready and then when they think they are ready with the the data that they want to show they say end scene and that data is then sent to graphics card or wherever you want to send it uh so that's the end scene is basically draw the things that I I just made and then I put my function there all right and then yeah we get an a message that says game rendering hooked I I really like that it has already loaded 3% of the game when happens I don't know why that is but I think that's very funny so then I now have a function that's called every frame every time a new frame is being rendered on the screen I have a function that's being called all right I call the actual render frame because okay I'll be nice with them uh and then I can just count I have a static variable in my scope that's just there and then in frame one you go back to our good old friend the windows keyboard API or all that stuff and I say press the space bar button on frame two release the space bar button and this works this will then press the SP space bar and release the space bar the first frame possible okay so what can we do with that well we can make the function a little bit more complicated I load data from a very complicated file format that I made that looks something like this so on frame one don't do anything on frame two there a big S so we press s on frame two there's a little s so we release s and then I can just describe every frame what I want to happen perfectly every frame of the game so then I just go through the file and ask like hey on which frame are we cool get that line from the file press that button if it's a dash don't do anything right so who wants to see a demo yeah here we go there we go let me see close this so load there Let Me Maybe oops minimize this so it's simple so it plays the game again yeah and then it goes perfectly there there avoids the yep oh goes up there and then it ends there it don't do anything else you can see in the top corner there's a little uh debug window I can see what frame it is and I can see how many milliseconds each frame uh took and I have a little button UI where I can press and I can slow down because I can just put a sleep so just sleep x amount of times because every time the new frame is called that's what I increment the counter so we can slow it down even more when I go down so this is how I built the files is like I'm like okay on frame 219 I should press space on frame 222 I should press this button right and then I can see that up up ah I hit the wall so it went there so this is how you can play it so then I make a few I think it's train get so I play the difficult challenges of the game and then yeah I get the cool trinket right for those who've played the game it they know that it auto saves uh every time you collect one of these but if I run it again I can go and play it again and you see the trinket is still there because I have the save files and I overwrite the save files every time I do this so I have the actual Save State of of each thing uh and the fun thing about this maybe do it this way no I think I I hit a button sorry yeah I hit some buttons it can be kind of finicky sometimes so I want you to look at how this is running and then every one frame a second I promised you in the title there's a thing called coyote time in video games which means that you can actually press space bar or like jump or whatever after you've okay was pretty close there right but you can actually press the buttons after you've left the oh and then space it's called coyote time who who thinks why it's called coyote time WHYY coyote because it's pretty fun so it's a it's a fun thing to play with uh for those who have played this game uh you're going to be very annoyed with me right now and then yeah okay I get it I get the drink CU you can't jump and there's a little box so you have to jump all the way up and down and and try to get thing so this is the hardest challeng in the game it took it still took a little while to make but it's uh yeah playing games one frame at a time so to summarize here we go good time games are neat right yeah yes thank you and it's fun to play with them programmatically um so when you have an application and you don't have the source code for it there are still ways to automatically interact with it AKA yes you can still test that old Legacy app so yes this has been a testing talk welcome you were on a you at a testing talk and yes you can still do the save for factoring because you can do the approval test and you can know a lot of things about the application so write more tests for those who are curious about this kind of gaming thing uh for those who have never seen these tool so there's this whole section of things called tool assist the speedruns which go over all these games and play Mario Pixel Perfect and all these things uh on task videos there's also on YouTube a bunch of videos if you want to watch there's this whole community that you can now obsess over just like I do uh they play on all of the operating systems and consoles and play all the games and people are all absolutely obsessed with this and they are way better than this than me and they make way better code than I do because they have these tools they do this stuff what I've been doing they do some of it some of they they can do it because they have the emulator so the emulator supports it so it's through the emulation not through the hooking like I'm doing um for those who are curious about Doom there's a called a doom speed demo archive uh and it's actually them uh that I used some of the tests from the earlier because they have a bunch of the edge cases so they know the little quirks of the engine and they have demos of the quirks so some of the quirks I actually have in my test this to see that the quirks are still there and they're still behaving correctly uh there's even a demo in there that like the person is playing for like 8 minutes and it runs in like a few milliseconds the whole thing so if you're curious there's doom and classic Doom uh these are the repos it's usually me and then I have some stuff under it and the Doom one is under Patricia Patricia o is repo if you're looking for that and then that's my face again thank you so any questions comments angry runs that jokes uh I'll just mention you probably seen that but other people didn't so uh in Doom right they are using this kind of techniques to find things so they fuz that old Pinery or whatever and like for example discover how you can kill all the monsters in the room room where you're not supposed to kill all the monsters and that kind of stuff and there are people who are trying to beat the game without killing any monsters called pacifist and there are some levels where you like can't but they found like if you look if you stand here and look at this Pixel Perfect angle and you do some movements you'll teleport through the wall and like and they they didn't find it they used like almost like a machine learning of like iterating through and like finding weird behaviors and yeah people are going all out absolutely all out so if you want a rabbit hole that's very deep Doom speed ring and doom things are very deep any more comments thoughts angry rants I think it's Sunday I think people want to do something else you can also yell at me if you see me somewhere all right anything from online no awesome then thank you very much and have a lovely lovely evening