all right hey C++ paper paper cuts uh my current day job is now again a C++ rule Hertz i' I've been there I recently had that happen like six months ago where I had to go back into C++ land for a while always is emotional bruising uh and so I find myself yet again focusing on this blog post on the downsides of C++ overall I have found returning to active C++ Dev to be exactly what I expected I still have the skills and can still be effective in it but now I have uh worked in a more modern programming language with less Legacy cruff the downsides of C++ sting more isn't that funny how that is like when I used to program for i7 and 8 IE8 felt like a godsend ie7 felt horrifying I think the rest is very very obvious as your environment and Things become more modern the feeling of pain becomes more real uh there are there are so many features I miss from rust not only the obvious safety features uh this one I feel like um Like the quote unquote safety features just throw things in unique pointers and shared pointers and you you have like 95% of what you got from the borrow Checker it's pretty nice or even primarily those but also features that C++ could easily add like some types uh called enums I mean you have t you have you just have less convenience Syntax for this I mean you still have that you just have to make a little Union type discriminator and boom you got it right it's annoying but I get it I get it or first class support for tupal but it doesn't quite have the same it's definitely more dangerous I will I I agree with you it's more dangerous it's more dangerous uh I I you know or first class support for tupal uh actually I do like tupal tupal are glorious uh tuples are glorious until I use them I swear every time I use a tuple that zero and one syntax triggers me it just triggers me you know you use a tuple because it's convenient and then after you get done using a tuple you realize a struct is no different than a tupal but it just has nicer names and you go why am I using that smart pointers are slow this is true uh smart pointers are much slower you're absolutely right but so is the 1,000 calls to do clone in my rust program okay that also is very slow that also is extremely slow so it's like which slow do we want to use I don't know which slow would you like to use I'm just saying I'm just throwing it out there that I agree that having a compiler check the unique pointer of things is much better but they are slower uh before I start getting into the paper cuts though I want to address one of the primary defenses I've seen of C++ one that I found particularly baffling it goes something like this C++ is a great programming language okay that is baffling I don't know anybody that says this like I don't know anybody other than game devs that say this okay this is very strange take what is this uh the complaints are just from people who aren't up to it if they were better programmers they'd appreciate the C++ way of doing things and they wouldn't need their hand their handheld language anges like rust are not as helpful for such true professionals the thing is is you can make the identical argument for rust you start using rust and you make some bad design decisions early because you don't understand and then you get into this point where your program becomes just unmaintainable without a full rewrite because you've just just done up the rust way of doing things and people are like well if only you understood the idiomatic rust way of doing things again it's all skill issues in all languages that argument is just a a snoozefest it's always been a snoozefest it will always be a snoozefest and it exists in every language it's just some make it some make it easier for you to go longer with your bad decisions and I think that that's a good thing okay I'm going to throw that out there that's why I think go is so successful because you can go longer with a bad decision than you can in Rust think about that for a second obviously the uh the phrasing is a bit of a parody but I have seen this sort of attitude so many times the most charitable view I can take of it is that a a claim that C++ difficulty is a sign of its power and the natural cost of using a powerful programming language what it reads like to me in many cases however is a form of elitism a general idea that make uh making things easy for uh poor programmers is pointless that's why we invented uh JavaScript okay you let the poor programmers use JavaScript I'm getting canceled today boys uh and that good program don't benefit from making things easier uh as someone who has programmed C++ professionally for a majority of my career and who has taught a company inter internal classes in advanced C++ this is nonsense to me I do know how to navigate many paper cuts and foot guns of C++ and I'm happy to do so when working on a C++ code base but experience as I am they still slow me down and dist uh distract me taking Focus away from the actual problems I'm trying to solve and resulting in less maintainable code yeah I agree uh it sucks I am no defender of C++ as uh as for the upside I see very little any way in which C+ plus is more performant or more appropriate than rust in terms of platform support Legacy code bases optimization that are only available in specific compilers that often or that happen to not support rust or other concerns irrelevant to the actual design of a programming language I mean there are in there are a lot of things that are very nice you know like when you're doing uh a uh an array of strs and you're mutating and you're playing around the amount of dancing and things you have to do in Rust are not as much as you have to do in C++ granted there's more foot guns but there's things you can do in C++ that are just simpler problems to solve than you can do in Rust uh while I'm proud of my C++ skills I am not too proud to appreciate the better technology can render them partially obsolete uh and I'm not too proud to appreciate that uh having features that make it easier in most cases it's not a matter of programming languages doing more work for me but of C++ creating unnecessary uh extra make work yeah this is this is perfectly reasonable take often due to the decisions that made sense when they were made but not long since stopped making sense don't get me started on header files yeah header files are a bit emotional for me um me hates it I I do want you to know that I'm not ragging on Rust it's just I think that people with excellent C++ background are the worst rust is the greatest people because you can take you can almost virtually transfer all of your thoughts about C++ onto rust you know what I mean the reason why header files suck is that it's called the module why do you need to define the same thing twice what the hell are you doing defining things right it makes it literally makes no sense that you have a file that says here is what my class looks like and then you have another file that says here's how you implement it and yet it's for better compilation speed you know what's way cooler single pass to create the header second pass to create the thing okay it's called a two pass compiler or a three pass compiler or an N pass compiler okay they've been doing it for years somehow I'm able to State several functions that will be used and it doesn't have to compile the whole gosh darn thing to figure out what the hell I'm exporting right it doesn't have to be crazy yes yes yes and header file still has all the private members of the class inside if I remember C++ is seven passes which is crazy I don't know if that's true but that's wild right single pass you can get the shape of things right you can make these decisions you don't need something to tell you what's already available uh but I also want my programming a language to be beginner friendly I'm always going to work with other programmers who have a variety of skill sets and I would rather not have to clean up my uh colleagues mistakes or mistakes of earlier more foolish versions of myself if making a programming language more beginner friendly sacrifices power then I agree that some programming language should not do it yep I yeah I agree with that go go is a great language for this but many even most of C++ beginner unfriendly and expert annoying features do not in fact make the language more powerful so without further Ado here are the biggest paper cuts I've noticed in the past month of returning to C++ development love it love it Con is not the default yeah I do agree I think that this is probably a better way of doing things I do like the idea of specifying mutations as opposed to spe specifying um specifying uh constant I think that's a better tradeoff to make uh and remember with JavaScript you have to do a const const right they're const pointers they're not constants so it's like a double one you got to be extra careful uh it is very easy to forget to Mark a parameter con when it uh when it can be you just forget to type the keyword see that's the thing is you never forget the type the mutation word but you will always forget to type the const word it's very very true this is especially true for this which is an implicit parameter there is no time when you are typing out this parameter explicitly and therefore it won't sit there looking funny without the appropriate modifiers uh if C++ had the opposite default which every value reference and pointer was con unless explicitly declared mutable then we'd be more likely to have every parameter declared correctly based on whether the function needs to mutate it or not if someone includes a mutable keyword it would be because they uh know they need it yes it actually I I do I love this take by the way I think this is one of the big wins of rust in other languages like o camel o camel pioneered it for rust I think there's I'm sure those languages o camel got it from if they need it and forget it the compiler error would remind them exactly exactly you want the compiler to tell you when you're wrong and this is beautiful now you might not think this is important because you uh can just not use con and have functions with capabilities they don't need but sometimes you have to take things by const in C++ if you take a parameter by non-const reference the caller can only use l value to call your function but if you take parameters by const reference the caller can use l values or R values so some functions in order to be used in natural ways must take their parameters by cons reference once you have a cons reference you can only easily call functions with it and accept uh con references and so if any of those functions forget to declare the parameter const you have to include uh const cast or go to the function later and correctly accept con unless you think this is just a sloppy newbie error note that many functions in the standard Library had to be updated to take const iterator instead of the addition to iterator when it was discovered correctly that they made sense with a con iterator uh functions like erase it turns out that for functions like erase the collection is what has to be mutable not the iterator a fact that maintainers of C++ Library simply got wrong at first that's pretty impressive to get that wrong right obligatory copying ah sounds like are we talking about about rust now is this rust are we talking about rust in C++ for an object to be copiable uh is default okay I do I do actually agree with this I hate the fact that default is copy there's something so effing emotional about the fact that when you take a vector and go const a equals this Vector con b equals a you got yourself a copy and there's something it just it it I I agree I agree I've chased down many above has been due to that one thing just just hurts if you don't want your object to be copiable and all of its fields are copiable you often have to mark the copy Constructor and copy assignment operator as equal delete the default is for the compiler to write code for you the code can uh code that can be incorrect yeah yeah if you do make your class move only however beware because that means that there are situations where you can't use it and C++ 11 there is no ergonomic way to do a Lambda capture by move which is usually how I want to capture variables into a closure no similarly uh the standard function expects the object it manages to be copiable and will fail if compile if your closure object is move only this is going to be addressed in C++ 23 which should come out in 2020 in 2033 uh with standard move only function but in the meantime I have been forced to write classes with a copy Constructor that throws some sort of runtime logic exception and even in C++ 23 copyable functions will be the uh the default assume situation I love runtime exceptions for things that should not be runtime exceptions feels good using standard function not like this this is strange because most complicated objects especially closures are never and should never be copied generally copying a complicated data structure is a mistake missing a and or a missing standard move but it is a mistake that carries no warning with it and no visible sign in the code that a complex allocation heavy action is being undertaken this is an early lesson uh to new C++ devs don't pass non-primitive types by value but it's possible for even Advanced devs mess up from time to time and once it's in the code base it's easy to miss agree I dude I This Bites me at least every time I start back back up in C++ This Bites This Bites me once I mess up something and it takes me like a a good oldfashioned GDB printa time to figure out what the hell did I do wrong uh bu reference parameter paper cuts it is unergonomic to return multiple valuables by Tuple and C++ everybody loves standard tupal come on it can be done but the calls to standard tie and make tupal are long-winded and distracting not to mention that you'll be writing un idiomatically which is always bad for people who are reading and debugging your code as a result C++ often resorts to out parameters I love that c so thoroughly loved the idea of out parameters you actually have an out keyword so that you can have out parameters in C chef's kiss on making hard code uh in this as well as other situations uh you end up taking a parameter by non-const reference meaning the function is supposed to modify the par uh the parameter the problem is the only uh this is only marked in the function signature if you have a function that takes a parameter by a reference the parameter looks the same as by value parameter at the call site really return let's see return false on failure modify size with actual size message decreasing it if it contains more than one message message nice dude who abbrev message like that okay can we just time out this entire thing and just realize that this is that that I I personally have some problems here okay I got some problems going on here long before any of this is taking place you know what I mean that is cursed it is cursed messy that's totally unhinged dude it's totally unhinged if you're reading the calling code quickly it might look like the resized call is redundant but it is not size is being Modified by got message the only way to know that it is being modified is to look at the function signature which is usually in another file yeah I do agree again specify specifying mutations are better than specifying constants I think it's just generally accepted that it's true 100% at a time Some people prefer out parameters in and out parameters to be passed by pointers for this very reason I can purchase that this is great or would be if pointers weren't nullable what does a null pointer parameter mean in this context it is going to be is is it going to trigger undefined Behavior what if you pass a pointer from a caller into it people often forget to document what functions do with a all pointer options are just a great way to to type system specify this and I love it Um this can be addressed with non-nullable smart pointers but very few programmers actually do this in practice we are like we kind of require ourselves at Netflix to do this smart pointers are great in general they're great yeah they're a little bit slower but you know it's really slow debugging that's really slow okay that's emotionally slow you know it's you know it's even slower the JavaScript were running underneath okay now that's the where the real slowness happens when something isn't the default it tends to not be used everywhere where appropriate the sustainable answer to this is changing the default not uh heroic attempts to fight human nature Fair uh obligatory side gripe at least in non-owning situations like this it is possible to write such a smart pointer however if you want to write the obvious uh companion a a non-nullable owning smart pointer a companion version of standard unique pointer then it cannot be done in a useful way because such a smart such a pointer cannot then be movable I don't quite understand that this man has too much C++ power for me to understand method implementations can contradict oh this sounds exciting just always write the code correctly the first time LOL fourhead five head on head I refuse to use Smart pointers interesting really you refuse to use them is it because of the atomic increment I wish there was like one thing I say that rust also does very well is not allowing nonatomic pointers to be po to be passed between threads I think that that that's a really nice thing because that way you can have a literal plus one a very simple you know smart pointer the RC to be passed around and then you have the more costly arc when you need something right smart pointers are awful they're not that bad awful a pretty int word for it they're not great okay I prefer having my compiler be a smart pointer but but awful is a little intense yeah if you have a if you have a c API don't use a Smart pointer um anyways all right for many cases uh for many classes the default implementations are enough and if possible you should really rely on them or you should rely on them whether or not this is possible depends on whether uh naively copying all the fields in a sensible way to copy the entire object which is surprisingly easy to forget uh to consider absolutely but if you need a custom implementation of one of these you are on the hook to write all of them this is known as the rule of five you have to write all of them even though the correct behavior of the two assignment operators can be completely determined by the appropriate Constructor combined with the destructor the compiler could make default implementations of the assignment operators that refer to those other functions and therefore would always be correct but it does not implementing them correctly is tricky requiring a techniques like either explicitly protecting against self assignment or swapping with bu value parameter in any case there are boiler plate and yet another thing that can go wrong in a programming language that has many such things wait until your friend implements a template for you to solve this problem gosh conclusion unfort I look at me I'm getting all steamed up I'm steaming right now unfortunately I'm too well aware of why these decisions were made and is exactly one reason compatibility with Legacy code C++ has no addition system no way to deprecate core language features if new addition of C++ was made it would cease to be C++ though I support the efforts of people to uh transition C++ to new syntax and clean some of this stuff up yeah but Russ doesn't break backwards compatibility either I think there's been one such case of a method being completely removed uh due to some gigantic security violation but even with the additions I don't think it it removes anything right I don't think there's anything that says that it can't be undone C++ 2 when you should see C++ 23 before we talk about C++ 2 okay buddy for Russ is a new language yeah I know Russ is a new language that's expanding exceptionally fast just wait for this article to exist with rust it's going to happen right however if you ignore backwards compatibil it's going to go back to O camel it always goes back to O camel don't worry it's coming back The arc's Happening um however not not Atomic reference counter by the way uh if you ignore backwards compatibility in the large existing code bases none of these paper cuts make the programming language more powerful or better just harder to use I have seen good faith arguments in favor of uh human- maintained header files surprising uh as uh that is to me but I challenge my readers to tell me what is beneficial about C+ plus Plus's design choice in these matters I agree you might find these things trivial but these all slow programmers down while simultaneously annoying them if you are experienced enough your subconscious might be Adept to navigate it but imagine uh what your subconscious could do if it didn't have to but how Adept are you at seeing these mistakes in a code review from your Junior colleagues impossible uh if you are a rigorous reviewer how much more time does it take how Adept are you at finding these issues quickly when a bug arises these are great questions honestly this these are great things o cell sucks you suck okay you know what we're not going to have this you know what this is n 1984 going to happen right here that message never existed get the hell out that message uh what would be more effective uh let's see we'd be more effective more efficient and happier if these issues were resolved programming would be both enjoyable and faster to do what's the downsides the only upside is uh Contin uh continuity with history and while I can see the value in that it is very limited value with very limited scope I agree this is a great article this is a great article on some of the C++ paper cuts I really agree with the the the uh the the the five one that is the rule of five it is just so painful and I've had it happen to me and it it's just like it can go terribly wrong okay hey C++ is cool but man does it have some foot guns the name is the foot gunen