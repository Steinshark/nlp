why should you stop doing code reviews I would like to thank Baptist Barberry an uh Antoine guy Maxin zelik and rapael sard for their time love okay awesome code review is one of the most used methods in software development we all know what are the benefits of doing code reviews okay yep okay so why should we stop to sum it up doing code reviews enables verification of new code quality by identifying future bugs ensuring tested code and ensuring readable code I don't code reviews doesn't do this readable code is debatable primarily I've always taken it as this I don't think it's this at all that's CI CI is ensured that you test code okay okay okay I hope this isn't an AI article I really do hope this ain't no AI article chances of AI article press one press one in chat if you think this is going to be an AI article one in chat if this is going to be robots will now do a will do it okay well hopefully not moreover by reading code written by others developers can learn from others a junior developer can learn by reading the code of a more experienced one this is true it's actually a great way to get familiar with the project is just seeing how people make changes they can ask questions using comments vice versa a senior developer can check the code of a junior and provide more constructive feedback I won't go deeper into code review benefits in this article more information you can read in amazing work by Trisha G uh for instance in this blog post however in code let's see is code review really worth doing what are the drawbacks we face during code review nitpicks nitpicks I don't like the function okay you use length but I like get length Okay I like verb can I do verb okay we want a verb first shut up I'm sure you fa some of them several times all right code reviews code review pitfalls all right the pingpong review some comments are added you take them into account some new comments are added you take them into account new comments are added and so on it's really frustrating for the merge request author even more when it happens with several reviewers yeah I mean that that does suck it does suck when you expect people to like there should be a timeline right if if you're tagged on a PR and you just do nothing for like a day and it's for your job kind of sucks you know what I mean like you what you should have is lgmt with lgmt uh DNL right looks good to me didn't look did not look right you should just have a way to say I'm not going to look I'm not reviewing I'm backing out because it's ridiculous to have someone review you do all these changes then someone else review and want different changes and their changes are like conflicting and stuff like that totally buy that the redesign review Once the merge request opens you receive uh comments indicating a large design issue it's not a simple correction but the whole implementation must be redone this is totally normal this is fine this is a demoralizing situation for the author and reviewers uh no this is perfect you should have these literally yesterday on uh live on Twitch um I did some Harpoon management and we closed down a PR oh my goodness there's so many more how the hell did this happen how did we get more how are you doing so much Willow I forgot I let's see ah there you go this one someone took a swing at doing this and I just closed it down and said no we're going a different direction right because it just needed something different different like this is totally normal like this happens like this isn't it this is the wrong design willo you're coming in without my vision in your head and that's totally normal like I wouldn't expect willowy to be able to do everything right he shouldn't have that expectation I am wholly appreciative of his attempts and strong effort look at this he's really trying to make look at that wiy wiy wiy he's trying to make Harpoon great absolutely love it and I'm super super thankful for it but like sometimes the redesign is fine because the redesign just isn't in the direction you want to go right design should proceed coding No it should no no no no no no the heavy design first crowd is crazy to me the thing is is that someone gets issued a ticket you attempt to solve it now you may have solved the bug and successfully solved the bug but the reality is it may be some other issue or some completely orthogonal way in which you want something to be done and that previous example was a perfect version of it okay and the reason why oh my goodness and the reason why that made sense for me to show you this is because they wanted the ability here I'll show this uh will phy wanted the ability to pre-populate empty lists by adding in a uh extra option called pre-populate and if that thing exists then we'll just call it and allow you to pre populate the list this is a perfect fix no amount of design ahead of time for him would have changed how he implemented it the thing is he didn't know what I wanted right and that's okay like you can't just get everybody together to design every single last possible thing it's like untenable you kind of have to catch those Strays as things are changing and sometimes it causes offset stuff but that's just it like do you really want a non-coding architect like that's your that's your other option you need non-coding architect yeah trash knows trash knows non-coding architect sucks okay they're the worst they are genuinely the worst I already have that they are the worst so basically no one else can commit to the project because no one can read your mind uh no plenty of things can be plenty of things can be done without that so disconnected yeah plenty of things here look at this the pr literally after that since uh the pr literally after that uh right here merged in because it was perfect it's exactly it's just like that's just what needed to be done totally legitimate plenty of things like I can't confirm I'm a non-coding architect can't confirmed trash is just trash strong opinions on that one the ghosting review comments are added taken into account and then you wait for the approval the reviewer has disappeared and you have to wait before merging even if the other reviewers have approved the merge request you have to wait for the ghost reviewer this on the other hand is super effing annoying completely agree with that this is just bad etiquette if you ask for changes and then you just never come back again it different on open source open source like take into a completely different account than in like work setting right work setting I expect you to be engaged open source I don't I leave a poll request you say change these things I make those changes you don't come back for a month hey man that's your project it's not mine you do you okay you're busy you go be busy you go be busy right like I very very different you got to come in with two different uh mentalities waiting for review your merge request is not the most attractive and you're still awaiting approval that yeah that I mean yeah that happens uh t are I at Netflix we can just uh merge without approval I think that's one of the most important things is that you have to have the merge without approval because if people are going to just drag their feet you just merge like hey that's their fault it's their responsibility to code review you don't want to code review like not my problem if I give you like days to review and you just don't review anything if I ping you on slack and you're like yeah I'll get to it and then days later you still haven't got to it like at what point is it like no longer my problem this is your problem right I hope you enjoy the code you had your chance that's how I look at it at least I don't think other people look at it that way that's how I look at it the changes are very important but reviewers uh didn't uh read it before approving it because it was too long yes present yes this this one this happens constantly the presentation review you have done a huge refactoring or the changes you bring really complex to review and your team is asking you for a presentation or mob review now you have to find time where everyone is available to do the code review it's only the beginning of your merge request Journey this I think is is fine if you do a big refactor yeah guess what of course right that I think is completely reasonable the con uh the uh convention style review some comments on the merge are merely about coding style for instance there are too many brake lines or spaces these kind of reviews could be avoided with a linter yes A linter and a prettier stupid two small merge requests one line of code has been modified you tend to think that it'll be approved but the mer and merge fast but instead it triggers a lot of discussions what are typically in bike shed effect yes yes I have I seen these things happen a lot but sometimes it is good the problem is is that often on line changes are exposing bigger problems if that's the case if you're ex if you're actually like talking about big problems like hey I don't want another if statement I think we should change how we're doing things that's fine it's hard I mean it's hard keep rebasing review your merge request is waiting for approval While others merge requests are being merged and you have to keep your code up to date and potentially resolve conflicts I yeah that's just I mean that's just sag that's the penalty of being in a big a moving Target right I don't think this this isn't fixed this isn't a code review problem this is just working with distributed code bases right it just sucks the inconsistent feedback review sometimes you get a comment and you don't know how to handle it most of the time the review expressed a feeling more than a clear solution for example this function seems too complicated for me yeah I mean you should be able to respond with you need to be more actionable about your feedback like this isn't very actionable so can you please do something I have a codor so I actually it's very interesting because I prefer refactors to be done by themselves and I have a co-worker that prefers changes with refactors and so me and him have gone back and forth on this and I'm working in one of his projects so I'm going to allow him I I I I have to do a change plus a refactor and for me that's really for me that's really odd but for him that's perfectly reasonable and so you know like sometimes you like one of his functions is too big and I was like hey can I just break it down and I'd like to kind of put it into some steps for me to kind of understand it a little bit better uh obviously he just built it to get something done I it's very clear what it's doing it's just it's doing it super long I'd rather just see it in something smaller uh not clean code style but just clean enough code right clean enough you know so this happens this is reasonable reasonable stuff after merge review uh the merge request has been approved and merged great but a new Challenger has appeared the Challenger is perhaps knowledgeable about this project on uh the Technologies used and wants to make changes most of the time the new merge request will be opened by this person without sharing it with the uh uh first developer I don't see the problem with that like to me that's perfect like I mean that is literally the thing clean enough Yeah clean enough code I'm all about clean enough there there's times where being too clean is bad right like clean coat itself with like these these abstract requirements of like four line functions or like Martin fowers if I see 12 lines in a function it's a smell to me to me that's crazy right that's absolutely insane talk no amount of lines in a function makes it clean or unclean in my book it's about what is the thing doing how many steps are being performed some steps are long ass steps like that's normal and it's okay Java brain it Java brain's real expressing or receiving feedback that can be complicated people can take it personally and lead them to tensions on the team yeah this has happened that's I mean that's just that's team Dynamic that's not going to change with code review that's just working with people the elderly merge request the merge request is open for a long time and it could be a couple weeks a month or even a year the merge request is so old that some most of the developers don't even know if it's still relevant yeah I'd close it down I feel like you should be able to just have an autoc close one month old uh PRS dude if you can't figure it out after a month try again take a new swing uh the not working review the CI pipeline passed and the merge request has been approved but once merge and deployed it doesn't work let's do the full cycle again yeah I guess that's this is interesting because it's like do you uh do you merge do do do you do you roll forward the fix or do you roll back do you revert or do you roll forward I'm a big fan of obviously anything that's not production facing always roll forward right like that makes sense for production roll back to the previous production in production and then your code base you roll forward the change right rolling backs crazy crazy stuff the full-time job uh review the code review can be a full-time job a developer and the team could spend their entire time doing code review furthermore it's not uncommon to have devel Vel opers in a team who are spending way more time than others doing code reviews not everyone does code review in a balanced way and it can lead to struggles within the team fair fair yeah that's fair the worst thing about all those patterns is that they can be uh can be accumulated you can be in a ping-pong review and suddenly land with a ghost review keep up rebasing and yeah yeah the the combinatorics yeah okay so stop doing code reviews so I mean I like that I like all these code reviews because I've have I've had most of them like I I I really do feel this I I just saw the word tdd appear down there very worried right now so what are the solutions to avoid these situations most of the problems could be avoided by sharing early before what for instance sharing about coding guidelines architecture coding practices so coding guidelines architecture is hard because who shares about that can you share about everything that you're doing sometimes people have to learn by looking coding guidelines I mean lint and prettier should be your guidelines coding practices and guidelines are kind of the same thing I think it's pretty obvious if you've been programming at any length when you're doing the difference between hacking and not hacking or design before jumping into the code I'm not really into those kind of things right like if you have a linter and prettier setup let somebody do some looking let somebody try to understand let someone come up with the Prototype they're unfamiliar with the coded base let them debug through let them learn some stuff you know how much more you will learn by debugging through getting out the debugger walking line by line and trying to guess and hack into a change and saying hey I got a I hacked a change you want to tell me how to do this better like that's honestly the way better approach to this is you create a change you hack it together and then somebody who wants to play ball not everybody wants to play ball that's totally fair also i' I've worked with people who do not like this approach and that's fine with me but to me I think this is the best way to learn a code base you hack together a change you don't know what you're doing there's no amount of explaining that could ever help so what do you do you make a change you say hey help me review and help me do this the right way now that I understand the state what's going on you help me do it the right way and if you work with a good teammate they'll be totally down to jump and do that if you don't work with a good teammate it's looked at as a hassle like that's just that I think that's I personally I think that that's the best way cuz you know doing these architecture talks where people are like ah yeah architecture oh yeah you got to do all these things this is what we're doing then you go into the code and guess what like you got some boxes and some arrows but you are still going to make the exact same hack because you still don't know what you're doing code and architecture you know it's interesting mentor-based reviews are the best yeah yeah uh but when the when the feature is not necessarily done and sometimes it's better to take five minutes during the development of the request instead of the post yes I agree with that like that's why I like the idea of make a change I don't know what I'm doing help me change my change into what you want to see because I don't know what I'm doing I think that that that there's some good stuff I personally think that that's that's just a it's just an easier way because my role at my job is I have to jump around to many many projects I've been in a lot of projects I've been in I've been in four separate projects in the last year and a half and so often I'm having to just go from 0 to 60 on a completely brand new codebase right now I have six separate codebases I have to become good at in the next couple months there's a lot there's a lot I have to understand and so for me to do that it's going to take a lot of effort and reading and becoming good at something and so I need people that want to help me right I need people that when I make a change they go hey can you just walk me through what you actually envisioned and here's the change I made help me like align with what you're thinking it's the only way and anyone that thinks it's differently it's cig it's Craig Craig Craig talk uh it's merely an agile uh agile value having feedback and so uh and as soon as possible feedback coming from a code review is too late I disagree with that I just simply disagree with this statement altogether in my experience code review creates more problems than it solves code review is only uh good when developers are work mostly in an asynchronous way in a different time zones I I actually just sheerly disagree with the conclusion of this article I think he points out a lot of good things and I think we should fix the things that are that are wrong like I think people should not do ghost ghosting on on a work on work repos again open source completely different ghost all you want it's your project I've never disagreed so much with an article and then disagreed so hard on it inclusion but in the most cases developers are working in the same team on the same project at the same time and code review is only a way to avoid exchanges with the colleagues nowadays code review is a cargo called uh most of the time code review should be replaced by PA programming or better still Ensemble programming assembly programming assembly assembly PR assemble programming Ensemble is that Ensemble or is that assemble assem I don't know what that word means also known as mob programming okay I I like I like par programming in the sense that you may like like I already explained my position earlier you get the idea and that would be par programming at the end Fair uh but just doing it with somebody else I totally disagree with that like doing the feature itself with somebody else robs you of your learning when you watch somebody efficiently walk through code they're avoiding 1,000 pitfalls that you don't know about they know about and so if you don't go into those pitfalls you don't understand it they're going through and they're walking through how the state of the data changes with the program and you don't get to know all that you kind of just arrive to the conclusion there's a huge amount you lose from doing PA programming when you're not first struggle like struggling yourself you got to struggle the struggle is just so important in a way you have at least two people working on the same piece of code and you always have see okay so this is a PA programming thing knowledge sharing both business and Technical knowledge proof reading develop uh developing cohesion and team spirit I literally hate par programming if I dude my team spirit would be I would I would turn into Lilith okay I'm like that's it we're killing everybody that's it unleash the unleash the hord like I dude I would lose my crap lose it doing par programming doing synchronous development saves from ghosting from ping-pong comments tldr reviews waiting for PR convention style review and so on actually working together avoids all the pitfalls of code review yeah but dude the time there's yeah again I think I think I just I'm still not into this uh if you're developing using tdd PA programming can even be more fun by doing ping pong pair programming there's a game you can play with tdd where you make a test and you have to make the person pass the test but they don't get to know what the the test is doing and the tester does not get to know what the person's programming and you see how complicated you can do tdd and you see if a person can do that it's pretty fun lastly I won't debate about the simplistic idea of having two developers working together on the same task is more expensive compared to having them work alone the synchronization process in all steps is one of the most expensive and code review is one of them I actually just fully disagree with this statement sometimes a change will take me like three days I just I mean I understand like I I I agree with all of these things that he has said it's just the conclusion is too Hardline right I like everything else like every like I agree like especially if you if you if you don't know the code base and you don't know what you're doing and you want to sync with somebody outside of a code review I think that's actually a much better place to do that pair programming after you've built it pair walkthrough and pair altering really really good you do all those things you rework it you have the person explain stuff and you come back and you put them on the hook you're doing a code review but live and then at the end you put your PR up they approve it but you still may want somebody else who's familiar with stuff looking it over cuz you don't want to waste like three people's time like just ain't no way are you working uh from home or from the office or hybrid uh from home ain't no way ain't no way lgmt a genen let's go I like this article I like the article I love this is a great article by the way this was a great article really appreciated it thank you very much VGA vallot it's a great read right this is a great read absolutely loved it