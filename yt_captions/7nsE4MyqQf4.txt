the cloud flare Rex's catastrophe unraveling the web of chaos okay so I don't know what it is greetings uh adid uh here uh and today let's embark on a journey into the heart of cloud Flair's July 2nd 2019 meltdown where a seemingly innocent Rex rule sent shock waves through the internet brace yourself for a tale of code chaos and catastroph catastrophic consequences catastrophic catastrophe dude I'm such an idiot what a great intro and I fumbled the bag the guy literally wrote my intro for me and I fumbled the bag I fumbled the easiest bag of my lifetime I fumbled the bag harder than Netflix did with the Witcher I fumbled the bag harder than Amazon Prime did with rings of power I fumbled the bag harder than Amazon Prime did with Wheel of Time Damn Damn son damn son take two flip can you take it out flip can you can you take that previous part out greetings Adida here uh and today let's embark on a journey into the heart of cloud Flair's July 2nd 2019 meltdown where a seemingly innocent redj no redj are innocent rules send shock waves through the internet brace yourself for a tale of code chaos and Cat Cat [ __ ] catastro catastrophic consequences gosh dude dude I can't dude it's like saying compartmentalize I cannot compartmental compart com compartmentalize compartmentalize am I saying that right compartmentalize I don't even think I'm saying it correct I literally cannot say that word I cannot say that word it's impossible the Prelude crafting The Perfect Storm of redexes in the realm of web security Cloud Flair's Engineers work were hard at work refining their defenses against cross-site scripting attacks little did they know that a seemingly harmless redx rule would turn their world upside down cross scripting uh cross-site scripting the art of injecting malicious code into websites was the target uh I will like to say that you should never think a redx is innocent redes are like unless if you're doing like/ D5 it ain't like dude rexes are the devil's lettuce for sure absolutely regex sorry reg regex regex uh the weapon regex rules and their Untold power Cloud flare a global content delivery Network relied on thousands of server strategically placed worldwide their web application firewall wff a wet ass firewall better get a mop and bucket for this one uh was the guardian armed with regex rules to sift through incoming Quest regex the symbol-based language of pattern matching was their tool of catch malicious URLs to catch malicious URLs okay okay okay okay well should have used a different tool dog should have used pickle regex are great no sarcasm may the Lord bless you in your various conquests using regex for I know that regex prowl prowl around like a lion seeking to devour whoever they can okay I just want to let you know I just want to let you know it's it's bi it's a Biblical proportioned catastrophe waiting to happen the Unseen threat a mischievous reject rule emerges o mischievous oh dog damn do oh damn dog an engineer to toiling away a cloud cloud Flair's firewall Team Crafted a regex rule to to detect cross- side scripting attempts this rule aimed to catch JavaScript keywords spe uh suspicious characters and strings with equal signs a potential indicator of malicious URL query strings the engineer submitted this rule unaware of the chaos that it would unleash dude why like honestly real talk if you just had JavaScript keywords why not string includes or contains depending on your language suspicious characters string contains string with an equal sign string contains that's such a bad design Choice absolutely this it's seeming terrible the domino effect from poll request to Global catastrophe the poll request was submitted triggering a sequence of events continuous integration ran test on team City giving a green light peers reviewed approved and merged the changes again I will say this that let's just say you have 50 lines changed and one of them just one of them is a regex for whatever reason when people read code they're like oh yeah okay yeah oh nit we got a knit oh okay okay what about this oh regex fine okay nobody knits a regex nobody knits a regex ever they just like when someone sees a it's almost like you just skip over it it's like doesn't even it it's like doesn't even dude I've seen so many people just lgmt dude oh my god when I see a reg X line I go blind exactly dude you get like the blinders go up and you're like I can't see it I can't it's not moving I'm a T-Rex I can't see it it's crazy we will bike shed over looking at a regx literally 4-Hour conversation on whether an a variable should have an underscore or not but nobody bats an I at a multi-line regx the domino effect from poll request to okay okay yeah okay the stage was set for Global deployment however this was wasn't your typical roll out wet ass uh wet ass firewall that's what it is rules had a unique power instant Global deployment without the usual phase approach nice within minutes the internet fell felt the Tremors every cloudfire server worldwide started redlining at 100% CPU W failure surged and the impact was cat uh catastrophic up to 80% of customer traffic was dropped Panic set in as declared a P0 incident esal dude I wish I knew what a p i when people just have these I don't know what P0 means in this case is this like a specific Cloud flare thing it's a pz like if someone yelled p 0 priority zero is that like high or low it's just like Defcon I don't know if DEFCON 5 or One is is is worse oh zero is the highest isn't that just like a is that not just a weird phrase we have just I just want to throw that out there that when someone's like Priority One it's the highest priority you're like really seems kind of odd to me anyways escalating uh to every corner of the of cloud flare okay okay the emergency response Race Against Time with millions of websites relying on cloud flare the urgency was palpable Engineers delved into the chaos searching for the culprit it took a mere 20 minutes minutes to identify the wet ass firewall process as the root cause the decision was clear execute the global terminate shut down wff globally to restore nor normaly the outage was stemmed by the global terminant but a wet ass firewall remained disabled the team meticulously validated roll back back of the faulty rules and reenable the wet ass firewall globally after 40 minutes the lesson was crystal clear regex if misused could bring down the digital realm the real question lingered how did this redx rule wreak such Havoc okay I want to see it let's see the rule the redx rule seemingly innocuous harbored a Dark Seeker man okay dude this is like can you just stop waxing philosophical and just get to the effing Point okay this is enough foreplay stop forplay me tell me the gosh darn thing that happened here uh in let's see in Reg the greedy nature of matching combined with back tracking on failure led to exponential computation the servers faced increasing request lengths the regx uh engine spiraled into performance Abyss causing CPU usage to Skyrocket okay can you give me like an example what what does that what do this exactly mean read the regx and D out I want to see the regx to prevent history from repeating itself cloudflare transitioned to regx engines guaranteeing linear runtime the switch to Google 2's re2 a regx engine based on deterministic finite automa a DFA um ured you know Canadians I've often ran into call them automatas uh ensured that the matching time scaled linearly with input length saving Cloud Flare from future regex nightmares re2 great game it was a great game re2 was one of my favorite I beat that one that was one of the few I actually beat full St straight up okay hold on okay since this one doesn't give me the meat and give it to me raw what's this one I just want to see the effing regex like what was the effing regex all right do we H did I I just saw it I just saw it okay okay the CPU exhaustion was caused by a single uh wet ass firewall rule that contained a poorly written Rex expression that ended up in uh creating excessive back tracing the regular expression uh was at the heart of it okay whole oh there's so many question marks oh there's so oh my goodness there's so many how the hell did anybody approve that like how did anybody look at that and go yeah that's pretty good is this a Rex Fork bomb because okay a question mark operator effectively means like what happen when when something is not matched with that does it like go back and rerun something with the next one like how does this actually go because in my head what happens here which again I'm not good enough at doing this right like I'm literally not good it looks good to me is that they would look for this it would fail go back to the beginning look for this fail go back to the beginning look look then it would do that all and then it would also use Nan and then go back and go go through them all again and then go to here then go back and do it all again and go there Rex calculator does anyone have a Rex calculator that's not how it runs okay I literally have no idea I I I I I avoid regexes like the plague I genuinely only use them in extremely rare circumstances for the most benign stuff possible right um what do I do here I I again I is there like a graph is there a graph is there a graph top right I I I I don't I don't know rexer you guys gotta you guys got to remember you got to give me the simple ones because oh that was the left okay fair non-capture group group uh multiple tokens together without creating a capture group non-capture group create multiple groups doing this non-capture group multiple tokens together doing this damn I the problem is I don't know what these I don't know what these C uh these capture groups do I don't know what non-capture groups do and why this is so evil dank memes dude looks good to me I it looks good to me dude I honestly have no effing clue Rex per Rex per one of these is going to be a porn site one of them I'm just going to go to and it's going to be like get big rexes now any character goes back in and goes through any character what is this line what is this line any character any character equals any character damn that's damn go damn damn son by the way just so everybody knows this is why you shouldn't use re this is why you shouldn't use reg X's okay because you're not good enough at using them okay just write an effing pains look at this do you realize how easy it is to go like this string includes this this this this this this this do you know how easy it is to write this right here like this isn't hard either to write you have these things index of this literally like literally index of this plus two equal sign and length is greater than plus two + one like that's that's not that's not a hard parser to write it takes like 3 seconds to write that at effing parser this is just a bunch of contains so stupid it's so stupid it's just so effing stupid there's a video on it can you get me to a spot that's like good CU I don't think we need to rewatch like an intro being like then so then on this on the on the olden days of byon y when this happened if this is effing if I get Rick Rolled it's a spike so the issue was with this last section here we have a non- capturing group signified by the question mark and colon which specifies something to match for but not include in the outputs now that we know what a non-capturing group does we can throw all that out the window since it's actually irrelevant here whether or not there's a non-capturing group the regx engine still needs to match the expression contained within so we can safely ignore it oh interesting yet a DOT star non-capture group dotar not equal sign dotar huh huh we are already familiar with all of these characters splitting the expression into four parts the three dot star STS each match any number of any character and the equal sign matches for an equal sign but what does so that's like a is this like some n cubed operation going on here math ain't Ma I'm not mathing right now the matching process actually look like intuitively it makes sense to start with the first symbol attempt to match and then go to the next one but how do we know how many characters to match if we match every character it becomes impossible for the equal sign to match anything and the answer is we don't know most hell yeah engines simply match as much as they can Backtrack on this is so funny right here or you know you could have just used contain equal sign literally if you do look at this for a second anything equal sign anything you know what that does sound like that does sound like index of equal sign and or contain equal sign it's [ __ ] the same thing failure and match slightly less the next time repeating this until there is a bro really spent 13 minute video instead of just doing a contain dude I know match or all combinations are exhausted to elaborate when Cloud Flair's regex attempts to match this example string these are the steps which occur first this first dot star greedly matches all three characters next the second dot star greedly matches the remaining zero characters then the equal sign fails as the previous matchers took the equal sign already after this the algorithm backtracks the second do star matched nothing so there is nothing to backtrack however the first do star matched all three characters so we backtrack and see what happens when we match two then the second dot star can now match the remaining X but the equal sign still doesn't match anything we backtrack again this time matching zero characters with the second dot star and it doesn't work it's a great visualization um here's the deal I use a lot of dot Stars just want to throw that out there I use a lot of dot Stars okay I don't use them in production code but I use them on the command line dotstar should be forbidden no it it's very very useful but that's wild I'm putting this in my Twitter bio right now I can't believe this line destroyed Cloud that getting that line defeated Cloud flare this is incredible hold let's finish this out star matching only one character now the second dot star greedy takes the rest of the characters and the eagle sign is left with no match and we need to backt track again this cycle continues a few more times until it finally finds the match in 23 steps if the string matches one more X the number of steps increases to 33 then 45 which you may notice is not linear in fact as the string to match gets longer the increase in steps can potentially be exponential easily a no way oh snap oh my goodness anyways I think today's lesson today is uh don't don't do rega like just don't just don't okay if like I understand that there is the regx that is just literally like uh here where's the pickle here where's the where's the pickle one there we go like I we all understand that uh regex right like everybody gets this one I get it everybody gets this but that's never what you do in production it's never what you do in production that's the problem is almost all production regexes are crazy they're always crazy they're always crazy because because you know like anything that's you just you have to take it to the logical extremes for five numbers that seems fine yes I agree like if you literally are looking for a string that looks something like you know Foo bar some set of numbers bass if you used a regx to just say end a set of numbers I'm not going to like I'm not going to complain about that I don't think it's great but whatever that that's fine with me I get that uh it's it's usually it's actually usually more clear and fine uh why does it have the Escape character because dude because it's it's it's it's a string man strings you got to escape the slash to get a backlash you got to escape the slash to get an escape character so you have to double escape to get the single Escape you know you know what I mean I know so yeah in production zip codes aren't five digits exactly in production this line becomes a disaster how big of it zip code uh regx a stack Overflow the place where you should copy your reg X's anyone any anyone like this idea is a valid zip code four is not nice nice or how about these ones are they which one of those are correct I don't know I I I don't know like I don't I don't want that I don't want that my code base I don't want that in my code base okay you know what I want my code base something that I can parse with my eyeballs looks good to me that's that that doesn't even exist doesn't even exist okay anyways don't this is I'm regx blind dude I am regx honestly I regx blind write a damn function honestly at that point it's just so easy to write a function with a few if statements you know what I mean the future of AI code it literally is the oh my goodness AI were trained off stack overflow stack Overflow uses Reg is to solve everything oh no oh no