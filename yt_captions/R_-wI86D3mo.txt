all right so most programmers who dream of Landing a high-paying job at either Google or Facebook or these big tech companies wait months doing like 500 lead code problems when all you really need are these 75 that I got on this file on my phone what worse in the end they still fail because they also make another huge mistake that literally makes it harder for them to land a job than if they had done much less practice all of these people would literally be better off just following a few simple steps that are a proven simple and a predictable part to mastering coding problem solving and Landing the dream job that you want so in this video I'm going to share with you what the 75 lead code problems are how you can access them why they are so proven and effective what this big mistake is that prevents most programmers from even Landing any interviews and this simple process that I found for myself and that I know that has worked for pretty much anyone who has done it to land whatever Tech job you want but before we can get into all of that let's go through my story with data structures and algorithms so I have no computer science degree I had no previous experience in technology I basically came into the tech industry as a complete Outsider like I left a career that I absolutely hated and I wanted to do something more exciting I discovered software engineering and all I had was the internet and a bunch of Articles and forums that I was reading about so basically I had no idea what I was doing but all I knew is that everyone kept talking about this lead code thing so I thought to myself like how hard can this be I open up the website and tried solving a couple of problems and of course I completely failed so after I failed with literally the easiest problems on the website I thought to myself well this is a lot harder than it seemed so logically given how I had been taught to study my entire life at school where I thought to myself like let me just pick up a theoretical textbook on data struction and algorithms and that's how I'm going to learn it and well that's what I did and I ended up studying this insane book on like the theory of dat destruction and algorithms and I felt so good about myself I was soring all these mathematical proofs for that bers algorithm or whatever but still at the end of all of that when I went back to lead code I could still not even solve to some like not even not even to some and I just felt completely dejected and essentially I just felt like I'm just not smart enough to do this like there's must be something special about the people who managed to do this because I just do not have the brain power to solve these kinds of problems so that was a big mistake but it was still not as big as the next mistake I was about to make so my next attempt was to essentially throw all the theory books just out of the window and go the complete opposite way of just grinding out as many lead code problems as possible I just picked a problem one after the other and I just keep smashing my head against the wall like literally smashing my head against the wall sometimes until I could Sol something and of course was a time I still couldn't do it so I ended up having to like look at the solution and all these kind of things so that kind of worked like I felt some kind of improvement but I still didn't not feel like I was any closer to being at the point where I could solve these problems in actual interviews or anything close go to that and the core problem was is that whenever I took any problem and I looked at it I had no idea like I had no framework in my mind on like how to go about thinking about what the solution could be and so ultimately this lack of an effective process to going about learning how to solve these problems ended up in me making the biggest mistake of all which was to quit I was so convinced that I was just not smart enough to do this I was like well where's the point in keeping going I'm sure I can just get a tech job that doesn't require these kind of interviews that's fine I'll settle for getting paid like three times less but luckily I didn't do that because I realized that there was one more thing that I could try and the realization I came through is that what if the truth lies somewhere in the middle so the reason most people fail with DSA because they go in either one of these extremes first we have the camp of theorizers who think that the solution to everything is just to study all the theory and grab some super technical course and go learn all these fancy mathematical proof things which might make you a great computer science theorist but it won't make you a great practical coding Problem Solver but then we have the other end of what I call the lead code Bros who simply don't learn anything about the theory of data structure and algorithms and just try to start smashing their head against the wall with as many problems as possible you still have no framework you still have no Foundation upon which to build the skill of problem solving so essentially you have the results to just memorizing problems which none of us like doing so really what I learned is that the way to master data structure in algorithms and the Art of coding problem solving specifically from literally your first line of code you can do this even as a beginner is to get the best of both of these worlds let me explain you need the right amount of theory combined with the right amount of practice and the right kind of practice which is just enough to give you the skills to pass those junior level interviews without going too deep that just ends up making you overwhelmed and probably not even trying to land a job in the first place because the biggest mistake that you can make and this is the big mistake is that you just keep trying to do more and more and more problems because see think like oh if I just do 10 more then I'll be good enough you never actually end up trying because the thing is you'll never feel good enough and this is where I was at so if I just realized from the beginning is that there is actually like a list of questions that cover probably like 90% I don't know if it's actually 90% but like the large majority of the kinds of problems that are tested at this companies and so then you can just get a list of questions that essentially train you the kinds of problem solving patterns that are used in these types of problems which in fact people have done there is this list of these 75 lead code questions that essentially de facto covers most of the kinds of problems that you will need to understand in interviews so you can find this list if you type on Google Blind 75 lead code problems it'll probably be like the first link but what I have done is gone even further and actually created solutions to all of these problems I actually started making this like solution bank for all of these important questions inside of notion and now I've completed that notion bank and I've sort of polished it and I will actually send it to you for completely free you can just go down below in the description and just give your email and I will send it directly into your inbox but the catch is that if you just go through these problems without obviously learning the underlying Concepts then it will be really really difficult because you need the data structure and algorithm foundations in order to be able to solve these problems so what I recommend is learning these topics as you go through the problem so first learn the logic of the topic like for example what a heap is and then you go into the Heap problems and then you do that for the next topic the next topic etc etc so if you want the fastest way to learn these topics and you specifically want to learn these in a way that helps you understand them rather than needing you to memorize anything and you want to just learn the logic of how all of these work without needing to go into all these deep theory that you really don't need then for that purpose I have created my new program it's called algo University and you can check that program out in the second link in the description if you're interested in that so that's the video go check out those links below if you have any further questions leave them down below in the description I hope this is valuable I'll see you in the next one