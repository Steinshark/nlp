with the impending collapse of the U.S banking system I've been looking for new ways to make some money and with all this hype that I've been hearing about crypto and Bitcoin I decided I took some spare Hardware I had laying around my house and turned some of them into Bitcoin miners in particular I'm talking about my son's baby monitor over here strapped with a hefty little arm processor down there surely it should make a strong minor to do this I designed the following system for my quick little cash scheme first I'll have the Bitcoin node running on my PC the Bitcoin node will give me block information and Target information about the mining that I have to do I'll use an Arduino to feed the block information over rs-232 to the monitor to do the work I'll feed the block and the target up to the baby monitor when the block is solved I'll make my block reward which is 6.25 times a Bitcoin value right now roughly 125 000 and then we can stop sounds easy enough the Bitcoin algorithm is actually pretty simple the network gives nodes a block to solve the block is a 76 byte string you then take a 4 byte cryptographic nonce a random value and impend it to that 76 byte string making it 80 bytes you Shaw 256 that string and then shot 356 the result and if the output is less than the given Target value you've solved a block the size of the Target or the difficulty is able to Scale based off the mining power of the Bitcoin Network which keeps it so that the mining network is always producing a block every 10 minutes to get this all to happen on my baby monitor and make some quick cash I had a series of problems to solve problem number one get code on the monitor this is easy enough in my previous video I found a fizzmem read write function that I was able to use to rip the memory off of the device whoa let's go baby we're hacking yeah I discovered I was able to use the exposed write functionality to write code up to the monitor cool so we're gonna go into here we're gonna do minicom Biz mem read write hex 150 the value 10. okay and there you go that's actually actually pretty sweet the reason why I'm so excited is that being able to overwrite code anywhere means that the entire operating system is overwritable meaning I can put my code pretty much anywhere this gives me a lot of power problem number two what code okay good point using the embedded arm cortex build chain and a fancy Linker script I was able to produce code that was able to be ran anywhere in the device not in assembly but in C I could have done this project in assembly but doing it in C made my life a lot easier and a lot less painful let's call this start writer pushing the frame pointer making room on the stack moving R3 to zero and then there we go problem number three triggering the code we could write code and we can upload it but all because we put it somewhere it doesn't mean that it actually gets ran so how do we trigger it well luckily we found a function table inside the device that had all of the function pointers that get called when you ran various commands on the device like help in The Help menu for example by overriding the function pointer for the help function we could have that function pointer point to our codes that when we type help on the CLI our code gets ran and now finally we could run our first test check this out ready I'm gonna type the word help hey yo what that dog doing so not only did I fix the code and I made it so that it does get where you art print I found a place where I can hook it and make it triggerable this is awesome so at this point we were able to write code that got ran on the baby monitor and it was able to run without crashing also we could control when it got ran by running the help command which we took control of at this point all we had to do was append our Shaw 256 code to the code we already had and we were in for some quick cash problem number four sha-256 code is very very big it's not that big in a regular sense but this device does not have a lot of memory we are currently putting our code into a code cave a code cave is a place in memory that isn't really used and it kind of has some spare room where you can stuff additional code but typically code caves aren't that big with the shaw 256 code appended to our code we no longer fit inside of that code cave we have to come up with some new techniques I decided to break my code into two parts the first part was a tiny little loader that was small enough to fit inside out of that code cave the loader would malic the proper size for our code to get ran it would reveal to us the address of that Malik buffer and we would upload the code to that bigger buffer and then run it from there yes the Heap is read write X I don't know why don't ask me this one's gotta be it gotta keep address boom okay sweet what just happened is loader went up my code triggered the loader to allocate a heap address it sent that Heap address to my script my script then took the larger payload and is putting it into the Heap I can then go into the device and manually trigger my code and what it should say is hey yo what that dog doing that's it how can I say help Ayo what that dog doing [ __ ] yeah dude problem number five and I swear it's the last problem the shot 256 algorithm takes a long time to run in real life terms not so long but in terms of a real-time operating system it's a lot of for Loops because of this the Watchdog on the device that needs to be either tickled or kicked depending on your opinion on dogs will crash the device if it's not tickled or kicked in a reasonable amount of time okay so the code is there so if I go back and do help ah at this point I'm very frustrated because the shot algorithm takes so long to execute the Watchdog is taking down our device now we could find the code on the system to tickle the Watchdog but instead we're just gonna wholly disable it with the Watchdog completely disabled we are able to run any code that we want that can take as long as we want it to without the device complaining in the form of a crash or a reboot so now we can implement the sha-256 algorithm and begin to harvest our Bitcoin here we take in the block string and the Target string in HEX from the user we convert them to Binary and then we walk through every nonce from zero to quad F and if the resulting double shot 256 is less than the target we tell the user and collect our funds and here we go at a whopping 4096 hashes per 5 seconds or roughly 812 hashes per second we will have our first block solved in about 200 billion days now if you compare that hash rate on the monitor to the hash rate of a modern Asic which could do anywhere from 10 to 100 Tera hashes per second we are off by a small order of magnitude no big deal we may make our money back in the short term but you know we'll have to see about it if you want to find out hit the sub button and then go watch this video that YouTube thinks you will find really really cool click on it it's right it's right there man just click okay bye