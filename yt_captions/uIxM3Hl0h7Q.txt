hey object oriented programming is good asterisk a few years ago I made some videos laying out a case against object-oriented programming and since then I've been meaning to make a positive case for an alternative a prescription for how code should be written rather than how it shouldn't it's taken me a while to work out what I think can be said about how to write code with any certainty and confusingly the prescription in part might sound suspiciously like oo to some ears I'm not really recanting my prior position though many people just remain confused about what's unique to oo and what's not hence I'm calling this object-oriented programming is good but with an asterisk that was a very long asterisk um okay okay so we have an oh oh hater that might be coming around to uh enjoying a little casual oh oh is this some cash flow is that what we're seeing right now could be could be kind of a little bit cash you know just a little just a little oh hater turned lover you know what I mean a more honest title for this video might be module oriented programming where module refers to a unit of reasonably self-contained code but the even more honest title would be how to write good procedural code I love dude procedural code is the best code fight me fight me it is the best okay it is the it is the way to do it there is no other way procedural code is just always been it will always be it has always been functional programming it's just procedural code with with functions change my mind encapsulation polymorphism and even inheritance will be a part of the story but as I'll explain the total picture has profound differences from object-oriented programming so here's how I think code should be written code should be written in units we'll call modules and these modules come in Two basic kinds State modules and logic modules the distinction is that logic modules contain no internal State IE Global variables and logic modules do not reach out for external state starting to sound a bit functional right here I'm just saying already we can tell just right away this sounds like peer functions going on right now tell me this is not some pure functions right now tell me this is not it right here right now um interesting so this thing only contains external state it so what I When I See This what I think is that these are like definitions structs and stuff this is implementation on the structs traits whatever you want to call them it does all that uh Define a peer function without using peer a function with whom has no side effects laughs instructs an impul exactly this means that a logic module consists only of functions and these functions only touch stateful things which are explicitly passed to them so a logic function can for example read and write to a file if an open file is passed into the function but a logic function cannot itself open any files I'd say that that in general that's just building good software I think I I think I see because he does he did talk about just like how to build better software you should always avoid certain activities within a file right like if you want to do something to a file such as take a file like open a file read out the contents go over the Json blob parse out whatever X events sum up some values do something like that uh what I tend to find is a lot better is separate out those into two separate ones right the file bits and then the actual like logic bits because that way you just pass in say your events whatever those events look like and then it does the operation on top of it because it just all like whenever you separate out things like that it makes testing easier it just seems to make logic easier it just makes your life easier I feel like uh that's a good that's usually a good sign of a more Junior person is that they they mix all them Logics up the management of state is not the responsibility of logic code a logic function May generate new data and also May mutate its inputs but its only responsibility is to generate and mutate data only as it says it will in its documentation the side effects of a logic oh I'll do that we'll pull let's pull all right here we go let's pull are you ready all right new pull oop oop uh do you like oh yes or no yes no do you like oh tell me right now okay here let's start the poll we gotta know I just gotta know where's the pole it's right here oh we have a pretty I'm actually pretty shocked we have a pretty split group here I honestly did not see this one coming I honestly I I really truly Dynamic dispatch is a curse yes equals actually no oh my goodness I think you're trolling me at this point just to get him to tie what there's no way that more people like it there's no way there's no way okay so this is wild this is wild okay okay you know what hey we're all allowed to be a little surprised now where where did that uh video go no no no no no no I do want to watch this but it's an hour long no no no yes I am so confused right now function are actually then the responsibility of its colors so the relationship between State modules and logic modules is strictly One Way state code can call into logic code but not the other way around as for the state modules each should protect its private State and State modules should only directly touch each other's public interfaces in other words the modules should be encapsulated and even though logic modules have no state to protect they too should distinguish between public functions and private functions so as to minimize exposed surface area you know these are all good tips I I'm appreciating everything he's saying so far I feel like is pretty like no one can argue with as of right now do we got any arguers this all seems good no touching privates ex don't expose yourself you know you might object that modules might sound like objects but there are two key differences first there's no rule about how big modules are allowed to get well there's no rule about how big an object can get okay you know there's plenty of there's plenty of big objects out there okay I don't know why this guy has to be upset that this that statistically larger objects are a problem there may be tens or even hundreds of thousands of lines long very large okay that's too long a module better not be if I walked into a file that was 100 a module that was a hundred thousand lines long I'd have plenty of questions I'd have a lot of questions at this point modules are perhaps not ideal but I'm not going to give you any hard rules against them second a module is not an instance of a data type in almost all cases our state modules are Singletons and we're Unapologetic about it I don't like the word Singleton Singleton's almost always exist in such a way that they make me cry single tens make me cry every single time in almost all cases our state modules are Singletons that's just making sure do you at least apologize for it and we're Unapologetic about it oh that got me okay oh my goodness this is an arch user convention I can tell right away data types in fact don't really belong to any module the best way to think about data types is that they live outside all modules and when data is transmitted from one module to another the structure of that data belongs to another module more than the other I wouldn't say that a protocol belongs more to a client or more to a server and the same should go for data types yeah okay it's a practical matter though a data type must be defined somewhere in code so we generally Define a data type in the module where it's most predominantly used we may also sometimes want to I think I'm misunderstanding the term module here I think what he means by a Singleton and modules is that you know like a file filled with functions and data type definitions that that itself is a Singleton which I would agree with it would make no sense if you had if you had instances of of modules is that what he's trying to say I feel like that I feel like that's what he's trying to say huh capsulate operations on a data type in which case we put the data type and those functions in the same module it's a unit of scope I agree with that it's just a unit of scope it's it's a it's it's just a unit of scope and it by definition it better be a Singleton or I'd be confused because State Management is an ugly problem the general goal in any code base is to minimize the proportion of state code as much as possible we want to punt code from our state modules into logic modules in some programs State Management May inherently predominate but in many cases the state code can be a small fraction of the whole code that's true the question that follows is when should we break up modules into smaller modules and along what boundaries for State modules a major reason to break them up is to divide and conquer State Management for either kind of module we might also break them up simply for organization modules by any of these do you know what I mean well I mean like I organize it by concept like I wouldn't want to organize it by team that seems confusing I wouldn't want to organize it by organization I'm not sure what it means to divide and conquer State Management or to publish an API like the public API you could you could imagine is it in of itself its own you know repo module how are redefining it but I mean I tend to always organize my modules or my see the problem is I think I don't understand what he means by modules I think this is the fundamental problem here I always organize it by concept you struggle splitting modules I feel like modules are very naturally together or they're very easy to do the right thing a couple of minutes uh after this here's another great example hold on hold on picky all code concerning future a goes into module a and all code concerning feature B goes into module B Etc such structuring can make the code base easier to understand if done well just be careful not to overdo it yeah we also might explore modules for the sake of team collaboration group X takes ownership of module X group y takes ownership of module Y and the modules are coupled only through their public interfaces even for logic modules this can help because it allows one group to change internal implementation as long as the public interface remains unchanged still seems weird like I'm going to draw the line based on team's responsibility you know because there's plenty of places that are like you know there's like in-betweeners you know what I mean there's things that exist in between that just like that just you know I don't know I have a hard time with this whole organization collaboration teams business for similar reasons we might split up modules to better formalize an externally exposed API we don't want to bother our external users with details that don't concern them and we want freedom to change what we've kept private again many people today accredit these ideas to oo but the idea is actually predate oo and don't require us to follow the rest of its prescriptions we should not conflate modules with data types and we should not obsessively Whittle models down to Tiny sizes so yes though I spent most of my earlier videos arguing that oo sells an overly aggressive form of encapsulation I think encapsulation is actually a perfectly useful idea what then about I'm actually fine with smaller modules I've never thought of a modulus being big or small I don't know this this whole this whole time I swear we must be miscommunicating because this whole time like I never really think of size or any of those things I do agree that like having a singular data type in a singular file sometimes is super annoying like when things get like when you go into like a utils folder and there's like 900 files it's like that's really hard to work with and so I understand but then the inverse of it which is one file in a like a utils.js a utils.rs and it has like 900 functions in it then that's also hard utils is a code spell the problem is is that that statement is a statement that exists outside of practical work it just does it just always does in the end you have some stupid thing right like okay let's just take this you're working like on Puppeteer so Puppeteer when we were writing the integration with televisions if you don't know I helped build part of that uh which is like you have the C plus plus side the actual controlling of the V8 engine or other parts of say nrdp the television app and the JavaScript side and one thing we have to do is we constantly have to do these weird promises right so it's like promise tell you that hey I'm going to call this function and I'm going to resolve this problem but I had to like resolve it later I had to like API and I had to do something kind of weird and so what I do is I created a function called explode promise that would return the promise the reject and the resolve so that way you could have access to any of those and then you could store that and then say a minute later when you've done the actual thing which could be a series of steps I could then resolve the promise that I handed back way earlier it's a pretty you know typical thing if you do like async request cues anything like that you kind of have to explode out a promise and so that function is just it doesn't live anywhere it has no it has no like home and so it makes no sense to have it anywhere but like in a utils folder you know yeah yeah yeah polymorphism and inheritance my take on polymorphism is that interface types or type classes or traits or whatever same equivalent in your language they can be extremely useful their utility is primarily across module boundaries particularly across the boundary between an API and its consumer I like interfaces interfaces are great well traits are great uh homeless folder yeah uh homo like uh traits are great typescript interfaces are the actual worst out of all things typescript interfaces are by far the worst convention ever there's two things that are super wrong with typescript interface is one you can Define uh props I do not think properties belong on interfaces I think somehow that just feels really really wrong number two you can you can effectively uh add stuff to an interface later on you can just like add a method I can just take a known interface and create another method on that known interface a deck interface merging or whatever it's called I just think those two concepts like typescript interfaces are by far terrible I'm not the only one uh surprisingly this is where me and the other typescript Chads actually agree types are just bad I don't think you should be using interfaces I don't see a point in using interfaces I don't see what you get out of them it just seems wrong like I properties is definitely wrong properties are definitely wrong they're crazy but you can use them like Trace no you can't you fundamentally cannot use them like traits traits you can you can use traits like interfaces but you cannot use interfaces like traits because traits are just they're just they're just different you know they hit differently the trade system Just Hits differently like the fundamental concept of being able to say like hey here's a function and it's defined and if you have this you get it but it's also there's nothing that explicitly has to implement that interface you know what I mean here I don't think you guys understand that thing here let's get out of let's get out of Chad stack uh here rust typescript here this is what I mean by that is that I hear interface area nothing in here like Circle doesn't have to implement area to be considered an area right so if I take a function function uh you know calc area I know even though this is stupid right uh you know uh item implements area right I can go in here and go item area and circle though no intention of actually implementing the interface just due to how it works you know the old quack quack typing I can go New Circle and uh I don't know what's my interface on Circle okay go complete it it just works there's nothing that like it doesn't it's not doing the thing it's not the thing it's not doing the thing you know what I mean uh yeah I know that's how go works I'm not I'm not necessarily the biggest fan of that I think I I still think how the trade system works is just a better usage of interface uh interfaces uh I I like the explicitness of it that for like so so in the rust World you'd have the uh do I have that around here uh dude I don't have it you have to implement there you go here's a trait you have to implement a display so you have to implement the traits you want for the type you want and that's really important whereas you can't just simply have an implementation that happens to have the same names for things it has to be I implement this thing intentionally and then there's a lot of other really great things with these interface types we can formalize commonalities between different data types including data types defined externally to our own code much like a protocol allows us to treat client servers and peers like swappable components interfaces allow us to interoperate with code that hasn't yet been written if however I have no need to allow for such external extensibility I generally avoid interfaces an interface requires me to speculatively generalize to imagine needs I don't concretely yet have and this extra burden does not always pay off for internal business for modules well contained within my control I don't really care about that kind of extensibility for sometimes it's useful it can be a again operating with interface you know always using interfaces it can it can be very useful obviously that's just like saying types right interfaces and types and typescript are virtually the exact same thing uh there's a few key differences but feels approximately the same I like defining my types I don't mind defining interfaces I don't mind doing any of those things because I think it's really really useful to do that code I control flexibility is maintained by favoring The Simple Solutions to my concrete problems rather than entering the realm of speculation now as for inheritance I do I do agree with that like the sentiment or I understand the sentiment which is like don't abstract things that don't need to be abstracted I do find that that's like super common concept especially in JavaScript JavaScript is the world of abstractions and people abstract they reach for abstracting as the like the first tool to implementing something inheritance is also a mechanism for expressing the commonality between types but inheritance additionally shares implementation a child type automatically shares implementation of its parent except for those parts the child overrides this implementation sharing might be convenient in some cases but as famously noted it tends to make code fragile changes to ancestor class implementations can affect the sentence in unexpected ways sometimes leading to some pretty nasty bugs I generally hate inheritance but I always think of one thing that I really like about inheritance and the one thing I always think about is a ventimeter in JavaScript right to be able to have a class that also has an event emitter I think is really really really amazing so if I had uh gosh uh extends event emitter right uh I always for whatever reason I just I always this this indenting is insane but I always really like event emitter because then when I get a circle right const a circle equals uh take that put it up here up bump up put in the middle uh put that right here be being able to emit right like that as a thing I really just I fundamentally like that and you know maybe one could say it could be it could be implemented without using extends or inheritance and you could like you know especially with that blanket implementation via tray classes you could get something where maybe you only have to implement a subset of this but I like the fact that I don't have to implement anything yeah exactly there are reasons where uh inheritance is really good and I'm not one of those people that just simply hate inheritance for all sakes like uh creating something like an event emitter in Rust is not fun because you can't just quite do that it's not quite on the other hand where types have lots of overlap in their data inheritance makes these overlaps and code clear and more convenient to write in the first place this is something I think the go language gets right a type can inherit the data of another but this embedding as they call it does not create a subtype relationship so that's actually all I have to say about how to structure code I think it's a relatively simple picture overall I'll end though by elaborating on what I think this implies that oo gets wrong okay okay discussed oo conflates modules of encapsulation with data types second oo is overly optimistic about how frequently and easily we can create good abstractions I would agree with that there's modules and data types I don't know I still think you know there's a series of data types that fit within a module or an idea that just makes sense and they kind of go together and so I I don't really understand the separation of modules and data types now like I agree we shouldn't have you know we shouldn't break every last thing up in add infinitum but you know there should be some level that makes I don't know and third oo favors design with too many small pieces so about the second point the underlying premise of oo is that more abstractions are always better and that we can create good abstractions in the normal course of application development this is wrong I would agree fundamentally I agree with that the idea that it's it's that we talked about this yesterday this idea of of that I'm going to abstract my code because there could be this case that I haven't thought about yet therefore because I have not thought about it I know it could exist so let's design our system to be able to handle some future case that is probably led to more heartache and more upsetness than I think anything I have ever had in my lifetime is just that because it's so frustrating it's so dang frustrating it always ends up being this just this cluster Festival that just didn't need to exist because it turns out you never actually extended it Beyond anything basic and so it's just it's abstractions take a lot of hard thoughts and time to get right and typically they emerge only slowly over many iterations now when creating an API creating good abstractions is part of the job hence creating a good API can be very difficult in normal application code however we should free ourselves from this burden where it's not truly necessary cases do arise where new abstractions provide better Solutions but a default mode should not be seeking to create new abstractions as for the size of our code units the difference between procedural and oo is how and when we subdivide the units in procedural code we modularize by accretion only splitting up modules when they get too unwielded in object-committed code however we modularize speculatively splitting up modules in anticipation of problems later in theory oocode is flexible we create a bunch of small independent pieces such that system Behavior can be changed by reconfiguring the connections but in practice the burdens of speculative generalization rarely pay off now that I agree with that I mean the thing is is I I actually do such a different version of uh starting off so like I have this whole um I have this whole Theory where whenever I start a new project or I start something new I start in a single file and I just start dumping things in until I find a good reason to change it so like I have this whole search thing that I've been building at Netflix for some data and it just takes a bunch of different sources and then does like an extra step of data processing underneath the hood and so I started with just like one file I just wrote it yesterday and today and I just wrote it out just making it all happen and I realized okay there's really like two parts of this there's like the building of the request because I want to be able to request these datas to a service and then the handling of a request now that I have data plus the request I want to make how do I do it and so it's kind of like these two sides and so it became a very obvious natural splitting of the of of uh of the like the modules right and so for me that just made perfect sense that's just how I wanted to see that's how I wanted to do it but I didn't start off knowing that I just I just simply built it out all in one file until I felt like okay this is the time I need to abstract this is the time that I feel like I see two separate things developing how much code do senior Engineers actually do I write a ChatOn I write a huge amount I am I am that is my job to write a letter is about the things relations to other things but my team is a heavy code these little tiny units in isolation the pieces produced in this process might be easier to build and understand individually but the whole system is not there's like no Architects we just don't have architects Architects are the ones that go around in lab coats telling you how you should write your code and it's very fantastic and it's very beautiful and it works perfect on a whiteboard but when it actually comes time to implement it's horrifying and awful I don't like Architects okay I don't want anything to do with Architects I've never had a good experience involving an architect I swear every single time it's always just awful meaning requires context and these tiny units are isolated from context object-oriented design is often sold as the responsible thing to do the moral equivalent of keeping a closet or drawer meticulously organized but typical oo designs feel like though are Tangles of excess Packaging look at that little guy poor little guy uh who's our who Architects then everybody Architects everybody does The Architects like when you build out your piece you architect and when some piece needs to be larger and put together itself and we have like a larger constraint you have to go and get a couple people together and all agree on it that makes way more sense like when okay I want to re or I want to re-change like the program of how like how say startup works or where our main is is how how do we link with partners and up partner televisions well somebody does the research comes back and says hey these are the ways I want to change it and then you can get a group of people on the team go yeah I like these changes I think these are good I don't like those changes I don't think those are good and then they go back and they kind of make some changes or what they think is good and then kind of come back and argue for it so like each person becomes the own architect of their own area because there is no reason to have somebody that only thinks of architecture I really don't understand that I think that Architects if you purely do non-coding Architects you do not at all you just you can't contribute to a project reasonably because every month that goes by you're not coding is every month you don't understand how production works and as that gets further and further from your understanding you just simply start suggesting these things that are just stupid and it feels good because it looks good on a whiteboard it always looks good on a whiteboard every piece of code looks amazing on a whiteboard just like my brain when I come up with this new greatest idea everything is fantastic and then you implement it and it's horrible it just was wrong um everybody is an architect that's the thing everybody's an architect whenever you build code in some sense you're architecting it and as you get more experience you can build larger pieces of code that fit together and that's really it that's how I look at it Chad stack looks amazing on the Whiteboard yeah don't mock boxes and lines there's lots of crap so fractured indirected and abstracted that like in Wonderland nothing in code is as it seems the names of the classes and methods lie about what they actually do because the real work is always done elsewhere the procedural alternative comparatively encourages us to introduce abstractions only when they're much more likely to be useful go subscribe to Brian will good guy good guy right there good guy that's a good one I like it here let me finish it off finish it all the way through you know all the way through there we go perfect yeah that was good um yeah the pro there wasn't you know this this was a really good video but I don't really know what it has you know it's hard to take anything concrete out of this video it was good I I appreciate it I'm gonna give him a thumbs up