alerts are off because I'm a genius smartest man alive hey don't try this home don't wait don't try this home don't try this at home CSS as a back end introducing cascading server sheets who here's excited who here immediately got a ton of anxiety and is very excited about this things that probably shouldn't exist two-part series don't try this at home CSS only image detail Zoom okay and CSS has a back end it sounds like this person really knows Pascal first off beautiful name second off it seems like you know a lot about CSS that we probably shouldn't know okay long as we can get can we get Tailwind version for back ncss to make it easier is that a thing can we already do that I I'm pretty sure somebody can invent can we get front wind for the back end and Tailwind for the front end did I just make a really odd observation that it's named backwards oh my goodness let's do it make front win somebody make it all right here we go here we go again another one of these and promise you will be questioning this uh my sanity after this one okay let's turn down the this thing headwind we can do headwind I like front wind a little bit better because it just sounds funny all right I was just getting the groceries I walked down the street to the local shop when it hit me cascading server sheets I love these moments in life they are the greatest moments in life when you're just walking doing nothing and all of a sudden you realize my goodness I could do something truly atrocious love it today we will use CSS as a server side language that's right use CSS to declare routing do maths Quick Maps heck even use CSS to do templating and we're not using anything like SAS or less I don't even know that I don't even know that he did that I was already just uh due to due to lesson now I'm over here you know like I do the king make a squeal connection now that's the real thing if you can squeal in CSS hell yeah we don't do no stinking we don't need no stinking Loops but plain old CSS what why SMBC has lately put it quite well although it's part of a comic about quantum computers let's see the Deep abiding goal is every uh of every Engineers to take a thing and make it to do a thing it wasn't supposed to do this is true this is this is some internal thing in deep inside of me somewhere that does exist in my younger years I would spend an inordinate inordinate amount of time doing something that should never have been done but I loved it like you know like here's a good example actually I still do it in my older years I still try to write things in Rust that shouldn't be written in Rust what is that a front end right in Rust right like that's the same thing except for now we call that engineering you know what I mean you know you know what I mean nah nah I mean let's go leptos I actually love leptos leptos is one of the greatest Frameworks of all time so you know personal opinion there imagine changing a tire uh with the Hubble telescope doesn't exactly work out does it oh I'm sure you can make it work though well how awesome would it uh would it feel if you managed to do it though and that's what I'm after this man is chasing the dragon severely chasing the dragon [Laughter] you know I just wanted to be able to change that with the double the Hubble telescope didn't get that feeling over and over again uh hey maybe I'm starting a new trend here who knows you're not starting a new trend because remember um people have been putting doom on odd devices such as like even like a doom on a pregnancy test uh no first let's see no first person shooter jokes a hardware wonk successfully played to doom on a pregnancy test yeah so like look at that there you can even see it right there hold on we'll turn it down so this is not new ladies and gentlemen what's going on people actually friends there look at this look at that it was great look at that that's level one you can tell you turn left and you can get the shotgun guys oh okay you're going straight for the M okay there's an imp yep yep go through the door here it is there's the door okay open it up here we can see oh there's the Empire wait no the M comes next doesn't it oh that's right there's this as an output how sweet is that oh my goodness Quake I know but no one cares about Quake okay it's all about putting Doom everybody knows that it's all about Doom uh it has a yeah you can also pee on it and it'll tell you if you're pregnant so like how amazing is that are you pregnant or are you just simply playing Doom who knows uh quake and CSS oh I bet you someone could Port if you can actually get logic someone will Port Doom to CSS all right who knows even if this trend is just laughing at my silly ideas and never taking me serious ever again you might know that uh the saying that people were so obsessed with whether they could that they forgot to ask if they should I think this isn't quite the the slogan that's a Jeff Goldblum quote from Jurassic Park one scientists were so obsessed with whether or not they could they forgot to ask if they should I think it's the more appropriate version of that that quote I'm well aware of the fact that I probably shouldn't but the question is is I could is I could oh and I mean stupid uh this tool will be something I'll never ever ever use in production and you dear reader should never do it either please there you have been warned okay uh Cass let's see okay Cascade server sheets it is let's uh first let's define how this thing will even work I was thinking about an interface to express okay interesting uh a slightly better language than CSS for a back end uh JavaScript that is basically Define a catch all route in Express load the CSS file Parson interpret the Styles this part will be fun I guess and shoot whatever Dom emerges over the wire okay that seems good oh htmx would be a great front end for this you could do an htmx front-end and make this a real thing uh to do that first let's install Express please note that I'm using uh let's see a node version manager to switch between node versions okay so apparently we're doing 14. okay awesome now let's create a little app and start uh let's see and add a start script okay there's a bunch of this don't try this at home thank you this is a great license by the way Pascal I appreciate that I like the little details that this guy does right he didn't just put the like the joke in the description he he tossed it in the license you know but the one thing he did Miss was the version you know I love your your extensiveness but please oh one three three seven a 69 a 420 a 42. you know there's still a lot of availability to to explore here uh in the express app but we Define a catch-all route that tries to figure out if a given route corresponds to a CSS file or not if it exists it simply Returns the content of this file if not a 404 will be thrown okay do a little bit of this do a little bit of that fantastic use one of these and there we go awesome I like to see this look at this this Judo already is talking about llvm back end for CSS it could be done this could be done all right so anyways we read file sync okay utf-8 hey good I want to make sure this is utf-8 appropriate and then we just send the CSS so this is the confusing part how does it how does the CSS produce HTML this is what I don't get okay Quick Test shows that everything except small uh small index.css field uh yields or file yields a 404. okay good evaluating CSS Thinking Out Loud all right okay so here's the fun part someday we'll need to figure out how to execute the CSS a server side and take whatever it outputs as the app response the first thing that comes to mind for rendering is simply use the CSS content rule to render well content it can use CSS variables and counters so we can technically even do math with it quick math probably uh there's just one problem the browser evaluates counters and bars on the fly so we cannot just evaluate the CSS oh my goodness is this client-side reactivity I've been hearing about do you think that CSS is actually just use client under is that what use client is underneath the hood for the new for the new use server use client react server components don't think I'm not looking at you Dan abramov I I know what you're trying to sneak in okay I get it take whatever is the content and I'll put that so the computed style approach doesn't work believe me I tried basically uh you'll get what you uh let's see you'll get a what you see in the CSS tab for your Dev tools imagine this piece okay so we got some numbers we got some this and then we do one of these oh my oh oh my goodness and this is what you'll get okay the sum is 15. yep that doesn't doesn't quite work okay oh my goodness it's using before Oh this is disgusting so why don't we use a browser to do that the browser does evaluate this stuff somehow right the only issues that were Shifting the problem here there are node implementations of CSS they are offered compute let's see they offer computed Styles and browsers uh and the browser we would be using would only offer the same thing right if there was a way to let the computer read what's on the screen ideally the browser would load the CSS file and we wouldn't inline anything otherwise we can't cannot really use stuff like import so we'll need another controller that loads CSS anyways sounds like a lot of future me problems so let's first introduce Puppeteer oh gosh oh no we're already into puppeteer where I feel like all good problems turn into web scrapers that make Elon Musk reduce the amount of tweets some people can read let's go uh thank you Chrome debugger protocol appreciate what you've done to everybody uh to load the CSS we need some HTML uh we can create that on the Fly and check the loaded CSS with the link base64 encode the entire blob and make the browser parse that okay so we got this thing uh create Dom oh but this is not what I wanted to see now now but now but now you're doing javascripts right this is Javascript this isn't coffee script I can't tell because you're using terrible syntax what is this uh anyways that's just me ripping on modern JavaScript in their Arrow functions I swear what is wrong with you Arrow functioners why do you create a variable that has an anonymous function did you know that V8 team actually had to create it so that their stacked races would consider the const variable name as part of their stack Trace because it's such a stupid pattern emerged that even they had no idea people would do that do you realize that for like a year you just got Anonymous function instead of the name of the variable because because the VIP were like no way people would actually do that that would be dumb right they're gonna just create functions and then they'll do Anonymous functions Arrow functions where you actually want Arrow functions right am I right wrong I like how it looks no you don't it has way more symbols why would anyone want more symbols I don't get it uh note that let's see how we already added the HTTP method as the data attribute in any args of the CSS variables okay okay we got this thing we got the body data datified args okay interesting next we need an internal route to express uh to our Express app that serves the requested CSS file all right so we got internal oh nice go conventions No One's Gonna Be able to get in here don't you hate when you do go and you find a method that you need and it's in the internal like one time I had a stats package and I wanted to do a man Whitney test but the actual man Whitney test in the stats package was behind something that I couldn't actually just just give me the effing man Whitney test that's all I wanted and I couldn't get it so I had to like go and copy the code because stupid internal package anyways here we go do one of these things yeah yeah this is great uh internal file resolved okay app path okay okay a request to internal index CSS would then load app index CSS weird just weird uh and serve it Puppeteer can now load our apps and execute it we could do more validation here but I kept it basic for the sake of implicity for the sake of implicity now get to the Puppeteer game okay we're gonna go here we're gonna create some Dom uh the browser is going to launch fantastic no sandbox never needed no son of a Sandbox anyways uh we need the page we're gonna get the page we're gonna get the Dom we're going to base64 and code it we're gonna hit that we're gonna go to this one we're gonna set it as some sort of base64 goodness load timeout wait for 30 seconds oh Magic now try this with a little bit of index CSS low and behold Puppeteer executes the CSS and displays the results let's go let's go now all you gotta do is set that content uh to HTML and boom we got it rendering exacting the content the future me problem right yeah well or we know that we cannot use computer styles to get any elements content especially if it contains variables or counters we can also we also cannot select the copy paste uh the render text since chromium cannot do that so how do we get the rendered and evaluated text every download let's see ever downloaded oh my goodness ever downloaded the website have you ever downloaded the website as a PDF the evaluated text gets selectable can the Puppeteer create a PDF from a website yes it can just when you think something couldn't get any worse you put it into a PDF right really like that's actually how you get end game worse you wouldn't download a website as a PDF would ya yes I would I would just like to state right now I will download a website as a PDF you know we can somehow parse the PDF to get text of course we can a PDF parse absolutely this Library lets us parse any given PDF and extract the text do you know that I worked in a previous company uh web filings which is now known as workiva and during that work we actually made so many commits into the whole PDF ecosystem PDFs are just straight wonky there's no rules there's a thou it is the most ambiguous parsing uh exercise of all time it is crazy their standard they have set forth it is crazy it's like a bad idea on top of a bad idea on top of a bad idea on top of a very well known and distributed format that's what it is it's worse than printers it is the worst thing ever 30 years of backwards compatibility yeah okay anyways we're not doing any Shenanigans with images layouts and whatnot here uh we only render out plain old HTML as an unpar string we can copy and paste that there we go people do you hear this htmx right down the path do this Bamba bam we're doing a little bit of this then we're gonna go here we're gonna get the page with as a PDF we're gonna render that data look at us go then we're going to resolve that beautiful text let's go and as the last step we adjust all uh the catch-all route uh to get the text hell yeah girl look at this this is beautiful we get the little file we get the little content we do a little bit of promise we do this I mean you could have technically you know this is you should have made it async and a weight and you can do all the sweet new CSS things since you're already doing all these sweet Arrow functions come on that should do the trick it's demo time let's put this thing to test calculator using a form a basic hello world is simple enough let's build a CSS a calculator title calculator method form I hate my life uh wait what the  going on here who allowed this into CSS who allowed that into CSS is this why web3 Consortium has 11 110 million levity five million pages of documents because of stupid things like this why would you need why would you want this why would you want and I gotta quit asking why why did we not have this earlier when I was younger doing nothing but raw dog and CSS and a and IE8 why did I not have this why did I not have this is beautiful you get a form you get the sum you get the content this is beautiful this calculator uses multiple features reacting to get and post doing math displaying the results so what does it actually do well we render the title on the form uh with two input Fields called num1 num2 if the app encounters a post request it displays the result which is calculated by the CSS counter the CSS counter is first set to num1 and later on increased by num2 yielding the sum of two numbers hence basic addition calculator does it work it does Simple two-page app with navigation let's abstract away some of the header and footer into Global CSS file of course oh this is standard so we got the root we got a navigation level we got this we got a little footer copy copy 2022 input Global look at that look at this this is this is pretty much PHP at this point works like a charm beautiful this is just absolutely beautiful absolutely I'd even by the way I don't even know like dash dash footer is a thing I didn't know that this is some sort of thing I don't even know about this stuff at all works like a charm fantastic phew what do I edit so since this apparently sparked some confusion let me explain why I used mainly JS for this product even though it says CSS in the title every programming language that's executed runs through an interpreted interpreter or compiled written in some other language node.js uh for example was originally written in CC plus it still is actually uh the CSS server I've built uh here would be equivalent I use JS to execute the CSS CSS is the userland code for the CSS server just like JS is the user land code for node yep absolutely so this is just an interpreter on top of an interpreter that's all simple your interpreters Puppeteer that launches a browser that runs everything so you actually have V8 and Chrome headless Chrome right that's Puppeteer it's just headless Chrome right so you got V8 launched to run CSS to get parsed out the results using node which is V8 so it's two V8s double the V8 V16 it makes sense who would be confused by this I don't know who'd be confused by this it's beautiful amazing score of two soviet-like Tech this is soviet-like Tech this is governmental Tech to the max V8 V8 squared v64 it could be v64 it's like a Bugatti things fast rust server can serve anything wait till you see my CSS server serving it hard okay CSS I love it um I think what this really goes to show me it's not that CSS can be used to create a server it's that CSS is entirely too complicated that's what I see right here I think that we can all agree that CSS has jumped the shark sometime a while ago like I think all CSS really wanted and should have had was flexbox and transitions or grid layout grid layout sometimes is a pain in the ass sometimes grid layout no matter what you do is just wrong it's just always wrong it's just wrong forever sometimes I wonder maybe float was actually better maybe just maybe float truly was the superior layout mechanism float is still the best it gets the job done do you even float uh CSS is pronounced CIS oh is it I I have got that t-shirt nice yes that's the Gen 8 the name is the CSS Edition