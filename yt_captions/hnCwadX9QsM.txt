how much have you looked into C++ 23 oh C++ 23 is not as big meaning I wrote essentially only give you rough number I wrote around 10 posts about 23 around about 20 to see the difference mhm so on the call language you have one extremely nice feature this is um did using this which enables pretty smart techniques to get rid of for example CTP on the library side you have interesting uh libraries St expected monatic extension of St optional then mty span multidimensional span what is so do you have C++ 23 already fully covered on your block um I would say I it at least as much covered as reader should know I don't go in each detail and still many features are not available for example um um flat map flat set I'm really curious about the performance numbers but so far none of the big three imple implements them that's true that's true I still wait and want to compare it with a map and another map because I'm really curious about performance I've looked at to crtp recently and deducing this seems to be really nice for that um exactly nice buted on GCC right now and I'm on on 13 and I have no plans to change to 14 right now there's also the so-called overload pattern to get rid of the design pattern visitor and this can be done really really nice is it using this so the visitor becomes very very here and one of let me say do you know what my favorite feature is probably St Import St you can just import a modelized version of the entire standard Library this is so nice in particular for beginners you don't have to think if is this uh ior in functional in numeric or in um function numeric you basically get rid of all the headers right exactly you have like the whole standard available and you don't have to think like what do I need to include and you say only Import St this is all and with Windows you can can already use it I think this is a very nice feature for beginners because they often forget to include the uh needed headers or sometimes you don't include it it works on Windows but it breaks on GC or the other way around yeah I think like modules are still far away from being like portable ahead but it's not a question because now it's not your uh in the responsibility of the developer now is the question of the compiler uh build now you I think this extremely nice feature just say import this was it