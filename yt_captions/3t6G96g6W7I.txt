and to kind of close the loop what are your views on any and its Evolution from boost to The Standard ah okay the only question yeah so and he has a long history um A pre-standard History A pre-boost History um and uh it's I came across the term any in a lot of this love kind of type Theory papers and things in the 70s and 80s uh and then ASN one abstract syntax notation for specifying what should be transferred in the protocol they all have a type called any and it's this kind of universal type that's not necessarily a root type and I was working on a system where we needed to have such a thing and I worked out you could do this generically the problem is we couldn't actually use the templates that we wanted to at the time but I worked out in that case okay how do I dumb it down to the types that we are likely to use the basic vocabulary types that we allow you to use but the whole idea of having a universal type um if you like a type safe void pointer but that's value based it was one of those things that was very interesting in fact that old project I discovered afterwards they they started joking about the whole thing after I left as Kevin any um you know it was uh uh it became known in the code base from that point of view but when boost started up it was one of those things that uh you know I I've I've contributed three things to boost two of which are about weakening the type system one of which is about strengthening it numeric cast lexical cast and uh any um and animated into the standard and that was um you know it it had undergone I introduced it originally the C plus report article um you know over 20 years ago 25 years ago um then I submitted it to boost adding a little more complexity so on but then I passed off the ownership of that to it to others and it's evolved there but it's actually kept it's it's kept its Simplicity it was always intended to be it's got to be a simple type it can take absolutely anything it's not a it's not a a kind of constrained Union type like variant so therefore you don't know its content you have to if you can just pass it around or you can ask what it is and get values out of it but you can't do anything that is any more sophisticated that it was never intended to be any more sophisticated than that um so I'm actually surprised that over time it has become uh estate as consistent as it was now it was standardized it was included in C plus 17 the late beam and doors was primarily responsible for standard taking the original text and tightening it up and I just gave a few comments and so on Beaman did a really great job there about it I wish it had been different because by the time you got to C plus plus 17 um this type that this type was nearly 20 years old and C plus plus had gone through a number of Standards so I with hindsight I wish that see I wish it had been more consistent in its appearance in other words we could have changed certain things names and syntactic conventions and usage conventions I think that optional variant in any should have a lot more consistency and that's unfortunately because C plus plus doesn't have a kind of binding Vision they were standardized as they were because they came um they had a source you know boost in the case of variant and um uh any and they were left very much as they were so they were still compatible with those old versions I actually think they should have been changed in a way that was not compatible that's the whole point of namespaces this uh so that they were more consistent with each other and they had reflected the standardization Trends and idioms that have been acquired in that time so I still retained the I love the basic idea I would stick with that but I kind of like the way the various and optional do things a little bit more all these days and I kind of wish Annie looked a bit more like that and I think there's one more question and then we're going to close