it's just better all right I love building a startup in Rust I wouldn't pick it up again this seems pretty Fantastical I like where this is going I think this is kind of exciting right like when I see this it stirs in me all sorts of different emotions because why would you love building something and why wouldn't you pick it again all right let's see for almost two years now the vast majority of our backend code was written in Rust aside from a little bit of python I love rust it's by far my favorite programming language I find myself missing match in pretty much every other language I go to you know what's funny match is one of my I don't use match very often I always find whenever I'm using match I'm disappointed that I'm using match I don't like how many indents happen in the code you know what I mean I don't know just maybe me however if I was doing it over I wouldn't choose rust okay this is interesting this advice is primarily for early stage startups pre-products pre-seed pre-idea pre-seed pre money uh but first it's important to ask why we went with rust in the first place okay I'm excited I do love edoms I do love rusting them so this match statement all that we'll see all right so why do we choose rust initially safety plus plus I'm excited that they didn't say performance because I really do think that rust has a lot more to offer and I think readability and expressiveness is actually their primary offering and then everything else Falls ahead of it if there was no memory safety in Rust and I was able to get as good as I have been so far I think I would still enjoy the language more than JavaScript I'm a big believer that even the best developers get slowed down by silly mistakes absolutely types are obviously important to combat that but rust feels like it goes above let's see it goes above and behind here not sure what that means runtime issues are easy are easy to avoid you have to go out of your way to cause a memory leak crates like squeal X exist so you can do compile time checking of your squeal queries against the DB uh arrest and the ecosystem around it has a lot of tools to stop you from shooting yourself in the foot like I think this is incredible right this is incredible that they actually you can do like type checking against your queries using squeal X like at compile time yeah above and behind I the above and behind makes no sense in this case I'm not sure what that means above and beyond I think is what he means uh because behind is not the right the right one you know what I mean grammarly dung goofed uh readability versus Express or readability divided by expressiveness there are many things about rust syntax that make me happy yes the question operator yes yes it's a great approach to error handling and it keeps the code focused on a happy path not only that but because of the error operator but more so because errors our values knowing what functions could error is one of the most valuable thing about rust that I think is completely understated that people just do not understand why this is so dang good it is crazy it's crazy how good error first approach is we frequently write code like this yeah yeah this is this is beautiful this is beautiful I'd say the first question mark propagates unexpected DB errors the second one propagates not found errors yeah I love it it's so good uh yeah error is very very nice oh I even just use anyhow honestly I just use anyhow for all my applications because for the most part when I'm developing an application I don't really care much about the errors other than that they're present they have a good name they have like some information and that they're correct like that's all I really really want whereas you know if I'm developing a library it's more like this error I choose a more uh uh you know I choose something that I can really structure and I keep really nice yeah language like JavaScript is really dangerous in the sense that you don't know that this could error like if this was in JavaScript you would have an await right here and that's it and your definition would be user or undefined but you would have no idea that an error could be thrown in multiple locations right and that's the that's a big thing right there which is just uh really succinct for what it does while being flexible if you also include algebraic types match type conversions from into try from and more rust let us write very succinct readable code agree why wouldn't we not choose rest again okay so here we go are you I hope you're ready I hope you're ready because I am ready I hate exceptions exceptions are terrible right exemptions are terrible here I will link the article right here you can just look it up why I wouldn't or the it's called I love building I love building a startup in Rust why I wouldn't pick it again okay if I were starting the company over from scratch there are a few things to consider slower iterations I would love to I really want to know more about this because I I'm super skeptical of this one when you first start with rust you'll end up fighting the compiler a bit Yep this is natural and it gets easier Over time however at an at a new startup one of the core problems is figuring out if you are building something useful absolutely a quick MVP can be invaluable for uh in determining if you are on the right path or lost in the woods at the time of making it readable performance code might be wasted I would say yes and no I'd say that there's a couple things I see right here that are kind of uh I I I why I hate this argument is that you can write rust in two different ways let me show you something uh I don't know why this screen is so crazy right now but let me show you something uh back it up oh yeah I use this for a box art earlier today don't don't worry about that uh oh my goodness dap dap them all right uh let's go like this hey uh let's go in here and go to what is it called it's called Uh Explorer three and if you look at the code that I've been kind of producing here you'll notice that look at how often I'm using clone I'm using clone all over the place also two path buff right you'll see that I used a bunch unwrap all this kind of stuff and the reason why I'm doing it this specific way is that I'm not trying to write great code I'm just exploring to make sure the thing or the concept is the right concept I want to build is this the right path I've taken I've Rewritten this code like seven times on stream just because I know for a fact that if I'm going to write this well I first need to make sure I actually have the idea correct and so I think that there's two iterations you can always go through you can always go through like the fast just get it done make sure you have the right idea the thing is correct that's the way I want it and then you can kind of go through and undo a couple of your you know your freeze that are that are stupid right like oh I have some unwraps I have a couple of these things here let me just pull them out really quickly right like I mean I can easily do something in here that doesn't continue if I unwrap and it's not there right so you could imagine that I could I mean I could literally take this once I know that I'm right uh how did I just do that oh no yep I have that weird bug in neovim look at this I don't know what happens but it has something to do with netrw getting triggered but you could imagine I could copy this right take out this thing path is now an option of that thing if you know blah blah blah blah I could go in here and do some continuing try to make it better match on it call different functions refactor I could do something to just get rid of this but for now it doesn't matter I'm just going fast I want to make the right thing first I wanted to do the right thing and I want to test it to make sure it's exactly what I want and so I think people forget that with rust you kind of can operate in two different modes you have like the just the copy simple just get it done with code and then you can kind of come back and make things better and so that's a lot of times how I approach things when I'm trying to move super fast is just get it right then get it good I don't know personal opinion additionally every new employee that isn't familiar with rust will run into this yeah absolutely I mean but have you ever tried to hire someone brand new to JavaScript real talk if you hire someone that only knows about uh about say C plus plus and you make them start doing JavaScript the real reality to the situation is they won't even know what methods throw they won't be putting try catches in right places they will be just putting dangerous foot guns all over your code base and you will have no idea they'll be accidentally mutating when they should mutate there'll be just so many things go wrong because you're not familiar with the language and so again is this a problem or is this a the ecosystem isn't quite developed right you know it I mean maybe it's not developed maybe it is I don't know perf is easy when you have AWS credits yeah uh one reason that you might pick rust is for overall performance you should see this recent tweet I saw I I would I I might try to pick it up at a startup when you start to scale you are met with an interesting alternative take the free money that every infra cover company offers you and scale vertically slash horizontally AWS activate gcp has a startup program if you search for startup deals you'll find many more there's a whole network of products that have yeah again I don't choose rust for performance first that's not a great reason to do it right um I I just don't think that its benefits come from that honestly I think I honestly think the biggest benefit from rust is its enums once you start playing around with enums and your ability to use those enums well it's just a hundred times better right uh so let's see AWS credit when you're ready you can apply for up to a hundred thousand dollars in AWS activate credits to help cover your AWS service usage once you're approved for credits you'll unlock access wow I mean that's a great deal it's a great deal you can postpone dealing with scale to make uh making a bigger caves cluster or a larger yeah um I I mean I don't the problem is is postponing is a really expensive operation right what is more what is more expensive optimizing a system that's big or taking an extra month trying to build it right in the first place which one's better I don't know I can't tell you because this is one of those things that yeah building for a startup 99 out of 100 startups get thrown away right away the next of those ones that are remaining 99 100 of those probably pivot once or twice which means a huge rewrite so I understand the tension why you don't necessarily want to use rust because you don't necessarily know what you want to build but at my job same thing happens all the time I don't know what I want to build I have to predict the future of the tools people need to use and I have to come up with that idea right and so that's that's not easy either so I need to be able to iterate super fast and I find that I'm not much slower in Rust than I am in JavaScript especially when I don't care when I don't care I would say I'm faster because almost all the libraries out there in Rust are just simply better they're just simply better absolutely hands down like this right here just again I know this is kind of doing my own horn look at this I find all the public mod definitions and all the public functions with this much code right try doing that with a sprema try writing that much code to find everything inside of it and to use esprima or whatever Acorn or whatever your parsing library is in JavaScript to parse out a file and get the actual you know structural AST from it you know how easy it is in Rust to do this because of how amazing this crate is you know how hard it is to do I mean again there's really great technology around Russ so I have this hard time with is it faster is it slower I don't know uh what really boils down to is that Russ is a great language for building performant production systems if you're prototyping iterating with customers or just unsure in the product Direction you're probably going to waste valuable time with rest uh you know I can definitely buy that if you brought it by you know I I understand where he's coming from Once you have that Clarity you get shifted to it's time to scale mode or perf actually is really important here mode or even we have a solid Direction roadmap and we don't want too much Tech debt yep yeah mode rust is a fantastic choice okay I can understand this argument he's trying to make maybe the first couple months of a startup use something like JavaScript to understand your general direction and then rewrite I mean again that's hard you run into all the same problems you mentioned up here people not knowing how to use rust hiring uh or you know even writing a brand new product that you've already written once writing it with JavaScript inherently colors how you should be thinking which does not fit into the rust box is rewriting going to be that easy are you really going to be able to say hey I'm going to wait for I'm gonna you know now that we know what our customers want hey customers could you wait for a couple months while we rewrite this I don't know I don't know if that's actually any better uh Russ has provided us with an incredible solid foundation and we've invested a lot in the developer experience internally we have extractors for different user requirements to make adding apis very straightforward we have middleware for scoping requests per customer in most languages this is pretty standard but in Rust for our case they both record at least a rough understanding of pinning yep yeah I really don't understand pitting but I mean I mean I get it but I don't get it you know what I mean goes a great language I think that's a good middle ground as I think go has a huge potential to win a lot here I think goes biggest weakness is the fact that it doesn't have a strong story in the UI I think rust with something like leptos has a strong story in the UI JavaScript with typescript react solid.js whatever you want to use it has a strong story in the UI but go on the other hand does not have that they don't it just there's not a strong story in the UI and I think that that makes it really really hard right and for anyone that says oh well you know JavaScript oh yeah whatever the thing is is that you gotta remember when you're one person trying to build out everything having a singular language a singular code base a singular item to just do one language one stack one set of types there is easiness to it I'm not saying it's bad I'm just saying it's why people often choose it it's just because it just feels easier whereas with go you have this whole problem where you have to have two definitions or a uh like language independent definition protobus something in the middle to be able to communicate back and forth and you know it's hardened it's hard you know I I don't think it I don't think the answer is straightforward uh what the hell is a UI story what the hell is a UI story meaning that when you say say you build a server in JavaScript you can serve down content in which can become the UI that types to that content how you handle it how you interact with it can be written for both the server and the client and the client can just use that and develop it with rust you have the exact same thing you can do that with leptos you can build something on the server and you can use it exactly on the client viawasm with go it just doesn't feel there you know what I mean it just doesn't have the same story I don't know of anything that's I mean I know that there's been attempts to do it but I mean you have to ship a garbage collector with rust or with go like that's a lot of wasm you have to ship even a tiny one still a lot now that we're here and we have all these utilities to build on top of and domain knowledge built up we're ready to move both quickly and safely but if I look back at it as much as I love rust I'd absolutely not choose rust again yeah yeah you know I I think I can understand this um I'd say you know something that's interesting also is that this was two years of rust how far has rust come how many more people have jumped into the ecosystem how much better are these HTTP libraries uh the alternative is always JavaScript it's almost universally JavaScript but people pick at startups right in a startup world it's almost always uh it's almost always that is there F's in the channel why is there F's just refresh I'm still live I'm still transferring frames yeah I'm back I'm good I am good that's twitch that was twitch I was fully capable right there yeah just refresh refresh refresh uh hi but real talk I think that that is something that ends up happening I mean I would love to see more go I think goes a I still think goes a great language I know like Theo hates go uh some people hate go I think goes actually a really good Intermediate Language right it fulfills the easier to develop Niche it's really great for apis they have a lot of solid Tools around it um it's really built for one purpose and one purpose only which there's a lot of strength to it I think there's a lot of weaknesses to the language it's not my favorite language I don't I like I I don't enjoy or love writing go I find go like eating uh Wheaties right it's just it's boring it feels boring but boring is okay like when you're building a product boring is okay um goes also really simple it has great concurrency model uh there's a lot of good things about it it's there's a lot of good things about it uh anyways you're welcome uh go air handling feels clunky at best yeah I'd say the error handling is by far goes biggest weakness I really wish they would have thought about that ahead of time I I really wish they could even try to implement like a just something right some sort of pattern that makes it easy you know what I mean all right well that's all I have on this one I thought this was great this is a great article uh there was no meat here though there was absolutely no meat here I don't think he really great gave that that great of an example here you know what I mean like what just happened here I don't feel like he did a great job here I don't I didn't get anything out of this and so I do think that this definitely needs to uh there definitely needs to be a little bit more thought in this article it could have really helped uh his complaint just seems to be rust is he loves it but it's hard so be careful don't use it