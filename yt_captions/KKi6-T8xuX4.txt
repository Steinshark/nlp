i'm happy to talk today about c plus plus 20 and in particular about the hidden pearls inside c plus plus because you know c plus plus is a big big simpler standard okay this is all what we have regarding c 20 we have the big four and we have core library and additional core library and concurrency features you see currently which features such a three-way comparison operator designated initialization const error and coils in it templates or long-term improvements on the library side we have also nice but maybe not so known features such as stood span container improvement arithmetic utilities a big extension of the corona library which we have since c plus plus 11 regarding calendar and time zones and affirmating library but this is not all we have improved atomics semaphores simple coordination mechanisms such as ledges and barriers we can cooperatively interrupt something which runs and this is mainly due to this new or improved threat g threat okay to make it short i will not talk about the big four you see i already did it and you may know them but you may not know them here the small pearls of the hidden hoes so let's start because i have a lot to explain about the four language first of all we have a three-way comparison operator and when you look carefully it looks like a spaceship and therefore it's also called a spaceship operator what does it mean you can the compiler can auto generate the three-way comparison operator for you and this means that you will get all six comparison operators for free and as i mentioned it's called the spaceship operator and you can request it by just saying equal default of course you can also implement it but anyway the comparison operator created by the compiler uh you need for this the header compare and this comparison operators const expert and no expect except sorry constructor means it could run at compile time i will come to this keyboard in a few minutes and essentially when this auto generate comparison operator does its jobs it performs electrographically comparison this means all members and all all members are compared in the so-called declaration order in the same holes for all base classes from left to right and here you may see an issue a performance issue but this is not an issue in c plus plus when you think about comparing two strings and you want to decide are the strings equal or not you will not make a lexical graphical comparison sorry for this difficult to pronounce blood you will not do it lexicographically you will do it just by comparing their thighs and if the size is equal you compare the character until you could make your decision so it is for equal and non-equal there's a shortcut which makes this comparison faster okay how does it work when you invoke a small than b the compiler maps it to a you see space should be and this is the comparison which is actually confirmed which is what is great about this comparison but it is the following when a smaller than b does not work the compiler implicitly compares b with a which is great okay when you already have comparison operator one of the six you know smaller bigger and so on when you have already have one of these six comparison operator in your class they have higher priority than the one out generated by the compiler okay this was the theory as i mentioned it it's way too much stuff to explain you all the theory i want to show you something have a look here here i have a small wrapper around it you see my end has an ink inside uh i i have a default constructor so i have constructor and here's the interesting part here i require or say to the compiler please auto generate me the three-way comparison operator by just saying default and here i did it by myself in line eight why i want to compare instances of my ins with ins you see and this is what i did i just use under the hood the three-way comparison operator and let me show you how it works now i have here a function a function template is less than in which i want to compare to uh to variables i can do it with two instances of my end i can do it with two instances of end of course is historia but i can also do it with an instance of my end and an instance of int why because i implemented the comparison operator for ind and here's the proof that the standard compile type you see i want to have to recite a compile time therefore i enforce it by saying constexpr okay let's continue i have a lot of stuff to explain here we are i wasn't editing it okay what we also have in c does plus 20 is designated in sensation what does it mean first of all it's based on accurate get okay for this aggregate an aggregate is to make it short a c a c array or a class type class structure union which has only public members and no not user-defined constructor and the nice feature about aggregate initialization is that you can initialize an aggregate with the initialization list this means you don't have to implement a constructor and of course the order of arguments must match the declaration order of the members in this aggregate and with c 20 this feature becomes even more powerful have a look i have here extremely simple data type it's an aggregate having values x and y now i can initialize it using their name this looks extremely convenient the members here can also have a default value in which case they will get the default value when you don't provide an initial initialize here if the initialize is missing the default value is used okay um now in conversion is detected this means when you want to initialize this int with maybe undoubtedly on float you will get essentially a warning but most compiler will handle this as an error okay let me show it to you this feature you see i have a point here x has low in its uh it's not initialized y and set have uh default uh have uh are in initialized in the class here from point which just displays these three types you see x x y set and now i initialize it in various ways here i specify each value here i specify nothing and this essentially means that x has an arbitrary value in my case here x is zero anyway there's no county additionally i can only specify let's look here x in set therefore y gets the value one and this looks quite nice um here i only initialize x and y and set get the value inside the class and only to make it sure maybe you know it from python you have to um use the declaration order you see when you first you set and then why set and revive this is an error okay i'm a little bit irritated because i cannot observe the chat window but anyway i will go back and look in the chat with you later maybe you have a question questions okay now i come to const while in const in it what is called const in it first of all constant value generates an immediate function what does that mean you know presumably constexpr constitutes with a function which could run at compiler it depends on the context or uh what you want to do with this function if you're using a constant expression then it runs it compile time but if the context is not context verb a const extra function can run would could run at uh runtime okay but this is the difference a constant value function can only run at compiler and a different term for it is immediate function and we have a new keyword regarding const which is called constable what does constable mean constant will mean that um this variable is initialized at compile time but here's the here's the extremely interesting point it's initialized at compile time sorry i made a mistake i was a little bit irritated let's go back i talked about constable when i skipped in my head to codes in it let's go back constable okay can not be applied to the structures or functions that allocate direct has the same requirements such as the constexpr function and is implicit inline let's have a look here this is const eval this means this function can only run at compile time therefore this is fine but this is an error when i invoke sqr with x as argument and x is not a constant expression you see um this could not run at compile time level never i have an issue here i get an error because sql wants to run or can only run a compiler only um in order not to uh to irritate you we have usual functions they only run at runtime we have cost eval function they only run at compile time and we have constexpr function which could run at runtime or compile time it depends on the context in which you use them and now sorry i come to concentrate constant inequalities that are variable is static with static storage duration is initialized by compiler what does static storage storage means you have a global something which is defined outside any scope or an object which is declared aesthetic or external and the key point is now you have to guarantee that it is initialized at compile time and here's here's the here's the very interesting part it's not constant this is different to constexpr when you initialize something at compile time and you make it contextual it's constant but with constant net you only have half of the guarantee which means initializing and compile them but you can still change it this is something which is extremely uh how should you valuable in a concurrent environment okay and this solves the static initialization auto fiasco i will not go the fluid if you like it follow this link uh okay a few small improvements improvements regarding templates with c plus plus 20 you can use floating point values as template arguments or you can use glasses with cod sticks for constructors there's more with c plus plus 20 you can how should i say you can write template lambdas these are lambdas which are primary christ on a type i assume this looks strange so let me show you something have a look here here are three lambdas this is lambdas which uh which we have since c plus plus 11. this lambda could only accept the int okay this is generics lambdas which we have since c plus plus 14 and this lambdas could accept arbitrary uh values of average time meaning first in seconds can have different types and this is special you see now i have a type parameter t and first and seconds are of type t what does it mean essentially first has an arbitrary type and second must have the same type such as first you see there's only one t here and this is maybe an example which you may think is more meaningful have a look here i say i define a lambda which can only accept a vector but what is variable here is the type of directory you see you see it here i have a vector and i can use this lambda this is fine but when i have a deck which is of course not a vector and i enable this line you we will get a compile-time error you see it here in a few seconds here you see it no match to call for call 2. this is uh by the way gcc 11. see you can define a lambda which accepts arbitrary vectors but only vectors okay let's go back okay this was the end of the call language now i have to improvise because i cannot see the chat window let me see if i can see it are there any questions so far yeah victor i see your point const is not const okay okay so but for me is the compile explorer almost unreadable sorry for martin for saying that but first of all i will send the presentation afterwards you can have it and second i will try to increase the font size okay let me go back to my presentation you so i have to switch a little bit between the screens okay full screen mode now we come to the library we have a few new data types and the other types which may be extremely valuable for you is good span i only talk about the span with a dynamic extent not with a static instant okay stood stance stood span a stands for object that refers to a continuous sequence of object and here are the key points as good span is never known it references something in this what is reference can be an array a point of the length or stood vector of course in theory a typical implementation is a pointer to the first element in its length you can also partially access the underlying or the reference area and here's the key point to take away it knows its length i couldn't i could tell uh let me think i will make the font a little bit bigger i hope this would help and also let me make it here a little bit bigger okay and here's the example have a look i make this a little bit smaller because we i don't care about the sampler code today and let me draw this to the right okay this is a function print me it gets us to spend with dynamic extent and it displays its size and it displays its elements you see i iterate through this container with a so-called range-based volume and as good span fixes this crucial issue we have in how should i say it in c or in legacy c plus plus and this is the following you have a theory you have a function who wants to have the theory what does this function need a pointer to the first element and its length and when you have a bad day you miscount the length of this array and you have an error off by one arrow or something like that but this would not happen here you see you have here an array in the array with four elements and now the compiler that uses four elements in here other elements i use hand vector with five elements you see the same and here in c plus plus array and this is for me i i assume this is a main reason or it's the main reason for classical c or c plus plus to get off by one error because you have an c array and you only provide the caller the point to the first element this is extremely error-prone by design okay this was stood span let me continue there are many control container improvements and here's something which i'm totally how should i say it i was totally astonished stood string instead get or got received 20 coins expert constructors in the same how it's for how should i say for the eyebrows of the standard template library such as find if sword and you know this algorithms and what does this mean this means essentially you can create a compiler at a solution in vector and string and compiler sorry i cannot show it because the only compiler so far supporting this feature is the windows compiler and i cannot execute on compiler explorer this example but i have something for you this time we have to study sort source code i think we have the same issue let me go to 17 or let me go to 20 so it's big enough for you and here's the interesting part once more i use here the largest latest microsoft compiler and here's the point i invoke this function max element and i want to have the result the max element of my vector at compile time you see i want to have it compile time and therefore this function has to be a contextual function constant would also do the job in this case but anyway now i have a vector with four elements i sort this vector and i give back the last one which is the biggest one and you know what is the biggest element here 46 let me prove it to you here here's the um here's the assembler code you see 46 it's all calculated at compile time and this is for me a mind-blowing feature on this game okay let's go back because i have there are so many features okay this is quite simple so i make it short you may notice this this irritating erase remove it when you want to erase something from a container and this can be done in one step quite easily and quite intuitively using erase or race if and this up this could be applied to any container and of course as to a string is awesome container so let me show it to you here once more i have to make it bigger i hope i will not forget it always this time i'm curious about the side and here see i have vector that's okay i have a string i displayed and here i say erase if erase from my string all characters which are upper and consequently only this stuff is left and what's more erase if it's a free function so it works on all containers okay you know i'm quite fast because there's much to explain i hear something nice what you should never do is use in one comparison signed in unsigned integers i will show you why in a few seconds and for that reason we have safe versions of it compare equal not equal less less equal greater great eagle i assume you know what this means okay me show you what i what i said before sorry this was wrong let me go back this was the wrong button uh here we are not here let me show you what i mean if you want to have a surprise do it you see here i compare minus three with seven and your course you know that minus three is smaller than seven but this is what the compiler is saying to me hey this is not so good so you have to adjust the output no ah where is it where's my where's my story you said i here we are okay you see minus three smaller than seven four is of course this is false what you want to have is true here such as we should compare less what is happening here i first of all keep this rule in mind don't use science and unsigned in comparisons or also in any uh expression what is happening here cpv insight gives me the answer as before i have to make it bigger how can you make it bitter is this the one yeah this is now i have i made it bigger and now like i had a have a look here i i um let's see inside one and now you see what's happening this is happening the side x is converted to einstein and this is the reason why we will we will get this error okay let's continue okay we have automatic utilities such as new constants you see i make it short so you have to look it up or you can read my blog posts and now i come to a big big feature in c bus plus 20. you may know it that i have written a book about class 2020 and in my second update i looked quite detailed into this calendar time zones addition to the chrono library and you know what it took me about 80 pages to describe this functionality therefore i cannot explain it to you here it's too much i only give you an idea and then i show you four examples which which gives you the first idea we get new clocks we get a new time point which stands for the time of day this is the day this is the time since midnight we get uh support for calendar dates and time zones and once more i will go to details this would take me at least a day so i'd show you a few examples have a look here but i cannot show it to you live why not quite easy because uh only windows supports it and therefore i have to show you my local windows pc uh i assume this is too small for you so let me make it a little bit bigger okay and i hope this works out for you okay can i make it here a little bit bigger i'll start uh bruise plus pass pass no this will not work how can i make it here a little bit bigger plus plus plus yeah here we are fine okay i hope to this is a quite easy program first of all i've defined time of date by just adding a few time durations um uh yeah time durations or literals for time durations which we have since c plus 14 okay then i display this value and you see it here to see it not this is the wrong program i should execute the one stuff i'll show you see time of day and now i can get the hours minutes seconds sub seconds you see hours minutes second sub seconds the derivation since midnight you see generations in seconds resolution and i can also initialize time of day using exact this number i got here you see this number i got here i use it here and i get the same result 40 minutes after after 41 minutes after 12. okay first example second example now it becomes cute let me let me be cute about that please open there's a cute syntax to define calendar dates and here i used my birthday and you can define calendar states in three ways using a slash symbol and the three ways um otherwise uh let me put it differently you can start with the year today and the month in all the other two parts are therefore pretty defined or fixed this is let me execute it shoot here we are you see here are different ways to um create a calendar day with uh staying for my birthday and when i do something crazy you see the 26th month i get the expected answer it's not a validate of course we know it okay now to the next example local time once more i can only give you a gut feeling this is way too much let me execute this program and here we have it first i have the local time here this is a by the way this is a level feature and now i displayed you see it here this is the line 12 and now i convert it to a two seconds or i cut it two seconds you see um i stopped the seconds here and now when i put this in a zoned time you see now i apply a time soul which in this case is my time zone i get the same time you see this is the cool time germany uh in my time zone and i can also do it uh only i do i would reduce it to the seconds and here was get info offset i got the offsets in germany to utc and now i come to a quite sophisticated example you may know that i'm a c plus plus trainer for example i want to show you something different now this is the right example i'm a c plus plus trainer and you know with what issue i often have i want to give a seminar worldwide and which time zone should i use you see this is difficult uh i give trainings for india which are six hours ahead of us or for uh for denver which are i think eight or nine hours behind us this is not an easy question to answer now i wrote a small program and you see i created a date this first of february and i want to give at the first of february a seminar which should take four hours and i want to know which time it is in these different time zones you see and i want to start at seven o'clock local time one o'clock p.m or five o'clock p.m and here's what i do i i invoke this function print start time with my calendar date with the start time with the duration of the glass and with the time zone and here's the magic happening let me show you the output it may be better to for you to to see both in parallel i only showed this like uh this uh evaluation for seven o'clock let me see if i can draw it to the left yeah i can do it and let me go back so you can see it so first i just determined to start date in the end date based on my current zone you see and then i displayed and this is a convenience function get minutes which essentially uh uh changes the resolution to minutes because i don't care about seconds in this case and you see this is my start point first februari seven o'clock end time uh first february 11 o'clock and now this is only for uh layout reasons i just i determined the last of this time sold strings and here's the key point what i do now is the following i display the time zone here then i open this uh this playlist and then i display the start date in this time zone and you see in los angeles it's uh the last day of january at 10 o'clock p.m and this would end at 2 o'clock a.m which is a maybe a little too early for seminar and here i do the same for all time souls and here i do the same for all for time zones and uh this time i started one o'clock and here i start at five o'clock okay you see this is quite convenient and this answers my question which i often have when should i start a seminar when i provided worldwide okay and now to the second big library in c plus 11 sorry 11 wrong 20 c 20 is the formatting library this is the alternative to the printer family it requires the header format and the syntax is based on the python syntax which makes it quite convenient for me because i'm quite good in python okay and you can specify all letters text alignment signs with position uh the date data type and so on i will show you a few examples how does it work essentially we have three formatting function stud format is the stuff i used most but you can also say from r2 and from r to n which means now it's written into an output rate in here at most in uh characters and always the function for the same syntax let me uh check my time okay it's fine and this is the syntax and why once more i use student format you specify him for mastering here the arguments and this is what you want to display and all which is not in cyclonic braces is displaced as is but here you can do something like uh apply argument ids you see here i say hello should be first and then i would continue with world because i use the arguments in the wrong sequence and you can specify here after this number using color and specify or use additional format specifier i will not go this word because i will show you something okay and the question is for which data types can be displayed here of course the built-in data types are fine including stool spring yes also addition you can specify the data types of the chrono library which i showed you before and which is so far not supported by any compiler you can uh define your own uh pass and uh what is the other guy code you will see in a few seconds for um write your own data typed in a formatted way i will show you a simple example using a vector but i have more um more sophisticated one in my book okay let me show you here we are i have to draw it to the left format first the simple one and this one i can display not someone uh execute another one not format argument okay you see here i say let me draw it to the left here i say um just displayed you see say these are kind of kind of placeholders just displayed here i say change the sequence or change the order first hello then word and then 2020. and here i say okay i want to display hello two times for whatever reason and here i skip world okay this was easy now let me show you a way very well very much no it's not too sophisticated let me show you um a more sophisticated example uh let me do it differently here we are okay now what i want to do is i want to display vector and vector of ins and the vector of strings and what i have to do is to partially specially like specialize a formatter for vector and you see here i use an prototype library in the future this would be called stood formatter but now i have to use this library here which provides the functionality but because no compiles of outs supports this and what i did here i wrote a path in a format function and the path function essentially provides me the stuff i want to the formats bring in this format string is essentially used here and what i essentially do is this is extremely simple but maybe it looks a little bit uh weird what i essentially do is the following i apply formatting only to the members of the vector in this case in this case ring and here i do it in different versions so let me show you the output honestly i cannot show you the output why not because no compiler supports it but remember i have a vector of ins with the numbers 1 to 10 and here's the output of the program sorry you see here i said uh use a plus sign before here i set layouted use tweak character to display this value and here i say do it binary and once more you see plus three characters binary and now i do it a little bit different for format string for a vector of strings here i say only the first three characters you see and therefore we see only here only for this okay i have in my book an example in which i have a big big vector and i can even lay out it make line breaks and stuff like that so this is extremely convenient but this example would be a little bit difficult for today so only to give you the feeling okay let me go back i see that i'm quite okay wrong wrong button here we are any questions leaving consequence the news robots it works for customers selling thanks for your remark uh i [Music] i will i will try it out with this new um visual 2022 but with my visual it didn't work was not the issue so far because i can use the fmt library from swearer i i don't know his second game story okay thanks for your mark i'm a little bit too slow or maybe too detailed so let me go back now i come to concurrency and concurrency with a few very interesting feature so let me explain it and i want to get a little bit shorter first of all we have um how should i say improved atomics stood atomic which you know we have since c plus pass 11 stood atomic factor we also have since c plus plus 11 support this new three new member functions notify one notify all unknown um and wait this means you can wait on atomic and this waits exactly when at the value of atom is equal to one i forgot to say something we can also have atomics for floating point value which is also news 20 feature once more you can wait on atomics or atomic flag and they are the default constructor um the default constructor initialize their values and let me show you example and i'm happy to say now i can show you something which i could use windows but also i use clang here but anyway does not makes a difference here's a simple workflow have a look here i have a thread which is waiting for work and i have a thread which modifies this other thread and keep this workflow in mind because i will use it once more in a few seconds using a semaphore and let's see i initialize this atomic rule with force this means this call here waits why because this atomic wood has the right uh value for us and i wait when i'm voice how long does does this sweat wait exactly uh so long when this happens you see this is the set data ready flick this threads prepares the data put some value inside the vector says starter prepared okay you see it and then it stores tool inside the atomic you see from force it becomes cool and then it sends a notification and this is the point where this guy can continue puts his 2 inside this vector and then the vector is has all values ok um you may know that you can also use for this kind of workflow and condition verbs or a future promise here i don't say anything about future promises personally would be also fine here but don't use conditioners first of all they are extremely error-prone second they are slower okay maybe you know it assume you know what we have has stood shared point that stood weak putters since he does vice 11 and the question is which mighty sweating symmetry they support and the question is quite easy i stood shared put us together only guarantees that the control block so the handling of the smart pointer of the reference counter is a sweat safe operation but there's no guarantee regarding the resource the sharepoint owns this ends with c plus plus 20 now we have um a parcel specialization of stood atomic for sharepoint and weak product and this means you can apply atomic operation you must have diatomic operations on them and therefore there is not only the controlled work but also the resource by definition let's say okay you see i have quite i'm quite fast okay good in time we have semaphores in c plus plus 20. semaphores are simple synchronization mechanism what's the idea of a semaphore you initialize the semi-focuser while you play bigger typically bigger than zero when you request this semaphore this value is decreased by one when the count becomes one december for requesting this uh that's what so yeah requesting semaphore is blocked okay okay once more encounter bigger than zero typically each one requesting this enough was decreased the count by one when the accounting becomes zero this requesting threat using the semaphore is blocked until someone releases the semi-4 and december 4 counter becomes one goes from zero from yes from zero to one we have two types we have accounting semaphore and a special counting semaphore which has a counter of one meaning it can only have values from one to zero okay now i said to you think about this remember this workflow let me go back this is exactly the same workflow i showed you before but this time no sorry this is not so easy here this time i use a semaphore you see waiting for work said that already and here i do it differently i use a counting semaphore initialized with one uh now let me put it differently it can and at most have the value one but initialized with zero what does it mean this call here is blocking because the the current count is zero it's blocks until this call here happens prepare signal release this releases or increment this notifies this guy here acquired and also increases the count by one which means now the counter is one therefore this guy could continue and make its work okay this was a semaphore and only to give you an idea semaphores are extremely fast synchronization mechanism i'm not sure if this always holds but on my uh pc a semaphore is faster than atomic only atomic flag is a little bit faster when you want to synchronize something okay you see semaphores are quite easy to use and they are quite fast so why this you should use them okay now i come to something which i make a little bit shorter i come to lectures avarice lectures and pairs are also synchronization or coordination mechanism but the idea is different you you set a counter to a specific number and each sweat can decrease the counter by default by one and as sweat waiting on a lecture barrier has to wait until this count becomes zero and there are different ways here this means only count down the counter by one this means weight when the counter is when the counter is bigger than zero so the other way around compared to semaphore it blocks when the counter is bigger than zero and this says says i arrave decrement the counter and i wait you see this is a combination of countdown and weight and you can specify here different uh value for the uh for the count update okay and there's one specific part which is if there's one difference between legendaries and this is the following and that can only be used once so once you want to synchronize a few threads and they can continue here when the counter becomes zero i will show you an example a few things but when you want to do a job more than once this is the job of a barrier a barrier has a simple interface but a little bit different the difference is once more you can increment you can use a barrier more than once you so you have an uh chop which repeats a few times and there's also this interesting call arrive and drop this means you decrement the counter and in the next iteration you say i don't want to play your game anymore i'm out of it and there's an additional functionality which unleashes when you initialize solid which are barriers when you initialize a barrier you can give it a so-called executable or callable which is a function which can execute it and this function will be performed when the counter becomes zero this is the so-called completion phase and one of the threats will perform this function and what i don't know what you want to do maybe you want to publish something because this work is done or something like that let me show you a simple example but only using uh let me see alex because i only synchronize once first of all let me increase the font size and this is not so good and let me increase the font size of the recite here we are what do i have a small shop you see i have a few workers uh help scott biany andre david you see six workers and they have to perform this work here this is a function object and this is what they have to perform and the key point here is the following say arrive and wait this means each time this call is made the account is decreased by one and they wait until the counter becomes zero and you see what i initialize the counter with six i have six worker so first they wait until each worker is here and decremented the counter and therefore you see here first all strengths say we're done they wait here and then they can go home and interesting uh this is uh more interleaved in this but anyway um here i use by the way a feature of c plus plus 20 which is synchronized output stream this stood also guarantees that this line is written in an atomic fashion essentially without this only using strutsy out here this output operation could interleave which i will not do because it looks ugly but it's not that race okay five minutes are left let me continue okay this i make a little bit shorter i'm i'm totally happy i'm i'm just in time okay what we can do with c plus plus 20 is cooperative interruption this means all what can run in c plus plus a future promise a threat you know a package trust all what can run can be interrupted and two data types have an uh extended interface in c plus plus 20 this is a g suite and of course this is a separator certified type in a condition where any but first let me explain it to you without going to the details i only want to give you an idea this um cooperative interruption exists of three parts essentially we have a stop token which can ask if a stop was requested we have a stop source which can signal a stop request and we have a stop state which both of them share okay let me skip the theory let me show you an example and here's the example okay here we are here's the example that this was the wrong button once more here's the example okay first of all a little bit bigger second also you pick up and you see it's red because i wrote to stood see up cr so the error challenge okay see what i have here i have a main program i use two sweats executing this function non-interruptible or i call this rectangular optical executing a lambda and this called interruptable execute the london here's a key difference this lambda gets a stop token and therefore i can use this stop token to ask hey did someone wanted that i stopped to execute and if so i return once more this is cooperative interruption to com this red test to the side does this that wants to interrupt and you can only send the signal once and here's the main thread it sleeps for one second and then it requests both sweats to stopped but only the interruptable threat can be interrupted or gets the signal because this switch shares only they only have a shared state and now you see you see here non-interruptible five times exactly four times now the main sweat says request stop only this threat wrecks therefore only the non-interruptible continues until this threat is done okay this was cooperative interruption and once more this is not only to a cheese sweat you can use it with anything which runs of course a classic thread would also do its job the job okay and when you look carefully i used your cheese sweat by the way this this yacht stands for children because cheese one is extended sweat from c plus plus 11 and this is the last thing i want to say and a cheese sweat automatically joins in its destructor when you would use here a sweat when you think then when this sweaty goes out of scope in this destructive team stood terminate would be called which will call uh typical results in the studyboard okay this was it once more extremely fast i talked about c plus plus 20 without the big four and you see there's a lot of stuff inside i make this um short so let me give you an additional point maybe you want to read the details i have two ideas first of all you can read my blogs i assume i have written about 80 posts about c plus plus 20 and you see uh yeah about n 80 and i will continue to write a few uh because i'm always learning something new so you can read this stuff here or you can do it in another way of course you can buy my book and i updated it the second time no i only updated it once and then you can read it in about 600 550 pages or something like that and until sunday i have um you can have it for 50 off now the question is how can you use this copper quite easy i will publish my presentation in a few minutes on twitter and on my facebook group and then you can have it and if this works not out for you just write me an email okay this was it let me go back to the chat window uh and let me see if i have if there's a uh if there's a question a faster first summer for atomics honestly i don't know it but i don't think so um [Music] how would i implement it i would use an atomic ind and then would make a kind of a safe synchronous uh i would i would build abstraction around atomic int and with c plus plus 11 a 20 way can notify using atomics now i've assumed this could be done and there you need additional uh kind of notification mechanism but this is of course also in the atomic i would assume this is maybe based on my atomic end or maybe also an atomic glitch but i don't know it sorry thomas you have to study the windows sources on for example guitar okay now i'm done if there is no not any question left i will go into the into the rooms and sit onto a table and you will could see me talk to me okay thank you anna for your presentation and yeah we will meet in the launch maybe okay sexy