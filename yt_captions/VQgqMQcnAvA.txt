so i've been creating a brand new game for the sega mega drive um using original development hardware from the 90s i'm also running a small set of tutorials onto how i got it running in the first place today we're going to turn the screen red but that's easier said than done so bear with me there's a lot to explain okay so last time we showed a 68 000 cpu with its logic call its registers how to add two numbers together had to get some basic physics working we showed that was connected to the bus and the bus contains rom ram and io port a gpu maybe some other things the bus is the collection of physical wires that the cpu uses to talk to other pieces of hardware we're interested in the gpu today we're going to initialize this thing and try and get something on screen it's easier said than done because we don't have any graphics libraries on a system like this so things like opengl directx were non-existent back here so we have to do everything ourself we have to talk to the gpu directly from the cpu so the gpu is a processor in itself so it's a bit like the 68 000 it has its own logic core and it has its own set of registers these aren't general purpose registers for adding numbers and stuff each one has a specific purpose so one will be in control of the background colour one will show where in the memory map it's supposed to pick up certain things they all have very bespoke purposes the gpu has its own bus and it has its own memory which we call vram and all that is contained within this gpu here and that poses a problem because it's on the bus itself so we don't have direct access to the video memory we don't have direct access to the registers here we have to go along the bus that the 68 000 has access to so in order to do that this processor has two ports visible to the bus called the control port and the data port so we can talk to these two ports on the bus they have an address each so we can tell the control port to start receiving data and then we can shoot data through the data port and i'm going to show you how to code that now this is 68 000 assembly language very to the metal stuff so the first thing we need to do is initialize the gpu and we don't get any help doing this the the mega drive doesn't have an operating system it doesn't have any drivers um when it's switched on it's in an uninitialized state um so its memory might be full of garbage its registers might be uninitialized we don't know as we have to do the whole thing from scratch and the first step is to initialize each of the registers the vdp has 24 registers and they all have specific use cases so one will turn on the screen one will enable dma mode some of them set various addresses around its memory map some turn sprites on and off the one we're going to be interested in today is register number seven which sets the background color but we need to initialize them all anyway so the first thing we need to do is set that up okay so we got this load registers routine here and that loads the address of the register table that i just showed is going to set up a loop counter for all 24 of these registers and then one at a time it's going to copy the data from the table into the vdp control port here which is the address of the gpu on the bus and then it's going to loop around it's going to initialize all 24 of those so we've got that set up to call that routine right at the top here so that's the first we're going to do the next stage is to clear vram because the memory might be full of absolutely anything possibly what was last on the screen was last turned on plus some interference we don't know so i'm going to do that manually here i've got a macro set up to set up the vdp control port so you can tell it which address you're about to write to that's quite a complicated process the command you give it needs to be in a specific bit format and so does the address i used to work all these out on paper but it's just a complete faff so i've set up a macro to do this so we're going to do it this way instead so we're going to use that to clear the memory of the gpu because that's not done for us so we're going to set up a loop to clear the gpu's memory it's got 64 kilobytes of ram but we're going to write one word at a time so we need to write half of that so we start by setting up a loop counter of 64 kilobytes divided by two and then minus one because that's how the loop counters work and we're going to put that in d0 we're going to start writing to address zero so we're going to use our macro set vram right and we're going to give it the address to zero we're going to set up a loop label here so we're going to call this vram right loop so in here all we're going to do is move word size 0 into the vdp's data port and then we're going to decrement and branch our counter which is in d0 back up to vram right loop so this is going to start writing 64 kilobytes worth of words into vram address 0 and it's going to loop until that's all done and it's going to write zero into the data port and that should clear all the memory of the gpu so let's build that and test that out so when we see this just to remind me and the viewers we'll see it on the right hand screen because it will go to the dev kit which is in the box well you'll see nothing because we're clearing the memory so definitely nothing should happen hopefully nothing should happen here uh what was this main.ism that should build okay so that's built the rom let's fire it up on the dev kit so this is a sega mega cd development kit running through an ms-dos debugger here and we're going to load up the rom that we just built and show each of those lines in turn running so let me open the rom [Music] boring bit boring bit boring bit cut this out cut this out put this out your source window okay so the rom is loaded on the dev kit now the debugger is ready to go so i'm going to hit a break point here and start it running and the first thing we need to do is what's called the tmss signature the mega drive had a built-in security system so that third parties couldn't write games for the thing but it's very very easy to circumvent you just write a string sega it's a particular dress on the bus and it lets you in and that was more a legal challenge rather than a technical one so we can step over that that should sort that out and then we're going to load each of the vdp's registers and turn so if we step in here we're going to load the address of the registers table that i showed earlier into address register a0 we're going to move 24-1 into register d0 we're going to use that for our loop counter to loop over each register and we're going to move the command 8 which according to the gpu is to set a register into d1 and then we're going to one at a time fetch the initial register value from a0 which is our table and we're going to add it to the command in d1 at the moment the lower word of d1 is eight zero zero zero so if we load the register from the table that's going to be eight zero one four which is going to be set register number zero value one four and then we're gonna loop continuously for all of those and once we finish looping through all of those the gpu will be initialized so if i let that run now and now we get something on screen the reason we got something on screen is because we haven't yet cleared the memory so what's showing is either the last thing was on screen when the machine was last turned on or interference or a mixture of both so the next thing we need to do is run through our loop here to clear all the video memory so as as i've explained before we're going to move 64 kilobytes worth of words which is why it's 64 divided by two minus one for the loop counter into d0 we're going to call our macro which is going to shuffle that address bit pattern for us to write to vram address zero so we're going to start from the top of memory and then one word at a time we're going to write zero into the vdp's data port and that's going to write all across memory zeros so if i let that run we should send then see the screen cleared because the graphics memory is now empty okay so as you saw there the screen was blue and not black and that's because although we've cleared the graphics memory we haven't yet cleared all the palettes so the palette is probably blue from whatever was last going on with this machine sega blue blue yes so instead we'll define our own palette we'll upload that instead so let's define a palette here we're going to call it palette the mega drive has four palettes with 16 colors each and each palette gentry has nine bits so it's three bits per component three bits red three bits blue three bits green and this means the least significant bit of that palette entry is unread so for black we would define the palette as zero zero zero zero uh that's an unused entry and then red green blue for white it would be all e's because of the least significant bit of things so if we do zero e e that's an unused entry and then e e e is red green and blue all at maximum so for the rest of the colors for all 16 we'll just fill them in let's have um let's have a red let's have a green and let's have a blue because it's three bits for each component not four we have one bit discarded that's unused uh so the maximum value uh each component of color can hold is e rather than f so we've got a black a white a red a green and a blue and i've left the other colors blank so we've got 16 colors and a palette here ready to go so we need to upload this to the gpu again we've got another macro here which is the same as the set vram right macro but instead of calling the vram write command it's calling the c ram right command c ram for color ram which is where the palettes are stored so let's upload our palette it's a similar operation to how we cleared the gpu we're going to set up a loop counter there are 16 colors in the palette but minus one for the loop because that's how loops work into d0 i'm going to set cram right zero zero zero zero so that's address error of the color ram in the gpu which is where the first palette is stored so we're going to load the address of our palette ready to write so load effective address palettes i'm going to shove that into address register a0 and i'm going to set up our loop to do this so we're going to call it cram right loop so for each iteration of the loop we're going to move a word of data from a0 and after every read from a0 we're going to increment the address so the next time we come back it's going to advance the address i'm going to move that into vdp data and then we're going to decrement and branch our counter which is d0 and loop back up to cram right loop so let's build that and run it and turn okay so the rom is loaded again we've got the debugger fired up for some reason the uh palette in memory is now white but it's uninitialized we don't know what color is going to be so let's run through this then we're going to move our counter 15 colours minus one into d zero we're going to start writing to color ram address zero using our macro we're going to load our palette into address a0 and then for every entry in the palette we're going to write it into vdp data so if i set that running we should now finally have a blank screen and there we go so the vdp is now initialized its memory is clear its palettes are clear we're now ready to set the background color so there's a lot of back and forth here isn't it between various different programs yeah yeah there is okay so the next thing to do is to set the background color we're going to do this by setting one of these vdp registers manually it's register seven that we're interested in which we've initialized to zero so at the moment the background color is going to be palette zero color zero of whatever's in memory at the moment so we're going to set this manually and to do that we're going to use the same trick as we did to load the initial table at the start so we're going to use command 8 and then set the register number and then set the register value so we can do that with a single line of code so all we need to do to set the background color is to move word size and we're going to use command 8 which means set register 7 is the register that we're going to write to that's where the background color stored we're going to use palette 0 which is the first palette in memory and color 2 which should be our red in the palette and we're going to write that directly to the bdp control port there's nothing else that needs to be done so let's build that and run that okay so that rom's now loaded i've got a couple of breakpoints set so let's run through it all first we're going to initialize the vdp and that's containing whatever garbage was on screen last time plus some interference we're going to clear the vram which clears everything except the palettes we're going to load our palette which is set it black and then finally we're going to set register 7 to palette 0 color 2 which fingers cross should be red and there you have it once you've got the basics nailed down you've got everything into macros and routines you can just pull it together like lego bricks and start making actual games with this stuff so i wouldn't sit and calculate these addresses manually each time nor would i set these bdp registers manually i'd have my own routines written for them so once the hard work's done the hard work's done we're going to set register 7 to palette 0 color 3 and fingers crossed this should be red okay what we've done now did you count from zero or one count from london did you yeah yeah zero one two so that's red green blue have i just debugged it you did