at this point in our programming career we are all familiar with how for loops work and how while loops work but we're not quite that familiar with the uncommon syntax that comes with the for loop and in this lesson i want to address that and essentially we're going to be using the else block in both the for loop and the while loop and they are quite different so it's important we understand this difference before we start using it so in this sample program i went ahead and created two different functions one is an example for loop and one is an example while loop which we will pass into the name is equal to main check so that we can run it but let's go ahead and get started with the for loop so usually if you want to create a for loop you need to iterate over some sort of list so for i in range and here we're going to just create 10 different numbers and what we're going to do inside here is check if i is equal to 5 then we're going to go ahead and print that the loop was broken and the reason we're going to print that is because we're going to break out of the loop so so far the syntax is absolutely normal and what we're going to add to this is the else block and on the for loop it's quite simple if the for loop completes perfectly without any breaks it's going to execute the else statement so it's kind of like a success listener so if we go ahead and type in loop executed perfectly you'll see that when we go ahead and call this function that will not be executed because we're going to break out of it the loop was broken but if we decide to go ahead and remove that and we can just print i for fun as long as this loop runs perfectly it's going to run the else block so as long as everything executes perfectly in the for loop we will always have this executed and it doesn't matter if we continue or do anything else we can also just skip number five that will work perfectly it will say the loop was broken even if it wasn't but as long as the loop successfully runs without any errors or without any breaks it's going to use the else block so that's really good to know if we have a for loop but now let's move on to the while loop and the example is going to be a little bit different and we're just going to call it down here so we don't forget later but inside here we're going to go ahead and first create a variable which will hold the value of zero and then we will also create a variable called is connected which is going to simulate an internet connection and that's going to be set to true to pretend that there is an internet connection and while is connected we're going to go ahead and check if i is equal to five then we're going to set is connected to false so as soon as it gets to the fifth iteration we're going to say that the internet disappeared but we also need to make sure that we increment it each time by one so that we can actually exit out of this while loop now just like the for loop we can go ahead and specify an else block and here we're just going to go ahead and print that the else block was executed and if we go ahead and run this we should have the else block executed and this raises a lot of questions because in the for loop you need the for loop to actually finish or to actually successfully finish for the else block to be executed while in the well block it just executed even if we closed the while loop now the answer to that is very simple and here we had a condition which says while is connected and as soon as that evaluated to false we were able to exit the loop hence triggering the else block and we actually didn't need to create this is connected variable we could have just done the usual loop through the eye we just need something to evaluate to false to actually trigger the else block if we decide to break the loop instead of turning it to false we're not going to have the else block triggered we actually need to make sure that this evaluates to false for the else block to execute breaking it or doing anything or throwing any errors inside there will not execute the else block so that was the hidden functionality that a lot of us as developers tend to miss when working with python because it's not that common but it can be very useful in many situations so it's always good to know about this functionality but as always guys with that being said thanks for watching and i'll see you in the next lesson