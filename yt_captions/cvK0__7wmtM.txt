when I was a fetus and first started coding I thought I had to be a genius I thought I had to be super smart and I blame YouTube for it because I remember they recommended me this one video of this kid actually let me find it real quick 14-year-old genius programmer this video right here my name is Santiago Gonzalez I'm 14 and I love to program I wonder how he's doing right now can I find him oh he has his own website nice he's a machine learning engineer and he has a PHD what he's 23 he's one year older than me and he has a PHD what the  okay so you don't need to be smart to be a successful programmer I swear Santiago is an exception he's just the real life version of young Sheldon when it comes to learning how to code I think it's not about smarts I mean an idiot like me learned a code so it's not true I believe that instead of smarts it's your tolerance how long can you tolerate being trash at something because let me tell you coding is a skill that'll take a while to get decent at which is why I've noticed a trait that a lot of programmers have it's a trait that's obvious and simple a lot of programmers have what's called a growth mindset let me explain so before you understand what a growth mindset is you need to understand what a fixed mindset is first a fixed mindset is the belief that abilities and intelligence are static they can't change so it's like believing that people are born dumb or born smart people with a fixed mindset often think they're either good at something or they're not they don't take into account growth or Improvement they find it hard to believe that they can go from being bad to being good they might say things like I'm just not good at math or I'll never be able to understand programming this mindset can limit potential and discourage Learning and Development on the other hand we have a growth mindset this is the belief that abilities and intelligence can be developed through dedication and hard work people with a growth mindset see challenges as opportunities to learn and grow they understand that effort and persistence can lead to Improvement and they embrace the process of learning they believe they can fix their skill issues Let's do an example we have two beginner programmers in school we'll call them um Mr Beast and queso Mr Beast has a fixed mindset when he encounters a difficult coding problem he thinks I must not be smart enough to figure this out or I wasn't born for this maybe programming is not for me and he quickly becomes discouraged as a result he barely studies for tests he gives up on homework easily and then he sees his greates decline which further confirms his beliefs this is bad because now Mr Beast is going to miss out on opportunities to grow and improve on the other hand we have the 500 ton paycheck to paycheck low income twitch streamer queso he has a growth mindset when queso faces the same difficult coding problem as Mr Beast he thinks this is tough but not impossible I can figure it out if I keep trying he seeks out resources he asks for help and he keeps going until he finds a solution over time queso's skills improves significantly his grades improve his attitude towards feedback changes for the better he now pays more attention to comments because he knows that their suggestions will make him a better programmer he loves learning especially from his favorite newsletter sloth bites what sloth bites it's one of the greatest newsletters ever for programming because I made it sloth bites is a Weekly Newsletter where I share bite-sized programming information to make you a better programmer and it's free it currently has over 1,500 subscribers and my goal is to make sloth bites one of the top newsletters for programming so join queso and subscribe to sloth bites so you can become a better programmer I'm sorry did you just say no I don't take that for an answer you better subscribe right now do it do it anyways when it comes to programming a growth mindset can make all the difference it's such a simple thing it's just a mindset change but the mind is a powerful thing and it's easier said than done but once you do this change it'll make you better in almost everything you try so basically it's going to make you a better person if there's one thing you should remember from this video success isn't about intelligence it's about perseverance there's two major benefits of a growth mindset learning and resilience let me explain starting with learning when I first started coding it was during my college Years and it was tough I won't lie the assignments were challenging and I fell over Med there were times when I thought I'm not cut out for this I couldn't understand certain Concepts I sucked at the math some algorithms went over my head I also had issues with impostor syndrome or I was just frustrated and impatient that I wasn't making any progress everyone else seemed to be doing fine and were making so much progress while I was stuck in the same place it sucked but I soon realized that making myself feel bad for it isn't going to change anything in fact it's probably going to make it worse so I thought well I can't do this right now but I know eventually it'll click and it did the more time I spent programming the easier it got and that's obvious right more time equals more skill but I was so blinded because of my fixed mindset that such a simple concept never occurred to me I started to view assignments and projects as opportunities to learn which is kind of the point of these assignments in the first place so I started to spend extra hours experimenting with different solutions even though I had the correct solution I wanted to try something else was it required no I just wanted to be a better version of myself now this wasn't easy of course this involved a lot of self-study taking extra courses online free of course and working on side projects to apply what I learned my growth mindset helped me adapt to New Concepts quickly and effectively I was embracing continuous learning and staying flexible and eventually this persistence paid off my skills improved I finally understood some Concepts I could actually do the math I knew the reasoning Behind These algorithms and the experience taught me that with dedication and hard work anyone can learn and adapt anyone can code now before we move on to the second benefit let me share a resource that will help you learn Like A Champion and that resource is today's sponsor brilliant brilliant is a learning platform where you learn by doing they offer thousands of interactive lessons in math data analysis programming and AI so there has to be something for you brilliant is designed to be effective each lesson is filled with Hands-On problem solving that lets you play with Concepts and it's a method that's proven to be six times more effective than watching lecture videos not only that but all the content on brilliant is crafted by an award-winning team of teachers researchers and professionals from MIT Caltech Duke Microsoft Google and more and by using brilliant you're going to also improve your critical thinking skills because they believe in problem solving not memorizing so you'll be getting smarter and you'll also become a better thinker and that's great because learning a little everyday is one of the most important things you can do and Brilliant is great at that because they help you build real knowledge in minutes one of my favorite courses that brilliant offers is called thinking and code the goal of this course is to help you build a foundation for problem solving specifically for programming problems which is great because problem solving is the skill that took me the longest to develop so if brilliant sounds like the learning platform for you and you'd like to try everything brilliant has to offer for free for a full 30 days visit brilliant.org thee coding sloth or click the link in the description you'll also get 20% off an annual premium subscription you're welcome okay let's talk about the second benefit resilience programming is a skill that's all about trial and error at some point you're going to make a mistake and that's okay build stuff Break Stuff and rebuild it it's an inte Al part of the learning process I've made so many errors I've gotten so many setbacks and each time I encountered a bug it was frustrating but I saw it as a chance to get smarter I would ask myself why is this a bug how did this even happen and each time that happened I turned it into a learning opportunity I did the same thing when I wrote ugly code I'd ask why is this code ugly how can I do better is this really the best way to solve this questions like that motivated me to do better and I tried to do the same thing in school but that's a bit harder to do when it comes to college mistakes matter more unfortunately because a mistake means a worse grade and nobody wants that but even then I try to see each mistake I made on an assignment quiz or test as a way to improve instead of being discouraged by a lower grade I focused on what I could learn from my errors and that was hard to do because a bad grade really does hurt I applied the same to interviews every time I failed an interview or I got rejected I thought what do I need to study or what do I need to improve to do better next time instead of feeling defeated I analyze my performance I identified areas for improvement and then I worked on them each rejection became a valuable feedback loop guiding me on what skills and knowledge I needed to enhance every mistake was a lesson that made me better at programming if I had a fixed mindset I probably would have quit programming a long time ago I'll say it again a growth mindset is all about learning and resilience and in programming those qualities are a must have but how do you develop a growth mindset or you're currently stuck in a fixed mindset well in order to develop a growth mindset the first thing you need to do is Embrace challenges I liked how big box phrased it get comfortable being uncomfortable when you encounter a difficult problem don't shy away from it Thug it out I've said this multiple times break your problems down into smaller parts and tackle each part one by one it really does help it makes the problem easier and allows you to learn and grow from each step you take if you're scared or nervous to do these challenges I get it it's a hard truth but you're going to have to do it while you're scared or nervous you'd be surprised how well you do the second way to develop velop a growth mindset is to learn from feedback feedback is a powerful tool for growth and I wish I did this more get feedback from Friends mentors or even random people if you don't know where to get feedback you can always go to my Discord we'll gladly give you feedback on anything when you receive feedback focus on understanding and applying the suggestions rather than taking it personally you have to open your eyes constructive feedback highlights areas where you can improve it helps you refine your skills and it'll make sure you avoid making the same mistakes in the future the third way to develop a grow mindset is persistence persistence is really important when you encounter a setback or an error view it as a temporary obstacle not something permanent keep researching try different solutions refine your approach until you overcome the problem persistence builds resilience and it strengthens your problem solving abilities and the fourth tip to develop a growth mindset is to practice deliberately deliberate practice is essential for programming set aside some time for Focus practice Target specific areas where you need to improve whether it's something like objectoriented data structures algorithms the fundamentals a framework you have to practice with purpose and concentration don't just go all over the place you're just going to be wasting time you need to have an objective in mind track your progress and adjust your practice strategies as needed deliberate consistent practice is going to help you build expertise and it's going to reinforce a growth mindset so if you're feeling down and unmotivated please follow these tips I promise it'll change your outlook on learning it all starts with a single step you don't need to be a genius to code all you have to do is is Embrace challenges seek feedback stay persistent and practice deliberately that's all from me and I'll see you in the next video