my father was a chip designer i remember barging into his office as a kid and seeing the tables and walls covered in intricate diagrams and drawings i watched him work in fascination as he painstakingly drew lines i did not understand these days nobody draws circuits anymore by hand in this video we're going to dive into a critical software tool for chip designers electronic design automation or eda without this unheralded software many of today's most advanced chips cannot be made but first i want to ask you to subscribe to the agenometry newsletter the newsletter is a good companion to the videos i know that there's a lot of videos so that's why i write the newsletters check them out for the full scripts as well as additional commentary after the fact i might also have some additional newsletters in the future with thoughts and ideas on things in the wider tech world you can find the link to the newsletter in the video description below or you can just go to asianometry.com as of right now you can expect a new newsletter every thursday at 1 am taiwan time much thanks before we can understand how eda software helps the chip designer we need to know the chip design process flow how does a company like apple or nvidia design their custom chips the process and the names might differ from company to company but a generic flow might look something like this first the product designers and system engineers at a high level envision a product they might not know too much about circuit design but they do know what their customers want and so they come up with a set of integrated circuit requirements based on the customer's needs next the chip's requirements enter logic design also called circuit design these people translate abstract requirements into circuits with the logic capable of meeting those requirements think of it like a ux designer who crafts how a software feature might look act and feel together with a product manager a chip has many circuits on it and those circuits do different things i'll briefly touch on two such circuits logic circuits or gates act sort of like a decision box it receives inputs puts them together and comes out with an output is a equal to b d is true only if e and f are also true stuff like that just one logic circuit by itself can seem pretty simple but in groups they can do amazing things like zombies the second type circuit is called a memory circuit it is capable of remembering whether a value was true or false kind of like a light switch that is on or off once the logic designer has completed their work they end up with groupings of logic and memory circuits connected together with wires this grouping is referred to as a net list after the logic design process the design gets handed over to the physical designers the work they do involves the literal physical layout of the logic circuits memory circuits and the wiring between them on the chip when you have thousands or even millions of such circuits this can get difficult once it goes through all of that the chip design is verified and tested for errors before being sent to a foundry like tsmc or samsung foundry eda software is heavily involved in every one of these stages even a company like tsmc or samsung uses eda software to check a newly arrived design to make sure it is compatible with all of their design rules such testing or design rule checking is an especially big deal an error here can cost millions of dollars if it slips into the fabrication stage at the early stages of chip design basically into the 1970s chip designs were done by hand the designer would draw a design on paper this paper design would then be transferred to a photo mask made of a material called ruby lith the photo mask can then be used to produce the chip design's patterns on the substrate this is done by projecting light through the mask onto the material and so on but as chips got increasingly more complex with more transistors and connections simple software tools were developed in-house by the big companies to aid in the design process these tools would become the eda software tools used today the first software programs automated the placement of a very small number of blocks and wires on a circuit board not a chip but a circuit board routing makes sense for these early programs because the task gets tedious it also needed to be constantly done over and over again has board components moved around at the beginning these big mainframe programs ran simple breath first search algorithms across the grid breath first meaning that they explore all the possibilities at a single level first before diving deeper to the next level this was rather slow so these programs quickly moved on to other algorithms in later versions of the software as a number of components within an integrated circuit started to exceed that on a circuit board eda software usage moved to the silicon realm bringing eda to silicon helps solve daunting challenges in chip making a chip is built in layers now you have to wire connections in 3d taking into consideration layer to layer connections called vias it adds astounding amounts of complexity and presents huge opportunities for errors and would lead to a chip design problem moore's law an observation not a real law set the pace for the semiconductor industry to produce chips with ever-increasing numbers of transistors assuming the industry follows more that translates to roughly a historical 58 annual rise in the number of transistors that fabs are capable of fabbing being capable of fabbing that many transistors is one thing but designing the actual transistors to be fabbed is another matter design can only go along so fast because human knowledge and skills cannot scale up as fast as tools and capital and if you disagree with that statement then i recommend you check out the mythical man month or other works on project and software management at the same time consumers want that next hot chip in their hands right now what results is a gap in productivity between design and manufacturing capabilities a company like amd might need a few years to come out with a five nanometer chip even if tsmc had the capacity for them to use imagine if mega customers apple and huawei weren't around would tsmc even bother to put out a five nanometer process node so quickly better eda tools are the only practical way that chip design teams can keep up and close the productivity gap commercial automatic physical design systems began emerging in the 1980s they came as a result of not just improved computing power but also powerful new display technologies the first eda software literally just drew things on paper like a printer the advent of reasonably priced storage tube class crt screens made the industry much more accessible to industry designers the industry also pioneered and adopted new approaches to chip design that unlocked more of the eda industry's automation powers engineers and universities advocated for a more space-efficient design style on pencil and paper called programmable logic arrays but eda software for this style did not scale very well you had to do a lot of redrawing whenever components changed and conceptually people had to handle the design at both a high and low level of abstraction this made design difficult it is kind of like having to architect a house while crafting the bricks at the same time the semiconductor industry on the other hand developed a standard cell style here designers choose from a library of standardized groups of gates called cells and decide how they are wired together this allowed the design process to split into the separate logical and layout functions i mentioned earlier it abstracted away the bottom level stuff and let people focus on their own areas and because the cells are standardized eda software can consistently create electrically and physically correct designs all the time several people criticize the style for being less area efficient some early standard cells had half of their area being taken up by routing but because its eda worked so much better for designers workflow it became the industry standard think of it like with programming you can write test and debug a program much faster if you did not have to sit and wait several minutes for your code to compile every time you made a change to it such a programming language is likely to gain traction even if it isn't as efficient as other alternatives an eda industry sprouted to service various parts of the chip design process over time those software firms consolidated has tasks got harder and required integration across various stages of the design cycle their proprietary libraries would end up being the de facto standard across the entire industry the two leading companies in this space are cadence and synopsis both are based in the united states and are publicly traded cadence has a 34 billion dollar market capitalization and synopsis 36 billion the two companies are the creation of a long series of acquisitions they have been involved in the industry for a long time and have struck alliances with large players like tsmc and samsung foundry to help solve problems in transitioning a chip from the design to the real world they just make things so much easier for fabulous entrants looking to enter into the semiconductor world they likely have to go through these eda vendors and get their software to get started your company might have to pay millions of dollars to acquire a whole bundle of software tools a common trick in the sas world beyond just the eda tools the companies own a lot of ip as well they make money licensing out useful ip blocks for standard functions in a chip like io kinda like how in canva the online graphics design tool that i use to make my videos you have to pay one dollar for this little emoji or flower of clip art that you want to use in your design sure i can go find something else or even make my own but why bother this works the best and is the most convenient as a result both companies have very good gross margins and strong cash flows software subscriptions and ip licensed businesses are like that and so they can spend a whole lot on r d to further extend their current advantages so i would say that their positions are pretty rock solid their stock valuations already reflect all of this in case you're wondering this stuff ain't cheap i would not go out and start buying these company stocks anytime soon there are a few companies out there challenging the two major incumbents google apparently made their own eda tool to design a recent youtube chip that's really interesting there are a few chinese alternatives like empyrean and celixoff that recently have gotten increased attention due to the u.s china trade war and not to mention open source eda tools for things like risk 5. such efforts as of now remain undeveloped and lag the market leaders for eda enabled chip design exciting new developments remain on the horizon programmers are applying machine learning to eda software and that is showing some promising new results for example machine learning can help eda tools find an optimal route for the wires between the chip circuits it can help simulate what sorts of patterns a photo mask design will project during the lithography phase and outside of machine learning vendors are still experimenting with new techniques to best adapt to this new industry trend of systems on chip or soc designs without eda software the cost of creating new chip designs would soar even faster than they already are they are a critical part in the industry and today's amazing chips would not exist without them all right everyone thanks for watching that's it for tonight if you want more content you can like and subscribe to the channel i would appreciate it if you did and remember to hit up the email newsletter and sign up want to send me an email drop me a line at john agenometry.com i love getting letters from viewers until next time i'll see you guys later