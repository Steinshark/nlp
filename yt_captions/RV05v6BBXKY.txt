python comes with a lot of inbuilt modules and methods and a lot of these are very convenient the only problem is that we don't have time to learn all of them so in today's video I'm going to be showing you another very convenient method that comes with one of the inbuilt modules called func tools so from Funk tools we're going to import a method called reduce so what is the goal of reduce well reduce aims to turn a list or an iterable into a single element into one single result so if you have a lot of text or a lot of integers in a list providing some sort of functionality you can water that down to a single element so I'm going to show you a couple of examples on how this works and to get started we'll create a list of numbers so that's going to be a list of type integer that's going to equal 1 2 3 4 5. and this will be the most basic example and we will also create a result of type floats and that's going to equal reduce and inside here it takes three arguments one is the function one is the sequence and one is the initial value and the initial value is optional but for the first two we do need to provide that if we want this to work so you can either pass in a function or you can create a Lambda so here I'm going to create a Lambda that takes a and b because you need to take in two inputs for this to actually work and what we're going to do is add a 2B and then we're going to pass in our numbers right now if we print the result you'll notice that we're going to get the sum or the cumulative sum of these numbers and using plus doesn't really change anything from using sum so maybe it would be better if we used the asterisk to multiply the numbers so now we have 120. so what's going on here what did we just do here well we're performing an operation on our list but we're doing it gradually which means first we start with the first two numbers so we got one times two and that returns two and then it stores it in a in other words so the next time we do that operation it's going to be 2 times 3. so now we have six and that gets stored in a once again then with 6 we have 6 times 4 which is 24 and then we get 24 times 5. so as you can see we're gradually going through each one of the elements while accumulating the left side so that we can continue making those calculations if we go back to plus I can show you a rough sketch of what that actually looks like so take a look at this comment because this is exactly what's going on inside here with these numbers we start with one plus two then we add three then we add four and then we add five each time adding it to the previous result so that was a super watered down example and I'm going to show you another watered-down example just so you can get a good idea on how it works so for the next example we're going to create a list of strings and I'm just going to call it strings due to lack of creativity and that's going to equal this list here and I'm going to copy and paste in my previous list so as you can see we have A1 B2 C3 D4 and E5 but now I'm going to show you how we can also add an initializer to reduce so we're going to create the result as always which will be of type string and we're going to pass in reduce and the function we're going to use is another Lambda which of course takes a and b and then we're going to have a formatted string so here we'll pass in a dash B and of course we need to pass in the list right now if we print this result we're going to get each one of these separated by a dash and I already know that print can do that for free by providing a separator but this is just to demonstrate how it works so again we start with A and B so A1 and B2 and the second we do the first Loop it moves on to adding C3 so a becomes A1 and B2 with the dash and B becomes C3 so we keep on performing this operation over and over so we understand that part but what is the initializer what does it do well let's just add something here that says init and you can place any initial value you want in there so if we run the program now you'll notice that we will have a new value in the console called init and that's just the default value that's the start value each time we use this and that's also going to be used if there's nothing in the list for whatever reason if you pass in an empty list it's going to use this as a placeholder otherwise it's just going to use it as the first element it's always going to be that and that's why it's considered the initializer it's also worth mentioning that if we have no initializer and we only have one element it's just going to return the first element because there's nothing to be done there it's already reduced to one element but if we put everything back we will get the exact same output as from earlier so personally I really enjoy this method I think it's really cool but do let me know what you think about all this in the comment section down below I would love to hear about it but as always thanks for watching and I'll see you in the next video