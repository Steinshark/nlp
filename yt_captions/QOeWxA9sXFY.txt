well i want to talk about my favorite number which is and i have to look at my paper here 2 billion 147 million 483 and 647. there's several things why it's nice first of all it's a prime number and everyone knows that prime numbers are are the best numbers and it's just not just any prime number it's a mersenne prime number not only is it a percent prime number it's a double percent prime number we only know four of them and this is the biggest one so okay this sounds like we're in number five territory here what why is this computer file then well there's two reasons first there's a little reason um i do computer security and everyone knows that prime numbers play a role in uh in certain encryption schemes and and other cryptographic protocols but that's not what i'm talking about today maybe next time we'll talk about rsa where it's particularly relevant but today the reason that this number is relevant is because it is the largest signed integer this number has a binary representation and i can write down the binary representation but i think it is actually enough if i tell you the binary representation it is one one one one one one one one one i'm not gonna do all the ones there's 31 of them 31 once and some of you might recognize that it's very close to a special number 32 so why why is this relevant a computer doesn't understand anything other than a zero or a one on or off so if you want to write down a number like two or three or four you're gonna have to represent it differently using zeros and ones now i'm sure that most viewers that have watched other computer file videos are aware of binary encoding but we don't only want to encode numbers this way we also have to encode the sign half the numbers you want to encode will be positive numbers or zero and the other half will be negative numbers so what we do is we use the first bit to say whether it's negative or not so if it's zero it's a positive number or zero if the first bit is a one then we're talking about a negative number this number is going to be a lot more relevant about 18 years from now and i'll tell you why but first we have to talk about something completely different which is the way unix keeps track of time unix changed the world it changed the world initially to be fair for computer scientists the unix keeps track of time by counting the number of seconds since a special date in history now it's not particularly special it's not the moon landing or anything like that it's just one that was chosen because it's easy it is 1970 the first of january and then zero hours zero minutes zero seconds uh utc so for time why do we need signed integers though because time just keeps going up and up and up right that's right i just mentioned the moon landing um and if you want to represent the moon landing in your system you're going to have to tell the computer this is before 1970. so you're going to have to use a negative number and that's why they use signed integers if in 1972 when they introduced uh the the epoch they wanted to talk about five years ago you wanted to do plus two years whatever that is in seconds minus five years whatever that is in seconds and get a valid time so that's why they decided to use um signed integers the 1970 first of january is called the unix epoch so if you decide to represent time as an signed 32-bit integer the biggest time in seconds you can represent is roughly 2 billion seconds if you translate this into years and months and days you know a format that a human understands instead of a computer the date you get is the 19th of january 2038 at around 3 14 a.m and eight seconds so pi pi o'clock it is actually quite close to five o'clock i didn't i didn't uh i didn't see that there's nothing deep there going on i'm pretty sure um but you never know um so at that time what will happen to any system that is using this way to represent time is that one second later the bit will go from the maximum unsigned integer so in other words from 31 ones and one zero in front it will add a one and those of you that have watched the video about two's complement will know that the next number will be one followed by 31 zeros which means minus the biggest number in other words it means approximately minus 2 billion seconds starting from 1970. if we go roughly 2 billion seconds before epoch we will go to friday the 13th december 1901 so that means that any device which is keeping track of time in that way will get really confused and we basically get the millennium bug all over again there must be a way of fixing this are people working on it already yes there are people working on it for those of you old enough to remember actively the millennium bug there was a lot of hype surrounding it and in the end no systems crashed but that doesn't mean the problem wasn't real there were a lot of people that worked hard and fixed the bugs and fortunately they managed to catch nearly all of them the same thing will happen with the unix epoch all the systems that are running on 32-bit integers will be patched and the solution is kind of obvious we need to use bigger numbers um so the obvious switch is to use 64-bit numbers okay and most systems these days are 64-bit right or new ones that are coming out yeah but even 32-bit systems can understand 64-bit integers you just need to use some tricks to do it so it's not a limitation of the system it was just done back in the day because memory was a lot more expensive back then than it was now computations were a lot more expensive um so they didn't want to use any more bits than strictly necessary and nowadays we're swimming in bits so 64. um you know it may sound like 64. why did we only double it why didn't we take more well 64 bits actually gives you quite a bit of extra time to work on the next millennium problem you want to take a guess how long it takes before we run out of 64 bits well i i sense the trap is it's easy to think you're just doubling the number but actually it's kind of like some kind of exponential yes yes you've avoided the trick um i will tell you when we will run out of 64-bit unsigned integers it will happen on the 4th of december around 3 30 pm 8 seconds past that in the year 29 22 77 0 2 6 5 9 6. so i think most systems will will be patched by the time that days comes around believe it or not that now magically gets rid of the two zeros problem just by shifting the range and if you like this is the um fundamental piece of magic which i think we can do over here just consider zero zero zero zero plus zero i'm now