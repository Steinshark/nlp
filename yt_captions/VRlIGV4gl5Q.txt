I think aspects of oop are nice and there sometimes I like things about it now it just depends on to what extent you mean by oop like I do not like the word extends okay I do not like inheritance inheritance 99 six% of the time is terrible but there's just you know there's always just that there's always just inheritance tax is wrong okay the PE people don't understand o o me mean or to me means only messaging local retention and protection and hiding of State processes uh and extreme late binding of all things Alan K the guy who coined the term object-oriented programming okay okay it seems like a lot of people dislike objectoriented programming functional Bros hey can I get some Fs in chat for all my functional Bros out there can I get some Fs in chat for all my functional Bros out there lots of functional Bros okay this this is this is the Gathering Place of a lot of them all right how about this one let's invert it for a second can I get some some O's in chat for those that like o o O's in chat if you like o o okay damn okay you know what we got to do before we start this let's jump in here let's let's hit him with a pull okay because this seems a little excessive don't you think o or FP uh yes to O yes to FP I program procedural all right let's see it epic typing thank you I haven't had coffee dude I don't know if I can give up this coffee business I don't know if I can I'm feeling so weak I'm feeling so right now I've never felt more weak in my lifetime I've never felt more weak in my lifetime uh damn okay so I wasn't expecting this what would JavaScript do I don't know what JavaScript would do declarative or imperative uh declarative is the world's greatest scam really declarative is the world's greatest scam for sure because it always feels so easy but then all of a sudden as you use it it becomes incred ibly difficult it's like super nice until it's super awful how much coffee do you drink regularly couple cups anyways okay so it looks like we have more oops than FPS and then we got the this whatever this is this procedural group they're pretty heavy over here that's why I like implicit returns shut up you shut your dirty mouth all right so let's let's G let's keep on going okay it seems like a lot of people dislike object-oriented programming the first things to come to mind when hearing these three letters are cars inheritance getter Setters and object Factory singl tens yes all of these are true this always seems kind of odd to me not only do I like o I feel that it often is the best SL most obvious way to model a problem all right here's why I think it is so I I'd really like it if they could give uh whoever whoever who wrote this Sigma blog uh my Sigma my Sigma Aster uh if someone could tell me how much experience does whoever wrote this article have with functional programming because that's always the big thing that I see is that you see a lot of people critique about how something is or is not and they often have little to no experience in one category versus another so I always do appreciate a little bit more of a hey this is you know I've done years of whatever like if he was just like I was a full-time hasal Dev for this long and he got he left hasell I mean I'd be very curious as to his his reasoning okay because normally you don't leave hasell just saying hasal mentioned let's go I think before anything further we should probably Define what we are talking about unfortunately oop is not well defined for the sake of coherence let's settle on a clear and unambiguous definition first okay this guy is starting to sound like a functional programmer uh we will be talking about objects a lot so what are they most introduction texts to oop use physical things like cars and animals to illustrate what objects are and while that is not wrong it's literally where the object metaphor comes from Alan Kay was thinking in terms of biological cells and networks it's certainly misleading because objects are much more than that okay Peter Wagner writes objects are collections of operations that share a state okay kind of like a cured a curried parameter in a function it's kind of I mean like I mean you know delicious rust it has a struct and you can attach methods to it the methods are the shared state right the methods share a state right I love that if that falls into the definition of o I love o I love structs with functions you love chicken curry okay I get it I get it uh Mark stepik and Daniel bobra babra uh Define objects as the following objects are entities that combine the properties of procedures and data since they perform computations and save local state uniform use of objects contrast with the use of separate procedures and data in conventional programming okay here's another definition by the gang of four object oriented programming are some made up let's see are made up of objects and object packages both data and procedures that can operate on data procedures are typically called Methods or operations like if we're just talking about this right now I'm on oop train I like my data I like methods that work on that data I find it easier to use in the world of LSPs uh I don't like a bunch of functions because I find it harder to figure out what functions I need to call to do things whereas if you have a simple object that I can do a DOT separator on and I get all the methods to manipulate and or do something with set object I find it very easy and simple so I'm curious where this is going because where does the break happen at what point do I say I hate this let's find out okay okay that's a good start but I still think an important characteristic of objects is missing maybe Tim Ren can help objects are units of state that are generally Opa to the outside this I think is an important part we will see later why that is is an object can however provide the possibility to interact with its state by the means of message passing oh my goodness method method path I'm having a stroke haven't had coffee in two days message passing methods H okay yeah okay wait a second collections of operations that share State entities that combine procedures and data units of State what the hell is that supposed to mean meth it's meth it's meth people well uh in means that object is an abstract term and an object can potentially be anything anything with state that is it can be a physical item like a car an abstract concept it can be a random piece of data with some sort of behavior attached to it oop just means we model our problem using these objects that is it I mean if that is all the definition of o is then I mean I'm I'm on board yeah then everything is oop well not everything is O because some people some things aren't o function like pure functional programming where you functional programming in which you have no methods then I would say yeah right functions where you can only just pass in like structs C would be not uh C would be like just not doing it right I know the problem is is everything o yeah yeah yeah yeah uh when lightning strikes a tree what uh whose behavior is that I don't know what are you talking about what the hell are you talk why did I read that out loud uh you might be thinking hold on we Define oop without even touching classes what gives the answer is simple classes are not strictly necessary for o a shocker I know of course we need to be able to construct new objects and a class-based languages are admittedly way more prevalent however or prevalent however this is not the only way to achieve the goal languages like JavaScript although es6 introduced classes is to the languages or Lua used the concept called prototyped based or prototypal oop instead of providing a schema for constructing new objects we use existing objects as prototype this approach can have real world benefits as it reduces the language complexity I don't know if that's true at all I mean protot uh prototypal uh o op is interesting like Lu's uh metat tables are very very interesting but it's most certainly I would not call it simple I would not say that it reduces complexity they're weird as hell they're not weird as hell they're you have to like again you can't fit them into the construct of what you already are used to you have to kind of think a little bit differently and they're really not all that bad they're they're interesting uh just let's see see just as a side note classes don't need to be called classes languages like go or rust ooh uh and also see to some extent call them strs for example do c structs it's hereditary another term while not technically necessary is often associated with oop as inheritance there are two reasons to use inheritance okay okay I I I would love to see this rust of course rust mentioned because that it makes sense because it's just strs right right now okay I think we I think we got something here I think we're seeing a more clear picture of what he means by o is not bad uh another term that while not technically necessary is often associated with oop as inheritance boo can we get some like uh there are two reasons to use inheritance first is to reuse existing code however in modern programming this is usually discouraged in favor of object composition an object inside another object yo dog I heard you like objects yes python yeah get that python out uh yeah hell yeah object in an object the second reason and to me the more important one is for abstraction and polymorphism the term the technical term is uh for this is subtyping yeah I don't know I don't know know I have never met an inheritance chain that I really liked you know what I mean just saying I've never really like I've just really never liked inheritance every time I've ever used inheritance I've been upset about it inheritance is not o op correct well I mean in some sense he's saying it sort of is but let's find out yes I think the topic is important enough to Warn its own heading subtyping is not exclusive to oop however it is a special significance here since it's the primary way of modeling polymorphism the idea is to combine multiple different classes that share common messages have methods with similar semantics into a super type that defines those messages now the super type can be used instead of the uh instead of a specifying a subtype my favorite example of how subtyping can be used in practice is the Java collection framework it defines interfaces we'll talk about what exactly interfaces are for example use cases are lists cues sets Maps as well as different implementations with different characteristics which support those use cases hell yeah hell yeah um nothing like a good oldfashioned concurrent skip list baby I don't remember I I don't remember my uh I'm not even sure what I'm looking at link transfer Q is an abstract CU which is a abstract collection which is a collection which is an iterable is that how you read that see I don't think inheritance is a good way to solve this I think the trait system in rust or just being able to have like you know orthogonal types to this is is way better right I don't want to have to have iterable as something I inherit from this graph was generated from java docs by scraping all known subclasses of collection and map and removing non-relevant nodes oh okay they removed non-relevant notes everybody nonrelevant ones this is actually this is actually a tightened up version of it thank God I know I mean I wouldn't have been able to understand it otherwise uh so let's say I want to process a list of data I want to use a list interface everywhere at the point where I instantiate the list I choose array list since I us let's see it's usually more performant implementation that is not a sentence I want anyone to listen to because I do not know if that's true or not uh it really has its time in place later on it turns out that the program is doing a lot of inserts and deletes at the beginning of the list which is pretty slow on arrays to speed up the program I can switch to a link list without changing any of its type signatures side note when calling a method we need to know the actual class of the object not just its declared class otherwise subtyping won't work properly this is called late Dynamic binding it's technical execution is a bit tricky and is the main reason why C++ objects and object pointers behave differently CV tables okay I mean yeah interfaces are great I think we all agree that interfaces are great right you love the collections API there's there's a lot of good stuff in the collections interfaces are great someone said no of course interfaces are great you love interfaces don't try to tell me you don't love interfaces no you don't love interfaces why not array list isn't an array yes it is it's an array underneath the hood in which stores the items and then as the list exceeds its capacity it reallocates and moves often doubling in size commonly referred to as a dynamic list or a dynamic array so no one can tell me why they don't like interfaces interfaces are fantastic is go slices array list go arrays the make arrays they act like array list yes that's why you have they I assume they're probably an array list underneath the hood I assume they're not uh linked list they're Dynamic arrays yes um let's see I love contracts I read every sentence interfaces stole my girlfriend okay you guys aren't helping at all I think we can't and shouldn't talk about subtyping without mentioning behavioral subtyping and Barbara uh lisov the basic idea of Behavioral subtyping is that a subtype should behave in a way similar to the parent type Barbara lisov who later won a touring award for her work on programming languages in oop in particular formalized the concept in 1987 into strong behavioral subtyping a subtype should be able to use in every situation its parent type can be used in okay okay this sounds like she created inheritance solid mentioned I'm not really sure what I don't know if I'm I'm applauding Barbara maybe I should be I don't know uh subtype requirement let this be a property provable about objects X type T then only this should be true for all objects of Y of Type S where s is a subtype of T classic classic classic just get just just get get it together people what are we reading hll ah yes ah yes okay let's try to understand this okay this is a property provable of objects X of type T then this should be true for all objects of Y of sub of Type S where s is a subtype of T I'm not really sure the problem is I don't quite understand what this is trying to say is this a function that takes in parameter X like what's its meaning no I'm not saying the word fee I'm saying speak English stop speaking them Greeks boy uh this is called uh lisov substitution principle I won't go into details here but the basic idea is that any precondition for types data or state for parameters can not be stronger than the super type while any postcondition for results cannot be weaker than uh the super type the notion is related to the design by contract methodology that started to pop up around the same time oh okay did I get that correct well this was that stupid article we read lcav lcav what did I how did I say it I did lovs okay yeah yeah yes I've been using chat GPT to learn Roblox okay l I got hit I got hit with the L there L uh okay uh is one of the five solid principles of object-oriented programming and design formulated by Barbara Lov in 19 87 it states that objects of a superclass should be replaceable with objects of its subclass without affecting the correctness of the program in Practical terms it means that a subass should extend the behavior of a superclass not alter it here is a practical example to illustrate L uh lisov substitution principle super class bird K [ __ ] subass Sparrow in this example the bird class as method fly and the spal class being a bird naturally implements fly method adhere to the LSP adhering to the LSP however the ostrich class although a bird cannot fly and raises a not Implement exception this violates uh the lov's whatever principle uh because it changes behavior of the superclass uh method leading to unexpect Behavior yeah yes it does that's because this just never works o disproven by Chad G gity bird flying bird okay so this would be how you do the correct version of it oh my goodness it is it is like communism you just have to do it correctly and then it works gosh dang gosh dang I've been wrong this whole time okay I I mean that's okay I I I guess I get this I feel like this isn't uh doesn't have to be with the thing I don't like about this in general is that there's so much more subtyping you have to do whenever you use inheritance as opposed to having a behavior you can attach to something like that's why I do like go or rust is because I can just have a struct and then I just make the struct just have more behaviors and be usable at any point in interface that I fulfill like to me this is just a 9,000 times better version of solving this exact same problem it's just so much easier because whenever you do this like think about how many things you have to get correct right you have to get it correct to the point where you actually make sure that you don't bork this principle but let's be real here whenever you use this whenever you've done in inheritance you've borked this principle at some point you work at a place that borks this principle no matter what this thing is always broken it's you're done effed up you're done effed up a Aon every single time sparrow bird iterable drawable yeah exactly and so you end up making these this this is what always happens whenever I see someone try to do o op right is that you end up getting this really really really long chain where you have to go through like 15 different classes to figure out what the hell is happening because it just doesn't work because everything has to be so gosh darn narrow this is an extremely correct solution but it ignores the Practical reality that implementing it fully and more complicated than the context management overhead of not doing at all yes exactly it precisely it's always so simple it's the same reason why I always [ __ ] on like like any example app people give me like look at how easy react is do you see this example app or look at how easy it is to use Redux look at this sample app look look at how easy to use HTM X look at this sample app the reality is that real applications take everything that you like and pour a gentle amount of just [ __ ] oil over it and just ruin everything okay ruins everything every good concept just turns awful when you use it in reality [ __ ] oil I didn't have anything there okay my bra okay I haven't add coffee okay just let me let me PB all right in some cases we don't care about the code sharing aspect of inherit but still want to profit off of subtyping we might never actually use the super type implementation of the methods and can therefore omit it entirely this is in fact so common it even has a name virtual or abstract methods you know rust does have some things that are very similar to this uh in the sense that you can do traits and then if you have enough methods defined on a trait you can even do trait default implementation have you seen that so you can actually have like an what feels like an abstract class in some sense because the trait itself self has a default implementation it's interesting have you seen this have you heard about this I'm that's what that's why I'm saying it rust is O op all the way baby all the way uh that's mostly because rust is failing towards the C++ approach of implementing everything for everyone classic uh some languages Let's see we might even end up removing all state from our abstract super type and only use it as a stencil for defining methods this is called an interface O Yay interfaces some some languages go or even go a step further by the way I think one of the biggest faults of a typescript interfaces is that it allows well there's actually a couple faults but one of the big faults ambient interfaced make my dream sad collisions are very very sad but the second one is also which by the way they can also be very very nice but the second one is also that they allow properties on an interface I think properties are truly an implementation detail and they should not be there just saying uh some languages go a step further and completely decouple interfaces from classes there are two different schools of thought here yeah I like the I like the secal structural typing as opposed to uh usual nominal typing is when an interface implementations are not declared at all you can simply use the object as an implementation as long as all the necessary methods are defined this is uh statically checked at compile time examples of languages that support structural typing are go I love I actually really do like that both for interfaces themselves and type constraints and C++ for Concepts yeah but are Concepts even implemented like how long have Concepts been around how long have they been around are we actually getting Concepts and do I even really know what concepts are even though I did read it once Concepts feel like traits give it 10 years yeah Concepts feel like traits conceptually speaking yes uh they need some time to marinate uh duck typing is similar but the existence of methods is only checked at runtime languages use this pattern uh included Python and JavaScript one disadvantage that's often cited is that it is more complicated to figure out which classes can be expected at a particular point in the program yeah yeah I mean that's that's the whole I yeah fully agree actually so I'm I'm a big fan of structural typing by the way I actually really like this because you get all the compile time goodies but you get kind of like the ease of use of everything else you know what I mean like you don't have to say like oh I'm all these things you're just you just are those things I am this thing now I will say that with rust the use of Turbo fishes plus parse is you know is really cool I like that I prefer type unions or rust enums to interfaces uh most of the time enums give you a list of types that you can accept and do pre-type implementation or per type implementation interfaces force you to be abstract yeah but there's many there's plenty of places that you need interfaces like right like parsing the from trait in in Rust is a great is is a great example you just need to be able to parse something to something else it just has to be an interface you know what I mean it can't it can't be an enom uh anyways the second pattern doesn't seem to have an established name yet the idea is to declare that the class implementing an interface after the class was already defined an example of a language that does this is rust with traits unfortunately traits is a horrible name for this concept since traits usually just refer to mixins I've heard the term extension traits in reference to extension methods in C cotlin DZ nuts uh but this doesn't seem to be very common either another language that supports this feature is hcll they call it type classes but hll is arguably not object oriented arguably one would argue that hll is not object oriented uh okay yes I I do agree traits is a terrible name uh because once you know what a trait is then it makes still some not sense but I just call I just use that word because that's what I I know now um all right hideand-seek the term that is often used with oop is encapsulation there are actually two applicable definitions of the term the first one refers to bundling data with behavior the object metaphor and the second one refers to restricting access to the state only to the object itself I would like to focus a bit on the latter since I think a lot of people don't understand it properly encapsulation is the technique for minimizing interpr dependencies among separately written modules by defining strict external interfaces so why is it important to restrict access to State well there is multiple reasons we could argue that it would violate lov's history constraint well I didn't know about Lov history constraint now did we I feel like I need to wash it normally I order larges and they they fit nicely encapsulation versus abstraction yeah yeah yeah yeah yeah yeah yeah yeah yeah we're we're kind of on the encapsulation uh El ligma history constraint classic but I think it that oh my goodness but I think it's much more practical to look at it from the perspective of a developer who wants to refactor the code base let's say we want to change the internal structure of an object like in the list example earlier maybe we want to switch from an array list to a link list but if other components are reliant on the internal state in the case of the array list this could be an internal primitive array we cannot easily change it we would need to find all places outside the class where the internal structure is re referenced the problem gets even worse when the class is exported and used by modules that we might not even control again this is why I said earlier this is like precisely the reason why I said earlier that interfaces in typescript that allow properties was a great mistake you look more buff in this one I've been feeling buff okay I've been feeling like I'm getting in shape these days I have been sore for like the last eight weeks straight and I'm just sick of it sick of it open close principle open for extension close for modification uh object coupling and class cohesion are often talked about uh encapsulation object coupling describes how much different objects depend on each other high object coupling are we talk about AFR or eant coupling uh implies that objects in question rely on a lot on each other which usually means that or usually means they should be one single object instead if objects rely on each other's internal structures they are highly coupled class cohesion describes the same characteristic but from a different perspective it's a measure of how coherent a class responsibilities are a class should ideally represent one idea and only do stuff Rel relateded to that idea low class co uh cohesion usually means high object coupling and vice versa okay so these are some of those things that you know normally I would love to agree with all these things yeah if you just use composition you don't have this problem again a lot of these problems I feel like are self-made problems I think Judo you are very very correct in the sense that a lot of these problems that we're reading are purely problems created by people who love o and now we have oop problem whiteboard masturbation there's a lot of whiteboard masturbation in oop and it can be very very difficult to follow along because there's just so much of it I'm not sure if you've done any objectoriented programming you've heard something like don't use public properties properties in the sense of member variables at some point and this is true because public properties expose the internal State and can potentially cause high object coupling however as with any Dogma it is usually a good idea to question it in this case the complete guideline is don't use public properties use Getters and Setters instead which is completely wrong I would actually agree with this completely Getters and Setters are such a waste of of energy and mental headp space in terms of encapsulation Getters and Setters are just as bad as public properties exactly as they do nothing to prevent object coupling if you have a class without meth any methods besides Getters and Setters it it doesn't really fit our object definition a term that has been used uh for this is record by the way if you just have Getters and Setters like real talk Getters and Setters are just slightly less convenient properties you're still just as I mean I know that c has get and set I just don't understand the the the purpose of get most Getters and Setters there's like very few Getters and Setters that make any sort of sense but what's the point I people just want to not have properties I don't know what the point of Getters and Setters are you want to be able to programmatically be able to define a a definition without having Getters and Setters are by far highly one of the most like I swear it's one of the biggest lies in all of programming I guess we're going to have to do something really quick aren't we um let's go like this so let's just delete that uh I know I know C has a version of them right uh I don't know where my music is but anyways so imagine you have a private you know a private uh Foo it's a number okay am I on JS or TS ah crap I'm in t JS here let's let's make this TS because it makes it more clear I think anyways okay there you go shut up anyways so we have this food right we have this priv so then we can have these things like uh here we'll call this private underscore food you know what I mean you know what I mean then we'd have something like get Fu that returns a number that returns out this Fu look at that look at that look at that x uh V value right uh void and then we go this. Fu equals V okay fantastic all right oopsies uh FV uh what is it uh number there we go let's see cannot have type annotations okay shut up shut up all right so that means we can have a new Foo right here and I'm going fu. Fu equals 123 dude just use an effing method at this point can we all agree that this it's just you could put some more logic in this right you can definitely put some more logic in here that you want to do right you could have some sort of calculated method what happened if you had something like this right uh bar and so then you wanted length right and that was this. Fu plus this bar okay so that means I'd go something like this what is my length right oh look at how nice that is that's really really nice in fact I have an exact use case for this exact thing right here did you know that I have an exact use case because if you build yourself a say a request queue you have two different you have two different lengths right you have the uh uh items right which is an array let's just say and then you also have inflight requests which is going to be a number so the length is actually those two numbers put together right it's going to be this.in items q. length plus uh this.f flight request right or you can just stop being a jackass and just use a just use a effing method okay just use a method okay why are you doing this to yourself okay what are you doing what are you doing request Q okay just stop it just use just use just just use a method okay save the parenthesis but it makes it dude it just somehow it is such a lie to do this right this feels like you're lying like computed properties are always just I I genuinely feel that they're they're kind of dangerous you know what I mean I just feel like whenever you use a computed property you're doing something in which is a little naughty and you should ask yourself why am I doing a computed property this is the thing if you actually want to use this with interfaces you have to recognize that a programming interface doesn't specify a data type it specifies a transport otherwise it's an abstract class or template which are not the same thing facts and if you go with a computed property you know it doesn't really work out in the interface sense of the world right uh I would name it compute length okay great I would name it length I in fact I would even name it link I would name it Len okay cuz that is who I am okay that is what I would do I would name it like that and then I'd have its counterpart method uh empty which returns bull buing which would be Len equals zero okay oh my goodness oh my goodness all right there you go look at that all right fantastic or just L L's l l doesn't make any sense Len is perfectly fine Len makes high level code look like Assembly Language no it doesn't make it look like Assembly Language where do you guys where where do you guys get off you guys don't program enough rust okay go program some Rust and come back to me Lenin communism Lenin Co communism anyways all right okay so what is oop op is related to State and behavior are bundled into units objects other property other properties objectoriented languages may have our classes prototypes encapsulation subtyping and inheritance let's look at the Modern languages at least top 15 okay okay here let me I'm going to zoom this out just because it's a little bit easier to look at these things JavaScript encapsulation okay this is wrong it does have encapsulation modern JavaScript does have privates right uh python uh not on a language level okay fair yes I mean python you can in can't you inspect values in closures uh let's see typescript classes it also has encapsulation no JavaScript also has if you use uh you can also use this right right and that means I I can't access Fu right like that's that's real it actually does have it and that's at a language level and when you in fact when you when you in fact when you uh when you string Json stringify it um so it is actually at a pretty high language level dang it uh get rid of all this crap there we go get the hell out of here okay cool cool cool talk cool talk okay cool talk cool talk I don't know what that is why is my LSP breaking all right I take out everything look at that see notice that it only printed F 69 it didn't in fact actually print the private property the property the private property is actually pre yes I'm ignoring the fact that all that other [ __ ] just happened okay do you even knowe uh today if you want to ship your project on schedule and minimize the amount of tech debt uh you forward use go yeah anyways you get it all right all right some good stuff in here no one cares about no one cares about these ones uh sear a c none of them okay it doesn't even have objects well I mean are strs objects I don't know are structs objects I guess you can't quite say they're objects because you can't because a part of his definition of objects are they have function pointers right they have methods so you can't say it no they're just TRS they're just memory C has perfect encapsulation PHP go yeah Powershell didn't even realize that was a language uh go on a package Leal uh level and structural typing best typing honestly it's best typing I think structural typing might be my favorite typing right it might be my favorite typing I Thought I Loved Russ nominal typing extension traits but I think I actually like structural typing better just in general uh okay so let's see now that we have a good understanding of what exactly oop is and what we can expect from a language that implements the oop Paradigm let's take a look at some common points of criticism I shamelessly crowdsource most of the following part by asking my friends what they hate about oop but what are objects what uh so objects are can be anything right so how do I know what should be be an object when should I combine things what should be separated well that's called experience bro and this exists in or not in objectoriented like that's just that's just that's called programming doc uh well in the end that's just practice and experience with time you'll get a feeling about what shouldn't uh what shouldn't be an object however to get started there are some tricks that might help you uh here's what the gang of four has to say dude it's that skill issue going on here object-oriented design methodologies favor many different approaches you can write a problem statement single out the nouns and verbs and create correspond by the way if you're hit me with nouns and verbs and you're talking about programming I already know that you're hitting that whiteboard too hard okay I don't know about all this I don't know all I don't know about all this this nouns and verbs and adjectives and participles going on here uh or can you focus on on the collaborations and responsibilities in your system or can you model the real world and translate the objects found during analysis into design there will always be disagreement with approaches uh on which approach is best speeding speeded Speedy things go in Speedy things come out op slow or so I've heard the rational is that the vtable lookups are overhead compared to direct function calls I don't know I don't actually know whether that's true so I decided to test it the test setup is as follows I wrote the same program a touring machine checking for binary palindromes three times once using object-oriented programming once using structural programming using only functions loops tupal and arrays and stuff like this and one using functional program for good measure I measured everything in C++ so it's equally playing field an equal playing field also C++ has the first class function class functions Lambda expressions for functional version hell yeah it does everybody loves who here doesn't love c++'s lambdas aren't they just so good yeah there you go thank you jamely appreciate that that's what I always like seeing what am I capturing what are the arguments where's the function body it's just like damnn son I don't even know what the hell is happening um there is 100,000 test cases the total time is measured the compiler is clang 1403 and the target platform is Apple silicon M1 I can test each and uh with both o uh 0 and 03 for the O implementation I made sure not to rely on Heap allocations since the context witches would probably completely ruin the runtime I did however use inheritance the template pattern to be specific to make the template pattern to be specific to make vtable lookups as realistic as possible the structured version also allocates everything on the stack I built two different versions the first one uses tupal in the translation table lookup however I wasn't sure how tupal are implemented under the hood and I wanted to avoid using objects by accident if possible so I wrote another version that only relies on functions but it turns out the results were uh so close I couldn't tell the difference does that mean FP is winner or loser is this how many cycles we're doing or as we can see the structured version is marginally uh is marginally 5% faster than the object oriented uh one okay hold on okay so more is worse more is worse you know this just tells me you got some skill issues going on you got some skill issues on the functional program if you acally wrote something that is 10 times slower you got some skill issues o camel is dead that's just skill issues that's skill issues for sure uh when using 03 the performance is basically identical so my guess is that C++ Optimizer was able to get rid of whatever uh impacted the performance the functional implementation is not even remotely closed to a certain extent this is probably caused by The Benchmark I chose touring machines are inherently stateful which is pretty awkward to model in a functional way did you model it well though did you um another aspect is that even though I use C++ 14 which supports return type inference I was forced to use standard function template as a wrapper for the Lambda expressions Anonymous types are a pain in the backside which according to my test are quite a bit slow slower than native Lum Expressions okay so he might have forced himself to use something that wasn't very Swift I don't remember programming a touring machine you're programming on a touring machine have you ever thought about that I should have probably done some more rigorous statistical tests or at least calculated the deviation but honestly I was too lazy I may write up an update on proper analysis later on uh in case you wanted to do some tests on your own feel free to send me the results afterwards the source code is on GitHub uh also I should probably apologize for the horrible code C++ is not my native language and I hacked it together in an hour or so again dangers here dangers uh anyways without rigorous statistic uh statistics my conclusion of the test is that there is only a very small difference in performance adding more abstraction layers or using different data structures probably has more significant impact agreed agreed this article is a skill issue this article is not a full skill issue there's a lot of good Insight here however other benchmarks on embedded systems have found 10% performance penalty compared to procedural implementation let's go procedural another paper comparing the performance of different aspects of O as well as different design pattern has shown that virtual functions which I used in my implementation can impact the performance negatively uh the template pattern which I also used can decrease the performance by about 3 to 4% but this may also be uh this might also just be because it relies on Virtual functions by the way whenever you see percents and stuff like this I will just completely disregard most of this it might slow it down it might slow it down all right abstract nonsense for some reason oop leads us to over complicated everything we need we endlessly or we needlessly build abstractions on top of abstractions seemingly for the sole purpose of making pretty uml diagrams okay this is a pretty good argument but this works for every type of programming can we agree to that I think that anybody that has the ability to program in a more abstract language will by the very necessity make more complicated and Abstract things the startup not only has increasing net worth but also increased net girth thanks pick I hope that girth is feeling quite girthy the thing is it's caused by how we use the tools not the tools themselves my suspicion is that most the these issues arise from developers wanting to be clever and build generic solutions to cover every possible future development yep exists in every single language I think a lot of this can be avoided by adjusting the workflow specifically if the end goal is not determined from the beginning don't plan on every eventuality from the start only plan for what you need you'll need dude I love this this is so good this is so good this is like the greatest piece of advice in this entire article right here is just build what you need stop stop stop the requirements might change later on so your amazing highly generic solution that you worked on for four weeks straight might not be used in the end a waste of time facts uh the threat of get and set op is so verbose there is so much boilerplate Getters and Setters for example Sai this is a personal pet peeve of mine we touched on this earlier but but I would really like to hammer this part home if you really need Getters and Setters for every single member variable it's probably not a proper object to start with also bad programming skill issues I'd highly encourage reconsidering your object model try to reduce coupling if it's really a record class with no internal Behavior everything might as well be public there is hardly a point in using Getters and Setters a similar thing though admittedly it's better applies to properties in languages like C oh c mentioned damn it we got C here of course code generators uh like the infamous lombok C people classic cper the only reason for the use of Getters and Setters over public members is whether or when there is some additional logic like validation of invariance for example that's fair I still think it's just dangerous I think you should use a method and not a Getters and Setters uh kind of related if you have a value object with no Setters but a lot of Getters make sure to not accidentally expose a modifiable reference to same internal State otherwise you've got Setters that's not intentional ooh okay okay this is the LA this looks like kind of like the last one uh object factory factory Singleton I guess there are two topics that fits this heading the first being naming Madness that has been established in Enterprise software development this is again not a per se an issue with o although for some reason it seems to happen a lot more in oop this is more of an issue of O dog I happened to be uh a Calvin Henny fan and he gave an amazing talk on naming in programming at devweek 2015 among other things he talks about how naming can influence modeling I highly recommend watching it okay on the second topic it is a rabbit hole of design patterns that are often blindly applied seemingly without any thought on why exactly specifically the factory pattern has some valid use case or uses but because people overuse that pattern so much it's now synonymous with unnecessary abstractions everything's a factory C is a really good programming language you watch your mouth Judo we don't complement it out loud there are some courses Also let's see there is there are of course also established patterns where you should really have a damn good reason to actually use it at least in a strictly objectoriented context single Singleton for example Singleton is in essence just a fancy name for Global variable great fun little side note in the spring framework Beans by default gets a Singleton scope meaning if not stated otherwise every single Bean is global your beans are Global boy the dream of spring another thing I've been noticing with modern Enterprise applications is that they're actually not objectoriented entities dto are records not objects beans Services repositories don't hold State and could just well be plain functions in modules we are we are using languages that Force us to think in classes with architectures that don't require objects spring boot could just as well be written in C it's pretty sweet it's pretty sweet maybe spring is not that bad maybe spring is not that bad maybe I like spring I don't even know uh what a ride in my longest blog post so far maybe a bit too long I'll make sure the next one is shorter I also found a really interesting talk by barara uh lisov about abstraction but I just wasn't sure where to put it so here you go uh I particularly like the stab against python for throwing encapsulation out the window anyways I hope I could shed some light on the topic maybe you've learned something or at least you found some of my ramblings somewhat entertaining see you soon Sigma let's good I actually really like that this is Sigma grind set I actually really like this article there's a lot of good things in it but at the end of the day I still don't quite understand o you know real talk I still think the problem with o the problem with any of these things is that they all have very they're all accomplishing the same goal with slightly different approaches and I think at the end of the day one reason why I like one reason why I've grown to like go so much in the recent time is that it just forces you to be stupid and by forcing you to be stupid I find myself highly productive simple is not intuitive at all you got to quit regurgitating dumb dumb dumb phrases you read on the internet okay I know whose blog post you're effectively quoting word for word it's not that great the internet is always right just saying uh the prime SE all okay I haven't had coffee in a couple days and I'm angry okay simple is good NS simple can be very very good and in most cases simple is good enough it just depends on how simplistic you have you just don't want to exceed a certain line of Simplicity cuz once there's a certain line of Simplicity then it becomes very difficult I don't think Go's a great language no one ever said that it's a very mid language it just is very very practical is rust simple rust is neither simple nor easy uh take that a step further I think that languages with a better modules and interfaces had become more popular sooner we wouldn't have gotten microservice as hell and we would still be on a lot of monoliths potentially maybe go is so mid it's good yeah it's just it's super mid it's pretty good he quick caffeine too yeah nice job nice job him what is a great language for you then I like go it's a great shitty language it's like a great shitty language and I like to use it and I enjoy using it we'll see if I keep on enjoy using it after a year I'm going to give it a good year of trying to build a bunch of little things in it and I'll see how I feel at the end you know what I mean we'll see we'll see anyways become grug brain use Simple Things okay it will make your life easier just trust me just try not using as complicated stuff try hmx with go enjoy it the name you know what the name is and you will shut the hell up