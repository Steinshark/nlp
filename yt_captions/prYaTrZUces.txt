i i thought we talk about logic okay that sounds logical somehow we all know about how to reason i mean we reason with our young with our parents with our partners and and then with our children and so on so we and our bosses and friends and whatever but sometimes we want to be very precise about reasoning and this sort of precise form of reasoning is uh realized in in in logic is investigated understood and presented in logic and this is also sometimes quite important to not make uh commit any fallacies to to to to adopt wrong kinds of reasoning so you really need you really need to understand and study the the rules of of reasoning so one of the things i'm doing when i teach logic so i teach this in the second year is i'm using a computer program a proof assistant called lean and lean actually was developed uh at microsoft research by a guy leonardo de mora who who also he he developed some automatic proof systems uh he's very famous for that the theory improver but then he he he was also interested in proof assistance or interactive proof systems which which can interact with automatic theory improving and i will explain this a bit more later i hope but uh the main idea here is to have a system you can sort of interact with or an interactive proof system you you you can you can type in basically your proofs and the proof system will check whether your proof is okay and when i want to teach logic to to students i find this is extremely helpful because otherwise it's very hard to say what is really an exact acceptable argument yeah i mean people you give them some examples and then you maybe ask for homework do this yeah and then they do something which looks like a proof yeah but it may you're not sure whether they really understood this or whether they just produce something which which which i think looks like a proof yeah and and proofs can be can be very subtly wrong i mean do you know the do you know the proof that all horses have the same color here's a proof it uses this idea of induction so one horse has got the same color right and now you have any number of horses and you you divide them into two groups which overlap at one horse here and now by induction hypothesis for the smaller collection of horses you know that they have all the same color and the horse in the middle has the same color so horses together has the same color right so that's a proof that all horses have the same color right and this is wrong yeah but these kind of proofs they show up maybe more subtle sometimes you prove something which is actually correct but your proof is is flawed yeah okay so so i think for me the best way to to explain uh logic and and to to make it uh people to understand it is to use these these proof systems now they have another purpose as well because we can use them and they are actually used not everywhere but in some places to verify some systems which are either safety critical or which are hardware very frequently used or can be quite inferior can be quite expensive and so now some companies start to use these proof systems for applications here the best way to learn it is by doing it and here so a proof system like i'm using is like the lean system which i'm using is is extremely useful maybe i should say a bit more about about lean which is now also used by the mathematicians i mean first it was mainly used by computer scientists and the mathematicians are a bit conservative you know they're not they don't really want to change anything yeah um but actually there's this uh a guy in imperial college kevin brothert and he is really pushing this and he's using also he's using lean also to teach mathematics to the to the mathematics undergraduate and he has recently given a talk at the international mathematical congress where he has shown what they are doing and is quite impressive because they actually able now to to formalize very recent results in mathematics using the system and and and do it with this proof system and this is impressive because these recent results they are like icebergs yeah there's lots of underwater stuff lots of theorems that they need here and they have done it all the way down for very recent theorems and really leading edge mathematics which is very very impressive and and now uh their current project is to formalize you know vermont's last theorem which which says that that x to the n plus y to the n equals z to the n has no solutions if n is greater than two but for two we know that three two three squared plus four squared equals five squared here but but if it's more than squared if it's cubed or anything higher there's no solution and fermat claimed that he had a proof but nobody believes this anymore but recently a few years ago uh mathematicians came up with the proof and uh it's uh it's it's it's a proof using all of contemporary mathematics so it's really really really like a moon landing project to formalize this and let's see whether they whether they will able to do this yeah before we do anything very exciting like fermat's last theorem that we're not doing today what we start with is a bit like when you do learn piano you have to play scales right and and scales are a bit boring but but you need to to learn them to to how to move your fingers and in logic we do something like this we prove propositional tautologies yeah so what's a tautology like in the example tautology is like a propositional uh expression which is always true okay let's look at at my example here so i've now launched lean actually i'm using this visual studio code by microsoft oh i should actually mention that lean is is free so you can just download it and i'm using lean three there's no new version v4 okay so i i've done some stuff there which i'm not going to explain but here is is my uh tautology i want to show so let me explain this what does it say i say if p implies q then not q implies not p so this l there means implies so if then and this little hook means not and error means implies and here we could we could put some extra brackets in to make it more clear you know then unnecessary so here i'm saying if p then q then if not q then not p so this is a tautology so being a tautology means whatever we plug in for p and q it's always true but actually i find when i explain it i find it useful to think of some concrete examples so let's say p is the sun shines in cube you go to the zoo yeah and now i tell my my my children if the sun shines then we go to the zoo the consequence of this is if you don't go to the zoo then the sun doesn't shine yeah and you have to think for a moment about this yeah why this is actually true if i say if the sunshine then we go to the zoo and we don't go to the zoo then obviously the only possible situation is that the sun doesn't shine you're a child you're not only for a child i mean what is not true is if the sunshine we go to the zoo does not imply if the sun doesn't shine we don't go to the zoo because it didn't see anything what happens if the sun doesn't shine so that would be a fallacy yeah okay but if you if you if you turn it around it's it's it's correct all right and how can we see it's a tautology how can we see it what do you say well can you factor out those knots yeah you want to have some algebra here you have to apply some algebra okay that's one way it feels like but people usually have seen truth tables right okay so that's yet another way uh to to to check uh propositional tautologies yeah but that's not what i'm uh going to do today because actually truth tables are quite okay for propositional logic but when you move on to predicate logic and you have quantifiers when you talk about our numbers or lists to do with programs then truth tables are not very helpful so what we are going to do instead we are going to look at the proof okay we're going to prove this interactively and here i said sorry but sorry means i'm sorry i haven't yet provided a proof here and if i go here into the video into the beginning of this of this proof block i am i'm seeing here some uh uh something uh it says there's a symbol here is called a turnstile and that's what i want to prove right this is the statement i want to prove and it has removed my brackets because they're not really necessary so lean's done that for you then yeah yeah if i if i go somewhere else nothing is visible but if i go here then it tells me okay this is your current proof state you know so how do i prove now i have to prove an implication so how do i have to prove if this is the case then this is the case so how do i prove an application and the rule how to prove an application is very simple i use assume i assume the the left hand side and which i call p q and i have to prove the right hand side let me go on so what happened now is this proof state has changed i i have to prove only the conclusion not q implies not p but i have an assumption now namely that p implies q and again i have to prove an implication not q implies not p now we know already how to prove an application namely we assume the left hand side and we prove the right hand side so now assuming not q to prove not p okay so assume i call it nq and what happens is now that i have another assumption not q and i still have to prove not p so now we have to understand what negation is right so i have used implication now we have to use negation now let me make a comment here in in lean negation is also an implication it says not p means p implies false so how can we understand this false is a bit of a tricky thing to explain and my explanation for false is pigs have wings if i want to say not p then i see if p then pigs have wings yeah and that means not p right yeah yes if if you ask a girl do you want to marry me and she is if i marry you then pigs have wings that means no right yeah yeah yeah yeah pigs might fly yes it's not really okay so that's the idea that's just an implication so now in this situation we are here we want to prove not p but it really means p implies false so all we have to do we have to assume p and then we have to try to prove that pigs have been inside okay so you see now you have the assumption p and i have to pull forwards so how can i put false how can i prove that pigs have wings now actually there's one way because i have an assumption called not q and not q means if q then pigs have wings right so i want to prove pigs have wings and i have audio assumption which says if q then pixel wings so now i'm uh i'm using this so this time i'm using a different tactic i'm using apply and apply enqueue and what's happening is now i have to prove q because i wanted to prove if q i mean i i used if q then picks picks up wings now i'm use this now i'm down to proving q and again how can i prove q i look at my assumption there's one assumption which says if p is in q i can use this and could use proving q to proving p okay let me just do this so i say apply pq pq and now what happens is i have to prove p because if p's and q i want to prove q now i'm down to proving just p yeah but that's very easy because uh i i i already know p i have an assumption p and i can just say exact p and goals accomplished i get a firework and i can get rid of my soy because i have done the whole pool so that's an example of a very simple proof this is one of these warm-up exercises to prove these propositional uh tautologies uh which which are as as reasoning right we learn things like okay if you want to prove not q implies not p then you you can you can you can prove p implies q okay now this is a very simple uh very simple tautology and you think why do i have to invest all this hard work to do this and the answer is you don't so lean has a built-in prover which can uh which can which can automatically grow very simple propositions now if i want to teach people how to learn proofs then they're not allowed to use it yeah yeah yeah it's like cheating but i wanted to show something actually uh what's the proof for lean so here you just used example but let me give this a name it's called a theorem p1 okay so i've we now prove the theorem and let's print the theorem okay or print the proofs actually okay so here we see the proof in lean and this is like a it's actually a functional program you see the lambda here so it's a proof it's a functional program but i don't have to write this program instead i can use these tactics and the clever tactics is it auto does be the same thing because it produces also a proof object if you see so p2 is the automatic pool and it basically produces the same proof as i have produced by hand yeah so but the point here is even if i use these these automatic tactics they still could use the proof yeah and this is the idea of of lean is always safe yeah you can extend it you can write very clever tactics but you always have to give evidence for this okay and i wanted to to to finish this part with a little uh challenge to prove that the following is a tautology it cannot be that p if and only if not p so here's this if and only if uh is defined and it just means uh logical equivalence p implies not p and not p implies p so it's just defined as implication in both directions yeah and we want to show that this is not the case now this turns out this is actually not not so easy to do i mean it's clear that it cannot be that the proposition is equivalent to its own negation right but to actually prove this is a bit of a challenge now if i use it auto it proves it yeah it's very happy but the challenge is to prove it without it it auto tautologies in mean which are a bit like doing the scales on the piano but now we want to play a little song a very simple song i mean nothing complicated we can categorically say that if we gave that to a person they would say there's a remote control in that image and some noise