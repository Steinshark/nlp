hi everyone in the next few episodes we're going to be working on a custom terrain Shader so what I'd like to do this episode is just uh tidy up a little bit in preparation for that so on our map generator object we've got all of these variables uh controlling the noise on which the terrain is based as well as the actual terrain mesh things like the mesh height curve and the mesh height multiplier use fall off and so on now one thing that's annoying is that if we want to create different types of terrain with different noise values and so on we have to overwrite the ones that we currently have what would be nicer is if we could create some sort of asset to store these values in so that if we want to create a new terrain type we just create a new asset and modify the values there so uh inside of the script folder I'm going to create a new folder called data and inside of here create a new cop script which I'm just going to call the noise data all right so opening that up this is going to inherit from scriptable object and if you're not familiar with working with scriptable objects we can create a public variable in here say for example a public float X and then at the top we just add a create asset menu attribute and then if we save this and just wait for this to compile quickly you can see that if we right click a noise data option has been added to our create menu so if we create one of these we get this noise data asset and we can uh set the value in the inspector there and if we created another version of it we can change the value and uh we now have two separate noise dat assets all right let's delete those for now and uh fill this with the actual variables we want so let's go into the map generator and just grab everything pertaining to noise so we want the noise scale octaves persistance larity seed and offset let's just cut those all into here and then also going to want the normalize mode so cut that as well and paste it in here okay so save and then I'm going to create a second type of data called the terrain data and just like the noise data this will inherit from scriptable object and I'll add this create asset menu attribute and then from the map generator we'll just take everything pertaining to the terrain itself so things like the mesh height curve the mesh height multiplier use falloff paste those in there also going to want the use flat shading and uh finally from the endless terrain script we've got this uh scale float uh I'm just going to grab that as well and paste that in here going to make it just a public float instead of a constant float and I'm going to rename this to uniform scale so we've got the height multiplier which just scales on the Y AIS and then the uniform scale obviously scales x y and Zed all right let's now save all of these and we're of course going to need to uh fix all of the errors that will have occurred let's also make a reference in the map generator to a Terrain data and noise data object so let's create public terrain data let's call this terrain data and a public noise data noise data so now we just need to slowly go through and fix everything highlight in Red so use flat shading comes from the terrain data so say in instance. terrain data. use flat shading I'm just going to copy this terrain data dot since that's going to come up in a lot of places uh I think everything on this line is just going to need a Terrain data dot in front of it um let's go down here this needs terrain data dot as well and the use falloff needs a Terrain data dot in front of it the rest of these I think need a noise data dot so copy that and just paste it in front of each of them all right last two this is an excessively long line um anyway then this unv validate stuff we're going to want this to be done in the uh noise data uh class so let's save what we've done there head over here create a void onvalidate and we can just paste that in all right so it seems like our map generator is working let's head over to the endless terrain script because that should be a little bit broken now so instead of dividing by scale we're now going to get map generator do terrain data do uniform scale and let's just copy that for when we need it later on over here and over here all right let's save and see if everything's fixed uh I think these errors are just cropping up because we don't have anything assigned to the terrain or noise data so let's create a new folder in which to store our terrain assets so I'll just call this terrain assets and in here let's create a new noise data I'm just going to call this default noise and then also create a uh terrain data called default terrain and we can just set these up to some values so give it a height multiplier of 40 and let's just make a default curve there and fill some values in here okay that should be fine and let's assign them so the noise data and then the terrain data all right no more errors it seems uh now this is all working but one thing that we've lost is the ability to change values and see them update in real time uh we'd have to actually come here and press generate again so that's pretty sad so let's do something to fix that uh going into the data folder here I'm going to create a third cop script and I'm going to call this updatable data okay this is going to act as a base class for the terrain data and the noise data so opening this up this is going to inherit from scriptable object and both the terrain data and the noise data are going to inherit from that all right so this is going to have an event that gets called when the values are updated so that the map generator can subscribe to that event and then regenerate the terrain when the values are changed so let's create public event system doaction and we'll call this on values updated all right we're also going to want a public pool telling us whether or not to auto update when values are changed and then we can make a little void here let's make that public actually public void notify of updated values and this is going to say if the onv values updated event is not null then it's going to call that event okay and then let's make a void onvalidate remember onvalidate gets called in a number of situations uh the main ones we're interested in are when a value is changed in the inspector it will be called also when scripts compile and stuff like that so whenever a value is changed in the inspector we're going to say if we want to automatically update then we will notify of updated values okay so now we just need to make a custom editor for this updatable data so that we can add in a update button so that if we don't have auto update on we can press that to get a manual update so let's go into the editor here create a new cop script and call this the update able data editor okay so we're going to need to say using Unity editor it extends the editor of course and it's just going to have a public override on inspector GUI so we first so we first call base. on inspector GUI and then we want to get a reference to our updatable data that this is an editor of so updatable data just call that data is equal to and we'll cast the editor Target as an updatable data so updatable data in parenthesis followed by Target okay we can then say if uh gooy layout do button so if this update button is pressed then we're going to want to say data dot notify of updated values great so we also just need to add a little attribute up here to say what this is a custom editor of it's a custom editor type of uh updatable data all right now if we go onto these assets we're going to see that actually that editor doesn't seem to be working and the reason for this is that by default the editor will only work on on the uh on the actual updatable data not on stuff that inherits from that but what we can do is we can just go over here to this attribute and add comma true and that's going to say that we do want this to work uh for the derived classes so now going onto these you can see we've got an update button and a little auto update bu over there so that is great now uh one important detail is that in the updatable data we've got void onvalidate and then in noise data we've got onvalidate as well and that means that this onvalidate will be called but this one will not so we need to make this a protected virtual void and then in the noise data we can override that and once we've done this stuff we can then say base do on validate to make sure that it does get called over here and we can have our auto update functionality okay let's head over to the map generator and we're going to want to uh subscribe to the on values updated event let's make a little method here on values updated and uh what we're going to say is if we're in the editor so if the game is not playing so if not application do is playing then we're just going to want to draw a new map in the editor uh when the values get updated then coming down to onvalidate so if something in the inspector changes uh so for example if a new terrain data or noise data object is set then we're going to want to subscribe to its on values updated event so let's say if the terrain data is not null then we'll want to say terrain data dot uh on values updated plus equals on values updated and the same thing for the noise data if noise data is not equal to null then noise data Doon values updated uh so on um now what's going to end up happening is that the onv values updated method is going to be subscribed multiple times each time onv validate is called get subscribed again and again and it'll end up uh that this method actually gets called you know hundreds of times each time we make a change and that's not good so the easiest way to fix this is before we subscribe again we can actually unsubscribe cribe by saying terrain data do onv values updated minus equals onv values updated now if we're not already subscribed that's just going to do nothing but if we are already subscribed then we'll unsubscribe and then subscribe once more so that our subscription count stays at one so just a small trick to make sure that we don't get subscribed multiple times uh we could also do a loop through the uh invocation list uh it's got a get invocation list method and we could check if we if uh we are in that list but that's a bit of a long way round so we'll do it like this instead on values updated minus equals on values updated all right so hopefully what we'll see now is that if I enable auto update and then make some sort of change here that gets reflected automatically in the editor very nice let's just play around with this a little bit maybe uh get a nice looking terrain I guess that looks okay okay and then of course if we turn off auto update make a change and then press update then that's going to update manually as well uh so as I said in the next episodes we're going to be creating a custom terrain Shader which means that all of this texture stuff that we currently have uh including all of this regions code for setting colors in the map generator is going to uh no longer be of any value so we're just going to go ahead and delete all of that now so in the map generator going to come down delete the terrain type struct and then from the map data struct we can remove the color array and just delete that from the Constructor as well of course since the map data struct now only contains the height map we could get rid of the map data struct but I'm not going to for the moment uh we might want to add some other stuff in here later on and it just acts as a nice wrapper for our height map so uh hang on to it for now then uh in the generate map data method we we can delete all of this stuff that is generating the color map array and we'll delete that there as well and then up here uh this texture from color map is no longer really going to be used so let's delete this display option and we can delete the regions and we can remove color map as a draw mode option I think there's an error at the end of this line as as well uh we're just going to remove this whole texture generator thing uh if I can just select that so from there to there just delete so that means a change in our display. draw mesh so let's head over there just command D with it selected to jump into that class so draw mesh is no longer going to take in a texture which means of course that it will no longer apply that texture um just quickly one thing I'd like to do in the draw mesh is set the mesh's size equal to the terrain data. uniform scale so let's quickly do that now while we're here we can say mesh filter. transform. scale is equal to Vector 3.1 multiplied by and now we're going to need a reference to the map generator so we can just say find objective type map generator do terrain data dot uniform scale all right I think we made all the changes here that we need to then in the endless terrain let's just come down here to where it's complaining about not having a color map and as I've said before we're not going to be generating Textures in this way anymore so we just delete uh both of those lines let's see if we've got any errors left seems we've got rid of them all um one small change that I want to make uh last episode I created this uh static accessor to get the map chunk size I'm going to make this be not static in fact so that means I can remove this instance code and remove that map generator instance variable and then in the endless ter brain since we do have this uh reference to the map generator instead of calling it statically we can just actually make use of that reference map generator and just save that now there is one bug that's been lurking for a couple of episodes uh if we use the falloff map let me just turn on auto update over here okay the update wasn't working and had to pause the video for a while to figure out why if we go on the map generator we deleted one of the elements of the draw mode enum so this is now changed to falloff map and let's just change it to mesh that our mesh will actually be updated so uh going back here if we turn on use falloff we've got these uh strange artifacts along the edges and this this is just because the uh the falloff map is not the same size as the noise map this just save so that uh texture gets destroyed um so in the map generator uh currently we've got this awake method where we're generating the falloff map I'm just going to delete that and then we're also generating a fall-off map in the UN validate method just cut that out there all right and then in the generate map data we'll say if use falloff uh rather that should be if Terrain data do use falloff only then will we bother doing this Loop since it doesn't have the color code in it anymore so all it's used for now is uh applying the falloff map so if we are using a falloff and then if the falloff map is null so if that is equal to null then we're going to want to generate a new falloff map with the size of map chunk size plus two since the size of our noise map is map chunk size plus two and then we want to Loop through the entire noise map so we'll add to uh to both of these as well so now if we save that if we wait for this to compile and then press update can see that those Edge artifacts have gone so we are very nearly done for today uh the last bit of preparation I want to do is just to create a final scriptable object for our texture data so coming in here like the others this is going to inherit from updatable data and this is going to have a public void called uh apply to material taking in a material which you can just call material and this is going to do some stuff which we will be working on in the episodes to come and then in the map generator we're going to have a public texture data texture data and we'll have a void on texture values updated and we're also going to want a public material terrain material so if the texture values have been updated we'll say texture data do apply to material pass in the terrain material and let it do its thing now we just need to make sure that on texture values updated gets called so coming down to on validate we can say if texture data not equal to null then texture data dot on values updated plus equals on texture values updated and then like with the others before that we will unsubscribe as well to make sure that it doesn't have multiple subscribers okay so going to leave you with this nice Bland white terrain but in the episodes to come we will be livening it up considerably until then cheers