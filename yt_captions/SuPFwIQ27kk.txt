I almost got fired for choosing react in our Enterprise app react was supposed to ease our development instead it created roadblocks okay okay okay I like the sounds of this probably chat Jeopardy is my guess um nope it's a real photo all right it's summer 2018. nice Good Year my boss Adrian classic Adrian boss uh asked me to join him in a Skype call with James the CTO of the big Canadian company while getting to know each other I find out that James is a smart guy with big ambition his vision is to migrate a massive desktop what is this that's uh that's it's it's C sharp what does wp is something something Foundation web page Foundation what what what what is WPF I remember WPF being like um uh one of the most popular c-sharp things 2013 web presentation yeah Windows presentation form ah damn Windows presentation framework damn application to a web in the cloud okay yeah yeah yeah I like his friendly attitude and I can tell that he is eager to collaborate uh while uh with us he already has developed a partner in India uh but the lack experience in building web allocations but they lack experience in building web applications Adrian and I follow the standard approach for this uh situation did we just read the big tech company and also offshoring work classic Canada uh we have a few because they're like well you can't call them Engineers okay they're software developers because if you call them an engineer they need paperwork uh we have a few more calls and then we start the discovery phase in which we try to grasp the big picture and find the non-functional requirements these are the main points we should focus on one a big application hell yeah that's point one more than 220 pages of which most are maintenance screens around 20 of which are highly customized sounds like a job for htmx it already sounds like htmx literally this sounds like hdmax displays large amount of data especially in grids with all kinds of features grouping column freezing row expanding custom columns you name it sounds like htmax modular architecture allowing multiple teams to work on the project at the same time multi-year project new features will be added over time no offline support is required h t m x uh quick onboarding for new team members especially for the.net developers working on the old desktop application okay I can't believe they're about to choose react for this I'm not going to lie to you when I hear a grid of a lot of data when I hear This plus react that sounds crazy okay like solid.js felt view like anything but something that requires a diffing in JavaScript than to update the dot like this is crazy it had to be so slow uh as an architect my role is to create technical proposal that contains the architecture details approach roadmap guidelines and most importantly the technology stack that will be used James mentioned multiple times he wants a future-proof technology I feel like we just read something about this didn't we just read something about how you should only learn react and you should only use react classic golden Hammer problem right you can use react you just gotta know when it is completely a terrible choice to make uh and he for me that's every time but for other people that can be only some of the time and he is not in favor of angular good job James because it has a bad reputation after angularjs got deprecated oh that's why huh I always thought it was because it's terrible I didn't realize I didn't realize that I got a bad reputation after deprecating jeez I've been misinformed by the internet again uh James mentioned multiple times that he wants to future-proof technology and he's not okay I've already read that James wants the future proof okay I'd already successfully implemented a few small and medium-sized projects using both angular and react so I'm not totally attached to any of them I feel like I could uh either could do the job for this project I picked react with Redux damn you just doubled down on garbage collection on a large grid-based application I'm telling you you're about to just get just your butt I am not convinced Redux is good I'm not I am not convinced I have become that hat hayos hadios person to the core which is application state is the HTML uh which I regret two years later no regertz we got some regerts boys we got some regerts uh we assigned a team of three developers to work on the proof of concept and after two months it's success super responsive user interface blazingly fast build times and high development speed everyone is happy you know there's something about the fact that I have to build my JavaScript I have to build my dynamic programming language into another dynamic programming language to be ran on the web something about that still just hurts me somewhere deep inside you know what I mean like there's some place deep inside of me that always hurts just a little bit knowing that I have to build JavaScript okay it's just a personal opinion just leave it out there uh roadblock number one.net developers joined the team of course it's a roadblock it's a.net developer got a beast co uh uh after the proof of concept it's time for the developers from the clients Outsourcing team to join in we hadn't started the knowledge sharing sessions yet and the CTO sends me an email saying hey razvan uh hey resvan uh we really have to meet tomorrow with my Outsourcing team classic email nothing like a good old-fashioned one-line email from your CTO I'm about to get fired we have a me we have we have that meeting in the technical uh lead ambushes me with questions and solutions nothing like getting ambushed with questions and when the person already has a solution why haven't used why haven't you used rust by the way rust is a fully functional you're like dude shut up uh where is the dependency injection uh what do you mean by there is no need for one here is one inverse of ijs functional components no no no no no no we don't like them let's use class components okay I'm partially actually on this guy's team uh okay here's the rant that nobody likes but uh hooks are just complicated classes change my mind change my mind I wish they would have doubled down on classes and just figured out a better way to do state and then we wouldn't have had this really big mess with everything they're doing anyways why do these function why do these functions just hang around and why aren't they encapsulated inside service classes to make them static but that question doesn't even make any sense see okay so this is just a problem with C sharp right this is just C sharp thinking this is just uh you know this is just oh the big Capital oop thinking right here right this is just what's happening when you can't when you can't look at a function without it being a static member of a class you've just like you just need to go sit down for a little bit you know let you let your brain stew on it for a moment okay not everything needs a namespace require is a namespace you know what I mean where is the retry policy for the API let's Implement using one name polyjs okay is it crazy to me that people reach for libraries for everything like everything a retry policy is like not we're not talking we're not talking something crazy here it's called cringe is that what it's called Uh I mean at one point it was industry standard you know what I mean uh so it's not cringe it's just like that it's it's like it's how you grew up as a developer right a lot of us have the ability to kind of grow up through kind of like a paradigm shift you know so I I luckily you know started at the the tail end of java is the greatest thing for everything right so I started my education in 2005 my proper education didn't really get like detail and die tell you know polly.js is a Netflix live shut the front door poly JS I no longer work at Netflix I don't work at Netflix I've never worked I don't work I don't work at Netflix okay that's ridiculous that is ridiculous why would I ever do that and uh let's see and the one that annoys me most how can I run it using visual studio and not Visual Studio code oh that I mean that's just called sucks to suck it's clear to me they want to use.net guidelines and design patterns in react I have seen this happen many times developers who've had a hard time adapting to new technologies uh way of doing things so I'm not afraid of getting into the debate about why those are unusual patterns for react yeah I mean you're already setting yourself up for failure even regardless of the fact that you're about to do a gigantic grid using react and getting like half second move times like besides for that little fun fact you're about to hit like what's happening here this is just like sucks to suck you can't you can't stop that but in this case the CTO is backing his team which is normal he had known me for just two months and while he had let's see while he had been working with his team for many years I have uh to make a compromise and agree with their proposals okay whoa whoa like you could also say if we do this the project is probably doomed what you're asking for I just realized that react is not to Java or net developer friendly angular would have been a better choice in this case because of the similar design patterns and yet angular only sucks because of the angularjs deprecation I feel like to right now don't like it I don't like it I mean walking away is an option it really is uh roadblock number two there is never only react okay I like what's happening react is an unopinionated library that is like the most false thing that anyone has ever literally said in its lifetime react is single-handedly the most opinionated Library out there it it leaks its interface anytime you want to use JavaScript of any kind you have to wrap it in some react Library it is most certainly a framework and second off it is most certainly hyper opinionated it's just it's opinions of how crappy you can write code is unopinionated right you can write the world's shittiest code that's fine they're okay with that you can also write pretty nice code they're also okay with that but that's just a crazy take which means it doesn't have an opinion about how you implementing uh Implement cross-cutting concerns yeah that's why you have to use Redux and then you have to use react Redux and context definitely doesn't exist so it is your and your team's responsibility to develop an opinion about how to do it and especially what other libraries you want to use of course you will use third-party libraries because you don't want to reinvent the wheel of course you will you son of a and there are so many options uh for everything in react of course there is why wouldn't there why would there be for the proof of concept I already had an opinion about how we should handle most the cross-cutting concerns now they had to be revalidated with the new team members this is a minimal list of the topics to discuss which router should be used see isn't it fun to solve http in JavaScript don't you love that we get to do that like isn't that great it's not like there already isn't a thing that already exists called HTTP but instead you get to reinvent an entire routing system in react yay uh besides Redux oh what should we use for async actions trunk Saga uh we should use axios or the fetch browser API Redux forms formic or final form styled components oh gosh dear sweetness please Lord have mercy on this project make style SAS or plain CSS doesn't even list Tailwind uh the internationalization library everybody knows you use the one from Yahoo that keeps on going whatever it's called um so we spend another three weeks making those decisions I can feel you screaming at me come on man there's no way it takes three weeks to pick those libraries of course it does when you're doing whiteboard masturbation everything takes longer with whiteboard masturbation because here's the deal the first time you do whiteboard masturbation feels great and you're very excited about it and then all of a sudden you really start leaning into all these questions and it just takes longer and longer for you to achieve uh you know a closure and all of a sudden you have to get through six you have to do it six times I mean by the sixth time it takes a long time to achieve closure you know what I mean it takes a long time they're just adding everything in npm they're literally adding everything at npm they're actually just a mirror for npm you could actually use them as a mirror for everything that's possible in npm well welcome to Enterprise projects uh there are many decisions for each one you have to create decision criteria do research validate findings by creating a proof of concept presenting findings document everything in a decision log and keep libraries up to date it takes a crazy amount of time and it's not even fun I like that last part like when you describe such a process you have to end with it's not even fun really really you're telling me you you have to not only do the thing you then have to write out the thing you did and then you have to keep your libraries up to date with npm which is just a crazy town ah did they follow semper probably not uh and I'm not even considering the time that each developer spends on learning all those third-party libraries I never saw two react projects with the same dependencies project structure or guidelines this means the knowledge is not transferable from Project to project as it can be in the case of angular or View after those three weeks of not making any progress in implementing functional user Stories the CTO starts to worry really you know so I'm gonna I'm gonna make a judgment call right here I'm gonna make some judgment go I'm gonna make some judgment happening right here if you let teams of people make decisions nothing will happen real talk you let teams of people make decisions it won't work this is why at Netflix we do this thing called an informed Captain the captain takes consent or takes a dissent takes consent figures out what they want and makes a decision and it's up to the informed Captain to make the decision because you know what here's the real deal the moment you have like 18 people try to make a decision because here's the here's the big thing that I think a lot of people don't realize when it comes to the decision making in general is that there are usually two sides to almost every kind of decision you're generally making and in some sense each one of them have a lot of good associated with them and a lot of bad associated with him right and so each one has its own trade-offs and that's that right it's just it's just what happens uh I know I'm in the way of bad down here just deal with it but then there's there exists this like Spectrum where it looks kind of like this where you kind of have this dip right here and it kind of feels like bad stays about the same and so when you start compromising constantly you get into this thing that I like to call the no good Zone where you just fall into the pit of bad it's just bad that's all it is it's just constant bad and there's not very much good to it because you've conceded all the good on this side you can see that all the good on this side nobody's happy in the center they'll never be happy in the center uh I'm also exceptionally disappointed I didn't actually get to the point of making a dick so I'm a little bit upset I didn't draw a dick somehow I usually I just fall into drawing them uh but too bad and so this is kind of my general idea of what ends up happening when you let everyone make a decision I think this bottom line is probably incorrect it should probably look something like this right where it bottoms out right here where on this side there is some bad but maybe it's a different you choose the bad and you're okay with it on this side you choose the bad you're okay with it on this side you're forced into the bad and it's all of it right it just sucks I hate compromising like a total compromisation right you gotta just compromise on a couple items it's just it's just the worst roadblock number three react hooks get popular oh no oh no uh after nine months we have more than 50 pages created the developers notice the functional components are as good as class components and start using them so now the project no longer follows the original coding guidelines it's more like a personal choice for each developer and for me that's okay yeah I would say that that's pretty much okay I don't mind working with class components or functional components but honestly when you go into some my only one big critique I see with a lot of functional components is because you get one function to accomplish things who here has been in a project where there's a functional component that's literally 300 lines long of these just giant one use effect call followed by some other big call followed by some other big call and it just happens and you're just like I hate what I'm looking at I hate what's happening here and this is just the worst thing ever it's like yeah sure functional components are great until you have a 5 000 line function and it just sucks your life down the hole of course it's you it's everybody you know like that's the thing is when you're following a tutorial it looks incredible beautiful of course of course just just extract them all and make them into their own groups grow group them by something first off you get into just the worst world here which is when you when you reach a sufficient level of hooks it becomes impossible to find what you want and you don't even know it exists you spend all day perusing through files try to find the thing you need because all the names suck let's just face it there's like get Rose by you know get Rose by ID get rows by identifier get Rose by global identifier and you're just like what the looking at right and now you're just perusing through thing over and over and over again to find the thing you need because eventually you read that critical mass right have you ever been on a team with 50 people writing a multi-million line code base it sucks I've been there I it's just you just reinvent the wheel constantly that's all there is to it and so when I see this it's like yeah I totally get that we should all follow good practices we should always be abstracting things always doing the right stuff but the reality to the situation is that most people don't have time to do the right thing at all points or they don't perceive they have time and it's easier for them to make the shortcut now because the pay me now versus the pay me later trade-off just feels so good in the moment and it always feels like hell later on okay what's the solution the solution is that all programming sucks and if you come into it with the idea that people are going to write great code as a requirement for your library you should just realize that you having a library that's going to be fundamentally flawed that's all there is to it at least one components you can refactor things in a different file or different functions with classes it is very difficult I would argue it's very difficult the other way it's I would argue that they're both very difficult when you get to sufficient uh these because then you start doing these like Funk doors you start producing these functions you have to start passing in arguments you start getting into this really weird world that just totally sucks uh use felt only I like use felt thank you finite Singularity for the raid I'm not going to unfollow you because that would be bad but there you go all right let's keep on going I'm not saying that hooks are are somehow fundamentally worse than class components and I actually also don't think that class components are fundamentally worse than hooks I think they're literally the same thing just looked at from two different angles um all right anyways let's see react hooks is released and gets popular the team has mixed feelings some developers are offended by the suggestion that class confuses both people and machines it really truly doesn't confuse machines in fact often classes can be more optimized than hooks by far in fact it's it's it's it's obvious that they're more optimized than hooks it can it can one can claim it confuses people but I've been confused and I you know but this is react to drinking their own Kool-Aid I just don't buy it While others are enthusiastic about the new coding pattern all third-party libraries that we are using have added support for Hooks and it looks like the entire react World is going in that direction so what should we do should we deviate from the original coding guidelines and a third way of implementing uh components there's no way of going back and migrating existing pages and components to hooks yep the team is in favor of using Redux hooks because there is no need to use Redux connect and separate the uh let's see and separate the dump components are from the containers um what kind of sounds exciting I wanna I wanna I wanna get on some of those dumb containers this makes sense and we agree that from now on new pages and components will use hooks we'll leave the old ones as they are yeah that's a good compromise this happened I mean this is currently the Netflix code base there's plenty of class components there's plenty of hook components right there's like this in between all the time uh that's how we end up with three ways of doing things there is no consistency anymore see again I don't actually think that's the problem I think that's the sign of a long-lived project I mean who here has been in a long-lived project that just this happens to right type one in the chat if you've ever been in a project that's long-lived and this is what happens for me absolutely hands down even before react this happened we had view one and view two right one with one way and one with the other way right I mean of course this happened long before react this happens this happens for everybody it's just the faster you choose new ways of doing things is the faster a code base becomes inconsistent this is the entire Android code base yeah exactly right to make things even worse some developers start pushing the idea of not using Redux anymore but use State instead this means that we will disrupt the idea of having single Global state suspense is still experimental feature and I'm concerned about what will happen when it gets released yep like I said the faster your UI Library moves the more Legacy you'll have in your application it's fantastic roadblock number four development development is slowing down uh then we did a let's see then we did set up for continuous integration we uh the build took around uh three minutes including npm install but now after a year it takes around 15 minutes uh by the way I do want to say one quick thing I feel mostly bad about the person reading this because I truly am not convinced it's 100 their fault in the sense that uh uh you know like he has people who he's working with who are fighting for certain ways of doing things and then later on changing their mind to different things and now we have this like you're just gonna have a continuous battle going on and it's just like you gotta feel bad you know what I mean you gotta feel bad for this guy because I'm not convinced that he's done anything wrong other than he's just trying to play ball with a bunch of you know a bunch of different things all pushing for us you know for ways of ways of programming it totally sucks we also have to configure node.js to extend Ram to four gigabytes because two gigabytes was no longer enough you have to do the old the old Heap space trick old Heap space 496. uh this is not a big issue well what what by the way also what are you doing that requires four gigawatts I mean I've had to do this once and it was millions of rows of data being converted into a CSV I've never had to do it for anything else the old Max old space size huh gotta get that going uh what is concerning is that developers have started complaining that the builds take so much time that hot reloading stops working after 40 does oh my goodness oh my goodness we're gonna we're getting like the full fall apart here uh the hot reloading stops working after 45 to 60 Minutes of development and the restart takes more than five minutes especially those uh for those with Windows machines dear sweetness oh my goodness oh yeah I never even thought about all the C sharp people are also they're also doing they're also going to be developing on Windows that makes things so much more complicated uh Linux systems apparently are much faster for node.js sometimes they have to delete node modules entirely and download dependencies again because it simply won't work otherwise what can you expect when there are 1200 plus dependencies and node modules with a total of 600 megabytes in size what dude you're writing you're right like I mean let's just be real here you're writing a web application that displays some data have we jumped the shark in engineering yes we have for an Enterprise application everything is about cost let's say a developer has to restart six times a day and an hourly rate of 40 per hour wow that's a you're getting some cheap developers over there six times a day times five minutes is 240 days times this times 40 an hour times eight developer equals uh forty thousand dollars a year that is not a big enough a big amount uh for Enterprise but it makes a nice annual bonus for the project sponsors after all it's equal to a brand new Tesla Model 3. what's your build time costs our build time in JavaScript costs one Tesla three and one Tesla Model three I like you know what I we did this actually so actually at Netflix when Tesla first came out uh I did qualify everything I spent money on by how many Teslas I could buy we had one that we could buy 200 Teslas a year if they would just make one change that's a 200 Tesla idea can we get this 200 Tesla idea going right and it was just so great because they had to do something and then at one point at one point just to really really stick it home uh I started measuring how many Marco polos could we produce with this change because we had a change that was over a hundred million dollar a year fix and uh uh cost of Marco Polo uh let's see uh Netflix let's see if let's see is it is it on here is it public uh yeah it cost 200 million dollars and so we were just like that costs a half of a Marco Polo and so then I started picking all of our different Originals because I knew all of them and I was just like oh that one right there that One's Gonna Save Us 10 unbreakable Kimmy Schmidts right and so people were just like what the hell is happening here it was a lot of fun it was a lot of fun to start pointing out these savings um yeah I know I I it was fun it was a lot of fun for uh for an Enterprise application everything is about cost we already did that all right roadblock number five Redux Saga is uh slowly dying most developers disagree with me but I feel that the big part of the business uh logic inside Redux async actions let's see hold on but I feel that a big part of the business logic is inside Redux async actions most the time it's only place where you can do uh the validation API calls error handling trigger Redux mutations or trigger notification toaster if these are not considered a business Logic on the front-end applications what is well we use Redux Saga uh which was a poor decision because it adds unnecessary complexity thunk would have been good enough in Enterprise applications you have to upgrade and revalidate the dependencies once in a while it is a good practice because you want security updates performance improvements and a small incremental API changes that's actually really funny that they think there's performance improvements coming down with new versions of JavaScript I mean that's pretty good that's a pretty good take right there yeah it's a newer version it's probably faster right right I feel like there's a meme there I feel like there's that that Padme meme you know the Padme meme that it's just ah it's a new version of your library it's probably faster right right uh it looks like Redux Saga is being left behind the last update was more than one year ago and the number of GitHub issues is still increasing without anybody fixing them developers love react for three reasons Simplicity flexibility and ecosystem what ecosystem we already talked about this one it's funny I don't believe react has a good ecosystem for everything that needs to exist also has to exist with an adapter layer right you want charts JS you need react charts JS you want some other Library you need react Dash whatever that library is whereas when you go to svelte or you go to these other ones you just use charts JS so is there an ecosystem Force felt yes there is it's actually bigger because it's javascript's the ecosystem it's not some sort of react adapter that's required right you don't need a lot of these things and so uh reacts team enjoy experimenting with new ideas but this is killing the ecosystem they should be brave and take blame for it dang uh and indeed react is most uh is mostly backwards compatible but the ecosystem around react is not developers and third-party libraries will always use the latest features and Architectural patterns while old experiments will be left behind to die this should not be a problem for small and medium-sized projects because you can adapt much more easily but for big multi-year projects these experiments could be deal breakers yup absolutely it's already September 2020 and I decide to include redox Saga in this risk assessment results for the technical steering committee because 30 of the business logic was inside sagas I marked it as high risk that was when the CTO lost his temper and blamed me for making poor decisions when we started the project it was just the spark the uh the product manager needed he uses this as an opportunity to start questioning uh start asking questions like why do we spend so much time on upgrading libraries why is development slowing down why did the application become buggy and unstable damn I feel bad for this guy this feels so shitty you get a team that's wrongly fit for the problem or at least the library The Base Library you chose and based off the feedback of the CTO uh assuming that all of this story is 100 correct the way it is uh I'm at the beginning when he just concedes to all the points of the CTO I think there and then was the you know was a huge problem of his which is you gotta have a backbone you gotta fight for what's going to help you in the future if you don't fight for the future today the future is already gonna happen and it's gonna suck a whole bunch and so feels bad about that things escalated to management level I spent many hours looking for evidence to prove that we made the best decisions at the time not the way I want to spend my weekend several retrospective meetings later we are sailing through calm Waters again after all the project is almost done it's close to entering maintenance mode conclusion I love react the copium never stops I use it for all my personal projects and would love to recommend it for new work initiatives however after an unpleasant experience I had I will not encourage using it for Enterprise applications Not Again by the way I'm not alone in this feels you gotta feel you gotta feel you got a feel for that it feels bad for the guy I feel like truly an unfortunate situation um really fight for the right things you know what I mean if you knew your team was all about you know all these things like right like in that first three week period when he discovered that the team wanted everything to be effectively like C sharp probably should have just went for angular at that point just said hey this is truly the way to do it and also yeah um I I don't know if spending more the CTU should have gotten a couple too uh that's what a couple means 10x devs for 15 an hour uh each I know exactly the thing is is that this is truly what I like to refer to as 10x engineering and what I mean by that is that a few bad decisions can cause 10x the problems I truly believe the only 10x engineering possible which is that it just costs 10x the time to do things uh and that's it um react is only as bad as the programmer using it I disagree with that statement um anywho feels very you know feel bad for the guy great story though uh hopefully a good lesson to take away maybe you know uh I think he was already committed before he knew the team was going to be against him yeah but then he spent three weeks spiking it out right I feel like at that point you gotta you gotta try to make a call that's better for what you're working with you know um either way it's easy to be an arm armchair quarterback easy to be an armchair quarterback on a Monday morning right when the game's already been played what you should have done what you should have done then uh at the end of the day sounds like the guy tried his best but totally sucks okay totally sucks too many decision makers absolutely uh really careful with how many decision makers you make into a project because too many uh first off it's really hard to blame anybody can you really blame that guy when everybody was making decisions no you can't you you truly can't uh either way the name I don't use react again