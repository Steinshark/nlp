today we're going to be talking about context managers in Python and how those actually work and you've already encountered context managers many times when you use the with open file as F and then you go ahead and do your logic and one of the benefits of course of using with open as you may recall is that it automatically opens the file for us and whatever we do inside is great but one of the better features is that when we're done using the file it's going to automatically close the stream for us so we don't have to worry about any memory leaks or anything regarding the file that we've just opened and I'm going to be showing you how to create your own custom implementation of a context manager so to do this immediately we're going to go ahead and create a class called file and inside here we're going to create an initializer So Def in it and we're just going to take a name for the file just for an example and that's self.name is going to equal name and then down here we can get started with the context manager so one of the most important under methods for the context manager is the enter method and this tells us that we're entering into the file and this is where we should put all of the starter code whatever you want to happen when you're opening a file for example so here we can go ahead and say print F opening and we're going to format or if I can open the curly brackets I can't find that and we're going to insert self.name and I'm going to use the ellipses so that's going to create the logic that we want when we enter the file and one very common thing to do here is to return self so we can further use the file and we can access whatever functions are inside the file I'll show you later what this does when we actually open the file and then the second most important context manager done the method is the exit so if we go here and type in Dev exit you'll see that we're going to have a lot of parameters here and these are all for the exceptions so we have an exception type we have an exception value and an exception traceback and of course you can use those variables to try to handle whatever errors come up in case they do something that's funky inside the code but in general you just want to go ahead and insert your clean down code so whatever it takes to close the file that you just opened so here we're just going to go ahead and say F closing file and we're going to use self.name so here we're going to open the file with whatever code we want and here we're going to close the file with whatever code we want now that we've gone ahead and created the logic for our file we can go ahead and create the if name is equal to Main Check and here we can go ahead and say with file and we're going to give that file a name which is just going to be main.pi as file we're going to open it right so here we're actually going to be able to use the enter Dunder method and that's what's happening when you're using the with keyword and as soon as we're done using the logic inside here we're just going to go ahead and take the file and print whatever the name is we're just going to use that I'm not going to make this complicated so here we're going to open the file as file we're going to print the file name and then it's going to close and it's going to call the exit and just to show that the program is done we're going to go ahead and call done or print done and now when we go ahead and run this program in the console we should get these four print statements and the first one is that we're opening main.pi because as soon as we open it we can actually start to process it and whatever we return in the enter is going to be usable here as the file and of course this can be any name you want it's just an alias so here we can go ahead and say F if we want it can be a it can be any Alias you want to use that you're going to use inside the file then we go ahead and do whatever we want inside here and then of course we can print done and that's a very basic explanation on how you can use context managers in Python they are very useful if you want to make sure that your streams of data do get closed with your own custom implementations because again if you use something such as with open it's going to automatically use this enter and exit functionality so you don't have to implement it by yourself if you're opening a stream of data but if you want some more flexibility and you have your own class you can go ahead and use the entered on the method and the exit under method to make it compatible with the with keyword so that you can actually clean up your code and initialize your code more properly