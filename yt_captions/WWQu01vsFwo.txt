regular listeners will know I'm a bit of a fan of Apache Kafka I think it's a great system for storing data for processing it and just for shipping it between different parts of an organization at scale it's great if moving data from A to B is your job and so often it is and in software terms Kafka is a very mature project it's been around for over a decade it's got a large stable user base it's got a large stable committer base who are actively moving it forwards and it's a backbone piece of infrastructure for a lot of big companies so in one sense cfas arrived and I got really intrigued when I heard about a company that took a look at Apache Kafka and said let's keep the protocols the same but we'll do a complete rewrite of the implementation in C++ that's a bold move for any company why what's their motivation what's so important that you want to take on a project of that size and maturity and what are you actually rewriting are you rewriting the entire stack or just parts of it are you being completely compatible or are you deciding to make tasteful breaking changes and most of all what do you think you can do differently this time around now the whole industry is older and wiser lots of questions to ask so today we're talking to Christina Lynn of red panda red panda that upstart company taking on an Apache staple and I've seen in the wild I've seen people using a mixture of Kafka and Reed panda in their Tech teams so clearly red panda have added something to the software world let's see what they've got to add the conversation I'm your host Chris Jenkins this is developer voices and today's voice is Christina [Music] Lynn [Music] Christina Lynn thanks for joining us hi Chris how are you I'm very well I'm glad to see you here how are you doing H it's my pleasure to be here I'm doing I'm doing great great I've got I've got many questions for you because we share um we kind of share a background you are currently uh head of developer relations for a red P for red panda yes I was heavily into developer relations for a CFA related company so on two sides of the same wall right I love that I love that I guess we can have really good conversation then yeah yeah yeah so let's start off with with the big issue which is okay red panda Kafka similar space but why do you even want to be in this space um yeah I can kind of talk a little bit about it from my perspective um as my career evolved so I was doing a lot of Java programming back in the days right so and then I started a a um position in a insurance company and at the time we're doing a lot of like SOA and a lot of work and you know when it's SOA it's a lot of like system Integrations and ser um Services Integrations and that is when I get into well we started using a lot of like IBM con like IBM Solutions but it becomes very clumsy so and that's when I started doing a lot of like apachi camo so that's how I get into the demo space so I was doing a lot of data integration and at the time I also was working for J boss and that was why I got into redhead doing a lot of J boss work plus I got to do a lot of my like very like lovely camo project as well with the camo crew and all that so it was great a lot of system Integrations and I kind of see why like um a lot of um the need of you know having data integrated and we were using messaging Q at the back right for for SOA Integrations and all that so messaging Q was I was heavily using messaging cues from IBM mq to um you know uh active mqs and Reb mqs and all that kind of stuff and that fits in naturally when CFA came out we were like awesome this is a a lot faster um you know streaming services for us to kind of quickly get data in and out like it was able we get a lot get a lot of I throughputs for that so we love that and so that's why I kind of work and caml was kind of introducing Kafka as part of as ecosystem so that's why I got into Kafka and kind of um using that as the backbone for system Integrations to pass through to build that you know microservices backbones and stuff like that and then um I when I was looking for other Solutions and I was kind of looking into quarcus and we were kind of introducing it was kind of at the time where we're using quarcus and I saw this like really tiny um container because cauas was um introducing this like really tiny container so people doesn't have to spin up the whole like you know backand Services you can developer can quickly run things and I saw this red panda um solution I was like what is this thing why is it because at the time kka still needs you know zookeepers and you know all that you know Brokers and all that I was like why do I need why why do I don't need all that kind of stuff to actually start developing so that's why I started looking into red panda and that's why I got into this space of you know Kaa and rependa I kind of I hope that answers your question but that's how my how I learn about the whole data thing and really like the data aspect of things so I'm slowly getting back into the data engineerings and learned how data Engineers were using um you know the streaming platforms and I think there's a lot of potentials for future um development as well so that's kind of how I got in that yeah yeah that's a St the shape of a story I've heard a lot it starts with desperately wanting to ship data between different systems and then Grows Right yep and often as much as we talk about real-time data it's it's just sheer the effort of connecting data from A to B yes is the killer use case yes so from what I know about red panda like you talk about smaller um uh container sizes that's one of their big pictures right compared to Apache CFA red panda is kind of going chasing the size uh performance deployment ease umit I think when when repa first got out it was very well known for its performance and theze of its container and how much um like resource it needs to adopt right so I think that is I think that's why people start to adopt red pandai just because of the simplicities and the size of it needs to execute the similar stuff right so that's kind of how I see it and how people first got into it but it's um it's a curious Road they've taken to get there to do okay to look at something like Kfar and say I'm assuming this is how it originated you look at something like kafker and you say I would like this to be smaller and faster I'll rewrite the whole thing in C++ right I think well this question should go directly to our CEO our founder because he actually wrote the entire project but when I ask him about this question because I think he was very well into the low latency um streaming RPC at the time when he was working for um Concord and he was doing a lot of like low latency streaming development at the time so for him I think when he was starting to develop this application he was facing a lot of unpredictabilities and you know a lot of the um the things when when they have higher traffic throughputs things crash or when you get a machine that's able to handle the load it is super expensive so I think as a developer he's trying to figure out a way to kind of become more efficient on processing the data and getting data streamed so that's why I think he started to look into AI kfka because he was solving that problem and then he was able to find a way to kind of develop things and I think he didn't first start with C++ um actually asking like why did you choose C++ and he was like no actually I started with rust okay right and then I think at the time when he was developing things the rust wasn't mature enough I guess it is now but at the time it wasn't so he has to go back to his favorite C++ he was developing a lot of C++ program already and I think it was one of the um the framework in C++ actually solve a lot of problems um um in C++ that actually solve a lot of um problems for for for us right it's the C sear framework yeah sear framework is a very unique one because it allows um a lot of the par asynchronous programming inside your computer because if you think about your computer your computer is um is consists of CPU and CPU is split into many cores right yeah and and how a lot of the um a lot of the programs were developed they were developed in a where that you know a lot of things were taken um you were kind of use op operating system to kind of um make things a lot more flexible so it lose a lot of the control over how the CPU works and how the memory works right and I think Kafka was developed in um Java I think Java is a great program I am a Java developer for okay two decades now um I love Java and I think it's a great program but I still think there's a benefit of different tools for different um for different purpose and I think in terms of controlling the Hardwares C+ C++ is a better language for that because of how you can kind of use um utilize course so instead of you know remaining um relying all the me memory management um for jvms um relying on your operating system to do contact switching um for your CPUs um the sear framework allows us to control everything so you know so we can we can kind of allocate the amount of memory per core so this core will control this part of a memory and that fits great with the CFA nature because you know remember how CA works it has a lot of petitions and then you're writing logs in into each partitions so basically we can assign multiple partitions to a single core and this core will just take care of all the things in this petition and this would avoid contact switching because um I think a lot of people has this misunderstanding of what is causing the latencies of writing data into my system right A lot of people think the problem was the disk but it is not anymore because we're not in a very old dis space where we have one single like you know like little pin head we're trying to kind of write data into yeah we're no longer spinning a magnetic D exactly we're not spending anymore we're working working with um ssds with mvme architectures meaning that I can write multiple times into the disk um and having them um having all this data allocated in our disk in very different place because how the file structure works as you know the XF xfs sorry about my pronunciation is allows you to parallely grab your data quickly from your your disk and then put it back to the memory so in terms of that your dis is no longer the problem your CPU time is the problem and being able to utilize CPU allows us to quickly grab the data and provide it to the users and and vice versa doing the same thing to quickly put it back into the storage and that's why Mak R Panda super fast with that sear and I think Alex saw that and that's why he implementing everything with the sear framework and that's why it's the secret behind why repen I super fast in terms of you know performances and um you know the lower latencies U low tail latencies and all that kind of stuff okay what what kind of year are we talking about for this this whole I think it was three four years ago maybe really that recently yeah okay okay I know some people will be disappointed that you didn't stick with rust three or four years ago but um I mean and I think it was just at the time maybe a little bit earlier I don't I didn't exactly know when Alex want was implementing Ross maybe it's a little bit earlier but uh yeah this is from what I know okay fair enough then then there's the question of like okay if you decided you're going to rewrite CFA do you know why it's decided to stick to the exact protocol because you can as I understand it you can drop in red panda um and largely have your writers and readers your producer producers and consumers transparently work with either yeah it's just because I think um the number of users we don't want to because I think from ring zero which is the broker side and then you've got the client side right um so I think when Alex wants to do it he wants to kind of also support that ecosystem for the CFA users so that's why we choose to adapt the kfka apis instead of inventing our own so we can provide that faster ring zero experience but also providing that for the existing kfka users so that's something that we try to solve it's similar I always put that as analogy of cars right car is a very good thing where can hop on it driving it and then you can get to the places but how you build a car is different so over the times we have really nice um diesel cars petrol cars and then now we have electronic cars I think it's just how you build the cars a little bit different but the way you drive it we wanted to we want the user to have the same experiences and kind of how things are built but internally how it's done is it is up to the um the car manufacturer right so no matter how they implement it you've got pretty much the same user interface on the car right exactly Yes except I can never find where the heated mirrors are online always in the wrong place yes okay I I can see I can see that the that you want to keep the same protocol to like reach the same user space right exactly yes what where do you draw the lines around that like how much of wider CFA do you want to rewrite in C++ is it just broker are you targeting Kafka connect next for instance what what's what's the scope of the project um currently I think what we're going towards is more on the again the ring zero experience right so not not actually the connector itself but the actual broker we wanted to kind of make because rependa is a very small company compared to the large community out there for Kafka and even K is a multi-million dollar company where they have a lot of money to throw around but you know R is very small so we want to make sure that we invest things in the right place so we want to make sure that we give people the best experience um from we can how we can kind of control so we focus on the ring zero experience on that so we don't expect to expand a lot outside of the connectors we expect to work with the connectors um we work with the community um so for example frco um which is the go library for connecting to Kafka was developed by one of our Engineers he was kind of donating to the community and you know kind of show people you know how this is done and we we were talking to them we're we're try to we we try not to be the enemy of of the community we try to be friends because we all work in the same um we're trying to make this space better right so giving people more choices this is what I think we should be and how the community should work all together so I think we should um so so to answer your questions I think for us is more focusing on the broker itself so things on top of that I think we're you know we added the um the the reped penda console which allows us to kind of have a very nice gooey interface um for Developers for them to see what's going on ins I know there's a lot of like you know um projects out there that can do the same thing but I think it's for us just to kind make it more more smooth transition from you know people to see what's going on and maybe use that on top of even kava well and all that kind of stuff that's where I think diplomatically I would say there's plenty of room for more development in the CFA user interface yeah I think you know like you know different opinion Sparks um different ideas and I think that's a good energy to the community um not just you know if if you all have people speaking the same thing then you're not going to have Innovations yeah do you know it makes it reminds me I was um at another company talking to some people that worked there uh last year and they used kafar in production um but all their developers locally were using red panda that's the first time I heard about red panda and I want to ask you why do you think they would have that divide you know I think we're seeing the same thing like from me from the community side I I see the same thing I see a lot of developers were kind of using red panda internally as a development and they have like Kafka because their operation staff kind of decided on using Kafka I think it's just the easiness of how to use Rena how to start it um I think you know adopting Kafka from as a beginner I don't think it's the most easiest thing first you have to understand Java and a lot of the the people I talk to right now are uh python developers go developers rust developers I don't for them like Java is intimidating um and then to download the package and then at the time you you still have to start the Zookeeper and then you start the you know the the broker it takes for them a lot of they just it's harder to get around so for them to start repand I one single binary they start it up and they can start working I think for them it's easier and then the footprint is a lot smaller um compared to what it's taking up so I think that's one they want to do even quaas well I I think I mentioned that the first time I heard about is quaas and when they were doing the the death Suite it was when they um the death Suite is a way that um for developers to not not care about you know setting up the environment that need to work on it would just work for them and you know the death suets can has reped pandai in there speaking that because they when I I actually talk to the people that adopted they say it's smaller in footprint it's easier kind of to get it started so I think that's why and I was working I was working on a um a project um a test container I don't know I don't know if you heard about test containers but I think they're um a little bit pretty well used in Spring brute Community right because they were using that for you know testing and local development as well um they have I I've seen their download rate for um compared to Kafka and repanda I think repanda is pretty good um in terms of usage people can just download it and use that as their inter internal development um platform so they don't have to get all that things started so I think that also contribute to that do you I mean that I got to push you a bit on that cuz uh that that landscape must be changing a bit where kafka's moving away from having a separate consensus protocol of Zookeeper to it being internal meanwhile you've got red panda I mean I'm guessing if you want to do something really interesting with it you end up wanting to bring in Kafka connect or maybe Kafka streams do you think that single binary argument is still valid or is it eroding I think it's still valid right I mean for me I so the the developers I talked to to um doesn't really use the connect that much um they are using python to develop um and connect to um K car so I don't see that happening um and C car streams um CA stream this is just an API you put on top of the broker whatever broker that you're using so I don't think that's going to be a determined issue for using kka at all right and Kafka connect and and since I'm am I am a camo developer um a very longtime camo developer Vel opers um I write my own camo components so for me that is independent whatever I put underneath the hood doesn't really matter I'm writing the integration on the top so I for me I don't think that's a big issue for for that and especially now I don't I I'm starting Le to hear less and less about kavka streams I think more people are going to Flink um yeah there been a lot of push yeah for the past two years it's all about Flink every every time when I do a Flink course you know people just come in and they want to hear about Flink right so um I think it's the push of Flink that kind of um added benefit to us because you're kind of free from you know embedding a particular solution for that streaming streaming services right so um I don't think that's a big problem for us so from that point of view presumably you're looking at Flink as a as a good thing competitively yeah fre you up from having to compete with like higher level infrastructure stuff exactly and think I think see that yeah because and I think a lot of people were adopting Flink because the SQL nature and then I think ksql was introduced it was introd it was a good idea but I don't think it was there were problems with KY cor right so um I think you know fln kind of solves that extra layers problem for yeah GNA try and keep my knowledge in this space and my bias is out of it but I I wanted ksql to succeed more than it seems to have done it's just say that I liked it a lot I would have liked to have seen it continue to a glorious future that I don't think is going to happen now sadly but this this raises the question of how are you seeing people use red panda in I mean a lot of python developers you can tell us a bit about oaml when you talk to users what are they doing with all this um So currently um our major customer base are more um performance oriented that's the beginning like if you look into most of our customer base right now um I'm seeing a lot of users that they were they were they were having problems with CFA basically with the performances and the number of machines they need to start up and a lot of management problems and I think was the past past two or three years I think building up all that so they were kind of switching to rep Pena that's the most of the use use case I see for now but now I'm starting to see a lot more since we added the um the byoc um offering from from cloud so I think we kind of convert a lot of the people that wanted to have a quick cluster running on their own cloud account you know we kind of have that and so I'm starting to see a lot more less experienced C before it was all very experienced like kka users so we got really hard question to solve like how do I get like you know number of performances like latency numbers you know up for for Less Hardware usage and all that so that was a lot of problems we had to solve but now we're seeing a lot more you know like in the mid mid Journey um range of people where they're trying to get into CFA but they know how to do it and kind of we help them to do all that kind of stuff okay so you're seeing more people just casually moving over from be starting their Journey still with Kafka um I think most of them when they come to us they would know a little bit about Kafka well i' see one or two exceptions but they're very little right compared to the majority of the people I see they're still they still know Kafka but they want to experiment with other things so I think they're just looking for the second opinion and you know different options okay for these typ of users my loyalty here is to the ideas and the architectures rather than specific implementation so I've got no skin in the game on that one okay so when you said you you have a go client this is another thing I wanted to look into so you said people are using people are intimidated by Java but this is C++ I can't believe the general programmer is less or more intimidated by C++ than Java you've got go as a main client what what's how are people interacting with red panda language-wise and how are you supporting that what development are you doing in that World um for us I think we kind of just that go France go project was kind of donated as a open source project right so anybody wants to use that even connecting it to Kafka we're happy to do so right so that's something that we do um but our main focus are still in the in the broker space where we're developing a lot of like Auto rebalancing leader leadership rebalancing and all that kind of stuff and then we are also I don't know we're also working on something called wasum I don't know if you heard about our wasm project web assembly yeah yes um yeah our web assembly project is something that we're working on so we're trying to CU we' seen this thing where people are building you know very simple data pipelines where they're only doing very simple transformation stuff or validations or very simple you know data conversion Val masking and it needs to have a lot of data ping pong because you need to get it out um from a socket and then put it back in right so this is something that people do and we were thinking if we can have this in the broker that the broker do all the processing so before it just it reads out from the memory does its thing and then put it back in the memory so there's no huge uh roundtrip between the networks and all that that would make things a lot faster so can we have this buil into the broker and without you know having external things going on and the idea of bringing bringing web assembly was because web web assembly is a very flexible engine we can use that to compile different type of languages like you know rust with go and with Java with python so developers can freely choose whatever language they want to use for this very simple you know um transformation pipelines and put that in the broker so I think externally the Flink um services will be outside of of your broker which is doing a lot of like traditional complex event processing and a lot of like time window based processing internally with these you know very simple stateless you know Transformations everything can be done in the broker level so you don't have to do a lot of you know um data trans data transfer in the networks and we see a lot of networking costs occurred um for you know people using a lot of petitions you can see replication all around so if we can kind of eliminate that that would help a lot so I could see that for like this is just splitting a comma separ separated string into a list you should you would want to do that in a more lightweight way than Flink correct yes exactly L yeah I can see I can see that makes sense are you in any way enforcing a boundary for what you consider simple or complex there um yes um so we do so we think that you know if it's something that you need to kind of hold it state that is a complex one so for things that you don't need to um kind of um you don't have to uh keep it State then it's a simple stuff right um because the reason because is when we deploy the um the the data pipeline into the broker there's several brokers in your cluster so repa needs to kind of copy all your pipelines across the broker in order to get all things done inside its own little machine right so in so we can't so keeping the state of where the pipeline is is is going to be a very um huge workload and you kind of have to know all the status like all the other worker status so we don't want to do that we want to make sure everything is simple and easy so we want to sure so if it's stateless it's simple um then it is but but again like the the reason we're doing that is because there's a lot of um people they're not utilizing their entire Hardware but if you already have a very busy broker um that's taking up 100% of your CPU time this is probably not a good idea so you probably need a couple of different notes for that so it all depending on situation but situations but I think it's going to eliminate a lot of like U Network cost in late and season all that yeah I can see provided it's contained that's going to um put you always want to separate storage and comp but once you've separated them you want them to be really close exactly right um would be sitting right next to each other but still separate exactly you want to like the fastest time R time of that so okay I I could happily dive into the guts of how that works in implementing the wasm uh runtime engine it it's still um working progress for us right now we're still developing it currently we got um the go engine running for wasm but we're still working on the um the python and Java part of the MBE the python because majority of our users are python users um but then we still have Java users we want to do but I think that is a something that we're working on simply because um the way that they handle memory is a little bit free um compar freely compared to whates um so how we write the assembly engine to make it work for internally with the C++ with our you know thread core architecture it needs time we need time time to actually get that thing work more efficiently we can just plug that in but that's that's not that is going to causes um performance issues we don't want to do that so we want to make sure that we can of see we can manage all this the the memory usage and like how we treat all the core how was used in inside your computer that's something that we working on you've got that classic sandboxing problem when you let users execute arbitrary code on your machine you've got arbitrary problems right yes that's right yeah okay so so that's something that we're working on and we're also working other things like you know also not just the um where the the broker part but also the cloud services part uh we're trying to launch our um serous um Solutions which is like something for developers so they can kind of spin up spin up spin up a a topic where if they wanted to do that so with the more to to actually get more um exposure to developers because now they they most of them were just running in locally but we wanted to have that you know presence in the cloud as well other than byc I think byc kind of does a better for us but I think we want to um included in that footprint as well that connects to something else I saw about red panda because if you're doing bring your own cloud right I want to know what you if I bring my own cloud what you offer on that and also there's something about you using native object storage in red panda which I think is related here I wanted to ask you about okay um yeah that would be good um because I was actually I I talk about this in current um 20 uh this year I inan current BC and actually some of the um people that was managing the confence CL came to me and said you know this is an awesome idea and they were the back engineers and like they they were like we should do that I was like no don't but um yeah but I think it was the way that we did it is um we don't want it to be direct management we don't want like it's it's a you know a user or from red panda to go directly into the cloud because it's not safe and we don't want it to be very manual in order to because that's going to cost us a lot so we wanted to be automated safe so the way we did it is we had an agent which is a very small VM that gets deployed into the um the uh the customer's Cloud so this enclosure is customer Cloud we don't have access to it they the customer needs to install the agent in their cloud and we'll be controlling everything from outside but we don't go directly into the cloud we have the agent to pull requests from our controller plane and then does things on their does all aut things on the cloud so everything is isolated and with this particular data plan it when even when things goes wrong with the control ples or whatever we want to do with with repanda your things still stay intact because you actually have your own little ecosystem of your own cluster you're working with the cluster you're working with everything and then um and then the controller pre is just kind of doing all the update and all the patchings you know all that kind of stuff for you so basically we just issue a bunch of commands and an agent just pulls it it just does that on your own like cloud and just kind of fix things for you there okay so something goes wrong with that link you can't change anything but nothing stops running yeah everything running yeah I can totally see that argument yeah and I think for people what they like about it most is um working inside their VPC because because that VPC is a cost right for for the traffic goes in and out so I think what people askes about is like oh I can put that in my VPC yeah that makes sense so again there seems to be uh kind of cultural focus on the developer experience side is that something is that something you're deliberately focusing on as kind of a competitive advantage or is it just when you're smaller that's easier to do I think we put a lot of effort in terms of user experiences there's a user experience group internally inside our company where we think about user experience a lot right so when we push out a a um a new feature we want to think about how how easy is that for from a users's perspective how can I make that easy for developers we constantly make changes um I think from what you're saying if the company is smaller is easier yes of course it's always easier because you don't have to go through 300 meetings in order to get one feature change right right yeah so definitely yes that's going to contribute to it but I think it's the way that we F we we design our product I think it's kind of make it so for instance the U the data rebalancing that that can be done um automatically so repanda will automatically detects what's going on inside each partitions if it's gets um too busy within one node will shift things around automatically for you without you knowing tell me more about that I didn't know about that so yeah of course so we do like automat data rebalancing because the way that we do things um it's very different so so Kafka claims that they do K raft but K raft only applies to the controller side of the story so where it used to do things in Zookeeper they move it to Kraft but underneath the hood KRA is doing whatever zookeeper was doing and then you still got your petition your isrs and all that doing all the replications and all that um but red panda underneath the hood itself we don't have a actual controller of things all the petitions forms a a raft ring so you can see a lot of rings inside red panda so there's no one single you know bottleneck where if it breaks everything breaks right so it doesn't have that bottleneck so all the petitions elic on leader leader and then you know just figure things out so that's how like how independent each one of the um the petition works so in terms of that so we get a better you know fail over rate and all that kind of stuff right other than that I think we also have a lot better Communications between like each noes so we know we prioritize each petitions like hey if your petition like if in this Noe has too much petition we automatically you know kind of figure out which one is the less um busier node and will kind of rebalance everything so you rebalance who is currently managing that partition right dynamically yes okay and is that transparent to the user do I see I don't see that on the consumer producer yeah I I you don't see that everything is done internally within the broker itself and we just tell the consumer hey the leader has changed and then this is where you gonna get it and all that kind of stuff it's very similar to thing but I think Kafka is a little unique in that terms because kfka client itself is very smart kka client itself does a lot of you know you know determining where do I go and how can how sticky am I am and kind of figure it out the broker itself is is Dumber compared to the messaging queue we used to have right it's it's it just does all the I know it's doing a lot but it's it's just doing the replication all that so I think a lot of it becomes the the job of the um the client so the client needs to know a lot in orderers to kind of speak to that so we have to also obey that protocol from the client so we can kind of fit into all different versions of that of course we have a limit right so some of the less efficient um consumers you know lgorithm will probably just not do that anymore we'll just say we only support to this versions of client and it's it's it's good for the users as well because it's more efficient so we'll do that so we'll we kind of work with that um client code in order to get better balancing for both consumers leaders and data partitioning okay surely that's going to once you switch the partition leader some point that's got to trigger consumer group rebalance the client does see though yes yes so we're prior the the cause and the management of it is automatic but the client the client will will the programmer doesn't have to change anything but the client will do some work in cooperation with that rebalance yes yes and then we kind of we we kind of Honor that right so you know like the the sticky corporate um way of doing things we pref we prefer to kind of stick to where it was before so there's less movement and all that would we do would do the same so that's why we have priorities right so we'll shift the one that has less um consumers and you kind of see which one is we them in the I can kind of send you a link of like how we prioritize it but there's a lot of like Logics you need to kind of figure out like you know yeah the CPU the bandwidth and then how many consumers and like all that and then how how fast is like how and then also I Ops and all that and it becomes a determined factor and then we can kind of rebalance everything do you do things like watch how long that problem lasts before you do something about it yes there's a timeout thing as well okay yeah it's interesting that makes me think so one the the way consumer group rebalancing used to work was stop the world rebalance everyone's start again right and it wasn't too long ago that they changed that to only if you're being reassigned you have to stop your work and give up and come back which I'm assuming you do but that raises the question which version of the CFA protocol you actually following and how far back do you go yeah I currently I can't really tell I I don't have a vivid number like where we go but I think we we we actually try to match the most current one actually we bring up some of I think from I've heard that from one of engineer he actually um started talking to the um like the client Community like talking about ideas of you know how how how can it be more efficient from the client side you order to have that communication so he actually does work with the the client groups to actually get that that thing working as well so yeah but which so you're tracking the latest version of the CFA protocol are you say yes we do yes you must have a fairly large team just dedicated to doing that that's enough work in itself right uh I don't know exactly how many people were there but I know there's not too many okay I mean how large is the company just give me an idea from that size um I think we're about 200ish 200 okay yeah in Silicon Valley size I don't know how many exactly because because we're still growing we're still hiring and all that so I don't think we have a lot of people right now okay so if you're growing where are you going with this you've mentioned yeah yes and then serus of course in order in order to support all the customers so we also have managed Kafka of course that's already there manag rependa Services that's already there byoc and then we have now doing on servus and then wasm and then we're also working on this um so we already have tier storage which is I think um kfka doesn't have it but conone already has it which is kind of offload the um the ret the the non retain data offloaded to the um the object store right so keep keep the hot stuff in SSD and the rest you push to S3 or whatever yeah EX yes so we do that and then we also added something called um Re remote replica which is you can rehydrate your um an entire different cluster so you have your operational cluster here I think a lot of the data Engineers loves that you know that implementation was they can still have the operational side of the the house of working with the current clusters but when they're trying to you know do you know backfill all the the jobs that they need to run say say they have to kind of go back to three days ago four days ago to run a long large and process a large streaming data what they can do is they can have a separate cluster which is rehydrated with historical data and they can kind of use that as as a part where they can kind of use that to run their their process and their jobs there so it's called re- remote replica which is kind of use reusing that you know F3 Object Store that we have to store historical data as well all right so it's not quite the same as something like cluster linking uh you join one cluster to another it's are you more like reading the same object storage for a different cluster exactly yeah so that that's more for dat data I think data Engineers love use that a lot more for for example for the microservices user this is a lot less because I think for them is this is just a traffic control centers where they can relay their messages but for um for backend you know data Engineers they need a lot of historical data that wasn't store somewhere or that wasn't stored into databases or that is in data Lake but it's actually easier to kind of see the um see the flow of how the data was coming in the logic of data and like the historical like timestamps of it that they like to see that that way so they'll process it from there I'm curious about that why would you not just connect to the create a new consumer going further back on the existing cluster because that's going to sacrifice the performance of your current running Brokers right you can also do that but then you're GNA rehydrate a lot of the data from your historical data into your current broker so you're sacrificing part of your broker performances so in once you're in the teered storage world you're going to mess up that hot cash section yeah exactly right and it's going to that' be an issue yeah yeah okay and and then the huge I think what I see in the company right now is a is a split between you know operational side of the house and then the analytic side of the house I see a lot of you know I came from the operational side transactional side where you know everybody's doing microservices you know it's everything's containerized and you got micro you got Kafka underneath the hood and all that but then same time I see the new side of the house where analytics where they were just picking up the streaming side of the story they were starting to learn Kafka and they used to use a lot of spark they used a lot of like map ruce you know that kind of thing and they don't they're starting to kind of get the data they're starting to get real- time data because now for machine learning they have they need to kind of produce a lot of data sets and the data sets are the the the way the data science request them were kind of random I don't know like depends on how they implement it but sometimes they have to go back way back for a lot of data and they need that and also they want to have like real- time machine learning I think a lot of them were adopting that realtime machine learning so they're trying to get that thing hooked up and I think from this side there's a huge um Gap compared to where operational people were so full like so confident like they know how to use C cing already but here I think they're still doing that yeah yeah you kind of want to isolate yourself when you're massively experimenting right right exactly yeah I can see that okay and how about you where where as head of devil for red panda where are you taking things into the future personally so I'm still so I you know when when you say devil for a startup company I think most of the star company doesn't know what Dev real is so I think I'm doing a lot of technical marketing instead of doing a lot of their real stuff because there's just this huge gap of um things that needs to be filled um in order to you know do a lot of before I can go off and you know start speaking because once I do that nobody's creating content and you actually need people creating um technical content that speaks to the developers and the people that knows the technical stuff stuff instead of like really fuffy you know marketing messages right so yeah I'm doing a lot more of that and I want to grow the um educational side of the story because I feel like there's not enough educational content for Rena for instance teaching people how thical works and teaching people how how does that inte how does that what does that mean in order to maintain a repa cluster and I wanted to kind of make that easier for and I think there's not a lot enough course there's a lot of course for job developers already for using Kafka but not enough for other languages so I want to like build on top of that so maybe build a better like you know educational content for for my users as well yeah yeah I can totally see that and agree with it but that spreads to you very thin yes we do have two people like in our team but it's still this we still need a lot of things to do yeah there's always more education to do okay final question and this is really like the two final questions if I want to go and use it there are two things I know need to know the first is what's the license for red panda so it's uh it's actually uh you can use it if you don't use if you don't use it production so okay H what is it I forgot the name like BS BSL um BDL B BDL BS I forgot like sorry I forget which yeah I can always forgot about the the terms but yes but I think it's it it is free for use if you use for development and um if you using it for production that's when you kind of needed to reach out to us and there are Community features you can use um freely in production there were just a few um Enterprise paid features that you need to reach out to us in order to kind of get it started so for instance the auto balancing part where I mentioned um and then the U the tier storage the Re remote replica which is the part you kind of have to you know um work with the license uh RI and up Custer okay okay and if I want to get started what do I do next um well you what you need to do is um go to our website and then there's a getting started with red penda that's the easiest PA and then we also have a university that teaches you how to get started with red penda oh very nice very uh do you get a plaque yes you get a plaque certification well Dean Lyn I will uh leave you to go off and write more courses at that point thank you very much for talking to us thank you Christina thank you very much I'm going to go and check out red panda I'm going to kick the tires and see how similar it is in practice and one thing I'm definitely going to check out is the gooey I hear Whispers on the grap Vine that that's how certain people from the Kafka world have got hooked in so let's see what it's like if you want to check it out as always I'll put links in the show notes if you've enjoyed this episode as always please do take the time to like it and share it and rate it and whatever and click subscribe if you haven't already to catch next week's episode but until next week's episode I've been your host Chris Jenkins this has been developer voices with Christina Lynn thanks for [Music] listening