it's 2023 and you're watching the code report serverless is the biggest lie in the history of computers when you go serverless you're still using a server it's just not yours you'll compute nothing and be happy Amazon Prime video just dropped a shocking article explaining how they saved 90 on their Amazon web services to be fair about this article I have a video of me watching the article right or reading through the article like what they were doing went from a crazy ass solution to a still crazy but less crazy ass solution and here's the deal it still was serverless in the end just saying is Bill by switching from serverless microservices to an Old-Fashioned monolith architecture that's great because it'll save a ton of money but bad news for Amazon because it just lost a great Revenue Source the article is sending shockwaves through Tech right now because one of the main claims of the serverless vision is that you can scale infrastructure more efficiently which in theory should cost less money I really appreciate Amazon so one thing I think that uh one thing you know me and Dax were having well I wouldn't call it a conversation I tried to have a conversation and he just memeed on me over and over again Dax just letting you know Dax feelings a little hurt Dax okay just saying I was trying to be real here the one problem I see about uh serverless is that you you need the more serverlessly things you have this more edgy thing you're doing these Edge run times these edging Edge Lords okay is that you need other services that also work well with the edge you know what I mean it's it's really hard to have logging that you're not piping out to somewhere right you have to have you have to have uh your data storage is now Edge based right the all these things right you're you're throwing on clerk you're throwing on crazy databases you're throwing on all this stuff by the way I really do love torso but you know you have to you have to add a whole extra layer of things you need to use so serverless isn't just the cost of the servers it's the cost of the servers and all the technology required around the servers and I think that's a real that's a real thing and I I you know I know this might be a controversial take but I'm not sure if the genius of Tom could even solve that just saying I'm not sure if Jay diesel I don't know if it could I don't know if it's I I don't know I don't know okay I wanna runs transparency here because they're one of the original pioneers of serverless with Lambda functions and nowadays you have tons of platforms offering serverless services like Purcell and netlify which are actually just using and reselling AWS Services behind the scenes there's almost an entire industry I cannot believe there is an entire cottage industry that literally is just AWS just less of AWS oh is that AWS it's just nicer Amazon has never built a nice looking website in their entire lifetime I am not sure how you can have a company that can make hundreds of billions of dollars per quarter and still be unable to make a website that doesn't look like a high school project what is this what the hell is this how did you how did you be successful it just goes to show I don't think we understand why people get successful on the internet okay maybe just maybe we're all wrong behind the scenes there's almost an entire industry of startups that make AWS easier to use including open source projects like the serverless framework and SST but not everyone oh shout out to Dax let's go Dax SSD drinking the Kool-Aid like dhh the creator of Ruby on Rails and Basecamp [Laughter] oh okay this guy thinks that typing without this guy thinks programming without types is vastly Superior in every way okay dhh has been advocating for Majestic monoliths for the last decade and took his entire company off the cloud after they spent over three million dollars in one year now they just run their own server I do agree I think that uh monoliths are always going to be better if you can self-tune your monolith if you can self-tune and you can self-host and you can do or self-host you you run on AWS if you can do those things you will do you will in the end save money but you have to have a really large amount of users to make it worth spending engineering effort right it's a trade-off it's crazy that people are don't see this as just a simple trade-off there's an equation that exists somewhere out there that's like you got no users you're like every other website okay you got some users you could either manage your own website or manage everything which costs a ton or you could let serverless do it and you can just spend a little right burst a lot of successful startups like Dropbox end up leaving the cloud once they get big enough however I personally use serverless for my projects and it's an absolute game changer for getting things done quickly although I have accidentally created a few infinitely scaling infinite Loops that could have potentially cost me an infinite amount of money but what's the difference between a microservice and monolith architecture at Prime video they needed a tool to analyze audio content or is like video freeze And Eruption to implement this tool they use multiple serverless functions called Step functions which this is part of the crazy this is part of the crazy ass solution AWS is like how do we know this stream's good live let's just listen to every stream in duplicate it eight times we could have every stream have a stream that we test individual different tests on it so one stream can become eight that's how we're gonna do it it's so simple like when you think about it this is the Lord's answer to all of our problems we'll know right away when there's a problem one year later wow that's expensive how did we do that which are basically the same the solution just put these all into one process oh wow it's like it's it's like it's 10 times cheaper to not have 10 streams we went from 10 streams to one stream and it's cheaper by 90 percent I don't know about this math someone call a data scientist in here immediately the thing is Lambda is you handle different responsibilities you have an initial entry point which kicks off another service to do a file conversion that converts an audio video stream into frames that can be used by the detector you've got I love the fact that they actually took a live stream which uses some encoding that's just a bunch of the p n and B frames right it actually produces still images from it which you know like when you're transferring like right now 1080p stream 30 frames a second 60 frames a second you're sitting at five megabits to 10 megabits right and so they're going to be translating these streams from that into full picture streams which is going to be massively larger okay it's going to be at minimally like 50x it's gonna be like five gigabits just to have the same stream stored in S3 it's crazy it's just multiple detectors using machine learning to analyze the video and finally you have another function to aggregate the results and store them in a bucket but there's a little bit of over head every time you pass data from one service to another maybe to serialize and deserialize data and communicate over a network in this case their service needed to run multiple times for every second of a video stream and they quickly hit a bottleneck with their account limits just trying to orchestrate you know you should probably hit that off button on the toilet second off I love that AWS even has account limits on AWS this is beautiful create the service in addition by temporarily uploading files to S3 they were burning through money just accessing these files in the buckets they realized that the distributed architecture was the it still tickles me thinking that they turned the video stream into a bunch of images put it on S3 and we're surprised that it cost money like nobody did the math like no one's like okay so a podcast assist and a git cost us this and data cost us this let's just do a quick equation a build that's gonna cost us a [ __ ] ton hey hey Bill can you get Tom Tom's a genius he needs to solve a problem like how did you not just run basic numbers here like there's an equation that's simple foreign cause of these bottlenecks causing them to make a bold decision to re-architect to a monolith instead of running decoupled distributed Services they took everything and made it run on a single container all the components are the same but now that they run on a single server they can only scale vertically that means to do more work they'll need to make each server bigger unlike the microservice architecture which could but that's not necessarily true so so the thing about that is that you can have an entire you can the problem was it's not okay so there's like a little bit of a goof up here the problem wasn't that you can still horizontally scale the [ __ ] out of this the problem was is that they had every single step as a serverless thing so instead they put all those steps into a single machine so a single machine can like pipe in a singular singular request and they can just sit there and effectively eat a stream so long as you have some good uh like node balancer in front that can point these live streams to the correct thing you can still theoretically horizontally scale just as much as you need to vertically scale these things so it is kind of it's not technically true fail horizontally yeah needs that seems like it would be a drawback but it eliminated all kinds of unnecessary communication and network usage that reduced their cost by 90 and for a product of this magnitude that means millions of dollars saved so I guess the takeaway so you just bought Amazon Prime Video subscription that means I can watch all the movies for free right now dude this is this is such a good reason why I hate Amazon Prime you buy Amazon Prime you get on there and you're like oh look at that it's Conan the Barbarian I would love to watch Conan the Barbarian damn it's 3.99 to watch it oh damn Google Play Store and Amazon are still fighting I guess I have to go on the internet on my computer and go buy Conan to watch the Fig on my day is that if you're using microservices I just want to see Arnold sweaty what's the problem you should probably Cobble them together into a monolith right now well not so fast in this case the optimization was pretty obvious famously back in 2008 Netflix was based on a monolith architecture and had a massive failure that motivated them to break their architecture into hundreds of different microservices this is an unironic real picture of Netflix this is like a real picture of Netflix by the way that 2008 uh the 2008 problem he was talking about I was at a gymnasium and I read that news on a BlackBerry phone BlackBerry these nuts that can scale independently with fault tolerance it might be more complex and expensive but if Netflix goes down for a few hours it'll cost them way more money and lost memberships than for small businesses like me I can easily deploy my shitty JavaScript code without ever having to think about infrastructure I rarely even bust out of the free tier and when I do it's money well spent because I have peace of mind knowing that I'm not going to deploy some bad codes to my runaway that takes down my entire operation ultimately when it comes to Cloud architecture there are no Solutions only trade-offs this has been the code report thanks for watching Thomas and I'll see you in the next one that was great we're not going to listen to nikor okay don't don't get bamboozled by that last image uh this was fantastic this was beautiful I'm still upset I'm still upset about I'm still upset about Amazon doing that with live streams I feel like there's a better way and I feel like they know there's a better way okay you know what I mean like you know real talk here here's just here's here's just like a here's just a thought I'm gonna I'm just gonna play a little thought here okay what if instead of listening to every live stream you listen to some portion of him right because statistically you gotta you know if there's a problem you're gonna know you you don't need to do them all uh second you could just store store the RTP right you have RTP rtcp right or rctp uh you have some some some back Channel communication that goes on uh that's RT that's rctp then you have some uh some some good like frame response type stuff right you put them all in into a database which is much much smaller right now you can reconstruct the stream and then you could just do like some sort of vmaf score against the original right at least minimally saying like how statistically different are these two images you know get a nice little screen reader set up a little bot Farm bam