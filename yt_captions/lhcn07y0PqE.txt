bun hype how we learned nothing from yarn by the way yarn uh I remember when yarn came out it was the hottest okay it was the hottest remember how bad npm was and then remember how npm just hasn't really got any better you remember that it's pretty cool anyways uh here we go again making the same mistake I'm constantly reminded that every five years the amount of programmers in the world doubles which means at any point fifty percent of the industry has less than five years of experience how many times can that actually happen we don't I mean does that mean the entire Earth will be programmers here in like 30 years which is probably why we keep falling for stuff like bun but I've seen this movie before and I Know How It Ends okay so I'm gonna give the world's hottest take are you ready for the world's hottest take I wanted to save this for my big long video that I'm making on bun right now for the main Channel but I'm gonna lay off the hottest take in the world I think Bunn made a huge mistake I think bun did not make something objectively different than node it is a slightly it is a different run time that does the same thing that V8 does just differently then it has a or sorry not a runtime it has the V8 and JSC are like the same things but one slightly slower than the other one JSC and then the run time is just better because it's newer and it doesn't have Years of Legacy but eventually bun will go the same way as node.js now here here's my real take I think bun should have been built with Hermes Hermes is the first real iteration on a JavaScript engine at me Real Talk Hermes is the only one that actually does something if you don't know what Hermes is Hermes takes in compiled the JavaScript you turn it into bytecode meaning that you can actually do like full operation like full optimizations and you don't have to run an Optimizer when running Hermes I genuinely think that that's what it may that would have made something amazing right it's used in react native exactly Hermes is actually something that's objectively different than JSC and V8 right Dino is just V8 just wrapped slightly differently like is Dino really a w comparatively to to node not really it's not anything different uh it's just the same thing whereas like legit is slow jit is not only slow but it's really memory intensive so if you wanted something to use a lot less memory and actually just be fast out of the gate and doesn't need to parse you'd want something like Hermes right so to me that's like kind of where it's at and I'd love to see it I'd love to see it I'd love to see exploration on Hermes because I think that that's really you're making something objectively different and that's where the Big W comes in all right anyways part one the story of yarn I see a lot of parallels with yarn and Bun both targeted existing open source systems and instead of actually contributing to them just went off to create their own competing technology I don't think that that's bad it when I read this it kind of feels like right away we're setting it up as the good thing to do is only to contribute to what's there bad thing to do is create your own I don't think it's necessarily bad to create your own if there's a real reason to do that both sold themselves on being away faster facts both when in the uh with the goal of splitting the ecosystem I don't think like again I don't think that's the goal I think this is kind of a crappy way to State it because I don't think the goal of bun is to split the ecosystem you know what I mean neither had good backwards compatibility support both uh and both announced that they are officially 1-0 and ready for production while not actually supporting Windows okay I again I do not think supporting Windows actually means you're production ready I actually don't think you should support Windows I think you should support Ubuntu Debian Linux and Mac if you want to use it on Windows hopefully wsl2 works I hope it works for you because guess what I ain't gonna do it I'm not gonna do it I'll take I don't think so good luck with your windows okay I hate Windows anyways uh so what happened to yarn well that came out with about a dozen cool new features that npm didn't have and they are many times faster than npm but then only a year later npm was faster than yarn and yet another year later yarn would create a blog post explaining how to ultimately be impossible for them to be faster than npm due to the npm CLI being created by the same people in charge of the npm servers where the packages were stored and downloaded from and that is still true to this day in 2023 npm is still faster than yarn it's original big selling point has not been relevant for five years this makes a lot of sense and I've said this about bun too Bun's biggest risk is that it's only offering a competing run time if node focuses on the runtime performance the interaction with the you know with the actual uh you know operating system they could very well be just as fast as bun right like file writing is not some sort of super secret it's not something that they can't do I bet you node can make file writing just as fast as bun that is if buns file writing is actually even fast uh but what about the other features yarn offered with each passing year more and more of them were implemented and released in npm and as of today all the formerly unique features yarn offered are built into npm sure the implementations of the feature are slightly different and for those that really care about the subtle nuances between how yarn learn a turbo and npm handle my uh mono repo management you may prefer one over the other but for the vast majority of the use cases the way npm implements these features is perfectly fine from for almost all users fair fair uh ah but bun is surely different right I mean it's written in Zig and Zig is super fast right uh not really it's it isn't doing anything magical ultimately any performance you can achieve with it can be achieved with C plus plus fair this is actually a very fair take Zig is not somehow doing something unique in any sort of sense uh just like that with the old let's see just so just like with the story of the Old Slow npm well I cannot read I cannot read so just like with the story of the Old Slow npm once performance was prioritized npm was able to go just as fast even faster than competition so one thing I do want to say is that node would not optimize performance and less if something like bun came along so is it bad that bun came along I don't think it is I think it puts the focus where people are really excited about I think startup performance is a really exciting thing uh if if things start getting better in the node world I think that that would be a big W uh competition can be very very good again I don't think npm was going to get any faster until yarn came along I don't think npm had any intention of making themselves any faster until yarn came along and then when yarn came along npm wrote originally a bunch of articles about about how uh yarn was actually bad and wasn't good and no we shouldn't do it this way and no we will be slow and it turns out that wasn't actually necessary right and that they figured out how to make it fast and so it's great and so like can the same thing happen with bun Maybe if given the proper attention roughly equivalence speeds should be possible to the point where the differences are negligible completely agree completely agree that's see my Hermes argument well kind of I mean we should probably acknowledge the fact that some of the Benchmark buns brags Bots are cherry-picked or misrepresentative I have talked about this many times there are some serious serious offensiveness inside the bun world and some of the article or some of the speeds they've been showing so even let's see so even bun doesn't live up to its own marketing hype but you get the point back to the parable of yarn when yarn came out it is said it supported windows but none of the Facebook developers working on yarn used windows for their primary OS so they quickly found out that yarn in fact did not run on the platform when released a short aside here primagen what if I mean am I being just directly spoken to inside of an article the rest of you can skip this now I know you've already made a snarky comment about Windows dude this guy this guy this guy foreign that was super awesome I don't care if you insult me or whatever this is fantastic but perhaps you should really uh try to Value diversity in our society and accept different ways of life I mean I get it I totally do windows users made up a very thin tiny uh minority of only 90 of computer users I mean but that's super unfair we all know that that's a super unfair thing of course it's 90 of all computer users but what percentage of them actually program but maybe we should be respectful on that barely noticeable uh minority back to the story you got me though you got me okay I love this comment you're right you also spelled my name wrong but that's okay I'm not offended maybe if you valued spelling tough guy uh so after two weeks or so uh is this what's gonna happen by the way articles are gonna start making fun of me as I read it because this happened twice today I'm just gonna start getting wrecked in articles and people are going to be laughing about it damn I actually was never able to get yarn to run reliably on Windows myself until they switched over to using core pack once you could install core pack via npm and then install yarn or pnpm with the worst name thing ever on top of it I I it was finally Windows compatible in a reliable non-buggy non-crashing way but uh by that point Facebook had already dropped yarn and slowly so did everyone else it was already dying off by the time it ran on Windows which by the way we still used yarn at Netflix that's the thing is that you know when people say dying off that means new things are being used but like at the end of the day when people make these technology choices there's a long-lived tale of people that are affected right so just because there's no more further development on yarn or whatever's happening that doesn't mean there's not a ton of companies whose entire build system is designed around yarn you know that's tough you know it's tough I let's see I've still to this day never been able to get yarn mono repo to run on Windows I'm not even sure how to run monorepos in most of these things okay pnpm I kind of got npm I sort of get but it's hard to do like you know concurrent tasks there's a lot of trickiness to it all I'm convinced it's not possible anyone who says they've got it working uh is lying to you well I mean maybe uh sure maybe in some windows VM with nothing installed not even Windows updates maybe someone got yarn mono repo to run on Windows a few glorious seconds and maybe they saw Sasquatch in the woods anything can happen but on the real developer laptop with random [ __ ] in the path uh end node and NVM windows and uh Volta and who knows what other random things installed no it doesn't work love it okay so yarn came around forced npm to get better and then died what's the problem if that's all it did then yarn would have been great but sadly it wasn't npm focused on developing and releasing the features the vast majority of users needed but yarn focused on features Facebook needed I do I do like this point I actually really like this point because you know it's this this concept that I'd really like to actually start I'd love to see it more popularized which is the difference between public source and open source like public sources like hey we use this at Facebook this is designed for Facebook do you want to use what Facebook does in the Facebook way of doing things public Source versus open source is like Community comes in whoever wants to participate can help steer some of this direction there will probably be some benevolent dictator at the top of it but that's that right many of which are not important for 90 99 of the people using npm however once people started using yarn npm had to re-prioritize what features they would develop and release instead of delivering higher value features that would be more relevant to users they had to quickly play catch-up and equivalent of features to what yarn was offering as to avoid a split in the ecosystem but yarn marketed itself very well and people bought into the hype even I was hyped for yarn when it came out until I realized it didn't actually run on Windows the windows part is a real serious one I want so why Windows okay it does okay there has to be how many windows and these are there in here type one if you are windows handy in the chat type one if you like Windows type one if you like Windows oh there's quite a few of you well okay oh okay I didn't realize that okay follow-up why windows look at this chat is struggling why windows can you help me understand why Windows other than gaming like don't if you if you're into gaming of course everyone uses windows for gaming okay what are you gonna do try to play are you gonna be like Whoopi Goldberg and emotionally bruised because Diablo 4 doesn't work on MacBook duh okay none of us are saying that can can I get some real reasons here because I'm a C sharp Dev okay that's fair that's fair uh game development okay game development that makes XNA get the hell out of here XNA has not been around ever uh other than gaming uh and brain damage why are you all using Windows you tell them oh oh oh what's this one I must have missed this one Windows purse I hate oh we're back we're back everybody we're back all right Windows personal use dude stack Overflow should maybe ask stack Overflow how to listen to a window resize and not scroll all over the place uh Windows let's see Windows personal use okay look at this look at this okay so a lot of professional use really Ubuntu is pretty big too ubuntu's pretty big Android I mean okay I love Android but look at this so I wonder how many okay so I wonder how what percentage of these actually fall under here like would this actually make Mac OS into the kind of the same category professional use equals Excel spreadsheets yeah yeah again I uh Windows is easy for everyday life when I work with WSLS is good enough why make my life harder by using Linux and making install things 5 500 x harder when I can install WSL Docker Etc I'm not sure what you mean by what makes things hard on Linux like real talk it all feels the same to me in fact I feel like Windows is harder I feel like Windows is very difficult to kind of debug things whereas whereas window is or Linux is like hey yo it's pretty straightforward I mean sure I've never had sound work but that's a completely different story what uh let's see what do you use uh Windows Linux Mac other I don't want to worry about anything else there we go let's actually see this because this is I'm just curious I'm just curious it's easier to debug on Mac really all right so we do have a lot of people using Windows I am shook I am shook and then a lot of a lot of Linux and a lot of Mac I'm still completely surprised honestly I'm completely surprised by this I did not think this many window users existed you know what hey Maybe I'm Wrong on my windows take okay hey right here I now officially say maybe my windows take is not as good as it could be need to be segment based on uh who is doing jss I know I wish there was I uh yeah that's fair ask people it's a preferred for code well I assume you did okay fine we'll do one more preferred for code all right preferred for coding right windows we're gonna win eventually we're gonna win eventually for installing Arch which one do you prefer Arch or not Arch uh Mac other eventually we're gonna get we're gonna win uh what you're referring to as Windows is actually good new windows okay for coding this is for coding we're not talking about gaming okay I I just put gaming in a completely separate category because we all get that gaming is on Windows it's a Windows thing I have multiple windows machines I have four Windows desktops for gaming with me and my kiddos okay so I'm on that team nut I completely agree with y'all okay so this makes it a lot better you guys keep answering it with this perspective of not gaming or with uh with without coding so there you go so Linux is crushing it and then Mac even Mac is almost outperforming windows and Mac is really expensive I feel like owning a Mac is just so expensive wsl2 equals Windows not entirely I don't believe that to be the case I know there's differences I just don't know what the differences are because I don't invest into the windows world right owning a Mac is just so expensive you know Mac is when your employer buys it yeah let's say uh let's say private jet uh only three thousand dollars lucky my company has money yeah exactly real question is someone who is new to Dev World should I install a Linux distro or WSL I use one of them at least either use WSL or or Linux I think Linux is probably a better longer term experience yeah Docker doesn't even run with that anyways okay let's keep on going all right all right and then yarn became let's see became tribal stupid humans everything had to become tribal and for several years I mean you are talking about how Windows is the greatest I mean we all have our tribes right everyone becomes tribal eventually right there's no getting out of that uh and after and let's see and for several years there were thousands of readmies created on projects that only told you to use yarn instructions for how to install the projects confusing new developers I can't tell you the amount of Junior devs that have come to me asking for clarification on what is this yarn thing and if they needed it thinking the projects they found would only work with yarn a waste of everyone's time and mental space I assumed someone at Facebook just found that convincing their boss to let them spend time adding features to open source projects they couldn't take credit for was a hard sell it was probably easier for them to get approval to work on these features if they could use it for marketing uh for job recruitment or something it always smelled like a not invented hair syndrome yeah that's pretty fair Netflix does uh Netflix has we have a lot of not invented here syndrome as well I think a lot of these larger companies generally do and so I don't think it's terrible I think one thing that makes a Facebook or Google like particularly egregious is that you're measured by like technical artifacts and how much you're writing about and all that and so that it's not necessarily like fantastic you know what I mean it's not necessarily a good thing that people come up with their own stuff and so if you're not rewarded for using off-the-shelf items and contributing back to open source then I feel like this is going to be a thing like it'd be really amazing if if as part of like a measurement for how good you are is how much open source you're actually contributing to as part of your job I think it would cure a lot of the open source woes um personally big personal here on this one uh had Facebook just contributed to npm the features they wanted then their features uh would have been released alongside the ones npm was already working on but instead it delayed the release of these other features by many years is npm open source and to the point where Facebook could have done it that's another one of these questions which is not all open source is open source for companies to contribute to they can kind of get pushback on and not get things done and so I don't know how open source npm was Slash is uh and for what uh yarn is basically dead at this point except for a few Niche edge cases but I haven't seen yarn add in a readme in the past year or two it's a sign of past air Fair part two bun is actually much worse unlike yarn which offered speed and a dozen new features but but offers speed and and like three new features so let briefly go over them macros I think is a bad idea I don't want to give JS developers macro I don't need more JS code okay that's the last thing I want is sweet JS Suite JS was the greatest disaster ever put upon my life I've ever experienced in my in my professional development career with sweet JS I hate sweet JS I hated it I hated everything about it I never want to go back to macros again used it during a build process they are basically called a mistake by some the biggest concern is that your build process is now stuck with bun you can't switch to something else unless it has an equivalent macro system or you rewrite your build process you are opting out of future Tech debt yeah I think I I really dislike the that the bun.x apis there are a few new apis that do the same thing as node.js apis but but faster this is worse than macros because you now your code is let's see now now your code is a bun virus if I npm install your package and run in a node I'll get a reference error button is not defined when you use your library forcing all users all other users to uh of your library to adopt button holy cow uh this is another four split of the ecosystem I'm not sure if this is worse yet I need to be proved why this is worse and I am fine with the difference in bun Dino did it too Dino's file apis were much closer to C you know what I mean I think uh let's see sweet JS yeah uh sweet like as an ooh that's pretty sweet can I rock no uh well no no he's not complaining about no new features then he said there's few new features but I I actually like something I really like about this which is these cool apis do exist the bad part is if libraries make it so that it's a requirement because then you have bun only stuff is that bad let's just take Neil Bim for exist uh for an example neovim is a fork of Vim it is the community's version of Vim is it worse or better I would argue that overall by every aspect the iteration of not contributing back to Vim but instead creating your own version of them has actually been largely great for the ecosystem and I think is the superior version of Vim is that bad are some people gonna hate that take absolutely do I think that it was the correct move to make absolutely uh is Bud going to be the same thing will bun create a new ecosystem with better apis so that you can be a lot faster and maybe not all standards needs to be met or new standards can be created potentially is it terrible maybe maybe not it's just what is going to be the result of all this I would see I could see some rapper Library you import to check if bun existed so if you let's see uh and if so it uses a faster API and if not falls back to note see I would assume someone would do that that seems not bad if button gets remotely popular I imagine this would be very common but that's just one more dependency to maintain in your project which sort of defeats the point of all-in-one system that lets you skip having tooling dependencies if everyone that uses it has to install additional tooling libraries to make it easy to use I can I can agree with this that one of my big kind of worries is that bun is creating a fracture where it says it's a drop in node replacement but I'm seeing a ton of PR's out to a bunch of these ancillary libraries that are fixing bugs that exist because of bun so therefore bun will never be a full drop in replacement instead everyone will just fix the problems which means we're gonna have this weird ecosystem of if bun do x f else do y and I think that that is not great now I just want Hermes and honestly kind of lost interest in but I know I I knew that if I said that people would get all sorts of you know web dev is too much of a cluster [ __ ] I think it's only going to get worse all right meta language support uh should J should node.js have a The View template compiler built in it sounds absolutely insane to ask that what about markdown or SAS or coffeescript okay no one no one actually suggests coffee scrubs coffee script is what you make after you drink coffee yeah that would be pretty stupid for the main platform that uh everything is built on top of to just build in that would feel very short-sighted I actually agree with this completely this is another reason why I think neobim has done such a good job as they don't build in a lot of these things meta languages exist to fill the Gap in original languages that uh they are by their nature impermanent and flexible also the term meta language is being used in the odd way here I would not consider view template compiler or markdown meta language that's probably not the right thing maybe Niche language would be a better term for all of this right um you know what I mean okay am I saying libraries bad because I keep saying Library am I saying Library it's like well it's a DSL but it's more than a DSL right because once you need to add one you kind of leave DSL land you know what I mean they're dsls they're more than dsls what did bsco have to say oh B score I can't look at that right now Library coffeescript soy script uh they're addict let's see they're like adding really good suspension to your car as you drive over the potholes in the original language until the original language can come by and fill in those potholes there is no reason we don't use coffee or there is a reason we don't use coffeescript anymore uh because it's a terrible terrible idea and it was awful most of the features it offered were added into the language in es6 CSS has slowly added good enough equivalence uh to a few high-level SAS features and we've seen a the first decline in SAS usage ever afterwards but here we are with the worst templating system jsx and most contentious of off front end tooling typescript built into bun okay I do agree that jsx is just terrible but I used to think it was a good abstraction I've now changed my mind uh but typescript into bun is not a bad idea I don't think that's a bad idea the fact that I can just run my stuff I love it I love it stop telling Barry to lie what's wrong with jsx jsx allows you to write JavaScript in a templating language which means that inevitably you're going to abstract you're going to keep on abstracting and you're going to continuously abstract forevermore amen and so therefore that's why you see all like these crazy amount of ternary operators you see all these crazy things that exist because they're they're used they're JavaScript in a templating language which is just like it's just it never feels good it never feels good and it just keeps on growing and growing and growing uh you could always use another level of abstraction I know I used to let's see I used to think of that kind of flexibility was a great idea same here we all do I don't mind templates you use templates all the time whether you're using uh whether you're using like go HTML template or you're using jsx it's all templating it's all templating jsx just feels more convenient because it's built into the language it doesn't mean it's somehow anything different than just a templating language with JavaScript which I don't think is necessarily a great way all right typescript usage plateaued around 2020 a little over a third of the JS ecosystem has adopted it in the past year finally showing its first signs of decline as it was replaced with a better uh simpler Alternatives like eslint plug-in JS docs uh well JS docs largely runs because TS server consumes the JS docs and converts it into the typescript and executes it that way and the depend let's see and a potential comment based es20x official type system that will likely lead to a rapid decline in the need for TS files this would be exciting I would love to see this can we all agree that would be exciting to see an official type just move to assert it's better okay they're dhh with these potholes filled typescript will need to either find a new potholes to try to smooth out or justify its existence or accept that its job is done and slowly fade away I think typescript is just fine to have though you got to remember that typescript has been around for almost a decade I can't read TJ okay but it's been around for almost a decade so has it's done I mean it's done a great job we still wouldn't have any types at all and it's still in stage one in JavaScript like that somehow seems worse okay so am I do I have a problem with typescript no I don't have a problem with typescript JS reinvented PHP you mean Microsoft typescript it will let your dread refer to as typescript it's actually Microsoft typescript or as I've been recently saying Microsoft Plus typescript never actually dying in the same way coffeescript is still technically around oh my goodness remember when Adam came out and they're just like and coffee scrapped But ultimately being another sign of an older era like all other once useful Technologies we've evolved beyond the utility of less stylus SAS coffee script yarn grunt Etc sure I you know none of these I feel are great reasons yet like this part I feel it just feels more salty than anything else because I don't think it's bad I think it's just a sign of an ecosystem trying to mature and find its way around I'm gonna skip the whole SAS part um I'm gonna let's I wanna hear about bud I keep wondering what weird mashup uh mishmash of Technologies bun would have been made out if it came out of a previous year and what weird Legacy code they would be stuck maintaining today if it came out in 2019 at the peak of SAS used by basically everyone it would totally make sense uh as a candidate to be built into bun right uh I do not think you can I do not think you can relate SAS to typescript I think that that's an unrelatable I do not think you can win like that um but then what do you do when all of these SAS apis change and the old import system is completely deprecated normally you just npm install the version of SAS you need for your project and then pin the old version if that's what your code worked with and you don't want to upgrade that's fine but if you're using bun for this then you'd have to come back a few years later and now the project just won't build because SAS version and Bun isn't compatible with SAS wrote okay that's fair this is again you know this is the great thing about Neil Bim and the dangers of libraries keep SAS name ouch I actually like that I actually I I mean I like I like this argument which is be very careful what third party anything you support and I do agree with that idea that like supporting every third party something is a bad idea but I don't know about the typescript one right high levels of SAS detected right like I don't know if the typescript one is a w okay I don't know if you can really argue that one the last one built in meta languages uh sort of leans into what bun really is it's just an abstraction layer for a bunch of Technologies it isn't actually an alternative or competitor it's literally the same thing just already built in dude I just said this at the beginning of the article I actually really agree with this there wasn't a huge iteration it's just making the pain of the world slightly less which sounds nice on paper but ultimately is pretty bad I'd like to see why it's bad I mean I still need to see it play out to really understand if it's truly bad or if this is just like the future of JavaScript it's just always typescript but then there is gonna be the Schism at some point if types ever make it a job blah blah abstractions can be great and simplify things let's look at webpack for example webpack is well just awful agreed a chat GPT can write amazing webpack and fix though can we all agree with that it's what I use it for no one likes dealing with it and that's why every JS framework has to be built uh build an abstraction layer for it because no one wants to touch webpack it's called chat GPT people like the angular CLI or create react app or svelt CLI or the phenomenal ucli which even has a GUI that doesn't mean it's good we'll use Vue as the example since it did the best job out of these abstractions I don't think it does the view config.js file was a simple config that abstracted away all the complexity of webpack while still giving you the exact level of control you needed it if it also reduces the amount of dependencies down from 30ish to like three ish but then views Creator evanu went and made Vite and the Vite config was basically the same level exact level of complexity as the view config.js except it didn't require them to maintain an entirely separate project The View CLI just uh make it that way or let's see the project The View CLI to just make it that way switching from view CLI over to Vite I ended up with the same amount of dependencies in the same amount of config the end result is Vite is an abstraction layer on ES build that is as easy to use as the best abstraction layer for what was replacing so here's my big thing with this whole abstract so this is the JavaScript problem in a nutshell is people make X and they try to make X have a smaller and smaller and smaller and smaller config and it ends up just getting worse and worse and worse you know what I mean like I just see this non-stop I refuse to call Veet or Vite Veet it just keeps on doing it over and over again someone makes webpack you just keep on make it smaller and smaller and smaller and smaller trying to just avoid all the processes of building that's why in some you can invite these nuts that's right there's something about grunt I think was very interesting I understand it's a French word it's called an endonym versus an exonym and I'm going to keep it my personal EXO name okay pronounce avit in French okay so from here on out everyone that says it pronounces ADV I expect you to call it Chalet if anybody says chili you get kicked out you get banned okay I better not hear the word China a singular time from anybody I expect the endonym okay I expect the I expect endonims from here on out okay I expect it because if we're gonna start saying that we all need to pronounce things via their endonym then guess what you can suck it because I'm not gonna I'm not joining in all right I'm not joining in on this one it's called it's called fight suck it an endonym yes an endo Nim whoopsies I just clicked on something hold on hold on I saw I I have seen that there's endonim and then exodim right so an endonym is just the thing that's pronounced in perspective of the of the language we're speaking right it's a common native group of people telling individual blah blah language dialect right and so an exonim is how we'd say it on the outside like right like I call it Mexico that's the endonym it just is right Mexico people call it Mexico I call Mexico right some people call you know it's just the reality whiteboard masturbation on language I know so I'm just not going to give in to this whole V thing it's Veet okay french guy I'm gonna call it Vite sorry everybody I'm calling it Vite uh hashtag don't care hashtag don't care haven't cared still not going to care haven't cared dead haven't cared now where the hell am I how did I end all the way back down here go go go go go go go go go go what where the hell where the heavens have oh this is typescript 5-0 I was like where the hell did I go what uh but bun isn't doing that uh it isn't taking something hard and making a simpler abstraction for it it's taking es build and abstracting it just like how Vite is uh uh that's probably not a fair way to say it it's not an improvement it's basically the same thing no it doesn't things that are pretty clever like right so for typescript of uh just running it just simply as it streams in the code it literally just erases the typescript as it comes in and then converts some imports it's doing some stuff it makes it nice um it's doing some nice things it's a it's an improvement it makes it faster but ultimately anyone else can make that exact same speed uh it's basically the same thing this also is a case for unit tests where they don't pre even pretend to offer something new uh instead they're telling you to write your code AS jest or Vite test like normal and that they'll just hijack the Imports and replace them with their own faster code underneath the hood okay fair uh button is just an abstraction layer on top of tools we already have meaning it will always be behind the curve and can introduce additional bugs at that layer not ideal for such a mission critical systems like installing dependencies testing code and building code that is sent to production fair but we haven't got to the two worst thing bun does that is the really scary parts Windows okay I'm just going to skip the windows part okay we're just skipping the windows part I'm sorry Windows it doesn't work #it doesn't all right there is no bun version manager all ulti of all the tools they put into bun the one tool they didn't build in is is a version manager that's insane to me I think it's actually insane that node.js doesn't have a version manager built in let's break it down okay well I think what they're going for is a platform that doesn't change I think they're trying to build a Lindy platform that doesn't change and so therefore bun just works right I think that that's what it's I think that's the the their their goal is to have a platform that always works I heard about new Js it's a it's literally another yet another framework right and so I'm not sure if that's bad uh Neil uh NVM which mostly Works uh gosh it's have you tried to use NVM with Docker so annoying uh noticed that's great I want to use n but n is also a huge pain in the ass which is great but works uh on older versions of Windows what uh and NVM Windows Volta I have no idea what that is uh why do I have to know about four tools this is stupid but what's considerably worse than having uh to deal with four tools by the way didn't even mention N N I think is the best one uh this is stupid but what's considerably worse than having to deal with four tools is to do uh that do the same thing as just not having any tool at all again I don't think bun is trying to have a virgin's manager I think bun is trying to be Lindy uh node.js is way more focused on backwards compatibility than bun is I'm not sure if that's true bun just started what's the backwards right uh But as time has gone on even node has deprecated parts of their API many times this is a result in the V8 engine itself deprecating features node.js is actually involved somewhat in that direction of V8 at this point and even with having some level of input it isn't it that it isn't possible for them to avoid all Breaking changes and deprecations leading to an old node.js code straight up not working on newer versions of node.js okay fair so I don't believe for a second that bun got everything right on the uh on the first try and nothing about it will change over time all code you write it in will always work forever especially since they are inheriting whatever deprecations will come with apple web.js well the thing is is that every piece of code you've ever written for JavaScript still works to this day I mean you can still use with with this the craziest thing that has ever ever been created by JavaScript people JavaScript people literally came up with the idea of width and then made it happen you know what I mean they made it happen I'm still waiting for people to be uh more negative about bun uh well the good The Good the good news is that I will help with the negativity I'm gonna drop a bomb probably you know what I mean and just so you know uh so I actually kind of agree I I mean I generally agree with this which is bun is setting us itself up for a really hard thing to do which is how do you make a always Lindy platform that you can just be at the latest version and it just works you know what I mean I think that's going to be really really hard for them and I actually think this is a really good point uh I think they did a this is a really really really good point um yeah I mean I'd love to see it I'd love to see it done I hope they do it I mean the web platform has largely remained Lindy right in the sense that you could like whatever worked in 1999 still works to this day you know what I mean I will be swapping uh to bun at work because uh the work website is having issues building I've had to build it locally and push it to the server yikes I mean that's actually more scary than anything else uh the same way let's see uh it's not node.js job to do versioning yeah I'm curious about it you might end up with python 2 situation yeah that I mean it yeah that'd be crazy right uh shouldn't bun be a drop in replacement for no they say that but it's really really hard to do that it's really really hard to do that all right let's see what here uh let's see we as web developers use grunt for our building tool I I did I started on grunt I used a lot of Grunt in fact before grunt came along I built my own tooling to go through file systems and create all of that uh Google closure compiler was there at that time that's what I used to Minify code it was it was tough days then golf came out and made the process simpler and we switched over to it then gulp 4 came out and completely changed the API and no one wanted to deal with that so we switched uh to npm scripts for a basic build automation then we wanted to actually bundle abilities with tree and tree shaking tree shaking has just never been an issue this whole tree shaking thing is just not an issue just stop relying on 10 000 libraries it's like why are people like why does this even exist why is tree shaking a real thing you send down like even a g-zipped website a g-zipped modern website has over 350k worth of JavaScript and you're telling me the problem is just tree shaking is going to fix some of that I don't believe a single thing okay it's crazy that you're at that point 350k of gzipped code that's been minified how the hell did you get there why haven't you asked yourself that okay that's crazy it's it's just crazy and the thing is it's not like it's a complicated website uh but then we wanted to actually bundling abilities and tree shaking so we uh so we the uh as an entire JS Community switched to webpack or more accurately abstractions on top of it but webpack was slow and annoying and so when vike came out we all switched over to it well sort of I mean this this whole we all and all that just did not happen um we still use web packet for TDY at Netflix why because it's extremely hard just just upend a system and add in a new system on a huge moving vehicle that's millions of lines code right so it's not simple never gonna be simple but you know what I'm not in love with white uh it is the best thing right now yeah it is but there's there are things about it I wish were better and over the coming years more and more of those things will be identified and someone will inevitably make a new tool that is better than fight and I will happily switch to it turbo pack was trying to do it buns trying to do it uh but not because I like changing tooling but because from a practical standpoint I it will be better and I will see the value in it and switch that's it even if you think nope there is nothing left to do with our tooling we've uh we've perfected minification do you think we have perfected everything on the web no we still send down so much code what features of web exist today that did not 10 years ago yeah I mean I get this article I get this argument this it's gone on for a long time you know what I mean this has gone gone for a long time I'm gonna skip forward I get the argument uh let's look at this thing what if bun came out in 2012 would it have grunt built in yeah we've already seen this argument I get what he's saying using today's technology is kind of dangerous to bet on because it's kind of as crazy I did use meteor JS when it came out and it is kind of crazy to use you know what I mean uh my predictions for the future let's just go here most of the projects bun will pick up Will let's see on we'll get performance improvements over the next year or so tightening the gap between them and fun true you will start seeing more and more re repos by that mentioned button in their readme's exactly all developers that uh quit their first Dev jobs after six months to become a YouTube coding influencer will make bonus the future oh my gosh videos uh with this thumbnail please tell me it's probably me no it's not few I thought I was gonna get shot on again I honestly thought the shading on was going to happen again but it didn't okay so we're good we're good oh I lost my spot all right and this thumbnail and hope that'll trick people into watching the 12-part tutorial series on bun like And subscribe we have not perfected our tools yet and we've continued to evolve and invent newer and better options bun will struggle to keep up and people will slow slowly use it less as they get impatient and are willing to just to install the dependencies if it means better more practical solutions to their problems okay button will probably be around for about five more years interesting but will eventually have a really really great window support probably right as people stop using it for some reason but never adds a in a version manager and instead four competing options show up uh all the sucking different oh my goodness four competing options show up all sucking in different ways and the year is 20 xx and we finally have converted to the last CJs node module to esm this was only possible after Humanity finally gave it and let the AI take over was it worth it Joe Biden will get uh we'll get a second term but like no one no one is really happy about it it turns out that yarn guy really did see Sasquatch now I feel bad for making fun of him honestly Harry and the Hendersons may be worth a re-watch view is better still better than everything else but people just use whatever the YouTuber coder said was the hot new thing because it if it wasn't why would they have made 20 tutorial videos about it they're going to remake Breaking Bad and it wouldn't be very good someone in primigen's chat is actually right now uh right about oh my goodness oh no so someone in primary chat is actually right about something for the first time ever did you know that he works at Netflix by the way I actually really did I actually did really like this article I really like this I I really like the little predicting the Future Part I thought it was actually really funny it's really really good um I wonder is view really that good is view really that good people seem to love you like everyone that I see talk about view loves View okay so I'm gonna just give you my one quick take on view is that I worry if it's actually real view is greater than react okay if Ryan Winchester if you say it's better than I mean that makes me think it's probably better uh but I'm curious people talking about angular love react I know you know every CS every CS go gambling slash case opening website with good design uses view I'm not sure if you just sold me on using View I think CS go gambling is by far the the single-handedly worst thing ever and I'm shocked that more people aren't in prison right now and I think FaZe Clan the founders of FaZe Clan deserve to go to prison there you go that's how I feel