what's your recommended approach for writing a unit tests for an existing code base was already tender dependencies oh there's no one approach um so um the I tend to think of code in that situation I I talk about it as being the art of the possible what is possible okay let's not worry about ideal cases let's work let's make that a destination but that's not where we're at at the moment what is possible if uh we already have a culture of integration tests then my recommendation would be to continue working within that culture so that I can now then more safely refactor things so that I can then you know the Next Generation I am able to then introduce unit tests the benefit of that goes way better build times but also you're ending up with something that is cleaner you're ending up with something that is more modular different use of the word modular but more fine-grained that this thing that shouldn't depend on a file it should depend on data not where the data comes from I want to have that structured but maybe I'm not going to make that change if I feel the code already Works give me an integration test that demonstrates that then I will change this code accordingly refactor it and now I can also write unit tests and probably move the bulk of the um uh activity that goes on in the integration test into that and it will also execute faster okay so I still keep something of the integration test but because we're always hitting secondary storage it's going to be slow so in other words that would be one sim that would be one way if you're working with integration tests already work with the things that you've got you've already got a set up you've already got a culture with that look to make those better in other cases break the dependencies um how do we do that in a fashion that is safe if we don't have enough tests and this is what Michael feathers called lean on the compiler um there are some changes that you can make that if you get them wrong the compiler will tell you okay these are not changes in logic if I start refactoring logic and I don't have tests for it the compiler won't object but these are tests to do with type system this is like where we talk about renaming and moving and splitting classes if I try and call a function on a class and it is not on that class the compiler's not going to go with it it's going to tell me in no uncertain terms so there's a class of refactorings that are about movement of code that if you get them wrong it's the compiler that will do the checking you're not actually changing the logic okay so in other words work along those that would be different for different languages but in C plus plus we have a sufficiently static and checked type system that you can actually find a lot of cases where you can do that and therefore you open up a seam and a possibility and say right now I can drive a unit test in there and allow myself to do other changes um so that's kind of two approaches um again another approach is that you start um spoofing things so I make a slight distinction between mocking spoofing a lot of people don't by spoofing I mean is like I will substitute headers okay and I will say here for the tech you know here's the actual header that you're going to be using in production but I'm going to spoof this at the level I'm going to make sure that the path is changed for my test and I will pick up something that provides uh mocks or other kinds of test double as appropriate but I'm going to spoof that so that I haven't actually had to change the design or the dependency structure as it stands by you know it could be very creative sometimes doing that but you know that would be another technique you can also consider link time spoofing as well if you've got something that's binary compatible do that so you know there's these different techniques so as I said it's it's about the art of the possible you have to kind of come to the code base and say I have all of these possibilities of how I can work within it and I will see what fits this one you know maybe this technique pushes this far another technique pushes another way you treat it as a kind of more pincer style action you treat it as a long-term progression so yeah I think that that's a case of building up a kind of like a a kind of vocabulary of techniques to help you okay um