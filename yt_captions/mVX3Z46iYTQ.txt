today I'm going to make myself obsolete I'm going to build a code explaining tool that also creates speech that way you can just use an AI to explain code to you and listen and then you don't have to watch my videos anymore isn't that great except that well I won't have an income Source anymore to fix that I asked all of you what type of online course you'd be most interested in there were a ton of response has got some really useful feedback thank you so much so I'm going to go ahead and launch a course on software architecture this year I'm going to do something really special for this course just wait and see if you want to stay up to date on what's Happening and be part of the first group that gets access to the course you can sign off free at ion.com architect you most certainly heard about chat GPT and open AI by now if you haven't Where Have You Been sounds like a really calm place anyway everybody on the internet on YouTube is talking about it I also have to oblige and do a couple of videos about chat TV and openai so that's what I'm going to do today the fun part of this is that it's actually incredibly simple to build so what I'm going to do today is build a simple app where you can input some code and then you can let the app explain it to you and use Text-to-Speech system to generate audio that explains to you using different voices before I start building this the app needs a name so I'm going to call it the Arjun code explainer your personal code explanation assistance that is always by your side and explains code to you in a smooth but commanding voice let's dive in and I'm going to show you two things one is how can you use the openai API to get it to explain code to you and the second thing is how we can use Text-to-Speech tools to transform that text that we get back from open AI into audio so you can listen to it while you're doing something else so the example application that I made consists of three parts there's an app which is built using streamlit which is really useful application I didn't really cover that on my channel yet if you want me to do that let me know in the comments then we have an explainer dot Pi file which contains all the interactions with the open AI API and finally I have a text-to-speech script that interacts with a text-to-speech service I'll go through each of them in this video and once you're done watching this video you can actually get this code from the gitro power story that I've put in the description and then you don't have to watch any of my videos anymore so and then finally I can take a very long break anyway so the first thing that I'm going to show you is the streamlit app so what streamer does is it allows you to really easily create a web-based interface that works on top of your script and that's what I did here so we have a couple of functions like displaying a header so you see it's actually really straightforward you just have an image title text some warning dialog we have display widgets which shows a file uploader so if you wanted to explain text and you want to read it from a file you can drag drop the file on top of that file uploader plus text area so it basically has all of these standard things that you need in a user interface and then I have a couple of extra functions that help me with dealing with the data so there's one where I retrieve the content from the file that's been uploaded there's one where I extract the code from the file so either it gets it from the uploaded script or it gets it from the code that you pasted into the text area then I've function for choosing the voice so I'm using the text-to-speech servers to give me the available names and finally I have main function that displays the header you allows you to choose the voice extracts the code and then show some Spinners while it's waiting for the response and if text to speech is enabled I've temporarily disabled it because I had some issues with getting access to the service then it's going to convert that text to an MP3 file and then you can also play that MP3 file in the web-based interface the way it's set up is not perfect in terms of software design for example it would be nice to take all of these texts and move them out of the code so you could also translate it into other languages for example but I kept it really simple in this case because I just want to show you how easy it is to set this up so this is basically the whole setup of the app and then we have two other files so there's explainer so the explainer script is the part that interacts with the open AI API and that's also really easy First Step that you need to do is you have to make sure you get an API key because the API key allows you access to the open AI API you can get this API Key by signing up at the open AI developers page and then generate a key and then you can use that key here so what I did I won't show you this file because of course it contains my API keys but I created dot end file that contains both the openai API key and it also contains the API key I need for the text-to-speech service and then I'm using an app.pi I'm using Dot N and the load.nf function so that loads those things from the dot end file and turns them into environment variables and then I can access them in the explainer script and later on I'll show you also in the text of Suite script so we have the openai API key and then finally the only thing that we really need to do is use openai dot chat completion so that's part of this openai package and basically send the information with a couple of settings so one setting is the model you can choose which model you want to use I'm using GPT 3.5 turbo in this case and then you can send it messages so one is for example you can supply it with a context so in this case I'm telling it hey you are a developer because I wanted to respond in a way that makes sense to developers and then finally I can also ask it the actual question so that's the whole interface to open AI it's one function really simple and then I have a couple of extra functions so one is a function that gives me the content so if I have to respond from sending the question to open AI well it's a Json structure so we need to navigate through the structure to extract what we actually need so that's what this function does then I have a helper function that actually does this it calls this send question function and then retrieves the answer so that does both of these things and I'm providing it with a question and with code so what I do in this case I have retrieve code language the question is explain in one word What language this code is written in and I have also a code explanation which is explain to me what this code base does in one paragraph I should probably fix the typo here otherwise we will get maybe a weird response so you also see that where I'm being pretty specific about the kind of answer I expect from openai so I want to know in one word What language the code is written in and also in this case I wanted to explain what the code pest does in one paragraph So we sort of limited in terms of how precise and how extensive it's going to be and basically that is that's the only thing you need to do in order to interact with the open AI API so you can definitely imagine how easy it is to integrate this into your own tools because it's just really a few basic simple steps if you go back to the app you see that I simply import the retrieve code explanation and retrieve code language and then I use it in the application and now since we're using streamlit it's also really easy to run this app locally the only thing you need to do is you call streamlit run app.pi so now you see it starts at streamlit and it gives me a local URL which I can use in the browser to view the actual application and this is what that actually looks like so I have a nice logo that's my new logo by the way I hope you like it and we're calling this the AAR John gold explainer and there's a couple of really simple things so just some description a warning and you can pick a voice so I'll talk about that later and then we have the drag and drop section here where you can upload your script or you can simply write some code here so let's see how this works so I'm going to write some code so for example um let's see very Advanced code this and then I'm doing command enter so now it's going to send it to the openai API and it has given me a response so there we have language Python and we have an explanation and what's fun about streamlit is that it can accept markdown so doing these kinds of things displaying code also in the code format makes it really easy to read so this is what we get from the open AI API to make this a bit more interesting let's try this with slightly more complicated code so here I have an example of a class that was part of some of my older videos I'm not even sure what I was trying to explain here but it's really simple it's a customer that has an ID a name and an email address and it sends a welcome email when you create this customer so let me copy this code and see what openai comes up with in terms of the explanation so I'm going to replace the code here and I'm going to press command enter and now it's going to send it again once more to the open AI API and this is what we get so language is still python good I'm really happy to hear that and then we have the explanation and it still does it in one paragraph So the explanation looks pretty good this is exactly what the customer class does and as you can see it's nothing more than simply doing few API requests that's really all there is to it now let's make this a bit more interesting by also adding text to speech because if you really want to replace me it's not just about generating text to explain code it's also about having the audio of somebody with a very soothing smooth voice to also explain the code to you so text to speech dot Pi does exactly that in this case I'm using the requests package because there is no specific library for the API that I'm using the one that I'm using today but there is a couple of other options as well is the 11 Labs text-to-speech servers and this is the API URL again I'm getting the API key from The Dot N file just like I did with the openai example and then a few helpers from that make it a bit easier so for example there is a function that helps me get the voice IDs so when you look at this application you see that I have a drop down here where I can select the voices and I got these voices from the 11 Labs API if you have a paid account you can also train your custom voices and then you can actually get my voice and make it even closer towards I'm doing on the YouTube channel but for now let's just use some of the existing voices because the process is exactly the same so other than that I have a few helper functions like saving binary to MP3 so of course we're getting we're going to get a response from the text to speech servers and we're going to store that as an MP3 file so we can play it back in the interface then the main function that converts text to MP3 is this function and again this is actually really simple really straightforward the only thing we need to do is we need to structure our API calls we need to create the URLs that we're going to use and also interact with this speech service so the first part is getting the voice ID so I select the name of the voice in the app and then this allows me to get the actual ID that we need to use when we do the API call this by the way we can also do this once this mapping so you don't have to do it every time you convert text to MP3 but for Simplicity I left it as part of this functions then we can create the payload so of course there is a message that we want to convert to MP3 and then there are some settings for example how stable the voice is and finally that's the part that interacts with the API so I've wrapped this in a while loop because I've noticed API is not always very responsive can we get slow sometimes so we want to make sure that if we don't get a response that the application doesn't completely block or something and finally if we did get a result from this text-to-speech API then I call the save binary to MP3 function that's also right here and again that's also really simple it just opens a file name it gets the binary content and then simply write that to the file now in the app what I did is I import this text-to-speech Library here and then I'm using it in the main function so here for example I call Comfort text to MP3 for language and I do the same thing for the explanation itself so I'll convert both of those things and if we have text to speech enabled then I'm going to show an audio player here of the language and the explanation so in order to activate text to speech let's change this to true and I'm also going to restart the streamlit app and now back to the AI code explainer and let's try something so first I'm going to select the voice and I'm going to select I don't know Arnold let's see this code is written in Python I'm going to use something else this time so this is another example of validating a credit card and let me paste that code right in here and then let's see if this works so we did get the language and the explanation from the openai API but it's still using a previously generated version of the audio that was used for the explanation so I can still show it it's going to be slightly different but you're going to get the idea python there Python and I also like how who is this this is Arnold I also like his tone of voice when explaining the code this code implements a function called validate underscore card which receives a customer object as an argument and returns a Boolean value indicating whether the customer's credit card is valid or not based based on the Loon algorithm it's really like authoritative you know disco defines a function called validate underscore card I really like that a lot I should maybe do that more in my videos I feel like I'm too friendly maybe I should be less friendly in my videos anyway as you can see this is really easy to set up assuming that the text-to-speech part actually works which I'm still fighting a bit with but it's really fun to play around with these tools and see how we can use them to make better nicer python applications so like I said all the code for this is available in a guitar story link is in the description of this video so feel free to play around with it take parts of the code that you want to use in your own application and see if you can come up with something really interesting now interacting with these apis in itself is nice because you then you can make it part of your code but another way that you can use these AI tools is by using them as a chatting agent to help you clarify your thoughts for example you can use it to help you with designing your software you can use it to learn about features of let's say the Python language you can use to learn about how apis work and let it give you examples of how to do things so that's all very useful but you do need to think about how you write your questions properly I mean one example that shows how important it is to ask the right question is how I actually phrase my questions here so here I asked to explain in one word or here I ask it to explain to me what the code base does in one paragraph So providing those sort of precise instructions are really important and there's a couple of other things you can do as well if you want to learn more about that I did a video about that recently you can watch that right here I'll be back next week with a new video thanks for watching and take care