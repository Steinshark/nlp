for this week's podcast we're going to take a look at a functional programming language called Rock it's born out of a language that I'm very fond of called Elm it's a really nice language and if you know anything about Elm then you might know this week's guest Richard Feldman he's been hugely immersed in elm's approachable developer friendly interpretation of FP for years now he's given loads of talks about Elm and he's been inspired by Elm because there's always been a limit to Elm it's just for the front end so in this episode we talk about what Elm means to him and why it's inspired him to build a language that breaks out of that front-end limitation but also really curiously why he sees that limitation as something very freeing and why he sees the limitations of functional programming as freeing and how he's trying to make a new language with comfortable limitations that works in many many different domains he's almost trying to make rock a universal domain specific language by giving each domain the right set of constraints for that particular task if you can't quite imagine how that would work we should get into it I'm your host Chris Jenkins this is developer voices and today's voice is Richard [Music] Feldman [Music] so joining me today it's Richard Feldman Richard how are you doing well Chris nice to see you it's good to see you too I don't think we've seen each other since some conference in northern Europe coup years go to Copenhagen 2021 that was where you you gave me the my favorite explanation of what a pure function is or definition which is a lookup table I love that I still I use that all the time now so thank you it's a nice way to think of it I think I got that from um some book on Lis macros or some variant of that idea but yeah very nice when we now I can't remember when we were at that conference I can't remember if you were talking about Elm or rock or you were just making the switch uh that's a good question I think that was the conference where I gave some sort of General talk I think it might have been why static typing came back no maybe that was a remote one oh it was a functional programming for prac ists I think which was yeah not not really specific to either rock or Elm okay but so a lot of people the people that know you a lot of them are going to know you because for a while for a good number of years you were the poster child for Elm you the face of elm I did a lot of elm talks that's for sure and I and wrote the book for Manning yeah Elm in action nice frontend Masters course intro to Elm and advanced Elm and yeah a lot of el stuff are you still doing Elm or have you moved on uh I wouldn't say I moved on it's more that I don't have time for things that aren't Rock especially now that I have a kid uh it's it's really like my free time is like 90% Rock and then there's a tiny bit of exercise and uh guitar in there and that's that's really it um I just don't have like there's even like projects I'd like to do in Elm I'd really like to go back and update Elm Spa example but like and Elm Elm CSS for a long time I had uh like pull requests that would be open I'll be like oh this weekend I'm gonna get to it and then after a while I was just like yeah this is never happening is it I'm just never gonna have like the bandwidth to do this stuff so I still love Elm I just uh I just feel like I have a more of an obligation to rock um because it's like if I want to make this new language happen I just got to put in the the amount of work that that takes and it's a very large amount of work because it turns lot of work and the price of a spare hour once you've got kids is very very different right yeah yeah I mean it's really like I mean it used to be like I got done with work and then it's like cool now I have the whole evening and now it's like I get done with work and I got to go pick up the kid and then go take him home and then feed him dinner and then give him a bath and then do some like play time and some story time and then then I get to eat and then it's like cool now I'm exhausted and let's see how much time I have for you know rock stuff maybe an hour and half an hour's worth of energy left yeah well then it's like well you know don't don't sacrifice your sleep because that catches up to you very quickly and so yeah a it's a difference I mean people have kids I'm sure are very familiar with this yeah you're you're listening to the joys of parenting podcast yeah I mean like it's it's also wonderful but it's it's definitely there's just a math problem uh yeah yeah okay so let's put it this way then there you are with a serious premium on your time and you decide to dedicate as much of that spare time as you can to rock so why why creating new language what's burning inside of you so uh you original motivation was um three I could break it down to three categories um so one was like I'm like I love Elm but Elm is very focused on front-end web development or at least that was true at the time now it's it's there's like a another thing that um is unreleased but uh is is also very focused and so I was like but there's all these things that keep coming up that are not frontend web development where there's this really big gap between the user experience I'm used to in Elm and really love and like the thing that's available and like the best experience I can possibly get in that domain so classic example of this is like web servers or command line apps um or native desktop like graphical user interfaces but another example is just like a Vim plugin like I was using Vim at the time and I'm like I really would like to try to write a Vim plugin but I don't want to do it in Vim script I want to do it in like an Elm like language you know um or like a database extension like I would really like to try that out but I don't really want to I was like looking at the options and it's like there's plpgsql which I'm like I don't I don't really like that um and there's like well you can do pv8 but now you have V8 running in your database like do I really want that and Evan made a good point about like you know now you have garbage collection pauses in your database do you want that like definitely don't want that so everywhere I looked there would be or like Arduino um there' be these use cases where it's like yeah if you want to do something in this domain your options are limited to like JavaScript or python or Lua or um uh like C or some some variant of that and I I was just like that none of these options excite me I really want to try to get some sort of elm like experience in these domains but I'm also like elm's never going to expand to these domains like the whole point of elm or or a major point of elm is uh is to be really focused and like doing a really really good job with this one particular Focus use case and so the idea of expanding Elm to cover all these things just just it's not really Elm um so what I wanted to try and do is to try and answer the question is there some way to try and 8020 recreating that experience and try to make it so you can have what feels essentially like an Elm like experience even if it's not like the absolute best to that one particular use case so that I can at least get that much closer to Elm or like an Elm like experience in all these different use cases yeah so that was that was one motivation another was um over the years I'd talk to Evan who made Elm uh about various ideas that I'd had for Elm and sometimes he would say that's actually not a good idea here's what you're missing and I'd be like okay good point good point I didn't think of that sometimes he'd say that's like a reasonable thing you could do but it's not what I want to do with this language so we're not going to do it and the third thing would be just like that actually is a cool idea we could try that but it's it's kind of like that ship is sailed like it would be too big of a breaking change to try like given how many thousands of people are using L um and so those second two groups are like well H you know I like this even if Evan doesn't I would like to try it or uh I'm really interested in trying this thing out but it's too late for Elm but it wouldn't be too late for like a a new language built from scratch so those were kind of like accumulating you know as we had more and more these conversations oh I should mention that like another category of things is EV would be like oh yeah that's a good idea let's do it and then like that is an Elm now um but of course you know those are there there's nothing burning inside me about those I'm just like cool good um so uh so that was like a second category of thing and then the third category of thing was just kind of thinking about you know I didn't really think about it this way at the time but over time it's it's kind of uh become an increasingly important thing to me is just thinking about um feeling sort of bothered by the fact that functional programming or like pure functional programming is not widely used in industry in all these different domains like you look at like what's the most popular backend language and you know you have to go very far down the list before you find hasell which is like the number one most popular you know uh backend language um you look at like game development it's like people are doing game development in C like I get people doing game development in C++ and in Rust and in C and Zig those all make sense to me I understand it you know you have very tight performance constraints but then people do it in like C and Swift like well if you can do it in an automatic memory managed language why is why is there no like functional programming option for like you know Game Dev on like a console not not even just you know like on a computer but like on a phone like something like that um yeah and so I just started thinking you know I don't think that it's it's like correct in the world that there should be no viable option like no mainstream option where people can just pick it up and say I want to go do Game Dev in a functional style and let's let's see how that goes in a world where like C and Swift are considered reasonable ways to do it um or or on Java of course you have like you know uh sorry on Android rather you have Java and cotlin um if those are all viable that I totally think they're a functional thing should be viable and in fact should be a really nice way to do those things and so putting all this together at some point I kind of reached a point where I was like I should do this like no nobody else is going to nobody else is going to do this I should I should just go and do it and I I have to admit that part of the motivation There Was You know I sort of finished the book Element action took me like four years to finally ship it I'd done these like courses on Elm and at that point I was kind of feeling like you know I want another really big juicy project to sink my teeth into but I don't want to like manufacture one in Elm just because that's what I know really well it's like I want I want some project where I feel like this is something that I can really devote a ton of time to this is before I had a kid so I had a lot more time you know back when I was asking the question of how can I fill my time with something rewarding um but uh you and your partner came up with a far more efficient answer to that yeah and like we we' plan to have a kid so like I actually was thinking from the beginning I was like okay everybody says when you have a kid like time is you know lower and so how do I plan for not having the project grind to a screeching halt when that happens um but basically I I was like looking for something where I was like I would like to be able to sink my teeth into something really difficult and that where it's going to be something I'm pushing myself and learning a lot um and so it's not like you know I did an advanced Elm course or front end Masters but it's like I didn't really have a sense of like um there exists a project within Elm that I that that fits that characteristic so it was It was kind of exciting to me to be like this is something I can work on for like a decade plus and and you know if I'm successful at it then it'll be really rewarding um and so that was also sort of part of the motivation so anyway all these things came together and I was like okay I think I'm going to do it um and so I kind of in 2018 I started sort of drawing out some designs and like what had all these ideas like how do they all fit together like how do we try to do this recreating the elm Feld and this long tale of domains um like 8020 style and I talked to Evan about it and his his initial impression I remember like I I told him at a l meet up in in San Francisco and he he he he got this like smile on his face he's like this is a very U language which I I I I kind of like you know there I have guesses about like you know the different things that he meant by that but um but I definitely take that as a compliment um so he kind of like helped me out with like here's okay you're gonna need to read these papers about like you know type things and uh here's how to understand the notation of these papers so he was he was very encouraging and helpful um and uh yeah so so I started doing it and uh I don't know uh fast forward four five years and uh now we have a real website and like people using it and uh it's it's become a whole thing so what are your what are your uh defining domain features for this language and at the same time what do you think makes Elm so special that which bits did you pick of that that you thought these a priori is to having a language yeah okay so um so to me one of the essential qualities of elm is the thing I was mentioning earlier which is uh having a sort of domain specific focus and you know although we can't completely replicate that while sort of targeting the longtail of domains one of the things that I do think is really valuable about that is having sort of a cohesive design for that domain so as an example of this so rust has in its standard Library as most languages do ways to interact with the file system you can do uh you know read from a file write to a file um but then you take rust and you put it in a web application like there's this framework called you ye ew for rust that's like okay compile your rust app to web assembly run that in the browser well then the question in my mind immediately becomes whatat about all these things in the standard library that aren't available in the browser like file system access like what happens if I call one of those or more importantly what happens if I use a dependency that calls one of those like I have some Rust dependency that I depend on that maybe it depends on something else and somebody just added a little oh we'll have a little Onis caching feature and maybe it doesn't come up all the time but all of a sudden you know I'm running my app and like what happens I mean I have to assume it crashes or something um hopefully I mean ideally my app just wouldn't come compile but I don't expect that because it's using stuff that's in the standard Library so things like this just don't happen in Elm like an Elm like the entire ecosystem is totally cohesive it's like you want to use it for browser based stuff the only things that are available in the whole ecosystem are things that are available in the browser and so you just don't have that problem or you think about like a database extension or um you know do you want your database extensions using the network like just willy-nilly yeah I don't know like if I have a dependency that's like oh I'll go check for a new version of you know unicode or time zones or something like that do I want that happening in the middle of my database without knowing about it probably not so I think every domain can benefit from having some sort of first class concept of like this is the domain I'm working in here are The Primitives that are available and they're sort of tailored to that domain that's something I found in Elm that I haven't found in most other languages um in fact very few other languages so that's definitely something that we want to replicate and rock and so um the way that we do that is we have this concept of platforms and applications so a rock platform refers to sort of the domain that you're working in it's it's something like a framework um so every application that you build has to have a platform like you have to pick a specific Rock platform to build on and that platform's job is to do provide all the domain specific Primitives so rock standard Library actually does not have file system stuff it doesn't have any IO at all that all comes from your platform so for example if I'm doing a web server platform it'll probably have things like file system and TCP um but it probably won't have like read from standard in because if you're building a web server why do you want to block on like you know hey let's wait until we get input from standard in that's probably not doesn't make sense in the context of a web server but if you're building a command line app of course that makes sense that's that's you know a totally normal thing to do um so sort of differences like that like like being having this domain specific focus and we can get into this a little bit later but um one of the other things that platforms do that's different from like a frame framework for example besides being in charge of IO is there also in charge of how memory gets managed to some extent um which has some cool performance benefits that are kind of behind the scenes and you just sort of get for free as an application author okay are you expecting people to write these de these platforms for rock or is it something that The Rock authors provide um so we already have a couple of these uh so the two most commonly used ones are it's called basic CLI and basic web server and as the name suggest it's a wait a platform building you know CIS it's pretty basic one and then same thing for the web server and then we also already have um a couple of variants of that and anyone can build a rock platform it's not like a um you know you need like special well I guess you do need special knowledge in the sense that it's not very well documented currently how to build a platform we have a lot more all the documentation kind of focuses on applications um the platform authoring story is a lot rougher right now I mean Rock still work in progress and that's an area that's very work in progress um but yeah like we so for example um we have like a a Tui like a terminal based UI where you have rather than a typical command line thing that's just sort of like well we'll do like print some stuff and then wait for user inputs like you know you have like the keyboard like arrow keys moving stuff around rendering on every frame um and then you also have uh in addition to the basic web server there's another um project called Nia Nea uh which is a fishan word actually for for never and it also kind of could be short for never ever allocate um but basically what it does is it it presents the same kind of is basic web server for just I want to build my web server but behind the scenes it does things differently with memory management where you never get garbage collection pauses and allocations are much more uh cheap because basically what it does is every single web request uh you get the request comes in all the memory allocation for that entire request goes into this little Arena that's dedicated for that request and it's bounded so you can say like you know I only want to allow this much memory per request if any given request goes over that it's going to immediately 500 um and then uh as you know as long as you don't go over that then basically it just keeps allocating into this one block and then at the end once you've send the response back it says okay all of that is now garbage and it doesn't even need to free it it can just say all right somebody else gets this now some new request gets that that memory so it's really really cheap in terms of memory management it's very far from like Mark and sweep garbage collection across all your different request handlers um but uh you know it does have trade-offs it's not like that's you know just an unalloyed good it's like you know you have to decide how much memory you want to allow for each of these things and so forth and so that's a good example of sort of innovation that can happen by someone saying hey I've got the same constraints like the do same domain constraints like the same Primitives for this platform versus another one you can now try it out as an application author and if they have compatible apis I can just change one line of code and try out this different platform it's like cool everything still works but now your sort of engine under the hood behind the scenes is different um so yeah this is the type of stuff that uh in Elm is not really possible and on the one hand that's good because it means you don't have these sort of like different decisions to make like one of the things that people love about Elm is that you can have this sort of um like all the questions have been answered for you at that level thing it's like it's a cohesive ecosystem built built around like like basically nobody uses Frameworks in Elm it's like you know you have the basic HTML stuff you have HTTP stuff everybody just kind of uses the stuff that ships to the language that's a selling point of the language yeah yeah Rock can't have that selling point because we have sort of longtail domains Focus but a corresponding upside that comes with that is that you can get this sort of um experimentation with like different things in the community and people can try out different approaches like that and maybe it turns out everybody loves the Nia approach and and gravitates towards it and maybe some people say our allocation patterns are such that like they're kind of all over the place some requests use a tiny bit of memory some requests use a huge amount of memory and so this just doesn't work for us maybe somebody else tries A variation of Nia that accommodates that with while still you know trying to maintain the benefits there's all these different ways that people can do those things and I think it's really cool that it is um you know possible to do that um I don't know of any other language specifically when it comes to memory management that has done that do you foresee someone writing um a platform um that's specific to the front end and eventually subsuming Elm uh well eventually subsuming Elm no I don't I don't see that happening um but it has already happened that people have tried uh building rock you know um like web assembly and like building a front end UI think so it turns out because of the way that rock is compiled it's not quite possible to do the elm architecture in the same way that Elm has um there's a lot of details behind that but if you try to just do the normal like HTML message thing that everybody loves an Elm um it it's not you can't quite implement it in rock uh for various reasons uh there's like you could do it like an extra type variable which is like kind of unergonomic and y y um but uh to me um I think one of the things that makes Elm so great for the front end is that it's so tailored to that and is able to do things like Elm compiles to JavaScript if you're comparing compiling web assembly to JavaScript I would have thought back in the day um when I first heard about web assembly like oh that's just an upgrade like you compile to web assembly you get to go faster amazing well it turns out now that we've actually done some compiling to web assembly it's it's not that simple it's actually there's a lot more complexity that you don't have if you're compiling to JavaScript for example there is no way in web assembly to directly access the Dom at all you have to go through JavaScript so what ends up happening is if you want to build a web assembly application like you or like you know doing it in rock you have to compile it to web assembly and then there has to be this JavaScript layer that does all the Dom stuff that sort of communicates back and forth with web assembly and of course there's overhead there so it's like maybe your individual web assembly things are running really fast but unfortunately the corresponding downside of that is you have all this mandatory extra overhead of sending stuff to from JavaScript in order to do things with the Dom so a it's it's not a given that the web assembly version is actually going to be faster B it's also not a given that the web assembly compiled asset's going to be smaller it might actually end up being bigger especially because Rock has a monomorph ising compiler which is great for other domains but not as great for the web so to me it's like I totally understand the impulse to want to build that because a lot of people like having the exact same language on the client as on the server um you know rather than for example having like two very similar languages like El and rock are very similar personally that's what I'd go for I'm like Elm is the best at this and there's a whole ecosystem and so forth um and like you know pair that with rock on the server um but I totally understand that you know some people like want to do both but I don't really see that leading to like rock rock sort of like subsuming Elm in the same way that like just because it can be done you know like people will simulate Elm in like typescript and you know it's it's just not the same experience um I think the experience would be a lot closer with rock than with something like typescript but at the end of the day I think you know there's there's just so many nice things about Elm that are that would be really hard to replicate and rock you know even if we've got this sort of 8020 thing that in that one domain I just don't think it's ever going to be as good but you know maybe people will prove me wrong but uh that's that's just kind of my prediction okay okay so let's talk about some of those features of Elum and whether they've made it into rock for instance one of the headline things is it's like it's probably the most userfriendly version of a hll like type system that I've seen in the wild and it gets there by like simplifying let's let's not say dumbing down but simplifying the hasal type system to the greatest hit that's that's one way to look at it I think um so if if you're coming from a hll background I can see why that would be the way to think about it but like Evan did a lot of like standard ml in college and I mean he learned haskal later on but I don't think you know I can't speak for him directly but I don't think he thought of it as like let's take hle and let's subtract things but rather like let's start from standard ml which is already a lot simpler and make some adjustments to that based on what I've seen in Haskell and O camel in these other languages and I think the main thing that Elm takes from Haskell is actually syntax if anything um like compared to sard ml um and and also of course the idea of having pure functions for everything and like taking out the you know direct mutation capabilities um so rock does all those things too uh but yeah I mean definitely for me pure functional programming has always had its benefits rooted in subtraction it's about like taking the whole possibilities of what the CPU can do and saying we're going to intentionally restrict that to this subset of things that you can do because there's a bunch of benefits if you do that there's a bunch of um you know it's not like you're just taking capabilities away from yourself for no reason you're taking them away because then there's this whole category of things that you don't have to worry about anymore and these and it unlocks these other things that become a lot easier to optimize or to um to improve in various ways that if you have the full range of capabilities become a lot harder to do or to do reliably especially across a big ecosystem um so to me it's not so much about starting with like hascal and simplifying it's more like starting with you know uh pure um some sort of like arbitrarily large language that can do mutation side effects whatever and then saying okay let's take out mutation let's take out side effects let's take out this and that and then figure out what's the sort of essential core and then if we have to and we run into certain use cases where we're like this is really unergonomic we need to add something back in to make this use case work then we do that that's kind of how I look at it and I think that's pretty similar to how Evan looks at it to with okay okay have you hit any of those on the back end that are new uh things that we like that were unergonomic that we wanted to add something this is a complexity that we just have to bring back in because it's not going to work oh I see um so it's not backend specific but it is long taale of domain specific so one of the things that Elm does is that it has um so I'll contrast it to hasell because I think that's the easiest um or or to rust I guess so in Haskell and rust and also now in rock the way that you have two things be uh equal to one another is you have in has they call it a type class and Russ they call it a trait and we call it an ability but basically you say here's what equals means for this particular type like I'm defining some sort of new type um and in that type I'm saying equals semantically means this so whenever you use double equals on these things it's going to run this function on this particular type so that's quite useful if you're defining custom data structures like if I'm making a custom hashmap or custom tree or something like that I want to be able to have these in my tests and say like okay my test I want to assert that this thing equals that thing and in that world where I'm saying um I want to be able to Define what equality means in a in a sort of custom way um I also want to be able to say well hash should also match up with equals and there's ways you can do this um so I have a a package in Elm called Elm sorter experiment or Elm sort experiment something like that um where I basically just said okay well every time you want to do equals on one of these you know trees or whatever um you have to pass in a compartive function that tells me how to compare its elements uh for for sorting purposes so sorting equality hashing all of these things are sort of in common um and in Elm it's like well okay we have a certain set of Baseline data structures that where this is all well and defined defining your own custom data structures just does not come up that much in Elm my expectation though is that when you have a lot more different domains that you're targeting it is going to come up more so there's this blog post um from people in Elixir who talked about uh sorry some a blog post by a company that was using Elixir and I think it was maybe Discord um but they basically had a chat client with a huge number of channels in it and they talked about how they needed a custom sorted set data structure with really high performance characteristics for dealing with the situation where you want to keep the list of users sorted all the time but people are joining and leaving the channel or the chat all the time in real time and you just need something that's that's really dedicated to that that's an example of the type of thing that I think is really difficult to just satisfy by making the standard Library bigger and bigger because depending on your use case you're going to run into all sorts of different variations of things like that so um so we really wanted to have some way that people could make their own data structures and Define what equality and sorting and hashing means on those um but I explicitly did not want to go as far as like hasle or P script do where um you have higher kinded types where in addition to saying like in hasool type classes you can say here's equals and here's hash code and here's um uh sorting uh but also you can go a step further and say here is uh a monad and here is a monoid and here is a funter and and sort of classify things in that way depending on who you ask that's a great feature okay depending on who you ask they'll say traversible is great what about traversible um but but um but there there is definitely a lot of added complexity to the language there there's definitely a lot of downsides that I don't hear talked about as much as the upsides um and I just didn't want to have that and rock as a language um that's one of the things I would want to subtract if I were starting from a hasal perspective so uh so the design ended up basically being that you have equals and hash and we actually don't have sort yet um inspect is about to land which is a way to customize when you're um debugging something like debug printing it you can customize that too okay um and so basically all these things are designed to address the fact that unlike Elm we do have this sort of broader scope and I I anticipate that wanting to customize those those things is going to come up a lot more often than it does in N okay okay so I'm just I'm just trying to think how this is going to play out when you've got several platforms working for roughly similar domains like from what you're saying I can foresee a future where you have a platform that's specific to writing postgress triggers totally yeah right and how is how is someone going to write that platform what do they write do they write it in rock great question so um the short answer is that every platform has two pieces to it one part is the public facing Rock API and if you're a rock application author that's the only part that you see is like oh here's here are the rock things that I can use The Primitives um the other part of it is the low-level implementation and we call that the host and that's always written in a language that's not rock so every platform has The Rock part and the non-rock lower level part that sort of implements All The Primitives like at a a really low level right so you can use whatever language you want for that um but it needs to basically be something that's like compatible with C so you could use C itself or C++ or rust or basically any language that does c interop um actually right now at work we're using we have this big no JS back uh backend vendor V ndr that's the company I work for now um and it's this very large no JS backend and we're introducing Rock to that by basically using no. jssc interop so we have this sort of custom platform that's just designed to be like use rock on node.js um and the idea is essentially that any anything that can call a c function can call a rock function so that includes no. JS using its C interop and so I have it set up there's actually a um a thing we've published called a rock es build that just if you're using ES build uh with node you can just include this and then you can now call Rock functions from node and that's basically the way that it works is the platform's job in that case is to translate it's it's a little bit of C code that translates between here are your rock types uh in memory and let's just get those and translate those into node types and then back the other way such that nodejs you call this rock function passing a node string which is actually totally different in memory from a rock string right and then that gets translated by the little uh platform glue into a rock string and then the rock function runs and gives back an answer and you know whatever Rock data structures those get translated back into node and off you go um and so you can just do that in the middle of your you know you literally import a ro file now you could just call Rock functions from node that makes me wonder what I thought I had handle on what rock was but now I feel like the ground has been pulled out from under me if you've got like rust and JavaScript under the hood and rock user space functions above what's the layer that's actually Rock So essentially I mean the the part that's rock is or the part that's 100% rock is the application code so or or any libraries that it depends on so for example my co-workers at work all they have written is Rock code none of them have done any of the C stuff I'm the only one at work doing that that sort of glue layer um what they see is basically like okay here is a way that I can call a rock function from my c code so for example they'll just say all right um we have this part of our codebase it's it's doing these calculations I want to rewrite that in rock they'll introduce a newro file uh we have our build set up already so that you know when you as soon as you import that it knows what to do and it'll compile that and set up the interupt behind the scenes so they write the rock file import it in their typescript code on node and then they just call it and it just gives back an answer and and it's almost as if you were calling a typescript function from their perspective the only difference is instead of importing a TS file they're importing a rock file okay so this is an example where you know unlike like basic CLI and basic web server which are very much like the platform's job is to provide this sort of very generic um experience for like you know you want to build a basic web server completely in Rock from from the ground up here the the platform is serving a different purpose which is to be sort of a binding layer where rock is almost like this this uh scripting language or like this this new thing that you're introducing to a very large existing code base so the the platform scope in this case is like the entire existing vendor back end and then you know but but the same strategy still works so the important part is that the end user experience when they're writing the rock code is just like yeah I don't know everything you know that's available to me just works here like I I can any PR that's here will work fine um we can also introduce New Primitives um this is not something you would normally do in in a sort of general purpose platform but in a bespoke platform like this where you're just trying to introduce a new language to an existing codebase we can do stuff like I'm going to introduce a new platform primitive that's like make this very specific request to our database which is all wired into node and all that stuff but on the Rock side you're like I don't know it's just a function I can call and it's going to do the database thing so I don't care how it's implemented just like how in basic CLI I don't care how the function to like read an environment variables implemented that's all behind the scenes details all I care about is I have this nice rock API that says here's how to use these things and given these Primitives they all fit nicely together and work really well and so our strategy in this case is we're trying to incrementally transition the back end from um from being all node.js to being someday all rock is is sort of the ultimate goal um but you could also imagine somebody using a very similar thing in like a game where you have like a large C++ or rust or whatever codebase and you're like you know there's this one part of my code where it's not as performance critical and I just want some nice language that I can just work quickly in that's memory safe Etc you can just do that and rock and have the rest of your whole code base be you know the game and maybe you don't ever intention intend to transition the whole thing to rock but again you can provide all of your game Primitives to rock all these you know lowlevel draw this draw that whatever operations and rock can just sort of be like Lua just a little bit of an add-on actually the original joke name for for Rock was Ty pure functional Lua that was the joke name before it got the name Rock because you do get a lot of games where like the main engine is in C+ plus but then the like the scripting for the MPCs that will be in something like famously I me I yeah I I don't personally have any Game Dev experience I know there's a there's sort of a spectrum is is what I've heard some people will say I don't want to use any scripting language and then some people will say I want to have a game engine and then I do everything in C or you Swift or whatever and then some people are somewhere in between well they'll do like a mix of like a lot of C++ code but then some bits are are Lua um you know like I said not my world but the the point is that rocket has turned out to be um very well suited to being embedded like that okay now now I'm starting to wonder if I could do something like build a rock platform that was specific to say Kafka sure I don't see why not I mean I don't know uh I I've never used Kafka directly um so I don't know like I know if there's a query language or something like that but yeah I mean anything where so actually we have examples in in the Rock repository of people doing really basic like Hello World level stuff but like calling a rock function from Scala and Java and cotlin and Ruby and python like basically any language that has C and rock which is kind of like all of them you can call Rock functions from that so you in a way you're seeing rock as the sort of universal domain specific language that's a yeah I hadn't thought of it that way but that's that's a pretty good way to put it yeah okay you can have that for the marketing if you like yeah I mean the tagline is fast friendly functional language which are sort of like the values that you know like the main overarching design goals that I think are are powering the language um but in terms of use cases I think that's a pretty good way to think about it yeah okay what are you writing Rock the compiler itself in is it in C uh it's in Rust it's in Rust okay yeah so I uh when I started out I basically was I hadn't really done a significant amount of low-level programming since like college and then before that middle school so I really and I was never really very good at it I always like get seg fults and stuff and so I remember thinking starting a new codebase from scratch I really really want it to end up being as fast as possible so I want to use one of these languages that really doesn't put a a ceiling on how fast this can be it's it's like maximum performance I'm not really sacrificing anything because of I spend like 10 years of my life at least you know working on this thing I don't want to end up saying like oh and now if you really want to be faster you got to rewrite it in rust or whatever so I didn't want to I didn't want to have that happen so even though I didn't really know much rust at that point I I had like very Li limited amount of experience it was at the intersection of having this promise of you won't get segals in this language you know as long as you can get it to compile you you'll be safe from that and also the performance ceiling is essentially unlimited um I think if I were starting it over today I would have considered a lot of alternative languages I don't know if you know Russ would have been like the best choice like um Zig is is the one that would be really tempting for me um because in comparison to rust Zig is a much much simpler language and certainly the memory management part which now that I've like seen how the compiler is shaken out it turns out that the memory management is actually very simple in terms of like what we need because basically we don't want to do a bunch of like allocations and deallocations that's inefficient we really just want to say like all right we're starting up do a bunch of allocations for you know parsing and canonicalization and typechecking all that stuff and then once you finished everything and you've compiled the output artifact that was all garbage throw it all away so the fact that rust provides all of these like this detailed tracking for all these lifetimes our lifetimes are actually really simple so um with that in mind I don't know that I would have chosen to sign up for all of the complexity and especially long compile times which really bother me increasingly now that we have this big rust code base like 300,000 lines but you know uh at any rate um that's that's you know at this point it's sort of like rust is what we're going with you know we're sticking with so uh it's it's kind of a mood point but yeah um been overall happy with rust though I mean it definitely delivered on that promise of like you know we don't get seg fults all the time in the compiler we still do sometimes because we are generating machine code like there's no Rock doesn't compile to a VM it's just like straight to b u bit code like the the actual machine code um so uh because of that we we sometimes generate code that has seg fals because it doesn't have a borrow Checker it's just CPU instructions um but uh but overall yeah like I mean rust I think uh deserves its reputation for like memory stability and safety okay this is something I wanted to ask you about because rock you in a in rock you're essentially writing a compiler that compiles to two different targets right web assembly and assembly assembly uh well more than two um so so because we're so uh we have four different uh compiler backends which is to say things that like output the final artifact uh so web assembly is one um another one is x86 assembly or x64 assembly another one is arm assembly sorry I'm saying assembly I mean machine code uh web assembly is you know whatever binary same thing with those um and then the the last one is llvm which is in its own category because a it's different than all those other ones and B LM itself can actually compile to web assembly and to arm and and x64 um the problem is that it's quite slow so we use lvm uh to like when you do an optimize build you passed Das Das optimize and now you're using lvm instead of one of those other ones and basically what that means is your compiled program will run faster but it's going to take longer to compile right so even if you tell L you have to do zero optimizations as it turns out it's still quite slow to generate that code um to the point where what we were seeing was on like non-trivial rock projects um almost all of the time in compilation would be waiting for llvm and also for linking which we're doing our own linking as well um but basically it was like all of the parsing name resolution type checking monomorph isation all of that was just kind of a drop in the bucket compared to waiting for llvm and then waiting for linking um so we yeah we ended up just doing our own like go straight to machine code um those are partially in use right now right now only the reppel is using all of those we haven't quite integrated it into the like full build system but that's kind of like one last step that we got to get over to be able to use those uh Dev backends as we call them like the development backends um but yes there there's a lot of that going on in the compiler okay is it it's just I'm sort of stepping back and thinking of the scope of this and you don't have a background in writing programming languages right that's true this is the only one I've uh well I I I can't say that I've written the whole thing I mean there I'm not even the number one committer anymore I'm Number Two now someone someone's passed me by uh fulker shout out to foger he's awesome um but I mean we have a bunch of people and uh and they're all sort of um have different areas of expertise like things that they're like the best at and I'm I'm really not the best I don't think at any one thing in the compiler anymore um like when I started it was just me like all the commits um but now like for any if you look at any point in the compiler I can say well Brian Carol's the web assembly guy like he he's your man if you want to know you know how the web assembly part of things works and if you want to know about the linking talk to Brendan and if you want to know about type checking especially when it comes to abilities talk to AAS and if you want to talk about you know monomorph isation talk to fulker and you know it's it's really um become a lot more of a uh sort of the the more time goes on the more I'm more time I'm spending on like project management and like thinking about how all the feces fit together and like who's working on what and like um like design stuff and less and less like I'm I'm sort of like driving the project forward through code because there's other people who are doing those things like you know better than I can I actually ended up spending a lot of time most recently on coding the website because um uh not not that like we didn't have people who are capable of programming a website but more because I I'm just very particular about like how I wanted things to be communicated and so forth um so uh and and you know how how things to be presented so a a common question I'm asking myself now is what can I spend my time on that is sort of like Irreplaceable to me where I'm like it's something that I you know even if I could delegate it I really don't want to because I feel very protective of that particular thing and certainly one of the things is like how are we communicating about the language that's the thing that's very important to me that I I really want to control um whereas with something like type checking or or monomorph isation or code generation those are very very important but I feel a lot more comfortable like explaining to someone else what the goals are and then just sort of saying okay you got this um so yeah it's it's it's an interesting how how the project has evolved over time in that way ah interesting I've got to ask you about that but I have to briefly since you brought it up ask you what's Rock's website written in oh um a combination of things so the way I think about the website is um at the end of the day I really want the final compiled artifact to have certain characteristics like I I it's really important to me that okay so really simple example of this um back when when Brian Carroll first got involved in rock we didn't have any web assembly support at all like basically when people would ask like hey does Rock Target web assembly and my answer would always be technically llvm can admit that but we haven't really tried um Brian completely changed all that so he wrote the whole like dedicated web assembly backend without LM at all just going straight to the binary um he just just completely overhauled Rock's ability to compile web assembly and now actually web assembly is the most complete backend that we have now thanks to him um so shout out to Brian um but basically he was asking um you know like like why is it not more prioritized and I said well honestly like we just don't have people who have like use cases in mind for it I mean the main thing that I'm excited about for rock targeting web assembly is I would love to have a repple on the homepage that's running completely in the browser so that if we ever get on the front page of Hacker News it won't flood our tiny server and take it down and then people are trying to come and try out the reppel and they can't because they're getting errors because our server is hosed um okay and U I mean very recently that literally came up because we have a completely static website we have no like our there is no Rock server backing any of this stuff on the website it's all on netlify and just static assets including the web repple which Brian got down to six megabytes because which is you know not not nothing but also it's it's the whole Rock compiler like when you use that reppel on the homepage every time you enter something it's compiling web assembly on the Fly it's like compiling monomorph ising typechecking generating web assembly and then actually sending that web assembly back to JavaScript so the JavaScript can evaluate it because that's besides no Dom access another thing that web assembly can't do is you web assembly is also not allowed in the browser to run more web assembly so the web assembly in the rebel has to go say hey JavaScript here's some new web assembly that run the JavaScript says cool I'll run it then tell the old web assembly what the answer was so there's a lot of intricate Machinery going on in that little like you know rectangle on the we page um yeah but so that's the type of thing where it's really important to me that that runs really well like it it needs to be like the and I even spent time like we have a list of sponsors across the bottom like corporate sponsor um which if anyone is interested in sponsoring Rock by the way we happily accept donations on on GitHub and and Liber not sure how to pronounce that and also corporate sponsors just DM me on zulip if you're interested in that um but like they all have um logos that thankfully are are svgs so I actually inlined all those logos into the HTML so they wouldn't need extra Network requests and also I used classes for the white versus black parts of them so that their their letters are still visible in light mode versus dark mode ah so stuff like that is really important to me how all of that is generated is actually not that important to me so I actually used to just use plain HTML and then at some point someone um implemented A Little Rock DSL for um for generating static HTML that looks a lot like LM HTML um so it's very familiar to all of us and started using that just as kind of a way to get like okay we'll have a common you know header bar across all of these just like basic code reuse stuff um and so now a lot of it is written in that and then also uh it does some markdown parsing um but at the end of the day I'm you know if we were doing a really complicated web app of course I would reach for Elm but this is just a static site it's not like we we we need like Elm architecture for like complicated State Management it's like we have a tiny sprinkling of JavaScript for like a couple of little interactive things but okay um but it's really like uh my goal for the website is really that it's like it's largely static and actually one of the things that I try to do is I try to make it so each page to the extent possible Works without JavaScript so the homepage actually if you disable JavaScript um because I there was a time in my life when I tried browsing the web that way and eventually I kind of gave up but it was really nice how many pages loaded instantly so uh if you go to the homepage and you turn off JavaScript what you'll see is everything works except for the reppel which is just hidden we just because that that can't work without JavaScript but everything else Works including at the bottom we have a large code sample that's like interactive you can click on things to show like an explanation of what that piece of code's doing I actually did all that using CSS so that uh you know if you if you're browsing with JavaScript turned off it it still feels like it works um so uh anyway that's that's what's important to me is like the the Final End user experience not so much like you know how are we're building it okay I can see I can see why you're holding on to the design of the language rather than the implementation then um I have to ask so if someone's curious to play around with rock what's the status of rock at the moment uh so you definitely can uh so we're we're before our first uh numbered release like it's all nightly releases right now okay um so there actually isn't that much stuff changing right now if you go to the um I think it's the community link on the web page um we kind of have a little link to some sort of upcoming plans of things that are like in the works um there's a there's a known coming breaking syntax change around how imports work um which is motivated by a really really cool feature that I'm very excited about but that's going to take so hopefully we'll ship that in 2024 we'll see um but basically it's uh it's from my perspective like I don't see how do I put this um okay so there's there's a lot of different uh trade-offs around introducing like numbered releases to a language and one of them is a communication thing like as soon as you have a version number people start having different expectations I remember seeing a really strange in retrospect comment but at the time I was kind like yeah I kind of know what they mean I think it was on Hacker News where someone basically said you know I have certain expectations of an od. 2 release of a language and I remember thinking like you know I I know what he means like it's it's not uh it's not like I have no expectations but at the same time it's kind of weird it's it's like clearly what someone's trying to communicate with a zero dot you know release of a language is like this is unfinished expect things to not be you know totally polished and that that there's going to be breaking changes yeah um so I kind of like partly I'm thinking of it as like well maybe no version number is the new .1 you know that's that's how you really communicate that like look you're you're dealing with something that's unfinished and like still has a ways to go so the reason that we decided to sort of redo the website and make it like a real website because before we kind of had this placeholder that just had a bunch of text about like explaining things um the motivation there was to just sort of communicate like hey this is a real thing you can try now but everywhere you can like install it or in the tutorial and stuff we try to take care to to note that like hey this is an unfinished language it's definitely like you're going to hit compiler bugs you're going to hit you know things that are just not there yet um so I would definitely encourage people to try it out I would say if you want to try and use it at work just know that you're you're entering you know risky territory it's it's it's not going to be uh like totally smooth sailing because there are things that are unfinished that are unimplemented yet uh that there's going to be compiler bugs compiler crashes um so you know we're comfortable using it at work because I'm sort of there to to make sure that you know like things can't go too wrong um but but definitely I think if you want to start using rock on a more serious project I would strongly recommend like getting involved in like a zulip chat and like telling people like hey here's what I'm planning on doing and then people can tell you like well here's what to watch out for here's the things that you know the sharp edges you might run into and you know we can give you some support with that whereas like a year ago I probably would have just said don't do that like don't try don't attempt a serious project at Rock because it's just not it's not going to go well now it's more like well as long as you're okay with the sort of bleeding edge experience and you you're you're comfortable running into some problems and having to work around them um you can totally do that now and it's sort of crossed over that threshold where I went from sort of recommending against it to being like well let me give you a bunch of caveats and if you're okay with those caveats then go for it there's a lot of things to really like about the language already today and obviously we're working towards a future in which I can just say it's great go try it but we're not there yet right it's growing up it's gr not that level and away from production what about the other end of the spectrum if you want to learn Rock is there a good way to learn it at the moment or are you assuming someone's coming in with a certain amount of knowledge oh sure I mean so there's a tutorial that just kind of explains like here's how to bake a command light app and rock um we should probably also make one of those for other platforms like the web server um I I I've sort of toyed around with the idea of maybe expanding the tutorial to start you off building on the command line platform and then uh because when I first wrote the tutorial that was the only one we had um and then sort of maybe transition towards the end to being like okay and now let's let's build a web server and then you can use the command line to talk to your web server you just built um I think that'd be kind of cool but uh we'll see if I actually do it but at any rate that's the tutorial I think is plenty enough to get going on application development however if you want to learn how to do Platform development basically the procedure for that right now is just kind of like ask people because um there there isn't a tutorial for that and part of the reason there isn't a tutorial for that is that that's an area that's like sort of heavily under construction and the tutorial would get outdated pretty quickly if we did have one um right so yeah hopefully that will change also over the next year but uh we'll see do okay so maybe I'll make this the last question but do you foresee a future where there's like a package manager where you download libraries and another package manager where you download platforms or how's that going to work oh so I think it be all one package manager um so uh I mentioned earlier that there's a syntax change for imports part of the motivation for that is there was a long-standing design question of exactly how do you want to be able to share common packages across platforms so a really easy example of this is um error reporting so I I used my previous job we used bugs snag for error reporting um at this job we use Sentry let's say that someone wants to publish a Sentry or bug snack package that says here's how to like you know report an error or you know the report let log something that that's happened well you can imagine wanting to use that on like a web server platform also on a CLI platform maybe in your native desktop app platform mobile app whatever um all of these things uh you know sort of raise the question of well if they all have their own different set of IO Primitives and this is something that wants to do IO how do you write something that's of platform agnostic while still that does IO operations yeah so we came with a design that actually has oh it's it's awesome I'm really really excited about it um if you want we can get into it um uh but uh but basically the the upshot of it is that um what what will end up happening is that you write that platform and essentially it declares in a way that's has a turns out to have a bunch of side benefits like here's what I need in order to be able to run me I need some way to do HTTP requests which means I need a function that's it's like given a request run this task and then it's going to give back a response if you can provide that primitive for me if you have that available somehow then you can use this package if you don't have that then I'm sorry I don't I don't work so in your hypothetical uh database extension platform where you just don't have you know that function available then you just can't use this package at compile time like you it's not like you know you run and you get an error it's like you just cannot depend on that you you'll get a build error um so what's cool about that is that it's also flexible so even if like the command line app has a slightly different way of doing HTTP than the web server and a slightly different way than the native desktop or the mobile whatever um it doesn't matter because at the end of the day as long as you can provide that function which does that thing then bug snag is cool and you can use it and just you know everything just works um so that's sort of where the design ended up so now you can have completely platform agnostic packages even if they do I/O obviously if they don't do IO it's like okay you only depend on the standard Library you know go for it no problem and who ends up writing that kind of bridge if you've got two platforms with the same capability but different apis who Bridges them into the bug stack oh I mean you don't even there's no Bridge necessary really um so basically the the design of the the Imports feature that makes this work nicely um is such that as soon as you import bug snag it just it sort of gets wired up if that makes sense uh it just looks like in um basically if I'm running the bug snag module I can declare at the top of module I need access to this function that has this type and if I don't have access to it then give an error if I do have access to it then it's like this is how I do htdp so I just call it and I don't know what the implementation of that function is going to be yet um but I don't care because I'm just like look that's a dependency I have in order to import me you must provide this given that you provided this I'm going to call this in all my implementations and that's it okay but if you've got one platform that had two platforms with it get with a HTTP API but one of them thinks that the URL should be first and the method should be second and the other one thinks the method should be first and the URL should be second yeah great question so the answer there is that um culturally what we want to encourage is when you're dealing with operations like that we want to encourage platforms to do the lowest level thing possible so rather than saying I'm going to um like bug snag saying I need an HTTP that requires a URL that's a string versus a URL that's a list of bytes or whatever um it's it's rather that you have something much more lowlevel than that that's like I I need something that has these exact like pieces to it and um if someone wants to build an HTTP request thing on top of that they totally can and maybe bug snag depends on that convenience wrapper that's more ergonomic and has like a get function and a and a post function whatever but what the platform should provide every platform should provide that wants to provide HTTP is something that's super low level that's just like here you go this is like like the bare minimum it's all the information and um you can actually have a package that defines what that is so you can have a package called like lowlevel HTTP not sure exactly what the name for that should be yet we've talked about like lowlevel HTTP HTTP effects something like that um that basically every platform can say okay cool I I will depend on this and just use it as a way to sort of specify what I'm providing to you and I'm going to conform to that and then now the ecosystem can say oh well as long as you know you're depending on HTTP low level which is also what depend on then we know that these functions are going to sync up and then different people can say well I'm going to have a different rapper around this a different convenience rapper and it doesn't matter because as long as your library is using that sort of common denominator of like this is the lowest level idea of what an HTTP request is then everybody can work with everybody else okay okay so you almost need it's reminding me of like the hardware abstraction layer you get in um like embedded device programming maybe but like a much much simpler version of that I guess yeah remind me where we go to try out rock uh Rock so r- l.org awesome um I think it's time for us to go and do that Richard Fel thank you very much for joining us yeah thanks for having me thank you Richard I will say if you do go and check out rock.org Link in the show notes there's one extra thing in there I thought was worth highlighting for a bit of um information design it's got a section in there called code samples with explanations and there's a block of rock codee that you can look at you kind of expect that for a language site right but if you click on any line in that block of code it gives you an explanation of what that Line's doing and which language features it's trying to introduce you to and it's just a nice way of in a compact way going a bit deeper on what it's trying to explain to you and I mention that cuz if you're ever writing a site that has to explain itself through code I think that's worth looking at and filing away for for future projects before you file away or before you file me away which way around does this work before you file me in this episode away if you've enjoyed it please take a moment to like it rate it share it subscribe notify comment there are so many verbs you know which ones apply to your platform please the feedback is really helpful so do take a moment and I think that's all there is to say for this week so until next week I've been your host Chris Jenkins this has been developer voices with Richard Felman thank you for [Music] listening