XML is the future now this is strange to me because guess what XML was the past I remember when I was a Youngster a young young individual XML versus Json uh some sort of paper uh academic paper I'm sure you can find it uh look at that that's uh I wrote this paper right there boom Shazam um so you know you know you know um I always thought XML was the past but it turns out XML might actually be the future so let's find out right now summary my first hype exposure was use the extensible markup language for everything learning from it allowed me to live through the front end stack explosion the micro service overdose and many many more silly Trends man wait till I hear about react it turns out grandma was right eat vegetables exercise sleep well this is great advice right here and use the right tool for the right job well she didn't say the last one but she could have well done Grandma well done I appreciate that hype hype Cycles when I started programming XML was going to replace everything HTML was xhtml validation with DTD I don't remember all this crap but I know that there's things like that transformation and presentation with xslt communication with s-o-a-p I remember when soap I like somehow dodged the soap bullet I don't know how I I dodged it I think the moment I started thinking more and more about like login and all that was just at the very beginning of oauth and so I was using oauth I was using Yahoo mail as a login and I like I just missed the whole soap movement and my goodness gracious have I ever been happy I missed that one because I had a lot of friends all working and they're all using soap and it looked awful it seems so bad I missed the Train on the oop hype oh I didn't I dude I was a clean coder at one point I had abstract base factories I knew all the design patterns decorators dude I had I was I was great that was the generation before me okay South Columbia old uh but I have read so many articles warning me about it that I applied the reasoning to XML oh that's good that's solid let's wait and see if it actually as good as they oh my goodness let's wait and see if this is actually as good as they say before investing everything into it okay hold on this is 2023. no one said XML has been good in in what appears to be years so I'm a I'm a little bit curious what he means by this uh turns out XML was not the future it was mostly technical debt okay good okay it was useful for things like documents and I believe the most successful use of it are still MS office and Libre office formats they uh they are just Zips of XML okay okay I was lucky to learn this lesson very early in my career there is no Silver Bullet any single tool no matter how good it is must be evaluated from the engineering point of view of pros and cons and there's also rust which is perfect in all situations everything has a cost and implies compromise it's a matter of r o i radio over internet which is hard to evaluate without experience this is actually a really amazing paragraph by the way um this is very very true and I think that we've kind of gone in the opposite direction in some sense like for those that aren't a part of the JavaScript world is that at some point people were really skeptical about JavaScript right we're like oh you know it's pretty bad language we you know we're not too sure about it and now we've kind of entered a day and age where it's just like you're not using typescript you're not you're just you're just using the wrong thing that's the wrong tool for the job the only tool is typescript and you know right now me and uh some of my co-workers were struggling because one of the many problems is that I can't even get these protobuf definitions to come down because you can't have safe integers within 2 to the 53 right and so it's like this you can't have nanoseconds and so that just completely destroys some of the timings in which we're trying to send via protobufs and it's just like you run into prom after problem esm all these things holy cow you know it's not always the right tool though I do think it can be the right tool you know what I mean it can be it can be just not always stop making it always bottom line uh time is Once Again the great equalizer there is no substitute to observe how a complex system evolves no matter your model of the world but above all I learned that that Geeks think they are rational beings while they are completely influenced by Buzz Marketing and their emotions and Twitter influencers even more so than the average person because they believe they are less susceptible to uh at the normies and so they have a blind spot this is actually really good this is amazing hold on okay just let a man continue reading this is beautiful this is beautiful uh you need to eat more uh you need to eat more protein to get Proto buffed thanks for the contribution to this article and I appreciate this but truly this is actually a really good observation which is if you don't think that you're susceptible to having dumb reasoning then you're gonna have dumb reasoning you know and soap against XML is just the beginning of many many hype uh waves of hype when mongodb came around it's web scale suddenly you had to use no squeal for everything didn't matter that there was absolutely no relation between two no squeal systems it's like labeling a country as it doesn't speak English it doesn't matter mongodb was a terrible product at the time that was destroying your data they fixed that it's now a good DB to have in your toolbox didn't matter that most people using it didn't need free replication because their data could fit in squeal light file this is good uh so we watched beginners put their data with no schema no consistency and broken validation in big bag of blobs the project began failing in large numbers I've experienced it in fact right now Netflix were experiencing a little bit of a little little uh mongodb squeal issue right now in fact we're kind of replacing the tires while driving the car right now uh then the node era arrived oh my goodness this is so good isomorphic JavaScript this has been the bane of so many engineering hours the amount of time that has been spent for isomorphic JavaScript which by the way I hate that term in general uh was all the rage gosh gosh so much how many is nodes is web window type of window equals undefined you know how much crap exists because of that one because of this concept whoopsies I didn't mean to do that prototype oh I hate Pro oh my goodness I accidentally clicked that it's disgusting uh dude stop I'm clicking things I can't stop there's too many links stop it was all the rage and you had to use the same language in the front end and the back end and make everything async but JS sucked so most JS projects were created to avoid writing es5 I mean no Imports no namespace terrible scoping schizophrenic this prototype based inheritance weak types come on so we got coffeescript foreign I hated coffeescript I still to this day remember the feeling I had when I was using Adam the first hackable editor kind of excited that hey I I'll try hacking on this and I opened up my first project to discover it was coffee script and I thought wow that's strange coffeescript that has to be a peculiarity open up the next project coffeescript huh that plugins I looked at you you okay whatever opened up a third one coffeescript and then it dawned on me Adam is just one big ass coffee script lover and it was true they loved coffee script they used coffeescript for everything and it just I cannot even believe it then Babel webpack typescript react plus jss Etc we were told to stay on top of the most modern ecosystem and by that I mean dealing with compatibility being broken every two months that's the price of Cutting Edge tree shaking transpilation love this I love that statement so much that and the left pad a way of life you couldn't debug because the map files were generated wrong oh wait till they see about implicit returns and how those map files get generated beautiful I love reading code where it's just massive pojos for every single return statement ever inside your declaration file I love that because I would hate to have to read a named uh return type instead I'd rather just see giant swaths of just just just properties all thrown in there because to me to me that's where the real magic happens you know what I mean uh at this point everything needed to be a single page application with client-side routing immutable data structures in some kind of store that is if you could choose between flux Redux alt reflux flummox flexible flux or Marty just by the way this sounds like uh the interview with the senior uh JavaScript engineer right but it's this actually just might be I didn't realize that flummoxed flexible and fluxer were real things I I thought it was a joke in that thing but it turns out it might it might not be uh Marty JS Fink's macfly deloreanjs fluxify fluxery XM flux store Red X flux no I'm not making that up no no this can't be real Marty McFly DeLorean they can't they cannot be real what what about Ken what's Ken wheeler doing Ken what do you want Ken is that Ken Wheeler's doing yo that's Ken was that Ken wheeler oh was that Ken wheeler this whole time oh oh he's in here somewhere oh ken wheeler McFly is by Ken wheeler let's go let's go Ken wheeler that's pretty beautiful I'm happy that happened all right uh let's see but because you still had to pass a lot of data Through the Wire and since everything had to be on the client graphql was born well I mean technically falcore and graphql were talking about various strategies okay of course all that stuff had terrible accessibility SEO was first rendering time issues leading to the rise of server-side rendering AKA CGI with extra steps oh my goodness I love it uh this couldn't uh let's see this couldn't stop there and so Community added hydration on top of that this turned out to be an immense addition in complexity and created Created tons and tons of disposable code base leading to uh you get it failed projects and wasted money because of course most of those tasks could have been done with Ruby on Rails Symphony Django and a pinch of jQuery at least they would have been finished with these boring texts instead Dead projects began to accumulate and for One figma Shining you had a trail of hidden bodies behind corporate walls nobody dared to talk about I just love just just I I mean don't get me wrong I remember the jQuery days it was not great okay Docker is incredible um where we've gotten to is definitely different but man I remember the days of just jQuery and stuff and it like it created pretty big websites off of just like really simple stuff and there wasn't like a lot of JavaScript I mean all the things that I created back in the day were all like single page applications not using like a ton of stuff uh don't talk about knockout.js moo tools oh yeah oof uh this is pretty funny it was a taboo to speak about this madness you were the one not getting it it's a revolution you think people drowning while they try to produce basic crud apps would uh have been a red flag instead it inspired teams everywhere in the world to make things harder on themselves first the everything should be a micro service crowd started to take over every single small website had Docker container for the uh restish API plus one for the front end plus one for the database indirection layers on top of indirection layers to communicate between all that why not add a little message queue zero mq rabbitmq and a good exchange format like grpc with protobuf let's go believe it or not it became very hard uh to make your to-do at list app work with all of those and so solution was found adding orchestration Docker swarm and now kubernetes this is actually really funny like there is something really true in all this uh whether or not it's actually like you know I don't know if I want to return to monkey but I don't think that this is wrong either you know what I mean like when I see server side react components and just like that whole thing going on it just makes me go you know did we jump the shark is everything now just downhill forever because we're just choosing the constant intensity of just like a bajillion dependencies in an intense amount of four knowledge like the hard part is that people who've been in the industry for a long time this makes sense because you've watched it grow over time but those that haven't been in the industry they have to learn like 15 20 different types of libraries to understand it in general which is really kind of wild this does remind me of Warren buffering's tweet uh if you haven't seen this one it was it was a pretty good one let's go in here and let's go Warren buffering um where is it where's your where where's your beautiful one this one right here which is just like there's a lot we have a lot of configuration there's a lot of underlying things that are happening here just to like progress forward are we actually doing the right thing here I don't know I don't know I don't know it's just kind of a challenge you know um I don't know if I want monkey but maybe I do I think HDMX is really really interesting you know what I mean HDMX is really really really interesting at this at this time so much time and money were obliterated the cloud felt like a savior they will do all that for you for a fee you just have to learn an entire way of doing things debug their black box be locked into their ecosystem and carefully optimize and configure using state-of-the-art templated yaml files and hostile uis your entire project so that you could only spend 10 times more on hosting and not uh 10 000 Times by mistake that's funny easy stab at uh serverless second uh Big Data arrived do you had to store every single click of your user a B test everything as well so that you consistently annoy 10 of your customers and make support unbearable now that data uh now the data you had was gigantic and if it was not you had to uh believe it and you needed some kind of Dynamo data lake or maybe a Time series DB or a graph one you need something that's for sure we have an entire we we have a lot of Netflix uh by the way we're gonna Netflix by the way uh third of all your stuff was now getting uh very slow it was not because of the terrible technical decisions leading to use Google level in industrial architecture for your 100 requests per second website no it was because you used a slow language let's rewrite everything and go or rust the compilation step is not going to have any impact on feedback loop anyways since our CI pipeline already takes 73 minutes let's go that was the last draw so out of the tiredness devs went back to the simple ways just kidding they went to flock to serverless lambdas and SAS Services you call from the edge because not owning your stack is the future Building Products you don't need meanwhile the blog post about burnout were increasing tenfold somewhere at the top leaders heard the call of money you can't grow without making everything social gamified gamified gamified blockchain will change the universe you need amp website your stuff is not competitive without machine learning if you live through all of those you'll know what remains about it almost nothing a few share buttons and a login with workflows some points some points and badges graphs things either died or filled the niche they were good at as they should some are replaced by the future of today this is like fantastic this article is really good I am shocked I like I like the new hype yagni is popular again projects like Vue htmx okay first off again htmx still won't follow me okay what is this htmx okay I'm following you we were both made in Montana oh well actually I was made in Montana you're just like a transplant coming in there claiming montanian status you know what you're coming on prime time and you're going to defend your pro you're going to defend your positions htmx okay HTML hdmax uh let's see alpine.js or just vanilla are just getting traction there's even a talk coming back to using postgres for most things 37 signals is on the spotlight once more because they left the cloud that's dhh everybody he also thinks types are stupid so I mean I don't know how much you could trust this guy this guy's like oh yeah this guy's the Arbiter of Truth except for some of his ideas are just absolute horse right all right uh it will of course be overdone because minimalism uh being hyped is still well hype um you do need the cloud containers no squeal go rust and JS build systems modern software requires customer expectations and incredible incredible new features are not to be ignored just not for everything nothing is ever needed for everything I loved this article nobody has time for python thank you thank you nobody has time for for python this was awesome I'm very happy that the solution to all these problems is just rewrite it in ocamel because now guess what we finally can achieve the future we all wanted oh camel and htmx let's go let's go going back to Monkey people it's gonna be fantastic I'm excited I hope you're excited the name is the Montana gen