hey my thoughts on writing a Minecraft server from scratch in bash now you're probably thinking is this bad bad cop this is not bad cop it appears this appears to actually be a non this appears to be an unironic writing of Minecraft server in bash okay I don't know what's happening I don't know what's happening for the past year or so I've been thinking about writing a Minecraft server in bash as a thought exercise I mean he did I mean you literally just said for the last year I've been thinking it sounds like you've only been exercising thoughts I agree I agree with the statement I once tried that before the classic protocol one of the the one from 2009 but I quickly realized there wasn't really a way to properly parse binary data in bash take the following code example read a uh this thing right here by the way this highly pixelized uh code hard for me to read hard for me to read all right function a read to ooo Echo oooo xxd this would read two bytes into a variable and then pass it to xxd which should show the hex dump of the data all right everything's great until we uh pass a null bite 0 now not only does bash ignore null bites in strings it also doesn't present any way to detect that a gull bite has occurred C strings and shambles right now C strings are just completely in shambles I didn't even know that was a thing in bash but that is so dang hilarious true this is so painful yeah dude how do you wait hold on how do you do anything considering that the protocol I'm trying to implement is strictly binary this uh can severely mangle the data yes one would assume this is true if you have any zeros in your you just effed you get effed one rating evening in January I had a revelation what if I reverse the order of the function if the binary data never reaches a variable or more precisely a substitution and just stays inside of a pipe can it pass null bites around so it looks like you can answer uh the answer is yes after some iterations I decided to use DD pass to xxd instead of just xxd because this way I can fine-tune how many bytes to read okay okay okay I'm not I'm not that good at bash I'm just letting you know uh the length variable is assigned earlier basing on a similar read functions DD count equals length BS equals 1 status none pipe it to XS DP okay okay so you're reading with DD uh I feel like I've used DD once before but I don't I can't what we're getting into the where let's see copy a file converting and formatting according to the operand okay interesting MDD so it's just for copying it's it's just for reading and writing data okay that makes sense copy a file the standard out ah DD stands for Dick Destroyer be careful with that one DD equals dis Destroyer yep I think we should open this up I think we should open this one up to the public in some sort of uh some sort of a a server this gave me a hex string on which I could a pattern match pattern matching or pattern replace data extraction and more sending out responses could be done uh analogically using xxd reverse switch ncat is used for listing on Minecraft's default TCP Port it launches the main shell script mc. after receives an incoming connection okay this is pretty cool the protocol is not really good actually you know when designing a binary protocol often it's never really good thank you Goblin people by the way if anyone's wondering don't execute anything you see in chat okay let's let's just nobody here put whatever is on the internet into your machine okay just just be just be smart let's see note the following section contains mostly a rambling about implementing number conversion routines in bash if it does not interest you feel free to skip it no I want to know about this the first thing one should Implement for a Minecraft server to function would be the server list ping packet not because it's required heck your server can just not reply to it properly and you'll still be able to join the game who makes this who does that but because it's easiest to tackle first it helps familiarize yourself with the core protocol Concepts such as data typ types VAR in and VAR Longs most data types were trivial to implement but some gave me more of a fright than others notably the i e 75418 985 floating Point numbers more on them later and the so-called varint varl long numbers those may be familiar to those acquainted with the mqtt protocol as there just a modified version of Leb 128 encoding okay so numbers all right so what I'm reading here just to be real for a quick second what I'm reading right now is that bash is struggling string to numbers okay okay Leb is a compressed scheme for integers by splitting a bite into one signaling bit and seven data bits the scheme stores the number length uh if the first bit is zero then this bite is the last one oh Okay cool so okay so it's a length oh length encoded bite oh it does that what it stand for length encoded bite yeah probably okay oh that's cool that's clever so that way you don't have shut up it's it's letting me to it's reminding me to work on Vim okay shut up it's shut up that's windows little little Indian base I don't I don't think that's I don't think that's uh is that I don't know I can't tell usually all Network Protocols are uh big Indian uh if the first bit is zero then the last okay this is this is cool by the way I do like this idea this is super cool El if there's another bite after this one great scheme if if let's see if most of your numbers are either between 0 and 127 or 256 and this otherwise it's a buy one bite and get one free uh situation because numbers that would have otherwise fit uh in a bite get pushed uh to the next one by a single bit yes that's because you have this whole problem right here if your numbers cuz one bite can have 256 so that means if you save one bit for uh length en coding you only get from 0 to 127 so you get this like whole shitty experience going on right here uh the problem I have with this in in reality is that unless if you're sending a tremendous amount of numbers and a very large portion of them happen to be between this thing right here or greater like you have like plus 50% of your numbers being between this and then the rest are all somewhere else it's like why have variable length encoding it just feels painful you know like why not have a type what I guess if you type your I mean yeah I can see that typing your packets cause a problem anyways choose a different encoding yeah because if you type your pack if you type your packet then you got yourself like an extra bite you're wasting all that uh what about signed integers you can still do signed integers you'd have to like you'd have to just read out these these seven and then shift it over by one and then cast it to an signed integer it's MC everything is between 0 and 127 okay I didn't know that okay otherwise it's a buy okay so that's cool see look at this signal there's one more bite there's no more bytes all right the explanation of uh 127 is a drawing from Red bits are signaling bits green bits are data bits the input value is this which means that you're going to have to do like to to De encode it you have to like shift things over a bunch it's kind of fun this seems kind of fun here let's see that uh int to varant local ABC out I'll print this one out equals print this right here if one is less than this we're done else if it's greater than this then we have to do this whole business okay okay okay else if it's this thing then we got to do all of this and then we get the out variable oh that's funny so there's like an assumption that you could have up to three bytes is that what I'm reading here there's an assumption of up to three bytes I've had problems Translating that reference implementation to bash so instead of I played with the protocol enough to write it uh write my own from scratch I figured out that it was basically a modulo and a division in a trench coat which I used uh to my advantage in the coat snippet above yeah I mean it looks like you're just shifting One Direction or the other because they're all base twos I took more uh contemporary approach on the decoder using an a an ant and multiplying the results similar to reference did it okay definitely wasn't the hardest or the most annoying to implement uh that one goes to i e floating point I still don't like how it is sprinkled in random places in the protocol interleaved with regular ins and Longs and in some cases even signed shorts damn this protocol seems kind of wild all right floating point I'm not a math person when I see an expon exponential notation spewed out by python I scream and run this may be the main cause of why I hated implementing these floating Point converters I won't be going too deep into the specifics of how this format Works instead I recommend you check out this Wiki page I don't want to I literally don't want to because it's giant uh the basic implementation requires a loop inside of which there are negative power applied to the result bash doesn't naively natively support negative Powers which sent me on a trip to find a utility that does a suggestion I found while duck do to going was to use Pearl but I'd consider that cheating not only is it considered cheating but I think God will have will not have mercy on your soul if you in 2020 anything include Pearl unironically alternatively I tried using BC okay okay BC BC for the win but it seems that either it doesn't support Powers at all or the busy box version does not oh really does BC not do that touch my Mena we're not talking about mantias okay we're not talking about mantias all right pearl is the Lord's language doubt okay doubt you use Pearl every day damn what are you a system admin still in the in the world in the in the land of devops are you a syis admin natural language processing no nope refuse it I literally refuse I I I actually refuse okay I refuse to buy this he probably wears a pearl necklace she wants a pearl necklace for those that don't know zezy top uh when I was about to give up I was reminded that Kate once made a plot program in a surely o has the powers maybe even super cow powers it turns out it does let's go a let's go o with this knowledge I scribbled a working implementation and attached it to the data decoded from the player move packet in a trivial run the client sent around uh 50 to 100 packs like that each one with three doubles X Y andz I feel like a is almost cheating cuz a like is it isn't a just like JavaScript .1 like it's just a language that you can do that no a is useful okay okay okay reasonable o Pearl BC all have their own languages practically it's not practically another language it is another language more like C version 2 no no no no no no no no no no no no no no no it's not C version 2 with go is C version 2 a you can just you just make up variables and it starts working okay that's definitely that's not C at all with this knowledge I scribbled on a working implementation and attached it to the data decoded from the player move packet in a trivial run the client sent around 50 to 100 packets like that each one with three doubles XYZ it turns out that the conversion function was slow that the server wasn't done with that workload after multip multiple minutes something rather unacceptable for realtime Gamers multiple minutes multiple minutes to parse on 100 packets of XYZ the easiest solution was lowering the response time would be lowering the amount of calls to the external binary such as a uh as most of my workload was already inside a bash for loop I just moved the loop inside of a which saved me literally a TENS of calls to a dozens of calls again I feel like this is cheating okay I feel like we've cheated right because now like see you're writing a different language here turn based Minecraft Let's go see see casual 60k POG see that's like now you're just writing a but this is still amazing hey to be fair this is completely amazing so anyone okay so any I know it really it should have been Minecraft server in a that would have been so good the conversion is still quite slow it takes 10 milliseconds on my xon E5 I don't even know how great that is uh but this is to be expected with bash scripts for the cheap comparison the old version took around 350 milliseconds but I haven't uh but I don't have a solid measurement to prove that still 35x faster woo position type finally something to made up by Mojang themselves position is a 64-bit long value where three coordinates are stored uh a long inside each other X gets 26 most significant bits Z gets 26 middle bits y gets 12 least significant bits I'm not the biggest fan of weird data types like this uh but I W but it was crazy easy to implement yeah that makes sense you're just bit shifting uh because let's see in bash because it had all the needed bit shift operators okay cool the worst part about this data type is that it doesn't actually get used much around half of the packet stored XYZ coordinates as separate double values this means that the location data suddenly grew from 64 bits to 192 bits per packet we get nine digits of floating Point accuracy if we assume that we're only ever needing to measure up to 30 million the world border by default the protocol gets messy with two three or more different number formats I kind of see the reasoning as to why it's like that but I still don't like the current state normal server communication uses ZB anyways you re realistically won't ever need more than two maybe three max digits of decimal Precision to describe a position within a block I am completely on board with this what are you doing with nine digits of floating Point accuracy on a placement within a block what are you doing that is it's a little outrageous okay this is a little outrageous lastly there's an NBT format that's also an internal thing made by hatsun Miku herself NBT uh is like Jon but for binary data not unlike a b a Jon it gets abused to store arbitrary data Beyond spec for example moang stores a bitstreams of variable length as an array of Longs if such array isn't long aligned or even bite a line the last long is padded with zeros nice Miku mentioned is please tell me this is a poll request please tell me this is a poll request oh no it's not it's a Twitter post damn have I been oh I typically get blocked by furries I typically get blocked by furries I don't know what it is but this is like my typical experience on Twitter is that whenever there's a furry I get blocked I'm not sure what really happened I'm on a list I'm on some sort of anti anti uh anti- Angry thing bad cop I didn't do dud why would a furry block you uh I don't know yeah my anti porn rants maybe I mean nothing nothing of value was lost I got owned I just I just I just no nobody likes being with there okay with all that math with all that math out of the way here comes the actual fun part I documented some of my Adventures on Twitter but the thread was merely a glimpse on the actual development process Also let's assume that we've already have a server ping packet out of our way and it's a matter of making the game joinable now to allow clients to join our server complete let's see it has to complete the handshake process and send a few extra packets chunks player position inventory join game the two biggest obstacles on that were of course join game packet the data structure within the chunk parameters hey I'm watching the prime live hey welcome sucks to not be accepted by your own Community I know I can't believe that my community is made up of furries and I get blocked most by furries I don't know what it is it is like Universal though last night there was two tweets I tried to go follow both free free uh profile pictures both of them blocked me I don't know what it is it just is the joint game sent some initial metadata players identity ID game mode some information about the world and sents 1.16 the dimension codak this is an NBD compound containing the following Fields containing the following Fields lost I think there's supposed to be something underneath here that my zoom in must have triggered a Reflow like you can see it you can definitely see it right there hold on you can see the thing uh oh uh oh I got I I I did the thing all we'll try this again inspect here all right everybody sees this thing oh picture four it's actually just what was going on underneath it can I control Z that can I bring it back oh man you can control Z in the developer panel I didn't realize you can control Z at how great is that I didn't realize that Firefox had a control Z feature for deleting elements that's great damn you didn't know yeah I don't program front end almost ever okay don't come at me like that that is great Dimension codec was part of the major uh pain to implement uh for my purpose I decided to retrieve the NBT field from a vanilla server it's the only binary blob in this implementation by the way you can change the font uh to sand SF at the top of the page oh you can oh oh my goodness dyslexia is still going to be shitty but not nearly as shitty I I was I'm not going to lie to you I was struggling all right at first glance let's see hold on all right at first glance this packet looks huge and scary if you have the table from the link above open side by side with this article I invite you to imagine that every one of those huge bits uh bit set Fields is actually just z0 and that you don't need to send the block entity field at all this leaves us with XYZ height Maps which are fancy encoded repetitions of that and could be virtually anything with ominous data fields less scary right what's the data what's what's what's in your pocketses uh the data field is actually an array of Chunk sections a chunk section is 16 x 16 x 16 blocks a multiple sections that can be stacked together to create a chunk for our purpose uh purposes this array only has a single element just to be uh just to simplify the code a chunk section contains a block count a block States container and a biome container both of these containers use pallet structures to encode possible block values this means that before the real block data the server has to define a mapping from local block IDs to Global block IDs oh my goodness this aims to squish as much data as possible into a small space a block definition can be as small as uh can be as small as four bits this is like now I kind of want to learn the Minecraft protocol I'm not going to lie to you I kind of want to learn the Minecraft protocol okay it kind of seems exciting uh as my opinion of the Wiki page doesn't explain it well enough to quickly comprehend here's another drawing we could learn it in uh we could learn it in go pretty straightforward it could be your name apparently primagen in uh the furry community refers to primen well that's not how my name is spelled uh are a robotic clo specii created by malice rizu of furry a yeah mine's from turoc okay my name comes from turoc uh turoc 2 seeds of final boss okay when I was a kid I thought I misspelled it but I thought it was the coolest thing ever when I was a kid and then I just kept the name you know why because um I just thought it was cool so no TR Rock playthrough when dude that game is so effing hard holy cow that game is so hard changing names is hard yeah turoc enjoyer yeah yeah did you ever play the multiplayer yeah you're talking about turro rage Wars yeah I played a ton of it ah it's my own tweet I am not a furry okay I am not a furry cerebral boore is great times the emat doubt I am not a furry blocked that's probably why I'm getting it um anyways let's see as in my opinion uh on the Wiki page doesn't explain it well enough here's the comprehension okay so let's see air is 0 stone is this dirt is that okay I wonder why it goes from 0000 01 to 0 a visual mapping 02211 four bit0 okay yeah okay cool uh picked five left uh the visualized pallet of the global ID mapping right is simplified example of how the display blocks correspond to the encoded data uh at a 4 bit per block okay guys why are you sending me my own tweets what did I do here okay okay it was a joke okay it was a joke shut up for me the easiest way I found to send those data fields management wise was to use an 8 bit instead of a minimal four-bit block definition this would give me a whopping 256 possible pallet entries of all the available blocks to choose from then writing actual chunk data would be easy to send hex numbers referencing those pallet entries yeah four bit stuff would be hard cuz you also have to consider padding at the end and bite alignment and stuff like that four bit pet uh would be equally easy um a bite represented as a hex string is two characters representing four bits so 01 would be representing two blocks let's see uh one with ID Z the other with id1 so it' be limited to up to 16 blocks per chunk okay the standard let's see the standard actually allows for anything from four bit blocks to nine PPP what is PPP bits per block is that what it says unblock un unfollowed blocked GG no re L plus ratio bits per block okay otherwise it assumes a direct pallet mapping with 15 bits per block I have no idea why it isn't by a line This is a greater question I'm confused why you'd want to go to nine to begin with OR 15 like why why you got to go to 15 what are you doing bits per bit Yeah bits per bit why would you go to why not 16 the bio pallet Works differently in my implementation I just send an empty pallet and then Maps a biome id01 Minecraft planes directly to all regions inside the chunk this was based on my reverse engineering of how vanilla works I suspected that the existing documentation of this part of the packet is incorrect uh as I'm either getting too much data or missing a few bytes okay this is pretty beautiful well done well done by now we only have a plain chunk not anything special by any means I definitely want to make a few demos to show what that the server can do more than just load and show a chunk but I didn't want to create a separate sourcery for every demo I spew out my solution was a series of over overridable functions called hooks damn it react strikes again can guys can we please stop programming everything with reacts okay bash react bash bad bad cop please don't get an idea bad cop please don't actually get an idea this is just a joke okay I'm just I'm just spitballing okay okay we're just joking uh the gears are turning no no we don't we we we genuinely don't need this okay we genuinely the world does not need bash react hooks equals react it's a joke okay stop being such a hooker uh and the option for the server to load your own config this allows anything from changing how the world looks to hooking up a pkt effect so your player makes ticking noises when you move the mouse below I attach simple unoptimized plugin that generates a chunk with random blocks from the default pet which makes for an odity uh that's kind of visually interesting okay so a bunch of stuff cool beautiful absolutely beautiful another demo worth checking out let's see or worth taking a look at is dig dig me out a simple high score based game which throws you into a chunk with randomly placed stones and ores dig out the most valuable ores until the timer runs out the man just skip over some some some some emeralds right there I thought emeralds were were all like valuable and stuff it's kind of a fun little game what a great idea you're telling me copper worth it Boomer stop talking dude I can't play Minecraft the reason why I can't play Minecraft is perspective I don't know what it is it's the only video game I've ever become motion sick to I literally have I I I literally have absolutely no well emeralds are also for creating Emerald blocks Minecraft is the only video game I've ever been motion sick from change field of view field of view makes it even worse I don't know what it is about the game but having everything being squares and then stretching it out I can play I I literally played Apex for 30 hours straight on stream that's not a problem me playing Minecraft for 20 minutes makes me sick I don't know what it is witchcraft the project name quirks A bash is notoriously bad at handling decimal numbers it's okay with integers as long as you don't do too advanced math on them but the only way to handle decimal numbers is by multiplying it on input and somehow placing a dot in the correct place for output because of this most if not all numbers handled by witchcraft are ins multip the multiplayer doesn't really work I mean it kind of does but I never really took the time to finish it up witchcraft is technically multi-thread server bad bad bad cop this you're calling which means that it has to use terrible hacks to communicate between threads currently most global data is stored under Dev witchcraft internally referenced as a temp not temp not temp witchcraft is slow uh especially in terms of data exchange between multiple threads I don't expect to be able to send massive amounts of data generating as 16 solid chunks uh can take as long as a second a chunk is 16 x 16 by 16 right that's uh what 2 to the 12 yeah yeah four 496 that's hilarious that is so good that is so good why because I could and it was fun this perfectly valid answer invalid question I I would never need to I would never need to ask why where do block IDs come from that's actually a question I have witcraft internal IDs are defined as source source pallet sh and can defined in plugins the external IDs to which the internal ones are mapped to can be acquired from the vanilla server check out the data generators okay why witchcraft uh a selfis or selfis came up with the name possibly because I'm A bash witch and thought it was great okay big thanks to Lauren May and Cadence uh for proof reading the post absolutely fantastic and then there's obviously a bunch of comments and all that absolutely fantastic thumbs up on that one what a great what a what a great read genuinely a great read I love bash actually I don't love bash what am I saying what am I saying bad cop I hate bash but I'm glad somebody else did that for me because watching it happen is like watching a train wreck slowly but somehow this the the the the train wreck was successful you know no one got hurt and now we can play Minecraft clip it he loves bash clip it and ship it fish sh fish shell my beloved no okay awesome well done thank you the name I probably still won't play Minecraft okay I'm just I I I'm sorry I don't like Minecraft okay I just I wish I liked it I just don't and of all games it feels like I'm at a job okay I'm sorry Minecraft feels like I have a job I don't need to have a job when playing video games okay all I want are guns and things to shoot I don't want anything else your kids play Minecraft they mostly play Roblox at this point okay they play Roblox at this joint and and and at least at ROBLOX you can play it's still Roblox is like one step up from being mobile games okay I have a hard time with mobile games and Roblox games as well but you know what we do that but now my kids are starting to get into things so we've been playing like some fortnite some more okay so at least I can play that and Elden Rings oh I love Elden Rings okay okay my this this my my household okay my household is a claymore household okay when my kid my my first one came up and said Dad I want to be a mage slapped him mouse went flying out of his hand I turned off his computer made him go go into the garden go dig okay made him go dig in the garden for a long time when he came back he realized the value of being a claymore family okay and now we use Claymores together a Jen