it may look like I have been rotated by 45 
degrees but I assure you I have not been rotated   not a single Pixel you were looking at right now 
has been rotated around anything but the pixels   have been skewed it turns out mathematically 
three consecutive skew Transformations can give   you the same result as a rotation so you can 
make something look rotated without rotating   it which is a wonderful bit of mathematics with 
some really interesting properties which I me I   love but arguably these days are slightly [Music] 
obsolete quick aob Jan streets Academy of math and   programming closes applications this March 13th 
more details at the end of the video why would   we want to rotate something without rotating it 
well here's uh our original Mario and back in the   days when things were very low resolution you 
may remember the past fewer pixels it was hard   to rotate things because yes Mario's rotating now 
but the pixels are moving with Mario and I get so   annoyed when I see like lowii low bit animations 
but the pixels themselves move no the pixels are a   grid they don't move so as Mario's rotating we 
have to work out how do we fill in the pixels   within the grid to make Mario look like they're 
rotating to show you what happens when Mario   rotates properly my friend Andrew Taylor coded 
this up where I can rotate Mario and oh I look   at it what a what a nightmare like if I put him 
like what's up with what's up with Mario's face   there is there a word oh okay I apologize to 
whatever I've done to Mario there and if I put   Mario back up the correct way you can see in 
the normal orientation every pixel is working   hard because there aren't many pixels to go around 
and the buttons the two yellow buttons on Mario's   Plumbing overalls you can see it's just one pixel 
per button when I rotate it as those yellow pixels   go in and out of the rest of the grid like if you 
were doing a proper rotation you got to work out   which ones do we color in and sometimes they'll 
cover two possible ones and sometimes they won't   even be in one so if I rotate Mario watch the 
buttons you can see they start off there still   fine still fine one disappears that one is no 
longer filling enough of any one pixel to be   able to see it we keep going around there's back 
there's two oh wait one gets it gets long there   cuz at one point is covering both so the issue 
with rotating the image the Sprite properly and   then working out what new pixel color each of them 
should be because of the average of the old pixels   that happen to Overlay it is that you get yeah 
your pixels are no longer working strategically   individually new plan and forget rotating we're 
only going to skew because skewing just involves   sliding the pixels in either a horizontal or a 
vertical Direction so they're not going to move   off grid and long as we do a whole number of pixel 
no sliding it'll match back up again so here we go   there's our friend Mario I've reset Mario we're 
going to start by doing a skew transformation so   we Slide the top half back and the bottom half 
forward and so we've moved looks like Mario's   moving at speed I guess we Mo moved Mario over 
a little bit we're now going to do a second skew   transformation where we do it in the vertical 
Direction system it skews the other way like   that and then we do one last transformation 
where we actually repeat the first one again   we do another horizontal skew and that's going 
to look like um this and there you are and now   you're like well hang on Mario looks like they've 
rotated yes their nose there something going with   the nose there it's not perfect the point is we 
managed to rotate Mario without doing anything   other than horizontal or vertical movements in 
fact I'm going to reset this Mario let's try a   different angle so we start with another skew oh 
other way this time interesting and then we skew   up and then we skew across again and now there's 
our new Mario rotated but what's interesting about   this is because I mean the rotations aren't 
perfect we're still limited by the number   of pixels but none of the pixels change watch the 
whole transformation and I I'll keep switching to   other rotations here because we're only sliding 
the pixels we're not changing them at all you   still end up with all the same pixels just in 
new locations so this preserves all pixels both   buttons are there if there's an important pixel 
it's guaranteed to survive three SKS give you a   rotation without changing the pixels involved 
the same Transformations work on much higher   resolution images so you're looking at me in 4k 
and I've written my own terrible python code to   be able to skew me in different directions so 
everything you saw before was Andrew Taylor's   excellent code my code not so great in fact I have 
to manually go through and find the frame where I   want to start so I'm going to clap and we'll do 
the first skew that's why I can find it later   there we are so now I've been skewed you can see 
my uh the top half here I've skewed that that way   I mean you can already see this and the bottom 
half I've gone I've gone the other way so I've   now done one one skew we're one skew in the second 
skew is going to be a a vertical one so again we   draw on the clap there we are now my uh my aspect 
ratio is not great but with two-thirds of the way   through one last skew and I look normal again I 
look totally normal but it looks like I've been   rotated by 45° I haven't I've just been skewed 
three times and uh now um the longer I talk   the more my laptop is going to have to do later 
because my code is deeply deeply inefficient but   it works like and I'm proud I wrote it myself 
because yes you could probably just do this in   like off-the-shelf software it' be way quicker 
and way easier and way probably even cheaper now   I think about it but the point is I didn't want 
to just you know do a skew effect I wanted to   manually and by manual I mean with python code 
move every single Pixel the correct amount and   that's why I'm very very proud of this um although 
for every minute I'm talking like this it's over   3 hours of render time my coat is not so much 
uh blender as it is a juice loosener so we're   going to stop this right now we have two pressing 
questions now one is how do we know come on how do   we know that any rotation can be achieved by three 
skew Transformations and secondly assuming that   is true how do we work out like how much skew do 
you need for a specific angle you want to rotate   through we can answer both those questions and 
we will but first we have to have a closer look   at what a skew transformation actually is so 
against my better judgment I'm going to put   my laptop back through its Paces later and 
I'm going to resew the this shot there you   are I've gone this way at the top and that way 
um at the bottom and you know what just take a   moment to have a look at this transformation so 
actually if I come back down to the middle I mean   I me I'm over here and down here look at that 
right actually if we Mark the exact middle of   the frame and this is my zero point I'm using the 
center of the frame as my origin everything above   that is positive in the y direction and below that 
is negative if I overlay skewed mat with original   mat you can see that everything on the midpoint 
on the line doesn't move it's not skewed at all   and the further I am away from that line the 
more I get skewed and that's because it's just   a linear transformation this is the actual line 
that's going to point at it I don't know where   I'm pointing anymore somewhere on the screen is 
the actual line of code I use to do this in my   juice loosener code and all I'm doing is for the 
X and Y coordinates for every single Pixel I'm not   touching the Y the Y stays exactly where it is 
nothing's going up and down the x coordinate is   the same as the old x coordinate but that entire 
row is bumped along proportional to its yv value   it's just it's a linear smear to the side so the Y 
coordinat is just how far above or below that line   is and then we go that far above is positive and 
that's the positive direction whereas Blue Line's   negative which is why I go over there so oh and 
I have also put on a modular the horizontal width   of this so I've done some weird I mean I don't 
even know where the edges of the frame are I   there's probably some real ridiculous edge cases 
I forgotten about so uh there you go and in fact   at the very end of this video The Last Shot 
will be me doing a full 360 rotation using my   terrible um python code but for now I'm going to 
stop this skew and we're going to talk a little   bit about how we represent it mathematically 
mathematically if we start with a vector that's   our X and Y coordinates of Any Given pixel we're 
want to transform that so the Y hasn't changed but   the X now we add on some some percentage some 
ratio of the y coordinate which I'm just going   to call a for the First Transformation and if 
you're familiar with matrix multiplication you   realize you can achieve that by just multiplying 
it by a matrix isn't that great if you haven't   done this before you'll have to trust me you have 
to trust me you can go and learn how to multiply   matrices and double check it if you can't be 
bothered then you're going to have to trust   me now a vertical skew very very similar and then 
we want a final third horizontal Al skew so there   are three matrices which describe the three skew 
Transformations so doing all three of them and   matrices tricky multiply them in the right order 
none of this swapping the Order anymore write that   down in your workbooks now you have to trust me 
and or learn so if we do multiply all three of   them together this is the grand result that's 
the one big Matrix which shows uh what happens   when we do all three skews one after the other if 
you want to rotate something you can also use a   matrix this is the Matrix that represents Rotation 
by some angle in this case Theta and again you can   either trust me or you can look it up your choice 
and all we have to do now we show that this three   skew Matrix is the same as the rotation Matrix 
and we can do that because it's just a bunch of   simultanous equations we got four equations here 
and we have to solve them now that can be done but   I can't it's too much for the video Andrew Taylor 
who was the first person who showed me all of this   has done a fantastic proof you are Andress proof 
very nice has some pagus in it if you saw at the   end there I'll link to that below the point is 
you can solve it and it gives you some really   nice results as well as showing you that yes the 
matrices are equivalent on top of that you realize   that the two horizontal skews are identical A and 
C are the same amount of skew and they equal the   tan of half the angle you want to rotate through 
and then the vertical skew is the sign of the   whole angle you want to rotate through although 
one of them has to be negative either the Tan's   negative and the sign's positive or s's negative 
tan positive depends if you're rotating clockwise   or anticlockwise but that's it that's how you 
work out your two skew amounts that you need to   move horizontally vertically and then horizontally 
again I thought it' be nice to actually show those   in action and given that this AC of skewing 
doesn't create nor destroy pixels I realized   I could do this with physical pixels so here comes 
my second terrible idea in this video I've made a   physical version of the classic Minecraft sword 
which is in a 16x 16 grid the sword nicely is on   a 45° angle but let's say we want to rotate 
that another or something a bit unusual 30°   let's spin it another 30° there's no like Center 
pixel because it's it's even in both directions   so what I'm going to do is rotate it around this 
one here so if I take out that one pixel there   going to replace it with an orange pixel now you 
can keep track of the exact center of this image   in theory oh we don't really need the background 
that's just there so when I'm moving things around   they all kind of stay together so I'm going to 
label so we can refer to it later uh horizontal   that's where we're starting and we'll put in the 
vertical which is going to through that column   there so given we want to move this sword 30° 
clockwise we need to do a positive tan skew a   negative sign a positive tan and if we look at the 
numbers on our rows we got the zeroth row and then   one up through eight and then we got negative - 
1 down through seven we need to multiply each of   those by the tan of half of our angle the tan of 
15 and these are just terrible terrible numbers   but if we round them all off to the nearest home 
number that's how much we're going to do the skew   by so we can see that all three of these are going 
to stay where they are the next four have to go   one so there is the top half of our horizontal 
skew and now it's symmetric so one there we go   so now we've got slightly wider we've smeared 
it out ever so slightly all the pixels are here   we need to do our negative sign skew which means 
the positive direction is going to go down and the   negative direction is going to go up and uh these 
numbers are a little bit bigger very nicely the   sign of 30° is a half so every two we go across 
this way we go one that way so we actually leave   the central zeroth line where it is one like that 
future mat here yes PM is skewing that the wrong   way in the vertical Direction accidentally doing 
a positive skew out of habit needs to be negative   sign which totally messes it up it should have 
looked like this yes I fixed it in post and if   we now apply the remaining horizontal skew you 
can see that still looks pretty much like the   Minecraft sword and you can argue that is now 
75° tilted down from the vertical so I think   that within the resolution of the pixels is a 
success unlike the horrific mess past Matt ended   up with looks like a sword I mean it's still 
pretty terrifying if anything is now sharper   than ever before more pointy I think that worked 
well enough and now you see how the system works   and before we show the final full rotation of 
me I want to thank the sponsor of this video   Jane Street specifically their Academy of math 
and programming is closing applications on the   13th of March so the day before Pi Day and you 
will have heard me mention this in a previous   video when applications opened but the Academy of 
math and programming I think is such a fantastic   opportunity if you or someone you know is a recent 
high school graduate who's thinking of going into   some area of mathematics or computer science 
or even like things involving Game Theory or   data analysis this is a residential program 
it's in New York City it runs from very late   June until very early August in 20124 all 
costs are covered and jam Street will give   all participants a five ,000 scholarship to help 
them with their future education it's for anyone   who's recently graduated from high school and 
has experienced some kind of obstacle in their   education thus far so please please if that is you 
apply if you know someone such a great opportunity   please tell them about that applications close 
on the 13th of March links below so yes using   skew Transformations is no longer needed because 
computers are now powerful enough to do rotations   and mean SKS were easier to do back in the day 
but now the GPU can rotate things and we have   so many pixels we know it's a bit sad but we no 
longer care about any one individual pixel but   I still I like it it's a really retro it's 
a hipster way to rotate things so I'm going   to finish by rotating through all 360° here I go 
and I keep my arms like out on the edges because   I I didn't really bothered dealing with the edge 
cases so who knows what's happening with these uh   thanks again to Jan for sponsoring the video do 
check out amp or tell someone else about it and   yeah uh watch whatever video is on the screen 
now some wherever it is good luck and uh maybe subscribe I'm going to keep doing this until 
my laptop melts which is holding up pretty