this was definitely a crazy tweet I saw this okay check this out hold on hold on hold on Rust teams at Google are as productive as ones using go and more than twice as productive as teams using C++ before we go through all this and argue okay let's let's do like let's do a little let's do a little poll okay let's do a little bit of a poll let's see where let's see where everybody ends on this one because I'm just curious okay so most people think it's false still a pretty large percentage is saying that they think it's true even though this is only 20 70 votes out of plus 2,000 people yeah 2200 people and people aren't believing it okay okay so I'm going to give you my take on this one okay so I've done a lot of user testing at at Netflix I've done a lot of thinking about how you test users and you do all that okay so it's a very important skill to have to recognize when someone says something that they're full of okay and so let me give you a little reasons why I can tell you why this statement is of course full of so whenever you do testing to find out is something better or worse what you have to do is you have to minimize the amount of variables and so that means to truly test this a you're going to have to have devs same level of experience B you're going to have to work identical problems and C you're going to have to be given the same amount of resources and management right because managers can totally screw up how well people program the type of messaging how they manage their communication style right like there's plenty of reason that can totally f up a team regardless of the team's experience then not only that but the people working on the team have to have equal levels of Jive you know what I'm talking about like they have to be able to work together in a really good way and so when I see a statement like this why I can say this statement is utterly pure is that one I don't believe everybody has the same level of experience because C++ has been out since before I was born and guess what rust is fairly new okay so by that very nature very SE your rust people are not even Midway through the C++ cycle there's people that have been programming C++ long like for so dang long and so there ain't like so so experience levels aren't the same second off rust hasn't had the time to mature at a place like Google so whatever projects you're working on with rust aren't going to be in the same kind of tenure how much do you want to bet these C++ code bases that they're working on are plus 10 years old minimum like absolutely minimum and so it's like the difference of working in a 10-year-old code base versus working on a Green Field is absurd to compare and these code bases aren't like small ones right these these don't happen to be like ah this code base is 5,000 lines versus 3,000 lines it's going to be like well this one's a half a million C++ co uh code that started off with C+ 99 has been slowly upgraded to C++ 23 so ain't no way I believe that second off C++ people that have been programming C++ largely what I've seen in the C++ world is a lot of like oop abstraction which I think slows people down so even just coding style and techniques are going to be so vastly different between the rust side of people and the C++ side of people and I think just a lot of functions is easier to manage than all of that testing uh you know again testing has been fairly uh fairly non-existing for a lot of C++ projects where it's you know it's already a first class citizen so some could arue that's the productivity of Russ but that's also the the like the mentality of the developers as well right it's it's a big difference um but at the end of the day when I see this stuff don't ever look at it because you know for a fact teams are completely uneven they're asymmetric teams you have asymmetric problems you have asymmetric management and so you cannot measure this I'd say the only thing you can say from this this thing that I'm looking at right here is this I cannot believe that go is 2X as productive as C++ let's go let's go let's go oh my goodness how sweet is that I let's go how sweet is that absolutely the best take from that absolutely the best take from this one right here it's it's it's honestly true you can't take anything from this so anyone that says this just remember that whoever said this I I don't believe it's in good faith I believe it is to sell something right they they developed some dumb property like lines of code maybe features delivered and that's it like an orthogonal onedimensional thing didn't consider like difficulty of features duration of features any of those things and then that's it maybe they maybe they did time spent compiling no rust would be like 20x more productive but it's just whatever the rust team is working on and whatever the go teams are working on in my book is probably less complicated than whatever the C++ teams are working on less Legacy less everything that's all I'm saying okay that's it that's it I don't believe him I don't believe him for one bit why I assume in bad faith is that bad because to be able because this is why is that whoever's talking right here I have to assume is really really smart and so I I only have two potential axes that I could I could assume on one I could assume that this person is an idiot and is just making a really bad comparison or B found a statistic that really is sexy and said bam look at that it's twice as productive right and that's kind of like a bad it's kind of like these kind of these like measurements okay and so I can't assume this guy's stupid I think it'd be meaner of me to assume it's stupid than to assume they gamed the metrics and my assumption is that it's probably better to game the metrics because there's lies there's damned lies and then of course there's statistics every single time uh let's let's let's see we never even checked out what some of the comments are saying here probably saying a lot because writing C++ at gole Google is well supported so this guy's actually saying it's even better probably one of the easiest places to be productive writing C++ I don't doubt selection effects but if the SI effect size is 2X C++ productivity it puts to bed the notion that rust can't be productive I don't think I've ever thought that rust couldn't be productive why do I get the feeling they're not working on the same things that's that's my take that's my take right there uh isn't it kind of a self- selection teams that I know that work uh on CPP usually can't move as fast because their work depends heavily on factors outside their control SL has crazy amount of Legacy code a team that's able to write rust probably has less clutter in the way also go is goated let's go let's go the man the man is crushing it uh isn't it simply uh just a let's see a go ad like how viral rust is it just seems to be marketing strp to put go as good as rust to make people interested in go since you know it's Google it's not Google I mean it is Google but it's not Google look at where it's at it's at rust Nation UK it's not quite the same big fan of rust and we're going to need some more concrete metrics last methods to contextualize this absolutely I'm on this team there you go I like that if C++ is a language for and Android OS teams but rust is the choice for new Green Field tools then that's not exactly a level comparison there we go fantastic yeah this is I I assume this is yeah how's Google measuring this where's the data there you go so it seems like everyone is having pretty much the exact same uh oppos [Music] right I just think that you just don't put I just I just think you don't put the effort in it's a skill issue it's simply you don't use you don't you don't put in the effort do I have to try to become the best at it you should try to become the best version of you at it which means every single day you should get a little bit better you should be thinking about it you should be reading up on it you should be taking the time to become better at it you don't no one should ever strive to be the literal best right the ab first off measuring it again is like measuring this are you 2x more productive than this other go engineer like what does that even mean but you should 100% try to get good at what you're working on I don't like to me that's one of the craziest things I see is that people never actually learn what they work on and they constantly have to Google how to do things or they let co-pilot purely drive for them like that is that's like really like why would you want that like why wouldn't you want to be so good you can just flow from your brain and write you know what I mean just nonstop just let like become one with the thing like learn it deep in cuz you know how crazy it is that you will watch somebody and they totally recognize the fact that like playing soccer or playing anything and get good at it requires you to deeply understand it like they understand the point of practice you also do that with any orthal thing like woodworking to understand being good at woodworking you have to like really learn your tools and then you have to use them long enough to actually gain that that hidden knowledge you know what I mean that knowledge that that you can't just earn by reading you only earn by doing the experience and then we apply none of it to programming like oh I could just look that up it's like no there's actually something more to it right there's that there's that hidden there's that hidden knowledge of being able to do something over and over again that gets you faster and faster and faster and better and better and more understanding you know what I mean people that are uh the people that are drawn to programming are also uh the people that are allergic to hard work I I just don't agree with that statement at all right I I don't I don't uh I I don't think that's true in in any sort of in any sort of capacity just saying I don't believe you that's common YouTube out right now uh I think that if you're allergic to hard work I think that you're going to have a really hard time being good at programming and that's it he's talking about physical work you should be working physically as much as possible honestly you should your body needs it make sure you're working it out it's good for your brain it makes you faster upstairs being fast downstairs is being fast upstairs the name is the primagen