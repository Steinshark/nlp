low level gang I present to you a challenge a challenge not many are willing to take but a challenge that I will take today for you today we'll be coding a c network server and client and if I get any compilation errors at any point in the challenge I have to delete my code and start over also bonus feature I will not be using any outside resources I will only be using the Man pages included in Linux so for example if you do man 7ip you get a description here how to create a TCP socket that is the only resourcing I'll be using in this video Let's buckle up could be here for a while okay so basically we want to include standard Iota H main function setup in here write out the things we have to do we have to create our socket info structures create our socket find you need to listen accept and then we need to do client stuff and then clean up step one we need to create our socket information so we'll use the Ip Man page to figure that out so we'll take all of these include just to be safe to prevent any errors from pound includes and then we will clean that up real quick boom so we want to create a socket AFI net so we want to use a TCP server so it's going to be a TCP socket so we're going to do that create our first socket so int socket file descriptor is equal to socket AF inet sock stream and then zero for TCP and then we'll say if zero is greater than socket file descriptor which means that it failed to create the socket will P error on socket and then we'll return negative one okay so Moment of Truth we're going to start out with our first compilation of this so let's make sure we have all the information needed to get this to compile we have socket here we have all of our headers created main is set up properly it's create a correct syntax okay please got GCC Techo server server.c get sweaty over here holy okay so we have the server we can run it arguably nothing happens and let's s trace it to make sure it actually Graces socket uh let's see socket AFI Net stock stream iproto three which means it created a successful socket good to go all right the hard part is creating the bind successfully so we need to call the bind syscall and we're going to check that out using kind of the same thing here man to bind so let's add the additional pound include here for the bind assist call so what does binds do give it a socket file descriptor and a sock adder struct and the outer Len of that struct and call bind so we want to actually go back to the ip7 thing to look at the structure of the sock adder in yeah so what we want to do here is use this structure to Define what the port and address is going to be for our server that we're going to create so we're going to bind to Port 1337 on localhost for this to work so struck suck at her in which is going to come for we're going to call it server info and we're going to zeroize it with that we're going to say that server info Dot sin family sin family equals if I not say server info dot sin Port is equal to host to network short of one through three seven oh that's man host and network short make sure that we have yeah see if I didn't include this I got an error on the hosting Network short piece let's include that as well okay hope the network short and then we want to uh the family or the address is already set to zero so we're gonna bind to the the multi color the all address uh for our server and we also need for the binds to call our Adder lens so socklin T that is the size of that structure there right because that's how we tell the binds is called what type of socket we're doing okay so we're going to say that sock Adder Len server info lens is equal to size of server info cool so in theory we can use all this info to call bind so we're going to say if 0 is greater than bind and bind is called on sfd oh we have to cast that address to a struct sock Adder because that's what the man page says right it's not a sock adder in it's a sock Adder uh sock Adder pointer the address of server info and then the adder lens server info lens so proper bindings there so if that fails P error bind and return negative one okay so the socket stuff was fine checking for any syntax errors here struck suck at her in the name is this set it to zero this is the family is equal to AF inet the port is equal to hosting Network short one two three seven server info lens size of server info zero greater than bind on the socket file descriptor socketer in server info server info then Pierre Bond return okay okay all right we're good now let's make sure that it actually binds do s Trace server Bond was successful good zero means it works so we're good to go there uh next we have to listen man listen follow the scripter and the backlog and the backlog is just an argument that says the maximum number we can set it to zero and it says unlimited backlog I believe right if zero is greater than listen on soccer file descriptor zero say that listen failed and return negative one okay so in theory we should get a listen here I don't want to actually use the listen because that'll cause our socket to be in use and I don't want to deal with setting the re reuse Adder port or reuse editor next we use accept this is another one of those complicated ones where you may get some issues so except there's a bunch of arguments the socket file descriptor a place to write the address of the incoming connection and a place to write the address length so we'll have to steal this type again and we'll say construct sock adder client info is equal to zero and we'll say that socklin t client info Len this is where I guess I gotta get confused is it the length to be written or is the length also set to the length of the structure adderline argument is a value result argument the caller must initialize it to contain the signs of bytes of the structure two points if I Adder I'll return it within the actual size okay so it has to be set just like before to the actual structure size so size of client info cool so now on accept its socket adder adder Len Flags what are flags flags zero is the same okay so yeah we're going to use uh zero for Flags so if so actually it'll it'll return a client file descriptor so font file descriptors equal to except on socket file descriptor the address of client info the address of sock or no client info lens and xero and then if zero is greater than the client file descriptor we will say Pierre accept return negative one okay should be good here let me do a little syntax check new variable cfd except from sfd client info client info lens zero if zero is greater than client FD there's an error on accept and then listen is also good checking the parentheses all right looking good let's do it too many arguments to function except oh except for dude no you know what that means all of our code start over standard h server info set the family set the port client info server info size of server info now we need to put all these types create the socket if zero is greater than sfd ew P error turn negative one bind if zero is greater than bind at sfd Len if zero is greater than listen on sfd of zero okay except round two let's do it if int C of D is equal to except on sfd the address of client info the address of client no Flags if zero is greater than cfd error except turn negative one okay I cannot afford to mess this up so we rewrote it all let's check it out socket AFI net sock stream 0 sfd if zero is greater than sfd PR socket return if zero is greater than bind and sfd the struct sock Adder pointer of the address of server info server info blend that gets written like it's red listen fd0 if that fails listen cfd is equal to accept on sfd that's correct client infill Len is also correct zero greater than FD acceptor negative one all right say your prayers it's a sweat dude now's the easy part we just do do server stuff so we are going to the server is going to say hello world to the client cares pointer hello is equal to hello world and we're going to send let's actually man send real quick socket buffer Len Flags then it's a size t ENT is equal to send we're going to send it to the client uh the hello world buffer and we're going to send it sterlen of hello no Flags okay here's where I can get lazy and make a lot of mistakes and waste a lot of my time so let's make sure we do this right socket void star buffer we're gonna cast that to avoid so real quick for the compiler just to not be mad voidstar size T Len what is this Sterling return size key yeah and then flags flags can be zero yeah I don't want any of this okay so we're good so we sent it and then we're going to close cfd oh man close don't mess that up also man send I didn't look at the uh the include for that oh man send uh types of socket okay we're good all right guys this is the end of the server if you get this right let's make sure we got it okay here we go GCC don't fail me now warning hold on that was our previous error whoo warnings are not errors thank God that was oh my heartbeat is racing right now this picture we include this uh string.h Library real quick header file no warning some errors good we can in theory run this we'll s trace it okay we are waiting for the accept and then we can get out of here okay now if we netcat to localhost on Port 1337 get hello world and then it exits the program perfect okay part one complete let's move on to the client same thing if I get the client wrong I have to start all over okay I've seen this before include standardish in Maine good we're going to take all of the includes from the previous file and we're going to steal these because if we have to use the same functions the same header files will get created okay so to connect to a Server create uh server info Brit socket connect to server with socket do client stuff lean up okay sweet struck sock adder in then we need to server info dot sin family is equal to if I not server info dot sin Adder we have to set this as time.s Adder because that comes from the man 7ip is s header yep uh is equal to host to network long of hex 7f0001 so it's going to be localhost the IP address let's make sure I have that LinkedIn host to network long arpa inet good perfect and then server info dot sin Port is equal to host to network short of one through three seven and soccer file descriptor is equal to socket same as before AF inet sock stream zero if zero is greater than sfd Pierre socket turn a good one good now we have to connect so we have not used the connects this call yet man connect we also need to suckle in Adder Len so we'll do that real quick we'll do sock Len T sfd land is equal to size of server info we're not going to call sfd11 recall server info lens connect takes a socket the connect address and the length perfect as easy and we have the types included if 0 is greater than connect which took sfd the casted pointer of a sock adder pointer of the address of suck or no no no of server info and his server info Len we'll say Pierre sucker connect and then return negative one okay we're gonna try to compile real quick and hopefully we're good to go let's see what we get into so I have all these includes I have main created properly I created the stock adder in for the server info set it up to be an AF inet to localhost in Port 1337 server info blend is equal to size of server info socket a5.00 if zero is greater than connecting sfd sock Adder pointer to server info server info lens connect return okay here we go GCC Taco client client.c thank you oh my God okay all right let's do it up two client stuff so let's create a buffer uh let's call it 1024 we'll say size t C it's equal to received from sfd buffer all right two buffer bad programming don't copy me and then we're gonna print uh that buffer to the screen close soccer file descriptor and return zero I'm totally clean up here all right here we go so let's make sure we did this right oh did I did I include for receive type socket good okay care buffer buffer 1024 minus one ooh how many arguments could it receive yo I almost made a grave mistake look at this soccer file descriptor buff Len Flags it's different for send than it is for receive that is nonsense okay so Flags can be null right I do no oh is it null or zero hold on it's int so we're gonna we're gonna put zero I don't wanna confuse the compiler zero for Flags this is bad code I know but ignore ignore this I'll put a Toto in there for you guys to do make code good okay oh Jesus Christ thank God okay server client we did it oh wait there's actually a bug oh because I patted it out to uh 10 24. that was actually the wrong thing to do yeah so if by default printed a bunch of  to the screen that shouldn't have anyway it worked I hope you guys enjoyed that if you did me a favor hit like it subscribe and go watch this video on pointers if you had no idea what the  just happened