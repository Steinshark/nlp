so I had this message privately sent to me from a Google employee telling me about their experience at Google of course I had to read this because this just seems crazy I have not read through pretty much any of it other than I just read this part right here which feels wild and it gave me kind of a little bit of like hey this is what's happening so let's do this tldr uh I wrote this whole thing as a tldr but now it's this size oopsies pre-watched I pre-watched this text I did format it in Tech I did format it so I do know how the ending goes because I was formatting it and I read the ending on accent how to work 10 hours a week as a software engineer for seven years for four hundred thousand dollars a year everybody take I I was expecting to see a bunch of Pepe notes going on where's the puppet notes all right anyways engineering estimates are so fuzzy and the orgs so broad that's not really used as the measure of productivity okay for flat teams 12 uh 12 per manager 70 per skip at the company without micromanagement If your manager is too busy to know exactly what your day today is it's easy to pass off slow work as challenging work okay yup thank you for the essays so first off this is actually kind of wild 12 people per manager 70 per skip there's like a prescribed amount for every six managers there's a skip level for every 12 employees there's one man there's one manager kind of wild it helps with your manager has a disconnect stopping them from fully understanding your work are they a PhD who mainly reads ml research papers and worked on ML Theory doesn't code never really did it only works on cross-team collaborations with other managers and doesn't have a good idea of the part of the code base you work in okay a lot of the work is ml modeling based and requires experiments that may or may not pan out not launching is a presumed risk of any experiment plus many ml data analysis slash investor investigatory work doesn't require checking in much code document trail of artifacts by the way you can really tell this is Google when they say artifacts Google is all about technical artifacts they want you writing up everything everything needs to be written to T alright the promo system rewards impact and complexity and Leadership which is easier to claim when you were the sole owner of a project so many projects are designed to be highly into dependent so often your teammates don't know how much or don't know much about your work this does actually make sense I love I mean just throw in leadership in there lead your own personal project complexity unknown this sounds like the dream given the old promo system in quid pro quo solicitation of performance feedback everybody's too scared to give anyone else negative feedback at the peer level oh yeah because if your promos are directly tied to peer feedback then you have like you have it's like it's like the it's like the inverse prisoner dilemma like no one wants to tell because you're gonna know and then everybody else oh baby why would you give critical feedback to someone which they can read after when you will get the peer reference from them and given how little they know if you are nice and help them with their bugs reviews quickly or just rubber stamp they often mistake that for doing a good job at your own job this is a very true statement a quid pro quo of some sorts if you will anyways at the manager calibration committee level If your manager doesn't even know what you're doing the other managers have no clue whatsoever so given only positive peer feedback plus clueless manager managers argue arguing calibration with their gut instinct so your manager feeling you are smart uh smart can be enough plus your manager is incentivized to argue for you since having a low performer looks poorly on him I could see that managers pre-bucket all employees into say bottom five percent and those going up for promo top 10 to 20 and then only those two groups are scrutinized and fought over and maybe people who haven't been promoted in a long time so if your manager likes you more than other teammates you'll get a rubber stamp performance rating with no debate from others in the collaboration committee damn adding the constant churn of re-orgs and new manager skips teammates and you'll constantly get a fresh start for their impression of you so it's often so it's often about everyone's first impression of you oh my goodness it historically we only need one real mandatory annual review the mid-year review was mainly for those going for promo this system can be heavily gamed by recency bias by working harder in two to three months before the review let's see our I don't know has a really low fire rate uh compared to other companies historically they felt they only hired the best so we're nicer than other companies and we're more willing to give more chances plus lowered their allowed Plateau level from five to four though recently they've changed the percent of people who get the lowest two buckets in perf reviews okay yeah so if you don't know what a plateau level is there's this idea that you could work at a company and you don't have to excel past that level they're okay with you just coasting at that level so they allow L4 coasting and if I'm not mistaken an L4 is not a senior engineer at that point an L4 is just an engineer and L5 would be a senior engineer so they allow an L4 a engineer coasting while the bar to get promoted is pretty high and has been competing with lots of tryhards the bar to not get fired is so so low the flexible work hours manager constantly in meetings independent projects ability to work from home mandatory coveted work from home current hybrid work week make so you don't even have to go to work and slack you can be at home playing video games and dial into meetings or two each week keep in mind you're still getting better at your job every year so if you truly don't care about getting promoted you can work for fewer and fewer hours each week as the years go on the Crux of the issue is managers hate spending time on perf reviews so ignore it all year and then have to decide everyone rating in a single eight hour day of calibration maybe an extra half day is used before the pre-sort and the half day after the tough cases they can actually deeply read and understand everyone's acl's design docs bugs design challenges to truly understand complexity and hard work in eight hours no every manager is biased and says their reports are performing better than other managers reports it's too subjective so how do they break the tie amongst themselves do they use objective numbers like Revenue no they argue that they can uh that that can be biased per team so what do they use they use artifacts the technical artifacts I've heard of these being just fantastic you just gotta write about what you do you don't actually do anything you just write it so you're not actually elevating on if you worked hard you're elevating on if you made it look like you worked hard employee checked in 100 line uh cl to implement a feature and marked the bug as done and then they played video games all month employee B had to do the same project but row 10 000 word design dock to explain the hundred lines of code they planned to write checked in their 20 broken iterations of that code created a tracking bug with 40 sub tracking bugs partnered with one engineer who Robert stamped all the code reviews faster iteration time caused production outage wrote a postmortem logged more bugs had no idea how the system worked and wrote a thousand lines of technical debt Laden hacks instead of 100 lines of code for their implementation launch something that may or may not be working skipped adding any instrumentation or spending anytime to look up or use existing metrics but it must be fine because nobody asked them to write another postmortem yet as uh and As Trump says if we stop testing we'd have fewer failing cases then wrote an elaborative 10 000 word launch doc touting their success obviously employee B performed better look at the complexity of that project and how much they did I mean it's it's a really good point consistent churn will always look more impressive than inconsistent Excellence your job is not really to write good code for the company or increase company Revenue though that may happen incidentally sometimes it's really to construct an array of artifacts that look impressive to the bosses upon cursory glance and on many teams including mine that can be vastly different than what's aligned with the company's interests oh and don't forget to throw in good measure of self-aggrandizing this is one step a plan over document and bloat everything every company has gaming of the performance evaluation metrics so why fight it instead use it to your advantage Pro tips code be sure to check in in at any random time scripts oh hold on be sure to check in any random one-time scripts like bass scripts and squeal queries to bump your change count a random utils directory nobody cares about scrutinizing Works a great place to toss these into the void bug notes split all bugs until at least 10. it's more impressive when your five line CL fixes fix five bucks be sure to add copious notes and screenshots all the images are great but it's often easiest to use screenshots of plain text and code as it increases the vertical scroll bar of your bugs therefore the complexity of problems you are solving my goodness it's so true vertical complexity is a real thing oh no design launch docs first steps of course split your uh your work into multiple launches that have to go out each with their own specific design slash launch doc second repeat ninety percent of what you put in the design dock in the launch dock don't forget to two to three x these in size a month after the launch before perf it's so good it's so true post facto edit them to be bigger so that as launch. as launch time comes closer or as promo time comes closer it's even bigger this is death death note level I know of course it varies from Team to team but if you have a LAX let's see but if you have a LAX view close teammates and a LAX manager you can call you can all enable each other in your laziness I once worked with the division 40 plus where I was shocked none other Engineers except one who was always too busy to meet knew anything about their systems they couldn't even answer simple questions like how a user might trigger their code in real life or how to force their code to run internally none of them could debug anything they literally checked in with unit tests only or maybe they skipped those two and got back aggregate statistics but knew nothing else in one day I understood and could debug their system better than any of them but those same people are still getting promoted at the exact same rate as our team obviously each team should have 10 promotion promoted equally each cycle so if you if you don't get fired in the first six months and Coast for a few years eventually someone will notice you haven't been promoted for a while and you'll get scrutinized but with only one year annual reviews and other deficiencies it's pretty easy to get here and you should just change companies because getting promotion via an interview is way easier than getting an internal promotion so let's say you've coasted for a while and for whatever reason demotivation medical addiction focusing on marriage and family you got a low rating at any point or a long Plateau you can still do all of the above and not get fired but it's really not worth it if you don't have consistent upwards trajectory consider your job a dead end because it will take longer to change people's opinion opinions of you and you are being way underpaid in the meantime then just get a new job at a different company work just as hard or less hard even and then get your promotion you are only working your way up from zero to n instead of negative n to n especially if you're offered money to quit take the money and use your additional years of experience for promo at the new place it's just not worth the uphill battle to stay PS I'm still I'm jealous of the genius who got uh who got accepted or okay here it is here's the line are you ready I am P.S I'm still jealous of the genius who got accepted who got accepted or who accepted the job at Google and Facebook during covid simultaneously worked both 2x salary will always Trump even three promos legendary I actually really liked number 21 right here this is actually really good advice this is actually Stellar advice right here which is if you do have a negative perception that fight that fight back is all but impossible you know uh because sometimes things happen right you focus on family and marriage you do things differently and you really do just you you gain a negative perception because of outside influences because of things that you're taking differently or say you used to work 60 hours a week and now you're just like hey I really want to take family important and all that so you start working 30 to 40. and everyone notices you're not delivering as fast as you used to so but now you're just delivering at a more normal level and so what do you do here do you just jump out anyways I can't give any details on to who gave this or why uh but this was a a set of notes handed to me by someone who works at Google and wanted to kind of give me the down low on what's going on and that was incredibly revealing the thing I hate about it is that I wanna I wanna I want to feel satisfied at the end of the day I want to go work and make something awesome and though that lifestyle sounds amazing 10 hours a week four hundred thousand dollars a year I'm worried what it would do to my soul you know what I mean great money amazing benefits amazing stock but like coasting kills me I just don't think it's worth it now obviously it's very easy for me to say that because you know I already get to work at Netflix I've I've established and made great things um I've done good things that I really am happy about the point is is that even if I didn't have a lot of money I'm pretty confident I would still continue to say the same thing I want to be able to make good things you know what I mean I want to accomplish things he established great things called it you know like I don't want to just be someone that just kind of works and gets by in life like I want to actually Master it you know like I really loved when I used to play I used to play the guitar for four to six hours a day and like as I got better and better and better it just it was such an incredible experience you know what I mean like I really felt awesome at it and it really made me happy and so the same thing with coding is that like it really makes me happy when I build good things you know hey the name is the prime imagine