this article is probably going to describe a lot of us in this chat okay and and you know what we're not going to feel too good about it no this is not Rick I don't think this is Brad and I don't think this is Tom I think this is you so let's find out you know this face that this AI made that's really creepy and kind of disgusting somehow I make this face regularly this uncanny impossible face to make I make that face pre-read called it after 25 years of my career I came to understand that one particular type of programmers is the source of many problems in our industry here is the story of a project that was nearly destroyed by two such programmers who is it who of you did this one of them was leading frontend development to the other back end while the rest of the team was slacking off because business requirements were in the works these two chaps were working hard the front end Le bootstrapped an angular monor repository with NX RX oh why would you choose it why would you choose it oh my goodness you know I can already see the problem coming you know the problem is is that you guys just don't understand the beautiful nature of functional reactive programming okay you need to think of time like an array okay it's an array that you select over time shut up and other trendy Technologies at the moment the corporate environment did not lend itself easily to NX but he pushed hard to solve or circumvent infrastructure's Problem by working with the domain expert he set up a workflow that while having angular as the base framework bore little resemblance to the official angular tutorial Prime loves RX don't let him say otherwise oh I love it please give me that functional reactive goodness okay I was using RX when it used to be called select and select many not map and Flat map select and select many the backend lead was no less motivated to bootstrap the spring boot project according to the corporate guidelines while adding a bit of Personal Touch in the form of the VAV library and highly sophisticated higher arch of jpa entities with multiple levels inheritance discriminators and generators you know nothing nothing nothing like a good oldfashioned whiteboard masturbation session that comes out with multiple levels of inheritance like nothing feels better than being able to hit that whiteboard and just ejaculate levels upon levels of classes nothing feels better it is it's Pinnacle it's Pinnacle programming now some of you are going to say Bas I'm going to say based AB it's abstract it's abstract based class you wouldn't get it you probably wouldn't get it you guys are probably over there programming hll telling me how great your monoids are I don't want your mon mons bro okay I don't want your mons you can go end or [ __ ] off okay he then sprinkled it over with hierarchy of validators based on Booth spring Bean validation and third party validation framework and Polished with trendy testing framework hasal mentioned let's go that's always the takeaway hll is just the worst language whoa someone mentioned hll cool yeah hey I love hll hey everybody I'm a h cool guy hey anyone want to talk about a little bit of little lamb to culus with me we can discuss some of the merits of why modules being Endo funter actually make a lot of sense when you think about the funter I I can't even I can't even give a good impersonation cuz honestly I don't know [ __ ] about functional programming okay I don't have the words I don't have the lingo all I know is your function that's partially applied will only ever be partially applied by you that's a maiden joke by the way months flew and the business started spewing requirements as best they could the empty shells of both back and in front end were already too complex for team members to work straight on business requirements so both development leads worked hard to split business requirements into more manageable technical tickets while doing most of the grunt work along the way each of them worked harder than the rest of the team combined again does this again is this not just management issues 101 like if you come into a project and a bunch of the people cannot reason about the system and then only the two leads can reason about the system at like what point do you say yo we got to get Rick to figure things out here because this ain't working out then suddenly the front-end lead quit for for kener pastures I hope they love angular and RX nothing nothing is better than when some jack ass litters your whole goat base with RX and then you got to go debug it you're like dude why is this thing what what where's this function even coming from going to play the game of like go chase the stacks oh so good the business brought it an expert front-end developer who managed to keep on delivering for a while then another one who lasted a bit longer Junior dad kept underused the load on the back end lead was ever increasing he spent long days and even longer weekends delivering what seemed to be simple crud interfaces but they were so convoluted on the inside that little could be done to alleviate his workload by the way whenever you make an abstraction and you find that every time you do something simple and it's exceedingly complex it's always because you got too clever to begin with this is a tale as old as time just program like you're you're an idiot you're stupid it's okay be stupid be like the rest of us and just just be stupid don't be clever don't come up with some cutesy way to generate all the greatest things you've ever done and don't worry this is super flexible and Abstract no you're too dumb I'm too dumb John carmack's probably too dumb to do it too it's okay just make it simple one dimensional solve the problem at hand don't solve tomorrow's problems because you don't know what they are and you're not that good at it anyways that's the secret I'm always stupid that's funny I'm always wrecked a few months later the backend lead quit as well and the team continue to work at a snail's pace under the ever increasing pressure from the business to meet the deadlines the quality of code was failing to point that VY objects were used in null comparisons and angular typescript was randomly intermixed with plain JS at the end the team barely delivered a product full of bugs the Futures looking Bleak none is up to the task to rewrite the many thousands of lines of code produced by the initial lead developers turnover high costs are Skyhigh you know I wonder how many times this has to happen before this like isn't a problem does every single manager ever either has to live on a project that this happens on or has to manage a project that it happens on before they don't do that again is this where Rick started yeah he left earlier in the thing like is that the only way to ever learn from this is this just an evergreen source of just horrifying this does this description of software project feel familiar I didn't even read that and I highlighted it and then I'm talking about it it does for me as I've have seen probably a dozen similar projects in different industries from online media to Public Services the programmers I described are usually considered to be the best of us but I came to perceive them as the worst here is a non-exhaustive list of qualities of these people watch out for them ooh here we go here we go here we go here we go ability to find satisfaction in solving abstract problems interesting great math skills glorious Le code profiles and an aptitude to solve crossword and compose puzzles are signs of a person can work on problems without real life utility they concentrate on the process not on the outcome I strictly disagree agree with this statement I strictly strictly hard disagree with this statement real talk right now APM requires us to build in a where is it a motion tree and to build this motion tree required us to be able to build a tree inverted and nonambiguous okay I think that's legitimate I think it's fine to have those skills you just have to know when to apply those skills here okay so I'm going to actually invert his argument I'm going to go way deeper if you don't have those skills and you don't know when to properly apply Li them you are just as bad the only difference is that you make abstractions in your own madeup [ __ ] way as opposed to at least to some sort of standardized way ability to put up many hours of work one has to be healthy and dispose of large swaths of time that they can dedicate to work family kids carpal syndrome are all signs that you are not of their kind this is a crazy take I was following this article hard okay so maybe it's because he's describing me the ability to work long hours is probably some sort of cross-section between pass motivation discipline kind of like life requirement and genetics mild Insanity potentially Prime was Rick all along Prime was the Rick all along to me this is kind of C I like working you know I like a good 60 hours a week that's a good good amount for me cuz for me for me to be able to learn and understand new things and to be able to get deeper into situations I'm doing I don't know just makes me it makes me happy passion and what the [ __ ] is going on in this list a bright and motivated programmer can always find a way to fit technology he enjoys at the moment inside a project that pays his bills business is dull coding is easy so why not make it slightly more enjoyable by dragging in the latest technology everyone is excited about moreover this will be yet another trendy item on the resume I love this right here I love this one right here I need to spend about 10 hours a week learning stuff or I start to really hate my existence kind of a lot dude this is me if I don't spend some amount of time just learning something I hate it can I try to invert what he's trying to say here can I invert this a little bit what I think he's saying all three of these points point to the same problem is that wisdom not the ability to solve a problem but the ability to understand which problem to solve wisdom is extremely important if you like working a lot that's fine if you like solving abstract problems fine if you have passion for software engineering and you like to learn about new things and best ways to do things as much as you possibly can I think that's a positive but if you don't have the wisdom to know when to apply those and not you you are a fool let me give you a quick example my previous project I wrote it in node because everyone said hey we got to do it in node hey we got to do it in these things hey we got to be using this hey it's the standard path it's all this kind of stuff we'll ended up being Millions upon millions of events coming in that are encoded in Json and which are done in node which was adding minutes of processing if not hours due to how slow node was well really how slow JavaScript plus how slow asynchronous operations are in node plus how slow like say a for loop I removed dot for each and replaced it with literally four let I equals whatever it took seconds off of execution time my mistake was I used the technology that was safe I didn't use the technology that I knew I should have used which was probably rust or go that was my fault I made that mistake I'm literally doing it again and guess what language I chose I chose rust because I'm not going to get boned Again by node and JavaScript not being the fastest language when you are doing millions and millions of lines of processing is Passion good yeah but wisdom is good too and I chose the right tool I believe I did choose the right tool for the job cuz I chose the tool that people could contribute to No One contributes no one will ever contribute to your tool I chose the tool that would work best with our ecosystem and it did except for I had to make a bunch of stuff that was plainly available in other things you know what I mean anyways okay narcissism and self-confidence ooh this is interesting this is probably related to the Dunning Krueger effect in that the worst of Our Kind are usually relatively young bright people in their late 20s or 30s they are consistently praised as overachievers and do not encounter much criticism you keep using the word I don't think it means what you think it means just in case we'll let it go one more time you keep using that word I don't think it means what you think it means can I be real with you guys I know that people often cite Dunning Krueger as thinking you're smarter than you actually are but I know that the meaning of Dunning Krueger is supposed to be different and I never remember what it is cuz I'm too stupid to remember and I don't think used it correct here people keep using this this to prove some sort of point and they almost always prove it's the exact opposite I know that I just don't really know what it was he even he didn't spell please tell me that's true please tell me it's two ends oh my goodness let's go let's go oh oh no oh it's so good oh it's so good oh it's so good to misspell Dunning Krueger oh my goodness that is the that is the greatest thing ever I I would say that from here on out I'm only going to misspell it from here on out I will only misspell Dunning Krueger it's the only thing you can do Mandela effect Shazam how not to handle the worst kind appealing to management does not work after all the management in business environment is usually non-technical uh and the worst kind are the best performers I've never wholeheartedly disagreed with an article more in my lifetime than this I mean I think we got a selection bias problem here selection bias being being that if you've only you you only get to work with so many people and that's going to color your perception of however you think the world of software engineering is and so I've worked luckily with a bunch of people who were really really good and they produced a lot of code and they did a lot of good stuff I at one point produced shitty code but a lot of it and I was I mean I was this person I just happened to be 21 when I was that person I still produce shitty code in a lot of it it's just that I usually make time and have a better idea of how to refactor it into something that's good you know what I mean I usually just only program shitty but put it behind nice module and then refactor when it's time and when I know it's time to refactor it and you know what second off it is literally Management's job to make sure that this doesn't happen Management's job is to ensure that a that a that a team can work cohesively together one high performing person when no one else can work with them isn't a high performing person this is like management 101 people who should the management Listen to If not the best performers their performance is quantifiable and team spirit is not team spirit is very quantifiable how are you doing oh wow you're feeling really confused that's funny cuz Jimmy and Charlene said the same thing talking directly to the worst kind also does not work they listen and kindly respond to their critique of their engineering choices but the discussion of teamwork falls on deaf ears they cannot adapt their engineering choices to the least experienced team members just like some adults cannot adapt their speech when addressing kids so I've actually worked with the inverse of this I've worked with people who refuse to not use things that aren't widely used and that also causes a lot of problems in an in verse weird sense it's very hard to describe without being hypers specific and I do not wish to be hypers specific I mean I've worked with the opposite side where it's just like we will only use the things that everybody else uses that is the most industry standard and sometimes when you have a bespoke problem and there is a general solution out there or you can solve it with the general tool and it can get you half the way but at some point half the way no longer works well and you have to become bespoke to go all the way what can be done the first step to tackling this problem is to recognize it exists the second is to spell it out most software is written by teams it has to be approachable by every team member the third is to look around for existing ideas to tackle the problem surprisingly many contemporary ideas in software engineering can be viewed as ways to fix the problem of the best of us goang Lua and other simplistic languages oo I do like those two languages quite a bit there is Broad consensus that goang is simple to the point of being simplistic it is in a way opposed to rust as a means to an end and not let's see and not a subject of discussion golang team strive rust teams rust because the language encourages concentration on itself not on the outcomes of engineering projects it's just skill issues I will agree that rust takes more time to become proficient in I think we can all agree with that rust takes a significant chunk of time to become very proficient in but when I'm doing string processing and command line utilities you know what language I reach for first rust it's the best it's literally the best at command line tools node no shut up always JS [ __ ] you nice rust is annoying with the unwrapping a skill [Laughter] issue I have never seen such a you that was the greatest that was so good thank you for that thank you for that I I too used to think rust was really annoying with the unwrapping I had skill issues it seems so narrow though to limit it to CLI tools yeah that's because that's where my expertise in Rust is is in string processing and C tools it has an amazing iterator pattern from and options and results it's really good it can be really really good one largely unappreciated aspect of scrum is the interchangeable nature of team members oh goodness gracious what are we I feel like we're about to say something positive about scrum and I'm I'm I'm about I'm about to be sick well there are many specializations team members are expected to handle any task from the Sprint they should lead to simpler engineering Solutions which are at the reach of all team members oh gosh I have never felt a more opposite take in my entire lifetime sophisticated programmers usually work on Niche environments it is relatively easy to be sophisticated spring boot programmer or a sophisticated C++ programmer that's actually called a normal C++ programmer like I hate to tell you this but if you can program any application in C+ plus you're already more sophisticated than 80% of web developers devops turns everyone into generalists configuring servers or Cloud environments monitoring deploying setting up pipelines while coding microservices the sheer number of required skills transforms even the best of us into noobs fostering compassion towards less skilled team members let me get this straight I believe the take here was this hear me hear me out hear me out on this one I believe the take here was that having an environment in which you have production critical services on in which makes you occasionally feel like a noob makes you have empathy for co-workers who have skill issues did I read that correct my take is I'm a Noob stop making me look bad I don't think chat GPT wrote this this is two novel of a take for chat GP I think somebody really believes that scrum is good and devops make you feel like an idiot therefore everyone should do it because that way you can have empathy I'm going to throw something completely different out there I think that you should do devops if you're passionate about devops I know point point up here about not being passionate I want you to be passionate about devops I want you to become really good at it I want you to be able to do your own kubernets if you really need to and guess what I don't want to hear about that [ __ ] yeah I can make a Docker container you need me to make a little Docker container not a big deal NBD I'll throw a little container together I'll use Alpine Linux I'll throw curl on that son of a [ __ ] but like real talk I don't want to know about any of that okay I want to hand you a Docker and you make it you you make it go you just make it happen I don't think about ports I don't think about any of that I don't I I don't know what a node balancer does I don't honestly know how a node balancer works I don't know how it literally works I understand ideas about it and I understand strategies about it I understand that you really want consistent requests like that's one of the greatest things you could have as a node balancer is that when customer a makes a request and then customer a makes another request again it goes to the same machine because if you can have the same machines with the same customers you can actually get a lot of local cash efficiencies but how the hell does that actually work I have no [ __ ] clue and that's okay Alta four he should be the devops guy don't make me the devops guy okay you know what I'm good at I'm good at going hey these are all the things that go wrong let's bring some order to chaos that's what I'm good at all I'm going to do is say the word structured logging nine times and then here's some open source SL bespoke tooling we need to create like that's all I'm good at scrum sucks ass devops should be done by people who like devops hot take cold take [ __ ] off I don't know which one it is but this is wild the name did you see this sweet hoodie extra life sent me a hoodie look at that extra life hoodie look how sweet that hoodie is a j