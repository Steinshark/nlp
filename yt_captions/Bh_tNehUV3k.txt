can rust beat JavaScript in 2023. I mean you know my answer my answer is already a yes right now okay it's a strong yes but let's see what Josh Moe has to say about this uh if you've been working in a rust for web development for a while you'll more than likely know that stacking rust front-end web development like wasm against JavaScript is hotly debated topic okay so I mean if we're gonna be real and I'm gonna I'm gonna steal man JavaScript for a second it's not a Hot Topic okay there's pretty much all the soy devs that want to Forever work in typescript for everything from ml to data science to tools to 2E apps to everything you can think of that's that side and then there's the other side rust and they want to be able to use rust for everything you can think of ml data science tools two e's front ends pretty much everything you can think of now these two sides have nothing in common at ever and they're both competing for the same thing which is everything anyways and namely because there's a large number of people who perceive it to be not production ready or slower than JavaScript I don't know who these people are I think they just don't want to use rust uh this may be true in the past it historically Spencer oh this is where leptos comes in boys we're gonna get ourselves some left dose on here we know it you know it look at this right here it is where are you leptos she'll expose yourself wasn't binding solid Sycamore Deez Nuts where's leptos I know leptos is somewhere on here or they can do oh if they do Sycamore no oh there's leptos right there got a little worried there uh this made uh let's see this may have been true in the past it historically been true that there is some overhead for JavaScript to make wasm calls because of wasm not being able to reach the Dom however currently this is of little consequence Benchmark numbers show that rust wasm Frameworks like leptos and Deoxys which uh which uses Sledgehammer under the hood a JavaScript framework that is the third fastest framework are ahead of most JavaScript Frameworks like react and view I mean it's not hard to be in front of a react react contains an entire like second Universe while doing whatever it's doing and it compare States and all that right it's just not it's it's like not even the same right you can find the original best Mark touching and this also I I really don't like this this approach to Benchmark testing to tell you the honest truth this is just some dude's laptop I don't feel like it's highly repeatable I would like it to be out on like say a lenode server Nano node ran a hundred thousand times across all these different variations you know and then see what happens right I want it to be super super repeatable I don't like it's just some dude's laptop all right I don't like it I don't like it yeah sure it's repeatable on some dude's laptop that's not repeatable okay that's some dude's laptop I want it on like I wanna I wanna be able to dockerize an app that just runs and tells me how they're each doing that's what I want as you can see in the picture through uh though blurry just get a better picture uh the order follows vanilla JavaScript Sledgehammer what dioxis runs under the hood wasimbingen the library that allows interop between wasm modules and JavaScript solid.js of view with RX and then leptos dioxis lit JS and then Sycamore Deez Nuts and then View and react and you clearly there's something to be said about the performance of how well rust front and a front-end Frameworks perform over even some of the more popular JavaScript Frameworks see I don't think that's that's the wrong takeaway here this is fundamentally a wrong takeaway why is that does anyone know why you can easily prove that is not the case right here anyone know because you you is literally you Mr you is literally react but in in Rust and wasm so why is it performing so poorly it's because what you're really seeing right here is you're seeing the cost right here solid.js leptos dioxis you're seeing the cost of signals versus not signals right very very very different I it's just it's just significantly better right you is covered by your head I'm Mr you uh really though that's that's what's going on here and so that's why you're seeing such a big difference and I think the thing is is that signals is awesome not signals less awesome right uh clearly there's something to be said here uh about performance of how West or yeah blah blah blah you could of course just write a pure JavaScript with no Frameworks however whether that's something that can be advised is a different matter entirely again front and Masters they do it uh they don't have a large team either and they do pretty good let's look at the back end benchmarks from Tech and power all right here we go look at that you see uh what do we got we got a dragon these nuts we got actix okay we got axum hell yeah so we got some good ones right here I'm surprised Hyper's not in here oh unless if it's framework must mean that it's not just it must be more than just whatever hyper offers right because Hyper's supposed to be like the one right with five out of the top ten or unless if I'm just blind am I blind I might be blind I could be blind uh with five of the top ten uh back-end Frameworks being written in Rust it's clear that the power of rust as a back-end framework is self-explanatory so I also don't like these measurements either uh these measurements are severely fraud a flawed you can even see the write-ups about how people gain the system they do all sorts of things to be number one on this one the reality here is is that almost no framework is really your bottleneck or matters that much right I just don't think it's that important honestly the language makes a significant difference even if you know express.js was just as fast as actix it doesn't matter they're not going to be the same once it's past past that moment right because you're gonna start getting garbage collection you're gonna start getting all this crap you know what I mean uh easily competing uh with C plus plus some might say rust is overkill for a back-end service however where you get more performance you can save money not by not requiring as much memory footprint as well as more service uptime with less crashes so this part is really really true uh I'm writing my first kind of production grade rust right now and it's been pretty enjoyable I'm liking it I'm not saying it's the best experience I've had I can't write it in typescript because it literally crashes non-stop so rust is like a really great alternative we'll see and going is like a really great middle ground golang wins every time I think golang is probably the most Superior language right now for back-end development because it is the most it has like it has the maturity the ecosystem and the ease of use pretty well figured out and and just like it if I had to go work and go I could be up and running tomorrow you know what I mean like if you said hey I need you to go commit to this project it's in go it's a web framework go for it right I and I I've never used golang professionally I could do it right it's it's not crazy you know what I mean uh I'm learning going uh not the right job ever again yeah that's a good that's a good reason too despite the results though it should of course be mentioned that speed and general performance are not the only factors that affect the overall decision uh is when we're choosing a new framework absolutely what about developer experience I tend to hate this term in general uh almost exclusively I don't think developer experience means what most people think it means okay because there's no universe that exists that JavaScript or typescript has a good quote-unquote developer experience most the tools are  the tools that are just starting to come out are starting to get better there's still a huge fracturing ecosystem it's still hard to work with common JS versus esm right there is plenty of things wrong with this whole notion of developer experience uh it's then people try to say well developer experience is also the speed in which you can write an app and I would say hey guess what the speed in which you can write an app is a function in which you're familiar the language fight me on it I know people that could write a nap faster than you and C plus plus why because they're excellent at C plus plus and that's what they're familiar with so it's this dumb argument in which everyone makes that somehow oh you can you can ship it faster no you are shipping it more familiar that's all it is that's all that's all there is uh error handling how can we tackle things like SSR are there important questions that need answering if we want to make final verdict uh on what we want to use and thankfully rust has the answers um you know and I'm also one of those people like there's plenty of ways to make an app and at the end it's how happy our users are so do you need all the buzzwords maybe maybe not maybe what you need is just happy users and that's kind of how I tend to think of it let's do this one uh typescript on typescripts LSP is okay I would say it's in general it's not as good as good as Russ LSP uh rust analyzer tends to be the most Superior then typescript's a pretty strong second uh there's some things that are really frustrating in general uh but that's more of a typescript I mean just because typescript is a bolt-on type system right it's not actually a type system it's just it's meant to make your experience better with JavaScript if there was no if there was no typescript JavaScript would actually be a terrible language uh all right let's see despite what many people think Russ nowadays is relatively forgiving uh to get into when it comes to web development yeah that's actually pretty fair a lot of code is somewhat uh similar to the JavaScript component style of the web Frameworks like react let's have a quick dive into the example uh component of leptos rust framework one thing I don't know if they're going to talk about in here uh no they don't talk about it in here uh I'm just you know because I'm going through my first you know I'm trying the zero to production book but there's this there's this section you gotta check it out I forgot what they're even called at this point because I'm just getting deeper into the whole access thing but the ability to have like the the functions to the arguments to your functions determine how the data is processed by the time it gets to there so you can actually have a data an argument into your function that takes that says like hey I'm form data and that means the body of the request will be passed through URI encoding before it gets to you because you made that as an argument to your function it is one of the coolest things ever and Russ can do this because rust is so awesome impaired dude okay Jake we get it you love it but I'm just saying it's like one of the coolest things in the universe uh there's a lot of super cool things with rust that just take the suck out of things there's also a lot of things that add the suck in so you know it's both ways let's have a quick dive into the component code all right so here you go anyone that's familiar anyone that's familiar with solid.js this should be pretty much instantaneously perceivable right this all looks pretty straightforward uh if you don't know what this means this is a trait object into view uh that means we're returning this thing right here there's no return statement sorry that they they just chose to be implicit here uh obviously this is the context this is part of the reason why it's really really fast you get your div your buttons this all looks pretty good you got some signals going on right here you put those signals in here bada bing bada boom it pretty much just updates by itself this list looks like solid in fact Greg leptos Johnston wrote a lot of leptos looking at solid trying to understand it easy to work let's see yeah it's easy to work with trunk RS which is beautiful there you go look at that simple counter initial value equals three like this just looks this just looks like code you can kind of understand as you can see the code is really not far off from something like jsx the main difference being that instead of returning anything the component uses a rust macro to render HTML and the main function acts like the index.js script for a root file like you would in react view or any other web framework that you can use to write websites in with JavaScript another example from dioxis I've never really used dioxis so this one's a little interesting I don't I don't think I like this style I mean it looks simpler and maybe a break from HTML would be a good idea but I like the idea of HTML better you know I mean I like this look I like I maybe I could love this maybe I could learn to love it I don't know cool though looks like El Mia as you can see it's pretty simple to write RSX uh dioxis answer to react uh reacts to jsx and perhaps even easier than using leptos you may find a quite evident uh is that the react component philosophy transcends any one particular programming language and in fact uh finds a home quite more comfortably in rust or quite comfortably in Rust so it's not really react it's more I don't know if jsx and react are supposed to be looked at as one on one in my in my head they're not supposed to be you know it's really supposed to couple those things uh you could even combine these functions with unit structures to get namespaces for your various functions yeah oh nice get dog API Jason dog Jess on cat there we go beautiful right this looks pretty good uh all right I like this yeah this is something that's I do want to understand a little bit more about this right um I haven't played a lot with some of leptos's ability to do some cool stuff here but it'd be fun right as you can see we are pretty much barely scratching the surface of rust in terms of rust's Unique Mechanics and we uh can still make some relatively decent Headway however what really shines through here is Russ error handling said that since day one let's go which is a great advantage over JavaScript or even typescript they're the same thing that's why they have the same error handling normally if you're coding in typescript you have two options type checking and try catch blocks however for anyone who's coded a while wrapping your code constantly in a try catch blocks is not really all that ideal and I think there is some hit to um uh what's it called to to some of the jit stuff does anyone know that if I'm not mistaken there's like some jit there's jit consequence for for try catch maybe that's gone now but in my head there was something there that made it so that it's it's different uh and speed I'd have to I want to try that out used to be but not anymore okay improved it okay yeah V it's improved a lot vid is has improved most of their handling of almost all of the uh closure stuff they've done really really good so you can see it in node 19 pretty obviously uh all right let's see uh let's see you still have to deal with JavaScript related problems if you're not careful CGS versus ecmascript random errors and runtimes that take forever to fix because you don't actually know what's happening yeah at Netflix we still just have we still to this day just have like a sub I is undefined we just have it it's forever it happens like 0.01 of the time on television we don't know why it just happens right no one can figure it out it just happens uh let's have some look at some basic rust handling all right there we go we've already seen a lot of this if you're familiar with it the result object is effectively kind of like you can think of try catch like a result object in the sense that the successful value the first argument is what is the good value the bad value of the air is the second argument and instead of throwing you can only return one function up you know what I mean there you go and then it has a lot of really good Mechanics for handling errors so you don't have to do things like uh you don't have to do things like if air equals nil return this right let's see as you can see from the example showcases two examples we uh we can either use basic pattern matching to determine what the string is and return an okay if the result matches or if anything else hence the underscore we can just return an error that has a string type also Implement standard error hence we can use it as an air type we also can declare a variable by writing essentially that it uh that the declared variable must be an actual result type otherwise do something else yep uh we can also use the res itself uh as it will be declared as the value contained in the result yep ecosystem this is a good question right because I think this is one of the biggest things that hold people back from trying anything new which is how well supported are you actually while the ecosystem in JavaScript via node and npm is much larger than rust so this doesn't mean that rust is incapable of suiting the needs of most projects Russ currently has great support for databases redis and many other uh more services that you'd want to include in any component web app regardless of what language you're trying to write it in yeah that sentence was a little bit wonky I'm going to reread that one rust currently has great support for databases redis and many other services that you'd want to include in any web uh or competent web app regardless of what language you're trying to write it in you start off with a rust and end with any language what they mean is rust has really great stuff okay anyways if you're trying to build a SAS rust has a crate for pretty much everything you could need letre for SMTP async Strife for stripe payments oauth 2 for working with oauth kobach's callbacks for social network account login squeelex and Diesel and CRM and turso uh for let's see or if you prefer an orms for databases and even air table and of course open API open AI API for working with Jeopardy 3 rust even supports a rabbit mq using Lapin as well as RS Artie Kafka for Kafka support once you get your SAS off the ground from this standpoint it's pretty clear that rust can contend with JavaScript if you're trying to make rock solid Performance Services I think I kind of wish the part that he would have uh double clicked  and this is the error handling and I like the ecosystem which is it pretty much has everything else but the error handling is really big because you will never know when you're you'll never get into a situation in which you don't know that something could air that means you'll have a service theoretically you could write that will always work that will never go down because all errors will be handled and to me that is really really good and the second thing that I think Russ does that is really impressive that I don't I as far as I can tell they don't talk about yeah he doesn't talk about in here which is Javascript parsing is validation so for you to be able to do that in in typescript you have to parse cast it as an any you know it goes from any to whatever you're you're doing and then followed up with something like Zod where you're saying like hey can you crawl this data structure and ensure that this data structure is actually correct whereas you don't do that with rust there is no such thing as uh as doing that Russ can still Panic absolutely but virtually all panics are your own fault right and so that there's something really cool about that that you have this so that means the definition of your type is also how you validate it and how you parse it which I think is like 10 times better right there's no such thing as a free lunch uh so you're right there's no such thing as a free lunch the difference is is that with rust you are forced to handle the error up front the error is there you can't just ignore it you have to do something with it even if you unwrap it you still have to do something with it whereas with JavaScript it feels more like a free lunch because you don't know it can error right you don't realize something can go wrong and that's where like the big thing is uh that's why I think the bigger thing is is that you just pay more for your lunch with rust your lunch just typically always shows up Zod is a perfect example yes Azad is a great example zot is a great example of why people don't realize how good rust is it's because it's a concept you're trying to shoehorn into JavaScript as opposed to it is a thing in of itself in my own experience I found cargo to be much easier to use when trying to get uh to get around and finding good crates you can install things like clippy which is a brilliant utility that doesn't need to be initialized to use you can simply use cargo clipping and it'll run you can uh and it can help you detecting things like unnecessary borrows and letting you know when you can optimize your code what's more if you need specific configurations from Project to project you can also simply create a clippy tomml nice okay that's effectively clippy's like prettier plus linting plus some other things all into one and it's supported at like a a good level uh due to rust not being the de facto web programming language it doesn't typically receive first class crate support for things like working with service apis however most service apis come in the form of you know uh HTTP rests I tried to come up with a cool acronym for http I don't got anything web services with endpoints and you can uh hit and you can create uh and you can also use a crate like request yeah request is great to retrieve data it even comes with the client so you can cache your uh you can hold open connections and be able to do stuff so you never have to tear down connections you get to manage things a little bit nicer hapty happy I want something with like hippie but it doesn't quite work uh when it comes to deployment shuttle is by far the easiest way to get started uh on deployment when it comes to using rust when it comes to backend deployment it's often the case that you might need to mess around with config files or add your environment variables via a GUI on a website for this service you're trying to use or may struggle with trying to use a Serv static files shuttle what is shuttle uh on the other hand uses infrastructure from code philosophy the code annotation that allows you to uh to get going quickly and without having to mess around with config files by simply declaring them in your main function via rust macros that's okay hey okay that's pretty cool sounding I actually want to try shuttle RS all of a sudden we can use uh them to provision a database get static file support by adding compiled uh front end from JavaScript framework like next.js reactor any other framework okay look at this shuttle postgres Secrets static folder oh my goodness that's pretty cool okay I kind of like that I like that I do like that all right thank you for reading all this uh with all that set hold on let me look at this uh squeal X migrate run postgres away to expect migration yep okay hello World secrets get my variable nice okay API router create a router with postgres there you go uh new router Nest API route Nest okay get Services okay return the router nice beautiful I actually want to look into shuttle RS all of a sudden now uh thank you for reading uh with all of this said it's clear to see that rust is a great language worthy of of usage for web development that offers more performance at lower memory footprint saving time and money by offering better service uptime and being able to get more for Less yeah I I actually agree with a lot of these things I mean nothing's going to beat the ease as of right now of developing typescript with the web app and what I mean by ease is that when something's going wrong and you need to debug it debugging in wasm is just not as simple as debugging in typescript it's just not I wish it was as easy but it's just not as easy right now and so I'd love to see something that's you know I'd love to see something that makes it as easy so for those that love visual debuggers I think wasm is definitely a harder area to be in and so you know I like it it's pretty good hey guess what the name is the prime gen hey like And subscribe already you're watching this on YouTube like nine thousand times just press the buttons hey thank you hey chat say goodbye hi I'm a marker twitch fix your flip please don't add this into the video like you did last time okay I don't like that