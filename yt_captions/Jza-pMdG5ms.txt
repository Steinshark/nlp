all right so let's do this okay so spell five we're in preview mode right now it's just introducing here's some good looking stuff that's coming out right here are you guys excited you excited for all this you should be excited about this so introducing runes rethinking reactivity you know again I just just so everybody knows if I wasn't using htmx I think at this point in my life I would probably go sveld I've been looking at spelled on and off for the last about five six years and I've just always really liked what they have to offer and so this is very very exciting so in 2019 spelled three turned JavaScript into a reactive language sveld is a web UI framework that uses a compiler to turn declarative component like this right so you can see right here you got a little account function increment do this on click increment count count into an optimize a tightly optimized JavaScript that updates the document while uh when State like account changes because the compiler can see where count is referenced and the generated code is highly efficient and because we're hijacking syntax like let and equals instead of using encumbersome apis you can write less code I actually do like this a lot about it like I like the commitment to just saying you know what eff it f the whole thing just F the whole thing if you want if you want it we're going to give you some pretty sweet stuff and so that's what we're doing right a common piece of feedback is I wish I could write all my JavaScript like this when you're used to doing things inside components magically updating going back to boring procedural code feels like uh going from color to black and white look at this whoever wrote this blog post being from England or some I tried to sound as stupid as I can I feel like if you add or some  to the end of anything you instantaneously lower the IQ by 10 10 points one generation svelt 5 changes all that with runes which unlocked Universal fine-grained reactivity okay let's check it out we're gonna we're gonna skip over that one we'll just go into the blog post even though we're changing how things work under the hoods felt five should be a drop in replacement for almost everyone hey you know what that's nice that they're letting people know there's going to be potentially a little bit of work but hey uh the new features are opt-in your existing components will continue to work oh that's nice yeah let's see we don't yet have a release date for spelled five sag uh what we're showing you here is work in progress that's likely to change nice roon roon roon a letter or Mark used it uh as a mystical or magical symbol is go claiming that utf-8 is magical is that what's actually happening here go is just like that shit's magic that's the problem you're using a magic language called utf-8 oh you want more magic have you heard of utf-16 anyways let's eat runes are symbols that influence the svelte compiler whereas svelte today uses let and equals the export keyword and the dollar label so for those that don't know you mark something as uh as reactive by using a dollar label it's pretty clever because most people don't realize labels exist in JavaScript here I can give you a quick you guys want a quick example of of of a label uh most people don't actually know about labels here we'll just jump in here really quickly uh let's look for the first here we go uh I don't even know what this is oh that's a big that's a big file that's an L file com compiled from whatever it's called here we'll just go start up so you can do something like this so I can do a uh I can do like an outer right and then do four let I equals zero I has to be less than ten I plus plus do one of those add an extra one of those yank that paste that in here do that then do nothing right here take I uh in here I and make it what J there we go and if I plus J equals ten then break outer so what that does is it effectively says break out of this Loop instead of this Loop for those I don't know it's it's pretty cool it's a pretty cool little experience there uh most people don't know about that it's available in several languages like I've done it in Java you can do it in C if I'm not mistaken C plus plus uh it's a go-to it's effectively like a go-to it's a way to do outer loop breaking because what you'll see in a lot of people's code that aren't used to this they'll have some sort of like if you know they'll have some sort of found equals false right let found equals false now have something like you know they'll have something that looks like this right that's like found equals uh I plus a j is equivalent to ten and then have if found you know then they'll have if found break or some like that right I don't know you've seen things like this right where you're trying to control an outer loop break from the inside so that's the whole point so what svelt does since no one actually does that because that's crazy programming right since no one actually does that they use the label to tell the compiler that this label denotes reactivity which is actually pretty smart right State equals zero increment for example uh declare a piece of reactive State we can use the state room there we go Shazam State roon that's a that's a rune that's a rune of statefulness here let's see it here we can pop that out I'll show it to you just really quickly where'd that thing pop out at so there you go so it's using a label label reactive double equals this so now when this thing gets changed it automatically does it right it just automatically updates the it's pretty clever it's a pretty clever use of JavaScript syntax valid JavaScript syntax to help make uh your compiler work I think it's I think it's I think it's pretty clever um so instead we're gonna do this state room so we're going to go back to a function it looks like at first glance this might seem like a step back perhaps even unsfelt like isn't it better if we can have let's down yeah so to me this does seem more like what are you trying to be like react or solid what is this well no the reality is that as the application grows in complexity figuring out which values are reactive and which aren't can get tricky the uh it's the end the heuristic only works for let declarations at the top of the component which can cause confusions having code behave one way inside of dotsfelt files and another way in dot JS can make it hard to refactor code for example if you need to turn something into a store so that you can use it in multiple places okay fair fair Beyond Components with runes reactivity extends Beyond boundaries of your dots felt files suppose we want to encapsulate our counter logic in a way that we could be used between conants today you'd have to do a custom store in a DOT JS or TS file you get a little store you have to create a counter you have to have this whole thing then you have to return this yeah okay you yuck so Simplicity is not necessarily good Simplicity Ultra Simplicity may not always be good because you can't extend it Beyond certain scope so this one's actually just saying hey let's extend it Beyond certain scope because it implements the store contract the return value has a subscribe method which can be referenced uh the store value by prefixing the store with a dollar name okay good there we go create counter do all this thing increment counter counter see like that's a lot plus you got this whole like dollar thing going on I don't like that at all like to me that's Grody to me that's Grody to do not a fan not a fan of having to do some sort of magic right there let's see it works but it's pretty weird we found that the store API can get rather unwieldy when you start doing more complex things with runes it gets much simpler state bam okay I mean I like that I like what we're seeing here I like what we're seeing here counter count I also like saying that that's nice so it looks like it's just like a more convenient store item that's all it looks like so does that mean you can still it seems like that means you can still use the the dollar sign reactivity label if you want to in a spelled pile and you can also use this as a clear designation that you're using something as a uh dollars to PHP come on but they also have Lambos is it really that bad is it really that bad let's see today's felt uses compile time reactivity this means that if you have some code that uses uh the dollar label to rerun automatically when dependencies change those dependencies are determined when svelte compiles your component export width height compiler knows area equals this and let's see that it should log the value area when it changes console log area nice beautiful well this works well until it doesn't suppose you refactor the code above multiply by with height is a function multiplied by width because area oh this is a function and function doesn't change declaration can only see with it won't be recalculated when the height changes yeah we are we got ourselves a little bit of a goof here right multiply by height if you if you sneak in something it doesn't change okay yeah I could see that being very that'd be frustrating as a result the code is hard to refactor and understanding the intricacies of when spell chooses to update which values can become rather tricky Beyond certain levels of complexity spelled five introduces derived and effect runes uh which instead determine the dependencies of their expression when they're evaluated all right area equals derive these two okay okay props instead of let export okay interesting uh effect oh we're getting kind of into a weird area but okay okay so effect is every time things change with area hmm I wonder if I like this I wonder if I like this I feel like we're getting we're getting close we're slowly getting back to PHP the problem is is I'm always worried about like the thing I love about svelte is that you know client-side reactivity was very simple when you need just some basic reactivity I still love the idea that everything is largely driven from the server and so this feels like you're it just encourages people to write more code on the client which I am not a fan of signal boost uh like every other framework we come to the realization that knockout was right all along yes knockout has been right all along spelled five's reactivity is powered by signals which are essentially what knockout was doing in 2010 more recently signals have been polarized or popularized by solid and adopted by a multitude of other Frameworks yep react still does dumb signals you state did you pass you pack round you it's rendering order you stayed cool dog uh we're doing things a bit differently though in spell five uh signals are an under the hood implementation detail rather than something you interact with directly uh as such we don't have the same API design constraints and can maximize both efficiency and ergonomics for example we avoid the type narrowing issue that arises when values are accessed by function call and when compiling in server-side rendering mode we can ditch the signal altogether since the server they are nothing but overhead beautiful that's beautiful signals unlocked fine-grained reactivity and meaning that for example changes to the value inside a large list doesn't uh or needn't invalidate what a weird word needn't uh needn't invalidate the other members of that list such as such felt five is redonculously fast beautiful needn't I mean I know what it stands for people that whom uh runes are an additive feature but they make a whole bunch of existing Concepts obsolete the difference between let at the top level of a component and everywhere else export let dollar with its intended quirks different uh Behavior between script and script context module uh store API and parts that are which are genuinely quite complicated uh the dollar store prefix dollar dollar prop and rest prop uh life cycle functions things like on Mount can just be effect functions okay for those of you who already use felt it's new stuff to learn albeit hopefully stuff that makes your svelte apps easier to build and maintain but newcomers won't need to learn all those things it'll just be a section of the docs titled old stuff okay it's just the beginning though we have a long list of ideas subsequent releases that will make svelt simpler and more capable okay anyways here's some good stuff assault 5 is not production yet it's not there yet but hey join their Discord if you have any things you can create a preview site you can go check out the preview site which is pretty cool I like all this I mean I like I in general I like spelled quite a bit I still thinks felt is one of the nicer front-end Frameworks if I'm going to do a front-end framework I really like spelled if I'm not using svelte I will use solid if I'm not using solid I I guess I could try out view if I'm not using view I'm going to take a coin and I'm going to flip the coin and if it lands on heads it will be angular and if it lands on Tails I'll use react but when the coin lands I will also quit my job so you know what I mean like it it makes a lot of sense does that make sense and by the way of course what I mean by all that is that uh you use htmx first I would always use htmx first I would always use HDMI you're quiet no no I just loud quit I would just just leave I would first choose the framework and then leave can you use rust with htmx absolutely htmx makes no designation on your server anyways there's a drinking game called Prime drink with prime every time I mention go in htmx you have to take a drink so guess what the name is the drunkagen