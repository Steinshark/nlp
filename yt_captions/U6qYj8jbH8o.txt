all right I have no idea what a showen programmer is but I'm willing I'm willing to read this and I swear I swear to gosh if this is stupid I'm going to just ban you David I don't even know how to ban you but I going to I I think I got to be a little bit more liberal with the bands because people keep linking like 16-hour videos be like oh what's why can we not why can we not do that it's just like man I got to get you out of here what is with this Michael O church what do we got here what's a show in of programming nice okay okay it's not too long it's not too long what a beauty it is a beauty do you like that do you like that that beautiful beautifulness right there all right here we go I'm going to turn it off for web archive ooh that's not very good that's like really bright man either we got like T turd Pea or we got bright white like there's not there's like not a lot of there's not a lot of options here there's not a lot of options and I don't really want turd pee and white I don't want turd PE and black or or just just white on white bright to the eyeball all right the the belt color of meritocracy this showed in programmer I've never heard of this nothing Under the Sun is greater than education by educating one person and sending him into the Society of his generation we will we make a contribution extending aund generations to come huh founder of Judo interesting I feel like that's it's a little lacking I feel like there's things that are that are uh that are better than education you know like uh family I I would I would consider family an easy win over education all right uh colored belt uh in martial Arts are widely modern tradition having begun in the late 19th century it started informally with the practice in which the teacher Sensei would wear a black sash in contrast against the white uniforms ghee in order to identify himself this was later formalized by Dr Kano oh Kano by the way Kan nobody ain't nobody likes Kano okay not you Dr Kano but I'm just saying Kano in Mortal Kombat the new movie okay I feel like I could almost do a Kano impersonation but he all he says is the word all he says is is [ __ ] right you you [ __ ] oh Kido L the black dragons with this I feel like that was actually pretty good I feel like that that was pretty good see the problem with these lightning rods they don't make them like they used to he all throws things off anyways Kan with the series of ranks I turned into a southerner somehow with that one by replacing the black sash in addition to the white belt holding the ghee together the uh with the black belt beginners were assigned descending uh I don't know how to say that that phrase uh Caillou Caillou ranks traditionally six the First with advancing ranks were Dan first uh to 10th at the Dan rank you earn the right to wear a black belt that uh that would identify you anywhere in the world as a qualified teacher of the art oh interesting okay okay okay contrary to popular opinion a black belt doesn't mean that you fully mastered the sport show in is taken roughly to mean beg a beginning Master oh I like this okay I'm liking this I'm liking this it means that after years of work and training you've arrived there's still a lot left to work yeah it means that you've effectively arrived at the beginning of Mastery let's go over time uh intermediate belt colors white and black were introduced brown belts began to signify nearness to Black Belt level Mastery and green belts uh signified strong uh progress over time in an upper division let's see white belt began to be recognized with yellow belt while upper division green belts were recognized with blue or purple while it's far from standard there seems to be a general understanding of belt colors approximately as follows white beginner that's crazy I don't know what is going on with my coloring but somehow white is blue uh white as beginner yellow as beginner upper division green intermediate intermediate upper division Advanced uh qualified to be sene okay weebs in chat I can already feel so many people are like I could just feel it I could just feel it about to happen in twitch uh black expert qualified to be Sensei or teacher weebs uh all right are these colored let's see are these colored belts and ranks good for martial arts there's a lot of debate about them please note that martial arts are truly considered to be arts in which knowledge and Perfection uh of practice rather than mere Superior of force are core values and eighth Dan in Judo doesn't mean you're the most vicious fighter out there since you're usually in your 60s when you get it you are while still formidable probably not winning Olympic competitions because that's not the point these belts qualify you as a teacher not a fighter only oh okay very cool at that at that level knowledge and dedication and service to the community are the guidelines of promotion huh that seems very nice okay now that we're back to our regular scheduled programming pun Nintendo would colored belts perhaps a peer abstraction make sense in programming the idea seems nutty how could how could we possibly Define a rank system for ourselves as software Engineers I don't know I consider myself a 1.8 is iiu one IU brown belt uh at my level of programming uh development or my programmer development at a typical Pace it takes four to six years to go from a 1.8 to a 2. uh 2.0 showed in I would let's see I'd like to do it in the next two or three but we'll see is there a scalable and Universal applicable metric for programming EXP assessment I don't know okay I okay first off I love where this is going the universal programming measurement this is fantastic this is just such a great idea I actually really like this this concept that an eighth Dan isn't about fierceness but about kind of like that uh that the the dedication and community service there's something super cool about that so I'm liking that I'm liking it uh literally what Le code is for leak code is like leag code is this level right leg go gatekeeping no one's keeping Gates dog this you're using the term wrong I'm gonna gatekeep you from using the term gatekeeping because you used it so incorrect binary hero why is it Gaye keeping bring it down right now step into the arena I want you to put on that yellow belt that you have and I want you to tell me why it's Gaye keeping right now keep going you're introducing classes you don't think classes don't exist senior engineer come on I want I want I want some I want something here give me something that's a reason Reon why it's gatekeeping let him cook we're going to hey you always let the man cook I I want to I want to see it I want to see it it's gatekeeping because someone has to prove themselves that's not gatekeeping you don't even know what gatekeeping is I'm going to ban Chad I swear to God I swear I'm going to store pee in the balls if we don't keep if we don't move on here tell me binary come on I I I want I want to know binary hero come on let's see this give me give me the meat and give it to me raw I'm a genius but let's see let's see I'm a IUS but it's gatekeeping to for me to prove it yes gatekeeping is the process through which information is filtered or for dissemination whether for publication broadcasting the internet or some other form of communication yes it's preventing somebody from progressing can make people let's see it can make people higher level people and ignore people with potential no I mean that are first off that literally already exists it's called your years of experience if you come at me and you say I have one year of experience I think you're not going to be as good as someone with 10 years of experience that is not gatekeeping that's just like observation of reality so so back to this whole gatekeeping thing it's not the thing about gatekeeping is gatekeeping prevents somebody from progressing forward is adding belts preventing someone from becoming a better programmer now what you could say is that adding belts will misidentify people that are better and should be ranked higher but don't simply allow for it true true and factual right that that will happen every single time it will also have somebody who's not qualified who is a higher rank simply because of time or potentially nepotism of some sort but does that not already happen with standard ranks today does that not already happen with Junior engineer senior engineer I worked in the field my first job was at schulist I worked there for six or five months I then I went to worka or now or was web filings back then I worked there for one year and four months I was then hired at one year and 11 months as a senior software engineer at Netflix did I deserve that title let me retell my experience story but do it slightly different before I got hired at schedul listi I did about two to three years doing my own startup where I worked about 80 to 100 hours a week does that change how you feel there's probably a lot of you that said well probably not a senior engineer now that there's some of you that hear that they go well maybe yeah that's maybe more senior engineering n I'm just saying it's ranks are impossible to be correct ranks are so there's there's two major problems with this just generally speaking one black belts have to when it comes to let's let's phrase it this way when it comes to something like Judo typically you're you know we'll say the low-level black belts the people who really really raise up really high the brown belts whatever the the belt coloring it is in Judo BJJ SL Karate Kung Fu SL any of these any of these martial arts if you will um typically the people that are higher ranked they're not teachers they're just participants they're there because they're there for the sake of being there but programming on the other hand isn't that way you're there for the sake of earning a living so there's a fundamental difference that means black belts are going to be fundamentally bad at the teaching category right they're just G because they're just going to be thrust there not because they're meant to be there but because they simply are there right so it's it's it's definitely a very confusing thing anyways so let's look at this to recap 0 0 to3 scale that I developed for assessing programmers let me state that this is most important points okay so this is my guess is that this won't work well but let's find out level one represents additive contributions that produce some Frontline business value while level two contributions are multiplicative and infrastructural level three contributions are Global multipliers or multiplicative over multipliers uh lisps for example are languages designed to gift the mere programmer with full access to multiplicative power the lisper languages are radically powerful to the point that corporate managers dread them level is that is that why I'm okay so I mean I've been following this guy up until this up until this point closure mentioned was that closure mentioned just then did we just hit closure um all right level two programmers love lisps and languages like hascal however level three programmers create them okay so I am not a level two programmer turns out okay x x uh point0 represents 95% competency the corporate standard for a manager doesn't need to worry at level X in other words a 1.0 programmer will be able to complete 95% of additive tasks laid before him this assumption is that reliability is a logistic S curve where a person person's 5% competent on tasks 1.0 levels higher 50% at a 0.5 above and 95% at level so a 1.8 engineer like me is going to be 85% competent at level uh two work okay fair I think that's that's actually a pretty fair uh way to do it I don't know how you objectively measure this 1.8 especially when you come out the gate swing with lisp as like the thing all right meaning that I'd probably do a good job overall but you uh but you'd want a light super uh supervision design review stability analysis if you're betting a company on my work 1.0 is a threshold for typical corporate employability and 2.0 is what we call a 10x programmer but the truth is that the actual difference in value creation is highly variable 20x To 100x on Green Field development 3 to 5x on accommodating corporate environments such as Google and almost no gain in less accommodating one I mean this is a great observation by the way uh the one that your environment dictates how uh your environment can have a huge dictation into how successful you are if you have a very bad environment it's very very hard to be a successful programmer to make change very very true I I wouldn't put Google as an accommodating corporate experience um Greenfield projects this definitely you can definitely see the biggest difference in Greenfield projects uh 10x programmers typically what I think of a 10x programmer is that I don't really think that 10x programmers largely exist uh and the ones that do typically make 10x the amount of work not 10x solving the problems just throwing that out there also saying that 20 is 10x programming and then saying you're a 1.8 you're like I'm not a 10x programmer but I would like to let you know I'm getting pretty close maybe an 8X programmer I'm not sure I don't know where I would land on the uh on the programmer scale right I think it just totally depends like just real talk uh hold on let's let's look at this I'm curious because Judah or lithium has done some some Fang work if you take an environment into account imagine an early meta or Google employee who build simple things but was there early on they're going to have a huge Network inside the company and a lot of tribal knowledge yeah they're going to have a whole different level of power that simply comes with experience time and if you're like a gregarious individual you could actually run decently fast right you can you can run really fast despite not being a great programmer so it's a good take that's a good take um but you know like here's a good example you ask me to just fix up a bunch of the UI and make it prettier like I'm not going to be a 10x programmer there's nothing about it that's going to make me 10x you asked me to come up with tools and build like you know they call them infrastructure level of Engineers it's not that I'm good at terraform or I'm not a yaml engineer at all I build tools and things like tools inside of companies and so that on the other hand I can do very very well so it just depends on what you're asking me to do right so am I going to be a 10x or at all points no I I just won't be I I I won't even have like the emotional energy to really go deep in on the UI I could refactor the crap out of a UI like one of the projects I had on Netflix was rebuilding part of the UI and I rebuilt uh on the website a lot of the a lot of the code for uh billboard and it was like I I could do it all because it's just refactoring and building at that point it's more of an infrastructure position than it is a UI position but nonetheless it was uh you know like it it's just not my love you know it's like I you'll never do something as good if if you aren't working in the place you want to be working at uh autop playing video it also allowed for autop playing video yep ask me to build a SASS and I could be straight for I could be I could be staff principal engineer ask me to write embedded C SE software I'm a junior yeah precisely exactly you get the idea you know that's the one that's this huge problem but here's the deal though I will say okay there's two problems there one you're absolutely right you going from building a SAS product to building a embedded C application you would be a junior but your rate of change from Junior to Mid to senior would be fast and that's kind of what makes a really good engineer is rate of change adaptability speed right that's like a really that's a huge potential because the reality is that most of what you do day-to-day should hopefully not be repetitive it should instead be something that um should be instead something that you've never really done before or things that you are 50% familiar with and then you can really you can really take off because you're taking your previous knowledge applying it to new areas and growing quickly and I think that's just like such an important concept programming like martial art uh or the board game go both being uncommonly introspective on the measurement of skill ad progress is a field in which there's a vast spectrum of skill 2.0 is clear candidate for a showen a first and but what does Shen mean it means you're are excellent and a beginner you're a beginner at being excellent you're ooh that's a great phrase that is a great phrase you are a beginner at being excellent I liked it I liked it a lot you are now also typically a teacher but that doesn't mean you stop learning um you know again one problem about typically in our field is that teaching is incentivized you get paid for it and so by getting paid for it is is interesting right and so it causes all sorts of of goofiness right curious very very curious on this one all right hold on Jack heritton said this one um here I can go like this here Jack's a great guy uh let's see do we go here right how do how do I get the how do I get this how do I get this link by the way I I bet I bet I have to go to youtube.com The Prime Time Engen go here grab this one here I want to do this for Jack give me a second here there we go oh don't save that share that one uh where's the at time stamp wait isn't there usually like an at time stamp isn't there usually an at time stamp what the heck oh is it because it's live you can't do you can't do oh man okay hold on let's see what is that that's 20 that's 203 to that so about 24 minutes in okay so about 24 minutes in that's kind of annoying I'm not going to lie to that's kind of annoying about 20 about 23 minutes in I start reading the compiler docs uh the compiler intro docs and then we watch your uh video there we go all right there you go can you put put a time stamp in the URL well maybe it's live though so the problem is here watch this uh uh T equals uh 1,000 T equals uh 1000 it just erased it live videos they don't have the same they don't have the same yeah live videos don't have the same thing you know what I mean it was Eden it was gobbled it defaults live I guess yeah it's live so it doesn't quite it doesn't quite work you can make a clip of it I think yeah uh someone tell lwig to tell YouTube to fix it yeah can someone tell what Auto tell Auto Prime are you excited for the react compiler I think there's a lot of cool things about it I I I like I'm on the doubt phase okay we're not going to do that come on come on I'm on the doubt phase but I'm also very curious phase right so I I don't want to I don't want to say one way or the other okay so let's get back to this one flip sorry about like the the craziness of this one you're now let's see you're now also typically a teacher that doesn't mean you stop learning so one of the problems I have with just general computer science and this is that you are incentivized to be a teacher especially in modern world it pays to be a teacher so a lot of people rais to be a teacher uh you can see it also a lot with just like online learning learn in public do all this make sure you go and make sure you go and and tell everybody that about your new thing you should try to teach you should try to teach you should teach you should teach like you see it all over the place it's almost no different than you see people saying without saying it you should contribute to open source contribute to open source and and then we had all those junk PRS and all that we also have just a bunch of junk teaching and it's because you can't there's not like a there's there's not like an understanding there's like a there's this idea that everybody is valuable to teach which isn't wrong it just also means that you typically go into something maybe a little too quickly like maybe you don't need to be a teacher right away and that's okay like I didn't start trying to do any form of teaching until I was about 12 15 years into my career some have significantly less value value to teach I don't know if that's true every person has some sort of experience that somebody else can learn from but I think that the problem is is you know there's there's actually so many problems some people have so much to teach and they're incapable of teaching some people have so little to teach but they're so good at it that's a real that's a real dichotomy is this an educational Channel no in fact while you can't formally admit this too often less they get cocky you often learn as much from your students as they do from you multiplicative level two programming contributions are fundamentally about teaching when so I I don't I don't know if this is true um all my formal things I've learned little bits in knowledge but I've never said I've it's not it doesn't feel one to one you know this this is a channel to forget about fomo yeah you're not missing out uh multiplicative level two two programming contributions are fundamentally about teaching when you build a lisp macro or DSL that teaches people how to think properly about and therefore solve a problem you are a teacher if you don't see it this way you just don't get the point of programming the point of programming is not to teach though to be completely Fair the point of programming is not to teach for many people it is the Act of Creation for another group of people well I mean the most fundamental it is a way to get paid and survive well in this in this Society some people continue to program even after they retire because it is a point of creation some people enjoy the act of teaching the act of teaching is see I mean it I think that's where this fundamental top statement uh probably probably dictates a lot of this article which it says that uh nothing Under the Sun is greater than education I just fundamentally disagree with that statement therefore it's not surprising that this article is kind of like headed in that direction that teaching is the Pinnacle I'm not sure if it's the the Pinnacle right uh it's about instructing computers while teaching humans how uh the systems worked in fact I think there's a rough correlation between zero to uh 30 programmer competent scale in appropriately Dan uh Caillou ranks like so uh the eth Caillou just getting started still needs uh help on minor compilation errors can't do much without supervision uh seventh Caillou understands the fundamental ideas behind programming but still takes a lot of time to implement them sixth Caillou reaching professional grade competence but only viable in very Junior roles with supervision typically for an average CS student graduate okay uh fifth Caillou genuinely uh genuine white belt starting to understand engineering rather than programming alone knows about uh production scalability maintenance and code quality concerns can write 500 line programs without supervision so I think this is another one of these this is where I I I fracture from I mean I like the idea I like you know I always love these thought experiments of attempting to make this a thing because it's kind of interesting um but I'm going to I'm I'm going to invert this one I'm going to Uno reverse this one I don't think that if your program's less than a thousand lines of code I don't really care to code review it real talk go for it build whatever the hell you want reason reason being is that to rewrite it if you needed to would be like a day two days so like why take the time to like try to make really great code quality on something that's a a, lines of code 500 lines of code yeah so it's just like don't worry about that so you know I I I go for it run with it I don't care 500 lines of code on the front end is like two buttons and a div I would agree with that uh 1.2 to 1.3 the fourth Caillou uh uh someone said it's I keep saying yha I'm not even close to saying yha I'm saying caou I'm not even sure if that's correct uh solidly good at additive programming tasks and can learn whatever is needed to do most jobs this is a great place to be I like this a yellow belt okay this is is good but not showing yet leadership or design sense capable of rarely let's see capable but rarely efficient without uh Superior leadership okay I'm curious about this I mean I guess design sense is just maybe that's just time in the saddle is what he's trying to say you know the hard part is a lot of this is design is time in the saddle when I say time in the sad I don't mean literal like passage of time like six years I couldn't give you a year it's about how many times have you failed just say the fourth Q okay Q is that what you say Q all right the Third Q developing a mature understanding of computer science Aesthetics programming and Engineering concerns and the trade-offs involved in each may or may not have come into uh into functional programming whose superiority depends on the domain it is not in high performance domains yet practical okay so this is wild that it is funny that so I'll say that there's a fundamental Oopsy Daisy here which is the the strong correlation that functional programming is the only way to progress further right so I'd say that probably from here on out I would say that this is where this article really Lo really loses it the second cue shows consistent technical leadership given light supervision and permission to fail can make multiplier level contributions of high quality this is a great definition uh an asset to pretty much any engineering Organization for those that uh inhibit Excellence so if this is the case then I would put this person as um a like this would be like a staff level engineer to me this is what I like given this definition this is what I would consider staff level plus right it kind of happens with a 10-year-old article this is about like programming has programming fundamentally changed in the last 10 years right has it changed yes you think programming has changed fundamentally in the last 10 years what has changed we got react yeah react is about 10 years old dogs it's the same [ __ ] if you think that programming has changed no no they haven't changed excuse me asyn a wait is from 2005 even if asyn A8 didn't exist that's just syntax sugar that just is something that makes it easier it didn't change programming the only big uh change in programming is Chad GPT hey by the way thank you whoever just gave a sub to Trump's butt plug appreciate that thank you very much I'm sure the butt plug appreciates it um uh an asset to pretty much any engineering organization except those uh that inhibit Excellence uh corporate rank cultures that enforces subordinance and uh disempowers Engineers by Design yeah yeah that would that would be bad all right which is very interesting this is actually such a great observation the I personally think the places that you're going to find the best Engineers are cultures in which um allow for the most amount of failure first uh fuse first Q uh eminently capable uh spends most of his time on multiplier type contributions and performs them well can be given non uh Ro let's see a role equivalent of VP Engineering in let's see in impact and will do it well okay the first an she is uh consistently building high quality assets and teaching others how to use them these transformative software Engineers who don't only make other Engineers more productive simply multiple multiplism but actually make them better hire one give her autonomy and she will 10x your whole company uh can be a CTO equivalent role maybe it's very interesting it's a very interesting thing that I don't know I don't know if that's true I I think one thing that we always we always look at is is for people to have impact quote unquote impact um do you have to always have impact to attain rank right to me sometimes you can find people that have almost no impact in some sense but just consistently produce great things no matter what the task is they're the fixer right you can also fail up yeah I mean well I mean this is the whole problem about any rank system right any rank system will have its an anomalies and sometimes the anomaly is the normality and then it becomes a whole problem you know what I mean uh let's see higher Dan ranks uh having not attained them I can't accurately describe them I would estimate Rich hickey as being at least 2.6 for closure Lis mentioned I love the obsession with functional programming as like this this Hallmark this is this is really this is really great as he built one of the best language communities out there creating a beautiful language on top of an ugly but important powerful ecosystem Java and for the shockingly high code quality of the product if you look into the guts of closure you will forget uh to hate Java that's how good the code is however I'm too far away from these levels as of now to have a clear vision of how to define them or what they look like in let's see is formal recognition of a programmer achievement through formalization ranks and belt colors necessary is it a good idea should we build up infrastructure that genuinely assesses whether someone is a green belt engineer and direct that person toward purple brown and black I used to think that this was a bad idea well I mean did anybody catch what was happening in here we already have that notice that this notice that this one said CTO notice that this one said VP of engineering notice that this one gave bounds right like it's already it's already there we already do this we sure we don't use colored belts but we already do it right belts are cooler Fair belts are cooler fair fair and factual you know and of course this is also an idealism approach right this assumes that CTO are great not all CTO are great not all CTO are great they'll never be great there's no standardization between companies exactly and the thing is you can't create a standardization right am I blue or green I'd like to think that I'm a nice good oldfashioned white belt uh so I'm cynical about anything that might be used to create uh distributed social status because the idea just discussed me on the visceral level ranking programmers which is inherently subjective no matter how good we are at the assessment seems wrong to me I have a natural aversion to the concept I mean this is one thing that's really good about uh say like um like the more art form martial arts uh uh Taekwondo right Taekwondo is just like have you spent this many years practicing and do you know these forms like that's a very it's a very uh kind of objective measurement and so it makes sense you can do that but with programming it's just like like what are you going supposed to do all right it's time for your brown belt activity all right we're going to need to see you first bust out a quick sort and a bubble sort we're also going to need to see a binary search both on a tree and in an array and then I would love to see you uh create a generalized tree that represents a domik structure and then we're going to finish it off with a little bit of Heap and a DFS on a graph okay that's what I kind of want to see for our warmup okay and then after that I would like to see you build an a II that can handle 10,000 concurrent connections or requests and then after that right like it just like like what's there's no there's no you know what's a barrier right and then you got this embedded engineer that all he does is Works in in C and he's just like the what what are all what are all these what are all these apis you keep talking about dog I make LEDs flicker I make LEDs flicker buddy you know what I mean you just raw dog them by binary falor shut up um I just don't want to do the work I'd rather learn to program at a 2.0 plus level and then go off and do it and then spend years trying to figure out how to assess individuals in a scalable and Fair Way yeah there might be a machine learning problem in there that I could enjoy But ultimately the hero who solves the problem is going to be focused mostly on people stuff yes I am starting to think that there is no other alternative than to create organization independent ranking system for software Engineers why if we don't rank ourselves in a smart way then business [ __ ] will step in and rank us anyways and they'll do a far shittier job of it and we know this to be true we can we cannot deny it we see in corporate jobs on a daily basis okay you know what that ending is really really good okay that's a good ending you know that's a very good motivation for why you should probably consider uh you should consider a universal way you want it's going to happen anyways it's just going to be a piece of [ __ ] version instead uh a typical businessman can't tell the difference between a 2.0 engineer and a 1.2 who's great at selling his ideas we tend to be angry at managers I you know what I'm to make an inverse argument I don't think a 2. engineer can tell the difference between a 1.2 who's great at selling his ideas versus a 2.0 I don't think you can either yeah with time yeah I yeah after two years you could because you've been sold the bill of goods and then you realize the bill of goods weren't good right like that's the problem uh let's see we tend to be angry at managers over this fact and over the matter of what is supposed to be meritocracy the software engineering software industry by the way one of the one of the one of the greatest insults I've ever had in my lifetime um was over this word meritocracy uh cuz this was like in 2016 at node conf EU and I was just like yeah that's one of the great Parts about software engineering is that it's a a meritocracy and one of the uh npmjs maintainers looked at me I was like you clearly don't understand psychology or sociology two branches not one two branches not one too npm maintainer checks out yeah that was the day I realized that that he's right he was right it's not a meritocracy cuz that man is an [ __ ] and look at him go it turns out you can be an [ __ ] and you're still wi it um all right being let's see hold on okay okay okay over the fact that it's supposed to be a meritocracy being one of the most politicized profession environments on Earth but when we denigrate them to for the inability to understand what we do we're the ones being an [ __ ] wow okay they police and measure us because we can't police and measure ourselves I think it's because it's impossible again I hate to break this to you it's impossible so this may be the problem that we just need to solve how does one get a black belt in programming most professional accreditations are based on churning out commodity professionals we can't take that approach because under the best condition it takes a decade to become a black belt 2.0 and some people don't even have the talent that uh this is a very hard problem and it's going to be uh I'm going to punt it for now I would I would I would argue to become a black in so-called programming I don't think you can do it in 10 years and what I mean by that is that there's just a certain level of experience because you may be able to identify a problem and be able to solve something and it's great and people can think you better than that but that doesn't mean that you consistently keep doing it right there's few people that can consistently keep identifying the real root cause problems and keep building to create stuff is Uncle Bob a black belt yeah I think he's a black belt it doesn't mean that the thing is you got to remember that just because I disagree with some of his ideas doesn't mean he's right and I'm wrong or Inver inversely he's wrong and I'm right you can build software both ways I just don't like it you know I I tend to be I tend to be on the more quote unquote artistic side of things which is like I want to be able to love what I do and Builder abstract faty patterns and all the nonsense that goes with it just doesn't make me want to keep going I don't like it I don't like that approach I think it's just largely wasteful to me I don't like to have to think in these tiny little bits I like to just build the thing and I like to every now and then I like to abstract when abstraction makes sense you know like for the first time ever so I've been doing go now long enough that I've actually been able to do my first levels of abstraction and honestly it's been such a great uh it's been such a great joy to do it I've actually I have not had this much fun in a long time and I've I've never been able to do this and I have this whole bite utils over here where I have these ideas of writers and I'm going to be able to take this idea of a writer and I'm going to be able to take my virtual box which is going to be these quad trees over data sets and I'm going to be able to take a virtual box and turn it into uh an iterator that iterates over these boxes and it's just going to work out and it just makes me like pretty dang happy about that that I was able to kind of look at this and that way we can write one or two bite uh one bite two bite iterators over boxes which is like like I personally think a pretty dang cool thing anyways just a thought just something I've noticed anyways uh I I don't think we need to keep on going with this article it's pretty dang long but I we we get the we get the fundamental idea right um I'm sure I'm sure there's I'm sure there's some good stuff over here uh that we're we're missing out on but the the the general idea was pretty great um I just don't want I just don't want to dude you know I ain't reading all that congratulations or I'm sorry um we don't need to peer into why corporate programming sucks so much honestly you guys have enough scars out there to know that you don't you know why okay you you know why it sucks all right anyways the name is I like the idea of ranks we do it anyways we're going to always do it it'd be great if you could come up with a universal standard that actually makes some sort of sense but I would argue that it does not exist because you cannot rank any one programmer as into one rank or another because every single type of programmer Silo is just vastly different from another person take somebody who's really good at thinking about UI they're just simply going to be different than the person that's really good at say building LSPs they're just going to be different they're going to think about problems different they're going to be able to uh they're going to structure their code vastly different if you're always building UI you probably are building code more often that is going to be integrated tested versus like unit tested because uis are typically much harder to unit test you can unit test some faction of it but not all of it whereas the inverse is probably true for people that are building more infrastructure Style tools is that you tend to you know you tend to unit test the more like bare bone smaller part it's a little bit more difficult to uh to integrate to test the rest of it and often you don't even have the time to do that and so it's like this whole difference that's going on here and I just don't think we can have one universal ranking system it just does not work that way aen