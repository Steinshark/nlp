memory management is one of those things in programming that we often want to ignore we want to try and automate it away and if you've got a garbage collected language it usually works most of the time until you become concerned with things like really high performance or really low latency or really high concurrency or really long running processes or really predictable performance or really constrained Hardware we're now basically covering most most servers most apps most embedded devices most games there are still a surprisingly large number of areas in programming where memory management is very much our problem to deal with and even more surprisingly there are very few tools to deal with it what have you got there tool zero is do it manually maloc and free tool one I guess is reference counting there wasn't that much else until fairly Rec recently rust came along with it borrow Checker and said hey here's a completely different way to deal with managing memory at programming time well my guest this week would tell you that as great as rust has been it shouldn't have just been a new tool it should have been the start of an avalanche of new ways of dealing with memory and resource management in general I'm joined this week by Evan nardia and he's built the programming language Veil as a way of Road testing his three favorite techniques you may never have heard of generational references linear types and regions and he's convinced that at least one of those is going to form the future of programming maybe he can convince you too he's certainly going to try as we explore what they are how they work what they offer us as programmers and if they're so great why don't we have them already I'm your host Chris Jenkins this is developer voices and today's voice is EV [Music] vardia I'm joined today by Evan nardia Evan how are you out there I'm doing pretty good how are you I'm very well very well I'm looking forward to being taken to uh a certain level of hardware and memory management school by year yeah this will be fun yeah yeah but before we get straight into that the reason we got started on talking about the topic of memory management is a language you've been designing called Veil my opening question with new languages is always why do we need a new language what do you feel is missing from the language world oh what do I feel is missing from the language world uh there's a bunch of things and uh I I think the world needs them um a reasonable person would disagree um yeah the uh the thing I I really think the the world needs is um is someone to explore things like linear types and regions I think those are a huge like missed opportunity in today's languages um and it's the kind of thing where it's like uh you can't really can't really imagine like how awesome it would be until you use it and even I couldn't and I'm like I wonder if this would be cool I don't know I should build it and find out and so I did and I found out and it's pretty cool okay the classic hacker mentality yeah absolutely yeah so I know oh God I know about linear types a bit from uh some excitement in the hascol world about it and if there's some excitement in the has school World it means it's about as far from mainstream as we can go yeah so unpack what are linear types yeah linear types um I call it higher see why in a second a linear type I'll explain like the academic like the high level explanation first and then I'll talk about why it's cool um so linear ypes are an object that you can't just drop on the ground and by that I mean like you know every function you have have variables X Y and Z and then if you say return 42 x y and z just kind of go away right because they go out of scope and garbage collection just takes care of them yeah that's how normal things work um linear type let's say if x was a linear type uh the compiler would say you know on the return 42 line it would say hey you didn't do anything with X you can't just drop it on the ground um so X is a linear type and the reason it's called linear is because um you have to use it exactly once and by just dropping it at the end of the function you use it zero times so um so the question is like why is that useful that sounds like a headache of the way I described it you just compiler ER nobody wants a compiler erir um but uh it would be really cool for things like uh let's say a handle for an active thread that's running in the background all right if you got a thread running in the background you probably want the result of its computations right but if you just drop it uh the most common um reaction to you the coder just dropping a thread handle thing the function is to shut down the thread and that's not always useful and that's not always what you want to do sometimes that's an accident um so it would kind of be nice if the compiler told you hey you just dropped this thread handle on the floor do you want to instead I don't know like check its return value maybe like join it in other words like wait on its return um so uh linear types are good for things like that good for the way I like to think of it is uh tracking your uh tracking responsibility or tracking uh things that you hoped you would eventually do um like uh the last example I'll use is uh in the 7dl which is a 7day really intense hackathon um I did like three years ago um I was making a little Rog like game and Rog like games are like little terminal games they're really low Graphics um and so in that seven days you really get to explore uh you know your skills and algorithms in gameplay and in that I had a cash a hashmap um of what are all the goblins on the level and um uh what was it oh yeah for every location on the level is there a goblin there so it's a hashmap of uh location to an optional uh Goblin reference um but I you know past years I had all these bugs where I would forget to remove things from the cach right because as you know the two hardest problems in computer science are naming and caching and luckily other things solve the first one but linear types really help with this second one I made a linear type attached to the original Goblin itself um that represented hey this Goblin is probably still in the cash right so inside my Goblin I had a I called it a goblin in cash token it's just an empty object um and whenever I tried to drop the goblin uh the compiler would tell me you've got this Goblin in cash token now and you haven't done with anything with it and I'm like oh that's right I need to remove it from the cash and so then the only way I can remove it from the cash is to trade in this token that's the cool thing about linear types they make sure that you remember um to do things in the future which you hoped you would do this is kind of like this is a bit like defer isn't it it's trying to solve the same problem in that do this thing in the future because if I don't remember to I'll have problems absolutely and the difference between this and defer is that defer works really well for a specific scope and it's really readable and I really like uh how languages have pulled off defer the one thing that I wish defer could do which it can't really is to um make sure you do things in some other scope than than your own like for example when I made this Goblin um that was you know like 30 seconds ago in some other deep call stack back then and like we have long since returned from that but we still want a way to track and you know uphold the promise that we'd remove it from the cash and that's what defer can't to it can't do things it can't influence the Future Past the end of its current scope okay that's a very nice way of looking at it to influence the future not knowing where the future will take place exactly yeah yeah yeah okay so is the idea then that you create a language that does this with all all memory all resources or just opt in for certain kinds of resources Prevail it's optin um you can make a language that does this for all kinds of resources in fact you could make a programming language that literally just use the linear types for everything it's weird it requires some like mental acrobatics um but it is possible but no I think the power comes when uh when you can opt in for certain resources I like to you know you know threads caching um sometimes file handles um other things like that really shine with linear types yeah I can think of a couple of places in my recent programming work where it would have helped on closing connections to databases yeah okay so why do you think it hasn't gone mainstream then if it's cool and useful there's it's a really good question like it definitely hasn't gone mainstream yet um I think probably the biggest reason yes okay here's the exact reason it hasn't taken off um it's because of it can only kind of work in languages with single ownership and I mean that in the C++ sense not necessarily the rest sense uh single ownership where one reference has responsibility for this object um and uh for C++ people that would be the unique pointer class for rust people that's just kind of how things work in Rust in general but also the Box class um for hcal folks that would be kind of like the linear type like that's the one uh I don't actually know what it's called in hcal but the the linear type is kind of like the one reference that's responsible for this um object where it won't go out of scope until this reference does and once this reference goes out of scope it's unreachable that's kind of necessary for linear types and the reason I say that is because um if you have let's say you're using Swift or some other kind of reference counted language um you've got you know two or maybe like three like equal references to this one uh it's kind of hard in a reference counted language to say every time you drop a reference since that might be the like you know that might not be the last one but maybe it is the last one in which case you need to check are you the last reference and if so like please handle this linear type that's contained in the object you would have to do that every time you drop a reference and that's like really hard so um in any kind of language with multiple references to an object that would be not a great case for uh for linear types but if you have one sort of privilege reference one owning reference um then it works a lot better so uh like what I mean by that is um in Rust you might have a you know a a box which is the the main privileged owning reference to an object you might have a bunch of borrow references temporarily pointing to it when those GL escope you don't have to do anything you're not responsible for the object but when that box goes out of scope you really do need to handle that linear type in the object I'm talking about a theoretical r that has linear types um right yeah and uh and in Veil it's kind of the the same way you can have an owning reference and you can have a bunch of non-owning reference which are all generational references which I would love to talk about too those are super cool um but uh you really do need one reference to be like the the main owning reference so you know all that's to say this kind of feature would only survive in a language like uh C++ Bale rust uh ostr I think inco maybe um and then the reason it hasn't taken off in Rust in and C++ is because of the destructor the way that we think of destructors um and for people who haven't used a lot of destructors because I do Java in my day job um a Destructor is um it's something that is run like for example let's say have X Y and Z variables in a function um and X isn't just an integer let's say it's a I don't know a spaceship right and when you destruct a spaceship you want to you know safely turn off its engine in a very specified sequence or else things will explode right um so in the destructor for uh this spaceship X you have very specific tasks you want to do however there was what I believe was a misstep decades ago when they decided that um the destructor would have to take zero arguments and the reason they did this was actually a pretty good reason and that's that if someone throws an exception uh you know in the middle of this function you know after you have created X and before the return 42 if someone throws an exception or a panic or something it's going to blast its way through all of the call stack destroying everything in its path right yeah and how can it safely destroy the spaceship if it doesn't know what arguments to pass to its Destructor right yeah and so that's why a Destructor will need to have zero arguments however I think that was a misstep I think that there should have been a zero argument on Panic or on you know exception function uh instead of the destructor and then if they had a specific function like that that could be called by panics and exceptions that means that there's no reason your Destructor couldn't take two three four five um arguments um and would that get you that would get you the ability to uh like for example um if you wanted to so okay let me answer that there's a specific there's a Nuance here you can um you can do linear types without that but you can't do something which and here's what I wanted to talk about uh higher R AI I high R AI is a special kind of flavor of linear types um and this is where all the coolness of linear types comes and this is what makes linear types really useful in my mind uh if you have like going back to my past example um if you have a goblin in your level right and it and you have with it a um a goblin in Ash token um which is also a linear type you want to be able to destroy these two linear types at exactly the same time um and uh the way you can do that is by passing into one's Destructor like let let's say you pass into the Goblin's Destructor the uh linear type for the Goblin in Cache token or vice versa um yeah yeah this is just a long-winded way to say that it's extremely useful to be able to pass two linear types into the same function and that gets you a pattern called higher RI which helps you uh maintain a bunch of invariant about these two things being destroyed at the same time or these three things or four things at the same time or you want to do all these operations at the same time or a past operation um returned a linear type that wanted to make sure that you did some sort of future operation um and that token you can take in at the same time as other linear types that's higher RI that's what really uh prevents the the bugs like with the goblin cache and so on okay so I think I'm going to need another concrete example to help me with this yeah yeah um so let's say that um um let's say that you have a a spaceship right and uh you want to make sure that it is eventually uh returned to the shipyard um and uh in a very specific way um I'll explain what that means later um you want in that case you want to make spaceship a linear type right you can't accidentally just drop it on the floor um so the only way like and how else would you destroy it right the only way that you know you look around and you're like how do I get rid of this spaceship it's like stuck to my hand right like how do I drop this you look around you look in the documentation it's like okay yeah the only way to destroy this spaceship is to return it to the shipyard and uh and the shipyard um it has a function called you know return spaceship or like take spaceship um dispose spaceship maybe but that function also takes some other arguments um if a shipyard you know is is taking in its spaceship maybe it wants to take in the cargo it got from its mining of the asteroid or maybe it ALS maybe it expects um like uh the satellite it just retrieved like like you know if you want to do a future operation that future operation is probably a function call and that function call is probably going to take multiple arguments yeah um so that's why we can't um that's why we can't just say uh yeah this this future operation is going to have zero arguments that's you know that's why we say uh if an exception or a panic comes in it should just call this operation over here uh we can't do that because that Panic or that exception doesn't know these other arguments that are going to be needed to uh safely dispose of this for example spaceship this seems like it would be quite nice for Library authors right because as an existing Library author I can say you've got to give me this these things before I can create you a a database handle and you'd also be able to say along with that and you're not going to be able to get this thing unstuck from your hand until you make sure you give me these things and I can like I can control my caller's life cycle exactly exactly it's a really good way to uphold uh invariance and uh I saw really uh really insightful comments on Hacker News uh about a year ago uh and they said that uh there's kind of you know we talk about correctness all the time programming languages and correctness is a really really good thing but there's two halves to correctness there's safety which we all know about and then there's something called liveness Safety is the idea that you know something bad won't happen right if you could think of a bad thing you can think of a way to prevent it um like for example um like hascal and rust prevent use after free that's a bad thing we don't want use after free those two both uh prevent that from happening liveness is the concept that something good will happen right and so you can kind of think of uh memory safety as a well it's it's the safety half of things liveness is the uh it's the linear linear types of the liveness half of things um and once you start programming with them you you start seeing all over the place like you know anytime you're writing in a comment like oh make sure to remember to do this like that's the that's the mental you know uh you start to recognize and you're like oh I need a linear type right and so you remove that comment and you feel good about it because you just remove some complexity you know move the comment and uh and you just wrap something in linear type and you just get this good feeling like you know this is going to happen right like you can't mess this up now you can't you don't have to rely on your memory um so I see linear types as the other half of safety making this you know correctness thing we're all trying to get towards yeah I'm willing to bet there's someone out there training a large language model that spent 17 hours chewing through the data and then forgotten the call that writes to the file with the results right absolutely yeah so these things could be very very nice save a lot of pain absolutely so it seems like we could take this in two directions like how maybe we should start in user land first how much does this change the way you have to program it's a super good question because there's a lot of interesting consequences um this changes well you know you can see how it could make some things easier like I just described there's also some things that it makes a little harder um and uh let's see uh some of you may have read um the article called what color is your function and it's about async and a weight um and I guess I can see Dr that one um when you use async await um if you have somewhere deep in your call stack that wants to pause execution while it waits for some Network response to come back in or some thread in the background to keep running uh you would use a keyword called a wait which will suspend the entire thread uh or Cod routine or whatever you're in um in a specific way that the uh that the main event Loop or the runtime you're in can deschedule your current Cod routine and add another one yeah and this is slightly different than threads this is assuming you don't have threads um or you have a good reason for not using them problem with that is that uh this await keyword and the async keyword that often comes with it uh they're they're kind of viral right if you have it your parent function will probably have to have it and then its parent function will probably have to have it and then its parent function will proba have to have it um and this is see this all over the sorry goad no I've run into exactly this when I first started using it in JavaScript it's like how do I get out of the Loop where I'm just tagging everything as async how do I actually run this thing yeah yeah yeah and like a lot of people see that as kind of inherent complexity and like you know you can't really avoid that that's wrong you could totally avoid that um this is something I call a viral a vir what did I call it uh infectious viral constraint or something um basically it's a constraint that just spreads throughout your code base um even to parts of your code base that just they don't care like right like this like you I have a function that's like it's a helper that just I don't know takes in a list and calls a given function on it you know it's a map you know your map function suddenly your map function has to have an async variant because what happens if the Callback you take in is async and you're calling the call back uh oh you have to be async so like this kind of viral thing spreads all throughout your codebase and um unfortunately linear types kind of also have this um this kind of same behavior but not in the function call stack they have this behavior in your data um like for example if you have um what's a good example if you have a bunch of if you have a list of um you have a list of these linear types that represent your threads running in the background this list now is linear right if this list lives inside some sort of a resource you know thread manager that resource thread manager object is now linear because you can't accidentally drop anything on the floor that would indirectly drop that contained linear type on the floor right yeah so suddenly uh if you imagine your entire program's data hierarchy um everything up to the top has to be a linear type if it contains a linear type um and another another example of this kind of infectious uh stuff is uh like rust's borrow Checker um if you have a an Amber sand mute like a a mutable unique reference um every parent in your call stack has to have these these mutable unique reference and uh so that's the one that's the one downside because we don't like infectious constraints like this we don't like it when something spreads throughout the entire code base like this I just wanted to use this feature and now it's rippled through my entire code base what have you sold me exactly and and a lot of people are thinking like well you know aren't you talking about static typing in general like static typing these types just Ripple throughout your code base right if you have a function that takes in a you know a spaceship and you don't have a spaceship that's got to be rippled upwards until you find some colar that has a spaceship right yeah um the difference is that um the first three things that I described uh asyn weight uh the unique reference in Rust and these linear types these can potentially spread throughout your whole program uh but static types you can kind of cut off the spread you can you can limit the damage um by for example taking in an interface um or you can store the needed object inside another object that you have access to instead of taking it as a parameter um in static typing there's a lot of uh there's a lot of Escape hatches and ways you can kind of contain the spread so that's the downside of linear types is it's one of these infectious constraints but didn't you say that in Veil it's opt in it is opt in yeah um so for example uh if you have a spaceship it doesn't have to be linear but if it is linear then the constraint spreads and this is exactly why it's opt in by the way this is the one reason I didn't make everything linear right because I I wanted to believe me I really wanted to I'm like this is so cool and like I'm an engineer so I'm like I see a cool like idea and I want to apply it everywhere even where it doesn't you know it shouldn't be so that's the reason it's not it's not linear is because I I don't like infectious style constraints that's also the same reason Veil doesn't have a traditional borrow Checker like rust yeah oh okay okay so I'm I'm dying to get into the Under the Hood part but I'm just I've got to ask you on a personal level do you think if your day job is Java programming do you think there's any chance of retrofitting these kind of linear type systems to existing languages like Java a super good question I haven't thought about this in Java context I think you would have some success up till a certain point um you would you would be able to annotate certain types as linear um if you you know if the compiler also came with a constraint that uh where you had to choose which reference was the primary the owning reference um and then you could kind of see making your way towards this uh this higher R AI linear type Nirvana um but they would run into the same problem that C++ and rust kind of run into which is they expect a zero argument no no they don't Java doesn't have destructors um okay so the only remaining obstacle then would be that [Music] um yeah it might be possible if you could do that yeah I'd have to think a little further about that there might be a reason I can't think it off top of my head okay we'll leave that as we SE project perfect so we've talked about how that will change things in user space as a developer but what does it mean for the compiler writer does it change how easy or hard it is to build the language yes it does change how we need to build a language and it makes some things a little more difficult um I think the biggest example was um when writing the the list class in the standard library and the hashmap class and the set class um we needed to to write them so that they could gracefully handle containing linear types um and there was this very specific line in the standard library in the list class where I had to write list is a linear type if it contains a linear type um and that was that that hurt my brain so much so much I remember just like slamming my head against the table of this one coffee shop on I'm like how I know this is possible like there's definitely a way to make this work and uh and it it came to me um finally after like my fifth dose of caffeine um it was that we don't annotate on the list class that you know this is a linear type if is a linear type uh I made it like the the struct the class it's yeah I should say the struct for the list doesn't know anything about that we do instead is we say we enable a zero argument drop function only if contained type T has a uh zero ARG drop function and that was kind of the what what made it click for me it's that we don't really tell a type that it's linear what makes a type linear or not in Veil is whether or not a zero argument drop function exists for it um right there was few there was a few other ones like that but that was the one I most remember and that's the one I have the most brain damage from okay is that something that gets then exposed in some syntactic way to the developer I mean are you just saying are you just worry about writing drop functions or is there some kind of you're talking about predicates right you're talking about you could have done it with a predicate that says if I contain these thing things with this trait I have this trait is there some kind of constraint predicate thing leaking into user space in Vil not into user space luckily um well it means depends what you mean by user space if you the the library writer have this uh line above your drop function that's pretty much all that you have to do um if you're using the list function you don't have to have any special syntax to handle the list you don't have to um do anything differently the only thing differently you have to think of is like you know when you get that compiler error that says hey you just dropped this list of spaceships on the floor like what are you going to do about it that's the only thing the user has to really think about um but but did you mean user space like uh like including the standard library and so on um yeah I think I think so I think um you know you put on two different hats when you're writing the compiler versus when you start writing your standard Library have you made have you given yourself another birden and another set of possibilities yeah yeah um yeah it is kind of a nuisance to think about for some of your types whether they would need to be linear there's this there's this upfront complexity um and this is part of the kind of viral spread problem that I was talking about um where you have to think when you're writing a struct is this going to contain a linear type um actually I take that back you don't have to think about it when you're writing the struct you have to think about it when you're writing your drop function um like is this going to take an a linear type uh ever um and if it does will will I eventually be able to just add this you know annotation to this drop function or not um it hasn't been that much of a problem in practice but also I've only written a total of like 30,000 lines of veil and that's really not enough to get a good feel for the extent of the problem um so far it seems like a good trade-off I don't know how it would work out in real life yeah right yeah uh I can certainly see the upside I don't know how programmers will take to it in the large but you can almost never predict that you just have to do your best with what tools you think are good right yeah I I think that programmers will like the tradeoff um because it's really nice to know that you are not going to forget to remove this from the cash because like if you've ever debugged cash problems they're the worst they're awful right um but if someone's writing something simple like a command line tool that just transforms this chunk of data to this chunk of data yeah this this could be a nuisance if they come across it I see quite often uh working with Kafka it has if you don't remember to disconnect from it cleanly you know it works almost exactly the same except the next time you run the program you'll have to wait two or three minutes while it figures out if you're the second person connecting on the same clust on the same group or if you're entirely new and the old guy died yeah and it's like that's it's not the it's one of those problems not the end of the world but if you solved it cleanly for everyone it would make everyone's life just that bit easier yeah yeah that's important to yeah okay so I don't feel we fully unpacked your other favorite cool thing which is higher r a i i i want you to give me some more on that starting with reminding me what the acronyms for yeah yeah um so uh sorry I wasn't very clear at all um this usage of linear types to track future responsibility That's What I Call higher R AI um so um for like you know when you had that Shipyard that was taking in the spaceship linear type and also a few extra arguments that was a certain pattern of using linear types to uh remember what you had to do in the future to make sure the compiler enforced you tore down this spaceship in a in the way you originally expected to okay I've misunderstood so the H higher is referring to the fact that you can pass several linear types at once into the into the drop command uh higher I don't know really know why oh yeah okay so the I call it higher R AI is because uh it's kind of a superpowered ra AI ra AI is um it comes from C++ as far as I know I've done a lot of research and trying to figure this one I have no idea where the term came from but the first use I saw was C++ um it stands for resource acquisition is initialization which is a horrible acronym by the way that means nothing it's gobbl to right like I love I love the concept of RI and I cringe every time I have to explain the acronym to someone so if you see me just like dying inside that's why the AC acronym means nothing the closest I can like War my mind to try and make it make sense is that resource like I try and flip it resource initialization is acquisition I can't I can't it's it's so hard anyway the concept is that uh you have a Constructor where you take in some sort of um uh some sort of arguments and your object holds on to those arguments so that in your structor you can use those arguments to tear down something um like for example a really common use case is a file handle you know back in back in C in cand we've just got an integer file descriptor um and unfortunately if you've got an integer file descriptor you know X you can just drop it on the floor and you didn't close your file and that's unfortunate um and then C++ came out with r AI which is um if you wrap it in a class which has a Destructor that's automatically run it can make the correct call out to the Clos file in in the disruptor that's automatically run um but that doesn't quite capture the the beauty of this linear types thing that I've been talking about uh where um it can take an extra arguments and um it can be called with other linear types handed in um and you know you can have um you can be sure somewhere else in your program uh like like they can be sure that you will eventually call this Destructor with the right arguments that's higher raai it's raai plus linear types I guess you could say and I didn't know what to call it I'm like I can't call it superpowered r i because like well I could the marketing department code yeah exactly chose higher I don't know if that was a good call or not but fair enough it's definitely better than ra I i++ yeah I did consider that yeah yeah and you're right you're right okay what what where should we go next in the World of veil because I know you're excited about regions we want to go there next yeah I love regions um so I I think regions are I I hesitate to to say this with too much confidence but I really do think in 20 30 years and not because of veil at all um but because of everyone's efforts on regions I think in 20 or 30 years regions will be commonplace and they'll be like just the part of the main Paradigm of of software um because of all the benefits they have so let's see where to start with this one um let me start in a reference counting world I was just kind of playing with this the other day now Veil isn't reference counted but uh when I was thinking of regions I'm like hey this could help reference counted people too and I'm like I should tell all my reference counting buddies about this so here's what happens um let's say that you have a function where uh you know you're riding a little rogue light game and you got your goblins running around and on every single turn a goblin wants to figure out like what do I do like and they usually have logic like uh is a player nearby okay if so I want to run at the player and be scary right um is the player not around okay maybe I want to like walk around in a random Direction like is there um is there a is there a garden at my feet cuz goblins love gardening every one knows that right um and if there is uh you know you might want to you know do some weeding like plant plant a few seeds just basic like you know you want to figure out what the goblin wants to do and that is just by its very nature a uh a readon kind of operation you read the world and you figure out what you want to do and you do that by like comparing weights you might do some pathf finding right um there's a very interesting opportunity in there since it's read only if the compiler and the language know that this operation is read only then you can mark it as a peer function and uh and I can feel like you know functional programming people all across the world being like yes those we love peer functions right and I'll tell you why they're so cool and why they work really well with regions and reference counting in a garbage collection um that's because if you can mark this you know figure out what I want to do function as pure and the compiler can track that sufficiently well then it can know that um during the functions execution you might make a few more references to you know the level or other goblins or the gardens but by the end of the function these references will mostly go away right and so in the outside world outside of this function and all the data that existed before this function their reference counts this is the weird part the reference count integers in those objects don't have to change it's since you know you're not changing anything in the world they don't to change and you're probably like thinking like well wait a minute but what if you you know made a new reference inside your pure function um to this other Goblin right and then you return that reference and it's like okay that's the spot where you'd want to dig through the hierarchy and then uh go reach into those you know pre-existing objects and increment their reference counts but that's much less they're much fewer of those than the temporary um objects you created during the uh pure functions execution um and I do have numbers for this now actually um at least 65% in just a regular sample program I ran um of at least 65% of the references were these temporary kinds of references uh that didn't survive the pure function call and those didn't need to like if you think about in hindsight those didn't need to do the increment and decrement um on the objects they were pointing to if they were pointing into the pre-existing data this is making me think of like garbage collection where we say okay well this is huge sweep of things where we don't need to worry about any garbage that may be created yes this is very similar to um I I forget what it's called it's like the the generational Theory um yeah it's something like that but the uh it's a it's a it's a very wellestablished observation in garbage Collective world that if you have a function uh well no just in general short-lived objects most objects are short-lived and you use them once maybe twice tiny little bit and then they're just gone and very few objects need to survive any longer than a few function calls um regions are kind of uh a way to go the compiler which objects are going to survive and which objects are not going to survive that's really nice because for reference counting you can uh eliminate the reference count operations on the ones that don't survive um for garbage collection I'm glad you brought garbage collection up regions um help garbage collection in that regard in that they can in theory I think right I've got no proof for this sorry um they can in theory uh give the garbage collector a precise hint about where to do its collection um you can tell the garbage collector hey this function is a here function um and garbage collector you should copy The Returned objects The Returned object out of that pure functions own private Heap and then just Blast away the Heap right and garbage collection is really good at doing that but this particular hint could make it even better um with careful use of this hint you could remove uh these um these these giant spikes that kind of build up over time like for example without this you might have a a latency Spike every five seconds I don't know um but with this you can kind of smooth out those spikes um by giving the garbage collector more targeted information about what regions no longer exist and what objects should be copied okay so the upshot of this then is that we reduce the amount of time spend garbage collecting and the amount to kind of stop the world pausing yes for for something that sounds like it's not going to leak into programmer space this is entirely under the hood in the language is that fair unfortunately no um yeah this would require you annotating the function as pure and then um depending on who you ask it'll also require uh in the function signature um no sorry the function signature won't won't change except for that Pier inside this specific function nothing will change either but let's say that you then call another function which is handling both uh I'll call it pure data from the outside world and also some you know temporary data that was created inside your perer function it has to keep those separate and it has to know which is from which quote unquote region um and so those functions that you can call might have to have region annotations or some other way to conceptually keep those data separate so the compiler can know at the end of your perer function um the exact boundaries uh of the data that it can just throw away yeah so this could require some annotations um there are some languages out there I think 42 uh and that's spelled f o r t y and then the two um count to the number of languages that support this yeah no no um yeah uh the the 42 Creator uh reached out and he's like hey Evan I love Veil except I don't love the annotations that you said you might have to have and so we debated for a long time and he made some really good points um I still believe that annotations are a lowcost way to get a lot more flexibility out of the system but if you value Simplicity then I can definitely see why 42 uh its approach is sorry if you value syntactic Simplicity 42's approach could be really nice yeah I I'm okay with the Syntax for it I the thing that worries me if if you say that this model is going to come in to be one of the standard paradigms in the next 20 or 30 years oh yes I can complete that argument okay I'll finish my question and then please do so it's like how are you going to teach people both how this works they've got a good mental model and the benefits of doing so because there's a cost to learning more than there's a cost to typing annotations yes um and uh I can imagine uh well I've experienced a lot of us uh kind of hear like wait annotations uh oh like is this like bar checking because that's really hard right like we don't want to learn bar cheing like well a lot of us don't want to learn it I love bar cheing um and but but its annotations are really hard because like whenever you find that you have to have annotations you're in a case where compiler can't figure it out for you um and uh and answer to that is that region annotations are actually really easy and really simple um because they don't come with this uh extra rule about um they don't come with the extra Alias ability exor mutability rule they don't come with the um the rule that every object has to have one writable reference or multiple reader references um so really regions are just like any other static typing concern it's like um you know if you have know if your function takes in a marine and a in a spaceship right this is equivalent to the difference between those two types right like if like like consider a function that takes in a uh an a apostrophe spaceship versus a b apostrophe spaceship those are just one extra minor step in the world of static typing those aren't a whole Paradigm Shift um and another way to answer that would be that this is uh inherent uh to what we're doing already we kind of already mentally track um what objects are in what regions uh we kind of already like if you if you look at a pure function or just look at a function and someone asks you like is that pure uh in other words like does that function modify anything from that sub World you'd be like no no like obviously from the name you know it just says Get Right um and if you're in half scale like the answer is always yes right easy um and uh and then uh you know you can kind of read the function and just kind of look at any particular parameter and know uh sorry you can look at the function and any of its local variables and you can kind of Reason out like is this from before the function existed or is this a temporary variable errors is something that's going to get returned it's very easy to answer locally like what those are and there's no viral spread of complexity there's no extra rules that come along it's it's really just annotating you know what era this data comes from okay and is it I'm getting the impression from this that if I add pure and it's right then I just get some free memory performance boosts if I add it and it's wrong the compiler tells me I'm wrong if I don't add it at all it still works I just don't get the memory boost yes that's specifically how Veil works yeah okay um that's a particular property of veil that I've been chasing since the very beginning um like I believe that you know 90% of your program doesn't need to be optimized that hard right and in that 90% you want to prioritize things like flexibility Simplicity stable apis and so on um you know maintainability uh you want to make it map onto the real world and humans conceptualize like as much as possible because that's part of Simplicity um but for that 10% that's where we'd want to add annotations like pure we'd want to use a a few more linear types uh for performance reasons that I haven't really gotten into um that's when you want to you want to be able to opt in to these uh these ex this extra 5% of performance or sometimes more than that um yeah I really believe in optin uh I believe in compiler hints like that to make certain areas much faster yeah yeah that's yeah I can totally see the appeal of that so perhaps we should talk about what your motivations are with Veil because on the one hand you make it sound like you want to be The Guiding Light for the next 20 or 30 years of programming on the other it sounds like this is just your memory research playground maybe it's both and more but tell me it's not much of that first one um I I want to be one more hint to the world um there's a lot of people working on uh regions uh like Verona uh Microsoft has a really cool project called Verona which is blending regions and bump allocators and garbage collection uh in a really cool way that's going to have a lot of performance there is that 42 language like I mentioned um I there's a bunch of us languages that working together will be The Guiding Light I hope um and uh and there's uh other languages like ustal um who's pioneering mix borrow checking like from rust and linear types um and so that's I'm really looking forward to that so I'd say it's more of the lad that um this is just kind of my research project and it gives me something to blog about because as you've seen I love blogging uh mostly as just like a a vehicle for delivering my snarky side notes into the world um I've seen that link to your blog yeah if anyone's read my blog posts like like they can tell like I have so much fun writing these little side notes these footnotes um yeah so I think you asked why Veil uh the reason I'm working on Veil is because like there's so many things that people don't realize are possible in the world today and like um we kind of tend to get stuck in this mindset where you know uh like like you know before Russ came along we're in the mindset of there's garbage collection there's reference counting then there's things like C++ there just unsafe with some other features but unsafe and then Russ came along it kind of proved is all wrong right where there's there's now this this third memory safety approach right um but then we kind of just fell back into the same mindset right like for for something like when did Russ come out like it I think it's 1.0 was 2013 and it was in beta for long before that so I'm just going to say like 10 to 15 years for 10 to 15 years we've been in this mindset that there's just nothing else out there there's just three memory safety approaches and that's kind of sad to me because like you know I I know that I've known that that's kind of been false for a long time right and it's and uh and also it kind of It kind of takes all the fun out of the exploration when everyone believes that the the problem is solved um and so I want to show people uh with Veil that there are a lot of other ways to do that um that's why Veil it's it's three it's three main ways of doing things are generational references which are the the fourth memory safety model it uses linear types under the hood which are arguably the fifth memory safety model and uses regions which are arguably the sixth memory safety model so anytime someone's like there's no fourth memory safety model I'm like well here's three more so now there's six so that's that's that's one of the big motivations for writing veils because like I wanted to have something that I can blow people's minds with on the memory safety front and then and then it turns out in in exploring that there's like 10 more past that and I just been collecting them over the time and I'm like oh this is this goes much further than I thought that's that's the main reason I'm working on Veil uh the second reason is that um there there's other features besides memory safety that are really cool that I think people would really like if they knew they were possible like perfect replayability um if you can take non-determinism out of your entire language uh and make it so the entire language is uh predictable then you can get really cool benefits like the ability to you know have have a beta test or you you have a a special program uh special compiled program out to your beta testers who have opted into this particular feature where it records their inputs and if you have a recording of their inputs and you know the entire language is deterministic in other words there's no Randomness creeping in from the language then that means that they can just send you that dolog file and then you can just hit play and you can reproduce their program so if you've ever had uh some frustration dealing with uh Repro steps at work it's just gone but that problem it's gone like they send you the log file and you just hit play and you're done um and uh that was actually kind of tricky because uh non-determinism can creep in in so many places uh the worst place is just memory unsafety right so suddenly you have to have memory safe language the second hardest part is uh threading and so now you have to figure out a way how do I make this program run deterministically but also have threading right and uh there are ways I won't go too deep into them but I'll leave that as an exercise to the reader okay I think I think we want to unpack a bit of that cuz yeah I've I've I've had that kind of experience in the early days of elm where it had a kind of time traveling debugger that worked by recording all the messages that made a state change on the system yes yes um it kind of falls down as soon as you start doing networking stuff and they because it's compiled to JavaScript they didn't really worry about threading stuff how can you how what's your how do you actually get rid of enough non-determinism for this to work yes okay so I'm glad you mentioned JavaScript because that is the one language that has any hope of pulling this off um in in today's in today's ecosystem right um yeah I I actually uh I thought there was other languages that could do this because if you have a memory safe language that has no threading you're pretty much like 90% of the way there like python would also be close but it turns out a lot of languages like Python and C um they they let non-determinism creep in and very specific like you could count them on your hand and you're like oh no you were so close for example C uh the string classes hash code function is non-deterministic between runs if you've got a string hello my name is Evan and you get a hash you just print it out you might get like I don't know 123 million and four right and then run the program again and you get a different number and I'm like what why what what could be non-deterministic about this turns out it's on purpose for security reasons um oh and there's ways to do this perfect replayability deterministic thing without compromising security which is also cool um oh yeah so the threading thing um the trick to making this work with threading um is that you would need to record the not the timings you would need to record the sequence numbers of every message you pass in between threads and what do I mean by that um so think about goang for a second um goang is just regular garbage cleed languages language where you have channels to communicate between the two threads um there's no I won't talk about mute textes yet let's pretend there's no mute textes yet um you just send a you know a hey this spaceship filed fire fired this missile message from thread a to thread B so if you want to keep things deterministic in the presence of threading you would attach a counter um an integer to that message uh we sometimes call them a sequence number in the networking World um and it's basically the source thread saying hey this is the um you know 15th message I have sent uh on this particular Channel yeah and if you uh are are in recording mode for this program uh when you receive that message you just record from you record into your recording file that hey this next thing I'm doing is I am receiving message number 15 from this Channel and right yeah so if you if you are in replaying mode um and you have you know you're listening on a bunch of channels at once uh to keep things deterministic you would just look your log file from the previous run and be like oh okay I should be paying attention to uh this thing over here this channel over here waiting for message number 15 specifically um and you might be wondering like why do we even have the integer right uh the integer is for um when you have a many to one channel you have multiple people writing into the channel the um the integer helps you know like who it's coming from and what to wait on and what particular message to wait until they arrive love so that's kind of how you would uh have perfect replayability in a Threading World okay that sounds good but it sounds like you've also just created a headache for anyone writing in network library now they have to write it in two modes whether they're faking sequence numbers or actually doing the job in hand is that true uh no actually um the any Library authors don't really have to do anything to support um the way we deal with uh things like networking um and reading and writing files or reading and writing configs or user input um is that the language itself will intercept the data coming in uh from the ffi boundary so what I mean by that is let's say that you are um you are opening a file right under the hood that's going to be a call out to bees well it's going to be a call out to a rapper like as we do in any language we make a little wrapper Library around C's F open and F read and F close and fite um and that wrapper library is so that you can ffi out to see you can call out to unsafe C code you can call into other languages code right um the language knows about that ffi boundary it has to know about it because it has to be special specially you know crafted sorry the language has to support talking to other languages and the language knows very well what's going on there so uh inil that's I forget the keyword for that I think it's just X turn like like C is um so when it sees ex turn on a function it knows that's going to be out in C or rust or Zig or something like that and it also knows that if you are making a special build for this replaying and recording it should also insert extra assembly instructions um that will copy any data uh that is coming in from ffi so if you're doing a function call out to C then there will be extra instructions that will copy the return data that's coming from C if C is calling into you into Veil um then these extra instructions will copy all the parameters um and that means that uh the language you know knows the specific for well yeah any language will know the specific format of any data coming across the wire uh and for the case of f read it's just going to be a buffer of bytes and so the language will literally just copy the buffer of byes straight into the uh the recording file and sometimes that can get big and so I'm kind of tossing around the idea of enabling uh you know ignoring files which you know are just constant static like you know a lot of files aren't going to change between runs of your your program right so there there could be white lists like that but the short answer is that the language can specifically automatically record what comes over that ffi boundary yeah okay and then at at debug time you flip another switch that says okay replace all those external calls with a replay function exactly yeah yeah okay okay you know what this reminds me of uh I see a lot of people in the kind of CFA stream processing world and the actor model world and they're both trying to do this thing where they've got a network of data coming in from the outside world transforming maybe having concurrency issues and figuring out how to debug that with without completely rerunning the whole pipeline do you think you could if you does Vil have anything to teach people debugging that world give me a second because that's kind of blowing my mind hold [Laughter] on I think it could I think it could um I don't I don't know you know much about the Kafka world uh because we used different Technologies at Google um but it's seems to me that recording messages and their sequence numbers is probably a solved problem in the Kafka world like whatever Solutions you currently use probably involve you know recording the messages and putting them on a file somewhere and I wouldn't be surprised if the missing piece in that world was the non-determinism of languages um like if they didn't exist and you asked me that you know that question like knowing nothing about Kafka how would you design perfect replayability in a Kafka world i' be like you can't it's impossible languages suck because they're all non-deterministic and like CS you know C's string functions uh strings hash code function just returns a random thing every run and like why you could tell I'm scarred by that um and you know what side rant here they do it on purpose like like Go's hashmap or dictionary I mean it it intentionally returns a uh a random sequence every time you iterate and I'm just like please anyway um they I I I should be kind of they do that for a good reason it's to protect against hash attacks um because there's certain exploits where if a attacker crafts a certain input that they know will end up in the hashmap in the same bucket then they can just run memory out and uh reduce your runtime uh sorry maybe not run memory out but make it so your application goes to a crawl because they just turned your constant time patchmap lookup into a linear time linkless search anyway um but that's that's not a problem you can still have that as long as you record all of the inputs to your program um and you don't well yeah I'll leave it at that anyway so back to this Kafka thing uh if I didn't know about Veil I would say you can't because languages are non- deterministic you can't guarantee that this Java program or this you know C or go program will return the same thing every time um you could get close and you could have some success if you have really uh strict guidelines on not using uh certain non-deterministic things like you'd have to use a specialized map function sorry specialized map class in go you'd have to somehow avoid string hash codes in C and that's really hard I've tried it um JavaScript would have some hope here um so if you had Kafka with JavaScript you could probably get pretty close with that um but but Veil um yeah veil's contribution to this area in this question is that it shows that languages can be non-deterministic and so I guess if you somehow record like uh so I guess if you somehow um note for any given operation what were all the packets uh that went through you know what are all the machines that they went through and you collect the recordings for all those machines um then you could perfectly replay anything even in a distributed server world there's hope for a better world of debugging yeah yeah few few what they I think I've heard you use this term heisen bugs bugs that aren't there when you're looking I hate those okay heisen bugs heisen bugs um so anyone who's who's done enough you know multi-threading uh stuff has dealt with heisen bugs um heisen bugs like multi-threading is just hard to debug because the CPU just decides based on like the phase of the Moon and what day it is and like you know Butterfly Effects in Japan we whether or not it's going to schedule this thread at the same time as this thread right yeah and it's only when this thread is scheduled at the same time as this thread that this bug appears and so when you're trying to reproduce a problem that the user sees uh and if you can even figure out that it's because these two specific threads run at the same time that's when the bug happens why do how do you reproduce that like you can't control the CPU and what threads are put onto what cores um so like there there's kind of two hard Parts there it's even identifying that that's the problem and then reproducing it once you know that's the problem that's aisen bug because like you think the bug is there you know it's there but every time you look at it and every time you try and debug it it just disappears because you have no control and it depends on the face of the Moon yeah yeah yeah I I'll add in a part three to that which is when you are pretty sure you've solved it are you absolutely sure you've solved it yeah you can't know yeah yeah yeah but if you have the recording from the user and you can use that to reproduce then you can see if your fix worked and modul large file sizes you could keep that in your test Suite to proof that scenario yeah yeah that would be good so it seems like there is a a lot in your um language research playground of veil uh I think we should wrap up so should I be pointing people to Veil to play with learn from co-develop with you um so I wouldn't suggest that anyone uses it for anything serious because you know it's still very prototyping and the compile times are unfortunately still pretty slow um I would Point them at my blog because uh I like writing stuff and I heard people like reading it um that's where I kind of tell the results of everything I'm doing and uh the directions I'm going to explore yeah i' Point them out the blog okay yeah there aren't that many people working in language research that are that readable there L lot of academics writing academic papers which aren't famed for their readability uh your blog is a nice way to get into this stuff so I shall link to that in the show notes Evan thank you very much for joining us has been fascinating thanks for having me thank you Evan you know I love it when you can't quite tell if someone's trying to push the boundaries of what's possible or if they're just playing with ideas often because the two go hand in hand so well I'm thinking of um there's a great book about Richard fainman uh who was a physicist and an inet tinkerer I think that's a spirit we could all learn from I'll put a link to uh biography about him in the show notes because I really enjoyed that also in the show notes of course you will find links to Veil some of the other languages we mentioned and some of the other sites came up in that discussion if you scroll all the way to the show notes to find that you will also pass links to the like rate and share buttons if you've enjoyed this conversation please take a moment to click them and make sure you're subscribed because be back next week with another journey into programming at play and the future of software development until then I've been your host Chris Jenkins this has been developer voices with Evan nardia thanks for listening