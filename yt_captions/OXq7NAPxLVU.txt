how often do you get imposter syndrome even after 15 years as a developer I still feel like I don't know [ __ ] about this is normal that was one of my favorite lines of the Ozarks absolutely favorite line Ruth was my favorite character okay also this graph is pretty good right I can never tell am I right here with HTM X or am I right here with HTM X I'd like to say I'm right here since gaining experience in a field reveals the huge number of skills you have to master however what if we are focusing on the wrong set of skills what if we are getting distracted by all the noise and our acquired experience is actually irrelevant are we really becoming better developers in this case this is an obvious issue in the front end world where learning a framework is the number one priority for most deaths never mind the decade of complaints that's fair I mean obviously experience is worth a huge amount right experience is the single greatest thing to go with you but but it but it's more like what experience that's the question you need to ask yourself is what experience goes with you some experience is really great but it's only good in a particular situation and if that situation is no longer employable then you also lose I know we got some we got some third eye coming in hard right now reworks and breaking changes in the framework space companies and developers are still betting on these bloated Tex TXS hoping for quick shortterm WIS the long-term results however are complex systems with tons of technical depth hidden complexity and various workarounds which are actually creating worse developers let it's an interesting take I don't think the large frontend Frameworks are the root cause of it I think they're more of a symptom you know I've been in I've been in a home brewed framework situation before and in the home brw framework situation it also turn into to spaghetti and mess you know what I mean so I I'm not 100% convinced on that one uh laziness is laziness is the reason again I don't think that's it either uh I mean hey I'm a developer I cut as many corners as the next developer okay when there's a corner to be cut I'm cutting it checking my checking it twice and cutting that soon as possible but not all Corners being cut are equally valuable some you can cut it's not even difficult some you can cut and it's really really really really expensive so I don't know I don't know if I don't I don't think I believe that Frameworks are the root cause of the mess I would say that building a product and having someone attempt to abstract the product to be able to fit every need possible and then as new needs and unforeseen challenges arise you morph a design that was not designed with that in mind to fit it in and you do that over years and what ends up happening is it becomes an untenable mess you really try to I mean it's it's one of my big problems with reusability and abstraction people really do attempt to make everything possible and when you use these everything possible abstractions you necessarily have to shoot in or shoehorn in specific use cases which just often lead to really wonky items I do explain what I mean by I do think Frameworks need more specialization less less everything I do agree with that this video was supposed to be a light-hearted overview of a small game written in VJs but the code T is writing is fascinating in its Simplicity if you're not familiar with Van this is an ultra light reactive UI framework which offers all the functionality you would expect from a modern library in under 140 lines of code despite its tiny code base you can build anything with Van including browser games and this is what should raise some yeah okay I I I I I just went right into fry mode 140 lines to do who's he what's he now sus how many extensions are there right how many extensions we talking committe is widely accepted to send tens of kilobytes of JavaScript to the browser to build a basic app when options like van offer all almost the same capabilities in 900 bytes to put things into perspective let's take a look at the history of the most popular front end framework react started as a lightweight library to build uice and in the span of 10 years went through the following phases use classes to define components and life cycle hooks to run your own I literally have a short where I end at HDMX code in the react context deprecate class components in favor of functional component on change the API and Mark life cycle hooks on safe he did miss one step in between these two which was a rethinking of class component life cycle methods in which some set were considered unsafe and some weren't so oh my goodness how' I do it to myself twice so in between here and here there was component will receive props and component unsafe component will receive props there was component will Mount and component did Mount then component will Mount became unsafe component will Mount so there's actually a step in between where they resung the class components but with a whole new set of functions provide hes like use memo and use callback to pass the burden of a poorly designed reactive system onto the developer finally decided the browser is not good enough to build uis and introduce server components this might be a so I actually look at server components as a net win to be real uh I think server components are moving people towards thinking about the server but I think it's doing it in the worst way possible but at least you're thinking about the server now and I think that there's a real win there the server is a great place to drive logic I think it's great I think I think you're on the right track you're on the right track server components are a great win in the right direction I just don't like what do and I think that they're going to be horribly complicated and I think within a year and a half uh people are going to be completely probably pendulum swinging back to the client I think we're going to get a really weird next bit of time by right direction you mean backwards I think that if you think the client is the place to do everything I think you fundamentally have not written enough applications take but we are witnessing entropy in action it's far more difficult to maintain and understand the react codebase now compared to 10 years ago even though the problem we are solving is still the same and we have access to better hardware and more reliable internet connections this is not a reactor end in all fairness all other popular Alternatives went through similar major vieww works with angular announcing its second Renaissance just a couple of weeks back so back to my question is fighting framework fires really making you a better developer it seems to me that keeping things simple is way more difficult than maintaining a complex system and if you really want to grow as a developer you should try to achieve more by writing less I for one can hold my own in any large reactor angular project with piles of third party libraries doing God knows what under the hood however I'm not so do you like how they had that this is just like some program typing for this guy like they didn't they didn't even get somebody just typing code they did all this setup for nothing not only that but whatever's on this monitor is over here on this monitor as well confused by the setup and lastly why would you have a monitor why would you have empty space in betwix you know what I mean empty space in betwix two monitors which is also the center of your vision crazy you know what I mean crazy doesn't make any scene girl in the back look she's actually just staring disappointedly at him through the center where she should be looking at code okay if she was using Code she would have seen not him and being upset but instead she would have saw Cod just saying God knows what under the hood however I'm not so sure I could maintain V Simplicity solid Elegance or the original ideas behind the framework like Wick if you want to explore some minimalistic Frameworks in more detail here are some videos you might like until next time than so what's the I do want to see this framework that he's talking about though this this seems really cool this van JS I don't know what van JS is oh look at that website C can you complain about a website like this van JS .9 KB grab and go reactive UI framework without react jsx honestly not bad 900 bytes to give you this all right that's pretty cool they must be using Setters underneath the hood that's my guess they're just using Setters underneath the hood to kind of Drive some of this functionality but still pretty cool I'm curious how I I'm curious curious how it is right um look at the code yeah we could look at the code abbreviated vanilla JavaScript uh where is is is any of these a GitHub okay that one's a GitHub let's look at the code really quickly because I'm actually curious about this Source wow that's a lot of stuff got them got him right there I mean yeah like I I definitely don't like like when I see this I I'm not a huge fan I'm not necessarily a huge fan of this code right here uh just going to throw that out there that uh when I see that I you know I'm not loving it you know I'm not I'm not loving what I'm looking at I'm curious how they produce these tags right there has to be somewhere that defines these tags what are the possible tags where do they Define them at that's what that is what is so curious to me because I don't see anywhere that has like div P all these kind of things you know what I mean I think I could enjoy doing this a little bit because sometimes you need a bit of client side interactivity just a bit not a ton but just enough to make it you know worthwhile and you have your HTM X and the htx is used to kind of Drive the Chrome the servers Bringing Down the Chrome bringing down all that but then you have like your Conway's Game of Life or whatever in the front and you want an easy way to kind of be able to change stuff be able to hook up interactivity and all that so you want a nicer way to drive things no see I don't want to use Astro because I like Astro I do like Astro but the the the grand failure right now is still the same thing thing which is the moment you want client side interactivity the moment you flick client is true react comes down everything just comes piling down and you just get a ton and a ton and a ton of JavaScript so can you get something that has okay stuff reject modernity return to Web 2.0 I'm not sure I you know I you know may you know the mistakes have been made they have HTML tags yeah okay I I mean I could check out uh uh is it soen soen right is that how you say his name I heard him say it it's like soen right am I saying that right I'm excited about that react isn't so bad when it's small and focused yeah I mean like any library is not bad small and focused when you build something that's a few hundred lines of code react is super super super understandable but so is any library right I bet you this Library whether it's good or bad will still be very understandable so not boost okay fine not boost but everything else rust is not bad small and focus rust is not bad small and focus either right don't ban me I know those are respectful crabs I get that all right hey the name is I could I I'm going to give this Library a try we'll try it out on my next project which is coming very very soon a gen