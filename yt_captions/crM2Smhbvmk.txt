on developer voices today we're going to be looking at another one of those programming languages that all the cool people seem to be talking about these days it's kotlin so if you're a Java programmer or you work on the jvm in some fashion you probably haven't escaped the buzz about kotlin but what I hadn't realized is how much further kotlin reaches these days it's not just a jvm language anymore it's making a really serious attempt to be the one language that you write and then run everywhere so it can take you to the back end and the front end a mobile and even embedded devices I think that's really appealing right once run everywhere it's always been appealing if it actually works and if kotlin is a nice language to write in in the first place so I've brought in an expert to discuss it coming direct from Google we have James Ward he's a product manager for kotlin at Google he's a clear fan of the language and we're going to talk about why he's a fan what kotlin has to offer what's its focus what's it trying to be as a language and then how does this promise of getting you onto every platform actually work in practice and what happens when it breaks down when inevitably this attempt to treat all platforms is the same breaks down does it have a way of handling that well I've got to say James has some good answers some good reasons to believe that it will work and so we get right down into the Weeds about it and uh kick the tires as much as we can in a podcast format and just to cap things off we recorded this podcast just as Google I O was happening so he gives us a sneak peek into the future of kotlin where it's trying to go next so if the promise of writing one thing everywhere all at once appeals let's get stuck in I'm your host Chris Jenkins this is developer voices and today's voice is James Ward [Music] joining me today it's James Ward James how are you today good thanks for having me Chris great to see you again great to have you I haven't seen you in a little while um I so I've brought you in to talk about kotlin which I know you could talk about forever but before we even get there I have I've got to ask you about your job title yes because you are product manager for kotlin at Google yep kotlin isn't a Google product so what's that all about yeah so um over five years ago the Android team uh I think so five years ago went kotlin first and this was really driven by the developer Community around Android they started doing kotlin kind of on their own and they're like hey this is this is pretty cool we we really like this language and what if Android made that kind of the default and and so they announced tape we're kotlin first Java is still supported uh on Android but Colin is the primary programming language and so that kind of set off a chain of events the the founding of the kotlin foundation with jet Brands and Google and uh and so yeah in in many ways Google is is now incredibly involved in kotlin's development and uh and some of that is driven for Android but also Google has been using kotlin on the server side it and so now there's there's much more interest um in how just Google engineering uses kotlin and so they're getting more involved as well that's interesting because I always remember Google as being the place that had C Java Python and go away those are the only three I think they've actually been swayed by users into changing that way yeah yeah I mean there's so many great language features in kotlin that help with UI development and make the programming model so much better and so um see I think it makes sense and and the reception from the community has been incredibly positive around using kotlin for Android and and so yeah it's you know it's it's cool that that uh this this great new modern language has has been able to to grow kind of organically in the Android community and Google as a whole so yeah so I'm product manager for kotlin which means that I get to help grow uh kotlin on the Android side but then I also work internally with our engineering teams and their use of kotlin and doing a lot of things to keep in sync with jet Brands and all the great stuff they're doing around kotlin and and then working on um we we have a number of Engineers working on the kotlin compiler itself there's a big compiler rewrite happening in kotlin and so we're working on that and then Android Studio will eventually use that new new kotlin compiler which is faster and better and more integratable and just a better foundation for the future so yeah just helping coordinate all the stuff so you're not too busy there's a lot going on and you know we just had we just had kotlin conf a month ago and had a bunch of stuff going on there and then had Google I O this week a bunch of great kotlin stuff we talked about there and so um so yeah just all sorts of good kotlin stuff happening around Google uh well we should get to the we should get to what's new in kotlin maybe we should we are with what kotlin actually is do you have an elevator that's a good idea yeah good how would you characterize it in the landscape of languages yeah so I think there's a few things that stand out um for me one is that it's it's a modern language it doesn't have the baggage of other language you know as languages evolve it gets harder for them to evolve um because they don't want to break a bunch of stuff you know and there's different approaches to this I've as as you and I have talked about in the past I have done a lot of Scala and I I think Scala is a great language and it continues to evolve at a pretty rapid Pace but one of the challenges with that is like how do you bring the community of users along with you into those new evolutions and so cotton three I think or sorry Scala 3 has been out for a couple of years now and the adoption has been I think challenging because there are a number of pieces that have to move along for people to be able to adopt it they have to you know make potentially make code changes to adopt the new language they have to get the libraries that they're using compile their plugin and macros like there's just this giant ecosystem around language obviously like that's what you want and a language is a big ecosystem around it but how do you then evolve a language and bring that whole ecosystem with you and I'd say that generally a Scholars had had some challenges around that um whereas uh kotlin being I think it's like 10 years old now um so relatively speaking for languages not super old and so bringing that ecosystem along doesn't maybe have all the challenges that that other languages have um and then there is a a strong focus on on helping helping the developers and the ecosystem move to New versions and so I I don't I'm trying to think if there's like breaking been many Breaking changes in the language and Library compatibility issues like don't seem to be as prevalent in the kotlin space so the new compiler that is being worked on one of the big focuses of that new compiler is for most users to move to the new compiler they shouldn't have to change anything and so that's just one way to like all right can we replace the whole compiler underneath everyone with something new without them having to really be impacted by that change and yeah that's that's a huge Challenge and takes a lot of engineering effort I'm thinking of scholar 3 which handled that fairly badly I'm gonna say yeah handled that pretty well going to Python 3 and that was still a lot of work the the transition to Python 3 was was I think also very challenging there was a few things that that required some significant changes in the ecosystem so the Python 3 transition from what I know of it did take quite a lot of effort to to get that ecosystem moved now it's firmly moved and that's that's all great but Scala 3 has not yet kind of reached that that kind of mass migration Point yeah and so there's been some challenges there but I love scale of three that I'm using it a bunch of projects and and you know there's a lot of really good language features in there but yeah bringing the ecosystem along has been been more challenging but anyways back to kotlin um there's we're allowed to talk languages on this podcast yeah awesome so so kotlin has has some great language features that lead to better productivity better reliability so just things like null safety being built into the language like I think that's kind of becoming an obvious default for programming languages these days um yeah I really hope so yes um but that's something that leads to fewer production issues uh for for people that are using it and um and then language features like there's a nice DSL uh style way to to use um a uh it's called Lambda with receiver pattern that leads to a nice looking DSL if you in places where you want to have more of a DSL look to your code then you can use language features to do that things like callbacks um there's a nice syntax for that which when you're doing UI programming um called callback style programming is is an important piece and so yeah being able to have kind of language support for that is has been useful case classes to Define your your data objects uh has been you know a feature that people really like co-routines is one of the big kind of headline features of kotlin which makes the async programming much more straightforward so yeah I think there's there's a type inference there's a number of language features that just make it a good modern productive language and then of course Colin coming out of jet brands has a core focus of the language has been around IDE support and so being able to have great ID support that that is continuing continually evolving with the language has been important is that like a double-edged sword though because I know if you so coming from jet Brands if you use IntelliJ it has fantastic ID support if you don't not so much right yeah I mean Jeff Bran's focus is definitely on their tooling and so so the best kotlin tooling is in IntelliJ on Android Studio you can use vs code and there is a LSP for kotlin but because it's not core developed by the kotlin team uh yeah I think that there's some some lackings there if you want to be in vs code or any chance of Google taking on the LSP plug-in hey you know Google it's a good question um Google doing because Google's doing a lot of kotlin development internally a lot of a lot of the engineers at Google are using using Cloud I think we just hit 15 million lines of kotlin code in the mono repo at Google so quite a bit of of kotlin code there but Google has its own tooling internally that that it uses and the for the mono repo uh in Google there you have to take a bit of a different approach to how you do code intelligence and and understanding code and so so for for Google's internal uses the the LSP doesn't necessarily make sense and so yeah I don't know what the how the future will will play out and then also like jet Brands is a partner in all this so we want to make sure that jet Brands is is successful so that bread is butted by having the IDE of the world-class idea yeah exactly so so yeah not sure what the the future of that is I think generally for a lot of the stuff around kotlin there there is a focus on growing the ecosystem and as part of that there's no reason why third-party developers can't can't build these tools and and use them and um and so yeah I think that as the ecosystem grows the language support for other IDs will will certainly grow but yeah in terms of jet Brands and Google don't know if there will be specific uh investments into into alternative ideas okay okay while I wait for um a more up-to-date LSP plug-in you can have to persuade me this language is so great that I should switch to jetbrite and so Android Studio yeah and if you're if you're doing kotlin I'd highly recommend that you use intelligent or Android Studio you're going to have your best experience there um and so yeah that's that's a I think that's and I'm a long time IntelliJ fan and user and so for me that's not an issue for for other people that may be from more familiar with other tools and so yeah but but for me that I love IntelliJ so okay okay it's um it's nearly as good as emacs I'll give you that okay so let's get into some of these better I'm a long time VI user so so I'm you know it's uh I I don't often edit code in VI anymore I'm pretty exclusively editing code and IntelliJ yeah yeah it's it used to be like this classic war between VI and Amex and now we realize we're both basically on the same side against the against if that's the word against the Ides of this world well you can you can plug in the LSPs and to Via an emacs yeah so yeah that's why I need yeah yeah and I you know it is a community project around the LSP so hopefully that continues to evolve and um yeah the community drives up more okay persuade me over to this other IDE to persuade me to the dark side what let's talk about some of these language features and see what's good about them so the co-routines I know you're excited about incotman yeah yeah so we um often in a UI program or on the server side you've got something async that you need to deal with and that's uh oftentimes related to IO right your your uh firing off you know request to a server and then you don't want to block the thread while you're waiting for that to come back especially when you're on the UI you don't want to block the main UI thread because then the user you know their their UI is no longer responsive so yeah freeze while you do an HTTP request that kind of thing exactly yeah yeah and on the server side uh it's the the most efficient way that you can use your resources in a in a system that has async calls i o calls is to not block those threads and so uh so definitely on the server side it also is important to be non-blocking on on iO and so um the in the world of kotlin you can use co-routines to do this and co-routines give you a uh I'm sure many developers now are familiar with uh async um await style syntax where you can uh you can basically declare that this thing is async and then in kotlin underneath the covers that gets unrolled into the right like callbacks and and non-blocking uh stuff that you need but the programming model on kotlin is is nice you just if you call something that is a suspend function then you can on the next line of code use the result from what you get back but underneath the covers it ends up being actually async so it looks imperative do this do this do this but then it gets unrolled unrolled underneath the covers into the proper async constructs there so and the nice thing about co-routines is that it's it's a language feature with a supporting library and so so you can anywhere that kotlin works you can use co-routine so kotlin coming out of the the Java jvm space certainly you can do this on on the jvm there are some Alternatives we can talk about on the jvm that are upcoming Loom um but uh but the nice thing is is that places where you maybe don't have that Loom style uh um or Loom capabilities like on Android or there's now many other places where you can run kotlin you can now run kotlin on iOS you can run it on the web you can build desktop applications with it you can build cli's with it so any of those places now you can use Co routine so you get one async construct that works on all the different platforms so we'll talk about multi-platform intermix that's another interesting oh yeah but yeah the co routines uh definitely a great great programming model for doing async stuff and um yeah it's I think now modern languages have I think generally embraced the that style of program I mean for doing async stuff in in some way or another and so um so yeah I I there's two different sides of Co routines that are interesting one is the like um request response style where you're you're calling an async function and get back the result but but it's async but then there's the stream oriented construct as well where it's called flow and co-routines and flow gives you the the streaming style syntax for uh for being able to operate on a on a something that's not just a single result but but more than one result uh until you get both the the stream and the the function style uh approach to async and it handles both in the same mechanism kind of transparently are you saying yep yeah exactly yeah you you do have a different API for the stream construct so in Co routines if you call a suspend function not something that produces a single result if you do want a stream then you use the flow and with flow there's an API where you can emit things into the flow or you can then read out of the the flow and so the like the the Kafka uh in the Kafka world you use a flow to interact with Kafka so you hook you get a flow interface when you're reading from Kafka or a flow interface when you're riding a Kafka and so that's how you then interact with the the stream oriented approaches is through the flow API yeah yeah it's uh it's that difference between like grabbing a single Row from a database and processing an ongoing stream of stuff uh yeah I often think that's quite nice distinction between um HTTP and websockets say yes yeah exactly and you won't Quest response or or a stream of of data yeah yeah and so the the um you can use also use a flow for a websocket and so that's um in websocket stuff that I've built definitely will use the interface and it's great because then you get one programming model for doing any stream oriented processing so um so yeah it's whether it's a websocket or Kafka or whatever you use the flow interface for that that's cool so yeah there's that's co-routines um definitely one of the the really important valuable features of kotlin is having that all kind of essentially built into the language so maybe we should talk just quickly since we've mentioned websockets HTTP and Kafka what's the library support like is it mostly go out to Java or is it like plenty of native support for things yeah so um there's as usual in the jvm ecosystem there's a lot of different options that you could go with and so on the HTTP side all of the major jvm HTTP libraries that are out there now have some kotlin support in some way and so spring is spring and spring boot is really the the primary one in the jvm space and so if you are in Spring and you want to do async stuff in kotlin you just use suspend functions and flows just like you normally would and those integrate directly into how spring then handles the the reactive i o underneath the covers and so for example if you want to do a websocket you can just do a flow in Spring and and that'll feed the data back Colin does have a like a kotlin native a native is the wrong word but a kotlin idiomatic HTTP Library called kator and similar to Spring you can use kotlin flows and suspend functions and then all the other jvm major jvm Frameworks have kotlin support as well and cartoon support so um so in some in the traditional jvm libraries the kotlin apis are just wrapping the the Java apis so there's some translation to what's happening with the covers in in Java but then in ktor you can plug in different engines Neti or they have their own native HTTP Library called CIO and so you can exchange you can interchange the actual engine underneath the covers but but your programming model with using co-routines and flows is all the same no matter what the actual underlining engine is okay yeah so lots of different options for Ohio okay um and then in the world of Kafka um there I believe that there's now a Kafka uh Native implementation of the Kafka protocol in in Colin I think that it does not this particular one I'm thinking of does not actually wrap the the Java API of Kafka I think they they re-implemented it I might be wrong on that but but from my standpoint when I'm doing Colin with Kafka I don't have to know or think about the actual underlying protocol handling of that I just you know write my calling code just as I normally would with cartoons and all just work so yeah it's I have to ask myself is is there like a Kafka streams wrapper that works well I haven't seen that it definitely could exist but yeah I haven't haven't seen that okay that does lead into my next question my next two questions you can tackle these in any order you like because you've hinted at both of them ffi and multi-platform because uh kotlin started out as a jvm alternative to Java right yeah so what's the ffi like and we're not just targeting Java anymore right yeah yeah take me through this yeah oh this is great yeah so uh in the world of of kotlin you can Target multiple platforms as we mentioned and jvm was the initial one and so the the interface between kotlin and Java is bi-directional works great so you can you can interoperate with Java could uh seamlessly in both directions and that's been an important Focus for for Colin is to allow that there's a lot of mixed Java and kotlin code bases in Android and on servers and so having that interoperability is has been has been essential uh and all works great um outside of the jvm the the approach has has been similar in that that kotlin has made sure that the integration with the the native platform works really well and so that's the the ffi piece and so it's different how it actually works is different for for each platform but the the goal is to be able to have great interoperability no matter what platform you're on so if you're doing kotlin for iOS then that actually compiles down into objective-c byte code and so you're you're running in process in your IOS app you're not running in a sub process so there are other multi-platform technologies that that just uh essentially like VM your your your app and so you're running in a sub process and then ffi gets more challenging and because then you have to bridge some way between that kind of sub process to to the main process and it's not a native integration and so yeah that's sticky yeah there's you know Performance challenges to that and then there's just like a lot of times you are in a mix code base so on in the world of iOS you likely do want to take advantage of a lot of native iOS functionality and then the world of kotlin on iOS it's it's because it's just objective-c byte code that interop is direct and so there's there's definitely challenges to how that gets implemented because on the kotlin side you have to have a garbage collector and be able to like manage references you know across the those boundaries and still handle garbage collection correctly and so the kotlin native team is the one that that has has done all this work you know they've they've made sure that that garbage collector works well on iOS and on other platforms uh they um have been working on Colin wasm this is another interesting multi-platform Target and uh and the wasm webassembly uh folks uh just recently added support for wasm GC and I think this is still experimental you have to like from what I remember in the latest version of Chrome and other browsers you still have to enable the wasmgc support but wasmgc allows uh good plugability and support for the kotlin garbage collection to happen inside of wasm so um so yeah but again the native interop no matter what platform you're Target getting has been a core focus of of kotlin and Colin multi-platform is the the name for all all the stuff that is kotlin beyond the jvm um and so yeah uh lots of lots of interesting pieces too how kotlin targets other platforms yeah and a lot of work under the hood to get it all working yeah yeah what's it like from the from a developer's point of view if I know how to do kotlin ffi to Java well I roughly know the right Syntax for for to Objective C so so it does there it is a little bit trickier in that case because you do need to have some way so let's say you want to call uh some native code within Objective C from your kotlin code uh you do have to like generate the the stubs essentially so that Colin then knows about the types that exist on on the the raw Objective C side and so there's tooling that helps you manage that but um but yeah and then a lot of the a lot of the like the core libraries have have our are part of cotton multi-platform so uh so in the case of kotlin JS they've taken the the JavaScript apis and made them available automatically to you uh so that when you're in the kotlin side you you don't have to necessarily write that bridging kind of interop code it's all just provided in the standard library now if you're doing something custom then you may have to to generate the stubs do your do that native bindings manually but um but there's the tooling that exists to help you and help you do that I think the same thing with like C interop so there's C interop and so you can interrupt your native C application okay similar that that you need to you need to have the kotlin class that you're calling into and and so that then when so then your your kotlin code compiles and then gets linked together with your with your native code uh in the right way um but yeah all that exists and is um not too challenging you know there's a lot of other uh multi-platform systems that I think are much more challenging for how you do that native interop but in kotlin it's it's pretty pretty straightforward there's a lot of people doing it and with kind of different different platforms and is it like you know when you're um if you're writing typescript and you want to use the JavaScript language library that doesn't have type annotations you've got to kind of come up with your own annotation for the function signatures is it a bit like yeah it's a bit like that yeah exactly you you have to tell kotlin about what you're calling into essentially but the nice thing is is that because all the codes being compiled down to the native platform that interop isn't through a a you're not having to come up with a socket way to do it or weird ffi system to do it all just gets linked together into the native executable and so so that approach allows for great interoperability but anytime you do interoperability across languages you're going to have to do you know some work to make that Machinery all all happen so that things can be compiled and linked correctly I think everyone's expecting some work and the question is how much work are they actually going to come into and how how reliable it will be once you've done that work right yeah yes I think it's I think it's going well there we've seen a lot of a lot of use of kotlin on iOS kotlin on other platforms it's been a little bit of use for kotlin for like native applications and that's like the Sienna piece where you want to write a CLI or something that that actually is you know running natively on Linux Mac Windows whatever and so there are people doing that not as much as on the iOS side there is kotlin.js which a number of people are using to do web applications with interop to the JS side and then kotlin wasm coming up as being yet another Target where you would want to probably do some type of interop the wasm interop story I think is being defined right now through a something called the wasm component model and so they are the wasm Committees are working on the way to do interop between wasms and different languages so be interesting to see how that particular one plays out but suddenly getting uh nightmares of different committees trying to talk to other committees while they're committeeing their own agenda yeah from from the outside it seems like the wasm community is evolving very rapidly and working together well which is is kind of surprising for that there's a lot of different folks kind of involved involved in in wasm and and yeah from the outside it seems like that's all going well and and specifications are are evolving quickly and and with with good coordination across different people who have interest in wasm and so so yeah it's yeah this is rare and pleasing to hear yeah maybe if I was in the depths of all that maybe there would be a different story I don't know committee on the podcast yeah definitely yeah okay anyway uh interrupt right so I'm gonna go for a concrete example if I I can imagine then I might write some kotlin code that did a web server that was also feeding to an Android app an IOS app and a JavaScript client yeah I decide I want to write all four of those in kotlin with some degree of code sharing yes you know they'll probably be models data models among the shared among all of that some UI components shared among the three front end stuff like that yep yeah how painful is managing that which code can work where so great question yeah so what Colin had to do around this was they had to create a programming model that allows you to to take kotlin code and be able to Target different platforms so there's there's kotlin code that is 100 uh able to to just the same piece of kotlin code run everywhere and that's what we would call kotlin common so that's kotlin code that has no dependencies on any particular platform and so it's 100 portable to anywhere that called a multi-platform can work uh and so there's a lot of uh energy and and things happening in the kotlin ecosystem to do more kotlin common anything that can be caught in common make it caught in common because then it's totally portable across all the platforms but then there's places where when you're running in the browser uh you want to do something different than when you're running on iOS and when you're running on Android running on the server you want to have different functionality across those different platforms and so the kotlin team uh created this system called expect actuals and expect actuals are the programming model that you use where you say in your common code instead of providing the actual implementation for the different platforms you say I expect that each platform will have an implementation of this piece of functionality and so you you do the expect on the common side and then on for each platform you do the actual side and so the actual side is where you then provide the system the the platform specific pieces to that piece of functionality so in one example you um you have uh in the browser you want to use a JavaScript API to like modify the Dom but then on the Android and iOS side you don't want to modify the Dom because you don't have a Dom you instead want to like you know talk to a UI toolkit which uh skia is the UI toolkit that is being used as that cross-platform UI toolkit ski is a open source rendering toolkit that actually Android uses to render on Android but we're able to take skia and use it on iOS and even use it in the browser with canvas and so then you get a consistent API for how you do rendering underneath the covers and so in that case you um maybe you'd say all right if I'm running on something that's ski abacked then I can just have that piece of code be the actual for the platforms that have skia but then if I'm on render into the Dom then I'm going to do something different in that path and so you'd have a different actual for for the Dom implementation okay okay yeah I can see how that would work um yeah yeah so from from the developer standpoint I'm still writing kotlin code for all these pieces unless there's some thing that doesn't exist in a standard library in a third-party Library that's already done the the interop ffi you know piece for me uh and so in all the multi-platform kotlin code that I've written I haven't had to deal with the the interop directly because there's something that already exists for me some piece of column code that are is already doing that for me and so I'm just I'm writing my actuals in kotlin I do have to write them for each platform when there are differences but I'm still just writing the code there it just is doing calling a different API depending on the on the platform that I'm targeting yeah I would have thought the challenging part of that is getting the abstraction boundary right because like yeah button is a button is a button but there are like a table widget has very different properties across the different platforms right yeah yeah so there definitely is always the the trade-off often multi-platform programming is do you try to come up with the common denominator across all the platforms or do you really try to use what is native on the platform and so so Dom versus skia is a good example where the capabilities are not the same across the platforms and then you do have to decide do I want to try to come up with some layer that that creates that common abstraction or do I actually just do the actuals on the platform and and decide all right on this platform I'm going to do this and on this platform I'm going to do this other thing and so it's the nice thing is that the facilities are there to go with whatever approach makes sense for you and you don't necessarily have to get locked into using a lowest common denominator across all the platforms you don't have to do that if you don't want to but you you can do that if if you choose to so jet brands has taken the um the compose Library which is the UI library for Android and they've made did compose work on iOS and on the browser and so you can just write one single compose UI and then Target Android iOS desktop and web all with the same exact UI code and so that that you know if that's what you want if that's the the UI that works for you across all those platforms then great you can use that if you did instead want to have let's say just your business logic shared across the platforms but then have native uis then you could do that as well using the interoperability the native interoperability okay because I could see myself wanting to go for lowest common denominator just to launch and then refine it to platform specific for version two so I could do that for sure yeah yeah exactly so you can be anywhere on that spectrum and you can move freely across that Spectrum so if you decide all right this particular view in my app I want to be native then you can just change that one View and not change everything so yeah and then on iOS specifically you can kind of even uh embed in both directions so let's say that you're in a a compose UI and you want to embed a native iOS widget you can do that but then you can also embed pieces of the UI being composed backed uh as well so so yeah lots of different kind of with levels of of doing the the Integrations okay this is reminding me of an old promise of java that would be right once run everywhere and that never really worked out right yeah do you think kotlin has a shot of achieving that promise for people that want right once one anywhere they they can achieve that with compose multi-platform but then there are cases where that doesn't make sense and you do want to be native and you can do that as well so I think you know the the flexibility of of right once run anywhere or right some of it or up once and run anywhere and write and then have then the native implementations for specific things you can do that as well so so I think that's really one of the the compelling things about color multi-platform is that you don't have to buy into everything being one way you can choose where you want and you can adjust as you evolve along that Spectrum in either direction okay okay that does sound nice it sounds like they might have actually got it working yeah you know I'm I certainly I'm I'm uh I'm a uh I think that this is the first time where I've seen a cross-platform technology that doesn't come with the typical cross-platform um trade-offs that often have to be made so yeah so yeah I think it's it it is um a good evolution in the space that that I don't know if I've really seen anyone else provide that ability to to choose where you want to be on that spectrum and move freely that's pretty cool it's pretty cool okay that let me let me segue into a different kind of choice between two worlds because I know that um one of the things about kotlin is it's steep it's using some ideas from object orientation and some from functional programming yeah I I find that very interesting but I'm not sure how well anyone's got the two sets of ideas to sit together in an adhesive hole yeah so which pits has got them picked and how well has it Blended them yeah it's it's just generally with languages we've seen most oh languages start to bring in functional constructs in in some way or another and that's been a really great language Evolution across many different languages so kotlin is is one of those that has has kind of uh pulled in functional constructs in a variety of ways it's not it's not Haskell right like I think you're you're kind of high school yeah yeah I know you love Haskell and I knew I was so glad to have you on my podcast talking about high school and learned a lot on that one um scholar was has been my primary experience with this like hybrid oh functional approach and uh and I I think that kotlin has done a pretty good job of integrating functional Concepts in but it definitely doesn't go as far as as Scala or or Haskell is gone uh in that respect and so um so you know some of the functional constructs and and uh that are important to me in kotlin one is immutability is I wouldn't say a 100 percent default but is much more default than in the world of java and so there is a strong bet in the world of kotlin towards creating immutable values versus versus mutable ones and so to me I'm like yes like I don't ever want to write immutable anything if I don't have to or immutable anything if I don't have to yeah so being able to easily be immutable and have the language and the library ecosystem really support that Paradigm has has been has been good and then just like functions as being a a first class thing obviously that's that's an important piece that if I Define a function I should be able to kind of pass the reference to that around and and do Funk doors and all that kind of stuff easily um definitely well supported uh in the world of kotlin um so yeah I think yeah they're they're coming from Scala there are things that I miss um in the functional world so I'm type classes scholar threes type classes are really good and uh and and definitely a awesome programming model and so so I've I've I when I'm in the world of kotlin I miss things like type classes um trying to think of other functional constructs that that I um Miss like uh Colin doesn't have um uh higher what's uh not hurt yeah does not have higher kind of types yeah yeah so it does not have higher kind of types and so so that's something that that when people get into kotlin they uh from scholar high school they're like I miss my hair kind of types and um and so yeah if any listeners don't know what higher kind of types are there will link to the podcast I recorded on your show the happy path programming where we talk about it extensively yes yep yeah yeah so hair kind of types are something that that um higher kind of types are are kind of beyond my realm of of brain capacity generally I think that I benefit from them uh with with good flat maps and and all that um but uh in in the world of Scala um but uh I know that the in the world of kotlin those smarter people definitely complain about the lack of those and if we step one down I am assuming kotlin has generics like Java right yes yeah yeah generics and and inheritance as well so coming from the world of java you kind of have to support support inheritance and so yeah it does support inheritance and um and then there's some support for adts so you can do uh something like a some type with this kind of simulated in the old ways that we did it and in Scala with a sealed sealed trait or sealed sealed class and that allows you to do your exhaustive pattern matching on some type and that sort of thing so um but scholar 3's 82 support is is pretty pretty awesome and and kotlin doesn't go that far in terms of their ADT support it sounds like you're vying to come back on the podcast to talk about scholar three at the same time sure yeah yeah we'll get you back in six months and we'll be we'll cover it perfect that sounds great okay yeah and then like the the thing in the scholar the Scala ecosystem that I've really enjoyed lately is effect systems and and using scholarzio for effects and Colin doesn't quite have a way to do effects system or kotlin doesn't quite have a way to do effect systems as well as has been done in in Scala yet there's a new language feature that is experimental called context receivers and the there's a functional program in library in kotlin called arrow and the arrow folks have been experimenting with doing something kind of similar to an effect system on top of the context receivers the language feature in kotlin so so it's some interesting evolution in there but if you want to do functional programming in kotlin Aero is definitely your your go-to for for how you do that so for those that don't know Define an effect system oh yeah um so an effect system uh for for me is a way to uh to to separate out the pure functions the things that that um have no side effects so not talking to the outside world whether that's the network or even um non-obvious things like getting the system clock or getting a random number from the system those are those are side effects there's some external call it's not a pure function um the I think you can correct me if I'm wrong here but kind of the definition for me of a pure function is if I call the function more than once will it always produce the the same result is there a direct mapping between inputs and outputs and so with effects we recognize that hey it sure would be nice if we could kind of delineate uh the the pieces of our code that are pure from the pieces that have side effects and so the effects system gives you a programming model to do that delineation but then one of the challenges is that you when you're in the world of effects you're no longer working with a pure function you have some other construct that is that is modeling the the that uh that side effect that's happening and so all of the great things that we have in functional programming around function composition you then need to figure out okay how do I compose things that aren't pure functions but are effects and so uh and so there's some challenges to to dealing with with composition of effects and this is where Scala Zio has done such a great job of being able to um to model the effect parts of an application and make them composable and so the the programming model in Zeo it allows you to do some pretty amazing things like you if you've defined an effect but then let's say you want to repeat it or you want to retry it if it fails or you want to be able to race two effects you just get this really nice API for doing those sorts of effect compositions that are that are not um functions because you're you're no longer in the in the realm of pure functions and so um so yeah this is I've I've been loving effect oriented programming and programming in that style in in Scala and then testability so one of the things that you get when you model your effects is that then when you do your tests you can swap out the side effects for something that is no longer a side effect so that you can more effectively unit test all of your side effecting code without actually doing the normal side effects so moving from your integration test that would be talking to the live random number generator which can be problematic in a test well it turns out you can just like in your test throw in an implementation of the side effecting piece and then it makes it much more testable um so yeah that's a fun little tangent on yeah yeah it's a it's a bit like programming everything to an interface and then swapping out the real system for the mock but just nicer when it works it's so much nicer yeah yeah yeah um one more thing on the whole uh because we talked a lot about uis and we've talked a bit about functional versus object orientation what and we've also talked about um Android which must have a lot of this what's kotlin's opinion on the right way to do user interfaces yeah so compose is the primary UI for building uh in uis for Android with kotlin it's a kotlin only Library so it's taken advantage of a bunch of kotlin features to be able to create a really nice program model it feels declarative but it's just using that DSL syntax and in kotlin to be able to to give you something that looks declarative but really is just just calling underneath the covers and then compose has a bunch of components and you can uh you know move use those Munch those components together into what are called composables and build a whole UI based on your composables and so that is the the modern way to build uis and Android and Jet Brands took that compose library and made it work on other platforms and so um so yeah it's it's a it's a new programming model um yeah is there anything else on uncompose that's interesting um to compose is is I I think that the program model for me is is nice like it's a whole lot better than writing callbacks and you know the kind of older style of building a UI um but it's it's not actually very like functional like like there I don't know if you've done Elm but I love Helm's approach to UI program because it is functional and so there is for me there's some some things that when I'm in compost I'm like oh I wish this was just a pure function you know yeah but and it's not it's you know it's uh composers managing the state underneath the covers and doing all sorts of clever things to make uh state state dealing with State efficient uh to be able to get high performance uis and all that but um but it's it's a it's a different model of program in uis than than you would do in the functional world with something like a home is there is there like a comparable architecture if it's not like album is it like react is it like using jQuery is it like swing I think that probably react would be the most similar that I that I've experienced but I haven't done a whole lot of actual web programming with with many of the the modern web stuff uh like reactor whatever so I don't know how similar it is to react but but it I I think the main point is it feels declarative you um you have nice language support for doing callbacks like when somebody clicks on a button you need to um do something to uh to that and then you can update State and compose manages oh the state changed in this particular piece of UI is bound to that state we need to obviously redraw that piece of the UI so compose does all that underneath the covers for you with that kind of connection between State mutable State and and your uh and the the UI that is bound to that state um so yeah that's that's part of the compose runtime and compose compiler can work together to to make that all work kind of transparently and efficiently is is I think one of the important points is like you can do this you can do this in a naive approach and I think have a lot of performance issues but doing it in a way that works well for for you know non-laggy uis is a bit harder and that's what the the compose effects have done and I guess they're thinking about much lower power Hardware right because they're working on mobile phones all the time yep yeah yeah definitely with with Android you got to be thinking about um the the lower power devices that that need to not use so many resources okay so let's talk a little bit about the future then having got a survey of the language you said you've been at kotlin come if you've been at Google I Google I O is happening as we're recording this I think yeah yeah you're making some announcements what's on there what's on the um future list yeah so exciting stuff is the new compiler is is a big exciting piece because um as kotlin code bases have gotten larger uh that has put more pressure on the compiler to to be fast and so the new compiler the the early benchmarks that we've seen on on compiling kotlin are that it's uh around can be around two times faster than the old compiler and so that definitely has an impact on on large code bases and uh and then things like um when you're in the IDE editing code you want to get code completion quickly and as the code base grows that code completion can get slower and so just providing a better more efficient way to be able to provide that code intelligence back to the IDE is important and so this is this has been a big multi-year project of rewriting the compiler and at Collin comp they announced that the new compiler will be the default in column 2.0 which um I don't know the exact I don't know if they said the exact time frame for that yet but hopefully sometime in the next year or so we'll be getting kotlin 2.0 with a new compiler so so that's that's great that's going to lead to a kind of just a better foundation for moving forward and much better performance so um so the the code name for that compiler was K2 uh and and uh the new compiler in kotlin 2.0 so um so yeah that's that's one of the big exciting things um other exciting stuff was there was a bunch of announcements at Collin comp around column multi-platform so the Colin wasm piece I think that's currently experimental uh composed for iOS uh also also experimental I think uh so yeah so there's a bunch of exciting things happening on kotlin multi-platform announcements at Colin conf um I uh was working on a project that we announced at kotlin conf which is moving the default Gradle build configuration for the the ecosystem around Gradle from groovy to kotlin and so that was uh good things like why not have Gradle supports kotlin as the build DSL and uh and so aligning around Colin across Jeff brains Gradle and uh Google um to to make kotlin the default was announcement we made at Collin comp so that was all good I'd certainly like writing my builds in kotlin so that's been been nice um so it sounds like the main thing that's happened is organizing for um for a larger future yeah yeah exactly yeah yeah just in in many different directions whether it's multi-platform or compilers or um you know using kotlin and more more places like in the build um just just kind of yeah setting up setting things for a better future but but also like it's impacting developers you know already today like the developers that are using kotlin are they they're generally happy which is kind of weird like normally in the language communities that I've been a part of like like people are grumpy and complaining about you know all sorts of things in the language and and I think the developers that are using kotlin are really happy with it they always say that they're having fun which is um you know good thing to hear for for a language yeah absolutely it's funny how every language takes on a character partly by the language and partly by the designers and partly by the community yep yeah yeah and I think with content developers we they seem happy they seem like they're having fun that's that's a good thing good good that's what we're here for getting stuff done and enjoying it along the way I hope so yeah I mean I'm definitely um been been part of language communities that that just feels like a lot of thrashing and uh you know a lot of like pounding my head against the wall in various ways and and yeah I don't I don't um I don't feel that much in the kotlin community so that's that's been good that's really good that that actually leads me to one last question I have to ask you uh one last challenging question I think bashing your head against the wall the Hot Topic right now is getting um artificial intelligence to support us as programmers yes will we be getting um AI to help us write kotlin and you're at Google so you should have great answers to that you know this is well timed because just yesterday in uh the Google I O developer keynote um there was a lot of AI stuff and one of the pieces of that was uh in they have something called Android Studio bot which is now integrated into the preview releases of Android studio and it allows you to have a chat like experience to help you write your code or explain your code and so you can highlight a piece of kotlin code and say Studio bot explain this to me and it'll explain it you can go into Studio bot and say uh Studio bot write uh something that will render an image for me with compose and boom like there's your code snippet and you can pull it right into your code base and um so yeah that was um that was actually the first time that I'd seen Studio bot was yesterday watching the video and I was like this is really cool like integrated right into your developer tooling having that AI kind of experience helping you be a more efficient developer so yeah super exciting to see what's happened there I need to go play with it because I just saw history I'm like okay now I gotta go actually try this stuff this happened to me in a similar role the company announces something you've got I gotta play with this so I know what I'm talking about yeah yeah so at this point all I've seen is the demo it looked really amazing now I need to actually get my hands on it okay you can test if it's actually as good as the demo where yeah exactly yeah it was a live demo which I was like hey you know like like I I'm a huge fan of live demos I'm like if it works in a live demo there's a better chance that it's going to work for me while I'm sitting in front of my computer whereas I'm always a little leery of like the the pre-canned you know pre-recorded demos I'm like okay that to me is like a red flag that the path is not going to be as smooth for me as the user yeah if you do a live demo it proves you're prepared to put something on the line so final question then um if someone wants to get started with kotlin are you recommending they start with Android Studio or what what's my what's my onboarding path yeah so I think it depends on which platform you want to start building for if you want to start building for Android then Android Studio is going to be the right path there uh if you want to start with other platforms then you can just get IntelliJ the Community Edition is free and start writing column code they've got some Wizards to to build out new new projects and all that and then for kotlin multi-platform uh you can also start you know IntelliJ and start creating multi-platform projects and and targeting other other operating systems um and then the Colin Ling website has all sorts of great getting started learning material and all that for people that want to dive in but yeah lots lots of resources out there depending on you know what people want to do but but maybe to your point uh it depends on which platform you're interested in targeting for kind of what your entry point is into it and some some different options there okay that's that's a new one actually where it where you're compiling to makes a difference as to how you get started that is yeah that is interesting so if you're a server-side developer uh and spring is a great choice to start with with kotlin and so go to start.spring.io you can click kotlin as the language and boom you're like get your starter project and can start writing kotlin code for spring so yeah kind of a few different entry points depending on what what you want to build um but yeah lots of lots of great resources out there for developers to learn okay cool I'm gonna append kotlin to my list of things to learn yeah let me know how it goes yeah I will to make sure that that getting started experience is great for you Chris because if it's great for you then work on emac support dude yeah no I shouldn't have said that I take that back there are bigger issues than that is a choice I know yeah it's it you know it is wild in this the space that we have a lot of different options for how we write our code and and um and you know I think it is important that we support everyone and their choices around that so yeah hopefully that space continues to evolve One Challenge at a time yeah exactly James pleasure talking to you as always I hope I see you again thanks for joining us so yeah thanks for having me thank you James as you just heard James is the co-host of his own podcast called happy path programming so if you're interested in a bit of a role reversal there's an episode on there where I go and tell him all about my love of Haskell I'll link to it in the show notes so if you really want you can get two languages for the price of one this week value that's value a if you'd like to give a smidgen of that value back please take a moment to like And subscribe I know everyone asks but I'm also asking because it genuinely does help or just drop me a comment I'm doing this because I'm a developer who loves talking to developers so come and say hi there should be a comment Box nearby or if not my links are in the show notes you can get in touch with me and with that I think we've written one and it's time for me to run elsewhere I've been your host Chris Jenkins this has been developer voices with James Ward thanks for listening all right