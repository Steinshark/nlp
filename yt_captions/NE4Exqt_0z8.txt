all right let's do this faster compilation with the parallel front end in nightly okay so apparently maybe less parallel we were less parallel at one point with rust I don't know it looked very unparallel you know when you used to build it it would just like literally say the numbers and go one by one through it kind of looks like they did a topological sort and then never actually did a topological sort with groups if you don't know what a topological sword is you know next Friday or next Thursday free on Twitch I want to be doing an 8 Hour course that touches on topological sort uh anyways you should know this by now okay uh the rust compiler's front end can use parallel execution to significantly reduce compile times uh to try it run nightly compiler with the dasz threads 8 option this feature is currently experimental and we aim to ship it in stable compiler in 2024 keep reading to learn why par you got to learn why don't tell them don't tell them to skip rust okay don't tell them to skip this okay make them learn make them know show them expose them all right compile times and Par parallelism rust compile times are a perennial concern really the compiler performance working group has continually improved compiler performance for several years for example in the first 10 months of 2023 there were mean reductions in compile time by of 13% in Peak memory use of 15% and in binary size of 7% as measured by our performance Suite okay that's I mean assuming that their performance Suite is telling the truth you know I think would I mean I don't know how they measure but to me what seems to be a significantly better measurement is that they own crates.io they know a bunch about compiling they should have just literally used crates IO we reduced our machine overhead by 15 machines at any one time or 21 machines out of 400 or whatever it is right like if they just did did that you would know exactly how much are you actually improving cuz I always have a worry about performance Suites right performance Suites because they're not real sometimes I just want to see the real deal just say how you affected crates.io and then we can all move on right it would make perfect sense however at this points the compiler has been heavily optimized and new improvements are hard to find there is no lwh hanging fruit remaining but there is one piece of large let's see but there is one piece of large but High hang fruit parallelism rust compiler or the current rust compiler user benefits from two kinds of parallelism the newly paralleled front end adds a Third Kind okay okay I'm getting excited I'm getting excited we're getting ready uh existing interprocess parallelism um when you compile rust program cargo launches multiple Rusty processes yes I've seen this CU my all my all my course go bye-by compiling multiple crates in parallel this works well try compiling a large rust program with J1 flag to disable paralyzation it will take a lot longer than normal so it'll take from it'll take from 5 minutes to 20 minutes got them all right you can visualize the parallelism uh if you build Russ cargo's timing Flags which produce a chart showing how the crates are compiled the following images show the timeline when building a rip grip on a machine with 28 virtual cores okay okay okay let's see we got a bunch of stuff going on right here fantastic and then we hit this really long definitely not in parallel anymore oh this must be a a bunch of like all the dependencies how did sde get way down here how did sde Json get way down here how did sday and sday Jason get down here it seems like sday should have been up here obviously duh uh there are 60 horizontal lines each one representing a distinct process uh their duration range from a fraction of a second to multiple seconds most of them are rust see and a let's see and the few orange ones are build scripts the first 20 processes all start at the same time the this is possible because there are no dependencies uh between the relevant crates but further down the graph parallel paral parallelism reduces as crate dependencies increase although the compiler can overlap compilation of dependent crates somewhat thanks to a feature called pipeline compilation oh cool there is much less parallel execution happening toward the end of compilation and this is typical for large rust programs interprocess parallelism is not enough to take full advantage of many cores for more speed we need more parallelism within more processes hell yeah hell yeah I hope you guys are getting excited I'm getting excited for whatever whatever this is let's do this okay so they do obviously do a topological sort and execute things as parallel as possible so that I mean that should not be surprising all right existing interprocess parallelism the back end uh the compiler is split into two ABS the front end and the back and the front end does many things including parsing type checking and borrow checking until uh this week it could not be parallel execution okay interesting because I know borrow checking is like a huge uh is definitely slow I know linking and borrow checking are like the two big slowdowns so if you could do like a parallel typeing across your project could you potentially find problems before you have to do all the slower Parts I don't know it's kind of an interesting concept what you can do in parallel right type checking all these things parsing why can't you just parse all the things in parallel I don't know I don't know the answers to these I have no idea how the compiler set up the backend performs code generation the it generates code in chunks called code gen units and the llvm processes these units in parallel this is a form of coar grain parallelism okay okay we can visualize the difference between serial front end and parallel back end following the images shown uh shows the output of the profiler called samply measures rust c as it does a release build of the final crate in cargo the image is superimposed with markers that indicate front end and back end okay front end back end okay I feel like we can see some problems here all right this does look this does I mean like that doesn't look good can we all agree that's not a w can we get Fs in the chat maybe like an F two FS three FS five FS how many FS can we get in the chat have I five FS okay we got enough FS we got enough FS to move on forget you guys no you shut up okay don't you come in here dropping FS all right each horizontal line represents a thread the main thread is labeled Russy and is shown at the bottom it is busy for most of the educu the other 16 threads are llvm threads called GP uh cgu Z through cgu 15 There are 16 threads because 16 is the default number of Coen units for a release build classic 16 for 16 you know what I mean there are several things worth noting front end takes 10.2 seconds back end takes 6. 2 seconds the llvm threads are running for 5.9 seconds of that the parallel code generation is highly effective imagine all those llvm executed one after another I can imagine I can see it I can feel it it's kind of like the front end uh even though there are 16 lvm uh threads at no point are all 16 executing at the same time despite this being run on a machine with 28 cores the peak is 14 or 15 this is because the main thread translates its internal code representation mirr to llvm's code representation llvm IR uh in serial this takes a brief period for each Coen unit and explains the staircase shape on the left hand side okay okay the front end is entirely serial yeah yeah okay so it looks like we got a lot of W's going on here looks like we got a lot of potential for some dubs going on here this reminds me back in the day when rulia conquered the Philistines and negotiated trade contracts at the same time thank you history buff I mean I I understand we have we have some history Buffs going on here um you know contract trade negotiation always very difficult you know people have been stuck on that I mean we're still stuck on that so congratulations that guy all right hold on just one second I go to I I want to pull up twitch chat so I can actually read it instead of reading it off my own feed right now I'm literally reading it off my own feed and that's really annoying I'd rather read it in a dedicated window all right let's pop this bad boy out let's pop it out I'm somewhat of a buffery of History myself yeah uh off your own feet yeah yeah all right here we go uh new inprocess parallelism the front end the front end is now capable of parallel execution it uses rayon to perform compilation tasks using fine grained parallelism okay okay many data structures are synchronized by mutus and read write locks Atomic types are used where appropriate and many front end operations are made parallel in addition of parallelism was done by modifying a relatively small number of key points in the code the vast majority of the front end code did not need to be changed okay this better be amazing what we're seeing there we go that looks good this looks much much better I like what I'm seeing right here this is cool I like that whatever this samply is I never have seen samply but it has this nice little uh it it has this nice little um what's it called like how much actually is being used kind of cool it's kind of weird that they all dip at the same time you know just interesting more than anything else so this does obviously reduce compilation by a huge percentage awesome when parallel front end is enabled and configured to use eight threads we get the following samply profile when compiling uh the same example before okay faster front end execution takes 5.9 seconds down from 10.2 backend takes 5.3 down from n uh 6. two nice and lvm threads are running uh 4.9 seconds of that down from 5.9 nice the additional uh seven let's see the seven additional threads labeled Rusty operate in the front end they reduce front end times uh time shows that they are reasonably effective but the thread utilization is patchy within the eight threads all having uh periods of inactivity there's room for significant Improvement I like hearing this okay this is actually pretty cool so here we'll skip that so how to use it uh we do this little bad boy okay okay so let's get nightly let's actually just try this out um let's just try this out uh I like this idea all right so I'm going to go like this cargo clean right there we go rmrf let's just make sure okay Target's gone fantastic so let's do ourselves a little bit of uh rust uh rust up a tool chain install nightly let's make sure we're on the the tippity top all right what version do we need does it say what version we need it says it's in nightly but like what what does that mean is there like a seven 1.7 something how do I know I have the right things oh well whatever we'll we'll see we should be able to see do uh do already work on resolved issue about memory leak there are some cool tools for memory leaks and all that um valren is uh pretty great uh you also if you're if you're if you're doing just like JavaScript and you're looking for memory leaks uh you got yourself a little bit more of a goofy way you have to approach it which means that you're going to need to use like Chrome Dev tools and do Heap uh snapshots I've accepted inevitably uh and the inevitable and swapped to Neo good job all right there we go so now we're on the latest of the latest nightly 175 hopefully that is that is where we need to be uh and so what we're going to do is I'm going to go like this cargo build uh whoopsies uh release oh crap uh cargo clean uh time cargo build release let's just do a very simple test ourselves very simple obviously this is not real again crates IO with thousands and thousands of buildings all the time would be fantastic all right there we go pretty great we're looking pretty good I think we're pretty happy about that little number right there so I'm just going to copy it uh I'm going to do a cargo uh clean oopsies uh cargo clean apparently I cannot type today cargo clean and then let's do the let's do this thing right down here let's go down here and let's execute this bad boy I just want to see it I want to I want to feel it you know what I mean I want to feel that all right so what are we looking at 154 seconds uh of time overall but actually 18.37% okay we had 18.37% I I I don't think I must not have this version because that that should have obviously worked right that should have obviously worked here we'll just go to 16 you know when in doubt just add more threads that's what I always say that's what I always say well that's awkward yeah I know it is a little bit awkward blazingly fast is there a way to clean all of cargo's data is there a way to yeah okay that somehow that did not help me uh is there a cargo reset yeah that's not a real thing rmrf rout okay I could try that I could try that more threads equal slower Yeah we actually got we actually well I don't know if that's actually true the problem about doing anything on your own system is like dude I have like twitch running I have YouTube videos up we have like a lot of stuff going on can can't you just delete cargo does cargo uh which cargo see the problem is if I delete cargo I delete more than than just cargo uh F let's see find uh cargo max depth 2 what do we got in here we got a bunch of Bin director so we definitely don't want to do that we have registry packages what do we use here to delete all these things cargo cash remove dur all okay cargo cash I don't think I have cargo cash do I oh remove uh remove dur all that's a lot of gigawatts I just got a lot of memory back okay there we go so now let's try this again we'll go back down to eight let's see how we do I did have to download just then see that was kind of unfair I had to do some downloading see the problem is is we had this little download phase see it's not it's not even fair it still looks low okay I don't think we're getting anything out of this okay we're not getting anything out of this we're not getting any obviously I must be missing something um okay what lives are seven no the compiled compiled rust is huge okay compiled rust is giant my nightly isn't new enough yeah oh uh are you on the right version let's find out cargo version I'm on the latest nightly as of like I guess two days ago I'm on two days ago so I don't know if this Is It Anyways okay well we'll drop the whole trying it out thing all right all right hey couldn't get that to work apparently whatever I was doing did not seem to actually make it work uh so the name is I am excited about rust compiling faster because I do think that'd be a huge win but still the linking is very very slow I'd love to see some improvements in that whole area uh Jen