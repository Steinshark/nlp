Hello and welcome! I'm James Murphy, and 
in this video I'm going to show you how   I used python and the YouTube data API to 
update all of my video descriptions. Well...   enough of my viewers have asked about how 
to donate to my video production efforts,   and so I finally made a Patreon. So basically 
I want to go through and add my Patreon link to   all of my video descriptions. Okay the task 
is pretty straightforward I just need to go   through each of my videos and add the Patreon 
link. But then I thought, why spend 15 or so   minutes updating everything manually when I could 
spend 5 hours automating it? [elevator music] Alright let's automate it. YouTube does have 
an API, so this at least stands a chance.   After poking around for a while, I found these 
instructions on how to actually get started.   There were quite a few hoops to jump through to 
get everything set up, but it was all free. I made   a google cloud developer account, a new project 
for that account, and enabled the YouTube API for   that project. Unsurprisingly, Google is extremely 
serious about protecting their API and their user   data. Since I'm going to be updating my YouTube 
video descriptions, I'm going to need access to   my own private user data. That means I'm going to 
need to use this OAuth 2.0 authentication method.   I created my client secrets file from the 
cloud developer console and downloaded it.   Next, I found the Python client library and 
looked at the examples for it on GitHub.   It's written in Python 2.6, so we'll 
have to update it a little bit.   It's surprisingly simple to install, just 
install the Python client and the authentication   libraries. I used this example my_uploads.py to 
figure out how to do all the authentication stuff.   Of course, I'm going to have to update 
this for my own case. [elevator music] The first thing that I tried to get working 
was just download data for a single video.   Here's kind of the flow of any 
program that's using the YouTube API.   First you figure out where your client secrets 
file is, then you create an authenticated YouTube   service, and then use the service to do whatever 
it is you want to do. Let's take a look at how I   create the service. This is basically just my own 
wrapper around Google's authentication process.   These scopes are basically the permissions that 
you're asking for: either read-only or read-write.   I'm only dealing with the YouTube data API version 
3 so I'm just going to fix those constants.   So you just pass all that data to the 
Google code and then it builds it for you.   So back to downloading one video's data. The data 
API lists a bunch of different resource types,   and the one that I'm looking for is videos list. 
The API documentation is not written specifically   for python, so you sort of just have to look at 
the Python examples and then try to translate   it into what you want. I'm going to be using a 
specific video id, so I give it an id parameter,   and then you also have to pass a part parameter to 
tell you, kind of, what do you want back from the   call. it doesn't just give you all of the data it 
has about a video, you basically tell it what you   want. "snippet" contains basic information like 
the title and description, so we'll be using that.   Back to the code, we see that we use the YouTube 
object and tell it that we're interested in the   video API and the list method. Then we give 
it our video id and tell it that we want the   "snippet". "execute" is what goes out and actually 
makes the request. After executing the request,   we save whatever we get back to a file. Okay, 
let's see what happens when we run it. The first   thing that you notice is that you have to actually 
authorize this request manually. It gives you a   link, I need to go to the link and authorize it. I 
have to choose the account that I'm interested in   and then again, very serious about security, 
Google is warning me that my app is not a   verified app. Because I'm sure that this is me 
and not a hacker, I'll go ahead and continue.   I have to agree to let my app have access 
to my account in order to do this. Again,   I know it's me, so I go ahead and allow it. Google 
gives me a code that I then have to go and paste   back into the terminal. Now I see this single 
line JSON file that has appeared in my directory.   For both of our benefits, I'm going to format 
the JSON so I can see what I'm working with.   As you can see, the response that I got back has a 
single item in it that's of kind "youtube#video".   It has the id of the video that I requested and 
the channel, that's me. and we can see the title   and description are also here. You can also see 
information on the thumbnails and the tags of the   video. Okay, that worked. This is a lot of good 
information. Well, that was just for one video,   and I already knew the video id. How do I 
download all of my videos? [elevator music] I'm putting this in a new file. The thing 
that I had to figure out in order to get   all of my videos was to realize that YouTube 
stores your entire uploads list as a playlist.   So first I'll make a request 
to get the id of my playlist,   and then I'll go through and download 
all the video snippets for that playlist.   I'll use the channels list endpoint in order to 
find out what my uploads video playlist is. Then   I'll use the playlistItems list endpoint in order 
to find all the videos on that playlist. Here you   can see how I query the channels list method and 
then extract out the uploads playlist from it.   When I go to actually find the information on the 
playlist items, though, there's a slight problem.   the documentation says that the maximum number of 
results that you can return in one query is 50.   But I have more than 50 videos. When there are 
more results available, in addition to the data   you requested, the return query will return a 
next-page token to tell you how to get the next   page of the results. You then have to loop through 
and make a new request, over and over again,   until you've gotten all of your pages. I made this 
paginated_results function in order to do this for   me. Here's the code for paginated_results, but I 
basically just copied it from one of the examples.   For every page of results, I dump it to a 
JSON file. After running it and formatting it,   I get similar JSON to the previous time, 
except this time there's more than one item.   This time the object returned is a 
playlistItem, so it's not the same as a video,   but it does still have the title 
and description of each video.   And it also has the actual video id that I'm going 
to need to update the video. [elevator music] Here's the code that I came up with to 
update the description of a single video.   I know I can get the video id from the JSON that 
I just downloaded, so I'll use that and the new   description as parameters. After checking that the 
new description contains only valid characters,   I make a new request to download the data for the 
current video id. I do this so that I can compare   what I'm about to replace the description with 
with what was already there. I download a new   copy of the description so that I'm absolutely 
sure that I'm using the most recent version   of the description to compare against. I wrote 
this function confirm_diff to show me the old,   new, and the difference between 
the two of the two descriptions.   Again, I'm doing this live on my real video 
descriptions, so I don't want to mess it up.   I will print everything out and then 
ask myself if this looks correct.   Once I confirm that the diff is correct, I 
then update the video description and call the   videos update endpoint to actually update the 
video description, live. YouTube responds with   the updated information and, as a final check, 
I check that the description has, in fact, been   updated to the new description. Okay then, here's 
the new file that I'm using to basically call   that function in a loop to change each description 
one after another. I load up the JSON data that I   saved from a few minutes ago, and then put it into 
a big list of videos. Because I'm expecting that I   might pause and try again a few times, I'm putting 
this check in to make sure that I'm only going   to operate on videos that don't already have the 
word "patreon" in the description. Additionally,   the first time I try this, I'm just going to do it 
on a single video that I've chosen ahead of time,   so that if the program goes rogue, I'm not going 
to lose all of my descriptions. Once I'm confident   the program works, I'll comment this part out. 
Here I load up the text that has the Patreon   link in it that I'm going to prepend to all of my 
descriptions. I make a dictionary, mapping each   video id to its new description. after confirming 
again that I really do want to do this, I make an   authenticated service and loop through all of my 
videos, updating the descriptions on each of them.   Okay, here's the video that I'm going to test on 
first. Right now you can see that there's nothing   about Patreon in the description. 59 videos 
total, 58 of them don't have anything about   Patreon in the description, am I sure? Yes. 
And here we go. Here's the old description,  here's the new description, it 
has the Patreon link at the top,   and here is the diff. We 
can see that it just added   those lines at the top and then nothing else has 
changed. Does this look correct? Yes, let's do it.   Okay that finished instantly, so let's go check 
the video. All right, the video is still alive.   The description now contains the new links. 
It appears to be correct as far as I can tell.   I guess it just worked on the first try. Honestly 
I wasn't totally sure that was gonna happen. Okay   we tried once, let's do it for real, let's update 
all of the video descriptions. [elevator music] It looks like most of them went through, 
but it looks like on one of the last ones   I got an http error 400. So I scrolled over 
and it's telling me the metadata is invalid.   So I don't see anything wrong with the description 
itself, it seems just like any of the others. It   looks like it succeeded for all of the videos 
up until this one [see yellow outline], so   that's basically all of the videos. I think I'll 
just redownload the video description data and   try again... And it failed again. Well I guess 
it wouldn't be a real coding project if something   totally unexplainable didn't happen, so I guess 
I'll still consider it a success. [elevator music] So, was it worth it? After all, this took me 
hours and hours to do, and updating it by hand   probably would have only taken 15 or 20 minutes. 
Well, yes, I think this was absolutely worth it,   and not just for educational purposes. I'm now 
able to update the video descriptions of all of   my videos in an instant. If, tomorrow, I want 
to add or remove a link from the description,   I can do that in no time. In the future, I'll 
be able to keep all my video descriptions   up to date with all my latest information 
with basically no extra effort. So, yeah,   I call that a huge win even though I spent like 
five hours on it today. If you like this video   enough to watch it all the way through, you 
should probably be subscribed, so don't forget.   And if you especially liked the video, please 
consider sharing with your friends, and   maybe even becoming one of my patrons on Patreon. 
Again, thanks for watching and see you next time.