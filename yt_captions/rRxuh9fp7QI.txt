so last week just after we'd done the video on dirty cow there was another post from a team of engineers at ancillo and written up in a regular blog post by tal lieberman explaining an exploit they'd found in windows called which they termed atom bombing now the the lovely thing about this exploit is it works in any version of windows um and they reckon it's virtually undetectable by your anti-malware software of course what this means then is that you don't necessarily know that it's not already being exploited on your system at this simplest level atom bombing is just a way for us to take a piece of code that we want to execute and not run it as part of our program but co-opt some other program to execute that code for us so say i'm writing a nice piece of software that's going to sit in the background and log every single key press you press on your windows machine and i'll get all your passwords i'll get all your bank details and i'm going to disguise it as a nice printer driver for that nice new printer that you've bought now i do that you've got a bit of anti-malware software on there and it says hey this printer driver is trying to talk to the internet and you go that's a bit suspicious why is my printer driver trying to talk to the internet and you stop it and you find the thing and uninstall it what this would allow us to do is to say still write our piece of code hide it in a say a printer driver and we say well not we're going to get connect directly so we get firefox or chrome or ie to send the details back to the hackers so they've got all your details and of course if a message popped up saying chrome wants to connect to the internet of course you're going to let it connect and so what we've got is a piece of software and we're writing a malicious program here and it's executing so we'll represent it with a skull and crossbones and we wanted to run something so we have google chrome over here so we've got our program here and rather than sending the information directly it pops a piece of code into chrome and gets chrome to execute the code for it and of course it's connecting to the internet and it happily sends it through because that's what chrome's designed to do alternatively you could pop a piece of code into chrome or firefox or any other program that accessed all the passwords that are stored in chrome and then sent them off happily over the internet and you would never know it was happening now this is a standard code injection technique lots of malwares use things like this what's clever about this and where it gets its name from is the way that it's implemented and it uses built-in features of windows that have been there for donkeys years to transfer the data from your program the malicious one into chrome or whatever it is you want to exploit and then executes the code that's there and so that's why it gets its name atom bombing because it makes use of a feature in windows called atoms so what is an atom well often when you're writing programs things you need to represent things and one way you can do that is by using a string so if you want to pass a piece of information from one part of a program to another program you need to tell it what type of information that is and one way you could do that is just put a string with it that says this is an image or this is a piece of text or whatever it is and that would work you could put the image with it and the other program can compare that text with a list of known types and then it can work out what it wants to do with it the problem with that is that the text is arbitrary long so it takes an arbitrary amount of space to transfer which sort of changes each time and also it takes a significant amount of time to compare the two strings you have to compare each character until they don't match and then go on to the next one and compare it and so on so atoms were created as a sort of way around this what you basically do is you create an atom from the string and that gives you a 16 bit so a number between 0 and 65 536 that represents that string we won't go to the details of how it's done but the key thing is that every time you create an atom for the same string are the same sequence of characters you get the same atom back so you then just pass around the 16 bit numbers and you can compare them and they act just as if they were strings but they're faster and smaller to use because you've got that table behind them which maps them between the atom number and the string that is being used what windows offers is built-in support for providing atoms which is quite common in an operating system and so you've got functions that will allow you to create them find them and get the text back from them what it also provides which is what atom bombing exploits is a global afternoon table this is an atom table which is shared by all programs so problems could have their own local tables which they can use as they need but there's this global one which is shared between all the programs let's say if you want to use something like for example dynamic data exchange between two programs you use the atoms in the global table because then they can both see them so what we've got if we just redraw this is our malicious program over here and we've got chrome sitting here so what our program can do our malicious program is it can create a global atom and it gets added to the atom table and chrome if it were to look for that atom it could get the string as well so they can both see it and this is the first part of the thing this gives us a way to get information i.e the code we want to run from our malicious program into the program we want to exploit so if this is the parasite we can get it into the host so what we do is we create an atom and there's a standard window systems call we can use to create the atom and we give it the machine code for what we want the program to do so we create a bit of machine code and we create an atom with that bit of code so then we've got a piece we've got an atom that's shared between every program on the system great how do we actually get that into our program that we want to use well we use another windows system call which enables us to run a function inside another process in this case we're going to exploit chrome to do it and so the way that that works is we first call it passing it the function we want to call in this case the function which goes off and gets the value of the atom from the atom table so we're using this program so let's say we've got the atom table down here this uses global add atom to put the malicious code into the atom table we then need to do the next bit of the exploit which is to get chrome or whatever probe we're trying to attack to call the function to get the value so we want this program to call global get atom name to transfer the code that we've put in here which is pretending to be the string into our host process in this case we're using chrome but it's not an exploiting chrome any process would be susceptible to this so we can transfer the information from our malicious program through the atom table hence why it gets the name atom bombing because we're using the global atom table as our sort of vector into the other program but we need to get global get atom name called from within chrome now how do we do that well we can use one of the standard windows functions that enable us to run an asynchronous procedure in another process so this is a standard thing and you might use this to do remote procedure calls that sort of thing it's not anything to under untoward now you have to be a little tricky with this because of the way that data is passed into these functions but you can get it to work so we can make our program here call that in that one and that copies the value into the memory space of the host program that we want to exploit so we can using standard windows systems calls just copies data from here into here now at this point we need to execute the code inside the host process now you might think well you could just call the to cue the asynchronous procedure call again but one of the things that modern operating systems do whether it's windows mac or linux they use what's called the nx bit to say that only certain memory um locations can execute code so when your program's loaded into memory you set this no execute bit the nx bit so that only certain pages of your program can be executed either ones where you've loaded your code in so you transfer your mess your program across but you can't execute it you need to find somewhere to hide it that's easy to do you copy it across but you can't execute it so what you end up having to do is to do some clever return oriented programming i.e making use of code that's already in the program and stringing it together so it executes in the order that you wanted to rather than the order that it was intended to do to create a new bit of memory in the program which is marked as executable and then copy the value that you've already copied into there into this part and then start executing it the result is that you can use the atom table to transfer your code across and then using some clever machinations which are described in the blog post so we'll go to the details here execute your code inside another program and then it can do whatever you like so i've taken the program that nclo released to demonstrate this and i've got it installed on visual studio so we've got chrome running and if we just run the program what this will do is you will see the code float up here as it does all the various stages it'll then get chrome to execute the bit of code we saw earlier and it will pop up with the calculator so it's actually executing the calculator it's not very destructive it's not very much of an example but we'll see that it actually does what it says on the tim so off it goes and then boom the calculator's popped up behind me and it's run it and i never run the calculator this program left around the calculator this program got chrome to run it on its behalf and there's no trace inside chrome or inside this program that this ever happened and of course the real problem with this is that there's no easy way for any sort of antivirus or anti-malware to detect that this is what's going on it would have to start patching into the window system calls and checking whether global ad atom was being passed with what looked like actual text or machine code you'd have to check what was being passed into global add atom was valid text which is what you'd expect will actually look more like machine code which would slow the system down whenever that was used you would have to check every asynchronous procedure call to check it wasn't calling global get atom name to pass the text into the other thing so it'd be really quite difficult to detect this being happening i'm sure they'll find a way but at the moment it's the wild west out there look surrounded by all this apple merchandise and some people might accuse computer file of bias in our coverage do you want to just set our fears at rest we've looked at how we can exploit openssl we've looked at how we can exploit bash in the past today we're going to look at how we can exploit windows this isn't bios this isn't a bike are you sure