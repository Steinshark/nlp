okay so apparently there's a challenge that just came out last week called the 1 billion row challenge the challenge is open for submissions this is all you so the 1 billion Road Challenge the one BRC Brazil mentioned BR let's go is a fun exploration of how far modern Java can be pushed for aggregation or aggregating 1 billion rows from a text file grab all your virtual threads reach out to sim D's Nuts optimize your gc's or pull any other trick what happen if the trick is to use rust is that allowed is that allowed I am coming to Brazil by the way in in May uh and create the fastest implementation for solving this task all right so what's the task the text file contains temperature values for a range of weather stations each row is one measurement in the format of string station name double measurement with the measurement value having exactly one fraction digit the following shows 10 rows okay the task is to write a Java program which reads the file calculates the min mean and Max temperature value per weather station and emits the results on standard out like this sorted alphabetically by station name and the result values per station in the format of mean min max okay okay okay this actually does look really really fun I kind of feel like you got to open it up to a bunch of languages this does sound really fun oh then why do you have to put little braces around it I'm confused why you got to put those things around it why do you got to put little Squires on the end of it it's not valid on what is it I kind of want to try this it I mean it's not it's not very hard this repository contains two programs Dev morling one BRC create measurements that is the most Java ass sounding program name I've ever heard in my lifetime invoked via create measurements sh creates the file measurement text in the root directory of this project with a configurable number of random measurements one morling one BRC calculate average invoked via calculate average Baseline sh calculates the average values for the measurements text execute the following clean measurement create with 1 billion rows take a few minutes attention the generated file has a size of approximately 12 gigs so make sure you have enough disc base I currently have 14 Gigs available Gibby bytes too okay they're not just gigs they're gibbes okay optimize the heck out of it just a calculate average program to speed it up in any way you see fit just sticking to a few rules described below okay so what are the rules oh hold on we got some we got some flame graph and all this the tip is to use jbang okay so you got some flame graph all this the rules any of these Java distributions may be used any build provided by SDK man Early Access builds available on open jk. net may be used including EA builds for open jdk okay here's the builds you can use no external Library dependencies may be used implementations must be provided as a single source file computation must happen at application runtime you cannot process the measurements file at build time for instance using growl grow VM and just bake out the results into a binary okay input value ranges as follows okay there's a maximum number of 10,000 unique station names okay interesting implementations must not rely on specifics of a given data set any valid station names as per the constraints above any data distribution I wonder what I wonder what data structure you'd use I mean what data structure do you think you'd use obviously heaps like the very simple one or a beet tree right off the rip well no because you need to have the Min the Max and the me or the median right is it the median or the mean cuz if it's the mean then yeah yeah there's no fancy data structures at all is it the median or is it the mean oh is it really just the mean oh it's just the mean the min mean and Max oh that's not that bad you need four numbers you need min max sum count it's not even that well you have to sort them but sorting is easy sorting is not even a real deal here sorting is the end sorting is a constant time operation in this case now you I guess you could be clever about how you sort maybe there's some data structures that you could try to store things that come partially sorted you'd want everything to fit into stack space could be interesting I bet you the challenge is is how do you navigate through memory well and it looks like okay so it does look like this it looks like everything is sorted via that yeah you could reduce your sorts sort size I don't know I it's it's it is interesting so standard rules standard rules apply mares of Queensberry rule apply entering the challenge to submit your own implementation of the one BR Brazil Mansion see follow the steps create a fork of this create a copy of calculate average yeah make the implementation fast really fast create a copy to of calculated average a baseline you know I'm looking at this one and I'm trying to figure out how like that is really fast that is really really fast because we're talking like 12 gabt it seems like you're going to have all sorts of other interesting issues going on here okay anyways so here's all the rules here's everything you need to do nothing too hard evaluating the results the results are determined by running the program on the hetner cloud CCX 33 instance 8 dedicated vcpu 30 GB Ram the time program is used for measuring the execution times end to end times are measured each Contender will have five times in a row the slowest and the fastest runs are discarded the mean value of the remaining three runs is the result of the contender and will be added to the results table above the exact same measurements text file is used for evaluating all the contenders if you'd like to spin up your own box for testing on a hetner cloud you may find the setup script right here okay let's go hetner prize if you enter the challenge you may learn something new H get others inspired and take pride in seeing your name on the list of scoreboards up rumor has it the winner may also receive a unique t-shirt too I do I would love this nothing would be more funny than if this right here actually turns out to be a problem a company is trying to solve and they just create a fake ass Challenge and they're just seeing like what can people do in Java with the huge number of you know values coming in and out and they're just totally brain wrapping for a t-shirt like that would just be that would just be fantastic that is hilarious this is a super cool challenge though honestly this is a super cool challenge I absolutely love this challenge I'm curious what you can do I'm curious what you can do with these challenges to figure out fast ways to go through things interesting stuff well because you wouldn't want to even use something like lines right you wouldn't want to do any of that you would want to just simply you'd want to just scan forward right but I bet you there's really there's like these fast ways to scan forward on a string there's like these 64 byte or 64-bit Compares there's all sorts of crazy things then you got all the Sim DS in there like how do you how do you Sim D's Nuts well in this one I wouldn't even know how do you have like constant time you could really make a constant size array for a couple things it'd be interesting I I don't know what I don't know what it would take and I also don't know Java I don't know what you can do with Java I don't know I don't know Java good enough to do anything going from 4 minutes and 13 seconds to 14 seconds is wild yeah four minutes to 14 seconds is wild because that's like a 16 that's a 17x Improvement if the actual problem is for a real company the real solution is probably to use Java native interfaces and do it in assembly yeah because you can do that we did read that hexing the Java interview um hexing the Java interview hexing the technical interview where this person writes lisin stuff and starts just bite code writing right into right into Java doing Java but just just doing it in an interview saying things like chero wouldn't want to hire the person but absolutely legit absolutely would not want to hire that person but incredible classic Java a classic all right hey the name is 1 billion row challenges actually pretty cool I would love to see that thing opened up some different languages thrown in there because to me that's actually like a really great example of like let's test out speed of languages and speed of run times because you know like ja like JavaScript you know node buun going to have an inherent disadvantage right off the rip cuz they have to like hydrate an entire you know run time before they can run nothing too exciting end map the whole file split in a slices per cor partial results blah blah 15 seconds on a Mac 2 Pro bam I had the same idea runs in 127 milliseconds on this hour utilizing a wow looking better at my seems to be cut off yeah whenever you if you were able to read a 12 gab file in less than a second your first question should be oops no that's nothing that's not rust that's nothing okay there's bus speeds the speed in which you can read a file is your upper bound right there there is an upper bound that exists and you can't you can't do that use a ram disc damn son how big's your RAM if you have a ram disc upper bound on speed lower bound on performance you're right yeah upper bound meaning like I when I said upper bound it's some I inversed it in my head but you're right lower bound would be the the correct one the lower bound of the of the running time yeah dude not even an SSD you just straight up have a ram for your disc when you turn on your computer burnt in operating system in the first so many burnt you can do a real time op that way I bet you there's some realtime operating systems that would work that that you could have everything on RAM I bet you there's something that is just like wild maybe that's the future maybe that's the future of computing is everything actually does RAM it'd be kind of cool finally JS would be less slow JS would somehow figure out how to be slow imagine hot R reloading RAM sticks damn Linux already does 90% of the files in Ram nice that's I mean that's exciting it would be kind of wild to see that anyways okay now we're just into a we're we've gotten way off topic the name is that's a cool Challenge and I liked it a genen