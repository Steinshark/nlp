in the last 3 days I have quit using co-pilot and so I'm actually kind of like freshly on a this is the reasons why I'm not using co-pilot kind of train right now and this is this video feels very apt if you will okay and so we should do it I think we should do this the reason I'm no longer using co-pilot actually starts out rather simple recently I decided to redo my neim config from scratch and in why is my computer acting like it's it's it's on zero speed look at this it's thinks it's full screen but I also have this what the what the what the hell was even this okay by the way that that was it's too accelerated dude computer's drunk I'm not sure what's happening the reason I'm no longer using co-pilot actually starts out rather simple recently I decided to redo my Neo config from this is hilarious because the reason why I'm no longer using co-pilot is because I got a brand new computer which we're using right now and I redid my uh neovim stuff and I redid all my stuff and I just forgot to sign in to co-pilot I just forgot to sign in like that's it just didn't sign in so now look at me I now don't have co-pilot scratch and in doing so well I forgot to add co-pilot back in if I let's go I like I like that we almost have the same reason it's like we're very similar reason both neovim had remembered I'd probably still be using it however I'm not both my editor and code have been co-pilot free for about a month now and I have no intention of going back so in this video I want to look at some of the reasons why I don't want to go back and what that means to me in the future the first of these reasons start hold on before we do that I actually want to see people's I want to pre-experience pre-experience a volume up a little yeah we'll do that my bad um quick uh quick question quick question how many people right now are actively using co-pilot lot of Z like a shockingly large amount of zeros can I can I invert this question really quickly or what's a takeaway I'm taking right now from this from this question I think one of the things that I'm kind of taking away right now is that how much money is currently still on the table for Microsoft and co-pilot damn do I need to buy Microsoft stock is that what we're seeing here boys are we seeing an investment opportunity all right let me let me do a pull I'll do a poll I think I have the worst takeaways of all time are you using co-pilot yes no and then I'm going to put on on here no uh cannot afford no because I don't want it right um no no reason right it's just no reason slash other right there you go we're going to we're going to really spread out the nose so you get a couple chances you get a couple chances to look it up well no because I don't want it like specifically I'm not using it because I'm I'm intentionally avoiding it I want to see how many people are intentionally uh avoiding co-piloting students have it for free yeah I know students have it for free which by the way I I do want to say this and I think this is an incredibly important point in fact we're going to Tweet this um I'm going to do this right now uh here we go we're tweeting this students having access to co-pilot for free is the biggest educational blunder of all time and post I wholeheartedly agree with that uh dude like there's nothing more important than that initial struggle and kind of getting over it just having co-pilot Take the Wheel style man that's crazy that's crazy like you need to you need that first you need that first amount of time you know what I mean to really learn lovely take that's a lovely take can I get some L takes in here for lovely take can I get some lovely takes in here thank you look at all those L takes those all stand for lovely takes by the way for those that don't want okay so we have a lot of people in don't want to we have a lot of people using it no for other reasons I I don't know what those other ones and no for can't afford quite a few not not many people so a lot of it is not for money monetary reasons it looks like so monetary mon I I figured monetarily monetarily monetary monetary reasons we going to be one of the primary driving factors in this chat why people don't use Co co-pilot like hey I don't want to pay $40 a month or whatever it is to use co-pilot but that's actually not the reason uh Telemetry a Telemetry seem seems pretty 40 I isn't I how much is co-pilot it's $10 a month oh it's 10 bucks damn it's $10 ain't no way it's going to stick to $10 you know they're doing a loss leader here you do know that right that is like the greatest that is that is that's BS it's BS they're they're loss leering so hard on co-pilot right now just a just to suck all just to suck all you dry ain't ain't no way Ain't No Way $10 isn't a loss I don't believe you for a second don't believe you for a second and I fully agree with that take um just just ain't no way Ain't No Way Ain't No Way um all right okay so interesting so everyone's kind of let's see why let's see why starts with some simple advice if you don't use it you'll lose it ask anyone who's taken a break from weightlifting or playing a musical instrument and they'll tell you that this advice is pretty sound this rule isn't ubiquitous however not every skill you have will be lost over time for example once you've learned to ride a bike you'll pretty much have that skill for the rest of your life however when it comes to riding I'm not sure the same can be said well absolutely it can't be said I mean it's it's obvious when you're when you're in the zone and you're using something I mean this is why part of me likes the idea and I do this every now and then I turn off even my LSP and I Rely purely on my ability to look up the docks and to just like memorize and really have a a a strong connection with the language uh just because it really does help plus one Me overall when you really like really know something and so I find that turning off the LSP turning off all the crutches and doing that even for just a couple hours is just like such a huge W overall the thing that I really like is you know where where LSPs the hard part about turning it off is that I just like my own I just like project navigation and like autocomplete for my own apis but it can be very very nice when you're just like trying to really know the standard by going to the documentation then you get exposed to all of them and you can kind of read through them and you just take a little bit more time to discover and like learn your way through uh I know that's a little crazy uh so we don't turn off go please I I think that's good primon I remember when I was younger I used to write a lot more libraries that tells me I used to manage scope uh via segregation instead of magic there's some wisdom somewhere there is some wisdom somewhere in that there's definitely some something in there going full dhh I I think it's good I mean I think it's genuinely good for you to try to learn your stuff I don't think it's great like I don't think it's something you should be doing at all times but take a little bit of time you know learn it it the thing is is that it will never hurt you to memorize something it can only help you yeah you can always have things look up for you you can always have things autocomplete for you but there is mostly like there is there there is most certainly a a benefit to perusing the docks to learning what else is available to understanding all that and I know the docs are all within uh W within a single place oh a lovely take thank you for the lovely take anyways let's keep on goinging that's probably my one of my more hated takes I think people genuinely dislike that take uh I don't think it's too bad sure the same can be said one thing I am sure of however is that by using co-pilot it has had an effect on the way I write code something I now call the co-pilot pause this is where I would start by typing out a couple of characters of the code I intended then I would just stop and wait what I was waiting for was for co-pilot to tell me the code I was about to write rather than just writing it myself with co-pilot enabled this Behavior wasn't that noticeable but once I no longer had it it was much more pronounced by the way dude this is such a sweet sweet observation cuz when I've turned off co-pilot I realize I pause too in fact I just was thinking about that yesterday I'm like why am I pausing here what am I pausing for why am I doing that like this is oh I'm waiting for co-pilot to write self-d do length not for me to write self do length but I'm waiting for I'm waiting for something in the sky to to to effectively Auto for me oh man I'm glad we both had this little experience and it got me thinking under co-pilots is this what writing code had become reviewing AI generated suggestions instead of using my own brain and writing it myself to me this felt very similar to just copy and pasting from stack Overflow albeit in a much more efficient way the thing is I hadn't done that for a number of years not only this but as soon as I went copilot cold turkey it took me a little while to go back to writing code like I did in the BC era fortunately this only lasted for a that was pretty good that was that was really good um man okay okay so I I'm on like day two or three right now of not having co-pilot and I've realized the co-pilot stops are starting to go away I'm just starting to write code again interesting couple of days but the experience May me feel like I would eventually lose my skills if I didn't keep them up so by no longer using co-pilots I'm taking my coding skill back taking my skills back there was something else that was happening I was having fun if you're anything like me then you probably enjoy writing code maybe a little too much however since introducing co-pilots into that workflow it had become a lot less enjoyable for me the act of writing code provides a few key experiences it enables me to learn something new to be creative and to solve problems by using co-pilots I had inadvertently given away some of the gifts that coding gives to me now do you guys do do you guys agree with that statement I'm not sure I I really agree with that one like I never felt like uh I guess I never felt like my creativity went down or anything I actually really enjoyed its spoiler plate uh plate uh kind of generation I think where I kept on doing I think the co-pilot pause is a really really like awesome observation and maybe I'll continue to use co-pilot in the future but maybe I I you know like I maybe I I'll turn it on and off regularly to kind of like avoid having the co-pilot pause to where where the things that are just like clearly like hey just go write it yourself this is such an this is such an obvious thing remember uh code Snippets I remember code Snippets co-pilot uh RSI induced boiler blate yeah I'm not I I don't know about that not autocomplete but be a few steps ahead of you I don't think it's a few steps ahead of me I I think using co-pilot as a few steps ahead of you is a terrible way to use co-pilots uh you have to direct it or else you you're it's just not a fun experience do not let co-pilot idate let co-pilot co-pilot is an idiot exactly do not let co-pilot generate the ideas you are the one that generates the ideas you will write shitty code if you let that happen I don't know if I I don't think I can agree with that take overall in the sense that I don't think my I don't think my love SLC creativity for programming has changed in any sort of way since using co-pilot I don't I don't I I at least I don't relate those two things together in any sort of way now I guess I haven't been writing code without co-pilot longer than a couple days and I'm just getting over the pauses I'm just getting over my my addiction problems and so maybe I will go oh wow I'm actually having a significantly better time maybe I'll look in the rearview mirror and actually say yes it it it was doing that to me but as of right now I cannot say that that is true now to be fair to co-pilots it's not sorry one more thing on that one in fact I've learned to type incredibly fast and to use Vim more efficient than the average person by Leaps and Bounds just so I can get what's in my head into the editor as fast as possible because you know especially as I work on my projects I can really it's just really a f it is purely almost a function of how fast I can type and get out a lot of these ideas and so it's just like I just have to like just try to shove it out there and I found that co-pilot does increase that speed especially when I have to write something for Lua like like you know uh uh what's it called copy copy a table there is no table copy function so you have to write it yourself and so that's literally just create the you know create a table for Loop over the previous one return out the newly created one and so if I have to create that function for whatever reason co-pilot just does it really really fast and so that's nice or like finding you know like doing a filter across something you know it's just it just tends to make it really easy it's meant to be about having fun its intentions are to increase developer productivity although more on that in a minute interestingly enough however github's own study into developer productivity and happiness found that co-pilots improveed developer satisfaction between between 60 and 75% with three indicator I know we read this we we read this I'm going I'm going to say something real here okay I think it improved a lot of people's reported uh feeling less frustrating while coding because the people that it fundamentally improved with are people who are bad at programming people who never took the time to learn how to program properly yeah I said that coding is just like not like the generation of code is not the the frustrating part if you find yourself frustrating from writing code I think you are a bad programmer the frustrating part is when you're sitting there and you're stuck on some stupid bug because of just like the most asinine just difficult things that exist out there some dumb race condition that is just eating your lunch that is frustrating you know what's not frustrating writing a for loop I think it's only frustrating because you just simply are weak at your own programming right sorry like sorry I hate to say this to you you know I feel like that one's gonna get uh I feel like that one's gonna get me in a lot of any time I say like you're bad at something people people get really frustrated with that you know you don't memorize phone numbers anymore so why should I know anything about the syntax okay it like I could just look that up yeah yeah you're right you could look that up you're absolutely right 100% but that's shitty like I hate to tell you that but that's a shitty way to live post that on Tik Tok Tik Tok I'd get demolished on Tik Tok Tik Tok is by far the the the biggest learned helplessness platform of all time if you go on on Tik Tok and you say some sort of learned helplessness thing you will do great you're like you know what I think they should give co-pilot to everybody because honestly to be a good programmer and to not feel frustrated writing code AI is really just you know they just really improve that and people are like hell yeah yeah yeah but if you go on Tik Tok and you're like hey you should learn your tools and your editor and you should get good at typing because hell you're going to be doing this for like 40 years people are like who is this guy what is this guy all about he's coming here and telling us how to live our lives I think copil should be for free just like damn man Tik Tok you you filled with a bunch of soft ass people on Tik Tok just soft ass people all right let's go also I hate self-reporting surveys are just just honestly like real talk you asked this question and someone stuck on some stupid bug you think you think they're you think that question is you think that that answer is going to be different they've been stuck on a bug for two days right I mean this question is like I I just hate I hate self-reporting questions there's no real 5% with three indicators being less frustration more fulfillment and focus on satisfying work to me these numbers actually make sense especially as the experience of using co-pilot took me back to when I was a much more Junior engineer when I initially started my software development career yeah it was kind of frustrating A lot of my time was spent dealing with silly issues such as syntax problems or just a misunderstanding of how a language Works often times it would take hours in order to find the problem the thing is though it was a right of passage I had to encounter those challenges in order to get better if instead I had a tool such as co-pilot I doubt I would have faced those problems and then improved either way I fall into the 40% that doesn't feel more enjoyment when using copilot and I strongly believe that in order to get really good at something you have to enjoy it speaking of getting good I completely agree with that I think that it's very it's very very difficult to get good at something you don't enjoy because you're not forced to do it like if you were forced to do it I believe you'd get good at it I I think I think humans are generally really good at doing anything that they do long enough but for you to just do something willingly you really do have to enjoy it or else you're going to just try to do the most minimum ass work possible and nothing's going to set into the brain and it's just going to be like just just walking walking through oil it's going to be just difficult one of the best ways to improve your skills is to be constantly learning but knowing what to learn and making time for it is sometimes a struggle why is it why is it blipping a little bit is it is is is the 4K really making it struggle a hard disagree love can be learned I never said any of those things did I did I did I say did I say that no I said in order to get good at something like really good at something I do think you have to enjoy it nobody enjoyed like deeply the first couple weeks learning to program it was hard right it was hard to say you enjoyed it now maybe you enjoyed the end process product and you were completely enamored by the fact that you did something and that kind of helped you the love was not in the programming but in the the outcome and then as time went on you could enjoy the programming because you got good at it you had a reason to keep on doing it I I I I'm on your team that you can learn to you can learn to love something okay no no one's saying that what I'm saying is that I think it's hard to become really good SL great at something if you don't love it cuz how are you going to spend your free time doing something okay gosh a really great here there's a really great uh tweet by fortunately that's where the sponsor of today's we'll get hey we'll get to you sponsor we'll get to you I think her name is oh gosh what is Madison's sister what is Madison's sister's name okay Conor it's Kendall Kendall Conor oh Randall cond R Randall she just said damn she just said something about a guitar there you go I have zero like I have seriously zero Hobbies anymore and just do side projects I feel so guilty about that but I'm most excited about side projects My Guitar sits collecting dust I haven't knited in a year like look at that that's that's so real like when you really love something you think she's not getting fantastic at her craft her hobby became her side projects and she's become very very good like if you didn't enjoy it you'd be playing the guitar because you just you're going to do what you enjoy right you're going to do what you enjoy so of course are you going to get good you're going to get much better screw this I'm getting a degree in finance I'm going to be sell derivatives go do that it is true it's a lot of work I'm not not saying it's not great uh the nice part is it's at least you get to enjoy it like it it's a driving thing it's an enjoyable Thing guitar is hard yeah I I I've played probably I probably played about 10,000 hours of guitar it's probably pretty reasonable for me to say I've played about 10,000 hours of guitar but I haven't played though in the last eight years I used to do a lot of guitar playing a lot for about 10 years I played Smoke on the Water let's do it we could do it we could do it um seren nah dude I like I said I haven't played in so long I'm just terrible terrible terrible video brilliant.org can help brilliant is one of the best ways to learn computer science math and data science interactively and offers bite-sized courses that range across a variet is the bite size BYT of different skill levels and subjects given we're talking about co-pilot and AI you can also take advantage of brilliant to better understand how the technology behind it works by taking the course on how llms work this course will allow you to get Hands-On with real language models as you explore how they build vocabulary choose their next word and much more you'll also be able to understand the importance of training data and the role it plays in generating output looking at models trained on big Tech ain't nothing like not having enough training data and overfitting to a smaller subset and then having your Rosen Brock function extrapolation be completely incorrect correct am I right boys am I right am I right about them Rosen Brock functions or what x terms and conditions versus those trained on the lyrics of Taylor Swift so to try everything that brilliant has to offer free for 30 days visit brilliant.org dreams of code or click the link in the description down below you'll also receive 20% of brilliant's annual premium subscription a big thank you to brilliant for sponsoring this video can I can I take a second though I I do want to say something brilliant that I think is really important and I and I person person Al find a little offensive okay why does Einstein have white hair but a clearly Just For Men's mustache right here like that mustache does not the the carpet does not match the drapes here okay the carpets do not match the drapes and that that just can't happen like I hate to tell you this but this picture is is very jarring experien right now so you should you should do something about the mustache okay cuz it's it's it's just not real subscription a big thank you to brilli for sponsoring this video the next reason I'm choosing to no longer use co-pilot is to do with quality as I mention I think this is one of the more fair takes I think this this is most certainly true I find co-pilot if you allow it to do all right I did want to say something about the quality though I think that when you lead co-pilot I think there's a huge quality differential between when co-pilot leads you versus you leading co-pilot and what I mean by that is that if you just let co-pilot kind of write a bunch of code and then you edit it to be what you want I think it's really really hard to get good stuff and I think that you will just introduce bugs it is difficult I don't think it's well thought through and I don't think that's a good way to use co-pilot because I think that you're not using co-pilot I think that you are the co-pilot but if you invert it and you are not letting co-pilot autocomplete till you're at a spot where it's just like it's exactly what you want and you're only shooting for those uh you're only shooting for like boilerplate completion oh man it's really really good and also second this is actually one of the really great Arguments for using typescript return types if you put a return type in your typescript co-pilot drastically completes stuff better it does a significantly better job by simply putting in and not putting in return types uh because it has just more information and so I think it's really really good just if alone for that to think about your return types goorse mentioned anyways just a thought to no longer use co-pilot is to do with quality as I mentioned before co-pilot is meant to be a productivity tool and in some cases it does a really good job of achieving that goal however I find a lot of the time it makes mistakes and instead I'm much more productive when just using a good language server not only that but after time I found the suggestions that co-pilot provided were woefully out of date when it comes to software development things change rather rapidly and documentation that worked for a library maybe 2 years ago can be out of date when applied to the current version that's true I so this again this is when you let co-pilot Take the Wheel I think that if you let co-pilot just generate stuff it will just simply generate out ofate stuff that was on it at some point because the thing that they the context that it doesn't have is that the the autoc completion is from a specific version the one you're on is a different version therefore you have a different experience blah blah and it comes out with the wrong thing it's just close enough right it's like oh we're using hyper I can help with Hyper I know all about hyper hell yeah I know hyper right toyo if for those that are wondering when I was first learning rust Tokyo in async man I'll tell you what I was screaming Tokyo because it was such a pain in the ass so if if anyone's ever wondering why I yell Tokyo it's because the amount of times I deadlocked myself using channels and and the rust way of doing things or having like accidentally cleaning up my receivers and then just having my sender stop oh man I I I went hard I went hard on the tokyos and I yelled a lot Oh I thought you had a tick no no no no no I didn't it's just just Tokyo all the way down it's just i' scream Tokyo this is a fundamental flaw of co-pilots as the data that's been trained I don't think it's a flaw I think that is it's not a flaw that's it's it's unfair to say it's a flaw that is by Design how it should work meaning the thing has to take the median you know like it needs to take the median expectation of what it what what the input is and what the output should be and that is it's it's a feature not a bug now a flaw means that it's actually incorrect I I don't think it's incorrect I think it's actually correct it's taking what is an accurate representation of how to run a um what's it called how to run a hypers server but you're on a newer more bleeding edge version therefore yeah it's a limitation is probably a much better way to put it it's a limitation it could be smarter it could know the version of the libraries I mean that's a lot of information as to store right what you're describing is a flaw I'd call a limitation it's a little bit different this is a fundamental flaw of co-pilots as the data it's been trained on grows more and more stale considering that the two main benefits I got from copilot were dealing with boilerplate and working with the apis of a new framework the fact that these suggestions were often stale meant that I would often have to refer to the documentation anyway not only do I anecdotally find that this quality is an issue research has also been done on the matter with studies showing that the code AI generates is often having to be Rewritten this coupled with the fact that I may not there's like this whole re this this whole churn of code is getting exponentially faster I don't know if for those that didn't see this article it's incred it's like it's super super interesting which was they measured for like the last 5 years a couple different factors one of them is like code that like same line changes have gone uh drastically up since the uh Inception of co-pilot right and so there like this time for a line to change used to be really really long in the average open source project and now it's gotten really really short and so there's something very interesting about that maybe that's like the effect of using more and more JavaScript I don't know there's many confounding factors here I don't want to say that it's it's it's it's just simply the ai's problem right because I don't know if you can just say it's the AI problem but it most certainly you can see things are changing quickly uh by the way the dryness I I don't we don't we don't we don't necessarily buy the dryness argument truly understand the code that co-pilot generated gives me concern for the future maintainability of the code despite these concerns however co-pilot is still rather good at generating boiler plate and if it wasn't for this next reason I could see myself keeping co-pilot around just for that task un it is really nice for test test I I would say that it's it's shockingly good for test again that's because you've already written the code it already has the code analyzed and you're already starting to write the test plus you've given it a name and an expectation to what it's supposed to do I think that that gives co-pilot like the maximum chance to be really good like the more information you can give it the more precise you can make it the like the more narrow what it needs to do the better it is at it and I I've always found like boilerplate data generation to be just something magical when it comes to copilot because it is just so good or it goes completely off the rails and you're like yo Copa what the hell you doing to me what the go what the hell you doing to me you know because you sit there and you're like this call with this data call with this data call with this data call with this data then you're like expect call one two with the data expect call two with the data expect with the and then just like you know cuz it it's just so narrowly defined and I think that is so nice I absolutely love that about co-pilot however there's a big problem with co-pilots that I kind of neglected privacy if you know my content then you know that I'm into self-hosting open source and privacy co-pilot is pretty antithetical to all of these and none more so than privacy as you use it it constantly sends up Snippets of your code up to a remote server to make matters worse if you're on the individual plan then these code Snippets are saved by default unless you've explicitly opted out for me this is kind of unacceptable but it was the last nail in the co-pilot coffin that I needed so with co-pilot no longer installed what am I going to use next well nothing yet I'm probably going to take a break from AI for a little while before maybe looking at some open source models that I can self host if that's something of Interest then let me know in the comments down below uh it's a pretty interesting take I wonder the only reason why I'm I'm I'm kind of challenging a little bit of what he's saying is that he also says he's into open source so like if you're writing open source does it does it matter right does it does it does it does it matter at all right um I don't think it matters if you're writing private stuff like I understand the quote unquote fear I still I'm still not 100% purchased that it's actually a problem right why do you think he writes open source well he just says that his big three things are I mean I'm I'm just basing it on what he just said his big three things are open source privacy and self-hosting so I one would assume that he's writing some open source if open source is one of the three things that define what he's doing um I I don't know if I I want to say I don't buy the Privacy part the reason why I say don't buy the Privacy part is that I wonder how much it can actually like what can it stitch together from the Snippets that it sends up that is of any importance right to me it kind of feels like you'd almost need to directly and intentionally try to take all these Snippets and changes over time which are coming in at a pretty fast rate and to actually like take that and try to make like you'd have to have like individual intervention and it and maybe it's not even possible I'm not sure doesn't it check your entire codebase no it doesn't check your entire code base I'm like pretty quite certain now like in a future date when it can handle enough tokens I mean imagine if you have 10,000 lines of code in a project even that which is not a big project by the way that's a pretty small project uh with vs code it does I I'm not sure if I purchase that I don't think it I don't think it does that right because it there's there's like there's there's this whole token problem of how big it can be plus it's trying to work in I mean it's also $10 a month it's usually just the current file and I think it's been upgraded to the current file plus some level of History right there's a little bit of History to it in which it also has uh little bits it grabs bits of information I don't believe it it I I'm like 99% positive it it doesn't do the whole thing but $10 a month $10 how do you have hours of time to code and you can't afford $10 a month right uh but I mean okay so let's just how about this one instead of arguing how much or how little information co-pilot stores the real question is is this truly a privacy concern yes or no so whether it stores a little bit or a lot of bit I think we can take a step back and just like look at it in a more holistic thing um I I I do get the idea that if I were writing software for me that I did not want people to see I can see why you wouldn't want co-pilot or Telemetry in general right this is just like more of a generalized Telemetry question like if we were to take a step back and and say do you want this or not the thing that I see that I don't like about it is that every time you accept or don't accept a prompt from the llms in some sense you are training it right I'm sure it's keeping some sort of score and at some point some of these things are being fed back into it as a way to learn what is a good prompt versus what is a bad prompt so in some way just like you know all those captures we filled out we are literally just training ourselves to be irrel you know we're training the AI to be irrelevant or for us to be irrelevant um it's an interesting concept and do you think that you should share that wisdom sln knowledge with a robot because you don't want to um I can see it go both ways like I love the idea of a future where I can program even faster and if an AI is really good at generating good boiler plates SL good suggestions then I can see myself liking that but at the same time do I like the fact that my my work and my effort to build all this stuff and to pay money for this autocomplete tool is the reason why it gets better you know like you know I don't know I don't know how I feel about it the Privacy thing I still have a hard time with cuz I don't really know I don't I don't know I like the option that I don't have to I would love to see a co-pilot version that's like hey private the Privacy concerned version of co-pilot here is co-pilot in which we keep no data it's less effective it's less all these things and here you go here's the Privacy friendly one it cost more money right this one is is is more and more money because due to the fact that uh we have to process more the blah blah blah here you go I think I think a lot of people would appreciate that I don't know I don't have a strong opinion on it though I really don't because I'm not I have a strong opinion about preserving privacy so I totally will never argue someone who does that I think it's I think it's dumb to argue somebody or argue with somebody that they shouldn't be concerned about it I think he's perfectly valid in being concerned about it because he should be because everybody should be concerned at some level of about privacy whether or not you have anything to hide I'm taking a break from using AI mainly because we're in one of the biggest hype Cycles I've ever seen and I'm both fatigued and slightly underwhelmed but who knows maybe I'm just nostalgic for a more simple era of writing code and by taking AI out of my editor I'm just living in the past light I really like that I really like that ending is this just disillusionment is he really just deluding himself to thinking that um that the is he really just thinking that the past is better you know the Eternal past is always better which is you know it's as easy as a mistake to say that the present is the best H I have nothing to hide I just don't want to help a billionaires get richer okay bro stuck playing wild classic W classic is objectively better than retail wow so sometimes the past can be better okay sometimes the past actually can be better all right first W take come on that was the most true statement ever yeah yeah wrath the Lich King saddies retail wild is crazy anyways hey I like that video I I really felt that the the co-pilot pause is a real thing for everybody that's using co-pilot try turning it off for a moment and just feel that co-pilot pause it's a real thing you don't realize how much you've trained yourself to think a certain way it's very it's it's it's very very shocking once you do that and you're like oh man I am pausing a lot maybe I got to take a step back here anyways the name is I really liked that video that was a good video go like it go it very very good very good