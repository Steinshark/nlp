one way that you can make your code easier to adapt is by using generics now generics have been part of python for a long time but since 3.12 they've been updated to a new and simpler syntax and in a nutshell what generics allows you to do is sort of parameterize a type or class function method with another type or even multiple types so that you can then use that with different types while still have the advantage of type checking part of deciding whether you want to use generics or not relies on you being able to detect issues effectively in your code and whether you should update design if you want to learn how to do that check out my free workshop on code diagnosis by going to R Cod diagnosis this teaches you a three-part framework to more effectively detect design issues in your code it looks at various types of production code libraries that you may even use in your own project and it's about 30 minutes very to the point so iron. c/ diagnose to get access for free the link is also in description of this video I want to start with a very simple example of where you could apply generics let's say you want to create a stack in Python so you define a class stack but a stack can in principle contain all sorts of items right and that's where generics are very useful so here I have class stack and if you want to make a stack of items of a certain type T then you simply add this behind the class name now in Python versions before 3.12 this was more complicated you have to use a type far and things like that but now it's really simple and then you can use the type T throughout the definition in your class for example the container of items of the stack is a list of type T and we initialize that obviously to the empty list but also methods like push and pop they work directly with this type T so if you create for example a stack of integers then these methods are going to also adapt their arguments to that so then the push method of an in stack will also expect items of type int and that's also what separates generics from something like just using the any type because you could also create a stack with a list of type any but that basically means you can put anything you want in the list and there's no type checking you could create a list that's a combination of in floats strings whatever you want to put in there and there's no checks whatsoever so how do you use this well here I have a main file where I'm actually using the stack type right here and you can see that if I want to define a stack of integers I simply write the type here between the square brackets and now we have a stack of integers and then I can push integers onto it if I hover over the push method you also see that item it expects an item of type int and that's what generics does for you and since stack is a generic class we can also create something like a float stack and then we simply Supply the type float and now if I do float stack. push you see that the push method now expects an item of type float and so if we run this code you see that stack of ins in this case contains the number one there's a bit of other code as well that I will show you in a minute so that's in nutshell how generic types work and of course stack is still a regular class so you can actually create sub classes of that to create specific types of behavior so here I have a class numeric stack that's also a generic class and that inherits from the regular generic stack so there's a couple of things that are happening here so first we have this type T So stack is generic class so we need to supply a particular type but what we do is that numeric stack itself is generic so it also has a type T that we map to the type that's used in the stock and there's something else interesting here that's this part and this means means that this type T can be either an INT or a float you can't use something else this by the way is different from uh the Union in or float because that means you have a stack that can contain either ins or float or a combination of them this means that the type T is either ins or floats so you can create a numeric stack of ins or floats but not of both or of other types and in or floats so that's the difference and what I've done here is I've added a couple of methods like getting an item and setting an item and on top of that since it's a numeric stack we can then add methods to it that do something with the numbers like calculating the sum or the average or a maximum or a minimum so how do you use this then so numeric stack is again generic so we can use it in just the same way as the regular stack we Supply the type and then under the hood this is going to use the stack so we can simply use a method like push and then we can print that but then we can for example also print the average so when I run this then you see it computes the average which is one since we just put one number into it but now because we put this restriction on numeric stack to be either ins or floats if we try to change this to a string then you see we now get an error that this is incompatible with the expected type however in Python type checking is sort of optional and the python interpreter actually doesn't really look at type so even if we leave it like this with the type error and then run this you see that it actually simply works even though there is a type of violation so that's always something to be aware of in Python now there's a ton more things you can do with generics you can also make functions generic for example and use generics in all sorts of other ways this is just a quick introduction I'd like to hear from you are you using generics in your python code in what way are you using them what do you think are the pros and cons of using them let me know in the comments now generics obviously are just one part of the type hints type annotation system in Python personally I really like using type annotations in Python because they're sort of an extra security layer to avoid me making all sorts of stupid mistakes while I'm doing software development if you want to know more about why you should actually use typin check out this video next where I cover five reasons why you should use type annotations in your python code thanks for watching and see you soon