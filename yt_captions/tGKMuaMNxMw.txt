I'm Francis bontempo but you can just call me Fran if you want I'm going to ask two questions this morning what is a random number and why should I care well you can search the internet and find a variety of random numbers comments from a stack Overflow question claiming 59 there's a random number so we're only a few seconds in and I think we're on the verge of having dealt with the first question already there's no such thing as a random number right tick halfway there already why is that if you got one number or object or string or whatever or dice roll you can't tell if that in of itself is actually random if I toss a coin and I keep getting heads I might start suspecting that it's an unfair coin and isn't giving me a random result of heads or tails but on a single toss no so question one what is a random number nonsense No Such Thing fine so let's extend this out a bit we can have a sequence of numbers that might be random there's never a single random number but there might be a sequence of things that appears to be random which means well that's what we're going to try and dig into over the next hour partially and plot spoiler I'm still not sure what random really mean so if anyone wants to keep discussing this with me then that might be quite interesting but that's for offline I think if you've got a sequence that appears to be random whatever random means it might still have properties you might expect the average to be zero or something like that you might expect the a certain variance so you might expect everything to be near zero and very unlikely to be plus or minus one or you might have sequence of numbers 1 2 3 4 5 six if you're simulating rolling a dice and then you might want each of them to be equally likely so we can have properties of seemingly random events I think sometimes people use the word random interchangeably with chaotic and those are two fundamentally different ideas chaotic systems are precisely defined but the trick with them is we often don't know all the initial conditions and we're we're briefly touch on Chaos on the way through to see how it's different re I'm going to spend an amount of time talking about pseudo random numbers this morning just just to remind us how they work and how we generate them on computers mainly to avoid having to Define what random really is so might be a little bit of multiplying going on and some modular arithmetic but it's 9:00 in the morning so I've got the slides and I've already done the sum so we don't have to concentrate too much now if you've got a sequence how do you know if that's actually random or not if something generated the number nine over and over well all you can say is up to now I can see a pattern I know what's happened up to now don't necessarily know what's going to happen next so Random is partly about being to if I can spot a pattern I can say I don't think that is random I can see this pattern going on now in the future something might change and predicting the future is impossible to a point or you might have a sequence that isn't just nines and go yeah I can't see the a pattern there so maybe random just means I can't see a pattern but maybe someone else will or maybe with some more information there is actually a pattern there so I still not Define random very well but we're a bit closer we're saying I've no I can see a pattern maybe I could run a function that return nine each time and then that would emulate what this was doing so if I can write a function the returns the same sequence then it's probably not random and yeah our Su that's exactly what we do with our pseudo random number generators and that's cool if you go right back to early Computing and Kevin I think used this quote as well someone's definitely used this quote over the last few days what we're trying to do if we're trying to write simple games card games or dice games or anything like that on a computer is generate something random from a function I just said if we can write a function for something that means it's not random so we make pseudo random numbers which are definitely not random but that's okay they're pseudo random they look randomish so that's we walks around the first question so one thing we've learned so far this morning there's no such thing as a random number next why do we care well there a variety of reasons people use random number generators in their language incorrectly sometimes the random number generators don't have the ideal properties we want I I've talked about car games and dice games and similar and even more powerful games bit of Randomness makes it it more interesting more fun why do I care random numbers can make things fun you can do serious things with them as well so I've spent an amount of time working finance and some of the financial instruments are so complicated you can't work out the results analytically you can't do the matter to work out what something's worth so you run a simulation so you use lots of random numbers to try and work out on average what you at expect to happen and you can do the same if you're trying to model pandemic or any other disease spreading plug in some variables and see what might happen and then you need to Tinker with the variables to match reality more closely and then you can attempt to predict the future and you can actually work out what sort of things might make improve situations so simulating things can help you price things help you save people's lives another thing I want to touch on is just brief moment think about how we test code as soon as we've got random or pseudo random numbers in our code how do we go about testing them I don't know if you've got some strong ideas on that might be a moment where we can share just briefly and I I've said that the Su don't random numbers have some properties we expect so we briefly touch on what sort of things we want out of our random number generators brief aside another reason just to emphasize the point why we care about random numbers I've given a series of talks I think over the last 10 years looking back recently I'm getting old about how to code you out of people paper bag which I mean can you code your way out of a paper bag what does it even mean I've I said I've given talks about this and I've got a sign certificate so it must be true suppose got brown paper bag I don't think the color matters but why not suppose I've got some green blobs and they all walk at the same Pace going up no Randomness so we know exactly what's going to happen we're going to demonstrate we co coded our way out of a paper bag but that's really boring right if I had some Randomness even if it's pseudo Randomness we could have a race going on and Wella if we had a propensity to gambling we could place bets on it pre-recorded the demos due to my laptop dying last time I tried to to do this demo so I know who's going to win but so don't place any bets if we add some Randomness there it mixes things up and it makes things more exciting so there's no such thing as a random number and we care but it makes things more fun and it can be really really useful and save people's lives sometimes so already answered my questions that was quick let's dig into how we make these pseudo random number generators how do we Generate random outcomes I think do anyone know languages other than just C++ anyone use Python a little bit a few I've got some example questions in Python but the point is to think about what sort of functions we're writing rather than the syntax and C as well and R anyone used are so okay A bit if you're doing some math simulation stuff that's often a good starting Place each of them have got most languages have got pseudo random numbers available for you but all of them have a slightly different interface so if you're switching between various languages it's really easy to get really confused really quickly so for example the C's random next if I say 1 comma 7 it's that going from one up to but not including seven or not has the random number generator been seeded or not do we understand what the idea of seeding means so and we'll have a reminder in a moment but if you seed a random number gener a pseudo random number generator of a specific seed you'll get the same numbers back out with some caveats of is on your machine with the same version of the language the same operating system so two things to hold in your head whenever you're confronted with a new set of random numbers do you need to seed it or not and is the range including the upper bound or not let's look under the hood yes that is a car full of walnuts I don't know squirrels destructive I'm not saying that random numbers like LS of walnuts chucked under a carbonet but it is it looks a bit Scrappy if you start looking at what's going on but it's based on some number Theory which is a very strange and unique part of maths that you you don't necessarily find some nice General results each problem is a specific problem that you have to come out of new ways of doing things yeah how do you Generate random numbers or pseudo these are not random because we know what's going to happen next they pseudo random the most basic way which C's Rand is based on and we've been doing this since back in the 50s is called a linear congruential generator so you take your seed X1 say or x0 depending on how you count multiply it by something a fixed constant add a fixed constant then do some modular arithmetic and people spotted at some point actually you got better properties from your pseudo random number generators if you just did the multiplying didn't do the adding up as well so take your seed multiply it by a this this bit start somewhere multiply it by a number do some modular arithmetic gives you the next number and we tend to use for very good reasons prime numbers and often meren prime numbers which are two to the power of a prime number take one give us some really nice properties I'll run through all the properties later on but basic intuition you want to be surprised by the next outcome it'd be unexpected and not keep giving you nine back all the time or zero back up not one not one not one so if we take a recurrence relation that being a proper term for this of start of a number multiply it by something do modular arithmetic gives you the next number if you try it and try this with pencil and paper at some point if you choose M as Prime how how we pick a gives us different properties so if a is seven we can get get a full run of each of the possible numbers up to 11 we start with one and then you you do the maths do your what am I doing 7 * 1 mod 11 well that's seven and do it again and do it again eventually you get back to one we already know what's we're going to get after one so you get this cycle you get all the digits if you chose a was five instead then you go back to one much more quickly and you don't get all the digits so that choice of a makes a big difference and I don't think there's any general ways of working out precisely which a to pick that's best because there's some number Theory there you can say ones that won't work and we're seeing an example where in C++ one of the early random numbers you generators use one value of a and there was a long old argument with some academics for about 5 years and they meant all right this is a better value of a and got an academic paper out of it cuz that's life if you don't use a prime number think through what happens well if a divides into M for example if we took four you can see that this collapses down and sometimes stops on the same number so stick with prime numbers for him and like I said go and play with some of these on pencil and paper you just start with a number multiply by something and choose a modulo and you can get sequences that look random of course if you know that's what's happening then you've spotted the pattern so it's definitely not random but it's good enough playing games with so now that's the simpler ones back not last century so 1998 um people published paper about inen twister heard of that tends to be the go-to random number generator in C++ nowadays and has been in other languages it was under the hood in some numpy things and python libraries and other things but it's really great because it doesn't just use the previous value of x it uses some bits from that one some bits from the one before some bits from the one before which has a great property of if you start with one chug through when you hit one again next time the previous numbers would have been different so you don't then get the next number so that it takes way longer to cycle around but it's got a large amount of State going on which means you can't shovel it onto your graphics card and do GPU stuff there very easily because it takes up a lot of space but it takes much longer before it starts repeating and there's there's loads of ways of generating random numbers we've just seen the linear congruential zoomed through the meren Twister if you just look in the C++ random header or on a reputable website that talks through what's what there loads and loads of other engines in here and there's some really interesting Maps behind this so there several that so the Fibonacci one uses the last two values and combines them so that takes much less state but then it does repeat more quickly but it might give you a bit more than the linear congruential one and you can mess around you can discard some of it you can Shuffle things around you those are all the engine adapters so having picked an engine you can then do other things with it to make it even more random it's not random because you define precisely procedurally what you're doing but maybe that's a philosophical question but this is a fascinating huge topic and we've only got 40 minutes or so left so go and look up the different engines invent one yourself and get an academic paper published I mentioned about the value a making a huge difference again if you look in the C++ header spot the naming that's happened here I don't know whatever it was called Min stand ran zero initially but that it's got the value of a of 16,8 s that we saw when I just put the sums up that I couldn't face going through early in the morning people said no well this repeats too quickly and there certain numbers are never get out first and this is absolutely terrible this back and forth argument for five or so years and then the people who had invented it in the first place went ah no we found a much better value for a and then that takes longer to start repeating and look looks more random whatever random means so in the same header we've got our me stand random without the zero on the end which just means it's using a different of a interesting little history I think for a long time we've settled on arm aend twister AO like I said there are some caveats if you want to do some GPU stuff it takes much more State than the old school linear convential things and there does seem to be a proposal out there to introduce some different types of generators so there's whether they come to pass or not and they they've been designed to try and have a much smaller footprint so you could do some GPU stuff but the similar property if I see one and I see one again it doesn't start immediately repeating just gives you the more unexpectedness don't know whether it's actually Randomness yeah I think pythons some of you said you've done some python that number Pi switch from using theend Twisters to yet another type of generator so there's a surprising number of way of generating things that appear to be random or Le you go I can't easily spot the pattern even though it's been coded up so it has got a pattern so it's not random yes so some details about the proposal and it's just basically making the point about it's taking up a lot of space and there there's some situations where you want something called quy random numbers anyone heard of okay so pseudo random numbers aren't random they're generated by a program and if you know what the seeds are you you can get the same sequence back out again quazi random numbers are the same but there'll be some situations and I've seen this in finance where if you're expecting a normal distribution if you draw like plus .1 well you want symmetric results in your simulation around the mean so each time you get a plus n.1 you want a minus 0.1 as well so you generate these impair and there various ways that's if that's just with one sequence of numbers if you're doing things in 2D space or 3D space you might want equally likely places in space or certain distributions so the quazi random number generators will tend to return things in pairs so you if you get a plus Val X you get minus X as well or something like that so we've got pseudo random numbers andless other thing about quzy random numbers which you could use some of the adapter engines to do things with or you could write code yourself and go well I've just got plus 0.1 out of my engine so I'm going to return plus 0.1 then minus 0.1 and then I'll draw the next one so it's quite easy to write code around this yourself but it if the proposal were to come about we'll be able to do this slightly more efficiently so let's do some hardcore maths now we've done some multiplying we couldn't face adding up because it was too early in the morning but we did do some modular arithmetic if we take a value of x and do x squared and then subtract one the starting value of x can make a huge difference you can see if you start with one it pings down to not minus one not minus one very very quickly so if we start with KN we know what's going to happen if we take a quarter or a half it takes longer to collapse down play with this on pencil and paper if we did some magic instead of varing the start number let's start with zero let's keep it simple because it's early in the morning if the number we subtract if we investigate those who knows where this is going one or two hands if you use a complex number there I don't know if you remember or have used complex numbers before if you haven't fine just think of it a number of two parts so we can plot them like an X and A Y it's either going to cycle around collapse down to something really quickly or expand so if we color it black if it collapses down or give it various colors as if the number expands out of hand we get the Mander BR set and some of you knew you knew where that was going didn't you you said that oh actually I I said at the beginning Randomness and Chaos were completely different the point about this is that was a really simple equation we're just squaring a number and taking something slightly more hardcore than just multiplying by a constant but not much more hardcore but unless you know precisely what the value of sea was to begin with you the nudge from a blue region into a black region is minuscule and I think Loren started spotted this first when he was playing with some modeling some weather conditions they printed off the values as floating points up to eight decimal places obviously there are a few more in the computer as it was running the simulation and then when he turned it on again the next morning had typed in that slightly less precise starting number this tiny change this Butterfly Effect gave totally different results out of the weather simulation so a tiny change in the start value in a deterministic formula gives you mindblowing chaos but that's not the same as random but it's a bit like our pseudo random stuff because it it's not random I said I don't know what random means anymore and perhaps you all come out of this going oh you haven't got a clue either which is fair you can go crazy you can multiply x² by two and then see what happens for some of the cryptographic random number generators some of what they're doing is something squared multiplied by something so much more hardcore than what we're doing this morning we're not going to square anything just multiplying a modulo we play with some of these recurrence relations get loads of interesting things going on how do we use them well yes badly I've got Hammer bash whoops let let's have a little think together how we doing for time about halfway so talks about seeds we know for the linear Cong renal one that's the first value of x and then that gives us the following ones and though the mend twist is far more complicated you can give it a seed or a sequence of seeds because it's got all this stain like I said so what do you use to seed it some people say no I've got a sequence of regression tests for the stuff I've got random numbers around and I just use a known seed anyone do that I mean that's that's quite a common thing for people to to do you might find that on different operating systems you get different sequence of numbers out you might find if you upgrade your compiler you need to rebase all your regression tests if you've set them up well that shouldn't be a problem shouldn't be difficult but using the same seed will give you the same sequence of numbers under some certain circumstances so just be aware i' been reading through and reviewing several books recently particularly for Manning Publishers I noticed loads of people said for some machine learning stuff loads of people said oh I use this seed then I get this like you haven't told me which version of pandas or python or C++ you using and I've got totally different numbers and I'm not surprised but we usually do say what seed we use but you need to give more information than that if you're trying to give someone a repeatable experiment say like what version what operating system just bit more than just the seed threads can make things really confusing right if you've got a random number generator and you got several threads drawing from it you don't necessarily know which one's going to get which number next but I mean that might make things look even more random or or surprising or unpredictable and if you're trying to use C's Rand then you're going to potentially get in a mess I suggest you don't maybe if you're doing C++ don't drop down to C use C++ random instead some of you said you knew some python if you don't it's fine suppose we want to roll a dice in any language I'm going to have to include my random library and I gave us two questions to concentrate on earlier on so in Python it uses something like the current time I think could be wrong wrong to see things so if I was to run this program twice I might get a different outcome and also is the range half open or closed well Python's got two ways of asking for a random integer one is the close range so when I say randing one six I get numbers one up six inclusive and they're all equally likely but it's got a Rand range as well which is half open so then I need to see one seven so watch out for the boundaries and do I need this to give potentially a different outcome each time or not is it seeded or not if you use seiz Rand which I wouldn't do anymore because I have to think too hard it's really easy to go oh well surely if I just get the number back having seeded it with the time or something and do modulus six then are simulating rolling and dice the trouble is up to Rand Max I might not have precisely the same number of numbers in each of the six buckets so I've skewed the distribution if I do that now it's not beyond the width of man or woman to go for the formula at the bottom but you're going to have to concentrate on working that was just seen in Python you can easily ask for a number between one and six and with a uniform integers in C++ you can say I want it between one and six and need to do the right thing for you if you see anyone suggesting if you want equally likely number between one and six or 1 and 10 use modulus rant away because you're going to make one of those numbers or more less likely unless you've got really lucky with your number of buckets you want to carve things up into so if you see modulus signs going on around using random numbers possibly a bit of a code smell might not be but in most cases people don't know what they're doing which is fine let's help each other out but if your language does things properly for you then use that rather than doing it yourself so let's roll a D in C++ anyone use the C++ random library that was introduced years ago so actually includ random you can ask for a default random engine that's probably the mend twister that we touched on briefly and I we can ask for a uniform int distribution using numbers between one and six inclusive there's a uniform double distribution that is half open but that's because doubles are quite diff let's just roll dice easier much easier and then so we've got to have two things we have the generator which does something like C's Rand for us but if it's a mend twister it might get one some stuff one and some other stuff and then we want the distribution which is a ma matical function or another way to put it it buckets things up for us smears them out with maths rather than magic that'll give us a number between one and six we pass the generator to the distribution get our next number is this code good two questions is it inclusive half open or up to the six yes we've talked through that what was the other question seed so if I run this twice on the same operation system with the same compiler going to get the same numbers because I've forgotten to say use a seed python will seed things for you and so all some other languages C and C Plus+ will give you the same thing each time on the same compiler on the same off unless you give it a seed so that means you need to find something random but we don't know what random is to kick off the random so the default random engine is probably the mend twister which takes all these bits of state and whether it's 32bit or 64bit and so on which has got got a default seed I don't think the standard dictates precisely which number it is but that I think I found that in probably a visual studio and then it seeds it with this 5489 for us which gives us the same numbers each time so what we want to do is at a third line you can use random device and you can call that and it will give you a random number back except on some older versions of Visual Studio where well there's no such thing as a random number right some early versions of Visual Studio always gave you zero back which might be a random number but in terms of what we're trying to achieve is not much use newer versions of Visual Studio don't do that in theory it's looking at the entropy on your hard drive we're trying to Define entropy in about 10 minutes and then we're nearly done so but if you do so two things seed it and just pay attentions to whether you're getting it upper bound or not also notice and we know this don't we that's a template the uniform in distribution I don't need to actually specify int or unsigned it it can use the parameters to deduce the type yeah yeah cool seed things and the random device will prob probably work nowadays on most things you could pick your own random number like zero and then you might get the same thing each time you could use time as well a lot of people used to do that that's okay I did that once in some of my coding my way out of a paper bag thing I set up five generators seeded with the time in a tight for Loop guess what happened they all got the same time so they all generated the same num so all my blobs did the same thing so it was really boring and I said random numbers meant to make things more interesting so just time works but don't see several generators of the same value possing the same thing don't know if anyone's seen some of the discussions out there about people ranting about mend twist twister being absolutely terrible not only using this huge amount of State being really really hard to see it well it's not we saw the head just picked on a 5,000 something shoved a number in what's all the drama about and we random device seed the engine Bosch now some papers saying this is severely flawed and this is actually true if we give a 32-bit number we're only going to get somewhere a a small percentage of the number of possible initial States if we're just rolling some dice or playing a C game that's not really going to make much difference if you wanted to run a Monte Carlo simulation to work out how covid was going to spread or price of a financial instrument you might have an embarrassingly parallel problem in places so be able to spawn off of thousands of different processes on some server farm and then you might end up with some of your simulations ending up doing the same thing but that's quite a niche problem so I think severely flawed is slightly emotive language but if you just SE it with one number you're going to miss out on some potential first numbers probably doesn't matter if you're just writing games but there is some number Theory and probability in the background here so you can play around with this there actually two ways of seeding mend twister you can just BOS one number at it or you can give it what's called a seed sequence and it'll go through the sequence and fit in the previous X numbers was we said the mend twister uses the last one the one before thought and actually quite a few of them and that's what all the letters in the template were for defining it so you can use a sequence if you use a seed sequence then you can never ever get seven or 13 as the first number and you could prove that of maths hands up if you care one if you care someone cared and that's all right that was a rant about seed sequence if you desperately desperately want to get the number seven out of your random number generator if you don't use a seed sequence and that seed sequence you could do a comma and give it some other numbers if you give that same number just straight as a number rather than a sequence just especially for you that generates seven happy yay basically there's two ways of seeding it if you're just writing some little games and things this is fine it if you're doing lots of simulations like I said several thousands of processes on a server Farm well actually possibly you need to start writing your own random number libraries and things or result to some adapters to make sure you get the variants you're after you can get seven out of it just not with a seed sequence and if we're going for democracy we don't seem to care really some people suggested well if we can't get seven L of it maybe I should do a warmup and academic paper about this which is awesome well first I I think the academic paper wrote a for Loop to Chuck all the things out that they didn't want and V and used a random number to decide how much and then you've got a a bootstrapping problem of I really don't think random means anything anyway the C++ allows us to discard a certain number so you can write academic papers about anything and I've written a few so I should know also if you dig in through what's actually happening the seed sequence does goes through each of the seeds so it is sort of doing a warmup for us right if we just give it one number it doesn't do that warm up thing but if you give it a sequence it will chug through a few of them but look this is huge there's a lot of discussion out there in academic papers and on the inter but send twist is awful because no one knows how to seed it we do cool random device good enough you might even get seven or 13 as the first number if you don't you can use seed sequence you might well you won't get seven or 13 but other numbers are available and if it's doing the maths properly for us when we use the distribution part you won't notice right back to thinking about simple things rolling two dice two generators or one generator two one yeah you could have two if you wanted but one's probably all right I can see some circumstances where if you did like hit two to the 32 repeat on things then you might end up with the same game keep playing but if someone's played a dice game that long they've got a gambling problem rather than anything else if I did the same thing in C++ so the python code got two generators rather than just calling random in directly that's what I was saying about if you use time there one than the other the chances are you're going to get the same sequence out pick a card well you could use 1 to 52 and represent individual cards same questions as usual always think about those two questions probably want to shuffle the cards first if you start shuffling things there's certain problems that crop up surprisingly quickly because this ends up being a combinatorial problem so if you're trying to do some kind of DNA sequencing or something well now we're budging up against algorithms does this Shuffle work if you to write Shuffle from hand and you want to shuffle three cards pick one pick another one Swap and pick another one swap then pick another one swap if you pick one of three and then pick one of three and then pick one of three you've done 27 possible things but if you think it through there's only supposed to be six combinations right so basically unless you really know what you're doing look things up or use things in your languages Library if you pick one card and then disclude that and then Shuffle the remaining one so you walk backwards you don't end up moving things backwards and forwards and you get the right number of combinations and fortunately C++ has a random shuffle well it had a random shuffle and Kevin moaned loads in his keynote about that disappearing some implementations use sees Rand for that and I told you be very wary of modulus of percent going on because that you might not be able to divvy things up equally so that's it's been deprecated because it's terrible and you couldn't seed it directly you had to use C random and you've got problems with threads which leaves us with standard Shuffle and again we need to give that some kind of generator so you need an extra line or two of code but it's not a disaster and here we haven't got that inclusive exclusive range to think about we just go Shuffle this collection by the way here's the generator if we're going to choose well you can choose like three by picking one two three so you don't replace them or pick one put it back pick one put it back pick one put it back and Python's got something out the box to do that sample or Choice can do similar thing in C++ so we've seen the shuffle if I randomly Shuffle things then I can just pick the first three out shuffled pick three good not sure if I spend ages shuffling things if they lots of them bit over the top to just pick three without replacement there was a blog post out there about oh you put it on unorder set use an index but if you've got repeats then a set is going to lose the repeats on things good news there's now a standard sample as well so the moral of this story is things change and if you're trying to do something like sampling or picking one or doing the replacement and you're not quite sure how to do it you never know it might have been introduced to the library and you didn't notice so try and keep your knowledge up to date do look back things are changing and making our life easy iier and harder at the same time we like it C++ there's some depth behind that but we're running out of time so let's not go there if you want to choose one thing of many there's uh discrete distribution and by taking one over the number of things I've made all of them equally likely which is that gives us a way of just picking one and then putting it back but that means you can easily wait things as well if and that's the thing you might want to do if you wanted to simulate unfair coin toss that is twice as likely to get heads that's the go-to thing how do we test things think we frequently end up with tests the testing the properties of the random number generators rather than our code which is a terrible idea so we've talked about seeds and possibly having to rebase things if we upgrade comp compilers which is fine lots of times if you if you set your code up so as you're using a Lambda or something like that just send in some kind of invocable to a function when you test it if you just send in zero every time you want to be able to work out in your head what's going to happen next and I found lots of bugs in some mafy financy libraries because you've got those complicated maths but if you end up multiplying something by some random number loads of it just drops down to zero and you can work out in your head what you expect to come out so that's quite a good starting point as long as you've got a way of sending numbers into functions if your function calls out to a random number inside you've made your life difficult so it's almost always better to either pass in the number to the maths bits you can check the maths or the game you're writing or send in a Lambda and then you can do the for real not actually random we're none the wiser as to what random means yet thing or just always sending zero or positive numbers we've talked about seeds loads but basically when you're testing you're trying to test whether your code does the right things with the numbers you give it so it's frequently worth like I said just sending the random number into the math function because then you've got single concerns going on in things let's just zoom over these I picked a few stack Overflow questions and was going to discuss those but we're running out of time quite I couldn't find any stack Overflow questions where people were saying how do I test this and C++ so either C++ people don't test their code don't ask them about testing their code or we all know exactly what we're doing feel like you know exactly what you're doing if you have got some tests you can do things like just running them in random order that flushes out some bugs really quite easily you can move on to um I don't know if anyone went to Phil Nash's talk the other day but he was talking about property based testing and there's something things where you're not quite sure where you want what you want to happen and it might be okay to leave some random shuffles or something like that in your code but you can look at the properties of what's going on if you were simulating rolling and dice you could perhaps check you got the numbers one to six but if you if you've called your code right you shouldn't need to it's a fine line between testing the random number generator library that you're using and testing your code but have a think about what you're testing just by moving around where the numbers are generated and sending them in you can make your life easier now we've just done like cards or dice so we've had whole numbers and they've been equally likely we've not really looked at doubles of continuous distributions mentioned like weighted distributions on the way through if you were to start getting into like random things in space then trying to work come out of a random angle on a dart board or some Geo physics stuff is mindboggling and we've got what five minutes left so let's not do that the distribution is just bucketing things up for us so we don't have to remember the maths formula if you roll a dice you want approximately one in six So eventually you'd get the oranges but you might get the blues and the more you do the more likely things are to even off to what you expect normal distribution will give you whole numbers and you use that to model people's Heights and things and you get most things around the middle and fewer things at the edge and that's smeared out so the distribution smearing things out with maths the generators doing this definitely not random precisely defined sequence which might be surprising if you don't know what it's up to which means we've got time for a race see this is why we care about random numbers the green blobs all did the same thing this time green blobs all do the same thing the San blobs are picking a random number a whole number it's a number of steps they're always going to go forward a little or a lot and the magenta ones are using the UN normal disc distribution so they're more likely to do the same number of steps as the green but they might do more or they might go backwards if I can find the M pointer and they're off looking like we've given the um normal distribution ones a slight Advantage but I don't know one of them came first and one of them came last but I mean on average they they all had this fair chance but if I to run loads of demos we would expect something different to happen every time if I paid attention and Seed things properly yeah so we're just down to five minutes left I talked about testing the random number generators and there's some formal tests for that one of the early ones was called Die Hard some joke about dice I guess as die harder and other things there's lots of statistical things going on in there but even if you do statistics like the K squar test the ones on the left are that you can you could predict where the next ones are going to happen so that's plotting one number against the previous number and that's quite a simple thing to do for any random number generation of thing and the the spectral tests give us a way of doing that algorithmically without just looking at what happens and that there's a random.org website that you I guess intuitively you can see the one on the left looks random where the one on the right's got some lines going through it still don't know what random means but there's a battery of tests whether they Define random for you or not I don't know we've not got time to talk about um crypto sudo random numbers so cryptographically secure the internet tends to say things like use o entropy to seed your class but we can use o entropy with random device to seed our pseudo random classes or I'll tell you now is they do dizzy things like x squared and some other magic and it's a huge topic we didn't Define what entropy meant was some maths behind this it's a way of saying how surprising an outcome is perhaps surprising or uncertain is better than random or I can't spot a pattern can plug through and get a numeric value between n and one what it's really doing us kind of telling us if I can compress this down to a pattern so if you use windzip or other zip programs are available if you can compress something more then it's less unpredictable if I can compress it right down then it's very predictable it might be a file full of zeros compress that loans so maybe something about compression or can I encode this as a pattern and there's an idea called conglomo complexity which gives you a way of measuring how easily you can encode the pattern that you can see and this maybe is more what we should be talking about if we want to Define what random really is but the important thing is that we've managed to code our way out of paper bag answer the two questions cryptographically secure things go wrong in loads and loads of ways and it's quite interesting to read up on if you want so some links in the slides for another time people trying to use quantum Computing to generate truly unpredictable numbers that's why it's ended up writing talk I've been reading the book does gold play dice so Einstein was like I don't think I believe that some that decay of radioactive materials is random because I don't think anything in physics can be random maybe we just don't know the initial conditions enough which now feels like the chaos thing we touched on can anything really be random well I refused to answer that question because I can't Define random I'll try and Define random first and we're kind of out of time really time for one more demo going to add some jumpers here so same deal as before but now I've got some blue ones and they can cheat every now and again they go boom I'm going to barge ah head who's going to win this time the greens are just doing their thing they've all got the same aage average apart from the blues they've got a chance to jump can you see one jumping oh there we go and I think one of the S Genta ones just went backwards and and all safely out of a paper bag and I think on that note we're done just say I wrote a book ages ago there's a machine learning conference going on downstairs so perhaps we should Gate Crash that and ask them proven questions about random numbers loads of machine learning in AI stuff the core of it is a fall Lo doing something random that just tries to nudge left or right a bit to get better if you can't remember how to do any C++ and you want some practice with some random numbers and other things and writing a book for Manning it's gone on a production run as we speak there's a discount code there which you can use to buy other books from rning instead and that's not got a time limit on so share it around your friends if you want and we've got zero seconds for [Applause] questions or possibly some minutes until they want the room for someone else anyone want onl no questions ask questions or nobody need anyone want say anything ask anything run away well one over there um yeah so the the question now is for big random numbers so our all of our seat based generators we've seen have some kind of modulo that defines the max amount of Randomness we can reach yeah within each step and if I now need to extend for I don't know in 64 size random number do I need to create my own generator or can I somehow use these pseud random number generators to concatenate multiple random numbers to one big one I am sure that theoretically you could concatenate things I'm sure if I tried it I'd get things wrong the first few times the mend twister the default one is 32bit but the second parameter you can request 64bit I think you can ask it for 128 but you're going to hit it depends on your compiler at that point but certainly the the mend twister the second parameter you say is 32 by default but you can definitely try bigger numbers but at some point theoretically then you'll want even bigger numbers possibly but some of the stuff in the library you can ask for 64 bit values and possibly larger ones not that I've tried doing that yeah I mean if you start combining things like go carefully and make sure you've got some tests around it no that's a I'm I'm going to play with that but I'm not sure but you you can it's it's not just 32bit stuff you can get 64bit stuff and possibly bigger stuff out of the box definitely okay thanks I oh there's one at the front more more a comment um back in the day when we had 8bit computers you lucky person yeah I remember H you'd write games uh with 1K of memory and of course you'd have to use the random number generator to generate the the the the layout of the of everywhere and and you had to have the same seed every time so that you'd have the same rooms and the same monsters and all this kind of stuff so they were great yeah I'm I got into Computing on the programming on a BBC model B right like Pac-Man and then tinkering of the code like gave myself of a hundred lives and things but just simple random things even if it's not random we never get seven out the first time you can have some fun with this so go have fun but like if the same thing keeps happening you probably forgot to see your random number if you never get a six or you accidentally get a seven when you're rolling your dice you forgot that other question about the bounds and that's it really but test your code that's me done