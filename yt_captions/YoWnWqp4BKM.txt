in this video I'm going to be showing you a very nice optimization that you can use with classes and this should improve the overall performance of your classes if they have some very heavy computations that you need to make over and over but for this example I've gone ahead and created a calculator and the calculator takes initially a list of values which can be of type integer or a float and based on those values we can then perform some operations such as grabbing the sum of them or their average and each time we call these methods it's going to print getting the sum of or getting the mean of anyway let's go down and let's create some numbers that we want to use with our calculator so numbers of type list of floats is going to equal this list of numbers I'm going to copy and paste in what I had earlier so we have some numbers that we want to perform some operations on then we need to create an instance of our calculator so we can use it so here we'll type in calculator of type calculator it's going to equal a calculator and we're going to pass in our numbers as the values so next let's print the sum of these values and to do so I'm going to print calculator sum and if we run this we should get the sum of those numbers as you can see we're getting the sum of all these numbers and it's going to return to us the sum but now let's pretend we did this calculation somewhere else in our program this is still the same object we're still running the program and we're calling it three more times well what you're going to notice is that it's going to get the sum of them three times it's going to compute it three times but why would we want the compute it three times if the result is always the same so this is where I want to introduce to you the concept of a cached property because once again we're returning the same result each time we call this method so why do we need to calculate it each time the result is always going to be the same so let's see how we can fix that using the cached property and first of all we need to import this cached property and we can do that from func tools so from Funk tools import cached property and the reason I'm very excited to show you this decorator is because it's literally free functionality if you're using a method over and over and it always returns the same result all you need to do is annotate it with ADD cached property now sum has become a cached property and one thing you need to note is that it's no longer a method which means we cannot call the same way now we refer to it as a property so if we remove the parentheses this time and we call it three times for example it's going to perform that expensive calculation once and then it's going to Cache the result so next time we call it we're only going to get the result back now we're not summing it each time we're literally only returning the result of the sum and this also works for the other method which right now we have mean and we can actually just go down here and say print calc dot mean right now we will do it with the method call so if we do it three times we're going to calculate it three times in a row which is a waste of resources because again the result is always going to be the same so let's annotate that with cached property as well at cached property and we need to remove these parentheses so that the next time we want to calculate the mean it's going to only calculate it once and then it's going to give us back the cached results and that's brilliant because now in our class we're not wasting any resources on calculating that over and over so if you have tons of objects that always have the same result when you perform a calculation using add cache property is an absolute win and in these examples these are rather small methods so it might not make much of a difference in the long run but if you have something that actually takes a lot of setup maybe even a couple of milliseconds it might be worth saving those calculations I mean why not anyway that's actually all I wanted to show you in this video it was that simple if you have a method that performs a computation and always returns the same result based on the data that you've provided to that object use a cached property it's going to Cache it for as long as that object is alive but otherwise with all that being said as always thanks for watching and I'll see you in the next video