there's a parsing theme as devotees wanna and there's a regex theme and our aim in the end is to unite these all into one at the top so that you're all totally happy or completely unhappy as the case may be we have done regular expressions and the last one i did was really very simple and straightforward and shows you absolutely nothing about what can go wrong and some of you out there coming up with the usual old jokes quite right about uh oh you're implementing using regular expressions now you've got two problems yeah um we'll look on in glee as we now take the story a bit further and say see what can go right and how powerful regular expressions are but also a little bit of what can go wrong and why you've got to be somewhat careful in your use so what can it be this marvelous new example that consumes life the universe and everything and exhibits a whole load of new features and you're going to be quite convinced i'm off my head it's roman numbers way way back when we first here at nottingham got lex and yak in unix version 7. it was in the late 70s so believe me i have been or back in those days i was setting rowan numbers as an example of what lex remember the regular expression based front end to your compiler does your identifiers and all that i thought all right as an exercise just write a regular expression that will accept roman numbers all the good ones and reject all the bad ones now i can't emphasize too strongly that rider is important it is very easy in a regular expression quite easy to get it to recognize what you want but will it reject all the stuff that's bad and it is sometimes so easy to overlook i say with shame because when i set that question i scratch down a quick and easy answer which i now see is full of holes because if you import into my regular expression i m-m-i-i looking ahead roman numbers m-m-i-i 2002 fine but then i thought well i thought now i didn't think then what happens if i do m-i-i-m 2002 shouldn't be there's a strict hierarchy in the way these work so at this stage we don't know how much if anything you remember about roman numerals so as an extra bits we've put out a simple tutorial on roman numerals based around this example but for those of you that are totally happy with roman numerals we can just carry on with the main video now so just to locate ourselves then and do a few examples to make everybody comfortable i'm going to write down m c d x c i i start at the left we've got a thousand then we see c and remember this is one of these subtraction things cd is a hundred less than the 500 which is 400 mcd so we're at 1400 so far xc okay that's 90. 90 iii 1492. what happens in 1492 sean in western european football columbus discovered horizon's new in america i should have known that one yeah right and of course the year we're in at the moment as we film all of this is that simple mmxx 2020 one that is dear to me i'm sure you'll work out why yes it's got a lot of these pre-pended abbreviation things in there look mcm 1900 xl 10 less than 50 14 iv 195 1944 let's focus ourselves now on how would we do a regular expression for all of this in fact let's make things very very simple and say all i'm going to do at the moment is concentrate on getting a regular expression pattern that will either generate me one or two or three four or five forgive me i'll carry on down here or six seven eight or nine and i won't go any further than that because tens is a new adventure further to the left so those numbers then from one to nine which i've written out like that now i hope you can see that if you're completely simple minded about this and don't want to do complex regular expressions you really could write yourself a great long alternation as it's called in other words a great big sequence of all and you could do everything from one up to thousands and just have this walloping gray or clause that your regular expression pars will probably go bananas and say too many alternations or something like this so no that's not the way to do it what one wants to do is to generalize and use as it were elegant regular expression capabilities to shorten this a bit so there we are the roman numbers from one to nine all written out first of all let's try and separate these things into classes and groups that make sense there are two weird things which involve the subtraction rule you know like iv one less than five ix 1 less than 10 i think we'll do those together because they're weird in the same way if you like the other things are much more regular like you go from one two and three which is with i i i and similarly here you get the same pattern but coming after a v a v on its own or v i v double i v triple i and so on so we've got three groupings things involving eyes with or without a v in front of them and the two special cases ivy and ix so i would conjecture that's a wonderful piece of regular expression covering so far what we've done but something new coming up so do pay attention would be this my re is going to be i now this is square choice brackets we have seen these before but whereas before i put ranges inside them you know like a to z a to z anything naught to nine any one of those digits these aren't ranges these are just explicit possibilities inside square brackets it's called a choice so i've got to have an eye if i'm on this side of the expression but then it could be followed by either an x or a v but it must be one or other of them and only once there's no repetition outside there's no star there's no plus no nothing so those are the special cases taken care of the four and the nine now we put a walloping great big or bar down the middle or if it's not a special case it's a regular straightforward case but we've been clever with our rvs now oh yes look at this now again i think this is something we may have mentioned but probably not another piece of regular expression notation is if you put a question mark after something it means zero or one of so what i'm saying here is i could either have a v or i don't need a v wow can you not need a v well what's following on here is going to be something that really is new this is accounted repetition in curly braces zero hyphen look at that bound to win an award let's just run through it the two special cases are off on that left hand side of the ore bar but if you choose not to go down that route you go to here and it says ah well if it's not one of the two special cases then it's like the following anything between zero and three eyes i mean you may not have eyes at all you can just have v on its own if you want preceded by an optional v naught or one v's that's giving you the choice of either one two three or five or six seven eight right yeah yeah that's right but it's all to do with sometimes having zero of something now hereby hangs a tale about regular expressions and those of you that keep on posting these notes notices about you've got multiple problems with regular expressions well here's another one it's the strange case of the empty alternative which really can gang up to get you because what you're seeing here in this expression is is it possible for it to match nothing at all and yet that's a valid match yeah it is because if you choose to ignore what's on the left of the all bar here which you can do it's either or we come here and we say v i can have zero or one of those so let's have zero of them the i i can have anything between not three of those so let's choose zero of them so in other words choosing nothing followed by nothing is a valid match for a roman number and if you think about it as true nothing in roman numbers is compulsory you can have m's no ends you can have c's no c's you can you know all of them it's all optional but as you start getting down to the units digits you think i gotta have something the paradox then about roman numbers done as regular expression is you've got all sorts of cases that yield you nothing at all and yet you're going to be very disappointed if you don't have something but saying overall you must have something that's not a context-free assertion that's a context sensitive assertion so we live without for the moment and i think also what i'd like to just show you now if i can get the screen fired up and i'm using ork here to demonstrate this i'm going to add yet another little piece of notation to all of this i'm going to say that you can if you want to insist that while you're matching must just be a valid roman number on a line on its own with no writing or messing about on either side of it just the number start of the number end of the number finish right and you denote that by saying start of string anchor end of string anchor you're basically saying whatever pattern there is must fit between the start of the string on a line on its own and the end of the string of the new line right at the end now this is the key thing about this those things if you put them in are not options you can't have zero of the main if you say you must match the beginning of line you must match the beginning of line if you say you must match the end of the line you cannot ignore it you can't have zero of them so in a way this is a kind of reality check and it's generally the case if you use these correctly you won't end up with null strings being a pseudo match because this thing is saying well whatever the finite length string is it's got to fit between beginning of line and end of line here's the awk script that i hacked together to try out a few alternatives and i decided to go for this simple little piece first can i do everything from one to nine in a single piece of regular expression and you'll see here this is classic org you give a regular expression pattern then you give an action it's a c like syntax even in awk basically what i'm saying is if i match that then i print out pattern p1 matched and so on now if you look down here four of these things because this is just a test bed four of them are commented out they will not be executed the one that will be executed is the one i've just been discussing with you here which says i must match start of string then here's my regular expression pattern which i think will work from one to nine inclusive and then it must match end of string so i'm hoping that by uncommenting this that this will work and i'll type some good and bad roman numbers at it and for everyone it's happy with it will say pattern p0 matched is and it will echo back what it your roman number that you put in so what i want to do now is actually run that script that we've been looking at awk minus take your instructions from a file call org testroman.org so when that runs now it should just hang there waiting for me to put in a roman number and remember it is going to match that beginning of string piece of regular expression and the string so which one do you want me to try first off let's go really simply and just go for a number five v all on its own look at that pattern p0 matches five all right a bit trickier four because it's got that minus one sort of idea well let's put one in that doesn't shouldn't go on there what do you want typing um just put in um c for computer file oh c for computer file now you might say well that's a valid roman number yes but it's not been covered by the bit of regular expression i've done i've done a piece of regular expression that literally i hope there's one to nine and nothing else let's see what happens there it echoes it back but it doesn't do anything with it so let's now try 9. looking good all right how about the ultimate test is type in something utterly idiotic like hello no doesn't do anything with it doesn't recognize it so we're back showing the orc script again and let me just remind you that what we've shown is that as long as we put the anchors in at the beginning and the end of this pattern then our minimal testing but i think we've tried all the options it's recognized v it's recognized i x iv all this stuff that one is absolutely fine and it rejects rubbish i've actually put in as a comment stack overflow's assertion that this is the thing that's the answer to life the universe and everything let's move right across the right and the first thing you'll see here is the piece we've just done for the units as it were i through to ix but as you go leftwards can you see that the beauty of this is that has handled the units part of the roman numbers it's dead easy to see therefore that it's like a repetition of the same idea but with different symbols when you come to the tens range what are the exceptions there xc 10 less than 100 xl 10 less than 50. it's just like the i's and the x's and these were before look similar x or c l or it is an optional l for 50 followed by a tens digit zero to three of them you can't say just one to three because l on its own is perfectly valid as a roman number so you see that piece of pattern similar to the far right one but just with a re-labeling almost of the digits you're using that copes with the tens up here is coping with the hundreds going on to the thousands so the story finishes off in here by saying oh you can have cm for 100 less than a thousand 900 in other words cd for 400 and the midpoint of the range which everything pivots around it was v there it was l here it is going to be d here i hope you all know that d is 500 numbers so there we are have it you see three very similar pieces of pattern for the hundreds the tens and the units and right out here at the far left m star an m still means you can have zero or more one thousands so we've got the basis there for something that looks like it would do everything the only problem is these empty matches but that's such a big problem we probably want to have an episode devoted to that all on its own the man goes to town as we would say to town the man goes sounded to me 20 years ago when i first stumbled on this very much like yoda the jedi master for those of you coming into this cold and direct because you saw the word yoda and grepped over the entire universe