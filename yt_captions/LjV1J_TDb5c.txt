thank you for you know being part of this thank you for coming today Olaf for really looking forward to your talk which actually is about rappers number here um so let's take it away and see what you have to say thank you so my name is uh Oliver and we're going to be talking about sandbox games using webassembly and C plus to make a a simple game simple game that's kind of the the main point here today so yeah that's the answer introduced my name is I am a senior software developer at turbo secas here in Norway you can find me at Oliver W on Twitter while that's still a thing which is also one of those one of those things you can yell at me afterwards um I work for turtle Tech as we are a consultancy and training company we do all sorts of consultancy work we also do trainings at conferences so if you are at C plus or similar conferences you might see trainings by us so if you do see them please join and also talk to your companies about trainings um I like to it's been kind of a theme year for me to have these philosophical quotes in the beginning um uh and and I like to have have these philosophical quotes to start with um and here we have I must go forward where I have never been instead of backwards where I have and uh that's of course Winnie the Pooh Winnie the Pooh lovely lovely guy um so let's do a little uh what this talk is and what this talk isn't um this is not going to be a game development talk or a game design talk um so a while ago how this talk actually started to um how this talk came to be I was making a game using webassembly and just figuring out what's going on what these things are and I I hit my head on a whole bunch of walls along the way and I kept notes and they saw basically the notes that I I uh from that session or sessions this is also not a comprehensive talk about webassembly that was another thing that I found when I was going through webassembly is there's a lot of talks about it especially simple personal assembly but those talks are very in detail like one person took I think GCC and converted GCC to webassembly so they're very like nitty-gritty details this is more pragmatic this is more I want to do a Hello World I want to have a little project um where do I go from here and what you'll get with this talk as well there's a bunch of links at the end you'll get a bunch of like simple small starter projects in various stages of of development so you can pick and choose and look at or adapt to your to your needs um oh yeah thank you for the talking about the people liking the test slide that's very good um so yeah the idea to be pragmatic and learn what this tool has to offer because like with anything else this is a tool repossible is a tool like anything else so so let's look at the problems we can solve um so let's start with what is webassembly uh how can something be neither web nor assembly uh because so webassembly is a binary format um yeah kind of kind of an asterisk on that one uh because so it's a lot designed to allow for performant execution of code within browsers that's kind of the initial idea it was announced in 2015 we have a working draft in 2018 a w3c recommendation in 2019 um so it's relatively new although like the history of it is a bit longer than than that and a nice way to think about web example in the beginning is think of it as the target output of any language it doesn't matter what the language is representatively as a Target output um and even in recent times you can execute webassembly outside of the web so again it's not not necessarily web but uh it's a type of a execution environment if you think of it that way um so the text version of web assembly kind of looks like this you have a function called add it takes in two parameters here called zero and one and it returns an i32 so you can see that it has types it has name for functions it has some sort of maybe you can think of it as scope you're adding two numbers there so you're fetching the local variable of one and zero you're doing an ad and it's a stack based language so the last thing on the stack is the thing that is returned so the last thing on the stack here is an i32 ad of these two local variables so that's the thing that's being returned so if you're reading through webassembly that's kind of how how you read it and we'll see way way more complicated ones and this is this function basically so adding two numbers together cool okay so many of you might associate webassembly with games uh and even yeah this talk is going to do that um yeah where possibly is so much more and and you'll see you'll see what it has to offer um I use games mainly because uh it it ticks a lot of the boxes that you might want from an execution environment it's executing code it's doing something visually it's it's maybe getting input from from files or or keyboard or mouse or whatever um so it's ticking all these boxes but but don't focus on games uh even though we're gonna do that here today um so here are some examples that you might think of uh not think of that are written with webassembly um winter calculator so someone took the the code for Windows calculator and converted it to webassembly um I think Microsoft open sourced the calculator a few years ago um and yeah someone just made a web assembly executable from it then here we are that's uh the calculator uh if I remember correctly the whole thing like the whole website thing is not webassembly but there are parts of it that are reversibly so it this whole thing is not representably but a lot of things that are happening here or um someone made like a Photoshop like application in web or something and then later I heard that uh Adobe might be doing something like that or are doing something like that themselves so yeah you can make an application like this and again it can just be the code so tensorflow.js the machine learning libraries has a webassembly backend so that's been pretty performant as well here is I think this is protein folding if I remember correctly so there was a website that does like these protein foldings and you can like you can lend your computer to help with protein folding and they converted some of their stuff to webassembly and got a 20x speed up um the 20x beat up is is pretty high so don't expect if you convert your stuff over simply to always get a 20x speed up I'll show you some caveats later on with that um so let's start with M script then so what is M script then because this is webassembly before webassembly um so we originally had asm.js from Mozilla it had similar goals to webassembly to run the phishing code on the web but it was a subset of JavaScript so you would take your low level code compile it with asm.js you would get JavaScript out and that's the thing that would be executed and that that's where M script and came to play initially was to help with converting your your lower level code into asm.js outputs um an M scripting is the tool that we will then be using because they can also Target out um webassembly so M skating is based on llvm and clang so that's the tool sending you have um and you can get many different types of outputs the files are called Vasan files or dot wasn't you will also see uh dot JS or JavaScript files and Dot HTML uh in the stock so let's go over the installation process so if you were going through this and and wanted to set this up yourself so in this example we're going to use vs code that's the editor um I'm using wsl2 you're using Ubuntu 20. um here's the code if you want if you want to take a screenshot and look at it later it's on my GitHub called Talk ACC webassembly so you can do a suto of your favorite packet manager which one that is we at least need Python 3 cmake and git that's kind of the base we need for this um we will clone the M script then uh repo called emsdk we can go into the folder we can do a git pool for a good measure where if you're doing this later on um there's a script there called emsdk called emsdk and install latest and this will then install the latest version of M script and into your machine it's a similar setup on meters or similar scripts so and this will this will take a little while but don't worry there and then you activate the latest uh it's one of those where you can have different versions installed and you can switch between them if you want to do that and there's also an emsdk environment script you can Source it now or you can put it in your pass RC or something similar or put it in your in your path in Windows um yeah that's a similar one for Windows as well what this will do is this will bring the M script and compilers into your path which is kind of handy so you can say EMCC version and you will get this kind of output or something like this you can see M scripting is a GCC clang like replacement and some information and I can also say which EMCC and it's in some home folder that I have if the msdk and then yeah the the script is there somewhere okay so now we basically have most of the things that we need to start developing so what should we do um well it's the time order tradition right we're going to do a Hello world right um but there's a couple of more steps there's a there's a few things that we have to think about um so this is hello what I'm going to do I'm doing in the C just because I thought it was a funny way to do hello world because most of the rest is simple Plus but yeah here see include studio uh printer fellow world and return zero right um I can compile it like this EMCC hello world C able it will compile everything is Happy the output you get looks like this you have a out.js and a out.wasum okay so what is this what can I do with this thing well not much what you can you can actually if you have an application called node node.js you can actually run a out.js uh at least in this state of the application but we want something else we want something more and what you actually do is you say EMCC hello world.c and you say that the output is going to be an HTML file which is pretty pretty weird for for some I mentioned and what you get is a Hello World HTML and then the the two files from before the Javascript file and the Boston file so yeah we have an HTML file we have a browser so let's uh open it well it's pretty long 1300 lines the HTML file and the JavaScript file is 2400 signs so what is this what are these files what are they doing um because this feels like magic right I get some awesome file and then I get two huge files and and I'm not I'm not happy with that I want to learn why why what is this what is this doing so let's do that um yeah with note you can run the JavaScript file just fine um yeah let's open the HTML file should be no problem right no so this is the first wall you will hit um because of course there's a problem browsers don't like opening random files from whatever location you decide that's uh that's the thing there's a thing called cross origin resource sharing or course so by default browsers don't like loading external files from disk because if you double click on the file it's going to open the HTML file fine but all the external dependencies the Javascript file that we made the dot wasn't file that we made they are external files on disk and the browser is not going to allow you to open them so what you then need to do is to run a web server so for hello world yes you need a web server um so Ms kitten has a tool called em run and we will use that tool for for fewer for examples it's a very very basic web server so it's it's fine for development but as soon as you get a little bit more complicated you need to replace it with something else like an actual server or some some development environment but to begin with VM run that's fine they will do your your thing uh you can run it like this em run you give it a port you say hello world.html and it looks like this so we have our little hello world I can research the canvas and you can see uh so this thing in here in the middle is the canvas and here is the output so if you have any uh printable output using printf or or C out or any of those things when you're running it and developing and refreshing and doing that iteration you'll see the output there so hey we have hello world we should be happy right okay so let's look at the game we'll be making um and because I talked about that this isn't going to be a game development talk um I'm not going to go into Super detail of how the game is made just we can look at how it works and you can look at the code afterwards and play with it that's totally fine you get full source code access to the game so the game we're going to make is a simple Sliding Puzzle game similar to games like threes and 2048 if you play those games so it looks like this so I can press up and down on the keyboard and new boxes will appear but if I then slide for example to the to the left those those two boxes will join if I slide down the the twos will join and then therefore will join and every time you do a slide a new box will appear so you can like you want to try to create like a really big number so here I've got a 16 second a four I got the 216 so I could slide down to join those two sixteens Etc that's the game so we have some something visual we have some code we have some State we have some input that we have to deal with okay cool so let's convert this game over to webassembly because currently this version of the game is in JavaScript it's only JavaScript and HTML and nothing else um so there are two ways to do this we can keep the drawing part of the the game in JavaScript and do the logic in the the state management and all this in simpleplus or we do everything in super plus even though even that drawing um and we're actually going to look at both and we're gonna we're gonna hit some more walls in the way um so let's look at some of the functions I mean if you're converting stuff over let's look at the stuff we have to convert okay um some of these functions that we have even in the code don't even need to know about game State they they're just general utility functions so let's start with them right sounds like a good idea so here's two functions in the in the auto script version uh we have a get random coordinate so when I create the new box we need to find a random place to put the box so I get a random coordinate and I can also ask the question are you outside of the box which is just is the X bigger than the length of the board so I'm just testing so you don't go outside of the board so these are pretty simple functions so let's create the C plus version so here I have I include M script in the rates so after you install them scripting from before you should have access to M script and H I create a context per variable of Port size I create a function called Ace outbounds takes an X and A Y the body of the function is the same we have a thing there called M skit and keep alive you'll see why we need this in a second and I also do an extern C and the reason for extern C sorry is um because we need to access these functions from outside of the Watson file because we don't want the name muggling to happen so we say external C of the functions so it's and it's only for the functions you want to expose so basically think of this as the things you want to export and this is the whole file this is the whole thing um and this is the thing that we're going to compile and this is why we need M script and keep alive because this is the only function that's in the file there is no main function and there is no function calling this is outbounds function so we need to prevent that the compiler will actually optimize away this function so that's why we have abscape and keep alive these are just different uh different ways to prevent the compiler from from deleting our function we compiled it this way so EMCC and G that's the source map you'll see why in a bit we need that we say no entry this means that there's no main function and I also say Dash as standalonewassem and this is the the thing where I want to make this HTML and JavaScript file myself so it will only give me a DOT wasn't file and this all this other stuff I have to make myself I gave it the name of the file and I say game logic HTML and we're not going to use that HTML file we're going to make our own things so because we want to know how this works we want to um we want to learn what is actually what this is actually doing we make our own HTML file and make our own JavaScript file and in our JavaScript we do this we say import object this is an empty object we call Web or simply thought instantiate streaming we call that on the game logic wasn't file and this will then load the file in the memory and we give it an empty import object and at the time I had no clue what this import object is so let's learn what What's Happening Here um this is an asynchronous function so I do a DOT then and I get results out and within those results is the instance of the Watson file and within the instance of the Watson file are the exported functions and within the exported function is our is outbounds function and what I can do now is because then I can say VAR is out bonds is equal to this function there and then I could just call the function so I can use S outbounds like a regular function I can give it two arguments and it will do its thing um and here we have webassembly running and it's just this one function and nothing else um so cool we are happy we are moving along Breakneck speed so let's do the next one right we did we did the first one and now we're going to do the next one uh so the next one is get random coordinate this is to find out where we are on the map so it says math.floor and then math.random okay cool seems simple enough no it is not simple enough because where we are going there is no operating system so this is kind of the idea of the sandbox that we have because with the Standalone Watson file there is no operating system level functionality it is only that file and only that one function that we wrote into it you are all on your own kinda um so how do we solve this problem so if you want to use random if you want to call timer functions many other operating system will have a functionality it has to come from somewhere right so thankfully there is a solution to this where if you build that the Javascript file that we saw before in addition to your Watson file that's the JavaScript file is your gateway to the operating system if you think of it that way so you can actually then call functions on the C plus side over two hourscript JavaScript will do its thing so you have exited the sandbox uh JavaScript will do whatever it wants to do and then it will come back into the washroom and then you get the results and so kind of think of it like a syscall that's happening here but instead of being assist call in an OS it's a CS call where you're going to the JavaScript world and then going back but yeah how does this work can we do it ourselves um there's a function within Amsterdam called M script and nantum and this is just after I was Googling like how does this work um and it will generate a random number between zero one and it says here this maps to math random okay this looks great but how do we use it so what I did was I just said okay get random coordinate return and Scranton right this compiled I was happy like okay let's change the the JavaScript part here you see here you see the whole HTML file I just say same thing import object it started streaming I get the results I get the function and I would like to print it out control log like what happens when you call this function I mean it seems sensible right but no it doesn't work so here it says web or something instantiate import module and error module is not an object or a function and this error kind of doesn't make sense if you if you ever happen to encounter it um and what it's saying is that this import object here that's the important bit I'm sorry if you can hear my cat snoring oh that's okay she's sleeping very nicely I think um so this import object this is the link between the the wasem world and the hours with world so it was asking for an object called NF so I'm like okay let's put an object called and in this import object does that work does it change anything well yeah it changes the error message it says module and function amp scripted random error function import requires a callable again this doesn't make sense so what's actually happening is if we now look at the bottom so this is the whole file there's nothing else there in this example I didn't have the other function just to simplify what's going on but we've only like the thing I showed it before is we've only looked at this part there's a function it's called something um this one doesn't have a return value and we we do some work but look at this line over here it's we say call n m Scranton so what is that so the thing that we haven't looked at in the Watson file is the top part we can think of the top part as the the module definition or the header or something like that and you can see that on the second line there we are defining that there's a function called nskinton which is going to be imported it's going to be an in an object called NF there's going to be a function called amps with an Anthem and it's going to return a value of F32 okay so what this actually means is there should be a function here so in the end object on the import object that you give to the instantiate streaming there should be a function called M script and random so here is the actual then implementation of random that our wasp file is depending on so again think of of the OS level connection here the Watson file needs random it can't Implement random or like it doesn't Implement random we need to run them in some way we go out to the JavaScript we call a function and then we go back and yeah this works this you're happy here and this is what the the JavaScript file is doing this is why it's so long because it's figuring out what it what are all of the operating system level things that you need from the outside let's fill in the JavaScript file with everything you need so yeah that's kind of the heavy lifting that M scripting is doing for you and other tools like it's not just okay so now we can move over to the rest of the logic um the board is an array of arrays of boxes and the rest of the game logic is is basically identical I can show you in a bit um so now the gameplay can be simulated and called from JavaScript but now we need to draw the data so we actually converted all the functions over the game state is iterating it's doing its thing but I would like to draw the data on screen and that's the next issue point where's the data because now I have a state in the in the Watson file how do I get it out uh so we can communicate between C plus or was a Millennials gift using primitive types like you saw before but soon as stuff gets a little bit more complicated you are in a bit of a trouble you could actually view the raw data of a stitch Vector let's say you have a stitch Vector in your supervisor side but that doesn't mean anything to to JavaScript like the list in JavaScript and Vector in in webassembly don't match they're not the same data type there is a thing called em bind that helps us with passing these more complex objects so here I'm describing a class and I'm describing uh how do how how does the Constructor look what are the functions the properties the static functions and you could do this to your your types um there's even a thing called um so embient has utilities also for vectors so you can register a vector you can say like there's going to be a vector it's called this that looks like this so then you can send the vectors back and forth um you can even Define a shared block of memory that can be used by either the object or C plus there's even an option to return a pointer you can yeah be careful please um yeah this is you're in a territory we need to be a bit more careful but uh we possibly actually have some guarantees about like assumptions about the execution environment like the bytes are 8-bit uh addressable with the pipe memory uh underlined memory tools complement IEEE little ndn those things so if you want to do like these more more finicky things it has these kinds of assumptions that you can take so like with any any uh restrictive execution environment so at least in this case yeah thankfully I wrote the game logic with with basically Primitives so I can just send instance and floats uh back and forth um so let's look at that version of the implementation so this is actually that version of the game it looks the same but the logic of the game where where the pieces are where they're moving all this stuff that's happening in um in webassembly but the drawing is happening here so the calls are going back and forth so there's a lot of calls happening here that are going back and forth between uh representately and table plus so it's also it's not slow like you don't have to be super worried about this um there's one thing as well that you might be thinking of like how am I doing this like how am I playing the game in the presentation and that's because did I not click here um the presentation itself is also written in webassembly that's a bit of a bit of a Twist here so I wrote a little slide uh application thing in Rust um so I have like this slight parsing code in Rust and then I have the actual slides here in markdown uh and then in the markdown I can actually do an iframe of the game and the game is actually running here so all of the games are are running here in the background so I have all the examples running ready and the the slides are just showing the iframe of the the thing and I thought there was just a fun way of showing you uh other ways that webassembly can be helpful to you and this is called using a library called uh I think you say U it's y-e-w which is inverse um and you also get you can actually access to this code as well if you want to look at it so that's what's happening here just a little fun example um okay so this is working I can I can actually show you here um let's go back to this uh it was I have this URL here go to the actual page so this is the the web page itself uh let's go and talk this down here um also because if you're thinking of like development and then how you are working with this whole thing so here I have the game it's in this like little canvas block over here and I can play the game uh you have control output so if you want to print things you can do a control output thing uh with the sources um and this is so it's working for me here in some of the situations this was a bit finicky but you can do this you can actually get the CPP file itself so here I have here you can see the get Quantum coordinate these are the bounds there's another one for is empty and you can ask the box if it's mergable like the the actual CPP code is here and if I put a break point here and then move the game I hit the breakpoint and I can see the actual values the the local stock and I can see the call back [Music] basically the call stack itself but what this is doing I remember when I said when I'm compiling I say Dash G and then Dash Source map what's happening is um I'm actually putting a break point in the Watson file so in the Watson file is the breakpoint it's just mapping that line 54 in in game logic CBP is line whatever in the Watson file so that's actually what's happening uh so yeah it should be it's a pretty long file but you can see like you can also get the file itself here and then look at what's happening and you can see also like we had the game we have the game running still the only thing that we ask for the from the external environment is the random function um It's Gonna Fill Up in a bit but it was fun that in in this case it was only the random function so I didn't need anything else yeah breakpoints is really cool to to see and I can put them in any file I but but note like I had some issues um that sometimes the CPP files wouldn't appear and it seems to be about uh how you host the web server and where the paths are and and yeah but yeah we can do that and continue and continue playing the game and also because this is Chrome you have the network tab if you do any networking things you have the performance tab so I can go here and play the game and hit stop and I get let me see here oops this is interactions yep let me make this a bit bigger here are the the calls so I can get the What's called the flame graph or whatever people call it so here's the main function a lot of gaps here between but yeah you can see all this stuff and the cool thing also is you get the screenshot of the game and you can be like oh it's over here here's the problem okay let's click there and zoom in ah I see the problem this is taking too long but whatever the problem is so you have Chrome's uh developer tools and Performance Tools you get them for free basically so I think for memory you can take Heap snapshots and all these other fancy things that Chrome has and simple Firefox as well uh what happens if you modify code when it's running uh you have to recompile it so you need to because what you're actually running is the awesome file so unless you're able to con modify the Watson file while you're running so you have to yeah you have to modify the you have to modify the code recompile it and then yeah now I see the potential of Google Chrome my least favorite browser well it's the same in Firefox if you want to use Firefox so if Firefox is your favorite browser you can also do it there I haven't tried Opera but I also hear that it's the same thing same thing there so development that's kind of cool Okay cool so now we basically have everything except the rendering in C plus right um so let's move over the rendering because before I can actually show you if I can show you the project as well since we we have time we have plenty of time so this is the project that you can look at later um it's numbered based on where we are in the process of converting the project um so what JS canvas is the whole game in uh JavaScript only so here's just a simple little bit quicker simple HTML file you have the game you have an update Loop you have a draw function you have a main where you're like queuing up calls every 60 Seconds getting a kind of context and then listening for keyboard events and yeah it's a very and then you have the the Box logic of the boxes moving around and doing their thing if you want to look at this later and then there's all in within each folder there's always a little script uh hinting at like how you can run this so here is how you run this one for the here's the hello world then you also have how you can run the hello world how you can build the hello world um and then we're here now with in three so this is awesome but with only game logic so we have our box in C4 plus we have the game logic and simple plus the thing we looked at before and you also we have the Run script and you have the build script with all the the commands you want to use yeah here's the The gng Source map and again we do we're doing no entry we're doing Standalone awesome so we only get a awesome pilot that's the only thing we get and then yeah there's more in the project itself all right so because now we have the game logic in simple plus we have the the drawing in JavaScript let's move over the rest so let's do everything in C plus and the JavaScript version does basically nothing or very little um or at least the code that we write for the architect is very little um okay so thankfully M skating has great support for exactly what we need amp screen has built-in support for a thing called sdl which is a cross-platform library that provides all sorts of things the thing that we actually need is graphically graphical rendering it also does audio it does input it does yeah lots of lots of great things and it's usually used for games it has stl1 built in but for stl2 you need to download it and there's also there there is a script to download because there is kind of a chicken in the egg problem with uh STL that if you don't have STL installed and you make a project that requires sdl it doesn't compile because it can't find the stuff so there is this kind of uh what I call a first install script that is an empty CPP file but a build script that says hey we require sdl which we'll download the STL and then you can just delete this okay yeah and these are the commands you just add these to the build commands um so and because we are using stl2 and all of those related functionalities and we we have now learned how um how this works because there we've learned what the Javascript file is doing it's providing the operating system level functionality to us the HTML file is just holding everything in place um so then we will we're okay with using the the JavaScript code it generate so we're going to do that we're no longer going to be awesome Standalone we're gonna we're gonna let M script and generate everything for us um so yeah instead of creating the import object ourselves M script then it's going to do this for us and I can show you that file in a bit this also means that our um our game is going to need the main function because we are no longer Standalone um and here we have some some information and if you have a canvas and you do an htl create window it will create the window on the canvas in the the thing that you are actually uh displaying so in the XML file that you have but this line here the bottom line is the one that I'm I'm most interested in because uh we don't want to hog all of the kind of the resources or the time so what we say is there's going to be a function called game Loop and we're going to tell amp script then call this loop as often as you can so this is going to be your Loop because otherwise if we call Main it's never going to exit and the browser isn't going to get any time because they they share time between each other so I pulled over the rendering code um it's very very simple rendering code it's uh let me actually show you real quick we go here to the game logic um it is this I create a rectangle I set the color I draw the rectangle that's it let's click on um oh yeah okay no I remember now I had the happy examples um so drawing is we create a text here we set the background color for every Row in the board and for every box in the row we draw the box and then we copy the texture and then we clear the texture um and then draw looks like this that's the only thing that's happening so I created a rectangle of a certain size I set the color and I filled the rectangle and the texture is just on image and I I say like put a red rectangle here and then every frame I'm changing where the rectangle goes foreign so it compiles and in the beginning I'm only I'm only interested in the Box I just want to see the box I'll do the text that goes on top of the box later so just the the box right now so it compiles looks like it should I run the code I see the Box okay great I look at it for a couple of seconds and then boom runtime error aborted cannot enlarge memory arrays to size and then some certain size and it gives me some hints there so what's going on here so wall number four the sandbox is an infinite so up to this point we've been using the default memory size from amp script in and it just happens to fit but we need more memory now since sdl is involved we need to create textures we need to create images and that kind of thing so there are a few things you can do you can this is just again command line arguments you can add to the the build build step you can set the initial memory to a certain size if you say that the total memory is a certain size and you can also allow for memory growth so you have some flexibility there you don't have to use all three I use all three just to show you but you can pick so again this compiles and now we see the Box okay I just changed the the size to something bigger and we're happy the next step is then to draw the text because it's a two-step process first we draw the box and then we draw the text on top of the box um oh no that's wall number five uh file not found because the environment we are in it also doesn't have anything else except the wasem file so we have the awesome file we can communicate with the outside world but there isn't much else um so the font file I want to use in this case I think I use aerial or something similar it doesn't exist because what is a file system in a sandbox like this um so we have to provide the files in some way we have to tell the sandbox hey there's going to be a awesome file and there's also going to be a like another file over here and what you can do is you can do this and this is another compile step you can say preload file I point to a folder I said an art and then slash assets so I'm saying that there's going to be a folder over here and then pretend that the path to it is the second part and this then means that within the C plus file I can say this I can say slash assets slash aerial bold and that's the file I can open that file and there are two ways to add a file you can either pre-load the file or you can embed the file so the file is embedded in the whole thing um script that also provides a bunch of helper utilities for common development tasks like make and cmic uh so I also wrote a simple cmap file so in the fourth project we have CMC these are no longer just the bass scripts we actually have fully full cmap for this uh but for cmake you have to say uh like if you want to say make you have to say em make make so it's you do that twice in mcmick clean and then EMC make cmake or em make Mech these em files these are Python scripts that help they set up the environment for you so um you know which make to call and then give it the correct environment variables and then yeah you have a cmake file so here's an example this is the one we're using right now uh we create a project we say that actually cutable suffix is HTML we give it the files I create the flags and notice app sign with has address and profiling this is how we got some of these warnings that we got before so you can use Azure sanitizer you can use antivirus Behavior sanitizer because like I mentioned before this is based on llvm and Clan so those tools are there and you can use them I can even optimize to an O2 um this here Source map base this is one of those ideas where you can point to where the CPP files are um again it sometimes works sometimes doesn't work but that's an option for you oh yeah and then htl in the memory and then you then you link these things together so that's great so yeah this is great we have everything running so let's look at it in action you hear the game um for those with Keen eyes might notice that the font isn't uh it's more jacket on the edges because I don't have the empty aliasing enabled for the text but otherwise yeah it's the same same game I can press all the buttons and do all the things and what's happening here then is we're pressing buttons on the JavaScript end we're sending those button presses to the web assembly and then we're getting the texture is being drawn on this canvas via STL basically so yeah everything is is mostly everything is on the web assembly and cool so let's summarize the walls that we have encountered um files need to be served while developing so if you think about the hello world you can't open random files so you need to have some sort of server um all functionality that you depend on OS level kind of things they need to be implemented in the JavaScript in the in the webassembly file or they need to be given to you through that path that we saw um data needs to be Primitives or converted in some way maybe for example through the embi into those things memory size and growth needs to be thought about and any files that you want to use need to be embedded or pre-loaded with the output um one more thing right you always need to have one more thing so in the project you have let's finish looking at wasn't 4. so here we have the the CMAC file this is the same as we looked at in the presentation um this is the first install stuff so you can just run the the batch file here uh the entex HTML it doesn't have much the most things it has is the key down event so we can send the the keyboard input um the build script is just using make and CMC you can see that the assets are here filter called volt ETF um maybe interesting on yeah so here's the the awesome files in the maps um and the server is a bit different as well just another example of a server to show you um for this one I'm using Python and I'm using the the simple HTTP server thing that the python has just to show you another way that you can you can host these things one chainsaw I did was I changed that if it's a awesome file I I do a different uh request header but otherwise yeah this is the same um okay so one more thing one more thing can I open uh who wants to play Wordle listen Wordle the cool thing now okay we're on a bit of a delay so I'm gonna play I'm gonna play world uh can I do uh what's a good four letter word any spots okay we have an O and we have over aha starts with an O and has an e or maybe we can do inspect and we can just cheat uh Omega Omega I'm so good at world I'm so good at Wordle um so I also implemented uh so this is another way of of uh doing a game within the project you also have Wordle so if you want to do that so this is just word with the game we also have a wordlebot I'm gonna so people don't get uh they don't like the blinking lights so I'm going to show you again for a real second if you want to look away so we have a bot that plays Wordle and it's trying very greedily to solve Vernal by reducing the number of words that can be in the set and and we win about I'd say to be just an under half the games or about uh just under half the games and we could play about 30 Games per second okay this sounds interesting right um so let's look at the webassembly version because I also converted it to webassembly so if I go here and open straw I'm building that behind the scenes so that built I can I can do run to open the browser and let you see that for a little bit then I can close the graphics um so this is uh accepted drawing part this is fully in webassembly but do you notice a thing so if I go here to the to the JavaScript version we're playing about 26 games a second in the beginning playing about yeah 30 Games a second if I go back here again it's playing about 30 Games a second why isn't it faster is the question you can ask I now converted the thing over to webassembly people talk about webassembly being faster why isn't it faster okay and I'll show you why so there's a thing that's happening here that we saw here before if I go back to Performance and I I do a recording of the performance I play the game a bit and I hit stop remember if I make this a bit bigger here remember these gaps between because we're executing some code part of the execution of the code is the execution of the web assembly part that we had here so 0.11 milliseconds we do some tasks related to probably graphics and and compositing and then this kind of stuff and then we stop here so 726 milliseconds up to about here 7 32 milliseconds where we do it again we do main we do a draw and then we go again so here's the thing browsers have frame rates if you didn't know and because browsers have frame rates um what we are doing if we look at for example the this one here how we did the graphics here um we have a function called Main we're asking for an animation frame from chrome then we do some work and when this starts we say when when you are ready to draw something on the screen dear Chrome call this main function so that what we do we say hey call the main function we do our stuff we update we draw to the screen and then we come back and we say hey when you're ready again draw so this code over here only runs once every 60 frames or 120 144 based on your screen so our our wonderful uh yeah it's one because I've been off topping away uh this solver that's over here only gets to solve again once every 60 Seconds the same thing with this one it only gets to solve a game every 60 seconds so what you then have to do is you have to say either thread things or say when you're going to solve a game solve as many games as you can in the allotted time and then when you're out of time hand over back to Chrome and then give it give Chrome the information and then Chrome might draw something and then Chrome gives uh execution back to you you try to solve as many games but this implementation is draw frame solve one action in the in the world draw one frame solve one action so this is another thing that you have to think about with your if you're doing if you want to have some performance code is you have to do either some threading or you have to basically be aware of this limitation that's there so this Wordle thing is also there if you want to look at it it's these extra extra one two and three so extra one is just the game XO2 is the world will bot in the hour script and extra three is the world button in Supercross um it's a very it's a very uh simple and very greedy uh bot so if you want to optimizes it well as well you can do that then it has all the build script and everything is as well so please enjoy uh let me then come back to the presentation no more Colombo and that's me my name is you can yell at me on Twitter or muscle tone and these are the two links the Accu webassembly for the code that we've been looking at and the web assembly presentation if you want to look at the rushed thing for the actual presentation and uh yeah then that's me yeah I think it's an hour thank you for your talk uh that was pretty awesome good introduction and how to get started with this web of something and do some security um thank you so if you have any questions you can share them in the Q a tab or in the chat um and I'll be reading them and maybe copying them over um okay yeah but still for the video purpose okay yeah but right now yeah some someone's saying very cool I agree to that and there's the first question is there a limitation on using threads so threads were very recently standardized Within website whatever simply is uh yeah a sort of standard so there is a a uh like there's a proposal there's a version we have a version two I think coming up at some point um so the if for a while it was only Chrome that had implementation of the threads because they had this uh experimental extension of threads um and then most of the browsers did followed suit and they implemented threads in the same way um so it has just the same issues or or limitations and and all those asterisks and warnings you have with with normal threads is that you have to think about um uh I haven't played with them a lot but yeah they are there and you can play with them is there a wall on linking to Dynamic libraries um so I don't know what they mean by by wall but regarding linking Dynamic libraries um think again around the environment that you're in um where the Watson file is and then the Watson file that you're looking at maybe it's a nicer way to show it this way yeah the thing is still certain if I go to sources it wasn't this is it when you load a washing file this is the file that is loaded this is the code that you have on your hands and if you need anything think from the outside they are described here maybe it's cool to me if I go and let's go to the slides show you the full full C plus version you can see that I had issues with uh getting the CPP files here so they're not here but if we look at the WASP file this kind of may be a fun thing to look at look at the things that it's requiring is a bit more it's a little bit more it's not until here that we're done so all of these things that we're asking from the outside a lot of them are Graphics related it's asking for opengl kind of graphic stuff and um and that is implemented in that is implemented in uh M scripting through the use of webgl so that's one library that you can be using for example uh so here we have like terminate and Retail and we have uh yeah some Gamepad information and and all this stuff so if we go to uh here look at the the game JS file so let's find one of these functions here [Music] GL blend color classic function so here it is um we can find that it is in a map so M script and TL blank color is calling a function called underscore Ms implant color we scroll up here in this map the ASM Library argument go down here here is an object called info that has n this is the thing from before this is this object here info that is then being sent into webassembly instantiate so this this big JavaScript file that we had before it's doing the thing that we looked at before it's getting the binary and being given this info and info contains this awesome Library argument if I look at that one here and let's look at again uh yeah I'm given PL color mask let's find that function and it's just calling this is webgl so it's calling the webgl functions so this is the environment you have so this is the code you have this this big file over here this is all the code you have and then you have connections to the to the JavaScript world if you need something else it either needs to be here in the Watson file it needs to be another Watson file then you have to communicate in some way or it needs to be in the outside world so yes yeah I think a good place to look for like how to handle Dynamic libraries might be the acute port for assembly yeah there's a question on social media but yeah an important thing maybe to think of here like I'm showing you how it works and how very simple projects are are made when you go a bit further it's really nice to use Solutions and libraries made by others like like what if Q's doing or if you're using Rush stuff or or any of these are the things that you're going to use but then if you have a problem if you're stuck somewhere you know how these things are wired you know what's happening behind the scenes it might look a bit more complicated but this this is what's happening so I recommend looking at this this way and playing with the project but then if you want to go further it's nice to use utilities made by someone else um here's one is Wasim a go-to solution for to porting over 20 megabyte application um I haven't done really big applications I've mostly ported or made like smaller games um if at any point you're at a conference and you can ask uh Adobe what they're doing but what I know is um if you want to have something on the web and you want to have let's say you you have an existing C plus code base and you want to use the same code base but then Target web right you might not want to expose your entire copies to webassembly the web application might be a standalone thing but there are these few things that you want to use maybe some some algorithms you have or some some um some functionality that you want to have in the same same code then you can just Target webassembly for those functions generate the awesome file hook up to the JavaScript and then you off you go right uh but these really large applications are I don't know uh it wasn't yeah to the whole Dom into the environment um yeah yeah you can do all sorts of fun things uh because yeah like we showed that the only thing that's happening is you're calling a function in in JavaScript what's happening in the JavaScript function it's just the JavaScript function so you can do uh yeah whatever you want uh look at uh is called URS so this is in Rust but there are I think similar in other languages um this is to create web stuff like like the presentation I had this is webassembly like I can go inspect and go to sources it's a awesome file here it's very big here we go and it has a lot of interesting things but what this wasn't file is doing is this isn't the texture this is HTML this image here is just I can right click and save images right so yeah you can you can do all those things uh can you just configure resource limits around threads yeah yeah uh yeah I'll show it um maybe to show you the show you the same effect so you have these uh initial memory and total memory and low memory growth um for the yeah I think there are similar uh I only showed these like these task s or Flags or for the damn script then um there are way more there's a bunch of others about like limitations and and restricting and enlarging the environment so others so look for the the amp script and flags for your compiler and yeah I think the threat limits you can set you can even you can even change how threading works so you can say that uh from the C plus side it looks like you're mostly threaded but actually there's just one execution environment it's called I think it's called asyncify so that's gonna kind of meet yes did we had some had some fun washing the thread um yeah I think though there's there's like a clarification on the question like users are meant to be users not like developers like can you configure the uh can you oh yeah sorry yeah I read that wrong can you just configure um I haven't looked into that so yeah I might want to look into that and you can too uh but from what I see I I think no because we go here to I think it is under application and there might be there might be something here but that might depend on because yeah you can mess with the service worker so if you have any any uh offset workers but yeah not sure not sure on that one now I saw your drawing there but I wonder if like is webgl related to webassembly or is it something of its own it's something of its own so the processor implementing uh like a GL like thing so it's its own this morning on the cover on the canvas running then so here we have a beautiful little box yeah it's on the canvas click on the camera okay um I don't see any more questions and these questions were very wonderful and good so thank you for your time and thank you the talk very awesome um like you use now both C plus plus and rust for whatever salary um what's like the difference for you and when you wrote this the stat tool in Rust um rust because it's also it has a package manager already built in so a lot of the helper tools and a lot of the utilities are just there so you can just install them via cargo and and you have them so the community is like slowly creating this little environment of um these these nice things there's a thing called oops wrong window a thing called trunk to bundle and ship your rust possum so there's a really nice tool for that um and if I go to I have a so here I have the repo for my talk and then I also have the repo for the presentation and this is the whole or last time I tried it this is the whole thing you have to do like from from you have you from you don't have rust until you run the presentation this is the whole thing so it's it's pretty nice it's pretty nice of course there's some there's some teething problems and then a lot of these libraries are young uh compared to like because you have M script in this is uh it's a much older project and it's based on llam and clang so there's a lot of history there and you have a lot of these mature tools there so yeah there's uh you can you can take different different aspects of it sure cool okay then thank you for your time thank you sir that's great to have you and I'm going to end the stream now and