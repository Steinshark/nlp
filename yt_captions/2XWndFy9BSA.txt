in today's video we're going to be looking at the 10 most common errors that you will encounter in Python and obviously how you can fix them so to get started let's take a look at the indentation error which is one of the most common errors you will encounter and probably the easiest one to fix so for this example I have a function that gets some data and of course I want to actually get that data and return that data from whatever Source I'm getting it from now in most languages you need to use curly brackets to Define blocks of code when you trying to encapsulate them in a function or in a for Loop usually you would use some curly brackets but in Python we rely heavily on indentation which means to define a block we need to indent it now both of these belong to the same block because they are on the same indentation level and if we were to run the script it will run perfectly fine because we've indented everything properly but in any case if we were to have print on the same indentation level as the function definition we're going to get an indentation error because right now we defined a function but we didn't put anything inside the body so python is reading it like this it's reading it as if we didn't insert anything inside this function we just defined the function we didn't put anything inside and then we skipped to the next line so this here is not considered part of the function and to fix it we just need to indent now it is considered part of the function even if we have these three empty spaces another example is with the for Loop if we were to create a for Loop that just Loops through this range of three and we were to print I on the outer indentation error python would have no idea that this print statement belongs to this for Loop and if we were to run this we would get another indentation error because it expected us to actually put something inside this for Loop and to actually do that we need to create a block by indenting and that will fix the issue moving on we have something that's called a syntax error and you will run into a syntax error anytime you try to tell python something that it cannot understand for example typing in a equals 1 is syntax that makes sense here we're assigning the value of 1 to a python understands that so it can do something with that but at any point if you type in something such as a exclamation mark 10 python has no idea what you're doing here it doesn't know what this syntax is this exclamation mark has nothing to do with the language which means that if you were to write this combination python wouldn't be able to handle that it wouldn't be able to read that and it wouldn't be able to do anything with that besides give us back a syntax error telling us that we did something that doesn't make sense to python so it doesn't understand what we want to do a very common place you will encounter this is when you're creating a function and you pass in something such as hello or whatever argument you want to pass in and you you don't close the parenthesis to us it's quite straightforward that we want to print hello but the rules of python dictate that we must encapsulate this argument with some parentheses and those must close we can't just have one parenthesis on the left and none on the right because python wouldn't understand I mean this is a lot of empty space that python doesn't know what to do with and obviously if we were to run this we would get a syntax error that that parenthesis was never closed but as soon as we add this parenthesis it doesn't matter how many spaces there are inside here it's going to be considered valid syntax and when we run it we will get hello printed to the console up next we have two errors that I'm going to combine together one is the module not found error and the other one is the import error so for this example I'm going to just paste this in here we're importing requests so that we can get the status of a website and we just want to know if a website is online or not so here we pass in the URL L we make the request using the requests module and we return that status code then later we pick a random website and we print the value of the status right now if we were to run this we will get a module not found error because there's no module named requests and a lot of beginners make this mistake because they go to YouTube they follow a tutorial they see someone type in import blah blah blah and that module is not part of python it's not inbuilt to python it's actually external functionality that they need to install so python will not be able to find that and it will give us a module not found error the easiest way to fix this of course is to pip install this module or to download this module and as soon as python can find that module inside our folder it's going to be able to use it and we're not going to have that module not found err anymore we're actually going to be able to get these status back using the module that we needed and an import error works very similarly it still has to deal with us trying to import functionality that doesn't exist for example we can try to import from the math module the make money method and if we try to do that if we try to call make money it will theoretically exist because we imported it here but if we actually run the script we will get this import error that says cannot import name make money from math because it just doesn't exist it's just not there we invented something and it could not find it and you might actually encounter this more with different python versions CU you might try to import something that exists in Python 3.12 but that didn't exist in python 3.11 or prior to that error number four name error for this example I'm going to create a variable and assign it the value of 10 and then I'm going to try to print this variable now knowing that python is K sensitive this is not going to work right now if we were to run it we will run into a name error because this name was was not defined and this happens to a lot of beginners because these look incredibly similar and if it wasn't for the syntax highlighting I probably wouldn't be able to spot it if it was a bigger project so all that name error is trying to say is that you're trying to refer to something that hasn't been named or that hasn't been defined so to fix that you just need to refer to the correct name and I see a lot of people making this mistake when they are working with classes so this is just a regular class class called fruit that has an initializer that gives the fruit a name and then they might try to instantiate it later so here we have a variable called my fruit which is of type fruit and then they try to instantiate it with a lowercase f and that doesn't work because this name does not exist this is not the same as the fruit to make sure you actually instantiate the fruit you need to refer to the correct name otherwise you're going to get another name error that name fruit is not defined did you mean fruit so always make sure you refer to the correct name if you want to avoid a name error error number five type error type errors are quite straightforward when you are dealing with primitive data types such as integers and strings if we were to type in print one plus hello obviously these two types aren't really compatible even if JavaScript devs are probably laughing right now but in Python if we were to run this we would get this type error that we have un supported operant types for integer and string and that's because you cannot concatenate these two in Python there's no functionality defined on how these two should be added together so that's why we get back a type error and even if it's not a primitive data type it could also be some sort of userdefined class such as a fruit if we were to instantiate this fruit and we were to add 10 to it we would also get a type error because there's no functionality defined on how these two should be combined and this also also goes for other operations such as trying to access whatever is at the index of two from this integer you cannot index integers so this operation does not make sense and that's going to give us an error back saying that the int object is not subscriptable error number six index error for this example I created a list of type string which is just a group of people such as Mario James and Luigi and what I want to do here is access James so to do so I'm going to print the people at the index of one since indexing in Python starts with zero so Mario has the value of zero or has the position of zero James has the position of one and Luigi has the position of two so naturally if we want to access James we'll pass in one and that will give us James back but at any point if we insert an index that is not in this range which means if we insert anything that's more than two we're going to get an exception such as with four we will get this index error that the list index is out of the range because there are no elements past the index of two so it doesn't exist and that will give us back an index error moving on to error number seven the value error in this example I created a list of integer which consists of 1 2 3 and four and what I want to do is remove a number that doesn't exist so what I'm going to do is call numbers do remove and I'm going to pass in 10 and this will raise a value error because even if the operation made sense the value did not exist in other words we provided the right type but the wrong value and a very common example is when we are trying to cast a type from one type to another such as if we want to get the float of this string that says word we're going to get a type error because float can accept any any type of argument which means we've provided a correct type but not a correct value and as you can see we got a value error back that we could not convert this string to float and you might be asking why does it allow us to convert strings well the thing is that with strings we can provide a value such as 10.5 and that will work just fine but we do need to make sure that the value is correct so being able to provide a string does make sense but providing a value that's not not a number does not make sense and that's why we get a value error back because it's of the right type but the value is wrong up next we have error number eight which is a recursion error and to demonstrate how it works or how we run into this error I've created a function called make request and all it does is print that we're making some sort of request whether it's an API request or a request to connect to Internet it's just a simple request but what we're going to do is make the rookie mistake to call the function inside the function creating an endless loop now if you were to make an API request such as this one you will probably end up spending a lot of money making all those API requests so of course this is something you kind of want to avoid at all costs but it doesn't mean it's never going to happen so it's good to understand where this comes from so right here let's actually try to run this function and see what happens and as expected we run into a recursion error that the maximum recursion depth was exceeded and luckily our system put a recursion limit into place to prevent our program from making this call indefinitely I mean we still did make the request many many many many many many many many many times but not indefinitely there was a certain point that python or our system said hey we're doing this far too many times I'm just going to raise an exception so we can stop it in case you made this by mistake although if you meant to do this on purpose there are ways of lifting that that limit so that you can truly do this indefinitely error number nine attribute error for this example I created a class called calculator and in the initializer I gave this calculator a version number or a just a version then I provided one method which is an add method so we can add any two numbers together and return the result as a float and since it doesn't have anything to do with the instance of the class I'm using the at static method decorator to say that this method belongs in the class even though it doesn't have anything to do with the instance anyway next I'm going to create my if name is equal to Main Check and instantiate the calculator so we have my calculator which is of type calculator and that's equal to calculator with the version of 1.0 and at this point we can use the attributes and the methods so if I want to add 1 + 2 we can do that using the add method which I defined up here in the calculator and we can also refer to the version number so if we were to run this we would get 3 and 1.0 because 1 + 2 is 3 and the version was set to 1.0 so that works just fine but next I'm going to remove my calculator and here instead of add I'm going to type in divide and we're going to divide 2 by 1 which should end up being two so let's run this and see what happens and what you should get is an attribute error that the calculator object has no attribute divide and that's because we did not Define that functionality inside our class and by using dot notation we referred to it as an attribute which means it still tried to find that it didn't know it didn't exist just yet and since it couldn't it gave us this attribute error and this also goes for attributes such as the version maybe we thought that my calculator had a name so we tried to access the attribute of name and when we ran it we learned that this calculator object has no attribute name and you'll probably see this in other modules such as the math module or any mod module you import if you were to refer to something that doesn't exist such as math hello and you were to try to run that you would get an attribute error that the module math has no attribute of hello because that functionality just does not exist in that module and finally for error number 10 we have a key error so here I'm going to create a dictionary which is called users and this dictionary is of type integer and string so each user has a user ID that's what we're going to call it starting from Z Z and Counting upwards so Mario has the ID of zero and James has the ID of one and if we want to get a value from the dictionary we're going to have to use the dictionary and the key value so this is not the index but this is actually the key so referring to zero will give us back Mario and we can even change this to one and two just to show you that it's not the index so now if we want to refer to Mario we need to refer to the key of one and that will give us Mario back but at any point if you were to insert a key that does not exist such as three you're going to get back a key error because it was unable to find that key inside the dictionary right now we only have the keys 1 and two and since three doesn't exist it gave us back the key error of three so those were the 10 most common errors that you will probably encounter in Python do let me know in the comment section down below if there were other errors that you encountered when you are learning python but otherwise as always thanks for watching and I'll see you in the next video what is this star over here meet new UI compact light dark system finish setup that's okay