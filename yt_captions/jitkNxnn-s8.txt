hello everyone in this episode we're going to be creating a little game to practice some of the stuff that we have learnt up to this point so how the game works is the computer will print out a random number of seconds and then you have to sort of count down the seconds in your mind and when you think the time's up you hit the spacebar and it tells you how you did okay so in unity I'm just going to head over to the project window and right click create new C shop script and I'll call it something like time game and then maybe we can just quickly create a new empty object in our scene and just add the time game script to that and it's just double-click to open this up so before we get started she I just want to introduce a concept called method overloading so what this is is say we have a method called foo which is just a sort of nonsense name used in programming examples and say this takes in an integer X and then all it does is it prints out integer plus the integer is given and then say we have a another method with the exact same name this one takes in a different parameter say it takes in a float X instead and this one can print out float plus the value is given so now if I want to call foo say from the start method so I write foo you can see this will pop up it says one of two and there are these little left and right arrows so if I just press the right arrow on the keyboard you can see that I can cycle through these two different versions and once actually start writing this this changes to an up and down arrow so we can cycle through like that so if I pass in say 5 which is an integer value let me save that and just quickly run you can see it will print out integer 5 but if I just add an F onto the end of that to signify that it's a float value and run this again you'll see it will run the float version of that method so once again this is called method overloading when we have two or more methods with the same name but they take in different parameters we'll see a practical example of this in just a moment but for now I'm going to delete all of that stuff and in the start method I'm instead going to print out some instructions for the game so let's print something wrong the lines of press the spacebar once you think the allotted time is up all right and then we're going to want a method a void method to set a new random time so voyage set new random time okay so we obviously don't want the player chef to wait too long so when we're generating this random number of seconds we want to sort of constrain it to a range say somewhere between 5 and 20 seconds perhaps so let's say int wait time is equal to and then to generate a random number we use the random class so we can say random dot and then to specify a range to choose the random numbers from we can just use the range method and over here you can see the overloading thing I was just talking about if we give it its min and Max values as an integer then it will return an integer value but if we give it its min and Max values as floats it will return a floating point number note that in the summary of the integer version we can read that it returns a random integer between min inclusive and Max exclusive that just means that if we pass in say 0 & 2 then the only possibilities for our random numbers will be 0 and 1 since it will include the minimum number but it will not include the maximum number so if I want a random number between 5 and 20 I'll pass in 5 and 21 all right now I'll just print out the wait time and I'll just add on a string seconds to that all right and let's just call this from the start method set new random time let's just quickly give this a test in unity so I'll press play and says press the spacebar once you think the allotted time is up and it prints out a random number let's just try that again and you can see we get a different number and another different number so that seems to be working let's go back into monodevelop and in the update method we want to figure out if the player has pressed the spacebar or not so last episode we looked at the structure of the conditional statement so remember that's the if keyword followed by a pair of parentheses inside which goes the condition and if that condition is true then whatever code we put inside of these two braces will be wrong so for the condition we'll need to supply a bool value and in this case we want that value to be true if the spacebar was pressed down this frame so to get input we use the input class and I'm going to make a call to the get key down method as you can see here this takes in a key code and returns true during the frame that the user starts pressing this key so we'll want to pass in key code dot and when we say key code dot you see it gives us a list of all of the different keys we could press so we want to choose the space key and just make sure that you've got the right number of parentheses here so we need these two for the gate key down method and then these two on either end for the if statement okay so when we detect that the space key has been pressed down we're going to want to print out how much time the player has been waiting for so to keep track of time there is this time class and this is got a time variable which keeps track of the number of seconds since the start of the game so we're going to want to record what time we start this new round - so let's create a float up at the top here called round start time and remember if we don't assign a starting value - this will just be initialized to 0 and then in the set new random time method we can say round start time is equal to the current time and now when we press the space key we can say float player wait time is equal to time dot time minus the round start time okay then it would also be nice to know how far off the player was from the intended wait time so currently we can't access this variable because it is a local variable remember it's declared inside of a method so if we just move the declaration outside of the method to over here then we'll be able to access that value so we can say float error just meaning half off the player was is equal to the wait time minus the player wait time obviously if the player waited longer than they were supposed to do then this will be a negative number otherwise it will be a positive number but will you really care about how far off the player was we don't care if it's negative so what we can do is use the math F dot absolute method which just returns the absolute value of the given integer or once again method overloading float so in other words it just takes a negative number and turns it into a positive number simply by removing the negative sign next let's just print out how long the player waited for as well as how far off there were so we can just say print I'm going to say you waited for then add the player wait time value you could just say that that's being measured in seconds and then to tell them how far off that is we can say that is plus the error value plus seconds off okay and then we can start a new round by saying set new random time all right let's save that and give it a try we don't want some more space so let's just move the console up here drag this out give us sufficient room and let's press play so I'm not going to try to be a particularly good here just check that it's working and it does seem to be just to make things a little bit more fun we could also print out a sort of little message depending on how close the player gets so sort of outstanding they're really close or dreadful if they do terribly so let's create a string message and we can set that equal to an empty string just with two quotation marks so we want to set the message based on this error value so we can say if the error is less than a say 0.15 for example remember to add the F because it's a floating-point number then we can set message equal to outstanding exclamation mark otherwise so else if the error is less than say 0.75 then the message can be something else like exceeds expectations if the error is less than 1.25 then that's maybe just scraping by with an acceptable if the error is less than 1.75 then that's quite bad we can say message equals poor and finally for all other values so we'll say else we can set the message equal to dreadful all right so we'll just check the message on to the end of this surplus message and want a space at the end of this of the sentence here so let's save that do you see that it's working by the way if you happen to sort of click somewhere else you'll see the deter won't register the input just click on the game window and then it will be working again so our message is printing out got dreadful for all of those what would be quite nice is if it didn't start the next round immediately so we had time to actually read our results so let's create a variable up here called round start delay time can set that equal to maybe three seconds should be enough and then instead of calling the set new random time method directly over here and also over here we can use the invoke method which is something that we get from monobehaviour so what invoke allows us to do is just pass in a string for the name of the method and a float for the time and we'll call that method after that time is up so we can say invoke and then we need to pass it in a string so set new random time and then we'll give it our round start delay time value okay so we can delete this line now and let's just copy this line and replace this with that okay so if we save now should see when we press play we have to wait one two three seconds and then the thing pops up and once again here we have to wait and pops up okay so the game is actually working now but since we added in this delay between rounds should be a good idea to ignore input while we're waiting for a new round to start so let's create a boo to keep track of whether or not a round is currently playing so we can say round started by the way as with sort of instant floats which are initialized to zero if we don't give them a value bulls are automatically set to false so only when we call set new random time which sort of signifies the start of a new round will we say round started equals true and then as soon as we receive input that signals the end of the round so round started equals false and then we'll say this if statement only returns true if the space key is pressed down and remember thee and operation we looked at last episode that's to ampersand symbols and the round has started one last thing I'd like to talk about is just that we should really be thinking of our update method as a sort of command centre so when we're working on more complex projects with a lot more code it's very nice tool to just quickly scan through the update method and get a rough idea of how the program works but that's difficult to do if we're filling it up with all the sort of detailed code so what I what I tend to do is create a new method called something like input received and then I take all of this code and put that inside of the input received method and then in inside of update which is call input received so now it's very quick to scan through update and see what's happening we can see okay if the space key is down and the round is started then we just handle the input and then if the project is more complicated there'd be more lines like that and then if we wanted to go and see the specifics of exactly what happens when input is received then we can go down to the method itself and read about that we could also improve the readability of the input received method by further separating this whole message generation into a method of its own we could have a method that returns a string call this generate message and it takes in a float for the error value and then it generates this message and then at the end of course we must say that it returns the message and then over here we can add the result of the generator message method and we of course want to pass in our error value all right so I would consider this done let's save and let me give this a proper try so we are trying to wait for 11 seconds one two oh not off bad rough bad all right see on the next episode Cheers you