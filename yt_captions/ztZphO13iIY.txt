I am a senior death so you quit being a junior deaf okay stop being one take hey take us home Ken C Dodds oh we can even read it in espanol or Portuguese are you a junior developer if you answered yes how do you know is it because your title is Junior developer is it because your co-workers get all the more interesting work and you're stuck in the more boring repetitive tasks and single bug or simple bugs or do you just not feel like you've done your time yet to drop the junior moniker okay interesting whatever the case may be I want to tell you to stop being a junior stop it now stop it what what meme is that that the person's just like I've talked to a lot of people who start their conversation with me by saying I'm just getting started or I'm just a junior to which I reply that's great welcome to software development world only to find out that a they've been working as a software developer for over a year and a half already this surprises me and it happened so much that I decided to write a blog post about how to get yourself out of this internal Junior situation start making major positive movement in your career okay I'm excited one thing I'm really excited about right here is that what I'm not seeing is you know there's this like notion like everyone's just an engineer hey just stop stop holding people back no there's a reason why we put these things on here because it's about your experience it's about your ability to solve bugs it's about what you've seen and how you can apply your past to the current situation right that is the big differentiator uh and also Vim of course Vim motions you know what I mean all right so Tech is fast first of all think uh I first of all I think it's important to establish this first there's absolutely no time limit on how long you have been a developer before you are no longer a junior this is true there's not yeah absolutely it's about the things you've seen some people can do that faster some people can do it sooner any number of you that have uh heard is wrong let's see any let's see any number on that you may have heard is wrong absolutely on team I got to be a senior developer with one year and seven months of professional experience at Netflix I do not think that there's some requirement time right anyone who says there's a time for it to happen I don't believe that right I just don't believe that uh it's about what you've seen no it's I'm not a genius first off it's about it's about what you've seen right and so when I was at school was I just doing school assignments no I was building trying to build video games right I was taking everything I learned and trying to apply the out of it you know what I mean and so by the time I got to the professional world and I was working at a real company I've already had years of trying to build stuff so I've seen so much crap by the time I got to that point it's just much much different so then when by the time I got because usually typically Netflix requires five uh plus years of experience before they would consider you back in the day and uh yeah I got there just at one of that 1.7 years of experience one and a half years of experience only simply because I just applied everything constantly uh all right let's see well one of the things I love about the industry is the pace it moves fast with emerging Technologies all the time and improvements to existing technology it really doesn't take much time for a developer staying on top of these advancements in their area of interest to reach a level familiar familiarity that Rivals those with Decades of experience yeah that that can be true just because there's wholly new things right just because you wrote TCP doesn't mean you're going to understand react server components totally get that you this is just like that classic expert fallacy just because someone's an expert does not mean they're an expert in all things true uh I think of it like this imagine there's a river with a steady current riding on a tube down the river is like develop developing experience in software development instead of everyone starting at the beginning of the river they start where everyone else is it doesn't take long once you jump in to keep up with everyone else on the river regardless of how long they've been doing it uh that's not as true that's just simply not as true um maybe in specific Niche areas for real like there's people right now that are one twentieth of the amount of experience but are faster at CSS but that's because they have just a niche experience right that's all it is they have this experience in one little part there's things that I understand that will simply I will always win out on a lot of people that are newer just because I've seen a lot of stuff so my ability to debug is probably better you know what I mean yes you'll have you'll have be lacking an experience Upstream but that doesn't change the experience you're having now it's an imperfect analogy uh I know but I think it's instructive I mean I agree with the some of it not all of it but I okay okay let's keep on going now of course there's a lot to be said for people with Decades of experience and while most of it is positive not all of it is people with years of experience are more likely to be able to learn new things faster because often new things resemble old things uh though not always unlearning is definitely a thing too experienced developers are also more likely to be able to identify problems in code long before there are problems because they've seen how things play out in the real world and they understand constraints better yes that's so I think here's one problem that we may be about to run into In this River of article is that this is what I consider senior it's not that you know react knowing react does not make you a senior if you are the best csser ever I don't consider you a senior it has nothing to do with being a senior knowing something specific in my book has nothing at all to do with seniority seniority is about seeing problems and being able to foresee problems being able to foresee where things can go massively wrong and so for me like this is just I think this feels like right here this is the definition of a this is a proper definition of a senior you know what I mean right there uh that said experienced Engineers are also more likely to be hesitant to try new tools and Technologies instead be set in their ways I don't believe that at all uh I I don't I I just simply don't believe that uh I.E I'm trying out o camel right I think that uh I think one problem here is that one thing you got to know about Kent uh is that he really loves uh react he has the whole react thing people just don't like react it doesn't mean that we don't want to try new things I'm trying hdmax which is arguably newer I like solid.js uh if that's what he means by that I don't know the problem is is what does he mean by the statement you know given the benefit of the doubt um I just don't believe that not in technology uh this can lead uh this can lead them to missing out on really terrific advancements in the ecosystem and tools experienced developers are also likely to miss out on important new features in languages and tools because they're just used to doing things a certain way I also again I don't I don't believe this uh just because experienced developers have seen things and so the difference between doing callbacks versus doing promises is just vastly better it's just it is just simply better async await is better than callbacks it's just simpler to use you can just simply string features together you don't have to Nest into Oblivion it's just simply better I'm not saying all things are better I'm just saying some parts of it are better so obviously I don't think I don't think proxies are very great I think that they're very confusing and I think that they often lead to just the weirdest stuff and they're very hard to debug so does that make me hesitant to new features ah I'm hesitant to certain features because I've seen enough right decorators I don't like decorators decorators I've used I found a use case for decorators and I really liked it but this idea of of these named higher order functions that you can throw on any class just super hard to debug right and the more you get the harder they are uh well it's kind of like middleware middleware is always just a little bit tricky to to debug right you know what I mean it's just always a little tricky uh anyways my point is that because of the pace in which software developer industry moves so fast staying on top of a few chosen technologies will allow anyone to become an expert in them rather quickly again I I agree with this but being an expert in a specific technology and being a junior I think are two orthogonal concepts and if that person can temper their enthusiasm with realistic understanding of the impact of their lack of experience just a bit they can make enormously powerful impact to the company if they're allowed to okay good I see I I think this is where we probably are orthogonal to each other is that I think Kent goes with expertism as a measurement for non-juniorisms whereas I go for experience as a measure of non-junior which is different and that's fine I went to college and had an internship while I was in school this gave me awesome exposure to the field before I was officially looking for a full-time job so by the time I graduated I had already been working as a part-time software developer for a year and a half when I graduated from BYU is BYU bringing you uh and joined as a full-time engineer I had trouble shaking off the junior moniker even though all my experience up to that point had been part-time work while I was still in school I felt like I knew my team's area of the code base as well as anyone else and it didn't feel right to me that I still got lower priority tasks yeah I saw some really big architectural level tasks going to the more experienced engineers and I wanted a piece of that however since I uh converted from a student to full-time employee I and everyone knew me as the student I always felt like people saw me as the intern yeah this is just a I mean perceptions nine tenths of the law I've said this quite a few times the best way to shake this is you just have to jump companies right you have to go and get that title somewhere else I found it's very hard to title change in your own company because of perceptions when people know you as a junior it's very hard to not it's very hard to shake that uh I mean there's ways you can shake it uh one thing that I I have done is that I would build things for the company in my free time and build things that they really needed and show that I'm I can foresee problems and build things that I really want them to do you know like being able to look into the future and say you're gonna need this it's a great skill it's a skill that seniors have right uh it sounds elitist it's not elitist um I mean it's just reality right the thing is is this is this is just like unfortunate human things it's very hard for you to break how you think or look at somebody if somebody has had part-time experience even though they're great and they've had it for a little bit hiring them as a non-junior is that right I don't know and if you know them as a student is that right I don't know uh it's again this just sucks that's why I suggest jumping companies to go find something else right you can jump into a software role much easier it's a human relationship yeah uh is it good it's not necessarily good it's not necessarily bad though that's the hard part is you can't say it either way specific situations maybe I Kent is obviously a very talented engineer was he a junior probably probably not probably not a junior because he's he's always been a talented engineer was he uh was he deserving this probably not can I say this for all situations in all time probably not all right uh maybe I could have been a little more assertive about my goals and hopes but I just decided that the only way for me to get the responsibility was go to new company boom there you go where people had never seen me as the intern and would instead see me as a regular co-worker absolutely so that's what I did just four months after converting to full time I was recruited away to my next company where I was given a massive pay bump over 50 increase and 20 of my time was devoted to architecture it was phenomenal nobody ever saw me as a junior again in fact I was just a step below architect I I don't really view architect as like some higher level I actually in fact I I think that every senior engineer should be an architect we should stop having these roles in which people in which some people put together higher bits of software and some people do the lowest things I think everyone should play an active role that's not in the junior category uh and uh in a quarter billion dollar organization only four months after graduating from University yep let's go after that uh played out extremely well for them I joined the company they were wanting to do major migration from their front end tooling I was instrumental in designing and migrating path let's say in the migration path and it was a smashing success boom look at that read this whole story right there there we go so how to stop being a junior instead of thinking about how to stop being one think about how to start being something else this is good this is good advice in general if you focus you know focus on not hitting a tree playing golf you're gonna hit a tree right it's just a fact of life what you focus on tends to be what you get uh uh sometimes well actually that's okay so that's kind of counterintuitive now that I think about it now I'm gonna argue myself out the other way C.S Lewis would say if you focus on Comfort you'll get you won't get comfort you'll get despair right uh so it just depends on what you're focusing on I guess maybe uh what do senior developers do in your company do that instead of the things Junior developers do that's it it's true this is actually pretty good it's it's it's true stop stop like settling this is great stop settling if you see people designing software at higher levels building stuff go into go build those right go do that yourself and even if you can't do it for the company get the experience doing it so that when the next company comes by you can just show them that you can do it you know what I mean naturally the company like likely trusts the seniors with more uh than they trust you and you don't always want to overstep that's right but volunteer to participate in even more complicated tests you know it's a really great way is you don't just have to volunteer talk to people you know what I mean go to the person that's doing it start asking them questions because here's the deal when you do that and you start having really engaging talks about it the perception of who you are and what you can do changes in their minds because you are shaping what they're doing and they're shaping what you're doing participation by like that's how I've changed teams at Netflix at Netflix we had a strong don't change teams policy for a long long time so what did I do I went to the team that I'm currently on and I said hey what do you know what are you guys working on they're like oh we're thinking about startup how to get better at startup so I went and I sat down and I thought about startup how can we make startup on televisions faster how can we do this I came up with this idea that I called back then this was like four years ago trailing Edge uis and I went to Chris and I said hey here's how we're gonna do it we're gonna do this we're gonna load the current UI that we have cached then we're going to request the new UI and replace the cash for next time if while our loading process also gets down from the server a force refresh then we will refresh and wait for that to happen but we'll always just keep on being one UI behind that way we can always just be going as fast as possible like that's what I did I suggested that now did we fully do that no we didn't fully do that but he was like this is a good idea this is what I'm liking okay let's talk about this more so then we started going very very far into it and it was just it's simple to get yourself into good positions because I am thinking about their problems and then I can talk about their problems I can talk about it in a senior way I can talk about it understanding what they need right and so it's kind of like a fun little way to do things um even as even if it's just hey can I come and sit in on that meeting take notes for yourself or anything you're unfamiliar with and ask about those things later in future meetings you'll be able to contribute more and more with the knowledge to start uh the knowledge you start to accumulate yep study things out a bit after the meeting and make suggestions absolutely boom right there the key uh Beware of being overbearing even though you can accumulate a lot of modern knowledge really fast you should be uh you should make sure you should be sure to acknowledge that your experience limits the usefulness of that knowledge so be respectful of your co-workers just I mean always as TJ always says just outnice your co-workers always true uh but find that people who are willing to sit down with you and answer your questions to help fill in the gaps in your experience as you rapidly accumulate knowledge very good use the fast-paced technology to your advantage and learn about what's new and improved that developers at your company can take advantage of today uh still be super careful JavaScript as a community has been one of the worst things you can do like look up any project on GitHub and every single year you'll see a new build tool a new build system and within just like a year and a half it's Legacy it's bad it's not good so you know one hard part about this is that new technology can become Legacy super fast and then you're stuck with a shitty solution so careful don't you don't have to rush into everything but it is good advice in general know what likely is going to be good and you'll start to develop like a touch for what is good what is bad then teach those Concepts in brown bag lunch meetings meetings where everybody brings a lunch and someone presents something uh often held weekly yeah and then and if your company doesn't have a brown bag lunch meetings scheduled they get them scheduled and present at them yeah rust into htmx rust into htmx is an experiment is it going to be good I don't know that's why I'm doing the experiment that's why I'm taking time that's why I'm building to do MVC and after I build to do MVC me and TJ and somebody else are gonna probably build something will we use o camel probably Dax Adam TJ and I will probably build something coming up here shortly and we'll see how that goes and we'll keep on using htmx and keep on building bigger projects until we go okay this actually is a good technology you just start small with very defined and confined constraints you know what I mean uh volunteer to speak at local meetups a meet-up talk is responsible for both my job changed I talked about earlier as well as getting invited to join ahead IO as an instructor uh proposed to speak at conferences yeah this is great stuff speaking at conferences is a great way to up level people's perception remember again perceptions nine tenths of the law when they see you talking at a conference people automatically think you're smarter it doesn't matter if you are they just think you are another thing I would probably add on to here is consider also YouTube Good YouTube videos explaining deep Concepts even if they get no views you can point somebody to that right this is what I've done right it's also it's also really good just doing that because you'll find that you have the weirdest ticks you say things you do things you scratch your nose a lot when you're nervous or when you're thinking you'll do weird things and you'll go huh I should probably change that because that's just strange uh talk about what you've accomplished to demonstrate you're really contributing at a level beyond their expectations of a junior make them think to themselves huh this Dev is not only let's see is only a junior and they did that maybe they're not really a junior after all hell yeah make sure your manager understands your goals and intentions as a developer communication people and if you're if you're hoping uh to ask for a promotion in the meeting where your manager tells you about whether you get a pay raise you're asking way too late facts they should know your goals much earlier than that uh let's see they should know your goals much earlier than that and you can ask them what they expect you to be able to do to get to that level this is true very very true try till it's uh try it till it fits I don't like that phrase fake it till you make it agreed uh but the sentiment is here as well the idea is that you operate on a level of what you want to be as well as you possibly can uh and eventually it'll start feeling like you really are that level yeah I like to call this the need the need thing right if you get tossed into a situation in which is not at your level you tend to rise to your level if you play sports with people that are all worse than you you won't get better right you start relying on your goodness there that's why when we were growing up us us Boomers pretty much we all thought we are great at video games why is that because all of our friends sucked at video games we were the best that's all there was to it so guess what I thought it was great and then guess what happened the internet came around and you discovered you're actually not that great but it made you much much better because you actually had real real competition right uh you had something that brought you to a higher level you know what I mean yeah I I I felt like I had to leave the company I was with to get up to the level I wanted to be I probably could have managed it by the way lithium don't make fun of my video gaming with the company I was already with uh if I had been uh more patient I probably would have done that had I not been actively recruited out that said sometimes if you can't just shake the junior off your title you may consider looking for another opportunity again on board I hope this article did not diminish the amount of work it takes to gain experience and make impact in this industry it's a lot of work however my primary goal is to help Inspire some folks to set their sights higher you're capable of more than you think I promise absolutely absolutely absolutely you don't have to be a junior anymore it's time for an upgrade good luck it's true you don't have to be a junior again I think this is uh I think this is where uh Ken C Dodds and I have a slight uh disjoint uh disjoint set here which is I don't consider an expert a senior or a senior an expert I consider a senior experience they can see things really they're debugging skills I feel like debugging skills are a great indication of expertness it just simply means you've seen a problem so many times that you're just gonna know good Solutions right I just got my first job and I'm watching this perfect you know you you now have goals can Kent just gave you really good goals honestly he gave you really great goals right now uh I know how to use print good four months of Junior does not equal senior exactly four months of being a junior does not equal senior experience makes you a senior experience makes you a junior there is an easy way to become a senior just move to Mexico okay joke I don't know fine the name is the junior Edge in wait no I'm not a junior I ain't no Junior I'm a Senora Jen the name is the Senora gen