Prisma five Faster by default like that's good right I I do like my defaults to be better so this is good all right Prisma 5 introduces changes so hey by the way I should probably put a little bit of context on this why am I reading this what are we talking about with Prisma what are we doing with Prisma well the reason why we're doing this is yesterday we read an article that was like a seething review of Prisma and so I want to give Prisma a better chance a chance to do you know what they're doing because often you find that seething reviews sometimes are due to not often sometimes you find that they're actually skill issues and they're not actual problem issues so Prisma let's have Prisma give a chance at showing that they're super awesome because I've heard nothing but I mean I've heard so many great things about Prisma so I'd be shocked if the seething review is actually 100 correct okay anyways these changes especially improve the experience of using Prisma in serverless environments thanks to a new and more efficient json-based wire protocol that Prisma clients use under the hood I mean Jason I mean I get it I get what you're trying to say okay uh improved startup performance in Prisma client from a Prisma 4.8.0 we have doubled down on our efforts to improve prisma's performance and developer experience in particular we focus on improving Prisma startup performance in serverless environments in our quest to improve prisma's performance we Unearthed a few inefficiencies which we tackled okay okay they're trying to make things better uh to illustrate the difference since we began investing our efforts in improving performance we consider the following graphs okay the first graph represents the startup performance of apps deployed on AWS Lambda with comparatively large Prisma schema with 500 models before we begin our efforts to improve it okay Prisma client uh Prisma connect uh Prisma find many uh wow that's a that's a lot of a lot of units okay what's this one this one schema Builder DB connection uh dmmf I don't know what that stands for dungeon master uh and then DB queer okay okay the following graphs show Prisma 5's performance after our work on performance improvements okay so they've really improved find many that's good I mean I think that this looks good to me I I I like that it it appears to be an order of magnitude better okay okay well done well done I wonder if they talk about the bottleneck here so that's good okay that's good as you can see there's a significant Improvement in uh Prisma startup performance we'll dig in and discuss the various changes that got us to improve State a more efficient json-based wire protocol prior to Prisma 411 uh Prisma used graph wheel like protocol to communicate between Prisma client and the query engine I always thought this was strange I think this is also just like a Prisma thing it sounds like you still have the Prisma engines you still do some sort of IPC inter-process communication or maybe some sort of localhost loopback call whatever uh you know I don't really love that I don't really love that idea uh just in general especially if you're just doing a server not serverless serverless you kind of go you know you're just like performance just make it happen because you just you know the garbage collection cleanup system calls all that crap that's all on that's all on them I just want my stuff to work but if you're running your own server you know increasing all the things leads to slower RPS you know so I'm not a big fan of that but I can understand why they're kind of doing it this came with a few quirks that impacted prisma's clients performance especially on cold starts in serverless environments okay so this is probably a targeted serverless change is my guess um I really do hope that they also uh I I because yesterday's seething article really was about joins so I really hope that they talk about that uh during our performance exploration so for those that don't know joins are done like in their rust client and I think I think that it's because they assume underneath the hood or there's some sort of defaulting to mongodb and so if you're using post gree you're not getting you know you're effectively neutering the database and using rust as a means to join right and so hopefully they talk about that uh during our performance exploration we noticed that the current implementation added a considerable CPU and memory overhead especially for larger schemas reasonable reasonable people are still suffering from web scale these days I know it's crazy uh one of our Solutions was to alleviate the issue uh was a complete redesign of our wire protocol using Json we were able to communicate between Prisma client and the query engine uh significantly more efficient we released the feature behind the Json protocol feature okay I'm surprised they used it just on you know like because I would assume that their protocol is fairly unchanging and that it would probably be easier to use a more efficient protocol betwixt the two you know what I mean I'm still a little bit surprised about that protobuf flat buffers some sort of binary communication something that just makes a bit more sense than Jason because Jason by itself that when you do it in JavaScript you're effectively ensuring higher garbage collection right Json feels fast because we're slow stupid humans but just on overall can be a big performance tank especially when you can't like say ring buffer out your memory right that's where you're going to get you're going to get a lot of good stuff from that uh Before We Begin work on performance the average cold start request looked like this okay so I I assume these things are all concurrent internals is that like the engine it must be some sort of engine it's weird that these lines meet up so there must be some sort of like thing that happens the ski the connect the underlying database connection once that's done then the find many happens which then the d m f down mother dungeon master I don't know what it stands for then the actual DB query okay let's see after enabling our Json protocol uh preview review the graph looks like this I am super curious about this how did the DB connection how did that happen how does that get so much smaller when you have Json versus graphql like how is GRA how is graphql adding a whole entire second it does that doesn't seem right something about this something about this seems incorrect because also again why is find many also massively smaller something else they had to do something else because that makes no sense that just adding a Json uh protocol causes causes things that shouldn't change really you know what I mean tons of loading time parameters and like huge amounts like I know but like what okay okay can probably tons I know but what is the loading time huge chain of dependencies okay but is graph wheel that big is that what we're hearing well it's not just Prisma connect if you look at the graph if you look at the graph it's both Prisma connect and find many right whatever this is so this they don't Define DDM uh DD d m f I really wish they would Define that because they don't they literally don't say it once in here and this purple disappears in this graph there's no more purple so what is it what is the purple what is can can someone tell me what it is does anyone know a data model meta format okay thank you okay uh it's a data model meta format it it is an AST syntax of the data model in the form of Json the whole prismacline just is generated based on the dmmf I'm still super confused how that took I mean I guess I don't know the problem real talk I don't know the problem I don't know the problem so I can't speak to it but again I'm very confused why this right here again how did the query get smaller how did how did connect get so much smaller there are Market uh targets fresh gens using serverless and forget that no real company uses it well a lot of companies use serverless I'm not gonna I'm not going to argue against that um obviously it's much quicker now I just wanted to know why I'm just super confused like how big was this other client because that's what it says to me is that but that's like a one-time cost because when you use something like import you do not lazy load any of your JavaScript you load everything that's one of the problems with import that people don't realize is that tree shaking also means that you get uh like like get right like that's what it means because now you have these huge parse times uh instead of like having only the parse times you need as they come so there is a there is some things well I mean obviously functions if you wrap things in functions you also get a lot of the part-time benefits you know so if you wrap things in functions functions often don't get parsed it's just like the top level thing and then it keeps on going right it's a one-time cost I know but that's what I assume this one-time cost is because one second of JavaScript can process millions of objects on pretty commoditized Hardware so how are you spending a second doing that how are you spending this long doing it right I just I have a lot of questions here long before any of these things but fine we can move on after a lot of great feedback from our users and extensive testing we're excited to announce that it's just on protocol is now generally available I love that capital g capital a generally like is that a known term is this like some sort of thing that I need to figure out about and it is by default the wire protocol and the Prisma client will use under the hood so if you're interested in further details we wrote an extensive blog post that goes in depth into the change we made to improve uh prisma's client startup performance okay so this could be some sort of good follow-up or something to look at but so they must have done something there all right smaller JavaScript runtime and optimized internals okay this is good besides changing our protocol we made a lot of changes that impacted prisma's performance with the new Json uh based wire protocol becoming the default we took an opportunity to clean prismus clients dependencies this included cutting prismas clients dependency in half good most codes you use you barely need any of it and you often like one of the problems of JavaScript it's that you know that article we read about left pad people reach for a dependency so fast that most the things you can do are very very simple and narrow scoped and removing the previous graph wheel like protocol implementations this reduced the execution time and the amount of memory that Prisma clients use nice awesome okay that's positive we also optimize the internals of the query engine specifically the parts responsible for transforming the Prisma schema when the query engine is started and established the database connection also we now lazily generate the strings for the names of many types in the query schema which improves the memory usage of the Prisma clients and leads to significant runtime okay that makes sense because if you have enough items doing it all up front when you only use a little bit of it that does seem a little silly right there's your problem graph wheel like sounds like it was uh yeah that that probably sounds like it was hand rolled yes because it's like it's not even graph wheel it's like it you know oh someone's talking about something something uh it wouldn't let's see uh I also wouldn't be surprised uh if there are many many many messages between the engine and the client so serialization and deserialization was probably way slower in graphql land than in Json yeah that's probably reasonable uh uh where the Json is fast because it's not actually JavaScript to decode yeah yep uh well actually JavaScript decoding of uh Json I think is currently faster or on par with rust and one of the reasons why is that I if I'm not mistaken Saturday still doesn't have that good old-fashioned CMD uh in their in their jsonning whereas whereas like the the JavaScript V8 jsonning is ridiculously fast you know what I mean it's ridiculously fast so I mean it's pretty good uh that was right that's what I'm saying is Json serialization and deserialization is already really fastened yes it is okay that makes sense compared to hand rolling your own thing yes hand rolling your own thing is almost always a bad idea you're absolutely right sorry my bad sorry sorry sorry sorry foreign in addition connection establishment and Prisma schema transformation now happened in parallel instead of running sequentially as they did before okay uh before we made these three changes the graph the graph looked like uh this okay so we have uh we have import Prisma okay that takes a little bit of time there uh connect find many do this DB query okay after making these changes the response time was cut from two thirds I'm it's interesting so what does this thing do the schema Builder how does schema Builder work ODB connection oh I see what happens so DB connection and then this goes to right here again one thing that always keeps confusing me is that when they say this little feature right here again is that they run something in parallel so they show us something in parallel and what this says to me is this one's larger this one is like absolutely tiny how did it improve DB query I think you have a measurement issue to me this seems like you measured something once and you called it a graph it was better and you called it a graph which may or may not necessarily be the best way of doing things because this makes no sense right like how was how was DB query faster it's just how is this thing faster how schema Builder faster if it's just running in parallel right like I would expect this bar to be approximately the same and this bar to be approximately the same which it does look like it so it looks like these two are approximately the same so they're they're the same read the other article also yeah connection established oh plus these oh okay okay okay okay okay okay okay okay okay my bad okay so there is some other stuff okay I thought it was just that one sorry my bird brain couldn't have all that memory I I'm not rust uh request now leaves a very small footprint for a zoomed in comparison on how the changes impact your Prisma client okay uh the first graph shows the impact of Json based wire protocol okay before Json okay good this looks like a great this looks like a much better graph even though this fine to many is a little odd how you know maybe that's part of that maybe that's part of the whole decoding that's actually taking a lot less time cool okay so decoding takes a lot less time I guess that makes sense because now we have this whole no more graph wheel like and so therefore it's faster okay I can buy it hi YouTube The Following graph shows Prisma client's performance after we optimize the internals and reduce the size of the JavaScript runtime perfect try out Prisma 5 and share your feedback we encourage you to upgrade to Prisma 5 and uh and are looking forward to hearing your feedback Prisma 5 is a major version increment it comes with a few breaking changes we expect only a few users will be affected by the changes however before upgrading we recommend that you check out our upgrade guide to understand the impact on your application okay so one thing they didn't address which I am still the most concerned about so the thing about Prisma that most concerns me is none of these items though this is great stuff I didn't realize how slow this was so this is fantastic great work Prisma you did an amazing job joins your query engine still does the joins itself as opposed to what the database does or is that a misunderstanding from the previous article we read I'd love to hear more about that how you handle joins and all that because for me that feels like a no-go right so I would love still do many DB queries no it's not so so like for me I I that's like a no-go right for me that's a full on no-go if you can't do simple joins without doing right and so that's you know it's important for me it's important for me okay um this is an exceptionally long performance article so we'll we'll do this uh will we do this we can do this another time this is exciting I'll read it another time we got the main takeaway we'll read it another time but what about the DX I don't care about DX nearly as much as I care about performance okay I find DX is completely subjective if you can write Ross wheel it's really not that hard so are you really buying something maybe if you feel more comfortable database migrations huge argument for Prisma Prisma apparently has amazing database like uh migration stuff and all that so I could totally buy that I'm on your team that sounds great but is it that hard I think sometimes we we we do these things I know I've seen you I've seen you mention this many times I hear it I hear you I've already said that uh DX actually reads dicks it does it could be um so I I understand that they aren't trying to replicate squeal uh type joins over Molly aren't they trying to yeah I think they are they uh aren't they in entirely different models they they are but I think they also work with postgres is that true do they work with postgrey drizzle drizzle seems like um a squeal builders seem like the best squeal Builders seem like the best thing I don't want to be harsh on Prisma unduly right I have a very simple requirement I want joins I think I I think me personally I find squeal Builders better but that's a me personal um again is that trail yes uh we use Prisma and prod with postgres and serverless uh so this will help a lot okay so there you go so this will help a lot so exactly this right there so a good orm should take into account the benefits and the negativities of each type of database like this is one of the reasons why orms are so amazing is that you don't have to know all the cool things to make your query fast it should do it for you right like that's part of it and so if you are if you're if you're truly just getting roadblocked because of that it seems incorrect second on Prisma and plus also only being TS I think is always a disaster I think you should try to build something in many different languages uh if you're trying to be like the the go-to for everything um you know just me so uh so basic apps is pretty much enough to pull DB connections and spend hours writing the queries I mean are you really writing queries that long is Select star really that hard you know uh Prisma still doesn't return the total items for pagination with a single query so you have to send two requests yeah see there's a lot of these kind of things which are very very hard to do right this is but this is more of like a typical orm problem than anything else's orms are really hard this is why query Builders tend to be really nice it's why I generally rely on uh query Builders because for that it makes a lot more sense because that way you can kind of craft the thing you want and it supposedly is going to give you the best query uh you know what I mean so uh base squeal knowledge it doesn't take uh it doesn't take much to learn absolutely it takes almost nothing most of what you'll be doing in SQL is extremely simple it's not it's not crazy I've heard of I've heard of this I've never used it all right anyways I like where you're going Prisma keep at it I'm also ignorant in the topic so don't take my word as gospel oh Jen