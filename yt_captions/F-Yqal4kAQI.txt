now before we start this video I'm going to give you one quick tip on how you can save money when it comes to debugging your code because at this point we're all familiar with the rubber duck method where we buy a rubber duck and we explain code to this stupid little rubber duck and then we find the error but why would you go through the trouble of buying this piece of toxic rubber when you can just go to your kitchen find a banana and explain the code to the banana and you also save 10 bucks or something I mean there's no reason not to explain your code to a banana but do let me know in the comment section down below what kind of items you explain your code to I promise I won't judge you but with that awful intro being done let's go ahead and talk about linting in Python lintest can really help us find some issues with our code such as conventions and styling issues so pretty much they can help us spot mistakes and bad naming conventions much earlier on so that we don't have to look so hard to see what we're doing wrong with our code so to demonstrate how we can use the linter and went ahead and created a really nice script one that Imports random doesn't use it prints running and then it has a version constant that says one then we have a function that prints a parameter we have a class of fruits with an initializer that gives it a name and a method that describes this fruit and then I went ahead and called some of the code down here so we have the function with the parameter the fruit with pasta and describing what the fruit actually is now running the code doesn't really matter we get the expected output it's a robust program but that doesn't mean that it isn't perfect and if you could spot everything that was wrong with this code you are a mastermind because there's a lot wrong with this code according to the linta now to use the linter we're going to go ahead and type in PIP install pilint and that's the linter that we're going to be using for this video now I might actually increase the size of the code so you guys can see it a bit better so we'll do something like that and inside here we're going to clear the console and go ahead and type in pilints main.pi and this is the file that I want to lint in Python so if we go ahead and tap enter it's going to give me a score of 4.29 out of 10 and it actually dropped for some reason while I wasn't paying attention so let's go ahead and find out what's wrong with our code because it looks pretty robust I mean we didn't really do anything wrong or at least that's what I would like to think now if we go ahead and open this up we're going to get a lot of lines of code so here you can see module Main and this is what it found that was wrong with our program so let's go down and fix it one by one now the first one we have is trailing white space and where do we have this trailing white space at line 23 so if we go down to line 23 we can see that we have a random white space here so we can just delete that we do need the extra line but we do not need that trailing white space now if we go ahead and run this one more time that error should disappear from here so as you can see we got an increase in our score so now it's 5 out of ten we don't have that random trailing white space so we save the line of code and pilint is a bit happier now we're missing a module doc string so let's go ahead and add that we can go ahead and say this is a module dog string something simple to keep the program happy and of course you should write something much more descriptive if you're creating a module so we're going to add that docstring and then constant name version doesn't conform to uppercase naming style so as you can see we don't get any pep errors for this naming convention but it's just something you want to have when you're creating big projects and you want other people to read this we can go ahead and type inversion and you can even verify something like this by tapping on random if you scroll to the top if I'll ever get that you'll notice that the constants from the random module actually have uppercase conventions and again pep wouldn't warn you about this but it's something good to have if you want other people to easily read your code and know what it is but let's go ahead and run this again in the terminal we have pilint main.pi now we have a 6.43 in our program it's getting better we're actually improving it a lot and we can also go ahead and take care of this unused import immediately we can say we don't care about random since we never use it we're just going to remove that now it's important we continuously run this because of course if we change a line of code it's not going to accurately give us the correct line anymore so you're going to have to run it several times after you fix the code so now we have 6.92 and we only have four issues left now we're missing a function or method docstring at line number seven so that's for function and we're just going to go ahead and type in function doc string and for the fruit we're missing the same thing so we're going to go ahead and type in class doc string whatever you want your class to do type it in there and we'll go ahead and run this one more time now we have an 8.46 our code is really starting to come together now we still have some problems at line 18 such as this doesn't have a dog string so we can go ahead and type in docstring and it also wants us to have another method in our class because if you only have one method in your class it might as well just be a static function because you're just cluttering your program with an unnecessary initializer which could just be a function so let's go ahead and add another method here that says seconds we'll add the dog string so the program is Happy Dog string and we'll just return hello a real good method now it is static but it doesn't matter we're going to go ahead and run this one more time so here pilint main.pi and we're going to have a 10 out of 10. we've done everything that pilot could suggest to us which means that now we have some code that conforms relatively well to python standards and you should take all of this with a grain of salt because pilint is not going to catch everything you can still make errors in your code but linting will give you a lot of useful information that you might not catch just by looking at your program such as module strings naming conventions errors if you do something weird and don't spot it and pep doesn't spot it and pychon doesn't spot it there's going to be a good chance that pilint will Spot It but there are many different linters out there so go ahead and just type in on Google linters for Python and you should get several results coming up and they all work pretty much the same way and some catch errors that others don't and vice versa so you really need to do your own research on which linter you want to use pilot is extremely simple to use as you could see here all we had to do is go ahead and open up the terminal type in Pilot followed by the module we want to debug and there we go we get a score back and it tells us how much we improved at each time so we were able to edit our code accordingly but with that being said I hope you enjoyed this video do let me know what you think about linking in the comment section down below and as always guys thanks for watching and I'll see you in the next video