this video was brought to you by IND dentle IO learning python Made Simple how's it going guys in today's video we're going to be talking about the finally keyword because a couple of days ago I received this comment that finally is the most useless thing I swear to God and it's not the first time I see this kind of comment a lot of beginners have no idea what finally actually does anyway let's get started by creating an example so right now we're going to fill out this information with some code that raises an error and we're going to manually raise a value error that says that this was a bad value and then we're going to catch that so accept value error and here what we're going to do is print that we are handling this value error so handling value error and in the finally block we're going to print that finally is being executed and with this codee we're going to encounter the value error 100% of the time which means we're going to be able to handle this error 100% of the time and finally is always going to execute no matter what happens unless of course your computer turns off then it probably won't have the time to actually execute the finally block but let's run this and see what happens as soon as we run this code what we're going to get back is that we are handling that value error and that finally is being executed just as we expected but at this point you might be saying okay we can just remove the finally block can't we because it's going to have the exact same effect we're going to raise a value error it's going to print that we're handling it and then we're going to print that finally is being executed or in this case there's no finally but it's going to be executed no matter what and if we were to run that we will get the exact same output so in this very specific scenario you are correct but now watch what happened if we raise another error inside the accept block which can easily happen when you're trying to handle an error and here we're just going to raise a custom exception and say we did not expect this and now the next time we run this we're obviously going to have an exception and our finally print statement will not get executed because that code is unreachable as soon as an exception occurs in our try except block it exits out of the program before it can execute this line of code but now let's reintroduce use the finally block to our code and this time what you should notice is that finally will be executed no matter what happens here you might not see it because it happened so fast so you're going to have to scroll up but you will notice that finally did get executed so once again finally we'll execute this code no matter what happens in our try and accept blocks and usually you'll see this being used when you are working with files once you open a file and start per performing some operation on it you're going to want to make sure that if anything unexpected happens that you can close that file properly and that can help with avoiding corruption and memory leaks and that's why finally is so important but there is one thing I learned recently that's quite interesting and that is that even if you were to exit out of your program so let's say instead of raising an exception we were to print system. exit and here we can type in terminating program as the exit code finally we'll still be executed even if we exit out of the program so really there's no stopping finally and again don't mind the order of these they're just happening all at the same time so printing them out might appear in a random order I mean as you can see if I run this several times we will continuously get these in random orders and with all this being kept in mind there are a few things you need to note and I recently learned this from an M coding video I honestly never even thought about doing it until I watch this video but suppose you have some sort of function and we're just going to call this function that returns some sort of integer and we're going to paste all of this inside here now inside the accept block we're going to return one if it raises an exception and in the finally block we're going to return zero and if we were to consider the mechanics of finally what we should expect as a return is zero no matter what happens in accept and we can verify that by printing the function and when we run this we will get zero as a return even if it executes all the code inside the accept block and once again that's because finally will always run no matter what happens in the try and accept even if we tell the program to return one we are forcing it to return zero because we included a finally block and in other words it's just overwriting the other return and you might be asking well this should raise a syntax error why don't they raise a syntax error for this kind of code well someone did propose that as an official change to python but it was rejected because this is something that the developer has to know and instead of restricting their freedoms pep decided to leave it as is and I also want to mention that in general it's a bad idea to also include things such as continue or break anything that has to do with the flow of the program in the finally block can be considered a bad idea because it will overwrite anything you do in the except block but I did find it quite silly that you could create a while true Loop and create a try and accept block which let's say raises an exception I'm not going to say anything specific other than that this is a bad idea and we're going to accept that Exception by breaking out of this Loop so here we're going to print breaking and we will break so we can finally end this Loop but funny enough you can include a finally block and type in continue and as you might have guessed it the finally block will completely ignore the accept block so what we're going to get is an infinite Loop so there are a lot of silly things you can do with try accept and finally but the moral of the story is that finally is incredibly important to our programs because it guarantees the execution of code inside a try and accept block and excluding it really guarantees you nothing I mean you can put continue down here but it's only going to print breaking once because it won't be able to reach the continue block or not the block but line 11 which is located below the try and accept block anyway I hope that cleared up why finally is so important in python or at least the importance of finally in Python and I would love to hear what you think about finally in the comment section down below otherwise with all that being said as always thanks for watching and I'll see you in the next video