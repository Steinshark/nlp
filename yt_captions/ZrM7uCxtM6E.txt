hello in this world series will be creating a simple sliding block puzzle I've split the project into six tasks and after I describe each task I recommend you pause the video and try completed on your own the first task is simply to instantiate a grid of quads at run time you should be able to set the size of the grid in the inspector and the orthographic camera should resize to keep the entire grid visible on screen I recommend you instantiate the quad starting from the bottom left like so because this will just make it easier to add the correct images to each quad later on okay yeah time to pause all right I'm going to work through this first task so I'll quickly create a new project called sliding blocks and set that to 2d and in here I'm going to create a new C shop script called puzzle and open that up so in here I want a public integer for the number of blocks per line and I'll set that to 4 by default and then I'm gonna have a method called create puzzle and the Siddhas go have a pair of for loops to iterate over the grid starting with 4-inch y equals 0 y less than blocks per line and then inside there 4 into x equals 0 X less than blocks per line then inside this inner for loop I'm going to instantiate my block object so I'll say game object block object is equal to game object crate primitive and the primitive type that I want is quote all right now need to set its position so block object are transformed at position is equal to and here I should probably stop and think about this so each quad is one by one world units and I want to start placing these from the bottom left of the grid but of course I want the overall grid to be centered on the screen so if I imagine just having one block then obviously at the center should be at zero and if I imagine placing two blocks on the x axis then the first one should be at negative 0.5 and the second one should be at positive 0.5 so with us in mind I think I can position this by saying negative vector 2.1 x blocks per line minus one because if there's one block then I want it to be at zero and then I'll multiply that by 1/2 and finally I'll add new vector to X comma Y all right let me then quickly just set a block object dot transformed our parent equal to this transform and also create a start method to call the create puzzle method from all right I'll save that and go into unity and just press command shift n to create an empty game object there and I'll attach the puzzle script to that and press play so you can see I've got my four by four grid yeah seems to be nicely centered on the screen and if I just go through these objects here you can see it's instantiating in the order that I wanted so the only thing left to do this task is to set the camera size to nicely fit the grid onto the screen now orthographic size is half of the screen height in world units so for example with the size of five I could create a cube and scale that to ten on the y-axis and you can see that just fits in so let me go back into the script and just at the bottom of the crate puzzle method here I'm going to say camera dot Maine dot orthographic size is equal to the number of blocks per line times a half and that will make it so that the grid fits exactly into the screen height but I want to give it a little bit of leeway at the top and the bottom so let me just change this to something like 0.55 now if I save that and run this again you can see the four by four grid is now just fitting into the screen height with a little bit of a space despair and if I change this to ten for example we should see that it still fits in nicely okay so that is the end of task one for the second task you should hide the bottom right block of the grid and then make the blocks respond to input so clicking on any block adjacent to the empty space should move it into that empty space okay so the first thing I only think about is humming to detect when the player clicks on a block now these quad objects that I'm instantiating all have a Collider attached by default which means that they will be receiving Mouse events so if I can attach a script to each of these then I'll have an easy way of knowing when any of them are pressed so I'm going to create a new c-cup script called block and I'll open that up and I want this to have an unblocked pressed event that the puzzle script can subscribe to to be notified when the block is pressed so I'll create a public event and I want the event to have a parameter which is going to be the block itself that's pressed so I'll say system dot action of type the lock and I'll call this on block pressed and then in this on Mouse down method which gets called automatically on any object that has a Collider attached we can say if the unblock pressed event is not null then it can be safely invoked passing in this block all right I'll save that go into the puzzle script and at the bottom here I'm going to create a method called something like player move block input which takes in a block which I'll call the block to move all right worry about the implementation of that in a moment but for now I want to add the block script to each of the block objects and get a reference to that block script so I can say block block is equal to a block object dot add component of tried block all right then I can say block dot on block pressed and subscribe the player input method all right I want to quickly hide the bottom right block so I'm going to say if Y is equal to zero and X is equal to blocks per line - one then block objects dot set active false and I also want to get a reference to that block so I'm going to create block empty block up at the top here and then here say empty block is equal to block all right so with a reference to that empty block I can now implement this move block input method so I'll sort of not worrying about legal moves I just want to swap the block that gets pressed with the empty block so I'll sort of by writing empty block transform drop position is equal to block to move dot transformed up position now I want to set the block removes position equal to the empty blocks position as it was before I changed it so we'd have to store that up here vector - I'll call this target position is equal to empty block transform drop position and then I can set block to move the transform drop position equal to target position alright so if I save this go into unity I should be able to click on any of these blocks and have them swap with the empty block now of course we want to enforce legal moves so one way of doing this it would be to say that a block can only move if it is within one unit from the empty block so let me try doing that I'll say can only move if block to move the transform drop position - empty block transformed opposition has a magnitude or square magnitude that is equal to one so if I save that go into unity I can just this is working by just clicking on some of these blocks adjacent to the empty block and making sure that those are allowed to move and then also taking on some of these blocks that shouldn't be able to move and just verifying that they don't all right now even though this is working perfectly I am a little bit uncomfortable with the solution that I have and I think this is because I'm using the world's position of these blocks to calculate a call rule of the game so imagine for example I later on decide that instead of scaling the camera to fit all of the blocks onto the screen I'm going to scale the blocks themselves suddenly the distance between adjacent blocks would no longer be equal to one and so by making such a trivial change I'd have broken a core part of the game's logic which is obviously bananas so what I'm going to do is go into the block script and here I'm going to create a public vector to int variable called code and in the puzzle script I will set that over here block dot coordinate is equal to a new vector to int X comma Y now instead of using the well position of these blocks I can use their coordinates and then I think I'll be able to sleep much easier at night of course I will have to swap the coordinates when the block moves so let me have vector 2 int target coordinate equal to empty block dot coordinate and then I'll set the empty blocks new coordinate as block to move but coordinate and finally set block to moves new coordinate to the target coordinate okay that's task 2 done so the third task is to dig around for an image you like and get that image displayed across the grid so there are basically two ways I can think of going about this the first is to modify the UV coordinates of each of the blocks so that they each only show their portion of the image and the second is to just slice up the image into a bunch of chunks for each of the blocks I'm going to be taking this second approach so I'm going to create a new C subscript called image slicer and I'll open that up and I want to make this a public static class so it won't inherit from monobehaviour of course and it's going to have a public static method returning a two-dimensional array of texture to T's al colas get slices and it will take in a texture 2d for the image that I want to slice up and an integer for the number of blocks per line in case the supplied image is in square I'll say image size is equal to the minimum of image dot width and image dot height and then I also want to figure out the size in pixels of each block so I'll say block size is equal to image size divided by blocks per line all right and I'm going to create a 2d array of texture to T's call this blocks and just set that equal to a new array of size blocks per line by blocks per line then just like in the puzzle script I'm going to have a pair of for loops for int y equals 0 y less than blocks a line and inside there for int x equals 0 X less than blocks per line in here I'll say texture 2d block is equal to a new texture 2d with a width and height of block size then I can set the pixels of this block texture from the supplied image so I'll say image dot get pixels and we'll find this overload here that takes in XY and block with block height so I'll just be passing in X multiplied by block size to get the x coordinate in pixels and y multiplied by the block size and then the width and height are both just block size all right having set the pixels I need to just call this apply method on the texture and then I'll add this block to the array so blocks with an index X comma Y is equal to the blockage is created finally return the blocks okay yeah so I'll save that and head into the puzzle script where at the top I'll have a public texture 2d variable called image and then at the top of the crate puzzle method I'll have a texture 2d array called image slices and this will be equal to image slicer dot get slices passing in that image and the number of blocks per line now I need some way to apply these images to each of the blocks and I think it's best if the block class handles this so I'm just going to make a public voyage called initialize and this can take in texture 2d for the image and just to streamline things a little bit I guess it can also take in the coordinate so I'll have vector two inch starting coordinate and here I'll just set coordinate equal to the starting coordinate and I want to get the mesh renderer component so say get component mesh renderer dot material main texture is equal to the supplied image like so all rights only save that go back to the puzzle script and now I'll say block initialize passing in my coordinate so X comma Y as well as image slices with an index X comma Y alright let me save this and go into unity and I need a image to use so let me just grab this one over here a picture of me and my dog several years ago and we will be sure to enable readwrite in the settings here so that the image slicer can read the pixels from it I'll apply that and drag it on to the image here I'll then press play and we can see this is basically working but the image is very dark because there are no lights in the scene and they're all through these strange lines going across here so to fix this first of all let me go into the block script and I'm going to change the shader that the material uses to an unlit shader so that we don't need to have any lights so I'm going to say get component material Josh shader is equal to shader dot find and then I'll just pass in the name of the shader I want which is unlit slash texture I'll right now to get rid of those lines that were going across the image I need to come into the image slicer here and just set the blocks wrap mode equal to texture wrap mode dot clamp okay so and you try this out once more so that's working very nicely the only thing is my dog is cut off so I'm going to take the simple option here and just crop the image by hand to get the sort of region that I want so just something like that I'll crop save and once that imports I'll be done with task 3 so that is everything for this episode in the next episode we'll be doing the remaining three tasks to finish the game until then Cheers