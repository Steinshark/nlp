I don't know if you know this but rust is stopping your success ++ that's all the title says okay and it's by a man named Chad I mean the man's name is practically Robert swellington uh this is going to be exciting I'm very excited for this I will say one quick thing at the very tippity top of this I haven't really used C++ Beyond C++ 11 cuz that's what our compiler's been largely stuck at and so that's all I've really ever known I know C++ gets a lot better I know here's Here's To Me hoping that modules really actually will one day work feels like copium here we go here we go all right by the way oh look at that poor crab look at the poor crab uh programming languages are tools not religions yes I don't know if you know this but the term religion I believe comes from the French term religion religion which actually comes from the uh Latin term aari which means to hold on to it invokes an idea of you being on a ship and people this was actually a common term before it became a term term for what you believe in but you would really gar a rope while you are on rough Seas right just a fun little fact you would hoddle a rope okay and so this was very very important uh understanding so our programming tools something you you grasp onto in the wavy Seas well I mean one could one could see a bit of a connection there you know one could see a bit of a connection maybe that's why it's so deep so difficult so backd door wanging you know unfortunately you can't use jokes from other videos because backdoor Wang means nothing here sorry if you don't know FTX you don't know backd door W uh anyways sure rust has its Merit memory safety without garbage collection yada y y but let's talk about getting actual Market ready products out the back door that's where languages like C++ and C sharp Shine the borrow Checker a double-edged sword oh this okay this actually could be a great take I actually could really like this take okay let's see it ah the borrow Checker Russ claimed to fame it's like the overly cautious friend who won't let you climb a tree because you might fall and break a leg it's supposed to help you by enforcing strict rules to avoid common pitfalls but in practice it often feels like you're wrestling with it just to get your code to compile and every minute you spend doing that is a minute not spent developing features fixing other kind of bugs or literally or doing literally anything else productive okay so I I guess I have a slightly different take on that one like in some sense I understand what he's trying to say but there's kind like the classic understanding of of of rust which is no I want a tech I want to I want a text way up here which is all safe programs and then there's rust allowed programs right this is kind of like the the notion oopsies the the notion that you kind of have to have in your head when you're using rust which means that if you design a program that is safe but as you program it it's not rust safe you therefore are going to fall into this really big fight with your compiler even though you're doing a safe thing and I think this is where most people's big gripe with rust comes from is not the fact that they want to write safe programs it's that their program which is safe cannot be uh expressed in Rust and I think that that can be very very very annoying it' be very annoying and yes someone just said if you're fighting with the Bor Checker you don't know rust no that's not true at all do any sufficiently sized program and you will start fighting with the borrow Checker at some point right uh you don't fight with the borrow Checker uh if you write it in the rust way which only comes when you have uh written many of them yeah I know but that's the problem is sometimes the rust way is unclear because no one's really done it yet so you have to like fight your way into this and when you have to refactor you have to like really refactor your way back out which can be very difficult right refactoring is I find it more frequent in my rust programs is it good is it bad not sure it's a skill issue it is a skill issue it just happens to be an amazingly difficult skill F again striving for Perfection at the cost of progress here's the kicker with rust you're basically expected to write perfect code from the get-go that's not true at all I wrote several bugs in mind just recently in fact I wrote one that all my clients timed out because I'm a stupid idiot uh sounds great in theory but what if you are in a startup environment or any fast-paced development cycle you need the ship products fast to even see if they're worth refining if you spend all of your time wrestling with the borrow Checker to produce perfect code you're burning time and time could been used to do uh used to actually test your product in the market uh most products are extremely simple most things you're solving that you're doing aren't complicated I kind of doubt with this in general I think that most people that are really familiar with axom with the database with testing can produce pretty much equal uh honestly they can produce like equally good stuff in about the same time I've seen some people that can move very very fast if you're really familiar with the uh product you can move pretty dang fast um it's just most people aren't that familiar you know what I mean it's called MVP you can use pyth py for yeah you can also use Python you can use JavaScript I don't think there's anything wrong with saying you should use if it's an MVP you can really use any language you want just use the language that you're the literal fastest with if your only care is to get something out the door just honestly use the language you're the fastest with if you love PHP donuts with LVL invite Taylor otwell over for dinner have a fine glass of wine laugh a little bit and write your product in PHP nobody's going to care right uh Cobalt go for it uh time is money and compilers don't pay bills here's the harsh truth your boss doesn't care about the theoretical benefits of zero cost abstractions if it takes twice as long to ship the product with languages like C++ and C you spend less time fighting the language and more time writing the code that does stuff people actually pay for C+ plus and C have a rich standard libraries and Frameworks that uh let you stand on the shoulders of giants rust not so much rust does actually have some really great Frameworks right you got a solid like implementation that you can SSR and do templates with with uh such as uh what's it called lepos it has quite a few different templating libraries um it has really amazing handlers like again this just sounds like familiarity right this is just familiarity more than anything else productivity over Perfection garbage collect collection in languages like C might be sneered at by hardcore system programmers but guess what it lets you move fast I agree with this it's easier to write a program you can be significantly less familiar with c and write a program faster just like me with go yesterday I literally wrote this in 10 minutes to do a quick websocket test just to see how good I was at writing a bit ago 10 minutes in never used the library never used any of it boom got it up and running super ultra simple it is shocking how easy those things are and in the business world uh often let's see speed often trumps perfection in a tiny memory leak in a non-critical path is the cost of getting a product out six months faster most businesses will pay that price uh gladly Fair uh but I doubt that that's the trade-off people are making here here uh ecosystem support C++ and C have been around the block they have massive user bases extensive libraries and a wealth of online resources so I think this I I don't think anybody here would have a problem in some sense with this article if it was C I think the thing that's really triggering people is the C++ you know again I I've been harping on this phrase recently which is it takes a complex language to tackle the complexity of some problems and therefore you write simpler code a simple simple languages make more comp your complexity is either in your language or in your application right I think that's the common phrase I would just like to I would just like to State as a counter example C++ perhaps one of the most complex languages ever in which you can enjoy both the complexity of the language and a complex application all you would like together at the same time because that's what you get it's going be very very difficult uh anyways they have massive user bases extensive library with wealth of online resources if you run into a problem chances are someone else has two and the solution is just as quick Google search away rust is getting there but it's not at that level yet the it works Factor by at the end of the day businesses care about solutions that work C++ and C have a long track record for working well in a variety of domains from game development to web backends to embedded systems rust might catch up one day but for now it's more of a gamble yeah I mean I get it for game development absolutely embedded systems it's getting pretty dang good right I used it like what last year and it worked with just all the hardware right out of the box with Arduino stuff it was like pretty easy you know it was pretty dang easy Russ isn't suitable for Rapid development Cycles where time to Market is a priority sure it has its benefits blah blah blah blah blah blah um none of this makes any sense the whole C and then C++ thing it's really this is where it falls apart if you're just saying use a garbage collected language to get your product out the door I buy that argument right Java go C JavaScript whatever your like fancy is for the garbage collected languages if oh camel right if you use one of those I think you'll I think that argument makes a lot more sense right I think you could make a really strong argument there but when you throw this in I just don't like it doesn't make any sense at that point oh camel my camel my camel my camel it just doesn't make any sense there's so many hard things about C I mean like or C++ like how many ways now how many different R&L value combinations of assigning mem copy on assignment versus move semantics versus I mean how many Constructors do you need to have these days is there six separate Constructors these days I know there was like the rule of four now is it has it has it grown I swear I saw something that's like now there's six Constructors zero or six the rule of five dang it is it five it's rule of five dang it okay I was wrong see that's I mean That's how little I know about C++ I mean i' I've always done it I just haven't done a lot of it I'm going to give my verdict on this should you use a garbage collector or non-garbage collected language in all reality I don't really care what you use long as if you're going for speed just use what you're familiar with use what you're you're the best at cuz honestly you're going to be the best at that thing and it's going to be you're just going to do well if you really are not sure you've done a lot of dabbling through a bunch of languages and you're really not sure which one you want to choose I'm still I'm still that go is just really effing simple to get off the ground every time I use it I go H this if air equals no business I hate it but then I program something and I get it done pretty quick and I'm pretty much mostly correct off the rip and I go gosh okay it was pretty easy to do damn it it was really easy to do but man I don't love the language right it's just boring I don't want it I want I want to just I want these complexities I want these type systems that are incredible I want all and then I still just just get stuff done and go and then I sit there and think am I the unreasonable one am I the  right am I the I might just be the just refusing to use something because I'm like it's boring gosh this is boring like I don't like ready and go I do not like ready and go yet it's just so easy every time I just hate it like all you need to know is channels and how to start a G Funk and you pretty much know almost everything about go it's shocking it's primitive of course it's primitive and it's primitive to its own fault I don't love it for that reason I find myself doing boring things I don't want to do right I wish their standard library was more complete it's becoming way more complete since they introduced generics but still it's kind of boring uh broad channels are dude channels are amazing and go channels and go are tremendously better because they have syntax support right if rust had syntax support on channels it still would be a pain in the ass because you need this left and right hand side right and so that's what kind of a big pain in the ass whereas go like you just don't need to do that there is no left and right like you just have a channel and you either push it in or you pull it out and like that's that that's great it's unnecessary laborious I know so is every other language when you're doing stuff with Java JavaScript you're still doing a bunch of pretty mediocre string operations you know what I mean it's like when you're doing string stuff in JavaScript you're just like I mean it's still really annoying to do it it's not like it's somehow way easier don't bring up JS in this uh go is easy to start with but it has a lot of foot gums I work professionally with go and there are so many rough edges that you have to be aware of books like 100 mistakes and go are a mandatory reading in my opinion oo interesting I like to read that so yeah easy to start with but it has a lot of hidden foot guns okay yeah yeah I haven't worked any I've only worked in small or mediumsized go projects I've never worked in like a large one when I say large I mean 25,000 plus lines right 25,000 plus lines you could convince me that that's a large project right I I have looked at your uh chat history I'm sorry but you're just you're harping on C++ 14 17 20 23 I see what you're saying it's just not compelling okay I'm not going to read it I'm sorry I do read your chat it's just not worthy to be read out loud and now you're making me do it here okay sorry um no that's like Ultra large that's Uber large okay that's Uber large there's very few projects that are you know in the uh yeah that was great sorry I'm sorry I tried I tried to be polite about it I wasn't trying to dog on you I do I do read I do read your chat I just don't think it's all great to be said the name is it did you like And subscribe a CH