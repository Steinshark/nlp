a failed experiment with rust static dispatch are you guys ready for this one initial versions of the end basic service and therefore initial versions of end tracker use Dynamic dispatch to support abstract definitions of system search services such as the database they talk to and the clock they used this looks like a bunch of Arc dine Foo objects passed around and it was done to support extremely fast unit testing this is funny that we just got done watching the old um code Aesthetics video on testing and and dependency injection and all this this is kind of like one of those things that could be kind of similar you know in the rust world if you have like a database connection a database item and you need to pass it between multiple threads you end up having some sort of you know but you want to be able to test against it and not actually use the database you end up having these like dying Foods these arcadine businesses so this uh let's hear The Other Side let's see what the other side of this story you ready for this one it kind of started off this thing this article kind of started off just like right in the deep end okay I like it I like it when I generalized the core logic of these Services into the three four framework I decided to I don't know what the three four framework is I decided to experiment with a switch to static dispatch the rationale was that using static dispatch better aligns with the design of well-regarded crates in the rust ecosystem and also because I wanted to avoid unnecessary runtime costs in the foundational pieces of my web services this is good obviously Dynamic dispatch will never be as fast as static dispatch static dispatch is literally just like go here and go go do the thing right let me tell you that this decision was a huge mistake and that experiment has utterly failed using static dispatch has been a constant source of frustration due to the difficulty of passing types around and reasoning about trait bounds safety uh the situation has gotten so bad that I dreaded adding new functionality to my services whenever I changed to a statically typed struct was needed because that meant yet another type parameter and plumbing through tens of source files oh man oh man it's kind of like the generic explosion you know the moment you need the like or a lifetime explosion the moment you need to do a lifetime the emotional pain that is rust to do a lifetime after you've built something oh my goodness it can it just it just kills you yes oh camel would be the Savior at this point um in lieu of the difficulties oh which eventually turned into blockers to implementing new features I made the choice of going back to Dynamic dispatch the goal was to gain ergonomics at the expense of supposedly negligible runtime costs let me tell you about the problems I faced the refactoring journey and some measurements I gathered after the rewrite oh this is great okay this is great this is exciting right uh the adaptation of static dispatcher in uh three four started pretty simple uh it did the job well even though it took me days of fighting with the rust type system I eventually got it to work the production binary was statically bound to the postcre database back end and the unit tests were bound to squeal light let's go file testing let's go squeal lights so good um all the while respecting type safety offered by squeal X and without having virtual function calls anywhere let's take a peek at what the sample key Value Store code pieces look like by going through the architecture layers described in MVC but for non-ui apps at the bottom layer the database was the transaction traits to supply the operations required by the business logic Okay cool so trait TX all right uh I don't what what what does this mean is this a trait that requires another trait to be implemented with it what is this does anyone know what that is that's what it seems to me yes extends better okay yeah yeah yeah yeah yeah bear Texas oh it's bear Texas uh sounds unbearable um okay that's okay that's what I thought it was I just wanted to make sure I'm not a dumb dumb and misreading it myself async function git Keys you go through here DB resolves beat reset key okay uh the trait was a separate uh separately implemented for postcre uh squeal and squeal light by providing separate post grease Texas and squealite Texas specific types and both specific transaction types in the database backing it were chosen at build time where the database connection was established moving up from the business logic layer the driver was parameterized on the domain specific Texas transaction so that it could have access to those operations and only those derived clone driver D where the D could be uh it can be send it can be Sync It's static let's go it has all the things you want it to be uh the implementation of the driver uh you can get keys which will begin await get the keys commit wait okay Keys all right cool note how in the above begin the method recalls an instance of the transaction right away ensuring that the callers always issue database operations as part of the transaction this has been a deliberate decision from the very beginning to prevent isil issuing Standalone database calls that could compromise the correctness of the data because there was no scenario in which a transaction was not necessary okay okay so that's why we do that so you do the transaction then you do the thing and then you commit and then it goes okay cool finally the upper rest layer uh took a driver as the engine to run the API request through and uh as a consequence the rest handlers all had to be parameterized with the underlying driver Handler D State driver is a state driver driver d uh Implement into response arrest error where all of this stuff happened to don't you love this wear business doesn't this isn't this just so fantastic every time I start writing rust and I start constraining these traits down a little bit you just get the exact same stuff everywhere it just starts it's just like spreads it just just does not stop spreading everywhere I feel the pain when I see this the amount of times I've written this exact piece of code is beautiful where where where where TX equals trait expression does it I think it equals transaction TX equals transaction dog doesn't equal trait expression right because you create a begin which creates a transaction the transaction does the operation then you commit a transaction there's no way TX equals trade expression you need to get the hell out of here with that kind of talk all right uh ensuring that the callers issue let's see hold on yeah oh man it's I'm actually getting I'm getting PTSD I'm getting PTSD I'm getting flashbacks right now uh this is where things uh start looking uh finicky because the rest layer now had to spell out the internals of the driver yes it does it's a leaky abstraction that's why but it didn't look so bad at the beginning combining this uh the sun can cost fallacy ooh everyone loves the sunken cost fallacy who here hasn't made the worst decisions of their programming life due to this right here this guy right here right this guy yeah just read it out okay just read it out that right there every single time every time it's just the worst I don't know why I do it but I do it every time every time I'm like I've already done the work let's see and the days devised how to make it above work the idea of avoiding unnecessary abstraction at runtime made me plow ahead with this implementation let's go the problems it soon wasn't all roses what you could see above was an extremely simplified view of how things ended looking like in a real service with more than just database dependencies without further Ado let me present to you the most Monster monstrosity that I ended up with in the end tracker here's the driver definition foreign is is that every single person that takes in a driver has to copy this wholeair statement uh what's the plus it just means these are trait definitions right so clone means you've had to implement the Clone interface effectively send means you had to implement the send interface the sync interface the static interface the clock interface and so C is a clock that can be cloned that can be sent across uh a sink it can be sent across thread boundaries it's Sync It's static boom boom boom Oh but that's not all oh no this chunk also infected the rest layer which in theory should not care about the specifics of the driver layer here's the rest date here's every single endpoint he has to right now all of them all of them get this beauty added upon them there are several problems with the above code a it's super ugly trademark that you should have used the Unicode character just saying bro uh there is no other way to put it as much as I like rust things like this are painful and scary but not as painful and deranged as modern C plus plus have you heard of our Lord and savior oh Campbell um these weird declarations were repeated 44 times in 37 different files oh gosh oh my goodness gracious oh my goodness gracious imagine needing to change one of those you have to go find every single definition I mean I know LSPs make this modern LSP approach really easy this is actually okay so this is where a a text find and replace is actually better it is literally better than using an LSP right like this is actually better than using an LSP oh my goodness gracious but you'd have to have the same naming conventions everywhere you went to be able to find and replace like that boy or that is almost all finals this polluted uh source files with details they don't care about any small change in the driver requirement updating all these repeated chunks in sync I'm not even sure why rust requires the duplication and why it's sometimes okay for the trade bounce to diverge among the various info blocks but the duplication was necessary uh three it poisoned the rest layer as I mentioned above the rest layer wants to pass around the rest State oh gosh every time you every time you pass that around every effing time you pass that around dear gracious of all goodness uh object that contains the driver and other data fields are only necessary at that level yet to achieve this rest layer had to replicate all these internal details of the driver yeah see again this is just it's it's per it's a perfectly leaky abstraction right this is a perfect leaky abstraction because it requires you to understand what's happening within the driver to be able to pass around the driver I had to use a declarative let's see I had to use a derivative to remove unnecessarily question mark clone trait bounds uh the need to have clonable driver and rest day comes from how axum HTTP framework dispatches route execution and figuring this out took quite a while furthermore the way this works is still obscure to me let's go it became impossible to compose transaction types this is a problem with my design and not an inherent issue with static dispatch but the use of static dispatch guided me towards this design note that in the above there are two database instances D and QD each with different Associated transaction types while I wrote a sum of contortions to support sharing the same underlying database connections between them I never got to replicating those two also share an open transaction the complexity was already at an unmanageable levels to push this design any further but I needed a solution to my problems so this is again this is this is where I this is why garbage collected languages are really beautiful right this is why we all love garbage collection languages because when you hear this term while I wrote some contortion to support sharing of the same underlying database connection between them I never got to replicating those to also share transactions right like sharing a transaction is extremely hard right that's the reason why borrow Checker just makes this type of stuff super hard because the reality is it's really unsafe to do it's very easy to get that wrong and so it doesn't like it it doesn't want that where's I mean this is why I love what ocamel is doing I truly do love what ocamel's doing with their local versus global approach to be able to add in lifetimes but not in complicated lifetimes and lifetimes are also orthogonal to the type definition which means that you get this really Speedy amazing thing why would you even uh want to share a transaction you could imagine multiple things doing so like you could imagine a function that does each one of these like does each part of the transaction I could imagine someone doesn't want one big ass file one big ass function doing the entire transaction if you have a large one I could imagine that happening right a stored procedure I wouldn't want to do a stored procedure personally uh this complexity was already at an unmanageable levels to push the design further yep all in all the use of static dispatch was slowing me down and building new features as these constructs made me dread modifying each aspect of the code and what's worse certain initial design choices started showing up as true inefficiencies in production like the inability to issue Standalone database calls outside of a transaction yep transactions aren't free the original goal of minimizing runtime costs was made significantly worse fixing these issues required a redesign so it was time to a change switching to Dynamic dispatch let's go the goal with the redesign was to drop all static type parameters and replace them with a dine and trait objects I've also had some issues with dyn trade or imple uh in this way the driver would encapsulate these details in just one place and all other code would not have to care about the specific field definitions within this type it was easier said than done but the results speak for themselves now let's see this is how the driver simplified key Value Store looks okay yes because now you should be able to just say hey at the driver level I need to be able to make it send in sync right it needs to be a DB that send that sync so it can do this which means that the rest layer doesn't have to know that right the layer the rest layer doesn't have to copy out these keys right here because that definition stays within this dying area and this one doesn't stay within that that's why people tend to use that right it makes it 10 000 times nicer right you don't have to know about that crap you only know about that crap like because of the dynamic dispatch beautiful that's it the way to declare the driver over a generic database the way to write business logic operation on top of this database and the way to write rest API Handler that calls into this operation the arcs and the send sync annotations are somewhat ugly but they are nowhere as ugly as the previous disaster in this version there is no noise what's more as part of the redesign I could throw away everything behind a transaction idea and allow the caller to choose the best execution mode for the needs note the text execution call above which obtains an Executor from the database and can be used to talk to the database the specific call obtains an Executor from the transaction but the same DB execute method also exists and obtains the Standalone executor describing how the this works is out of the scope of this post though okay show me the metrics let's see some metrics everyone's favorite thing right here do you like am I becoming annoying okay hey can I get a real talk is the O camel Shilling becoming annoying tell me the facts okay that way I can look at them and be sad at the end of this we'll look at this okay at the end of this little article we'll look at the ocabel Shilling and we'll see if it's sad or not okay yes and knowing no it's not yes it is no it's not um don't worry well don't worry don't worry we'll fix this oh Campbell Shilling very very soon okay don't worry don't you worry all right let's go to this thing uh the perfect the pervasiveness of static dispatch and rust ecosystem helps leverage zero cost abstraction but it does come with a cost namely programming time cost uh it is a it is great to have a choice and it is great that many general purpose rust crates use static dispatch so that you don't have to pay unnecessary taxes but it was not the right choice for me I might have done things really wrong in my original design and these measurements may not be sustainable for other projects but let's look at the numbers anyway so I do want to make one statement about rust that I think is going to be a bit of a hot take but I think is correct which is the the reason why rust is so popular is that writing a library even despite the the complexity of you know static dispatch versus Dynamic dispatch despite all the complexity becomes a very nicely packaged thing because it's a small Library a CSV reader the runtime like it does not change it becomes the thing it needs to be and that is that and so I feel like you can design this in it's complete like in its in its completeness whereas when you have an application the moving Target is where like for me it's like it makes more sense to hit the Clone button it makes more sense to just go dine on that right it's just to go more nuts on that and let the complexity remain in the libraries and let the ease of use remain in the applications okay that's how I feel I think that is the correct way to kind of approach go development um oh no personal choice here uh code size this is the refactoring according to get staff difference uh okay okay okay a project so end tracker which one was end tracker by the way uh lines added lines deleted let's see the changes to the uh three four framework are small because the use of static typing within the framework itself it wasn't pervasive yeah exactly like I said like I said it's easy inside right inside of a little framework inside of its own little files it's very simple after all the framework was just exposing the building blocks and not using them on its own but the 11 of code reduction uh in N tracker alone is very significant let's go let's go uh binary size looking at the size of the main end tracker binary in the supporting a unit test binaries both under the release and debug configuration okay this is just sizing right before after main binary common tests okay so they all go up slightly oh this one goes down a little bit but it goes up a little bit it's about the same a little bit down statistically doesn't really matter I was expecting a slight increase in binary size with the move to Dynamic dispatch because the compiler and Linker doesn't have as many opportunities for inlining and optimizing code while the results seem to be all over the place they seem to agree with my expectation the binary sizes are larger when using Dynamic dispatch some test binaries are smaller indeed but this is most likely due to how tests change uh how the test changed and not necessarily because of the switch from static to Dynamic yep compilation time I measured an incremental build after modifying the core type in N tracker code base to the change its internal layout starting from cargo clean State uh slate and using the mold Linker with static dispatch the incremental build times of the binary and test versus somewhere between 12 to 13 seconds and with Dynamic Dispatch they drop just below 12 seconds okay so I'd probably say that they're probably irrelevant right whenever you see someone saying they're they're testing the build times just locally just they're this close it probably doesn't make it probably doesn't make a difference right if he would have said like three seconds versus 12 there's probably a difference right uh the difference is minimal and the code base isn't large enough to obtain a good signal out of this metric to be honest I was hoping for a much larger Improvement in incremental compilation times my reasoning was that dealing with the type constraints that existed before must have been expensive so removing them should reduce the compiler execution times my measurement did not approve this true unfortunately or if they did the improvements are negligible in this small code base refactoring effort I spent a couple of days figuring out what the best abstraction was and then I spent many hours during a recent long flight doing all of the mostly mechanical changes to the end tracker code base as usual updating the test was the most painful part of a of all and all also the one that gave me confidence to deploy a new build to production with ease nice nice this is great uh runtime cost this one well I haven't been able to measure it none of my web services are CPU bounds so the cost of the virtual function dispatch is negligible boom boom to summarize and not much it seems to have changed with this rewrite binaries are slightly larger indeed but not by a lot however the benefits in productivity uh are massively are massive already so I'm not going to lie to you when I hear this okay I'm just gonna I'm just gonna give I'm gonna render a little bit of a judgment here when I hear all these things put together like a nowhere near CPU bound huge Improvement in productivity to me this just sounds like years ago I mean I'm gonna say oh camel but you guys are tired of me Shilling out Camel so I'm gonna go with go but I I'm just throwing it out there like unless if you just love writing rust like the point of doing this is writing rust which then at that point use Ross right but if the point of this is getting things done and you find yourself getting more productive by having to specify less types go for go go for oh camel go for something else right it's just like if your goal is only productivity there's better languages right and you are absolutely under no constraint of CPU like you're running on a nano node and just go for it because JS sucks there's a reason why you shouldn't use JS and JS sucks okay that's why JS sucks all right uh there's so many problems with JavaScript I just absolutely just just it just drives me nuts the amount of rust and typescript compete for who can write the most type definitions okay okay rust and typescript go ahead develop a library even Theo did a video about this right he was all about uh you know he he had a I feel like he had to write some Library code and realize just like how much typescript can really get in the way stop with the negativity.js it's great no chance it's not great it's okay negativity is not bad okay there's a difference between being a cynical person and pointing out something that sucks JavaScript sucks it's inconsistent it has a lot of issues there's all sorts of weird guards you have to do typescript makes it better but it also makes some parts a massively more complex right the amount of type definition magic you have to do to write a good library is nuts you can't just say that okay I'm sorry I'm sorry that you feel that way to me whenever I hear someone saying no you're just being negative JavaScript is actually really great what I actually hear in my head is I've never really tried anything else maybe like a day of Java or something and Java sucks so javascript's great right that's what I hear right it's just what I hear I'm sorry that's that's how I hear it you know what I mean you know what I mean like that's the I'll always hear it that way and I'm not trying to be a mean guy it's just that's what I hear you know uh like I just get bored right I uh JavaScript I just I just constantly run into just some of the worst errors ever one of the benefits of this rewrite is uh I've been able to finally resolve a long-standing deficiency and test coverage which I briefly mentioned in the conclusion of the unit testing web server plus ooh interesting this deficiency was uh that the test Suites for the driver and the rest layer ran against squeal light unconditionally and I did not want to have to run them against a real post Greece squeal instance well I have answered now all it took was to switch Dynamic dispatch and was to introduce a helper function like this connect to testdb uh do a bunch of the arc dine blood of the blog get optional test DB string must accept that D ref some postcard test utilities weight a squeal light tester and it's schema go uh I use to connect a database in all tests and configure GitHub actions to do with DB post to run the test Suite against the production database another benefit is that I have finally unstuck something I've been working on and off for months and I've been procrastinating on due to its difficulty that is I've been trying to generalize the account Creation in session management pieces for the uh end basic service into three four so that I can reuse those in end tracker this is made really difficult due to static dispatch but now it's a piece of cake whichever means I should be able to add user accounts in N tracker really soon or soon now or in tracker really soon now and maybe finally open it up to the public okay interesting all in all I'm satisfied with the change the code is much simpler now and I do not have to foresee small uh cost at runtime nor in binary size to be a problem at all for my specific use cases boom again uh this is great by the way this is a great article and I think it just goes to show you that there can be some really significant costs when making things as performant as possible Right like you should really have a strong reason to do this right like until you get to this point like you should never get to this point without the world's strongest reasons you know what I mean and so I just see this and it makes me sad because at the end he kind of outed himself as being like well this was kind of useless because he was just like um what do you say it well actually I wasn't CPU bound at all so I I did something to make it faster that isn't actually useful at all and so it's like it's a good exercise right he learned a lot from this but at the end of the day you did an optimization for a thing that did not need to be optimized yet right doesn't rust have macros for this sort of thing not like that kind of macro my friend only only Sith deals and absolutes uh no that's a dumb phrase there's plenty of absolutes in life okay if if saying child porn is wrong absolutely in all circumstances then call me a Sith baby uh the name is I'm probably a Sith baby