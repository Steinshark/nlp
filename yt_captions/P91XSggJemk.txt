there's a contradiction in the world of large scale data at the moment the de facto language of data science is python they have all the core libraries they have all the people pushing data crunching forwards but the deao language of data infrastructure is Java they have all the big name Apache projects for handling large scale data in real time and neither side really wants to become the other there's no sign that the python world is about to try and rewrite C and there's no sign that the Java world's going to come up with something that replaces numpy even though num would be a very satisfying word to say but until someone bites the bullet and writes num I think the Divide between data science and data infrastructure is here to stay and that's a very fertile ground for bridge Builders my bridge building guest this week is Thomas newbower he's the CTO of Quicks and I might summarize his bridge building technique as use Python for data science use CFA for data infrastructure but if you stop thinking of CFA as a Java tool and just think about it as a protocol the solution is to teach python a new protocol but that's a lot of work and how is it done how do you implement a pure python version of the Kafka world without rewriting Kafka how much work is it the devil is in the details and even if you do all that work is it enough to give people Tools in a familiar language or are you still left with the problem of teaching them new approaches too let's get stuck in and find out I'm your host Chris Jenkins this is developer voices and today's voice is Thomas newbower [Music] joining me today is Thomas newow Thomas how are you I'm great thank you uh how are you doing I'm very well very well nice to talk to someone you're not too far from me right you're in London uh well currently I'm in Prague I'm flying into London next week so I'm I'm traveling a lot between Prague and London that's a nice life I when traffic is working yeah I spent some very happy times in Prague so maybe I should come back with you sometime yeah sure but we're uh we're not here to talk about international travel that's a different podcast that I'd happily present we're talking about the world of python right yeah python obviously a de facto key part of data processing in the technical world and you've been trying to push the de facto state of things in a New Direction which we'll get to but give me give me your estimation of the market as it stands what's the what's the normal way that people do large scale data processing in Python yeah well the word is quite uh difficult to be honest if you are in uh Python and you want to do a large data pressing right now uh it depends on what are requirements of course um if you go to batch it's slightly better but if you go to um uh real time and we talking about building stream processing pipelines your options are either using old big server side processing engines like um Flink or uh spark streaming M and uh you can also use um you can build it by yourself so you can you can use Kafka and client libraries or or similar broker and their client libraries to do it by yourself and um third option would be using some Cloud providers um um options like lambas for example but they have lots of limitation as well um now the reason why I'm saying that it's not ideal is because Kafka and fling and Spark they all uh coming from jbm world and as a result uh for you as a python developer who wants to use them the lives gets suboptimal first of all uh yeah it's it's just you are don't you don't feel to be a first class citizen in the ecosystem and and secondly when you actually try to use it you will see that you have to do a lots of java related stuff yeah yeah the first time I use the python Flink API I was disappointed to get a Java stack Trace back yes so that's that's true but uh I think I got disappointed even even more when I had to put a jar files of gafka connector and then and then the jar file that this jar file depends on in the right folder and then depend reference it in my code I was even more disappointed yeah I hadn't thought about that cuz I'm used to writing in Java as well but that's uh that's not a friendly way to treat a pure python developer yeah that's that's definitely not it um and there are more problems to it um like uh when you want to build your user defined function in Python which I guess this is why you're using uh something like Ping because you want to use Python to build a business logic or potentially use something from the python ecosystem and uh it's not that straightforward because you're actually not running your processing in Python you're running in in Java and so uh what the fling does for example is run two um runtime on each side by each other and there is some socket connection between them and when when you map your user defined function in Python to some columns in fling what's going to happen that there will be basic communication between them and that means you can't really debug it easily there's performance apption on if the payload is too big and if anything gets wrong yeah you get a amazing Java stti Trace back yeah okay but there's I mean I think a lot of people in the data processing World recognize that problem but very few want to bite the bullet and rewrite something of the complexity of Flink in pure python yeah well I think that uh there is couple of um couple of uh new emerging server side engines uh that's trying to be more friendly to python um and uh there was a project called f made by Rin hood that actually were on a direction to do something uh but it got abandoned which is which is a shame and um then obviously you have the cloud providers options spot uh then that you have a quite strong vendor lock in and they actually have a lots of limitations like I don't know if you use Lambda you will struggle if you have a state in your services or in your Transformations and there are problems with dependencies and resource limits so again lots of drawback there yeah yeah I can see that it's it's when you have to deal with state that stream processing gets really interesting up to that point you could just use simple Transformers yes well basically I always say that until you are limited to one message at the time processing so you know when you process your data you don't care about the message before and message after yeah U it's a doable option to use just a u client libraries of of your broker of of your of your um distributed system and and do it by yourself but the moment you touch State I think it get exponentially more complicated to build in a scalable resilient resilient fashion it's it's a really hard computer science problem to solve because you have to start thinking about persistence and distribution of that state yes and partitioning of your data checkpointing of your data and State uh delivery guarantees uh reassignments so so there's a lots of stuff you know that could happen during your state being changing and and so I would really not recommend to build your own stateful processing uh on top of like client libraries just for the purpose of one project uh yeah it's it's okay then because I know that seems like very good advice but I know that you had a project where you felt this pain and suddenly decided to build a stream processing library in Python for one project effectively yes so in a way so so what's the project and why was it so painful for you that you decided to bite the bullet well um so in my previous job we were building realtime decision insights for Formula One and there was a basically a a pipeline with tele data from the car and an idea was to build uh pipelines that would tell you what to do in next seconds not next hours and the amount of data was was quite huge it was around 30 million different values from different sensors per minute from from each car and and the people that were developing these pipelines where you know the mechanical engineers data scientists ml Engineers they all wanted to use Pyon not Java and and this is the first time I saw well hold on this is very powerful technology uh you know the streaming stack was really really great it worked really well but to actually leverage it um by these teams was very difficult there was no tools um no way to simple simply analyze data uh so you know things like Kafka tool back then uh was wasn't really sufficient enough and uh and then when we actually managed to to explain everybody how to connect to the source of data and how to actually you know get it to the python the biggest problem was the muscle memory of working in a batch um just analyzing data and database in jupit notebook versus building real time stream streaming applications where you process row by row it's such a different paradigma such a different uh approach to the problem that uh they you know they they struggled a lot with just the concept of streaming and uh like you know sometimes I'm saying even a mean you know even a mean that's that's the most simple operation that you can do in Excel you know you have like imagine you have a speed RPM and you want to do average speed um on a table not everybody can do that but to do a mean uh in the last 10 seconds for a car uh real time it's actually very complicated thing and very different approach to do it this is something that always interests me because I think a lot of this sector of the tech industry acts like it's a purely technical problem and that's a big part of it but the the mental problem is a surprisingly large leap right and you almost would have thought I mean python has asynchronous Co co-routine Primitives right and they've been in there for a long time you would have thought the idea of streaming data would be a little more normalized in Python yeah I I think that uh buing asynchronous code it's it's obviously uh a bit more complic at than single Trad code but I think streaming goes much further than that it's the the level of unintuitive for somebody who spend the whole life working with the static data is much bigger than someone moving from single to multi application and sometimes I kind of um you know compare this to people trying something like reactive extensions for first time you know it's yeah such a huge overwhelming new thing um or when people in the past moved from a classical um you know wind form style Des applications to this um mvvm MV MVC uh buttons in a in a web these big mindset switches uh require you to suddenly do a common common task very differently and and this is very similar like everybody is you know used to to get the data from database analyze it in jup Notebook print it on a on a way form look at on it on a map maybe do some filtering some analysis and and they are in the comfort of that the data are not moving when you run stream processing code every time you run it it will get a different input and that's just so so difficult to handle um because at the end you building something which gets input you do something with it and you put output and uh it's difficult to tune that middle box when the input are changing every time you press around uh that's um that's difficult yeah I totally see that and I mean maybe I've been thinking in this way for too long to fully see the problem but to me it almost seems a lot simpler you just have to build something that deals with one thing at a time and some other engine will scale that up to dealing with an infinite number of things yeah so that's obviously one way of looking at it the the problem is when you get stateful it's you need that context of your data and then in streaming where it's get even more difficult is that a part of the actual data what really matters is the behavior of your data so order of message Mees the speed of messages and schema are also important not to trip over your code so when we were back in McAn for example um there were lots of bucks and and crashes caused by just a nature of the burst of data coming after the start of the engine so people just did not unit test it and could not think that uh there would be a a burst of data in in the first five seconds worth of five minutes normally and they just got a lots of memory um overflows so the the nature of the data how they come in is also important not just the content of it okay yeah okay so so let's start talking about your solution to this problem uh and how you designed it because you because it's a two-fold problem right you've not only got to design tooling but find some way of making it is it a question of training people to think in a different way or is it a question of finding a way that fits in with their current thinking yeah well uh I think it's a bit of both having said that I don't think that um we can go away with just training people um I think I personally um by myself uh felt that it's rather difficult so you know when I was looking at the streaming and how you can what are the obstacles in in learning curve that was basically I was I was I was I was trying to look at like I haven't done the streaming at all and now I'm in this moment that you know you can you it's intuitive for you to do streaming what are the obstacles on this journey and can we somehow remove them and uh uh I think that the first the first big obstacle is what we discussed at the beginning which is you are not actually running your code you're running it in the engine which is even not python so I think the big Power of something like f or something like uh quick stream library is that you actually run your functions in your IDE so you can Leverage The the ecosystem of the Python and then when you inject any sort of dependency from it uh you will see how it works um in your IDE and you can debug it you can go line by line and see okay I'm using this um mathematical um function from this um science package and it's crashing because I'm giving it uh badly formatted numbers and I see it because I get the break point before I call that library and I investigate all the inputs and I and I in a watch window in my IDE I'm changing the input until I get it done and that is a vastly different experience for developer than uh I'm just deploying some black box which I'm registering to my engine and then I'm seeing crashing or not and I'm relying on locks to to yeah yeah yeah yeah as much as I like cloud services for putting things production having something local and Native is just much nicer for development time yeah yeah for sure and and you know um especially when you get into the more advanced stuff like the machine learning and computer vision you also get dependencies issues so um you might do just pip install something uh like in computer vision and it will not work until you get a particular system depend in in in in when you run your code yeah and and so if you have a server side engine you have to make sure that every note where this fling cluster or Spar cluster runs will have this dependency system dependency like for computer vision you have the lips something just going to have to be there which normally you just install in Linux now if you go with the microservice docker route you have docker to do that for you and that's brilliant it's just a line of uh in a Docker file so I think that Library approach where you're basically running library in a containers gives you not just the better IDE experience but also much easier integration with this ecosystem of of the language in this case is python okay so in that scenario you connecting your ID into the docker container that you're developing inside Docker that that's a good that's a good question yes it's a option so you don't have to do it you can obviously develop python on your laptop you know and it's very easy to to to do that but uh what we what we working right now is exactly to cover this with a def containers so the idea is that you have you have the deck Prof file that uh you'll be using to deploy your code and then you attach it to your Dev container so you have exactly the same environment for your Visual Studio code or pie charm and it's brilliant especially when you're a python Library doesn't support M1 for example so I'm using this very often because some python library is still not build to mine architecture and and you can use def containers with a uh different base image to to overcome that yeah that makes sense I'm uh just making a quick note to look up Dev container support for neovim and I'll move on from that cuz not usvs code well uh I'm not sure I I I but it's a quite a quite a u popular uh technology now uh so I would I would guess that would be some support and it's it's rather brilliant because um you can even configure things like your addons in the in a in Dev container config file um so you can literally prepackage the environment for developer with everything they need uh and so they using it locally or in cloud like all the um editor plugins yesly yeah that's nice yeah so what so what we what we working right now is that we going to have in a in our quick CLI when you are developing python code uh you you would have a command and that would open the the visual studio code but everything thing you need to develop python based stream processing service um including you know all the requirements all the python stuff all the uh python plugins in your Visual Studio code so you don't have to go to painful journey of of learning by yourself yeah that sounds nice but that seems like step one right if you would if that were just the problem you were solving you could have gone into the developer tooling business yes generally so what's your next step from that into making streaming specifically easier well to be fair I actually did uh so the first years of Quicks were uh more focused on on tooling um which we just discussed and yes the second part it's quite uh interesting you you kind of order it as it really happen the second step is the actual stream processing which is you know uh a second challenge so even if you have a tooling even if you get everything you can imagine to to develop comfortably your code and you have over side of the data and and you can deploy Dey the code easily as well which like it was huge you know problem for us to to teach people how to use um kubernetes so they are independent like you know you're either going to build a monster City internally so people can use kubernetes somehow obstructed or you going to teach them how to do it there's no idea solution yeah and then even if you give them that um then you will find that they just can't or not can't but it's very hard to get the head around this New Concept and so um this is where uh the streaming data frames idea came to the place um an attempt to bring a batch Massa memory into streaming right data frames are a term I only really know from a cursory uh acquaintance with pandas right yeah you're treating it as more of a concept than a specific thing yes and to be honest uh we are not very first who had the idea to use the concept outside of the technology so a p spark has slightly similar um approach to to batch and big you know uh spark data manipulation to give you a pandas interface to analyze your data but but actually under the hood is not pandas but it's spark and the the row is being redistributed in a spark cluster now that's what we did with streaming so you can think of Topic in Kafka as a lot of messages okay you like you're going to have thousands of messages in different streams stream being a message key so if if I if I give an example of uh a different Uber car driving around the city now each driver going to send a message with the message key driver ABC and the payload is going to be some data GPS location longitud longitude speed Etc yeah now you can think of that as that each stream is actually if you if you rotate it by 90 degrees it's an infinite table an infinite virtual table where each property of the message forming one column yeah so so imagine you have Jason let's simplify this for Jason there would be a property called speed and that property would repeat in every message of that stream of that one driver now what we doing is we we basically flopping it 90 degrees to a table where each message is one row and then uh you're working with the table like it will be static in your J notebook like it materialized but actually it didn't so let's say that you have a speed column and you just want to for practical reasons convert it from meters per second to kilometers per hour okay if you would have the static data in your jupit notebook we would just do a one line in pandas you know DF name of new column equal DF speed multiply by 3.6 okay and it will just add a new column to your static data now we do the same with this virtual table but the difference is that every time we get the new message which is the new row we execute this Comm this this this function to add that new column which is actually in this case new cell and then we send it to Output topic so we are doing the same thing is just we doing it for every message rather than the whole table right so I'm building up a mental image of an Excel spreadsheet where inste I can scroll down and down and down and it keeps going and new stuff's coming in even as I scroll yes and and I would like to pretend I can just transform I can add a new column in my Excel sheet once what you're doing is pretending is back back forward filling that every time a new row gets added you you add in that column that I defined earlier yes exactly so you when you you when you're writing your python code with streaming data frames you're actually not manipulating any data you're building a lazy loaded data pipeline which will know what to do when the first message arrives and then that instructions so you you building basically instructions with your B code that instruction will be executed for every message so you don't have to think about that you you know your your your brain doesn't have to uh uh kind of absorb the fact that data are flowing and they are causing this uh rather unnatural uh behaviors uh compared to badge but you can focus on the actual data and manipulation of it so for example U you know if if if I if I create a classical batch operation I load the data of Uber driver I add the new column and I put it back to database yeah and basically what I'm doing is I loed all data I add the cell the column on and I save it once what I'm doing here is I have an input topic I'm getting these rows as they arrive to my transformation I'm adding the the column to each row in you know in independently and then I'm sending it to Output topic where some somebody going to consume it equal is somebody going to consume the result of the budget work in the table so at the end you can sync that data pipeline to table as well and the only difference would be that the roles would be appearing real time rather than once per day or once per hour when the B happened but the result is the same and you are abstracted from as a developer from the drudgery of of of of thinking in this paradigma um yeah I can imagine writing some code in Python that look like I'm doing a for Loop over a list and then some compiler magic transforming that into a bunch of yield statements which actually are processing it one by one as it comes in right yeah that's very similar yeah that's it's yes that that way of thinking yeah okay I'm happy with that I think this and and I could see how that would Shield insulate the developer who's happy with batch from dealing with the streaming World surely this gets hard when we reintroduce things like um State and windows yes having said that um it's still you know it's not 100% obviously because for example with the windows there are more you know more windows types in streaming that makes sense in batch like for example a Hopping window is a bit you know cont intuitive in a in a bbard but things like rolling windows or or tumbling Windows there are still same in in jupit notebook or in in in streaming so you can think of like give me a last 10 seconds every speed now if you go you notebook you load your driver data and you you do that operation you would do DF do rolling you know you put the parameters and it would add a column which would use the values from the cells above to calculate the value what we do instead is that as the rows are coming in we save them to the state and then every message coming afterwards would be a combination of the incoming message and the state to produce the output so then we kind of moving from iox to iob box plus State uh where the logic goes with the state as well okay uh let me see if I can push you further on this because I can see how you could uh Library away compiler away some of the differences between streaming and batch does it not get does your abstract does your um Shield not break when you start doing things like streaming joins of potentially infinite um sources of data yes obviously as further we go to a stream processing specific um features yeah the the um um it will go far bit from each other but still for joins um you can join data in in a static environment you can join them in a streaming in streaming you have to provide more information to a behavior that you expect so for example how long you are willing to wait for your data now of course that's not happening in static because you have the data in your disposal but here you might won't be waiting 5 seconds for the second source to arrive and um that slightly complicates the things but my thinking here is that it's a journey um you know you go into stream processing and you're going to start with simple stuff then move to probably some stateful stuff the joints are really uh uh hopefully the thing where you know you can start with some defaults and then start tricking it um still I think much simpler than um using using um just um the the client client API okay so I think uh tell me if I'm right or wrong here but I think I'm going to characterize your approach as lots of people in this world are trying to say we need to make it seem familiar for people so we'll start with SQL and that seems like a good choice but eventually you hit a ceiling where SQL isn't powerful enough for the job and then you get bumped into Java and you're saying we can still do the same trick of making it seem familiar but if we start with python eventually we'll have to introduce new Concepts but we won't have to introduce a whole new language exactly yeah and we carrying all the the perks of a stream processing library with it uh which is native in the language so uh hopefully you know um people can debug it to get bit more sense into it and and when they you know when they using when they building the logic uh it will be a bit less complicated to debug uh the problems so that's the idea behind it yeah and hopefully the mass memory from you know um from from patch will carry on into the streaming yeah okay yeah I I quite like that cuz it's like saying you will have to learn new things but you don't have to learn a lot on day one to even get some results yeah yeah yeah and this was always our you know our way of thinking is to if you if there is a path to get you to something with where you see the value fast uh people will appreciate that um because I always felt that when you have this intera you know when you're learning a new technology or new thing in general yeah having these AC points okay I know that I can do something and I feel enabled to do new thing because I just learned this new stuff it kind of drives you to and motivates you to go further when you have to spend a long time to get to the first anchor you you start D you know you you get the doubtful like am actually going to get death and maybe it's barely out yeah is it the library is it me is it time to move on either way yeah yeah exactly okay so let's dive into some code because I I can easily think of a language or two where I'd like a decent stream processing library that isn't Java uh let me pick one I'm going to say gleam I want a stream processing library in gleam I'm feeling spicy tell me how and how much work I can expect to build a proper stream processing library in a new language give me some pointers basically uh first first thing you have to look at is what are the client libraries for the broker you want to choose um so let's say you want to use Kafka now if that language has a decent library for that techn for the for the for the broker that you want to use the one thing is thick uh it's it's a good start okay and then uh you going to have to learn um a lot of Concepts if you want to go to stream Su stateful stream processing for stateless the you know it's it's more about packaging the whole kfka interface into more digestible more language specific interface uh or use case interface if you like yeah take take the CFA library and make it idiomatic for the for the language yeah okay but then when you go to stream stateful stream processing then it's a then is the a Jour because you need to think about how you going to start your state how you going to use change L topics are you going to use state with uh checkpoints are you going to duplicate your state to do some resiliency in terms of database corruption and then you need to find a way am I going to use my broker um my broker and possibly the deployment engine like kubernetes to scale my processing which is the client Library approach or am I going to build a service engine that's going to manipulate my data and my code in a fashion to do that um so you know they are both both directions has plus and minuses but uh this is this is the this you have to do and if you go with the streaming Library like we did then um yes you you're going to have to F you're going to have to use um the broker scaling and resilien features to make this skillon resin so like retention res uh uh replication factor of the topics yeah the assignments of your partitions you probably going to have to use temporary topics for certain things like goodp buy so you know the way how how you can do grp BU with the streaming library is that you restream your data to a temporary topic and then by that you repartition it right if you do it with if you do it with a Flink you will basically Flink will take the data and partition it inside the engine but we don't have that engine so yeah so you have to build some kind of uh process job graph generator thing that's transparent to the end user yeah and well transparent but also extensible um so I think that whatever whatever your buildin methods are rich or not rich in terms of what you offer and build in in any real application people going to have to build their user defined functions it's just you know I I just I don't see how any SQL based uh system without udfs is any way useful um it it needs at least the SQL udfs uh if if anything because um in real world you just need more flexibility and and so that has to be easy to do to do like to to build you know you are doing not mean but standard deviation or maybe you doing some you you know you're calling a machine learning model to give you some some estimate or or I don't know recently I was calculating which is quite interesting use case uh if you have GPS coordinations of the car what is the distance traveled between the points oh yeah it's a function it's just mathematical function and it's a it's a function that gets it's one that's easy if you just want to do Pythagoras and a bit more tasty if you want to consider the curvature of the earth yes right exactly yeah I I was thinking about that recently uh we're talking with a friend like the problem with the some of the SQL engines maybe you can tell me how you solved this so the problem with some of the SQL engines is um you've got that ceiling where eventually you get kicked out into say Java yeah and if you can Define if you got user defined functions that ceiling goes a lot higher right there's a lot more you can do staying in SQL but you you always have a problem when you let users run their own functions but you're trying to provide a cloud service like you can't let you can't let the public run arbitrary code but you need to let the public run arbitrary code how do you solve that yes well first of all I would say that um the user Define functions of seel move the ceiling higher also open the doors for monstrosities of uh it's uh I think that when people start to build a business logic in Sequel very quickly it get very ugly and yeah and yeah uh I have uh I have quite experience with that in the beginning of my career actually yeah I may have committed a few sins myself in my past yeah I remember the tql uh times very well uh when people were creating at thousands lines long straight procedures and this is kind of lead to the same thing uh well yes so to to run a customer code it's a challenge now uh the way how we we have solved it is using a Doan kubernetes and set the rules around it accordingly um but yes you kind of opening opening the P's door with with that uh but I just yeah I I I don't see the way in limiting the framework the way how I see it is that people will just deploy dedicated instances uh of the thing for systems that that requires uh the extra the extra uh protection from any sort of you know um uh separated infrastructure so don't do language level security do container level security yes because like I I just don't see how how um a SQL based transformation without gdfs not be any way useful um because you're literally working with five or 10 or 15 functions at your that you have a new disposal and um that's just not going to cut it to me yeah yeah yeah that's I I think we do sometimes in the streaming World underestimate the business value of just taking this schema and turning it into that schema of course but yeah but as soon as that becomes day-to-day work the more interesting work it it's like being given a programming language where you can only use the standard Library yeah there's a lot of you can do but if you can't Define your own stuff very limited yeah and well yes and also you know the standard language libraries are usually much richer than the yeah the Fink s the Flink CLE is quite rich full because the library is and the engine is very old but still it's yeah uh still admitted the nice thing about SQL is it's very accessible and even non-programmers might well know it but I think that's becoming kind of true of python too yes uh having said that we also planning uh to build a SQL layer on top of our python uh Library um because well it's not that difficult to be honest and it has a value it's opening the door even more for a bigger pool of people but yes I think the python well it's you know the python is most used language in the world and there are reasons for that uh I think it's it's probably easier to to to to to learn than the others although uh python wasn't my first language to learn so I I kind of uh never had the opportunity to learn the python first um and I think second is the ecosystem like right now if you look at the world right now um all the interesting stuff uh all the all the you know all the thing around llm all the all the interesting uh Innovations is somehow happening in in a pikon ecosystem and uh and that's I think what fueling the the user base of of of the Python yeah it it's the the fact it's becoming the def facto language for people getting into programming and for data manipulation experts right yeah yeah it does yeah yeah and and I would argue that um kind of uh if you're starting in the ground zero um is it is it going to be SQL that much easier than the python if you you know because to me the secret problem is that lack of autocomplete uh in most cases some some databases have autocomplete and it's great but it's always kind of fiddly um and if if if you if you if you start the python right and you get a good content uh I don't think it's much more uh complicated but then the the power you get with it is so much higher yeah yeah again that ceiling is I mean it's a general purpose language right yeah okay so are you at all tempted on that logic you know how to do it you you're looking at making it accessible to more people are you at all tempted to say our next Target is the JavaScript world or something like that we're we're constantly debating this um internally uh how we going to uh what we going to do here uh we have focused on one thing because as a as as a comp as a company our stage uh we have to focus our resources and to be fair building a because we not building just the library we building the whole Cloud platform to to help to help you stream process to to help you process streaming data it's such a challenging engineering task that uh even with the focus to python it's still too [Music] big we we will we will look into more languages later that's we we we we will do that um but now we're trying to solve the python okay so if if I start my gleam Library you're not going to feel too threatened at this stage no no not with The Gleam but yeah there are there are other languages uh underserved by streaming texte like you know my you know my old uh net which I started my career on it's very underserved uh in it's exactly the same problem like in Python like there's no difference in the problem it's just that uh maybe the python has more users but the net is super underserved uh the the the client library to Kafka is very suboptimal I would say diplomatic way of putting it it's surprising because C is so spiritually connected to Java you would have thought that it would already have pretty good support yeah and yeah and there will be a uh something like a Kafka streams um very well supported by some big company but it isn't there's some one attempt some open source attempt which I haven't tried but yeah it's um it's it's people are left in a uh suboptimal place to to use gafka and other Technologies in that stack okay well so let's just go on to a slightly different topic which which relates to you dividing your attention as a small company right you've got a cloud platform and I'm going to say the um the user interface for that for building streaming pipelines is one of the nicest I've seen so give me some insights on how we make this whole technology presentable to people in the world not not just accessible to programmers but like the art of user interface design for a new area is a tricky one yeah I think one of the most important ux element that we have done is our pipeline view which kind of help you to just get your mental thoughts straight in what you're actually building um and what is actually built by others so like even people that are not programmers but going to be maybe using this uh pipeline maybe they will use the result of the pipeline somehow to integrate it or uh they just need to understand what the team is building with this pipeline view you you can visualize it in your hat uh just getting a bunch of services that maybe have some environment variables in them uh that's very difficult I think the second this the second thing we are now trying to kind of internally um do is to serve this technology to different personas because they have very different way how they want to consume the data and how how they want to use it to their goals so you have a software engineer which probably want to use full power of microservice full power of local IDE and uh for power of the dependency management that that provides um versus a maybe a python analyst analyst using python that wants to just do a simple analysis on data and uh just write a couple lines of python to manipulate data to do the windows to do filtering aggregations and maybe they're not interested in in using you know the full-fledged programming experience there so this is where kind of we're thinking on that front okay is this as I always think the you get a data science job and you think you're going to be doing data science you actually spend 80% of your time cleaning up data are you looking into this idea of like uh what's the word data mesh like data cataloges like we can build we can easily build something that would do the cleaning of data and then present that as a user interface like heo or options for data sources within the company yes um so um I think that with this with with with this approach first of all you don't end up having such a unreadable uh data data that's that's a number one thing because you can uh you know you can you can Branch the data as they come into the system and then save them in a nice way uh so you kind of you kind of moving the responsibility of do something with Data before they saved versus after they saved uh okay which I think is very powerful um because the natural thinking is I'm getting I'm getting this data let's dump it to S3 yeah and or similar style of database storage and then you know uh and then you have this 80% of the time they trying to do something with it yeah well you can actually you know still dump it to S3 because that still you know pointing that but then you can build a branches and say okay there is a bit of Time series data well let's save it to influx and here we have some data for our vect database and maybe here uh a metadata for database or similar style document store could be useful and and then if you enable them to do that uh rather than some uh integration engineer that's actually getting data in then they can actually leverage it so that's that's number one thing and in terms of the the resources I think that um it's just about getting companies to the better being in a better game in terms of data like how you treat your data and where you are in that game um this is just one step it's not everything you know there are more things to to improve that but it's just one step okay that makes you think of one more thing we haven't really touched on and it's uh it's not a natural fit for the python world but data schemers types is that part of the puzzle that You' thought about no it's a very good question actually um we going to integrate with schem magistry we haven't yet and uh I I I tell you kind of um the the reason um other libraries and other engines are strictly typed and they strictly require you to get a certain schema in the topic because the way how they surface the data they surface the data as objects and and for that you need the types now we surface data as data frames tables with columns and and and and they are they don't require such a strong um schema although at a certain point and there are definitely use cases where where schem integration makes total sense for validation and for for kind of the whole companywide um orchestration of your schemas but you it's not mandatory so you can still equally as you would do in panda in jit notebook you can you can check are these columns present in my data and maybe fill the columns that are missing with something so you know um people in Jus are not used to work with schistes I can believe that yeah I can believe that most python programmers are happy with Dynamic typing sure exactly but the reason why we planning to integrate it is that not this is not 100% true and also it helps with some you know things like data visualization and Etc when when you kind of provide some metadata for data that you're sending but on the other hand uh it also bringing a lots of complications in other use cases so that's why we definitely never going to make a mandatory so you know imagine you getting data from I device that have a different sensors sensing in a different frequency yeah now what you're going to get is for example GeForce data 20 times per second and GPS data once per second now are you going to send it into topics that going to make your life very hard so then what you have to do is create a schema that contains both and then you're just sending unnecessary uh syntax uh sugar around or um encoding sugar around um or you're going to send messages as as you want and then you have a processing in a pipeline that just join the data when you need it but not join the data when you don't need it so you don't need to join data to sync it to your database but maybe you need to join the data if you need to reference both columns in your processing logic okay okay I can see that as a solution we are gradually going full circle here but I'm now thinking about error handling now I'm not a um I'm not a python data frames expert so correct me if I'm wrong but I believe when you're dealing with like you deal with data you've got a million rows of data you calculate something all the data is there so it works or it doesn't in the streaming world you can have code tested on a million rows of data and then the third millionth row turns out that number isn't a number sometimes it's a string how do you deal with the error handling when when you can't process your errors in a batch there are two uh type of use cases which requires uh a different way of handling these situations so either you are in a situation where and that's usually when it's stateless operations to be honest but where uh you rather get data continuously and you rather not stop your processing and then you probably send the messages that failed to a dead letter queue of some sort basically topic which will hold the messages that wasn't Pro processed properly and the Second Use case is where actually it's a you know it's a stateful operation where missing one message could makes everything completely uh incorrect yeah and that is by the way a default behavior of our library and it's that the way how it would work is that when you reach to the point where there is something like that that there ra an exception the code will stop that restart the service to the last checkpoint and try it again because maybe you know uh it was some environment factor in it and if it's not if it's really just your code the pro steer processing will stop there until you fix it until you deploy a fix in your code it will be basically stopped at that checkpoint and it's it's fine because you have the the storage of topic and and you have the checkpoint saved and you have your say State saved to that checkpoint so moment you update your code to fix you know maybe you have not expected the date in that form or maybe you have not expected that this colum might be missing then you can continue your stream processing and uh that's a different this is a second yeah second scenario really okay yeah that makes sense and is there dead letter Q scenario is that something I would just handle as ordinary python code cat save it off yeah yeah yeah yeah it is it is like you know imagine you you uh you have very stateless processing where um the fact that one message in a 100 has a corrupted schema or corrupted data in it doesn't necessarily means that 99 messages has to stop working as well but if you have a problem with you know a balance calculation on your bank account yeah now it's probably better to stop yeah and that's definitely a domain specific thing like how important is it to process every single row yeah yeah that's totally makes sense okay so um I think it's almost time for me to go and build my gleam based competitor I better go and have a look at quick streams first on my local Dev container how do I get started so the first thing you just do a bip install quick streams um which is part of the beauty and then uh on our website we even have a code sample with a public source so you can literally play with that and and then when you are ready uh you can um sign up for our cloud and actually start building the pipeline but yeah the easiest way is to literally do pip in s quick streams and get that code sample from our website um it's doing some window and you can change it to do whatever you want um Kick the tires on it and see if it's a good fit yeah exactly yeah cool okay okay great I will go and do that and then I'll go and speak to my gleam expert team and you'll see me competing with you two years from now Thomas great to talk to you it was great to talk to you as well and thank you very much for having me and pleasure yeah good good luck see you the next time you are in London yeah see you see you next time cheers well thank you Thomas and I'll tell you that I genuinely have started scratching out a gleam library for this but it's going to be a very very long time before it's anything more than my little toy playground unless for some reason you want to invest in which case we're weeks away from launch provided we can secure the right level of funding while you're holding your breath I'm waiting for that Li don't hold your breath while you're waiting for that Library if you want to kick the tires on Quicks your best bet is probably pip install qux hyphen streams and then check the links in the show notes for documentation one quick announcement before I go if you're a regular listener thank you for joining me regularly there won't be an episode next week we'll be back in a fortnite that gives you a little extra time to like rate or share this episode please do please take a moment and if you're not a regular listener and you're not already subscribed do click on subscribe and join me in a fortnite for another developer voice until then I've been your host Chris Jenkins this has been developer voices with Thomas newbower thanks for listening for