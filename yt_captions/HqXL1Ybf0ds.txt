to realize the first day of meeting C plus plus closes with an armor pie and with Android Alexa and with that I'd like to welcome Andre Alexandra School thank you and by the way this is like the best pronunciation of my name in the Western Hemisphere congratulations thanks very much for having me at meeting C plus plus okay I get the confirmation that this is working in the room and I also see the first questions [Music] um I'd like to start with a question um you know we had a keynote about Rangers and Views and Concepts just this morning so I would like to ask you like what's your opinion on uh views and Rangers in SQL Plus 20. um I'm not sure what I missed the keynote because I was working incidentally you have an opinion on that on the Rangers I'm I'm not I don't have a shortage of opinions yes so um I think um uh you know of course I love ranges um ranges are something that I've been um working quite a number of years literally in the D community and I think um ranges are not only um uh a hand you know handy right a handy way to use iterators but are fundamentally um a step forward um so I like the ranges a lot the views are also you know in the same category so very often you need a way to access a subset of a larger container um the only problem I see and you know essentially there's there's this problem that exists in the cirrhosis language and uh it not being solved it's carried along with uh with everything else is safety so um you know if their interests and rages are and Views are all um in in many ways uh unsafe and that makes them uh dangerous at times um they're you know I'm not saying they're not necessary but they uh they do come with caveats um you know if you can expire outside of its uh container and Etc and you know it doesn't ranges so I like you know it's not that I like I I would say they're as necessary as I mean their survival you gotta have them like if you ask me like does a house have to have like a can opener yes it should it should have a can opener it doesn't mean I love can openers or that you know I dedicate my life to them but um at the same time you know between can openers maybe I want a safer one you know maybe at one one that I I'm not cutting my hands with usually there's a question about safety and that is are there any lessons learned about memory safety that C plus plus can learn from d um uh I I wasn't expecting such a question I was expecting a question involving the Ross language which is more uh sort of to the Forefront of safety uh nowadays by the way should I should I see um should I see the questions myself or you're just like uh I just bend them in and the audience sees the question and I ask you the question okay awesome okay I'm not seeing them so I can't pick and choose um I think um so speaking of okay so I have a C plus plus we have uh rust and we have D so that that these uh three languages that um um uh have a word to say about the speed and safety um and uh Russia's gone you know the whole you know the whole way and they say we're gonna we're gonna do absolutely everything we can for safety and in the process of doing so we're gonna ask you required to write your code in quite a different way uh so you know rust code is uh very often looks uh foreign to people um and uh these somewhere in between which makes uh makes the whole thing quite interesting uh D currently does not have a borrow Checker which uh is uh the quintessential way of um of engineering safety in the rust language and um there is work uh in the by Walter bright right now um we we uh we keep in touch and we we uh discuss uh quite a bit um his work on type safety and he has um an idea that I think is quite interesting which is um safety for references and pointers and you know everything within directions would be an attribute on the on the object and that means you have the option of Windows saying you know I just want the you know references to this particular object to be tracked but this other object I trust right you know I don't care about or whatever it's not of interest to my uh safety Pursuit so you can have a mixed mode whereby you you can mix uh pointers that are safe with pointers that are not necessarily safe and that's not via attributes of attributing Dr um quite similar to those in C plus plus um so that makes it interesting from a migration perspective and here's to get to the question here's where I think C plus could uh take inspiration from from the D language because you can't go from zerosas to a rust style um way of doing things because it requires redesigning everything right but you can actually uh say you know what I'm going to say uh this particular pointer iterator range of view or whatnot I'm interested in making safe so you can migrate from an unsafe style to a safer Style by using attributes um that's not finalized in ID but there's an article on it and I can essentially I can send the link after the stock to anybody interested there's an article about how this is implemented in the D language and there's a there's an interesting um consequence as to speed Off compilation as well um rust the rust compiler is the borrow Checker is famously slow because it needs to do a lot of kind of you know all of an algorithms you know there's many of an algorithms you know any place replacing the code so then C process compilers are also slow for different reasons so probably the last thing you want is uh they have a feature that you know makes compilation times in C plus like 5x slower right so you don't want that um what you can what D proposes is you know what yeah you're gonna pay those prices but only for the the types and objects that you actually want to track and make safe so um I think migration is the important lesson that c plus could uh could get inspiration from in do you have a favorite ID I've been um somewhat of um mercenary with IDs like I've I'm I've been a long time um Visual Studio user back in the like um I don't know early 2000s like you know I was like using visual studio and windows like everybody else in the during those times uh pre you know before Linux became uh became more uh more ubiquitous um and once I started uh um my in the graduate program I started using a Linux um well pmax came uh was a natural a natural choice for some reason I never got into the Vim um uh camp or land or you know way of doing things but that's I I don't think there's any interesting conclusion to be drawn you know there's no there's no uh nothing any fair about my uh mental health or whatever by saying I'm using emacs and not DPI so I'm an okay emacs user but I never use like it's powerful I wrote my macros and stuff just to make it uh more like this video I guess um and nowadays um I'm using uh I'm programming Cuda for the most time and I just you know again path of least resistance uh Visual Studio code it works on Ubuntu and for some reason it was a mistake in scheduling the company installed Windows for me instead of Linux so I got the Windows machine now it's too lazy to kind of give it up and install Ubuntu instead so what I did I downloaded I put like this WSL I'm not sure um you know but yes it's a Windows subsystem subsystem for Linux so essentially you have a like a complete emulator of uh of Linux under windows and it runs at 99 speed so I'm good uh and visual studio works on that so I'm using Windows with Ubuntu on top and with Visual Studio code which is by Microsoft so it's a weird it's a weird Frankenstein I'm using right now but in essence let's say Visual Studio code now uh the funny thing is and I'm really uh it's really quite a coincidence that this favorite idea question came up is well I started using GDB like Back to the Future come on so I started using GDB because it's the most accessible thing to use in the whatever Frankenstein setup I have and you know here we are I hope there's no uh there's no interesting conclusions that you can be drawn about me before using GDP yeah so do you are you currently working on any books books am I currently uh so I think there is a need for a book so I'll I'll reply obliquely so you know I I think I I got back to C plus plus after a Hiatus so I've been for a long time I I wrote no code in C plus I wrote a lot of code in the D language so that was for years it went for years and then um I think it was um about since the pandemic started um I got burned off I got burned out from from uh being like a prominent member in the D Community how about uh some fresh blood so how about uh changing the leader the leadership there and I um I propose somebody else to be uh to be the leader and you know that's going well and that's nice uh that left me with an empty uh heart if you wish that lived a vacuum of uh whatever so I was born out from uh from that work with the with the community and I was like you know what so uh let's see what what else is there so I you know I um I um Eric nibler actually was uh very excited about his work Nvidia he goes oh yeah you know you should join and that'll be fun and that'll be awesome and all of these all of this parallel these parallel algorithms and a lot of good stuff and side during the Nvidia which is a great company and you know it's it's really nice work and I mean research so I'm uh um I have a relatively Long Leash if you wish as to what what I'm working on so anyway so um now to answer the question I it's I I think I I think I'm going to have a book in me there is a special feeling I have a book in me so there is this feeling you know do you have a book in here or not are you you know pregnant with a book if you're sure yeah is there like the seeds the idea or the you know the premonition of of a book is inside your mind that I think there is um and many people say oh so you know you wrote mother C plus design what's the next What's the title of that next book postmodern C plus whatever and you know moderation process has become right now um come on kind of a common phrase and everybody uses let's see process with a bunch of templates and stuff um but I think there is a need for a book that would be neoclassical C plus plus and if I ever write one more book on on the serious language it's gonna have that title neoclassicals um I'm not sure it's uh Sonia classical means you actually you use modern techniques but you return it will come over your classical values and I think classical values are something that the C plus Community yearns for wishes they wish us a return to that uh that uh sort of a classical purity of C plus plus um now let me um let me give you an example um how many sub language Indians do you think are in the C process language not rhetorical question and I'm opening this question for anybody in the audience to answer to or kind of think about and you know I'm not gonna provide a precise count but just like grow some models speaking first of all like there's like the preprocessor which is a complete different language and the hell with it you know just take it out of the way I don't want to talk about it that much right so the preprocessor is a is a is a a different language from the rest of C plus plus and I think there's no disagreement about that within the community but then there's a bit of a kind of a Federation of different other sub languages Each of which has its own kind of stake in the ground and it's some kind of you know it's not like pee on the trees around the landscape there right it's it's markets territory uh each style of programming uh there'll be like the oop object Oriental programming so you have objects and they have uh virtuals and they have best match uh whenever I call a virtual the best match is found and you have uh overloading and overriding rules and you have all of these nice things so that would be another sub language of course they'll be like the C like plain C sub language which is its own thing there and then you have the object oriented Editions but then it gets a bit a fair amount more um complex and interesting so you have like templates and templates have different rules as to for example like how overload interact with templates they're very different roles so the templates come on top of overloads but not in a kind of smooth natural way they're kind of different rules right it is best match but it's different that's partial ordering and there's kind of a whole different algorithm that deals with how you match templates so then you have like the whole template language and you know all of the uh interesting things people do with templates and you need to learn a whole different way of doing things let's agree on that right for example what I would do with the loop in C plus plus right in the like the uh Prater natural whatever uh simple C plus let's say right C plus with a single plus like the simple circles I'll do like a loop well wait a second in template world I need to do a recursion because there's no looping and there's no iteration there's no that kind of stuff and you know people are kind of said yeah so you know there's a there's a whole Market of intelligence developed around that skill set a whole Market there are experts in templates they're not not necessarily experts in C plus plus but expert engine process templates so in that specific sub-language not to say there are world-class experts in the pre-processor so that's kind of a weird world of its own it's just you know again like the backers keep on coming back so let's let's push them aside for now so we have this other style in AC process which is like templates and we have like whatever you use a recursion and there's no there's no if so you don't end the recursion with uh like if n is zero then I'm done with recursing you know like whatever there's no if what is there yes how do you end the recursion in C plus templates um regressive factorial right and you want to completely exactly so you Define a species I'm going to specialize for zero or whatever the hell right I'm not gonna end the recursion so there's a specialization so there's no if in that language in that sub language which is very interesting there's no iteration and there's no if right um but there's like different names to things and that's still like a good thing you can you know can give a name to the factory and that kind of stuff and you know there's this new template using thing which helps and so okay so we have that uh that whole world but wait there's more then came along very addicts so so with valedictions you have this whole yet another different style of programming which is there's no if there's no looping there's no giving names to things you can you can say using a equals pack you can't give a pack a different name and it looks like uh what do I care like I can use the original name no no wait a second if you can't give things a name you can't return them from functions for example you can't compute things so that's a fundamental right of civilizer programs that should be a fourth blind like but the Hague the tribute tribunal at the Hague with international human rights should enforce the fact that serious programs should be able to give names to things so this is like a fandom absolutely fundamental thing that I want to do I want to say oh uh this thing that you call a I want to call B and that's you know from here on I'm Gonna Keep uh using B so that's an important thing because that means you can you know it can return you can pass it to another you can do computation if you give names to things but with uh with tax you cannot give names to things so that's a whole yet another different style of programming where you don't have iteration you don't have if and you can't name things with templates you don't have if you don't have iteration but you can give names to things with traditional programming you could do all of these things you can give names to things you can create Temporaries you can copy things you can modify things you can have absolute freedom so that that is the yes that is classical C plus plus when I can do whatever the goddamn hell I want the way I want with loops and with if and with else and with Y and you will switch if I saw one and so help me God okay all right so then comes the template thing which you I can't do most of these things but I can do all of these recursive weird things and I kind of it still makes my day so I'm still all in good shape but then comes the parameter packs where I can't do any of these things so then people come with a variety of techniques for parameter packs and it's their mind-boggling like you know I'm talking to colleagues saying oh you know I need to apply a function for every element in a pack and it's just like a mess and they're like oh yeah I have a little library that does that thing it's like a little Master thesis that that I need to read to figure out how to do something that's uh that's really simple with a pair and then but wait yes there's more there's also Concepts and simplest concepts are there's no equivalent in like uh in like in in um in natural life right there's no like simple thing I can compare them to like yeah because some templates are like a weird functional programming thing parameter packs are like a weird list macros thing and serious concepts are like something that doesn't look like anything and um there's like the request keyword what what's wrong with if why why why is why is there yes why is there requires keyword in the C plus programming language why what's wrong with if because if means requires this happens if that happens case closed but now we're gonna add a new keyword which is actually a Common Language but yeah so classes are their own sub language within C plus right so that so then we have this Federation of many languages that compete with one another and in which the way of doing things is very different from one another I can't do with the pack what I can do with classical sequence first and I can't do with the fact what I do with the template and I can do with a concept what I do the impact Etc so I think what what is needed what what's needed for this community which has is yearning is um wishing to return to some classical values is the classical C plus plus book yes the classical series with the neoclassical symbolus book which means I want to iterate a pack I want to iterate a template and I want to iterate uh whatever Concepts I want to iterate members of a plus and everything in the same way everywhere and that's why I'm insisting on on the whole um Reflections thing because reflection offers this uh this promise of saying we can unify all of these by writing very complex metal program code with if and for and while and what not that was that too long enough yeah so it's like that's going to be an interesting book that's gonna be an interesting book I I would um yeah go ahead we've just been a little bit in the right direction regarding a question for languages and so do you have an opinion on recent emergence of carbon Lang and simply reference cpp2 that more or less try to you know modernize and give a better context this is very interesting um I think our community uh is at um at an interesting Crossroads um these are these are science yes that um this the serious language is there are people dissatisfied with uh with either the language or the weights it's being managed and evolved and uh that kind of stuff and you know Carbon I remember it it for example there's like um uh the Google program is on some ABI breaking changes and uh essentially those are not approved it was not it's not not going to happen so a good amount of the effort for defining carbon was you know what we have the freedom to um to define a better ABI so um definitely there is a bit of um there is a there is again that the whole yearning thing I'm not sure I'm pronouncing it even yearn like to wish to strive to you know wish something really hard like yeah you know wish for some something um of of uh spiritual nature if you wish and I think that the spiritual need of Cyrus's programs if you wish uh is that c plus was more um um self-consistent you know because both carbon is going to be front do offer that they do offer a fair amount more self-consistency and a unified syntax and you know simpler you know simpler means for achieving more difficult goals uh and in C plus plus there's been a bit of a loss of of the way in the sense that people have been focused on what can be done uh regardless of the cost of doing it I remember those the stock on periodics um I'm talking about Paradox because I've been working on this book chapter and uh embracing uh models it was safely book so I've been working on this chapter and I put a lot of effort into it and you know I learned a lot you know I thought I knew very big templates but actually there's so much more to know once you get really into them um but um I think there's um uh there's that there's a need for for um uh the series of the language to offer ways that are uniform and simple and um um easy to achieve difficult things because this is the thing people are focusing C pluses and can this be done and I remember that this is talking emphatics and they said oh you know so we can do this if you just open namespace detail right you know a thousand lines of code in this detail acrossness presidents then they say using you know boom and you're done so you know what first of all like why the hell do I have to open a namespace detail every you know every time you you type namespace detail or whatever you know reserved or whatever have you right every time you you open namespace detail that's a failure in the language it means the language cannot express what I need to go some some places do some dirty work and come back so it means there's no clean naming you know there's no clean like Landers and clean things clean way to do things without introducing names um so that's definitely uh definitely a problem that is visible and then um why do I have to go through all of these difficult steps of achieving even though like apply a function to every element that people get a new pupil and that you know that's a little thing you just gotta kind of sit down and you know it's not easy it's just not easy um and a lot of things uh are simply not easy and carbon is simply with front even though ABI reasoning or whatever were part of the the motivation I'm sure um they're offering in the C process Community is going to be we can do what Cirrus does it's just simpler and more uniform more self-consistent right and um I should also add that there's uh the circle compiler and language extension so um there's a lot of work on Circle and that's sort of a very nice beautiful reflection uh based compiler which adds some um some extensions to C plus plus and you know it's it's an interesting it's an another um another proof another piece of evidence that actually the communities at the cross Crossroads there there are too many languages in C plus one yeah amen so we had last week a really interesting conversation with Sean parent about all the various languages and how he works with assist team or his team working on while and being part of the other efforts too and trying to you know uh get to to maybe you know maybe they're converging on one language in the long time we would see that um right there is a question um yes I'll dwell just one second on on carbon for a for a bit yes because you know CBD um like Herb's work is uh in a way um sort of very backwards compatible generally C plus plus and it's just essentially a source to sort sound it's it's anchored within the C plus plus milia but carbon is kind of a definite departure and I think what carbon needs right now um I think carbon is in dire need of a great idea and I'll explain what what I mean by that all right so okay uh turn the clock back to 1984 1982 right so 1984. so um zeros came and it was all about objects and even though it didn't do objects well because there's like no virtual functions and there's no this pointer and like a lot of things Brianna got wrong let's face it it was like you know it was the early days so a lot of things Beyond it got wrong in the initial C processary version but he got one thing wrong uh right and you know what that is that is the class keyword so beyond interest is the class keyword which is technically unnecessary because the class is really struck with like private and whatever but essentially he introduced this one keyword that I think changed the world because he said you know we can define a class and you can you know put functions in it and it was like absolutely amazing like everyone's like oh my God why do I think of this like you know how this changes everything and it did change everything so in the 80s it was the classes oop right oop and then the 90s come right the 90s come and then comes Java like Java was like the 90s like whoa you know you're like uh jump and you know write once and pray everywhere and whatever the hell yeah so but then you know Cirrus came back and he came with templates so the 2000 was like templates another great idea like oh you know we have templates it's awesome and you know that kind of stuff right so um every decade and then you know the you know the two uh 2010 the decade of the 2010 was safety rust Ross was where the cool kids were like oh yeah this is awesome you know so every decade has its thing right has its great idea and what I think carbon needs and I'm sorry I'm sorry folks you don't have it yet you don't have it yet but what carbon needs is a great idea that's going to take us to 20 30 right so they need a great idea what right now they have a lot of me too and a lot of we're not going to do that we're going to do that and we're gonna not gonna do that but they don't have like one great idea that's everybody of course this is awesome I'm going to discover from from uh from now on okay sorry for dwelling it's it's maybe even men can see that as an advantage of not being too much in the real space already but on the other hand yeah I mean the other projects might have right now a bit of a head and you know uh maybe they can you know get by by you know avoiding the obstacles which other products hit or we'll see um and as I said I think the the hour and kind of made clear that there's a lot of Vibrance and communication and exchange of ideas in this community so things might be converging on something um awesome we have to see but there's an interesting question I yes so uh what What's your opinion about the reflection implemented in cute and unreal and how should it be the way for the standard to reach that goal and standardize uh reflection for everyone all right so I need to confess ignorance here and I'm not sure how unreal does it and I only know the old way QT did it and it was kind of the macros and stuff and it was kind of um you know self they use like standards across but they added a few macros and stuff is that correct I'm not even sure that though yeah it's it's a high level overview and I I think you're not like a cute person so we can leave it at that and then change to the standard foreign politician don't answer the question we asked answer the question you wish had been asked of you so I'm gonna answer the the question that I wish people asked which what is the way you you are you want to implement reflection so I think um you know getting back to this neoclassical C plus plus I think um uh reflection should be done in a way that completely democratizes meta programming like that makes it absolutely trivial for any Rank and file programmer anyone who's not an expert in C plus who's not a world-class template whatever whatever wizard uh who is just you know one beginning programmer who has um a simple Notions of how to write code they should be able to do things like you know um because I just have this problem and it's just so difficult um you write your um Constructor and you want to do like the the default and but one more thing the default plus a little thing right so you want to say and for those uh for uh for writing such a function it should be trivial to say iterate all members of this class initialize that member and then do one extra thing after the loop so you should be able to do a simple Loop for example with reflection um and um I'm I continue being uh indignant in a way that um simple Notions such as um test and iteration are not considered top priorities for new features in the circles language they're like oh yeah no we're gonna do this recursion in a space detail the hell you don't you shouldn't forgiveness space detail that I if I see nice place detail one more time I'm gonna throw a fit right so there should be a simple way to do the simple things picture this you are in C but you don't have the if statement well wait a second so I need to do everything in a function with the question mark and with that nonsense and you wouldn't want to code in that language who would who would why would you want to code in a language that offers reflection in such a way that you need to yeah you need to learn yet another language sub language within C plus and there's gonna no problem there's gonna be no shortage of world-class experts who are going to teach you the how to do it at conferences so you know to answer the question I I think the the way for a standard to to standardize reflection would be in a neoclassical way with naming things with iteration and with test and make it simple make it make it trivial make it Democratic and make it in such a way that everybody not just the top one percent can code with reflection that is a very good answer there's a question um with example but I would like to read the full it doesn't fit fully on here so I want to read it uh so Dennis girachevski asks I'd like to say thank you that you had a massive impact on my career from Modern C plus plus to design your talks on performance in 2013-2014 and the question from him is um basically what is your experience with Sims so you know Center again I'm going to answer the question I hope it was last so I do have a bit of experience with CMD uh Sim restoration multiple data so you know there's um the specific data ties the specific alignments there's a specific way to do things and essentially it's uh it's a way of exploiting parallelism in repeated action so um I'm familiar at that level so I'm you know I don't remember I wrote an extensive code but for example there's a CMD library for the D language that I was uh I used um informally for a while so um I do have a bit of experience uh what I do have a bit more experience with is uh Cuda which is nvidia's um it's actually um singly singly uh it's um single instruction multiple tasks so it's Sim t s I am T so it's a bit more uh powerful than the CMD and that offers more flexibility and um um essentially um here's the question I wish was asked how important do you think CMD is how important these things seem the end simply in general like this highly parallel uh work is man I would say it is survival at this point I would I would just say not to um yes not to go like like a crazy guy into like climate change and that kind of stuff because it's not not topical for a programming conference but I do think we're in a race to save our planet from from ourselves right and um actually uh these uh techniques of Highly parallel code are the best instrument we have right now to do good things which mean um modeling which means like things like climate modeling as the large scale um I'm not sure many people know but right now we don't have computers powerful enough to even model more than like I forgot the the skillet more than one square kilometer for like with good resolution and what people do is like they model one square kilometer and then they they you know they model another square kilometer next to it and they try to kind of uh you know reconcile the edges right so it's kind of a mess so our computers are not powerful enough it just like takes a long time to do anything uh interesting so climate change uh is uh definitely um a huge Challenge and I think uh parallel Computing is our best um hope right now for uh for tackling it um you know not to mention AI models that are that could actually provide answers for how to build things that are not impacting uh the climate to um to band um so you know in in a very concrete way I think uh you know seem D or t like parallel programming is is an important weapon in our Arsenal and it's a very survival oriented uh uh you know um thing that we have right now and uh I would suggest that if you know anybody and everybody should uh should know get fluent with these things um clearly there's gonna there's gonna be a always a place for serial code and a lot of the code that uh controls these uh these uh parallel algorithms is serial so no problem you're gonna be you know you you're not gonna there's gonna not gonna be a shortage of oh you only write the Sierra program sorry we don't have a job for you that's not going to happen anytime soon uh but I do think that um there's a huge importance that um uh these uh highly parallel execution um um Fabrics have um to give you an example uh with um with an Nvidia machine you can literally launch hundreds of thousands of threads and do the you know you can you can accelerate um you can accelerate algorithms by tens of thousands of times like not just like that right and it's funny because at many conferences we speak oh you know I improved that by five percent and I'm awesome you know wow this is like five percent in sorting or whatever the hell you do right oh five percent is nothing how about like five thousand times right how about accelerating by five thousand times or fifty thousand times and so you're looking at things that take a week and not take a minute and that kind of stuff so I think um I think it's very important that we get fluent with uh with highly parallel programming and push it forward if you do something uh useful with all the threats and the gpus yeah we also have defense that gpus have not been used for fighting climate change in the past so much um yeah definitely that definitely is up to us to use them for good that's definitely a another facet of the problem do you have any thoughts to share regarding the complexity of C plus plus and how to attract and encourage fresh Engineers to practice and be updated with modern singers plus all right so there are these are like two very different questions so thoughts to share regarding the complexity of C losses we we discussed that a fair amount already um and you know I invite uh you and everybody else to think about um about a couple of simple questions for example um looking at um any application that you're working on a C plus plus or any library that you're working on how much of that code is actually doing work versus setting up things or kind of helping the work being done and um unfortunately a lot of times you have a lot of supporting code um just you know namespace detail my favorite right and a lot of like you know specializations and little declarations and you know tricks and you know everything that people people use and there's one line that says I'm gonna compute a hash here so you for example like the in the C plus hashing you know standard Library dedicated to hashing how many lines actually do math like divisions and multiplications and shifts and you know all the Glorious work of hashing very few so you're gonna notice that in the like the hash table in C plus was the unordered set or map you're gonna figure out there's not a lot of actual work being done but there's a lot of talking about it right there's a lot of a lot of um foreplay if you wish so definitely complexity is uh is is a problem in C plus plus and um there is a way to reduce complexity by adding to add features that reduce complexity which is very interesting and I discovered that while working on on the D language and it goes It goes like this so if you add a feature that does something you know entirely new there's a lot of effort there's a lot of cost to it there's a lot of impact of it and that kind of stuff but there is a there is a kind of feature that if you add nobody's gonna notice there's no complexity added and this is like a secret that's the I'm Gonna Let You in a on a huge secret right now because there is a kind of feature in a programming language that you can add and it does not make the language more complicated it actually makes it simpler and that is a feature that reduce that removes the limitation a feature that removes the limitation makes the manual smaller makes the definition of the language smaller and makes the user happier because they're gonna like naturally just do that and it's just gonna work and let me give an example the answer um did you know that you can define a class inside the function so you can write the function and inside the function go ahead and say plus whatever and it works so and that's nice and do you know that that class can have methods oh yes it can and it can even have virtual methods and it works and it's pretty nice and he can have Constructors and destructors and actually uh local classes the destructor has a number of important use cases um but it cannot have a template method there's there's you can't do that if you try like the compiler message is like it's even awkward it's like you know it's like a bad first date it's like you know that I I can't do that I'm I don't know why but I can't do it right why can't you do it there's no reason and that's an artificial limitation that actually limits the way we can think about coding in C plus plus because if you have a local class with full power of a class that top level then you can Define that and return it by means of an auto and suddenly you have like a full idiom that you can define a whole an entire class that implements a range a view on iterator what have you um a constant you know whatever whatever have you can you can implement it inside the function fully encapsulated and then you just return it by means of Auto and everybody's happy and it's just amazing and it has a time that you can't talk about like Voldemort type right and uh much like landas they have a time that they don't know the name of it and it's a it's a wonderful idiom to use and the fact that there is a limitation it's actually more work in the manual and more work for the mental for the programmer so there is a kind of complexity that um is artificial in C plus that should be removed by means of these kinds of features remove limitations why can't I pass the namespace to a template why can't now why can't I do a number of things that that I want to do right that should be natural that I should I should just be able to do why can't I Define a function inside of a function consider this I can define a class and inside the class I can define a static method inside the function but I can't Define a function inside of function why can't I and believe me in the D language you can define a function inside a function does very nice uses for that so this these are the kinds of limitations that uh should be removed and the language would be better for it and less complex now um as to um features that are complicated like template variables and um like a variety of things that people added in like really like even like the talk today about coroutines and the first uh the first it was a great talk by the way I loved it and you know but the first sentence of the talk was oh critics are very hard very difficult oh quorities whoa so like four keywords like you know just like the costing keywords is like huge right so why do we have these really complicated things instead of like saying well let's remove let's remove features and how many features in C plus plus are uh sort of the dog that eats the cat that eats the mouse that the mouse shouldn't be there in the first place like how many features in C plus address problems that C plus plus had um by means of an armed Force mistake for example like Concepts came because there's no easy way to constrain templates because enable if was so difficult right right and that kind of stuff so there's a lot of there's a lot of complexity in Surplus that is designed to fight complexity introduced by another feature so yeah I do have thoughts about the complexity of C plus as to um attracting encouraging fresh NGS to practice and be updated with modern C plus plus I think um the the simple ways to show good code there's no there's no um there's no alternative to showing good code and if you can't if you can't produce good code that people see and like oh yeah sure that makes a lot of sense then it's it's a you know then there's a problem with the language for example um I took to I think I took to Twitter I forgot so yeah I think it was Twitter and I said you know how do you do no I I took in internet work so I said how do you compute the Rarity of uh Lambda the erity of Orlando like arity means how many uh parameters it takes right so this lambdas with uh zero arguments one two and very big arguments so there's like it you know there's a variety of lambdas and that it just so happened in an application I had the need for the just the arity of a Lambda and it turns out it's not it's not an easy problem and what when you write the code so I found the code somewhere in a on an obscure site and I pasted it on the page and it looks so bad on the page yes that I was ashamed of myself for showing me to my colleague who's an expert in uh in parallel program but he's not an expert C license programmer so Shane I I was like you know what consider this is like an object file you think of this dot hs.o don't even look at it don't look it's like editing a binary don't look at that inside that file it just does the computer already of a function because something like absolutely an elder incantation from a weird book of Wizardry it was just like terrible and it wasn't working well because it doesn't work with Radix or whatever so you know how do you look at the you know how to introspect the types of Orlando like how you know how do you look at what members it has how many captures Orlando has simple question you can't do that you just can't and it's a it's a crazy thing that you can't so I think the best way to attract an encourage fresh engines to practice and be updated with modern acrosis is to write good modeling process code if you can write and then that's a problem now I'm muted so that was a good answer um I have an interesting question West w you were once a strong advocated in this world all right so I should mention that um uh you know a number of things that I um I heard about so actually like being the squeaky wheel is a good thing yes because um I've been advocating a number of things and they made it into the standard which I'm very happy about so for example STD um uncut exceptions uh which is instrumental foreign even more um there is um um I forgot the name there's it's being standardized right now so STD um so there is a there's a facility in 2013 that actually implements um School guard and that kind of stuff uh and it's right now in like tr3 or whatever and the experimental I forgot but essentially it's um it's you know I download the details of it because I saw it but I couldn't use it in the in the um version of the compiler of my Nvidia I'm using right now uh so you know I don't have experience using it so I implemented my own I wrote my own so my opinion about scorecard is that it's again it's very necessary for the style of programming you you want to have for example in um in Cuda code it's very frequent that you you call up or you call a function and that function May Fail You may have the wrong version of the GPU it may invoke like you may make any number of mistakes that are not uh that are forced essentially that you know you can predict so then imagine you have a function that's like five of these calls Each of which may fail in that function there's a control flow if else loops and one what have you and then you know every every failing every failure of doing so would need to restore the system to the previously known good state so it needs you need a very different style of programming of writing these uh five most possible failing points and um the I I literally don't know of a better way than using scope guards I literally know of no better way than than with score guards right any style of program you want uh to use is going to be extremely complicated and with scoreboard is the easiest so my opinion has evolved in the direction that we consider it survival of the C process programmer to your scope guards in uh in today's code there's no way you can uh you can survive without them and write correct code in the presence of exceptions that's true so your book is going to have a chapter on School of course sorry come again so your book is going to have a chapter on scope cards uh definitely so you know um you know and that's kind of funny you should mention that because um scorecard in a way is not neoclassical because there's no classical equivalent of scorecards it's a whole different style of programming but it's it's um it's it's something that you know the function creates the organ as they say right so it's the is the need that creates the the facility so it's not that I like score guard it's that I find it I find alternative tree that's suitable so once you have once you decide you're gonna have exceptions or any any kind of uh any kind of non-local flow of control um so any kind of non-local flow flow of control you're gonna need to have ways of undoing you know you know uh incrementally and do actions so uh definitely there's going to be a place for scope guards in in any uh in in the in any uh neoclassical if you wish uh C process code in style true so there's one more question which fits in the banners here um some of the ideas you raise are implemented in circle how do you see stroker related to C plus and to the Future directions of C plus plus um I think circle is a very interesting um point in the design space around C plus plus and um it has a very nice way of doing reflection it has like it has a lot of has a lot going for it um I'm unclear how um like you know as I know from from personal experience um punching C plus Susana knows is a difficult way to go about about migrating from C plus plus so Circle um in a way offers this proposition it's like you know what so if you want Circle just you got to start this using this uh new EDM new compiler new way of doing things new everything and um I'm not sure how ready the community is for it um I'm not sure how what path the community has I'm working I have a million lines of serious code in this application and I want to start using Circle and that is uh definitely a question that needs to have a very decent answer like maybe I can start using Circle and its facilities very small percentage of what could be and then you know start from there my understanding is that circle is a sort of a more radical proposition so you gotta kind of you know compile everything with circle um and indeed was initially the same it were like well you gotta rewrite your coding at the end that that's the way to go and then now we learn that actually it's much better to offer people a migration path and we we made a number of uh changes the language in that direction those help um so I think um I think for start like the simplest thing that the C plus community and standardization Community can do is look at Circle really closely and get inspiration from it so that that would be a simple way of going about things um because Circle definitely has a lot of good things about it by the way it certainly can't name packs so I hate that and you know if Sean listens right now Prashant I don't like that so please just fix it um okay enjoy like you know Sean is a very practical guy and he implements the things that he needs and that the he likes and uh that's totally fine but sometimes it goes in the way of um of what I think are good principles of language design which are like generality and not uh you know avoid the hand of God kind of uh facilities and yeah I'm gonna implement this but it's magic and you can't implied outside the compiler and that kind of stuff um that's um that is um um something common to all language designers language designers do that Walter bright does the same he tends to build in the language things that I wish were in the standard Library and I think that's not a good way to go sometimes um but you know to their credit like both Sean and Walter they when they Implement something within the language it's a lot faster to compile it's a lot faster to compile and it's just like uh you know it's easy to use and just use it and you know has a nice syntax because you know once you know the language you can Define your own whatever the health syntax is most uh most pretty it's so um I think at the minimum circle is a good source of inspiration and as a as a maximum it would be a kind of a medium to migrate to um but um all in all I think again Circle cpp2 and carbon are three signs that the community is at the crossroads and that's the important tidbit I think it's like really an interesting uh play field for ideas and let's see you know if this culminates into a new language or into you know C plus plus something added to the standard or something it's a really interesting time to see this evolve um there's actually an interesting question which I would like to close this with um it doesn't fit on the banner fully so I'll read it from obedo um recently I from some experienced programmers they don't prefer multi-threading they prefer to do in a single threat they believe multi-threading won't actually improve performance even in scenarios where we usually think simultaneous you know parallel execution any thoughts on this um like Sean parent and I discussed and Dave ever has we discusses says that um at the conference and it went like this like people use multiple threads in Adobe at Adobe with you know nobody's allocations and essentially like the custom maintenance is so high that they're and the the Casey from performers are not just are not justifiable and they're looking for alternative models to Market spreading and that kind of stuff so um there are many flavors of multi-threading nowadays and um when I say multi-threading I assume this is this would be uh this would be the old meaning which is you know I start like a mother a number of threads and they do a mother number of things and you know they improve the performance by a moderate amount you know on a good day and you know I agree that's not the huge um that's not a huge thing but on the other hand there are there are these um more interesting 3D model actually core routines would be part of the discussion like green threads um you know all of these um lightweight threads on cooperative multiplaying and that kind of stuff um and also a single instruction multiple threads and single instruction multiple data which are you can also think of them as multi-threading so in that sense I I would I would not agree with uh with the statement that they don't improve performance much I mean it's it's a simple fact of life that if you if you uh program with um similar structural multiple threads the Cuda model it's you're gonna have like absolutely like mind-boggling acceleration of code it's just like there's no and actually even the uh going from the mindset that I I have like five threads and I'm kind of wow this is awesome I have five friends great for like oh yeah I have like 50 000 threads and that's all too little you know I need more right so you switching from those uh those uh sparsity of threads kind of mindset to actually there's so many threads that I should and could use um that's a big deal uh and I I agree that five threads are not gonna be like awesome compared to one and yeah so there's a lot of uh cross street and there's a lot of magic involved there I remember like you know herbs talks about that atomics and stuff you know so much so that you saw that which we had tonight um and I think this is like fitting in this context like doing multi-threading things and and the style that it's not like multi-threaded looking and that it's more like you know normal code um right what's your view on core routines I think they're an important um thing I'm I don't know much about cool routines as the they're done AC plus um okay really clearly there's a like for example in C sharp it's they're a huge thing like um I forgot how they call them um there's a different name for for them um but green threads so early so there's a tradition like there's the erlang language right which uh had the green threads and then there's like um Windows had fibers and stuff which is kind of a weird point in space and then um uh JavaScript intro is like these odds like whatever and there's a credential pressing style so there's a variety of styles that have have something common and let me call that those green threads and green threads are great for uh things like when you have networking connections and a variety of um asynchronous work to do and a variety of devices that they need to keep using so definitely there's a there's a place in um um in anybody's mind for for green threads um uh and not to mention like the goal language which would be maybe the latest language that uh explicitly makes use of green threads um so definitely there are things and you know if you if you program a server um like anything with connected to the internet or whatever you know those would be like the go-to obvious solution to a green threads there's no better there's no better way to program these things so um there are good applications that are essentially that this uh green threads are the best solution for a category of applications and that says a lot right yeah I think that doesn't evolving evolving space and we have to do a lot of education and into the general programmer fear to make them understand that and I personally you know know a little bit more about and see talks about what C plus standard is going for and I think we're on the way to it but we're not like really there where it's like for the masses in my opinion but we're getting there I hope and with that I just generally want to close this after one hour um thank you for coming thank you it's an honor to have you it was a great conversation loved the question thank you for the question to the audience and um final words is yours anything you want to plug anything you want to say thanks for having me uh yes it's a great honor to be here thanks uh very much very many thanks to the audience who was here tonight and um closing thoughts I would say write good code and you know put that text off into it okay and thank you very much and I will end the Stream