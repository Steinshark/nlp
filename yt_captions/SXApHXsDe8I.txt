instance methods, class methods and static 
methods. what are they? how do they work? and   when should i use them? this video was supported 
by hostinger, who's having a black friday sale.   choose your favorite web hosting plan. hostinger's 
premium shared hosting plan is only 1.99 a month,   and that comes with a free domain 
by the way. click the link in the   description and use coupon code MCODING 
in all caps at checkout to get up to 91%   off all yearly plans. it's really easy to register 
your first free domain, and if you have multiple   websites that you want to manage, it's easy to 
add them and keep track of them all in one place.   if you've ever thought about making your own 
website, please consider using hostinger.   instance methods, or just normal methods if you 
prefer, are supposed to operate on a specific   instance of a class. when you call an instance 
method on an instance of a class, that instance,   in this case "a", gets passed as the first 
parameter to the method. this of course allows you   to read from or modify that specific instance of 
the class. but sometimes when you write a method,   you don't really care about the specific instance 
of a class, or maybe you don't have a specific   instance yet. that's a good signal that what 
you're doing might be a good candidate for a class   method or a static method. here's a basic calendar 
class that just stores its events in a list.   the "add_event" method should just be a normal 
instance method because different calendars can   have different events. for scheduling purposes it 
might be a good idea for my calendar to be able   to tell if a certain date is a weekend or not. 
whether something is a weekend doesn't really   depend on any particular calendar, although it is 
related to calendars. all calendars better agree   on whether or not a certain date is a weekend, 
assuming of course we're ignoring people that   live close to black holes. we acknowledge that 
this function doesn't care about any particular   calendar instance by deleting the self parameter 
and marking it as a static method. now we can call   "is_weekend" on a date even without referring 
to a specific instance of a calendar. if we   just happen to already be using an instance of 
a calendar we can still use it this way, though.   next, suppose i want to be able to read a calendar 
and construct one from a file. you definitely   don't need an existing instance of a calendar in 
order to read one from a file. you just construct   a calendar, do some stuff, read from the file, and 
then return the new calendar that you constructed.   so you might think this should be a static 
method, and you could implement it that way,   but it's actually a better fit for a class method. 
notice here how we're referring to the class   itself inside this method. the main problem with 
this is that it breaks inheritance. here i have a   "WorkCalendar" that's inheriting from "Calendar". 
if i then try to call the "from_json" method   from my work calendar, i would expect to get a 
"WorkCalendar" out, but the "from_json" method   had hard-coded a plain "Calendar", so it's 
going to return a plain "Calendar" instead,   probably not what you wanted. what i most likely 
want is to be able to refer to whatever class   it is that happened to call this function so 
that i can create an instance of that class.   well, that's exactly what "classmethod" does. 
"classmethod" inserts as the first parameter   of the function the class that the method was 
called from. so if i use "WorkCalendar.from_json"   then class will be "WorkCalendar" but if i just 
use a plain "Calendar.from_json", then it'll be   a plain "Calendar". this is very similar to how a 
normal method works, except instead of inserting   the instance it inserts the class. just like a 
static method, though you can call a class method   from an instance of the class. written this way i 
think it can be a little bit confusing why you're   calling something like this on an instance of the 
class when that instance is just ignored though.   however, this can be useful if you want to call 
a class method or a static method from a regular   one. it basically just saves you the inconvenience 
of having to call "type()" on self. so that's the   basic difference functionally: an instance method 
gets an implicit self parameter as its first   argument, a static method doesn't get any implicit 
first argument, and the class method gets an   implicit first argument of the class. by the way, 
the names "self" and "cls" are just convention,   you can call them whatever you want. that won't 
affect what actually gets passed to the function.   an instance method will be passed the instance 
even if you name it "cls". so don't do this,   just stick to convention and call it "self". 
the only exception to that is for meta classes,   but meta classes are weird in so many ways so 
don't worry about it. so what are the typical   usages of static methods and class methods? static 
methods are actually pretty uncommon. static   methods generally don't use anything in the class 
or any instance of the class, so why are they in   the class at all? why put "is_weekend" inside of 
the calendar class instead of just making it a   freestanding function? a lot of people would argue 
that it should just be a freestanding function.   get rid of "staticmethod" altogether and 
just put it up here outside the class.   in most cases this is exactly what i would do. i 
wouldn't use a static method, i would just have   a freestanding function. in a lot of cases this 
would make even more sense than having it inside   the class because there could be other classes 
that might want to use this function. something   like a time zone class or a date time class might 
also want to know if something is a weekend.   why should this function be in the calendar 
class as opposed to one of those other two?   but if the function really truly is somehow 
tied to the class itself, then you might want   to use a static method. for instance, here's 
a matrix class with a "can_multiply" method.   it takes in two matrices and tells you whether 
or not their shapes are compatible in order to   multiply them. you certainly could move 
it outside the class, but in that case   "can_multiply" is just too general. it loses too 
much context if you move it outside the class.   if it was outside the class i would probably try 
to add something like "_matrices" onto the end of   it so that i know that it's associated with that 
class. the fact that i'm doing that though tells   me that it's probably intrinsic enough to the 
class that it should just be part of the class.   but even still, this matrix class is 
probably in a file called matrix.py   so maybe just that context is enough and 
it doesn't need to be a static method.   so you can see this is why static methods 
are pretty uncommonly used. they're basically   never needed, and when you do use them the 
justification for doing so is shaky at best.   class methods on the other hand are extremely 
common to use. and searching for them in the   standard library we see that they're almost 
exclusively used for alternative constructors.   this "from_json" function actually was 
an example of an alternative constructor.   they're usually called "from ..." "make ..." 
or "create ..." something and their purpose is   to just make an instance using a different set 
of arguments. finally, how does "staticmethod"   and "classmethod" actually work? they're actually 
super simple to implement in python because of the   descriptor protocol. here's basically the entire 
implementation. when you create a static method,   it wraps some function. then when you go to 
retrieve the static method in order to call it,   it just ignores the instance and the class that 
it was called from and it just returns the wrapped   function. technically in python 3.10 they made 
static methods callable, so you can call them   even from outside a class. in this case it just 
forwards the arguments to the wrapped function.   and then here's the implementation of a class 
method. again, it just wraps a function and then   when you go to get the class method, it binds 
the function to the owner, which is the class.   a normal function would bind to the instance, 
so we just change that to the class instead.   and the reason that i'm able to do this 
is because normal functions implement the   descriptor protocol. calling "__get__" on a 
normal function is how you bind function to   a specific instance. so in this case we just 
use that built-in ability to bind to the class   object instead of the normal instance object. and 
technically the second argument is just ignored,   but i do like to just put it in there anyway. 
that's all i've got, thanks to my patrons and   donors for supporting me. don't forget to like, 
comment, and subscribe. see you next time.