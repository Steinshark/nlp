that's right I heard you work at Netflix yeah hey hey everybody I work at Netflix sometimes I don't even create the memes that we create okay sometimes you guys create the memes okay hey we tried that it it didn't work um all right we're going to do another dhh article everybody I'm going to pre-warn you please put on your critical thinking helmets okay because often you see dhh you turn off your smooth brain and you can't think about any word he says so let's just try to think about this critically together okay smooth brain off in our quest for making programming simpler faster and prettier no logical fallacies provide as much of an obstacle as we tried that didn't work oh I like this take I do like this take okay okay I I I think I could like this I think I could like this because honestly I cannot tell you how many times I've worked with the piece of tech I've done something and somebody else said oh I've worked with that there's no way that works but it does it does for somebody else for a different team it completely works but for this particular team it doesn't work you know what I mean I've seen it I've heard it I've watched people make decisions based on this exact phrase uh the fallacy that past failed attempts dictate the scope of what's possible just because uh that's just because someone somewhere one time attempted something similar and failed nobody else should try that lower uh that lowering our Collective ambition to whatever was unachievable by others is somehow good this is a great phrase this is a good thing I think everybody should take a moment and digest this phrase even if you hate dhh you love JavaScript build systems and types and and hosting yourself on Amazon and all those things that dhh stands against okay even if you love it you should read that and take that this is a great great great phrase by the way this article should also be just called skill issues it didn't work for you there would be no human progress if we all quit trying after any unsuccessful attempt I think okay so I think CS CS Lewis talks about this in the problem of pain where he States what does he say he says like if you were to make uh like a uh some pottery today that resembled something someone made 2,000 years ago people would look at what you've made and said wow that's complete crap right what's your making is not good but the person who first made it 2,000 years ago what they made was incredible was out of control right like this is absolutely mindboggling what they made cuz nobody else had ever done it and so there is something to be said about this idea that when you make something to begin with right you just try something right you're trying a new path to something and it resembles something from the past we look at it and go oh that's crap but is it crap let them cook let a person cook you know what I mean let Tim Cook okay this is a f let's see this fallacy is bad enough when it talks about what hasn't yet successfully been achieved but it's downright bewildering when it's trotted out to refute the reality of what's already been proven possible fair this is fair the exam let's see take the example of building fast modern web applications with no build Java script this is this new kind of notion that he's been kind of pushing for we've been running hay without bundling or compiling JavaScript for 3 years now you can sign up and view Source uh to see exactly how we have tens of thousands happily paying customers and we've made millions in profits from this product yet certain quarters of the dev discourse continue to insist what we've done isn't possible W Ben there done that straight up does not work in htb2 the per request overhead is still very substantial and there are concur uh concurrency limits plus you get waterfalls and inefficient compression there's no way around bundling for high performance websites today I think this is a I think in some sense this is a very fair take uh not this part but the bend there done that sure you have I think this is correct hp2 still has per request overhead there're still you still have to H pack up your your get requests depending on what's going on uh you still have concurrency limits you still are going to run over single connection concurrency issues uh plus you get waterfalls inefficient compression absolutely your compression window is smaller if you're sending a bunch of small files you simply can't get the same compression if you send one big file right if your compression window is 30 kilobits or kilobytes and you're sending three kilobyte files you just simply lose out on huge compression things that could be done right obviously HTP 3 little bit better but it's not going to be just crazy better uh so I think they're both right in this situation that it depends on how many files you're sending it depends on how much you're doing is a little bit of bundling okay for a production website versus a developer website I mean again I don't think it's a bad idea it's like insisting your map is correct even after it failed to record the massive Mountain you're literally staring at refusing to believe reality just BEC or because it doesn't comport to your mental model of a world is an intellectual failure State dang part of that outdated mental uh map of what's possible on the web includes the notion that no build JavaScript uh inevitably leads to slow applications that you'll drown in a waterfall of requests cascading through your dependencies here's the report from Google's web Performance Tool Lighthouse hey literally gets 100 out of 100 score on performance I mean this is pretty good 04 seconds low time that's pretty good right now yes that's because hey is built differently from say KH Academy or versel oo directly calling out competitors I know there was some heat between versell and DH and the last person we looked at was yet a vers I think CTO versell there's a lot there there's some heat some steam if you will uh the Steamin uh we don't have hundreds of dependencies or thousands of JavaScript files this is another really good point when you don't use modern JavaScript tools like react that is just giant amount of of JavaScript this problem does get greatly dwarfed you know what I mean like if you don't have 10,000 dependencies maybe there is something to this now if you do have 10,000 dependencies maybe you do got to you know you got to get after it and bundle it up a little bit um re I mean HDMX htx is one of the easiest ways to avoid dependencies I think this is again if yes if things aren't bloated the problem of building does not come yes that's I think I think we have like a fundamental problem going here which is that is that you have one side that looks at web development through the lens of some large framework plus a bunch bunch of dependencies then you have another side that looks at web development through minimal if no dependencies and building only what you need and they use like Hotwire is a very similar to HTM x correct so they actually probably remove a lot of JavaScript as it is so what happens when you have very little JavaScript to send there's probably something there is probably something to that you know like maybe maybe both sides are correct but bundled code cannot be cached yes it can it's just recomputed bundled code cannot be but of course any code can be cash it's just a get URL with C with with with with like ex uh expiries in the headers so of course it can be it's just once you recompile you lose it highest perf uh is from removing features yeah the less uh probably both are correct in their own scope I think they're literally honestly I I honestly think both sides are correct in their perspective and I don't think you can take either side as the 100% does that make sense now I'm probably going to always fall into the HTM X web component kind of world where you can create very little and so for me the only kind of build system I need is just simply bundling up I like to use typescript I'm a type guy I don't see how dhh does it without types but I will always probably do that I just love types it's just for me it's just always going to be for me I I I spent 5 years hating types loving Dynamic JavaScript and I came back and said no way I could be a JS doc guy I could be I could be a JS Andy a JS do Andy I I could do that all right making programming better requires a willingness to test your priors absolutely to question your assumptions to recognize the halflife of facts yes we've built hay wasn't feasible prior to 2020 before import Maps opened the door so if your mental model of the web is soaked in the possibilities of 2010 through 2020 I understand your skepticism but please don't let it restrict your ability to appreciate the progress happening right now okay none of this is an argument that everyone should follow us into the Glorious no-build future I have retired from trying to convince anyone who's happily making stuff with other tools that they must change their ways I'm sharing how we are building hay because it's not because it not only works but works exceptionally well for us do that or do with that testimony and Technology as you please I do like this I do I do like I do like this this phrase right um you know perhaps even me even I could do a little bit more with showing you what I like versus telling you what you should use you know what I mean I love HTM X and I'm going to keep on loving HTM X but also I think you should use HDMX I think you should I think absolutely I think is the best anyways uh but when you're building small teams or or even alone you need all the conceptual compression you can get nothing compresses what you need to know uh like removing an entire step from the equation yeah I mean the less you need to the less you need to think about the less you need to know that's always been what excited uh my let's see that's always oh goodness gracious why can't I read this this my right here is screwing me up that's always been what excited my me about building for the web Ruby uh from Ruby on Rails through Hotwire though uh through everything making programming more effective by reducing the amount of moving Parts they have to learn and wrestle with on a daily don't get stuck in the mud of complexity he's a bit of a grug he's a bit of a grug right he's a bit of a grug you could do that you could do that um I don't know who here greatly disagrees with what he just said does anybody have any counterarguments TJ you should just learn that uh chat cannot read me okay does anybody have a disagreement because when I read that I think it is I think it is correct I think it is I I I think that is a good perspective uh lies that he's retired from convincing people fair I have an a disagreement uh it was not launched with a sigma male edit okay that's fair dhh again just needs to have racing cars uh music the hmx hotwar approach seems good I like that okay I mean I I think this is a really hard article to disagree with again I just think it's so strange how much like maybe it's the photo maybe he just needs to change his photo so people don't come in with that preconceived notion ready that just gets super upset uh but nonetheless people just get so dang upset and can't even hear what he has to say uh do do I think that the no build JavaScript is terrible no I mean I personally just don't want to use just JavaScript but I could use it with JS docs and maybe I could love it I could love it in fact maybe that's what I'll try next we could get a little bit of Lis Snippets in there we could get some js do Snippets and we could find something that works pretty well co-pilot works really really well with uh JS do co-pilot will literally just autocomplete a bunch of stuff for you you have generics in JS do you literally have everything you need to have a good enough type system I don't know because if you really think about it there's no guaranteed type safety in JavaScript you have to use Zod on every foreign object or some validation uh um what's it called some validation enforcer right JS do is ugly I actually think JS do is pretty so there you go there's something that's really pleasing about a nice Aster based comment at the top of a function it makes me feel happy you know what I mean it just makes me feel happy Zod doesn't work with JS do Checkmate it does che re Checkmate back against against you you can literally do something like this I know there's me using typescript right here you can literally do something like type uh is a string and then you could have your uh const Fu equals Zod you know Zod validate or whatever it's called Uh other Foo that literally just works okay look it just it it just works typ string it has a foo any because it doesn't know what's happening right here but yes that will work it will enforce it to make it work Zod can ligma balls damn anyways okay well hey the name is try to have a let's critically think a little bit more okay as in a community okay A J