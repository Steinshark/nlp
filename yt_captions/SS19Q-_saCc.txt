programming is hard crazy right now this is obvious to some of you I can already hear some of you no way programming's hard what's next the sky is blue the Earth is a donut there are some people mainly beginners who think it's easy I think it's because of the day in the life videos that mainly show them working 1 hour and then eating lunch for another 7 hours or influencers that are like learn these Technologies and get a six-figure job in 3 to 6 months yippe but surprisingly programming in terms of writing code itself is the easy part programming at its surface seems like a straightforward task right write some code that computers understand however the reality is far more complex because programming involves logical thinking problem solving and a deep understanding of both the problem you're solving and the tools you're using so what I'm trying to say in a smooth brain way programming is not coding what a lot of times people are missing an essential part of programming the mindset thinking like a developer and this is the part that makes program I mean difficult for everybody especially beginners it's not the coding part but the mindset it's one thing saying just go learn some JavaScript it's going to be easy learn it in like a week bro but what they don't mention is all the Imposter syndrome all the late night coding sessions and all the times you just feel stupid like programming is not for you that's never brought up and I think it's because it's something that tutorials and books can't teach you have to experience that yourself let me expand more on this whole developer mindset thing and give you some tips to help you develop Vel this mindset faster imagine learning to cook by only memorizing recipes you might know that to make a cake you need flour sugar eggs and butter and following the recipe you can bake a pretty decent cake but what if you're missing an ingredient or added the wrong amount of an ingredient or someone asks you to bake something else because they hate cake if you've only memorized recipes you might be at a loss because you understand the steps but not the principles behind them this is similar to learning programming languages without understanding the underlying principles programming so you're basically a worst version of chat GPT knowing a language like python or JavaScript is like knowing or memorizing recipe sure it's important but it's not the whole story you can memorize all the syntax but the bigger question is do you know how to use the syntax here's an example let's say you've learned how variables loops and lists work you then learn how to create a list of numbers and print each number using a for Loop the basic tutorial covered it like this the next step is now to find the average of these numbers and the tutorial did it like this let's say in your situation I'm a strict professor and I don't want you to use the sum function because that's too easy in order to calculate the average under this constraint you need to understand what the sum function is doing you should know that the sum is just all the elements added together in the tutorial you've learned how to iterate over list with a for Loop and perform basic arithmetic operations so here's the alternative way to approach it the tutorial didn't explicitly cover this but it taught you everything you needed to solve this on your own this example is pretty simple and kind of dumb but unfortunately you'll encounter a lot of situations like this situations like you can't use this Library you can't use this framework or there's times where a built-in function in one programming language doesn't exist in another in cooking this scenario is similar to adjusting a recipe based on a dietary restriction maybe you can't use a common ingredient like sugar instead you have to substitute it with some alternative you weren't directly taught this substitution in the recipe or in a cooking class but understanding the role sugar plays in the recipe allows you to make the necessary adjustments in cooking once you grasp the fundamentals you can start experimenting and creating dishes on your own you're no longer just following recipes you're creating them the same goes for programming with a strong foundation in the basics you're not just copying and pasting code you're crafting solutions from scratch this is where the true challenge of programming lies this is a programmer's mindset problem solving and logical thinking it's not just about knowing how to code it's about knowing what to code to develop a new feature or fix a bug you need to break it down into smaller manageable pieces then systematically address each part this skill is something that's often overlooked in tutorials because it's something you can't really teach it's one of those things where you're just going to have to figure it out yourself I can give you all the tips in the world and examples about problem solving and yeah you'll get better and maybe learn it quicker but to fully Master it you have to do it on your own you have to experience it for yourself because you can't master a skill of solving problems if someone else is solving that problem right in my experience these skills took the longest to develop and this is because all the learning resources so tutorials books courses they can't really teach these skills because they're meant to show you everything each step the reasoning and how it all fits together tutorials are meant to help you get better at programming by showing you how to do things but in order to be good at programming you also need to figure things out on your own something tutorials can't do because then it wouldn't be a tutorial pretty tricky right you need to bance using tutorials and doing things on your own and this is why people end up in a situation where they know all this theoretical knowledge but they have no practical knowledge they know everything but they don't know how to use it it's one of those situations where you did too much tutorials and not enough things on your own and this is when people start entering tutorial hell and unfortunately they may never Escape it tutorial hell is a place where endless tutorials are watched and countless examples are followed yet the ability to solve new or unique problems doesn't seem to improve it's an easy to fall into this is why the learning curve in programming is notoriously steep because you need a balance tutorials and doing things on your own but it's important to recognize that in order to escape tutorial hell it's not about abandoning tutorials altogether it's about how you use them tutorials are like training wheels eventually they're meant to be removed the real learning begins when you start applying what you've learned in different situations when you start cooking without the recipe so to speak many people quit before they reach the stage because programming is not easy so what can I do well for starters remember that every expert was once a beginner keep pushing forward keep learning and don't hesitate to seek help from the community when you need it you can always join my community the link is in the description but let me give you some tips to help you gain this programmer mindset my first tip break down problems Master this skill please I'm begging start by breaking down programming problems into smaller more manageable task this approach makes even the most daunting problems seem approachable and gives you clear starting points now I know I said giving you an example wouldn't help you master the skill but it's at least going to guide you in the right direction so let's do an example let's say I tell you to create a program that tracks and displays the top three most frequent words in a given list seems a little complicated right let's break it down let's start by looking at the list and Counting the frequency of each word okay that still seems too complicated so let's break it down even more how about just looking through the list okay now this is really easy all we need to do is a simple for Loop okay so we're looking at the list all we have to do now is count the frequency so we can use a dictionary to keep track of that and would you look at that we solved the sub problem of looking at the list and Counting the frequency now we can move up to the main problem I'm going to let you finish this because you need to get good at problem solving this is the type of thinking technical interviews are looking for so I strongly recommend practicing this skill and if you want a resource that will help you practice this skill you should check out today's sponsor brilliant brilliant is a platform where you learn by doing which is exactly what a programmer needs with thousands of interactive lessons in math data analysis Anis programming and AI I'm positive there's something for you brilliant believes in improving your critical thinking skills through problem solving not memorizing so while you're building real knowledge on specific topics you'll also become a better thinker which is what you need to gain that developer mindset brilliant is also a learning platform that's designed to be effective each lesson is filled with Hands-On problem solving that lets you play with Concepts a method that's proven to be six times more effective than watching lecture videos plus all the content on brilliant is crafted by an award-winning team of teach teachers researchers and professionals from MIT Caltech Duke Microsoft Google and more brilliant helps you build real knowledge in just a few minutes with fun lessons you can do whenever you have time it's the opposite of mindless scrolling he's still not convinced brilliant has tons of programming courses you can start building programs on day one with their built-in drag and drop editor and you also develop your mind to think like a programmer if this sounds like the learning platform for you and you'd like to try everything brilliant has to offer for free for a full 30 days visit brilliant .org slthe coding SL or click the link in the description you'll also get 20% off in annual premium subscription okay let me give you another big tip that will help you think like a programmer Project based learning this is the definitive way to become better at programming why is it effective because you'll be building stuff stupid and building stuff is good why because building things makes you use your small brain and using your small brain means problem solving and problem solving means good developer another reason is you're going to be building your portfolio and a port folio equals experience and experience equals job job equals money now for my next tip the findan technique I'm steal I mean borrowing this tip from fireship like a true programmer what exactly is this well the finean technique is based on the idea that you truly understand a concept only if you can explain it in simple terms this forces you to break down complex programming Concepts into their fundamental parts and as you're trying to explain a concept It's Quickly going to reveal what you understand and what you don't understand and it's going to guide you on what you should study more and of course teaching or explaining a concept to someone else or even to yourself out loud is going to help you solidify your understanding and it's going to help you with retention you're going to remember it more so I'm going to use this technique right now and I'm going to speedrun these tips my next tip Embrace failure as a learning tool you're going to fail you're not perfect I'm not perfect we're all going to fail so you better get used to it I've seen hundreds of errors and I've made hundreds of bugs and at this point I have a good idea of where something went wrong because I failed so much so you should start failing more next tip practice regularly and for a long period of time be consistent in programming that's really obvious but I don't mean practice for 30 minutes that is not enough maybe that's going to work for your little baby leode problems but for actual programming Concepts or projects you're going to need a longer block of time so maybe you know 24 hours 48 I'm kidding 1 hour or more at least and my last tip stop comparing yourself to other people the only person you should ever compare yourself to is Elon is yourself obviously you should not be worrying about anybody else except yourself a lot of you keep comparing yourself to people that have been programming for years when you've probably been programming for less than a week it's obvious they're going to be better than you celebrate how far you've gone it doesn't matter how small it is you did a tutorial you soled some bug it's something worth celebrating so have fun making some errors making some projects and I'll see you all in the next video