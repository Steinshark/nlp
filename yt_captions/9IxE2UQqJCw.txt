LinkedIn adopts protocol buffers for micro service integration and reduces latency up to 60 they must have had J diesel before this because that seems a lot LinkedIn adopted protocol buffers for exchanging data between microservices more efficiently across its platform and integrated it with restly their open source rest framer after the company-wide rollout they reduce the latency up to 60 improved resource utilization at the same time for those that don't know it takes a lot to decode Json and the harder part about Json is that it actually creates a lot of garbage along the way but something that people don't talk a lot about when it comes to protobufs is that protobufs are a greedy algorithm or not a greedy algorithm they are a parse or a full parse upfront required algorithm and so they are also they're not like a giant performance win they're definitely a performance win there's definitely an over the wire save there's definitely some some things there's a lot less reading of data right when you have a lot of keys and a lot of big Keys it still costs a lot to do that but to be able to have a non-json or non-protocol buffer uh thing you can really have some save time but again you have to really fully know your data format once you take the next leap right the day the the trade-offs become real at that point and you can save a lot of money if you have a lot of traffic but the trade-offs become real and it does become a lot harder LinkedIn uh the LinkedIn platform employs by the way I hate LinkedIn uh uh but it's dude the worst part is linkedin's kind of necessary if you don't have a job yet and you're trying to get a break into the software industry get a LinkedIn but man don't don't LinkedIn do suck uh the LinkedIn platform employs a micro Services architecture for years now Jason has been the used as the serialization format for over 50 000 API endpoints what 50 000. the internet was a mistake to help their teams build consistent interactions between Services the company created a Java framework called wrestling which became open source the framework helped create servers and clients that use restyle communication and abstracts Away many of the apps aspects of data exchange so pretty much grpc uh including Network serialization or server uh server Discovery oh service Discovery interesting they put that in there uh it primarily supports a Java and python but can also work with Scala kotlin JavaScript Deez Nuts and go okay zookeeper discover announce zookeeper uh data control flows okay very cool so you have this whole like client request Builder okay we got a little Builder pattern do all this get all this stuff cool uh Json is the default serialization format in wrestling has been selected due to its wide language support and being human readable you know it's very bizarre that in this day and age we still have human readable as like a format required for data exchange just feels weird I feel like there should have I feel like something else should have happened by now Galactus oh is this where Galactus comes from but I heard Galactus still can't get is still not ready uh the last property however beneficial uh however beneficial introduces problem with performance yeah in particular and particularly latency point of view yeah uh let's see uh these two engineers at LinkedIn uh share challenges with using Json enter service communication yeah he also types are really sucky if you have different languages it's really sucky I actually really do prefer protobufs for for a lot of this I think that the world would have been a lot better place if we would have leaned into something like protobufs maybe protobufs ain't it but still it would have been really great because the thing about it is that you get language independent typing which I think is just really important that way if you use go in the front end uses JavaScript you share types you know Captain Proto is like a really good version of it because Captain Proto if I'm not mistaken is a a non-full parse required uh um format which is like super important type messages are super important I'm totally on type uh typed messages and I really like the idea of like better performance and so if I don't have to drop readable format and I can have good performance it's beautiful because remember with protobufs you can flip the switch and send Json remember that so you can just do fully readable format and then flip it back and have it the non-readable format that's just more efficient for computers in general you know what I mean the amount of energy being wasted on Jason Power Country you're actually Pro you're probably not wrong uh the team has been considering alternatives to Json looking for compact payload size and high sterilization efficiency to reduce latency and increase throughput they also didn't want the uh to limit the number of supported languages uh language stacks and enable uh gradual migrations by integrating the new serialization mechanism into wrestling finally after a comprehensive review they decided to go with protocol buffers okay uh which scored the highest based on the defined criteria interesting I wonder if they did Captain Proto or not uh the main difficulty around integrating protocol buffers into wrestling was the dynamic schema generated based on the framework's custom schema definition system yikes PDL for probably gonna regret this uh the solution involves generating a symbol table that was used to generate protocol buffers uh SEMA schema definitions wow double generation uh dynamically but the method for delivering simple tables vary depending on the type of client yikes back in clients fetched and cash symbol tables on demand while web and mobile client apps symbol tables are generated at build time and include as version dependencies you should always version of your very first field of every protocol buffer should be a version right after changes to the framework uh were rolled out the team gradually reconfigured the clients to enable Proto protobufs instead of just on using HTTP headers the result of the protocol buffer adoption was an average increase in throughput by 6.52 percent in responses and 1.77 for requests the team also observed uh up to a 60 latency reduction for large payloads like people don't realize how important this is you got to remember when you can do when when you're serving Millions upon Millions upon millions of people a billion requests a day when you can have a machine become more efficient like the amount of money you save a year becomes really important I know most people's projects have no users I'm sorry you're no user application you probably don't need it just like I don't think you need to plan for every single thing you have to be a micro service and a no user application right you can start simple I get it I'm on your team but you know at some point making the change can can mean a lot of things you know uh based on the learnings from the protocol buffers rollout the team is planning uh to follow up with the migration from wrestling to RPC that's a good choice I like this which also uses it because it also has a uh it also like the the typescript version comes with async iterators like nice grpc is really you really nice to use honestly I've been loving using grpc and using it within my applications lately it's been really good it's super simple to use uh I I use it to just talk to the endpoints it's honestly just really nice you know it's really really nice uh I'm shockingly liking it i didn't think I was gonna like it that much I am uh which uses protocol buffers but additionally supports streaming it has a large community to buy it yeah the streaming is really cool so I use it for live data acquisition um I I we live stream out data and so that way I can display it to the user and I'm even working right right when I get done with this I'm literally working on visualization of streaming data from grpc endpoints into into it pretty fun pretty cool stuff really appreciate it I really like it this is a great thing and I think people just you know it's shocking how little people how little Engineers know that there's alternatives to Json other than XML like when you say if you go on the internet and you go like this what uh what can you use other than Json most the answers will be XML it's just surprising see I didn't know about it this until today yeah there's like there's an entire world that exists remember the world could never afford a jaison until like the the 2000s you know like we didn't have computers powerful enough to do that I know you guys are a bunch of trolls and you're going to be saying like protobufs XML XML CSV I like that last one CSV that's the format you're looking for um the name you should probably consider using uh protobufs they're pretty cool and grpc is actually pretty cool I I didn't think I was going to love grpcs but I am definitely loving grpcs a lot a lot more and so you know maybe you should consider it uh you know giving it a try again