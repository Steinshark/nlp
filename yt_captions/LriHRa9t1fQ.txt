I know a lot of you were very excited about the hot conference devity which turned out to be just a huge AI scam and then Carson was not able to give this amazing talk about HTM X about getting rid of JavaScript fatigue but guess what we got the man the myth the legend Carson gross on here to give the presentation about HTM X and then afterwards we will do a little bit of a Q&A and we will find out just how Boomer us combined actually are so Carson I'm gonna give you the stage I'm gonna hide me I'm gonna hide this and it looks like you're oh dang it Discord up dang did you did you disconnect and reconnect I didn't I didn't touch anything you did you did I know you did okay there we go you're looking so good right now you're looking so good okay okay so you can take I want to see the chat too well okay cool do you want me to put chat on the screen during the so my this is yeah that'd be good I think okay there you go we got a little chat up there chat say hi to Carson okay let's do one thing real quick all right so um I'm gonna give a talk real quick hopefully on uh what's up guys um I'm gonna give a talk on uh on JavaScript uh no I'm gonna give a talk on HTM a and this was a talk it's kind of a talk I was planning on giving at a conference that it seems like it blew up I didn't follow exactly what happened but it seemed like it was pretty funny and uh it didn't happen and so now uh uh the prime J was nice enough to let me give the talk here I'm gonna do a compressed version of it um I think um you guys have you ever heard has anyone who ever heard of HDMX this might be a new thing for people on this stream but uh basically you know I'm gonna talk about HDMX and its relationship with JavaScript so um let's see here about me so my name is Carson gross uh I run Big Sky software which is just me it's not a real thing um in my dogs and I I make some software uh so HTM x a thing called hyperscript um I wrote a Kind of a Funny essay called grug brain. deev which is sort of my take on how to develop and not uh not paint yourself into a corner by trying to be too clever and then I've got a book that's on kind of HTM X and uh uh the more General ideas of hyper media called hyper media systems and that's you can read it for free online or you can buy it if you want um so what I wanted to talk about today what I want to talk about today is uh I wanted to kind of review with you all what hyper media is and talk about how HDMX generalizes that idea and then um I wanted to look at the relationship between JavaScript and HTM Max um go through a couple of HDMX demos and then maybe reconsider that relationship um so let's talk first about HDMX or talk first about hyper media really but just as an introduction HDMX is a hyper media oriented friend and Library all that means is that it it uses what I call hyper media exchanges to update the UI so rather than using Json uh uh we use uh HTML uh so rather than getting Json back from a server in a web app and then turning it into a UI update in some way either reactively or using C client side templates or whatever you just get HTML back and then insert that HTML into the into the page and that seems pretty simple and it is pretty simple um but there's some deeper ideas behind it so uh it's really trying to focus on enhancing HTML uh rather than replacing HTML which is what a lot of stuff uh does in the uh JavaScript world so um HDMX is written in JavaScript you know and uh people sometimes people will say oh with HTM X you don't have to write any JavaScript and someone freaks out and says HTM X is Javascript and that's true but if you're using htx you as the user of HTM X typically don't have to write a ton of JavaScript at times although so we'll see later there are times when you do use quite a bit of it um and uh you know the way the way it works I'm sure everyone on this stream has seen it before but basically you you put attributes in your HTML and those htmls that or those attributes Drive behavior in uh in in the HTML so um what I wanted to do is before we get into how HTML generalizes H or how how HTM X excuse me generalizes htmls I wanted to talk a little bit about uh about uh um what hypermedia um someone asked is it HTM X all caps or HTM X lower caps htx is case insensitive um so uh okay so what is hyper media what is hyper media HDMX is a hyper media Orient Library what does that mean um well there's a bunch people argue one of the things that's tough about hyper media is that there's a lot of very uh disagreeable people who are in that world and they have a lot of different definitions and yell at each other a whole bunch but the way I like to think of hyper media is it's a media it's not like a tax that has hyper media controls in it and uh so okay fine what's a hyper media control um and to understand what a hyper media control is I think the easiest thing to do is to just look at a stupid simple web page so we got a stupid simple web page here with a and all it's got is a link to an about page with some text in it and this anchor tag the HF stands for hyperdia reference this anchor tag right here is a hyper media control um and uh what what it allows you to do is if you think so going back to what hyper media was sort of at the start it was this idea of media like a book people were comparing H HTML to books and you had this ability to jump to random places kind of a Choose Your Own Adventure style uh situation and that's what made it a hyper media rather than just a normal media and so this hyper media control this is sort of the ER hyper media control the first hyper media control um that uh that was out there um and uh um the the other major so this is so anchor tags are one type of hyper media control uh and the other major one the only other major one and HTML is the form tag which came out in HTML 2 I think if I remember correctly and uh so these are the only two hyper hyper media controls available in HTML um but nonetheless you can build quite a bit of stuff with them it's pretty interesting how powerful just the idea of hyper media controls is given how there's only two of them in HTML you could still build you know all of the F original web was built with just these two controls and so um what HDMX is the thought process to get to HTM X is how can we generalize this idea of hyper media controls um and to do that I think what I like to do is look at uh something like an anchor tag and ask like what really is that what is it what is it telling the browser to do as a hyper media client um and if you again backing up and thinking about it what it means is what tells the browsers okay here's some text show that text to the user and when a user clicks on it um when a user clicks on that link I want you to issue an HTTP get to the specified URL relative or otherwise and then what I want you to do that's going to trigger request and then you're going to get back a new HTML document I want you to replace the current document with that document that was returned and so if we want to General and HTM X generalizes that idea so if we want to generalize that concept then what we need to do is we need to go through this list and just make each of these General take them a higher level um so uh the first thing that we can generalize is the idea of like okay a length what's special about lengths and form what about other elements like there's nav elements and so forth um there's just all sorts of elements how come these two are special so one generalization would be make anything you know a make any potential element on a screen a hyper media control um another thing to generalize is that clicks that idea of clicking well that's just one event of many that triggers in the Dom so why not make that just general any event can trigger these things three is issue an htb get to uh some URL um and this is again what something that I call a hypermedia exchange where there's hyper media hyper media request and response being triggered um and so let's make it possible for any element to trigger those sorts of requests and then finally and this is probably the most important one um why why should these hyper media requests be constrained to only replace the old page that's the source of a lot of clunkiness in Old web applications because you have this big refresh and you lose your scroll State and all this crazy stuff like that and so why not make it possible to take that HTML content and put it anywhere in the page so those are our four generalizations that we have available to uh to us and those are the four generalizations that HTM X really focuses on so um in order to do that we'll really quickly go through the attributes the HDMX provides for each one of those um so uh the first the first thing to look at is uh and uh sorry there's a button on the screen here that's powered by HDMX so it has a a put a trigger and a Target these are HTM X attributes if you've never seen before and these put Behavior they they they give this button hyper media control like Behavior so uh the first thing is uh to notice is this HX put and there's a bunch of these there's HX put post get delete and so forth um and you can uh by putting this attribute on anything in the Dom suddenly that thing becomes a hypermedia control and can issue that type of HTTP request to that type of end um and so this really it kind of kills two birds with one Stones first of all makes anything potential hyper media control and it also makes it possible to issue any type of uh of request um and then the the next thing to consider is uh the event and so in this case uh we're we want this request this put HTTP put request to like to be triggered on a click and so HX trigger let you specify the event that causes a a particular request um so we've generalized that idea in any event now a mouse over for example if you wanted to could trigger this request um now in this case the htx does have decent defaults so the default for a button is Click so this is technically not necessary in this case but it's just there to show you what's going on whoops and then finally um HX Target um this attribute says okay take that response that comes back whatever HTML it is and I want you to put it into the inner HTML of the thing with the ID output which is this little output element down here um and this is maybe the most important conceptual element or attribute I should say in HTM X because it really it it takes HTML from this like document oriented sort of clunky uh infrastructure to something that includes a this concept it's called transclusion it's been talked about forever but this idea of including parts of one document in another document or including bits of HTML in an existing HTML document it's an old idea um that just wasn't really done wasn't really explored too much um for for a while for whatever reason so the HX Target basically what you say when this button gets clicked on something's going to come back some bit of HTML it's not going to be a full page probably um but take that HTML and then just jam it inside of this output so pretty simple at the end of the day um and that's a total of seven attributes that's a total of seven attributes um and that I think those seven attributes does a prettyy good job of covering the abstraction or the the the opportunities for generalizing hypermedia controls that we looked at earlier um now there are a few more attributes in HTM X that are useful so like you can specify HX swap lets you specify how to swap things like you want to Target the outer HTML and replace the thing rather than put the return content inside of a thing um there's an HX indicator where you can call out an element to be shown during the request so that gives you the the ability to show like a spinner during a request which is often a good idea from usability standpoint um uh another couple of useful attributes are HX include which lets you include a form like all the values in a form or in some element in a request and then HX select which lets you pick some part like if you if you don't control the server side or it's difficult to work with the server side for example and you want to request a page but only pick out some part of that page you can use the HX select attribute in order to do that um so it's a practical so it's not just a htx isn't just focused on the the abstract idea of producing hyper media controls or it would have stopped it tries to give you some useful practical tools that deal with the reality of day-to-day web development as well um all in all HTM X ends up being about 12 attributes you can go to htx or reference to look at them and so that's great so I you know I hope at least conceptually I've convinced you that GMX uh abstracts this notion of hyper media controls so what can we do with that what's what's possible to do with it um well I just I want to walk you through a couple of quick examples um this is a and these are all on HTM x.org examples um so this is a click to edit example and we start with a A div let me blow this up so people can see a little better um we start with a div um that has just it's really poorly formatted just to make it uh easy to understand um but uh we have we start with a div and that div uh says Okay I want the target to be this div and I want you to swap my Adder HTML so replace the whole thing then we have a button that gets the the contact one edit UI it gets back the HTML found at that URL and what that URL is going to be or what that HTML is going to be is a form for updating this thing and this is all pretty standard web stuff it's just a form you know uh that you uh that you would uh just like you would use in web 1.0 in like Old School web apps um but it's a little different in that instead of having the normal action attribute on it it has an HX put and it says okay when you when someone submits this form effectively want you to put the values in this form to this URL and I want you to Target this form and again swap the outer HTML and so what that ends up doing is this is a little demo of that when what that ends up doing is you've got this admittedly horrible looking UI for display playing a contact but you can click to edit it and you can do something like you know update the name if or whatever Joey I guess Joey makes more sense um and you can see what's nice about this so this is all uh and we can come down here and look at the request so this was the initial state of that div and then we got the the form so it got replaced with this form then we did a put with this bad name and then we got did another get and another put so forth that's all HTML that's flying back and forth and so what's so great about HTM well what was great here and what you might not have noticed is that we didn't lose our scroll State notice our scroll states did the same right because we didn't do a full page refresh like that's the big thing that's what really is good about this is like you're you're just updating this a little bit and you don't have this whole big kachunk that you get with more traditional web apps so this was done with traditional HTML you know it would have scrolled up to the top we would have lost a bunch of context and so on and so forth and so that's I think shows how just a real basic example of how HDMX uh can improve things another way you can uh use HTM X effectively is something called lazy loading so I'm GNA hit refresh here and you can see so there's this point at which it's loading this graph and it takes a second calculating this graph it's fake it's all done with mock stuff don't worry about the details of it but this graph pretend in your mind that this graph took a while uh to complete um or to compute and if you just try to include this graph in the page directly as part of the initial render for the page um you would be blocking on the computation that produced that graph and that can be a bad user experience and so this uses a pattern in HDMX where you say okay I've got a div I want to issue a get in that div uh to get a graph and then put the results Into Me by default it'll put it into this div um and then I want you to trigger on the load event so when this thing first loads up and so what this what this ends up doing is make it makes this graph URL lazily loaded and that allows the the the the the containing HTML page to render more quickly so this can improve user experience for that page so for example if you have some page that has an expensive bit to compute but then has other actions and potential things the user might be interested in you can use this patter and make just that little bit of your UI lazily loaded and then when a user goes to that page they'll see the page quickly and then yeah they'll see a little spinner for this thing but maybe that thing's not important to them maybe they can interact with the other things on the page and so that gives you the ability to to have a better user experience while you know this is what two attributes right so it's not hard to do this you can very easily introduce lazy loading into your web application and it works pretty much like every other page in your your traditional web application works um and so I like this example because I think it shows how um generalizing hyper media controls has this better than like it it allows for surprising things like if I told you oh let's generalize hyper media controls the first thing that Springs in your mind is probably not going to be like oh this is this would allow me to implement lazy loading and address perform perceived performance issues with my web page right um so I think this demonstrates really well um that uh uh generalized hyper media controls are are pretty cool they have a lot of power and then the last one that I always like to do is active search so this is an example where I'm not going to go into the details of it I just more want to show you what it does but uh you begin so what I can do here and you've probably seen this UI before is I can start typing and as I type it filters down this table right and this is issuing requests to the server probably should be using a get but I've just been la and haven't updated but it's issuing requests from this element to the server and getting back the results and then jamming them down into this result set down here here and it's doing that as I type okay and so that's a really nice user experience compared to like an search dialogue where you got to type and hit submit and it goes up to the top and then you gotta go down and so forth um and so this is this is what I call Active search um Google I forget what Google Google does something like this and they call it something different but that is something that normally people would associate with you know really elaborate uh single page application Frameworks but if I won't go into the details of it but it ends up being four attributes in HDMX which I think once again shows the power of generalized hyper media controls like you can do a lot with this a lot more you know some people you'll see people say oh hmx is fine for toy websites but it can't work for big Enterprise style web apps and I'm like dude you know there's a point point at which HDMX doesn't work anymore I'll admit that of course and I've got an essay up about when hyper media is appropriate on the HDMX website but you can do a lot more with it than you probably think especially if you get really nerdy about events and so forth okay so that's three examples of HTM X demos let's get going here again um you again it just by generalizing hyper media controls we can do quite a bit like in all three of those examples there was no JavaScript written by me as user of HTM Max so what does that mean for JavaScript what does that mean for JavaScript does that mean that JavaScript is gone um and uh one thing that then kind of what I wanted to address in this talk after this overview of what HDMX is conceptually is is HTM X anti- JavaScript am I anti- JavaScript um uh well uh it's true it's un level that it is because you certainly don't need to write nearly as much JavaScript and there are people who hate JavaScript who really like htx because of that um and uh you know so I think it's fair to say that it's not you know anti- JavaScript versus anti- JavaScript maximalist I don't know um but hdmax definitely makes it possible to use a lot less JavaScript when you're writing your web applications and in addition to that htx also pushes the focus of your web application onto your back end and on the back end what that means is so one of the things that we've seen in the last 10 years is there's been a tremendous amount of pressure to adopt JavaScript or typescript on the back end because people have written these very large JavaScript front-end applications and why have two languages that are complicated why not just bring it together reuse domain logic and all that stuff and what htx does it says no you're not going to have a big JavaScript front end instead you're going to have a small jav you're going to have a small front end and then your back endend becomes far more important and that really hurts JavaScript R's uh I don't want to say it hurts its usefulness but it takes away the one big thing that JavaScript has going for it like the one killer feature of JavaScript which is that it's there in the browser in a way that no other programming languages so because hmx Mo moves the focus back to the back end all these other languages suddenly can compete with JavaScript as a language for a particular web application um and I think that's a good thing I I like a diversity of programming languages and uh you know so I think that's a good thing but it definitely there's no getting around the fact that it it it makes it it makes JavaScript less compelling uh on the server side less compelling overall so but I want to say one thing that I do want well I think if you look at it the right way I think HDMX is actually pro- JavaScript and in some ways deeply pro- JavaScript um because what HDMX does is it takes the pressure off of JavaScript to be a good general purpose programming language it's not it's a bad general purpose programming language it's messy it's like C++ in some level like there are good parts of it and if you use a constrained version of it it can be okay um but it's you know it's just a big ugly messy language um but that's okay if you use it as a a lightweight scripting language for the web that's what it was designed for um that's what it was designed for and oh hold on one second I'm sorry I jumped um hold on um and uh so in that context in that context of a web scripting language JavaScript can actually be very good or at least good enough you know I'm a good enough engineer like I think they're saying like JavaScript has this killer feature which it's there in the browser so like take advantage of that fact so let's look at one more demo um and then reassess where hmx and uh JavaScript sort of live with relation and here um you can see I've actually got some JavaScript that uses the the htx JavaScript API to when new content is loaded into a page it uh creates a it uses a it looks up anything with a sortable class on it and then instantiates a sortable instance on it and sortable is a is a JavaScript library a library written in JavaScript that enables drag and drop in the browser enables drag and drop in the browser um and so this is just a bunch of junky JavaScript code to make sortable work whatever um but one thing that's uh cool about this is sortable emits events and so we have a form here um that is sortable so the stuff inside of it going to be sortable and then uh it's going to trigger on the end event which is an event triggered by the sortable JS library and it's going to post the items internally to some URL and so this is basically going to when uh what what's going to happen is when I drag stuff around as enabled by the sortable JS Library uh it's gonna trigger a save to the server and so if I come down here I've got those items and I can drag and drop them and when I drop them you can see a post occurs and so I'm reordering this list and then syncing the order of the list to the server side sort of at the same time and so this is an example of us using JavaScript effectively with you know sortable JS is written in JavaScript and htx is obviously written in JavaScript um but me as a user of htx I had to write a little bit of JavaScript but I got some really good bang for my buck front it I you know I pulled in this sortable JS library and now I've got this better user experience it's far better than like even just a vanilla JS uh implementation in or excuse me just a vanilla HDMX thing with like up and down arrows that would suck like this is really cool I can put any item wherever I want and I can drag and drop and it just works and that's it so uh very simple uh HTM X code and a pretty simple you know JavaScript code not horrible anyways it's fine okay so this is an example where htx Works in concert with JavaScript to provide a better U user experience and so I I think again these two technologies are not oppositional they're complimentary when approached from the right perspective hdmax couldn't achieve that drag and drop UI without this additional scripting that was made available to us uh by uh by sortable JS um and again we're taking advantage of one of the the killer feature of HTM X which is that it's there it's there in the browser in a way that no other programming language is and we're using it in the way it's designed for for enhancing client side scripting now I quote Roy Fielding a lot because he wrote a dissertation on the web that um gave us a bunch of terms like rest and hados and so forth um and uh he had this to say about scripting rest allows client functionality to be extended by downloading and executing the code in the form of applets or scripts this simplifies clients by reducing the number of features required to be pre-implemented so this is what in his mind this is why scripting is allowed on the or why it's part of the web infrastructure to allow you to to implement features that are not part of the core browser Behavior allowing features to be downloaded after appointment imp improv systemic sensibility and that's what we just saw in that demo drag and drop is not part of the web it's not built in it's not part as far as I'm aware anyways it's not part of HTML 5 yet but nonetheless we were able to implement it we were able to provide a better user experience using JavaScript um and in concert with HTM X so um I think htx is pro JavaScript in that it allows the language to take a deep breath and step back and be what it's actually good at it's actually good at being a lightweight scripting layer for the web so let it be that um don't try and force it to do too much it's not it's not designed to be you know like a a great backend language maybe types script's pretty good I don't know have strong opinions on it but again I think that this is an example like looking that that that sortable example is a really good uh uh look at how HTM X is not anti- JavaScript instead it's JavaScript in its right context and encing the user experience um on the browser on the client side and when done in that way a lot of people who at this point are exhausted with JavaScript might actually have fun like I actually find writing small amounts of JavaScript kind of fun because you get the it's UI programing you get the do you need stuff with it so I think that uh HDMX can for many people actually make uh uh writing JavaScript fun again all right that's my talk Q&A that that was fantastic thank you very much for doing that can we get little clappy in the chat I'm going to turn myself on I'll make you bigger as well there we go everyone seems to really like it this was fantastic I'll also open up YouTube as well and look at YouTube so we have both chats at the same time we'll be doing q&as for Carson uh Carson I think one of the uh first and obvious questions we have to ask is that there was a recent state of JavaScript stuff that's going around right now on the internets and it looks like htx fared pretty well how you feeling about the rise of HTM X in the last year I mean it is a very old library this is not something new uh it's been written about in the 9s and it's been implemented and being used for the last what 15 years and so it's not new how do you feel about the rise and and where do you think it's going you know I it's it everything seems so darn random to me like I intercooler JS which was the predecessor to htx um it was you know released it back in 2013 um and just I think the tech tech goes in waves or you know there's sort of like back and forth between particularly when you step back and look at thick client versus Thin Client um there's sort of been a back and forth uh in the in those AG the hyper media isn't a Thin Client architecture hyper media clients are very thick um but uh there thick in a particular way and so um I it's it's I I can't explain it I mean obviously you covered it um fires ship Dev covered it you can look like July is when everything blew up which is when you started covering it and when fir ship mentioned it so some of it is probably just right place right time and the right people got interested in it um but uh I you know I'm I'm I'm I'm very positive in the long run on hyper media HDMX is what it is it's a tool um it's you know it's got problems like I wrote it in a pretty idiosyncratic way and it was IE compatible for a long time 2.0 won't be um so the implementation as far as HDMX goes I think is is pretty good um certainly good enough and uh I think will'll you know continue to to grow um but the ideas of hyper media it's one reason why I try to focus on like the book and the essays I think the ideas of hyper media are more in the long run more significant than you know the particular technology uh or the particular hmx GS file I guess so I I see this a lot which is obviously there's been you know years upon years of many many Engineers creating react solid JS angular Vue any of the major Frameworks why should someone try out HTM X when these things have just so much what feels like commercial adoption and you hear it all the time I don't see why I would use HDMX when I could just reach for something I already know or that is industry standard if you will quote unquote is there some compelling reasons that you think uh hmax really wins for or compelling applications yeah um I first of all I'd say HDMX isn't expensive to look at right it's not expensive in the same way to look at like like if you're just if you're not a react shop and you look at react like that's a whole massive change that's you got a lot of work ahead of you whereas HTM X is pretty lightweight and you know if you look at for example that lazy loading example that's two attributes that could potentially on any web application really solve a practical significant problem of like a page loading too slowly like write just with two attributes and you're done and HDMX is 14K it's got no dependencies so you know it's it's very practical from that standpoint um and uh you know I think most people who are familiar with the web if you're not coming in as a complete new web developer um I don't think hdmax takes too long to pick up um at least that's I don't know maybe I'm too close to it but that's my impression um so I think it's low risk uh and it's definitely not appropriate for everything um so I wouldn't you know I don't think you you should use htx sort of unthinking way um there's an essay called when should you use hyper media on the HTM x.org uh essay's web page where you can sort of see like these are the things that htx is good for these are the things that's not one thing I would like at some point I you know I have a lot of fun on Twitter but I would like to deescalate the conversation a little bit because HDMX is just a tool you know and like it's good at some stuff and it's not so good at other stuff and that's fine um it doesn't have to be you know it's like doesn't have to be your identity it doesn't uh you know you can try it out and if you like it cool and if not I get it it's all good so um you know I I I it's fun I find it fun I think hyper media it's the hyper media style of programming is fun um one thing I recommend for some people is like try it on like an internal tool like you know maybe like rewriting your entire front end using HDMX is pretty pretty risky thing proposition and you're gonna you know you're gonna have to learn a whole bunch and all that stuff so maybe it doesn't make sense depends on the context um but in inter internal tools are often uh underserved like they're just kind of afterthoughts and a little bit of HDMX like that Active search example for example could really improve life for employees for who people you work next to and care about and want to make their lives better so just like you know a few attributes and suddenly they've got a much better user experience um they're happy you're happy and you didn't risk like you know the whole company on on an HDMX conversion um so so I don't know that's kind of my my my thoughts around that I do love that idea of uh internal tool approach because right now uh where I work we have a lot of stuff preset up with like react it's like you it's actually really difficult not to write an internal tool that's not in react but due to how there's a bit of server side rendering it's really simple actually just to convert it straight into an HTM X tool and I can move really really fast now by simply just avoiding that whole thing because one of the biggest like barriers to entry for good tools is that when I started doing it everything had to be react and like it just took me a long time to build something simple right there's a lot of code you have to end up producing a lot of build time a lot of waiting all all the things that kind of go in between at all and so just having something I can quickly explore really just fast I don't need that you know I don't need much for libraries or anything I can just kind of 0 to 60 really quick it's been very refreshing and I don't feel nearly as like oh gosh I have an internal tool like do I want to even support this do I even want to go down this route of creating it cuz I once I know I create it I'm also supporting it and that's like a lot of effort so I do want to ask you the follow one more question about this kind of whole Direction cuz you said 14k I'm very excited about HT Max 2 cuz I'd love to see that you're dropping a huge amount of support you're thinning up stuff how much smaller is this going to make it um are we going to see uh are we going to see htx 2 being like below 10K across the wire I wish man it's just uh I I got all excited we dropped the problem is is that compression algorithms are pretty darn good so um you know so uh I think right now it's at 13k in the 2.0 Branch so and it would be really hard that there are a few since we're dropping IE support there are some areas we can remove code but my suspicion is that getting below 10K which initially my goal is to keep the thing below 10K um I think it's going to be really hard to do um and you know that that sucks um there is there are some there's some clean room implementations of HTM or HDMX ideas there's a guy working on something called Data star um and his is done in sort of I think it's done in typescript and transpiled very heavily optimized and I think he has it in like the six to 8K range yeah um but just even the history support is just it's just so much you know and then Gathering inputs and like getting all the little things right like if someone has a has a what is it a form ref in another spot and you got to go out and get that stuff to there's just a lot of little junk it has to get done and whenever I'm feeling bad about it I go look at bundle phobia and it's like I think 14k is like 16 milliseconds over like old 4G and I'm like all right Carson chill out like it's gonna be that's the first request and then it's cash forever and like it's all right it'll be okay um but I do wish you know that part of me that there's something about that 10K like if I could have kept it under 10k that would have been great but do you think you'd ever reduce some of the uh hyper uh the hyperscript support to get something below 10K like because I know that you get a lot of power with HDMX as a library and I don't know how much people are actually taking advantage of all the features is there going to be a light version or something to kind of strip it all the way down to yeah that quotequote idea under 10 yeah yeah you could um uh I'd have to look at it it's the other thing that's tough about the the good and the bad thing about hdmax is it's written in one file and so you can't pick and choose what features you want from it it's kind of just like boom here's a thing um but uh I it would be hard given the current setup and my current mindset to to do that but I think like you know again this's one reason why I say the ideas of HDMX are probably more important than HDMX itself I think other people are going to start offering libraries like that like hey here's just like a really some like you could do probably an 8020 of htx especially if you dropped history support for in like you know 4K or even less I mean people are doing reactive things in like less than a k so I got to think that like someone who's really clever and just takes advantage only of like modern apis doesn't worry at all about like anything you could do something pretty tight and uh and small but on the other hand then as soon as you run into like oh I need history support well okay so that's kind hmx does have a little bit of a kitchen sync mindset in in that the kitchen sync is completing HTML like any feature that HTML is missing we want we want to provide that um as a hyper media and so you know it is it's a design choice you know I wish again I wish I could have kept it under 10k but I just I can figure out how to do it for those that I I see a bunch of questions being like but why 10K 14k is already small enough something about 4 figure JavaScript just seems so dang appealing comparatively to five figure yeah and so it's it's I don't know that I think we Pro like I didn't even have to ask you we just both immediately knew four figure just feels way cooler yeah you got 10 fingers right it's like if you can go under that that's cool it is all right um let's see I'm going to just scour some things and see what if we have any good questions in here you got to be careful about chat they ask mediocre questions sometimes it's all good all right all right uh let's see how does it feel to have made such a huge impact on the web with such a small library and such a simp concept boy you know it's a little surreal it feels like it might be a Truman Show situation you know like maybe you're in on this old thing we're gonna pull the rug on you here very soon don't worry just yeah exactly like be like psych you're an idiot um you know I don't know it's crazy it shows that you know you never know what's going to happen because like again with intercooler I was kind of I'd given up on on making a dent Beyond you know the few people that liked it and then Co happened and I rewrote HTM intercoolers HDMX right place right time and just hanging around so um it is it's pretty cool I'm not gonna lie I'm very surprised I'm as surprised as any of you that this happened um let's see hold on so here's here's kind of an interesting one if your backend server is now responsible for your API and rendering similar to something like next if that is down/ slow has a bug a client can no longer run anything compared to a spa which can show a spinner rri Etc how do you get around this um you can do scripting in HDMX apps to do the same thing um so uh HDMX doesn't do it out of the box and obviously in a hyper media driven application which is what I would call an application written mainly in uh HTM X if the server is down you're in a worse spot than you are if if you have an Spa that's doing like you know optimistic saving and all that stuff right like um so there's no doubt that you are more reliant on the server if you're using a hyper media approach um however anything you can do HDMX fires a tremendous number of events and if you're a good JavaScript programmer um then you can use those events in order to Pro provide a UI when connectivity is down it show a div or what you know whatever it is to say hey things aren't working right now um so it's doable but uh it's it's work and it's scripting work that's something that just has to be done on the client side um and so I'm part of the point of this talk is and this is one thing I say people say oh you know htx anti- JavaScript blah blah blah and I'm like you know what in five years the best some of the best HTM X developers are going to be front-end people who know JavaScript CSS HTML inside out and then have figured out how to use SQL effectively on the server like those people are in a position to produce great HDMX applications because they understand HTML they can use scripting effectively where it's useful get the 8020 like you know do the handle the offline situation or whatever it is um but then they're also going to be effective using the most expressive and Powerful stuff available on the server side stuff like SQL which is powerful in a way that things like graphql just can never be mainly due to security reasons um so uh so you know getting back to the question you know it's doable it's just it's work it's just work you have to do in JavaScript um I do I I also kind of want to double click on something if your API is down SLS slow uh most websites I use don't have a great experience like very very little actually have like a really solid hey we're down right now we're not really sure what's happening you only see that in like the the top like very few websites so I mean in my head I normally don't try to cover the 0.01% of the cases that I really want to cover I really just want to try to make sure the thing works first the happy case and then slowly go from there so it's you know covering the case in which one of your apis are down there's there's I mean there's just so many hypothetically bad situations as TJ's saying four htx are just bad situations for all websites yeah I like what TJ says many hypthetically bad situations for hmx are just bad situations for all websites you already have the skill issues react andies anyways right it no matter what you made a website with react that's a spa it still doesn't work if you try to go there and the website's down like nothing it doesn't change the calculus fundamentally yeah well like people say oh you know you could you could for example like the subway problem you go into a Subway and you're trying to book a ticket and suddenly you lose connectivity and like you wanted to book that ticket well okay you were trying to book a ticket maybe the spa version or whatever you're using says yeah you B booked the ticket but then you come out of the tunnel and now the ticket is already taken or is not available you know the seat or whatever is not available like how do you resolve that situation do you notify the user app like it becomes very complicated this is one of the great simplifying aspects of hyper media driven applications and just thin style it's long conversation but is that you you're using the server as a source of Truth and so you're able to synchronize if you have multiple people competing for resources to synchronize that and have one source of Truth for all that stuff so some of the examples that I you know people will throw out like on Twitter or Reddit or whatever where they're like well how would HX handle this I'm like there's just no good way to handle it like you know what are you gonna use like what are those cdts to like figure out your ticket like come on guys just put in database and's pretty good these days there's actually something greatly simpler about HTM X specifically in those situations which is it must rely on the server and so by not having some sort of cached smart State you have literally no logic or very thin amounts of logic to say like hey sorry it's like refresh to get the new state of the world versus like I'm going to try to reconcile what has happened in some unknown set of changes between when you started to like that's that's most the work and most the bugs on on websites that I come across is always a Reconciliation between what the server has to say and what the client thinks it should be saying and that's just like it's a super hard problem I mean remember I wrote falor I wrote a I spent years writing that darn thing and that thing is literally the attempt to try to rationalize the client state to the server side state and trying to effectively cash data from the server it's it's I quit Netflix over it okay it's a really hard it's a it's like an impossible problem you know like it it's not easy all right so someone says can you please explain L versus S so advantages I'll let you define those terms and do that yeah L is locality of behavior and so is separation concerns separation of concerns is a much older concept and it's the idea that you should separate your concerns into different typically files but modules however you want to think about it um but uh the canonical example in web development is that you should separate your scripting and your markup and your styling into three different types of files so your HTML files your JavaScript files and your uh CSS files um and uh so that's that it was a big idea early on and what vment it's still a lot of people still uh like that idea a whole bunch locality of behavior is a thing that I came up with as sort of a response to separation of concerns um where uh what what locality Behavior says is that you should put code that does something with a thing as close to the thing as possible um and so an example of separation of concerns is to have an HTML file with a button in it and then a Javascript file that uses a CSS uh selector to look up that button and hook in some logic to the onclick event that's an example of separation of concerns you have the logic in one file and the markup in another file whereas the locality of behavior version of that same button would be the button with an onclick attribute on it and then the code written right there in the button and the argument for separation of concerns is that by separating your concerns you make things less brittle because you don't intersperse two different pieces of logic with one another um the argument for locality of behavior is that when I go and look at the button I can see what the button does right there and so I argue in favor of locality of behavior uh and uh to an extent against separation of concerns because uh my experience with separating concerns has not been great it's you looking at a button wondering what it does how do you figure out what it does whereas you just put the code on the button then you can see what it does and that mixes two concerns so logic and markup but to me that's not a as big a deal as uh being able to understand a button just by looking at it not having to move around in a bunch of different files so that's uh those are the two ideas locality of behavior is sort of a it's a thing again that I came up with as a way to when people come in hot about separation of concerns say yeah you know separations of concerns is a thing on the other hand there's also locality behavior and really smart people have suggested um Richard Gabriel is the guy who I kind of Riff on for that for the essay there's an essay on HTM x.org about it um and he talks about how grouping code get grouping stuff that's related together even if the quote unquote concerns aren't necessarily the same um is very good for main the maintainability of uh of software and I agree with that so I have kind of there's there's two good questions uh uh here and so I don't know which one to ask for so we're just going to kind of we're going to go for it uh let's see if you have multiple different types of clients web browsers mobiles and other service applications each with different requirements or different data representation needs it seems like you need to have a mixed a mix of API server htx server for mobile one for uh web uh and let's see or do you Fork your logic based on a per client like how do you handle a bunch of different clients and let's also throw in there like you have like a native app that requires Json how do you how do you do all of those things um I suggest splitting those two those two things up not just so okay so uh I think that's it's correct to say that if you adopt a hyper media uh architecture for your web application you're and you have other clients you're going to need to have two things you're going to need to have your hyper media API and then your Json API and then the question becomes should you use the accept header if you've ever the accept header in HTTP allows you to make a request to URL and then specify I want Json or I want HTML um my contention is that you should split those two things into completely separate maybe even separate projects from one another and they should reuse the same domain object so all your business logic all your stuff that's not that doesn't involve taking web requests and turning them into actions and then rendering a response all that stuff should be encapsulated in a layer that's below or away from like something different than your web layer um and so you should have a controller you should have controllers for your Json API and controllers for your web application and those should be separate from one another I don't think you should use the accept header and have everything going through the same URLs I think you should have an explicit separate set of URLs for your Json API and the reason that I think that is because if you work with HTM X for any amount of time what you're going to notice is that your URLs first of all they tend to change around really dramatically because as you change as your UI needs changed and this is the great thing about hyper media is that it's really good at not needing a stable API because you get new hyper media content has a new URLs in it and it just works um whereas Json based apis those are fixed data apis they have to be much more stable and so if you actually take the if you separate those two this is an area where I think there is a legitimate argument for separation of concerns if you separate those things then your Json API can be very stable it can do things like like rate limiting like all these things that you care about when you're interacting with third parties or whatever um you know maybe you use a completely different format than Json to talk to your native API right maybe use protocol buffers or whatever um but if you separate those two things out then your web app can change really dramatically so if you need to introduce lazy loading for a UI you introduce a URL for it you make lazy loading you work with two attributes and it's great and no one it's not going to bother your Json API at all that you've got this new specialized endpoint for your UI needs um whereas your Json API can be nice and stable to be honest like once you get it right it's probably not going to change that much because you know it's a data API hopefully it's pretty stable so if you separate those two things you actually it's a relief for your Json API because your Json API is not being dragged around by the needs of your web application and your web application is able to take advantage of the flexibility and the chaos that hyper media can absorb in a way that Json based architecture just can't uh is there any uh concern over the chatty nature of HTM x uh I wonder how bad it gets with a large number of users where you need to have a call for every interaction compared to a traditional Spa with a couple calls on load to populate data I by the way before you jump into that I think that is a slight mischaracterization of spas in general in the sense that if you use any Spa like if you go to Twitter if you go to Netflix if you go to Facebook if you go anywhere the moment you start moving anything you'll notice that you will get like tens of tens of calls every every time you barely scroll your your wheel so I don't know if that's a fair characterization but give it that uh you can say that Spas have the ability to cash results better than hdmax does yeah um well first of all I agree with you my experience with single page applications has not been as like amazing as many of the advocates for single page applications seem to suggest um I think one of the things that HDMX does is since it collapses all the complexity between a user action and a request is it makes it much more obvious what's going to cause a request and so you can actually have a better idea and you can you can engineer for interaction speed based on that whereas like if you're using a really complicated reactive system like who knows what's going to cause a request right there's so many layers between a user moving a mouse and the actual backend synchronizing like who knows um so I think that it helps in that sense um there's also a lot of features of HTML um that are available for example the detail uh was I forget what it's called I think it's the detail element like you can stream down a bunch of stuff in HTML and using CSS or just standard HTML elements have things like expand collapse and all that sort of stuff so you can return a lot of data and in fact returning a lot of HTML data is going to be more efficient in some ways than returning a lot of Json uh data you know like if you have a table for example returning a of HTML is often smaller than the equivalent Json representation because equivalent Json representation repeats the the field names over and over again um that's it tends to be roundoff error so um you know yeah it's possible to make a really chatty like if you if you try and like issue a request on every Mouse move and you don't debounce that which is a feature HDMX has has it's gonna be pretty chatty um but you can you know design around that and then finally the last thing I'd say is like scripting is allowed I'm not saying you can't script uh in uh in HTML you know I just think when you're synchronizing State for the server that should probably be done with uh hyper media instead so you know it's all it's all doable uh I my experience with HDMX apps is that they're pretty fast um there's that Port that that guy did of an application from uh react HDMX it's available on the HDMX or essays page um and they their time to load for the first page went down like by 50 to 60% and they were able to handle much larger data sets than they were in react because it's just a much lighter weight to approach sort of goes with the grain of the browser rather than trying to do all this other stuff um so my experience is that it performance can be very good but it's just you know again it's just a tool and you can write a bad HDMX app just like you can write a bad react app I think it might be a little bit easier to write a good HDMX app than a good react app yeah the pit of success is likely easier to fall into with HDMX uh just because like you said the change points are very well understood and very well defined uh it's very hard not to know where your application actually changes it's very easy to know when you're kind of like ah this does this just doesn't make any sense I'm using something wrong here and lastly you have a server that goes okay is this person logged in oh this person is logged in I need to send down some extra data in the Json request you have a client that goes hey is there the extra data in the Json request okay let's take that extra data and let's process and grab some things out of it and so you end up with this duplicity of logic that can be kind of complicated and cumbersome to work with that I think a lot of people don't really talk about which is you already go on the server and go okay you're logged in do you have permissions to view this button oh you do have permissions to view this button I'm going to now create some sort of data field to say you may now look at this button it won't be a button but you can look at the button next one do you have permissions for this thing oh you do you are an editor I'm going to give you also the delete button right like you give all these things that you send down and then the client has to effectively take a second data set with a different structure and walk across that to produce the HTML so you really get this like dual uh translation you get a double translation as a single translation for me that's like the easiest way I think about it for why htx makes it simpler is that you don't translate twice you translate once which typically means I have less chance for just putting in a bug less time spend coding less time thinking about two separate data model mod instead I just have one and though typescript is really good JS do is really good at kind of alleviating the pain of thinking of two different models it's still is two different models you're working with it still is harder no matter what at the end of the day yeah removing layers at the end of the day is usually good for performance yeah I would agree with that all right uh let's see you know uh do by the way do you have any uh well-known applications or any any applications you'd like to shout out that you use HTM X besides for That Sweet job interview app that you just saw recently saying HTM X required yeah um so you can go to HDMX org weing um and there's some apps there com space uh is I actually consult with a company called com space they're a awesome South African company and I the Yan the guy who runs it is awesome and uh so uh he he kind of went all in on HDMX he used intercooler and then asked he like kind of early on in htx was like okay is this really a thing like are we going to do this and I said yes and he said okay cool come and help us do it right and so uh I've been that's a a great I was very focused on South Africa so um uh but there's a couple other apps that are big um the oaml website uses HDMX I think it's pretty simple way that it uses it but that's kind of cool um Berkeley I went to Berkeley for undergrad so the Berkeley Nobel Prize website uses it um there a couple other in there um there's what's that one I I always forget the name hold on shx org weing there's the there's the French company that does the whole PDF reader W yes yeah there were some AI people Nike Vision uses it Zoro Management's the one that's probably the most elaborate which is sort of a project management system it was written my understanding is it was written by a guy who's a game developer and he's like I don't like any of these project management systems so he just built own which is way better sounds very game developer yeah um like what you do I program for 72 hours straight yeah pretty much um but he uh and he uses a lot of that's a good example where he's using a boatload a JavaScript as well alongside HTM X and the two you know play really well together so again I think that's evidence that HDMX is not necessarily anti- JavaScript nice well thank you Carson for being on here I don't want to take up any more of your time this was absolutely fantastic uh I am very excited to see 2024 where where does HTM X go does it keep the Limelight do we start seeing a lot more Force out there or is was was this just a 2023 unique special No One's Gonna Be able to take the second half of 2023 away from me so yeah it's all good that was pretty cool and again I appreciate you you know Tak a chance on HDMX it's definitely a different way of doing things but hopefully hopefully people find it useful yeah well you got me right away technically TJ was the one that told me to go check it out and I mean the reality is is that I've been hating clientside State and I just didn't have a good way to formulate why I hated it I just knew that I just hate this translations and all this and I just was like I just I don't know what I want I just know I don't want this and I don't know how to how do I say the thing I don't want and so I probably if I wouldn't have done hmx I probably would have liked react server components as the alternative because at least I'm programming on the server and just trying to keep everything I can to the server like I I I don't mind that that perspective uh it's just that it wasn't it's still not what exactly what I want this is what I want so hopefully 2024 is even better cool yeah man right Hey Big Sky Devcon it's coming at some point yeah tell me the details let's make this work just don't make it PHP USA I'm going to the PHP L conference okay oh boy okay yeah I don't know I don't know the details aren't finalized yet so but I'll I'll let you know all right deal take care cool man cheers