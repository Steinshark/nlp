hey guys welcome back to tech in turn uh today we have a really exciting episode i'm actually sitting down with uh gaurav sen who has a youtube channel uh who which has very popular youtube channel where he does competitive programming and um he also does some design interview questions and there's actually just a lot of resources there so we're really excited to have him on the show today welcome to the show thank you jason thanks for having me um so today i i just want to kind of go over some of the things that i saw on your youtube channel that i thought would really benefit my listeners something that i'd never really gotten into before so one of the things that really jumped out to me about your youtube channel is the competitive programming so um like a lot of listeners to my show are trying to get better trying to get their next internship and trying to get better at interviewing and so my question kind of is around should students get into competitive programming to study for interviews well it does help but if you're targeting interviews or if you're preparing very specifically for interviews then complete programming may be overkill but it does help so i if i can take uh an example it would be like aiming for fitness by running marathons it's not necessary but it's exciting so what happens is you have a clear goal which is a rating and you can always see it going up while interview preparation sites are more about you complete a set of questions and then there's some diversity involved over there but there's no uh there's no you know springing up a surprise or there's no real challenge that if you don't get this done then you you don't do well in the contest so a lot of people find it find it to be a nice way to uh i wouldn't say trick themselves but actually prepare themselves for interviews right and in india especially this is becoming a trend that because the programming questions are very algorithmic i mean rather the interview questions are very algorithmic they sort of over prepare themselves to make sure that the competition is taken care of right wow that's that's pretty cool like i worry when i see stuff like that because i watch you i watch people do competitive programming and i try to get into it once a little bit actually and uh they're so good and i'm like i don't think i can compete against that like if if you know i'm up against them in an interview all things equal and they're able to like slam out an interview question so easily uh the only the only thing the only concern i kind of have about it is like there's difference between like typing out a solution on your your uh you know computer and also writing on a whiteboard so that's the only like concern i have about studying for interviews using competitive programming yes there's also the fact that interviews are yes there's a there's a specific question you have to solve it complete programmers do have an advantage because they are very practiced at solving these questions but there comes a point when your coding practice is also looked into so your variable naming the way that you're breaking tasks into functions what is the api design that you have there this happens even more when you get more and more senior so for higher roles there's a expectation that the code quality will be good and the person will be able to communicate their ideas in a very effective way that's the reason why they start asking them much harder questions also like design and in some cases they start actually asking me about the prices that will be involved if you buy a cassandra cluster so that comes at a much senior roles but uh yeah you're right it is sort of scary when you look at people like kennedy who are for you know pumping out solutions in maybe three minutes four minutes and there's us models who are all looking at the question and trying to figure out what do they actually mean part of this yeah i remember the first time actually i logged into this computer programming site i couldn't understand what's going on there and i i left the next time i logged in was two years later so it's never too late so to speak for starting programming but there's also a sort of practical aspect to it that you know is it really necessary and i don't think so i don't think a software engineer needs to know about computer programming because all of my senior engineers who were awesome at designing and programming systems i went necessarily into contests right you know i love the the analogy you made to it being like running a marathon um you know like that's kind of the over preparation aspect to it uh but let's say like for example that i i really do just want to improve my skills and it does sound fun the competition aspect uh where where should i start you could start with code forces that's a site which is the best bit about that for me is that it's reliable so if you have set aside some time and you know you scheduled this time for interview prep the code forces site will definitely work it's not going to crash because of high load or something the questions that are also you know new enough i should say it's not like it's you're going to get completely different topics every time that you log in but the questions will be challenging so you'll have to think at least while some of the programming sites unfortunately are are inclined to take topics as difficulty levels what happens with that is you have a particular set of data structures which is considered hard and if a person knows about them already it's no longer hard because you know how to apply them but uh there'll be ten questions five of them will be on let's say dynamic programming three will be on segment trees and then it gets ridiculously hard in terms of prerequisite not in terms of application so but code forces therefore is my favorite site uh there's other sites also you can try code chef you can try hacker the hacker earth although there aren't too much in computer corporate programming now uh hacker rank is another site there's quite a few sites right yeah you know um so i like i said i did look into competitive programming a little bit um you know probably up to a year ago now and it was kind of like the thing with you like i logged into code forces and i was like what the hell is going on here i i don't think this is for me and i'd like close the web browser um and so i i don't know if you saw in our little shared note thing here that um i i sent you but i actually created a chrome extension called lead party which is just intended to be like you can compete against your friends when you leak code uh and so for me that kind of like lowered the barrier there's one thing to like compete against strangers on the internet and then competing against your own friends i think i added um just just this dynamic to it that actually made me really excited to to try it uh so i just finished that actually um just launched it like a week ago so that was a really exciting kind of way to get into competitive programming i think i think it's it's going to be very useful a lot of people it's like the bounce rate on your web page something that people measure but for complete programming it's really really high people know that it is useful uh it might be fun also but what the hell you come on the first page and you you get this complete jargon which is you know you need to you need to do this click over here then go there try to solve the problem and then the problem is like chef likes to eat cakes you go um where's the complete programming problem you know yeah so i think if you can the barrier not not the quality but the barrier of solving questions it's going to be really really useful there's definitely a product out i mean a product opportunity for this a lot of interview preparation sites are trying to bridge that gap between compare programming and and where students are right now in the syllabus so it's an interesting time to be in uh and definitely plots like yours like lead party can actually help bridge that gap in a in a very nice way no one gets to know whether you're screwing up or not except your friends right yeah exactly you know maybe uh maybe someday i was gonna say maybe someday we'll you and i can take a crack at this and go head to head but then i realized that you're probably gonna just destroy me seeing as i've never really done competitive programming but but i have not done it for the past what three or four years now so oh really yeah it can swing both ways right yeah i guess i guess you're right i mean i haven't i haven't even looked at like leap code besides making this extension because i i've got a full-time job now and when you have a full-time job you don't end up going on leak code very much um that's good i'm sure your hr department will be happy knowing that yeah if they're watching this video don't worry uh so another thing i noticed about your channel that i thought was really cool is the design questions that you have on there so um i've been in programming interviews before where they ask like a design question and i'm always kind of just like like making it up as you go like i'm kind of i i look at the problem and i'm like i've never done a question like this before outside of an interview like where do you actually study your design questions when the start was um it was a mixture so the design in my company the first company that i was working for direct i was inspired by lots of other people and they had phase problems themselves which they had solved or they saw how people are solving this problem so for example the most common problem you face when you're building a distributed system is balancing the load on all these systems so you want to send the same number of requests to every computer that you have bought because you are anyway spending on the rent for that computer you have some space which is holding that computer you are spending the electricity you're keeping it on so really it doesn't make sense to run one computer at 80 percent and the others are 20 so you want that to be distributed so that in case the 80 guy goes down it's not going to be a massive load ship onto the other two guys so these are problems that engineers have been solving since the past few decades now and the problems have gotten more complex because now we are going for distributed problems like dispute systems since the internet came in and the network connection speeds became really nice and what happens with young engineers is that they join their job and they're good at algorithms they're good at problem solving they have all the potential but if you can make their basics stronger if you can improve the foundations of their engineering like problem solving skills i should say then you have a good engineer right at the start so that was the idea of actually getting into system design questions which talk about real life problems and where you apply it was you know something that you asking we do apply it at work design pro design is something that i have applied at work a lot complete programming is something i've i don't think i've ever applied at work right there's been a little bit of algorithms here and there which have helped me understand why this system is behaving in a certain way but never that you sit down and you solve this this segmentary problem you know never dynamic uh programming it's it's not consciously happened it may have happened because we designed the system in such a way but never that we sat down and said hey here's a dynamic programming problem system design it's happened a lot every time we actually sit down to build a system at a certain point in time you have to go to your senior engineer and get the you know get the permission to actually go ahead and code this out right you need design there yeah so um i've noticed a bunch of episodes on your channel will be like the architectural design for tinder or whatsapp and all of that kind of stuff where do you like are you just kind of approximating what you think it looks like or is that actually how it works and how do you find out what those designs look like it is a mixture there's almost all of it is speculation so if you are told this as an engineer design this problem so the the context of all of those episodes is you're in an interview and you're asked to design something similar to tinder or something similar to whatsapp and you come up with a design which is which is something which is respectable in 45 minutes of the interview time uh in real in the real you know the real problem cannot be solved this way it's far more complex there's going to be small systems within that huge diagram that you do which are going to be super complex themselves so when i was working at uber you could actually draw the system architecture of uber and you could take a tiny piece of it and you would have an entire team working on that for more than a year so it's super complex that way so what they want to look at is when given a large problem what are the things that this person considers and how do they actually bring it down to something that can be coded down down the lane you know right another thing is that this design is actually going to be shared between product managers project managers uh your engineers across the board so that they can just look at the design and say hey this is making sense or this doesn't make sense they don't need to look at the code because that's very tedious and it's nearly impossible i mean you can't you can't run through code like that so this helps and that's the reason why they expect engineers to be able to first abstract out problems and show them as block diagrams right that's awesome that is really cool i i definitely have to study some more system design questions because like you said it is really uh useful at work like i find myself um it's one thing to get in the door at a big company and then what you'll find is a lot of your annual reviews or any review really like half year review whatever it is they always talk about like yeah but how much are you contributing to design discussions like that's one of the really big you know factors when you're at your job is just how how are you contributing to the design and when you walk first in the door it's not a big deal but as you go through the the ranks like you said when you get to like higher ranks like senior like it's really really important it's probably like a large part of your job so definitely it's it's really important absolutely i had a senior of mine who once told me that god of you do contribute on a design and i said that's that's not true i i don't know about design so this was two years into the job and he said what you're doing right now is contributing to the code design so good coding practices you actually take code and you break it into modules that's what you're doing so that's also part of a design once you start thinking in far more abstract terms that time of course you'll be you know in the in the meeting room talking about oh we can apply your message queue over here so uh yeah that does help in the promotion space though as you get more and more severe definitely so so you're working at uber um like how did you like uber and why did you leave so yes i i i i heard you're working at roomba i was going to just connect you with it no no no you were working there though yeah so um i liked it i liked uber quite a bit the work culture was really nice there's a lot of structure to uber which i think maybe startups you know would appreciate because structure also gives performance to the employees or should i say it gives a path a clear way in which you can just reach out to your manager and ask them for help when you need it while unfortunately in certain startup systems especially when it becomes a big startup that's that's like a you know a grown-up baby it's the ugliest thing that you can see so you have these you have these set of managers instead of senior engineers who you can always ask for advice that's superb in the uber also the problems that they are solving are pretty interesting like some of the problems are super interesting but they are in the us so but when you're talking about scale yes it's pretty intense at uber engineering-wise of course the amount of data that you're going to be processing and you know doing something with that so you'll be writing also some results that's pretty interesting why did i leave two reasons mainly one is the youtube channel and to i want to make a product on system design which is something i'm still working on so a part of it may be the first 33 has been released till now so yeah the system design course that i have is a product and i realized that if i'm going to be putting time into it like seriously looking to make it a good product it's going to take all my time right so yeah i had to then make a choice and that system design uh course what like where will that be available for people so it's on interview ready dot io uh if you type that on your browser then it automatically changes the get interviewready.io that's the engineering marvel that i have it's just nice but yeah if you go there then you can buy the course it's on system design it has a high level design interview something that we were talking about right now which is block diagrams and stuff and there's also low level design interviews which is very interesting because here's the thing right as a fresher when we join we talk about code mainly then you head to block level diagrams that's high level design and then you head to low level design which is you have a problem statement you expand on one particular part of it let's say load balancing and before you write the code you actually design the code using block diagrams and using class diagrams and stuff like that so one of the problems talks about that right now unfortunately it's taking a long time but the second one is nearly out it will talk about multi siding and stuff should be awesome wow i can't wait to try that out and and learn more about that should be fun yes um and so you know this youtube channel uh it's it's really big it seems to have really taken off and my question is like how did it get started like why did you start it in the first place so i think the inspiration came from writing blogs on computer programming problems a lot of people found it useful and now that i look back and i also look into myself i realize that i really really like people thanking me yes about that which drives me uh drives me you know forward all the time right so this is something pretty interesting and thanking me not for thanking me for being intelligent is something i should say there's a lot of ego inside me i'm sure but i'm trying to harness that powerful video now right uh there's the fact that if i solve a problem in a novel way i would definitely like people to know about it and they would thank me for actually putting this out there and also the explanation one important thing about any explanation to me is that the comprehension should be high when a person reads it and it should take them less time so when i used to write these posts which used to be 150 words or something i would reread them about 15 or 16 times just to make sure that the grammar is right if there's any image i can add in then let's do that stuff like that which made the posts pretty popular and it helps also when you talk about the things that you have done you understand them far better the action helps but reiterating what you've done is almost like doing the action again so that inspired me to move to the video content and initially i wouldn't put my face forward i used to screen record and then talk about algorithms and stuff later on i realized that you need a board sometimes to kind of draw things out and your expressions talk along with your gestures although half of the time my gestures are something like this it does help to put the message across easier that's the reason why i started videos and there's a big gap in between when i thought i've put enough content out there but about a year later i realized that no that's not the case there's always something more that you can you can talk about awesome yeah that's great man um so i i've only got like one or two questions here left and uh before i get to them i'll say thank you for sharing all of this really intelligent information on the podcast no it's my pleasure of course it's like i said it's something that drives me forward [Laughter] uh so like what is what is one of the most common questions that you get from students that's a tough one the recent questions i'm getting are how do i move to product based companies so i don't know if that's the case in the u.s but in india you have majorly a set of service-based companies which is they take contracts from the larger companies where you go out and work for them for a few years and usually the work that you do for these companies is very backend sort of work so it's not fun or not as much fun as let's say building a new product right that's a question i get a lot and has to do more with it's a very complicated question and sometimes i feel like the answers are also a little demoralizing because the opportunities are less of course you can prepare well but you'll have to really work hard and get ready for a struggle maybe i can twist it around and say hey here's an adventure you have to struggle a lot and submit your resume everywhere try your level best learn new things you're going to be a different person when you actually enter this company it will be worth it that is absolutely true i truly believe that but i also have this feeling that sometimes luck plays an important role when it comes to getting your resume shortlisted in these companies right it has a lot to do with the connections that you already have there so that's unfortunate but it's also it's the truth yeah yeah that makes sense um you know one of the reasons i asked that question and i'm glad that you brought up the product versus service distinction is because i have seen that question before but for me like you know i went to school in canada um i've never known that distinction like it's never been a question in this kind of you know in that area where i was from so um i felt so you know unprepared to answer it so i'm glad that you know if anyone asks me this again i'll say hey check out this episode uh you know there's some really great advice in there yes um it's it's tough to take a person's question and also you know try to guess the context that they have behind the question so uh the weird thing is if you give me too much context i'll be bored reading that so i probably won't answer strange so when a person comes and asks me a question i go like there's not enough context here and oh well this it's too big a question so there's probably a sweet spot somewhere in between and as much as you can ask your friends ask your seniors ask your professors but if the answer is not coming from the internet also then go forward and ask a question to me or anybody on linkedin i mean jason's also there jason i'm sure you have had a diverse set of experiences which are which are different from mine so if you have any questions for i'm sure about canada then you can you can definitely ask jason definitely yeah um yeah that's that's a that's a really good way to put it so yeah i'm definitely a resource for people um and i do take questions quite a lot uh i've done a few resume critiques and stuff too and you start to see patterns between like questions and resumes and stuff right yes so last question uh this one's a little bit like easier it's a bit of a low ball there for you to end off on what are some of your hobbies chess is one of my hobbies it's right here oh i see it yeah nice it's a so this is a you know fancy set i don't play with this because i i can't sometimes tell the difference between a rook and some weird shapes that they have here but i do like playing chess it's gone down uh recently because i've seen that i sort of get addicted to playing that i can play that for hours and i have other tasks to be done like making a course that is one thing that i like doing apart from that i like reading there's been the past six months which have been very productive when it comes to reading because you're at home so audiobooks help while i'm reading so i listen to them at 2x i double the speed and i'm just you know running is right i feel like superman or something i'm asking so much i know you know what when i discovered the 2x feature and like almost everything i listened to like youtube videos and uh you know even podcasts or audio like when i discovered the 2x feature it changed my life it's like i can take in twice as much content now so absolutely definitely it happens when you see especially a one-hour long video and you go i have half an hour yeah exactly exactly and sometimes it feels like i'm watching a video um you know it's they're going too slow in the beginning so i skip a bunch and then it's like what they they did too much like now i have no idea what happened but i don't want to watch all the slow bits so you know that 2x feature is is perfect absolutely especially in the mit lectures that's something that's super important so they start really slow and they go really nice and then suddenly they're talking about heavy light decomposition and you go what yeah where's the bridge there yes yes at 2x it's good all right well that is all the questions i have uh i just want to thank you one more time agora for for being on the show and really direct people towards your youtube channel for everything competitive programming and system design questions those are going to be really great for helping you get interviews and slamming those interviews when you do so thank you so much for being on the show today thank you jason thank you for having me again don't forget this chrome extension is coming out soon and there's going to be a way for you to get a cool feature on your resume if you just go and you follow me on any platform and you share that video so please look out for that and don't forget techintern.com if you want to learn more thank you guys so much i will see you next monday