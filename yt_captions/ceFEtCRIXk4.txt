so just a short introduction about me because some I guess I know most of you already but there is some confusion with regards to kdab KDE and stuff and just want to make sure that you know that kdab or kab is a company and KDE which uh this shirt is hailing from is the largest C++ open source project in the world uh so so a lot of people came to me and said thank you for working on KD which is awesome to hear unfortunately it's a little bit depressing because I kind of feel like an impostor because I'm I'm not as active anymore inside of K so it's kind of like living on the old Fame that some existed at some point and I don't want to take um the kudos from the people who deserve it today so I would say uh if you want to thank anybody about KD just contact the whole KD community and say thank you so apart from that I guess you know that I wrote a random book that nobody read uh I'm also a trained although it it it has been translated into a lot of languages so I have a huge huge potential audience uh potential uh apart from that obviously as almost everybody here I'm also a trainer consultant I am kind of inactive in the working group 21 etc etc so this is my 10th year speaking at meeting C++ and I feel old I feel really old and worse for there so I found one of my favorite albums and I wanted to show it on the screen so too old to rock and roll too young to die so this is kind of how I feel uh at the moment my first talk at Mt C++ was called monid in Chains and to be honest I've never expected it to be accepted at a conference uh and it was the most involved one so the most difficult to follow and kind of it went down heill from there um every talk was I heard that there are not bad talks but they were simpler and simpler and today's talk will be the simplest of all for two reasons first everybody is tired including me I'm kind of in a jet leg mode uh and this as a keynote needs to be let's say for a wider set set of people than what I usually am for I usually aim for for people who have been in C++ for a lot of time and they might have their own opinions on stuff and they want to learn just a specific topic today we are going to be a little bit more Broad and a little bit more shallow but I still hope uh it will be useful now apart from uh this fitting my my mental state uh it's also a band that belongs to uh an let's say a type of rock called prog rock or progressive rock so what is a prog rock prog rock is a broad U genre of rock music the style was an emergence of psychedelic bands who abandon standard pop traditions in favor of instrumentation and compositional techniques more frequently associated with jazz folk or classical music and if you remember the name of The Talk The Talk is called prog C++ so what is prog C++ prog C++ is a broad genre of C++ code the style was an emergence of psychedelic developers who abandon standard CID classes for something really strange like generic functional or value based object oriented coding PRI practices now I've specifically written value based object-oriented coding practices because we are not Java okay and as usual uh I don't want to break traditions in my 10th uh 10th year so I always start all the presentations with uh one of my favorite quotes by not really by Phil vad uh make your code readable pretend the next person who looks at your code is a psychopath and they know where you live now for a full disclaimer I did hear Phil wadler say this sentence but I'm 100% sure that he's not the author of it he he just repeated it so I'm not lying by saying this is Phil wers but originally who knows who who wrote it maybe a random person from the internet and the second part of the disclaimer obviously if you notice some errors in the code on the slides it's to be expected this is slideware this is not meant to be a production code I'm going to use undor T suffixes for let's say user types and I'm going to assume that using SD string literals is all only presentes because it's nice to write strings with quote quote s so let's start with the first small topic um if you are following the standardization uh committee you have seen that there was a meeting in Vanna which I guess many people including myself ignored because who can reach Vanna from a normal part of the world uh but they missed a huge opportunity the opportunity was to organize the meeting in something that's called a constant obviously I'm mispronouncing the name of the of the city a little bit north from VNA but I'm doing so intentionally constant is one of the most important things in C++ so I'm proposing whoever organizes those things for the next Meetup to be in the constant in Romania so let's start with constants this is something that we often write if because we have been thought that const by default is a good thing so let's create a person that is going to be an immutable person called Martha Jones uh who knows where the name Martha Jones is from Doctor Who uh one of the better periods of Doctor Who so if you see her name U just think of Doctor Who now usually this is fine unless we need to make some customization to the object and let's say we trying to assign a new value to some member variable inside of uh the person and we just say bad hash equals something now we've lost the most important thing that we had in the previous slide and that's the con keyword so we kind of destroyed the idea okay we need to be cons by default just because we need to Tinker a single thing and in the whole function afterwards people can just mutate Martha as much as they want and people are not mutable so one of the common idioms in a lot of languages so not only C++ is to create to use a Lambda that is evaluated immediately and you just create a Lambda you call it and from the Lambda you return an object inside of the Lambda you can manipulate mutate the object as much as you want but once you return from the Lambda it's assigned to a const variable and you cannot mutate the object anymore is this fine should be okay now just imagine that you don't really need Martha for every single Dr her episode you just want to have Martha when you actually need her you don't want to pull her out of her I don't know what what the actors called that little house where they prepare so you can just replace the auto with the super new keyword in C++ called lazy and when you replace it with lazy the rest of the code doesn't need to change in essence as soon as Mara is actually needed then this Lambda will be called and you'll get Mara obviously there are a lot of confused faces uh this is a huge lie we don't have a lazy keyword inside of C++ but fortunately enough new newer versions of C++ allow us to Define things that will end up in code like this looking like they were just normal keywords lazy is nothing more than a normal class template which accepts a function as its template parameter so the fact that we don't need to write lazy off something that's the class template uh class CAD uh look up the what is abbreviation for see the class template argument deduction okay uh and so if we pass it to Lambda it will automatically be used the type of the Lambda to deduce the type name of FN now inside of the of this object called lazy in order to be let's say good citizens like all things in the standard Library we should Define what the value inside of this lazy thing is going to be so we are defining a nested type called value type just like STD Vector just like STD optional and all those other nice classes or class templates and we just we need to implement a way so that the first time we need Martha we initialize her and every other time we just reference the old one so kind of like Singleton but we can have multiple of these lazy values for the same internal type so we need to obviously to store the function itself and in order to be let's say thread safe if you need that for implementation of lazy we can just use the on flag and if it didn't initialize anything yet we'll have an empty optional otherwise we'll have ma inside of the optional now when we try to convert the lazy value into proper value for example through the cast operator or conversion operator we can just say call once and this will be thread safe way that guarantees that Martha will be instantiated only once however many threads are accessing the the same object and after we managed to do that we just return the reference to Martha so whenever we talk about const objects they have two phases regardless of the the way that we use to construct them so the first phase is we are building the value during the buildup the object doesn't need to be con the first let's say rational why we are allowed to change that object while we are building the object nobody else sees it it's just our object when we finish building the object then we can give it out to the world and we are giving the object to the world as a const one okay and then obviously uh since nobody saw it before as far as the world is concerned the world just sees the final product and the final cost object and then obviously using the value is the using the const const object so just like we have almost always Auto we also have almost always const you should Define things by default as const con unless there are some issues so the first thing that you don't want to Define as const are member variables the reason for that is that you're going to disable move semantics so move operations like assignment and the move construction then you don't want to make local variables that you're going to return from the function as cons because on if the return value optimization doesn't happen then it cannot be moved from from your function into the color and the last one if you have a variable that you want to pass in to something else so for example you have an object you no longer you don't want to use it afterwards you just want it to move to somebody else you cannot make it const as well and I don't really like having rules that say but I want to have rules that say always do this this so can we make something that will behave like a con but still be move enabled without changing the compiler and changing the standard just like we did the lazy object we can create a new rapper and obviously we cannot use the keyword const but we can invent a wrong called immutable inside of immutable we're going to have a member variable and as we said we don't make member variables const so we are following the rules that we've seen before then we create copy operations we create move operations equals default equals default equals default we don't need to do anything special here the only thing that needs to be special we can Define the accessors and all the accessors need to return const objects so const references or con pointers okay so even if the internal variable is not const you can use it only as a const from the outside world fair enough now the only situation where I would say it would be perfectly fine if you removed the const is if this immutable object was a temporary so our value reference and not an L value reference so which means that make everything con except variables that you want to give away so if you have a temporary object we are never going to look at it inside of it ever again whoever uses that object can just pull out the value that object will never be looked at again so as far as the world is concerned it it hasn't changed and you pulled out a value that afterwards you can convert to const so we can we have created a nice repper that we can now by default use everywhere that we want so the almost always const can just be switched to always immutable so for member variables declare immutable of SD string instead of con string it will have the same semantics without having the move operations disabled for local variables that you want to return Again by default return value optimization will happen if if it doesn't happen because of some conversion some complicated code inside of the function then the result will be moved into the Coler which again doesn't work for const but it will work for immutable and the same thing if we have a local variable that we want to move to somebody else again we wouldn't be able to create it const but we can create it to be immutable and the cool thing is that well we cannot write con per person something we need to write con Auto person something for immutable C++ is even nicer and we can just say immutable person instead of Auto immutable person or something like that so in some situations we even get a little bit of a better syntax questions so far if not we can move on so we we have extended the language to have two new keywords one keyword is lazy and the other keyword is immutable and they're kind of used in a similar way immutable needs just added parentheses to Cola Lambda because it accepts a value and not a function and lazy just accepts the function now obviously if you don't care about immutable functions you could say if con xer if it's a function then call it if it's not a function but a value then create immutable of that value so that you could also remove the parenthesis at the end so one of the things that I would like you to remember from this talk is that it's fine to implement things that go against the language when the language is insufficient or wrong for your use case or domain if you remember the keynote from the last year uh Nico had huge uh problems because views from the Rangers Library are shallow const and a lot of people from the standards committee think it's fine because it's the way that references kind of behave in C++ they're not deep cons they're shallow cons so it's a let's say a valid excuse for the range for the views to be const views but still allow you to change the objects that are below now if we follow followed that the C++ behaves like this so in the standard Library we don't want to do anything against that we wouldn't haveed invoke which says okay language doesn't allow us to call member functions with the parentheses so we are going to add something in the standard that circumvents that we wouldn't have unique pointers because somebody could say that new and delete exist in the language and unique pointer doesn't behave like new and delete but that's not the point the point of the library is to create something that is safer especially if you see that the language is lacking in in a specific place so immutable fixes one issue of con so it's perfectly fine to create something like that now the next section is something that as I said I'm growing old and people when they grow old they kind of get uh annoyed by everything so I guess half of the audience understands what I'm talking about right so when you're young you're energetic you get a code review and you're like happy okay this can be better this can be better and when you get old it's just get off my loan right so if somebody makes a mistake that you hate seeing after 10 years of meeting C++ for example you will get annoyed and this is one of the idioms that everybody knows about that is documented in lots and lots of books and Wiki pages and whatnot and everybody does a custom thing that is unrelated to what I'm going to talk about and I really really hate when I see a custom implementation of the following thing so we've had the assignment operator in in a few slides before but and it was completely fine to say equals default because we just had a single variable inside of that type now for persons they usually have me more than one me member variable so for example a name and a surname and if we want to update the name and the surname of a specific person and exception happens in the let's say in between the assigning the name and the surname we'll get half of an update which is not a good thing and I I assume that everybody agrees so if we get an exception between two member variables being updated we'll get an object that is half updated and half not if you want to be on the safe side you should either have a fully updated object and no exception or the old version of the object and the exception and the idiom here that again many people ignore is will be called copy and swap but this is still not it you create a new person you initialize the values that you want it inside and you just swap it with the current person quite a trivial idea and again most of the people don't want to use it for some reason now in the we obviously need swaps for all of our objects if we want to use swaps so there are several different ways to Define swaps but let's go for the old school one uh as a friend function so friend void swap left and right how can we swap two two things we can just say SD tie to put all the member variables inside of tople of references for the one object and for the other and call STD swap because obviously topples support swapping and this is not obvious uh this is just from recent C++ standards this wouldn't work in C++ 11 if I remember correctly but since we are in the future then this is perfectly fine code now you've probably seen STD tie used for operator less than and similar ones it's quite useful for swaps as well so in order to create the full edum called copy and Swap this is something that always should happen inside of the assignment operator and this is the only valid way to implement the assignment operator what we are doing here is we are creating a temporary copy of the original object that we want to assign to the to this if an exception occurs it will occur at that stage if the exception occurred we just going to exit from this operator the memory will be freed and the object will be unchanged if this thing succeeded so no exception was thrown then we call swap swap is always no except if you implement it correctly so it will just flip the temporary object and us and we will become what the temporary object was when we exit the function the old values from us will be destroyed and we will have the new values inside and this is perfectly exception safe code so proper safety either I have updated fully so a transaction or I haven't updated at all the mve version similar as the previous one just with one STD move edit so uh in just in the case if my moving on the stage didn't communicate what happens uh clearly enough if you want to assign this circle to the object with a square we are creating a copy of the circle we are swapping and in the end we have just uh remained in in ourselves we have the new value so the circle now there is one little detail what is the prerequisite of the copy and swap to work you cannot have references as member variables this is one of the most annoying things that I've seen in past few years is that even if people know about copy and Swap and start implementing things with copy and swap because it's safe but they kind of want to optimize a few parts and create references directly to some data that will be used often what will happen if in the copy and swap pedum if you create a reference like this first creating a copy will mean we are creating a temporary object that references something from the original one okay the next step is a swap now swap on references doesn't swap the pointers it swaps the values so even if you have created a copy you're referencing the original object you're not changing the pointers inside you're going to change your reference the value that your reference points to with the value that this reference points to so you kind of end up with essentially a double swap for for for a few things but you usually you end up with undefined Behavior so member variables should never be references it's better to create them to be even rle pointers than to create references if you really like references then you can use SD reference rapper so member variables if you want to be good people who create values uh you should always have values to be member variables inside of your types then your type will be somewhat of a value type so additional thing that I think that copy and swap is useful useful for is that the idea behind it is not only tied to the assignment operators swapping is everywhere in our industry so if you work with Graphics the first thing that you're going to learn is about double buffering what is double buffering I'm showing you something then I'm drawing drawing drawing drawing drawing you don't see what I'm drawing and then when I'm finished when I have the finished object I just swap these two okay a similar thing if you have one thread that collects some data collect some data at some point it wants to pass the data on and it's not a contigous process so it's not this thread is producing and this one is consuming but but it should happen from time to time that all the collected data should just be transferred somewhere else then swaps are again a little bit of your friend so one of the examples where obviously we as C++ developers don't care about garbage collection but a situation where this is quite quite often used is the mark and sweep algorithm for garbage collection so what does Markin speep do it goes through from the root of object through all the objects that can be visited sets of flag this is live this is live this is live and then at the end it goes through all the object that forever allocated and collect those that should be deleted okay so the first step is Mark and after that we just go through all the objects if the object is marked then just reset the flag if the object is not marked then it's it's garbage so it should be delet deleted but deletion is often expensive and you don't want to for the mark and sweep to work you kind of need to stop the world in order to process everything and then when the garbage collection finishes you continue the world you don't want to do deletions during your main application so the the main event Loop you're going to slow down the application so often instead of calling delete you just want to schedule it for later or to schedule it for to be executed on a separate thread so instead of having delete we can just say garbage push back for this subject then when this finishes we can continue the normal execution of the program the program can execute without any issues even if you haven't deleted all the garbage yet now the thing that we can do is again just swap create an empty garbage colle collection swap these two now we are going to have an empty garbage collection and we have given the full garbage can to somebody else and we can just continue working and the only thing that needs to be synchronized in this case for a multi-threaded garbage collection is the swap so the idea of a swap even if you don't often use it in our code it's a really really powerful thing just imagine you're magician and you do some trickery and we are all obviously magicians in uh when we write write code so remember swap if you like SD rotate because of Shan parent then you should like swap because of somebody else uh okay so the next one really important thing States we had this quote already so at my first uh meeting C++ Scott Meyers showed one of my favorite landmarks of Berlin which I'm not going to mention today because it's not that popular anymore uh and this meeting C++ Kevin showed one of my favorites quot favorite quotes from John Kack so a large fraction of flaws in software development are due to programmers not fully understanding the possible States their code May execute in now we are all learned to fear the undefined behavior in the compiler when we do something oh it's undefined Behavior the compiler can do whatever it wants but it's the same for our programs if our program can get into an invalid state which is a state that you haven't accounted for in advance your program is in undefined Behavior your program can be abused to do many many evil things so just like undefined Behavior inside of the compiler is an issue illegal state is the undefined behavior of your software so if you manage to push your software into an invalid State you should watch for Patricia uh Patricia's talks on security vulnerabilities that just needed a little nudge for your program to have let's say one variable wrong so how we do we deal with States in C++ we create classes we create a lot of things inside and as Miller said when you create a class or a structure it's kind of a nice bag to put things in and as a new developer comes in they will put even more things in and you just get a huge huge chunk of state with some variables tightly bound some completely independent Etc and after a while because we are all serious developers we are defensive developers we are going to add us asserts inside of our functions so if you're implementing a web browser and we are implementing a web page and we have a function called render obviously we're going to assert that Dom the document object model thingy is not an all pointer fair enough it's good to put a sech everywhere or throw exceptions now when we've rendered the page we want to execute the JavaScript so execute event Loop every Li UI library has an event Loop so JavaScript as well inside of that we also want to assert that Dom is not an all pointer and in order to execute JavaScript I guess a web page should be fully loaded so we are going to assert also that we are not currently in the loading phase then we are going obviously we need to load a page so if you want to load a page the document object model needs to be null because we shouldn't have loaded anything before we shouldn't be in the loading process at the moment and we should not have already established a connection to to the web page that you want to load so we have created several member functions for our type and then we said okay this member function doesn't work in these cases this member function doesn't work in this cases Etc is that a single type then if you disabled half of the functions in some of the states should have should that be in the same type obviously not if you have a cat you're not going to say okay this cat can jump if it's orange it can drink milk if it's orange if it's blue it can I don't know walk or lie on its back and if it if it has wings it can fly if it has wings it's oby bird so it's not the same type as a cat and the same thing goes for all of these things and this is something that we commonly write myself included a lot of projects will end up with huge objects that you just disable some functions in some situations apart from that obviously you can easily get into invalid States if you have that many asserts in your code it means that your type the type that you design allows you to be in completely invalid States so instead obviously we should use something like we should create different types so we need initial initial let's say object which will just contain the URL we should have the loading one which will just contain connection and the document object model and once we've loaded we just need to have done all the member functions that we've created so far will just end up being member functions of these three objects and this is no longer something that is runtime checked this is now compile time checked if I have loaded then I can execute JavaScript and obviously we just need to put everything inside of a variant for this to work I guess you have seen how to visit variants quite a few times during your lifetime so I'm going to skip this one and skip this one unless somebody sees a potential issue in the code maybe not really this code but the code that can uh become after this one evolves a little bit what are we doing here so if we're in the loading State we are switching the state to load it or whatever does anybody see something that could lead to undefined Behavior compiler undefined Behavior yeah sorry uh okay I didn't yeah get if is going to yeah sure sure sure okay okay so syntactically wrong but let's damn yeah slideware this is an arrow but it's it's a small font so you didn't see it okay that's a good comment so in the previous one we have a dangling reference in this one we have a dangling pointer what's the reason we have the current let's say a square inside of our variant we are creating a reference or a pointer to that square and we are changing what is what is inside so we have a reference to the old object or a point to the old object obviously this code that was in the slides apart from the syntactical problem problems with rendering uh is perfectly fine because we are not using those references we are not using those pointers so we are not going to reach undefined Behavior but in the future somebody could just extend this Handler and add something that is going to use the reference or a pointer so instead we need to fix the issue if we want to be future proof completely then we going to get get again swap so we have the old States somewhere then we create a page T which is a new page it can be copied it can be just an empty object and then we generate a new state when this new state is generated we still haven't removed the old object from the current state so all the references all the pointers are still valid and once we get out of the overloaded STD visit or the If U get if after that we just call Swap and only at that point we are going to get the switch once all the pointers and references are out of the scope so for example with the get if we would just say new page equals loaded T and after we exit after all the references and pointers are out of the scope then we do the swap and we are fine so again swap is a really cool and simple algorithm now sometimes you don't want to update the state so maybe this is not generic enough if we don't want to update the state then we don't want the new page to actually contain anything so we want the new page to be empty how can we create a new page that is empty and we can check whether it's empty or not optional optional so if you want to have this optional of updating the state you just create optional new page and if you actually put something inside then do the swap otherwise just ignore and this idom is now perfectly safe you cannot reach any undefined Behavior inside now if we talked about variance obviously we need to talk about expected but I'm not going to repeat the talk from the previous year I'm just going to remind you what expected is so again kevn mentioned n minus ones for special values Etc in order to communicate an error we can obviously use whatever we want in C++ the new and the cool thing is the expected so the expected is a class that can can contain a value or it can contain an information about the error that happened and the reason why the value is not present and it has some really really cool and useful member functions for which if you want to uh to look at them I don't usually reference myself but the my talk from the previous here was amazing uh so you should probably go check out that one instead of anybody else's talks and yeah people did talk about expected but not as good as I did thank you okay so the thing that I mentioned back then is that if you like the semantics of exceptions but you like expected because you're not allowed to use exceptions inside of embedded environments obviously you can abuse core routines to to kind of simulate the same thing so if anything that you coate on returns and error you just drop out of the current function and return that error otherwise you're free to use that value so in the first line we say as string input is called weight of get input if get input returned an error the whole function exits just like with exceptions and if the input was properly generated then this SD string input will have a proper value and we just move on to the second line now again this is again cool and nice and everything else and some people even proposed something similar but a little bit more powerful well some people herb Suter uh for inclusion to the standard called uh commonly referred to as herb herb setion or something like that but all of these things share as far as I'm concerned one flow even this one uh if you want an implementation for Co on something like expected you can check Antoine's U really nice blog post U you have a QR code for for the direct link for to that one so again to abuse kavin's analogy from a few days ago while we are making lunch we make mess this mess is not a problem as far as C++ is concerned we have D structors so all the mes that we create while making lunch will automatically dis disappear because of the Constructor the issue that C++ has uh is with when you get a lunch burnt so you're making rice and it gets a little bit sticky on the bottom and a little bit darker than the rice usually should be what does the C++ do okay throw an exception and which means essentially forget about making the lunch destroy the kitchen and move on and this is not the way to handle errors just imagine anything that you tried in your life and you failed on on the first time okay I I I'm off that's not something that we should well we we do often but it's not healthy so usually we try to find a fix in the situation with the rice obviously take a clean pot pour all the rice that is not burned into the clean pot and continue making lunch no need to destroy the apartment and obviously after we found the fix then just continue process so the choosing of the fix is not on the algorithm that is been called the algorithm can offer you approaches do you want to stop making lunch do you want to use a clean pot do you want to use the burnt rice for tea again MAA or you want to do something else with the burnt R and then when you decide you tell the algorithm okay continue with this choice apply slide this is not something that is possible with exceptions nor with coate nor with any of of the previous ones but again this is completely normal interaction between humans and this is my uh gorgeous attempt at drawing humans obviously I didn't go to an art to Art School uh but let's say this Kindle looks close enough so if you know the the song from The Sword in the Stone again uh who knows the song and the cartoon or who knows the cartoon yeah only old people uh so for the young ones please Google this uh it's one of the nicer Disney songs from from the old era so it's two and fro stop and go that's what makes the world go around and uh if I remember correctly the authors of the song are wisman brothers and just like cavn says that Shakespeare created memory management and so on wisman Brothers created coroutines so we have two cortines we go to and throw and each of the coroutine just stops and goes stops and goes and that's what make the your program go around so when we want to communicate between those those two people we would just create either classes or again variants of different messages that can be communicated to and fro so for example if you're parsing so no longer cooking rice we can have a number parsing error we can invalid type error on one hand side and for the fix you can have use zero instead of whatever you passed or skip the current line just for an example usually you will have a little bit more elaborate things with variants of different types so this picture that we've had just forget the sticky figures and think of functions these functions would be called coroutines and you have seen this picture just with functions a dozen times on previous conferences that talked about coroutines so a communication between two entities so if you want to say what a message is we would say a message is either an error message so the One Direction or um fix message which goes into in the other direction now we can create we can say a result of our cor routine is going to be either the result so the value we have part some passed something success successfully or it can be a message containing an error so we can just say Okay result is going to be expected of result and message T pointer we'll see why it's a pointer a little bit afterwards and then we can just create our par of function not as something that returns expected but it returns generator of these expected what does this mean this means that the same function can return us an error multiple times just like a normal person and whenever you hear a new error that occurred you can say okay try this new error okay try this new error try this if all of those fixes succeeded you're going to end up with a result if you find an error that is not rec recoverable then you can just say okay by this time I really give up I cannot parse this file okay so we are going to create a message which will be essentially Communication channel between the coroutine and the caller and any time that we find an error we're just going to co yield an unexpected value and uh with an error inside obviously I intentionally implemented everything without creating custom types just by using STD generator so that you see what so that I don't hide anything as a magician does obviously if you were to implement something like this I would advise you to hide all of these ugly things like STD unexpected STD address oft message into a dedicated object so don't use the generator directly but let's say create a wrapper on top of generator which provides you with all of these now in the situation on the color side we have call eight pars the first time that we don't get a result we are going to propose a new fix the second time we don't get a result but in error we going to propose a new fix so we have a v true and in the situation where we got a proper result and not an error we're just going to exit out of the V Loop because we have success successfully passed the whole file so coroutines while we usually talk about them in the terms of asynchronous tasks and Y other can be quite useful even for much more uh nuanced error handling than exceptions allow us than anything that C++ already has allowed us ever in history obviously I'm lying but I'm trying to sell you something any questions so far something online um yeah I'm looking into the online questions so um regarding the usage of aert coming from an embedded software background I'm told by many experts the search should be avoided and embedded systems a quick Google Search now I see funny there is a contradicting suggestions use do not use on a depends what are your thoughts about asserts and embedded um okay so I hate asserts as much as the next guy and use them as much as the next guy uh I completely agree and that's one of the reasons why I I think that the code that we started with before the variant stuff is full of codes smell as soon as we have that many asserts we have designed our types in a wrong way so I would completely agree with the comment uh that that that person had okay and I would say this is irregardless of whether it's embedded or not obviously for embedded you have killed a dozen people in an airplane for for a desktop you kind of forgot to save a file different different problems but the same cause anything else and El yeah one simple question uh why are you passing a pointer instead of using the return from the coy yield yeah I kind of kind of wanted to to skip that uh to skip around that so we need to have the communication mechanism and in order not to talk about how cortines work for I don't know 10 10 time on all the conferences I've used the most uh what's the expression rope and stick solution that I could could imagine so cortines can communicate in an official way between the color and the col but if even if you don't know a single thing about coroutines we can simulate that by creating a variable on the stack and just passing that variable to and fro from the color to the col now again it's a little bit of a risk to pass a pointer to something on that that looks like it's on the stack but this is in a cortin frame which will exist as long as we are Co yielding Co yielding Co yielding from the result so it's still memory safe even if it doesn't really appear to be so y one more question um for the problem you mentioned for object construction how about default initializing the member variable in line in the class and so every person object is different uh not sure I get the point yeah neither am I [Laughter] so I would welcome um an email or something like that I I will gladly gladly respond um actually there's another embedded question can we use the co- routines and expected embedded with a with an allocator inside the promise so we don't use he allocations there are a lot of talks about coroutines and that question appears every once in a while a lot of things can be achieved can be used and embedded with a little bit of hardship but again that would be a little bit of a huge digression for this St but I would again send me an email I'll cadly point you to some of the people who exactly talked about the same the same ideas before sure all right let's carry on okay okay so again if you hate this syntax just wrap it inside of a type if you even hate the local uh variable message then invest several days into understanding how cor routines work again from the past year uh there were really nice talks two of them I'm not going to mention Phil Nash uh because last year I I mentioned the other guy and I don't know whether pH got offended or not so I'm going to mention him this time so Phil also had a really great talk about cortines in the previous meeting C++ so check out both of those and you'll kind of get some vague idea that you don't want to deal with cortines but use the already implemented things like STD generator okay so as far as the errors go once we really have a value so not an error we can just say Co yield the final result so the main point of this ideum would be so it allows you to continue in the process u in in the presence of errors but it's you can still bail out if you reach something that you cannot handle now the penultimate small section we are going a little bit down down the hill the cortin stuff is usually a little bit more let's say annoying uh so we are going back to the simpler simpler topics if you didn't see regularly visited talk by Victor Victor uh you should again when it becomes available he explains in let's say mathem medical level of details what values are regular is ETC and it's well worth watching U as far as I'm concerned I'm not going to use any mathematical definitions of values just use let's say your better judgment until you watch Victor talk so the the only thing that I would like to differentiate is between values and variables we usually say value type we usually say value semantics that's not the type of a value is a thing the value typism reference and value semantics are not an entity of values or references it's about assignment so a value is something that the variable refers to a value is number 42 a value is a name Martha Jones value is not something that you can change to 43 you can change the variable to be 43 and it will point to a different value okay so when people say values when when I at least try to say values I'm usually referring to some const object that is somewhere in the memory if you're allowed to change that object it's no longer the same value okay so if I asked you we have a unique pointer of con something is that a value let's say so whatever that pointer contains currently will point to something that is const so whenever you use it you're just going to see the same value if you have a shared pointer of con something again the same story goes it's a single value nobody in their same mind would probably say that unique pointer is a value type right it's a type that references something but this is a really important distinction one of the notes that I'm usually annoyed with when people talk about multi-threading is that we have that notion that as soon as sharing something then we need a mutex and a good comment from this talk by Shivam was that if something is constant even if strictly speaking it will end up with false sharing blah blah blah blah we don't have the problems of that false sharing because no synchronization will ever happen because no data can be changed if you have immutable data then even if it's shared you don't need any mutex so if we have a values and we share values between multi thre multiple threads it's perfectly safe if we have variables that we are sharing across multiple threads variables that can change the value inside that's a problem but we are so accustomed to change all the objects that we have that it's a common thing to say as soon as you have shared resources you need mutexes you need synchronization so just remember if you have mutable Shar resources that's the only situation where you need synchronization that was a little bit of a diversion so for values let's say we should have these operations obviously not we don't need copying always we don't need moving always but if we wanted to be uh let's say good people we should allow several different variables to hold the value of 42 okay so copies should be let's say most mostly provided and obviously it always should be a valid value if something is 42 it's a valid value you cannot have an integer that is not an integer if you want something that can be an integer but can be empty then obviously it's not an integer it's optional of in and then in that situation empty optional is a valid value okay so let's a little bit move on we don't consider really a unique pointer to something to be a value and I said that anytime that we want to be good people and create value types whatever those are we should create only member variables which are value types and in most of our minds this is not going to fit the bill so instead what's the what are the issues with the with having let's say a pimple that's a unique pointer the pimple uh how many people know about the pimple idium cool so implementing something like this allows you to have first invalid States the pimple pointer can be a n pointer which is not a valid State for the pimpl adum you have shallow con so you get again you annoy Nikos after that you don't have copying because you have a unique pointer inside and another thing you're allowed to change what the pointer points to which again is not the pimple idum pimple should just be something that is on the Heap which is always tied to my current object and then you end up with adding a few things so on the construction you're going to create an instance for this pointer to pointer which means that you need to patch all the constructors in your class to to initialize the MP pool the second thing how can be solved so the the con propagation instead of allowing your let's say people who implement the rest of the class instead of allowing them to access assess the pimple directly you provide member functions that depending on whether they are con qualified or not they return a const reference to the pimple or they return a mutable reference to the pimple and now you have created something that is kind of like the experimental propagate const so you kind of disallowed the default Behavior C++ that const is shallow you have implemented the proper thing if I'm con then everything that I depend on is Con for the copy construction obviously again make unique you are calling the copy Constructor of the page private T which should always for pin plus be a final class so no inheritance no slicing is going to happen here and obviously the assignment operator you're going to implement with the copy and swap operator now again a small D digression I love those um if you have a shed pointer to con private T and we want to create a copy and change the value we have something that is called copy and right how many people are experienced with copy on right not in file systems okay so copy and right is an excellent idea it works awesomely well in file systems and it works abysmally bad in C++ and most languages and usually they're not really needed for us for example in cute Library all the classes are let's say collection classes are copy and right and then you have some strange rules saying well if you try to use this with a range based for loop it's going to be slow because it copies the call whole collection but I'm just reading the collection yeah but I don't know that you're creating an iterator to something and you will be able to change it the fact that you are not going to change it nah it's it's not important I'm going to copy the whole collection but that's really not needed in C++ we have a common thing in C++ if somebody pass us a constra to something and we need a copy to change it just copy it you don't need some smart class implementation to think about when you want to this to be copied or not just explicitly say Okay I want a copy I don't want the original so in the situation where we have the the shed pointer to a const object that's a perfectly fine perfectly safe thing to have in your program multi-threaded no locking because it's a shared const resource if you want to create create something new out of it you don't want to create a smart API that works like copy on right you just need a a single function that will take that const object transform it into something that you need and then return it a shared pointer to the const new object so in a page so again a web page which is internally just a const thing you can just create transform member function like s the optional has like s expected has internally it's a const then you transform that internal value to create a new version of a page and again multi-thread safe completely safe because we don't have any mutations that are shared across the threads now to get back on the pimple thing we have created a few different things just to fix the issue of the unique pointer with pimples now those issues don't exist only with pimples anytime that you need a pointer inside of your as a member variable and we said we want values unique pointer is going to be bad for you so instead instead of every time implementing all the patches that we've had for for The Unique pointer just create a new class template that can be called Heap value or value pointer or whatever you want and when you want to create a new instance of this object it will behave as an object on the stack but it will be allocated on the hip model some uh smaller let's say syntax changes and this should be fairly trival to implement so a Constructor that just calls make unique the only note that uh I want to make here is that the Clause needs to disable if you have just one argument and it's the same type as Heap value then you should disable this Constructor so not to infringe on the copy operations accessors the same as before so const in the if they're con qualified and non- con if they're not and obviously you need to implement swap copy and move operations and the only thing that this requires is the that you don't have inheritance so you should probably insert static assert is final inside of the implementation of Heap value if you do want to have inheritance and stru hierarchies Etc then you should again go back in time and watch Claus's talk on type Erasure again really really detailed explanation of type Erasure which made me delete let's say 10 10 slides from my presentation because when I saw that he covered everything in much more detail I said like okay kill kill kill kill kill until um until I ended up with essentially zero type erasion so that's the reason why for example the shed pointer to con felt a little bit out of place because it was a little bit later in the slides and if you don't want to watch any of the talks you just want already pre-made Solutions Lon has a really cool Library called Dino uh it has a little bit awkward syntax but it's quite quite useful and it allows you to have typ erased objects that have full value semantics like Claus talked about any questions for the sections so far again online yes I think we have a question on expected again um so expected has and then or else and transform and transform error and montic operations aren't those better than using Co routines okay good question I do like those member functions and I would say they are better than coroutines with uglier syntax because you need to pass lambdas and lambdas in C++ are really really verose so if you chain and then transform or else Etc you will get with a huge chunk of random characters angly brackets and all of those brackets uh with cortines you get a syntax that looks more like normal C++ code just with additional keyword inside but again I would refer most of the questions for S expected to the previous years's talk by somebody here uh so if there are no more questions actually I would there's a cute question I have which is related to copy and right mhm um I've been reading line wise into an SD string which is utf8 and then I have to convert that to you to to cute string from utf8 and I figured out that like cute does not set up to reuse a buffer in a q string so calling from utf8 always um allocates and gets a new string object um will it be possible like to reuse an allocation inside a copy WR object when you only have like one reference in it I would say so yeah usually if you have ref count and the reference count is one and somebody let's say you move to somebody else it's like a unique pointer nobody will access it anymore you can do whatever you want inside okay okay and the last one the most important topic in in the C++ today is the safety and obviously we are not going to solve the safety issues of C++ today but at least I'm I'll try to do some things that might improve the safety of U let's say future programs in the world now most of this talk was about idioms so whe whether those idioms are from functional programming or not functional programming so the progue C++ theom is important for for a few reasons and the first thing is that when you see code like this you know kind of what it does you know what a four person persons is and if you use the person inside of the loop that's the idiomatic way of using the range based for Loop if you use persons directly inside of the for Loop that goes through through all the persons then you're most likely doing something strange if it's a con access then and let's say we just going to close our eyes and ignore it but if you're changing the person's while traversing over the collection that's a huge no no and obviously not idiomatic code the same thing goes for non range based for a loop so index one again if we just have index something and until it size we increment the index and the TIC way to use to use it inside is of index perfectly fine same if you access the index in a const way it is also idiomatic otherwise if you didn't need the value of the index you would use the range based for Loop so this is also idiomatic again if you try to use persons outside of persons of index it's not the TIC way to use the range Bas uh this index based for Loop the same thing goes for the STD transform we have result resize because we want to convert all the strings inside of the words collection into integers so we first resize the current Vector to be able to fit everything inside all the results and just call transform from one collection to the other collection and use the parse integer function for it and all of these are ID idiomatic pieces of code that are not really inside of some higher order function some algorithm Etc we have the algorithm to transform here but the resize part is not a part of the transform what are the idioms for the first thing is that when somebody when you are trying to solve something and you have a lot of idioms in your head most of the time it will make you make it easier for you to solve the problem it's kind of like the the pattern oriented software architectures or whatever if you know a lot of patterns and you have a problem you can often fit the problem you have inside of a pattern the same goes with idioms if you know a lot of idioms you will be uh you will more easily solve something that you want to implement the second thing if you wrote your code in idiomatic C++ or whatever language you're using whoever reads your code will immediately because it's an idiom and they know all the idioms that you do they will see that idiom and they will know what that idiom does they will not be confused by the resize here but the one thing that is usually an afterthought in all of this is safety now as far as the safety is concerned I'm not going to go into defining safety if you want uh different definitions of safety just check uh JFS as Safety and Security the future of C++ from CP nowor he spends a lot of time and it's a it's a really a brilliant presentation because he recognizes that safety is not only memory safety but it's a more advanced concept the reason why I don't want to Define safety is that we are all going to differ in uh thinking what safety is so for example in some languages that I'm not going to mention bounce checking is what provides safety for me Bond checking that throws exceptions is not safety there was a research uh for not from C++ because we never catch exceptions but in Java where you are forced to C catch exception so you need if you call a function that is declared I'm throwing this exception you need to catch it somewhere the research was they investigated a lot of a lot of open source code for the libraries they discovered that 40% of all catches are either empty or just logging for normal applications it went up to 90% so throwing exceptions and then ignoring them it's not safety obviously the language is safe it's not your undefined Behavior Etc your code is in undefined Behavior you ignored an error so this dot at on a vector or whatever rust calls it or some other let's say emerging languages for to replace C++ they're not solutions for for the issues they're hiding one issue with just providing okay the user is to blame it's no longer the fault of the language now the user is at fault which is cool OB obviously it's better that the users are to blame than than the language developers but it doesn't really change any effect it doesn't make the code any safer now in the idiom that we've had before bound checking in this idum is not needed the unsafe operation here is index based access of a vector this is mathematically provable that this index is never out of bounds why do I need if I iterate through this a million times do I really need it to go if if this is greater than zero if this is less than size no it's provable that this index is a valid inbounds index for this array now obviously you can get into issues you can get a segmentation fault in this place but not because of this code something might access persons and change the persons and then you're out of bounds but it's not the uh the fault of this code it's the fault of you first for sharing uh persons between two threads without any mutexes without any locking and it's essentially the fault of that other code which is changing the persons the same thing goes here usually when we have a destination iterator we are never allowed to say again we need back inserter because it needs to be sure that we that it adds item by item and if you just say dot begin it means okay I'm sure that I have enough space I have enough elements inside of this collection to store all the results so again this is an unsafe operation in this Cod snpp it in this cium it's perfectly mathematically provable that it cannot go bad if you use transform it means that the resulting collection have will have the same amount of elements as the source one and we have resized the resulting collection to the same size as the source one in the line above again mathematically provable Edom that this is perfectly safe code just like this one without any performance penalties that that we use this not even that we don't have any performance penalties but this will be much faster than if you used back inserter at least for Vector of fints or other simple types in the implementation of the lazy type that we've had the only unsafe operation that we could have is the D reference of the optional if the optional is empty this would be undefined behavior Can the optional be empty at this stage again no the call one call1 guarantees us that M data will be assigned the result of STD invoke so again provable that this is completely safe code without any runtime checks the same goes with with the Heap value we are dealing with pointers with Dynamic allocation Etc but we have provided an API that is completely value based it's just that the value is stored somewhere else obviously it would be a little bit more difficult to to prove all of the attributes for this one than for the previous Solutions but again this is easily provable that this will behave as any other value inside of your code now let's see one uh one more Edom that will emerge who has any issues with this code okay so we all know that obviously we should not have loock and do unlock we should replace it with something like lock guard of or unique lock fair enough who thinks that discode is not safe why so new are really fundamentally really hard to get it right okay okay the second answer I liked better so the first one uh is let's say more philosophical one mutes are really hard to get right and that that one is true as well so if we use this mutex here and forget to to use it in another place then the fact that we have a log guard here doesn't really fix anything but again it's it wouldn't be a problem of this function but it would be a problem of a function that accesses the same locked data from uh without before locking but the second one uh Deadlocks do you do you see a deadlock that can just occur because of this code obviously with three dots being anything in the world recursion there was recently an article that or maybe a paper for the standard I don't really remember that we shouldn't have standardized mutex we should always use recursive mutexes and that would be a completely fine fix for this deadlock but again recursive mutexes might not be as fast May blah blah blah can we find a better solution so we can use a recursive mutex At All by default or the second option the Zen one uh the action through inaction uh don't do any locking at all does a function need to lock something because it wants to change it if for example if I work alone in in a room do I need to announce that I'm going I'm I no to the kitchen I wanted to say something else but I remember that I'm recorded uh we have a small kitchen and I want to go into the kitchen I say okay I'm going into the kitchen and then nobody goes into no if I'm alone at home obviously I don't need to to lock the kitchen right so the function that inherently locks is a function that you expect okay this will be used only in multi-threaded environment for a non- multi-threaded environment it will just be let's say a a waste waste of CPU Cycles so a function that doesn't look at all but somebody from the outside coordinates what should be locked or not would work in both situations so for example again if I'm alone in in an apartment and I'm going to the to the kitchen I just go to the kitchen otherwise if there are multiple people we just put somebody on the door saying okay somebody is already in you need a key in order to open the kitchen and until I get the key back from that person I cannot give it to you so what we can do is create let's say a private mutex and a private class that will be called a unique key or what whatever you want to call it then you have a member function called take key so the key cannot be forged by anybody else but this class because it's a private type so you cannot fake the key if you want to get the key if you want to call the function do something you need a key so if you want to enter the kitchen you need the key which means that you need to acquire that key from the refer beforehand and then once you have the key you can go through all the member functions that require that key do we have the recursion problem here none of these functions re do any locking the lock happens when you take the key then the function can recursively call itself call itself and just pass the unique key on to the recursive calls and when it exits you just return the key back now the cool thing about this is that unlike the previous cdms where we had like I I said mathematically provable in this situation this is compiler provable in order to call a function you have that key compiler will'll say just say you cannot this cannot be compiled otherwise so you have compiled time proving of a small let's say theorem which is kind of cool if you can make your let's say idioms to look like this obviously you should always just one uh last D digression to wake you all up I recently went to Japan and uh we went to a Buddhist temple in Tokyo uh near that fish market thingy and the main hall was closed because of some barrial ceremony or something like that and we went into the second or third Hall so the prayer room obviously I'm I'm not really a Buddhist so I was a little bit out of place there but it was really nice uh and while we were walking out uh my better half saw a pamphlet and obviously those pamphlets Were Meant For Tourists to take and take home right but she is a strickler for rules and we were also in Japan which is a country that loves rules so she took the pamphlet to a lady that work at a desk and signaled okay can I take this obviously the lady didn't speak any English and she was like smiling she was really really nice then she just jumped up we were a little bit surprised that at that point instead of just nodding somebody stands up and she started walking and we were like okay we just ask can we take this pamphlet home and she did like this and okay we need to follow her and the situation was like in the um the meaning of life the last scenes from Monty Pyon so that waiter takes you through all the England's countries Etc and she was going and going and we were following and we were following then she started moving the barriers do not cross opens the door we go through do not cross up and we go we have no idea what's going on and at some point obviously she's still smiling and we are smiling obviously although really confused and at some point she takes us to this small statue of a bll and we were like okay now what so okay it's a nice statue and at some point she pointed to the pamphlet The pamphlet had a picture of the bull on and obviously she understood us that we want to see the bull and she was so so so kind in flipflops and everything else to take us through the whole closed building because of the burial or whatever to see the bull and we were so confused that we didn't even take a picture of the bull this is from Tokyo views the only thing that that my better half managed to do is to pet the ball and that was it so really really really strange story but it it was amazing and the bull is is really nice now that they see it on the picture now the reason why I mentioning this is that obviously we were talking about idioms and stuff if you're developing your own idioms please make them correct if you see something because somebody in your team didn't understand the language so they had a language barrier with C++ and think that this is meant to be Atomic H because it works and they make it an idiom and then it goes around the world as an idiom no all the idioms that you create should be either backed by standards standard or the mathematics or something else you need to prove all of your idioms in order to use them safely and properly so the benefits of developing everything VI idioms obviously safety what Terror safety means to you for each of the idms you would prove the type of safety that you want if you find a bug and you see this is an undefined Behavior somewhere you know it's not in the idiomatic code so you're just going to remove all of those things and triage the bugs to to find a place where you didn't use the diomatic code and obviously easier to prove correctness because if we had a doz idioms uh for C++ or hundreds and hundreds you would already have some mathematical proofs for each of them and then proving the correctness of the code would be easier obviously not easy mathematics is never easy but easier to some extent the downsides obviously if you're allowed just to write idiomatic code it's kind of like development under trying to to carry the the Pyramids of Giza on on your back a lot more bureaucracy if you want to do something custom you would need to first invent an idiom that covers that prove that Etc and the last but not the least if you have a huge code base which is obviously not going to be 100% idiomatic you would need to rewrite most of it in order to just use the idioms now the good thing is that you would be able to rewrite Parts by parts and not like porting to a different language um where you would need to rewrite the whole project or create ffi Etc so it's not that big of a downside compared to some of the Alternatives so for the guidelines because every talk should have some kind of guidelines or a summary um if you follow the tdd uh as again uh talked about by Phil you you should also add ID which is idiom driven development if you find a bug in your code don't just fix the bug think of an EDM which will for which will stop you from making the same bug ever again again not an easy task uh if you can create a generic function or generic class out of an idium please do so if you can create an idium innovation that it's provable by the compiler like the Locking thing is obviously do so for other IDs like for example resize plus transform write static analysis tools that will check whether the code is covered by an EDM or not okay and that's it for me [Applause] thank you any questions the online World asks in the unique key example shouldn't take key return a reference rather than a copy or is it just a case of slideware where basically your code is just you know not production R yeah probably although it can be it's not that important so it in this case it should be a value because inside of that is the proper lock guard it depends on how you implement the same thing but in this case I would say this is not slight where this was actually correct okay so you're you're returning a copy on purpose so it's not a copy it's essentially we don't have uh an instance of this thing anywhere inside of the class this will create the lock guard on top of the mutex like we normally do and it will just wrap it inside of a secret type which will be inside of the key so it will be a move or let's say return value optimized uh result and not a copy okay yeah thank you for talk um you're on the right slide are you aware of the copper spice lip guarded Library have you played with it uh I've heard about it there actually when I remember it correctly implementing different version of that for different use cases so but H the same I really haven't checked the library I know that they're doing some let's say interesting things uh with regards to proper C+ plus but I've never had an opportunity to work with the library and I wasn't curious enough to invest my personal time into it lip guarded is basically a separate library and that only concerns about this so it's only implementing the guard part um send me email with please hi uh thanks a lot for the talk my question is about the copy and swap EDM uh is the recommendation to always do assignments through the EDM or uh what's that the recommendation basically and if yes uh what about the performance penalties you might uh incur in some some cases okay so uh I like the question it's not a clear answer if if you prefer safety to Performance I would say always if you have situations where you want to allow yourself to have invalid States it's fine but then make guards that those invalid states don't somehow trickle down and destroy your program so I would say by default I would use copy and swap if I detect some performance penalties in the care in the places where I care about then I would maybe think about how to optimize stuff and not go the other way around okay uh wouldn't you argue that if you have to write a uh custom uh assignment operator in the first place uh it let's say requires its own uh well consider ation and uh see how it should we Implement rather than uh going for a generic way uh I I wouldn't say so in essence all the customization should go inside of the copy Constructor and move Constructor and the swap is then again generic okay thank you in essence from uh from his personal history every time that I've seen somebody Implement a custom assignment operator it led to bugs so again maybe it's the get of my laan thing but I would rather have the code that I don't spend hours debugging because I'm expecting something correct in the most trivial function in a class okay thank you uh hi thanks for the talk very nice just wanted to have a comment on this slide actually about the takey approach like I personally don't like it at all so I wanted to ask what was the Reon for proposing something like this rather than just some refactoring and following simple guidelines like public function should then call other public functions so if you have the recursive case just put it in a private function you take the look on the public one and you're good to go right so I just wanted to get a bit the motivation behind this uh short answer this is compiler checked and whether something ends up being recursive or not after years of development is a huge investment to analyze all the cold pass in in the code so that you can do that let's say topological sort mm so I would say again for me compile time something is always better than something else okay okay fair hey cool talk uh a bunch of those uh EMS do require like whoever is using them to write a bunch of code that is not provided by the standard library right so so I mean this example is one of them uh you had the uh e uh value and then there was something about like polymorphic uh Dynamic uh typing and things like that do you feel like this is the kind of thing that we should add to the standard or maybe more like there should be a support Library so every code base doesn't have to rewrite it or make its own copy it's not a lot of code but it's still a thing you can get wrong I agree uh I would say just like the overloaded lambdas I would love to see something like that in the standard uh I would say on the other hand a lot of people don't really have the time patience and anything similar to that to invest into pushing something into the standard so I would probably like the middle approach a common library that everybody likes and uses to be the solution unfortunately you get that into the xkc the situation of everybody creating their own Library which will be the one so so whatever happens I'm completely fine as you said this is quite short Cod set of code Snippets just like overload it is so it's not that difficult for everybody just to copy paste into util do HPP or stuff. HPP in there yeah of course well first and foremost I want to say thank you for the really great keynote um that was very nice um I I I do Wonder like you know if you like to see yourself or other people popularize the term Progressive C++ I don't know um in Ence the reason for the term so I was always jealous uh for Jonathan BK's fluent C++ and some of the people had really nice names for let's say their websites and I spent years developing and market research and everything else uh for what should I call my website and at some point I call it called it high C++ or something like that so kind of close to let's say hippie movement rather than progressive rock movement so this occurred to me let's say a few months ago and I said okay I'm going to use this so as far as the term is concerned I didn't take a trademark if somebody wants to use it feel free so to do so but I wouldn't say please go go around and popularize okay um the next question I would like to have is like where do you see or like is it like idiomatic to contemporary C++ keynote we had last year okay contemporary C++ I like for a general uh C++ thing uh the idea specifically for Progressive was that again I'm usually connected and people think of me as the functional programming guy but you want to break that M kind of I did I don't want to I never wanted to take the function programming and push every single thing inside of C++ it was more or I'm working on something and I see something that I could improve and it happened that some of the edms were from FP and then people started commenting on yeah but don't do you hate object Orient no why why should I if I'm I don't know functional programming aici why should I hate anything else I think that all of those paradigms have something to offer even combined and that's the reason why I ended up with Pro Progressive C++ okay um let me see if there's any more questions uh you're on the right slide um thanks for the great keynote so um funny how only this T slide gets talked about uh anyway um you said this code can't be misused if I stood you correctly and I took that took that as a challeng challenge um so no the the thing is um I've used uh a very similar approach uh in our software and it turns out I didn't think correctly or I wasn't aware of this uh issue so it turned out to have a bug the real issue why this got reexamined was that there was a compiler error with C++ 20 or something um anyway the unique key uh being private doesn't mean you can't instantiate it if you're outside it just means you can't refer to it by name and so with de type you can get the type and then inen but anyway you can you can argue that this is like defined private public so intentional abuse um but there's another thing I think that could could happen by accident and I think this is if you have two objects of this class and you take the key from one and then invoke a method on the other um and the solution I took um was to use a unique lock even though I don't need uh some of the features uh because it allows you to get the mutex pointer and then write an assertion that you actually that the lock is actually for the right mutex sure that's a great point so uh for the first uh for for the first one obviously yeah in C++ there just in like any law there are holds that we can go through to do things that were weren't meant to so yeah deal type of result of to take key and construct that um for the second one obviously uh true uh if you want to have multiple instances of this object then you would need to have some kind of an idea as well whether it's a pointer to the mutex or something else I agree thanks I think that brings us to the last question um so you're not on the right slide but you don't need to switch um do you recommend using copy and swap instead of the compiler generated assignment it's kind of connected to one of the previous ones if you if you primarily care about safety I would say yes if you don't care about exceptions then no okay thanks then to add to that if you prefer even more safety always L value qualify your assignment operators so you cannot assign to a temporary sure well and with that I yeah well final words are yours thank you for the keynote thank you for inviting [Applause] me