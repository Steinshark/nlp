let's look at a review of the zig programming language using Advent of code 2021 I think Advent of code is a great way to get your initial bearings on a language I think it's actually one of the best ways because it's really going to drive home some basic like file operations on top of that you're going to get a bunch of string manipulations and you kind of have to interact with the basic standard of the language like where's the hash map what's the arraylist about uh maybe some more exotic ones as you get going some bit shifting all that you really kind of get like the basics of a language underneath your belt without having to go into the more larger topics of like maintaining a project all that files modules so it's actually pretty good um I really really appreciate Advent of code as like a good starting place all right I have long thought that Zig was an interesting programming language uh potentially more interesting than rust in many aspects given that ziggs ziggs seems to be targeting more modern C like language Replacements whereas rust firmly looks like it's trying to take C plus plus out back like Old Yeller rust is powerful but the language is complicated and I'm let's say and no I'm not talking about the borrow Checker a completely genuine idea or a completely genius idea I bet you Tom how much do you want to bet Tom invented the borrow Checker uh but the language itself is vast and complex try and read the moderately complex rust grade and it can be a mind-boggling to work yeah so this is actually a really good critique of rust I do think that there's like this whole thing about rust that if you're not just always rusting it's hard to like really remain fresh in the rust world you know what I mean it is hard it is very very hard on the other hand Zig with the strong ethos Guided by Andrew Kelly has The Guiding Light that there should be one way to do something in a language and that is something that I really appreciate about the language design yeah I can get behind this is actually kind of a this is a very java-esque Mission goal to begin with like one of Java's goals if I'm not mistaken was to be an ll1 parse language and it was supposed to be a really simple to parse really simple to understand language and they goofed it all up in the very beginning by not allowing squirrely braces or you don't need squirrely braces and that's all they had to do I don't know why I don't know what this obsession is with not allowing like no squirrely braces is okay just stop stop just in four squirrely braces I just don't get that I just don't get it I don't get it at all I don't get that at all last year I attempted to do Advent of codes 2020 and Zig but the language was just a little too fresh for me to get into the documentation was basically non-existent okay I I I'd say that the language has gotten a lot better at this point so we're kind of looking at this two years into the future uh I'm starting my Zig Journey so this is actually gonna be really helpful for me just in general I'm actually pretty excited about this and getting the the tools all working and how to use them was confusing for me one day I gave up and switched to rust and said this year I uh though I was determined to try the whole challenge in Zig and what a difference a year has made to the language the community is now massive there are GitHub templates for Advent of code just to get you coding and the zig documentation is so rich and detailed I could pick up the basic uh code Concepts quite quickly so one thing I do want to call out here is that the rust specific documentation a lot of times with crates is it feels very hard to navigate it's one thing I still don't quite know how to do well is that I'll get there and I'll be navigating and you'll just see like signatures it won't give me any anything more than I get from say my LSP and I feel very frustrated by that but rust also has a much larger ecosystem at this current point but still it feels very hard and Zig is so simple I don't really need much help on signatures right signatures are not confounding in the same sense that they are as in Rust uh let's see so now that I have completed Advent of code in 2021 I thought I'd share The Good the Bad and the Ugly and some summery thoughts on the language all right uh note assuming a base level of understanding okay good we have a base level of understanding the good all right let's see let's see what they've improved because I'm actually curious how fast the zig language is moving because it's 2023 Midway through 2023 how fast are they moving right the best thing about Zig uh is that the language is small there isn't even a four each yeah or a four like structure and Andrea stated while loops work why add another way that's funny because by this point there are four Loops right I'm sure oh look I'm using a while loop right now I actually really would love to see them do this better so here here's what he's saying is that normally this right here is uh it's not the way I want it to go right and so I would love to see this just look a little better so if you have an iterator right an iterator just simply has a next on it I'm trying to think of something that could have an iterator like say an arraylist or something like that typically you can go like this for something capsule group uh item right and then you can do something in here you can also do something like zero and just say hey I want an index as well right there's like all these kind of things you can do that make it pretty convenient I like that a lot uh but if you have an iterator it doesn't just like work in a for loop I really would love to see that and so while Loops I think while Loops are great do while Loops are the Lord's Loop and for Loops are just fine I don't really care if I say the word while or four it doesn't really bother me right like this I I don't really see this as any different this is all the same [ __ ] to me so I don't care if I have to say four try in this here's the line or while do this like right it's all the same it's just getting used to a language especially when learning a language for myself and for anyone else uh who would want to pick it up brevity is key I think Russ got lost in trying to nicely provide so much of what C plus plus badly provides that random users of the language looking at any arbitrary code written in Rust suffer for the sheer breath of the language I wouldn't say that I'd say that rust has a significantly more complicated type system then uh Zig does and it also is really really good uh something that I will never like something that honestly makes me yearn for in every single programming language I have that I have to use to this day is rust trade system the ability to not Define at definition time how a class can behave like using these behaviors is just so freaking awesome like I Love It Go kinda has this already built in in some sense which is really nice so I like that about go uh but you definitely it's just it's a very interesting it's very interesting and I love the trade system so I wish Zig had that too but it also makes Zig really simple you have a struct you can put some methods on it that's that right there's not a lot of there's not like a whole bunch to it uh zig's approach here uh meant I could read the standard Library code and understand what uh it was doing even with all the comp time fun you actually I can kind of understand the standard too null ability is fun and Zig and the fact that optional is built into the language with the yes I love this I love this I love this so much that they have combined this with pointers that you can do uh you can assume a pointer for instance isn't null this is a grade for compiler great for the optimizer and I think it's great for the user I love this part so for if for if you don't understand what's Happening Here effectively the question Marcus says hey this thing is an option it might be something it might be nothing which means you can have a pointer to an item but it's not nullable which means that the pointer always exists you can confidently use it without ever thinking about it or you have this and then it has syntax level features for you to unwrap it it effectively is the option type in Rust but built just a little bit you know what I mean just a little bit I'd say built a little bit nicer how things are brought in from the standard library or general uh foreign code is interesting yeah like this is kind of what you'd expect there's a built-in macro uh that does the heavy lifting for pulling the code and then you assign yeah some variable this is really neat because you could call it whatever you wanted to avoid naming conflicts also like that a lot also because you know how many times have you done this thing how many times have you done that thing with rust where you import something as another name or you do it in typescript because you know everyone uses default exports you're like or they don't use default exports so you're like okay you know video as video from this module right like because you're trying to like rename the thing and it just sucks I hate that whereas this kind of just gives you the power off the ramp I like that too uh this is really neat because you can call whatever you want also when you put let's see and you want to pull definitions within an imported package you use the same mechanism of assigning the package with a thing in it into a constant variable most other languages uh have a using fubarbass oh this is like a direct attack against rust right there geez type mechanism for this but having it use the same mechanism for a bunch of different things means that you don't have to switch in your head to another tool I don't really quite know what they're trying to say here maybe I'm too stupid I haven't considered this language concept before using Zig so I'm too stupid to understand this yet uh the fact all containers take an allocator on initialization and you can only get a heap pointer via an allocator is genius in Zig I do like this I do very much so like this it's I love the fact that you do manage your own memory but the general purpose allocator will tell you when you forgot to clean things up right that means you get to manage memory but you get like friendly reminders to clean things up which means you got like 80 percent of the borrow Checkers power with like zero of the downsides and so there's there's something about that that I think is really really nice um because I can move already I can find myself I think that once I understand Zig a bit more I will be able to move very fast in this language very very fast leaking memory is safe well you leak memory and rust I'd never said anything about leaking memory uh leaking memory is just a thing uh you can leak in any language it's very very simple uh memory isn't free in fact even one of the best rust stations I know was writing about how hard it has been having long-lived servers in Rust because it's uh it's very easy to leak memory uh memory isn't free and allocations are not cheap and so so making getting at a heap allocations Harder by explicitly getting them through and allocator is a great thing I do like this because everywhere you do an allocation you know in your head you need to do a deallocation it makes it very clear and very nice there's no you know initialization is acquisition or whatever it is I forget the the thing uh also error mechanism and Zig is wonderful Zig has a special uh prefix for the type yeah I do like this so effectively all it is all this is is just like this all this is is effectively a union you just have like Super C or super simple C unions and they're just there right that's all it is and so it's super duper simple so you can just be like error or this value and it just like works and I love that I love like super so this is effectively like lightweight enums in rust because the problem is is that I know enums are phenomenal in Rust but there's also a lot of like boilerplate syntax you have to deal with when using enums and so they're both good and they're both bad whereas I feel like this just makes it a little bit easier in general uh so you know again it's a lighter simpler language where it's not as safe but it's really easy to get things done so it's it's pretty neat and you can Cascade errors from deep in Zig code with the try statement so try food this is no different than question mark operator so try Foo is the equivalent of the question mark operator but I will say it is a bit strange that that they went with this method and what I mean by that is that there is a DOT question mark operator but that's like an unwrap there's no post fix I don't know what the proper language term is a post-fix unwrapping and bear because if you want to do like a function call get the air off dot property you can't do it nearly as well as you can do in Rust so that is one thing that rust is amazing is amazing about uh whereas Zig I don't I I don't quite get that oh by the way we just got actually rated by Kristoff right here hey thank you Kristoff Mr Zig himself right uh thank you very much for that post fix is a a weight as a chef's case exactly and so I found I found this one thing to be a little bit goofy so far about Zig which is why is there a DOT question mark that's more like a you know Panic unwrap and then a try it's just inconvenient because then I still find myself doing these parenthetical wrappings right that I don't like that but whatever uh this means x uh is equal to the result of Foo unless there was an error result if there was an error result we just returned the error from the function perfect this meant you don't have to have the messy littering of if conditions one thing he's not even saying right here is that there's a whole problem with rust and air handling that isn't really spoken about which is you pretty much use anyhow right like if you're just like a just like a you know just a simple rust farmer you know it's honest where you know you do what you can it's honest work but you know that's it you just use anyhow because errors are harder whereas Zig feel air feels pretty a little bit easier you know what I mean it just kind of feels easy you know like I don't have to think too hard about errors and rust all right or in uh Zig I kind of understand them they're easy to work with and that's just that anyhow uh it just presents uh every uh project uh let's see I have yeah anyhow is present in every project I have to sorry I couldn't read it because of the text it's it's literally that's I mean that's part of the problem right for me that's a sign of a problem not a sign of something that's good uh but nonetheless I love zagara handling I think it's very very good just don't make errors I'm trying okay I'm just really bad okay I love this Zig villain Arc yeah thank you you know you got to go through arcs you got to try different languages out you got to be see the one thing people don't realize is that I get into a language because I want to understand A New Perspective because every single day I have to go to work and program in typescript for most the day and I leave sag and so instead I like to go through and explore new and exciting and different ways to look at problems because typescript is Sag okay typescript is boring typescript is like eating lentils except for the lentils every like 16th lentil is just a solid steel BB in which when you bite down you break a tooth it's an awful awful language and anyone that just does it purely in love with typescript it blows my mind right like how could you have this many runtime errors and still just love a language I don't get it I personally don't understand it uh it's still easy to work with and it pays the bills so I'm not gonna be upset about it but it's just the way it is you know what I mean um and so when I look at these other languages there's things you love about it right so if you look at another language man is errors as values just like the best thing ever I think golang tried to do it right and they just did it to verbose I think zigged has done it much better Zig is probably the best error handling I've seen yet and I would have said rust was the best air handling if I did not try Isaac you know what I mean hey thank you thank you for the attitude approval I appreciate that uh some people like balls in their mouth not just lentils yeah and so typescripts could be a good choice for them because you don't even know what you're actually getting uh you know as any as my object that turns out those are balls uh let's see rust has a similar mechanism to this but they use a clunkier result uh while Zig effectively added another thing for uh for the front end to Handle by adding a bang a prefix types I I like to think of these yeah they're just like I think of them as like C unions it's just like a c Union coming back I'm not sure if that's how they're actually represented but in my head that's effectively what's happening there is a collection of things that in Zig that I didn't like okay this is exciting let's see what it is remember this is a couple years old so this may not be relevant anymore all languages have things that any random subset of users won't like yeah absolutely so I'm not saying Zig should change any of these or anything like that initializing arrays in Zig is weird let's say you have a zero initialized array and you declare it like this yeah which means I want an array of type u8 that is initialized to zero and is four elements long okay so I I don't think this is a problem anymore so how you would do that now is right here there you go I have an array that's 1024 bits you know or bytes long and I just set it to undefined and undefined just means the zero value it's it really I really wish they wouldn't have used the term undefined because undefined is such an overloaded emotional term for so many people that it really sucks you know what I mean it really sucks they chose this word I wish it would have been like honestly I really wish it would have been something like a zero value or something like that something that you know is like it makes more sense right uh it's not a zero about interesting so it is it's not undefined is more than just that so if I did this in debug mode I wouldn't get zero I'd actually get a different value interesting so it's apparently not zero it's more than just zero they're not that's not the same interesting so it's more than just zero well that somehow seems even worse undefined is don't touch the uh don't touch this memory isn't undefined no undefined isn't don't touch this memory undefined because I can touch that memory just fine what's what is undefined it's new PIN releases okay so what's the purpose of this see look at this I don't even understand what undefined is more than zero profound Zig makes you write undefined so you feel scared in terms of initialization yeah but but it still is initialized in the sense that the memory space is still valid it's just it's been touched in a way I guess I didn't understand oh this is very interesting okay let's see use undefined to leave variables uninitialized undefined can be coerced to any type but once that let's say once this happens there is no longer possible to detect uh that the value is undefined undefined means that the value could be anything even something that is nonsense according to the type okay okay so it's just it literally means a non-meanful value okay it's it's not initialized in release mode okay interesting okay so I actually had a completely wrong version in my head I always have figured that this just means that the space is there and it's effectively zeroed but this is good so really what it means is that the space is there but it's right so it's just something right so this would be an uh this would be equivalent uh this would effectively here can I say it this way this line right here would be equivalent in release mode to uh new buffer 10 let's see or not new buffer sorry no you can't use that buffer.alic uh unsafe 10 24. would that be effectively the same thing right it's it's just literally pointing capturing and saying this is now my memory this is my memory now right yeah it's equivalent to Malik you don't know what you're going to get you're going to get something and it could be anything kind of but not there well this one just happens to be zero why is it zero I don't know it's not always Zero alicon Safe has no guarantee right eloc unsafe just means it's pointing to memory whatever's there is there right okay isn't that just malach it's just Malik underneath the hood okay awesome I try to explain it in more than just terms of Malik because not everyone's going to understand the term Malik okay okay so that's what undefined is okay perfect that's good to know that's actually really good to know all right four Loops are a bit strange too you write four Loops items yep which means that okay so again this is where my gripe about iterators comes in which means you specify the container uh before the per element variable mentally I think four let's see of four uh four something in yeah I do like this I prefer this I most I most certainly prefer this over this I do think that this is just a simply better looking syntax I'm getting used to it right you get used to something you don't dislike it but I fully agree with this but this is I wouldn't even put this under the bad I'd put this under like nitpicking and I don't you know some people like their cucumbers pickled I'm more of a cucumber pickled person than I am a uh you know just a cucumber guy you know what I mean actually it's the other way around I prefer my cucumbers unpickled uh also in Zig I constantly have to write it wrong and then rewrite it also you use the uh pipe character in Zig quite a lot and while this uh may just be a problem with the Apple okay well that's get a better keyboard kid right uh get a better keyboard okay I don't know if you know this okay people I don't know if you know this but I I sit here and I work on an Advantage 360. okay a Kinesis Advantage 360. okay there's more keys than I actually even have letters some of them don't even do anything okay what the hell does this one do nobody even knows what this one does okay nobody knows I don't know do you know what it does let's find out right now it does nothing it literally does nothing it's it's doing nothing it's actually probably caps lock how much do you want to bet that that's caps lock no it's not even caps lock I don't even know what it is I honestly have no idea I honestly have no idea because I don't even know the idea okay oh where is it the bad there we go uh there you go let's say get get the hell out of here keyboard right any any good any good keyboard should have keys you don't even use okay it's an undefined I don't even know what's happening uh okay let's see I never noticed this before Jonathan Blow has gone on the record to say that with his language Jai uh he has spent a lot of time working on how easy it would be to type common things okay I like that I like that as a forethought such as the more common operation in the language the the easier it would be to type uh that seems to be a missing here okay again citing your stupid keyboard is definitely not like a good way to do it again for me this all comes down to what keyboard do you use right if you're just like on a Mac UK keyboard I'm sorry I understand you're a sex Haver okay I get it you're sex Haver okay I'm not a sex Haver all right I'm not just over here with Phil's Coffee drinking at Phil's right my latest startup with my MacBook Pro you know it's different here okay I have a thread Ripper okay I may not be necessarily having all the sex but you know what I do have I do not even have H top and this is my laptop which doesn't even have all the cores it should have okay anyways not let's see okay statements uh where you want to have multiple arguments resolve to the same code uh I wrote as a or b whereas uh Zig a comma B I can't say I quite understand this I don't really know switch statements I never used a switch statement uh nothing major with this but I constantly I tripped up on this I've never used that uh Zig was a zig test was a bit clunky I wonder if this has been better uh so test uh that you'd have to write this yeah yeah yeah I agree there should be a test all test all I bet you that's already probably there at this point right uh I don't know Christoph would know but again uh you know this is just like these are just quality of life improvements how do you let's see how and how you declare a function is a little strange uh like a function in a struct would be this I don't think that's strange that seems actually pretty normal to me right and you can have a zig Bill test okay yeah no test no test Discovery I assume there's a like to me this this isn't anything this is just yet another way to specify classes would you rather look at C plus plus or you have to do like class Foo public colon and then go down here and then be like my My Method okay now this is this is like the 90 times worse okay all right this to me this is just like that's just another way to do something right that's another way to do something everything in Zig is a const x blah so why are some functions uh uh so why are functions not const bar equals this that's actually a good critique I like that critique I could get this now I get what he's saying because look at right here when you create a struct you don't construct name you do const Foo equals struct no I I trust me I understand how that works Annie I'm just saying you know what's nicer is if you could do like this like right if this was C plus plus and I could just go like this private bar right or a public Foo okay something about the fact that public exists as like a top level item in which you go right here that's just super stupid in my personal opinion okay um the ugly okay here we go Zig uh is still a little raw in the few areas some compilers are less you've yeah Zig compilers are really hard to look at at first I'm starting to kind of catch them sometimes but often you know I just kind of like gut feel it I don't quite know them yet for instance if you forgot to put a bank t on the return type and you're using a try in the body of the function the compiler error is very confusing oh we're interesting let's see what it is let's let's see what happens here uh here we go I can just do contains contains right let's go like this try uh Zig build ah Zig uh Zig run Zig run yeah see this is that whole thing he's talking about let's see what let's see what this says uh expected air Union type found okay so I got this right away this makes perfect sense right this thing expected an air type instead of instead of found a boom so okay maybe they've improved the air errors have improved okay okay that was a very clear error like that was a very very clear you know what I found to be a harder error to understand I was doing this for a while right uh Ampersand and then let's just do another partial contains why not and going in here and trying to figure out what the hell does this mean ambiguous use of and and use and for a logical and I I didn't read the error at this point I must have used it somewhere else maybe I didn't figure this out okay nevermind I did find this fairly easy but the first time I ran into it I was just like what the hell's going on okay shut up I didn't read the air I just saw the air in my editor LSP and I was just like I must be calling something wrong and so I like changed things around then I put parentheses around it okay I should have just read the air you guys are all right I'm stupid shut up okay uh because of you because you quickly learned that when the compiler spits out something less than useful you start using try Okay uh so no longer there uh built-in compiler macros let's start with ads are a bit confusing okay reasonable some of them have leading uppercase with uh others with lower case and I didn't ever let's see I never did work out a pattern okay interesting very interesting as a type system in a zig is loose in some ways and ties in others if Zig can detect the type of the right hand side of the variable declaration you don't need an explicit type but if you do something like VAR equals zero yes this is a very interesting thing you can't I wish it could detect from usage I like that like that's one thing I really love about rust is that it can detect from usage maybe this is different in Zig and I guess I haven't tried this yet but let's just try it right here so if I said hey it returns to you size and I went like this uh a VAR sum equals zero sum plus equals one um return some there we go uh does this okay it works now nice okay so maybe not all that bad now maybe things have changed awesome okay good times but uh maybe that wasn't a problem but I know I had some problems earlier if I try to do a sum equals zero do something to it without defining a type where this comes from is right here is I did this right sum equals zero do this sum equals one print it out and because I haven't specified the type it's like yo I don't know what this type is you got to give me a type whereas rust will just be like yo that's just an i32. just deny 32. you get what you get I would have chosen a nice size personally you know what I mean that's what I would have chosen that's what I personally would have chosen you know what I mean anyways I did read the error message it's just an error message I don't like you know what I mean that's just an error message I don't like that time I read it I just didn't like that uh but the worst bit about Zig at present is the standard Library documentation is broken or non-existent it's a lot better now it's a lot lot better now so I don't think this is uh this is not a hurdle anymore uh this is probably one of the reasons I wouldn't recommend Zig more generally at the present okay hey uh Kristoff what is the uh Kristoff what is the what is like the canonical documentation link I had a hard time finding it on Google which I think well actually I use Brave so maybe it was just a break maybe it's skill issue but can you provide that canonical documentation link once more Kristoff make it happen at the top all right bam documentation language reference standard Library documentation so Auto hash map uh there we go you got some stuff here you got some types you got some Fields you got some function so how would I I assume I could probably what put fetch put uh get or put strange strange name in my my head there we go a put collabers any existing data to detect if it was put clobber's existing data see this okay so foreign as far as examples go you're right there's I don't think I don't see any examples always love examples there should always be examples in documentation I find examples more useful than almost anything else right anyways close enough though hold on I I sorry hey thanks for the subs I don't have alerts on yet hold on just hold on we're almost done with this thing okay we're almost done shoot where is it just hold on Joseph thank you very much just hold on all right uh so this is very good though very happy about this I think the documentation's got a lot better overall my gut feeling is that Zig is about uh is about ready for developing with uh with for people like myself coders that don't mind a bit of pain and a lot of benefit but it is not quite ready for more General usage okay uh fixing the standard Library documentation would be my biggest priority if I worked on Zig because I think that it is the only thing holding me back for General usage of the tool chain one nugget of knowledge I have worked out though Zig is not a replacement for C it is another replacement for C plus plus comp time which is amazingly powerful already has Echoes of the hard to reason about C plus plus template code or Rush generic mess and there are still quite a few bits of syntactic sugar hiding the real cost of certain operations like try error handling there's an implicit branches everywhere when you use that yeah that's fair that's fair you know they say no hidden control flow but try truly is a hidden control flow all right I I I I I get that I get that um this isn't to say Zig is any lesser by being much better C plus plus replacement than uh c replacement in my estimation estimation in fact I'd argue that as long as Zig doesn't fall into rust trap of constantly adding yet more ways to do the same damn thing and making the language that little bit harder for new people to onboard with than Zig once it hits a stable language around 1.0 will be my recommended tool for going forward this is a pretty glowing recommendation this is a pretty damn glowing recommendation uh what do you means by Rush generic mess is like there's like this whole you know like the whole trait part uh the impul inside trades all just a trait with a trait trying to return a trait is just just a nightmare right there's like various parts of rust that are just like unfun right and so that's one of the things they're trying to address now which is like uh impo everywhere right it's it's hard it's hard yeah dine keyword like those things are just hard there's just hard things about it right like I don't want to have to box I don't want I don't want to have to box my my imp my my traits dog but it's it's like hard not to uh in certain in certain cases I can't let's see yeah dying makes me hate my life yeah dying can make it like the impulse is really nice impul is really nice but it also can be kind of a pain I I enjoy the uh generic wear claws with the pluses I actually really like that uh the unsight yeah the size thing can be a little bit hard to kind of grock uh I know it's an unsized type but again you're okay stop stop being just a a lush Zealot okay you got to be able to just call it out for what it is it's not great it's not great okay I like that imple thing I hope imple makes it into trait returns because then it would be like significantly easier to use I really enjoy doing Advent of code and Zig and I think it'll be a uh let's see I'll be writing more software and Zig going forward I'd highly recommend you check out the language in the community around the language or a great group of people that have been super helpful with my dumb onboarding questions I do love this I'd say ziggs here's ziggs what I would consider zig's biggest uh hurdles right now is Google ability of questions is still somewhat low right since there's not just like a huge amount of questions and answers out there sometimes I find it a little bit difficult I believe Zig 11 comes with the package manager coming in I think that was a good move package managers very very good you should most certainly have a package manager um I don't know what the registry is going to look like I think they're going to just use um I think they're just going to use like GitHub or a git for package managing if I'm not mistaken I only looked at it for just a moment but I I really liked that I think package managers are a must-have if you don't have a package manager and you just expect people to download stuff you have just like honestly failed in modern languages and if I'm not mistaken uh Zig uh one one yeah yes correct no centralized package index perfect I'm just fine with no centralized package index uh I'm fine with that but uh package manager like I for me this was uh super super important is to have uh yeah they have package manager package manager incoming right yeah I just read this yesterday this is great I love this they also added some other cool things in 11 like uh they added if I'm not mistaken let's see uh zig version yeah yeah yeah yeah they also added standard uh mem window which is pretty neat you can do like windowing operations across u8s which is pretty fantastic I really like it this this co-pilot autocomplete is just nonsense garbage right it doesn't even mean it literally does it doesn't mean anything if I'm not mistaken this isn't even valid Zig this just is just straight garbage doodoo but anyways pretty cool uh thank you copilot for that this was actually a really good article this was a really good article and I think a lot of good points were made here which is just that there is some confusing things not everything about Zig is perfect I do think try is a fully uh hidden control flow thing that they didn't want to do but I also really wish try was postfix I really wish I could do like uh you know you know some uh some function uh dot try dot you know I wish there was like some dot try or whatever it would be right it rust it'd be something like this but uh that's not quite the right thing in Zig and so I wish that was was there and the second thing I think that I think the biggest failure right now that I'm having with Zig that I just hate it's not that I dislike I I hate which is the fact that you mix cases so I never know how to write it so I'm pretty much just purely gonna write it in some bastardization form of like snake case sometimes and then just other times I'm not snake casing it because my brain doesn't know how to handle this so I'm probably gonna just write it in camel case the entire time but the fact that there's a recommendation for snake case variables but camel case functions I feel is just like don't do that don't do that that's that's you don't want to do that that's like don't don't mix things it makes no sense it just makes no sense never mix things like that it just doesn't just don't do that that's like that's that's just it just makes it so hard and I have this like constant nagging feeling that I'm doing something wrong and I hate that right like that feels wrong it just genuinely feels wrong and so I'd like to say I would love to just see like not that there you go mixins are yummy Alex it's a great deal or not you know like all like most things uh mix and solve something and don't solve all things anyways uh make everything snankies I love snake case I can deal with camel case just make it one thing that's all I want one damn thing that's it uh this is a very common uh mix in C plus and PHP code bases I agree that it's confusing it is confusing and ugly because you never really know like I don't want to have to have like a battle in my head where I'm looking right here and realize I have misnamed my variable and then now I'm like oh I'm upset in my heart that I've done non-camel or non-snake case like I don't even have to think like that right I just want one thing I just want to I don't want camel toes okay I want camel case or snake case you know what I mean that's that anyways that's a very small thing what about Kebab case Kebab case obviously best case Okay screaming Kebab case might actually be the best case of all time screaming Kebab okay I also like to refer to it as the most beautiful woman eating a kebab Flight of the Conchords anybody anyways uh ligma case can't wait the name is the zig do you like that how I've just become a zig shield now do you like how I've just like fully gone through an entire face the uh uh let's see it Zig take takeaways do you like it just like just a complete Zig chill just all the way through now how did this happen how did this happen in my life the zig era Zig era I'm not fully zigged out though I'm not fully zigged I'm gonna go pee I'll be right back I'm not fully saved yet oh hold on I'll be right back well hello all right the name is the physogen