so you refer to people including yourself who gravitate toward a kind of computational thinking as geeks for at least I've heard you use that terminology it true that I think there's something that happened to me as I was growing up that made my brain structure in a certain way that that resonates with with computers so there's this space of people it's 2% of the population you empirically estimate that's a prick that's been proven a fairly constant over most of my career however it might be different now because kids have different experiences when they're young so obviously what does the world look like to a geek what is what is this aspect of thinking that is unique to their makes it yeah that makes a geek this is cuter the important question in in the 50s IBM noticed that that there were geeks or non geeks and so they tried to hire geeks and they put out ads with paper saying you know if you play chess come to Madison Avenue and for an interview or something like this you know they were they were trying for some things so what it what what is it that I find easy and other people tend to find harder and and I think there's two main things one is this with is ability to jump jump levels of abstraction so you see something in the larger and you see something in the small and and and you pass between those unconsciously so you know that in order to solve some big problem what you need to do is add one to a into a certain register or anything that gets it to another step and you can't and below the yeah I mean I don't go down to the electron level but I knew what those milliseconds were what the drum was like on the 650 I knew how I was gonna factor her number or or find a root of an equation or something be out of it because what was doing and and as I'm debugging I'm going through you know did I make a keep on chair did I did I write the wrong instruction do I have the wrong wrong thing in a register and each level like each level it is different and that this idea of being able to see something at all at lots of levels and fluently go between them it seems to me to be more pronounced much more pronounced in in the people that resonate with computers like my god so in my books I also don't stick just to the high level but but i but I mix low level stuff with high level and this means that some people think you know that Wow that I should write better books and it's probably true but but other people say well but that's if you think like like that then that's the way to train yourself to keep mixing the levels and and learn more and more how to jump between so that that's the one thing the other the other thing is that it's more of a talent it's to be able to deal with non-uniformity boy where there's case one case two case three instead of instead of having one or two rules that govern everything so if so it doesn't bother me if I need like an algorithm has ten steps to it you know each step is does something else that doesn't bother me but a lot of a lot of pure mathematics is based on one or two rules which which are universal and and and so this means that people like me sometimes work with systems that are more complicated than necessary because it doesn't bother us that we don't that we didn't figure out the simple rule and you mentioned that while Jacobi boule Abel and all the mathematicians in 19th century may have had symptoms of geek the first 100 percent legit geek was touring Alan Torrie I think he had a lot more of this quality than anybody did from reading the kind of stuff he did and so how does touring what influence has touring had on you well well your waiting so I didn't know that aspect of him until after I graduated some years I it has undergraduate we had a class that talked about computability theory and Turing machines and and that was all it sounded like a very specific kind of purely theoretical approach to stuff so when how old was I when I when I learned that he that he had you know God designed machine and that he wrote the know you wrote a wonderful manual for for Manchester machines and and he invented all subroutines and and and he was a real hacker that that he has hands dirty that I thought for many years that he had only done purely formal work as I started reading his own publications I could yeah you know I could feel this kinship and and because he had a lot of peculiarities thinking he wrote numbers backwards because I mean left to rights to the right to left because that's the that's it was easier for computers to process him that way what do you mean left to right he would write PI as you know nine five one four point three I mean okay right I get it for one point three on the blackboard I mean when he he we had drain himself to I to do that because the computers he was working with I worked that way inside trained himself to think like a computer well there you go that's not gig thinking yeah you