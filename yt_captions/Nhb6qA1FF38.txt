on developer voices this week we're back in the world of data and data streaming and specifically Kafka but this time we're going to look at it right from the very top of the stack because the thing about Kafka is it's kind of a groundup rethinking of the way you handle data at serious volume when you might have a billion messages an hour coming through across a cluster of machines right that needs some new thinking compared to what we had a decade ago and I think Kafka has been really successful because it solves that core scale problem with a very simple core idea the log file and it builds up quite nicely on that the challenge that Kafka has really faced is that when you rethink things from the ground up you can't just rebuild the foundations you have to build the whole tower all the way up to the top into user space you need to build infrastructure you need to build tooling and I think it's fair to say that in the 10 years that CF has been around it's done a lot of good things for data at scale but the user experience the developer experience still not a solved problem maybe it is maybe it is if you and everyone on your team speaks and loves Java but for everyone else most of the answers you get are some new dialect of sequel that's what's going to make this easy treat it like SQL good answer but there are other answers the design space is still being explored Bo and my guest today Luca Pete has been building a new data processing tool called typ stream which takes Unix as its inspiration instead of SQL CU When you think about it Unix has been building pipes of data since the 70s so why not mine it for some ideas so that's the topic for today's podcast an old design idea Unix transplanted into a new domain real-time data streaming let's see what we can learn I'm your host Chris Jenkins this is developer voices and today's voice is Luca [Music] Pete I'm joined today by Luca P how you doing Luca uh nice nice Goods goods and you yeah I'm good I'm glad to see you we uh We've yet to cross paths in the real world even though you know working similar circles in the data space right it's true I I think you know the main reason might be that I don't go to conferences especially in the US but in general I'm not really like a conference person so I guess that that may be the reason why we never met maybe next year if we both end up at Kafka Summit would be nice I think there's a good chance we'll overlap sooner or because you're only in Berlin so you're not far away from me right it shouldn't be yes it's true it shouldn't be but but even if you're not a conference person you're stuck now you've got to uh you got to give me a conference talk in conversational form for the next hour or so true um the reason I wanted to talk to you is you've been I'm gonna frame it like this so there's a lot of people working in the big scale data processing world trying to make this more usable right that's a big problem like there are people we had um Neil abusing on recently yeah saying how Kafka streams is his favorite library for data processing and it's a great library but you couldn't call it user friendly yeah I I I think it'd be kind of a stretch I do agree with him is the best at least also my favorite Java Library out there it's I think a pretty incredible piece of technology but yeah user friendly would be kind of a stretch just just for a starters you would have to be a Java developer that you know that's already that's already that's already a stretch to call it user friendly because you have to know a language and for example I am a good example of that I literally went back to the language just because of kfast stream right so I forced myself back into the space trying to learn the language I hadn't seen in 10 years uh so no no it's not and I and and I think it's uh I would say I would argue generally true of the data streaming tooling out there and there is not nothing wrong with it like I like you know I don't want I don't want that to come across as uh you know as a critique saying you know all the tools out there are not user friendly I think it's more like of a historic like if you look at it historically it's just like a you put it in the right perspect perspective and then it's actually just normal that the tooling is uh not user friendly yet because well it's kind of early days it doesn't feel like it's early days of thata streaming because I don't know how you first came across CF but uh my I think my in my case the first project must have been 0.8 0.9 so we're talking yeah yeah it's a very long time ago I think it was so early that that people in the team I was working with they were a little worried that you know Kafka wouldn't you know wouldn't be so stable that's how early days it was because no one would ever say that now and to be fair it was also it also made sense because kaf had just changed the protocol significantly and we've been talking to people saying oh they just changed all the protocol we're stuck on z. 7 so people will wored but it sounds like a million years ago but I think it's slightly more than 10 years ago so it's just a de good since we have seen you know uh streaming come to uh I would you call it mainstream it's also somewhat of a strange World play I I I think we're still I think we're on the cusp of being a mainstream idea but we're still not there yet and I think one of the things one of the things stopping us getting there I think in order to get any kind of traction in this we had to go right down to the nuts and bolts of how do we store data Y and we're climbing up that ladder from dis all the way up to user space yeah and that's why usability is almost the last piece before we can go mainstream yeah no I and and it's kind of exactly my point with saying I don't mean it as a critique when I say the tooling out there is not user friendly because so first of all it is kind of just a fact that it's not user friendly yet because I believe kfast stream might be the simplest Library like the simple to simplest tooling out there to do uh stream processing and it's definitely not a easy technology to to get started with because of the language uh because it doesn't click immed medely in people's head I wrote a very long article trying to explain uh how cfast stream Works to other people but it was also way for me to see like do I even get it myself because the you know the beauty of this technology is so profound that it doesn't doesn't click in your head that uh that fast and yes I agree with you that usability comes last and in a way if you think about it it's I think the conversation is somewhat starting now and I think most people are approaching it from a perspective that I I I think it's obvious if you know what I'm working on that I don't agree with that is you know we're trying to bend sigl to do things that sigl cannot really do uh and again one more time I don't I I'm not trying to be negative or trying to critique the solutions that are using sigell because I think they make sense I think it's obvious that you say okay how do we make uh stream processing more user friendly and then I don't know confluent comes up with casy Will ITB I think I I understand why they did it and if I was where they were when they start at KL DB I would probably suggest SEL myself I think it makes sense because it you know everyone knows SQL that's kind of the argument right everyone knows seel and that's um how you get people to do stream processing uh but then you hit limitations pretty soon actually and then you end up with the dialect of SEL that people don't know anything about like I I I've done SEL for basically all my career and then every time I have to do something with K DB I just have to learn the syntax from scratch again because because and and it's there is nothing wrong with it it's just that it it always makes me feel that you know the metaphor doesn't actually work because sigal has this declarative approach to asking question that is like you know this is what I want and you figure out how to give it to me and it there some sort of like maybe it's not even really there but I get this this you know there is this inner requirement that says like it's more of like a request response thing where you know I give you I give you some squel you giving me some data back which by definition doesn't actually work with streaming because streaming is unbounded data so that you know I give you something and you give me something back it like there is already something breaking down in this in this metaphor and yeah it's like I think I think the usability thing we are scrabbling around the design space looking for answers and and this is great this is an exciting time I like it when we're thinking about new ways to design software and yeah SQL is a very it's a natural fit for how can we get data and what people are used to and usability but that's a double-edged sword what people are used to can also be a limitation of if you've got a very different underlying model the abstraction can break down as you say yeah which is I think what we see even even though like people have gone really far right if you look at how powerful Flink is and uh like they have gone really far with it but I the problem is that you know it's kind of funny because while on one side it did make it more approachable I like I don't know if you try to run this technology on your machine then you know you're still like like miles away from the average experience you get if you interact I don't know with post on your machine right and I and I think that's such a it's such a simple and like trivial way maybe of looking at the problem but well that's what literally developer experience means right if I'm experiencing getting data out of postris I just have to remember how select works I don't even know where post store data I never even looked at it I mean it's not true I'm just making I'm just making this up for the for the for the sake of the conver ation the point is more that you don't actually need to know where the data is you don't need to know their encoding you just have some interface that gives you the data back and and because the basic obstruction is so simple then we kept building up on top of it and then you end up with the you know the I don't even remember how it's called I think it's called the datag grip plugin inside intellig or these beautiful interfaces that allow you to talk to seel it it's it's even like even the interface is nice like it even looks nice when you interact with it which you know it's like a second stage of uh usability and uh you know this might be actually the only thing I always struggled with streaming since 2013 on that is like even the simplest tasks are not actually that easy like you know I worked in a variety of um spaces with streaming that they the only thing they had in common was literally Kafka right you know the different Industries different reasons use Kafka sometimes it's sometimes it's just moving data around sometimes it's actually processing data but all these projects had in common that it was really hard to do even the simplest thing like giving give me a 100 records from this uh topic because I actually need to look at the data I'm looking for like I have a bug uh that I don't know how to fix it but I need some real data because I don't understand the problem and you know I imagine how is it to do that with with red shift or with a remote post database you just you know connect to it with a read only database get 100 rows you even have a synex to get directly as a csb and just move on and in every single place I worked with there was always you know there was always like two or three uh Ops just to get to basic answers now there is you know there are there are some uis out there that make it a little easier but while the nature of the problem and the fact that we you know kept building on something that I don't believe it works that is sel we ended up with with solutions that more or less solve one problem really well but don't give you this you know like like full developer experience that is just like even remotely as good as what you have with REM rational uh relational data basis which to be clear it's somewhat obvious because we have started working on usability for relation databases I don't know in 84 85 I I don't know when to yeah maybe maybe even in the 70s we could be pushing on to the 50th Anniversary yes you could argue that we started the I wasn't born yet I think that's kind of you know in the late 70s I wasn't there yet and and our industry was already working on how to make this um uh this more usable and you know I use always the same trivial example but to be honest it happens every day especially when I've mentored a lot of people into the streaming space because I'm really into it because I really like like it fits my my mental model of how data flows into systems like a glove so I applied it uh in a lot of companies so I found myself in a position where I had to Mentor a lot of people and I could see for example this completely obvious burden that you know when you are working with say with a with a CF cluster and you have a bunch of topics and you have to get data out of it well you have to know the encoding up front which I know it's obvious right I know the technical answer is of course you have to do because you have to theit the network that's not what I'm arguing I get that's obvious but that would be the same as saying that when you exract data from a postest database or a myle one you would have to know how the B3 um tables look like on dis I think it would be really hard to get data out of yeah it would be a hard sell yeah it would be very hard to sell so I understand that some of the complexity is not going anywhere like at least long term like I can't imagine like completely being able to hide the concept of partitions even though I have my opinions about that as well I think it's a little harder um but some of those things like for example knowing up front that abpic or a Json one or a a Proto buffer and you actually have to have the scheme up front before you can even look into one record of this topic uh yeah I think it makes it significantly less usable because of how much work you have to do to even know what you're working with and that's you know I think it's like it's literally that part of it that every single project that use at Kafka I worked with uh people struggle at first and then you and then I've seen two different two different scenarios coming out of this either people get really good at kfast stream and then become so experts that they they don't remember anymore how hard it was to get there so they say you know cfk is easy like if we have to write a stream processor that gets the data filter out some stuff and then does aggregation I mean it's 15 lines of code right they've got all the they've got all the recipes in their short-term memory because exactly it's cached in the red they know exactly how like they can picture the DSL from from kfka stream in their head uh even though nitpick there it always bothered me that we call it the DSL because I I think it's a fluent API not technically DSL different conversation yeah that's I have thoughts on what DSL actually means and yeah sep conversation but it would be a very long conversation the point is that you either end up with people becoming experts nothing wrong actually pretty pretty amazing like I have some friends that now they're going around the world and doing AFA streaming places that uh there was no Kafka stream first very happy about that or people just you know say Okay Kafka is some some more of a black box that can can you know ingest data really fast I can get it out of it but when I have to do something I will I will move it first somewhere else and then I do my it's like I move it I move it to which to be clear there are some really obvious use cases where this is the right solu option right but I've seen a lot of people like then ending up saying you know uh Kafka is just good at moving dat around and then when I have to do something I will do it somewhere else which I think it's like not really true like I think there's a lot of like even the most basic work that you could do it in Flight like you know filtering data out like uh basic aggregations there's a lot of work that you could do out of this realm but the problem is that for that to be easy for you you got to be a cfast stream expert and then then you see the problem there there's a terrific amount of power that we're missing out on just because the user experience isn't quite there and I do think you're right without criticizing the SQL approaches at all and I use them and I love them yeah there and we've made great strides in that but it's still not a solved problem and an answered question there is still more to explore in the design space and this is why I got you in because I think you have an interest interesting and novel answer to how we could Sol how a new area we should be looking at for this design space so I'll let you tell me about it yeah typ stream yeah so I mean so I I I have to make a premise there because I don't like you know I sometimes you listen to people talk about uh their projects and they're a bit sensationalist about it it's like you know this is the best new thing so I appreciate you saying it's novel and I do get why you say it's novel uh but that's actually the thing I struggle the most with when I talk about typ stream because I think the ideas are not novel at all actually like I like when I look at what typ stream does and how it solves problem I didn't invent any of this I just um like looked at it um uh from from the perspective of data streaming so so what does so how does typ stream look like first of all right so the initial story there is that um it has actually nothing to do with streaming is that I really wanted to get into cotland and I needed a real word project and I had nothing at my hands that's maybe two years ago and I started exploring programming languages because it sounded very art it's like you know can can I write a programming language it sounds impossible like I don't even I don't actually understand how programming languages work well it turns out that shout out to um um munificent Bob I think on Twitter that is the author of crafting interpreters it's an incredible an Incredible Book like it's literally you know nothing about programming languages and you read this book and when you're done with it you can actually write your own programming language there are there are you know there are things that the book doesn't go through because the space is too big but you know you can you can do most Mo most of a small programming language on your own so this is how I get I got to typ stream like it was it was like I didn't come up with idea I was like I've had I've had the idea for typ stream some 10 years ago almost like in 2015 I think it was at at the time I was the C at this food startup called marles and we were discussing how to use Kafka to move order data from a web shop into you know different parts of our infrastructure like we need we need you know uh shipping labels on one side we need the ability to have manifest to build boxes on the other and it's like if you think about it it's always the same data and it just looks slightly different like I need all the errors going to customer care I need all the shipping labels to go to the shipping team and it's you take always the same data and you do these little pipes that in my head in this meeting I can picture the meeting in my head they just looked like these basic uni pipes that we use all the time I was like you know I can cut my ERS and then I just grappled the errors and send it to customer care and when I had this idea I actually couldn't put it into words because well first of all it was so early that I think afka stream was not even there yet or it was really early days I actually don't really know when when Kafka stream came out but it must have been around that time and I also had no idea how to put it all of it into practice then I you know went on with with streaming for like some eight more years years and then I found myself wanting to learn cotlin and then everything just came together and said You know here is a very difficult project can I get a bsh like programming language uh that I give it strings that look like bsh like Bush comments pipes or uh on liners or whatever you want to call them and can I compile this down into a Kafka stream application this this was this was the question right I didn't I didn't I didn't Tuggle the problem from a usability perspective it's more the other way around it's like while working on these that sounded like very difficult and very fun uh well the more I looked at it uh the more interesting the metaphor got because you know by Nature I'm one of these people that is very skeptical about his own grandio ideas right you know it's like when I started working on this I'm like am I really trying to write a programming language for data that sounds that sounds crazy like that like that doesn't make any sense you're never going to be able to do this and you know sure it's maybe a half imposter syndrome a half um hey skepticism but you know the metaphor just kept giving while I started looking at it because you know I I got this remote compiler working and then I could do these basic things like you know cutting a CF Copic and you know doing some grap which is literally filtering and then I got you know some basic VC version WC I think it's the common where I could aggregate dat and just you know count page views and things like this and then and then I and then it did really it hit me really hard that you know this uni metaphor that we have heard for 50 years that in Unix everything is a file I mean there was really no difference like between the between these Concepts where like in Unix you know what makes it really powerful this abstraction is a composition like it's a combination of two things right it's like the the way you interact with the data is pretty uniform because well literally everything is a file and the programs are very composable because of pipes they do one thing you compose them together and then you can do the same kind of um uh transformation over very different files using the same exact ideas and you can just keep reusing it as much as you want and the more I thought about it the more it felt like it would work for streaming and then what happened is that I just kept going and now it turned out into this Vision uh where yes I do believe that's another way of looking at usability for streaming because type stream pitches what if you could interact with your uh and with your Kafka toopics what if you could write streaming applications this with the same Simplicity you actually uh uh do some work on your files on your file system and and yeah and the beauty of at least in my opinion the beauty of this metaphor is that it actually works perfectly from the perspective of the file system too like meaning you know I have typ stream as this virtual for system where you connect it to a Kafka cluster it will create a view of this cluster where you get each topic is its own part and that's how you addressed it right you have this so that you can do cut name of the topic which is a part so you're literally you're literally a something like you can run typ stream and go cddf toopics cat users onto grep Berlin onto Berlin users yes and and and you know the basic the basic metaphor that I appli that already works like even though typ stream is a very young project also very complicated one so it's bit hard to to to to get to to get everything up and running and it's also definitely my first programming language and Bash like programming languages are very complicated because of bad words like because you like until you get to the final process of compilation you don't even know if that string you're looking at is actually a string or a p on the file system it gets very complicated very fast yeah it's it's very tricky or variable it can be a lot of different things right so the the thing that really clicked in my head is that when I started looking at TP stream from a like more of a perspective right because when I started talking to people and say oh this sounds like it sounds like a good idea with like you know I met people telling me why isn't this like the default way we interact with with data which is very cool feedback right it's like it sounds so easy why are not we doing this by default and well I have two answers one of them is that I have no idea why that's not default in a way which which feels very suspicious because we're doing this for 50 years with Unix and am I the only person that ever thought of applying uh the concept of Unix to something we literally call data pipelines it's literally in the name right yeah the operator we've been using for decades every day several times a command is yeah I feel really strange about it it's like I at the first person thinking about this and that's why I kept trying to sabotage my own project and say yes if I do this it doesn't work and this is how I discovered how the metaphor Works in reality with the like it works beautiful beautifully in context I had never thought it would work let me give you one concrete example are you familiar with tiny bird the the the start yeah you I think you might have told they do click house apis in front of Click house right yeah and it's very clever like I like you know when the first time I ran into it it was a bit like I think it felt a bit like the first time I run into react that I'm like why is everyone saying this is cool I'm not getting it it's it's my fault right let me spend two minutes on it and then I and then when I realized that they would expose a API for you and then you instead of consuming the data from just a manag click house you can build on top of it you know it clicked in my head in two seconds saying that well if I apply the metaphor to typ stream and I have a media file system I can mount a a web web server and say you know then cut topic grab you know Berlin and then you can you know redirect this into a a web server that is a SL media server one SL endpoint which is the actual endpoint you expose to the public ah so processes as like entries into the file system yeah and then also be eventually there'll be slev postrest too and you can exactly and it works like you know what's interesting is because it works both ways in Unix it will work both ways in typ stream I mean if I get to building it and both ways I mean then you can end up with a oneliner where you actually get data out of post address you process it on top of uh Kafka uh you throw it at a topic but also you take the topic with te and uh you also expose it with have web socket because why not I mean that you know the whole the whole idea behind it is that it looks exactly like Unix and that composability is really obvious for us in the Unix world right it's like we do that all the time right we like like you you might send data via aring well Arn it's like Kafka connect it's just AR syn in typ stream right conceptu yeah because it's kind of the same idea yeah I can see that I can see that yeah and and and and that's kind of and that's kind of um you know that's kind of what fascinates me and keeps me working on this project which I will not deny it is uh technically the most difficult project I worked with uh because there is way too much going on even like you know because we ignored one thing that typ stream does uh so far which I think it's worth mentioning that is there is a reason why it's called typ stream apart from the fact that it sounds nice uh and it resembles other things that people are familiar with it's because all these data pipelines they're all typed and I think that makes a very big difference compared to other Solutions where you know you would have to bend sequel significantly to act achieve the same usability so let me give you an example for example when you do cut uh topic pipe grap something if you use a be word um typ stream will do exactly what grap does that is just like it just looks at the whole line which in in the context of typ stream is the old record and just looks for whatever you passed right that that makes sense but of course grap um like you can uh use this um uh I think it's called square brackets operator that creates these conditions right in bash there is the square brackets operators and uh you can use it in in if statements and I I I started thinking about it it's like you know to make grap more usable I can use the same conditional concept to grap and then now for example typ stream does things like you know you can cut a topic and then you can grap and look that you know a specific field is bigger than 500 now this doesn't sound very smart because of course you expect a system like this to give you the ability to to to I don't know give me all the books that are more than 50,000 words what what I think makes typ stream more usable and it's kind of easy to do once everything is a programming language like the technical problem you're solving is a programming language is that well I can actually type check the pipeline you give me because I know I know because of the the the schema of the data I know the the type that the whole pipe is so I can infer each single step of this pipe and say okay the book schema it looks like this there is a title there is a and it's a string there is a word count and it's a long and you know and so on and then you do this when when you get to the grap operation I know that the field words is not there because it's called word count and then I can actually tell you I cannot run this for you I cannot comile it for you which at first sounds like just a nice feature but then if you actually you know apply it to the whole idea of riding data pipelines every day with this with this technology well you end up in a place which we just give for granted in the whole industry that is not streaming which is just obvious that it just works like this everywhere as long as you use a typed language but you know in data uh streaming it sounds like it sounds like a very Advanced feature and to be honest it's I think it is no I think it is because I mean I use things like CFA streams yeah and sometimes it feels like most of my time is getting it it won't infer the types and the serialization yeah stuff and I just have to teach it how to deal with types at every single step yeah yeah yeah yeah it's and you know so but what I meant to say is like I I I know why you say it's Advanced feature and the point I'm trying to make is that it is only because we're not tling usability because well it's really not Advanced feature conceptually because it's something we be able to expect yeah exactly my point even though it's hard to implement that's what I'm getting it's that not easy I I I will agree with that but the point is that when you look because you know if you look at a cfast stream application that gets data from two topics it joins them together and then it filters out some of the the data for some business criteria and sends the result via websocket with a forage these 150 lines of java code or cotlin code or closure code whatever you use as long as is JDM um well there is a lot of details going into this because there is no abstraction it's not cfast stream's fault that they don't solve this problem for you it is really out of the scope of the library to solve the like the serialization the I know exactly what you mean about this find yourself there is like okay oh I have to tell that the resulting type is this thing that I don't have yet and in every single project I worked with we ended up with some sort of like um we would call it like a hybrid serializer that for all the internal steps of the data pipeline we would use ajon cizer so it would be easy to make all the you know to do all the operations really fast cheat in the middle yeah because the truth is that when you work in a project where you use these a lot well this happens every day and you're not going to do a new up schema for every step of every single pipeline well the beauty of of typ stream in a way is that well typ stream can do that because it will just compile it right it will compile every step and figure out what's the right uh schema and it can also output in different formats because again uh well you can just have a two Jon or two CSV or two whatever command at the end of the pipe to change the encoding because that's how that's how you would solve the problem in Unix right L like I didn't invent it again I think that is actually literally a com in Unix I never remember its name that changes the encoding from dos to Unix I think oh there's Unix to dos and dos to Unix and and the idea is the same right all I'm saying is if you want a different format you just pipe it into a into a tiny program that its only responsibility is taking whatever you're giving it and changing the encoding that's all it oh so so one day type stream will support pipe Jason to AO so right now so no so so it already supports this um uh like automatically at inference level the point is the point is that if you do a pipeline where you start with a schema and then you grab start you grab you grab something out of it and then you redirect it somewhere else conceptual is very easy to imagine that the the end topic should have the same schema as the starting one because you did not change the schema right you just like filtered some data out but then if you filter some data out you should change the schema so this type stream right now does it automatically by assuming that all the like so what it does is like it it iners the encoding of the pipeline on the Fly and it will figure out that none of the data operators you use changes the schema so you get the same schema as you already had when you started okay and as soon as you use something like uh uh cut or WC or join which by the way I discovered while working on typ stream there is a we have to talk about joins yeah there is there is a joint command in Unix I had no idea about this I discovered while working on typ stream I know that yeah yeah yeah you know this is how actually the first time I started working on typ stream I was debating uh it with a friend of mine shout out to Bruno because he's very helpful into doing this uh you know like um remote rubber duck where we told on on Signal or something and like and then that's the exercise with it is like can you find semantics that work with you know because some of these are really obvious like grap is filtering WC is a aggregation cut is literally reading file and you know the bigger than is literally the two of kfast stream and I that's how I discovered that that Unix has a join command where you can join two fil you're just thinking surely Unix has already solve this problem somewhere that's kind that's kind of my that's kind of my point right the point is that I didn't even know that Unix already had a program because it's like I'm gonna have to do a join command because otherwise I cannot join streams that like that are from different sources together and then when I started looking join Unix I could not believe the comment was already there and I started using it with files to understand how it works of course it has limitations compared to the Joint semantics of streaming but still the basic idea that the metaphor just keeps giving is what get kept me going with typ Stream So before we move to joins to close the the the the encoding part well to be honest this is one of those things that every single person I got started with uh uh uh with the data streaming has struggled with because you have to handle encoding on your own and from from the perspective of a typ stream User it's completely transparent unless unless you want to physically change the encoding saying from abro to protuff there are things that I have to a out from a syntax perspective but it already works it already does that because well the point is that typ stream is a remote compiler so when you give it a string that is actually a pipeline it does all the things the programming language would do it looks at the pipes it figures out all the operators it tells you well you cannot use grap with this field this field doesn't exist yet right or um and anded the beauty of uni metaphors in this context that it works with both kind of commands I have a HTTP command so that you can you know pipe things into an enrich block where you get all the data coming in from a stream do a remote HTTP call and then have a resulting stream coming out of it which is a non-trivial CF stream application say yeah abolutely to write and the HTTP comment because everything is a stream and because everything is a like because the metaphor works everywhere it just worked at first try like it just works with the with GP it just I I literally discover that it would work with the other data operators by testing it after I finished the first implementation because I wasn't even sure that it would work but it actually worked immediately which I you know which I think in a way it's a form of validation that's uh this might not be the best solution ever but at least is a concrete and valid way of looking at the problem space of improving usability in data streaming because even copilot agrees with me like you know I I I think I think I tell this to every person I meet that is when I write docs for for for typ stream and I'm writing like I don't know today literally today I added the minus B um option to grip for some reason I thought it was already there but it wasn't it's the the option that inverts the match right so I I added this option I started writing some dogs and co-pilot just like finished the line in in the typ Stream code right right because you're reusing the metaphor so perfectly yeah yeah yeah because co-pilot doesn't know that the code is typ stream copilot just thinks it's a shell script right it's a little shell script and and and that's what getes me very enthusiastic about it like like even co-pilot that is a heartless machine sees the sees the yeah yeah yeah I you know I have to ask you this is this is something in a side but I feel like I have to ask you this you're so you're building out an existing language with a lot of lot of conventions and a lot of rules it's your first programming language you've written you're writing it in cotlin which is your first big cotlin project yeah you're doing not just a programming language but programming language with type inference yeah I mean how large a mountain are you trying to climb LCA no it's fair look it's so I it is a very fair question yes it's very large I don't I will not deny this it's like you know I'm working with a friend out of aut way we cofounded a small company behind typ stream like because typ stream is to be clear typ stream is fully open and I believe that there is no other way of doing this like I I'm not even like you know I'm like I'm not even gonna argue for any other way of looking at typ stream from a from a project perspective because I don't think it makes sense like I actually timing is perfect because I like six months ago I used to say terraform would never become so successful now it feels a little strange to say it if it wouldn't be open sour in 2014 and and I I think you can tell about how badly the open source Community reacted to to ashor changing licenses so yes Ty stream is openers project and the scope of it is immense I I I agree with you right and there is no doubt that there is a bunch of first things I never did I think that you know to be fair the the fact that is my first large cine project I that I don't really care because I like that that's not that that's not that's never been an issue uh for me because for me languages are literally tools like I don't like you know I don't look at it as uh this it was not even hard to learn I just needed a real world project that's how I ended up using cotlin I I will say I will say that uh it is uh difficult from a programming language design perspective because of course I've never done a programming language but you know it's kind of funny because if you look at this of the people that build programming languages when you talk to them they they will always say like I had no idea what I was doing and then you end up with python and with Ruby and with uh with JavaScript and uh yes some of these languages have obvious quirks in inside um uh but in a way I feel safer from that perspective because well I'm not really inventing the synx right I I have to borrow ideas from other languages that um that bash doesn't doesn't have because it's really hard to do stream processing without the concept of block like you know if you because if you're like mapping data like in a in a in streaming it's really hard to express that without the block syntax and um bash doesn't have that actually like you know the like the the typical lump that you would have in Java or in cotlin uh it's not really there uh in bash so I I had to add a bit of synex coming from uh other languages there is a rust project out there called Nell uh that's it's kind of funny because they solve a very similar problem that I'm trying to solve with typ stream but for Shell only so they it's a shell where everything is structured data so you can write very very clever scripts inside your shell because the shell is aware of the data types of everything you oh okay very interesting and you know in a way again one one one more time a form of validation that you know the metaphor can work in the in the in the in the context but yeah so the point is uh in a way the the thing we really need uh for the project is of course to people to use it a little more like I have friends using it but ideally um it gains a bit of traction so that some other people are interested and maybe the the company behind typ stream can hire a couple of like full-time open developers in ideally we would hire at least one compiler engineer that works with me that does nothing else than working on the ERS project which by the way I think it's a dream job if you ask me but but you know everyone has opinions about that too if anyone listening would like to apply send your details now yeah I I don't do that yet because to be fair um I'm doing this out of my pocket at the moment right okay yeah I cannot really hire anyone at the moment uh but but ideally that's you know the part you would want to take because I think it's also important for for a pro and and that has nothing to do with typ stream right it's more about my leadership experience uh uh of 20 years in in in the industry that for a project to be successful uh you do want the uh to know your limitations right you do want you do want to you know put the project in place with people that are hyper specialized into solving in one problem I do feel very secure of the the vision that I have for typ stream uh because I've spent so much time trying to sabotage it myself that I can't that well e either either I have a giant blind spot that I haven't seen yet but you know the more I talk with smart people like you the less I'm convinced I have a blind spot toward typ stream uh and the more I'm convinced that we should try it we should try to make work the full extent of division where as you said some alpan hour ago at some point there is a SL Dev SL postgress table somewhere can use that to uh basically saying typ stream becomes a data programming language which is a very strange thing to say I think in a way I could see one day it's going to try and occupy the same space as uh say Flink yeah right yeah connective processing tissue yeah and you know in so the when I when I started talking to people about the the the the project from a prod perspective one of the feedback I got most often was um uh why why are you even trying to solve it as a programming language right that because there are other ways you can approach the project I think there is um a company solving a very similar problem as a python Library I think it's called BX BX and it's yeah bws and it's very clever very smart and it's a different approach and it's as valid as typ stream the difference is that because it's a programming language typ stream is something that you cannot have with these other projects not because you know typ stream is better it's literally because of how the typ stream is designed and uh because it's a compiler uh Kafka stream is one runtime and I think this is not obvious when you talk about it typ stream for the first time because right now it looks like this you know the naming in compiler space it's really funny but you know there is a front end a back end and midle end I know you know if you never heard it's really hard to believe there are midle ends but it's true right so the naming is a bit strange but the com the because it's a compiler and it's thought as a compiler nothing prevents you from changing either the front end or the back meaning you can compile to different runtime you can compile to pulser you can compile to Memphis you can compile to Flink why not to Flink job because all you need I'm trivializing the not the scope but the Simplicity of the the task but the scope is very well defined what you need is a one-on-one mapping semantic between the data operator that um typ stream offers and the ability of expressing that problem in the native code of say fling or pulser or whatever it is right now if you would look at the compiler the last stage of the compiler the one that creates the gafka stream application it's literally a like a walking algorithm of like you know basic uh depth uh first um algorithm on the graph that does nothing else and every Noe that that it runs is say oh what is this node okay that's a that's a grap well that's how you do grap in gafka stream oh that's a that's it's so you get to the point where like Flink and pulsar and python will all become AR ures yeah on which you run Yeah Yeah Yeah Yeah from the perspective of typ stream they are just run times right now now yeah there is even a larger scope which it's a can of worms which probably we don't have the time to go through this specific korm that would be at some point typ stream can get to a place where it can run um uh it can run Pipelines where there are multiple run times involved meaning meaning you have clusters of all kind and then you decide to run the you can decide on the Fly what's the best place to run this pipeline because and which sounds like science fiction level kind of um uh technology for data for data pipelines but I don't think it is once you accept that typ stream is nothing else than a programming language and then you have available to you all the tech techniques that are literally basic stuff in programming languages like you know code code elimination or caching caching is very common in programming languages right and you know caching part of a computation of a data pipeline sounds like a very Advanced feature in in other system but you know if you write cut a topic grab something and then you pipe it somewhere and I write something that starts the exact same way but then does one more GP and pipe somewhere else I mean nothing prevents us to use the first part of the computation is the same exact Pipeline and those things are only unlocked by the fact that typ stream is trying to solve the problem at a in a way at a unreasonably low level that is giving you the ability to express pipelines with a language where the hardest cell would be you would have to learn a l language except you don't because the language looks exactly like your terminal that's kind of the final pitch right of the whole yeah yeah yeah may be a lot of work for you to implement each part but the the syntax is yeah yeah so I mean I think I think it's really interesting I think it's at least as valid an answer as the the SQL is the right answer to this thing but I feel like we should just um if Unix is the metaphor and you're convinced that it's a good metaphor that seems to be fitting well we should test it in a couple of places places y test if the metaphor hangs together when we start doing more interesting things so the first one is joins tell me about how joins will actually work I mean so the the syntax of the joint comand in Unix is very close to the syntax of uh of the join fluent API from um uh uh from the cfus from cfast stream because it does nothing else I'm you know simplifying a little but it does nothing else says you know th those are the two streams you want to join together and this is how you stream them together and this is what I brought up when I talked about blocks when we were discussing bash syndex bash doesn't have that feature bash doesn't have the ability to tell you you know cap capture a little piece of code here and use this resulting code every time you do this operation and that's how the join syntax looks like now I I right now typ stream as the simplest join uh synex possible which is literally you can join two streams and will join them by key uh and I think it is a default window like it's all hard to called that at the moment because I you know because the scope is so big for each single problem I just try to glue them together there and say okay that's the infrastructure if you want to make joints really smart well there is one class that is the D the you know the abstract syntax three class representation of join you can make it as smart as you want because the beauty of the obstruction is that they just work with a class that it's called Data stream inside the the code they don't know about anything else about the outside world so you can make the join as smart as you want and the way you would do it is by imagining a little synex that gives you the ability to to to a what what I think normally called the volum mapper because you have to map the result of that join and that synex is already there because um uh typ stream supports command that is not unique standard called enrich which is the equivalent of map I sto the name I think from Newell because it was okay literally one onone with the idea that I wanted uh and then the rest you can do it with options the way you do like if you look at the aring page like there are a million options because it's really smart program and if you think about it I'm pretty sure aring has more options than how many possible joins you can do yeah I probably agree with that yeah and and you know and maybe maybe I should you know maybe I should say this out loud because I don't think I ever did so far that I'm also like I don't think you know I don't think the one onone um ability to express one onone every single thing that this streaming processing that already exists can do should be a design goal right I I think it would be nice to get to a good 95% and not do like you know the last 5% uh but I don't believe in in in the you know into we have to be one onone feature compatible because uh because this is not really an alternative right I'm not trying to build an alternative to cka stream or to fing I'm trying to solve a different problem the problem is interacting with uh streaming uh stream processing with this tooling is very very hard so I'm going to create a tooling that allows me to do 95% of the job with one line of code and then if I need to do something really complicated and I need one Kafka stream up I can still do a kka stream up that writes into a topic and that topic just becomes a file system part for me right yeah yeah it's the um how do we make things that are easy trivial yeah exactly exact so I I can I I can significantly more about the fact that right now if I was working on a CF uh project and I had to uh get the past four weeks of data from a specific place and filter data out I have to write a whole App instead of writing a line of code for it okay so so maybe moving on from joins then let me test it with another important thing in stream processing is there a Unix way of handling state if I want to like roll up have a running balance for instance I mean so so the the funny thing is that this was one of the hardest thing to implement for me because um so the the thing is that so that there there is two answers to it right there is the syntax answer and the physical answer the actual how does this work in typ stream and the the the syntax answer is that you know in a way as long as you have a Unix command that makes sense like I test these things by sending people little pipeline and ask them so what do you think this pipeline does right that's I don't tell them what it does and that's how I figured out that for example the WC command Works in a lot of plac where you have to do these basic count aggregations right you know I want to aggregate all the data by key as for handling State uh I don't want typ stream to ever solve the problem in a way because if you if you think about the typ stream is just a compiler like I say just with quotes because it's a little reductive for how complicated the problem is but at the end of the day typ stream doesn't actually solve the problem because it compiles down to cfast stream well cfast stream solves that problem right so what I'm aring for is that and I've read this question from other people as well saying look you know when you get to State when you get to storing data it gets very complicated and while I agree with all of it um uh I don't think it's in the scope which is kind of interesting in a way and it confirms um a part of this idea that I enjoy very much that is because it's just a compiler I don't have to deal with this problem at all actually because it's relegated completely to the underlining implementation of the streaming library that I'm using in in theory you know that's kind of a funny a funny part of the answer in theory you could compile uh um uh a Unix pipe written in in typ stream in into a streaming library that solves these problems on their own like bite wax does because why not right because what prevents you from solving that problem right that's in a way so maybe maybe there is something that is not clear to you from um from um from a technical perspective and I should spend a minute explaining it right is like typ stream is a remote compiler which which makes a difference right why is that relevant it's relevant because uh in production I and there is a variety of reasons why it works like this now and we could talk probably one hour just only about this honestly uh but in production I like um typ stream requires you to use a um a kubernetes cluster and the reason why it works like this is because as I don't want to solve the state problem for the stream processing I also don't want to solve the orchestration part which I think it's unclear to people that and it's my fault obviously because if you go to the website right now it's obviously not clear that typ stream also manages these jobs because well once again the Unix metaphor just keeps giving right because if I give you a pipeline and I add the you know commercial at at the end of it it will just run in the background right oh yeah yeah yeah right like why not and that's exactly what typ stream does right when when you run typ typ stream as a little piece of code that says where am I running oh this is a kubernetes cluster and then it puts itself into kubernetes mode which means all the uh all the long running jobs instead of being in Cor in cor routines which they would die as soon as the server dies they get they get delegated to kubernetes jobs why why am I bringing this up in the context of of State because I think those two things are actually connected because what you end up getting if you run types stream in production in your uh cluster where you have you know your you have your apps you have a name space with typ stream and all of these talks to gafka what you end up with is with a extremely simple way of running long running uh jobs on top of um of Kafka that do the almost the exact same thing that a Kafka stream application would do with the difference that the thing will take you I don't know 15 seconds to write instead of two days and you also have to manage it yourself you know long term the idea is that right now the PS command again the Unix metaphor just keeps giving uh the PS command is a bit dump because it just shows you the name of the app with the state but nothing prevents you to making this much smarter using once again a different aspect of the Unix metaphor by exposing metrics of you know consumer groups cfast stream applications Brokers all of these via the proc um uh so one day type stream will let you say cat slpr cfus some job and you'll get the metrics for it yeah yeah that would be very nice yeah so right to for that to work like everything is already in place because you know that's kind of the exercise that I did it's like is this two hearts that I don't even know how to do so I just kept answering questions to see if I could go full circle with a problem and there is actually literally one thing missing there that is when you start jobs they reflect inside the file system immediately so what I'm trying to say is that if I Implement that feature then what you just said would already work actually because of everything is a stream everything is a file and it's always the same metaphor so if I add to the file system a live job part that like basically the proc management I think that's how we would call the road map item in typ stream when we implement this uh well then this would already work and and and you know the the beauty of it like the longterm Vision the beauty of this of this approach is that there is a lot of code already written that works with this kind of solutions and then if you have a script that monitors the proc um uh it would be very easy to translate right that's kind of yeah it would be very easy to translate all these scripts and I you know I haven't even looked into the progress that we have made in in the past I think four or five years not more with the ABF with all like you know this inpection that is a bit more low level trying to resurface all these Matrix again via the file system because why not it would work you know immediately yeah I can say right and and then you know and that's kind of my you know that's kind of the the reason why I'm so excited is because whatever question I get even if I don't have an answer immediately I my brain thinks about it and then maybe while I'm swimming I'm like well I mean Unix does this already and the answer is consistently you didn't invent anything you just realize that we've been doing this for 15 years we forgot to apply to data that's all we did yeah you've got a you've got a 50- year old book of design recipes draw from yeah yeah okay so that that leads probably my last big question which is possibly one of the biggest parts of a Unix system which is the ability to extend those pipelines with your own commands yeah where is typ stream on the I can extend your language story yeah it's it's it's a beautiful question and uh um so I I think there's two things that need to happen right one of them is really H syntax SL semantic so right now uh the language to be fair this is also relatively easy to do I just didn't get to it yet but uh there so the language doesn't have the ability to Define functions and the reason why I bring it up because well one solution is obvious that is you add two uh features to the language one is the ability to Define functions and the other is the ability to Source functions and then you end up exactly where you ended up with bash and Z shell where you write your own scripts and then you just searce them and then they just appear and they just work so now this solves a variety of use cases and I think it's very interesting that you can get a function that removes um I don't know it removes all the um the possibly um PRI privacy sensitive data from whatever stream it's coming in like if there is an email or IP address it looks like this whatever it is you will just remove it and then you have this tiny function you can call it pii and just use it on all your streams like in case pii pipe yeah yeah pipe and then it just works right and and that's also very f because in case you do something wrong type stream will just tell you well you know you appli this to a stream that doesn't have these types so what are you doing like and you could also relax it to a warning if you wanted to the other answer is a bit more complicated and I like I don't have a fully like you know fully formed answer I feel like there has to be a way for people to write their own native operators and you know with like let's make it as concrete as possible Right so cut grap uh like you know these filter comments the uh WC LS CD those are what you would call the built-in shell programs right if you try to to do a man page of one of these programs you actually get one giant page with all the programs it always confused me I want something about one program but you don't tell me with the with the man page uh and what how do you um um uh add more comments and I think there the answer lies into some clever application of the of a p like with the with like the concept of p in Unix where I give you a binary p and you can put a file there now the the thing is that this language so this program is natively written in cotlin which I think it means that the comments that you put in the binary part got a bit jars I think there is no way out of it which is which is what um connect does I think that's literally how Kafka connect I don't know I don't know if you ever worked with this I think they're called Simple message transformation oh yeah yeah yeah yeah they're very to be honest they are significantly more powerful than what people think like you know people because they don't know that scfa connect has this feature it doesn't even cross their mind that with just a configuration file you can get pretty far ahead with konet by cleaning things but if you really need that a special transformation that is I don't know some business logic that you only you are the only person knowing about it and cfet couldn't possibly solve that problem they give you the ability to like load plugins on the fly now uh again not not trying to bash on the project because I Absolut love love the way they solve the problem it's not the most user friendly way of adding a functionality to it now what I expect the long-term Vision that would be is that you know you would would make all of typ stream a Java library and then and then you add commments by running your own typ stream version with your commments inside and then it becomes much easier right you have you have this main command that is Sate typ stream and you are just you register your own commands which which just abide to some interface and well the interface will actually look really simple right because it's a function that takes a data stream and returns a data stream that's all yeah yeah I can see myself one day like SCP in a jar to typ stream SL user local bin right yeah that's yeah that's kind of like and you know because we we shipped with typ stream an official because typ stream is a server and it's written in cotlin and it exposes a a grpc uh server it's not the most userfriendly way of interacting with typ stream so we support official um um uh common Line application written in go uh because once again big fan of using the right tool for the job and I think go is very opt for little uh common line applications so I I I imagine the common lineup might actually just support that out of the box I think a bit like kubernetes does with the CP command oh yeah yeah in a way probably do do that as well so userdefined functions are definitely coming and you know in a way what I like the most about the conversation is that they would be typed and I think and I think that's not immediately obvious how much powerful the other Solutions in the space this approach would be because it allows you to express a a lot of problems in a very safe way right like the example we just made like if the stream is coming it has emails just remove it uh it's not so easy for me to imagine how you would solve that problem in different technology that is already out there that is both reusable and type safe that's the that's the thing I cannot see yeah yeah okay I think at that point we should probably say what state is the project in today and how do people get started playing with it yeah so what's the state so from from so if I would have to look at it with the most critical eyes I would have obviously say that it I don't think it's production ready for the most obvious answer is that no one uses it in production right so when production it is production rated by definition and it's not which means right now this would be the most valuable um uh next step for typ stream would be uh putting it in production somewhere with with someone from um like I say feature standpoint SL how you get started with it so uh there's two two two things about it to say so the the getting started experience I think it's somewhat pretty solid already like if you you go to the to the docs right now um because I really really care for I think obvious reasons at this point uh the developer experience I try to make you know the getting started as you know as little friction as possible so that are you know I'm gonna say you succeeded because I I tried it out and than yeah the initial on boarding is very smooth if you've got very cool and and and I worked really hard for making that point like because the point is that there is a lot of things that uh that are new to you when you get to typ stream and because you know I used the react metaphor there I I don't know if you remember when react came out but they had I think literally the first six months on the homepage on when it was still on GitHub not even when they had the official domain they had a thing saying you know can you please give this project five minutes before closing the top just because the idea is really really novel and you should probably spend some time and the reason why I bring it up is because of course typ stream is not under the Facebook umbrella so I don't get that you know boost in trust right so in a way I had to make it as easy as possible just for that and and I and I I think the getting started is somewhat of pretty much solved the only thing that is maybe not completely straightforward and I don't really know how to make it easier than that is if you want to get the project Amper running on your machine and develop kubernetes features then there is maybe two or three things you have to do but the getting started thing where you want to play around with it I think it's uh pretty much there there is a variety of comments already there uh working at the data operators I mean and um maybe there is more comments than docs uh I have literally this as a next to do item in my list saying you know I should I should make more dogs because there is more cold than dogs so when I have more dogs than code then I can go back to to the Cod again and eternal circle of program yeah it's it's a circle I do believe strongly that that documentation makes the quality of the project actually like your project is as good as your dogs uh but from uh you know some of the things we talked about today are very hard to so I'm not going to lie about it right like the idea that you can have these data pipelines that get data from extremely erogenous data sources like say post on one side Monga in the middle Kafka and then redit yeah that's I would say that's far but all the ideas we discussed about you know being able to write 95% of what you would normally do in a CFA stream application that actually already works like it like it literally already does all of it of the what what I would call the you know beta features the only thing that's missing is the ability to change the like to force the encoding of your of your choice like right now you either get your original a or Proto buff or whatever it is encoding or you get Json because that that's the linga Fran of when typ stream uh join things coming from different encodings and well if I have a topic it's up the other one is and the other one is prot buffer what's the output supposed to be and I think there is no right answer so as a as a default answer we use Jason because that's kind of the you know the structured Ling of structured data encoding linga Fran of the word right now like that's that's what is right there is nothing like it or not it's langage we speak I'm not not a big fun because of the Lo loss of types obviously that's the reason why I don't really like that's encoding format and if you have the types it gets pretty cumbersome really fast so a very inefficient way to to bring the the the data around but it's it to me it was really obvious answer and uh if you look at it like a bit further not just looking at the Golding it also makes some of the features that uh typ stream can offer uh really obvious because if you are like doing a pipeline that it ends up into a web soet server it's a very by chance you want that stream to be Jason anyway yeah say that yeah that's why defaults to Jason right that's also that so in a way the state of the project is uh I think it's in a state where if we get some production users it will grow really fast from here because it's very it's very easy for me to imagine that once I get past the um the the the initial uh you know effort of getting it installed in production where someone would use it every day I think they I would expect them to use it 95% of the time because this is what I missed 95% of the time when I work of course I'm one person and then you know that's not how data works like you know I as a sample of one but I do believe and I I I have the feeling you agree with the with the basic the basic metaphor holds up really well for yeah yeah I think I think you've got uh you've got you've really hit on a seam of a good design idea to mine and you've got a lot of mining to do but that but you don't have a lot of design work to do I think and that's a huge accelerator that those design problems there's really difficult search space problems being solved on which note I should probably go and leave you to pick up your pickaxe and go mining down that seam of years you got a lot of code to write yes yes and a lot a lot of Dos yes a lot of docs to write thank you very much for joining us luuka this fascinating idea thank you thank you very much thank you thank you Luca I kind of have to say I think that's the most time I've spent thinking about pipes with an Italian since Super Mario Brothers sorry Luca if you're interested in giving typ stream a wh check it out at typ stream.io there's a link in the show notes it's going to be a while before they have full support for S and orc but what they've got right now is a useful tool and also an interesting design study I think it's also worth taking a look at new shell which we mentioned briefly I'll put a link for that in the show Notes too but if you're looking for a new shell or New Shell ideas search for NU shell and with that I think it just remains for me to remind you that if you've enjoyed this episode please like it rate it share it hit subscribe because we'll be back next week with some more thoughts on how we can build the future of computing sometimes with inspiration from the past until then I've been your host Chris Jenkins this has been developer voices with Luca Pete thanks for listening