today we're going to be going over a very important feature in Python and this is called decorators and decorators just make adding extra features to functions a lot easier and a lot more versatile so let's go over how we can create our own custom decorator and see how this will improve our code in the future so to get started we're going to import from Funk tools the wraps module and I'll explain later why we need this and we're going to import from time the performance counter and the sleep function so we can simulate some fake API requests or something that takes time to create a calculation now we're going to use the property wrapper to time a certain function that we're going to create and the function that we're going to create is going to be called do something and it's going to take a parameter of type string it doesn't matter what the parameter is it's just to show you that we can include parameters and we'll add a doc string that says does something important and under that we're going to sleep for one second and we're going to print the parameters or actually the single parameter that we have now to make sure this actually works we're going to go ahead and create this check and say do something with the parameter of hello and if everything goes according to plan we should have hello printed after one second in the console so right now we didn't do anything new all we did is use the sleep function and print the parameter that we decided to include in our function now what we want to do is create a way to time this and this is going to be through decorators which means we can use this decorator on any function that we want to time and to do this we need to go ahead and create a new function and here we're going to go ahead and call this death gets time and that's going to be the property wrapper name and it's going to take a function as a parameter and inside here we should add a doc string that says times any function now inside here what you would usually want to do is create a wrapper and this wrapper can take some arguments or it also can take some keyword arguments and I'm just going to add these keywords here what this means is that anything we decide to include into the function here whether it's one parameter or two parameters or some keywords it's going to transfer it over here so we can use those inside the wrapper there's no way of knowing exactly what we're going to get inside the wrapper but what we will know is that if we go ahead and apply this decorator to the appropriate function we'll be able to extract this parameter and it will go inside here but I'm going to demonstrate that with the code we're about to write so here we're going to go ahead and get the start time and we'll create a performance counter which is the equivalent of using time dot time but a bit more accurate now the function has to be inserted here with the arguments and the keyword arguments so inside here we're going to go ahead and add the arguments and the keyword arguments and after we run that function we want to go ahead and get the end time which is also going to be a performance counter and as you can see you can add whatever kind of processing you want inside the wrapper and this will modify the original function now let's go ahead and get the total time so we can actually measure what we're doing and that's going to round the end time minus the start time to two decimal places and all we want to do here is print the time with the total time in seconds and it's very important that we actually return the function so go ahead and return the wrapper and as you can see it was simple as that to create a decorator we just need to make sure we have a wrapper that we can use inside and with that being done we can go straight to our function down here and we can go ahead and say at gets time and it will be applied to this function over here and we can apply this to any function that we want so now if we go ahead and run this program it's going to say it took one second because it had a one second delay and it calculated that for us now the reason it's important to have the arguments and the keyword arguments is because if we want to actually use what's inside there we're going to have to extract them so if we go ahead and extract the args and the keyword args you'll see that if we decide to add some random parameters here such as a list of type list and then we add it to our function here we say hello three you'll notice that when we run the program it's going to give us all of the arguments that we decided to add and the keyword arguments that we decided to add and here we then add a keyword argument so we didn't get anything back but this is just used to extract all of the arguments that are inside the function that we are currently using The Decorator on but let's go ahead and undo all of that because we don't need that and that's pretty much how you create a decorator but that still leaves us with some unfinished business and that is what are we doing with the wraps from the funk tools module and we use this to avoid a bug and I'll show you exactly what that bug is so as soon as we go down here you'll see we have our function that says do something and if we go ahead and print the function name we say do something dots standard method name you'll notice that we will not get the correct name back we're going to get wrapper instead of do something so right now what it's doing is transferring the name to the wrapper and that's not what we want we want the correct name for do something and this also applies to the dog string so if we ever have to use do something dot doc it's not going to give us the correct documentation for the do something function it's going to give us the documentation for this wrapper here and there's nothing there so it's going to return none so what reps does is allow us to transfer the data to the actual function so now it's going to wrap our function and it's going to give us the correct data for our function so if we rerun this program for example we'll get that the function name is do something and that it does something important and that's exactly what's inside our do something function so to sum up this video decorators are an extremely powerful way to to add some extra functionality to your functions in a very generic way and you can use this for absolutely anything that your imagination allows you to I definitely recommend you play around with this because I mean it can save you a lot of time instead of having to create a function that says get time of this get time with that you can create a simple decorator that gets the time or that modifies the function in a peculiar way but with that being said guys that's actually all I wanted to cover in today's lesson so as always thanks for watching and I'll see you in the next video