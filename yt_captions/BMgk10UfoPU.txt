in this video I'm going to be covering one of the biggest misconceptions that a lot of beginners have in Python and even some of the more advanced python users still make this mistake because it's not something you learn that early on in Python I mean if you study everything correctly maybe you will learn it but it's something very easy to skip when you are learning python because python is a language accessible to everyone which means that even my grandmother can start programming in Python with very little studying it's not necessarily a language a lot of people specialize in so they miss a lot of the important points so what I'm going to cover today is something that has to do with Imports now when you import something you can choose to either import the whole package by using the package name or you can import certain functionality from that package so you can say from numpy Imports and here we can say num array in case we want to get a number array from numpy now if we use this we can use it just as it is and we can do whatever we want with it we can use that functionality from the numpy package so what is the big misconception here well the biggest misconception here is that you use this syntax to save on resources you want to save on memory so you're just importing the functionality that you need this is not the case in python as soon as you import from a package it's loading the entire package into memory this syntax here just makes it more specific it shows the program or the programmer that you're only using this function which really helps with namespace clashes because as you already know that if you were to create a function called let's say square root which is very unlikely but if you did and we have that there and you were to import or not just import but we're going to import from math everything you'll notice that the square root might shadow that because math does have a square root method built in so if you call it before the function declaration it's going to work just fine it's going to use the one from this package but if you call it after it's going to use the new one so you can have these clashes when you are using the asterisk so in general when you import specific functionality it does not save on resources it just makes your program much more specific in terms of name clashing now if you are curious to actually see this being done in practice to actually see the memory being used by importing the package you can follow along with the rest of this video because I'm going to show you that if you were to import numpy or if you were to import certain functionality from numpy it's going to use the exact same amount of resources so to do this we're going to import OS and from PS util we're going to import process and that's going to allow us to measure the memory of the program before we did something and after we did something it's not going to be incredibly accurate just accurate enough to show you that there is a major memory difference and since you probably don't care about how this works too much I'm going to copy and paste this in so the first function we have is going to be something called get memory usage and it's going to create a process and it's going to get the ID of that process then it's going to measure the memory info for that process so as soon as we call that we're going to get the current status of the memory below that I'm going to create a function called memory before import which is of type float and it's going to get the memory usage so this is where we're going to start everything this is the program in its basic state immediately after that you can play around with the import syntax so we're just going to import num Pi we're not even going to use it we're just going to play around with that then the next two variables we're going to create right below that are the memory after import variable which is a float which gets the memory usage once again so that's the memory usage after we create the import and the memory difference which is the memory after import minus the memory before import so we can see the total memory difference between before we imported it and after we imported it and finally I'm just going to print the information in a readable format so here we have before the import it's going to take the memory before import and it's going to format it to two decimal places in megabytes then we have after the import and the difference so I'm just going to run that as it is and I ran the wrong file apparently so we're going to run Main and this time we're going to see what happens before the Imports after the import and the difference so before the import the program was occupying around 16.67 megabytes of memory after the import it occupied 34. so the difference was 17.44 and with this get memory usage function this is not guaranteed to give a perfectly accurate number because a lot can happen during a process so if we run that again it might be something higher it might be something lower there can be a lot going on during a process but this is us importing the entire package what happens if we import only a single variable from this package or we can say from numpy we're going to import Pi so this is a variable we're just importing a variable here and you know what's going to happen when we run this we're going to get something equivalent it's still loading that into memory and again this is not going to give us a perfectly accurate number because a lot can happen during the process but as you can see it's not saving on resources this just makes it clearer to the program and that's something that is so important to understand in Python because a lot of people use this syntax without understanding that they're not saving anything in terms of resources but once again the bright side of using this kind of syntax is that you are specific with your programming and that can really help with avoiding name clashes but anyways with all that being said that's actually all I wanted to share in this video so as always thanks for watching and I'll see you in the next video