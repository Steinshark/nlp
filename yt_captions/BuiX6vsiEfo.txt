my setup here on the left i have my text editor and i have my file set up called hello.c and on the right i have my command line for linux my assumption here is that you have a little bit of command line familiarity for linux but if you don't it's okay we'll be walking through it step by step so that you can you can learn as you go um so i already have the c compiler gcc installed on my computer if you don't have it you need to type on a debian system so linux so ubuntu or debian or anything like that is sudo apt install gcc and the way that you can confirm that is by typing g c smooth gcc hitting enter and you should get this big error message that says that you didn't provide any input files which is the correct output and then to clear your terminal you can hit control l and that'll clear out the screen for you to get a nice clean terminal setup then over here on the left we're going to start coding right so we're going to talk about line by line what's going on to get your hello world set up so the first line is going to be pound include that and see is called a preprocessor directive if you don't understand that it's okay just there you go pound include um the less than sign and then the greater than sign inside of that you're going to type stdio.h so what this line does is this gives the compiler other information about functions we're going to call like printf and puts that we don't write so for example at some point we're going to call this printf function but we're not going to define printf the question is how does it know where printf comes from it comes from standardio.h right so we include it to let the compiler know where this other function lives okay so then hit enter just for stylistic stake right and then line three we're going to declare a function right and in c there needs to be a main function right we can actually prove that there has to be a main function by trying to compile this code right now and we'll actually get an error the way we're going to compile our code is we're going to type gcc space and then we have to specify the name of our c file for me it's hello.c for you it can be anything it could be potato.cat.c it doesn't matter as long as you it's a file that you wrote so gcc hello dot c and then tac o for output name and then we're gonna specify the name of the file we want to produce which is for me i'll call it hello you can call whatever you want hit enter and we'll actually get this huge error message and what's going on here is the compiler is walking through your code and trying to assemble your program but it gets to the very end of the process and it says hey i don't know where maine is you never defined main for me so the linker threw an error which is good output that means that our compiler is working well we just didn't give it the things that it needs right so we need to create this main function and the way that we do that is with this line right here so what we're going to do is called a function declaration when you do a function declaration in c first you specify the type that it returns and main is expected to return an integer type or an int so we type that first int and then we type the name of the function which is main and we do open and close parentheses and then within these parentheses we type out what kinds of arguments the program x or sorry that function expects for the sake of simplicity we're going to say that main expects no arguments so we're going to type void that actually isn't true but we can lie to the compiler like this and it won't have any negative effects on our program okay so now that we've declared what's called the function header we are going to now specify the contents of the function the way we do that is we do a curly bracket open and a curly bracket closed we'll hit enter and that'll make room for us for our function right so line four and line six is the beginning and the end respectively of our main function right all right pretty straightforward so now we're going to be able to type the contents of our function right when main gets called what happens um and in this case all we're going to do is call this function called printf and when we do a function call in c right so before we declared a function now we're calling a function you type the name of the function which for us is printf and then you do an open parenthesis and then you specify the arguments that are going to go to this function right and what we're going to do is put in the string hello world period and then we want the program to look complete or pretty when we run it so we need to make the computer basically hit the enter key and the way we do that is we insert what's called a new line by specifying backslash n right so that that's the same as the that's the same as the computer hitting the enter key so we've set up our call to printf and then at the very end we put semicolon so if we run this program right now line five will call printf on hello world and it should output it to the screen right and then finally before we compile this and run it to see that it worked we need to specify the return value of the program right because like i said before int main expects an int to be returned integer and what the integer returned from main actually represents is the status or the exit code in bash the zero value is common because it's actually the way you tell the shell bash over here that there were no problems right if you returned negative one or negative two that's a way that you could tell the user hey i had this problem or that problem during execution but for us because this is a very simple problem or a very simple program and there are no error states we can just return zero cool so this is our code let's walk through it line by line one more time include the standard i o header so that we know where all these other functions like printf come from right then we're going to declare our only required function in c which is main and main is a function that returns an integer type and takes no arguments start main within main we're going to call the printf function which prints things to the screen and what we're going to print to the screen is a string hello world period and then the enter key end the string and then we need to put a semicolon at the end of our line right because c is a semicolon delimited language and then finally once we've called the printf we returned from it we're going to leave the main function by returning and the value we're going to return is zero which lets the shell know hey there were no problems and that with a semicolon and then end main that's really it this is the hello world program in c so let's go over here to the right and test it so we're going to control l to clear the screen and then it's going to be like before right gcc the name of your file you're trying to compile so for me it's hello.c and then you're going to output the hello program right so attack oh you can name that whatever you want you can name it pig you can have a potato it doesn't matter you have to name it something good so we've got no errors we can actually ls this and you'll see that we have our c file that we typed and then the program that we created and this should actually be an elf file which is the executable and linkable format which is the executable file uh type for linux and then we're gonna run it so to run a program in linux you do not slash the name of the program and you hit enter hello world perfect um and we can actually see remember how i said that the return value from main goes to the shelves you know if there is an error in your program you can actually check out that error code by typing echo dollar sign question mark zero so what this does is this is echo the program which just says print something to the screen in bash and this dollar sign question mark is the bash variable for the return value of the previous program we can actually test that by turning this to return negative one as a little experiment right so that we do gcc hello dot c tac o hello no error code cool no no compiler errors um dot slash hello we should get the same output but if we echo dollar sign question mark we get 255 which is actually the maximum value because this is a negative one i know it's a little confusing that you can return in c anyway guys i hope you enjoyed that i hope you learned something if you did drop a comment drop a like let me know what you want to see next keep on learning and enjoy the rest of your day bye