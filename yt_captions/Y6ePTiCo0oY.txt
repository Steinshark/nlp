what one of the interesting things i guess about me was i wasn't absolutely sure i wanted to do computer science until i did it for the first time i always had an interest in programming i'd done a bit of programming not a lot not a lot of programming but a bit of programming before i came to university but once i started university i really really enjoyed it i love the programming i love learning about cool new data structures that just for some reason made the same job way easier than it was before and you know and loads of cool stuff like computer vision and you know graphics computer graphics and writing games and things and you know i was kind of hooked after that and then i started you know programming in my own time at home for fun uh question from me rather than the viewers then where were we where would you have gone if you didn't well yeah i i considered a i considered a degree in physics i considered a degree in biology because i found i find life sciences and stuff really interesting i absolutely no idea i think probably biology because i think you know the natural world is kind of cool but um but heck i've sort of found found my way into interface you know i do lots of plant plant imaging and stuff like that so i've kind of got both now we have asked for a few questions from some of our viewers and uh i'm gonna pose them to you if that's all right sure yeah okay so the first one is how did you specialize how did you get into doing what you do so maybe we need a little line on what it is that you do first yes i study computer vision so that is taking pictures and trying to get computers to understand pictures kind of like we do now my specific area is kind of more applied computer vision to do with sort of plant phenotyping medical imaging these kind of things so how i got into this i guess i guess it goes all the way back to towards the end of my degree and i was deciding whether i wanted to stay in academia or i wanted to leave academia and go into industry which of course is kind of the two choices i was posing myself i was always going to stay in computer science because i really enjoy you know programming and things but i i sort of i asked around to try and work out what it was like to a phd and also but also it was quite important to me what was the impact of doing a phd on my possible career in industry if i decided not to take it any further than that you know could i do a phd and then get the benefits of that and then actually just go into industry anyway and the answer was yes you're not going to get three years of industry experience and move up the ranks but you're not going to get worse off you know i think and i think that some places really respect a phd so that's always good as well so i just kind of started doing one you know and i enjoyed computer vision when i did it as undergraduate projects and i did it you know in the lectures and the uh courseworks that we did as an undergraduate and so i ended up just sticking with that and you know here i am i didn't leave after my phd that's the thing and i'm still here somebody's asked uh why would you want to do a phd yeah i i that was the same question i asked myself a phd is not necessarily what everyone thinks it is in in the very simplest terms a phd is a long long project a bit like you would do sort of for an undergraduate dissertation but it's much more focused it's much more in detail because you've got that much more time and obviously the level is going to be a bit more advanced i think that if you enjoyed the project and the research parts of your uh undergraduate degree then a phd would suit you quite well right if you just like to practical stuff hands-on building something then you will do some of those things in a phd but you know it's a bit more research oriented obviously if you want to go into academia then a phd is going to be at this first step in that process but even if you just want to go into industry a phd will give you some specific skills like the ability to learn the ability to write well-presented documents and sometimes also to give good oral presentations as well you know because you do a lot of those things during the time so you know you'll learn lots of really great skills and of course you know if you're doing a phd in computer vision or deep learning or something you'll learn a lot about that specific area which will make you a world expert in that area which you know might be useful for whatever you want to do next that brings on to the next question because with all that learning and academia how do you learn about different topics somebody's asked it's a good question actually because i'm not absolutely sure i think that it's practice for me i think that when you're an undergraduate it takes sometimes quite a long time to learn different topics and so you can have to work do quite a lot of revision for a given exam or something like that to really make sure that you know it um one i think a phd there's a lot of self-directed learning you've got to read a lot of papers you've got to take on a lot of knowledge very very quickly and i think you do get better at it and so now i can read you know papers or you know wikipedia articles or news articles and pretty quickly work out what's going on and i think it's just practice and experience um so keep at it i think and it's a useful thing to have and it's something a phd will give you um because then you can you know do lots and lots of different computer files having learned lots and lots of different things i know that you do quite a bit of deep learning stuff in your work somebody has asked how the architectures for these you know googlenet leonard alex net how were they designed how do they come up with those it's a very good question i think so but general the general way most people hear about these because they get released in publications and so obviously the question is about how do the original authors of those publications come up with some new architecture if it does something a little bit different to what happened before that maybe performs a little bit better um i think there's a lot of different things sometimes it's intuition and you know you're an expert in something and you know that it works a certain way but if you change it this way maybe you'll see an improvement and it won't always work but sometimes you will see that improvement alex net and lynette they're sort of early examples of deep networks so they were kind of pioneering but in some sense also quite simple architectures because that's what we had back then um more you know more recently you know things like that then is what in 10 years ago well you know not even that sort of 20 20 12 to 2014 kind of time so so really actually this is all very very recent so you see a lot of new architectures because of this because people are still coming up with new ideas so maybe you've got some you've got some data that you're trying to perform really really well on and you test it on some of these example algorithms and architectures that you've already seen and it works in some ways and not in other ways and so you have to try and instinctively think what is it that i could change about this that would lead it to perform better in these circumstances right and then if you want to get a publication on this then what you have to do is explain why it's better you know not only has it improved it but also why so that people can get some insight and maybe use those techniques themselves so it's kind of it's kind of trial and error a bit of intuition and you know it's a bit like normal science you're basically throwing things into a test tube and seeing what comes out i guess but the test tube is a deep network somebody's asked what do you think of formal methods formal methods i don't have a problem with formal methods i think people like torsten do an excellent job on formal methods and i steer well clear i think they you know they're very important in certain circumstances um but you know i don't tend to use them very often do you have any book recommendations for cryptography yeah so i always recommend ross anderson's book whilst anderson's been on computer file a few times and his book's really really good he's currently writing as far as i know a new version some of which might be available online if you want to check it out if it is i'll we'll put a link in um but you know when it actually is released you should definitely get that book because it has a whole you know whole lot of information on cryptography but also other parts of security engineering which are really really important if you want a more detailed look at cryptography specifically and sort of skipping over some of the other aspects of computer security then something like cryptography engineering by niels ferguson and others another option if you're interested in going sort of from the basics to some quite advanced cryptographies um is introduction to cryptography by christoph parr also he's his lectures are online on youtube so you should check them out as well the question here about uh how people in industry can keep up to date with what research has gone in academia so some industries they're very clued up to what's going on academia particularly those working in ai because you have to be everything moves really really fast and actually a lot of industry is producing papers and putting them into the major vision conferences for example so so as an example suppose you wanted to be you know you work in industry and you wanted to be kept abreast of what the latest ai research is going to is going on then you'd want to be keeping an eye on you know things like eurips and cvpr and other big conferences where some of these big hitting papers are going to appear right and i mean one of the downsides is they can produce they can publish thousands of papers and so you've got to be able to be quite selective in what you read because you just couldn't possibly read them all so you've got to look for subjects you're interested in and i think this is also true of most areas so computer security has conferences and and um and journals and so on that are going to release some of these uh new attacks and new uh explorations of security and the this is a place where you would read about these things um so you just have to do a bit of reading around get used to reading the abstract to work out if you want to read the introduction to work out if you want to read the results you know this kind of kind of filtering system but this does work both ways you know from an academic point of view one thing i've noticed is that we tend to we tend to be a little bit haphazard sometimes with our software development right because it when you're doing research code you're coding very very quickly and one experiment doesn't work one minute and you've changed to another experiment and you just no don't worry about that some of the things that you have to have done like proper testing and things like that we you know we don't tend to worry about that too much in research right we will test we will validate our approach you know on the data but in terms of robust robustness you know for security for example i don't worry about that in my deep learning models because it's not important to my research but if you were going to build that into a system that would be more important so some knowledge of how you would might go about doing that is going to help if you want to get industry using your academic work or you want other researchers to take it and run with it you know if your code is really really difficult to use it doesn't matter how good your paper is right people are going to it's going to slow uptake so actually i think some good industry best practice is going to help you know especially when you release your code alongside a publication so in your specialist area image processing what what tools do you use my work is kind of applied so i'm interested in like the whole pipeline from you know image capture all the way to uh some decision or something you know some some meaningful information and so if you image capture you either going to use proprietary drivers from the manufacturer or i might use something like opencv which has a lot of drivers for you know and can do most simple camera capture pretty easily and has a lot of it's a library that has a lot of image processing routines to do simple you know you know thresholding and segmentation and edge detection and things like this right so you can get things done quite quickly a lot of what i do now is python centric and so opencv works in python and that also is where we do our deep learning as well i use pytorch but and and a lot of our lab uses pi torch i think mostly just because it's helpful for us to use mostly the same thing because that way we can work together on stuff but actually you know there are lots of labs using tensorflow and it's it's fine you know um i think you just pick one and run with it um if you know one you know most of them you know in the way they work so yeah that would be where i get started and then you know things like um scipy and things like these are gonna have lots and lots of algorithms for doing some of the other machine learning and stuff that you might want to do as well what's your favorite cipher we did the video on the fiesta cipher right i think that's amazing the first cipher on its own i guess is not an actual algorithm i suppose if i had to pick one then i'd pick probably aes because i think it's impressive how widely used it is and it didn't come from a huge lab with you know with huge resources or a huge company like ibm so i think that's pretty cool but the first life is the best potential controversy where do we draw the line between national security and privacy how long do we have um that's a really good question i think that i'm more relaxed about this than some and less relaxed than others so you know most of my family don't worry about this kind of stuff at all you know they'll install any app no matter how many money permissions it asks for um i won't but on the other hand i understand that maybe governments have a role to play in preventing certain things from happening and you know i'm kind of okay with that to an extent as well so i think the balance we're striking at the moment is not terrible i think that you know we have some encrypted apps that they they're not reading um but if you're doing something really bad they have ways you know to be able to work that out and prosecute you for that right and i think that's probably a position i'm okay with um but i don't think it's an easy question i think that you know sometimes governments overtread and sometimes they didn't have enough resources and something happened that shouldn't have happened you know um so i don't have all the answers um yeah but that's kind of my opinion it sort of links nicely into a question someone's asked about encryption and whether it has backdoors and whether we can trust things like signal yeah so i think you can trust signal not just because it's open source but i think that it's unlikely that signal's been been compromised and i think that's probably the prevailing opinion of most security researchers i think that from a business point of view let's suppose you're running you know a big instant messenger um it's it's better for you not to have government back doors because they are only ever going to be pr nightmares for you right um it's easier from a sort of legal point of view when someone does something bad on your platform if you can say i couldn't possibly have read it right so actually from a business point of view i think they benefit from this end-to-end encryption i do think that governments will quite like backdoors in some of these things and probably ask uh but you know whether or not they're granted i i doubt in most cases but i don't know but there was a suspicion of things like elliptic curve yeah yeah we did a video on that and it probably was true and then there was logjam as well i don't know did we do a video on logjam if we didn't i'll do a video on logjam um very cool but yeah there are there are attacks from government agencies on you know standard uh encryption and things like this because through that they can better perform their job right now sometimes people will think they overreach right that's the the previous question i was talking about i think in general most attacks are done on end devices and not on the actual lines of communication between the two i think if you wanted to hack someone if you thought someone was doing something they shouldn't have been doing on signal it would be easier for you to hack their device or hack the device at the other end than it would be for you to break into signal itself and i think that's probably what they would do so again i'm going to link these two questions together because they feel like they're sort of polar opposites but what is the first project you're really proud of and conversely what's the worst piece of code you've ever written yeah i mean it's important to note here that i write plenty of bad code right so does everyone no one is immune to this um i i did once write a piece of code that i found later um i actually i tweeted about it at a time where it just said to do schema validation and i just left it blank so it didn't do anything i'm sure it was fine uh it probably worked so you know that was that was the research with me going that's something to do sort of professionally later to make it tidy but right now my research code is working i'll just just not worry about it you don't get jobs in industry for acting like that i guess the proudest thing so i've done lots of things during my academic career that i'm pleased with from a software uh point of view um when i was doing my phd i wrote an implementation of the early stalk probabilistic parser which i was really pleased with so dave's done a lot of videos on grammars a probabilistic context free grammar is one that has probabilities attached to different branches and so there's quite a lot of computation to do with what the likelihood is of certain you know ambiguous things happening and this was useful for part of my research let's let's not go into it but i had to implement this and it took me a good month or you know each day um because i was working on my own i wasn't familiar with with the literature um but by the end you know i was really pleased with myself now i don't know how long it would take me now hopefully a little bit shorter right i've learned some things but i don't know it was i didn't find it easy right so i was really pleased with that so how would you get started on a career in data science or machine learning i mean there's a few different ways a master's isn't going to hurt especially if that's the kind of thing that the jobs you're applying for are asking for but to begin with i think you need to start trying to learn about there are lots of online courses on this kind of stuff and you need to try and learn about the standard methods for you know traditional machine learning feature representations dimensionality reduction cleaning data all these kind of standard techniques that you're going to need to learn about and become very very familiar with them by running through tour examples and doing this over and over again i think again it's practice you've got it you've got to practice these things a bit like practicing other kinds of aspects of programming so that you can do them quite quickly and i think if you can demonstrate those things you're going to be a strong candidate for a job in this area do you think that it's a good idea to variety specialists to pursue certification and to follow standards standards yes i think standards are very important um you know i'm not coming at this from industry bear in mind so you know uh i'm an academic with a a view into industry who's sort of making the best effort he can um i think that standards are very very important and good knowledge of standards is very very important in fact comes with a certificate i don't think that's a bad thing i wouldn't seek out certificates for certificate at stake in the sense that unless your job requires it i don't think that having some label is necessarily going to help if you can already do that you know when i'm hiring people for an academic position i'm really interested in what it is they can do rather than you know how many different things they've got down on paper you know so um if you can demonstrate that you can do something that's gonna it's gonna be really useful to me you know even if it doesn't come with a certificate somebody's asked do you think that encryption can always outpace decryption is that right yes probably i mean famous last words um at the moment we have encryption that operates in fractions of a second that would take you know trillions of years to decrypt so at the moment very much that's very much the case obviously i can't account for a new weird type of computer that might appear but i i think so yeah i think that jumbling things up is easy of an unjumbling them a bit like mixing paint right we you know we talk about this in different helmet and stuff there are some problems but are much easier in one direction than the other and while they still exist i think we'll always have a good place here so i'm quite optimistic actually about about things like this i think that people's security is getting better overall you know we see breaches and leaks and stuff all the time and it's very important that we deal with these but you know 20 years ago nothing on the internet was encrypted at all you know and all your passwords were out in plain text every day and we didn't bother zen we were fine um but it's much better now so i think we are definitely moving in the right direction what's the best website to go to for computer security research okay youtube.com computer file i i'm not absolutely sure there's a few um my i guess if you had to pick one apart from obviously reading through wikipedia you know which actually sometimes is is people complain that wikipedia you know it's difficult to source it and things but actually a lot of their security articles are very good so you know read those so the open web application security project or o-wasp or o-wasp i don't know it seems to be a a kind of like a wikipedia for security right and i found that really useful and it has very detailed articles so that's a really good place to go and also you can follow the um blogs of big you know security researchers like ross anderson bruce schneier and so on and they'll be highlighting you know new papers and new developments and interesting things in the news that have happened so that's worth a read as well we want to do is move these things around and permute them so if this is our data path with our columns by sharing bytes around the different columns when we combine it with the mixed column step which we'll do in a minute you'll see that actually we're mixing everything up and it does kind of make green this is a bit orangey let's not critique me too much so yeah