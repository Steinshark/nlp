all right migrating Netflix to graphql safely please the algorithm loves it just make a comment I need you to in 2022 a major change was made at Netflix's IOS and Android applications we migrated Netflix's mobile apps to graphql with zero downtime which involved a total overhaul of the clients to the API layer I wrote Falcor for iOS my code finally got deprecated six years after I wrote it oh until recently an internal API framework fell Gore let's go falgar look at that look at that look at that falcore look at all them Falcons I wrote that look at that fair car look at that look at that Falcons right there uh let's see powered our mobile apps they are now backed by Federated graphql a distributed approach to apis where domain teams can independently manage and own specific sections of the API doing this safely for hundreds of millions of customers without disruption is exceptionally challenging especially considering the many dimensions of changed involved this blog post will share broadly applicable techniques Beyond graphql we used to perform this migration the three stages we'll discuss today are a b testing replay testing and sticky canaries dude by the way all great stuff in here okay all right migration details before diving into these techniques let's briefly examine the migration Plan before graphql monolithic falcore API implemented and maintained uh by the API team yes Legacy API monolith I like how we use the term monolith always in negative terms I mean like even The Witcher they're all upset about these monoliths what the hell is going on okay by the way I'm only on a couple episodes in so no spoiler alerts I still have no idea what's going on I feel like Charlie Day and Always Sunny in Philadelphia with all the red things trying to figure out what the hell is happening in Witcher I have no clue what's happening um okay so I basically get this I don't really understand this graph in here but okay uh see before moving to graphql our API layer consisted of a monolithic server built with Falcor a single API team maintained both the Java implementation of falcore framework and the API server yeah yeah yeah I mean I wrote a lot of the initial Java stuff um created a graphql shim service on top of our existing monolith and by the summer of 2020 many UI Engineers were ready to move to graphql uh graph wheel instead of embarking on a full-fledged migration top to bottom we created a graphql shim on top of our existing falcore uh appy the graphql shim enabled client Engineers to move quickly onto graphql figure uh figure out client-side concerns like cache normalization experiment with different graphql clients and investigate client performance without being blocked by server migrations to launch phase is one safely we used a b testing who here is familiar with a B testing I assume everybody is that's like a hot button word from like 2009 is everybody familiar at this point I mean is there anyone here that's like what the hell is a b testing why is steals card in the description what the hell are we talking about what the hell are you talking about uh all right uh okay what about uh C testing you know you know okay deprecate the graphql graph wheel shim service and Legacy uh appy monolith in favor of graphql services owned by domain teams okay look at that we're slowly getting them out we didn't want Legacy falcore API to linger forever so we leaned into Federated graph wheel to power a single graph wheel uh API with multiple graphql servers we could also swap out implementations of a field from graphql shim to video API with Federated directives to launch Phase 2 safely we used replay testing and sticky canaries testing strategies a summary two key factors determined our strategies functional versus non-functional requirement I did I item potency or I dependency I dependency I can't tell are you Canadian or not that's really the test here is how you say this is your Canadian level okay so if you're really Canadian it's I I dependency right but then if you're not it's item potent but I don't know how to say it with this you know what I mean so uh so what this effectively means is that if you call a you get B back and if you call a again you get B back and if you call a again you get B back right item ponies I and Them Ponies uh that's all it means is if you pass in something you should get the same thing out just think about like a map right a map if you if you store x with some key and you pass in some key you always get x x out at some point like until until you change the key you will always get x out right uh so that's what that means item potent right it's just a big ass fancy word um okay let's see we could replay the graph wheel queries or mutations that requested non-ident Fields true this is fact right so so what they're saying is that you can't actually test this if what you pass in requires big changes so if I ask for say just a video ID I should always get the same thing out maybe right I mean you should but you know things happen underneath the hood and and stuff changes underneath your you know underneath the hoodwear when you're doing these tests it can actually like come back to bite you it's a little tricky it's a little tricksy so replay testing I think you get a lot of like you can get you can kind of sneak away with this we definitely couldn't replay a test non-functional requirements like caching and logging user interactions in such cases we were not testing for response data but overall Behavior so we relied on higher level metrics uh based testing a b testing and sticky canaries so a b testing would be your best possible way to really tell if things are going good right so even if you use core metrics what happens is if you just use like just basic core metrics and you're both and you're going if streaming starts to dip in one and not the other you probably effed up right long as you have a sufficient sample size yeah f'd up right and so that's why they do this and sticky canaries just mean uh a canary that sticks around for a long it's a feature Branch it's just a long ass feature Branch right tool a b testing Netflix traditionally uses a B test to evaluate whether a new product features resonate with customers this is not this is not actually true this is not a good uh statement sorry Netflix blog uh in 2016 I was using a b testing to test all sorts of stuff 2017 I was using a B test to test we use a b testing I bet you more a b tests are used to test whether or not uh what you're releasing Works versus not right we do it all the time I do it all the time phase one we leveraged the a b testing framework to isolate user segment into two groups totaling one million users the control group's traffic utilizes the Legacy Falcor stack while the experimental or experiment population leveraged the new graph coil client and was directed to the graphql shim uh to determine customer impact we could compare various metrics such as air rates latencies and time to render great so now we can get uh what is called appqe qoe quality of experience metrics out we can see and we can kind of debate between the two which one's faster which one's worse is there anything because making users wait having higher error rates will cause a lowering in uh like they you know qualified plays or stuff like that we set up an A B Let's see we set up client-side a b experiment that tests falcore versus graphql and reported coarse grain quality of experienced metrics see quality of experience and the ab experiment results hinted that graphql correctness was not up to par with the Legacy system we spent the next few months diving into these high level metrics and fixing such issues such as TTL flaws or Cash Time To Live uh time to live flawed client assumptions Etc this would have been a horrible experiment or a horrible experience right like imagine combing through that you are experiencing 0.05 percent increased error rates across millions of people and now you have to go through and just like comb it out it's just the worst I hate those kind of errors that only exist in production due to the grand scheme of of what's it called of or the the grand amount of usage nature it is just the worst I've had to do it a couple times oh hold on one second one of the times that I had to do it that was just really awful was when we were doing this thing called Always fresh where like I'm constantly trying to keep the UI into like a fresh state so when you turn on Netflix you are always up to date you have updated information everything's really really good but there was like four different TVs that just didn't work in production and I didn't know why so now I'm like sitting there going okay how do I debug a production running specific TV I used a b testing of course uh but it was just so annoying because now I'm like okay so I gotta I gotta go in here and I gotta go and try to figure out why is this Philips TV not working and of course the answer was uh the answer was it was actually pretty straightforward which is effectively how I could tell if something was on or off was buy these we have like these resource metrics like is there networking uh are we rendering do we have CP do we have memory like what what part of the systems are on and off and this TV I was working with either they were all on or all off so when I do like this like background refreshing attempt they were all on so I'm like Oh we must be in the foreground therefore I will never refresh and so it's just like uh sucks huh yeah it sucked anyways uh high level uh High Level Health metrics a b testing provides the Assurance we needed an overall client side graph wheel implementation this helped us successfully migrate 100 of the traffic on the Mobile homepage canvas to graphql in six months so I think what they mean by high level metrics of course is that people are continuing to play stream starts uh aren't statistically different between the two groups of millions of people right and so long as they're not different then we should be able to say hey okay so they're able to continue to use the app identically therefore we're probably doing the same thing um gotchas error diagnosis with an A B test we could see coarse grain metrics which uh pointed to potential issues but it was challenging to diagnose the exact issue absolutely tool replay testing validation at scale the next phase in the migration was to implement uh re-implement our existing file core API and graphql first uh server video API service the file core API had become a logic heavy monolith with over a decade of tech debt okay okay why why you gotta be like that first off a lot of the stuff that was written was written in 2016 so that's like not a that's not a decade okay buddy it's not a decade second off second off I don't even think the I don't even think the iOS application is a decade old okay you're hurting my feelings right now you're hurting my feelings right now okay I wrote I wrote the iOS Falcor implementation in 2016 or 2017 or 2015. one of the two either way that's not a decade so come on why are you doing that why are you doing that to me uh so we had to ensure their implementation uh our implemented video API server was bug free and identical to the already productionized shim service we developed a replay testing tool to verify that item potent apis I love dude nothing makes you feel smarter than using big words but nothing makes you look more dumb than using big words but highlighting them I swear you can't do that you can't point out that it's a big ass word you know what I mean you can't do that you can't point this out you can't point that out you got to be like oh you know you gotta casually use it you got cash you know you don't want people to realize you're doing that you know because I'm up here a very loquacious individual up here talking to you guys about the specific the specificities of these things and you know you don't see me going like oh look who is this right you can't do that you got to get in there you know you know what I mean uh okay anyways how does it work replay testing framework leverages the override directive available in graphql Federation by the way overrides dirty uh this directive I every time I see override it just makes me Java 1.5 myself I like I I can't even help it I like shake and I 1.5 right there it's crazy uh directive available in graphql Federation this directive tells the graphql gateway to route the one graphql server to another take for instance the following two graphql scheme is defined by the shim service and the video Service uh here we go so we got one we got over oh override this one yeah baby you know what I mean I did just say Java 1.5 yeah I know the graphql shim first defined the uh certification rating field like the r or PG and phase one then phase two we stood up the video service and defined the same certification rating field marked with the override directive the presence of the identical field with the override directive and form the graphql gateway to route the resolution of this field to the new video service rather than the old gym service nice the replay testing tool samples uh raw traffic streams from mantis okay so if you don't know what mantis is uh just think of mantis like Kafka easiest way to think of mantis is just like big ass Kafka except for you get like this squeal like we call it mql mequel uh or uh I can't make it into squeal and queel right uh anyways so mql and it's like a sequel light query language such that you can select out out of all the events coming down the pipeline you can actually select information out right and so by taking that you can take all this information coming in and out and you can build like alerts off of it by uploading any of those things off to Atlas Atlas is like a real-time counter right mclell ebquil M quill the names mql if one of y'all says silly ass name again um anyways uh here we go with uh these sampled events the tool can capture a live request from production and run an identical graphql query uh against both the graph wheel shim and the new AP video appy Service uh the tool then compares the results and outputs any difference differences in response payload this is beautiful this is great I think this is a great little thing right here right McClellan I think this is beautiful right this is beautiful right here I I like these kind of things I I love this kind of stuff right here where you can actually like a lot of times I hear something uh another version of this which might be in some sense easier is called Shadow trafficking right so you can you can make a request and then underneath the hood it actually splits into two requests the two requests go in and then the two requests come out and then you compare the results of the two requests and there you go you got yourself like is it good is it bad are we actually doing it so Shadow traffic is kind of like another little uh way people do this kind of stuff um we do not replay test personal identifiable information better say that legally uh it is used only for non-sensitive product uh features on the Netflix oeue uh once the test is completed the engineer can view diffs displayed as flat and just on node you can see the control value on the left hand side commas and parentheses and the experiment values on the right hand side nice look at that not really sure what's going on here but fantastic we captured uh two diffs above the first had missing data for the ID field in the experiment oh okay okay oh yeah there it is missing it right there I don't know what's going on here oh that must be the encoded difference right is that like an encoded difference and the second had an encoding difference yeah should have just read on uh we also saw differences in localization data precisions and floating point accuracies [Music] oh my goodness that sounds awful that sounds so bad uh it gave us confidence in a replicated business logic where subscriber plans and user geographic location determine the customers catalog availability wins confidence and parity between the two graphql implementations enable a tuning config in this case where data was missing due to overeager timeouts tested business logic that required many unknown inputs and where correctness can be hard to eyeball yeah gotchas uh personal identifiable information and non-item potent apis should not be tested using replay tests it would be valuable to have a mechanism to prevent that yeah that's the hard part I mean usually so unfortunately with something like graphql and all that I don't think it uses it doesn't use HTTP in a standard way and so typically how this would work is that an item potent request should be a git request if you go to google.com theoretically you should always be getting the same result back out if you have the same input so long as your user time all the things they rank go in your get request comes back out the same thing a post request does some form of mutation so therefore you can't do testing against a post request would be like the the standard way you know what I mean manually constructing queries about graphql since they bastard uh since they they're like a bastard of HTTP you get this untenable behavior that you have to kind of like get request gets requests okay shut up you know what I mean manually constructed queries are only as good as the features uh the developer remembers to test we ended up with untested Fields simply because we forgot about them you know correctness the idea of correctness can be confusing too for example is it more correct for an array to be empty or null it's a good call uh or is it just noise ultimately we match the existing Behavior as much as possible because verifying the robustness of the client's error handling was difficult yeah I'm more on the empty array plan even if it takes memory just because it's such a pain in the ass to do it the other way around uh despite these shortcomings replay testing was the key indicator that we had achieved functional correctness of the most item potent queries the most item potent queries wait of most I've put a gun there tool sticky canaries while replay testing validates the functional correctness of the new graphql APS uh it does not provide any performance or business metric insights such as overall perceived health of user interaction are users clicking play at the same rates are things loading into uh in time before the user loses interest replay testing cannot be used for non-ident appy validation we reached for a Netflix tool called sticky Canary to build confidence feature long-lived production feature branch that's all that means that's all that all that means sticky Canary is an infrastructure experiment where customers are assigned either to a canary or a baseline host for the entire duration of an experiment all incoming traffic is allocated to an experimental or Baseline host uh based on their device and profile similar to a bucket hash uh a bucket hash effectively are always routed to the same place right uh the experimental host deployment serves all the customers assigned to the experiment watch our chaos engineering talk from AWS reinvent to learn more about sticky canaries beautiful Zuul is like our uh routing Gateway thing makes make stuff happen uh and the two cases of graphql apis we used a sticky Canary experiment to run two instances of our graphql Gateway the Baseline Gateway used the existing schema which routes all traffic to the graphql shim the experimental Gateway used the new proposed schema which routes traffic to the latest video API service zul our primary age Edge Gateway assigns traffic to either cluster based on the experiment parameters okay then we collect and analyze performance of the two clusters okay medium and tail latencies air rates logs resource utilization device qoe streaming Health metrics perfect look at that uh oh I don't know what's going on there but average latency something seems a little goofy right here look at that that doesn't look good CPU utilization oh oh no that does look good experiment look at that it's way lower what the what the hell we don't actually see what the numbers are but you can imagine it looks different we started small with tiny customer allocation for hour-long experiments after validating performance we slowly built up scope we increased percentage of our customer allocations introduce multi-region tests and eventually 12 hour or day-long experiments validating along the way is essentially a sticky canaries impact live production traffic and are assigned persistently to a customer kind of exciting right I like that hi YouTube stream it is a YouTube stream you can tell you can tell it's a YouTube stream see see we'll do that every now and then when sticky canaries was essential to build confidence in our new graph wheel service non-ident apis these tests are uh compatible with mutating or non-ide ident apis if I see the word independent one more ident I'm gonna I'm gonna lose it uh business metric sticky canaries validated our core Netflix business metrics had improved after the migration system performance insights into latency and resource usage helped us understand how scaling profile changes after migration gotchas negative customer impact sticky canaries can impact real users yep we needed confidence in our new service before persisting route uh persistently routing some customers to them this is partial migrated by real-time impact detection which will automatically cancel the experiment yep that's good yeah there's like we have automated Canary analysis so we have a bunch of incoming real-time metrics and it can make some sweet real-time math decisions and shut things off and stuff like that short-lived sticky canaries are meant for short-lived experiments for longer live tests full-blown a B test should be used yep in summary technology is consistently changing and we as Engineers spend a large part of our career performing migrations the question is not whether we are migrating but whether we are migrating safely with zero downtime in a timely manner at Netflix we developed tools that ensure confidence in these migrations targeted towards each specific use case being tested we covered three tools a b testing replay testing and sticky canaries that we have used for graphql migration this blog post of our migrating critical traffic series also check out my grading critical traffic at scale part one part two and ensuring successful launches great job look at the clappies 708 clappies okay imagine the level of clappies you could have on a post that's Global clappies right there well hey that was pretty good I you know the fun part is being able to know so much of these things right like I know all those things you know and so it's kind of fun reading these articles and going oh yeah okay okay in this case uh Prime is the biggest tool hi I'm the biggest tool how long does it take for Netflix to ship something like this uh from the start of the effort so this one was a multi-year effort uh not all not all efforts are multi-year like when I when I talked about that always fresh thing that I did earlier where I'm keeping cash is up to date that took two months right it's not huge right testing like testing and making sure as correct was the hardest part just because of the difference because I had the ship on TVs and TVs are notorious for being like all different right and so creating a really good abstraction layer has been very very hard I I don't know I I wasn't working on the team that did this and plus we are using Falcor so there was no rest we have not we haven't done rest in 12 years do you really have beef with Java Java is not great Falcor post mortem when uh no I'm too dead to do a falcon mortem the name is the falcorigen