all right there we go that's a marker okay note and rust friendship forever the n-a-p-i-r-s way I'm a nudist I see plenty of can't believe I read that out loud it's no secret that node.js Solutions are not so performative that's a new word for me especially if we consider a solution with a bunch of synchronous operations or vice versa we will we work with tricky multi-thread Solutions a good example is image processing or Cipher despite some performance issues node.js retains its reputation as a mainstream well moreover node.js tries to be more flexible a powerful node.js add-on functionality allows developers to write some node.js functionalities on C plus node.js with rust became popular last time I meant this technique because I will discuss rust programming language integration with node.js why rust it's a good question I want to provide some essential facts regarding rust briefly this is my favorite part about rust is that you first get to tell people why they don't understand how great rust is memory safe approach preventing memory leaks boom actually it doesn't technically prevent memory leaks always uh typesafe syntax control not sure what that even means no data races this is great issues owning uh to concurrency management programs are compiled no okay so when they say no data race they mean you can't read and write to the same location but you can still most certainly program in generalized uh race conditions if you're doing multiple requests for something and you need a value at the end and you goof it up because you weren't expecting a certain order that's still a race even though that's like I always have a hard time calling that race condition but it is a condition based on race programs are compiled in a ahead of time manner utilize and promotes zero cost abstractions oh it's my favorite phrase that's my face see that that's an iterator zero cost abstraction no resource consuming garbage collectors no jit compilers no virtual machine minimal runtime and memory footprint very good dependency management tool helpful compiler errors with clear and doable recommendations apart from that rust is multi-threaded friendly and it has much simpler syntax compared with C C plus plus absolutely uh you can find this regarding yup resource resource it's easy to see that rust integration described above is a bit difficult fortunately Evolution does not come to a halt today I'm glad to introduce to you a new animal to our technological Zoo technological meet nappy RS Snappy RS is a framework for building pre-compiled node.js add-ons in Rust you guys ready for this are you guys ready to build to look at this to look at it to look at it would you like would you want to look at it I bet you do I bet you do uh of course the article aims that to introduce you is it so how would you say this word I always say nappy but is it nappy is it napai is it an API I never know how to say this I never know how to say this uh as the easiest way to integrate node.js with rust the best way to do uh it is to provide nuppy napi nappy nappy and API NEP Alma what uh the best way to do this is to provide more complicated uh or complicated example than a standard one I will provide a node.js application that gets a file uploads and transforms it afterwards let's say it uh it is re let's see reducing the saturation the image operation above uh should be provided on the rust side but before that let's try some standard functionality package template first you need to install rust done second I recommend creating a new project with the following template Okay blah blah blah blah the Rust part all right contains all the information you need all right what are we getting here so here we go deny clippy all I always deny clipping so okay so cool so you can actually get this little nappy thing you can throw this on a function and I assume this is retrievable now from node.js right uh it's obvious to see the packages on and the other uh JS stuff because we are talking about rust and node.js integration contains uh dependencies like nappy RS CLI that allow you to build Solutions also pay attention to the following files index okay look at that a native binding but what's the native binding I just want to see that all right so I guess we're gonna have to jump in and we're gonna have to look at it really quickly I do want to see what this what all this is about wait how did I get here I don't want to install rest I I'm joking I don't want to install rust we don't want to we don't want to uh go to file index where's the native binding where's this so-called native binding um that doesn't this this doesn't feel fun native binding all right all right all right all right okay well it's that easy it's that simple okay so sure there might be something maybe we could you know maybe we could come up with something where we could name this all the same thing maybe and figure kind of maybe maybe we could figure out something that's a little bit better here I don't know I'm not sure I don't know I don't understand a lot of these uh requirements here so maybe there's like an easier way to do this you know what I mean maybe I don't want uh nappy RS anymore yeah maybe not that doesn't that doesn't look like a w right now all right uh do you remember rust plus 100 definition above no uh these lines precisely represent a bridge between rust and node.js okay contains oh nice it does the little oh look at that it does a little okay look at that little typescript generation I like it important note you shouldn't edit the files above they are Auto generated and changed every time rust definition okay simple test the following code illustrates how to run rust definition or Define function all right so we get it we run it and that's that okay let's do some image processing okay okay so we grab these things we do this whole blah blah blah blah the rough stuff we add image we throw in a generic view pixels do that darker file name saturation hit him with an image hit him with the dimensions what's the return value oh there is no return value what happens when expect what do you think happens when expect doesn't work like does it throw an error or does it like crash the whole node experience good questions here I would assume that something like a result should be returned if you wish to throw right this only the dimensions right it seems like a panic right um let's see applies this okay so we build it as a result we get index okay we get a new index all this and so now we get a darker okay this is pretty cool and now we can actually take a file and change it awesome I mean this is actually pretty cool this could be a pretty I'm just saying this could be pretty cool if it if it integrates with the result object and anyhow and I could like do stuff awesomely this sounds actually pretty cool okay or run the commands below if you want to reproduce the steps okay do all that stuff and look at that why is there why is there uh Alpha in this one there's Alpha in this one but not in that one weird I thought we just made it darker I thought we were just desaturating it uh does not have any kind of panic it should throw uh our Rust part is uh ready and it's time to implement a web application all right all right I love as as a service the final stitches all right let's go make storage folder under the root okay let's do that server yes yes this all looks good hit him with Express funny enough use the slowest web framework in addition to rust That's The Power of rust okay it even takes the slow make it fast remember that kids makes it fast makes it fast all right so there we go a bunch of no one cares about Express crap uh there we go reader does all this that sync get time render upload okay uploads blah blah blah blah where's the dark where's the darker thing darker darker darker darker darker darker darker all right darker all right so let's see file move file path if air oh so it does try catch it so I guess it does a try catch so so if if rust panics it must capture that how does that work to me that makes me think it's like spawning a process to do stuff is that what's happening that can't be what's happening that can't that can't be what's happening right hmm well I do want to play with this now this actually looks pretty cool Okay add a little start yep I don't want to explain uh many of the solutions above because it's obvious for node.js folks yep yep there's just two points uh endpoints upload and slash slash provides an upload forming a list of uploaded desaturated images uploads an image nice also please look at the desaturation all right exciting yep uh the fact that we take a saturation value from a request as a number it is a number but it can add some interesting things did you know that if you don't provide a saturation or an empty string saturation that will become a zero one of the benefits of using plus it only nands sometimes not all the times it's like hey which crazy version do you want do you want Parson which is crazy or do you want number casting which is also crazy you're probably thinking what do you mean crazy well let me show you okay look at this that becomes zero that's crazy 69 Foo that is a nan that's not crazy parse int that's crazy right so what kind of crazy do you want with integers I don't know I don't know what you want but you can choose what you want and then you can be happy or sad about it I don't know okay they both suck you know what I mean they both aren't awesome none of them make me happy foreign fact but parse and that does give a nan so like you could Nan a you know you know what I mean like it could happen pick your poison so if you really want a proper number function you actually need to use these both in conjunction or you have to check for the empty string if you want to use the plus you know what I mean but then if you use Parson you also have to check for that technically not a number technically number is not a number because if you think about the IEEE 754-1986 specification not a number is a valid representation and a 64 byte or 64-bit floating like thank you for thanks for saying that's a number I think we're all very happy about it now thanks thanks bro stop bowling JavaScript yeah uh storage okay so let's do this one so I don't know if we need to really look at anything else but this is actually pretty exciting I'd say in general I really do want to play with this because this is something that is like it's actually kind of cool the fact that you can just desaturate like that even though the whole uh the the the whole Alpha being messed up kind of it feels wonky but nonetheless this will be really fun to play around with I think we should play around with this at some point I would love to see what can you do in Rust like at what point is doing something in Rust great or not great how expensive is the bridge um because there is like some real huge use cases like right now I have this huge problem with memory right now and so you could imagine that if I could just send objects across a bridge into rust and actually do an aggregation of data in Rust and not in uh typescript I theoretically could make something that's both fast and yeah and uh and uses low memory because the representation hopefully remains in in bytes instead of that but we'll we'll see I don't know if it's actually any good it could be you know what I mean uh Rusty Bridge seems really bad yeah I assume a rusty Bridge seems really bad but is it I don't even know you know what I mean I don't know just a thought just a thought I have anywho kind of cool the name is the prime machine the hey the name's the primed the Primes