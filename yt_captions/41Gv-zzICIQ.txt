on March 21 1986 Ray Cox drove to the East Texas Cancer Treatment Center where he was set to undergo a regularly scheduled treatment Rey would receive 180 RADS of radiation for a tumor developing in his back just left it is fine five months later this gentleman was dead the East Texas Cancer Center incident was just one of six radiation-related injuries and deaths from 1985 to 1987. the common theme in all these events the therak 25 it's not easy to treat cancer treating cancer effectively has been a hard problem in the field of medicine for several decades the medical industry spends billions every year in research and development attempting to make cancer treatment more effective and less invasive in the mid-1970s the atomic energy of Canada Limited company or aecl developed a radical new double pass concept for electron acceleration the double pass accelerator allowed new Radiology machines to be more Compact and perform two kinds of radiotherapy in one machine x-ray therapy and electron therapy this two-in-one package made the newly developed their act 25 extremely attractive to hospitals as it was easier and cheaper than the original therax6 and their act 20. but there act 25 was the first radiation therapy machine controlled entirely by software previous versions use software to make the interfaces more convenient but still had Hardware interlocks to operate the emitters on March 21st 1986 Ray Cox entered the East Texas Treatment Center to receive his 180 RADS he was taken to his room where he laid under the theraq 25 base down the operator entered the control Bay where she quickly entered the prescription data to the therax25 user interface Buzz x-ray therapy was more common the operator accidentally input X for x-ray she quickly noticed and having operated this machine for more than 500 patients very quickly changed the X to an E for electron therapy which was prescribed for Ray Cox after confirming the inputs were verified and the screen read beam ready she hit B for Beam on to begin the treatment after several seconds of confusion the machine shut down and displayed malfunction 54 on the screen the screen also displayed a treatment pause error which normally came from a low priority operator error that was easy to fix the only documentation though presented about malfunction 54 indicated that there was a dose input 2 error something in aecl technician would later indicate meant that the patient was given either too high or too low of a dosage the screen indicated that the patient had only received six RADS so far and while the operator had ordered 202 the operator pressed P to unpause the treatment while all this occurred in the control room Rey laid alone in the operating room normally the two zones were connected by Audio and Video but during this session the video monitor had turned off and the speakers had been broken for some time after receiving the first attempt at treatment Rey later recounted a feeling of electric shock or that hot coffee had been poured down his back being his ninth treatment Rey knew something was wrong so he got up from the table at the exact same time the operator unpaused the therak 25. he ran to the door of the control room screaming and pounded on the door visibly shaken and upset simulations after the incident estimate that Ray Cox received not 180 RADS but somewhere between 16 000 and 25 000. Ray Cox in the following weeks would feel excruciating pain in his neck and shoulders suffer from several types of paralysis and eventually die to complications five months later five other patients in the U.S and Canada would suffer a similar fate what could have gone so terribly wrong in software to cause a man to lose his life several assumptions about software poor software engineering practices and safety design choices in the therax 25 led to these catastrophic events that were all rooted in bugs and software in the 1980s and early 1990s there wasn't much knowledge about how software worked outside of a small community of programmers there was an attitude in the public that once the code worked software was unable to fail once the code performed the function it was able to perform there was no more work to do nothing could go wrong there were no edge cases because of this aecl allowed a single hobbyist programmer to program the therak 25 alone in PDP 11 assembly one person coded alone in assembly this software cannot fail attitude bled into all aspects of the Engineering Process the design of etheric 25 was unnecessarily complex and when questioned by the FDA about how much the therak had been tested the aecl representative reported that the theraq 25 underwent 2 700 hours of testing when pressed for more information and data representative backpedaled and said 2 700 hours of testing by The Operators using the machine it was later revealed that the therak 25 was never tested until it arrived and was assembled at the hospitals where it underwent minimal system testing to prove that it functioned and nothing more the code that was modified between the their act 20 and the therax25 underwent zero regression testing and the therak 25 didn't come with any system level documentation about the errors so that an operator could handle them when encountered so what happened to Ray Cox inside the therax25s code a task Rand that executed the treatment inside that task a variable called T phase controlled which one of eight subroutines was being ran at any given time when the operator first accidentally entered x-ray mode the t-phase variable quickly moved on to phase 3 or the setup treatment phase during this time the X-ray energy specified on the user interface was used to look up and program a configuration to the digital to analog converter which would be used to emit the radiation energy to the patient also during this time magnets were put into motion that would be used to bend the X-ray beam and control its output it took about eight seconds to move this magnet during this eight seconds the task would ignore additional input from the user as the data entry task was not being ran because the operator in this case was skilled and able to change x-ray mode to electron mode in under 8 seconds the changes to the prescription were not observed by the machine instead of receiving electron radiation as prescribed Rey received x-ray radiation at electron radiation doses without the proper bending and mediation by the magnets this error is known as a race condition in a race condition logic in a program depends on a data location that can be written to by two separate threads the race condition exists because there is no logic controlling who is allowed to write to that data at any given time the race happens when the logic executed on the data depends on what piece of code gets there first in the therak 25 the race condition caused the data entry to occur before the patient setup task was able to read it causing a misconfiguration in the machine that was not accounted for previously by the programmer this would not have been a problem in previous versions of the theraq where Hardware interlocks were there to make sure that these levels of radiation did not come out but to make the therak cheaper these Hardware interlocks were removed and the system depended entirely on software checks to make sure this didn't happen in code it should be accepted that bugs will happen ones that you're aware of and ones that you could never predict rigorous code testing should always occur especially in systems where lives depend on software safety now NASA has 10 rules for writing safe software if you want to learn about those rules go check out this video we'll see you next time