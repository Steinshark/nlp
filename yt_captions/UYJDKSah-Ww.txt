how's it going guys in today's video we're going to be building a Discord chatbot in 2024 so I'm going to be using the latest docs and I'm going to be using some clean python practices to make a very sweet Discord chatbot project now for this tutorial I'm going to be using pycharm and if you are new to python I recommend you use pycharm because it simplifies a lot of things anyway the first thing we have to do to actually create a Discord bot is handle some Imports so I'm going to open up the terminal and type in PIP install Discord and we're going to be using this library for our Discord bot then I will also clear the console and I will type in PIP install python do Envy because we need a place to store our secret Discord key or the token that allows us to make our bot unique because that's some sensitive information that we do not want to share so it's nice to store it in a safe place anyway that handles the Imports that we will need for this project so now we can close this terminal and get started with creating some project files and the very first one I want to create is the EnV file so just call ITV and inside here what we want to type in is Discord token and put an equal sign we don't have the token just yet so we can't fill that out but it's good to have this placeholder here and another file we need to create is called responses because I also want to create a file that contains the functionality for how the chatbot will respond so just for now we're going to create a placeholder called get response which will take some user input of type string and that's going to return to us a string later but since we don't have any functionality just yet we're going to raise a not implemented error so every time we try to call this function we will know that it has not been implemented just yet and we can even add a simple comment such as code is missing so now we have a decent placeholder but that takes care of the basic setup for our project now let's go to the Discord website and actually create the bot so that we can invite it to our Discord server and so that we can actually use it so the first step in creating a Discord bot after setting up the project is to go to the developer website it so discord.com developers application and what we need to do here is tap on new application and the first thing it will ask you to do is to name your application so for this example I can say Discord Orbot tutorial 2024 and I will tap on agree or apparently you can't name it with Discord so we'll just type in bot tutorial and it will put you on this page with the general bot information information so here we can type in I am a bot you can add some tags you can add some sort of neat icon and I have some assets prepared so I'm just going to use this smiley face and that will be the app icon that will be used for our program or for our application and then just remember to tap on Save changes anyway what we need to do next is go to the bot the actual bot and here you can give it a nice username I actually wanted to use bot as a name but I don't think I can and let's just try to save changes no I cannot use that username cuz I I imagine it's too common so we'll use Bob bot I hope that works okay so that's going to be my bot username Bob bot and here we have the opportunity to actually get our token and to get it all you need to do is tap on reset token and we have to say yes to it because we've never seen it before and since I have this annoying two- Factor authentication enabled I need to open up the application so let's see 76 2782 and tap on submit then it's going to give us the token which we can copy and immediately before I forget I'm going to place it inside my project where it says Discord token the most important part was done we gave our bought a profile image we gave it a name and we got the token but recently they introduced a change and when I say recently I think it was 2 years ago which requires us to be more explicit with the permissions our bot has so if you want your Bot to actually be able to read the messages from the server you're going to have to enable the message content intent so just turn this to green and save on changes or I guess it's purple but you know what I mean and after that we can go to the oo 2 Section because inside here we want to go to the URL generator because it just makes things simple and what we want to generate is a URL for a bot and as you can see you have a lot of text permissions here so what we're going to do is enable the read messages and we of course we want to send messages and read the message history and mention everybody in case you want your Bot to be able to do that so just enable the permissions that you think your Bot will need if you enable too many it looks kind of weird when people invite your Bot but just enable the ones you actually need maybe also in Threads I don't know and then we will just copy this link that has been generated at the bottom and we will paste it in the search bar now as you can see we can actually invite that bot to our server so select your server and in this example my server is just going to be called server it's a creative name I know but we're going to add it to the server server and as you can see all the permissions we selected will be here and it just makes it easier on whoever is inviting the bot to just set up the bot they can do it later in their own settings if they want but this is just where they set it up the first time and we're going to authorize it and I am a human so now the bot has been authorized and added to the server and you should notice it immediately in your server if everything went well right now Bob bot is offline but as you can see in the About Me section it says I am a bot and the role is bot tutorial 2024 so your application name is going to be that role so just like that we handled the first part of getting this bot working now let's go back to our project because I also want to test that we can actually get this token from our environment so what we're going to do here is take care of the Imports and try to load that token so first of all I'm going to import from typing the final type and I'm going to be using type annotation throughout this project because I personally love them and I think it makes my code a lot more safe with the optional static type checking but you don't have to add type annotations if you don't want to but right after that we're going to import our operating system and then from. Envy we're going to import load. envy and from Discord we will import intents the client and the message and finally from response responses we're going to import that placeholder get response and to make this easier on you guys I'm going to insert some comments such as Step Zero load our token from somewhere save so here we need to load NV which loads our NV file and we're going to create a constant called token which will be a final of type string and that's going to equal o.get envy and here we need to pass in the key Discord token and before we do anything we just want to print the token so we can understand whether this works or not so now we can right click on our file and run Main and if everything goes well you should see your token in the console so now we can just remove that print statement because we know that it works just fine but immediately under that we need to set up the bot with some simple bot setup and that means we need to activate the intents and the intents are just like the permissions that the bot needs to actually be able to see the messages and to respond to the messages without these intents your Bot will not respond to any messages so here we're going to create a variable called intents of type intents and that's going to equal intents do default then we're going to type in intents do message content and that's going to be set to true now py Cham is going to complain that this is not an operation we can do so what I'm going to do is annotate it or add a comment that says NOA and that just stands for no quality assurance and usually it suppresses those warnings and I only recommend you use this if you know exactly what you're doing but right under that we're going to create a client of type client and that's going to equal a client which has the intents set to the intents that we just created so at this point we've taken care of all the basic setup to actually make our bot work moving on let's take care of that message functionality so our bot can actually handle the messages and we can close the sidebar since we won't be using that and I'll make the font size slightly smaller so I can type more code and right below this bot setup we're going to add step two which is the message functionality and this is going to be an async function So async Def send message and the message is going to be of type message and the user message is going to be of type string and this will return none because it's only meant to execute code and maybe it's nice with some extra space so I'll do that now the very first thing to check for is if there's a user message if there's no user message it means that intents probably were not handled correctly so we shouldn't even bother with trying to respond to this message so first of all if not user message which just checks if it's empty we're going to print that the message was empty because intents were not enabled probably and we're going to return out of this function otherwise we're going to continue with the function so right below that we're going to type in if is private and I'll be using the walrus operator here to check whether the user message at the index of zero is equal to a question mark and you might be asking why did I insert a question mark here well the thing is that maybe we want our bot to respond to us in private so I want to provide the users with a way to message the bot so that it messages them back personally to their private inbox and to do so we're going to say that the question mark is going to trigger the private messaging functionality so if there's a question mark we're going to say that the user message is equal to the user message starting from one onwards so we're going to slice that user message to make sure that it does not include this question mark and with the walrus operator since this either returns true or false it's going to automatically assign it to this variable called is private and that's no different from just creating it up here saying is private equals user message and just passing in right here is private it's not different I just prefer it because it's a oneliner and that's how I decided to do it but once we find out whether the message is private or not we're going to want to try to get the response so the response of typ string is going to equal get response and we want to insert the user message as you can see we can use this placeholder with no problems but as soon as we actually run the code it's going to raise an exception which is exactly what we want until we actually implement the code then we're going to try to send the message by typing in message do author do send and we want to send that response if is private is set to True else we're going to do the exact same thing except we're going to replace author with channel so if the message is private we send it to the author otherwise we send it back in the current Channel and here we're just going to accept whatever exception occurs as e and we're going to print that error message now this isn't really considered the best practice it's really nice to be as specific as possible with your exceptions but for this simple bot tutorial I'm going to leave it as is and I also recommend instead of using print everywhere that you actually use some proper logging but it is what it is let's keep this simple and continue with the tutorial but now that we are done with step two let's go to the responses and take care of that response functionality so first of all there are going to be some imports that I'm going to use and that's going to be from random import choice and random integer then instead of raising a not implemented error we're going to implement the features by typing in first lowed of type string which will equal user input. lower because as you probably know python is case sensitive so we want to make it as easy as possible on us to actually process the text that the user enters by making sure everything is lowercase now first of all if lowered is equal to nothing or an empty string actually we're going to return well you're awfully silent L if hello is in low we're going to return hello there and as you can see these are just some simple if else checks so this bot doesn't really concentrate on any complicated chatbot logic your job is going to be to replace all of this logic with your own logic once you have some artificial intelligence or some other sort of response algorithm you can insert it inside here but for this I'm going to just copy and paste in what I had from earlier so I also checked whether we can write how are you or by and if the user types in roll dice it's going to roll a dice else we're going to return a random response such as return choice of this list of responses and I'm going to paste in what I had from earlier here as well so these are just three responses put inside a list and choice is going to pick a random one each time we run into this else block just so it doesn't sound so stale each time you type something it doesn't understand sometimes it will say I do not understand and sometimes it will ask you what are you talking about but now that we're done with this we can go back to main and finish coding our chat bot very quickly before we continue with the Discord bot I just want to mention that if you're looking to Learn Python on a more professional level check out indent. I offer plenty of courses that all teach you how to program at a much more professional level and right now if you use the link in the description box down below and tap on any course you're going to get a really nice discount on all of my courses all you have to do is tap on start learning and it's going to take you to to udemy where the discount code will be automatically applied anyway I apologize for the interruption now let's get back to creating our Discord bot so up next under step two we're going to insert step number three which is handling the startup for our bot so every time our bot goes online we can handle that event and display it in the console so we know that our bot is actually running so here we will use at@ client. event and this has to be another async definition which will be on ready that will return none because it doesn't return anything and we're going to print that the client. user is now running and then for step number four we want to handle the incoming messages so we're going to use another client event so again async def on message that's going to take a message of type message there's always it's going to return none since it doesn't return anything and the most important part of this function is making sure that the bot doesn't endlessly respond to itself so first of all we need to type in if message. a is equal to client. user that just means that the bot is the one who wrote the message so we shouldn't try to respond to that or you get this endless loop next we want to grab the username that's currently speaking so username of type string is going to equal the string of the message. auor then the user message which will also be of type string is going to equal message. content not Channel but content and the last one is actually going to be the channel so channel of type string is going to equal the string of the message. channel and with all of this we can create some logging information so we can type in print the formatted string of first some square brackets with the channel inserted followed by the username and what the username actually said so user message and finally of course we want to send the message so we're going to use our send message function and here we will insert the message and the user message now we only have a few more lines of code to type to actually get this running and this is the easy part we're going to create a main entry point where we can run our code and this runs none or returns none and here we'll type in client. run and we will pass in our token which is required for our bot to actually work and as the last step we just need to run this code so here we'll type in Main and that was the last line of code we needed to actually get this up and running so now let's test that our bot actually works by tapping on this green arrow and running main if everything works fine you should get these red messages and then it should tell you that Bob bot is now running so let's go to our Discord server and first of all you should notice that Bob bot has an online symbol and here we can type in something such as hello and as usual with most of my tutorials I miss something and we get a nice error message here that says co-routine message. send was never awaited on line number 28 so let's go back up to line 28 and as you can see on line 28 I awaited the message that sends it in private but I did not await the message that sends it to the channel so we just need to add that line there so that we can actually send it to the channel and it's very important that we await otherwise it's not going to work as you saw so now that I added await we can rerun this script and it will say the same thing as from earlier but this time we can typee in hello and the bot will be able to read that and respond we can say how are you it will give you the response that you programmed roll dice you rolled A4 and the functionality I was talking about earlier with the question mark is going to look like this so now I'll type in question mark and say how are you and the bot is going to message you in private and you can continue messaging your Bot here if that's what you want and as you can see all the messages are going to be logged down here and you can see exactly where it's happening this is happening in the chat Channel this is happening in the direct message Channel and so on but yeah if you want to customize your Bot further you're going to have to edit this response functionality because again these are some simple if else checks maybe you want to add your own artificial intelligence maybe you want to add something else all you need to do here is make sure that you enter a string and that you return a string based on the string that you enter you can also go to your Bot and type in something it doesn't understand and as I mentioned earlier it's going to give you some random responses based on what you entered and maybe it did I do not understand three times in a row that's how it works that's how random probability works but more or less it's going to pick a random one each time you run your Bot and the final thing I want to cover is that if you want this bot to stay active on your server you have to make sure that this script is running constantly but if you don't want to do that because sometimes your computer might turn off or something else might happen you're going to have to look for hosting online but anyways that's actually all I wanted to cover in today's video I hope you enjoyed this tutorial do let me know in the comment section down below how this project went for you I would love to hear about it but otherwise as always thanks for watching and I'll see you in the next video