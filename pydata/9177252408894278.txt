import socket
import time 
import threading
from queue import Queue
import os 
import json 

class Color:
    os.system("")
    blue    = '\033[94m'
    tan     = '\033[93m'
    green   = '\033[92m'
    red     = '\033[91m'
    bold    = '\033[1m'
    end     = '\033[0m'    


class ClientManager(threading.Thread):


    def __init__(self,client_socket:socket.socket,id:int,known_logins:set,database):
        super().__init__()
        
        #Maintain the client socket
        self.client_socket          = client_socket
        self.id                     = id 
        self.database_reference     = database
        self.known_logins           = known_logins

        #Track when the client connected
        self.client_connect_time    = time.time()
    

    def run(self):

        while True:
            
            self.stream_with_client()


    def log(self,message,color=Color.blue):
        print(f"\t{Color.tan}[CM]\t{color}{message}{Color.end}")


    #Handle the initial splash screen interaction with the client 
    def handle_login(self):

        username = self.client_socket.recv(64).decode().strip()
        self.log(f"recieved username: {username} ({'known' if username in self.known_logins else 'new'})")

        #Do a login if this user is found
        if username in self.known_logins:

            #Confirm with client to go to a login
            self.client_socket.send(f"knownuser".encode())

            #Get password attempt, and ask until its right
            password_attempt            = self.client_socket.recv(64).decode().strip()
            if not password_attempt == self.known_logins[username]:
                self.client_socket.send("incorrect".encode())
                self.log(f"{username} failed login attempt",Color.red)
                self.handle_login()
            else:
                #Log
                self.log(f"{username} logged in",Color.green)
                self.client_socket.send("loginsuccess".encode())

        
        #Do a newuser if not found
        else:

            #Confirm with client to set a password
            self.client_socket.send(f"newuser".encode())
            password                = self.client_socket.recv(64).decode().strip()

            #Send back to server
            self.queue.put_nowait({"id":self.id,"type":"newuser","new_username":username,"new_password":password})
            self.client_socket.send("loginsuccess".encode())
            self.log(f"{username} logged in",Color.green)


    #Stream with client will operate as follows:
    #   wait for the client to send a message (either querey or write request)
    #   Pass it off to the server via method/attribute of database
    #   Return database's response

    def stream_with_client(self):

        try:
            client_bytes            = self.client_socket.recv(128)
            client_string           = client_bytes.decode()

            #attempt json decode 
            json_message            = json.loads(client_string)

            if json_message['type'] == 'querey':
                response            = self.database_reference.querey(json_message['request'])
                self.send_to_client(response)
                
            elif json_message['type'] == 'write':
                success             = self.database_reference.write(json_message['request'])
                self.send_to_client('writesuccess' if success else "writerror")

            else:
                self.log(f"unknown format: '{json_message}'",Color.red)

        except TimeoutError:
            pass
        except json.JSONDecodeError:
            print(f"client sent a non-decodeable message: '{client_string}'")


    def send_to_client(self,message:str):
        self.client_socket.settimeout(.1)
        try:
            bytes_message               = message.encode()
            self.client_socket.send(bytes_message)
        except TimeoutError:
            print(f"client timeout while trying to send response")


#Keeps track of everything in the server
class MojaDatabase:

    actions                                             = set(["walk","sprint","dialogue","engage",'afk'])
    
    def __init__(self):

        self.logins:dict[str,str]                       = {}
        self.online_clients:dict[int,ClientManager]     = {} 
        self.online_queues:dict[int,Queue]              = {} 
        self.online_ids:list[int]                       = [] 

        self.player_positions:dict[str,tuple[int,int]]  = {}
        self.player_actions:dict[str,str]               = {}
    
        self.database                                   = {"login":self.logins,
                                                           "client":self.online_clients,
                                                           "queue":self.online_queues,
                                                           "pos":self.player_positions,
                                                           "action":self.player_actions}

        self.value_checks                               = {"login":self.login_check,
                                                           "client":self.client_check,
                                                           "queue":self.queue_check,
                                                           "pos":self.pos_check,
                                                           "action":self.action_check}
    

    def connect_new_client(self,client_socket:socket.socket):
        new_client_manager                              = ClientManager(client_socket,self.get_next_id(),None,self.database)
        self.online_clients[new_client_manager.id]      = new_client_manager
        self.online_ids.append(new_client_manager.id)
        new_client_manager.start()
        return new_client_manager.id


    def querey_decoder(self,querey:str):
        
        #querey will consist of a table request, and an element request from that
        db_table                                        = self.database[querey['tb']]
        db_key                                          = querey['key']

        return db_table, db_key
    

    def check_val(self,write_request:dict[str,str]):
        db_table_name                                   = write_request['tb']
        return self.value_checks[db_table_name](write_request['key'],write_request['val'])


    def load_from_file(self,fname:str):
        pass 


    def save_to_file(self,fname:str):
        pass


    def querey(self,querey:str):
        table,key                                       = self.querey_decoder(querey)

        if not key in table:
            return "quereyfail"
        return table[key]


    def write(self,write_request:str):
        if not self.check_val(write_request):
            return False 
        table,key                                       = self.querey_decoder(write_request)
        new_val                                         = write_request['val']
        table[key]                                      = new_val

        return True


    def get_next_id(self):
        i                                               = 0
        while i in self.online_clients:
            i                                           += 1
        return i



    #Checks that the key is a legit username, and the val is a legit password
    @staticmethod
    def login_check(key:str,val:str):
        #login will be a string,string dictionary encoded in json

        return True
    

    @staticmethod
    def client_check(value:str):
        return False 
    

    @staticmethod
    def queue_check(value:str):
        return False
    

    def pos_check(self,value:str):

        try:
            attempt_dict                                = json.loads(login_val)

            #Check its a list(tuple)
            if not isinstance(attempt_dict,list):
                return False 

            #Check only 1 value
            if not len(attempt_dict) == 2:
                return False 
            
            #check player exists in logins 
            if not attempt_dict[0] in self.logins:
                return False 
            
            if not isinstance(attempt_dict[1],list):
                return False 
            try:
                x                                       = float(attempt_dict[1][0]) 
                y                                       = float(attempt_dict[1][1]) 
            except ValueError:
                return False 

            return True
    
        #Check JSON can decode it
        except json.JSONDecodeError:
            return False


    def action_check(self,value:str):

        try:
            attempt_tup                                 = json.loads(value)

            #Check its a list(tuple)
            if not isinstance(attempt_tup,list):
                return False 

            #Check only 2 value2
            if not len(attempt_tup) == 2:
                return False 
            
            #check player exists in logins 
            if not attempt_tup[0] in self.logins:
                return False 
            

            if not attempt_tup[1] in MojaDatabase.actions:
                return False

            return True
    
        #Check JSON can decode it
        except json.JSONDecodeError:
            return False
        

if __name__ == "__main__":

    tests   = [{"type":"querey","request":{"tb":'login','key':"steinshark"}}]

    mjdb    = MojaDatabase()