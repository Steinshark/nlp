import os 
import math 

def convert_0_to_1(input_tensor:torch.Tensor)->torch.Tensor:

    tensor_range    = torch.max(input_tensor) - torch.min(input_tensor)
    returner        = (input_tensor) + abs(torch.min(input_tensor)) / tensor_range 
    #print(f"range is {torch.min(returner)},{torch.max(returner)}")

    return returner 

class preload_ds(Dataset):

    def __init__(self,fname_l,procesor):
        self.data   = fname_l
        self.processor  = procesor

    #Return tensor,fname 
    def __getitem__(self,i):
        if not self.processor is None:
            tensor  = self.processor(torch.load(self.data[i]))
        else:
            torch.load(self.data[i])
        
        return tensor 
    
    def __len__(self):
        return len(self.data)

#Crop everything to 1.5
def crop_to_ar(img):

    #Check compatability 
    if not len(img.shape) == 3:
        raise ValueError(f"bad shape {img.shape} must be 2d img")
    
    img_x   = img.shape[2]
    img_y   = img.shape[1]

    #Fix AR 
    if not (img_x / img_y == 1.5):

        arr     = img_x / img_y 
        removed_x   = 'l'
        removed_y   = 't'

        while not arr == 1.5:
            if  arr > 1.5:
                if removed_x == 'l':
                    img     = img[:,:,1:]
                    removed_x = 'r'
                else:
                    img     = img[:,:,:-1]
                    removed_x   = 'l'
            elif  arr < 1.5:
                if removed_y == 'l':
                    img     = img[:,:-1,:]
                    removed_y = 'b'
                else:
                    img     = img[:,1:,:]
                    removed_y   = 't'
