how's it going guys in this video i'm going to be showing you how you can cache data in python using a very convenient package which one of you actually recommended to me in a previous video where we did this all manually so what we're going to be doing is making an api request and instead of fetching that data over and over and over we're going to cache it temporarily so that we can provide a limit so the user doesn't continuously waste our resources to get information that doesn't have to be updated so often and this can also be good if you're testing your program and you don't want to waste your api requests so for this example we're going to create a program that fetches data from an api and in this case it's going to be an anime quote api so we're going to get some quotes back and we're not going to get new quotes after the initial request because we're going to cache the data so that the next time we try to get quotes it's going to load immediately from the cache so the first thing we're going to do is type in pip install requests cash and this is the package that we will be using once we have that installed we're also going to import from typing the final type from data classes we're going to import data class and from requests dot cache or underscore cache we're going to import the cached session now first of all we need to use the url which is going to be of type final because i want to declare it as a constant and that's going to equal the following link and i'm going to include this link in the description box of this video in case you want to use it as well otherwise feel more than free to type this out by hand but this is where we will get the data from then we need to create a session and the session is going to equal a cached session and here we need to provide a location of where to cache the data so here we'll type in cache name and i want to create a folder called cache and the file name is going to be anime underscore cache and by default it's going to cache the data indefinitely so it's never going to request for new data but we can provide an optional parameter called expire after and here you can specify how many seconds you want this to last so if you type in 600 it's going to last for 10 minutes which means if the user tries to make a request 10 minutes from now it's going to retrieve new data from the api but everything within this 600 second time frame is going to be using the data from the cache so already you might have some things in mind that don't have to be updated so frequently but you do want to get a response for the user when they tap on some button also i want to show you what's inside this link so if you tap on this or you paste it in your browser you're going to get a response such as this one so it's going to contain the anime the character and the quote so this is the model that we need to follow and the reason i show you that now is because we're going to create a data class and the data class is going to be called quotes and we're going to have anime of type string which is initially set to none we're going to have a character of type string which is initially set to none and finally we're going to have a quote of type string which is also initially set to none next we need to create a function that retrieves the data so here we'll type in def get response and the response is going to be a lot like from the requests module so the response will equal session dot get and you want to pass in the url so usually you would put requests.get but here you can just put session.get and you can treat it the same way then what we want to try to do is try to get the json back so json of type dictionary is going to equal the response dot json and if that goes good we can unpack the data from that json so we can type in quote is equal to quote and here we'll just use the unpacking double bank operator and pass in the json so that's going to unpack all the fields and place it into the data class then of course you can use the data however you like i'm just going to format it like this so the quote.quote followed by the quote character and the quote anime and of course if there's an exception we're just going to handle it by saying this is what happened we have the error message and the status code so we can get a quick glimpse of what went wrong but with all that being done we can now create our if name is equal to main check and get that response to see what we get back now if we run it it's going to take a couple seconds to make the request but we are going to get the data back if we run this again the request is going to be instant because we are now using the cache and not actually making a request to the api also if you open your folder you'll notice that you'll now have a folder called cache which is going to hold the data in a sqlite format so no matter how many times we run this it's always going to load instantly for the next 600 seconds because we are using the cached information and maybe for a quote generator this isn't the best idea because you want to generate new quotes of course but if you have a lot of posts you are retrieving let's say maybe from a news app you don't need the user to make a new request every three seconds news articles just do not update that fast so maybe you can have a five minute timeout or a 10 minute timeout because api calls are expensive so keeping them in the cache for the user or for yourself so that you can play around with your script without wasting all those api calls might be the best solution and if you remove this as i mentioned earlier it's going to cache it for forever which means it's never going to search for new information so you might want that you might not want that you might want to change those times that's all up to you i am going to be leaving a link to the documentation in the description box down below because there are a lot of other fields that you can use with this session but i just wanted to show you a quick way to get started with it because i think this is really cool how easy it is to use and i find it very useful already so do let me know in the comment section down below what you think about this otherwise with all that being said as always thanks for watching and i'll see you in the next video