okay i know you just saw that title and you were like there's no way this decad is going to teach me to code in such a short amount of time but i'm here to prove you wrong so i am a self-taught programmer meaning that i learned to code with no computer science degree and no previous experience in technology and i struggled a lot as a beginner i remember i was so overwhelmed by all the different concepts and languages and everything i felt like i had to know to become a programmer and reach my dreams as i've gone through my journey from a beginner to a software engineer i've realized that 99% of what you you see out there is bs that you don't actually need to become a developer in the real world actually the foundation of the beautiful art that is programming can be simplified into just five core building blocks that you need to master and i've talked about these concepts before but i haven't really taught them before so in the next 30 minutes i'm going to give you all the information you need with python programming from complete first principles and at the end i will leave a link for you to download my python program and master sheeet which also summarizes all of this for you so you can come back to it at any time guys programming is not scary i'm on a mission to make as many average jo out there who don't have the confidence or the technical background to get into coding succeed with coding and become software engineers believe you or not by the end of just this one video you will have coded this personal finance chatboard that you can talk to and ask questions about finances to show to your friends as the first program that you yourself have programmed using python that's what i want to do here here so enough rambling from me let's put 30 minutes on the timer and let's get started so let's start with what programming actually is so really people over complicate this programming is really just about giving instructions so let me give you an example so let's say you have a friend coming over and you always make your breakfast at home in a very particular way and for whatever reason you want your friend to make the breakfast for you so in order to do that you need to teach to your friend how to make your breakfast so what you do is you give your friend specific steps step by-step instructions on how to make the breakfast so this is really what programming is except instead of giving instructions to humans we just give instructions to a computer who then executes these instructions for us but the benefit of using a computer rather than a human to execute your instructions is that computers are actually very smart and they're very very fast at doing the things that they do they're also a lot nicer to deal with than humans they don't complain and they are extremely extremely reliable but in order to give computers instructions we're going to just speak them like english instead we have to learn a specific language called a programming language because this is the language that our computer understands and these programming languages have certain syntactical rules that we need to follow in order for the computer to understand us so in the big picture when we're learning programming the thing we're learning is how to speak this language of computers which is programming languages and there's many programming languages the one we're learning in this video it's going to be python and also more broadly we're learning the logic of how computers speak and sort of how they understand the logic of these programming languages that we write so with that out of the way let's get practical so when we speak to our computer obviously we need some format for us to type the commands we want to give it and the way we normally do this is inside something called code editor which are these specific programs that you install on your computer that allow you to write code and then also execute that code so essentially tell your computer to run through the code that you've written and execute what whatever you're telling it to do so in this case i'm using a code editor called pycharm what i recommend you to do is to go online and search up visual studio code is a completely free and a very powerful code editor for you to get started straight away and i recommend you follow along this video so what you're going to do is go and create some file let's go to hello except at the end we need to add something called piy so what we're doing with thisp extension of the file is we're telling our computer that this file is going to be a python file it's going to be a file that contains python code click enter and now we have opened up this window for us to start writing some code so what we're going to start with is a very simple instruction called print so what print is going to do is essentially just tell the computer to spit out whatever is inside of this print function which is what we call this and we're just going to start with the very classic first line of code that we always start with which is hello world then to execute this file what we're going to have to do is open up this terminal window and if you're using visual studio code i'll leave the instructions on how to open this window so what we've opened up here is something called a terminal window the terminal window is essentially like an interface or like a window for us to speak to the computer directly and the way we speak to the computer is we're going to tell it what program we wanted to use so in this case we wanted to use the python program because python is actually it's a programming language but it's also actually a program inside of a computer it is a program that understands how to execute python code so that is what we're doing here we're telling our computer to use the python program to now execute this hello.py file and the way we do that is simply type in the name of file hello doy and once we click enter this is going to execute and we're going to see the results of our program which is going to be hello world pretty cool right so to look a bit more closely what we're doing here this print in here is actually something called a function so what a function is is basically a specific word that we can call inside of our code and then use these parentheses and then inside of the parenthesis what we can do is give this function something call a parameter and then what happens is that the creators of python have defined this print function in such a way that whatever we give to it as a parameter is going to be printed inside of the terminal when we run the file or run any file that includes a call to this function and what you can do in python is you're not just restricted to one line of code right this we can add any number of lines of code we want so what we might do as well is do do some mathematical operations so let's say you want to calculate the result of 5 + 6 and then print the result and now want me run the file again and by the way you can always flick through the previous commands that you've used before using the up and down arrow so i can quickly get back to the previous command by just clicking the up arrow then by running it first we're printing hello world because we still have this line of code and then we are printing not 5 + 6 but the result of this calculation now something important to note here that what you're seeing here are two different data types because first we're printing a word so is some string of text and this is an example of a data type in python called a string basically you think of a string as just any text words like hello world or you might print a word called mic so as a rule whatever is inside of these quotation marks is going to be a string a string of text and it can be any text you want and then we also have num so in python these are called integers so integer numbers so numbers that don't have decimal points now what we can do with any of these values is we can actually store them as variabl so let's say this calculation 5 + 6 is super super important and we want to be able to use it in many different places in our program so rather than having to copy paste the same line and then have five plus 5 plus 6 in every single other place what we can do is create something called a variable let's say we name this variable calculation and we assign it the value five + 6 and then instead of having to call 5 + 6 every time we can just use the word calculation and what happens here is on the left hand side we define the label so the name of our variable and on the right hand side we define what we want to be assigned in the variable so the way the computer's memory works behind the scenes is that we have a bunch of these what we call memory boxes and what these memory boxes are is that they can store any value of any data type like a string or an integer or any of the other data types we'll talk about in a second and then all of these boxes can be assigned label so essentially anytime we want to access the value inside of these memory boxes we can simply call the name of that box or the label of that box inside of our code and the value is going to be given back to us in all these cases what the computer is doing it is going to the box with the label calculation it is grabbing whatever is inside which in this case is going to be 5 + 6 which is going to be 11 and it is taking that value and doing whatever we want with it which in this case is just printing the value multiple times over here i can prove that to you run the code you can see 11 is printed out many times so these are variables the second building block that we want to discuss is going go a data types which we just discussed already so one of the data types is going to be integer which is just normal numbers that are not decimal numbers but we can also use decimal numbers in python we can define a variable called decimal and have it be 1.5 for example and this is actually going to be of type float rather than of type integer so a different type of number we can actually check what the types of all of these variables that we're storing by calling a build-in python function called type and then putting the name of the variable inside of it and we can call type calculation and we can also have a variable called word my key and we're going to remove those lines right there because we don't need them and then print type of that run the code and what is going to be returned to us is something like this that looks like okay it say class float class end class end what this class means is a more advanced topic that we won't worry about here but basically what this is telling is is that this first one is going to be of type float second one is going to be of type integer and third one is going to be of type string which is shortened by s strr the point of these data types is that basically it probably makes sense to think that what you can do with numbers for example is not going to be the same as what you can do with text so with numbers you can do things like addition you you can do things like multiplication with this time sign subtraction you can do division just like this and then you can do more advanced stuff like the remainder operation which is basically going to see what is going to be the remainder of 5 / by 6 obviously it wouldn't make sense to go okay mike divided by jane now this doesn't make any sense because it doesn't make any sense to divide of text so that is why we have these different data types to allow python to essentially allow different operations to be completed depending on what is the type of the variable but interestingly what we can actually do is go mic plus jane if we just remove that remove that what do you think is going to happen when we go mic plus jane well something very interesting is going to happen it's going to say mike jane so very interestingly python actually allows a pending two strings so when you use the plus sign in the context of two strings python is going to understand like okay we're trying to just append them together just like that but when we're using the plus sign in the context of numbers python understands okay in this case we're trying to add two numbers together just going to use the normal mathematical rules to do that now with strings there are actually many interesting things we can do so let's say we just have this calculation or actually we'll just name me a bit better here called name uh let's say we want to make our name mic be in lower case for whatever reason what we can actually do is we can go print name and then we're going to use something called a string method which is like a basically an operation that we can apply to a variable of type string we actually that by going dot lower so what is going to do is going to take the string and then make all characters lowercase just like that we get mic in lowercase what if we want it to be in all uppercase going to go name do uper and now it's going to be all uppercase now next we'll get into adding a bit more interactivity to our program so what we can do is you have a variable name but instead of hard code what we can actually do is ask the user of the program to enter the name dynamically and the way we do that is using something called in input function in python so we can go input and then ask question inside of it what is your name and what is going to be really cool in here is that once we run the program the program execution is actually going to end on this line in here well not end it's going to pause on this line in here and it's going to ask the user what is your name and it's going to allow me to enter so my name is thomas and then it's going to print the name and that the user inputed so now you can imagine giving this program to a bunch of different people and they can all enter their own name and their own name is going to be printed rather than a hardcoded value but now let's say my user is a bit careless he doesn't make the name uppercase so i just go like this now it's going to print the name toas and you might imagine that this name is now going to be stored as a variable and then it's going to be used in a bunch of places in your program like in the ui or something but you'd want the name to always be so that the first letter is in uppercase now there's actually a method that we can also use for this so what we can actually do is chain this method into this input function by going dot and we call you something called capitalize so now rather than putting the entire text into uppercase what it's going to do is simply put the first letter into uppercase so what's going on here is that we're calling the input function and then whatever the user inputs is going to be returned by this function and then into that value we're applying this method of capitalize and then that value only is then stored inside of this name variables or the memory box with the name label and then once we now access the name valuable it is automatically capitalized even if the user forgot to capitalize it when they gave the name to this program so this is just some examples of string methods that we can use to essentially manipulate string values as we please every single one of the data types in python like integers floats also have their own method that can be applied sl that only work for values of that type another data type that i mentioned previously before is something called boolean boolean basically just means a value that can either be true or false that's right it just has two possibilities false for example and then once we print the type of bu we see class boou so bu is a short hand for boolean and we'll see in a second where this very weird data type that can only have two values becomes really useful and we'll get into more data types later but for now what we're doing here is all well and good so because we've done a bunch of things here we might imagine situations where it would be useful to combine multiple things or like code snippets that you've done before into the same program so it would be useful to have some way to like store these different code blocks like this code blog that i had before of like asking for a name and then just printing the name so that we can use the same functionality in many different places in many different files many different programs without always having to rewrite this code because an important part of a programmer's job is something called the do not repeat yourself principle we're trying to be as lazy as possible as programmers where we only want to have the write something once and then just reuse that same code rather than rewriting every time and that is where functions come in which is the next building block in our list what this basically means is that just like the print function which is like an inbuilt function in python we can define our own function which are basically just like our own code recipes or like our own code snippets for us to use later or even for other programs to use later if we choose to share them so for the rest of this program what we're going to do is define a new file called chatbot dopy which is going to be this chatbot program which will start developing as we go through the rest of these fundamentals and so for the purposes of this chapo we're going to need several different functions that we call at different times so the way you define a function in python is in a couple of steps first you're going to use a keyword called def which stands for define and then you can define any name for your function let's say we want to define a function called askor name and then you're going to use parentheses and then colon and then when you click enter you're going to get this indented block so now basically whatever lines of code we' write in this indented block right here are going to be saved inside of this function so what we can do is go and copy paste code that we had before basically now we have a function whose purpose in life is to ask for the name of the user and then capitalize it and then just print out the name or rather actually what we'll want to do use something called a return value where we return the name that is given and what this means is that now once we run this program right here what do you think is going to happen i'm going to run it and hm nothing happened why did nothing just happen well this gets us to the anatomy of how functions actually work so defining and using a function is actually two different steps so what we've done here is we have defined a function so we've defined a reusable snippet of code to actually use this function actually call this function we need to call it by its name which we do by simply typing out its name and then the parenthesis after it to indicate to python that we're trying to look for a function with the name ask name and then call it and now once we run this program again something should start happening it's going to ask for our name we're going to type toas but now it wasn't printed why where did our name go well to be more precise when what the function does takes some input well in this case we not taking any input but it can do i'll show you in a second how and then it runs through some series of steps which are just going to be these two steps right here and then there's going to be some return value so something that the function is going to give it back to our program as the result of running that function in this case it is the name variable that is given back to us but unless we do something with the return value nothing is going to happen what we need to remember as programmers is that our computer is always going to take us very very literally it's going to do exactly what we tell it to do nothing more nothing less so because we didn't actually ask our computer to print this name anywhere nothing actually happens the way we can do that is by simply put this function call inside of the print function to actually see the output of a function just like this now once we do this and i type toas the function is going to return to me the name and then the print function is going to print it for me so next what we'll do is we'll start creating a bit more functions to start making our own finance theme chat boo that is a goal of of this video the first one we're going to define another function called calculate expenses and this time this function is going to take a parameter and we can call it anything we want we're going to call it expenses and then inside of the function we can access this expenses variable by just calling it by its name and for this function we're introducing ourselves to a new data type called a list and the way a list is going to work is that we're going to define a variable and then inside of these square brackets we can actually have multiple values inside of the same variable so let's say we have 20.3 uh 50.3 so this particular variable in here is going to be a value of type list which in of itself is a list of separate values in this case a list of float values and what this is going to represent is a list of like let's say credit card transactions for example and what we want to do is use a function to calculate the sum of all of these transactions and so instead of just printing the expenses what we're going to do is create a new variable called sum and then we're going to call another buil-in python function called a sum which takes as a parameter same expenses variable and then we can return the sum just like this actually we don't want to call it sum we want to call it something slightly different like sum total which we have this variable in here remember that we have to actually call the function and we also have to print the result of this function calculate expenses taking in this x variable just like this and now once we run python chatboard just like this we see that the sum of all of these transactions is going to be 220 7 and when we hover over this built-in sum functions it will always explain to us what the function is supposed to do so in this case it's going to return the sum of the s value plus itable of numbers so it's sort of a cryptic way to say that basically it's going to take a list of values and then just sum them together and return that sum as one number just like this so now to make this program a bit more dynamic what we want to be able to do is run one of these two functions based on what the user tells us they want to run and so for this purpose what we're going to do is first create a variable called command that we're going to ask from the user it's going to be input and we're going to ask the user which command would you like to run and then we're going to give you options so we need to do now is introduce us to the last building block of a python fundamentals called control flow and what this means is what we can use this special keyword called if and then what we can give a program is something called a boolean condition ition which in this case is going to be let's say if command is equal to the string of expenses in that case we want to run something specifically the calculate expenses function and we're just going to take the same variable as parameter like this and if that is not the case we want to run the other function called r name just like this so the way this works in here is that what python is going to do is when it encounters his word if it's going to look at the condition that comes after this so here specifically we're using double equals to essentially ask the question of is it two the value of command and the value expenses are the same if these two things are equal in that case this indented block that comes after the if is going to run if it is not true this line is going to be skipped in the case where this condition is not true what is instead going to run is whatever comes of this else statement right here and the space needs to be there and what we're going to do is run this program and we're going to give it the command of expenses and indeed it probably run the calculate expenses function but because i actually forgot to print the result nothing actually happened so let's try that again expenses just like this and voila it run the expenses function let's try again now let's tell it ask name and now it's going to ask for my name just like that but now there's a bit of a problem with this program because let's say i input something completely random like this it's still going to run the ask name function what we might instead want to do is instead of saying else we will write type something called l if which sounds a bit weird but i'm going to show you how work i'm going to check for what the value of the command is again this case i'm going to ask if the command is equal to ask name only in that case run ask name and then after that i'm going to have the else condition and i'm just going to print something like invalid command just like this so the way this logic works now is that it's going to look through all these conditions in order first it's going to ask is it true that command is equal to expenses if it is it runs this and it no longer checks the l if condition at all so if any if condition is true the l ifs will not be checked but in the case where the if condition is not true where this line 16 is not run it is then instead going to check for the l if condition that comes after it then it's going to check if command is equal to ask name it is going to run the ask name function and only if that is not the case so basically you might imagine having many different l if cases you can have as many of these as you want so if none of the l if conditions or the if condition is true then else is basically the default that is going to run but if any of these are true then the corresponding condition is going to run that is how these work so what i'm now going to challenge you to do is there's going to be a list of functions on your screen right now that i want you to create so define all of these functions with the instructions and they're also going to be down in the description what i want you to do is pause the video and do this yourself right now because the thing about learning programming is that the only way to properly learn programming is to go and do it yourself so pause the video right now go attempt this and in a couple of seconds i'm going to show you the solution to so before i show you that as i was editing this i realized that there's a couple of things in the solutions that i'm about to show you that i forgot to explain that might confuse you and so i'm just going to explain them here so one of the functions is going to look like this what we are returning is in fact not just a savings because i wanted to return an entire string that also explains to you like what is going on so it's going to calculate the savings variable that is just income minus expenses and i'm actually returning a string like this that tells the user okay total save is the savings and then there's this weird like 2f thing and then there's is weird like f and you've got the dollar sign okay what is going on so normally if you have a string like this and you just go savings like this even if this savings is a variable when we print this it's just going to print the word savings which is obviously not what we mean here what we meant is let's say we have a variable called savings which is equal to 100 we want to be able to place the savings variable inside of this ring right here and the way we can do that is by first putting an f inside of the string it stands for f string it's what it's called for whatever reason and then indicate to python that we in fact don't mean the string savings but we mean to refer to the variable savings what we will do is use this dollar sign and then these little squiggly brackets around it and this tells pyon to go and look for the variable savings and place it inside of here now once we run this and we print this in fact we get the savings right here and it puts the dollar sign in front of this number to basically give it to us in dollars rather than just a normal number and what this colon. 2f at the end of this means is that let's say we have 100. 657 that is the actual savings number that we get to but we don't want to print all these decimal places like this we can tell python in what accuracy we would like to get this variable and that is what this means when we do colon do2 f that is telling python to print the variable with two decimal places if we do one there going to be one decimal place so that that is just what is going on over here and the string at the top here is basically just like a convention that we use to like explain what the function does is very good practice to do especially when you get into team environment tell whoever else uses this program okay this is the purpose of this function that is what it does but now let's continue so what these are are just one possibility for how to implement these particular functions and at the end once you download the python developer master sheet down below there's going to be even more exercises like this to expand this even further but before we end the video there's one more thing that we need to do because now to ask the chatboard which of these commands to run one way to do it would be to simply create as many of these l if conditions like this so basically ask if command name is let's say compound interest then we would run the compound interest function and to make this a bit more dynamic as well what we might actually want to do is then always ask for all of these variables rather than hardcoding all of these parameters inside of your program like this you're going to remove them and you're going to instead ask the user for uh what is the principle let's see what is the next one for rate input what is the rate etc etc but this is actually a good point for us to learn how to leverage chat gbt to help us learn to goe because something like this like adding these input functions to every single one of these cases is going to be very very cumbersome so what we might actually do is simply copy paste our entire program and open up chat gpt which is going to be a super super useful tool for you as a programmer so what we're going to do is paste the program to chat gpt and then we going to ask you please for each of the functions add an el case to run the and ask the user to input all of the parameters like in the example of compound interest so doing it this way and i expect chbt to do this completely properly for me right now because this is a pretty straightforward request now this thing is going to save us so much time not having to do this manual work ourselves and actually without me realizing is's actually doing a couple of interesting things that i actually wanted to introduce you to anyway so what we'll actually do is just copy paste this and go through some of the things that chbt has done for us so as you see for all of these like simple interest for example it is simply taking in input the first thing that is very interesting in here is that it is actually using this float what we call casting function to take this input and then make it into a float why might this be the case well let's see what happens if we don't do that at all what is the principle let's say 20 interest rate 2 how many years five we get a trace back and so the way this always works is that it actually tells it to us right here most recent call loss what this means is that the line that is listed at the very bottom of this error code is the most recent so the first place where the error occurred so essentially what this means is that on line 16 so right here some sort of error occurred and that caused an error to be occurred on line 53 as well which makes sense so inside of the simple interest function on line 63 an error occurred which caused this entire function to crash which also then caused sort of trickled up an error on line 53 as well so we always to look at the most bottom error code for the root cause of our error and then for the explanation type error unsupported oper and types for s strr and int okay so we remember that sdr is shorthand for string which is a text data type and then int would be a number well this is related to the fact that whenever you use this input function in python what you're given is always going to be of type string so even if you input a number it is actually going to come out as not like this but rather as this and this might sound sounds strange like okay why are we allowed to have the string of a number isn't four always a number well not necessarily in python because as a rule like i mentioned to you before whatever you put inside of these quotation marks is always going to be of type string and as you remember there are certain operations like the operation that we're trying to do in here like multiplication that we're not allowed to do with strings so if we just copy this to our other file just to test this out i can prove this to you when i run python hello poopy we get this same error because we are not allowed to do this operations with strings so in order to convert strings into either floats or integers what we need to do is use something called casting and the way we can do that is by using the float casting function or alternatively the int casting function to cast the string into an integer or a float in this case we're just going to use float just like this now once we run this well nothing is outputed because we didn't print this but this works now because now it took the string for and python sort of realized okay the string for could be a flow if you just take out the quotation mark so it's essentially just turned into a flow so that is why before in here we were casting the return value of this input into a float and that is what makes this function work and the other interesting thing that is happening in here is that inside of this expenses what we're doing is first we're just asking how many expenses do we have and we're casting that into an integer and then what we're doing is initializing an empty list so completely empty list with no values inside of it and then we running something called a loop so what loop does and this is the last building block of a python fundamentals is that he runs the same lines of code multiple times for some list of values so what this range function in here does is it creates essentially like a list from zero to the number that we give it so in this case let's say we give num expenses as nine it's going to create a list from 0 to 9 and it's going to run these lines of code from 0 to 9 where in each iteration we going to have access to this i parameter that is going to be equal to the given value in that given iteration of the loop so this going to make more sense if i just show you an example so which command we're going to say expenses and there was an and we made a typo expenses okay so we have nine expenses then what it's going to do is going to run this line in here when now this i parameter in the first iteration is going to be equal to zero so what he doing here is using something called an f string that basically just allows us to input variabl inside of our strings it's going to ask for enter expense 0 + 1 which is going to be one uh we just going to input like 20 then the loop is going to run again except this time i is going to be equal to 1 so 1 + 1 is going to be two so enter expense two okay we're going to put 12 uh then it's going to run again and again and again until we get to expense 9 in this case we're in the last iteration of our loop and then in each and every one of these iterations when it did after running this line he took the number which remember first is going to be a string then he converted it into a float and he saved that result which is now a float into this expense variable and then what he did is used something called a list method which is append so what this append does is it takes the expenses list which first is going to be empty and it appends so adds the expense from here to the end of the list so in each iteration this expense was added there and if we now try to do this again where in each where every time at the end of this loop we are printing what is currently inside of these expenses so i can show this to you expenses now let's say we only have four expenses so expense one is going to be 12 and now we can see that currently we have the expenses list which is no longer empty now it includes the value that we just entered that4 now includes that value as well 43 now includes that as well and 65 now includes the entire list of expenses and then at the end of this loop when this loop stops running it is simply going to print total expenses which is going to be calculate expenses with this expenses list as its parameter and remember this calculated expenses function is what we defined ourselves earlier here is we're actually reusing our own function inside of another one of our functions which is also a very common and sleek thing we can do in programming to not have to repeat ourselves that is pretty much our program i'm going to leave this down below there's still some things in here we didn't quite properly go over like but there's obviously a lot more details around programming rather than just these fundamentals but hopefully just by understanding these fundamentals you can see that programming isn't actually that scary like these five fundamentals are literally everything you need to get started with programming to start coding up your own program so what i want you to do is go down below download my completely free python program and master sheeet which is going to include summaries of all these fundamentals as well as some more details and your next steps on what you need to do next to take these fundamentals and become an actual professional python programmer which i really really want to help you do if you want a full program where you can learn all of this in a lot more details as well as all the other more advanced details in the same exact style that you saw in here from zero to becom a full professional programmer i do also have my paid offering it's called python developer boot camp so if you're interested in that program and you've want to become a programmer and you want everything to be in one place in one proven road map and format you can check that out down bel description or you can watch this video right here to learn about some really beginner friendly python automation project where you can apply these principles to some real world project that you're really really going to enjoy so go watch that video right there go down on the link down below i hope you enjoyed this video and i'll see you in the next one