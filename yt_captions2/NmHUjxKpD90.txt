npm and left pad have we forgotten how to program so right now i i will say that i'm immediately excited about this article specifically just because i do feel like when you have easy access to the ability to store libraries by this very concept your libraries become more and more atomic to the point where we see something like this so i'm very curious what the hell this article is about and i'm really i mean i'm personally am very excited it was post a long time ago but this still could be a very good good article so let's do this enhance enhance okay developers time to have a serious talk are you please let's see are as you are probably aware this week react babel and a bunch of other high profile packages on npm broke the reason why they broke is rather outstanding a simple npm package called left pad that was a dependency on their code okay so i remember hearing about this i actually remember hearing about this i never read up on what happened i just remembered that it just like the entire ecosystem halted for a day i don't remember this at all or what happened left pad at the time of this writing had 11 stars on github the entire package is 11 simple lines that implement a basic left pad string function in case those links ever die here's the entire code all right hold on left pad stir char equals i already hate this code i equals negative one okay i hate this code even further if char if not char and char does not equal zero i hate this code even more length equals length minus okay yeah while i plus plus is less than length i hate this code this iterative string mutation like this is just the worst this is just like the worst what why no string builder there's no string bill you don't i mean technically in javascript you just use an array and that's like your string builder because it's javascript hey it's javascript fail okay hey what is that memory that memory okay if you're not using it we use it okay what are you cpu [ __ ] two cpo or javascript all right anyways uh is this heap allocated yes everything in javascript's keep allocated other than smes smee is small integers small integers use a heap pointer but the first bit in a in the heap pointer i believe is either a zero or a one i can't remember which one of the two but one of them designates this object that lives on the lives on the heap the other one designates that this object is actually an integer a small integer a smee okay uh what concerns me here is that so many packaging projects took on a dependency for a simple left padding string function rather than developing taking two minutes to write the basic function themselves not only that but this is just a terribly implemented piece of code you could have used new array fill with that character new array filled with that character join empty plus that other string bada boom you're done right like it could have been it it literally could have been one it could have been one line of code in fact let's just uh let's just do that one line of code okay oh i have to jump over to here because i still don't know how to use the firefox console yeah i'm not a real web dev okay for those that don't know function left pad let's jump in here we had a string we had a length and we had a character okay awesome so let's go like this let's go uh or return new array uh stir length minus length right wait it's the other way around huh uh length minus stir length awesome fill now we just need to fill it with the proper character so we have to go like this uh not char and char does not equal zero we will provide a blank line else char join empty plus string and there we go and i believe i just did it i think that's it i think that's it left pad foo uh let's go five and there you go yay my goodness i wrote it ira left pat everybody it was people it would take it literally takes longer for you to find this package on npm and then it does for you to write this stupid ass code okay this is like asking chad jeopardy to write this code for you you'd have to go to chatzippity.com you would then have to be logged in you'd then have to type out your dumbass question in in the chat jeopardies oh you want me to you want me to benchmark it okay that's it we're benchmarking it [ __ ] why are we doing this why are we doing this fine we're benchmarking it we're gonna benchmark it okay let's mark some benches okay vim uh [ __ ] you chat dot uh js because you know we're we're masochists okay there's my delicious one then we're gonna have function uh left pad two which is gonna have sir and len and char and let's go back here let's just take all the inners uh can we all like can we all just put a pause right here and go huh yeah how the hell did you get a space where the hell did you get a space from where did you get a space from all right do one of those there we go we got this thing and put that in there and get some proper indenting i don't know nobody knows what happened there so there we go we have two of these so now we need a uh a function uh function run that takes in a function two rod it has the args and then we also want a function we want a count and we want the arcs to be passed in there we go this is looking pretty dang good and then we're gonna go like this const start equals performance dot now bam and then we're gonna go like this uh whoopsies let's go no it's the other way there we go start there we go backwards four let i equal zero i has to be less than count plus plus i do one of those do one of those and then of course go function uh can we do a call and just go null args can i just do that i mean i guess i could technically apply apply it would probably be the way to go huh yeah right isn't that is that isn't that what apply is uh you're cheating youtube no one's cheating all right so there we go we have that little run so now let's do a couple runs really quickly uh let's go run a function let's go run uh left pad and then we're gonna have how about let's go 10 100 1000 10 000. there you go you should always do that kind of stuff you know what i mean it's it's the way to go it's honestly the way to go console.log and then we're gonna throw in here run oh fun i should have called it fun can we call it fun yeah we're gonna call that fun that seems better right left pad this one uh what is our count will be x then we should have arguments how about our argument is this it's going to be foo and it's going to be x so it's going to get larger and larger and larger actually we should probably double can we double this up can we double this up i think we could double this up so let's go for each uh uh why why not look at these beautiful name things okay there we go beautiful so we're gonna do it on each one of these and let's go like this uh x y boom boom boom uh left pad bam some of the most disgusting code of my lifetime left pad uh two there we go d give them the d two awesome there we go fantastic right uh and now go north all right which one did better mine or theirs looks like mine is well what do we get here oh i don't have i don't have tmux no wonder i couldn't do anything all right left pad with 10. it goes to here left pad with this one okay so it looks like it's looked like mine is slower and then maybe faster looks like left pad uh do again mine is slower there says oh dude i got dominated on that one uh there's mine there's this one i got dominated on that one then we did this one and i got dominated mine's slower wrecked i work at netflix by the way everybody turns out i am the noob okay i am the noob damn looks like i suck netflix by the way junior bench pad start please noob noob i have dude i can't believe i've been caught red-handed anyways all right as a result of learning about left pad disaster i started investigating the npm ecosystem here are some of the things i observed there are packages called is array that has 880 000 downloads a day afl function is probably trash whatever it doesn't matter uh it has let's see it has 72 dependent npm packages what is wrong with you javascript javascript ecosystem stop being stupid there's a package called is positive integer it has three dependencies it had three like you needed something else this can't be real a fresh installed the babel package includes 41 000 files is that still true because it's still 41 000 files to parse to to literally it's a translator it's not it doesn't even compile it's a it's a transl you know oh my it's transpilation it's changing it from one language to another and this is just the core of the changing blank jspm i don't know what this is pmbm based template app starts with 28 000 files on what possible plane of existence is this a better solution to past problems how are hundreds of dependencies in 28 000 files for a blank project template anything but over complicated and insane i am i'm on this team right now i am on this team that that does sound that's this feeling this this does feel a little nutty uh i get the impression that npm ecosystem participants have created a pension for micro packages rather than to write any functions or code it seems that they prefer to depend on something that someone else has written it feels to me as if the entire job of an npm participating developer is writing the smallest amount of code possible to string existing library calls together in order to create something new that functions uniquely for their personal or business needs foreign okay how about this one i actually want to hear from you guys press one in the chat if you think this is a problem press two in the chat if you don't think it is you think like hey this is just what this is just what it takes to develop apps okay we got some twos in there we got a couple twos there's some twos in there a lot of ones it used to be a problem oh npm's gotten better really i didn't realize that is that true npm's better now i i don't believe you like i don't use pnpm okay that oh that solves the problem that makes left pad okay pnpm is actually better than npm because it takes the dumpster fire but it's prettier shut up functions are not packages functions are too small to make into a package and a dependency pure functions don't have cohesion uh they are random snippets of code and nothing more who really wants a cosine dependency are we really like a trigonometry dependency instead which encompasses many tricky functions that we don't have time to write ourselves this is much more akin to how.net or other frameworks create a core library of basic functionality such a library is vetted by the creators of the language and in pretty much guaranteed to be correct and bug-free i do like this i think this is a good way to look at things there is a huge value in having like a little bit more terse packaging uh it is true a cosine dependency is nutty trigonometry probably fine but then you're like but i don't really need inverse tangent so therefore i wouldn't need the whole thing there's absolutely no guarantee to what someone else has written is correct or even works well even if correct it still is it the most optimal solution possible at least when you write the code yourself you can easily modify it to fix bugs and improve its efficiency not that there should be many bugs in one line functions second if a package's logic is correct i can't help but be amazed by the fact that developers are taking on dependencies for single line functions that should be able to write with their eyes closed in my opinion if you cannot write a left pad is positive enter or is array function in five minutes flat including the time you spend googling then you don't actually know how to code let's go let's go oh my goodness oh my goodness this is literally the greatest line i have ever read in my opinion or in my lifetime this is so good this is so good i'm going to tweet it with absolutely no context people are gonna people are gonna get so angry at this oh this is so good this is so damn good we'll see we'll see at the end of this how many how many people get pissed off i know there it literally is a array dot is array yes any of these would make a great code screening interview question to determine whether or not a candidate can code yeah i mean it is elon might actually ban you for this finally stringing apis together and calling it programming doesn't make it programming oh it's some crazy form of dependency hacking that involves the cloud over engineering things and complexity far beyond what's actually needed to create great applications this article is just savage what's worse is that any of your code or third-party dependency code has a bug or breaks you won't know how to debug or fix it if you don't know how to program i mean it's facts i mean obviously this was written before chad jeopardy so maybe every package that adds yet another dependency to your project let's see hot a strive for as few dependencies every package that you use adds yet another dependency to your project i mean by definition this is a correct statement it's unarguable okay unarguable dependencies by their very name are things you need in order for your code to function the more dependencies you take on the more points of failure you have not to mention the more chance of for error have you vetted any of the programmers who have written these functions that you depend on daily this is actually a really good call on this is for every single language which is just like you know when you do take on a dependency you are taking on the risk of whoever is the programmer who made that package and i think it's very easy for me there's this like weird assumption i think that programmers make that if it's a package it's good which is not true at all right it's not it's it's not true at all there is definitely something about that it's just somebody else writing them right supply and yeah there's also supply chain injections blah blah blah blah blah blah take on a dependency for any complex functionality that would uh let's see take on a dependency for any complex functionality that would take a lot of time money and or debugging to write yourself things like database access layer yeah i mean i think this is a good call out an orm you should not hand roll your own orm there's already orms out there if you're gonna do it do it right uh and if there's not one for your language say you're using some newer language like uh odin i don't know if they have an orm then that's like a great this is a great example of when you should write yours versus when you have to depend on it or a caching client uh should be dependencies because they're complicated in the risk of dependency is worth the risk of saving and efficiency yep cash is super hard to do for anyone that's written any level of caching is extremely hard but for the love of all that is programming write your own bloody basic programming functions take on dependencies for these one-liners is just nuts don't believe me just as the reass team how well their week has been going and whether they wish they had written those 11 lines for left padding a string themselves [applause] savage this is just savage i love this article i love this article i i love this article this is fantastic all right how did our tweet do how did our tweet do where what are we sitting at did we get anyone angry here yet another base take yep absolutely none of those are real words you just made them up to sound smuck let's go to be honest that should uh even be possible in a language one that doesn't already know yeah uh people hold your horses and then someone links it okay reasonable watch co-pilot and jeopardy and port these modules in its code yeah so that's actually kind of an interesting thing which is in today's world we kind of already have this now with copilot now you just get to import the shitty code via some auto magic function like i've showed this i've showed this a lot of times i'll show it again really quickly uh do we have any do we have any job can i let's see uh youtube let's see yeah i i could probably just go to youtube and just go test dot ts uh and get oh yeah yeah uh go up here do this thing and just go uh function uh quick sort i've showed this a few times there we go actually i'm gonna i'm gonna okay good this is good enough so if you look at this function this is quicksort i can tell almost immediately that this is quick sort uh wait can i yes yes this looks like quick sword what you don't realize that's happening right here is that quicksort one of the reasons why quicksort is incredible is that quicksort is what is referred to as an in-memory sorting algorithm so merge sort is not an in-memory uh uh sorting algorithm it requires you to make multiple copies of the array and kind of re-stitch them back together into the new array it is an n log n memory with an n log n runtime whereas quick sort is a is a o of one memory versus a uh n log n running time now that can be very beneficial because requiring memory actually does take time right it's not straight forward and so when you look at this thing right here what i see is that okay array slice so that is a copy why are we slicing at one well that's because we picked the pivot at zero picking the pivot at zero is considered one of the worst practices you can do for quick sort you just wouldn't know that if you just grab this uh so slice one that's a copy of an array filter that's a copy of an array we do it again we slice one so there's the same work twice right this is now we're on to three copies of the array we then filter that's four copies of the array then we're going to quick sort the left okay we're gonna concat so the output of this will create a new array with just the pivot added to it then we're going to concat it again it's going to create yet another one on this side so literally is a minimum of five x copying that is going on 5x that's 5n log n as it goes down that's a lot of n log n okay that's a lot that's copy sort this is a lot of copying so just so you know just because somebody wrote it in javascript and just because it exists doesn't mean that whoever wrote this wrote it well okay yes it's big oof [laughter] 5x equals one half grand cardone oh my goodness chad you you are wild today the name is you're bad at programming