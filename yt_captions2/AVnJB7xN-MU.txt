all right so what i worked on for the last few months at netflix goes a little something like this let's first go like this uh let's let's bring up some excally draw trying to explain to people how garbage collection works over there uh let's jump in here let's hit them with the grid mode let's go back into dark mode sorry dark mode screws up the colors that's why i don't like to use it okay so if you don't know anything about how streaming works like say on twitch or anywhere else what you're going to do is you're gonna have a bunch of these little udp packets okay and then not only are you gonna have a bunch of little udp packets but you're also going to have what is referred to as effect packets packets ford air correction now this may be read solomon this may be something else uh but you get the idea no i don't get a free sub shut up okay so here we go so this would be like video right here right this would be video hey it's green i guess we're going with green today uh this one right here will be audio typically audio is going to be a singular udp packet no ford error correction all that kind of stuff there we go so this happens uh this will happen every effectively one out of 30 seconds we'll send a whole bunch of udp packets this will happen one out of 50 seconds and yeah there you go so that's like the basic of streaming it's going to use udp it's going to use rtmp it's going to be kind of you know your straightforward stuff that you can go look all over there there's ice there's stun there's there's all the fun stuff now and then of course there's like back channel communication right you got a communication that goes back to your server this would be like our rt uh rt uh cp rtcp rt what is what the hell is it called i can't remember what it's called i can't remember all these acronyms but you said little packets back to be like hey you know like i got this packet i got this video packets i got all these things so we don't do that there's rtx there's re-requesting re-transmission rtx so like say this one you didn't get and or you you missed two so therefore you technically need one more packet and if you get one more packet you are then able to use effect encoding to thus get the last packet inside there [ __ ] coding is really simple just plain old ulp in fact uneven level protection ford air correcting is really really simple it's just literally the xor of all the packets together into this one and so if you miss one you can just be like okay well just xor some things together and boom you got that guy back out it's pretty it's pretty neat it's pretty neat stuff right you get the idea of x or if you haven't played with xr it's pretty cool and so that would literally be uh getting out that thing there's different versions of it like i said read solomon blah blah blah blah anyway so we have all this data we're sending it all over the place and so one thing i built was a program that we called reggie which by the way reggie was awesome reggie was one of my favorite projects i've ever done uh i really really enjoyed making reggie which what reggie did is reggie it's named after a very nice character you may have heard of him a very outstanding upstanding citizen uh reggie miller it's uh we we nicknamed it the most reliable pacer and so all it did was it followed this thing right here and i would actually just create all this data based on a 30 second clip and feed it in as fast as i possibly can and then you know what i'd do this is the this is the good part is that i would actually uh bypass all like the playing and everything and i had i'd have a sync component i written on the other side and see that would receive all this information and have a huge like calculation and tell tell us like how much uh loss we're having how much we're dropping and all that except for i'd play it faster than time faster as possible right so i'd i'd be shoving in these packets as fast as possible and how reggie effectively worked which i thought was pretty clever is that you know if you don't know anything about a tv this is effectively what would happen or at least netflix tv right uh is that you have uh you have like the the javascript layer right so we have this nice little javascript layer then we have this uh we have the c plus plus layer right and then we have what would be like uh the partner layer right and so the partner layer is you know like this is where the tv actually does the tv things right so this part this guy right here is like us taking in all the video and making a video and then going and handing it off to the partner then the partner actually puts it on the tv right and so we have like some basic what we call like interfaces that we kind of communicate through and that's just what happens and so reggie was written in javascript to create all this stuff and then what i did is i created a fake partner i created me i was my own partner right and so i had another one the regisync and the registync oovoo and what it would do is it would receive all these packets and keep a bunch of math statistics around effectively it's just a big giant running dynamic programming where the javascript would emit one frame right so i would emit one frame uh oh it says one framework of data of both audio and video and we could put like i could make it so that it comes in varying amounts how much uh effect was going to be happening all sorts of fun stuff would happen it would get this one frame the one frame would then be passed over to reggie reggie would take this one frame and be like okay i'm at id1 uh i have uh it came at the time stamp of x that means and i have this much video buffer right i have this much video buffer right why i have this much audio buffer uh right so i'd have all these stats kind of there and then what i would do is that i would then query from javascript and be like hey does reggie reggie do you have here how do i do a little break i don't know how to do this little break thing there we go i i would query here and say hey what id are you what id are you and the moment it got one which is the one i just sent i send another frame and i also update the time of the system i send another message where i update the time of the system and i just say hey let's pretend that we're currently at time uh we're we're at time plus x plus 16.66 or whatever our our thing is right whatever the speed is and so i'd up update the time virtually then i'd send a new frame update update the time virtually send a new frame and we'd accumulate all the stats here and i just run as fast as i possibly can through this which means i was running as much data as possible as fast we could to like test out our c plus layer and not only that but i could create situations right let's say the internet dipped out for a second what would happen what would what would this layer do right here would this layer do all the correct things we do all the required stuff and it was very very fun and so this is kind of like my project right there this was reggie the most reliable pacer very very fun a lot of science went into this one and so this one what i could do is i could take the client and just ram rot it as fast as i can see how much memory is produced and how much stuff is used and are we overflowing uh audio is audio being handed off properly or are we not not doing the right thing if audio dips below and we accidentally go to zero what does the c plus plus layer do does the does the c plus plus layer properly cue up enough audio to send it again because also if you don't know about also or a lot of these things like they require 20 millisecond chunks you can't just send 10 milliseconds and you have to do 20 milliseconds and each one of these packets are 20 milliseconds by the way writing your own oh like uh opus encoding for silence or just like a beep beep beep beep beep beep it's really annoying you know what i mean it's not a fun task to do you have to go figure it out and get stuff sent in and make audio actually be audio and all that fun stuff because reggie would also work in real time as well meaning that i could just send audio and video as fast as i can into it into a ffmpeg player that's really really fast a lot of fun uh it's very very fantastic uh someone's asked you why not send real time why not do real time blah blah blah blah and all this kind of stuff the reason why it would suck to do anything that's not real time is that you can't test stuff fast enough right i want to be able to test every situation and i want to be able to run ci in under 20 seconds right i want to be able to play an hour of video i want to be able to do that one time where i drop audio i want to do that one time where i drop video i want to do that one time where i drop audio a bunch of times i want to be able to do a whole bunch of different things really really really really really fast and it has to work with our system i don't care about dds because it doesn't work with our system you know i have to make it go through tv and all this fun stuff you know what i mean so i have to hack time and make it work within our bounds i can't make it i can't just why would i use something else you know what i mean i have to have direct ties into the c plus layer it has to run directly in javascript right and so it's a lot of fun um any backstory and lore yeah the most reliable pacer that is it i was watching a documentary that featured reggie miller and reggie miller was just a really cool guy he was like a really nice guy i liked him i thought it was pretty cool and so watching reggie miller and all of a sudden i have to build something that paces packets in it was just natural to have reggie miller reggie right it was a lot of fun so that's the first thing we built um the next thing the next thing i did was a whole bunch of stuff that involved uh all of this data that's happening how do we know like is how do we know forward air correction is working in the field not theoretically in a made-up situation but how do we validate that it's working in real time in real life on people's computers right are we actually error correcting are we actually doing anything correct or are we just like completely driving blind and so my next goal was to effectively drive a lot of this this area of just like okay how do we know what we're doing right and how do we know what we're doing wrong [ __ ] uh forward air correction you can just look it up it's pretty easy ulp ford air correcting right there's a whole bunch on this kind of stuff right they're very very simple there's also reid solomon there's all these other ones you know uh and then by the way if someone doesn't like the name reggie and they don't like basketball i just tell them that it's named after reginald hargreaves hargreaves of the worst show ever the umbrella academy uh it's just a blueprint or is to have some implementation oh it has implementation and it was mostly a blueprint i didn't implement any of the the stat stuff i just simply used the stat stuff build tools around it and kind of draw and drove people to do the right stuff like i defined a lot of the status events that are going to be coming off the ocgas that's the open connect gaming machines right so our gaming machines you know since we're doing uh rtp they receive basic statistical things about like what's happening how good is our network how often is it dropping how often are we doing this how often are we doing that all the kind of just basic stuff i took all of that and was just like okay here's the stats that i really think are useful here's the stats i really think are useful i like the idea of the umbrella academy it just it just kept it just it was a show that could have been made in half the amount of episodes how do you learn all these things you just do it umbrella academy could have been made in half the episodes um that's pretty much it and i think i can't even remember but five five the the little kid he was the only he was the only likable character the rest i just found so unlikable i love your content rekindled my love for hobby programming nice okay cool uh how do you prioritize packets on network failure hiccups so that's what we're going to be doing things with like fec fec should hopefully do it you also have rtx rtx does that but if none of this works if you're delivering video at some point if things aren't working you just redeliver what is referred to as an idr frame uh and an idr frame contains the full video and so then you start doing the relative frames from there right so you just you just need one big frame if things start falling apart you know what i mean we'll be open source absolutely not absolutely absolutely not so anyways that's that and so the the stats part which i've been working on because a big problem we are having next is that every single time we would do anything as we're just starting to test how do we know a game failed how do we know that anything went wrong so i just took all of our data sources and built a rapid triager that would tell us what's failing and where is it failing and who's to blame is it the client is it the server is it the network like what caused the problem and what was the problem because people often would just be like my game was really bad audio was really bad video seemed a little chunky this right they'd give us some verbal description and we'd have to go figure out what the hell happened so i just take all the data every last thing and then just be like oh your audio is bad yeah look at your network like look at these look at these network times right here you totally just chunked out are you on the vpn oh you're on the vpn you're on the vpn and you're at your house and you have bad internet yeah that's this i mean this makes sense this is why what happened what happened right like you know do that yeah so it was a lot of fun like those kind of things were a lot of fun and so it's all ocga work it's all like what our servers receive and send it was kind of fun you know and then we had a whole bunch of problems like json we were using the first version was using json to pass events we literally just caved the game server encoding and decoding or just encoding json that's it just encoding json completely cave to the game server so then it went into protobufs and then we got some go uh zero allocation or like zero garbage generating uh proto buffs very very cool that really helped the whole servers run nice you know it was fun it was a lot of fun i enjoyed it i worked on all my stuff alone yeah but you know i worked with a lot of people to get things going um to get things out there running not memory arenas no uh there's there's some cool go stuff that does these like zero allocation uh protobuf stuff it was fun it was a good time i really enjoyed it and so we were just doing that and i still got a little bit i got one last thing i got to do which is i just got to do one more of these little data things and then i'm pretty much off the project and i'm on to my next project which involves react but it does involve subverting react so that's pretty fun i mean that part's pretty cool so i'm happy about that one you know what i mean you know what i mean it does it does involve making reacts become not react right and so it was pretty exciting i'm pretty excited about that part actually i actually really like the thing and guess what i get to build an lsp for it so i'm going to be building an lsp got a little you have to write a lot of rust you got to write a lot of javascript uh yeah it's been fun it's been fun anyways the name hey is i did you know i work at netflix again