when most of us are learning to code the things that we focus on in the beginning are things like what is the best language what's the best course or how to memorize more legal problems i was lucky enough early on to realize that programming is not about memorization or knowing every intricate detail about what you're doing there's a specific way in which great programmers approach problem solving which is not only applicable to coding but every kind of problem solving in the world what even is programming well when you're programming what you're essentially doing is trying to speak to a machine which is very different from talking to a human but there's a lot of similarities if you're speaking english and you're trying to speak someone who speaks chinese unless you speak the same language you won't be able to understand each other that's exactly the case with programming as well in order to be a great programmer you need to understand how to speak machine language essentially and the way machines communicate is not using python not using java but the language of logic the thing is if you learn to speak the language of logic the benefits go way beyond programming who is a programmer web programmers are strictly anal analytical and when they're solving problems they leave emotions completely out of the picture there's no room for getting mad at your computer when it doesn't do what you want because like a computer is just a logical machine that does exactly precisely what you've told it to do that precise to the point where as humans it seems crazy that they wouldn't understand what i'm trying to tell you just because i forget a semicolon but that is just what you have to deal with when you're communicating with a machine you also need to be extremely okay with being ignorant what separates great programmers from new programmers like me it's not that they know a lot more it's just that they know how to look for answers more efficiently and ask better questions great programmers understand that it's never possible to completely understand everything that your code is doing under the hood because programming in computer science is all about abstraction let me tell you a little secret when you're programming as in when you're writing javascript code for example you're not actually speaking of the computer directly what actually happens when you write code and you run it there's a different program called the compiler which transforms the code into machine code which is then even further transformed into something else and eventually into binary because binary is actually the only thing that computers can understand it's more like you're speaking through like three different translation you speak english someone translated it to chinese and then someone translates it to japanese but the great thing here is that even though i have no idea what is going on through these translation process i i can still code i can still write commands and my computer is gonna understand it because of abstraction and so if you're the type of person where you always need to understand exactly every single little detail what's going on which is exactly who i used to be and this is like unnatural to me you can't worry about it you need to be okay with the fact and you need to trust the fact compilers and all these libraries that you're using and everything has been done correctly and that they just works and you only need to worry about the specific part of the problem that you're dealing with and when it comes to actually writing programs the way you should approach it is through the divide and conquer paradigm essentially what this means is that usually when you're writing a program especially after your like very beginner project the things that you're trying to do are very complex and there's a great temptation always just go approach a problem head on and try to do everything at once the way you should actually approach big problems is by first dividing it into smaller parts and focusing on each problem individually and then at the end combining them into the final solution for example right now i'm trying to build this netflix clone the purpose of it is that it's going to look like netflix but also show films and shows from other networks not just netflix obviously this is a pretty big problem if i just try to do all of this at once i think my head would probably explode to the way i'm approaching it at first i'm only focused on just figuring out how to access the data that i need then i will only focus on how to build the first page of the ui then i will only focus on how to get these films to show up on the front end like they do on netflix just focusing on each individual problem individually and then only at the end focusing on combining them into one and this approach brings us directly into step three which is starting with an mep this is probably the mindset that has helped me the most when you're trying to build something big you probably have this big grand idea elf something that you want to reach like i do with my netflix project and then sort of all these sub problems with varying degrees of complexity but in the beginning you need to be okay with just building the simplest functioning version of that problem as you possibly can very first version of my netflix project is just getting the data by the information about the shows and the films that i want to show on the site to show up on my terminal window it's not very pretty but it is a working version of what i want to achieve it could be an absolute mess at first and that is okay because they need the second iteration you go through and solve the next priority order of problems only at the very end i'll focus on the very niche problems on how to make the navbar look exactly like netflix for example it's also an example of what's known as iterative problem solving and it's not just used in programming it's used by for example the best business consultants in the world it's all about focusing on what's most important first building and working mvp or minimum viable product and they're just iterating iterating iterating and getting closer closer and closer to the end product by the way i have a full video coming about how i built this project once it's actually done one day [music] so if you don't want to miss that definitely go down there and subscribe to the channel and while you're down there hit the like button there's no need to smash just a little tap is fine and we'll make me and my like button very happy the next step is to use google a lot and no i don't mean googling how to get more matches on tinder or some cute cat pictures what i mean is googling the answer to every single question that you come across when you're trying to solve according problems whenever you get an error when you get stuck obviously try to debug it try to figure out what's happening but if you get stuck just google it seriously great programmers don't think that their egos are too big for them to admit that they're wrong and just to google the answer there's so many specific things and the specific problems that you'll come across when you're programming that you'll never know the answer to all of it it's okay no one will ever know that you didn't know how to write that regular expression or how to do a for loop in java you can pretend that you brought it yourself no one has to know there is the i still google very basic questions all the time and let me tell you a little secret i still don't know how to write basic sql commands whenever i use sql i always use google even the most basic commands commands are just weird and like texty and like auto increment no no this remains between us right and the final part about thinking like a programmer is to expect problems and be patient to get back to my netflix project it's probably been like a thousand errors in my code already just with the very basic iteration time doing it first normally when i'm coding if my code passes the first time without any problem i'm like amazed because that happens like one out of a hundred times my expectation whenever i run any piece of code is there's going to be errors that is simply the life of a programmer and great programmers have the mindset that mistakes and problems are not problems they are just opportunities for you to learn every time there's an error there's probably something that you learn about your code that you could be improving it's going to make you a better programmer because next time you'll know that oh yeah i need a semicolon here oh yeah this is how this functional method works right so if you want to progress as fast as possible what you should be doing is every time there's an error or you don't know how there's some method works just go to the documentation just read a bit about it just to figure out how it works the more mistakes you make the more you learn and the better you become and that is how you think like a programmer if you want a step-by-step process on how to learn to code effectively you should watch this video right here or if you're looking for project ideas you can watch this video right here and with that let's all keep coding and remember to have a great time along the way i'll see you next time