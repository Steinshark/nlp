hi, i'm james murphy. and today, we're talking about slots in python. slots are primarily a tool for saving on memory usage when you have a lot of really small objects. using them is pretty easy. we'll go over that briefly. but the main point of this video is to help you understand what slots actually are and how they work. that means, we're also going to learn a little bit about what by default makes up an instance of a class and a little bit about descriptors and a little bit about how classes and instances are laid out in memory. i'd like to thank me for sponsoring myself. did you know that i am available for consulting, contracting, training and interview prep services? i also now accept bitcoin for all business purposes including donations. by default, classes act a lot like dictionaries except you access attributes with dot syntax instead of using square brackets. and that's no coincidence. every instance of a normal class has a double under or dunder dict attribute where you can actually view this dictionary. notice that this dictionary only contains instance attributes. so, it contains the x that was assigned on the instance. but it does not contain the class variable v. the variable v would actually be stored in the capital a class object rather than in any little a instance. the way that attribute access works is that first python will look in this dictionary and then if the key is found, it will return you that value. if python can't find what it's looking for in the instance dictionary, then it'll start looking in the parent classes and their parent classes and so on all the way up the chain or raise an attribute error if it doesn't find anything. so, in this case, a.v is found in the capital a's dictionary instead of the little a's dictionary. you get an error if you try to access something that's not in any of the parent classes. but you can add new attributes at runtime because dictionaries are dynamically allocated and you can add new elements to them no problem. now let's define a class that uses slots. it's very simple. you just add a dunder slots attribute onto the class. it should just be a tuple of your instance attributes. in this case, our only instance attribute is x. v is a class variable not an instance variable. the first thing to note about using a slotted class is that instances no longer have this dunder dict attribute. instead of using a dictionary, python will just create the space for each slot directly on each instance. you can still look up slotted variables and change them as usual. plotting does not affect mutability. the main difference in functionality with a slotted class is that you can no longer add new attributes at runtime. all the attributes are decided when the class is defined. however, keep in mind that the class is different than an instance. so, i can still set class variables on the class even though i couldn't set it on the instance. so, it seems that slotted classes are just less functional classes. why would you ever want to use one? let's take a look at the memory usage. here, i'm using sys.getsizeof() to get the size of an instance of a and an instance of b. here, a did not use slots and b did. so, the a instance uses 48 bytes and the b instance uses 40 bytes. okay. so, that's a little bit less memory. but sys.getsizeof() doesn't give us the full picture. sys.getsizeof() doesn't count the size of sub-objects within an object. so, it's completely ignoring the actual size of the dictionary. if instead i use a recursive getsize() function that actually counts the size of sub-objects and their sub-objects and so on, then we see much bigger numbers. the normal class used 230 bytes whereas the slotted class only used 68. that's a factor of three savings just for knowing the names of your variables ahead of time. is it worth it? the difference gets even bigger the more attributes you have. in this case, we have seven attributes. and we compare not slotted versus slotted and these are the results. with seven attributes which i'd say is an upper middle amount for an average class, we have a nearly five times memory savings. personally, i'm rarely memory constrained in python. i have 32 gigs of ram and i don't usually work with data that big. but in the rare case that i'm actually using lots and lots of small objects, a five times memory savings is a pretty good deal. thankfully if i'm using something like a named tuple, this happens automatically. i also tested for speed differences in creating objects, getting attributes and setting attributes on slotted versus not slotted classes. i found slotted classes to be faster. but just a little bit. nothing to redesign your code around. so, if instances of slotted classes don't use instance dictionaries, then how do slots actually work? here, i have a not slotted and slotted class. and then i print out the dictionaries of both the classes. note that it's the instances of slotted classes that don't have dictionaries. the class itself still has a dictionary. notice that, the class object capital b already has an x attribute even though i've never assigned to it. well, printing it out didn't really tell us much. but it turns out that this object is actually a descriptor. descriptors which you could write yourself allow you to modify the way that attribute access happens. when python looks up an object, if it finds that that object has a get method, it'll actually call that method instead of just returning the object. when i try to access little b.x, it doesn't find the x in the little b object. so, it looks in the super class. since capital b.x has a get method, it goes ahead and calls it with the instance being the little b and the owner being the big b. the real number descriptor is written in c and it will directly reach into the underlying memory underneath the instance object and return the value of x. it doesn't have to look up x in a dictionary. it just remembers that all instances of capital b's store their x's at a fixed offset relative to the base instance. we'll see more on this in a bit. and a similar thing happens when you try to assign to x. it calls the set. and then, it uses c to set the value at a fixed offset within the object. okay. so, there's some descriptor magic going on, some stuff that's happening in c. but what actually is a slot? to understand what a slot actually is we need to enter the matrix. we need to understand how python objects are laid out in memory. the actual numbers that we're looking at may depend a little bit on the architecture of your computer. on my computer, sizes take up 8 bytes and pointers take up 8 bytes. so, here i have a slotted class a with no slots. every instance of a is laid out in memory like this. all python objects start out with a reference count and a pointer to their type. they could have other things. but for this class a, there's nothing else. the basicsize of a class tells you how much memory an instance of the class takes. our class a is just a size and a pointer, the reference count and a pointer to the type. so, that's 16 bytes. and when i run it, we see that indeed a's basicsize is 16. similar to sys.getsizeof(), basicsize doesn't include the size of any sub-objects. it's basically just counting up the size of the pointers and the size. sys.getsizeof() actually counts a little bit more though. for the purpose of garbage collection, python actually puts two pointers just before the object starts. and getsizeof() actually counts those two pointers. so, sys.getsizeof() is going to count 1, 2, 3 pointers and 1 size. that's four times eight is 32 bytes. and that's exactly what we see when we run it. but these pictures are big enough. so, let's just focus on the instance and ignore the garbage collection stuff. the last class defined the slot's variable but it was empty. here's what happens if you actually define slots. again all objects start with their reference count and a pointer to their type. directly following that is just a pointer for each slot. so, that's all the slot is. a slot is really just a piece of memory that you use for storing a particular piece of data about the instance. this slot holds x. this slot holds the reference count and this one the type. so, really you should think of the dunder slots variable as naming the extra slots that this class defines. this is also in line with how it actually works with inheritance. so, for each instance, we have one size and four pointers. that's five times eight is 40 bytes. if you include the garbage collection stuff, then that's 16 more bytes and you get 56. let's look at the layout of just a normal class now. as always, we have the reference count and pointer to the type. then instead of having a space for x, y and z directly, we have a space for the instance dictionary. x, y and z don't actually show up anywhere in the instance. you have to look inside the data for the dictionary and that's where you would find x, y and z. after they're initialized, of course. there's also going to be this weak reference attribute which would be part of the object by default if you didn't define slots. explaining weakref is a topic for a different video. just know that defining slots gets rid of it. go ahead and make sure you can explain why the basic size of this object is 32 bytes. so, what about inheritance? what happens if you inherit from a class that defines slots but that class doesn't itself define slots? well, being a slotted class is not inherited. so, even if b inherits from a which defines slots, b will get an instance dictionary. but remember, you should think about the dunder slots variable as being extra slots. so, b didn't define any extra slots. but it still has the ones from a. so, if i define b dot x equals 10, that will not show up in the instance dictionary of b. the x variable was a designated slot from a. so, it will get stored in its designated spot from a. if i do want to define more slots in a subclass, i should only include the additional ones. so, in this case, i add a t slot and the x, y and z ones will still be there from a. for anyone wondering about metaclasses, you will get an error if you try to define slots on a metaclass. you can make it have empty slots though. finally, you can actually define dict as one of the slots. if you do, instances will get instance dictionaries. in this case, instances will have a dict. but they won't have that weakref attribute. i could also define a weakref slot if i wanted weakrefs but not dictionaries. as we saw before, empty slots will prevent the creation of both weakrefs and dictionaries. and if you don't define slots, then instances will have both weakrefs and dictionaries. the last case is if you have something like a dictionary along with additional slots. in this case, objects will have instance dictionaries. but specifically, the attributes x and y won't be stored in the instance dictionary. the legitimate use cases for doing something like this are pretty slim. but that's the way it works. as always, thank you for watching and don't forget to slap that like button an odd number of times.