random or rand function in c actually isn't random and if you've used it there is a high likelihood that you've probably used it wrong on top of that here i've written this piece of c code and all it does is generate a random number and when i run it one time i get this number but when i run it a second time i get that same number again so how do we write code in c that uses rand that is safe but don't worry i'm going to show you how to use it correctly in this video for those of you that don't know an rng or a random number generator is a system that is used to produce numbers that are truly random in computing there are two kinds of randomness we have true randomness and pseudor randomness true randomness are things that are actually random in nature atmospheric noise voltage electrical signals the noise around those signals the position of an electron in an atom all these things are naturally random they're random in nature the opposite is true for things that are pseudo random pseudo random number generators are generators that are made by humans that produce numbers that didn't get derived from a natural entropy source there are ways to do this securely and in securely one of the ways and we'll determine if it's secure insecure here in this video is the live c random number generator libsy rng is a linear congruential generator but that actually boils down to in dlib c is this equation here not feeling so random now is it that equation is derived from this equation for linear generator the equation is x of n plus 1 equals a times x of n plus c mod m now the seed or state value is x of zero in this situation x of 0 sets the state of the rng and allows us to choose new numbers as the rng moves forward well the first thing we have to do is specify a seed to the rng but there's a catch what is the value we use for our state if we need a random state to seed our random number generator how do we start the randomness we can experiment and start by using a constant number as our seed to our rng and see if that fixes our problem unfortunately by using a static number as our rng state seed we are in the same predicament where we get the same number twice now fortunately we do have another option we don't have a rng to seed our random state with s rand or seed rand but we can actually use time to seed our rng it's not cryptographically secure but we can start out and see if that actually gets the ball rolling on getting us some random numbers by seeding our rng with time we're able to actually get the rng to produce semi-random values the problem with this if we are able to predict the time that is used to seed the rng then we're able to predict all the random values to get us even finer granularity on our rng instead of using the second time which is what the time value gets us we can use the nanosecond time which gets us a semi-random value as a function of the cpu clock use the nanosecond time to cedar rng and then from there we have a fairly secure random number generator again these are not cryptographically secure please don't go use these to implement some kind of cryptography or encryption algorithm by seeding the rng with the nanosecond time i'm able to produce values that are extremely random there's no way to predict what the seed is and as a result there's no way to predict the values later on in the rng chain look like now don't go and get too excited okay because we're not through the woods yet this algorithm is not actually cryptographically secure the primary reason for this is the algorithm under the hood that is doing the random number generating can be reversed and arguably predicted so if you want to create random numbers within your c program what you need to do is use a cryptographically secure algorithm the one that comes to mind when programming in c is the use of open ssl's random number generator by using a library like openssl that uses safe algorithms under the hood we don't have to worry about any implementations of lcgs or states or anything like that we can just ask the number generator for random numbers and it will return one or zero if those numbers are cryptographically secure or not based on how much entropy it can find in your system so there you have it all because your code has a function that is called random doesn't necessarily mean that that function actually is random and even if it was if those random numbers are cryptographically secure that being said use libraries that claim to be cryptographically secure and your code will be safe from there after that go watch this video that youtube thinks you will find just as enjoyable where you'll learn something equally that's cool just just click dude it's right it's right there go