hi everyone in this episode our goal is going to be to get an object moving around to the plays input and have another object chase after it first however let's look at one important detail so speed is a measure of how far something travels in a single second so if we say something has a speed of 12 that means it moves 12 meters per second velocity is a vector which describes how far and in what direction something travels in a second so if we take a speed like 12 meters per second and multiply it by a direction like negative 0.8 x 0.6 y we get a velocity vector of negative nine point six meters on the x axis by 7.2 meters on the y axis per second each frame we want to use this velocity to determine how many meters to move the object so we multiply the velocity by a delta time the number of seconds that have passed since the last frame was drawn this number tends to fluctuate but if the game is running at 60 frames a second then delta time will be around naught point naught one seven seconds by doing this multiplication we have successfully eliminated the seconds unit leaving only the number of meters to be moved this frame okay let's open up a new project in unity and i'd quickly like to take a look at the input manager so that arrow to edit project settings input you can see we've got a whole bunch of input axes defined by default so let's take a closer look at the horizontal axis and see it's got the name horizontal which we can edit if we want and then has also got a negative button left and a positive button right so the reason for the name is negative and positive is that in the input class there's a method called get axis and if we pass in the name of the axis for example horizontal then the method will return zero if neither of these buttons are held down to return negative one if the negative button is held down and positive one if the positive button is held down and then we've also got this alternative negative and positive buttons set to a and d and if we look at the vertical axis you can see these are set to down up s&w so we can control our player with the arrow keys or with wasd and these are all editable of course we could change this to be b to move down if we wanted but i don't particularly want that so i'll change it back to s all right in the project window let's just right click to create a new c sharp script and i'll call this layer let's not go up here to the game object menu and create a cube object and we can just attach our player script to that object so as we discussed in the introduction to the unity interface all objects in our scene have got this transform component attached to them which allows us to modify their position rotation and scale now we can modify these properties from our script so for example in the start method of the player class could write transform and note that there's transform with a capital t referring to the transform class in general and then with the small t it's referring to the specific transform attached to the same game object as the script so that's of course the one that we're going to want to use to modify the transform properties of this object so we can say for example transform dot position as you can see here is just a vector 3 so if we want to set that we can say equals new vector 3 and then we just have to pass in values for the x y&z axes so we could say let's say 0 10 0 and now if we run this and see that the object will immediately leap up to 0 10 0 ok let's go ahead and delete the start method and inside of the update method let's worry about getting our input vector so let's say vector 3 and we can call this our input is equal to a new vector3 so now for our x-value we're going to want to get the horizontal input so let's say input dot get access now as you can see there are two get access methods get access and get access raw so the difference between the two is say we're not holding down any key so both of them will be returning 0 then say we press down the left key get access row will immediately start returning a negative 1 while get access will smooth the value from 0 to negative 1 over a couple of frames i tend to use get access raw because if you want the input to be smooth then it's usually preferable to do that yourself so that you have greater control over it so let's go with that one get access raw we're going to pass in the axis name as a string so open quotation marks let's write in horizontal closed quotation marks and close the parentheses then comma for the y-axis we're going to just have a value of zero and then we'll get our vertical input for the z axis so once again just input.getaxis raw this time passing in vertical as our string parameter and then close the parentheses for the vector 3 and semicolon let's quickly just do a printout of the input vector and have a look at that in unity so i'm just going to turn off the collapse option in the console and if you press play now you can see it's printing out 0 0 0 and if i press left the x-axis is negative 1 right it's 1 and up and down is working as well all right so in order to get the direction of the input we're going to have to normalize that factor as we spoke about in the last video so let's say vector 3 direction is equal to input dot normalized which returns the normalized vector 3 and then at the top of the class here we can just define a float for our players speed set that equal to may be 10 then we can say a vector3 velocity is equal to the direction multiplied by the speed finally we can make a vector3 move amount which is equal as we discussed to velocity multiplied by time dot delta time all right so now to update our transforms position we can say transform a drop position plus equals the move amount let's save that and give this a try so if we press play we can now move this object around very nice an alternative way to do this which is perhaps a little more common is to use the transform dot translate method as you can see this takes in a vector three for the translation in other words the move amount so if we save that and just play again the behavior will be identical all right so next we're going to want to introduce a new object to chase the player around so let's create a new c subscript and you can just make all this chaser and then i'm going to crash a little sphere object let's move this off to the side share and apply the chaser script to that so inside of this chaser class we're going to need a reference to the player objects transform so that we can keep track of its position so let's at the top of the class create a public transform variable this time transform with a capital t referring to the type and we can call this our target transform now one of the nice features of unity is that if we make a variable public inside of a class that inherits from monobehaviour then if we just save this quickly that variable will show up and be suitable inside of the inspector so if we want to assign the players transform to this variable we just drag the cube into that field there are ways of getting the target transform entirely from within the code searching for the object using its name or tag or something like that but this is the easiest and probably most common way of getting a reference to another object so let's delete the start method since we won't be needing that and we want to start off by calculating the direction between our own object and the target transform so we briefly looked at how to do this last episode we need to take the position of the target and subtract our own position from that to get the displacement and then we normalize that vector to get the direction towards the target so let's create a vector three and this is call this the displacement from target this will be equal to target transform to position and from that we'll subtract our own transform dot position all right we can then calculate vector three direction to target is equal to the displacement from target dot normalized let's create a speed variable in here as well so float speed maybe make a little bit slower than the player say seven and then we can say vector three velocity is equal to the direction to target multiplied by the speed finally we can use the transform dot translate method passing in velocity multiplied by time dot delta time to give us our move amount let's save and try this out folders press play and we should see the sphere now chases after us because when it reaches us then it does the sort of wobbling thing as it overshoots its target and then corrects and overshoots again and so on it might be quite nice to sort of define a stopping distance so that maybe it's before quite reaches the player so let's say float distance to target is equal to the displacement from target dot magnitude we can say if the distance to the target is say greater than 1.5 only then will we actually move this object towards the target let's try that out now as you can see it stops about 1.5 units away from the player it might be quite nice to make this speed variable public as well and we can perhaps do that for the player class too and this will just give us easy access to these variables so even inside of play mode we can experiment with different values and this is obviously a great tool for experimenting with different values and just seeing what works best it's worth noting that any variable that you change during game mode will revert back to its value before you entered game mode another thing to note is that we've set this to seven now in the inspector so even if i come to the script and now give it a starting value of zero the inspector value takes precedence over the script value so you can see even though it's zero in the script it's actually taking the value of seven from the inspector as a sort of finishing touch to make our scene a little prettier let's perhaps right-click and create a new material can call this the player material and we can drag that onto the cube and we can just give it a different color and we make that a slightly stronger red and then let's duplicate that with command d and call this the chaser material apply that to the chaser and maybe give this a green color then let's also just create a plane and i'll move the cube and sphere to be sort of sitting on the plane can make this a little bit bigger maybe just scale it out if you don't remember the scale tool is up here where you can switch to it with the r key and alternatively of course we can just edit the values manually in the inspector all right let me just duplicate this once more create a ground material apply that to the ground and can make this a nice dark gray all right so our scene looks much prettier now let's just try this out one final time loads of fun could play this for hours in all seriousness though we've achieved what we set out to do and the result is pretty nice so i hope you've enjoyed and see you next episode cheers