hi everyone last video i mentioned calculating the time to impact of a missile chasing a target as an example of a problem that could be solved using the kinematic equations in this video we will be working through such a problem let me define the program lumore precisely so there are two objects a and b which start a known distance apart i'll label this h for head start we know the initial velocity and acceleration for both objects and we're required to calculate how long it will take for object b to reach object a we're going to start by solving this problem on paper so to speak and then afterwards we'll actually test our solution by programming a simulation in the unity game engine if you'd like to try and figure this problem out on your own now would be a good moment to pause the video all right so we're trying to solve for time but as discussed in the last episode we need three pieces of information to find an unknown value using the suvat equations and we only know two things about each object here a good approach in situations like this is to try and determine an unknown value for one object in terms of the unknown value for the other object in this case we can do that with displacement even though we have no idea how far object b is going to have to move in order to catch up to object a we do know that we'll have to move the same distance that object a moves plus the initial distance between them thus we can say that the displacement of object b is equal to the displacement of object a plus h so now that we have this will want a selection equation that souls for displacement and also contains our two known variables initial velocity and acceleration as well as the variable we're trying to find which is once again time equation number three is the only one which fits the criteria so we will grab that one we can now use equation three to substitute in for displacement a and displacement b we've now successfully arrived at an equation with time as the only unknown variable so you can get to work solving for it note that i'm using a subscript a and b to indicate which of the two objects a variable belongs to and importantly time does not get a subscript a will be because it's of course going to be the same for both objects now we could substitute our known values into the equation at this stage already but i'd like to keep working with the variables to arrive at a general solution for this problem and we can substitute the values in at the end let's start by multiplying everything by two to get rid of the fractions we can then move everything over to the left hand side to get the equation equal to zero and i'll also arrange the equation starting with the terms containing t squared and then the terms containing t and finally the constant term negative to h we have a common factor of t squared in the first two terms so let's take t squared out there and in the next two terms we have a common factor of t so we'll take that out as well this is now easily recognizable as a quadratic equation if you think of the general form for a quadratic equation ax squared plus bx plus c then in our equation acceleration b minus acceleration a is the a in the general form also called the quadratic coefficient 2 times initial velocity b minus 2 times initial velocity a is the b in the general form also known as the linear coefficient and negative 2 h is the c or the y a constant term in the general form let's write this all out so you're right you're familiar with the quadratic formula x equals negative b plus minus square root b squared minus 4ac all over 2a all we have to do at this point is substitute our calculations for a b and c into the formula to get a general solution for time for this sort of problem this equation will of course give us two solutions for time because of the plus minus sign the solution where we subtract the square root term will be negative which of course is meaningless to us in this problem so we only care about the solution where we add the square root term to arrive at a final answer let's now substitute our known values into the equation and as mentioned i'll replace the plus minus sign with just a plus sign simplifying this gets us to 112 over 28 which equals 4 so that's the final answer it will take 4 seconds for object b to catch up to object area here is a graph of the solution for anyone interested bit of course takes the form of a parabola and our two solutions are the intercepts with the x-axis at four and negative one point four three i thought it was interesting to show how as the acceleration for object b is decreased the amount of time it will take to reach object a increases and to object b the acceleration is less than that of object a's at which point the parabola flips upside down to give us two negative solutions of course indicating that object b will never catch up to object eddy all right time for the second part of this video where we program a simulation of the problem in the unity game engine i've got a simple scene therapy on unity with a orthographic camera and two sphere objects a and b you can see object a is 40 units ahead of object b now going to create a c-sharp script called motor and we're going to be attaching this to both object a and b so let's open the script up and create a public float initial velocity and a public float acceleration and then a private float which will be the current velocity in the start method we can then just set current velocity equal to the initial velocity now we'll be moving these objects in fixedupdate instead of an update as we normally would because this gives us an easy way to increase the accuracy of the simulation by decreasing the fixed update time step so we can say avoid fixed object and in here we'll want current velocity to increase by acceleration every second so we can say current velocity plus equals acceleration times time dot fixed delta time and then i want to actually move our object so transform dot translate vector three lot right multiplied by our current velocity multiplied by time dot fixed all the time all right let's save that and now in unity we're going to create a his second class which is going to be our timer class let's just create an empty game object called timer to actually attach this to open that up and in here we're going to have a public static float called the predicted time and then we're also going to have a public reference to both of the motors so object a and public motor object be in the start method will now want to calculate h the distance between them so float h is equal to object a transformed or position x minus object b a dock transformed opposition dot x all right let's now calculate a b and c so a we know is equal to object b dot acceleration minus object a dot acceleration b is equal to two times so i'm taking two hours as a common factor two times object b initial velocity minus object a dr. initial velocity and finally c is simply equal to negative two times h all right i can now say that the predicted time is equal to and here we're going to be substituting into the quadratic formula so negative b plus math f dot square root of b squared minus four times a times c close parentheses divided by two times a all right let's just delete this update here we don't need it let's also then do a printout of the predicted time then in the motor class the fixed update method is only going to run if time dot fixed time is less than time a dot predicted time so we'll enclose all of this in that condition all right we can start out by testing the values from the actual problem so i believe object a had an initial velocity of 19 and an acceleration of 3 and object b had an initial velocity of 1 and an acceleration of 17 all right let's quickly onto the timer and assign object a and object b quickly go to save the scene and then we can press play so we can see e4 is printed out as we calculated ourselves and once four seconds have passed the object stopped moving and you can see that at this moment in time b has just overtaken object a now if we up the acceleration say of object b and change this to 30 and press play let's change to two and a half seconds and you can see that this is getting less and less accurate object b has actually gone quite a bit past object a at this point so what we can do to increase the accuracy as i was talking about earlier as in the timer class we can create a public float called time step set this equal to 0.02 by default and then in the start method we'll just say time dot fixed delta time is equal to time step so let's try the same thing but with a time step of say 0.01 so we play this now and as you can see it is very close to perfect obviously i'm not suggesting that you actually use a lower fifth delta time value in your games i just wanted to demonstrate how decreasing the time step will improve the accuracy of the simulation all right that is everything for now so until next time cheers