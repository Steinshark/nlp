typescript versus js doc javascript for static type checking the reason why i wanted to read about this was that rich harris made the craziest tweet of my lifetime where he said that spelled migrated from typescript to jsdoc and it was a better move so i have to know i i gotta know i gotta know hi youtube all right here we go there's a debate to be had about whether using javascript or typescript leads to better outcomes when building a project the advent of using js doc annotations to type a javascript code base introduces a new dynamic to this discussion yeah and let's just let's see in this guide will investigate what it looks like and and come to an opinionated conclusion okay there we go if you came to an unopinionated conclusion i would hate it i would hate that if you talked to me in 2018 i would have solidly recommended using typescript and steering away from javascript okay so that's kind of where i'm at right now i am on this train of you should oh music is a bit loud my bad uh you should use typescript you should not use javascript that's where i'm at right now let's see the ration of the rationale is simple i'm exceedingly convinced the value of that static typing provides okay it's not static it's technically more like a runtime typing at least typing we'll just call typing okay for your own sake it's typing in terms of productivity and avoiding bugs in production i appreciate this can be a contention oh see i appreciate that this can be a contentious issue no it's not a contentious issue only dhh the guy who thinks no types is more better more bestest uh thinks that this is a contentious issue it's not it's not contentious types are fantastic but that uh that is my settled opinion on the subject other opinions are available yes other shitty opinions are available absolutely you're 100 right typescript has long had a good static typing story no it hasn't again not quite correct on this one okay like a good try uh because javascript is dynamically typed historically it has not again i think there's like this fundamental miss typescript is not actually typing anything typescript is simply just is the abstraction on top of javascript it has no indication into javascript other than features that used to be compiled to javascript or enums but that's about it right type hints would be a better term for this it's not actually it's a linter a linter is also a really good way to put it typescript is not it doesn't provide it's yeah it's a linter uh thanks to typescript support for js doc javascript can now be statically type checked sort of right again any is like the whole reason why you can't be uh if you pluck something out of a string like say you do some log plucking right and there's an enum within a log that's a part of a freeform string when you pull it out of the string you have to cast it as something now your enum or your list of available options may actually be more limited than what's available and you just don't know and you don't have the language to describe that and that's the problem you know what i mean that is the real problem now that you know you're welcome you're welcome nothing can replace rust nothing can replace a language that requires typing right even golang uh even golang you know this is just a fundamental feature java fundamental feature right jsdoc is a markup language used to annotate javascript uh source code files using comments containing js doc per uh programmers can add documentation describing the applications programming interface of the code they are creating the typescript team has taken jsdoc support and run with it you can use a variant of jsdoc annotations to provide type information in javascript files what does this look like all right simple typescript here we go string my string okay so that's typescript this is typescript statement should become the equivalent of this hmm okay interesting i didn't know you could type variables i didn't know that so that's kind of cool right gross it is gross in the sense that i don't like comments but i also don't like transpiling i want you to sit for a second just for a second okay i just want you to sit for just one second i want you to think about the fact that there has been hundreds if not thousands of humans that have tried to make building and using javascript better with typescript there has been tens of thousands to hundreds of thousands of people just fighting bundling and building when it comes to typescript so is a comment system the worst thing in the world it may not be the worst thing in the world since we don't have uh since the language itself doesn't support types okay i'm just saying this is this is no less a lie than this is a lie they're the same level of lying right it's more chars agreed with that that's why i'm not hugely loving this but i'm looking for an alternative i'd be willing to give it a try right uh this is a type enhanced javascript which the typescript compiler can understand and type check type enhanced this is a okay i have been programming i've been in school or programming or thinking about programming for 20 years this might be the first time i've ever used two words consecutively that is type enhanced this is great all right uh why use js chalk javascript okay yeah i'm actually this is this is what i want to know why would you use jsdoc javascript instead of typescript well there's a range of possible use cases perhaps you're writing simple note scripts and you like a uh you like a little type safety to avoid mistakes yes so i would say let me let me refashion what they're saying really quickly all right so here's left pad d's uh a recent repo i've made and i have like a running script right here like i want to be able to do some data processing and i want to be able to just execute it so there's a shebang involved well unfortunately with that shebang it's just node running so theoretically what i could have done is i actually could have annotated that with like a little type look that i get these beautiful little things so that's kind of nice right and then i'll links it actually does work i'm actually getting a lot of the lsp and going on right there it even has the proper typing and all that so actually that in some sense is pretty cool you prefer type garnished yeah type garnish could be pretty good too so i could i see myself liking this for little shebang scripts that i want to run perhaps perhaps i could find myself liking that right interesting okay anyways or maybe you want to dip your project's toes in the water of static type checking but without fully committed committing js docs i'll allow you to do for that let's see or your team to uh may simply prefer not to have a compile step so i feel like this the second argument's a really big thing and i i am definitely much more thinking about this more and more this is becoming an increasingly important thing i've been thinking about which is that compiling or using a translation layer no matter how convenient you think it might be it has a lot of pain in the ass problems right it has a lot of pain in the ass problems that you run into and anyone that's done anything that's more productiony will know that there there does just come layers of annoyingness you have to deal with so could i like this maybe uh that in fact was the rationale of webpack team a little bit of history webpack has always been a javascript code base as the code base grew and grew there was often discussion about static typing however having compilation step wasn't desired typescript has quietly added support for type checking javascript with assistance of jsdoc for some time initial support arrived with dash dash check js okay nice so this has been around for a while a community member by the name of mohsen azimi hey thank you buddy i appreciate that started experimenting using this approach to type check the webpack code base his pr ended up being the test case that helped improve the type checking of javascript by typescript typescript 29 shipped with the whole host of j stock improvements as consequences of webpack work oh this is really cool look at this that is actually super cool also i'd say it's super cool of the typescript team to allow for a competing strategy like this right because in some sense that's a maintenance nightmare right i know 2.9 was ages ago that's the best part we're in five what five one is beta right now so this is actually a really cool thing for them to do because it is there's a lot of work when it comes to this uh this also helps popularize the approach of using jsdoc to type check javascript code bases it demonstrates that the approach could work on significantly large code bases these days jstock typing checking with typescript is extremely powerful while not quite on par with typescript not all typescript syntax is supported in jstock that's good i'm not convinced that a lot of typescript is good right i am not convinced so one thing that i really hate about just typescript in general is that you end up writing two pieces of code you like this is for library developers so anyone that just develops applications this will be a huge hit miss for you and you won't understand why this is a pain in the ass but if you develop libraries what you'll find is that you write how your data should look how it should transform how it should be you're going to be using a lot of generics kind of really going through this extreme stuff just to get through it and it's almost like you wrote business logic but only in types and then afterwards you rewrite it again but in actual business logic and i i really i really dislike that it feels like i'm always maintaining two separate things always and it feels really i don't know how to describe it other than i just really dislike it um especially when it comes to like like key leads to a specific type in a map or things like that that can be really frustrating uh any sort of key discriminator where the discriminator is the key into an object or a key into say a map it's annoying it can be very very annoying uh i don't like inference i've i've already talked a lot about why inference i think is bad in a typescript i can give you a quick one right here uh one of the most important features of typescript is find references the moment you lean into inference and you're not generating concrete types now if you use zod's infer that builds out that type and then you have that as a concrete type that you export i'm totally for that you are explicitly typing it you're just using zod as the medium uh totally cool with that but if you cannot find the references of every object you use instead you rely on uh inferred typing you're going to start returning objects that people will partially type so that they can pass to other functions and you effectively lose where does your function go you have to find every place in which that function is called every place in which it is retyped into some sort of new type follow all those types to go where you know where they're supposed to be i think it just leads to more complicated programming and harder refactoring ultimately in the end but again that is because i do library development i do not do a lot of application development i mean i guess i do a lot of cli application development but mostly a huge amount of cli application development ends up being library development with like a very thin thin layer of ui in the ui is dramatically simple because it's cli you know what i mean all right today it's completely legitimate choice to build a javascript code base with all the benefits of static typing okay why use typescript if you're interested let's see if you're starting a project and want to make use of static typing how do you choose between typescript or javascript with jsdox well unless you have a compelling need to avoid a compilation step i personally believe typescript is a better choice for a number of reasons okay let's hear why uh what company do i work for i work for netflix by the way uh first uh the tooling support for using typescript directly is better than that for js doc javascript i'm curious about that what does that mean by tooling support i'd like to see some concrete examples uh at the time of writing things such as refactoring tools etc uh in your editor work more efficiently with typescript than jsdoc javascript and what does he mean by refactoring because i'm pretty sure there's exceptionally few refactoring tools available in typescript in general secondly like do they mean rename across a project if that's what you mean i get that that would be kind of a pain in the ass uh secondly uh working with js doc is distinctly noisier yep i can buy that as well it requires far more keystrokes to achieve the same level yeah but this is where snippets take over anyone that complains about keystrokes you know if you're really bothered by something create a snippet honestly i don't do much for any snippets but i could see myself using js docs as like a snippet right jst like jst enter and boom it's just like type your highlighted uh boom make it go i don't really like it makes it noisier to read now that on the other hand i fully am on board with and i do not like the noisiness of reading but noisiness of typing is kind of like a i don't find that a a compelling reason like i think this looks cleaner than that i find this much harder to reason about than this right here you know what i mean exactly yeah relearning yeah relearning how to visually uh filter out comments that are unimportant versus important would be very hard i may be biased by my familiar familiarity with typescript but i find that typescript is easier to read and comprehend compared to jsdoc this has always been my big thing is i've always just found js talk harder javascript alternative the fact that js doc annotations live in comments rather than directly in syntax makes it harder to follow i would agree with that it certainly does not help that many vs code themes present comments in very faint color yeah uh my final reason for having typescript comes down to falling into the pit of success you're cutting against the grain when it comes to static typing in javascript you can have it but you have to work a bit harder to ensure that you have a statically typed code i mean that's a hard one again the pit of success is kind of an interesting term i know i kind of alluded to it earlier but there's a lot of hard parts when working with javascript or with typescript there's a lot of ancillary concerns you have to have and so i'm not 100 concerned convinced that it's simply easier but i do think that this one right here this is the best argument for it completely typescript is easier to read than jsdoc agreed type 1 in the chat if you use vs code one in the chat if you use vs code don't worry i'll ask about neil vim next type one in the chat if you use vs code okay you know i'm not gonna lie to you it's not the overwhelming amount of ones i was expecting i actually figured this would be a lot of just like just blazingly fast number of ones mods get them all got em hey would you like to have a seat um okay so type 69 in the chat if you don't use vs code 69 in the chat if you don't use vs code you know i'm actually a little bit surprised by that i would say that the editor has greatly changed really it to me it seems like we've greatly changed because i think if i would have asked that question two years ago i think it would have been mostly ones and a few 69s okay interesting yeah let's do a little let's do a quick poll because this is actually really interesting because this is very much so different than i would have ever guessed uh what editor uh we'll go like this we'll go vim slash neovim right slash buy right they're all there emacs you know do max any of those variants uh vs code uh intellij and then we'll go like other which is going to be like sublime helix uh anything that kind of falls in the other category because i know there's quite a few of you that enjoy yourself the helixers okay he looks deez nuts i know very very impressive i would actually be genuinely shocked if vs code vim vi outweigh vs code wow i would not have guessed this honestly i would this would not have existed a year ago hands down i don't think this is just because my audience highly indexes probably into people who use vim but i would expect that this number to be half this vs code if not worse like the fact that it's this close that's pretty crazy netbeans would fall into other thanks for the content my background is in 3d animation what do you think about switching careers at 34 i think you're fine like it's all about hunger okay it's all about hunger and your desire to learn and to be awesome at it so this is actually to me this is super surprising i would not like i've done this poll before maybe three two years ago and it was like for every one vim vi neil vimmer there was 10 vs coders cool all right let's do i want to do one more i want to do one more i want to do one more because that's just i mean to me that completely blows my mind to me that completely blows my mind that that that that can exist uh new pull looks like this do you use vim motions let's see or let's see what motions what editing motions uh let's go like this mouse uh plus keyboard right like your standard your standard you know opt you know option slash control slash shift all that kind of crap uh vim motions helix slash i don't know how to say those ones is there any other ones uh is there any other ones oh yeah there's emax emac emacs right there you go there's people that use a mouse for editing i don't know these things okay queen all right so what is the breakdown of this because this is actually another compelling story to look at which is our previous one had about 230 to 210 for vs code devin by neovim now the real question is how how much does yeah look at this vim motions are everywhere imagine using a mouse i know emotions are painful i know i've seen it not a this is actually super cool i know that's what a vs code can be used without a mouse i know but there's like mouse and keyboard editing meaning that you're just using your standard kind of vs code ones they're not designed for being uh they're not designed for being really good with text editing there's shortcuts you can use vs code without a mouse i get that but vim is designed for editing text at a high speed helix there's some things about helix that i don't love i did forget i know my bad anyways okay just a quick question i was just curious about it so it looks like even more people are in the vim motion camp than i thought okay you can grow to love helix oh helix deez nuts that's all i can say about that okay so let's let's is there any more conclusion here on the other hand you're cutting with the grain when it comes to static typing and typescript uh you have to work hard to opt out of static typing the typescript defaults tend to uh toward static typing while javascript tends away i don't know if that's true the problem with typescript is that you get the illusion of typing which is also its benefit right because you know some of the hardest parts about developing with a static language is when you get into just the pure of generics and uh and just like data coming in and string manipulation stuff and pulling you know like there's like this whole sucky side and that's where typescript's really easy because you can just be like as any as whatever the hell i want right and you can just go right in you know what i mean and so i think that that is um you know it doesn't it's not static typing it's suggested typing and it's very i mean i love this okay so this was a good article i think they made a really great point i'd love to i i should try js doc one of these days like really try it can i love js doc right like what what tools would i need to see and how would how would i like to use it to see like could i get used to seeing comments as being type information is does this pattern actually go away from suckiness at some point or is it annoying right you tried it you didn't like it see i haven't tried it i'm very curious i i just i'm very curious because it's a very important point that i think you know a lot of people they see something they don't like it off the rip and then so they discount it as being bad or they see something and it's a little bit hard to comprehend and you discount it as being bad and i can't say that that is great i know i know there's these proposals okay i'll believe types when types get here i'd love to see types i'd love to see types it's all bad okay good i'm glad to hear that one more question static versus uh dynamic right static typing dynamic typing i'm curious what do you guys prefer because this is like in my head so before i even look at the poll i'm going to close my eyes in my head it should be like 95 to 5. in my head that's what i think is going to happen but i'm not necessarily blown away if it's not there okay so 95 to 5 was a little overstated on accident uh oh no actually that was pretty close okay maybe it's not that bad maybe my guess is about right