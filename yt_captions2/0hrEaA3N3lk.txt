hello and welcome, everyone! i'm james murphy. and welcome to mcoding where we try to get just a little bit 
 better at programming every episode. here's a trap that every single python 
 programmer will fall for at some point in their career.   there's pretty much no setup. all i've got is a small class with a 
 class variable "__count," a getter, and a setter. we create an instance of 
 the class and print the count just as a control. then, instead of using our setter, we 
 manually reach in and try to change the count. and then we print it. couldn't get much 
 simpler of an example than that, right? so what do you think it'll 
 print when i run this main function? i'd give you a minute to think about it. but it seems like the answer should be very obvious. the first print statement should print zero, 
 that's the default class variable. and the second should print 42. but when we actually run the 
 code, we see zero printed both times. but there's what, 11 lines of code here. what could i possibly be doing wrong? if you don't already understand what's going on, the frustration of a bug like this, this is outrageous, it's unfair! how can you be on the council 
 and not be a master? no, i'm not using a non-ascii look-alike 
 character or some other thing to trick your eyes. but yes, it does have something 
 to do with the name of the variable. in particular, it has everything to 
 do with these two leading underscores. if you just name the 
 variable 'count' instead of '__count', you would get the output that 
 you're probably expecting in the first place. so something funny is 
 going on with the underscores. but if i use the setter, everything 
 would have worked fine. it was only when i tried to 
 directly change the object that it didn't work. and to add to the 
 confusion, the value 42 is in there. when i directly set the value of the count, and i print it out by directly grabbing its value, we do see the 42. it's just the call to 'get_count' that still returns 0. to figure out what's going on let's print the dictionary of this 
 object after setting the count with both methods. very surprisingly, if you're not aware of this feature, the dictionary contains two different count variables. one of them is the one that we intended to set. and the setter apparently set this variable. w h a t ? and likewise, the getter 
 appears to be getting that weird variable, not the variable that we set in our code. well, let me introduce you to the questionable 
 feature behind all of this confusion: private name mangling basically, if you're inside a class and 
 you name a variable with two leading underscores, then python will replace all uses of that 
 variable with a mangled version of that variable. the reason for doing this is 
 to sort of support private access specifiers like they have in other languages like c++ and java. suppose i'm building a gui 
 library, and i have a base widget class. i keep count of all the widgets and 
 increase it whenever i create a new one. i also use the count to give each widget a unique id. but there are going to be tons of 
 different widgets, text boxes, labels, buttons. but in some subclass, like this 
 button, i might also have some kind of count. in this case, the button's count 
 means something totally different. the button is counting 
 how many times it's been clicked. whereas, the count in widget was like the total 
 number of widgets that had been created before this button. but maybe, i have a whole class hierarchy of widgets, and i didn't write all of them. most of them were written by a 
 mix of ten different open-source developers. and of course, anyone that uses 
 the library is free to create their own widgets. because of this automatic private 
 name mangling that happens, there's no conflict here. all uses of this '__count' are automatically 
 replaced with this '_widget__count'.  whereas, all usages of this '__count'
 get replaced with '_button_count'. because of the private name mangling, the author of the 'button' 
 class doesn't need to know or care about the variables and private 
 implementation details of the widget class. everything just works, and there's no conflict. at least, that's how it's supposed to work in theory.   but in reality, this picture 
 comes with a lot of asterisks. the first very important asterisk here 
 is that python does not have private variables. all variables in python are public. this private name mangling 
 just changes the name of the variable. it doesn't actually prevent anyone from accessing it. so if you know how name mangling works, you can still reach inside the 
 class and change anything that you like. the intention of name mangling 
 is to prevent accidental reusing of variables, not purposeful modifications by 
 a nefarious class author. the second asterisk is that 
 the rules for how name mangling works and which variables it applies to are pretty weird. python does this name mangling 
 if your variable starts with two underscores. unless it also ends with two 
 underscores, then it's not mangled. including if your variable is 
 just two or three underscores. and it does this for all 
 identifiers, including local variables. so if you were to look at the local 
 variables of this function, you would see this. including, for some reason, imports, unless the import has a dot in the name. and it doesn't just do 
 this on 'self' and local variables. it does it on any usage 
 of a variable name of this form. and the mangling is done based 
 on the class where the code is defined in. not the class of the object. so this statement will 
 try to set this '_a__version' of the x variable. even if b isn't an instance of a. because this init function 
 was defined inside of the a class. it's going to use a here. but it doesn't just use the class name. if you add underscores to the beginning 
 of the class, that doesn't change the mangling. so, even if you have a bunch of underscores 
 at the beginning or, more realistically, one underscore at the beginning, the 
mangled name will still just have one underscore. unless the class name is only underscores. then nothing is ever mangled. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  if you're interested, here's a python 
 implementation of how the mangling would actually work based on the given class name and identifier. and if you're looking for the actual 
 cpython implementation, then you're looking for this 'py_mangle' function. don't worry. i'm not 
 actually going to go over the c code. but the one thing that i do want to take 
 away from this is actually the name of the file this is in. it's called 'compile.c'. that's right. as if it wasn't already confusing enough, name mangling actually happens at compile time. yes, python is compiled and it is also interpreted. and the name mangling happens at compile time. so that means if i have 
 this 'get_count' example like at the beginning, the usage of '__count' here isn't 
 mangled because it's not inside the class definition. and we see 0, just 
 like at the beginning of the video. but if i had defined this 
 'get_count' function outside of the class and then assigned it at runtime, then because when this function 
 was compiled, it was not inside of a class, this usage of 'self.__count' doesn't get mangled. and therefore we see 21 instead of 0. so literally just moving where the function was 
 defined can change the behavior. that means in any class 
 depending on this private name mangling, you can't use many 
 of the dynamic features of python, no dynamically created 
 methods, metaclasses, or decorator magic. that's not to say those things can't work. but it just becomes incredibly, 
 incredibly confusing in order to make it work. if you want to stay safe and not worry about it, you're pretty much 
 limited to features of static languages. which is not completely bad. in fact, i recommend 
 that, especially for larger projects, you self-impose a lot of the 
 restrictions that static languages force on you. but that's besides the point. just be aware. if you're using mangled names, there is a very high chance that 
 other developers, including yourself in the future, will be confused by what's going on. in order to get a feel for when 
 and how python does this mangling and to verify that it actually does 
 happen at compile time, not at runtime, i highly recommend you check out compiler explorer. for python, it shows you the 
 bytecode output of your module. you don't need to understand all the bytecode 
 in order to see what's going on here. put in a recognizable constant so you can 
 find where that corresponds to in the bytecode   very nearby. notice we have this "store_attr". and there we see it, a mangled name. you can see how if we don't 
 meet the requirements of a mangled name, like just having a single 
 underscore, then the mangling doesn't happen. same thing if we had two 
 trailing underscores. no mangling. we can use this to see that the mangling 
 still happens even if we're just using a local variable.   and we can see that it still happens 
 even if we have a deeply nested dotted name.   any use of this identifier will get 
 mangled as long as we're inside the class. but if we're not inside a 
 class, look for that constant here. then the name doesn't get mangled. please try this yourself. check out all the different cases 
 of variable names and class names and whatever. and see for yourself when 
 and where the mangling happens. my favorite absolutely cursed case of this is this.   of course, i've literally never seen an 
 actual module that's prefixed with two underscores. but just so you can see what the compiler does. we can see python does 
 not mangle the name of the module, but it does store the 
 module under a mangled name. but if we just import a double underscore module, then both the stored name 
 and the imported name are mangled. and i guess it's mostly just curiosity at this point. even i wouldn't do something this cursed. now that we understand that 
 name mangling happens at compile time and after a brief break to calm down, i just wanted to address 
 what's usually the most common question. and that's how does name 
 mangling work with 'getattr' and 'setattr'? mangled names are just names at runtime. so if you want to use 'getattr' and 'setattr', you need to just manually mangle the name yourself. and additionally, mangling 
 does not apply inside strings. it only applies to identifiers. so think variable names and dotted names. if you use 'getattr' or 
 'setattr' and forget to mangle the name, you're probably going to 
 get an error or set the wrong attribute. so finally, we need to 
 address the elephant in the room. and that is, because of the 
 confusion and complexity of name mangling, do people actually 
 use private name mangling in practice? and should you use 
 private name mangling in practice? in my actual experience programming in python, i pretty much never use this. and i pretty much never 
 see it in anyone else's code either. so what do i see? the most common thing that 
 i see is single underscore variable names. now, different people will tell 
 you that a single underscore prefix means that a variable should be treated as a private variable or a protected variable or an implementation detail. and i'm not going to argue about the 
 technical definition of what it should be called. suffice it to say that the convention 
 and the popular unspoken rule is that an underscore prefix variable means "don't touch me." if the author of the class 
 meant for you to be able to change it,   they would give you a way to do that. often through getters and setters. rarely, i do see this dunder 
 form of an attribute to mean private. but actually, i more often see 
 that as a public kind of magic attribute. more like a dunder-len or a dunder-str. these are typically not private. it's very common and 
 expected for a class to override these. but the problem is that these approaches 
 don't actually solve the original issue that we had.   remember, we had a hierarchy of widgets. and we didn't want someone writing a widget 
 to have to understand the implementation details. and avoid the variable 
 names of all the parent classes. if i just use single 
 underscore prefixes on my variables, that's certainly clear to readers of my code that: this is an implementation 
 detail. you're not supposed to touch. but in order to know what all 
 those attributes are that i shouldn't touch, i need to end up reading all the 
 source code of all my parent classes. otherwise, how do i know that my  parent
 class doesn't have their own 'don't-touch-me' variable? and so you have a choice, a trade-off. you could use a single underscore. and force that every class that inherits from you 
 needs to know the implementation details of your class. or you could use private name mangling. that way people that want to subclass your class don't have to worry about 
 any of your implementation details. but you pay the price in 
 terms of using this confusing feature. and you lose some of that 
 ability to use python's dynamic capabilities. or, and this is also a very questionable idea, you could manually mangle the names. subclasses don't have to 
 know about your implementation. there's no unexpected, hidden, or confusing side effects. but your code looks 
 horrible, and your co-workers hate you. honestly, it's a trade-off 
 you need to decide for yourself. but full disclosure, in the wild, the most 
 common approach is to use the single underscore. and to just hope subclasses 
 don't clobber your implementation details. if you're very good about keeping your 
 classes defined as if they were statically typed, then you could also write a letter rule to help you. but in any case, go forth and decide for yourself. as always, thank you for 
 watching and making it to the end. if you enjoyed my video, please do subscribe. and if you especially enjoyed it, 
 please consider becoming a patron or donor. thanks to all my patrons and donors for their support. don't forget to slap that like 
 button an odd number of times. i'll see you next time.