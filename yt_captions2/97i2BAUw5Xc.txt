i get asked all the time in stream you know if i were to start over again and have to relearn all the stuff that i know what would i do today to learn about the lowest level for those of you that don't know my name is low level learning my day job i'm a security researcher but on the internet i teach people how to code in languages like c and teach them how computers work through languages like assembly and others if you're new here welcome to the channel hit that sub button and let's learn how to be lowlevel together so how would i get from zero to lowlevel as fast as possible thought about this question really hard and i came up with the following three answers three things that i would do today to get good at the low level starting with number one code in a lowlevel language this probably goes without saying but if you know how to code right now maybe you know how to code in python or ruby or god forbid javascript i would say take that knowledge of programming and go and learn a language that gives you raw unfettered access to the memory of your process space and the language i recommend for that is the c programming language i know there's a lot of talk and i talk about this a lot on my youtube channel if c is the appropriate language for the future when it comes to systems programming i think that rust eventually will take over for c we're not talking about that today in this video i want to talk about why c is the best language to learn with also we're not going to get into the holy war of whether or not c is a high or low-level language for the purposes of this video c is a low-level language discussed in the comments learning to code effectively in c forces you to learn effective memory management it forces you to learn how to write code that is bulletproof because if you don't the code will just inherently be unsafe there are lots of things you have to do in c to not leak memory to not give your code access to hackers and to not have the crash the code just crash whenever it runs the number one project i tell people to write when they're trying to learn to code maybe they know the language but don't have a project to go after is to write an http server and i know that sounds fairly advanced for somebody who may be new to a language but it will teach you not only the ins and outs of the http rfc but a lot of really important things about programming for example when you're writing the http parser you have to not only write the code that adheres to the rfc but then you also have to think of your code defensively you're going to be inprocessing and reading code from literally anybody on the internet you have to treat your code as if it's being attacked you have to code defensively writing an http server will allow you to get really familiar with how to read the documentation of language you're not just going to know the networking stack off the top of your head you have to learn how to read man pages read documentation and read how return values work in the language of your choosing i think learning c teaches you how computers work at a fairly high level so go and take your programming knowledge and learn a language like c as step one step two go learn an assembly variant i'm not saying you have to be some wizard who can just look at an assembly blob and tell you exactly what's going on as fast as possible i am saying that knowing an assembly variant and knowing how the cpu works at the instruction level gives you a really really good understanding of how your code is going to behave and also if you can look at a blob of c and figure out basically how it's going to happen under the hood in the cpu architecture it gives you a superpower in choosing what code you make and deciding how to design your code so that it performs better the best way you can learn assembly right now is by taking this snippet of c code and i'll put it in the description below and go and compile that in if you can object dump this piece of code go to the main function and in reverse engineer how it works you will learn the basic 101 of that cpu architecture and that will give you a significant advantage on how things work and number three once you've learned how to code in a low-l language once you've begin to understand when you write that low-l code what architecture code gets spit out by the compiler and generally how the architecture works i recommend learning the basics of reverse engineering now now this pays off in a number of ways one maybe your job is just a malware reverse engineer maybe you're a bug hunter looking for bugs and taking binaries apart or maybe you're just somebody who is looking at code and you can't figure out why it doesn't work learning the basics of reverse engineering will teach you fundamentally not only how things work but how things are engineered and what the final output of the compiler will be also when you do reverse engineering challenges typically they're all based around a specific thing that you should know or like a specific fact like maybe it has to do with the trap flag in the intel cpu or maybe it has to do with the global offset table all these challenges teach you a little thing that you can kind of put into your toolbox of knowledge that over time you'll just begin to h have a holistic picture of how binaries are how binaries are constructed in the linux operating system for example and i highly recommend going to crack. one this is not sponsored this is not an ad it's just a website that i like where there are people who write reverse engineering challenges and you can download them run them on your computer run them in a vm because you have no idea if the code is mici or not um but i think these challenges are really cool and an easy and fast way to learn the skills of reverse engineering and ultimately one of the lowest level techniques and then finally actually number four secret bonus um i think that another way to get really good at low level stuff is to pick up a board to learn to write c on that board so this for example is an stm32 it's an arm-based board this is the stm32 f7 nucleo if you can learn c if you then learn an assembly architecture if you can then get that c code to run on a specific architecture of microcontroller so again be it like an stm maybe an arduino or risk vbo an esp32 something like that it will give you the ability to read a data sheet to understand how to interpret that data sheet and how to crossport your code to a board that can run somewhere else as computing gets more advanced as computers get older and older and they get more technologically superior as time goes on i feel like we lose touch with how cpus work at a basic level i can literally take out my iphone and access any information that i need to in the world and the whole magic of what's going on we literally tricked rocks into thinking i think it's kind of lost on us so part of what i made this youtube channel to do is to teach people and remind people that you know how computers work and to make sure that we have a cohort of people moving on into the future that once the gray beards of the world the line of ts of the world that built these systems move on and possibly pass away you know we have the second generation of low-l architects that that know how cpus work so if you think that's cool or you enjoyed this video or you want to be a part of that cohort hit that sub button really appreciate it and uh yeah we'll see you guys on the next video you can go check out this other video that i made about an interview question that i got asked it was really cool and it taught me a lot about how cpus work you can go find that out right there see you guys