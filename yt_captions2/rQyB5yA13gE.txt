ever since i started learning to code front-end development was always my least favorite part of programming that's because the reason i got into coding in the first place was to activate these logical thinking part of my brain but when it came to front development with html css and javascript i also like it was more about design and like moving a button three pixels to the right rather than the logical problem solving that really gets my brain excited so basically for the longest time i just simply determined that i am a back-end developer i'm just gonna completely forget about front-end development because it's not the thing that excites me about coding that was until a few months ago i properly discovered react i'd obviously been aware of react for a long time it's so popular but when i actually properly gave react to charge i actually found myself falling in love with it which is something that i never expected i would say about a front-end framework it's the thing that allowed front-end development to actually become interesting to me so that is why in this video i hopefully want to share this good word of react to you and especially to those of you who like me were perhaps kind of shunned by react in the beginning and who never took it seriously because you thought that front-end development wasn't exciting the way we'll do this is i have designed three react projects that i think every react beginner should build and i have chosen them specifically in such a way that they are sort of in increasing level of complexity where each project will teach you more and more of the basic building blocks and components of react that i think every react developer should know so let's just briefly discuss sort of the philosophy of react how it works and what it even means whereas in normal running development let's say if we're thinking about a one page that you're building you would simply have an html file with a bunch of code in here maybe you'd have like a nav bar and then you'd have like links in here essentially if you have have a very simple page this can be very fine but once your page starts to become very complicated this becomes a problem because essentially then all you have is this really long html file like for example when i was building my personal website i had this really huge html file that i took as a template and i didn't started editing and wherever i wanted to edit a certain part of it i had to like go and find a specific section whereas with react what you would do if this was normal html for example for these project sections you would be defining a section in your html code for all of these three separately which is fine but let's say then you decide actually i'm going to completely change how this card looks like so then you have to manually change all six so however many of these cards you have to essentially be of the same style and when you do that over and over and over and over again it sort of becomes really annoying whereas what are you doing it with react the way react works is you will define a component once let's say this is like a card for your project on your personal website let's say the component has a title and it has description and image what you would do inside the component is simply define these as variables that can be changed and then in the main page of your application you would simply use the same component like six times for example in each of these components when you are calling them from the upper file you simply define a title equals whatever and then title equals again something else and this is much quicker to change so let's say you wanna change the layout of how your project's card looks like in here all you have to do is change this one component that you've defined once and if you want to change the information then all you do is change the information in this upper file here and and once we go into the actual projects i'll actually show an even quicker way of doing this but this is just to demonstrate the film philosophy of react and how using these components actually makes development much faster it makes it much more organized and just easier to manage and faster to change the other thing we have is this notion of state where let's say you're using a search bar or something where your component needs to remember what is currently written in the search box inside that component it will have defined a state that will remember what is written in the search field let's say you want the contents of your page to dynamically change based on what is written inside of here you are using normal html normal css and javascript it would have to like manually figure out like when do we render everything maybe you'd have to like click a button to like re-render the whole thing and that would just be a complete hassle but the way react works is that whenever this state here changes every component that depends on the value of the state automatically re-renders so i think the best way to really understand the importance of all of this is just to go into the projects that i think you should build and the first thing i think you should build is simply a personal website for yourself that's just like a very simple one-pager the way you start a react project is you will write this line mpx create react app and and then the name of your app and you're going to see a lot of different things in here a lot of different packages and directories and files that react is sort of gonna install for you so you don't have to manually configure everything but essentially you don't want to be scared of this or you want to find in the beginning is on the src directory app.js file because this is where essentially everything starts with your react project and the way this works here you can see how the componentizing work this app is always essentially going to be the outermost components side of this app you're going to start defining different components that you want included in your application so see how your application looks you can go npm run start you can open up your application in your browser and here you can see that the react creatives have essentially given this sort of template for you to start with and that's fine that's just all of this that's now showing up on the screen and you can see that if you change some of this to say like hello and in here it's going to automatically update so if you just delete all of these the way every react component works is you have a function and the name of the component after the return statement what you're returning from this function is what you want to be rendered on the screen and this is sort of like html what you see here it's not quite html but you can think of it shtml you want to be returning one div and inside of it whatever you want to to be rendered so if you just go like a normal p tag with hello and so that's just the basic of how react work before we move on the last thing i recommend you create is a directory called component where you're going to start creating all the different components that you want to create for your application component dot jsx that's the way i like to name my files so the name of the component dot component dot jsx i'm going to go function card in uppercase and instead of a return and we're just gonna return let's say a div inside of which we have we have some text called title and then we'd have some other text called like i don't know description blah blah blah blah and the way you access this now is inside of the app component which again is just the outermost component of your app you're gonna go wherever you want this new component that you just defined would appear let's say you want it to be above it and then you will go and just write the name of the component and actually i've got to do one thing you want to remember at the bottom then go export default and the name of the components and this way now you're able to access the card component inside of your app component by just importing it and in webstorm it'll actually do it automatically you just have to type in automatically import this component that you just created and what you could do here is simply if you wanted to have this five times you can just do that just like that okay you might be saying but isn't that a bit useless why would you just want to have the same component like a million times well if you just go and look at for example the youtube home page right let's say right here all of these video tiles essentially these are pro let's say if we imagine that youtube is built using react i don't know if it is i would assume it probably is but essentially all of these youtube video tiles or cards in here are probably made using the same component that it has been defined that has simply a field for the video thumbnail and a field for the video title and then the channel and the views and whatever so then where this becomes really powerful is we can use the same component but have different information inside of it and the way we do that is using something called props we're going to define that this card component is going to take information that we want to display inside of so to show that how that works it will go curly bridges and we go title and a description these are the things that we are now saying that we will get whenever we are rendering this card instead of writing title which is renders the text title we go in curly braces which is now referencing this variable up here which we are going to be getting as part of this card and in here we're gonna go description to then render the description as the second one now if you go here you'll see that this actually doesn't render at all because we haven't actually given these cards this information that we are saying that we will get so the way we do that is inside of this app let's say we want to render this just twice when we are calling this component inside of here we're going to go title equals whatever we want the title to be like hello world and then i'm just gonna be a bit naughty here and copy paste and instead here we go goodbye world and a different description right here and now if you look at what we see we get both of these cards just with different information and you can probably start to see just how powerful it is you can imagine that this youtube homepage here is just defined in such a way that there's like an array of data that we want to pass and then we just render this video card like one two three however many times just passing in different information every time and so this is really the basics of how react works and to really start to understand this in more detail what i would recommend you do and this is going to be the first project that i recommend you build using react is a basic single page personal website and the purpose of this first project will simply be to build this understanding of how these components work and how this passing of props and all all of these work and a great way to do this in my opinion is that what you can do is go on google and find these html website templates and you would essentially just go on wherever these ones find one that you like the look of and make sure that you're actually allowed to use in all of that download the template and then componentize that template so what i actually did for my personal website i started with this as long as html template which also already had the styles made made for me and all of that kind of stuff so i didn't need to worry about styling because i am terrible at styling and then what i did is i simply pasted all of this inside of my app.js and started componentizing myself so it's like piece by piece for example i found i saw here that this part of the code is the header so what i did is i went into my components folder created a section for my header and then i removed this portion of code from the big html file and simply copied it into my header component and then started componentizing it even further and this could in fact be even more componentized all of these could be their own components so you get into like nested components and all of that but this in my opinion is a really basic and easy way to start to build this understanding of componentizing react so after you understand components the next thing you want to understand is this idea of state and for this i recommend that you build some sort of catalog application what i've built for example is this free youtube documentaries page i know this is really ugly and everything and then when it comes to this state i challenge you to figure out how to use state to implement search functionality for something like this okay sorry thomas from the future here i realized i didn't actually properly explain what was actually going on here so here's sort of how my application works in the big picture so i've stored this list of videos inside my app component here right and for each of them what we have is a title we have a category and we have a link to the actual video and then inside of this app component we're also defining a state for the filtered video so the state again it's just like a piece of information that is being stored inside of component with that the component always remembers so by default the filtered videos is being set to be videos and this is just the syntax for how to set state these filtered videos is then passed into the directory component and so for now this filtered videos is basically just the videos we'll get into the filtering part a bit later so and then inside the directory we are using this map function so we're getting the videos as items which is calling it as items here instead of videos inside of the grid we are running a map function where it takes each item so each video and for each item it generates this video card component here we are defining how everything is basically going to display so as you can see we have this iframe which is basically just how you embed a video inside of a react component and then we have the title as well as a button for where they can click to then go to the link and actually watch the video on youtube so here's how this works in the big picture but the most important thing with this project for you is to learn how the state works and specifically you need to be learning how to use it essentially implement this filtering thing which we're going to discuss next the way this essentially works inside of this nav bar component it right here and are defined an unchanged function so essentially every time this input field changes it runs this function that's what's going on in here this handle search change is a function that will do a bunch of things but essentially what it does because this set search input and sets it to whatever is the value of the search field and here's where we get into state state this is essentially this value that is stored inside of the component in such a way that whenever the component re-renders it remembers what the value of the state currently is and then you can call this set function to change the value of the state whenever you want essentially so whenever this handle change is called it takes the event and the event target value which is the value of whatever is in the search field gets set into this state and so from then on the value of the search input is going to be just whatever is inside of the search field and then what happens these videos which has been passed in the component from the other component gets filtered again the details of how this filter function works it's not important here you can just google this if you need to but essentially what this does is it filters all these videos in such a way that it only showcases the videos whose title includes the value of the state which is the value of the search input and then this is further passed into this filter function which i have passed in the directory component from the outer component you can see that right here i've passed the filter function equals filter handler which is a function that is then called with these filtered videos which i'm passing to it in here and what it does is it sets a state in the outer layer with the filtered videos to be the filtered videos that we just got from the previous layer and if you're not following me right now i totally understand but i essentially challenge you to figure how state works and implements search functionality like this to some sort of directory application maybe it's movies they were getting some like images and titles from imbd just go on google how to implement this searching thing if you didn't understand from my really messy explanation and there's a last application the last layer of complexity which is really going to bring some of the more complex features of react it's something like an e-commerce application the one that i built looks something like this so we have jackets men's whatever and you can click on them to like go into the different sections their prices and you can probably already tell that this is all one component that's just being reused with different data all of that then we have some more complex stuff like signing in and signing out this is really beyond discovered this video is once you know the basics you want to start thinking about things like how to implement multiple pages so you get into using something called react routing which is defined right here so essentially one of the more powerful things about react is that you you can not only have just one page inside of your application you can have multiple pages you might say that well isn't that how our website works at all the way routing to different pages usually works with normal websites is that let's say you have the website here and you have the navigation and you click to go into this page the normal html is used in javascript application will do is it will is it will only have the code for this one page that you have open on here and if you want to open another one it needs to make a request to this server which is where all these different pages are stored and then the server is going to send it to you the new page that you want to open and the issue here is that this takes time it takes time for all these requests to happen so whenever you want to open a new page you need to wait for the server to get the new page but with reactants with especially with the reactive routing what happens is when you load your page for the first time the server is going to send all of the code that it needs to load all of the pages so first let's say this pages loaded up but when you click on here react is just going to take the parts of the code that i need to re-render the page that you want which leads to much much quicker navigation and much better user experience the result you can see just how fast this navigation is and that's really why the entire web development industry is moving towards this paradigm of using these single page applications and at this stage when you're getting into these more complicated applications what you really want to be doing is not just trying to be building everything from scratch as a programmer what you always want to be doing is utilizing libraries and tools that have been built by other people that you can simply inject into your application to make it a lot more powerful and you can see that in the bottom here we've had this chat window that i can just click on and building something like this from scratch would have taken me like probably days or even weeks and so i'm glad to say that for today's video i have partnered up with tdo which is a service that allows you to simply inject a chatbot from functionality like this because as we know like 24 7 customer service is really important for an e-commerce site with titty all you have to do is sign up and it will give you this one code snippet that you just have the copy base just above the end of the body tag inside of your index.html file inside the tdo panel they have more than 35 ready to go chatbot templates for different e-commerce scenarios that you can get ready in less than 10 minutes it also shows many useful things like all the active website visitors and enables you to reach out to them with the best offers it's top rated in shopify with more than 1 500 positive reviews and you can use it for absolutely free until using one of their premium plans makes sense for you if you're one of the first 50 people to click my tdo link down below in the description you can get a special deal with 20 of their premium plan so go get started and create your account with tdo right now i'm definitely going to use this for my particular e-commerce website because it just adds so much to it without really any extra work in my pot so those the three after projects that i recommend you build in summary a personal website to familiarize off with the basics of react and how components work then some sort of directory app like for example a youtube documentary directory like mine or maybe some data about movies that will make your knowledge of react basics even more robustly the most complex project after which you will really have a strong understanding of react is something like an e-commerce application i hope you enjoyed this video if you did i would really appreciate a like down below in the description because it does turn out that actually likes do help these videos get shown to more people with that i will see you in the next one bye foreign [music]