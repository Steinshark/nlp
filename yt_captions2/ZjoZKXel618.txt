hello and welcome. i'm james murphy. in this video, we're talking about multiple assignments or chained assignments in python. these multiple assignments are different than tuple assignments. multiple assignments involve multiple equal signs not multiple things on the side of the equal sign. but they can be combined. by the end of this video, i hope that you're going to understand multiple assignments well enough that you can understand something like this extremely tricky example. but before i get into the explanations of things, let's talk about this video's sponsor. me. that's right, me. i'm sponsoring my own video. did you know that i am available for software contracting, consulting, training and interview prep services? so, if you're looking for someone to do a code review or help you hunt down a bug, please consider using me. okay, let's get back to multiple assignments. if i go ahead and run this code, of course, we see that four copies of the empty list are printed out. but are these the same copy of the empty list or are they different copies of the empty list? so, if i print out a is b, do you think this is going to be true or false? let's run it again and we see that the answer is true. so, these are in fact all just different names for the same copy of the empty list. they're not all different empty lists. this is slightly different than what you would have if you did a tuple unpacking. if you said, like, a, b = [ ], [ ], then these two empty lists on the right hand side are different. so, a and b will be pointing to different things. so, when i run it this time, i see false at the end because these two empty lists are different. what's happening here is analogous to the following. first, we evaluate the right hand side and store it in a temporary variable. then we go from left to right and assign each of the things equal to the temporary variable one after the other. when we write it this way, it's clear that they're all going to be both equal but also identical in the sense that a is b will be true. thinking about it this way is really going to help us understand this trickier example. for starters, let's go ahead and print out what we get in this example. if you'd like a moment to think about it for yourself before i explain, pause the video now. and make sure that you're able to explain why this [...] appeared   okay, here's how you're supposed to reason about this code. first off, we make a temporary variable and set it equal to the right hand side. then we go from left to right. and we do each of the assignments one after another. so, i'll say a comma b equals tmp and then a slice equals tmp. after this assignment, we have that a is equal to this list containing the empty list and b is equal to this empty list. so, in particular, after this line, a is a list. since a is a list after the previous line, it makes sense to use this expression. so, what this does is, it assigns the contents of a equal to the right hand side. so, the contents of a will become equal to the contents of this tuple. meaning that, a will now contain these two elements. but remember, before this line, a was equal to this element. so, then when we're setting its contents to be these two elements, we're setting a to be one of the members of itself. that's where the [...] come in. when you print out a recursive cyclic data structure like that, python will notice that there's a cycle. and then just print [...] and that's your cue to think: oh, i have a cyclic reference in there. so, let's go ahead and print it out again and see what we have. so, we started with a equal to this and b equal to this. and then we replace the contents of a with this and this, which are a and b. so, you can see here, the highlighted blue portion. that's the contents of a. so, a contains a and b. that's why we have these [...] here. it can't just print out all of a. because of the cyclic reference, it would go on forever. we can confirm our intuition by printing out a is a[0]. since this is going to be true that shows us that the first element of a is a, confirming that we have this cyclic reference. okay, i admit that example was kind of silly. you really shouldn't ever be writing code like this. i think a good rule of thumb is that for any variable like a, you shouldn't use it in more than one part of a multiple assignment. otherwise, you're just asking to confuse people. so, yeah. you might be able to use this to trick your friends or whatever. but in real code, please don't ever do this. but i think it is important to understand the way that multiple assignments work. namely that, you first evaluate the right hand side and then go left to right assigning things in turn. so, this is really the example that you should keep in mind. if the only language you're familiar with is python, this might not be confusing at all. but a lot of you i know do know more than one language. and you might actually be confused by this because a lot of languages do it a slightly different way. one big difference about python is that: in python, an assignment is not an expression, it's a statement. the difference here being that something like d equals the empty string doesn't return anything. it doesn't have a value. it just assigns the right hand side to the left hand side. but in a lot of other languages, assignments are also expressions. so, the assignment d equals empty list would return d back to you. but python does have assignment expressions. they were added in 3.8. they use this colon equal syntax. and it does essentially the same thing that the equals does with some restrictions about where you can use it. but it also returns the value back to you. so, this d := 0 is going to return that zero back to me which i then assign to c and then to b and then to a. and when you write it this way, it becomes clear that the only way that this could make sense is if you do things right to left, not left to right. i have to start on the right hand side here. otherwise, the parentheses can't make sense. because i couldn't start on the left with a equals b, because b isn't defined yet. i have to start right to left. so, that's going to be the big difference between python and other languages. in python, the normal equals operator is going to go left to right. but in many other languages and in python if you're using assignment expressions, then it actually goes right to left. and if you're wondering about all the redundant parentheses here, they're there because they have to be. you're not allowed to chain multiple assignment expressions together unless you put them in parentheses. python does this to discourage people from using assignment expressions where they really should be using just regular old equal sign. okay, quiz time. let's see if you really understand the rules. what does this function print if you were to call it? put your answers in the comments below. and that's all i've got for now. thanks for watching. and thank you to my patrons and donors for supporting me. i really appreciate the support. if you especially like my videos, please consider becoming a patron or donor. and subscribing to the channel, liking the video, commenting, all that good stuff. thanks again.