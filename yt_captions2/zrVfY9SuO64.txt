hello and welcome i'm james murphy. did you 
know that not all exceptions in python derive   from the built-in exception class? that's 
right not all exceptions are exceptions.   this is almost correct though, let's see what 
happens if we try to raise something that's   not an exception. here i try raising a string and 
i get an error message that says all exceptions   must derive from baseexception, not exception. 
okay so all exceptions have to be baseexceptions,   but what's the difference between a baseexception 
and an exception? well here's the official   documentation. a baseexception is just the 
base class for all built-in exceptions.   on the other hand, a plain old exception is for 
all built-in non-system exiting exceptions, and   all user-defined exceptions. clearly 
the python documentation is telling   me that for my own exceptions i should be 
inheriting from exception not baseexception.   so what are the built-in system exiting 
exceptions that it's talking about here?   we can find out a little bit lower in the 
documentation by looking at the exception   class hierarchy. from this list we can see that 
python has only three built-in exceptions that   are baseexceptions but not exceptions. 
looking at the first two, now we know   what the authors of the documentation meant 
when they said non-system exiting exceptions.   systemexit and keyboardinterrupt generally cause 
your python program to stop. generatorexit on the   other hand doesn't cause your program to stop 
and i'm not quite sure why it's a baseexception   and not just an exception. my intuition tells 
me that it should go wherever stopiteration   goes, but i'm sure there were good reasons for 
doing this. but let's move on and stick with   the main intent of separating baseexception from 
exception. let's investigate why it's useful to   separate exiting exceptions from non-exiting ones. 
consider the following example. suppose somewhere   deep down in our code something fails and we 
want to exit the program, so we call sys.exit.   here we've wrapped the whole thing in a try 
except where we're catching all exceptions.   as you can see none of the print statements 
execute. that's because sys.exit raised a   systemexit exception which is a baseexception, not 
an exception. what we're assuming here and what is   normally the case when you're programming is that 
for exceptions you want to catch logical errors or   failures of functions to succeed. handling these 
kind of business logic exceptions is generally   what you mean to do when you use a try except. 
this is a very different type of situation than   what's going on if somewhere in the code someone 
tries to exit the program. generally speaking,   if someone's trying to exit the program you 
really shouldn't be stopping them. now of course   you can catch a systemexit if you want to do 
something specific in that situation, but normally   when you say catch all the exceptions. this is not 
what you have in mind. if you want to catch *all*   the exceptions, then you just use a bare except or 
an except baseexception. keep in mind though that   in my opinion catching all exceptions is almost 
always a bad idea. in my opinion you should always   prefer to use the most specific kind of exception 
that you can think of. if you expect a typeerror   or a valueerror then use them. don't depend on 
except baseexception or except exception to just   catch everything. i know it's really tempting to 
just use a bare except because it's less to type.   using a bare except or an except exception is way 
too broad and it will often lead to catching and   possibly silently handling errors that you weren't 
expecting. like here i passed the wrong kind of   argument to sys.exit, but during the execution 
of the program i have no way of knowing that.   moving on, let's see what can go wrong if you 
do try to catch all exceptions instead of just   non-system-exiting ones. so i'm going ahead 
and running this program, it's doing work,   it's doing work, it's doing work, and i decide 
that it's taking too long. i want to kill this   program so i go ahead and hit ctrl c and try to 
kill it. no matter how many times i hit ctrl c   the exception handler is not allowing me to exit 
the program. if i want to kill the program, i have   to kill the terminal itself, or kill the python 
process at the operating system level. however   if i just catch exceptions, then i can kill it 
with ctrl c, and i get a keyboardinterrupt. this   is a common mistake that people make especially 
when accepting user input from the terminal. as   a side note, if you really just want to kill 
python and not ask it to shut down nicely,   you can do that using the os._exit function. 
you can see that when we run this code nothing   is printed out because python is killed. it 
doesn't raise an exception like sys.exit does,   os._exit just kills the program. most of the 
time, you only really want to do this after you   forked a new process and then want to kill it, 
but it's good to know just in case you have to.   finally, what's the deal with generatorexit? 
generatorexit is not a system-exiting exception   but it is a baseexception, not a exception. a 
generatorexit is raised inside a generator when   you call the generator's close function before the 
generator is finished. here we create a generator   and call its next method once. it just yielded 
0 and now it's paused. while it's paused we call   its close method and we see that gen exit is 
printed out. we see gen exit printed because   the generatorexit was caught by this exception 
handler. notice however that we re-raised the   exception but we still don't see a trace back. 
that's because much like a stopiteration used   in for loops, a generatorexit is not really 
an error. a generator raising generatorexit   is just python's way of telling you that the 
generator is done. python silently handles a   generatorexit just like it silently handles a 
stopiteration for a for loop. again, honestly   i'm not sure why this is a baseexception and not 
an exception. in any case though that's all of   the built-in baseexceptions in python that aren't 
themselves exceptions. you can technically make   your own baseexceptions by inheriting directly 
from baseexception but the documentation tells   you that you shouldn't do this. well that's all 
i've got on exceptions, thanks for watching. i   hope you learned a little bit. if you liked 
the video please consider subscribing, share   it with your friends, and as always slap that like 
button an odd number of times. see you next time.