i am happy not to be a web developer anymore this is called pivoting people pivoting i wrote my first single page web app in javascript in 2005 right after learning about xml http request and before any serious frameworks existed nice i did a little bit of html i did a website about rodney mullen in 2005 for my senior capstone project i don't know if you know about rodney mullen but he pretty he is pretty slick he is pretty slick on the board okay he is pretty slick on the board i enjoyed his style he literally is the goat like unironically people say that phrase all the time he's actually like the guy besides for that one boy named olly who was the first person to olly who i think was named after olly great kid ignited the world all right so let's keep on going i left professional web development behind in around 2009 really that's when things started to get less shitty like jquery was on the horizon i started in 1997 with web objects and spent the final decade of my career doing mobile okay okay your timeline is confusing in my head i'm a little bit confused by this timeline but let's keep on going let's keep on going i looked at the world of web development today and it's mindboggling how insane it is you know if you took a break from web development and came back i could i could imagine a 10-year break before jquery came onto the scene that'd be quite the change like you're over there using like java beans or whatever it is you're using and you come back and you're like what the hell has what the hell has happened here it's like coming home and you left your kids at home and there's just paint on the ground and you're like how did you get paint how did you open it and then why did you put it on the ground i have several questions none of this should have been possible there's so many web frameworks with new ones appearing every day building a web application as opposed to a website like my art website which is statically generated has only a little javascript often requires a myriad of tools and technologies which often change at high frequencies and feature endless amounts of other technologies you usually don't even know are there ooh look the package directory has 2,000 items okay hey don't make fun of node modules that's kind of rude node modules has been working on how many packages they bring down okay you know new year's resolution 2024 is just to slim up a little bit okay we don't need to do this don't package shame javascript is a terrible language that was never designed for any of this yet oddly it became popular because it was always there it's amazing how much innovation has gone into building out today's web development universe despite the subwat shaky foundation is built upon it is impressive i actually agree with this statement well done javascript well done you did that in my first mobile job at an online travel company now sadly just a brand the web team evaluated web frameworks for a new mobile web app hotel flight car booking in the end they picked what they thought would work best a year later the open source framework was almost abandoned thankfully it didn't matter since our brand had been sold and all technology in the entire company were gone i just i want you to think about that for a second imagine building a company but your company didn't sell in one year and the thing you based your entire company on gone it's now your problem it's yours now this is you you get to you get it or you got to migrate it hey can you hold this bag for me for a quick second today i can't even imagine how many choices there are to pick from with new ones always appearing some of them are entire ecosystems and often you choose one and then change becomes impossible the company investment is too significant right now there's thousands of class components that i see every day in the work that i'm at i see so many like even being able to change some of the foundational systems away from class components into functional components is impossible it's just simply impossible at certain scale we'll just always have legacy react that means we're stuck on what react 16 or 17 or something like that whatever was the last supporting one as a programmer you become attached to one and switching can become difficult as employers often want people with experience in their chosen ecosystem yet specializing in one could put you in a difficult spot in your career if it becomes obsolete or ever abandoned remember how i always make fun of react andes this is actually a really good thing just to just hold in your head no matter how much you love a framework don't be afraid to just it's okay it's okay not to make it your only trick all things end don't they yes well most things end a lot of computer science foundation material won't end for an exceptionally long period of time they have a longer they have the longevity is is there enough for you to be able to last until we have a fundamental change in computing to the point where like jobs don't exist when that future happens i'm not a do i'm not a doomer but i'm also not a gloomer like i don't think it's going to happen in 5 years right i don't know when it's going to happen at some point i'm sure there will be a change that's massively different that i cannot predict or foresee but that change isn't today or in 5 years i remember the first two single page apps i built it was fun and i needed very little to build them beyond a text editor and browser getting data did involve a little marshalling framework and some java code the the architecture board i was a part of complained that i had bought some unimproved technology until i spent a lot of time showing them that it was just a browser and javascript my customers internal only app liked that they could search for information quickly as if it was a desktop app instead of consistently reloading the page these were not huge applications like gmail of course so i do i don't like this argument by the way which is you know when i first built an application well you know a lot of things have changed since 2005 the internet just got much better the amount you could shove through the pipe has increased a thousandfold the amount of memory the amount of speed you get out of a computer has gotten way way better and also just the baseline appetite for an application has greatly changed and so this idea that well when i first build it you just needed a simple text editor true sure but you know what in 2008 2007 2006 you know what was really great net beans and autocomplete with java like it was great it made it so that your first experience as a new person was actually really really easy to kind of get started so just because it did work doesn't mean it should keep on working a specific way today unless you're a tiny team building small apps you probably invest in picking an ecosystem like react angular or view or combining smaller frameworks with other tools to rule your own environment you must worry about css frameworks asset packers assemblers and many other open source frameworks and utilities which are built on layers of yet more open- source items now you must keep everything updated and avoid incompatibilities and security holes what a pain in the ass all of this has to be of course it's job security you know i don't actually think it's job security like i've never also like this as an argument in general i do not think people choose react for job security i don't think people are like i'm going to make the most convoluted application but it's going to start off incredible and simple and i'll be able to dup all of them i'm going to dup all of those sons of i'm going to get like i don't think anyone does that right i don't i just i just don't think people do that i think a lot of people just program what they're familiar they just that's it i'm familiar with this therefore that's what i use it's something like this in my company when i show up with hdmx yeah hdmx is like the world's simplest library it's like no actually i want the opposite of me job security i'm just trying to i'm trying to give it away to anybody that knows what an htp request is if you know what that is great you can help out programming when i started in the early ' 80s was much more straightforward as you needed to know the programming language the operating system and what you were asked to build everything else you had to invent yourself i remember what a big deal it was for trapes a spreadsheet like application we shipped in january 1987 when we got a copy of lex and yak from a friend who had access to unix to make our formula parser with today almost everything you need is available somewhere in open source form yet it became unsupported suffer from bugs you might not know about and became incompatible with another open source item you need real talk were any of these issues not present also back in the day did not things become unsupported like what about all the people that bought borland the final large project i shipped at my last job had no open source elements it was all pure swift our legal department was hard to please and it was easier to build everything ourselves than to deal with them i don't know if that's like i'm not sure if that's like a w cuz i i also don't want to i don't want to build an htp framework i just don't like i don't need do do you want to build yet another route handler i don't yes i want okay you do okay some of you don't okay some of you do it sounds like okay my bad hey if you want to build one just to build one i actually think it's pretty i think it's actually a pretty good exercise it's actually a really incredible exercise i might have to write that down it's not that you can't build complex things and maintain them with today's web framework ecosystem still it can't be much fun and i wonder how the applications will evolve given their ecosystems are constantly changing well don't you already know can't you already see there is no framework that says this is what we are and we're not changing there's always a look to somehow make it better there's always an ever non-stopping march towards progress whether or not progress is or is not good it's just spelt 5 is is an example spelt 5 did change things even spelt changed yeah spelt has changed quite a bit and spelt is probably one of the least changing of all the frameworks have you ever heard about rail no rail me daddy tell me about it yeah that sucks i hate that when bosses require specific projects that's crazy people still use and support cobal programs almost as old as i am so anything is possible i wonder if ai will eventually be able to deal with a constant churn in infinite layers of your web environment or will give up and do humanity in do humanity so good programming has always changed and change is hard to adapt to i've always specialized in building new things instead of maintaining old ones i mean that's really the that is i mean real talk that's the best specialization one can get you know i always just write the 80% like that's my goal personally i'm always looking to try to write the 80% not trying to maintain the 20 often in companies or industries where new markets or technologies require new applications i cannot remember ever dealing with so many new technologies that are constant evolving and continuously having to imagine where they will be next year much less the next decade okay let's remove c programming language and and lisp like what hasn't changed greatly in a decade i think about 10 years ago there was no neovim yeah well i mean i see change what 2011 it got that new th it got that new threads model php doesn't change much what are you talking about php changes incredible amount in 10 years i haven't seen c23 c23 is releasing this year that's actually pretty cool i'd like to actually look at the list of changes c is a beautiful language because it doesn't require much effort to understand what's available yeah i know php has traits dog java has changed quite java is in is incredibly different mount stupid mount stupid is happening html hasn't changed much what do you what do you mean html hasn't changed a lot goodness gracious have any of you stop saying phrases everybody stop talking dead languages assembly has it changed get the hell out of here assembly has changed potentially the most i hate everybody security is a huge issue today which was not the case in the first half of my career someone has to worry about all this and make choices that will not cause issues perhaps years later how long will the application you write today have to live with the same source code using the framework you picked initially i would just assume until the end of time like unless if you build a program that you know is small and like a debug only kind of program you should just plan on things living for a long long time actually vanilla js hasn't changed much you're right 10 years ago you know what you couldn't do you couldn't do um includes includes wasn't a thing uh you could not do uh map hell you couldn't do flat map uh let's see what else was there 10 years ago node was just coming out uh you could not do there was no const this didn't exist pretty much array. at pretty much an incredible amount of array functions there w no array functions no classes no spreads no arrow functions it was just callbacks async o8 template strings named template strings javascript has changed a higher order functions always exist in javascript yeah elvis operator null kesing operator i am not going to to answer this question x hasn't changed that much everything has changed wasm didn't even exist actually squeal is probably the best squeal is probably your best my squeal actually what am i saying my squeal now allows for javascript functions you know what my squeal even has changed greatly okay my squeal has javascript functions today okay javascript stored procedures it's your squeal it's not my squeal anymore okay that's yours the application i started in 1988 delta graph survived on the same source code for 30 years my team only worked on it for 5 years before the pandemic killed the last company that sold it ultimately it no longer ran on mac os as the quarter century old c source code could not be updated to 64-bit i had no idea in 1988 that the decisions i made back then would impact someone three decades later the main web application from my last employer was an amalgamation of way too many technologies that made little sense when i first saw it i wonder if many web apps these days will become piles of primordial ooze over time people hate hate rewriting large things but the cost of supporting the unsupportable eventually becomes too high another blog post to be coming soon with the web applications built on such massive piles of constantly changing technologies i wonder if the pile will eventually collapse this is actually a really good point that i do love one thing i don't love is the fact that he first cited something in 1988 the change from 1988 till today all those old applications pretty much stayed because it's people stuck on these old versions right you couldn't even update to 64-bit like imagine that okay that's a that's a silly way to point to things that like are good but the thing that i see right here is this right this sentence is super super compelling to kind of read and think about which is that a lot of people write an initial application assuming you can rewrite it but the problem is is that after a year two years rewriting becomes impossible you just can't rewrite it without significant downturn so you actually become stuck with all of your decisions like i get moving fast and just choosing whatever tech is hot is great and all but you're stuck with the b and that everyone who thinks you can just rewrite it have not worked long enough on a product to understand rewrites are infrequent and every single time i've seen someone do a rewrite someone has quit or been fired that's higher up in the company due to it maybe ai will eventually take this burden away and allow programmers an easier time to focus on only essential tasks i am still skeptical it may happen eventually but i don't see an ai being able to build a complex application by itself anytime soon programming to make art is almost like returning to the 80s for me i don't use many open source packages beyond swift m libraries and most of the code i write is not something you would find anywhere man sniffing his own farts on that sentence one time i was in math class calculus 3 and this guy raises his hand and asks a question and what comes out of his mouth ends up being one of the most unique sentences i've ever personally heard in my lifetime i couldn't understand it i couldn't understand a single sentence and i looked towards my teacher and my teacher also couldn't understand the sentence and when my teacher went what the kid's response was i have a mind like an artist this sentence is a mind of an artist most of my code you wouldn't find anywhere anyways besides the occasional x code and swift version releases i am mostly insulated from massive changes the most irritating thing is adding features on my site generator and website where i get a little indication of complexity in keeping things updated but it's not my everyday job i don't envy today's web developers the task of keeping up with constant change and evolution security and the occasional left pad bomb even dealing with github is becoming irritating how many web frameworks are there today you can't answer as the count just changed i just i love that ending sentence you know i think overall this is a really great perspective i don't want to dunk on the guy too much i think that he made a lot of really good points in the sense that the ever rushing change of progression isn't always good and maybe a bit of slowdown is actually the better option maybe just maybe we could have had more innovation by having less innovation well boomer i mean the thing is is being a boomer is not bad this idea that boomer's bad zoomer good is that's like as much of a boomer take as it gets hi mom i love you my wife told me to yell at the phone and say hi that was my mom on the phone as my wife handed me this nice little smoothie boomer and zoomers both aren't great you shouldn't want the latest but you also shouldn't avoid the latest does that make sense i'm not even saying signals are that great signals are good but signals are also a potentially invented problem you create this entirely crazy problem and then signal solves the entirely crazy problem i'm not sure if that's like a w all right someone just got banned what what we get banned for boomers and zoomers both suck on average gen x for the win get the hell out of here gen xer everybody knows gen xers aren't supposed to actually say anything okay they're supposed to just sit there and they're supposed to not actually they they're not seen okay gen xers are like latin it's an unspoken language it's an unseen generation okay so what are you doing coming out here talking like that that's offensive so yeah get this this there's this guy out there right yeah yeah and he had his like little drum kit with him and he had his like little nirvana t-shirt on and he was just like jet xers and i was just like get the hell out of the startup we have an anti-discrimination music policy karen i refuse any policy that makes me compliment nickelback okay [music] get him back in flip get him back in hey the name is the exgen