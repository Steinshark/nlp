i'm actually pretty excited about this the visionary cto visionary visionary the visionary cto i'm pretty excited forgot to turn off alerts you're welcome everybody my 20-year career is technical debt or deprecated deprecated should be my middle name technical debt is easily the most buzzword or the most used buzzword these days people say we are moving fast and on our mvp while minimizing technical debt they mentioned technical debt in there to sound cool or something i laugh because everything is technical debt eventually okay i like this ted i like this take so far my entire career is now technical debt or the code has been deprecated if you don't believe that your entire career will also be technical debt you might let's see you might after you read this article i'll walk you through how things have changed over my 20-year career all i have to say is falcor right it's been taking us years to kill that thing not only did i create something terrible at netflix it's spread to every platform is awful but i will say the one thing that i did do at netflix that didn't that spread to every platform but is not technical debt and people like it and keeps growing is uh i did perf traces that's the way to do it so i did uh google trace events right little little google trace events uh business and uh then after that uh wherever they call the trace event format there you go they they put it in a google doc right and we made this the basis and then i started keeping uh the performance differences between various screens of netflix and how things are loading and showed like multi-second startup issues all because people just never measured properly so i measured i measured production and now it's used all the time it's fantastic happy i did that oh literally google trade yeah it's literally a google doc and it's called the google trace format yeah trace event format beautiful anyways all right let's keep on going so that's like my only accomplishment that hasn't been deprecated everything else i've ever done has been deprecated like everything my entire career is now technical debt or the code has been deprecated yeah we already read this okay i was basic at first my career started as a visual basic six developer i built several different apps from 1999 to 2003. i think you can say that anything in visual basic six by today's standards is technical debt or has been long replaced already long lived on the on air resume next foreign by the way on air resume next it again why am i getting triggered today with rxjs if i'm not mistaken rxjs on error resume next i swear i am being rxjs triggered what are you guys doing why are you guys doing this to me why what is the this is cyber bullying okay this is cyber bullying and i don't like it i spent a lot of time doing classic active server pages asp development oh man i did that too at one time i was also an expert in making websites with internet explorer 6 and netscape navigator it doesn't mean much on my resume anymore it does it means a ton to me i want you to know that when i see someone who's done this i know they've seen they they've seen some okay and it means a lot to me because i know for a fact that they're going to be thinking about things way different than someone who's never experienced it that means they had to build everything from they had to do artisan crafting which means that maybe the exact skills aren't useful anymore but the knowledge how things work the under the hood approach totally is there i did and seen some exactly you're just a different person you're built differently when things go wrong you have a different way of looking at it because you've seen it from the bottom up wow uh visual basic asp ie6 and netscape are all long forgotten technologies as strong bad would say back then delorted i don't even know what that term means old languages pearl delphi fortran foxpro and cold fusion these are some weird ass languages uh by the way that was weird space ass dash languages okay um there are there are a lot of programming languages that have fallen out of favor over the last 20 years besides visual basic six odds are if you built with anything in these languages people are trying to figure out how to rewrite it because it is hard to find programmers for those languages pearl delphi fortran fox pro cold fusion i thought cold fusion was a youtube channel it's more than just a youtube channel do uh app still exist in them yes can you hire people to do it it's tough in most circumstances those companies must modernize and retire the old apps in the early 2000s people thought adobe cold fusion was the hot thing do you remember a little arise to stardom i actually don't ruby on rails is also in jeopardy of being added to this list oh obligatory dhh reference uh it has fallen out of favor and it is tough to find developers for it what once was made unique is now available in other languages reasonable um programming languages come and go developers don't want jobs learning skills that aren't in demand uh it always is a balance of supply versus demand developers jump ship quickly and always want the hot new thing on their resume always true but i get that uh i know c plus plus is getting harder and harder to hire for right like just in general it's harder and harder to hire for we are currently decommissioning the last of uh visual fox pro really you had foxpro you have active delphi projects damn is harder and harder c plus plus is hard especially when a lot of applications hide all that like with rust you'd hide so much of the problems that exist due to inheritance and way the way c plus plus does things and so it's like it becomes obtuse to learn these things uh some of the first apps i used uh activex controls on internet explorer six at that time they were required to do printing and other very insecure hacky things pdfs were not as common back then in printing from the browser was its own fun nightmare java applets this is where i started this is how i learned how to program this word discovered good double puffers oh man this is really when my programming really got in okay we're also a big time uh thing once upon a time they were slow and having the correct version of java installed on your computer was always a mess i'll never forget the nightmare of dealing with networking firewalls that require java applets i don't miss those nightmares and luckily it faded away of course we all remember macromedia adobe flash at one point it was a darling child of the entire internet i remember going to a conference where some of the talks were about making adobe flash whatever what was it was called active script three or whatever it was uh was uh able to still run in browsers like it was called like ratatouille if i'm not mistaken ratatouille i know that's the rat rat i don't it too i don't know how to spell ratatouille how does anyone know how to spell ratatouille ratatouille uh active is it called active script what is it called action script action script three i swear there was something maybe maybe i'm wrong i think i'm wrong i think i'm wrong okay it was called something like ratatouille but i cannot remember it damn i mean this is maybe this it's changed since then but it was something like that that doesn't ring a bell for me it was from web filings now known as workiva anyways it doesn't it doesn't mean anything to anybody right if it was a fever dream uh microsoft came out with a competitor to flash called silverlight it was actually a pretty fantastic framework for c-sharp developers most companies built the really amazing things with silverlight as we all know apple ended flash and silverlight by dropping their support and browsers here's uh here's a screenshot of the finance calculator we built with silverlight in vin solutions over 10 years ago silverlight is now long gone and they rewrote it all in javascript but it is not as cool as this version that gives me such 2005 vibe websiting look at that that is such 2005 website vibes dude it looks so good look at that goodness though come on uh my first mobile app i built my mobile app in 2004. it's hard to remember that but the iphone and android didn't exist then i wrote an application for the compact pdas for tracking inventory for car dealers it was written in c-sharp for the.net compact framework to run on windows ce this pda piece of dang ass had a one megapixel camera those photos were only slightly terrible as long as it was cloudy outside to remove the glare boy has technology changed uh this app went on to the boneyard long ago but it was cutting edge in 2005. look at that vin buddy what a name vin buddy oh i love it oh i love this this is so good these are all things that like people did this stuff this is real people okay this is real uh swift is another excellent example of how fast development tools change as soon as apple released swift it was hard to justify writing code in objective c anymore i'm sure there are some use of some use cases where it's still needed i wrote an entire multi-threaded application and and objective c and guess what that application was foreign 2013 when i was at this conference you know what i thought i thought this exact if if there was a gift to have my mentality this was true in 2013. okay this was true when i saw it i was just like man you're chasing the wrong problem here i hate to tell you this dude this gif freaks me out you know the one where it's just like you're constantly falling into her mouth oh gosh that one just freaks me out uh anyways let's see oh yeah i wrote multi-threaded falcor i wrote multi-threads uh with objective c i am sure there are some use cases where it is still needed but swift is significantly easier to develop and a majority of evolutionary step forward i would argue that any apps written in objective c are probably technical debt now yeah yeah after doing crazy inline scripts for building web apps i was happy to start using asp.net web forms oh man they went hard and mvc was hard back in the day 2010 was that 2011. uh their server-side controls may develop development significantly easier their goal was to make it easy to create web apps as you could in visual basic six foreign what's your goal we want to be as easy as visual basic six oh [music] oh my goodness that hurts physically oh that was fantastic it worked it mostly worked you could build reusable ui component server side and render them to the browser just like we do today with 100 javascript web forms wasn't perfect but it was considerable upgrade and it had a great run until ruby on rails came around and popularized mvc model view controller frameworks for developing mvc quickly deprecated all other web form apps where uh we ever made yep anything in web forms is definitely is definitely technical debt although the same idea is making a comeback with blazer i just want you to know microsoft i i'm just never going to use a product called blazer okay i'm just not i'm just not gonna use it i'm just i'm just i'm just not gonna use it um mvc is king for a while i remember this asp oh we i remember migrating an application to this before you knew it every programming language supported mvc frameworks we switched to doing everything new in asp.net mvc it was everywhere including django laravel wait laravel is that old damn laravel's old taylor otwell lamborghini man's that old uh symphony spring etc fast forward to today nbc has fallen out of fashion everything is now done with react angular view remember remember when react used to be sold as the v and mvc remember that yeah i do before we add those we had other javascript frameworks at stackify we use the knockout a reasonably popular front-end framework do you remember any of these frameworks knockout ember are you funny that we funny that we pretty much talked about all these today uh it is more of an l now it is more of an l now it's less of a v more of an l - don't make fun of react okay okay that's like kicking the kid that's already down that's not cool okay once the fight you know once someone's on the ground you don't keep fighting okay we all know that if you used any of them i bet all that code is now considered technical debt and has fallen out of flavor uh the first generation of front-end uh frameworks lost to react to negular you angularjs in 2015 angular was created by google and burst onto the scene it quickly became the most popular front-end framework then in 2016 angular went through a major upgrade and it was not and it was not backwards compatible guess what that means anything in the original version is now technical debt i have projects at my company in the old version of angular that is major technical debt we must upgrade damn was migrating winforms app to mvc that is basically abuse that is basically abuse the old dirty soap and what before rest apis then jason became the de facto standard another option was soap which stands for simple object access protocol and it was made easy to call web services and automatically generate code proxy classes to correctly call the services it was primarily used by windows communication framework wcf over xml this is disgusting what i'm hearing right now i actually somehow avoided the soap days i'm just like every good arch user i've never used soap okay never have i once touched soap in my lifetime uh it worked awesome until it didn't one of the worst projects of my career involved figuring out how to use security certificates between my company and another vendor over wcf and soap the promise of soap and wfc was amazing but it was a nightmare to maintain over time let's see soap and wfc are two things i don't miss microsoft decided to no longer support this okay blah blah blah blah blah we don't care over time the types of technology we've used to call web services has changed older ways still work but most people would probably prefer to retire them absolutely soap not even once another common problem is major programming language versions be it rubyphp.net or others they commonly require a bunch of code changes yes uh rust two when is rust two happening rust two you know i feel like i feel like that right now with all the rust drama and everything that's going on nothing would be a better tweet of when is rust 2 happening hell yeah this is you know you know someone's gonna read this this one tweet is going to result in at least a few people blocking me you know it to be true you know it to be true when you do this kind of stuff this emotionally damages people are gonna be like no no right oh man it's so good uh all the people that would have blocked you for that tweet have already done so actually this is probably true am i the i am beautiful okay gosh this this stream tweeting is out of control do i get a high chat kappa all right anyways i thought i was gonna have a high chat hi chat all right web forms let's do this um all right major versions yeah all this uh however can blocks in complex enterprise apps there's many potential issues when navigating the upgrade path that becomes a major technical debt that has to be figured out otherwise you eventually get stuck out this has happened to everybody i know forever except for in javascript actually even in javascript what am i talking about who here has worked where there's like part of the application that's like still in javascript not even in typescript or jsdoc it's just like in this crazy javascript that's that you build all these classes with pro prototypical pro proto adjust the tipple uh inheritance and man you don't just get the tip with prototypical inheritance holy cow that's full shaft debugging everybody knows that stuck on an old external oh man one of the biggest challenges we had at stack if i was getting stuck on an old version of elasticsearch at one point they made some significant changes to how it worked and we're not entirely backwards compatible we used it very heavily and all the work to upgrade it became a massive amount of technical debt and upgrade project damn this is just like too close too close to my heart right now we kicked it down the curb over and over and eventually got way behind this is another example of real technical debt projects that can play companies yeah like all of this i've almost been through a huge portion of versions of this kind of stuff at stack if i i'm literally like right now right now that my entire tool i've built at netflix that is making life easy is also making it impossible to run a service and they're rewriting the entire thing we're going to protobufs uh everything is changing like you know this is going to be a refactor from hell i'm gonna have to go through extremely soon i'm not ready for it i'm like emotionally not ready for this open source alternative retired my code at stockify we built our own tracing profiling libraries for six programming languages it was an incredible amount of work to do that well now we have open telemetry why we managed our own you can use open source industry standard damn open television got getting pounded we used a closed version called telemetry from epic games for a while at netflix it was really cool over time you can see how almost everything uh you create i actually added telemetry events from v8 into telemetry to measure how long garbage collection was taking like at a really neat level it was fun it was super fun over time you can see how almost every uh thing you create gets scrapped and replaced for various reasons uh or is now based on older technology several apps i built early in my career were terminated because the companies were acquired and decided to use different technologies most software has limited lifespan that is shorter than you think all code eventually becomes technical debt that everyone wants to rewrite in more modern way or the business needs yeah this is so good dude this is so good this is a good reason why you should just stop caring so much but like some people get stuck on like you see this it comes out in various ways right new people get stuck on analysis paralysis like how to do the best thing don't worry don't worry your code will be thrown away anyways no one actually cares you know what i mean uh second this comes out in the other way right the architect right comes out describing the most beautiful future of all time and then you throw away all the code this literally happened to me at netflix right granted in corporate world it is more likely to have internal app that seems to stay around forever something like railroad or a major bank has been using the same mainframe based software for 40 years cobalt cobalt anybody uh i predict webassembly will eventually overtake the front-end development is today and a whole new era will evolve yep the reality of technical debt people are always worried about minimizing technical debt when doing new projects i understand that there's a balance between getting things to work and trying to make them perfect however nothing is technical debt because it isn't perfect there is no such thing as my goodness what is this did i predict the future of this article okay visionary cto maybe you are a bit of a visionary okay i will give it to you this time you're not a bad guy i made fun of your name and now look at you okay now now look at what you're saying it's it's pretty good okay on the other side of technical debt is how extremely slow rots away over time it either has significant issues with upgrading to the latest versions or technology ultimately falls out of favor because of newer ways to do things good luck hiring people for old tech stacks eventually everything becomes technical debt or the projects gets sunsetted if you are lucky your code survives long enough to beat technical debt to somebody else two things here clear two takeaways number one clearly he's not tom tom's a genius okay tom is a genius if you don't think jay diesel is both the past the present and the future well then you have a short grip on the english language with the word both there and tom is a virtuoso okay tom is a virtuoso you need to understand that second off this is a great this is a great article take it to heart honestly take it to heart love what you do today but at the same time don't care right honestly don't care it's not a huge deal right um i think styles are much more like better to like and to like them long term right like i love traits and rust i want a programming language that i forever have the trade system in rust like unless if i can find a better version of that i don't want that and so it's kind of one of those things where like there's styles that i think are really like long-term lived concepts and then there's like the practical application of it i don't care if i write something in rust i love the idea of rest right those are two very different concepts and the takeaways you can have oh camel i want to try out o camel tom w tamil haskell yeah i know that's how i feel about haskell too but imagine how to deal with a stupid choice uh the team uh took like using c sharp on aws lambda uh quit duh no there is no you can't the thing is if you're a part of a team the team makes the decision if you don't like the decision you have a couple different things you do deal with it try to change it leave the team right i mean it's as simple as that so which one are you gonna do there's there's not really more options out there i mean i guess there technically is a fourth option which is quiet quit but i don't think that's a great idea right personally i will not be a quiet clitoris okay i'm just not a quiet clitoris okay i i want i wanted i want to just crush it right and i'm gonna crush it all right prime who is tom oh tom's a genius you should know this by now hey the name is the primagen