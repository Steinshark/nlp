i am just in absolute love with the incredible green that is the cult of hasal programmers it's spooky it's esoteric but it's also the key to understanding the rise and relevance of functional programming it's funny when they said the word relevance it's pretty good can we can we dude right now i i've literally just emotionally bruised so many people right now people are just like what the hell man you know that h very ir relevant all right anyways uh nice seeve i'm glad we did the seeve all right at my first job out of college i was assigned the task of rewriting the autocomplete feature of a search page the original code in tuned in a dis uh a de a decrepit oh my goodness wow uh the original code in tuned in a decrepit code base was a nauseating monstrosity that others wanted no truck with am i am i reading that wrong dude am i dyslexia mentioned this morning no truck with wanted no truck with what does that phrase even mean i've never heard this does anyone know what no truck with yeah these these colors are hurting my eyes here i'll turn dark readers back on i i don't know what that i've never actually heard this phrase no truck with is this a one of those functional frames it means you want nothing to do with it yeah but i've never i mean i could guess that but no truck with i don't i've just never heard someone say it is this a hasal thing anyways uh the plan was to rewrite it in typescript a dialect of javascript that's what we're calling typescript now drawing on a library let's see drawing on a library that incorporated some handy fe features from a language called hasal hll it sounded like a good name for a weapon a well-sharpened blade like simitar or katana the strong german sounding plosive in its name has in niche or kafka added a menacing edge what the [ __ ] am i reading what am i what am i reading all i really knew about the language was that it was challenging and intended for math phd okay that's okay at least we we're getting to the bottom of it peak journal peak journalisming at least this is true okay this is this is true i know a person who works at a company only works there to code hasell the person gives zero [ __ ] about the status of the company or the people working there the person literally just work to write hascal pick are we're talking about pick right now pick mentioned sounds orwellian to you how does that sound orwellian the rewrite could be done without knowing hasal technically but i was an overeager graduate with a challenge accepted attitude okay this by the way this is great this is such a sweet thing i remember being in 2015 when we were doing falor and someone's like we need the ios client objective c and i volunteered to write objective c unironically even though i knew i'd hate it because i wanted to be the guy that could write any language with any level of challenge and do it no matter what it was just like that's just what i wanted and i feel like that attitude has served me anytime there's a problem i want to be the one that can just destroy it i don't want to be the person that tries to like shy away likeo i'm going to have to use x code and they have a shitty thing uh you gave up on o camo i didn't give up on oam uh it's very very simple functional programming does not work for youtube videos or for twitch content or for anything it just doesn't people don't like watching it i know you guys think functional programming is great you don't like it nobody likes it i get i get that there's like dozens of you okay there's dozens upon dozens of you that absolutely love it but the reality is you guys all want simple procedural se likee code that's easy to read top to bottom in and out easy easy okay i think functional programming is slow mutation is fast as f boy there's dozens of you i mean i hate to tell you this this is what you want it's not my fault it's your fault you could c to the market prime i could get all i could get all 14 of you in a room true but i disagree what do you disagree with how do you say true but i disagree i hate procedural code no you don't you don't i know you want to say you hate it everyone this is just the greatest part it's the greatest part about humanity is there's this idea in people's head what they want versus what they actually do and it's always different what you think you love likely isn't what you love there's a reason we don't write assembly prime exactly i agree we shouldn't write assembly i'm on your team you think you do but you don't dude it's so funny it's so funny watching people do this uh attit let's see okay the challenge accepted attitude to uh everything i bet you this person grew up playing contra contra battle toads i think battle toads gave me like today's if i could teach my kids anything it's to beat elden ring the reason for beating elden ring as a kid like if you got kids make them play elden ring here's the reason why is that elden ring is going to be a game that teach them patience it teaches them trying under hard times like call of duty that game ain't hard you like all you have to do is duck for a second or just replay it in 3 seconds it's like it's so it teaches you like the opposite of of trying to actually beat something that's hard it's easy you go call of duty you set it on the hardest thing and you beat through it practically first try through the entire campaign campaign's super awesome by the way love the campaign but it just teaches you nothing like at all i'm telling you elden ring is amazing you actually have to win something uh even when it was absolutely uncalled for i found whimsically uh titled tutorial book book learn uh learn you a hasc for a great good for great good that's a great name and spent the winter writing hascal most evenings after work it was like learning to program all over again long before hasco coalesced into a programming language it was a swarm of theore retical concepts in 1977 the computer scientist john bakas delivered an influential lecture titled can programming be liberated from the von newman style in it he argued that existing languages were becoming bloated and ineffective wow imagine arguing about bloatedness in 1977 this poor man john beckus i mean just just for a second if john beckus if you're still love could you please tweet how you feel about nextjs this is just the just it's so gut this is just so good man you know what this whole c phase this whole sea language is a little bit bloated okay see is just like one step from assembly it's just like it's like almost assembly the is he the b andbus norof form you might he might be uh uh bnf um grammar oh my goodness uh who created john bakus yeah okay there we go man we stand on the shoulders of giants every time i see this kind of stuff all i think about is like man we truly do stand on the shoulder of giants you could remember that like alo 60 and fortran and these these old languages their alternative was machine code and punch cards they used phrases like dis platter when was the last time you thought about a plate let's just start all over on this one cuz i don't even remember where we were long before hasal coess into a programming language it was a swarm of theoretical concepts in 1977 the computer scientist john bas delivered an influential lecture can programming be liberated from the von newman style in it he argued existing languages were becoming bloated and ineffective i it's still very hilarious i because i don't know what languages existed in 1977 other than algo for tran and c but i don't they they do not give me the veneer of bloated i don't know what to call them other than the most minimal languages i could possibly think of is there anything other than lisp c++ did not exist pascal did pascal exist in 77 i don't think it did uh when was pascal uh invented blaze pascal 167 okay 1642 people blae pascal the smartest smartest man uh pascal lang did you just add the word lang to it [ __ ] pascal was fantastic but pascal arguably one of the smartest men who have ever walked uh pascal programming language and by the way i didn't realize that pascal was invented 1970 okay oh which emp emp the orderly use of conditional loop control structures without go-to statements oh that's cool we rock on pascal i didn't realize pascal's that old okay hey hey was a prodigy sadly died young yeah i know those things are always sad um it was a clarion call to evolve functional programming from math mathematical esoterica to a practical tool you know i make fun of functional programming all the time i do i absolutely make fun of functional programming constantly but i will say that maybe if it is better i cannot say for sure cuz i've never been talented enough to do functional programming at an extremely fast-paced and high level everyone that does functional programming swears by it and a mark of a fool is a man who can pass by a multitude of people saying something is good and believe it is evil without even understanding it right like that's a mark of a fool in my book so i'm not going to say it's not that but not going to do it all right programming paradigms are mainly divided into imperative programming and functional programming the dichotomy is in clearcut as a growing number of languages support both styles i actually i i still think this is rust's greatest achievement is that rust allowed for mostly functional programming without breaking from a sea style i think that that's honestly russ's greatest uh benef i think that's like i think that's their biggest win i truly do uh i think that's their biggest win their second biggest win is the type system and i think that if i i would just love to see a dropping um i would love to see a drop of the borrow again i still think go plus rust would be so good like uh what's called b borgo is that the name of the language uh borgo all borgo is uh okay that's a village okay village github if you haven't seen this this is super cool all it is is i mean there's no way i'd ever use this just because i'd never bet the farm on on on on this right uh but all it is is it's a language that you write and then it uses all the go stuff and it compiles it down into valid go so you just go hey i just want a result end and then it does a result end and it does all these things that you normally would get used to like the question mark operator and all that you have a defer source close so it feels just like go but it also feels just like rust to me this is extremely compelling yeah holy hell they fixed goaling yeah exactly like this would be this is this sounds like a borgo i mean this actually sounds it's gleam for dummies it's gleam for dummies right it's gleam but like again if gleam was procedural i think i would love gle uh but for purposes it may be enough to say that in imperative programming you write code as a series of steps line by line while functional programming you define mathematical functions and let the machine worry about the steps i don't know about that that sounds a little too magical for me in terms of actual functionality and usage imperative programming is far more common approach facts before hasell academic researchers had implemented certain functional concepts in a language they worked with but in the late 1980s a group of computer scientists came together to smelt them into a single language they named it after the lo logician mathematician hascal curry damn you even curry functions yo in hascal we curry functions uh whose work is foundational to programming language theory uh the original plan was to name it curry but the group soon realized a bullet dodge that this would be this would make it vulnerable to bad culinary puns think about just think about it for a second that they're going to make a language and going to name it after you but they choose your first name because your last name is too bad for puns damn damn man i mean it's like feels really good you got it named after you but also kind of hurts a little bit uh the has scho committee uh would blowtorch the messy excess of imperative programming with high-powered mathematics sculpt a new chassis chassis with a guidance of advanced logic why is this called chassis right this is this is you pronounce this thing chassis why it's french or something dude chass it's a bunch of chass got a little ass in their ass mentioned and w everything together with modern compiling techniques out of the scalding forge hasal 10 was born you know like i know this writing is a little ridiculous but i must say that he writes much better than me hll simply looked different from anything i'd ever seen spooky symbols proliferated pro prolifer proliferated uh the syntax was almost offensively tur the code for fibonacci sequence which can span multiple lines in other languages can be written as a oneliner shorter than most sequen or sentences in this article fib 01 zip plus with fibs tail fibs is that real is that real is that real i'm not okay i'm not gonna lie to you i'm not love i'm not loving the look of that okay that doesn't make me hot and bothered you might as well sign off a hasal program with qed i assume that's how you end a program right that a program you like process. exit zero is equivalent to qed do you just qed to like close the program oh they reinvented pearl no everybody knows that you pearl was invented by larry wall when larry wall's forehead hit larry wall's keyboard and a series of symbols told larry wall that this is a message from god in which larry wall the prophet from god should invent larry wall's new language which is pearl which larry wall did everybody knows that uh whenever i set out to learn a new language the first small program i try to write is a jesson [laughter] parser really a jesson parser i mean i guess it's it's it's it feels simple right cuz j jason.org right like by the way the biggest mistake in all of programming is right here did you know that the biggest mistake in all of programming is right here that's it right there does anyone know what it is a comma that's right an effing comma if you would have put a comma bro anti-aliasing [ __ ] off dude a comma just put a freaking comma there and you'll make my life better damn i guess yeah okay okay json parser maybe maybe that's not crazy which converts a data format commonly used for web applications into a structure that can be manipulated by a computer whereas the parser i remember writing in c had resulted in programmatic uh grow grotesquery spanning a thousand plus lines i felt frisone of pleasure dude what is this writing i felt a frone of pleasure when hascal allowed me to achieve it in under a hundred how long did it take to write how long did it take to write those hundred though that's what i want to know i want to know this freson of pleasure okay is is freson is that just is that does that mean nerdgasm french is underrated is it i'd say the only i'd say the only person that thinks french is underrated is the french okay it took a week of fighting the ghc yeah 100 lines in a thousand hours boom let's go um okay fres on you getting fres on be nuts at the same time i understood almost immediately why hasal was and still is considered a language more admired than [music] used you can't you can't write that you can't write that even one of its most basic concepts that of the monad has spawned a cottage industry of explainers analogies and videos dude it's an effing burrito it makes perfect sense if you just think of it as a burrito that's all a monad is so straightforward a notoriously unhealthful explanation famous enough to be autocom completed by uh google goes a monad is just a monoid in the category of endofunctors i do love i mean that that's a very hilarious phrase i love love it i love it the language is also more despised than explored steve yi a popular kudin blogger of yesterday year once wrote a satirical post about how a long at long last the has community had managed to find the one industry programmer who gives a [ __ ] about hasal we read this we read that one this was such a good blog post oh my goodness they held like meetings right oh my goodness uh let's see uh press was there like a press yeah this one was so good i loved that one that one was so funny uh for programmers like yi hll is a byword for a kind of over intellectualized impractical language with little industry application pck do you actually find that to be true pick you're the like the longest writer of hll that i know do you eventually get super good at hcll and you actually become a true wizard able to build things or is hasal like forever the difficult language real i just want to hear the real answer here do you transcend or is it always just pure intellectual masturbation there's always a horizon to look at with hll you just find a middle ground that you can use okay so it you can forever keep getting there's there's more to go but maybe you don't need to go that far okay okay what yui didn't understand however is that using haskell is rarely a pr pragmatic decision what the [ __ ] this article is too good it is an intellectual even aesthetic one uh in its essence hasell has more in common with films of charlie kaufman than other programming languages highly cerebral charmingly offbeat and oddly tasteful i have never used any of those any of those words have never been used to describe a programming language for me appreciated by those in the know and judged by outsiders as pretentious i don't actually judge it as pretentious uh hasell is one might say a cult classic oh it's like evil dead 2 is is is hasal the evil dead 2 of programming languages is that fair by the way um me and my kids did sit down this weekend and watched evil dead to i don't believe somebody uh wrote this i do you can tell that this is not an l an llm because this is actually it's actually funny right llms give you the veneer of funny but they're not actually funny javascript charmingly offbeat uh that has okay that's a tweet and here we go and here we go uh javascript is charming charmingly offbeat chat is mit boom uh that let's see that hasal never gained widespread adoption exemplifies a paradoxical truth in software engineering great programming languages aren't always great for [laughter] programming dude okay guys the the the horse is dead we don't have to keep beating it my goodness this poor language hll is not entirely more difficult to learn than something like c but the two languages pose different challenges writing in c is akin to precise engineering requiring the kind of attention demanded of a skilled horologist but hll code is really code-- shaped mathematical expressions c is a quintessential engineering language haskell is a pure mathematicians a good engineer and a good mathematician aptitudes don't always overlap the industry is not so well-kept secret is that most programmers aren't as good at math or logic as you might think this is mostly fine this is my favorite way to describe anything it's mostly fine after all many doctors would make poor molecular biologists few lawyers are legal philosophers and a great deal of nbas know zilch about e uh e econometrics econometrics uh but this means few programmers can really m haskell this includes me of course whose legs weaken at the sight of such expressions as f coalgebra and type class metaprogramming i honestly am too stupid to know what this even means like i know what algebra is coalgebra now i have no idea you throw an f in there we're just not worthy dude i know this dude this is the most you know typically i'm not a huge fan of wired but this is based this is this is based as it gets okay uh still when i think about hasell a line about martin ms pros comes to mind the primacy he gives to style over matter oh i like that phrase i like that phrase a lot again i know i've mentioned i know i've mentioned this a couple a couple times i just accidentally just went to a random status please tell me this is the one this right here i couldn't agree more if i can't find an aesthetically pleasing way of doing it i'd rather not i think there's something really great about this i i keep sorry this has been just ear wormed in me for the last couple days i keep thinking about this like i can't help but to but to but to think about this which is i realize so much of what i've done is because i find it pretty right like i find it pleasing i keep thinking about dhh i keep thinking about this phrase okay that so much of what i do is because i i find it beautiful right and the thing is is i don't necessarily find a programming language beautiful but i find building something that's technically challenging beautiful right like beauty is obvious there's a lot there's a lot to do with beauty and how you shape what you think is beautiful and all that kind of stuff we're not arguing over that thing i'm not going to argue the whole coolidge coolidge truth is your proportionate understanding of beauty but i do like this idea that you should be driven by the style over matter i do like it i do like that uh hat scho programmers are style supremacist and it's nothing to do let's see nothing to apologize for in an industry often fixated on utility and exped i the h community should not feel obligated to summit evidence of its [laughter] usefulness the horse is dead people the horse is dead why do we got to do this uh instead it should simply retort what's the problem with useless inell stop it it's dead because the thing about useless exercis is they don't stay useless for long even when industry program shunned hasal language designers took note in recent years a hasal styled paradigm has come into vogue because of the treasury of benefits it offers rendering certain categories of bugs impossible by design making a program's correctness more provable and enabling easy parallel computation some of the most anticipated updated or updates featured in new versions of imperative languages are those inspired by functional programming in the end bakas anti von newman plea was heard programming has been liber ated i do like that ending i do agree no i actually i actually really do love this uselessness is not necessarily always an exercise in uselessness i can tell you that everything that i've built that quote unquote has been useless on the outside has almost exclusively helped me uplevel my my career and my job throughout my life all the things that i did building a neural net in javascript got me really good at javascript it got me so good at javascript even though now that i look at it i think it's completely garbage but the first time doing it made me much better understanding and learning about monads though monads were not quite all that uh hip in 2014 but learning all about it and building out the logging for all of the four uis at netflix by using a monad likee structure uh was super fantastic right was super fantastic and it has really genuinely uh been a big help uh it's been a big help in my career all those little things you know and so i've been very very happy learning these small teeny tiny uh stuff when did you make a neural net in javascript when i was getting my masters in in a i this was way back in the day right um so 11 years ago uh but i still just absolutely just like it makes me feel you know all the things that i did were quote unquote useless have just been nothing but useful looking in like looking forward and so even though i think about all the dumb things i'm doing even now building this whole vim with me real-time asi rendering engine where it's actually we're actually getting to the point of compression and all that stuff like yeah it's it's it's truly like not useful on the surface but the amount of things that i'm learning the ability that i've gotten at go all the like i now know go well enough to actually start identifying all these common pitfalls and i'm just realizing like how good like these type of projects really are like they're absolutely useless but they absolutely make you a better programmer a better problem solver able to see problems in bigger and bigger pictures and just really uplevel your skills in every last way don't be afraid of being useless just like hll a jen