i heard you liked factories so i made you a factory inside a factory which inherits from an abstract factory so it can create new factories but enough about programming in java you know i mean i at netflix on the originals team okay so so in 2017 when originals were really getting started uh real talk we did have an abstract of we we had an abstract builder factory okay it was an abstract builder factories that would produce images and other assets for all of our new original content so i mean i i did have i did get the full abstract builder factory right like i think that's really a winner and i if i'm not mistaken we also had an abstract factory we also had the abstract factory we had we had like we had it all we had the builder config factory for sure that you'd build up a config and then you'd produce it and it was super complicated and i got most of it down but man those days in java you know java's a lot of a lot of a lot a lot of factories you know what i mean you just get up right it's just like if you ever want a good factory go get it in this video we will learn about eight design patterns every developer should strategy is the only the strategy pattern strategy pattern is like the greatest pattern of all time okay everyone uses the strategy pattern uh second off iterator pattern real good no in 1994 the gang of four released the holy book design patterns introducing 23 objects by the way if you haven't read this you should even if you don't like oop this this idea of patterns that can exist within software is really amazing and it also works in things like rust there is patterns and rust being able to understand patterns and like abstract them out and reuse a strategy to write software i think is one of the best things you can do because no matter what software you write there are patterns that can make things simpler and make other people get up to speed oriented design patterns falling into one of three buckets creational patterns structural patterns and behavioral patterns while some argue that it's updated the fact that a 30 year old book is still being discussed definitely means something especially in a world where javascript frameworks are going out of stock i just let's just be real here if only if only react was dying okay anyways dial faster than you can say javascript was a mistake anyways let's start with our first creational pattern the factory imagine that you want a burger but you don't want to have to worry about getting all the ingredients and putting them together you know this is always how this this pattern is described i always feel like it starts it's verbally so simple but it's always a huge pain in the ass anyways so instead you just order a burger well we can do the same thing with code if it takes a list of ingredients to create a burger we can instead use a factory which will instantiate the burger for us and return it to us whether it's a cheeseburger a deluxe cheeseburger or even a vegan burger all we have to do is tell the factory what kind of burger we want just like you would do at a restaurant but be careful because this way you'll never again you know this always is i mean like when you look at this for a second you realize like how annoyingly coupled this is you know what i mean like your method names like you have to say the thing you want as the method name but it uses the strategy pattern at the end the strategy pattern is good like notice the strategy pattern at the end they all have the word print yeah this example makes no sense i agree with that but the print thing at the end it is this this makes a lot of sense uh why not use an email i don't think this language uh i mean at this point you should probably compose a burger of its various toppings because you should be able to push a topping and make your own then you can have named ones right you should just have named ones not you don't have to create new instances they should just be named uh hard-coded ones and then you can have your build your own one right well let's let's be real here okay uh anyways for know what's inside the special sauce we added a secret ingredient now alternatively control over how the sausage is made you can go with the builder pattern the idea is that if we want to make a burger we don't immediately have to pass in all the parameters we can use a burger builder instead we'll have an in by the way this is the the better way to do things uh sort of i this whole it is better it is and generally you should always use a builder pattern rust has a builder pattern uh this is this is a real this is a real this is a real good this is always usually much better this whole like not returning yourself though this is kind of freaking me out like you should return yourself return yourself individual method for adding each ingredients whether it's a bun patty or cheese each one will return a reference to the builder and finally you will have a build method which will return the final product then we can instantiate a burger builder add the buns that we want the patty that we don't like this that we want and we can change what is this bash what do we write in bash right now in these methods because remember each one will return a reference to the builder finally build it and we have the exact burger that we want i've used this pattern a lot at google with protocol buffers next we have the singleton pattern and i'm not i did you know he just lightly threw out uh using these with protobufs like that is a really great thing proto buffs are amazing and this is one of the reasons why they're so good when i'm at google i know just tosses out casually tosses out google and protobufs it's a neat kill is absolutely right like when you use when you use proper builder patterns which is just like something you see all the time so this is like a good thing you can actually take away i like use this honestly use this today says the netflix guy you know when i'm when i'm designing my software at netflix i tend to use the builder pattern as well you know what i mean it's like this is actually a really good this is a very useful idea in general and it works in a lot of languages it's um right it's just good times use this pattern a lot at google with protocol buffers next we have the singleton pattern and i'm not talking about they actually renamed the singleton pattern of course to the arch user pattern probably you should probably keep up with the times you know my dating life a singleton is just a class that can only have a single instance of it that's instantiated it has many use cases for example maintaining a single copy of our application state we would start by having a static instance variable let's say in our app we want to know if a user is logged in or not but we won't i i know that python is considered like the worst language to do classes in just just be okay with it right we're we're looking for the pattern right that's one cool thing that should make the pattern even cooler in the sense that uh the pattern can exist in such a way that it can work in multiple different languages right that's good that's a good thing because that's something that means that you can take it with you uh the singleton pattern sucks until it's really awesome right you know i always come up with a stupid like database connection pool thing sometimes you want it as a singleton but then you're like well do you really want another single tension program just hold on to it by the way low level learning we did react to yours you you yours is great your zig one right you know you always get into this one you know we'll use a static method called get app hey uh low-level learning can i do one more reacts to one or more of your contents can you pick your favorite one and send it to me yeah yeah yeah yeah we'll do one more after this okay stay which will first check if there's already an existing instance of can we pause it for a second uh i hate decorators for application stay if not we'll instantiate one if there already is though we'll just return the existing instance we'll never create more than one so now if we get our app state for the first time the logged in value will initially be false but if we i mean to be fair i did use a singleton pattern for this when i was writing the video driver uh and the audio driver the thing was is that i also wrote the driver in such a way that behind the singleton was a strategy pattern so it'd create a singleton strategy pattern so that way i could write a sync player something that doesn't actually go to anything it just is like a software sync it just swallows all the video and audio so that way i could do like high performance testing right i could play two hours of video in five seconds or i hadn't really actually go out to the actual television and so there is places where the singleton makes a lot of sense especially if you can mix in like a singleton with a strategy you can create ways to create your whole system such that it makes a lot of sense so just saying you know i know that the singleton gets a lot of riffraff but there are a few places where it's super useful for me that was super useful if we get the app state again this will actually still be the first instance so if we modify the first instance and then print the logged in value for both of them they will both now be true this pattern can be useful so that multiple components in your app will have also this example is terrifying i hate the you know modifying a static a singleton you know it just terrifies me you know like this right here this thing terrifies me i know it's not dude it's crazy it's crazy uh they're just so hard to test they are so hard to test i'm totally on your team with that shared immutable state it's shared mutable state is the the bane of all programming and the key to super awesome amazing performance and is the scariest thing in the universe and so careful i have a shared source of truth but how can all the components listen for updates in real time well that's where the observer comes in our first behavioral pattern i prefer to call it the pub sub pattern it's widely used beyond just object oriented programming including in distributed systems let's take youtube for example every time i upload a video all of my subscribers get a notification including you because you're subscribed right right in this case the youtube channel is the subject aka publisher which will be the source of events such as a new video being uploaded we might want multiple observers aka subscribers to all be notified when these events happen in real time one way to implement this pattern is to have a youtube channel class which maintains a list of its subscribers when a new user subscribes we add them to the list of subscribers when an event occurs we go through that list of subscribers and send the event data to each of them with a notification but we also have to define the subscriber interface which you can do with an abstract class or an interface different subscribers might implement this interface differently but for a youtube user let's say that we just want to print the notification that was received so then we can create a youtube channel add a few subscribers and we only have to call notify once and all of the subscribers will receive the notification this is also this is good i mean i mean observer pattern it's it's real time uh we use this a bunch i you know again the python i think there's like an instant distaste for for this the idea of message passing i know oh my goodness don't shut up tj tj next thing you're gonna do is you're gonna start talking about objective c so extensible enough that a subscriber could be subscribed to multiple channels an iterator is a pretty simple pattern how the values in an object can be iterated through in python just defining an array and then iterating in keyword uses the built-in list iterator this way we don't even have to index the array now for more complex objects iterators was good in fact you should know an iterator pattern uh one of my first interviews with google like 10 years ago when i had to fill it out on google docs i actually did the google interview at my job when i was writing c for the government for robots and at google by the way i got rejected by the way they didn't like me by the way but part of that interview was to write an iterator right and so and so knowing iterators iterators are super useful they're they're it's a it's a great pattern and i've used iterators as ways to solve problems at netflix by the way by the way i used i i work at netflix by the way uh and so it's like it's really really good yeah yeah netflix uh or google did reject me twice and then they offered me a salary lower than the one i have at netflix and try to convince me that it's a starting point and i said of course it's the starting point any point you give me is a starting point what you're saying is an objective truth for an objectively bad offer so try again it's like binary search trees or linked lists we can define our own we can take a list node which just has a value and a next pointer and then a linked list which has a head pointer and a current pointer we can first define the weird passing in head as the first note uh you know just saying aren't you the guy that built the auto place out on the homepage i am iterator with the inner function which will just set the current pointer to the head and then return a reference to the linked list to get the next value in the sequence we defined the next function if our current pointer is non-null we can get the value and then return it and also shift the current pointer but if we reach the end of the linked list we can send a signal that we're going to stop iterating to test it out we can just initialize that's weird oh yeah because they don't have options do they oh yeah so rust solves this differently you know i don't i mean this just seems like why do you why you have to throw an error to stop iterating just i mean it seems weird right can we agree that is a little it's just a little weird you know it's a little weird i'm just saying it's a little weird okay stop iterating is uh crucial in python yeah i know but it's still it's weird how do i get into netflix as a software and darn um and iterate through it with the in keyword this is a much more simple interface than having to actually update pointers ourselves now if you want to modify or extend the behavior of a class without directly changing it you can go with the strategy pattern for example we can stretch pattern always just always use the strategy pattern okay just just add everything's a strategy pattern that's all strategy pattern is just fancy talk for using interface you dummy you can filter an array by removing positive values or we could filter it by removing all odd values these are two strategies but maybe in the future we want to add more and we want to follow the open closed principle well we can define a filter strategy create an implementation which will remove all negative values and an implementation which will remove all odd values and then at run time we can pass this strategy into our values object and to test it out all we have to do is pass in the strategy into our filter method and we'll get our desired result this way we i use this exactly like i literally use this exact same thing so i had to create uh so at netflix i'm doing this whole like performance audio video thing that i've been kind of talking about and when i'm building up some of the data stuff there's some values that as i build it up row by row i need to use the previous value uh but there's other that i need to only use the values that happened within that specific time span and so what i did is i created an emitter right so i have a continuous emitter one that always emits the previous value and then i have a counter emitter so that as time passes i only emit at that point what i saw at netflix of course by the way i work at netflix i don't know if you know that you can add so like modifying you don't even have to you don't even have to like oop to love strategy pattern strategy pattern is it's just make the thing into an interface and do the logic below the interface program at an interface level that's all strategy pattern is programming interface level oh netflix you must get a free subscription shut up we don't talk about next we have the adapter our first structural adapter pattern what i like to recall the lose your hair slowly pattern roll pattern it's analogous to the real world where we have a screw that's too small to fit into a hole we we've all we've all felt this problem okay you know a lot of a lot of us you know we're just trying to uh you know we're just trying to live our life you know it's not my fault so instead we use an adapter which makes the screw compatible with the hole or maybe an example did he just passed out the the sexy saxman at the end okay well i'm happy that uh well i'm glad i'm very happy that he leaned into that one that was good no one can be upset about that oh that's a lot of water no wonder i keep peeing i know i can't believe that can't believe there'd be a sexy time joke here people that you're more familiar with we have a usb cable and a usb port we can plug in the usb cable which will directly fit into the port but instead if we have a micro usb cable it's not again okay just because compatible so instead we need a micro to usb adapter which extends from the usb clasp but is composed of a micro usb cable which will be plugged into the adapter we can override the plug usb method from our parent class if needed but it's not in this case and then we can plug our micro usb cable into the adapter and then plug it into the port and it works just like a this is pretty much this is just pretty much the strategy pattern again right adapter pattern is just the application of a strategy pattern thought is is that yeah regular usb cable and our last pattern is the facade according to the dictionary so facade pattern um the facade pattern is actually okay so remember that whole like types definition argument that we went over the whole return types and all that in theo's video one of the reasons why i love return types is that you can actually facade it and this is really important it's not facade it's not for kate or however you're saying it's it's facade uh and so i actually like the facade pattern the facade facade is just encapsulation facade is just like a fancy ass word for simple simple right it's interface again it always just comes down to interfaces this is just facade these nuts it's just simply make an interface and not all interfaces need to be equal okay a facade is an outward appearance that is maintained to conceal a less pleasant or credible reality in the programming world the outward appearance is the class or interface we interact with as programmers and the less pleasant reality is hopefully the complexity that is hidden from us so a facade is simply a wrapper class that can be used to abstract lower level details that we don't want to have to worry about i'm surprised it even qualifies as a design pattern but some common examples might include http clients that abstract away low level networks this is perfect this is a perfect example you know that like again i the problem about the facade pattern is it's not necessarily a pattern as much as it is just good programming technique because because the thing is is that you can't really the thing about like the the strategy pattern is that there's like there's a there is an inherent thing you can apply it to you can inherently apply the observer pattern you can inherently apply the singleton pattern this one you can't just apply because there's no actual application it's just like you take a bunch of stuff and you make it into a method for doing a thing everything's a everything's a facade exactly uh and so that's like part of the the problem with this pattern is that there's no concrete application of it you don't know a good programmer uses it a bad programmer uses it a good programmer just uses it better than a bad programmer uses it a facade pattern doesn't even have to be an extension of uh oh oh it's just an extension of good programming you can take any anything that you can hide information and you can have private implementation implementation details and external ways to call it a server you can imagine a server is still is a facade a crud application is a facade you don't have to know the squeal uh query to go do whatever you're doing you're just calling a simple endpoint it's just a it's just an abstraction that makes something simpler quote unquote simpler but the problem is is once you add enough abstractions you actually remake it complicated again facade pattern is both the best thing in the universe and the literal worst thing in the universe details or even arrays yes a dynamic array like vectors and c plus plus or array lists in java are constantly being resized under the hood thankfully as programmers we rarely have to think about memory allocation though if you're interested to learn more check out my newly released object-oriented design interview course we talk this is great this is fantastic check out his object oriented design interview course uh actually it's probably not a bad idea everyone should learn how to think in object oriented programming for a moment just to see how some people structurally set it up and it can also make things drawing on a whiteboard really clear and so often this is just how we naturally think uh despite it actually being what is good to program you know how funny it is it's funny how that can it's funny how that can be is that a way we think is not necessarily like the naturally best way thoughts on functional options i think functional you know there's some things about functionalism that's great uh private dang i missed it uh will this be on youtube yeah this is great uh go check out neat code i thought this was great he did a great job went right over everything fantastic great video really appreciated this one uh uh by the way i work at netflix if you don't know that