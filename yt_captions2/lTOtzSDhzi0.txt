today i'm going to be covering some extra features that come with generators in python which i myself did not know about until today every now and then i read through the documentation and i learned some extra features that come with the programming language that i thought i knew so i'm going to share a bit of those features that involve the yield keyword and generators in python first i'm going to create a generator and to do that we just need to create a normal function and as you might recall from school or from your online lessons to create a generator you just need to include the yield keyword so yield i for example so this is going to give us 10 numbers back and it's not going to give them to us all at once because it is a generator which means it's only going to give us one at a time as we query it in lifetime and it must be early in the morning for me because i really meant to write random numbers here instead of random randoms although random randoms is an interesting name but to use this generator you just need to to create a variable from it and you can say random numbers and then you can print each one of these one at a time using the next keyword so this is going to try to grab the value as long as there's a value to be yielded so if we print this let's say four times and we run this we're going to get four values back and if we print this generator as a list so we say list of gem you'll see it's only going to print the remaining value so this list that we've created here or this generator that we've created here is exhaustive which means as soon as we use a value it empties it from this generator which leaves us with the remaining values that we have inside the generator so that's efficient because we're only getting one value at a time and if you have tens of thousands of values it's not going to load all of those at once as you may recall if you create a list of a billion items that takes a lot of memory and it also takes a lot of time to load in python so using a generator and grabbing one value at a time such as this approach here is much more memory efficient than creating a list immediately so that's all basic information regarding the generator of course but what i wanted to show you is something else so let's duplicate this function say random numbers and we're going to add 100 to this because we are starting this from 100 and ending it at 110 so it's still 10 numbers but it starts from 100 and now we have two generators here and the third function that we're going to create is just going to be called generator and this is where the crazy syntax happens so we have a generator here and let's pretend we want to use these two generators inside this generator we want to yield these values directly inside this generator well here's a good example of where you can use the yield from keyword so we're going to yield from random numbers then we're going to print next generator and we're going to then yield from random numbers 100 and this is what i recently learned about first that you can use the yield from keywords to take the values from a generator because otherwise you would have to type in for i in random numbers and you would have to type in again yields i what i just wrote here is the equivalent to what you are seeing right here so it's a one-liner that looks quite nice and that makes our life a bit more simple the second thing i learned is that you can add multiple yield statements in your functions and the way it works is that first it's going to try to take all the numbers from this generator and once that is exhausted it's going to move on to the second generator and that's why i added this print statement here because we can retrieve many numbers from this generator but this will not be executed until this is exhausted and we try to get a value from this line over here but that was a lot of talk so let's actually try to use that i'm going to create a if name is equal to main check to keep things clean and we're going to create a generator from that generator now inside here we can type in print next of the generator and i'm going to change this to three so if we run this let's say three times we're going to get three values back but let's try to grab one more value so instead of three we're grabbing four and then let's run it again and you'll see it's going to trigger the next generator print statement and grab the next value because once again in our first generator we only have three values and once we grab all of those values with the yield from keyword it's going to trigger whatever happens next in the function because this is empty which means there's nothing left to grab from it and that's just going to direct the program to the next lines and with that being done we can also print the list of the generator so if we print list of jen you'll see we'll get all the remaining values back from that list and if we do not use this next function at all we will just get the total list from that generator plus the print statement that was included inside of it but that was all i wanted to share with all of you today i found this very interesting when i was looking at the documentation i don't know how i missed this i know it's something that i don't use that often but it is pretty cool to know that you can do something like this with generators and it's not something i happen to learn when i was studying python or reading the documentation for python this is something that came up randomly so i thought it was worth sharing but with that being said do let me know if there's something else about the yield keyword and generators that i missed i would love to hear about that in the comment section down below but otherwise with all that being said as always thanks for watching and i'll see you in the next video