this is the at tiny 45 an avr microcontroller from the at tiny series of eight pin avr microcontrollers if you have a small arduino or avr project using a small chip like the tiny 45 is an easy way to reduce the size cost and power consumption of your project also working on small chips is just fun today we'll be riding bare metal c onto the tiny 45 using the avr gcc tool chain it's way easier than you think i promise if you don't have the tiny 45 but you have another 80 tiny chip like the 85 or the 35 this tutorial will work for you as well to program the tiny 45 we'll need two things the tiny 45 itself the target and a programmer in this video i'll be using an arduino uno as a programmer to set up the uno as a programmer open your arduino ide go to examples and arduino isp choose the right board for me it's the uno choose the right com port choose the avr isp as a programmer and hit upload once that's done your arduino is ready to be used as an arduino programmer the tiny45 is programmed over isp or in system programming over its spi bus to program the tiny45 we'll have to connect two systems of the chip to the programmer the first being power so pins 4 and 8 and the second being the spi bus so pins 5 through 7 for data and pin 1 for the reset control during the programming process here i'm connecting the programmer's ground to pin 4 on the tiny 45 now 5 volts on the arduino to the tiniest pin 8 arduino pin 10 to the tiniest pin 1 for reset control arduino pin 13 to tiny pin 7 for the programming serial clock arduino pin 12 to tiny pin 6. this is programming data going in one direction and then arduino pin 11 the tiny pin 5. this is programming data going in the other direction okay great now we have our programmer the arduino ready to program our target the attorney 45 now we need to write something to program to do this we'll first need a few app packages the first is gcc avr which contains a compiler to produce avr binaries the second is avrlibc which contains the libraries required to write avr code and the third is avrdude which is a program used to program flash files to avr chips for this bare metal example we're going to write the blink led example in c and make an led on port b3 flash four times a second to start we'll need to include avr slash io.h and delay utilities these are both header files for libraries that gcc avr will reference when compiling our program next we need to set the direction of port b3 to be an output this is done by setting a bit in ddrb or data direction register for port b to say that port b3 is an output port the underscore bv macro is just a macro that converts a decimal value to the appropriate flag mask in binary hence bv for bit value if you don't understand what that means that's okay that's why we have abstraction it's just understand that the bv on dd b3 sets it to the correct value for programming next with a for loop we start an infinite loop where we enable port b3 by setting a bit in port b this will turn the led on next we sleep for 250 milliseconds or one quarter second next we unset port b3 by unmasking the bit again if the syntax here doesn't make sense with the ampersand and the equal sign and the not sign that's totally okay just blindly trust me don't actually do that but just take the code now we have to compile our program and convert it to a format that avrdude understands to do this we first need to compile the c into binary do this using avrgcc the tac os flag optimizes a program for size reducing its size as small as possible given the limited size of the at2045 the tac fcpu flag is to tell the compiler how fast the clock is running in this case our clock is one megahertz this is done so that things like delays sleeps and other clock based timers are accurate we tell it to output a file called blink by default avr gcc creates l files now we need to convert that outputted elf which avrdude does not understand into an ihex or intel hex file which it does we do this with object copy the tac r flag removes the eeprom section of the elf because we can't write rom hence read only memory the rest of the command specifies to output an ihex format so it'll take the elf which is an elf format and output an ihex file next we finally get to flash the at tiny with avr dude the flags here that are really important there's a lot of them but the ones to pay attention to are tax c stk 500 v1 which tells avr dude that we're using the arduino as an isp or in-system programmer the tac u flash w blink hex tells avr that we're writing the blink hex file to flash tac p slash dev ttyacm0 is the device path of the arduino this may vary for you it could be tty usb 0 or ttyacm1 for example and finally tak b 19200 is the baud rate of the arduino isp this may vary for you but in most cases it's either 19200 115 200 or 38400 while the previous command was running you should have seen the rx and tx lights on your programmer go crazy to hook up the led take your led and find which of the two leads is the positive lead the positive lead is the longer of the two put the positive end of your led into pb3 on the 80 tiny 45 then using a resistor something small like 470 ohms ground the negative side of the lead to ground now you should see that my led is blinking four times a second as intended well guys that about wraps up this tutorial if you learned something or if you enjoyed this video do me a favor hit like hit subscribe for more little content like this and i will see you guys next week have a good one