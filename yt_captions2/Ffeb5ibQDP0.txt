this video was brought to you by ind dentle io learning python made simple how's it going everyone in today's video we're going to be learning about five random useful functions that you can use in python the first random function i want to show you is the shuffle function for this example i'm going to create a list of type string called people and it's going to contain four names bob tom james and sandra now imagine you want to randomize this list or in other words you want to shuffle this list well to do so we can just use the shuffle function and pass in that iterable and that's going to shuffle the list in place so that the next time we print these people what we're going to get back is a shuffled list and this is going to change each time we run the program it's going to shuffle those elements moving on to random function number two and actually as a bonus i'm going to be showing you three functions here because all of these are quite similar so here we're going to import from random the random function the random integer function and the random range function and it's good to know about all of these so first of all we're going to be covering what random does and to demonstrate it i'm going to create a value of type float and just call random directly and then i'm going to print that the random value is equal to that value and what random does in python is give us back a random value in the range of 0 to 1 so now if we were to run this you'll see that we will get some crazy decimal back in that range and each time we run it we're going to get a new random float back but it's always going to be in the interval of 0 and 1 but now imagine that you want to customize this well unfortunately with random we have no way of doing so it's just going to give us a random value in the interval of 0 and 1 so instead what we have to do is use a different function and this time i'm going to create a list of integers and that's going to equal this list comprehension and inside i'm going to use the random integer function which allows us to specify a sort of range or two endpoints and the first endpoint is going to be 10 and 20 so this function here is going to generate a random number between 10 and 20 each time we call it and both endpoints are inclusive which means 10 and 20 might be generated as random numbers and then we'll type in 4core in range five because we want to generate five of these and then we can print the f string of random integer equals these values and what we should get back when we run this are five random values and i'm going to run this this a couple of times just to show you that we will get both end points such as 10 and 20 and finally let's explore what random range does so right below our values we're going to create something called values 2 which will be a list of type integer and that's going to equal another list comprehension but this time we're going to use random range and inside the parentheses we're going to insert 0 and 3 4core in range 5 and below that we're just going to print that rand range is equal to these values i almost messed that up because i copied it directly from my other screen anyway random range is very similar to random integer with one major difference and that is that the upper bound is exclusive so no matter how many times we run this we will never get three included in the output and i kind of lied that because there is another major difference and that is that you can provide a step so here we can add two and we can make this 10 and now it's going to generate a random number in the range of 0 to 10 with a step of two and that just means we're going to get even numbers back as you can see down here each time we run the program we're only going to get even numbers back or numbers with a step of two if we were to start this at one we would only get odd numbers back but all of those odd numbers would have a step of at least two which means we will get back 1 3 5 7 and 9 up next we have random function number three and once again i'm not just going to be showing you one function but two which are closely related so from random i will import both choice and choices and then i'm going to create a list of string which will contain the exact same people that we had in the previous example and previously i showed you how you could shuffle these people but now i'm going to show you how you can select a random person or element from this itable using choice and actually to do so is quite straightforward so here we're going to type in that choice is equal to the choice of people and that's going to grab one random element from our people as you can see each time we run this it's going to return to us a random element and this one was quite straightforward but what about choices well to keep it simple with choice we could only return one element while with choices we can return several so what i'm going to do next is print that the choices equals the choices with our people inserted and by default this is only going to return to us one element such as james or james again or sandra it's going to return only one element in the form of a list which might or might not be that useful so something else we can do is actually specify the amount of elements we want to get back this just tells choices how many elements we want to grab from the original list and place into this new list so if we specify k to b5 it's going to populate it with five random choices and there's actually one more parameter that i want to show you that you can use with choices which is quite cool and this is called weights so right above i'm going to create some weights of type tuple and that's going to equal 15 20 35 and3 and then after k we can just say that the weights are equal to the weights now what this does is tell us what probability do we want to give each one of these elements to be included in the new list so at this point bob will have a 15% chance of appearing tom will have a 20% chance of appearing james a 35% chance and sandra a 30% chance and the next time we run this we should see those manipulated probabilities now james appears a lot moving on to random function number four and this one is called sample and it practically does the same thing that choices does except with sample we get unique elements back while with choices there are many chances that we're going to get the same element back so to demonstrate how this works i'm just going to print the sample of let's say the range of 100 and then i will specify k to be 10 because we want to get 10 elements back but now if we were to run this no matter how many times we run this we will always have unique elements or that's not completely accurate because if you were to insert let's say a list of 1 one 2 3 both both of these elements would be considered unique so what i was trying to say is that it will only draw each element once from the original list and here we can't insert 10 because there's not enough elements and that's going to give us a value error so if we have four elements we're going to have to use the number of four to retrieve those and it's going to draw them randomly from the first list so if we change k to two it's going to pick two and then it will pick two again and two again but these will all always be unique and that's why if you were to do something such as inserting the range of 100 you would never get any numbers that repeat and it's easier to show you with 10 every time it draws a number from this range that number disappears from that ital or at least that's how sample sees it but there's actually something else we can do that's quite cool with sample and to demonstrate it i'm going to create some colors of list of type string and that's going to be a list with the values of r g and and b and then we're going to print the sample of these colors and we're going to set k to5 but obviously this is going to raise an exception because we don't have five elements in our list so there's actually something else we can do and that is multiplying each one of these elements by a number we specify and to do so we need to provide something called counts which is a tuple and inside here we can specify how much of each element we want to include in our sample so for example we can say that the new list will contain 10 reds 20 greens and maybe five blues so now with this being provided sample sees a total of 35 elements in our colors list because r was multiplied by 10 green was multiplied by 20 and blue was multiplied by 5 so this time getting five elements back will work quite nicely and since we have a lot of green chances are we're mostly going to get green back and finally for the last random function of the day i'm going to be teaching you about seed and seed is incredibly important when you want to get consistent results back which can be very useful if you are testing your program so this time we're going to import from random seed random random integer and sample just to show you what se does and since we already discussed how all of these functions work i'm just going to paste them into my script and what we have here is me using all of these functions and printing their results at the same time using some f string magic py charm absolutely hates me because i'm using spaces between the equals but when i print this out it looks quite nice we have random that gives us back some random decimal number we have random integer which gives us back a random integer and we have sample with the range of 1,000 and k at to5 that gives us back five random numbers which are unique in that range and each time we run this program the data is going to change because that's what we're telling python to do here we're telling it to generate some random results and that's not always good for testing sometimes you're going to want to see which results crashed your program or which results gave your program some funky behavior and with random data that's practically impossible so this can be a very useful place for using the seed function and with seeds we can insert types such as none integer float strings bytes and bite arrays to keep it simple i'm just going to insert the integer of one now when we run our script we're going to get this random data back but when we run the script again and again and again you're going to notice that the random data is always going to be the same and that's practically because we specified in our program to use the same seed for the the number generation each time which means we're going to get the same results back each time in other words we practically saved that state or we're able to reproduce those random numbers using this given seed and each seed is going to be different so if you put the seed of 200 it's going to give you some new random numbers but anyways that's actually all i wanted to cover in today's video do let me know what you think about these random functions in the comment section down below but otherwise with all that being said as always thanks for watching and i'll see you in the next video