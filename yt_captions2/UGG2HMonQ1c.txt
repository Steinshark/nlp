service to elixir i recently rewrote a server a service that was on aws api gateway and lambda in elixir and apparently that intrigued some people so i decided to do a small write-up you know why you know why you want to guess why it's because it involves elixir okay it has nothing else to do with serverless or anything people just want that elixir juice in their life at all times every time always this post is going to be about our motivations for the move and what replacement implementation looks like this post is not a critique of node.js lambda or serverless movement but a word of caution about how pricey it can become if your services end up going web scale mongodatabase trademarked uh we started with the original service was designed to collect an event stream from various web browsers collecting different client metrics and ingest them into a greater etl extract transform load i love a good extracts transform load system we had previously been using a third-party logging solution that was getting expensive and we did not provide ways to extend or interact uh with the data we stored in a way we needed to here's a very generalized diagram of our original system all right all right all right all right all right akinesis stream okay i like that word you know it reminds me of kinesis the keyboard i use hashtag add hashtag use code private gen for 15 off actually it's prime 360 if we're gonna be real it's prime it's not even prime imagine it's actually prime 360. that was a great ad by the way didn't even plan the ad but it totally works links links in the description all right anyways so they have api gateway kanisa stream json schema validation lambda all sorts of crazy magic okay this looks like every single project dude basic af okay i love this article this article is so good api gateway we bound our api client endpoint directly to a kinesis stream using velocity templates so that the downstream lambda function could take the advantage of lambda kinesis functionality and can currently be invoked to process batches of http posts we knew that the service would be handling lots of http requests at a time and did not want to run into throttling issues with lambda so processing it off a queue in batches was a solid choice okay i mean batching is always a good plan kinesis our kinesis stream has varied in size a bit but if i recall correctly its highest throughput was 60 to 80 shards to avoid getting right provisioned throughput exceeded that's a lot of shards our lambda was in charge of pulling patches off the queue validating that the data made sense collecting metrics on our metrics collects metrics on our metrics classic yo doggy-like metrics and ship off the results to a whole other land of magic to just dispatch notifications store replicas of data in s3 for posterity and compliance manage log slash event retention and ingest events into gigantic elasticsearch 3 cluster or cluster three all right to summarize each post adds an event to the kinesis stream a lambda pulls off about n events at a time for processing everything is hunky-dory for now this is a great this is actually a great introduction they gave us the meat they gave it to us raw and we got none of the annoying parts all right the system worked fantastically for well over a year it scaled very easily required zero attention this is good i mean this is a good argument for why relying on other people's infrastructure is such a great argument is because you don't have to do to it when you build it it just works it's fantastic absolutely in there more teams and projects on the company begin to interface with it and then beautiful daddy basis coming in hot let's go then it got expensive why we needed a change api gateway alone costs about 3.5 dollars per million http requests that's awesome i can run my side projects on it for free i can build stuff in it rather quickly and get things done but when at scale so does the bill all right let's see our services our service didn't quite grow exponentially in use but it did hockey stick it went from free to a few hundred dollars to around twelve thousand dollars just for api gateway no kinesis no lambda just api gateway we are doing about five million requests per hour you tell me it only cost 350 per million uh i can't believe i did not recognize tree fitty like it was right there tree fitty was right there and you're telling me i didn't even see it uh 12 600 that's a lot of three fitties yeah again there is no lambdas doing business logic yet that's just cash to get the events in that spent is sustainable but obviously a waste and we knew that we were going to be adding additional load to the system in the near future currently we are processing up to 12 million events per hour let's do a math if we stayed on api gateway and lambda all right we're up to thirty thousand thirty thousand glad we dodged that one there's 30 days in a month classic 30 days in a month uh bleeding uh let's see from bleeding cash to let it crash that's an erling joke okay i don't get it so a lot of people ask me why not go this is a great question dude i love this question i've only written a few cli twoes and created a few pr's and go i am not nor do i pretend to be a go guru we had a system running at a high scale and i couldn't risk building it in something i didn't know how to write efficient efficiently and operate that's one of the beauties about go you pretty much always write it pretty efficiently uh aside i did build the prototype in rust for a uh for fun one weekend but it felt irresponsible to deploy it with the given i had absolutely zero rust experience dude this is such a great take you know we all love these bespoke artisanal languages but man is that hilarious why not node it was already written in node actually most of the code consuming parts were written in terraform to deploy it all and velocity templates to do some in-flight request manipulation to in uh ingest into kinesis the node lambda was rather simple it pulled off batches validated them and send them on their way down to the second kinesis stream if i was going to set up my own express server or whatever and then it would only be replacing api gateway portion and my goal is to replace the gateway and the lambda in one operation uh get the preliminary kinesis stream out uh out of there this lambda was originally processing batches and shipping off batches now the functional function handling individual requests would also need to handle the batching we did not want to hit kinesis with a single record at a time okay i don't know what kinesis is what is kinesis i've heard the word kinesis like' times i don't really work with amazon what is the kinesis is what is it what's the thing what does it do someone tell me it's a aws kafka or a kafka alternative oh okay oh okay the keyboard maker the amazon q okay is that the sns sqs stuff is that like the proper name behind it yeah no okay that's different i've only used sqs and sns right stuff and only very little of it sqs is a separate product okay it's a big data streams oh okay yeah i've never really yeah i mean i played with kafka at netflix i've never played with it anywhere else we have our own internal kafka stuff and mantis and raven raven on top of mantis on top of kafka there's a lot of there's a lot of abstractions there okay it's a lot there's a lot of things anyways to get the preliminary cat uh oh we already talked about this so if i let's see so if i built it in node i would let's see i would rather have to i would either have to hack up some global variable to save my stage in or uh in or depend on some external data store like redis to memcached or memcache why not cobalt no one asked me that it's a valuable question to be asked but why elixir this system has to be up when the rest of the world falls apart this tool is used for debugging issues in client software that runs on a lot of high traffic websites it also has to be absolutely fast our client library is for sending lots of information per page load in a lot of customers apps we can't go slowing down our customers user experience at the same time we decided since we are running our own http interface now that we should give feedback 400 bad requests if the data is invalid to the developer pro request instead of making them look at what the reporting tool down the line keep the user's experience good make the developers experience better okay it's cool and i enjoy writing and reading it honestly one of the most valid reasons uh i can take i mean again this is the truest form of dx i can take advantage of language features to reduce the need for external dependencies like redis or memcache okay that's cool too actually letting it crash like all software projects i shipped this to production i forgot everything right from the first time or hold on like all software projects i ship this for to production and got everything right the first time and it worked fantastically everyone patted me on the back and said good job we've shared egregious high fives and people actually carried me out of the office on a chair over their heads yep jk i screwed this bad boy up a few times and pretty sure i set a server on fire somewhere in the aws region my first attempt handling the http request is the easy part but i had the batch up data to ship off to kinesis one way to use aw kinesis http api but they also have a kinesis agent that i've run on plenty of servers so i figured i would use elixir built-in logger module and run a sidecar container with kinesis agent configured to ship my logs dead simple nice well that blue uh that blue let's see well that blue to bits quickly the elixir standard logger mentions alternatives between sync and async modes to uh remain performant when required but also applies back pressure when under stress there's no way i'm gonna do that that pretty much sounds like everything i've ever done in my lifetime literally every single time i think that's not gonna happen that happens i don't recall the exceptions offhand because this was the quickest i've ever shut down a multivariate test or rolled back code but i drove the logger straight into the ground request times rocketed skyrocketed many memory went off the rails and i started seeing all sorts of errors or all sorts of crashes in the logger process steam started coming out of everything and i swear i saw a sprocket fly off i kind of backed away slowly from that approach my second attempt i wanted to make sure i circumvented any back pressure i needed to keep the request super fast so i replaced the logger module with a simple write to a file that kinesis agent would read from writing files in elixir also happens through a process but you can open up a raw access to a file okay i like it i like it here's a little bit of code a little style for a little style oh my goodness style forage storage file a little file storage a behavior event stream storage new line okay i don't know what any of this means because this isn't that fake ass language elixir which i what am i looking at i don't even know what i'm looking at what is this what is that i don't know what that is seems fake write file log file message whatever that means raw dog me independent okay they are attribute yeah sure they are okay sure they are elixir champion sure they are i'm using a behavior an interface in other languages for storing data this allows me uh to have a nice easily inspectable implementation of the store in my test suite oh that's nice yeah good job traits are great uh this actually worked amazing request times dropped so low i thought it wasn't working then ram went crazy things are obviously a skew when a web server is using 10 gigabytes of ram this wasn't elixir's fault it wasn't kinesis faults either anyone know what it was i mentioned a sidecar container above this is running in uh in kubernetes and three containers elixir kinesis log rotate are sharing a volume that volume behind the scenes is running with temp fs which is an in-memory file system i could change it to disk space but then i realized my goals was to lower dependencies and now i was sitting on a container full of them uh was log rotates deleting files before kinesis agent parsed them i don't know i hope not i know this is getting real this is getting real this explanation is thorough oh my goodness just i mean this is why i don't see for the near future devops being anything but a growing career path is because there's so much required in all of this you know what i mean like the amount of stuff required to know understand and be fast at is insane i think devops is the only thing that rivals like the front end ecosystem for just the amount of insanity that there is like the amount of things you have to come up with and do is really fun but i will say that in like the devopsy backend stuff it's so much more fun you know you're building these tests you're trying to run you're splitting traffic saying it doesn't live do you do shadow traffic do you like inspect like it just feels for me it just feels more fun but some people really do love the front end i don't know it's not for me it just feels more fun all right all those dollar sucking bezos from mr bezos made me forget uh that time honored software principle keep its uh keep it simple or keep it simple me the solution was a few gen servers for people not uh from the erlang or elixir world gen servers are a tool for implementing a client server relationship that allows for storing state and processing work asynchronously with a simple api it's built into the language and a fair amount of language features are built on top of it here's an oversimplified diagram of my supervision tree application oh it's very bright event stream q event stream server event stream worker okay server supports async and sync calls from http request to place an event async responds fast with the 201 sync responds with any validation error this allows developers working on the integration to ask for errors when they are debugging but run efficiently when they are releasing code to clients q holds batches of work kinesis supports up to 500 items at a time up to five megabytes in size this queue gets pummeled by requests and internally it stores a set of batches when the count or size is exceeded it a synchronously sends a batch to the worker this gen server traps exits oh my goodness this gen server traps traps x it's wow too many s's i can never read too many s's in a row this gen server traps exits and also dispatches events to the workers when it receives an exit worker makes a call to kinesis put record via a library called xaws if any event failed to write they are placed back into the queue to be reprocessed i mean it sounds simple it sounds simple on paper how emotionally damaging was it though can we all at least come to recognize that the amount of emotional damage that went on in this probably was a bit higher than we'd like to we would like to admit with this approach i have one binary to ship to no external dependencies okay that's good that's actually really awesome this has been working fantastic response times are sub second and resource utilization is almost constant here's a graph of cpu versus ram during our high traffic time well done this is great very consistent love it love to see it and our numbers well rock on rock on the cpu usage per elixir node ranges between 0.6 to 1.8 under heavy uh load ram stays pretty consistent in the 100 to 150 range although i currently over provision it just in case how does this compare cost wise it's a lot cheaper for us a mind that we already have an ops team and we already have a kubernetes cluster running kubernetes cluster running our additional costs are the fractions of ec2 ec2 instances that elixir nodes are consuming i could argue that it's free since they are running on leftover compute but for comparison with numbers above i'll calculate the cost i'll use cpu since that is what our this service is mostly constrained fine yeah that makes sense our general kubernetes instance group is running on t2.2xls that is 44 cents per hour and have eight virtual cpus each so that makes about point or makes about 5 cents yeah yeah five cents per cpu per hour okay we're currently running three to five elixir nodes using between 0.5 to 2 cpus each on the lower end 59 on the higher end 397 dollars they went from what would be thirty some thousand dollars now to 500 some dollars on the high end well remember it's not 12k 12k was the old numbers it went up to 30k with where they're at now and that's just for api gateway remember they replaced api gateway plus the lambda service so that assuming the land of service isn't zero it's something right let's just assume it's not zero uh we haven't had an elixir node using above 1.8 cpus and on average we're running four nodes at a total of 1.1 cpus okay so 174 dollars so should everyone go and rewrite their server uh serverless servers in elixir roll out kubernetes uh get a nose piercing absolutely not it does a good part of this entire system still runs on uh in lambda although it will be moving into elixir over time to make it easier to reason about and develop on locally what everybody should do is think about where your service is going and can you afford those costs when you get there if you don't have a team of ops people and you aren't familiar with server full stuff spending 30k a month on http requests might be cheaper than an ops team absolutely this is a great call out you gotta make you got it you gotta decide what swords you're going to fall on but if you're already at 30 000 and you're planning on doubling or tripling you got to start thinking about the future right at what point do you change course and when do you know to change course right it's it's really about trying to predict the future but if you have the team you know how or will once you hit the scale there's a lot of room for savings by running your own infrastructure update i was asked on the elixir forum about the loss tolerance i'll go into that a bit more in detail here footnotes a downside oh it'll go into here it's some other article if you follow the link you can find the link uh footnotes a downside to this approach was developers using this async service uh we return to 201s and we're unable to tell them at the time if the data they sent was valid and ingestible yeah i was wondering about that because they do a 201 first and then they do like a another reporting they would have to use some additional tooling to see if their events made it to where they were supposed to go okay the system uh uses itself to monitor different aspects of itself like ratios of malformed events throughput and workflow step counters okay interesting uh it's the compiler that builds itself uh the back half of the system is still in lambda and node.js but the invocations are tiny compare uh in comparison to what was being invoked by the lambdas exposed to the user interactions yeah because the batching happened here so it's 1 50th right so that means 12 million becomes what hundreds of thousands uh 2000 events was our sweet spot for real-time rendering of graphs oh okay you may be thinking that sounds like that can be replaced with the kinesis fire hose transform function it could be i wasn't aware of or didn't exist at the time our system was originally designed and now that we need to get off the api gateway it doesn't matter it is a rad feature though my wordplay is out of this world i actually agree with this entire thing including 0.6 i actually was thinking this entire time this guy is an inspiration as to how to make jokes for technical content this is this is such a good article this is such a good article hyper media please uh this is a good article okay okay okay okay hold on there you go the article uh that's a really good art the article is really really good i complete i just love this stuff because you know i i'm a bit of a contrarian sometimes for the sake of being a contrarian and i know that's not good to be a contrarian for the sake of contrarian but when everybody tells me how amazing serverless is and that there's no downsides ever and everything's great and everything's fantastic there's some part of it that feels it it feels like i'm being lied to and i feel like i have to simply go against the grain completely just because i don't believe people you know what i mean like how many times have you been in a meeting and someone states like oh this thing does this and you're like no it doesn't it does not whatever you're like oh dude we've had people be like oh jason json's cheap and you're like no it's not json is like half of what your server does it's not it's amazing uh for node which is harder to have long-running services yeah you know that it's very funny you say those kind of things because what that says to me is that note is fundamentally sucky if it's hard to have a long-running service it's not node's fault it's javascript javascript it's just so easy to make mistakes it's so easy to do the wrong thing in i'm not convinced it is fantastic i just simply am not i'm just i'm convinced i don't like that statement you should you should you should be able to write a program that lives for a long time i don't know it's just strange to me anyways i'm just very uh i will always be very very uh contrarian even potentially contrarian to a fault just because i want to go against the grain i don't believe when people say things are fantastic because i've never seen something be fantastic so this article is awesome it just shows that there is more nuance to that conversation it's not as cheap or as free as people make it but if you don't have the team or the experience sometimes it's worth having a fake engineer who's worth four hundred thousand dollars a year on your team because it takes care of everything for you you know what i mean the name is the primagen