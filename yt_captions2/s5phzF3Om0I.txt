coding is a lot like being a chef having all the highest quality ingredients doesn't matter if you don't know the right sequence and timing to create your delicious masterpiece and unfortunately coding has a lot more ingredients than even the most complex measuring star recipe which means that unless you know exactly what you're doing you're a lot more likely to make your computer explode than to make a functioning program but fear not because i have analyzed the coding habits of the most successful programmers in this world and i've distilled this information into five powerful coding hacks and chances are if you're still not able to write code fluently it's probably because you're not doing at least one of these things and luckily most of these are not actually hard you just have to sort of get it in a way and the most powerful one of all of these that i discovered literally only requires you do master using one button on your computer okay so here's how this is gonna work for each of these hacks i'm gonna tell you the story of two programmers first we have thomas a struggling average hello world programmer who's still coding like a complete noob and then we have a hal the hacker a nerd tinkerer who builds multi-millionaire apps during the day and hacks into the chinese intelligence system during the night so needless to say that to do all of these things he has to not only know how to code but to do so efficiently which brings us directly into powerful coding hack number one the thing is in 2023 manual coding is kinda dead but thomas has still not realized it he still thinks that he has to write every single line of code by hand and he might as well literally be using microsoft word to code because of how little he's actually utilizing the different tools we have available to us as programmers it's as if he's trying to make a stake by first building a farm and raising cows himself for years before finally only butchering them and actually then frying them into an actual steak rather than literally just going to the supermarket and buying some steak this leads him to be so inefficient with coding that is no wonder that it takes in two weeks to build a simple to-do app that uses nothing but basic html css and javascript how the hacker laughs at people like thomas he's mastered his code editor of choice and optimizes workflow to efficiently take advantage of advanced features such as automatic code refactory version control integration and automatic code completion using tools like github co-pilot and charge dbt which is basically automated almost all manual code generation at this point which allows him to focus on higher level things like architectural design questions and things like this which allows him to literally get exponential results compared to hello world programmer dumbasses like thomas who still stuck writing boilerplate html by hand what a and this thomas guy is definitely not like me from the past or anything like that like i've definitely never done any of these things yeah that's a lie but that's not even the worst thing that he's doing sadly which brings us to hack number two so thomas our hello world programmer often finds himself getting stuck wondering why his code isn't working he lacks a clear understanding of what's actually happening inside of his program which leads him to not progress as a programmer on the other hand how the hacker is a master of efficiency that's because he's discovered a secret weapon that provides invaluable insights helping him to identify bugs and trace his coach execution every step of the way now can you guess what how the hacker's secret weapon is a technique that's so simple yet most beginners completely ignore it is the humble print statement so how the hacker strategy is is that he uses print statements at every stage of his program to understand all the values of his variable and to see which if blocks are running and things like this which allows him to actually find these bugs and these errors much much faster and that is how you iteratively find someone to these errors whereas thomas does get stuck staring at massive error codes without even having any idea where to start but let's be honest all of these strategies only really work if you actually manage to apply them in a way that's going to get you a job in the real world as a software engineer and i know from personal experiences that a lot of times and one of the most helpful things can be having access to actual one-on-one mentorship and support to build your career which is exactly what you can find with today's sponsor springboard springboard is an online learning and career platform that provides a comprehensive curriculum covering everything you need to go from zero to software engineer as far as possible the award-winning curriculum is 100 online part-time and project based it contains 800 hours of content developed by cold steel and most importantly for me personally it includes one-on-one mentorship and career coaching but a completely unmatched job guarantee where basically if you don't get a job within a certain amount of time they're basically just refund you all of the tuition is pretty crazy so if you are looking to take control of your career and build a highly marketable and valuable skill set to your resume you can go to this link right here and use the code through a mask case that's t-u-o-m-a-s-k for a full thousand dollars of the course thank you for springboard for sponsoring the video and now let's move on to the next strategy and this brings us to probably thomas's biggest mistake he has completely the wrong strategy when it comes to learning the code look i get it coding can be hard and it can take a lot of time to work through and understand what a large code base is doing and this is where thomas struggles probably the most whenever he needs to build something even slightly more complex he gets stuck in the details and he doesn't really even know where to start but how the hacker doesn't have this issue because he has discovered hack number three which is the power of diagrams here's what i mean by this every time hal starts up a new project he doesn't dive into the code straight away he first takes up literally like a whiteboard or even just like pen and paper to sketch out the high level architecture of his application he thinks about things like what is the most logical place to start do i need a server which database system should i use this applies even if you is learning a framework like django uses first seek to understand the flow the general flow of how django works because when you do that django goes from just being this obscure collection of folders into an actual a logical flow that makes sense and the way you understand that in the best way is literally just to draw up a diagram and like try to understanding at high level before you go down into the details this is what how the hacker does every time he learns something new whereas thomas which is still definitely not like what i used to do he just dives into the code straight away without even understanding what he's doing which leads to a lot of problems down the line oh but i don't know how these different technologies work i don't know which one i should use i don't know how apis work well no you don't know it if you've never learned it before that is why as a programmer your most important skill is being resourceful having the ability to literally go on google and look these things up to try to understand them yourself in a way that makes sense for you okay got it so in the next app i'm going to use react in the front end and i'm gonna connect it to firestore then i'm going to connect it to craft ul and aws and the google cloud and netlify that's exactly the next mistake that you're making which brings us to hack number four let's take a step back and look at the coding as like being a chef to make a great meal you do need a lot of different ingredients yes trying to make an impressive coding project from just index.html and app.js is like being the chef at the dinner party and only serving a plain potato an entire meal but this doesn't mean that the more ingredients you add the better the meal is going to be that literally just leads to your programs becoming like over processed calorie-filled pieces of junk the key in being a great chef is choosing the right ingredients for the job not more and not less in the same way if you're trying to just make a simple e-commerce project there's no reason to start over processing it with things like docker and kubernetes and like all these fancy new technology when you don't actually need to have them okay so i think i'm just gonna stick to basic html and css and javascript then so the hacks that we've discussed so far are incredibly important but they pale in comparison to this last trick that we are now about to talk about and literally if all you do is this one thing that i'm about to tell you you will make progress like it sounds so stupidly simple but most people mess this up the problem that thomas has is that he's too afraid to run his code he's scared of error code yeah i know they can look scary right but guess what your computer is not gonna explode if you make an error code well unless you're writing c don't write c write python the way you actually learn anything is by literally just making a mistakes because whenever you make a mistake there's some lesson in there if you're riding a bike and you fall there's probably something that you learn about how you were writing it that you shouldn't be doing anymore same way with programming when you make an error and you read the error code and you finally after two hours you understand it of that you know how to not make that mistake the next time to do literally just learn the code so much faster you need to be be pressing enter more times than you are now let me explain the rate at which you just press enter to run your code as many times as possible is literally the rate at which you're gonna learn because it's gonna be the rate at which you make mistakes that you then learn from this is how i actually code when i'm coding program i will put something together and rather than just like looking at every lines like make sure like oh this is definitely correct i just run the code and then i know pretty much for a fact that there's going to be some error code a lot of the time is something stupidly simple like i forgot to change some type of some variable but i'd rather just run the code and then see what the error was and then just go fix it rather than try to obsess over every line before i run my code the key to doing all of this is consistency if you cannot get yourself to sit down and implement these hacks every day nothing will happen and many people struggle with this but in my own journey i actually figured out a very simple system to fix this problem of consistency and ever since i started using it i just got the ability to suddenly consistently code every single day even when i don't want to so if you actually want to make this hacks successful you also need to master the skill of consistency so to learn that go watch this video next