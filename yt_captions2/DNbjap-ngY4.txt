new in python 3.12 we have the unpack type which is used to give keyword arguments a much more specific signature and in general this is used with the typed dictionary so to demonstrate how it works i created a class called item which inherits from the type dictionary and then i created three attributes one being a name of type string a weight of type float and a cost of type float and that's going to be used to give our keyword arguments some sort of signature so now we can create something called info which is going to be a function and inside here we're going to add some keyword arguments and that's going to be of type unpack and here we need to pass in the type that we want to unpack such as an item and all this does is give our keyword arguments this signature here and this function will return none then just to see how it works we're going to print these keyword arguments now i'm going to create my normal if name is equal to main check and inside here i'm going to call this function with the keyword arguments so right now according to what we wrote here we must respect this signature we must include a name a weight and a cost so if we do anything that's not related such as i don't know let's type in banana equals 1 and then we open up the terminal and run my pi so we say my pi main.py we're going to get an error first that this is an experimental feature so i actually need to copy all of this and add it to the end but first we'll get that there's an unexpected argument banana for info so what we're going to do is just get rid of that and follow the signature that we have name is going to equal banana and the weight is going to equal let's say 2 or 3 kilg it's a heavy banana and i'm not going to finish it because i still want to show you what happens if we exclude one so let's go back to our terminal run my piie in experimental mode and we're still going to get that we're missing the named argument cost for our info function so it really wants us to adhere to this type so now we're going to add the cost which is going to be euro1 because it's a heavy banana and this time if we run mypi everything's going to work perfectly we followed the signature of the keyword arguments but there is something else i want to show you because there might be a positional argument that shadows one of the names from your typed dictionary and i'm going to show you what happens if we were to do that maybe your info function has a name but also the keyword arguments has the name so when you refer to name which one is it going to use well we can just run it and find out and what you will see is that name was absorbed by the positional argument so we didn't get to use all the keyword arguments and you might be thinking why don't we just insert banana or whatever name in front of it now this will take the positional argument and this will take the keyword arguments unfortunately that doesn't work it gets multiple values for the argument of name so in the docs i'm just bringing this up because you might run into this it specifies that if you want to use the same name you're going to have to use a slash to force this to be a positional argument and i'm going to change this to something else such as test one now if we run this it will run perfectly fine and i should show you also that we can use that name so we'll type in name here and i'll add a separator of a colon and a space so now if we run this we're going to get test one plus the dictionary that we get from the keyword arguments so just in case you have any names that clash between your data structure here and your positional arguments just remember to force it by using this slash now personally i have no idea when i would force keyword arguments to follow a certain signature rather than just having some sort of data class structure to pass in i personally don't know when i would use that but just because i don't use something doesn't mean other people don't so it's just good to know that we can now finally give proper type annotations with proper data structures to our keyword arguments if we need to but anyway that's actually all i wanted to cover in today's video do let me know in the comment section down below whether you think this mak sense in your project or whether you think it's a complete waste of time i would love to hear about that in the comment section down below but otherwise as always thanks for watching and i'll see you in the next video