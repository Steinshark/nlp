today we're going to be talking about type annotations in python because i see a lot of you are still confused about how they work what they do and what they're supposed to do so let's go over first how we can create a type annotation and what it does in practice if you have a variable or a class or anything in most languages you'd be able to explicitly say what type it is so for example if you have a variable and it's of type string you can do that using this type annotation you use a colon and then you type in stir and it will become or it will hint that it is a string and what does this do well it just explicitly tells the programmer that this is going to be a string so as you can see we have a variable of type string is equal to hello and in a lot of languages this is actually required for the code to compile but since python is a dynamically typed language this is only checked at runtime and that means that whatever value we put inside let's say variable it's going to check it at runtime so we don't need to actually define what kind of type it is it's going to infer that this is a number or an integer at this point and if we change that to a boolean such as true it's going to be smart enough to infer that that is a boolean so type hinting is not required in python to actually create a variable but what's really nice about type hinting is that it gives you extra context in your code editor so right now we have title lower split and all of this good stuff and one nice place that this can be very useful is if you have a function such as this one here that doesn't say anything useful but it takes some text and with this let's pretend we want to process this text so if we type in processed text of type string and we say text we will not get any context options because python has no idea what this input variable is we did not give it any type annotations so it cannot guess what we're putting there we can still use string methods here we can say you know text.split and that will work fine this is a valid python method but we will not get this help from the editor so this is one of the most useful places to use it is inside the function parameters because now if we say that it's of type string and we type in dot it's going to give us all the methods associated with that data type and that goes for classes and every other data type as well we know exactly which methods come with it but what if you have a variable that can be multiple data types well we have something that's called a union operator so suppose that text can be either a string or a list you can use this union operator to define that it is either a string or a list so now we're going to get context options for both the string and the list which might and not be useful depending on what you're trying to do now there are a few misconceptions with type annotations one is that it provides type safety but check out this line of code right here where i say text is of type integer and we say hello as soon as we print text a lot of people would expect this to raise an exception but if you run it python couldn't care less about what type you provide here you can provide any type for any variable and python is going to ignore it it's literally something that helps the programmer understand the code better and on top of that the code editor gets some context so it can tell you hey silly programmer you were supposed to put an integer here and not a string so it does give us some syntax highlighting which can be very useful and i use this a lot because sometimes i call methods on variables and i might not always understand what i'm getting back so to make sure you're getting back what you think you're getting back it's good to have type annotations so here we're going to change that back to string so we can get rid of that syntax highlighting and we can have the correct type here the second biggest misconception is that this will speed up your program because we're explicitly telling the text what type it is i'm not going to go into the details regarding that but that's not how it works again this is just a clue for the code editor and yourself that this should be a string or if you have a class that this should be of that type so when should we use type annotations and my recommendation is for one to always use them where you can benefit off that extra context such as in functions when you're providing arguments that extra context is crucial if you're working in pycharm or other code editors but if you have some crazy programmer who only uses notepad on windows to program type annotations might just make your code more complicated but there are some situations i myself find quite confusing on whether i should use type annotations or not and for this example i'm going to create a class of type fruits and then we're going to create an instance of fruit so in general i would type in something such as banana of type fruit is equal to a new fruit but i debate this with myself quite a lot because it kind of looks ridiculous like java right here we can easily take away fruits and we'll still know that it's of type fruit because fruit is so close to banana so i always debate whether i should do this i'm a big fan when it comes to type annotations i will type in text of type string if i have to and that'll be text then i can say number of type integer will be 10 and i will do that i personally love doing this because i will always get that extra context when i refer to number or when i refer to text i always will get the correct context and when you also call a method such as let's say text dot split i will also get some information back on whether i'm getting the right type back and this saves me a lot of trouble with debugging i generally get a lot of successful runs and not many errors because i'm always able to catch them ahead of time so to actually make this work we can type in let's say empty space dot join so now this is a string again and this line of code might be completely useful but i hope you get the idea that when you try to call a method on a variable or whatever you're ensuring that you're getting the correct type back because sometimes you might do something silly such as you know create something such as what is the length of text and the code editor will say hey you got an integer back but you were expecting a string weren't you and we'll say yeah we were expecting a string so we'll do something else like okay let's convert this to string so we would know exactly what we're doing we're being super explicit towards what we want and that in the long run should save us a lot of trouble because we get the correct context plus we know that text is string and that we're getting a string back but at the end of the day i highly advise that you do use it and it's up to you which scenarios you use it in for functions i think it's indispensable i would always recommend it for function arguments or for class arguments or for whatever could use that extra context in some situations when you're importing packages it might not be so straightforward because they give you different types but it's always good to know which type you're getting back because that will really solidify your understanding of your code which means you will be able to run your code more successfully with less errors but i'm very curious to hear what you guys think about banana in the comment section down below if you're a fan of type annotations would you say it's a type fruit or would you just say it's equal to fruit i'm always split about which approach to take because i love type annotations but both of them are acceptable and none of them really hurt readability if anything maybe this does hurt readability a bit because it's a redundant line of code but it's still being quite explicit so i think i'm leaning more towards not having that when it comes to something so obvious but it still feels weird because i'm so used to adding type annotations everywhere but anyways that's actually all i wanted to cover in today's lesson so as always thanks for watching and i'll see you in the next video