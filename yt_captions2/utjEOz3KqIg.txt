hi friends guess what we're going to be building today we are going to be building a reality and this isn't just any react app we are going to be doing this throughout a series starting out with the very basics of react talking about typescript why we use hooks and just building a really strong foundation by the end of this course by the end of these tutorials you will have this really interesting project that you can put in your portfolio have a piece that you can talk about to future employers and just have extra skills to build your own react app so what exactly are we building well today in this tutorial we are going to be building the start of a react to duet now this seems kind of small but hear me out we need to start with a very good foundation very strong foundation and work up from there so in this video it will be building react to do app but this whole application we are building we're going to be doing it together i'm going to be putting it on github so you can pull the code modify it make some changes to it and i will ensure to check out your changes and then we will be building this collaboratively the goal for this app though is to build a productivity app so essentially what it will be is a bunch of different tabs one will be the to-do list the other will be a pomodoro app the other will be uh what else we're going to build to-do list pomodoro app i guess leave your suggestions down below essentially i want this to be an application that has a bunch of different productivity tools all encompassed into one app okay let's just jump right into it [music] but before we get into the code we really need to talk about what is typescript and what exactly are hooks and why do we use them when you think of typescript what really helped me get my head around it at first is thinking of it such as javascript with additional features it can help build and manage javascript projects it's a superset of typed javascript which really means that all valid javascript code is also valid typescript code okay but why exactly is typescript useful here are some advantages to using typescript strict typing everything stays as to what we define it you need a variable to always be a string it will always be a string that type annotations this is a helpful way of explicitly defining what type should be used and readability thanks to strict typing you can see more into the intent of the developers who originally wrote the code this becomes especially helpful for larger projects and teams having code that can speak for itself okay then why do we use hux react has been around now for a while and hooks were recently introduced well actually back in 2019 so a few years ago but why are they so popular and why do we use them now hooks allow you to essentially hook into the state and use other react features without having to write a class there are several different hooks available to use and we'll use some of them in our application some of the popular ones include you state which helps pass in the state variables in a functional component use effect which comes into play for any side effect that needs to be performed after updating the dom it can take two arguments a function and an optional array and use context which helps build a context api it is used to share data without having to pass props before hooks came along we would have to use classes for react components in order to use state and other react features hoax provide a more flexible and simpler way to do this okay let's get into coding now okay you can see up here i have my terminal oh i just realized it is in light mode am i going to get in trouble for that i feel like some of you might come after me for this okay but in all serious now let's cd into the folder that we want to make this application in i am going to do it in my desktop which unfortunately i feel like i do everything in in turn is just a disaster but that's okay from desktop you either can use mpm or yarn for this tutorial i will be using npm mpx create react app and then the name of our app which in this case is starting as a to-do app but it's really going to expand so let's just call it what should we call it react project it's kind of boring let's just call it react project because who knows the possibilities of where we will take this project as we are making it open source are limitless [music] okay from here let's cd into our project which as i mentioned is react oops react project and let's go npm start which will start our server and as you can see we have it up and running okay let's now open vs code so i'm actually going to give me a sec here i'm actually going to stop the server and open up the terminal in vs code so back here i have my react project open and i will go to terminal new terminal [applause] okay next up let's go into source into app.js where they have some code they gave us to start with however right now we are going to get rid of everything between the two div tags so let's just take this and let's just put some kind of placeholder text for now this is where our to-do list will go okay the first thing we want to create for this app is let's start simple let's start with a title or header for that we are going to create a new file in source so right click go new file and let's call this let's call this file title make sure it's not all on capitals and then from here make sure the first thing is that you actually import react from react and let's start title equals start by just making a simple function and returning the each one which will be called what should we call this um never ending to-do list and then make sure as always to export the component or the function that we just created export default title okay now let's go to localhost where our server is running and you can see we have here this is where our to-do list will go but it should actually there we go and the reason we are seeing this text is because we are reading from app.js not title js so we need to then utilize our title js file so back in app.js let's import title from title and we don't need this logo anymore so i'm actually going to delete it and then replace this text with our title component and then when you are using components uh like this you just need to it's a self-closing tag which is really nice as well so now let's go back to our reacta and we can see we have the never ending to-do list okay next up we need to have some mock data to test this application with before we start making our own so we are going to make a json file under source as well and let's call this mock to do's dot json and inside of here it's going to be a simple json file that includes the task that we are working on if it's complete or not and a unique id okay i'm going to take this object here and make a few more now let's format it by going option shift f you know you have commands that you do on the keyboard and they're just so second nature you actually kind of forget what they are and your hand just doesn't that was one of them okay so let's just update a few more of these here [music] okay then back in app.js let's import this mock to do so import [music] there we go and you can see here i put to do such as giving the data a name the next thing we are going to do still inside app.js is we are going to read the to-do's from the mock to use json and to do that we need to use state and before we do anything make sure at the top of this file we have we are importing this state so import react and also use state from react and we are going to make two constants one is going to be the actual uh to do to do's to-do list and the other one is going to be the we are going to set the to-do's all right let's just call it to do i like to do this is not and that will equal to use state and to do and what we need to do next is create a file and create a component called let's name it to-do list which will contain or hold all of our to-do's so still under source go new file and let's create this to to uh to-do list dot js and we don't really need to do anything in this file right now i just really want to create it to start with and then back in app.js we are going to underneath title do to-do list and that will be equal to that will contain the to do which is the to-do's okay i feel like this needs to be to-do list there we go and let's also we have to make sure to import this new component to-do list perfect now if we go back into our to-do list component we actually need to map over the to-do list object that we are passing in or in our case calling it to do's let's go to to-do list.js and create this component [music] and then we are going to pass in the to-do's which are right here pass in this object but we also need to create a component that is just a singular to do ah as we are going to be mapping over all of the to do's and we need something to display just the individual ones i feel like i i could get what is that saying i could get a dollar for every time i say to do i'd be rich to do so for that let's start creating another component and file to do dot js for now we're going to leave it just as is and import it back in the to-do list so import to do from [music] before we carry on as always what am i missing export make sure to export or else there'll be a headache coming in your future okay now here we are going to map over the to do's object and here we are going to return the individual to do okay let's format this there we go [music] now if we go into the singular to do the purpose of this is so we can have the purpose of this is when we are mapping over the singular to do we can also add the strikethrough or add specific styling to it individually so import react from react i know some of these things seem repetitive but it's one of those things that the more you practice it such as importing react or exporting your component the less issues you will have in the future as it will stick in your head and then for here we are going to pass in the object to do and then access this object to do dot what is art to do let's go back here to do to do dot to do might not be the best aiming convention but here we are okay let's go back to our application and see what we have going on here okay so as you can see in our terminal we do have some warnings and if i actually go to our local host 3000 you can see if we go to console here that there is some errors cannot be properties of undefined reading map the best thing is though it goes into a lot of depth you know it's just like i think the red sometimes scares people when they think of bugs but look it says to-do list to-do list on line six and if you go here as well uh to-do list okay so let's go to-do-list is never assigned a value it's assigned a value but never used okay so what's going on app.js let's find your bugs here oh i see do you know what's going on is i'm labeling it to do's and it's here to do list there we go this should clear up cleared up a bit of them as you can see set to do is assigned to value but never used i think that should be okay for right now okay we're also if we go back you can see we're having some troubles with map being undefined so let's go to to-do list here and it is saying to do's is undefined let's just log it out to start with and see why that is so it's coming in and undefined oh you know why it is it's because [music] okay we are back and the reason it was throwing to do's is undefined is because there is no to-do's see this is the reality even if you have been coding for five years ten years the littlest things will still get you sometimes and you just have to kind of find the humor in it so as you can see we are still getting a warning about set to do coming from the app component here that is fine don't worry we will take care of that later on here but for now let's close this and we can see we have our list showing up so that is a success that's a big win next up now that we have our to-do list let's make a way let's add some styling that wanted to do is actually done if you remember back to our mock data we made where it's a boolean so either set to true or false when it is set to true it's complete the styling on this uh to do will change and here we will do a ternary expression so saying if something is true show something if not show something else so in this case if to do dot what is it let's go back to it done you have to do dot done is uh if the to-do dot done is true then we will do a color should be red we'll make it red otherwise don't do anything okay so then if we go into our index.css here you can see we have some code already but right now we're just going to take it out we don't need anything that exists and we are going to make a new class here let's call this uh complete and what this will do is simply the color will change to let's do crimson a nice red and now i actually change this to complete because this is the class name and as you can see learn react.js is now crimson or red based on on this mock to do uh learn react.js done is true okay we're getting there we are getting here now rather than relying on this static data mock data that tells us if a task is done or not let's make a function that toggles based on if it is that let's make a function that we can control if it is done or not and this is pretty simple to do and for this we will need to go back to app.js as that is where all the state resides so in here we will do const toggle and that will be set to the unique id that we made for each of this data and in here we can use let items equal we're going to map over the to-do list and then for each to do we will return the do dot id and if it is equal to the id we selected we're passing in sorry then we will use the spread operator [music] okay i'm getting an error here unexpected token okay let's go back here and see what we did let's just finish this set to-do list [music] okay there we go this should be good to go oh one more error set to-do list is not defined that's okay we will define it that's because i call it set to do up here so let's just change that to set to do okay now what we need to do is uh there was a little pause in the video because the camera actually overheated so it's getting intense here we're getting serious we have to actually use or call the we have to use the toggle function so we are going to be passing this into the to-do list of course and for that back in to-do list let's go toggle equals toggle and we also need to handle that in the actual to-do list so if we go here and we go into the to do we need to pass in so it knows about the handle toggle as well so toggle toggle and then in the to do so we have it passed into the to-do list as you can see we're passing it down to to-do list and from to-do list we're passing it down to to-do and then to do we actually need to handle the click so here let's go above return and handle this click so the event [music] and we need to pass in as well the toggle toggle dot passing the event and current target dot id now let's see i feel like i'm getting some errors but what's new and then for this handle click we will need to do in the return and on click that will be equal to the handle click we also haven't yet done the id which we need to pass in so the id is equal to b to do dot id so now you can see we can toggle if it is done or not okay we're ending this video very casually because there's a lot of construction going on inside my house but uh thank you for following along for this react tutorial there is going to be more to come this is an open source project we're going to continue to build together uh so it's a very simple application that we built today but we are going to get more and more complex i just really want to start out with the foundation i will see you soon thanks everyone [music] you