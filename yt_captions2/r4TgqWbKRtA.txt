hello everybody and welcome back so in this video i'm gonna be sharing with you my tips tricks and advice to getting better at solving problems now my opinion problem-solving is one of the most important skills that you can have especially as a programmer the ability to look at a complex topic question problem whatever it may be and break that down into smaller components that you then solved is something that's really important and in fact a lot of people know this look at the big tech companies like amazon facebook google the number one thing that they evaluate you on when they bring you in for a technical coding interview is your ability to problem solve i can speak firsthand that during my coding interviews there was some situations where i didn't even have to write much code because by the time i had got done solving the problem on the board talking about my solution and kind of walking through how i was about to code it the interview was already satisfied that you know i had come up with the solution they had seen me code previously and they're like hey you know what don't worry about it you can skip this section you don't even need to code that out so as much as it is very important to know your tools and know the language that's what they really are a programming language in my mind is a tool and you need to be good at problem-solving to be able to use that tool effectively to solve problems right and that's what in my opinion makes a good programmer someone who knows their language knows their tools well and can apply them into a problem that they've never seen before so in this video what i'm gonna do is pop a question on the screen and i'm going to show you my thought process and strategy to break this down this is hopefully going to show you how you can approach problems you've never seen before and immediately make them a lot easier for yourself alright so with that being said let's go ahead and get into the question and talk about how you can get better at solving problems [music] all right so we'll get to the question in just a second but i want to show you the platform that i'm taking this question from and what my personal recommendation is for people that are looking to get better at coding interviews are problem-solving in general so the platform on right now is called algo expert there's a link to it in the description as well as a discount code if you want to purchase this this is a premium paid platform but there's a reason for that this is really high quality and it is a great platform this is really what i used to prepare for my coding interviews and it made a world of a difference so essentially this is algo expert as a hundred coding questions on it they're all ranked by difficulty and category so you can see whatever ones you want here but the thing that really makes this stand out is not the questions you can pretty much find these anywhere it's the interface that you get to use so it's just way easier to actually write and test code because you have the question on the side here you have a bunch of hints if you get stuck you have their solutions if you need to look at them these are way better than leet code sleeve solutions in my opinion you have a full video explanation you can look at a bunch of different test cases and tests and all this stuff to see what's happening and it just it's a really encompassing interface that makes it way easier to actually get down and start practicing questions so anyways if you want to purchase this platform i do have the discount code i believe it's tech with tim that should give you 15% off link is in the description anyways the question we're doing is river sizes so i'll read the question out and actually we'll zoom in quite a bit here and then i'm gonna go to my what is it whiteboard on my computer and actually start solving this for you so it says you're given a two-dimensional array a matrix of potentially unequal height and width containing only zeros and once each zero represents land at and each one represents a part of a river a river consists of any number of ones that are either horizontally or vertically adjacent but not diagonally the number of adjacent ones forming a river determines its size write a function that returns an array of the sizes of all rivers represented in the input matrix the sizes do not need to be in any particular order so this is the example and essentially what it's asking us to do is find all of the connecting ones or the number of rivers inside of this matrix so that is somewhat of a difficult problem and i'm going to show you how we break this down on the whiteboard before we even start coding and go about actually solving this problem so let's head over to the whiteboard and we'll get into the solution so the first step whenever you're looking at a problem like this is to make sure you actually understand what the problem is asking so you want to understand what the input is what the output is and we are actually being asked to do you don't want to go wrong right at the beginning because you make an assumption or you do something that's not actually a part of the problem a lot of times people will read through a problem quickly and it'll sound like a problem that they've done before so they'll just start coding it based off memory but then they realize halfway through that hey that's actually not what they're being asked and now they've made a huge mistake and they've wasted so much time so you really want to make sure that you have a thorough understanding of what's being asked before you move forward so what i like to do is just state a few observations and kind of redefine the problem in my own words before i move forward so what i believe is being asked is to find the length of all of the rivers that are present in an array or in this matrix so that's the problem we want to find the lengths of all of the rivers that are present so that would mean to me if there was four rivers than i would have four lengths that i would be returning in some kind of array so the input is a matrix i'm returning the length of the rivers okay great so we've defined the problem i think we have an understanding of what it is we need to do this is a simpler problem but you know you get the idea that's a really important first step okay so we want to return the length of all of the rivers so how do we determine the length of a river and in fact what is a river let's make sure we understand that before we move any for any further we want to really make sure that every single thing there we can define in our own terms and that it makes complete sense so let's have a look at this question again and let's look at what says a river is because we need to know what a river is to be able to do this a river consists of any number of ones that are either horizontally or vertically adjacent okay good so that means that this would be a river so i can't highlight it but this one here this one here so there's all these rivers in here that seems just to be vertical here but i guess they could be horizontal as well so that's something we're going to want to make sure we understand what is a river is the one up here i don't know if you can see my mouse connected dying - those ones want to make sure we get that so let me now go ahead and draw a few examples and see if these will be rivers see if i could determine myself if this would be a river so i'm gonna do a little example i'll actually do it on this side of the screen here i won't do too many numbers but let's just do zero zero zero i'll just do like a three by here one one one one zero one zero zero zero okay so this is my example and this kind of moves us into step two so i understand the question i'm kind of trying to figure out what a river is now so my initial instinct is to start drawing because in my opinion you know i need to explain to my interviewer or to myself or to anyone for that matter what it is i'm doing and i can do that better when i'm drawing something out on the board i can make some illustrations you know even if they're rough which all of my stuff is still helps quite a bit so the question i want to ask myself now is well what is a river here is this two rivers or is this one river do we include these two bottom ones in the river so that's a good question so that might involve me having to ask the interviewer to go back and read again now i know that this whole thing would be considered a river because it says that they're horizontally or vertically adjacent then that's a river and since all of these are connected together that's one river i guess it's just too wide at this point right because we didn't have any diagonals up here because if i added the diagonal you know we wouldn't do that but oh wait that would even still be a river because i could connect all of them vertically and horizontally adjacent so that's what i start doing i start playing around with a few examples seeing if there's any examples that i can think of off the top of my head that maybe i'm not clear on right away and make sure i clear that up so that when i start doing this algorithm i really understand that and sometimes you won't see these kind of edge cases until you start going through the algorithm but it's important to try to think about them and say okay what could mess me up here i understand what a river is okay good i understand the problem let's draw it out let's make ourself an example that we haven't seen and see if our understanding holds on that new example that's a really important thing make your own examples because the example they give you can sometimes be a little bit of a trick and they almost want you to draw it out yourself great so we have the example up here we kind of understand what a river now and i'm gonna say it's now the time that i'm gonna start thinking about how i'm actually to solve this so we know that rivers are represented by once we know zeros aren't here so the first thing that i'm probably gonna have to do if i'm solving this problem is well this couldn't be this might not be the first thing but look through all of the elements in this matrix right so say 2d matrix right so these are technically arrays like this or lists or whatever you want to call them so my first step is gonna be to start looking through all of these different elements so i'm gonna say one look through oops elements now excuse my handwriting it's quite messy with this drawing table but hopefully this at least gives you an idea so look through elements so what i mean by that is go one by one and start you know searching through all these elements looking for something specific so in fact what am i looking for well i want to find the length of all of the rivers so i need to find the start of a river and then see how long that river goes for right so the first thing i'm actually gonna be looking for i guess we could say maybe not a sub point maybe let's put part to check if element is one if the element is one that means that i've hit the start the middle some point of a river and well i should probably do something with that right if i hit the start of river so that's my thought process you guys might have a different idea but i'm thinking that i want to look for ones because that's the start of a river and something that i care about okay so i want to check if the element is a one what do i do if the elements a one what should i do if it's a one well i'm thinking if i find one what i should do is find all of the ones that would be in that river so find the river that contains that one because in that case then i can determine the length of that river i can add that river into something i can do something with it so i'm thinking that when i hit a one what i should do is start looking for all of the other ones that are in that river so i'll say three start looking for rest of river okay so rest of river like that okay so that's point three so i'm saying that once i hit a one now what i want to do ideally is find all these other ones so find the river that contains this one that's what i'm looking for nice all right so that's step three what do i do after that well once i find all of these ones what i probably want to do is store or determine the length of this river so i'm going to say determine length of river great so now i've found a one i found the river that contains it and i found the length of that river good we're moving towards what seems to be a solution here so what i'm gonna do now is i'm gonna store the length of that river i need to put it somewhere i need to print it out right so i'll say store five store lengths of river great okay so after we store the length of the river what should we do next well we could just go back up to step one and repeat the process so let's actually see if this works and this is what i'll do in interviews you know i don't know if i'm at the solution yet i just keep practicing and i keep going through and seeing if anything messes up so okay so currently we have look through all the elements so let's look through them blah blah blah look through all the elements go through all of them okay let's follow next step so look through them find a one i found a one nice check of element is one yes it's a one start looking for the rest of the river okay great so let's look for the rest of the river and let's find this so determine the length of the river that could be like the finishing step like we found all the ones now we sum them up and we determine that this is like five store the length of the river okay so i probably need an array or something to do that so i'm gonna store lengths of river like that five boom great okay we got that in there now what do i do next well let's go back up to the top let's look through all the elements i was at this element right when i stopped so now we go here hmm okay so i'm already starting to see that there might be an issue here i start looking for the rest of the river now cuz this elements a one determine the length of the river store the length of the river well if i did that then i would get another five because i would find this one here this this this i would find all those ones but i've already used them okay so this is a little bit of a breakthrough for me this is telling me that once i find all of these elements in the river what i probably need to do is store summer or save those or say hey we've already used this river so what i'm going to say is store the length of the river and six store positions maybe i'll store the positions of the ones that i've used so store positions of ones used so the ones that have already been a part of some of those rivers great so now at step two i'll check if element is one and we'll say not used so i know this is really messy i'm just trying to fit it in here but i'm just trying to say and we haven't used that one so now i've kind of came up with an algorithm that i think might make sense let's look through all the elements check if the element is one and we haven't used it yet then we'll start looking for the rest of the river if that's true if that's true we'll determine the length of the river will store the length of the river and we'll store the positions of the ones that we used and then finally at the end we can just return all the lengths of the rivers because we would have found them all when we reach that last element so there you go i've kind of successfully came up with an algorithm and a series of steps that i want to follow here so now all i need to do is think about the tools that i know in my programming language to accomplish this so look through all the elements hey that's gonna be a double for loop because it's a duck two dimensional matrix great we know it's not necessarily square that's something to keep in mind when we do that okay check if the element is one and it's not used well we're gonna see if the elephant's is equal to one and then we're gonna check in some set or some hash table whatever it is you may decide to use if the current position that we're on was used in in another river because we'll store that in a set or a hash table great part three start looking for the rest of the rib how am i gonna look for the rest of the rivers starting on a position well i'm probably gonna do that in a breadth-first way or a depth-first way that's a tool that i know in programming that's a fairly easy algorithm to implement a depth-first search to look for all the other ones that are potentially in this river great how am i going to determine the length of the river well every time i find a new one let's add one to it variable and we'll just keep track of how long the river is that we found storing the length of the river okay so once i've guess i found all of the elements that were in the river i need to store that length which would have been in a variable and i need to store the positions of all the ones that were used so maybe while i'm looking for all of these when i find a one that's attached to this one so a part of that river i just throw it into the set and say hey this has been used i've used that before then we reach the end of this you know i've just kind of even told you verbally how i would go about solving this and we have an array that's storing all the lengths of our rivers boom so we'd have five six whatever it is we can return that we've successfully complete completed the problem so i've taken this problem it might not have seemed that complex and i've just broken it down into the steps that i need to take and now i have kind of a rough idea of what i want to do and i'll take this and translate it into code in whatever languages that i'm gonna use so that is kind of my idea of doing this the process i followed again was define the problem make sure i really understand make some observation some things that i might notice about the problem things that you know i'm gonna have to consider for my solution and then what do i do i make sure i know all the definitions so i know what a river is i think about any edge cases i've drawn a diagram and thought of some examples that might break my current understanding once i really make sure i understand it i start breaking it down into really small steps that i can easily follow and try to come up with some kind of algorithm maybe my first version of the algorithms not correct i reach something that doesn't make sense to me so i go back and i modify it a little bit and i change the steps around now at the end of this problem i've thought of these steps they make sense to me and what i'll do is i'll take these steps and i'll translate them into code notice that i didn't really talk about any coding stuff here there wasn't anything with depth first search breadth first search i was just discussing in my mind how i would go about solving this problem the steps that would need to be taken if i was just doing this as a human for one example then i take that and i can convert that into an algorithm that i can apply for any example of course there's a lot more things you need to do than just this but i wanted to walk you through how i mentally break down and think about a problem and hopefully this gives you an idea of what you can start doing when you see a problem that you don't immediately know how to solve don't necessarily just think about the coding aspect think about logically what you need to do the steps that need to be accomplished and then solve them one at a time i think we can all agree that b sec six steps are easier to solve than just reading that problem at the beginning like it is right so again this video is really designed to just help give you an idea of how you go about solving problems the thought process that's involved and if you do really want to practice this kind of stuff i would highly recommend algo expert which again is the platform i took this question directly from and that i used to prepare for my coding interviews so i think with that i'm gonna wrap up the video here i know this was long but i really did want to try my best to give you guys all the knowledge i could in this area so with that being said i hope you enjoyed like the video if you did subscribe to the channel and i will see you in the next one