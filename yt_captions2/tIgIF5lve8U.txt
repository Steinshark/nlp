i just need a programmer i was contacted this week by an old acquaintance and he had a proposition for me i mean who doesn't have that one happen am i right hey i hear you are a programmer that's great because my buddy and i have an idea for a business if i hear this phrase again i swear i'm going to lose my [ __ ] i'm going to lose it i'm going to lose it completely we have everything important figured out all we need is a programmer to throw it together on the surface there isn't really anything unreasonable about the statement these guys know what they want for an application they just need the technical know how to implement it so quing my ur quelling my urge to say something flippant i penned a reasonable response what a nice fellow cuz i would have say ah it sounds like you just need a programmer you know what i think i'm looking at two programmers you and your buddy sound like you guys have an excellent opportunity to make your dreams come true block uh well i have some other projects i'm involved in right now but i'm always happy to take a look at something new and see if it's a good fit if you want to do this strictly cash for a labor exchange i would probably take x per hour to get me interested in spending time on it if on the other hand you don't have a startup capital and are interested in trading equity for this work i'd probably have to see at least x% cut of the company and this option would of course be predicated on whether i felt the business was viable when i'd be interested in being invested in okay yeah fair this is a great way it's the old oh yeah put your money where your mouth is business that's this is a great way this is a this is a great response by the way this is a great response i'm loving it because we'll see are they really invested do they really think they're going to make money here although i i really didn't expect him to be interested in meeting me at those terms i expect maybe a counter offer or indication that he was expecting y instead of x what i actually got was as a reply really or surprised me a little hey so we aren't really prepared to pay i mean there isn't that much to uh to it it's just a website with a database i was hoping you could throw it together as a favor oh well thanks anyways i'm trying to figure out how do i how do you respond to this without using four-letter curse words like how do you respond to this without being like really upset my brother in christ what you just asked me to do was to spend thousands of hours programming something for you as a favor please gently and with much caution and care [ __ ] off that's what i would do i thought about this for a minute and i realized that implicit in the conversation are several assumptions or perhaps more accurately conventionally perceived truths with regard to the craft of software development there isn't much to it software is really easy to write right now all i can see are all the memes with the guy that's a skeleton lying at the desk or the guy that's 26y old 26 one was like i really love making websites and it's like a picture of an old guy it's like marcus 26 years old we have everything important figured out in a business the actual software is just the icing on the cake yes yes yes by the way if anyone ever approaches you with this they look at software as a cost center not a profit center they're going to you know if you have this mentality you will always be anyone with this mentality is unfit to lead any sort of software all we need is a programmer software developers are c in a machine or interchangeable components of an assembly line yes so then uh my question is this are these common assumptions within the software industry or more importantly are they accurate assumption one software development is easy this is certainly an opinion i'm used to dealing with and i'm not sure most of you have exper and i'm sure most of you have experienced it as well i think this is common in people that have never really done anything on a computer they've just had people whip them up a wordpress site and it feels like it's pretty fast right oh yeah you just go like da da da da da and boom it's done they just don't realize that wordpress takes like literally it has 1 million man hours put into it they're just missing that entire section of things how many people in chat right now have had someone say something similar to this to them software development is easy like it's not a big deal it's not rocket science i feel like it's a bit soul crushing i'm not going to lie to you there's few things that piss me off more than when someone's like ah it's super easy it's just like it's simple yes easy no you know running a marathon is simple it really is there's like nothing to it put one foot in front of the other until you're done it's like left right left right i can say it in two words what you got to do left right done move forward doesn't mean it's easy it's hard it takes countless hours of training and at the end of the day you still might not be successful you still may [ __ ] your pants on mile 16 all right this isn't rocket science all we need is is a programmer that does insert complicated feature here unfortunately it's all too common to be under the illusion that software is about onet as tough to build as it actually is now we could say that's not unreasonable to assume because a non-technical user the user interface is the software so they can only perceive one t of the one tenth of the full application anyway okay fair and they they don't understand that underneath that user interface is react with 1900 use effects all built in to one component that's 400 lines long oh so you design websites yeah that is that's a good one based on the fact i wouldn't be illogical to conclude that it's no big deal to just add another button there at the bottom that completely changes the workflow of the application there is one misconception of the software industry that in my opinion can be 100% debuck software development is hard we have tools to mitigate that or to make it harder really i think we've made more tools to make it harder than easier there are good development methodologies that can keep us focused on what's important and good tools that can amplify our productivity but at the end of the day it's difficult to produce a good and simple software number two software is just fluff compared to business i think this one depends on the business it really just depends on the business some sometimes some businesses the business stuff is also really important relationships are really really hard you can't just make relationships there is another attitude i've encountered more than a few times and again the surface value of the argument seems reasonable after all software can be made to do anything within reason so it isn't really the software that we're selling it's the business concept it's the product or the service that's making us the money not the code now in a way that's very true great software that has no utility is perhaps not great software after all however it would be wrong to take that statement and turn it around to say that a great business idea will succeed regardless of the software that acts as its delivery medium whether you are a product or a service company the software is telling your story and your business will be judged on whether it is easy to use and doesn't break down the greatest business in the world would not be able to overcome a milestone of bad software around its neck this misconception is in my opinion false and getting falser this is a good way to put it and it also in some sense makes me sad a little bit because when someone builds a good piece of software for the time in which it was built and it becomes the deao standard sometimes it gets shitty but that's just what you have to use is falser a new buol type it is it's the third state it's it's it's booing plus direction i like i like this though i like this take uh in general programmers are interchangeable pluggable components full disclosure i'm a programmer and i invested interest in this not being true in some sense they are in some sense you are unless if you're specialized i hate to i hate to tell you this nevertheless i've experienced this opinion uh many times during various searches a company is experienced timeline problems and the obvious solution is to get five more programmers more manpower equal more progress okay i didn't take it that way more people does not mean problems get solved faster and now of course this is biased opinion but i don't think all programmers are created equal this is not that's not a biased opinion there is literally nothing biased about that opinion plenty of other bloggers have written on the subject of the rockstar programmer that mythical super productive hero who can carry a project on his back and i not entirely convinced that he exists that being said i i do think that the right people in software developer roles on a project can make a difference of at least an order of magnitude so you do believe in the 10xer i mean i there's definitely like 0.1 xers two women can make a baby in half the time it's true it's just like fortnite reviving the more people send a revive the faster they revive the more women on one baby makes a baby grow faster we're not special and generally replaceable but we're skilled and valuable that's a good way to put it ryan that's a good way to put it software engineers are replaceable like it depends on the specificity of what you do so like a good programmer that has a line themselves well i think is mostly concerned about internal tooling at a job like if you're just building out the ui you are more replaceable if you are building out the ui and developing ways for other people to become better at the job and developing tools and things like that you are more worthwhile to that company you have another skill set that's kind of showing personal opinion a good react dev could save his job by making 600 use effects in one file this is true kind of like when they made the map editor for the original doom yeah having your like internal tooling is extremely important if you ever want to become very valuable knowing internal tooling and being very good at it is an extremely valuable thing the ability to navigate many different teams is important obviously this depends on the size of your company if you're a two-man shop not very good right example okay at my current job we have an entire automation pipeline that spins off jenkins machines and all that we have device reservation things we have a service to run something to run test to be able to learn all of those put them into a something simple and to kind of bring understanding to it it makes you know makes sense a two-man shop can't make a baby pick you're on to something there i want i demand a hascal based white paper tomorrow on this what do you think has the software industry changed to the point where where the above assumptions can become more viable i obviously i think this is i think the thing is is that you can't expect people it's just like any other technical profession i can't understand why it takes x amount of time to fix my car i can't to me it seems simple it's like why isn't it done in a day it's cuz i simply don't understand the problem same with video editing why can't you edit videos faster why can't you do this why does that have to take this much time i just simply don't understand it you don't understand what it takes to do something and so i think this is this is just true in any arena the more internal specific knowledge you have the less replaceable you become that's right experience is what is not replaceable by the way like the current thing i'm doing at my job right now is trying to understand our entire testing pipeline and it's it's just been really really difficult and the thing is is that the last person who did it quit and moved on which means that we just have a huge gap in knowledge and it's just a great way to make you know it's a great way to make yourself valuable is to learn these things rewrite it i'm not going to rewrite it i hope not to reite write anything honestly i just hope to identify what's wrong with it and move on and that's because and what what did i do with all that well that's exactly why i created this this just gigantic ridiculous program to try to bring some order so i can come up with some piece of data to say hey here are some things wrong with what's going on right here okay i have 696 lines of code just to identify errors because we don't have structured logging so i'm going to not only say here's what's going on also we should create structured logging right like that's not crazy it's a really simple uh it's a really simple change that everybody can be on top of that everybody can be a part of and so you just you just slowly move the ball forward in these types of projects where you make meaningful changes it's fun i actually really really like it i actually really really like it because at the end of the day you get the chance to do something in which is really really difficult or really really boring depending on how you look at it and attitude totally changes your perception about the problem i'm loving it because i'm like all right no one's been successful here at this we obviously have problems a lot of really great technology and a lot of really great decisions have all been made but also some problems of just integration and what's going wrong and how to bring order to the chaos so i'm very excited about like let's bring order to something that hasn't done it instead of being like gosh all these people screwed up right like you can totally take it however you want to take it i think there's something just really amazing about being super positive and all that and just being like let's like let's get in there let's let's make something amazing that everybody loves cuz at the of the day what is really awesome what is more awesome than when you work at a company and an internal tool is just stellar just works it's easy to use it has a really great command line interface and it also has a nice website you know like really good internal tools are just awesome they're just awesome sex with a woman thank you for thank you red anthrax for the insightful and concise observation to kind of go along with with this discussion i work on internal tools with a sexy live view website see that's awesome that's super super good i want to improve our team tooling so bad but it's a hard topic to debate due to time constraints this is also a really hard one since we're kind of i know this this is about you know these things but honestly i think it's more interesting to talk about what makes you valuable like just real talk if you want to be perceived as valuable at your job if you want to be able to uh make sure that you have kind of longevity in your career take a moment and think what does everybody need here what are the things that this team this organization or these like connected organizations struggle with how can i write up a dock show what is wrong and propose a solution don't just say what's wrong don't blame anybody just simply come up with an idea but the thing is is that often the problem always looks like this is that you have to first say why whatever you're dealing with is wrong and you can't do something based off of feeling you know i really think using solid would be better than react like that ship is probably already sailed you're probably going to lose that fight you got to think of something a bit more useful being part of the solution instead of the problem is such a good and seemingly obvious advice yet so many people keep messing it up it's very it's very hard to do it right that's the hard part is it's extremely hard to do that correctly and what i mean by that is that it's very very easy as time goes on to become a bit more bitter look for customer complaint requests that can uh back up your proposal yeah that's actually a really good way to do it like anything that you can find that's tangible and so for me like i was showing earlier it's error rate what are we erroring and why like just combing through literally thousands of logs i found this one sometimes our node process crashes on eite pipe or e right e-pipe why i don't know but it's just something to understand that's like out there it's just out there and nobody has a category for it so it's like i'm going to bring a very comprehensive view into what is happening and then make a very very comprehensive proposal for what i think is a good short-term solution not a great long-term solution right cuz you don't always have to have long-term solutions long-term solutions can be part two part one is how do we fix the mess part two is how do we create a situation in which this mess can't exist or better yet how do we create a situation that addresses all of the messes and these aren't by the way none of those logs are prod those are all testing invironment long so this it's just internal machine machinery right if i know i'm valuable only devs that know anything about one of our backends the second most senior developer but the least paid how should i handle demanding a raise here's the deal if a company is underpaying you you know it and you believe you have some level of hey this is this is what is happening for me it's really hard to want to stay at that job because that means they don't value you they value your work only i would strongly suggest using your current experience as a way to leverage a good position elsewhere and i wouldn't even try for a competing offer i know people are saying competing offers are a good way competing offers are are a great way to show that you have more value but competing offers are also a great way for you to build a lot of angst and anxiety against you in such a way that yeah they'll be like oh yeah we really love you come on in they'll pay you more and then at the end of the day in six months you're going to get your ass fired because you just put a huge target on your back i don't often like using offers as a way to leverage more pay now you can try just going to your boss if you have a good if you have good relationship and just say hey i feel like i'm being really underpaid can you please review this for me cuz i i've been delivering all this value give your big checklist and be like and yet i feel like i'm not being paid adequately for this i want to stay here i really enjoy my job and i would like to continue to do great work for you guys and if that doesn't make them go oh yeah we've screwed up here i'm sorry you just got to go if you get a better offer take it never never take the counter i never take the counter i feel like the counter is very very dangerous right i mean it's good if you have a good relationship with your boss you should be able to say these things to him i i say things that are honest to my boss because i want i want a good relationship and having a good relationship requires danger and danger requires saying things that can be difficult you have to be okay with that you just have to be okay with that and but the nice part is that you can counter in other relationships and what i mean by that is that if you are going to a place and they offer you something that's not good enough you can most certainly counter them right because you're you're still establishing the baseline and so like when google offered me 10% less pay than i was getting paid at netflix i said no you need to improve it and they said no this is a starting point i want you to think about this as a starting point where you will jump ahead and i said i am thinking of it as a starting point 10% less than where i'm currently at that's how i'm looking at it no they said no i said no we called it a date it was easy i would measure your value at a company by how much ability you have to navigate through your company and how many things you've helped deliver that have brought value to other engineers right to me that's a huge thing because if you have if you have helped delivered brought order to just chaos it's always a great sign doesn't the netflix have 100% match policy if a company's yes so netflix encourages you to go out and interview so it's different so since the company has the culture to tell you to go out in interview that's different and i think that that that that makes it it makes a little bit it makes it safe trash de knows this i'm not worried about telling my boss about a counter because that's just what netflix will do they're like okay hey you proved your point sure i quit two weeks ago because of a great opportunity presented itself allowing me to move to a country of my dreams i had a wonderful relationship with my manager my hearth sank telling him oh man i hate when my hearth sinks uh now my my fireplace now looking back i know if i just asked for a raise i would have been a yes decision wasn't about money though i would say develop your relationship with that person you report to yeah you should try to develop that relationship because at the end of the day if you have a good relationship with your boss if things are if you're getting into some set of trouble your boss will go ah you know i really like i really like this person i'm going to work with them right they're going to be more desiring to work with you but if you're always kind of like just a dick in general guess what when something isn't going good guess who's not going to be like ah you know let's let's let's have a nice heart let's have a nice heart tohe heart and kind of talk through these problems you're not going to get that the name i've only fell i've i've only ever left one job over money i've only left i don't think i've i've only left one job over money as well a j