hey guys welcome back to another kibby tutorial so in today's video i'm actually gonna be going into something called the kv design language now i guess you could call it kibby as well but the file extension for it is dot kv and essentially you can kind of think of this almost as like a css because it's a design language which is meant to kind of simplify your code so that you don't have to have like if you remember in the last video we had like don't add widget' and then we were defining the widget and we were giving it like a text color and a font color so this is just a much easier way to be able to style elements so essentially what i'm gonna do is you can see here i've deleted all the code from the last video essentially other than the main stuff and i'm actually gonna recreate exactly what we did in the last video using the kivi design language to show you the contrast between the two and you guys can pick whether or not you'd like to design things directly from python without using this cavey language but it's super simple and it's not like a whole new programming language to learn it's literally like you'll see when i start doing it how easy it really is but essentially the reason we use that is to separate our style from our code and it's typically a good idea the way i kind of like to think of it is separating your html from your javis are from your javascript from your css if you guys ever did any web development stuff you'll probably see why i'm using that as a like to relate to it all right so essentially what we need to do is we need to create a style file right and this file is gonna have all of the the styling code in it for us what we need to do is we have to create a new file so if you're working a pi time you can just go new file otherwise just go new text file i'm sure you guys could probably figure out how to do that if not let me know and what you're gonna have to call this file if you're working with me and you named your main class that has the build method in it my app you're gonna go lower cases my dot kv now to explain why we do this in a second but if you're working with me and you named it the same you do my kv okay and save that file now if you didn't what you have to do is you have to name the kv file the same as this class name except if it ends in a p-- you have to remove the app so in this case we said my app so we just called it my and we moved the app now also note everything is in lower cases so everything you type in this file um sorry not in this file like whatever you name this file is always gonna be lower cases so even if my class name was my app like that with a capital my you would just name it lower case my dot kv okay and you're moving the app so to just show you a contrast here in case anyone's confused if i do like hello dot app i would name this file hello dot kv and hello would be in all lower cases now if i were to name this file let's just say like cls then i would just name my file cls dot k v again in all lower cases if i were to name it cls dot or cls app then again it would still be cls because if you end an app you don't use that in the name i know it's confusing why the heck would they do that don't ask me but that is how you do it if you're having any issues of that please let me know ok so now that we have that file i'm gonna show you how we can actually add widgets to our screen without doing anything in this python class actually there's one thing we have to do so the first thing i'm gonna do for sorry from python excuse me i need to give you ai x dot widget so we're gonna import that and then we're gonna import widget now the reason we're doing this is because our class has to inherit from widget just when we're gonna be using it inside this kb file so we just need to import this widget and then just make it inherit from widget as opposed to that grid layout that we had before so now we're gonna go into this kb file now this kb file is really nice and essentially the way it works is you can just type out exactly what you want in here to show up on on the screen so what we have to first do is we have to reference the class that we're gonna be using to well draw things to the screen so like if we had multiple windows week would reference different classes and you'll see the way that we do this so our class is called my grid right and this is what's gonna be returned from my app and it so it's building so so we need to reference first so what we'll do in here is we'll do a little tag and we'll say my grid now this defines that we're gonna be working with the my grid class ok you put in this little tag and everything in here works by indentation not brackets ok so just like python everything needs to be indented properly so we're gonna hit tab and i'm just gonna type something out and we'll talk about exactly what it's doing ok i'm gonna type label : tab again and then say text and we'll just say tech would tim okay now i'm gonna save this file ctrl s alright and let's just actually let's talk about exactly what i did here so my class name was my grid inherits from widget in here so we're gonna return to my grid right so we have this kb file we haven't done anything in the python file to reference this okay we just named it appropriately we named it my again because that's the way the naming convention works and we're gonna say here we're gonna put a label and it's gonna have the text tech with tip so let's just run this first and see what's happening i'll explain why after so you can see that we actually get tech with tim showing up in the bottom left hand corner of the screen so you might have expected it to be in the middle a talk about why that doesn't happen in a second but essentially you can see that we've added a label to our kibby file and we didn't like type anything to load this file in what actually happens is when you run gibby it automatically looks for this class it looks for this style file and the way it does that is because it looks at this class name i don't know kay i don't know what i just did there it looks at this class name right and then it tries to find a kivi file that is that goes with it so in this case my kb it finds that and then it can parse through this and add those widgets for us so let's just see how exactly this works just add a little label and then i had a text property tech with tim now the reason that it's like in the bottom left-hand corner is just because we have to kind of move it around which i'm gonna show you in the next video but let's actually start building what we had in the last video using this kb file so what we're gonna do to do this and i said i should go look at my other screen here quickly is we're gonna set up exactly what we did before um i'll just go through it and it's better as an example so i'm gonna make a grid layout okay and the grid layout is gonna have columns to write or actually we need to do columns one because we're gonna have multiple grid layouts okay so we're gonna have a grid layout and it's gonna have one column okay inside of this grid layout we're gonna have another grid layout so notice that because this other grid layout is going to be inside of this i have it indented in inline with this so that means that anything that kind of is like that's why the indentation works anything insides like indented pass is gonna be inside something so if i put this label here now it's gonna be inside this second gridlayout so i'll go through it'll make more sense once i can i get typing but essentially what i'm gonna do is i'm just gonna rebuild what i had before so label will say its name and i'm actually i'm just gonna do one loss this time just to save us some time and what else we had in grid layout we had a text input so let's put that and then what was a property of text input multi-line equals false right okay and then again inside a grid layout we have another label so let's do that and we'll say text equals i'm just gonna do email so last name this time we'll just ignore that and now we'll do text input equals multi-line oh what am i saying okay so actually i already made a mistake here equal signs i'm used to python they need to be colons just like you might have in css right so if you guys are putting equal signs it's not going to work you got to do colons okay okay so text input colon tab and then we'll say multi-line colon false like that i don't think it matters if you have a space or not afterwards i mean you guys can play with that okay so we have that now so we added that grid layout inside of the other grid layout so if you remember what else we had we also added a button so let's add this and the button had text : and we said submit like that okay so this is what we've done we've added a grid layout inside of or we've created a grid layout one-call we've added a grid layout that has label text input label text input the same as we did before inside of the other grid layout we already talked to a why that works and then we have a button that is inside at the main grid layout so let's run this and see what we get okay so we get this and this is actually exactly what we had before it just sits in the bottom corner of the screen right so you can count it you can see why this is how this is similar but why is it in the bottom corner of the screen and how do we get it to like move up and be part of the full screen so i'll show you this quickly and then i'm actually gonna probably end here and we'll go into more stuff in the next video but essentially the way that we get this to go into the like the amount of the big part of the screen is we have to define a few more properties so inside of our my grid here okay actually let's do inside of this grid there's a few more properties that we can use we can use like position we can use size we can do all this now the reason that this is happening in the bottom left-hand corner of the screen is because my grid currently is just a widget and a widget has a default size set by kibby so we need to override that size so that it goes to the whole size of the entire application so the way we do that you just say sighs : and then we're gonna say a root dot and we'll say it with and then root dot height now why does this work and how does this work well the root widget is gonna be my grid okay and my grid right is gonna be like the size of the entire application that's that's what it's gonna have so it already has those default properties width height whatnot right so when we do root out with and root dot height we're gonna get that root widgets width and height which is gonna be the entire window and we're gonna fill our grid layout in that window so we'll see that how this works in a second so i run this and now you can see that the entire window is filled because we used root dot width and root dot height and i could be saying this wrong but essentially root is just getting your main window okay so the root window it's getting the width and the height and that's what we're expanding to to fill that window so if i wanted to do i could do something like okay if i go here i could do root out with minus 100 i can do roof dealt with minus 100 right and let's run this and see what we get and now you can see that we're going in the bottom because we've not expanded as much right so you can see kind of how that works and if i wanted to change the position i'll show you quickly and then i'm gonna go to the next video probably after this position we can do a hundred one hundred and now watch what's gonna happen we're gonna be padded a hundred on each side there are a 100 hundred width okay so let's we got a minus 200 from this quick math here so let's do that and you can see now we're padded in the middle of the window so we'll let you guys kind of play around with this add some more widgets mess with this language i'm going to talk about it more in the next video just want to give a quick introduction and you can see that we're creating an entire application without having to type any code so we're gonna have all the logic essentially in here and then all of our styling we're gonna do in these cavey files and it's just nice and you can see that it's pretty easy go and fix things as opposed to looking in one straight line and seeing like self dot add widget' and whatnot okay so anyways if you guys enjoyed the video please make sure you leave a like and subscribe and i'll see you again in the next one [music]