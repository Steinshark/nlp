hello everyone, welcome to episode three. in the
last two videos we've covered some of the fundamentals of programming, such as variables,
methods and classes; so today i'd like to give a quick overview of the unity interface,
so that we can start experimenting with it in the episodes to follow. this is the default view when we first open unity.
we can customise the layout, for example i might drag out this game
window so that it sits next the scene view, and i could do the same with the console window so that it's over here next to the project panel. and i might also just resize some of these panels because they're taking up a lot of space. and then if we want to save our custom layout, we can just go to the layout dropdown on the top right. and then of course we can switch back to default at any time we want. all right, so the unity editor is made up
of these 6 main panels. the hierarchy, the scene, the game, the inspector, the project
and the console. the hierarchy shows a list of all the objects
that are currently in our scene. so at the moment i have a camera object and a lightsource. if i were to add in a default cube, that would show up here, as well as in my scene view, where i can move it around, or by changing to the rotation tool in the top left, i can rotate it, and scale it.
all of these have shortcuts of course: w to move, e to rotate and r to scale. in the scene view i can zoom with the mouse wheel, and i can hold down alt + left mouse drag to rotate. and middle mouse drag to pan. this little gizmo in the top right, allows
us to rapidly switch between viewpoints. we can also change between perspective and isometric mode, by toggle the cube in the middle. the game window shows a preview of our game,
seen from the eyes of our camera object. we can press the play button at the top to start
and stop the game, though currently not much will happen as we haven't programmed anything
yet. the inspector shows us information about the
selected object. remember how in the last episode i spoke about composition, a way of
building functionality out of multiple classes that each define a single behaviour? well
here we can see an example of this at work. our cube object has 4 components attached,
all of which are simply classes that unity has written, and added to this object to make
it into a cube. if i remove the box collider component, it loses collision functionality;
if i remove the meshrenderer component, it loses rendering functionality. the transform
component is what allows us to move the object around, as well as rotate and scale it. the project window contains all of the assets
for our project. so in a full project we'd have lots of scripts, and 3d models, audio
files and so on listed here. we can drag things from our project file into our scene. for
example, let me add a simple flash class that i created earlier to the project. if i drag
this onto the cube, you can see that it appears as a new component in the inspector. so our
cube now has an additional behaviour. if i press play, we can see that take effect. it's worth getting used to the idea that
while we're in play mode, our changes are not permanent. i might remove this script,
for example, and change the position of the object, but as soon as i exit play mode, it
reverts back to how it was before. this behaviour is beneficial, however, as it allows to try
out new things while the game is running, without worrying about ruining our work. finally, there is the console window. the
console allows us to print messages from our scripts, containing information about, for
example, the value of a variable. this allows us to track down bugs in our code, when things
are not behaving as intended. it is also here that we will receive error messages, if we
program something incorrectly. the last thing i'd like to mention is that
we can have multiple scenes. so if i save this scene, i'll maybe call it cube scene,
then i can go create a new scene. in here i'll make a sphere object, and then save
it and call it sphere scene. now i can switch between these two scenes by double clicking
on them. and obviously there are ways for us to switch between them using code during
our game as well. so as you can imagine, this is very useful for when we want multiple levels
in our game, or even just for separating the game menu from the game itself. ok, so you hopefully now have an understanding
of the broad elements of the unity editor. in the next episode, we'll start applying
everything we've learned up to this point by programming some simple scripts. until then, cheers.