all right all right all right all right all right apparently this is going to end with the word uh foundation the react foundation being created but let's start at the tippity top which is this article right here react where are you going my heart is breaking and only held together by what appears to be a paperclip that is very strange what is this paper is this new paperclip to save metal in betwix the two lines here or is this just ai generated nonsense is this just what ai generation is now looks like i don't even know i'm writing these random notes as an letter to the people i deeply trust in react and more generally the open source community people like tanner lindley lorie voss cassie williams michael jackson feels bad always i you know i see michael jackson around he's very nice guy but you know just having you know who would have guessed that you you got a name that ended up being an incredibly famous name and then being an incredibly famous name for bad reasons right you know what i mean sucks it sucks to have that uh mark ericson kyle matthews sophie albert and many others in the past few months i've been feeling conflicted about react it started with the days when server components were essentially announced at a framework conference and the react documentation began suggesting the use of external framework for react development after reading a cass cassidy's post last night and sharing her vision yeah i think cassidy also had some sort of like i also am not very happy with react i think react is incredibly impressive i'll say that out loud what they've built what they've been able to garner the community they've been able to build to the longevity of their framework that hasn't uh that hasn't changed names frequently i mean very impressive and remember this isn't just me someone who is much more critical of react saying these things these are people who love react right i can i can complement react every now and then okay there's plenty of really great things that react has done okay the thing is is that before react came about we were starting to move all this logic to the client to begin with and we just did it in a very everyone's own wild way in some sort of sense and i think it's good to recognize the fact that react just accelerated something that was already there and they did it in a slightly nicer way maybe and when it first started off it was so simple right it was a very very simple thing it was fun i mean it was fun i really liked react when it first came out i didn't know i was so i was so used to jquery that i thought it was like a great experience then over the years i just learned to kind of hate it because i i really hated the state management of the whole situation i really hated how big and fast apps grew because i felt like i was making a lot of code for something small and it just kept getting bigger and it just felt like it kind of flew out of control and so that's why i've been s such a big lover of htm x and i'll probably continue to love htx at infinitum because it just it allows me to simplify this process and where needed i can inject something like react if i want to i can inject web components solid js felt whatever i want to do but i can kind of like reunify this process in a more simplified way and that's what i just really like about it you know what i mean why do people say hmx is insecure because they are insecure themselves okay any framework is insecure it's up to you to make sure that you handle things properly htm x just puts the onus always on you whereas react hides some of your oopsy daisy insecurity which i'm not saying is great all right anyways all right i fell in love with react in 2016 when angular announced angular 2 and we were worried about breaking changes i immediately fell in love with the react community even though i had never actively participated i remember tweets uh between sophie alpert and dan abramov i also remember the first talk at reactjs day italy by michelle uh b boli in 2016 which made my eyes sparkle and i can't forget in 2018 the edition of react to js day when michael jackson recreated much of the react router live coding in front of us those were great days re live coding at conferences are a rarity it's very hard to do i've done it once awesome job by the way awesome job uh it's a it's a rarity to see it because it's really hard to do anything to begin with um react has been a winning choice for us both as web development agency and now as a product company i still get emotional when i think about the day i believe january 2nd 2020 when i showed the first first mvp of react bricks to guo ranch oran uh who was the first to believe in the project and gave me the confidence to go on good good guy guo triangle company leader the tip of the triangle uh however today i see two problems uh that make me enjoy react a little less and make me worry that new developers might be intimidated by it ownership and complexity complexity for sure it is i mean it is pretty wild to think that for you to use a front-end framework the kind of going mantra right now is that you need to have your project set up a certain way to be able to retrieve data you have to have your back end set up a certain way to look like this you have to use this specific technology you have to be able to be tied back and forth you have to know the difference between use client to new server you have to have this one meaningful application spread across two machines and typically that's a very hard thing to achieve and i think d dan had some good talks about it about why he thinks it's it's the right way to go and maybe he is correct but for me it just feels difficult it feels like i'm not sure if i believe about that uh prime tell us about your six no dependencies well technically it's five no dependencies the sixth one i just need to bring in because i want to bring in some debug logging for me later down the road for when someone has a problem and i can let myself know as for ownership i don't particularly like that react suggests using a framework to start a project suggesting to use one of these three main open source frameworks instead of just react i mean but is react the victim here can we all be real for a second is react the victim or is react the perpetrator i would argue ar that react is more of the victim than anything else because javascript is just a wild wild wild ecosystem it just is and so for you to like i want to use react okay you want to use react well how are you going to compile the jsx how are you going to get that into the web browser how are you going to serve it a self-made victim sure but nonetheless like just answer all those questions right the ecosystem by what the dent of what it is today is extremely hard to just use and no by the way nobody's going to use react like react. create element nobody's going to go through and use it that way they're all going to use jsx okay this idea that people are like well you don't have to use react with jsx it's like you're right you don't have to i could also write a c-based api and make my own beautiful event loop and everything and bed lua to create my own server but that would probably be stupid of me to do you know it would be a lot nicer not to do that to use somebody else's but why not rust uh during a framework conference new react features such as react server components are introduced to a large part of the community for the first time as if it was just a framework achievement the most popular framework which has hired some people from the react core team which is not a bad thing but certainly provides them with privileged insight into development uses canary releases while the last react the last release of react'.2 as of june 22 is this way in this way canary features enter the code base of many new react projects becoming the deao stable release but just for the users of a framework that that can feel safe leveraging canary features it is i mean these are this is a very good argument i think uh i think i mean i think the undering argument that is probably being made here is that whether you like it or not there's pers perverse incentives to build something that aligns with the framework as opposed to aligning with react and the community is how i read this and since they have access to all of this they can build in such a way that it makes it really strong you know a strong relationship between uh say next and react where some of the community don't doesn't want that and they feel kind of left behind if you will that's how i that's how i read it furthermore uh features like server actions which trigger uh metered serverless function calls when hosted on cloud platforms may potentially increase hosting cost for front-end applications in the future while this is not currently a problem since there is no monopoly and we have the freedom to choose i would like way for the community to be guaranteed that tomorrow there will be still multiple choices available there will always probably be multiple choices available and you cannot guarantee such a future but the reality is that the the danger that i think you really should be thinking about is that when you are fully sold on one platform no matter what the platform is okay because i'm not stupid enough to say that uh that somehow like every platform suffers from this which is that whoever's owning it has the ability to turn a knob of profit and that knob of profit means more cost to you now this works for everything right this works for everything if you're just raw dog and ec2 instances amazon still has the knob of making more profit if you're doing your own on prem stuff you have to hire people effectively you're taking on all the cost and you're going to have to do all your regional stuff and that'd be just impossibly expensive so then you do un prem services for various places but again the hosting of on-prem stuff with somebody else doing it is still has the knob of profit where in case they need to increase rent right it all it's impossible to escape vendor loock it's impossible to escape vendor loock it just simply is it's just the yeah it's just a matter of how are you locked it's not a so like this is the problem with just going say all serverless and all edge and all everything is that you are beholden too many vendors i'm not saying it's better or worse i like real talk i love turo it's an edge-based database it is a vendor lockin absolutely absolutely 100% it's cheap for $999 99.99% of apps it's way cheaper than ever trying to manage your own database yourself oh yeah that's a hashtag app this is a this is effectively a hashtag ad uh by the way turo uh too. technut if you if you if you want 10% off you know you know what i'm talking about um anyways but either way you're still locked in to using them ain't no [ __ ] way yes they gave me that short code okay dez nuts okay that's really why i i love the ad so dang much as i get to say that how great is that but this i mean it's real and so anyone that tries to tell you that somehow this other way is actually much much better and that you're all just you're you're all being vender locked full of [ __ ] okay i'm vendor locked to linux i'm vendor locked to the database i choose i'm like you think you're just going to hot swap out a database furthermore features like server actions which trigger meterless serverless function calls when hosted on cloud platforms may potentially increase hosting cost for front end applications in the future you're a monster i know i hope you know what i hope that he has to use jquery and that's it that's the only library he gets to use in javascript while this is not currently a problem since uh there is no monopoly and we have the freedom to choose you can't you can never get guaranteed please understand that i don't see anyone as being evil in this regard great things can come out of the collaboration between private company and the community it's simply a matter of separating concerns and responsibilities wait jquery wait you want him to make money i hope he has to program hll from here on out white papers only complexity i started creating websites in 1996 when i was 17 years old and at that time you created an html files and uploaded them to an ftp server to a folder ser d by a web server i managed my own physical server ap pentium 120 housing uh it at a local internet provider i ran windows nt4 iis oh gosh the poor man as as web server bind for dns and ip switch i imail server for email everything was simple and clear nowadays web development has become powerful but as much but much more complex this is actually a really great i mean i'm not saying that this day was better but it was most certainly simpler is that true it's hard to say what is simple in this case is modern web development simple actually maybe i'm wrong here maybe it's easy to get started but it's actually complex maybe it's like the great lie the great lie is when something is easy and complex because it feels easy so work yeah it's easy to start extremely hard to move on like i can't tell you how many projects i see that die under uh feature changes it's crazy how many projects i watch just witnessed grind to a halt over adding like a [ __ ] button it's wild nowadays web development has become much more powerful but also much more complex we have lost touch with what is happening under the hood with the introduction of transpilers bundlers and frameworks however react stands out with its clean one-way data flow i mean that's not technically true right whenever you perform an action that request and hits the server your data has gone this way it's like a circle yes you could argue that what what he's saying is that there's a circle that exists but it's hard to believe that because the problem is is that it's not a circle because often you need more sophisticated dat uh data management and then you end up bringing in a global event bus called redux or something like that where now you have like components emitting non- saved events that go into redux that come down and then affect other components and it no longer it's no longer one way right i think it's only one way in sample and sample applications i don't think it's one way in real applications real big ass applications have data flowing all over the place going all over because you give them give somebody an event bus and i will give you events right things got a bit more complicated with hooks uh hooks i love the idea of hooks i always look at them as like orthogonal properties but imagine saying all this but with blue hair it will happen which uh then i'll talk about rust and the foundation how great it is so which some have behind the scenes black magic but it was a manageable and and in the end a good choice uh with i'm not sure if it was a good choice yet i'm still not convinced it was a good choice by the way you forgot a closing parentheses classic classic oopsy daisy when you do a smiley face you forget the closing parenthesis classic with ser components everything is much more complex to grasp and the fact that they are the default choice in the most widely used react framework somewhat forces newcomers also to learn this new paradigm i understand the advantages of rsse but now we have two different ways of building this even within the same react framework you know i will still argue that i do i think within two years we will see a lot of don't use x x considered harmful talks about various features of react server components i think it's absolutely going to happen we just have to wait it out i think there's a lot of dangers and there's a lot of cool stuff at the exact same time being able to interweave server and client components meaning that you can pass into to a client component a server rendered component that is really cool that is a good positive thing but it is also a very complex thing you know what i mean it is a very complex thing could be good could be bad i'm just saying it could be it's a nightmare to debug i think it is it's completing it's tr it's actually the truest form of they're complecti it's so good we have recently completed a task of making react bricks library compatible with rsc the require see this required a month of work and thousands of lines of code i wonder what react bricks is what does react bricks do because thousands of linens of code seems like a lot of code oh it's a cms yeah i mean that makes sense yeah okay it's just a cms but you build it with react i always am very curious about that why would you want to react cms i'm curious what's the point of react and not just making it like this is like a low code no code cms i guess the i guess the benefit is that you're the low code portion is that when you do code you code with react is that is that what it is is that like the is that the kind of the selling point of it i assume that's the selling point which i get i i hey i get i'm not i'm not saying i'm not saying it's bad or good i'm just saying i totally get the idea why not wordpress i mean i'm always curious why not just use wordpress honestly i know how much they're shitty and all that stuff but it's easy i don't know like builder iio right i i don't i don't know this regard a month of work and thousands of lines of code however as a result the final api for developers is not as clean as before i am uncertain whether sacrificing simplicity for slight performance boost will truly benefit our customers nevertheless since it is both the default and the new shiny thing uh we have uh we have to have it like real talk i don't know if you do meanwhile there are many interesting things happening outside the react world with new frameworks astro kind of has its own version of all of this you know what i mean astro kind of has a lot of the stuff chat do you completing i would like i i wouldn't like to be a new programmer trying to choose their framework right now as the decision is really tough react is the most popular view is easier to use felt is a cool idea astro is really great and then there are signals with solid js by very smart and humble ryan carniato by the way ryan is actually both he's actually he this guy nailed ryan carado on the on on the head here he's actually a really nice humble dude very very very kind quick is also very smart i love the approach didn't get hit with the humble though i'm just saying quick mishko you didn't get hit with the humble uh it was created by the competitors of react bricks but i hold them in the highest esteem so the choice it of a base framework is already so complicated i know but again look at the perspective being had here the perspective is that the world can only be built with these complicated front-end libraries oh forgot another bracket oh yeah did forget another bracket it's very easy to do this it's very easy to forget a bracket a dream this complex scenario it would be beneficial to have a default official react framework that covers the basic needs of building an seo friendly website with routing ssg ssr isr and all the permutations of these letters forgot again forgot dude it's very easy like i said it's extremely i love that he uses smiley faces though huge fan of not using emoticons but actually using just asy based smileys uh i know uh that the remix team would not agree on the need for ssg but i think it's a valid use cases and i would like to be let's see i would like it to always be self- hostable on a linux box yeah og by the way i used the term emoticon not emoji okay the default uh framework should not aim to include all the shiny new things out there i mean the hard part is once those shiny new things are the default you know it's hard how do you not right it's hard how do you not emoticons oh yeah emoticons are great forget uh brackets again i know it it's so easy not to it's so easy not to can't blame the guy uh found another framework like remix or nextjs which i use in love i believe it should serve as a solid starting point created by the community and i think we have already some great stuff available today start uh to start with tanner tanner's great tanner lindsley makes some great stuff and as for rsc i think the concept of avoiding hydration is great but we need a new kind of server client integration to make them easy to use again i i i'm just i really i really would love these these people just to like spend a month making something with htm x and when they really really really really really need it they try like a web component or maybe then trying to bring in react i skipped a paragraph it happens okay i did all right hold i envision that this default framework being developed by the react community with a steering committee consisting of recognized contributors from the react ecosystem through voting process foundation and i know this usually open source doesn't work in this way but i dream of this prob vy fellowship of the ring proby v i don't know this term uh fellowship of the uh ring uh making decisions may the fortune be with you on that one sounds very great but we need a new kind of server client integration to make them easy to use if they remain complex with the uh current constraints trading simplicity for performance would not be beneficial for most websites and probably rsc is losing in terms of performance compared to something like quick anyways because they are performing the same work twice processing chunks from serialized json on the client however this material for separate uh separate discussion again i really would love to see just something else right like maybe the world doesn't have to be this way at all i it's one of the classic computer science conundrums happening right now which is that you have some place in which you're trying to optimize right and you've landed right here and when you go this direction it sucks when you go this direction it sucks so you just try to keep going down right here and the problem is is that maybe just maybe this has never been the optimized place this is just a local minima and the real optimization is somewhere else completely you've just simply found the lowest local minima and you're kind of swimming back and forth in this trying to figure out where exactly is it right and it's more like np complete which by the way n np complete is this in this right so every if you were to zoom into this it looks like that right it's just like impossible to say that you're you're anywhere near and so i think that's one of the big problems of front-end world right now is that we are in a place in which we're not investigating drastically different solutions we're only investigating solutions that are based off of current solutions i think htx is one great way i think phoenix live view lel live view all these things are really great right like there's there's there there are other things out there that are just vastly different ways in which you can create things you could do you technically could use lepto and front end stuff i don't love web assembly so i i'm just not buying that as an environment yet uh i think it's really big pain in the ass to the bug but there are just like completely different answers out there that just don't even exist or java applets yeah laurel yeah laurel yeah uh w is such a pain in the yes exactly that's my my big problem like i love leptos i think it's a great great framework it's just that the web assembly side of it is so hard what are your thoughts on the future of react do you believe it's feasible to have a community-driven framework without a sponsoring uh without a sponsoring company no i don't uh i think the thing is is that you should shoot for companies to sponsor it many companies like that's the real thing is that many companies have to get together and try to build off this thing second i think you need a benevolent dictator i think you need one person that makes it or you have this whole committee problem i mean you have like the whole node.js problem right now nodejs is getting blown out of the water by bun in performance because bun is able just to make decisions and people just run the way they want to run it and there's just one person that's running it the benevolent dictator that says this is how we're going to do things and that's how it works whereas for no to actually go okay now we need to talk about let's get our technical steering comm committee we now need to go do these things we now need you know like it's hard and plus node is off of the backs of free labor whereas bun is vc funded so again is it better is it better to have funding and companies bund no does have a great url parser though absolutely um uh but with this sort of elected steering committee how could this independent steering committee be financially supported by the community or corporate users the problem is corporate users means company companies once you start getting funded you start getting influence then you have backdoor influence right and nobody wants back door weighing back again okay uh because the problem is is that the guy that gives $100,000 guess who has the ear of people making decisions the guy giving $100,000 right i mean do you want politics all over again i would i would rather take the the bun approach than the rust foundation approach just saying just saying you know what i mean yeah you keep linking this remix run business data so fast you'll puke instant transition with pre-etched loaders dodge the network with client caches instant search with index db uh data replications uh oh yeah i i saw something about this it's really long it's pretty cool like i i love all these things i these things are all super cool and i think that this is the example was super cool go check it out like uh obviously uh obviously he's very very talented what he makes and all that i'm not i don't want to say nothing negative here about it it's just that again i'm not convinced what the i i need i don't know what the complexity looks like as it scales does it how hard does it get what happen if you have a bunch of weird cases what does it look like uh also you have a whole client and server data problem that goes on here that can be very hard to resolve and there's a lot of weird things that happen and maybe this is fant maybe this is the perfect way to build apps maybe this is the best that can can be done i don't know you ported his ex uh one of his examples to h max nice uh again i i just don't know or maybe phoenix and live view right maybe that's the best way to i don't hey i like to see things done okay i like to see things done and i'm not going to i don't i'm not going to dunk on this because i think it's probably really great i think this is probably different than how it was and maybe it does feel faster and maybe it does feel great oh i forgot to look at this by the way after all of this uh sophie does talk about it and at the end they are talking about potentially making a foundations which by the way i'd just be super super i i just completely doubt that this could ever actually work out um i think nextjs is probably the better way to do it is that you have a framework that ever that has a lot of money behind it and a lot of people working and they're going to give a best-in-class support for it i just don't see how this this really moves forward without that oh big news i'll do something on this i think that's it's probably a good i think it's probably a good thing to i i will i'll do something on this because i think it'd be a really good a a good thing for me to talk about but we won't do it here let's see to be honest i don't think we have the best way figured out yet but i 100% believe that tech like live view htx etc are are the correct direction yeah i mean that's why i even think react server components are in in the vein of correct direction i'm not saying they're the best but i just think that they're at least going the right way which is wait a second like big client apps maybe weren't the way to begin with and i think that that that is a that is definitely correct vain vain all right the name i got to be done is the vinen feeling viny people