how many of these habits do you think that i personally have my guess is probably nine out of ten 69 out of 10 really 69 out of 420 if we really try hard 10 coding habits that make you a bad programmer i want the number in the chat right now for how many of these i do reason number one watching twitch while working instantaneously code yeah that's reasonable that's reasonable okay i would buy that okay so we got we got we got a lot in there okay first off uh this by the way this is the future of ai box art stuff what does this even mean what the hell does this image mean it is a dinosaur missing to eat this guy but apparently also still eating him with the other side of his mouth and these guys doing the clasp of friendship okay nobody knows what's happening in this photo culture no ai ai looks like something i recognize until you think about it and then it's just crazy okay it's just crazy okay none of it makes any sense none of it does like why are these ropes kinked should they be straight what kind of why is there a newspaper in the dinosaur's mouth okay it just none of it makes any sense and nobody is complaining about it um does the guy on the left even have legs no he apparently has a carpet for a leg and little tendrils tendrils okay anyways let's do this in the thrilling world of programming every line of code weaves a story of it oh my goodness is this did i forget to turn off alerts hell yeah brother this is like i i get i every single video people are like is there a video in which he doesn't forget to turn off alerts no no there's not um anyways in the thrilling world of every programming every line of code weaves a story of innovation and problem solving some of my code just weaves brainless ejaculation of thought and boilerplate okay just want to throw that out there however even the most skilled goaters can sometimes fall into a trap of detrimental habits hell yeah let's get those habits this article is your companion on the journey to becoming a more effective programmer it shines light on a common pitfalls and provides practical strategies to overcome them whether you are a student a researcher or a cezant coder this playbook is your ticket to breaking free from bad habits and stepping into a full potential as a programmer let's dive in okay so not gonna lie to you this sounds great i want this okay you know my coding could get better i always believe that my coding could get better okay i you guys have seen it yeah this has chat gpt energy strong chat chipity energy for sure uh segment one the art of coding and the pitfalls of overconfidence okay so i'm already feeling a strong disagree coming in but let's keep on going programming is a fascinating journey a dance between logic and create okay this is entirely too much like this foreplay has gone on a long time okay i feel like we're still foreplay and i still feel like we're in the shallow end are you asking people to dive in to a shallow pool let's get in okay let's no more no no more beating around this bush okay full shaft only but dear reader have you ever wondered if some of your habits are holding you back let's dive in to the first is this just gonna be an article that kind of continuously keeps diving into the problem but never actually dives into the problem the the permanent edge edge article uh all right here we go that's let's see let's dive into the first two habits that might be sabotaging your coding prowess number one master of all ace of none is this chat jeopardy's version of jack of all trades master of none by the way that's actually a uh a play on words master of all set uh or uh jack of all trades master of none it actually used to be a different phrase in society for a long time which was jack of all trades master of one and the joke was you're a jack of all trades a master of none and then that became like a mantra don't be a jack of all trades no like in the past they're saying be a jack of all trades but master one right like it's so much better of a phrase when you think of it that way imagine trying to learn every language spoken on earth daunting isn't it yeah it's like 6000 or something like that the same applies to programming languages it's tempting to dip your toes into every language out there okay this feels like a direct attack right now can we get can we get can we get a one on the board for prime can we get a one out of ten can we get a one out of ten right now okay one out of ten uh you might end up being a jack of all trades a master of none concentrate on one language become fluent and then considering adding another to your repertoire keep in mind depth often trump's breath when it comes to coding i mean i agree you know i i agree like if all you could do is just the tip you know it's not going to be as good it's just not you know what i mean i get i mean i get this in the vast universe of programming there are countless languages each with its own unique syntax and charm it's like being in a candy store and you want to taste everything it's like being a tourist who visits many countries but never stays long enough to understand the local culture pretty much tourism so focused on one language immersive like that's why people like it because culture tends to suck everywhere but when you go and visit something for a week it's fantastic so focus on one language immerse yourself in it understand its nuances become a true master okay um uh i'm kind of in a yano on this one and what i mean by that is that you should master one but the process of mastering one and the process of exploration they're not somehow mutually exclusive right to master a language you need a language that has some level of depth that actually makes sense to master right so like javascript is not a language you can master because it is such a shallow language i know people right now are just like oh well what about all the tweeters about ah just when you think your master javascript you realize you didn't no no no no no no no no no no no no no javascript is an incredibly simple language how people use it can be complex that's different that's learning programming concepts okay that's learning patterns that's just having a gut feel about how to organize information and the processing of said information that's a very different experience than mastering the language if you aren't new to programming and you already have one to two languages underneath your belt you could effectively master everything javascript has to have in like a week a couple days it is like it is an incredibly simple language is which is what makes it so awesome right like that's why javascript is such a great initial language it's due to its simplicity right and if anyone disagrees just compare c plus plus to that one just tell me the four constructors you won't even know you you won't you won't know by the time you're three days into c plus plus okay you just won't javascript you start to know something not a lot more than that i know there's a lot more than that okay there's actually quite a few and it's very confusing and i still don't understand it comp copy empty assign what is the constructor likely wrong prototype inheritance it's just not a thing anymore there's that's been largely covered over pro prototype inheritance was interesting totally terrible but interesting all right number two the overworking overlord picture a picture of this it's 2 am your eyes are bloodshot your fingers are flying over the keyboard and you've forgotten what sunlight looks like sound familiar yep i remember those days i wouldn't trade them for the world uh overworking is a common pitfall for programmers it's like eating too much chocolate it feels good at the moment but the aftermath is a productivity crash so also again let's let's let him finish his thought okay let's let him finish his thought hold on but before you go before you say i'm this one hold on balance is key my friend work smarter not harder in the world of coding it's easy to lose track of time the thrill of solving problems the joy of seeing your code come to life can make you forget everything else but beware dear reader for this path leads to the dark side the realm of burnout overworking can make you feel like a hamster on a wheel always running but never reaching your destination so take rest maintain a healthy work-life balance and remember your health is your true wealth okay first off your health is your true wealth always work out always be active touch a little bit of grass get that sun rays on your face baby do the healthy things eat right sleep well but the rest of this is crap um again we've talked about burnout i really truly think burnout is not a problem of how much you work it is what you work on okay it is what the problem is is that often you want some sort of value you want some sort of satisfaction you want some sort of meaning to come out of your job and often it sucks okay um this thing this whole like work harder not smarter thing in the beginning of my years i worked my ass off okay to learn anything and to be really useful requires just a insane amount of work and coding is incredibly hard and there's something beautiful to that honestly like i don't think you should work forever at the same pace i think you should ebb and flow and in seasons of your life you should work more and in seasons of your life you should work less and in seasons you should have lots of side projects and in seasons you should lean in to just your job and you should sometimes just know what to do and when to do it right you got to be able to test your own self but this idea of like of this never you know be careful like if you right now are losing track of your time and you having a thrill of solving problems go nuts love it for a little bit you need to do that there's nothing that is going to make you better at programming than the writing the joy of programming and i do mean that the joy of programming is one of the most important aspects of a good coder of a great coder there you cannot if you don't have any joy in whatever you do you will not be good at it you will not be great at it you could like i mean there will exist somebody that becomes great at something they hate okay i get it there's always an exception to the rule but in general you will not become great at something you hate it's just a fact of life you become great at the things you truly want to do you spend your time doing the thing you truly want to do all right it's it's a it's real talk all right segment number two the lone wolf syndrome and the copycat by the way currently i i based on his definitions i am um i got two for ten i am two for ten everybody two for ten i'm hitting two for ten two for ten uh segment two the lone wolf syndrome and the copycat conundrum oh love a good alliteration sometimes i i just feel so illiterate sometimes it's so good coding can be a solitaire solitary endeavor but it doesn't have to be let's explore the dangers of going solo and the perils of plagiarism you know i do have a lot of arch users here they're pretty used to going solo i'm just saying as far as i can tell you guys just just observation it's just an observation i'm not trying to be mean here okay got him ours by the way all right anyways coding isn't a hermit's job sure you can lock yourself in a room and correct complex problems but remember collaboration is at the heart of innovation reach out and share ideas and learn from your peers after all two heads are better than one right i think that phrase actually is meant as like an ironic phrase uh often two heads are worse than one but uh they can also be better depending on the type of problem you're solving but i do agree that you should all like the if you wish to get better seeing how other people look at a problem could be surprising even if the person's worse than you like real talk even if the person is objectively worse than you at programming they've been programming for four months you've been programming for 10 years seeing how a person thinks about a problem it can really change how you look at a problem it's actually it's really great so i'll never be afraid to look at someone else's how they do something right it's very very good it is argyle just left fishing for ad revenue you think so i don't know let's find out i do think that there's too much like in general our article writer i'm not trying to dog on you but you should just definitely like reduce the amount of language you're saying something in 50 words that you could say and say 25 words like a little bit more to the point would be great uh as a programmers we often find ourselves lost in a world of code oblivious to the world outside it's it's like you've already stated this it's uh easy to become a lone wolf isolated from the pack but remember collaboration is the lifehood of innovation like this is the same sentence as the one before it brings fresh perspectives new ideas it can turn a good project into a great one reach out to your fellow code or share ideas and create a magic together um i'm pretty sure you're not supposed to create magic together unless if that's what the person you love i that's you know what i mean like is that an hr violation i'm pretty sure it is uh all right copycat the temptation to copy and paste someone else's code it's like a sirens call but beware dear reader it's a dangerous path plagiarism isn't just unethical it can land you in legal hot water be inspired always create original what's that [music] ah oh my goodness there's entire cottage industries over copying it have you heard of stack overflow do you know what co-pilot is copilot is just glorified copy and paste oh my goodness this this just makes me just feel so good uh don't forget imitation might be the sincerest form of flattery but encoding it's cardinal sin what i've literally never seen a more incorrect take in my lifetime about coding like i must be misunderstanding the point i have to be like there's there's some key piece of information that's devoid in my brain but this is genuinely as far as i can tell completely incorrect uh in the vast ocean of code available on the internet it's tempting to take a shortcut copy and paste someone else's code but keep in mind plagiarism is not just unethical it's illegal it's like stealing someone else's painting and passing it off as your own okay picasso you wouldn't download a car would you kids and just like that segment three okay so first off i am now am officially convinced that this is a chat jeopardy article like completely convinced but i'm pretty sure the search title was this was give me seven things and give me 10 things the prime engine does and write it as an anticip antagonistic article such that it's gonna show up and he will react to i'm pretty sure that is like literally the chat jeopardy prompting okay coding is a marathon not a sprint let's discuss the pitfalls of rushing and hazards of letting emotions rule your code okay so right now i am currently four out of ten four out of ten the dare the deadline daredevil okay the alliterations in this article they're starting to bother me oh we've all been there the deadline is looming and the panic sets in but rushing your work can lead to sloppy code and more bugs than uh than a summer picnic plan your time wisely communicate with your clients and remember rome wasn't built in a day the fast-paced world of coding deadlines are always looming is like a ticking time bomb adding pressure and stress but rushing your work can lead to mistakes bugs and subpar code it's like building a house in a hurry without taking the time to lay a strong foundation plan your time wisely communicate with your clients and remember quality time only trump's quantity okay this is very repetitive words in here but i agree i'm gonna call this prime reads ai i actually agree with the statement how many let's see how many literary devices gonna uh getting stuff into one medium article uh it turns out all of them literally all of them um i i will say that in general if you have to rush code out we all know it's not as good right if you don't have time to write something twice it's probably not it's not that good you know what i mean the emotional coder now this is crazy to me i have no idea what's going to happen here the coding coding is a logical process but we are human and emotions can sneak in we we are the human okay this statement reads like a lizard person wrote this okay what are we at what is this lizard human writing this what is this don't worry fellow humans emotions do sneak in from time to time what however letting emotions dictate your coding decisions can lead to hasty ill thought out solutions keep your heart out of your code and let your logical mind take the reins what the i don't even know what this means sometimes my heart is the coder you know sometimes my passions take over okay they get hot in the pants you know what i mean i'm just like i just get in there i'm just like coding my my heart out those are my favorite days always remember passion is great but when it comes to coding cool-headed logic rules the day no as a result we are emotional beings wait as humans we are as again when you refer to yourself as a human you're not a human uh we love we hate we feel joy and sorrow but when it comes to coding and emotions can cloud our judgment leading to hasty decisions and flawed code it's like letting your heart navigate while driving it might lead you astray keep your emotions in check let your logical logical mind guide you and remember in the realm of coding logic is king this this this paragraph actually makes no sense and i'm going to fully disagree i think getting in there sometimes and just being in just like and just out code at a high speed just to get something done and explore can be one of the most beneficial parts of your entire time and it can lead to faster results because now you know what you got to do and now you can come back and re-review it emotional segment four the procrastination pitfall in the premature surrender procrastination and giving up too soon or two uh are two more habits that can derail your coding journey let's delve into these habits and how to avoid them number one the procrastination pitfall tomorrow the sweet siren song of procrastination we used to refer to this person as procrastitron landing on the earth to destroy all productivity you know just a personal kind of experience with procrastitron but in the fast-paced world of technology tomorrow might be too late postponing projects can lead to the outdated solutions and frustrated clients so dear readers seize the day carpe diem and remember the best time to start coding was yesterday actually i fully agree with this one okay procrastination is terrible um procrastination is almost is one of is one of the biggest reasons i see people go into burnout go into despair go into all these things you know i know this is a little bit more serious all of a sudden uh but real talk is that you you let all these things build up you're just like avoiding the real problem and then now you have an intense amount of problems on on board and it's just like it's so much harder to come back procrastination is truly terrible like i i'm definitely like organized what is most important do the most important thing kind of person coding can be tough oh the premature surrender coding can be tough and some let's say and sometimes it's tempting to throw in the towel but remember every great coder has faced challenges and overcome them don't be afraid to ask help after all it isn't better to seek help or isn't it better to seek help and learn than to give up and regret coding you want to live your life in regret or do you want to live your life with victories the name is tony robbigen okay we're just gonna skip over that number segment number five uh so surrender later than earlier uh delay surrender then got it yep write an assembly for assembly framework got it the familiar let's see the unfamiliar code conundrum and the journey to becoming a better programmer finally let's discuss the dangers of unfamiliar code and how to become a better programmer the unfamiliar code conundrum using code that you don't understand is like uh trying to read a book in a language you don't speak it's confusing frustrating and prone to errors take the time to understand the code before using it don't open up the standard library though okay sometimes you can know code based on the documentation and sometimes you want to know what's happening below the code below the api interface like i get that but real talk go ahead take a little look see at how a vector works and see plus c plus plus be a fun time to go waste right you know below the sheets yeah yeah vectors yeah c plus plus standard source is special yeah yes it is it's incredibly c plus plus yeah it's my favorite uh okay anyways this idea that you need to understand code before you use it is a little crazy um in fact i would say that if you combined this piece of advice with this piece of advice thank you like you're gonna be screwed honestly you're going to be screwed you can't you don't want to do that you don't want to do that at all okay it you don't want to do that you need to understand things to a level in which makes sense to effectively use it and often that comes down to understanding the api the documentation and sometimes you got to go into code one of the biggest benefits of node is that you can just jump right into the code right you jump right into the code see what's going on make some changes and understand and kind of debug your way out of a problem right like that's really good that's a really good thing i mean that's why also you know back in the day for those that had to do c or c plus plus when you had to bring in vendor code sometimes you got to go into their code and that's totally cool and it allows you to kind of understand things at a better level but that's a rare that's like the non-common activity becoming a better programmer isn't about perfect uh being perfect it's about continuously learning and improving avoid these bad habits seek advice create original work and most importantly keep your passion for coding alive just don't use your passion on programming because that's emotional coding um yeah i would say that this article is is um i'd say this article is a lot like a dodge stratus okay i don't know where i'm going with this literary literary device but i'm going to keep it there um it's it's mostly crap i do like at least half of these problems um the thing is is that working with people is good you can get a lot more out quicker working with somebody than working by yourself good point procrastination's awful it's going to ruin your life um making the magic happen always a good time uh but really be excited if you're excited and you're coding and you have no responsibilities that you need the meat enjoy it be okay with copying code copying is just fine there is no such thing as downloading a car absolutely do it all right um absolutely absolutely if you want to overwork this year this month this day go for it knock yourself out but remember the only time that this is truly like an opposite advice i will give is when you have others that are relying on you right like if my kids i can't i can only get so excited i can only spend so much time programming i have a beautiful wife wonderful kids and i want to be in their life i want to be a part of their life i want to see them grow i want to be able to spend time with them and so i kind of have a choice there which is always overwork or overwork when i need to and so i'm very very careful about how much what is overwork and how much and i think a good working amount personally for me 60 hours a week of coding or thinking about coding or stupid meetings that seems to be my kind of sweet spot where i can still get i still have a lot of free time but i love doing this so there you go uh master of all uh ace of none go ahead be a jack of all for a while learn what you like you don't have to master anything mastery takes years unless if you're in a very shallow language right like you can't rust you can't master rust in a week you can't i mean it'd be hard to master rust in a year unless you're if you're doing it full time maybe maybe right jack them all jack em all baby uh i don't know i really disliked this article i think it was um i think it had a lot of bad advice in here sorry i'm not i don't want to be a mean guy but it just really was not great advice don't don't follow most this article okay hey guess what the name is the primogen