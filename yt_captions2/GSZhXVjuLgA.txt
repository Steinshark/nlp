as a lot of you know on this channel i use type annotations a lot but recently i learned that i was being quite inconsistent because every time i created a function that didn't return anything i would leave it as such instead of annotating it as that it returns none and you might be asking why does that even matter what's the point of doing that well it actually gives us a lot of benefit for no extra cost the first benefit of course is with the static type checkers if we were to return some random type and we were expecting to return none it would warn us but the reason i like returning none is that itself documents are code which means if we see that a function returns none we can safely assume that that function is only made to be executed and we don't need to read any documentation regarding that that's a function that only executes code because we see it immediately in the declaration but with the type annotation or without this is going to return none and if you have a code editor such as pyam you should see that documentation when you are hovering over the function here it says it returns none which means this code was only made to be executed but explicitly declaring that in the function personally makes it easier on me to see that a function is only meant to be run but i actually have a better example where returning none makes it easier on the developer to understand that code is only being executed and not returning anything so i'm going to get rid of this sent email example and i'm going to insert some numbers now let's try to sort these numbers and we're going to be using two inbuilt methods the first one is the sorted method and we're going to pass in our numbers because we want to sort them and the second method is the numbers. sort method and if you've been using python for quite a while you'll understand immediately what does what but just by looking at them it's not that obvious that there is a difference because the first one returns a sorted list while the second one performs an in place operation and one quick way to understand this is to hover over the functions and to look at the documentation so for sorted we get a sorted list back while if we were to hover over sort this one returns none and just by reading that annotation we can immediately understand that there's no point in assigning the sort function and we didn't even have to read any of this documentation although i'm not saying that you shouldn't read the documentation because usually it has some important information there i'm just saying that at a quick glance we could understand immediately that this function was only built to execute code but regardless in the documentation you can see that this sort is in place which means using this will affect the original list and that assigning this to a variable will do nothing but let's create something called sorted one and sorted 2 so that we can print both of these so print sorted one and print sorted two and as you can see inside the console the first one will return a value so we're going to get 1 2 3 4 back and the second one didn't return anything so of course we're going to get none back so to quickly summarize this video i've decided to start returning none in all my functions that don't return anything because it makes it extremely explicit that that function is only made to be run and that i shouldn't waste my time with trying to assign it to a variable because not all functions are going to have names that are straightforward such as sorted and sort if it's your first time programming in python or if you're coming from a different language good luck trying to understand that only one of these returns a sorted list and that the other one performs an in place operation but anyways i would love to hear what you guys think about this in the comment section down below whether you use it in your company whether you think you'll use it in the future or whether you think it's a complete waste of time but otherwise with all that being said said as always thanks for watching and i'll see you in the next video