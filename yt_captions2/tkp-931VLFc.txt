the story of typescript why typescript one you know this video should be one second long right it's not that i want to laugh you know like uh the the video i really appreciated last time was like the uh option video right option uh andrew burgess right yeah that wasn't the entry purchase he did a video on options that was a great one it was a great video to watch what is typescript one all right let's try this one out okay uh the the story of typescript i can tell you exactly why typescript won so i'm going to be a little bit disappointed if they don't exactly do it seems like wherever you look nowadays there it is typescript typescript typescript typescript typescript in fact typescript is so prevalent that bill gates himself is even familiar with it but the question isn't if it's popular it obviously is but rather why is it popular to help us answer this let's take a step back way back in fact to 2010 when typescript was first created it was a simpler time building for the web was different libraries like jquery move tools and dojo dominated discussion vanilla javascript was nowhere close to what it is today this was previous six previous five maybe the s4 had just failed to reconcensus amongst the tc39 committee in no small part thanks to microsoft own objections it was very clear that microsoft didn't agree with everything that was esports didn't want to do a big a change it was deemed risky it was deemed too much it was deemed um the wrong direction the problem was microsoft still saw javascript as what it was initially intended for a simple scripting language that was designed to be easy to use by both designers and developers not a full-blown application platform hi everyone i'm andrew childsburg technical fellow in the developer division of microsoft and i'm here to talk about a new project of ours called typescript javascript was really never designed to be a a programming language for big applications it's a scripting language it and yet here we are you know like somehow this was 2012. okay this is effectively the equivalent of a history lesson that ends with a ligma joke that's how i feel about this 2012. javascript's never used for big you know big applications fast forward 10 years it's used to big applications damn it doesn't have static typing but more importantly perhaps it lacks some of the structuring mechanisms that you need typescript doesn't have static typing weird in large applications like classes and modules and perhaps interfaces so at this point what do you do if you're microsoft you still have a need to write large scale web applications but the platform you're building on is in their opinion inherently flawed one option that was popular at the time was to leverage existing mature developer ecosystems and then compile to javascript two examples of this were google's gwt which leveraged the java ecosystem in a project called script sharp which naturally leveraged the c-sharp ecosystem these projects worked fine but they didn't grow with javascript because you wrote your appetite language that wasn't javascript whenever you wanted to leverage anything in the javascript ecosystem you had to either encapsulate it or worse not use it at all so what did microsoft do well as we know they decided to build a language on top of javascript that allowed them to create the ideal development platform they desired while still benefiting from the broader javascript ecosystem ideal you know there's that word that i i don't think he knows what that word means we felt that what if we could strengthen javascript with the things that are missing for large-scale application development like static typing classes modules and that's what what typescript is about now fast forward to today and most of microsoft's original objections about javascript have been solved so why do we still need typescript well even with all the improvements there are still some benefits the typescript can give us i do like this right here modules if there's ever been a bigger pain in the ass ever in the universe it has been the current state of modules esm cjs mjs the quote trash tab bdsm i mean there's just so many different things and all the tooling is just terrible it's just terrible like this is this i feel like has solved nothing it's it's emotionally it's emotionally bruised me it's all that's happened every time i still can't use chart js40 invite i don't know what to do i don't know how to make it happen try to make it happen could make it happen typescript well even with all the improvements there's still some benefits the typescript can give us even though you may not realized it types are foundational to everything you do in javascript ironically if you've only ever used dynamically tech languages like javascript this becomes a surprise to you with dynamically typed languages you don't really think in types i forgot lua in here lewis very beautiful so with that said what do we mean when we talk about types you're probably familiar with the idea of variables being containers for values name is a container for the value of tyler age for the value of 31 and married for the value of true your javascript brain is used to thinking this way what it's not used to is thinking about these containers in terms of their value as well as their type alright but why is this helpful well in this example it's not but normal apps aren't composed of three variables instead you'll often have thousands of variables originating from hundreds of different data sources this is where dynamically type languages like javascript breakdown if you're not careful they make it too easy to introduce bugs by mistakenly referencing variables the wrong type you've probably even experienced something like this before this is the fundamental reason why javascript was invented that example fundamentally didn't have an option type typescript expands the feature set of javascript by giving the ability to define what a type variable should be when you declare it now name must always contain a value with a type of string age with a type of number and married with a type of boolean right so typescript is just javascript with types well kind of you could give typescript as a hybrid of a language linker compiler and a documentation tool first and foremost typescript is a language based on javascript as we've seen this seems small but it's critical to typescript success because it's based on javascript any javascript program is also a valid typescript program this not only means that you can import any javascript module and use it in your typescript code but it also means you can gradually adopt typescript into your code the next feature of typescript is that it's a developer tool that fell i feel like that step they said is just not that accurate has anyone ever tried to just bring on in a little bit of javascript into their project i mean if you have absolutely no safety whatsoever then yeah then that makes sense that then yes but if the moment you have strict mode on in anything you bring so you can't even like import it you have to write type definitions for it it is not a simple like ah everything's just typescript you're just using javascript it's like well i don't know um yes of course i'm playing this faster because i mean do we really want to not run this faster everyone watches their stuff on 1.5 come on i'll take your code you can think of it like prettier yes lent or even a nice empathetic friend sitting by your side it's job is to make your life as a developer a little bit easier the goal of any kind of validation tool is to increase your confidence that the program you're writing behaves the way it is supposed to and it doesn't have any unexpected bugs since typescript understands the relationship between the types they i mean technically failed on that one but okay that's okay dear code base using a welcome to limit the entire classes of errors and issues welcome to costco i love you this must be for legal reasons your writing behaves the way it is supposed to and it doesn't have any unexpected bugs since typescript understands the relationship between the types in your code base using it well can eliminate the entire classes of errors and issues typescript becomes even more powerful when paired with a compatible ide like vs code as you write your code typescript and give you hints and suggestions about what see when people say these things i just immediately think they don't understand what's happening within their editor and what i mean by this is that vs code isn't doing what they think it's doing vs code is running what is referred to as a language client that is using the language server protocol to communicate to a language server the language server is doing all the hard work for you this is one of those strange moments in life where you hear it all the time and people don't realize that the reason why this works in every editor is because they're it's just ts server underneath the hood now user methods exist on your objects or what types you should use for functions parameters you can autocomplete your code as you write it can warn you when you use a function incorrectly or if you write an object that's missing required property it could even remind you to return a value from a function if you accidentally forget sorry i misheard that i i i i definitely misheard that right i can warn you want to use a function incorrectly or if you write an object that's missing required property it could even remind you to return a value from function if you accidentally forget to since typescript enters checkmate atheists all right stand your entire code base at once you can do all this across file boundaries without having to jump from file a file next typescript is also a compiler it can transform typescript and javascript code to support different features for older javascript engines finally typescript is a great way to document your code and communicate with the rest of your team coming into a brand new code base can be daunting especially if you don't know how all the pieces connect together especially if every function you call returns to you flat pojos and you have to inspect every single item inside of it to try to guess what type it is like imagine if you had like named types coming out of functions i don't know perhaps perhaps that'd be just a different experience i don't know maybe it's different maybe it's you know maybe some people uh you know some people like uh just a big raw list of properties type annotations remove the guesswork and figuring out how a program works and serves as a guide for anyone trying to work in your code base for example your code base might use a specific shape of an object as a parameter to a function without typescript you would either have to write an api documentation or worse write comments next to the function definition explaining how the options work this gives current you future you and all developers who use your code elsewhere confidence that you're using it correctly it's easy to think for typescript is simply a way to add types of javascript no that's true it's so much more in 2007 jeff atwood famously said any application that can be written in javascript will eventually be written in javascript 15 years later that quote probably needs a slight update you know i think they really missed what made typescript so good they kind of like they he kind of did talk about it for a brief moment he never actually told you why typescript won which was the box art but really and truly why typescript one can boil down to a singular point and that's it it's just one single point does anyone know anyone want to take a guess come on there's 944 of you one of you must know the answer to this i wouldn't say types microsoft is vendor no type safety no no not because of static typing no no no no no marketing no no microsoft microsoft is half the answer yes types lsp let's go the reason why typescript won the entire time was because of the lsp when people actually opened up their editor and got correctly values in there sure it was the typing but it wasn't the typing by itself it was the lsp the lsp the invention of the lsp and its ability to be awesome is what made typescript win there is no other answer because if you use javascript and you've gotten a taste of autocomplete you just like can never go back like you can never go back ever what's it lsp do you guys not know what an lsp is holy cow okay so let me give you a quick diagram of what an lsp is okay let's just go uh xcala draw all right so uh lsps are really easy i need to figure out how to create these really easy okay so you have your let's say you have your editor vim now because you know your chat your chat just chat doing chad things you know what i'm talking about the your editor is going to have something called an lc a language client and then you're gonna have something called a language server an ls and in betwixt these two items is going to be something known as a language server protocol it is a series of json messages that are passed from your editor or your editor will pass a piece of information say your file you're currently working on the build file the package.json to the language client the language client will communicate via the language server protocol to the language server the language server will then be able to take that piece of information compile everything around it and take that and walk it back and send updates right here that is what is happening that is why this thing is so dang popular what did lee rob have to say here i missed it anyways so there you go it's the language server protocol that's the truest reason why this thing took off as fast as it did because the moment you had a taste of this you could never go back to javascript right you could just never ever for any reason come back with that and who came up with this microsoft did microsoft did so the nice part about microsoft is that the moment they came up with the language server protocol an open standard for everybody used to make the world a better place the first thing they did was like wow we've created something open and beautiful this is amazing people we've done something for developers for the sake of doing it oh my goodness aren't we great people and everyone's like yeah microsoft you're so good they're like looking it's even vs code look vs code works with it and everyone's like yeah oh my goodness microsoft's so kind this is so good and then microsoft almost immediately within a moment when oh by the way html uh html language server uh if you use that and you aren't using vs code we reserve the right to sue your ass and so there you go that is how it happened large sexy prevention that's actually the technical answer you're you're absolutely correct so there you go that is what microsoft did and then right after they got done doing it they're like oh man we don't want people to think we're like terrible right and everyone's like yeah they're like oh by the way pylance if you use that and you don't use it inside vs code we reserve the right to sue your ass or your company you work at and you're like microsoft why would you do why would you create a world in which could be great just to me dude microsoft all they do is eee that's all they do absolutely every single time they create something only to take advantage of it and now you know oh man oh man but how can u of m get around this they can't well i mean people do but if you do you you reserve the right of getting sued by the way so don't do that don't use these inside neovim you should never do that because you don't want to hold you or your company liable for what's happening on right here okay it's like the reverse of what facebook did with react yeah it's like the it is what the it's the reversal what facebook did with react there you go and there we go that my friends is why typescript one