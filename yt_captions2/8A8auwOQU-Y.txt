i'll do anything for $2.50 so you can stick around anyways dino q's announcing dino q's okay so what is this in the ever evolving world of cloud software doo dino aims to radically simplify leveraging public cloud infrastructure as traditionally demanded sifting through layers of boilerplate code and intricate configurations often monopolizing a significant chunk of developers time and energy our goal is to distill these intricacies into userfriendly primitives enabling developers to design refine and launch their projects with unmatched speed with this in mind we rolled out dino kv a few months ago currently in open beta anchored on a robust robust capabilities of foundation db how many effing databases are there real talk it feels like once a month there's just another database i've never heard of constantly it's all just squeal what does foundation db do that the other ones don't do what about oh surreal db sil db cassandra squeal light what about uh mysql server 2007 edition okay why is nobody talking about that okay why is nobody talking about it dude it's it's it's it's excel db okay that's not access okay it's we call that access and that's disgusting i one time did a master's project in java for a fish hatchery on a supercomputer where i had to write a driver so that we could communicate to an access file via java i would read data from an effing access database and then run that on a super computer do you know how that makes you feel when you have to access the world's slowest dumbest technology ever ideated in mankind and then put that on a super computer do you realize what i felt like that's also the time i learned that back so this was in java 1.5 i think and you know how they always suggested uh getters and setters i removed getters and setters and put a uh and just put public properties and it literally sped up the program like by millions of percent obviously they fixed that over the time but back then oh my goodness was that just a mindboggling how much faster you can make a supercomputer go by not having function calls wild anyways dino kv is more than just a new persistence option for apps it's about transforming the developer experience by eliminating redundant configurations and offer refreshingly streamlined api uh building upon this foundation we are elated to unveil dino q's today this tool is set to revolutionize scalable messaging and uh elevate the management of background processes in your application okay listen cues post a slack let's go this is cool this is actually really cool i think there's something super clever about this you could obviously do this with sns and sqs this looks like just like something right off of amazon right but to have it built into the language like as part of the runtime and then to offer a service on top of it such that you can use these and just launch without thinking like it's a great business model i think dino is making a lot of good plays in the business world okay business my guess is that bun's going to probably try to do some of these things right uh in this post we'll cover the key aspects okay what are qes use cases pricing what's next let's look at this what are doo qes doo qes are built on uh kv allowing you to offload parts of your application to schedule work for future uh to run asynchronously also you know what would really work well if you just use a real language which you wouldn't uh you could process like 10x as much stuff anyways with two do simple apis with zero configuration or infrastructure to maintain and q pushes new messages into q uh guaranteed to deliver immediately or at a time in the future listen q handler uh used for processing new messages from the queue okay awesome web scale trademark that uh you know how you web scale you just use more machines i you know i was playing with react and i was rendering like a 100 elements on the the server and i couldn't get the thing to exceed like four rps and these weren't complicated elements okay it was more than 100 it was like a thousand but nonetheless it was like four how can you justify owning a machine and get four okay that's crazy okay four since qes are built on dto kv it uses squeal light let's go squeal light turo # ad uh when running locally and foundation db when running on dino deploy for maximum availability and throughput running qes on dino deploy is optimized for performance dino deploy automatically spins up v8 isolates on demand and dispatches messages when they're available for processing your application code simply listens to new messages with listen uh q hand uh handler and dino deploy handles the rest i mean i love this all these ideas it's one thing that's really cool about something like javascript is that you can literally just take code eval and it runs right this is why you can do these things right this is why all this stuff can just exist you can just launch a new isolate and bada bing bada boom you're just running more stuff uh but man when i read this though it does feel a bit like gluttony and what i mean by that is that for you to launch like even startup dino startup bun startup node it takes like 40 to 50 megabytes of vmrs just to like to do a while loop so it has to like make all of this stuff happen then it handles something and then it goes away serverless just seems crazy to me just saying okay maybe i'm crazy just feels like a lot uh doo cues guarantee at least once delivery for most inced messages the listen q handler will be invoked once in some failure instances the handle the handler may be invoked multiple times to ensure delivery it's important design uh to design your applications to ensure duplicate messages are handled correctly you can also combine qes with kv atomic trans transaction permitivity okay get a little bit of that get a little bit of this do a little bit of that not enough balance hit him with an atomic check for that get the balance set the balance and cu this thing and q that thing commit it uh you can also update uh dino kv state with your listen q handler i mean this stuff is really convenient right to have to have so much architecture just build directly into what you're using i think it's pretty nice that seems pretty nice you can also update dino kv to listen to your uh listen q handler for instance if you want to ensure that it updates on each message is performed only once you can add this q api and kv atomic transactions all right listen nuns get one of these uh equals null this message has already been processed why not just add that as like an option to the queue right why make somebody do this why don't you just have like an insure once anyways whatever uh all right do a little bit of that we've already seen this one there we go a little nuns random iid atomic check and q set sum commit boom does it work without the cloud i assume you have to have some sort of back end to this one would assume you need a back end to all this stuff additionally if you're a listen uh q handler throws an exception the runtime will automatically retry the call to the handler again until it succeeds or until maximum retry attempts are reached if maximum attempts reach default is five are reached the message will be dropped that seems fair cues are useful for scaling applications by o servers to offload asing processing or uh and schedule work for the future yep uh scheduling email notifications great example that's like the classic right everyone's heard of this classic exactly once is surprisingly difficult well they they claim they have it solved right here they claim it's solved right there uh scheduled email notification sometimes job or task uh that's initiated by your user may take time enough time to where you don't want to make them wait for the task to complete response or there's uh uh there's no need to send them a response this is when you can offload work to cue your uh server or app responsive to your user okay here's how you do it all right do a little listen q welcome email send that do that awesome and q great and q awesome bam bam reliable uh web hook processing another extremely common example for uh qes on the web through web hooks here's an example of oak and q's to handle web hooks asynchronously all right we get a little application we do a little listening to process web hooks we have a router we post web hook we cue this web hook body do something get a status application routes allow methods listen okay so this is when we get the little q back okay cool and then they just give more examples let's see what the pricing is what is the pricing because this is a big one as you explore the capabilities of q's it is important to grasp the cost implication q's are uh q has no specific cost of its own but rather charge in terms of doo kv operations and dino deploy request for listening specifically in queing a message each in queed action translates into a kv operation uh every received message entails a kv right and a single request charge this transparent pricing structure ensures that you'll only build for the operations you use i wish they showed us what those prices were i'm just curious what what what what is it cost what does it scale to how big can you get before you're starting to pay a decent amount of money right $5 a month five is that the same as an amazon twitch prime okay i this is cool i mean i like i like that they're doing like i mean i like i like these things right i like seeing uh uh technologies adapt and make cool stuff right like i appreciate this uh again is dino ever going to be a thing is it starting to become a thing i just have my big doubts because again i i say this about every new javascript everything which is what is it offering dino seems like it's trying to put itself into the place of uh infrastructure kind of like nextjs but they're doing it as like their own service even tied to the runtime itself and so they're just trying to make it so that you can just start using all this stuff right away obviously some of the dangers is if you want to get off of it building an entire product around it could be difficult right it could be difficult but do you need to get off of it your zero user app probably don't need to get off of it probably can use it for a long time vendor lockin real vendor lockin is real but vendor lockin is always real and what i mean by that is one reason why i don't like this argument is what's the alternative you raw dog amazon well what's the problem then your vendor locked into amazon it's really hard to make some sort of vendor non-locked in solution you know what i mean like what are you going to do make something that can run on both google comp uh cloud compute plus can run on amazon plus can run on azuar right that sounds hard hey thank you danish produce appreciate the five gifted subs like real talk it sounds really hard as you are google cloud compute amazon right pricing okay here we go uh kv storage free 1 gig nice 5 gigs okay okay oh five gigs then 50 cents a gigabyte okay interesting uh read units a day 15,000 not very many but again your zero users can easily scale here easily scale here rights okay you can definitely do a lot of those then $1 per million okay interesting uh and then remember each one of these caus to wrs kv is key value number of of db regions that's also interesting turo i think t see the pro dino's interesting because dino's competing on all all sorts of different they're competing on many axes right like this is like a direct competition of going against amazon maybe they just rap amazon but it's like they're they're going directly against it right my guess is they just rap it so they're not not really going against it they just give amazon free business um also it seems interesting max monthly usage $250 oh interesting so you have to go on a custom plan if you do how many that's not i mean that's not that much right that'd be aund that'd be i guess that's 100 million that's a lot okay never mind that's a decent amount you could make it pretty far here you can make it pretty far i don't know where they i don't know where they they live right rap amazon i know it's foundation db but where where are they putting it all right are they still hosting it and running it on amazon so it's like is amazon ever actually losing i don't know i have no idea right this is required for a to-do app in 2023 absolutely every to-do app needs to be able to have an sns sqs style q listener as to-dos come in because i mean what happened if you get millions all of a sudden right what happened if all of the sudden you went from none and now you need 10 million people right you need to be able to handle it it's very important okay it's very important because your to-do app is the greatest i've seen many to-do apps your to-do app is the greatest the greatest to-do app i've ever seen most eloquent most on time greatest to-do app uh hey the name is i really am still just curious what is the cell for dino right because you're still just v8 but with a slightly different runtime than node in which you're effectively selling the runtime experience like are people actually really leaning in are people really doing it is it really actually working or is it not i don't i don't know i'm actually very curious is dino growing in adoption or is it not it'd be kind of neat to find out i'd be very happy about that like and subscribe again