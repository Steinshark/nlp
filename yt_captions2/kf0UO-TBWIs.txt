how's it going everyone in today's video i'm going to be showing you a bit of functionality that's incredibly useful especially for testing imagine you have this scenario where you have to generate some random numbers maybe it's for a game maybe it's for some sort of model your training and you want to get consistent results back so you can debug it much more easily well at the moment if you were to use a module such as random you would get random results back each time and that's good because that's exactly what we would expect but what if i told you that we could easily reproduce these same results with a given seed just by doing this that's right we're using a context manager here to give our random number generator a seed of 42 this time each time we run our code we're always going to get back the exact same result and what's nice about this is that we can easily remove this and bring it back whenever we want to perform this test and it's only going to use this with the code that's encapsulated in the width block which is quite cool otherwise if we were to copy one of these lines and paste it outside it would always give us back a new random number because it's not inside our context manager but yeah next i'm going to show you how we can actually build this from scratch so what we're going to do is get rid of all of this and get started by importing context slip and we will use this to simplify the process of creating a context manager after that we will import random for random number generation and from the typing module i'm going to import generator and any next we can use the decorator at context. context manager to create a context manager from a function or from a generator and here we're going to call it rand state for random state just as we used in the previous example and that's going to take a seed of type integer or none and seed can take many other types such as string and bytes but i'm just going to specify here that they can only use integer you can change that to whatever you want if you want to provide other types of seeds of course but that's going to be set initially to none and it's going to return to us a generator now before we do anything we're going to grab the current state which is going to be a tuple of type any and it can have an unlimited amount of elements and that will equal random. get state and that's all we have to do there because what's important is that we grab the current internal state so that we can restore it later next we're going to use the random module to provide a seed and the seed is going to be the seed that we specified up here then to actually make this work we're going to call try or we're going to type try and we're going to yield the control back to the caller and it's also important that we call finally here because no matter what happens we're going to want to set the states to the state that we had up here and in other words we're restoring that inner state and believe it or not that's actually all the code you need to use this magic snippet of code so next we're going to create our if name is equal to main check and inside here we can type in with random state and set that to maybe 100 and this time we can call print. random. range or random range and set that to a range of zero to 100 then i'm going to duplicate this and i'm going to call random. random and outside of this we're going to print something random such as random dot random integer and that can be up to let's say 100 just like we had earlier so now we have a lot of randomness happening here but here we're going to have consistent randomness and that means that when we tap on run this time we're actually missing something because we can't just have random integer with a single number number so we're going to pass in zero in front of that but the next time we run this you'll see that each time we run this we're going to have consistent results for the first two and a random number for the last one because this will not use the seed that we're using from our context manager so yeah as i mentioned it can be very useful for testing especially if you rely on consistent results for debugging it's pretty cool because all you have to do is add one line to a block and you're going to be able to get consistent results back from your random number generation in that specified block it was actually just that simple but before i conclude this video i do want to give a huge shout out to alice she's the one who actually came up with this code i tweaked it a bit to include a few type annotations here and there but otherwise she's the one who created the context manager and actually the whole concept of this video she also runs a blog which covers a lot of the obscure functionality that you can use in python i absolutely recommend it if you are interested in learning more about python or getting a deeper understanding in python it's a bit more advanced than the stuff i usually bring on this channel but i really recommend it so i've left a link in the description box down below in case you're interested in checking out alice's blog lots of cool python content there but yeah otherwise with all that being said as always thanks for watching and i'll see you in the next video