hi everyone some algorithms can be quite tricky to debug without generating diagrams to get a visual understanding of what's going on but this can be a bit of a pain to set up because in order to view the diagrams in the editor you'll typically have to turn your method into a cur it in and add in breaks so that you can step through frame by frame to try make this process a little bit easier i've been working on a tool which essentially lets you run your code is normal but record frames that can be played back in the editor afterwards so as an example i have the setup for an implementation of quick hull which is just an algorithm for finding the convex hull of a set of points in unity i'm going to run my test script which generates a bunch of random points and feeds them to the quickl algorithm now if i want to see the diagrams that were generated while that code was running i can simply add a debug viewer into the scene and use this to step through a frame by frame if we can see at a glance what the algorithm is doing at each step then it should be relatively easy to figure out what's happening when things go wrong all right so that's what the tool is for i'd now like to walk through an example of actually implementing this visual debugging into whatever code you're writing so this is the algorithm that i'm going to use for my example it's just a method that takes in an array of points and loops through each pair of points to find the pair that is closest together so to begin with we can add the name space visual debugging and then we need to save visual debug dot initialize at the start and at the end visual debug dot save okay now for the first frame i just want to draw all of the points that are passed into the method yeah so i'll start a new frame visual debug begin frame and i can add a description to the frame so just call us all points and i want these points to remain on the screen i don't have to keep redrawing them every frame so i'll just set the keep in background bool to true and then we can say visual debug dodge draw points i'll pass in the points array and i'll draw these with a radius of say 0.1 in side the for-loop i'm going to start a new frame the real debug begin frame i'll just call this compare distance and i also want this to be kept in the background i'll then start by highlighting the current point i in say reg so let me first set the color with visual debug set color and here i'm gonna call the colors class which is a class in the visual debugging namespace and just get light red and then i'll say visual debug draw point and i want to draw the point with an index of i with a radius again of 0.1 i'd like to draw a line between that point and the point with an index of j so i'll say visual debug dot draw a line segment and pass in points i and points j okay so let me save this and see how that's going so far so i'll wait for her to compile and just quickly add a debug viewer scripture and then i'll run the test example script and now we've got a bunch of frames in our debug viewer so we can step through these here's the first frame with description all points and i can go to the next highlights in red and draws the line and so on now i only want the current line and the current point to be drawn in red if it's already been checked i'd like it to just go to a dark gray so what we can do is when we set the color can add a second color a background color which i'll set your colors dodge a very dark gray and this will just make us a letter when this frame becomes a background frame then it will use that color instead of the first color so if i save this just once again wait for that to compile and run this again and you can see that working nicely now i would like to see the closest pair of points that it's found so far so let me just add to this frame visual debug dot draw line segment and let me actually draw this with a label so the start and end point of the line segment will be closest point pair 0 and closest point pair 1 and then for the text i just want to use the best distance and let me just convert that to a string i'd like to use a different color for that so i'll just say set color and maybe colors dot light green ok so let's have a look at that now i'll run this and go through here we can see that this is working nicely but i only wanted to show the current closest pair not the history of all of them so going into the script we could of course do this by beginning a new frame over here one that doesn't get kept in the background like this one but another way to do it would be to say visual debug dot don't show next element when frame is in background and as i tried to describe with this rather lengthy method name this just means that the next element that gets drawn to the frame won't be shown when that frame is in the background at the end here i'd then like to make one last frame just to highlight the closest pair of points so i'll call begin frame and i'll just say finished in the description and then i'll set the color to carlos dot light green and i'll say visual debug dot draw points and i'll pass in the closest point pair array here and let me make these a little bit bigger than the ones before so maybe point one five and then i just want to redraw that line segment with the label so just copy that from here to there okay let's save that go into unity and once this compiles just run this again and if i go through these frames quickly we can verify that the algorithm is working correctly it's never checking a pair of points more than once so anything weird like that and we end up with the closest pair here highlighted in green now one thing that is worth discussing is how to remove this debug code once you've finished debugging now it will be stripped off automatically when you create an actual build of the game but you might not want it slowing your code down even just in the editor so the approach i recommend is just at the top of the file to define something like debug example algorithm and then we can put all of these debug calls inside of an if directive so if debug example algorithm and then end if and just do this for each of these debug blocks like so and one last one down here alright so then if you are done debugging you can simply comment out this definition here and you can see now this debug code will no longer be compiled okay so that's all i have to show for the moment there's a link to download the project in the description i hope some of you will find it useful until next time cheers