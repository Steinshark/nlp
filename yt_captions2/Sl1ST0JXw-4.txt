wait so how do i take it off now ah i've been in the market for a new smartwatch recently because the one that i have makes me look way too cool instead of buying a new 700 smart watch i decided to use an arduino i had laying around the house which cost me about 20 bucks i figured i could use the array of 8 by 12 leds to display the time which i could pull off the internet using the esp32 over wi-fi to power it i could use an external power supply like a battery and uh yeah we should be good to go to get started we'll need a source of time and preferably one with less ads luckily we can do that pretty easily using the esp32 that's on the arduino this board has a full ip stack and an sdk that allows us to create udp packets so we can send an ntp request ntp being a network time protocol not nacho time protocol which got me laughed out of the dmv anyway the esp32 stk for arduino makes this really easy so all i have to do is initialize a buffer for our packet data and free a udp packet in that packet we'll set it all to zero and set some ntp specific data like what stratum we need the polling interval of our clock and then set up that packet to go to our ntp server on port 123. we'll send the packet to the server and wait for a response for a second and if we get one we'll clear out our led frame space and read the udp data now i'm going to be honest i stole this algorithm off the internet all it does is it converts the data from our response into unix epic time or the amount of seconds that have occurred since 1970 january 1st which i'm pretty sure is the day that linus torvald rose from the dead anyway using the arduino serial monitor we can print those out and see okay cool it's 723 but now we have another problem how do we convert that hour and minute into a format that we can use and display on the led matrix now the arduino led matrix has a really nice api where you can draw predefined pictures but we have to put numbers on this display and manually bit banging numbers is kind of complicated it took me a while to figure these out but luckily the arduino ide has an led editor online where you can create cool animations like this and actually output them as code this sequence of numbers is the numerical representation of an animation that i'm going to use to show when we're waiting for our ntp response and here it is kind of cool just three dots going across the screen now for the clock itself i wanted to do what is called a bitmap or a literal map of single bits that represent the pixels on the led screen this gives me more granular control that i can use to draw exactly what i want on the screen i use the led matrix editor to kind of help me out and figure out what pixels i need to illuminate but eventually wrote functions that account for creating a single number on the screen here for example my set one function sets the specific values that need to be turned on for the number one to appear in the bitmap and so when i render this bitmap the one does appear but i have to be able to display four digits so how do i do that in a way that is good modular code now i could write code where i have have multiple functions per digit like set one at one set two at two etc but this code absolutely sucks it would become extremely hard to maintain there's got to be a better way well by adding a position variable into my function i can have the x value be offset by three to account for the four possible digits on the led display by doing this i can use the same code in positions 0 1 2 and 3 to display four ones using that same logic i created 10 functions that are able to display the digits 0 through 9 on the led display at positions 0 through 3. so now i can display an arbitrary time on the led matrix great we're making progress so here we go 1719 a random time that i chose to prove that i could render arbitrary digits on the matrix but now comes the hard part actually writing good code i have to take the hours and minutes from the ntp server and use that to determine what function to call to display our digits on the led matrix now i could do it this way where i make an infinitely long list of if statements where i say if hour equals zero do this else if r equals one and but god i hate this kind of code so i'm going to do it a different way i decided to organize all the functions responsible for rendering digits on the display into a function pointer table where if you call the zero with function it renders a zero the first function a1 etc with this logic we can use some basic modulo math in index into our function pointer table by the hours one place the hours 10 place and then do the same thing for the minutes we'll render that bitmap to the screen and then wait 10 seconds and do it all over again set another ntp packet render the packet etc now there is a problem that if i leave my house and my wi-fi disconnects this watch will not work but luckily that won't be a problem because i have a good solution no i just don't leave my house at this point we have a pretty cool watch we turn it on and it shows us the i'm loading animation and then it renders the time and it'll automatically update every minute on the minute but this isn't really a smart watch this is a watch so i wanted to add additional features to kind of spruce it up and make it the real smart watch that i know it could be so i bought a 20 heart rate monitor off amazon and wanted to see if i could integrate it into the watch the monitor is pretty simple it has three wires ground power and signal it will output how much light it sees when this green light is bounced off your skin it uses the color green because obviously that's the opposite of blood and it can figure out how much light gets absorbed by your blood and you use that to figure out your heart rate the end result is when i put this on my wrist the device outputs an analog value that i can read with the arduino to get a sense of how fast my heart is beating now because all the sensor is doing is reporting the amount of light that it sees i have to implement a little bit of logic to actually convert that to beats per minute so we start out by measuring the time currently on the device before we measure 500 cycles for every cycle we measure the current amount that the sensor sees and if it goes over some threshold and we haven't seen a beat yet we consider that one beat and then say that a beat has been seen and then if it goes below that threshold and we have seen a beat we turn that trigger off basically this allows us to see the top and bottom of a heartbeat graph from there we measure how much time has passed and how many beats that we've seen over the course of that duration and convert that to a beats per minute value from there we convert our float beats per minute to an int beats per minute and then render it on the device just like we did with the clock we'll do this every five seconds while the ntp packet comes back from the server and of course this wouldn't be a fun project without setting a heart and finally the build begins found this strap that i put through the arduino case and i can use that to actually pretty cleanly put it on my wrist now i need to put the battery somewhere so duct tape should probably work pretty good if you plug it in we wait for it to connect and there we go 1256 is the time and i get 57 beats per minute i'm actually really surprised how accurate this heart rate monitor is now all we have left to do is go try it outside oh yeah right there's no wi-fi okay anyway guys i had a blast making this video if you enjoyed this and want to see more builder videos leave a comment and let me know then go watch this other video where i built something wacky all right