hi, i'm james murphy and this is mcoding. this video is about explicitly inheriting from object and whether or not you should do this. first off, have you ever seen this before? comment below and let me know because it's actually becoming increasingly less common. if you haven't seen it before, here's a few examples. this one is a checker class from pycodestyle. here's an iterator from the six library. six is a compatibility library for code that's supposed to work in python 2 and python 3. and here's a base immutable object in the very popular sqlalchemy library. so, why did these classes explicitly inherit from object? don't all classes inherit from object? yes, in python 3, all classes inherit from object whether or not you explicitly inherit from object, or use empty parens, or use no parens. with the exception of the names, a and b generate exactly the same bytecode. c technically generates different bytecode because you could do something horrible like this. because python is so dynamic, it actually allows you to do this. and in this case, c would inherit from int. but outside of that absolutely cursed behavior, a, b, and c do the exact same thing. in all of these cases, object ends up as a base class. the preferred way of writing this is the way that class a is written. it's the shortest and doesn't contain any redundant information. so, why? why do some people explicitly inherit from object? do they think it does something different? do they claim from the python zen that explicit is better than implicit and apply it to this case? well, actually no. the main reason you might see this is because in python 2, these three were not actually equivalent. way back in python 2, there was a difference between so-called new-style classes and old-style classes. if you didn't explicitly inherit from object, you would get an old-style class. this explicit inherit from object was introduced in python 2.2. that was released in 2002. way back then, types and classes were actually different concepts, which is no longer true in python 3. and built-ins like int, float, and list didn't inherit from object. they were just their own built-in types written in c. since they weren't classes, you couldn't inherit from them. and it was just really confusing with classes and types being different things. but python 2.2 marked the start of the unification of the concepts of types and classes. that's where this base object was introduced and where all of the built-in types were changed to inherit from it. of course, you don't want to break any old code or change what it does. so, that's why this explicit inherit from object was added instead of just changing the default behavior. changing the default behavior to automatically inherit from object was eventually done in python 3. that's one of the many backwards-incompatible changes that happened in the 2 to 3 transition. but before python 3, you had to explicitly inherit from objects in order to make one of these so-called new-style classes. new-style classes included lots of new features that we take for granted today that old-style classes didn't have. they added the descriptor protocol so you could use things like property, staticmethod, and classmethod. they added support for dunder new and for metaclasses. and they introduced the method resolution order or mro, which allowed for things like super. new-style classes were better than old-style classes in basically every way. so, that's why the best practice develop that you should just make all of your classes inherit from object. but python 2 has reached its end of life. as of january 1st, 2020, even critical security vulnerabilities in python 2 will no longer be fixed. of course, the vast majority of us moved on to python 3 many years ago. but this old quirk while completely unnecessary today still works and that's why you might see it in some older projects. it's just a relic from the past. i'm james murphy. hope you enjoyed. thank you as always to my patrons and donors. if you enjoyed the video, please do subscribe. and if you especially enjoyed the video, please consider becoming one of my patrons on patreon. don't forget to comment. and as always, slap that like button an odd number of times. happy coding and see you next time.