about 10 million secrets were leaked in commits on github in 2022 which is really bad that's why today i have five tips for you on how to reduce risk dealing with credentials and making sure that damage control is easier before i start with the tips make sure you subscribe to my free newsletter by going to aram codes.com i share many practical tips related to software development interesting blog posts and articles to keep you up to date on what's happening in the industry the first tip is to use environment variables i have an example here a main file that simply uh interacts with the open ai api just ask a question and then prints the response but you can see that open ai expects an api key to interact with her api and the way i did it here is that i store the actual secret key in a n file and then i use the n module to load the environment variable so we can access them in the script the nice thing about this is that for example later on you want to deploy this to the cloud then you can replace that n file with simple environment variables and then that's also going to work in exactly the same way by the way the reason that n file starts with the dot it's because of unix conventions and in unix systems the dot means that the file is going to be hidden from regular directory views if you don't have ault nile you can also supply environment variables directly when you run the code you can simply write them in front of the command like so and of course the key is incorrect we don't actually have a hello open ai api key but just to show you how to do this however this is kind of annoying because then every time you want to run the program you have to supply all the keys in front of the command now instead of writing the environment variable before you run the command you can also export the variable like so and then when you run this then it's going to use this key and then you don't need to type it every time you run the program but obviously the better way to do it is with an actual n file now final thing that you need to do if you use n files is to also define a dogit ignore file and there you can put the n file in any other files that you don't want to be committed to your git repost story and that's going to make sure that these files are going to be filtered out automatically and you don't have to worry about them that they end up somewhere in your repost story the second tip is to not commit too many changes all at once if you change like a 100 different files and then you commit them all at once to your git repository in a single commit and it's going to be really hard to track what you added especially if you have a code review process in place then committing like hundreds of files is going to be really problematic because a code reviewer might not have the time to go through all of the little details whereas if you do smaller changes this is much easier to manage the risk of putting too many changes in a single commit is that you may accidentally put credentials in the files and then you're not going to see see them because there are so many changes by the way talking about kit are there any commands that you use regularly that you see nobody else using at all let me know in the comments the third tip is that you should follow the least privilege principle so instead of generating a token for an api that can do everything just limit the token to the scope that it can actually work on so if it only needs to read resources from the api don't give it right access because then you can potentially use that token to screw things up and secondly if if it leaks then at least you can only read things with it which is already bad but it's it's not as bad as also being able to write things and as a consequence this leads to another principle which is you shouldn't use one token to rule them all create different tokens that allow you to do different things in the application for example if you use an email sending api and you have multiple services that use that give each service their own credential that way you can easily replace a credential if you're afraid that it might have been leaked without affecting the other services the fourth tip is that you shouldn't share unencrypted credentials in plain text this is especially an issue if you work with the team of developers and the various people in your team need to use the service or need to develop on the service and then of course they will need the api keys make sure you have a proper mechanism for sharing those things so don't put them in slack or in teams but actually use a password manager like biten this is what we use at iron codes and the final tip is that you can use credential scanning tools in your cicd pipelines there's several options like truog and git leaks that help you scan for credentials in any code that you've committed so what you can do is insert a tool like that in your cicd pipeline and then if it finds a match with a what could possibly be a credential it's going to stop the pipeline it's going to stop the deployment now unfortunately at that point everything is already pushed to the remote rep story so you're sort of already too late but what you can also do instead is use pre-commit hooks so you can insert these kinds of checks before it actually goes to the remote rep post story i'll do a separate video covering that in more detail so final thought you have to make sure that in your system that handling secrets and credentials is easy because if you make it hard and complicated then actually that introduces a much bigger risk which is that developers are going to take shortcuts i hope the tips in this video help you minimize the risk of leaking credentials and give you some hands-on tips for making that easier now mention ccd pipelines in this video if you want to learn how to set that up with github actions check this video next time thanks for watching and see you soon