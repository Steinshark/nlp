let's do this every time i make a video on php which is basically all the videos i make i get the exact same comment dead php sucks all the time every time and most of the people that think php is dead haven't looked at php since like 2012 which is okay so maybe he is saying exactly my experience which is i haven't looked at php since 2012 2013 i think the last time i kid you not i was such a php dork that in 20 13 there's get there's go i mean node was technically taking off i started a new project i this was back when i was trying to do startups i was always trying to do little tool startups and all that and uh i started a new project using tortois svn and php okay 2013 i did that in 2013 i want you to know that right now because if you don't know that you just don't understand how painful my life was i didn't know about all these cool things you know this is back in back in that day when i wasn't i wasn't in my exploratory phase but nonetheless tortois svn in the day of get 45.4 came out and listen things were a lot different in 2012 i had just graduated college a degree in accounting for some reason this guy was still the president over here this mov many and honestly pretty good movie our music okay first off can we just agree that looper was actually a pretty good show okay whatever that guy's name is joseph gordon wyatt levit something like that i like him okay i loved him on third rock from the sun okay i loved him there tommy i believe was his name and i i love it now okay yeah i like it bruce willis okay actor but joseph gordon wyatt levit whatever his name is loved him went through this real weird hey ho phase where we were always shouting hey ho in the songs hey i think it's safe to say that a lot of i'm no longer an accountant and php no longer sucks i'm going to run you through a bunch of the language changes that have happened since around 2012 when php 5.4 came out and stick around to the very end because we're going to talk about types we got to talk about type safety every time i talk about php people just say yeah i just need types we got to have types what about types do you guys have tipes like yes this is me i'm this person i'm literally that person are you winning son are you winning son no i am not winning son i must have types it's the same reason why i didn't choose elixir as my first functional language but instead o camel because o camel is a very strict beautiful static typing language and so this is like this i've always had this problem uh i do want to follow up on one more thing he said that i was such a php fanboy and that was during the height of my like maximum hours i worked per week i was doing like 80 hours a week of php 5.4 or whatever it was i was into php so i'm actually excited to see the new things that have happened to php since then and can i like feel that it's a good language i don't know i don't know i'm willing to have my mind remain open for this can't leave my types we've got types so i'm going to show you all the different types you can do at the end let's take php beat javascript to types you should feel bad about yourself if the language in which the original author said it should have never been a language was able to beat you to types you should feel bad about yourself okay you came out like this just feel bad take a look at these changes going all the way back to 2012 for this one php 5.4 included traits so instead of writing the same method body over and over and over or instead of abusing inheritance we now have composition so you can have traits and include those in every class what oh sh i think i like php oh my goodness what favoring composition over inheritance php is actually better than javascript i can't even believe it it's real it's real look i even put my name in there what a nice guy short array syntax imagine writing out the word array like a caveman when you can just use square brackets short array syntax allows you to use square brackets thank you very much let's go thank you we now have array destructuring it used to be that you have to assign an array to a temporary variable and then reference those elements by index if you wanted to assign them to other variables now you can just use array destructuring and d php actually is it's going to is it really going to be a good language this trait thing just blew me away and now they're just doing basic conveniences for every developer this is good this is good like php welcome welcome to modern programming i like what i'm seeing directly assign the variables from the array we have first class vartic functions so you can pass as many arguments to a function as you want using this i don't know how i feel about vartic arguments i keep going back and forth on them like if they're a good idea or a bad idea i never know do you know what i mean like do i like them or do i not like them because ultimately whenever i get to vartic arguments i almost always want to use a function with an array as ao or a list as opposed to actually spelling out the arguments one by one i almost never actually want vartic arguments like almost never almost never there because any anytime you're doing something programmatically you almost always this right here right you almost already have the nums array and now you have to dot dot dot yeah print f is a good example where it's really really good but print f is unusual you don't really use like formatting functions i'm on for vartic stuff i can completely concede that ground and things like formatting or string uh uh like rope string generation anything like that totally on board with that dot dot syntax speaking of dot dott dot syntax you can use that same syntax to spread or splat an array into an argument list for a function ddy you use that same syntax to spread or splat an array into another array so if you want to take all the items from one array and put it into a second array you can do that again this is very very good also very very interesting uh because this is a great way to create a lot of memory on accident that with this spread operator we now have generators if you want to do something memory intensive but in a memory efficient way you can use a generator so if you need to read a huge file you don't have to load that whole file into memory you can use a generator to yield it line by line by line if you ever need a new class but can't be bothered to make a new file who has the time you can create an anonymous class an an let's go i love that i love this idea that that classes are just as much first class citizens as functions this is great this is great because there are times where you just don't want to do that and you really just need this right here this is great this is actually great wow php has aous class can implement an interface okay i you know we're pausing this for a quick second i'm hopping over to twitter and maybe php isn't all that bad anymore i am i'm we're shook okay we're shook right now we're shook oh no just like every other class so this is a great use case for when you need one stupid little implementation but you don't want to make a full class for it yeah this is a big one i need you to pay very very close attention we now have trailing commas in function calls so look very closely at email look at the very end of the word email and watch what's about to happen oh oh my goodness oh boy i actually just added a brand new emote just last night there you go thank you can we get some ws in there we need some wets that this is just what i want this is what i want can we get some ws i i need i need it i feel it this is wet ass programming going on right now oh my my goodness oh my goodness what oh love it i love it i love it amazing we now have trailing commas in method calls php rules this one's for all okay well okay trailing commas ain't making php rule but i okay i'm on your team though it's pretty nice okay my javascript friends i know you love your arrow functions well look out friends we've got arrow function to rs honestly are well they're they're a little bit worse i don't like the fn at the beginning to denote that it's a function but hey we were i actually like the fn at the beginning real talk i like that i actually i i've never really loved the aros syntax i like the idea of it being very consistent i like this this is perfectly fine with me this is beautiful work with what we've got we have short short closures or arrow functions php7 brought us the null coalescing operator so we can say the username is equal to the username unless the username is null in which case we'll go with guest so we have this nice neat null coalescing operator but we also have the null coalescing assignment operator which can shorthand all of that and say if the username is set leave it alone otherwise set it to guest i understand what a php gasm is i think i just had multiple php gasms in a in a matter of minutes okay i don't know what's going on here but we're gming okay whatever it is it's happening right now it's happening speaking of nulls we used to have to do something like this we would pull the birthday off of the user and then before we were allowed to call a method on birthday we would check to see if birthday existed yep you don't want to call a method on null but now we have the null chaining operator and we can just say if birthday is not null call the format function on it if it is null just stop the chain right there we have named arguments now it used to be that if you wanted to skip over an optional argument you had to leave a null in the position of that argument but now we can just name our arguments and pass them in any order that we want php has attributes now which in other languages are probably called annotations but you can add an annotation i actually like this okay i like that i don't care what you have to say okay you come in here with your oh php is becoming c okay first off php doesn't have a history of triple e actions slash they didn't give us the world they didn't give us vs code i mean they did give us wordpress which one could argue is worse than vs code but nonetheless look this looks great okay i love this kind of stuff this kind of stuff to me is fantastic i've never had a huge problem with this uh because you know at the end of the day you you have this you have this whole problem with like go you have to like specify everything and it can kind of look a little you know i'm over here maybe my go is not that great yet i you know i but you know this kind of stuff where you're just like doing this you know i i don't know how i feel about that either you know what i mean to a class or meage or an argument or property you can add an annotation to almost anything and control a little bit of behavior that way keep this in mind we're going to look at this again in a second this one is just a huge massive improvement it used to be when you were catching an exception you had to have a variable for that exception even if you weren't going to use it even if you were just simply going to return false you had to have that little e in there now look at this watch this watch that e amazing no longer needed if that's not reason enough to switch to php i don't know what to tell you remember those attributes that i told you about literally two seconds ago there's an attribute that will will mark an argument as sensitive and redact it from all stack traces so you don't accidentally end up logging something you shouldn't at a language level very okay that is genuinely awesome this is genuinely awesome this is actually okay so this is one of those things that i i i i would say is is super cool that is super cool can we all agree that that is out of out of this world this is this is great weird and probably very slow maybe uh maybe it's only slow on the exception case one could imagine that it's slow purely on the exception case right uh and it has no real world imp implications on uh on performance in any sense cool look at this switch statement it's hideous it's huge we hate it what we're doing is we're switching on a status code and then in the body of every status we're setting a message variable there's got to be a better way there is a better way we can use the match statement now and assign the message message variable to the result of the match statement and look at 200 300 we can have multiple matches return the same thing this is a much more compact much more readable way to write a switch statement that assigns a variable we've got weak maps now did you know that php has weak maps you can set an object as a key in a weak map where you can't you can't do that in an array and also weak maps are way better for memory because they'll get garbage collected when there's no references to that object anymore php now has enums so you can have an enum class where you delineate the cases inside the body of that class and those enums can also have a value so if you want to use the words draft published and archived in i mean this is this ain't that that impressive okay you know like you've been like i've been having nothing but i' i've had however many section gasms that are available and then you just hit me with a basic enum this this ain't it okay this this this a this ain't impressing me right now your codebase but you want to use the value use 1 2 and three in your database you can do that with a backed enum that's not all that enums can do you can add methods to your enum classes in this case we'll add a method that gives a userfriendly display to each of the using the match statement again and we're just matching against this and all of our cases are our enum cases one of the great things about having i mean it's still better than typescript enums can we all agree that somehow typescript enums are actually worse you know like at the the end of the day as much you want to talk about that enum that we just saw somehow it's still wors okay beast stop with your c it's not c it's php i love today okay birthday boy bisco by the way youtube you better wish bisco happy birthday in the comments okay i expect to see it i expect at least a hundred happy birthdays when this video goes out first class enums is you can now use them as typ hints so if a method is expected an enum you can hint that enum class and that way php will validate that the incoming argument is that enum all right here we go we're going to run through a bunch what does that mean validate uh i'm curious what that means if you just pass in any old in will it say hey i can't validate it or will it throw an exception if it doesn't match does it have runtime implications a little bit more curious about that last one okay so this is the big one this is the big one types types and more types ways you can add types to php first you can have typed arguments in this we say a and b must both be integers this is a scalar type hint you could also type hint classes or enums like we showed earlier you can have return types in this case we're saying it must also return an integer that makes enough sense if you're adding two integers together it should return an integer but not all numbers are integers some numbers are floats so you can also have union types you can say int or float rock on rock on on that one i'm liking that i'm liking that a lot and it can return an int or a float if you wanted to add more than two numbers together and you have a vari adic function you can also use types for that no problem let's move on to a class here we're saying that the argument input must be of type fu or bar this is the union type that we just talked about but you can also by the way i'm much more i like types on this side as opposed to the other side call me crazy but i like to read the type before i read the variable name as opposed to reading the variable name followed by the type okay so you know like rust go and typescript all have variables on that side whereas like c you know that's kind of what i grew up on was like c and java you know it's it's on the other side for me i've just always liked it i' there's some argument for it right that's all yeah yeah you're not crazy it cpp shill maybe uh type left uh stick in my brain yeah it does are you crazy called it come on pick you know it's just just just feels right you know what i mean uh you know and i also think that int array is better than an array of int you know i i i just don't i you know that's one thing about go that always kind of irks me a little bit but you know the fact that go compil super super fast i don't give a i don't give a damn you know what i mean if you can if you can compile an entire project in zero seconds you you know what tell me how you define your ins i i'm just fine with that you tell me and i don't care like right like i have various levels of what i care about and that ain't it uh hey thank you king i'll say thank you in a second we're kind of you know we're we're like in the middle of something okay you know what i mean you know what i mean dog okay it's beast's birthday so i want you to say happy birthday to him have an intersection type where you say that the argument input must be of type fu and bar which is really helpful when you're trying to ensure that an argument adheres to more than one interface but you don't care what the type of object is as long as it aderes to food and bar you can do whatever you need to do you want to get even crazier if you want to ensure that input is fu and bar or it's nullable you can have a dis jun normal form type and i had to he's about to say i had to go look up that but a disjunctive normal form type that literally sounds like a disease you would be classified with with your doctor um it looks like you have disjunctive normal form type learn those words for this specific video you can have fu and bar or allow it to be null let's by the way pick right now is like actually it has pick i can feel it coming pick i know what you look at this uh that's something that will make your uh your balls fall i thought you going to give me some insightful comment pick i actually thought i was going to get an insightful comment instead i got this is g to make your balls fall so why you know this the benefit of doing things live you know what i mean look at another example we've been typing arguments but you can also have typed properties so if you look at this class see that the public title property is of type string and the public date property is of type date time now this is a little repetitive isn't it we've got the two proper we've got the two arguments in the constructor and then in the constructor we have to set the class level properties i totally forgot that you have to do two underlines for construct is that was that always true was this always true i just i i honestly can't remember it it's shocking that i could do something for 80 hours a week for multiple years and forget it this is a little verbose this is how we used to have to do it until the php gods introduced constructor property promotion and now you can put the visibility in your constructor signature you can say public string title and it will end up as a public property on your class this i actually do like that that t typescript also has this i'm not sure if that's a javascript thing or just a typescript thing but i've always liked i've always liked this i think this is very very good i don't want to have to specify things twice always been been a big fan uh c the c is called constructor promotion i don't love that you end up with an empty constructor body but i do love that it reduces all of that boiler plate if you want to mark a property as read only meaning that it can only be initialized once and then never changed there's a keyword for that you can say that a property is read only and you can do that in the constructor as well if your entire class is read only you can mark the class as readon instead of marking each individual property as only a lot of stuff has changed if you have by the way that actually is like these type of changes also allow the just in time compilation stuff to be much better right you can do a lot more with a language when you have more hints the more things you have the faster you can make it right the less you know about a language the less you can really do you have to like that's why in javascript if you ever look at the memory of any uh piece of javascript what you'll see is that there's all these hidden pieces of memory and they're like 30k 50k 10k associated effectively with every single function because every single function has a huge amount of assumptions being calculated and kept track of such that it can optimize it at some point right and optimization is a function of length of your of your function which is also bizarre right so as your function gets longer the more runs it has to take the more memory it takes to actually optimize it the more things it has to keep track of it's very very uh it's very interesting and so php with inside like typing and all that i think that you can do a lot more cool stuff with how fast it runs by simply knowing this information i love it paying attention you might think php is dead but alas it is not dead talk about speed every time i make a video people are like yeah php is so slow php between like 5.6 and seven experienced a 400% performance increase and then i think another 20% between seven and eight i heard you're supposed to talk to a doctor if you exceed 400% is that still true or or is that different now or you can go longer than 400% giggity giggity long as you say that is not as slow as you remember so if you need something like 50,000 requests per second you should probably still you should probably still not use php for that but look at me listen to me when have you personally needed 50,000 requests a second how many users do you have so that was so based that was like the most base take of all time right there that was so good that was so good dude just just get wrecked just get wrecked hp is fast enough it is fast enough for most of your use cases and if you need a specialized use case use a specialized language but the php of your is not the same as the php of today it is much much faster it is much much better and it is not dead see you i really liked some of the way the ways he said things i really like that he called it the php of your that was beautiful by the way go subscribe to aaron francis what a great guy not only is he a great guy great guy when i met him in in irl but also nice guy on twitter always super positive sometimes i think he thinks that i'm a little bit of a goober very nice guy go give him a follow good guy i like him um php plus htm x stream i'm gonna be doing golang because i'm cool uh you know i'm i'm actually cool but i could imagine that if i wasn't cool i would consider php sorry aaron for that that last part uh but but melky i get to do go to okay you can't go back to rust i don't want to go back to rust right now okay okay i did two and a half years of rust and i use rust like fulltime now or part-time and sometimes you need a break from what you're doing okay i don't want to be in the rust world anymore i want off that wild ride of rust okay o camel then but the problem with o camel is nobody knows what's happening when you show somebody o camel no matter how many times you hear in chat it's actually more intuitive nobody thinks that okay nobody thinks functional programming more intuitive and all these people that tell you that just have just drank so much kool-aid they cannot see the forest for the trees at all the name is i could actually like php a j