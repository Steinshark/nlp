hi everyone in this episode we in to begin the forming of sphere using noise to try and get it looking a little more planet like now completely random noise looks something like this and it's pretty much useless to us here what we need is some sort of coherent noise where the values change smoothly from one point to another to achieve this coherent noise we'll be using an open source implementation of the simplex noise algorithm you can download the file from the description okay so i'll start by adding the noise script to the project and then we're going to want to do some processing of the noise to get it to look the way we want so i'm going to create a new c shop script which i'll call the noise filter i'll open that up this won't inherit from mana behavior and here we could want to create a noise object which i'll just call noise alright will then have a public method returning a float called evaluate so take in a vector3 for the point at which we're evaluating the noise and then we can create a float noise value equal to noise dot evaluate pass in the point we've been given and now we can apply some sort of processing to this so for now i just want to take this value which is in the range negative 1 to positive 1 and squish it to the value 0 to 1 so we can do that by just adding 1 and then bring they're all in brackets and multiplying by 1/2 all right i'll then just return that noise value i'm not going to save this and go into the shape generated class this is eh want to have a noise filter i'll just call that noise filter and i'll assign it in the constructor here noise filter equal to new noise filter all right so now we can say float elevation is equal to noise filter dot evaluate at point 1 unit sphere and then we can finally return point on unit sphere multiplied by the planet radius multiplied and in brackets 1 plus the elevation all right let's save that go into unity and move on to the planet and once this finishes compiling i'll press generate planet and you can see we've got this nice blobby thing in front of us now currently we have no control over the shape beyond just the size of this here so let's create a new setup script called the noise settings i'll open this up this won't inherit from mana behavior and then i want the values in this class to shrub in the inspector so add the system dot serializable attributes here okay so we can now start defining some settings i'll make a public float for the strength of the noise set that to 1 by default then a public float for the roughness of the noise said that to 1 as well and let's have a public factor 3 for the center of the noise so we can move it around well that's the more things later but for now i'm going to save that go into the shape settings and the shape settings is going to have a public noise settings here alright and then the noise filter is going to have a noise settings just colette settings and we need a constructor to set that then over here we can multiply the point by a settings dot roughness because the further apart the points are that were sampling the greater the difference between those values will be and so we'll get a more rough terrain then we can just add settings dot center on top of that and finally we'll return the noise value multiplied by settings dot strength okay so i'll save that go into shape generator and here when we create the new noise filter will need to pass in settings dot noise settings and then we can save this and head back to unity it's gone to the planet object and once this compiles we can go into the noise settings and play around with this so i'll try changing the strength value and see what that does you can increase the roughness and you see how we get a more detailed bumpy surface and moving the center around you can see how this moves it and on the x axis along the y axis and along through the z axis now with these settings alone there's not that much that we can actually do because if we want to get some sort of interesting shape we need a fairly low roughness but then there's not a lot of detail and if we increase the roughness then we can get a lot more detail but we've lost our initial shape to solve this we're going to need multiple layers of noise which all get added together to give us our final result these layers will get increasingly detailed which is to say the frequency of the noise will increase how fast the frequency increases will depend on our roughness setting now the higher the frequency of the noise the less it should affect the overall shape of the planet so with each layer will decrease the amplitude of the noise how fast the amplitude decreases will be controlled by a new setting called assistance so i'm going to head back to the noise settings and here i'm going to add a public inch for the number of layers i'll just set that to 1 by default and i want to give this a range between 1 and let's say 8 then i'll add a public float persistance shall set equal to 0.5 which means that the amplitude will be halved with each layer and then i also want to create a public float for the base roughness i'll set that equal to 1 i'm going to increase the default value of roughness to 2 all right so i'll save this go into the noise filter and here i'm just going to start by selling this noise value equal to 0 and then we can have float frequency equal to settings dot base roughness and float amplitude equal to 1 then we'll do a for loop won't equal zero i less than settings dot number of layers i plus plus you can say float v is equal to noise dot avi at the point multiplied by the frequency plus settings dot center and then noise felt you can get increased each time by v + 1 times 1/2 2 here in the range 0 to 1 multiplied by the amplitude then with each iteration of the loop frequency is going to get multiplied by settings of roughness and amplitude will be multiplied by settings dot persistance so this means that when roughness is a value greater than 1 the frequency will increase with each layer and when persistence is a value less than 1 amplitude will decrease with each layer which is how we want it so let's save this go into unity go to the planet give us a minute to compile and then let's try increasing the number of layers i'll set this to maybe 5 and then we can just play around with the roughness base roughness and resistance values and see what those all do or maybe also just increase the resolution a little bit so that we can see the planet a little better all right now i'd like to head back to the noise settings class and in here i'm going to add a new public float called the min value i'll save that and go to the noise filter and here i'll say noise value is equal to the maximum value between 0 & noise value - that min value okay so if we save that and go into unity you can see that this min value parameter allows us to essentially make the terrain recede into the base fear of the planet now what we have here looks fairly nice as some mountains perhaps but i will try messing with the settings to get some large continents so maybe decrease the base roughness a little bit and to decrease these strengths and maybe i just play around with this min value a little bit and so you can see here we've got some nice continent shapes however we've obviously lost those mountains from earlier so it would be nice if we could define multiple noise settings and layer them on top of each other so i'm going to go into the shape settings and over here i'll create a new public class called noise layer and this will hold a noise settings scaletta noise settings and i think would be nice if we could toggle the visibility of a single noise layer so i'll also have a public pool enabled shall set true by default now this needs to show up in the inspector so i'll have a system dot serializable attribute share and then instead of the single noise settings we'll have an array of noise layers and i'll call that noise layers all right i'll save that go into the shape generator and now instead of a single noise filter we'll have a noise filter array collect noise filters and then we can set noise filters equal to a new noise filter array with a length of settings and arch noise layers dot length okay we then need a for loop to initialize all of those so if want i equals 0 i less than noise filters length i plus plus you'll say noise filters with an index of i is equal to a new noise filter and we need to pass in the right noise settings so it will be settings dot noise layers with an index of i dot noise a thickness okay now in the calculator point on planet method let's start by setting the elevation to 0 and then we can loop through all the noise filters so for int i equals 0 i less than noise filters dot length will say elevation plus equals noise filters with an index of i dot evaluate point on unit sphere alright so and i'll save that and head into unity wait a moment for this to compile and we should see our noise layers put me up here i'll give this a size of two all right then in this first layer i'll set up my continents so just make sure this is enabled and let's give this some values so maybe four layers a little bit of base roughness a little bit of roughness bit of persistence and i'll tweak the min value until we've got some decent looking shapes that maybe decrease the strength slightly and then we just rotate this so we can get a look at it i think that looks all right so then i will disable this which is not actually having an effect because i forgot to add that bit in the code so we only want to add at this noise filter to the elevation if settings dot noise layers with an index of i is enabled like so alright i'll save that go back into unity and so now when this compiles we should be able to toggle the visibility of this by enabling and disabling it like so okay so i'm now going to enable the second layer and set up some mountainous terrain here so i'll just give these some starting values maybe a little bit more roughness and a lot less strength and i'll increase the min value so that these are just poking out of the ocean alright so i think something like that looks okay so now i'll really so we get our continents back and let me just close this game window since we don't really need that and you can see this a little bit better than i also just go to turn off this selection outline alright so we have our mountains and our continents together but it looks a little bit weird in places because sometimes the mountain is just sticking up right out of the sea or it's sort of overlapping the continent and then just going out into the sea on its own so what i'd like to do is use that first layer as a mask for where the mountains are able to appear so i'm going to go into the shape settings and i'm going to add another bull to this noise lair class which will be whether or not the first layer should be used as a mask okay so i'll save that and go to the shape generator and outside the loop we're going to want to store the value of the first layer so that it can be used as a mask for any of the subsequent layers so i'll say float first layer value is equal to zero and then we'll want to check if noise filters not length is greater than zero and if it is then we can set first layer value equal to noise filters 0.28 at point one unit sphere and now that we're evaluating this first noise filter it would be a waste to do it again in the loop so i'll start the loop at i equal to one and over here i'll say if settings dot noise layers zero is enabled then i'll just set the elevation to the first layer value all right now inside the loop i need to create a float mask the value of which will depend on whether or not the current noise layer is using the first layer as a mask so if it is then the mask will be equal to the first layer value otherwise it will just be equal to one which basically means there's no mask since we'll be multiplying this by the mask value all right so let's save that and once this compiles i'm going to set the second layer to use the first layer as a mask and we should see the margins mostly disappear and now i will up the strength value and we can see them growing out of the continents now as you can see if we shift the center of the mountain noise they shrink as they head towards the ocean alright so i'm going to leave things here for now but we'll keep working on it in the next episode so until then cheers