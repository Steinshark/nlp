i think we're cooking i think we got something good going on here are you ready i've got a giant block of text here this is pretty much every single interview you've ever had in your entire lifetime okay it it starts off with the exact same phrase i got an entire i got a giant block of text here and you're about to get hit with some linear dynamic programming problem oh man this is gna be so good and what i'm trying to figure out is at what point are there four consecutive characters that are distinct what ian it literally is a programming problem not only that but it's also the advent of code problem from two years ago i did a whole video on it various various forms of different ways you can solve this hashmaps being actually really slow using an array is actually really fast in this situation and if you use array that's constant size you can actually reverse index look up stuff and it does it in uh it unrolls the loop even though you're going backwards it's very good very very good i mean by that if we look at the first four characters here those ones highlighted you can see that f f is repeated in that sequence of four characters so not what we're looking for yeah if i look further down the line highlight four characters you can see z is repeated again if we look at you know four more c is repeated there okay at some point in this file there's going to be four consecutive characters where all of them are distinct and that's the position i want to find and that's the answer i'm trying to look for okay let's take a look at a smaller example so i happened to know that the answer for this is 10 position 10 um so again i think this really is the advent of code question i'm very excited about this if i look at the first four here looks like n is repeated so i have to continue on i look at the next four n is still repeated look at the next four again and is still repeated rf nt so now we have a a place this is the first time where we've seen four consecutive characters that don't repeat themselves okay so what i'm looking for is this position right here where my cursor is so this is 10 i'm going to constrain myself to use vim in order to solve this problem i want everybody to notice i just noticed his t-shirt and that we're about to use vim no no we're using vim to solve it okay we're not using lua we're using vim okay vim and so my first thought was maybe i can write a regular expression to to figure this out long story short nope i could not do that i i think that's the start of every single failed programming exercise i'm going to try a regular expression for that one month later yeah it didn't work i thought i thought it was going to work think it may be possible it probably is possible possible so if you if you have a way of doing it with a regular expression uh let me know in the comments i would i'd be interested in knowing what that is so i had to get a little bit creative but that's that's part of what makes it fun i guess when you're doing these types of things and so here's what i'm here's what i'm proposing we can do i am still going to use a regular expression to solve this but the reason i think it that it wasn't working for me that i was struggling so much was that because everything is just all on one line and sometimes that makes it a lot harder yeah trying to come up with the right just the right regular expression because um it can be really i wonder if you could do some sort of character replace h anyways tedious in some cases especially with the the type of reject that i'm going to write to solve this um so if i can find a way to simplify this even further then i should be able to come up with a slightly simpler rex that will still find the the solution to the problem here's how i think about actually getting to the answer i'm very excited about this i i basically start at the first of the of the that text editor don't look like i look at the characters and i ask you know is are there any is there anything repeated if there is um i move on to the next so basically we chop one off and we just do that again so i look at the next four characters if there's repeated characters then chop it off move on and just keep doing that until finally uh those first four characters do not have a duplicate within them and that's the answer i feel like there's like a macro you could do because a macro can play a macro so if you could figure out a way to check if the four characters in front of you have a duplicate you could then play a macro over and over and over again until it fails an operation and if you get that then that's where it would be and then you could jump down to like the next line or the bottom and increment a number every single time you have to delete one character i feel like that that's like that would be that's that's the move here so really we're just whoops uh we're just moving down this string to the right um as we progress but there's no reason we can't say uh or we can't think of it as moving down like in colums because we'll still be able to know how far we've came but the thing that we have to look at or consider will will be a little bit easier um because there's going to be less data so that's i'm going to break it up into um as many rows as i can and it it shouldn't screw up like we should we should still be able to find what position we're at because we know how many um rows we've come down and we can look at how many columns we went over which is always going to be four in this case and of course we're not going to manually copy each one chop it off and keep doing that that would take that would be impractical especially on our original data set which is like 4,000 characters so of course we can use a macro for this soc begin recording and i just y with y y p to paste it x to chop off the first character and then uh q to stop recording now i want to replay this macro and i want to replay it if you think about it it needs to be replayed as many times as the string is long and so what i'm going to do um i can do an execute and then i can build up in my execute command i can build a norm normal command so norm and then um add it by the way this is where i don't know what's happening anymore this is not the direction i would have gone and i am already just like this this ain't normal okay this ain't this ain't the norm he's cooking getting hard i'm getting hard here space here um so i'll explain this in a second let me just type this out call we're going to do a dollar sign yes another dot and then at q so what is this this is an execute command where i'm building a normal command that's using like a dynamic value so like call with dollar sign is a function going to give me the end of like it it's basically like what is the position at the end of this line and so that's going to be some number the reason that i'm using execute is so that i can like interpolate that that function result into this normal command and then this is good the normal command is you i assume everyone gets it norm just executes command if you don't know what norm does so if i go like this norm j it just went down a line right you can see that you can see me going down a line right and so by doing execute norm you're able to build up a string and then execute it it's just norm so that's sweet so he's literally just going to say hey replay the play the macro the amount of columns i have totally norm dud be able to execute normal mode commands but down on the command so like i i could do this if i knew exactly what this number is uh what this call function is giving us i could just do this like in normal mode i could just type you know like 50 at q and it would replay it 50 times but since i don't know that that's why i'm using execute and so let's run this that replayed it you know some number of times and we have the triang i am only interested in the first four characters of each of these lines and that's because this chunk of text or this chunk of text that's just redundant on this first line i'll still get to that um down later on a later line so to chop everything off everything else off i can do a normal command and i'm going to use the range percent sign and that means basically just the whole buffer so norm 4 l which means move my cursor to the right uh four places and then we want dollar sign because we want to get rid of everything until the end of the line i run that you can see that that chopped off everything except the first four characters of each line now we're on to the tricky part which is writing a regular express so you could actually record this also in a macro so not only could you play that first macro you could record executing the macro on the length as a macro and then you could record this thing as a macro that calls the other thing first and so you could actually do a series of macros so that you just literally just go like at a and it could just go d d d d d and it could keep on going yeah recursive macro recording yeah yeah yeah yeah yeah yeah yeah oh now comes the tricky part yeah everything so far has been pretty straightforward question now that we've simplified the problem a little bit and um to be honest i just kind of played around with this until i found something that finally worked i don't know if i can explain this very well hopefully it makes at least a little sense i'm just going to paste it in here here [music] um i don't i can't really explain how this works but i'm just get to past it in here and hopefully you get it um so i don't get it i just want you to know now i don't get that i don't get it we can talk about it for a second so there's a few things going on here we got some capture groups and we've got i think you can see a onee fighting kirby right here you can see the one i fighting kirby so we know we're capturing something right here this is an important capture group right here i don't know what slash percent sign opening means this is called a back reference this slash one here and then we've got this thing which we'll talk about in a minute so the first of all the capture group so you've probably seen this i've used this before in other videos where uh we want to specify the notion of capturing something so we want to capture basically any single thing i want to capture that so that i can use the back reference to reference it later on in the in the regular expression and that's kind of how you can say uh like you know like if you look at this line there's an n and then later on there's an n you could you could use this technique to be able to find those duplicates and so that's the that's the inner capture group along with the back reference and then there's an outer uh group as well but that one is a little bit different because it's preceded with this um percent sign that's the one i didn't get see what is this capture group with a percent sign what is this what that is doing is it says that i'm not interested in uh capturing the value of this i just want to group uh i think it's called an atom i just want to group this these atoms together so that i can apply this thing and so what is this thing so i don't actually know what it's called we can look at the help docs though so it says that it matches with zero width if the preceding atom does not match at the current position the example i think is a little easier to understand so basically if you have fu and then then bar and then bang sl bang that means any foo not followed by bar so it's kind of a way to like invert any foo not followed by bar i would just like to ask a simple question what the [ __ ] is going on how did we get here if i ever see this ever other than in some sort of vim flex video shit's going down okay i want you to know right now i i am ready to i'm ready to fire you if i see this what you're trying to match on and so that's perf that's the perfect tool in our case because we don't we don't want the lines that do have duplicates we want the lines that don't have duplicates so what this is basically saying is find me uh something where it's repeated and then i don't want that find me the first instance of that that's the best way i can explain it the other other stuff here is just kind of ne rest the string to the end so i'm just g to use the find command i think it's called find uh but if you do slash um you can search your buffer in this case using a regular expression and so now you can see um if i hit enter i'm jumping directly to that first instance where those four characters do not have duplicates so that's perfect that's what we want because if i if i look what row i'm on or what line i'm on that helps me get my answer because i know that i've come down six rows now i'm on row seven and i can just count the length of this line here and that gets me uh 6 + 4 which is 10 which is you could totally do this as one giant macro you could record each stage of this as a macro and then at the very end you just print out your current column and then you could run it in neovim headless mode and you could actually solve it using neovim like that's that you could you could do the entire damn thing the answer in this example problem and i can programmatically show that it's 10 by um by doing this i can clear uh this current line i've cleared it into the unnamed register and now i can enter the expression register by doing controlr followed by an equal sign in here i want to find the length of i did not know this copied i can paste this in here by doing controlr double quote and so now i'm going to find the length of that string and then i can add that to the line so this is a line function um i'm asking it to tell me what line i'm currently on and i want to say minus one because because math so 10 so now if i want to get rid of everything except this answer here um i can use i can go into normal mode use a global command i'm just going to match any line that has a digit which is going to be only this line and we can use our new superp power which is this thing i don't know the name of yet but i'll find it and try to post it in the video or something um so we' we've inverted our match so now that now we're not looking for things that have a digit we're looking things that anything that doesn't have a digit oh my goodness you're going to hit it with the sl d oh the slash d oh let's and so that's how we can get our answer and so this is just a sample an example problem so let me replace this with the actual input that we're given and i'm going to save that file now i'm going to show you something cool that i've been doing that helps me solve these types of problems i've saved this input file um let me show you another file this is where i have that unironically just typed ed okay i just i'm just saying i will i know that this isn't ed going on right here but this looks like ed actual steps that we just talked about so everything we talked about should be in here this is just a normal normal file there are a couple important things to notice though which is control in here which are are non printable so for example if i wanted to type escape esc i would have to do contr v followed by the escape key and that's how i would get that uh i don't know what you would call it a key code or something um but any by the way that's why control open bracket works for you leaving insert mode if you've never noticed that if you're in insert mode and you press control open bracket it leaves now i'm back in normal that's because you're literally sending escape ways i have the this file which is basically just a vim script it's not vim script it's just a vim script it's just a it's just a standard vim script with normal command bros just just would do on a regular but it's just commands as if i had been typing them into the vim editor so if i save this h i can now i can run this script against the input file by doing uh vi-- s for script in and i can do solution and i guess before that i need to have my input. text so if i run this this should give me the actual result which is looks like 1640 so let's check that 1640 there it is so that's the right answer i'm going to go back to using react i'm going to become a web dev i think i need more soy in my life not even saying goodbye doesn't even end the cat and got the answer and look at that 1640 it's correct bam just ends the video that was first off this was probably the coolest video i have ever seen honestly first off i'm subscribing second off you should subscribe to this guy third off that was genuinely one of the coolest videos i have ever seen fourth the man used vi i did did you guys catch that at the end we weren't vien boys we were vying at the end we vied just ends the video with no ceremony like a chad it was chad what am i going to do with this what am i going to do with this hey denvar i appreciate that denvar that was best video i've seen in a long time best video long time the name is i've become kind of emotionally insecure after watching that video a jen