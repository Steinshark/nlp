so hi my name is glauber i am the founder and ceo of turso i you know i come from a background of like low-level systems programming in uh helen helen my life started when i met becca around 15 years ago uh we were both coding for the linux kernel uh he was one of the maintainers of the memory management subsystem uh and i was doing resource management for c groups for containers and stuff and then i had to get my work through him and this is how our relation situationship started uh we later joined a company i was in play number three and it was in play number four i've been trying to get rid of him since then unsuccessfully uh called sila uh you all i think lots of people in your audience will not silla because the other day you read this amazing article about how discord moved to silla i mean so like we wrote uh sila as well not as founders but again super early employees and then when i finally decided i had enough uh and i would leave becca behind i founded a company but then when i noticed he was there as my co-founder uh so that's my story you have anything to add or take away from that so yeah so that's so so typically i just let clobber introduce me as well since you know we actually do have a quite a bit of history but just going back to the the moment we actually met physically i think it was in san francisco and this guy was coming to me because i was like the linux kernel maintainer right so much more important than him of course right so he comes to me it's like pick up you know if i do this little tweaks could we get it merged and i think i said no so i think that's that that's the starting point uh i had to i had to bag i had to bag it like see how tables change becca see how see how things yeah yeah and also when clover came to me was like hey we should we should start a company i think i initially told him absolutely not but that's that's roughly the you know the delta off of our stores that's that's a lovely story i'm glad that i'm glad did he just say beg or bag please guys okay bisco you're from montana okay we all know we say none of our words correctly uh all right well hey that's good so we you know a thing or two about operating systems and databases it sounds like would that be fair to say mostly pecker okay again in all fairness he's he is the smartest of the of the two of us okay okay so you're the script kitty the the linux kernel script kitty and and he is the actual the actual programmer yeah which is why by the way both of us are on max today because uh we capture linux were like look used to be you know he actually knew about technical stuff i don't know if he you know just in the past two years at least he claims that he doesn't know anything anymore but yeah yeah so you know we we i think probably probably in linux kernel worked on most subsystems if we combine the stuff that we did so file system scheduler memory management uh some drivers and what do you think about the uh there was an article that recently stated that all the async runtimes in rust effectively are just crappier versions of operating operating operating system uh schedulers how do you feel about that i actually wrote uh uh runtime as well async runtime for russ called glamio during my time at datadog i had a year datadog before you know when i was trying to get rid of pekka and then datadog tried to hire pack and they said look there is no way i'm getting rid of this guy let's just go and found the company right that's the uh but i wrote uh when i was there i wrote i wrote a a async runtime called glomuel which focused on direct io and so but i i don't know i mean compared to operating systems i think it's a bit much but like uh silo was also uh sila was also built on a similar run time for c plus plus that like does a lot of async and futures and promises and etc and and you kind of have to rewrite a lot of primitives from the operating system right yeah you might want to do your own memory management and etc i think that calling it like an operating system is a bit much like virtualization was a different story when we were working like on kvm and zen and etc there was this argument that like uh this is essentially the operating system admitting that it didn't do it its job well so you need like a hypervisor and stuff like that but like at the run time i think it's a bit much uh it's it's supposed to be a lot more lightweight yeah okay good awesome so you wanted to come on here and and talk about some some super cool things that are kind of coming down the pipeline and then even potentially show me something pretty cool i think we have to do it in typescript right because that is your currently most supported library correct that's right that's fine we could we can what but can we run it with fun that's right we're gonna use bun okay because if i have to because we could spend the next 30 minutes with me getting a webpack config so i yeah exactly so it's actually i used bond as well because i just couldn't get the ts node and all that stuff working so you know that's the no no one that's technically can uh i i just i honestly at this point i just use uh chat gpt to generate uh all of it because there's just there's just no possible way i can i can get these configs correct so all right awesome uh let's do this so first tell us about the stuff that you have coming down the pipe and then we'll take a quick little look at it uh we're in the middle for launch week so we're announcing uh a bunch of amazing things this week yesterday uh we announced that our free plan that previously allow you to have three databases now allows you to have 500 databases uh and then the plan for 29 that used to include six databases now includes 10 000 databases and they're just normal like square light databases right there there's nothing like a it's just a you can just go and look that do per user stuff and a bunch of other stuff uh and what we're announcing today is that you can now get one of those square light databases uh independently you don't have to do this with all of them together and replicate inside your own whatever you want your own device uh inside a server a vps uh and then you're gonna have like super fast latencies so it's the it's the beautiful it's the good things about square light you can do the local reads but they're so just going to keep your stuff in sync from our team who actually did most of the heavy lifting of that stuff okay so what you're trying to say is that you you are you have a feature in which you have your your cloud-based database right your turso squeal light out there in the cloud and to just achieve the world's fastest latency so we're talking like on the micro second level you have a syncing feature that will bring it down and you can read from squeal light locally in your docker in whatever from right there but all rights will be routed back out so that way you have syncing and all that done for you exactly dude you sound super smart yeah you nailed it thank you i'm pretty good at this uh okay okay that's actually super cool because i mean that reduces an entire bottleneck right uh one one thing that's very difficult uh is that when you have a series you just sit at the league my guy said that you're a genius he's mistaking you for tom i know he's mistaking me for tom but his name is literally ligma tits off so you know for me i just don't you know i i i i put that in there you know like trustworthiness versus what he's saying so um anyways uh because like i can't tell you like how many of these these little services you're going to come across they're going to have three four database calls just aligning aggregating a bunch of information together and sometimes they have to be serial right yeah you can think of something like netflix where we have uh videos and ratings i know bringing up netflix every time but ratings are an independent service of videos so you could imagine a world in which you could have both those data sets together where you're not doing multi hundred millisecond calls instead you're doing instantaneous calls effectively so yeah absolutely absolutely honorable so somebody was asking actually yesterday uh on on x uh that like when why can't you just put the postgres database in the same vm or something right but it is exactly about this you know cascading query problem essentially so you know if you do this serial queries then you know once you get to the microsecond scale and you know just to make your love typescript bit more actually if you use the rust well you know i know you'll love rust as well but if you actually so that actually what what you get to is double digit microseconds right but with the serialization and dc relation it's it's more around 100 microseconds or so so you actually lose quite a bit of performance still with typescript but but nonetheless and it's not just that it's not just performance remember what i said in the beginning like our goal here was to create a database so easy that even pekka could use like if you're replicating postgres you're on vm and setting up resolution and it's it's a lot more complex than you just have a square like file you read from it you call a sync function to control the sync that's it right yeah yeah but it's like essentially you know you have all the data in your application memory space right so that's a you know it's this this never going to be a faster way to to do that but yeah so so that's uh that's basically what we're trying to do with the we call them embedded replicas awesome awesome i like to see this uh okay so you want to get you said that you had a little bit of a demo you wanted to show me um i know you technically sent me a link to this recently i'm going to be honest here i didn't open it up i didn't even look at it so you're actually going to get the raw you're gonna get you're gonna get this the raw squeal light version let's do it let's do it all right so i'm gonna are you are you gonna drive or you're gonna expect uh us to do it i will do the driving because uh okay i i just feel like i can i'm a good driver but i'm sure you guys could actually probably drive better at this point but here i'm gonna grab the link really quickly uh github tereso database i assume by the way i had to i had to explain to pekka what ligma is i mean this is the state of europe there you go so he he he said what's lima oh so yeah so some some of your you know some of the things just don't you know it's the european mind can't comprehend right so oh no nothing feels better please tell me you just gave him the ligma balls you didn't even didn't even didn't even give him like any of the the nice well actually this is what it stands for so i'm gonna i'm gonna do the whole uh the whole repo we're in here and then the specific one that you actually had uh me pointed to was called remote sync right so remote sync ls i assume can i just npmi was that how we get started um if you want to just show your audience like what exactly does it do like we have a special image on the repo if you want to open the browser and just show like a oh sure yeah just like a can you what's the setup of what that is and just uh can you show robert even made me to made me yeah do a picture where's this ripple at that i can check out what's that what you just said there's a rebel that i could open up where's no no yeah this the the the gift the good thing repo so there's repo yeah so there's an image there oh this one right here yeah yeah it's a bit hard to see because yeah this image i did i did it but like saying people don't use dark mode so i'm not i can just talk to it instead yeah so it's just showing well if there were these you know arrows they would be showing that you know you you know you have the remote so basically the way it works is that you know you create a third certain call so there it is right so you create a database on torso like or it's a lip sql server right and then in your application you know you use the lip sql client library and then you know now boom you have the embedded replica there and then basically what you do is you know you can sync up your uh replica by calling sync and it's essential so the way it works is that it's it's more or less the same thing as we do with this edge replicas right on the server side so it just gets all the write ahead log updates to your local database and then if you write to the database it will detect that and automatically delegate it to the server that's that's the way it works super simple uh you know you get super fast reads and you know as global mentioned actually on x i think uh you know that the writers get delegated you don't have to to to worry about it okay let's do it by the way i figured out what your problem was you may look look at your image it's transparent and so i i work on github dark mode so yeah so here i can hear i can help you really quickly let me just do this and i'll just get this little bucket and look at that i've just fixed your image do i need to make a pr to the to the repo if you make a pr i will merge it let's go he trusts me more than you glover this is fantastic all right um okay cool so how let's see so i assume i can just start going through this so because i i have this yeah there's instructions there's instructions in there with me right so like creating the database and etc like all right can i go through these one at a time let's do it all right i've i've let myself be all out i've tried to create myself into a old-fashioned exactly uh unused state right here so there we go we got the log hold on one second i'm gonna get logged in i should have at least had that one but i wanted you know i wanted the true authentic experience here all right let's do this thing here we go all right so we're gonna now create the the database right here there we go creating a quick database it'll do that one we're gonna do a quick shell example all right there we go we'll jump in here connecting to the database i'm going to grab these things right here paste them all in there we go everything's been pasted in all right first so this this simulates a key card reader right which is an example we thought of something local that is whatever like a point of sale device or there we go i will do these things there we go so we have everything set right here we have a db a url and db off token i like how you have this right here because i typically leak this every time in fact i've gotten so bad at stuff that at this point in my life i have this plug-in where it saves me from from just messing things up at this point i just do it so frequently i i had to go and get this now true story that was created for you it is yeah absolutely because i i saw one of your first streams where you were dealing with environment variables and i feel i felt bad for you i mean no joke there we go i there we go yeah glover's valid this is this is remote so what we've done there is that uh if you go look at the environment variables uh we do not specify a sync url like how those three environment variables that you copied like unset sync url so there is no sync url okay and then there's the db url so you talk into to the database room so the database is the same you can still use it remotely and then we do like 50 queries and take an average uh you know just uh yep that's 17 milliseconds query yeah that's not the bestest way to measure latency like latency is a distribution and we want to see the p99 and the average but look for demo purposes just do 50 of them uh and then like uh tell me what's the average uh so 17 milliseconds uh from there to denver now the next step you're going to do embedded replicas okay so now i have a sync url which is that what what was the database url becomes the sync url so in the database is where i was a file okay okay and so there is an auth there okay so the database url becomes the url and then my db url is now just a file local one file local.tv yeah okay authentication still there i mean the token's still there you still need it right that's all good where did this file actually get uh placed at it will be played i mean it hasn't been whatever you want it hasn't been it's sync yet right it will be created yeah okay okay so now i should be able to re-run this command right here and we should see the the magic of local yes it's it's slightly it's slightly faster a little bit faster we're just against too slow for raw standards like the rust uh the rusk line can do this uh in like 40 50 millisecond microseconds less it should be less calmer it should be but this is not united states this is microseconds right just uh yeah yeah this is this is the united states we are at one millionth of a second you did 134 millionths of a second this is such let's look at the code really quickly just to see it do you like oh look how beautiful this is clearly not clearly i have been set up to use this thing yet uh but anyways i'm just gonna turn off lsp lsp stop we don't need it all in here all right because i think typically you're supposed to have a npm id types uh types node there you go i think that should uh lsp start i think that should do there we go that guy right it will except for the complain about the bond names yeah yeah yeah well whatever right all right so you just create the client you create the db url the off token and potentially a sync url if the sync url is obviously undefined it just doesn't do anything else it just uses this thing so this thing obviously specified my local this is my authentication this is my sync url and that's that right and so everything else and this is the same this is the same client for all executions right it doesn't matter if it's local remote it's just a just a couple of variables nice look at that it didn't even take uh you didn't even have to this is nice there's no the client is none the wiser whether it's local or not well there's a there's a call to sync uh and we put this in control if you go online does this happen does this have to happen after you write or is this a one-time call so it basically has to happen whenever you need to think uh so you can keep on writing but it doesn't impact what you see locally and this is actually something i i don't know if you want to keep this this semantics but nonetheless uh you know whenever you need the latest data you call things but you can keep on writing the whole transaction gets delegated to the remote server okay so for example you can call this you can call this every one second on the background and then there you go right so or whatever you want you have control over when you sync okay okay is there going to be an uh so you're saying that there might be an auto magic sync option in which you can specify you just don't have this on the timer yourself sync every 250 milliseconds or every second every five seconds whatever it is yeah so people are asking asking for that that the reason we went with the manual uh one was to you know because i i don't know what makes sense from a policy perspective right because as you were saying right every second every half a second like what is the what's their period but also like one thing which i'm thinking we should do is when you write maybe that should imply async so you always get the latest uh but that you know that's the yeah okay so there's gonna be somebody there's somebody in the stream asking there's somebody in the stream asking what is the divided by 50 it might just be that i'm an idiot so where is that queries 25 there's something divided by yeah you shouldn't divide by 50 i should divide by queries so the the results are twice as bad uh as the you know where are you ready so they are twice as good as they could have been if you think about it you know like if you really think about it they are twice as good you know i i did find i did find a little bit suspicious that you did 17 milliseconds to uh the remote database but hey i don't know how close you are to to denver so it's possible oh that explains yeah i would yeah yeah yeah wait you guys don't know about south dakota and internet maybe maybe it's super good i don't know all right hold on let me let me just go back to here i'll just do it from here they want me to reset up my uh environment variables hold on hold on hold on uh and cannot find module this wait i thought it just does it doesn't it just do it oh is it because i installed something did i ruin something again you [ __ ] it up man by the way can i say can i say this on your stream maybe i shouldn't say it on your assuming okay family friendly yeah there we go okay so yeah this is more realistic this is more in line with what i've seen so i should be able to go uh unset seek url do this thing and now we can see the other way and now for fun there you go just for fun let's hit it with that old ts node uh and hit that query oh you got errors you can't just be tossed out errors in here it's okay yeah because we also using the bun yeah so so global wrote the code oh yeah yeah i'm not i'm not a javascript guy i mean uh we can clearly see that problem you clearly see that i spent i spent a lot of time trying to find a function in both bun and node that would uh measure time in less than milliseconds resolution i did not find one no it has performance api if i'm not mistaken but that's but that's milliseconds no the performance should be microseconds there there's a there's adventure time yeah yeah yeah yeah there's node okay hr time there you go it's your time yeah hr time will give you high resolution time which is uh i think it's equivalent to get time uh the c api where you get uh i think you get like seconds and mike and nanoseconds or some nonsense and you have to like that's the stuff i was looking for yeah together yourself like it's just some sort of old-timey thing also you are measuring the console log so i'm going to go in here and i'm going to delete that all right and what we're going to do is we're gonna go like this uh const to print i'm going to throw that in there and we're gonna go uh i don't even want to i don't even want to technically grab any of this whatever to uh print push uh rows uh this is not assignable to never oh god oh it's another one shut up gosh i hate sometimes i just hate typescript you should just remove the types bar i'm just i know is like dude i cannot possibly understand this this craziness that you're asking me to do uh hold on to print push rows uh as any there you go any is not a never any is just not in there okay there you go you're now an any put that in there what did this then we'll console log uh to print there we go and now let's take that out and let's not use npx and let's bun query there we go so we got 36 milliseconds per query pretty good and then let's do the whole uh db uh export db url sync there we go we got the other one redo it there we go 123. yeah i mean look at the difference though the difference is there's quite a bit like practically speaking what does this equate to the difference is taking effectively 900 ml a second versus three milliseconds 300x i sent it yeah roughly which which is why by the way i just left the console log in there and whatever because look the difference is so big that it doesn't like just console log doesn't even make a difference it's just so big it doesn't even matter i just would drive the point home like this is still slow right uh you know in relative terms because it should be like so so that because what is happening is most like all of the the you have the query engine uh sql query engine it's it's native call right and then the wrapper on top of that is this rust we spent quite a bit of time trying to you know not add any extra overhead but then basically what we did is we built the npm package uh you know just a layer on top of the rust crates right so you know it's it's insane how much even with bun which i assume is super optimized so so yeah i think they're still actually performance left on the table but on the other hand right so you know we talked about the the use case where you do serial queries right so this is you know compared to going remote this is plenty plenty fast already yeah so yeah and there are two more there are two more uh scripts in there one call expire and one called validated thing because this this example is like somebody with a card then you check if the card is valid or not like so one of them is going to expire the card and the other one is going to validate the card uh and then you will see that like uh those are like it doesn't matter in which mode you are they will always write remotely so if you are in the uh uh embedded replicas mode in which you are and you call expired uh you will see that uh it will take a couple of milliseconds right all right there we go it took 134 124 milliseconds and then validate will also take some time yeah if i expire and then i query does it change the query no there's a sink call in the beginning of the script right just there we go they're all non-expired and they're all super fast this is awesome this is great this is fast this is blazingly fast i'd give this a very blazingly fast rating does that have the blazingly fast seal of approval i think it has i think it does i i can see your audience by the way i don't know if they're trying to offend me like uh behaving like a bunch of degenerates like that but calling me joe rogan is not offensive they're very popular exactly yeah you got me i wish i got a hundred million dollars damn there you go like just a bird [laughter] we love you joe getting wrecked uh all right hey this is awesome thanks for showing me this i'm pretty excited about this um this makes it because i always like the fi because i always did all the file stuff because i just didn't want to hit the i don't want any of the slowdowns i don't have to think about anything i just delete databases try my schema try different things and this feels pretty cool this feels like a really great step where i can have all the speeds in the universe yeah and like this mode is not uh some people ask us so just to toss it out there like it's not something you would use in a serverless environment yeah obviously in a serverless environment you don't have the file system but if you haven't your api running on anything that has a file system then now it can replicate your database locally and then as you scale out and create more copies of your api server now you have your database like always locally so again sqlite was always able to do this but you don't have the sync so what we bring into the table if this is the sync uh and working with server environments uh one good question which is uh uh uh replication is it region locked uh depends uh this replica because we have we have the replication on the platform as well right this replication that you're doing uh on uh embedded replicas no but it's up to you too like we don't have anything to prevent you uh from we have the tools to allow you to create the gdpr compliant thing but tourist is not going to prevent you from replicating uh in anywhere register okay you would have to be careful just say hey don't don't replicate in europe which is okay the best way to bgdpr compliant is just don't do business with europe that's the easiest way to avoid gdpr is just avoid gdpr yeah yeah uh i'm just joking of course but because so no no no you know why why we made tolbert the ceo and me just yeah he's the smart guy yeah this this seems good uh okay so so you can actually choose if you want to have region lock if you want to have it globally if you want to be or you can lock out that's all based on programming it's all based on you doing it so it's more like an aws fashion where aws gives you all the tools to do anything you just have to choose to do that thing when you replicate to our regions then you can control like how you can create a group and say like those databases cannot be replicated outside this group but the moment you're doing better replicas at least for now i mean we're obviously we're releasing this fig today right so we're very well uh we would love to hear more about like how people want to use it but we don't have anything at the moment to say like a control where you can replicate it okay uh let's see our rights made to the local first just to be clear no no no no yeah so the whole model of torso space is basically you have a primary primary somewhere right and and that is basically there to coordinate the rights so that there is a single writer at the time and by the way so sqlite still has this limitation of a single writer at the time so that's the way it works right so the the mutation happens on the primary server and then you know that just gets replicated out that's the model okay well someone says i'd love to use this but this uh but microservice sucks for this is this is this a true statement i don't know why microservices suck for this yeah it sounds like they would be if effectively if you own the machine or you own the process of owning the machine then you could also sync and then your machine would just simply be synced and fast correct i actually i actually think this is great for microservices because now i can have a copy of the db locally on your microservice you can do whatever you want and you're never concerned about am i are my queries destroying the db or overloading the database or whatever just play for local copy right yeah the way uh i think at some point in the future we're going to see the term micro serverless where you have a constellation of micro services wait until interest rates goes to zero again you're going to see all this all sorts of crazy stuff coming back all the crazy stuff is coming back and i cannot wait for micro service i cannot wait for it yeah micro front ends micro serverless we got it all it's going to be coming down uh serverless absolutely serverless front-end yeah they do have they have serverless servers we do we do have a client we do have clientless clients htmx really when you think about it it's just it's just replicating the server it's beautiful all right hey thank you so much for all of this thanks for coming on i really appreciate it man yeah sorry sorry that i brought becca along but uh don't worry the only thing you truly have to be sorry about is this microphone i think everything else was really really great when i spent i spent i spent money on this [ __ ] you know let's talk about me but like i spent money oh yeah yeah what can i do i'm not a province i i get it i i do apologize all right take care everybody see you folks bye