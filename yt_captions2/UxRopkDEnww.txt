i tried to let the code for quite a while until i realized that there were so many people who were so far ahead of me and no matter what i was doing i just couldn't make progress as fast as some of these other people and i felt completely stuck i remember learning coding was sort of like pouring water into a cup moving on to the next cup and pouring water there only to have someone else take the previous cup and pour all the water out of it while i was focusing on the next cup and so it became impossible to keep all the cups filled at the same time and thus actually put all of this information together to know how to build something from start to finish and the real reason for that was that coding is actually pretty flipping hard to learn like there's no escaping that there's no such thing as making learning the code easy but there is such a thing as making learning to code easier and that is what i want to help you do with this video what i discovered is that the reason why some people were simply making much more progress than i was was pretty simple it was because they held the three keys to learning the code whereas i had absolutely none of them but when i discovered what they are my life completely transformed and coding actually became something that was no longer a struggle but actually something that i enjoyed learning and where i was able to cherish the progress that i was making every single day okay to illustrate this let's imagine that to learn the code you need to walk across a corridor but between you and success on this corridor are three tours and for each of these doors you need a key to open the door and the people who successfully cross this corridor have all three of these keys but sadly from my experience and from what i can see talking to people most people have absolutely none of them so let's imagine you're learning the dance you're learning salsa let's say you're going to classes and every time in the classes they play the same song and you memorize some sequence of steps you can probably get pretty good at learning the sequence of these steps by the end of each class and like i learned salsa believe it or not and this is exactly the experience i had i would feel pretty good about my progress at the end of it but then there would be a situation at the end where they would play an entirely different song and they would no longer be the instructor simply telling you which steps to take and suddenly i would just somehow forget all of the steps that i just learned and i've just been frozen like not know what to do that's because i had only learned those steps in one context the context of that one song that they were taught in and that is very analogous the way most people learn coding the way most people learn is you probably go to like free code camp or some of these basic courses you'll go through a lesson on loops for example you learn how to use loops to loop over some list of animals or whatever and you'll feel pretty good about it then the next day or in a different context you need to let's say loop over a list of transactions and suddenly like you just can't like it just doesn't clock that using a loop is what you should do here because you mastered loops in that one specific context that you were taught in that lesson so the way you get past is is that you need to expose yourself to many many different problems where you're not told what to use like that's very very important going through the uncomfortable process of trying to solve problems and then through that process using loops in many different contexts puts loops into your muscle memory and it makes you into this dancer this salsa dancer who can just dance to any song and who just knows which steps to use and which sequences of dolls like whatever they do to go through and this is how these concepts become part of your muscle memory so when you see a problem like you just instinctively know how to solve it this is the thing that you need to get to to really really be a good developer and the way you do that is by becoming a problem solver the way you become a problem solver is going through the uncomfortable process of trying to solve a lot of problems that you don't necessarily know how to solve immediately okay so let's say you spend some time internalizing the right mindset of becoming a problem solver which means that you now have the reverse key of getting through the first door but the truth is that this is only the start because there are so many more things you need to learn if you have a second key which is probably the most important one although i'll probably just say that about the third one as well is to break programming down into its constituent fundamental parts and to really understand how programming works so breaking things down into the constituent parts is sort of like when you're cooking rather than looking at the overall recipe you break the recipe down into the individual ingredients that you will need to make that recipe and it doesn't make sense to try to stop putting these ingredients together before you actually have all of these ingredients in the first place and sadly the way most people learn programming is that they try to stop putting these things together without actually having all the ingredients and without even knowing what all of the ingredients are so all of programming is actually just comprised of five ingredients there's variables loops control flow data types and functions that's that's really just it and understanding these individual ingredients is not actually that difficult either so if you're a complete beginner the only thing i recommend to you is to go through all of these five building blocks these five core like fundamental ingredients of programming and understanding what they are conceptually especially trey because where i see the future of programming is that it's dominated by the ai driven develop and i'll talk about that more in a second because of judge ebt and ai the details are really less and less relevant because most of the time you can just ask charitivity just like in the past you could ask google for the details so spending your time trying to memorize the minutia is really not going to make you a great developer it's going to make you a code monkey and code monkeys are going to be replaced by ai but good developers who understand the big picture and who understand the foundation and why and how the pieces fit together are not going to be replaced because then you are going to become the architect who is architecting the ai to go and fill in the details and actually write the code to build the ideas that you have if you do two of those things you will unlock the second door with the second key and many of you might even get here but the thing that will actually stop you from getting hired and the thing that is going to be the most important thing for you to actually stand out is still door number three and in a way this is actually the simplest one out of all of the three but there's one massive problem which leads to most people to sort of not be willing to open this last door so let me just explain what i mean by that okay so if you're an aspiring developer here's the thing that you really don't want to hear no company in the world wants to hire an aspiring developer it's just a fact even entry-level roles nowadays require experience so how the hell can anyone break in because you need experience to get experience but it's sort of the same thing as having a taxi driver who's never driven a car in their lives you wouldn't want to be the one being driven by that kind of taxi driver and that's sort of the same thing with coding that reality is to get a professional job by someone's paying you real money to be a software developer you do actually need to be good but the thing is and the one thing and the one key that like most people just miss is that you can give yourself experience you can become experienced as a programmer without ever having professional experience and now you're like okay thomas what the hell does i mean how can i give myself experience like dude you have the internet you have a code editor you have a computer like no one is stopping you from just starting to develop software like this is what i actually tell from my coaching clients who are literally paying me money to get a job the way you stand out in the marketplace is by actually building something that's more impressive than most people and this is the thing about this lost door like it's pretty simple to open you just have to put in the effort like literally you spend a month building a project that's actually good that's actually impressive that has a ton of features and you build an actual functioning piece of software on your own you stick it on your resume you put it on your portfolio and in the interview you just show it to them and if they say like okay you don't have experience you can say yes i do i built this real functioning software yes i do have experience it's difficult because it's hard work it takes a long time and most people in general in the world are lazy most people are not willing to do the work and that's why most people struggle to get entry-level jobs because they think that they can just go and build a couple of these like oh finishing one weekend projects and then get hired and i know i've made those project tutorials in the past myself as well but shut up so the third key is right here like you can have it the question is are you willing to come and get it as you can see there's three keys actually pretty freaking simple so then why isn't it that learning code is actually so freaking hard well it's because executing these steps is actually pretty god damn difficult with anything that's worth doing it takes a lot of hard work but you can make it easier for yourself by at least following the right road map and the right part to make it even easier for you i have created my full program where i actually like take these three keys and incorporate it into one system that you can follow step by step i teach programming by breaking it down into these five core found and i explained to you conceptually what they are so you have this logical like big picture understanding of programming i go through some of the details that are important but what i actually encourage is for you to go and play around and like give you a lot of prompts and projects for you to actually practically do this in a useful way and then the thing that i'm probably most excited about that i'm building right now is my ai driven development mastery which i just realized from building my own startup is that the future really belongs to the ai driven developer the developer who is able to use ai as leverage to solve bigger problems to solve problems much much faster so i'm super super excited about this particular module and by the way of course inside there is also a module about actually how you get hired because there's a lot of the ceos that are non-technical that you will need to know like the right habits the right character traits and most importantly how to actually apply for jobs at the most on linkedin automotive cv interviewing like all these kind of things like so it's still 25 off from its full price until april 22nd i think so if you are interested i would suggest you get it now so you can get everything and all the future updates because the price is going to be going up i hope to see you inside on the feedback that i've been getting so far it's been absolutely amazing if you do those things like you will succeed like i believe in you now you need to believe in yourself but i know that many of you are worried about like oh hey is ai going to replace programming is uh this and that so it's absolutely crucial that you do watch this video because if you don't you could risk learning all of this and then still falling behind