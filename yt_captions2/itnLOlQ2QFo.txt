hi everyone in this episode were in to begin creating a shader for our planet in shader graph it will be very simple for the moment and just pick a color from a gradient based on the height of the terrain at each point okay so currently if we want to use shader graph we need to install the lightweight rendering pipeline so i'm going to go into the package manager go into all and then just scroll down to find that over here and just click install and this lets us take a little while and once that's done i'm going to create a new folder called graphics and in there i'm here to create a lightweight pipeline asset and we need to assign that in the graphic settings so i'll just open that up assign that there and the planets will turn pink because the shader that it's using at the moment isn't supported by the lightweight renderer so let's create a new shader and i'm going to create a pbr graph pbr are standing for physically based rendering i'll call this planet and then i'll create a new material as well and go let the planet material and set the shader type of that to planet okay i'm now going to open up the color settings and this is going to have a public material for the planet material and then in the planet we're going to want to make sure those materials are assigned to each of the meshes so over here i'll say mesh filters i dot a get component type of mesh renderer dot shed material is equal to the color settings dot planet material okay and in here where we're creating the mesh object we still want to add the mesh renderer here but we no longer need to assign a new material there so you can just leave it as that all right i will save that go back into unity and now if we come into the color settings down here and assign the new planet material the plan is going to turn gray because that's just the default color assigned to the shader here all right now in order for the shader to work we're going to need to know the elevation of the lowest and highest point of our planet so i'm going to create a new c subscript to help with this called min max this is going to be a public class not inheriting from honor behavior and it's going to have a public float min which i'll make public to get but private to search and i'll do the same thing public float max public to get private to search okay and then i'm going to have a constructor so public min max and this will just set min equal to float max value and max equal to float min value i'll then have a public forward add value checking in a float v and we can just say if v is greater than the current max value then max will be equal to v and a fee is less than the current min value then men will be set to v all right then i'll save that and head into the shape generator and here we can have a public min max called the elevation min max and i'll assign that in the constructor so elevation when max is equal to a new min max and then each time the point is calculated on the planet i want to calculate the final elevation before we return here they'll say elevation is equal to this again we can just multiply this not by elevation so i haven't changed anything i've just moved it onto a separate line so that we can say elevation min/max dot add value elevation and this way we'll keeping track of the minimum and maximum elevation for all the vertices in the planet okay so i'm not gonna say for this go back into unity and i want to create a new c sharp script called the color generator i'll open that and this is gonna have a reference to the color settings and then i'll have a constructor to assign that and then let's also have a public for weight update elevation this takes in min max elevation and max and here we're going to send that information to the shader so we can say settings dot planet material dot set vector and i'll call this vector underscore elevation min max so i'll just need to remember to call it the same thing in the shader and then it once the value is a vector for so a great new vector for and just passed an elevation in max dot min and elevation min max dot max and i'll just leave the rest of the values as 0 okay so i'll save that go into the planet script and over here we have our shape generator so just below that i'll create a color generator as well called color generator and i'll assign that in the initialize method color generator is equal to a new color generator passing in the color settings okay and now in the generate mesh method just after all the terrain faces have had their mesh constructed we're going to want to say color generator dot update elevation passing in shape generator dot elevation min/max alright are now safe 'less going to unity and i'll go into the graphics folder here and just double click on the planet shader to open it up in shader graph now you don't here we have just this one node the master node which is responsible for the output of the shader and in particular we're interested in this albedo property which is the color so i'm going to start by adding a new vector to property to the blackboard here and we can enter a display name for this property so i'll call it elevation min max and then we can edit its reference string as well which is how we're referencing it from our script so this should be exactly the same here underscore elevation min max okay now if i right-click to create a new node i can go to properties and here we now have this elevation min max property so i'll click on that and can drag off the output here and i'm research for the split node so now we can split this into its min and max values now before we can really do anything with this we want to know the elevation of the planet at the current pixel that we're drawing so let's create a new node and research for the position node and i'm interested in the position relative to the center of the planet so i'll just change the space here to object space so now if we want to know how far away the current point on the planet is from the center of the planet we just need to get the length of this vector so i'll drag out the output into the length node like so okay let me give myself a bit of space here and what i'd like to do next is just convert this length value into a value between 0 and 1 depending on where it lies between the minimum and maximum elevation of the planet so i'm going to create a new note here called inverse allah and i'll drag the min and max values into a and b and this length value into time i'll then connect the output of this to the albedo property of the master node and this should give us a color from black to white going from the lowest point on the planet to the highest point i'll press save a set over here and just close out of this and now if we regenerate the planet we can see that that works as intended alright so next i'd like to map a gradient to these height values so i'm going to go back into shader graph and i'm going to create a new property which will be a texture 2d because we'll be converting our gradient to a texture let us call this planet texture for its display name and simply underscore texture over here i'll then create a new node for sampling the texture 2d so the texture input to this will be our planet texture property and we can use this height value as the point that we want to sample and i also just create a sampler state nausea and to set the rap mode to clamp finally i'll take the output of the sample texture to the albedo property of the master node let me just rearrange things slightly here and i'll fold these up so they don't check up quite so much space okay when i'm done with that i will save the shader and head over to the color settings script and share i want to replace this planet color with a gradient which i'll just call gradient it will save that and then go into the color generator and in here we're going to want to have a texture 2d and just call that texture and also a constant int for the resolution of the texture so collect extra resolution maybe set that equal to 50 okay so now in the construction i'm going to say texture is equal to a new texture 2d with a width of texture resolution and a height of 1 and then i'll have a public voyage update colors here i'll start by creating a color array colors equal to a new color array with a size of text resolution and then i'll have a for loop 1 to i equals 0 i less than texture resolution i plus plus you can say colors with an index of i is equal to settings dot gradient dot evaluate and share we want a value between 0 and 1 cell person i divided by texture resolution minus 1 f the f is very important share by the way otherwise you'd be dividing an integer by an integer which would round the result down to an integer outside of the loop we can then say texture dot set pixels pass in the colors array and then texture dot apply and then finally we want to pass this to our shader so we can say settings dodge planet material dot set extra the name of this was underscore texture and then us in the texture variable now what they i'm sorry unhappy with here is that each time a setting changes the planet reinitialize --is itself which means a new shape generator and color generator is going to get created and so we'll be creating a new texture each time as well and i'd rather not have that happen instead i am going to change this from a constructor to just a regular method called update settings and then i'll only create a new texture if the current texture is equal to null i want to keep this in here by the way rather than say moving it up to the top just because later on there will be some other things that will cause us to want to recreate that extra okay so i'll save that and then just for the sake of consistency between our two generator objects i'll go into the shape generator so this will be a public void update settings save that and then in me planet first of all just down here in generate colors i will remove that and replace it with color generator dot update colors and then i will set shape generator equal to a new shape generator up here and color generator equal to a new color generator and then in the initialize method i will just call update settings on each of those here passing in the shape settings and here of course passing in the color settings oops that should be update settings okay so now i will save that go into unity and close out of the shader and then going out to the planet we should be able to set the gradient show so i'll try starting with a blue color for the ocean maybe something like that and then we can have some kind of sandy color for the shore then i can get some grass up here maybe some mountains maybe the margins get slightly darker towards the top some snow at the tips and i'll add some different color grass over here just something like that and if we want to try a different style we can change the mode from blend to fixed and it will look something like that but basically we have the first iteration of our planet shader working so in future episodes we'll make this a lot more fancy but i think that's a nice start so until next episode cheers