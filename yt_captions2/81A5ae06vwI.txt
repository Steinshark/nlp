the dark side of the rust language are you ready for this one rust is an amazing language if you follow my blog activity and you know me in person you might know i'm really invested in rust in the last 12 months and also blogging a lot about rust now i want to do something different i do not want to paint a rosy picture of rust i do believe trade-offs matter and you only know something true when you know the cons yeah i agree with this it's good okay this is a good start this is a good start problems i will expose in this blog and not related to rust only but related to the fact about two other factors a new languages b rust has a plus 10 years however still not mainstream and i consider it a new language and b a new paradigm slash approach everything you deviate from standards copium you will face resistance i saw it happen uh let's see i saw it happens a lot with other languages like scala enclosure these problems happen in rust but i want to make it absolutely clear they are not unique to us so let's get started let's start with the good things okay what are the good things so i was having trouble reading that i don't know what happened i'm not sure what just happened there but i couldn't read there for a second the great things about rust before talking about rust benefits you might want to uh talk let's see you might want to talk a look take a look okay maybe i'm not the one having okay maybe i'm not having a hard time reading maybe it's just some of the words in there are incorrect you may want to take a look into some of the blog posts i made about rust russ the language of the future rich type system i love the i love the the type system rust and java interoperability why would you write java rust service and kubernetes is only three and a half megs let's go building a microservices rust let's go axum slash tactics now let's talk about rust language benefits live rust is a live language it has a community tech events new ideas i mean we all know about the tech events am i right and libraries are flowing and popping up every single day i would argue this is one of the most desirable properties of a language you want to be aware the innovation is happening interoperability rust plays well with pretty much all other languages i thought this was the opposite i thought russ is not that great i thought the interoperability with c plus plus kind of sucks with rust because of all the issues it has to do with being from safe language to inherently unsafe language right glazing i i thought that was i thought this was like one of the reasons why zig is so amazing is that it just it just is much better at that right um anyways uh it's easy to invoke this language from rust and vice versa for this reason rust is really great for embedded systems and iot i think rust is really great for iot or embedded systems because if i'm gonna make it some sort of system that could accidentally crush my hand i would rather have it crush my hand because i'm a horrible programmer not because i had some sort of like oopsie daisy in my programming because i'm a dum-dum right i would rather have it that i actually made a thing that just is like the hand crushing module and i accidentally crushed my hand not because i was just like well i thought i was right in good c but it turns out i pointed to the wrong thing and just yeah right easy to read rust code is obvious this is very untrue uh i think rust code is not easy to read uh once you get beyond a simple application rust code becomes excessively hard to read you have to really really really really really know what you're doing uh to read rust code right you there's definitely an arc of expertise that's required in rust it has a very deep deep side to it and i love that about the language i love it a lot about the language but it's not obvious it's not it's not it's not easy i don't think the syntax is weird i think the syntax is different right and that's a big thing is that just because syntax is different doesn't make it weird the first time you looked at syntax the first time you learned some other syntax it was weird right i started off in php there's like colons and dollar signs and all sorts of everywhere like that's weird but it felt normal and then when i got done with it it wasn't normal anymore you know what i mean it's very easy syntax and therefore very easy to read code the ability to easily read code is important for maintenance perspective uh and for learning uh again i just don't think that's a real thing functional vein rust allows functional programming you have lambdas option optional map find filter and much more functional functional programming is a really great paradigm in modern languages need to embrace it at least partially i think that's one thing that rust has done really really well which is like it's functional light like it has most the things you'd ever want you know what i mean uh memory allocation rust really forces you to think about memory allocation and memory management i see i actually feel it's quite the opposite i feel with with rust you actually you don't think about memory at all right like ever you're you just you just do it and when something's slow you're like i'm probably allocating on the heap i mean there's like a simple rule if you put it in a container it's probably on the heap if it's not in the container it's probably on the stack right if it's in a box it's on the heap if it's in an what is it an rc it's on the heap if it's in a ref cell it's on the heap right like i find like this i find that you think one reason why i like rust is i don't think about memory allocations and that's what i like zero cost abstraction i love this too because iterators become they disappear when you compile another great rust capability several languages have great syntactical sugar sugar and features however often using the obstructions are slow compared with the standard features yeah i love this so i love that uh where iterators they don't cost right fantastic rust uh library variety rust has a great variety of libs and ecosystem yeah um only 35 000 libraries i could get 35 000 libraries in npm by installing left pad okay you think that's you think you think that's amazing please please all right speed rust is super fast faster than java go c plus plus okay it's not faster than c plus plus um i don't i would even argue that it's it's hard to make it faster than go i would say that it's it's you'd have you have to be pretty slick at rust to make it faster than go um so rust is only slow compared with c nope i mean you can lit the statement doesn't make any sense uh compared with high level languages like java.net.net is not a language uh go python ruby rust is super fast well ruby's a i mean i mean technically i think i could i think i could beat ruby in a foot race uh rust is super fast and much better than these languages and a sense of speed this means doing less with more saving costs if you're running on the cloud and better user experience safe russ is also super safe uh it's true as long as you don't use the unsafe feature and even then it's still pretty safe this is one of the main advantages of rust uh the compiler is really your friend and catch as many things web assembly webassembly is the future of the web you know i sometimes i sometimes deep down inside my inners when i hear the term web assemblies the future of the web i also think about 2023 is the year of the linux desktop you know what i mean do you ever feel that do you ever do you ever feel that by any by any chance you guys called it you guys caught a flag on the play right now it could uh and the implementations are in rust this is another very attractive point of the language i do agree that it it is i think the best webassembly language right now spall binary small footprint i'm not is that true i i don't i don't know how i don't know the the binary sizes i've never comp you know compared them rust is not a memory sucker like java suck my memory java uh rust generates a very small self-contained binaries which are usually great for containers like docker and cluster uh cluster managers like kubernetes uh great for concurrency rust has a strong uh is also strong against ah you know you know i don't always think rust is great for concurrency i mean it's great for correctness don't get me wrong it's great for correctness it's not always like it's not a dynamite concurrency right the amount of because one of the problems one of the problems that i don't like about rust is that like there's things you can do in c plus that are kind of unique because you have this whole separation of mutex whereas often the mutex contains a piece of data and so you'd have to do something kind of silly to make it so that you could have multiple parts be mutex but not all parts be mutexed right it's kind of like a i don't know i always find it like a kind of an interesting it's an interesting argument i don't think that it's it's fantastic for concurrency but i think it's it makes it really easy to do the right thing which in most cases is great for concurrency right for the most part that's like what you want uh better than go i don't i wouldn't say it's better than go i would say that it's different than go go you run to the same problem but you run to that into any language which is you try to you try to read and write to the same resource right that's like a very classic thing um and so they have new taxes we can mutacy and so it's not the but the difference is is that i can also just hand you something and if you're in a different thread i don't have to think about it right here's the thing it doesn't need to be behind an arc mutex so when i pass it i don't have to pass something that has this atomic reference counting then on top of it i have to unlock it to use it right like i can just give you something and you can use it there is there is a performance advantage there to just not caring right and so it's it's not it's not a 100 right it's not just like oh it's better um so that's what it means like they're they're there's there's trade-offs the thing about rust though is when you cross that thread boundary you are guaranteed to be doing it the right way and so yeah correct is better than fast so that's the one nice part is that you are forced to do it the right way but you may actually write something that's slower are you still learning zig yeah i wrote a little bit of zig yesterday uh small small market currently there are a few companies using rusty up the dark sides of rust okay so this is a real thing therefore a few programmers and a few job offers i do believe the market size will increase i do too but if you need massive number of developers now and cannot afford their education russ so i i disagree with this point i think that if i tweeted right now i have three open positions i could fill it within the afternoon right like i think there's a very there's a larger hungrier crowd than the positions that are available i don't think it'd be hard at all to hire rust devs right now too many strings rust has an issue with strings rust has six string type string stir seester seester oster oster uh which makes it complicated and confusing some functions return stir uh there's also a a cow's ring where's this cow string moo right you have that two lossy utf-8 or whatever it is uh anyway sub functions return string i might just be wrong there's also path buff don't forget path buff which is really just a string you know it's a string that allows for that non-utf8 encoding just for this one little tiny little thing uh copy on right copy on o orville right now mummy daddy wow uh slow compilation yep this is true this is actually a real problem though it's not a real problem it's both a real problem and a non-real problem uh as you have 200 200 plus dependencies you'll see compilation become super slow everything let's see or almost everything is statically linked which makes compilation slow you have a lot of outdated libs in your file system okay ide support is not ideal um i'm a vs code i'm i'm oh yeah oh yeah is the best option so far it really isn't um so this article must be older it must be older because rust analyzer is fantastic right it's it's fantastic right uh so i'd say rust analyzer might be one of the best um might be one of the best on the markets honestly it's one of the best language servers i've seen yet libraries low maturity several libs uh are incomplete and immature often you find poor documentation and documentation that is not up to date this makes using a library always an adventure because you need to look at the source code and guess what the source code's not always all that easy to look at um let's see rust is not for beginners yep this is true uh i actually i don't know about that i'm curious if this is true i guess because i could never relearn for the first time is rust not for beginners like if you had no concept of programming oh ownership and borrowing i thought ownership and borrowing was really straightforward like i just i i read one small version of what it does and it makes perfect sense right there's the thing then there's things that refer to the thing i don't know i didn't find it very confusing at all and so i'm a beginner and i find it very easy i'm very curious about it because in the sense like if you knew no other paradigm would rust be hard to learn would it be harder to learn than say c ownership and borrowing were easier for me to grock than scope that's super interesting see a simple c is simple but it's also hard right it's both simple and hard uh uh see to just just to like know what c can do it's very very simple but to do something and see and to actually get experience is really hard right pointers are difficult to grok right so so like there is that whole aspect like you could learn the syntax in an afternoon but to know how pointers work why you'd want to use double pointers a const pointer to a const versus a pointer to a cons versus a const point or two of value right like what's the thing going on there right there's like a whole there's a whole bunch of stuff there the compiler is very helpful yep uh c uh is easy to behave undefined yes yes milky just posted uh your nipples on twitter nice nice bertrand let's get those nipples up um also shout out to melky come on milky give me them nips where's the snips is this right here nope where is it where is it where's my nipples i don't see my nipples link it or it didn't happen link it or it didn't happen okay let's go back to this thing uh rust is a great language i believe russ will grow a lot in the in the new years documentation library maturity jobs engineers tooling support issues uh tend to get fixed however borrower borrow and ownership is not going away so you'll be required to learn um yeah i really and truly don't think look at those nipples you like that i took a picture of myself i've been getting in shape okay people asked for it and i gave it to them okay this is what 37 looks like okay thirst trap i'm sorry you know i i actually i'm always a little embarrassed to know that there's an there's a naked photo of me look at that look at that one pack i have one pack i have a singular item called a stomach say would you call async race conditions or race conditions um so it depends on what you mean by async race conditions are you talking about because there's two different things there's data races which is usually you're trying to read and write to the same location and then there's just race conditions which is like a boolean trap right you want it to be true or false and two things they're trying to set it and you're trying to you know in your program stops working because something finished before it was supposed to that i would just call that a general race condition race condition is where concurrency happens and the outcome is inconsistent because of the ordering in which it finishes then there's this the specificity which is like a data race uh yeah yeah joke's old come on how would you ever understand as a beginner why you need the borrow checker and its rules how would you ever understand that there's any other way to program right like you're what you're doing to a beginner is you're putting you're giving them knowledge they don't have yet do do it in rust you can do that in rust right that is a pointer to a function i think i can read this hold on i think i could read this my c is not that great i think i could read this okay so what do we have here we have what appears to be a function that returns a function that doesn't if i saying that right it's a function that returns a pointer to a function that doesn't return anything is that right i always am so bad off i'm so bad on these things the best way to learn something new is to put your existing knowledge uh at the door it is very true uh but anyways so this article i think one thing they didn't do uh well in this article is they're too rust positive like if you're going to say the dark sides of rust i expect you to kind of think about a little bit more which is um you know what is what is the cost of larger refactors does it have the same you know like the type system can become a pain to work with sometimes uh i think enums they're fantastic but there also can be a pain in the ass every now and then oh yes that's casting you're right oh my goodness this cat oh i'm such a stupid yes this cast food to a function is that is that right this cast food to a function pointer and executes it i don't know i still edubs are super simple enums are super super simple um they're not they're not hard but just let just go use it for just a moment um but i think that one thing about rust that makes it super hard is that due to the expressive nature of rust it's really easy to express a problem incorrectly does that make sense and so you'll you'll think that you got a good idea and you'll start going down this path and you'll express a type that might be nice with what you're doing in the beginning but as you scale it it's all incorrect and you effectively have to redo your types and so you know what i mean like that that it's it's a hard thought process i haven't had to do a ton with lifetimes and so i don't know how hard lifetimes really are a rust async is kind of clunky i agree with that you know it's not it's it's definitely not a w ow weird when i press backspace it wasn't working async traits generics is really hard absolutely impulse aren't super use like they're they're super pain in the asses every time i start trying to use more and more impulse um so same with other lengths well other lengths don't have the borrow checker and so that tends to remove a lot of problems as far as type systems go it depends on the expressivity of your types right so one thing that goes good at is that types are so simple you can't create a really complex set of types and without really complex set of types you can create you know when you need the refactor the refactor is very one-dimensional it's this typescript has the same problem which typescript you can create really complex types and when you need to refactor the refactoring becomes much more difficult does that make sense that might be just a peer experience thing that's kind of hard to describe but i find that the richer the type system is the easier it is to express problems but the harder it is to change it but it's harder to do without good types yeah exactly so it's it's a trade-off i'm not saying one's better i still don't know if i think one is better than the other honestly like real talk i don't know which one i think is better that's why i'm actually super o camel curious because when you look at o camel it has it just has a lot less typing and a really great inference and i wonder if that is actually easier to write and refactor i don't know like i truly don't know and so that's why i'm just very curious about that and so i want to try i want to take some time and actually learn it and try to you know get good at it anyways there you go that's my thought rust of the dark side there you go hey guess what the name is the prime machine