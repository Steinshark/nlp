well first off who are you rich harris who are you uh i'm i'm just some dude all right i look at the cell i write software for a living so i spent i'll start keep on going yeah keep on going uh well for a long time i would explain how i was in the context of what i did um i spent most of my career as a journalist and i kind of transitioned into software a year ago and now work full time on open source you only transitioned into software one year ago full time yeah like i've been writing code since 2011 to 2012. i'm pretty old at this point um but only like in a purely technically focused professional capacity for for a year oh wow okay uh so so you actually svelt is older than a year old so you came out in 2016. really so you you were working on that while just not even a professional coder like if you mean by professional professional well so i was i was working at a graphics department um at a newspaper at the guardian um and my job was to uh tell stories through visuals and very often the best way to create those visuals is using javascript so i used it in service of my job um but you know as we all know building high fidelity interactive experiences that work well on mobile phones and deal with animations and transitions and like massive amounts of data and all of that stuff is incredibly hard and the tools weren't really that to the job and so svelt was born out of a frustration with the the ways that we had to do that kind of thing um but then you know shared it with the world and it it took off and now it's like a it's a framework in its own right wow that actually i mean that's that's an incredibly interesting way it's very interesting how things can be borne out of a need and they become something that's very very nice right i think a lot of times you know people think like open source is just something you do for fun or something like that but it sounds like you just you just had to get something out that just was better and then it ended up being actually a useful thing to many people yeah i mean i think the vast majority of successful software projects are like someone's scratching their own niche yeah yeah that's that's uh it's like the professor always says like if you've got a question then other people have probably got the question too so you should put your hand up and ask it yeah like if you're experiencing frustration with development then it's very likely that a lot of other people have the very same frustrations and so if you can make some some package or some library that solves that problem you're probably going to be solving other people's problems as long as you can get other people to find out about it which is the hard part of open source interesting uh so you've been doing open source for some time what is so what are some of the hardest parts about doing open source hardest part about doing open source because i've heard of a lot of stories a lot of horror stories but i don't know if it's the regular you know i mean i i joke the because i work um full time on svel at the cell and i don't work on the product i kind of joke that i don't really have a bus i do jared if you're watching you're a wonderful boss but i don't really have a boss like i kind of manage my own time to a large extent but i joke that because i work on open source i have thousands of bosses because everyone is in the issue tracker saying you've got to fix this you got to fix that this is stupid this should be redesigned and the hard part is triangulating between the different needs of this vast constituency and figuring out a path that is going to make the maximum number of people happy without compromising on the the stability and the vision of the project um that's what's difficult about open source because like you're you're not just building something in isolation and then presenting it to the world as a done deal you're trying to accommodate the the needs of vastly different people and it's tough you know speaking a lot of it and also they yell at you yeah i can imagine that you get quite a bit of uh angry stuff i mean but that's inevitable right because for however it happened that's like always the classic story of open source which is people somehow forget that it's just a person just like them building it and you make trade-offs at some point or you just don't even know the answer it's just that's just what happens um so quick uh kind of following up on that this whole notion um with open source and doing it i think a lot of people look at that as like the dream job as the thing we all aspire like oh if only i could be doing and building the project i love is building something full-time now that you're only about a year into it or a little more than a year uh does it really live up to that expectation do you kind of miss working on a product directly is the grass always greener uh i i mean i think the grass is always greener i think that's true in every aspect of life for me it is a dream job that it hasn't worn off yet the novelty of being able to do this i've count myself extremely lucky um i was worried moving into to this line of work that i would i i would miss being able to work on quick turnaround projects which is all you do if you're on a graphics team at a newspaper then you're just constantly working on new stuff and one of the the advantages of that from a software perspective is that like you can just rack up an insane amount of technical debt over the three or four weeks that you're working on a thing yeah publish it and then you can just like walk away like with the explosion behind you and it's like no no one cares anymore and that's nice and you're working on different stuff all the time it's a very fast-moving interesting job where you're working with interesting people and i was a little worried that i was going to miss that i was also worried that by working on the framework instead of building things with the framework i was gonna lose touch of um you know what what it needs to to do like you kind of retreat into an ivory tower and tell people how they should build their apps even though you don't build apps you just build a [ __ ] framework and that i'm pleased to say i don't think has happened i do still get to build apps um in what i do but also because i'm now on github all day i'm actually more closely connected to the community and i'm uh i'm more closely aware of the experiences that people are having the problems that they're facing and so i think it's it's actually helped in that regard on but yeah grass is always greener yeah all right let's get hold on i may have an echo hold on i may not have realized i have an echo could uh you check one chat one more time uh yeah oh there we go there we go fix the echo oh yeah i my bad i had a necco i was just thinking about it right now like oh man i should i probably have an echo my fault everybody my fault everybody uh can we get rich to play quap no rich is not you know don't play co-op rich uh i have no idea what that is i'm so old okay well no it's it's for old people it's uh it was uh it's for me too you know for those those of us that grew up with an nes i gauged by what time you you said you started coding that you probably are nearest the nes or super nintendo days uh unless if i'm very bad at gauging how early you are i i actually grew up in a game console free household that explains it all right so actually i do have another question because this is something that i think is really important of the people that use spelled 99 out of 100 aren't gonna say a single word right they're not gonna go on github they're not gonna file issues they're just gonna use it they're gonna look through it they're gonna build something with it you'll never hear a word how do you know how to kind of navigate the open source world in in a way in which all your constituents all the people that are your boss you know the loudest aren't necessarily the correct so how do you know when to listen to everybody or to push back yeah i mean the the silent majority is a thing that i i think about a lot like most people the people like on this stream both you and me and everyone watching we are not normal yeah we think about software way more than it's healthy um a lot of people just want to build [ __ ] they want to get stuff done and not think about their tools beyond the extent that they have to um and candidly i don't know i don't know how to solve that problem i would love to hear from people who've thought about it more deeply and come up with with some way i mean i hear people say that you've got to get out to like the the big conferences not the like the front end focus conferences where all of the same javascript people turn out um and like everyone knows each other but like the fluence and the whatever the [ __ ] like this is where you will encounter um a lot of these people and and you can talk to them and and explain what you're doing and hear what they're doing and all of that but i don't know that that isn't a lifestyle that particularly appeals to me i can give you a real world example of um i'd love to hear it of an episode when we got some um some very voluminous feedback about a design change that we're going to make and this was to be fearless this is people who are already engaged these are people who are on our github discussions board and we've announced that we're planning to make some changes and and people start responding to those changes and so we are already talking about that one percent but within that one percent there was a vocal minority that was adamantly against these changes and we were kind of taken aback because we had talked about it amongst the maintainers and we thought that this was a really good solid proposal um and we put it out there and the strength of vitriol from that tiny small minority of that one percent um kind of knocked us sideways but when when we thought about it and when we talked to more people and when we reached out to some of the people who had not weighed in on the discussion it turned out that the vast majority of people loved the changes and because of that they didn't feel the need to weigh in they just put a thumbs up comment on um on the on the discussion and moved on with their lives and so you do have to have a little bit of discretion and judgment when you're making these calls you cannot let yourself be led by the loudest voices and you know to an extent you can't even be democratic about this stuff you can be consensus driven but if you um if you sort of throw things open to the to the crowd then you're allowing you're essentially seeding your decision-making power to people who don't have quite the same level of context um that you do because they're not in touch with all of the other people who have different use cases and have different frustrations and so need a different um a different design approach um and so ultimately it comes down to judgment when i started out in open source i didn't have that judgment and i was very quick to say yes to feature requests and the outcome of that is you will build something that is completely unwieldy and eventually serves no one um over the years i've become a lot more crotchety i'm i'm very good at just saying no we're not going to do that that's either that doesn't mess with our vision or it's a straight up bad idea and you've kind of got to have the the the fortitude to say to people no this is this is wrong we're gonna do it this way instead and ultimately what i found is that people if they trust you if they trust your overall vision for the project they will come around okay i got one more kind of spicy one along these lines which is recently we saw an article come out about rust rust 2.0 tweets everywhere even if you know nothing about rust you may have even heard rust 2.0 and you know the ships burning the world's going to end and everyone hates it uh the idea that at some point breaking backwards compatibility is a good thing as you can obviously remove huge amounts of technical debt blah blah blah blah right like there's good reasons to break backwards compatibility but also there's bad reasons have you ever had to face distance felt and how do you know when it's a good time to say hey everybody we're breaking it everyone that's currently using it you are left behind if you don't make this upgrade and the upgrade could potentially be very difficult well we did exactly that in 2019 we had svelt 2 prior to that and then in april 2019 we launched felt three and it was a complete rewrite like they're essentially different frameworks it was kind of an angular one angular 2 scenario um we had the luxury of doing that because back then our user base was was tiny it was like a very close-knit group of people using this thing and it was such an obvious improvement that the voices of people saying this is going to cause me a very painful rewrite would drowned out by the people saying oh my god yes give it to me and so that kind of worked out i don't know if we could do that again um oh salt 4 is is on the slate for next year and it will involve some breakage but we're gonna try and minimize that and we're going to offer migration scripts and all the rest of it because you know we're not in a position now where we can just pull the rug out from from everyone and so we have to be very thoughtful about how we do that but breaking changes are necessary sometimes yeah you know you need to occasionally you need to do a little bit of um forest management you need to to burn the undergrowth so that you don't later have a wildfire and and that's i i think something that needs to be judged on a case-by-case basis i have no insight into the rest situation um yeah if this is going to be like a python 2-3 thing then i would say like maybe just suck it up um and don't do the braking change but maybe they need to you would have way more um insight into that than i do yeah now it's just more of a question because you know ultimately i haven't i've only built one product that had a decent amount of open source requirements that was falco or way back in the day kind of like what's being revisited today it's kind of interesting seeing all this talk about fetch and paths and storing data and caching and all that as well i built that one one time ago and it's exceptionally hard to do right and caching will always be bad and somebody's inevitably gonna say i want to make a request and have it cashed immediately and then decach right away but it needs to be there for one operation and you're gonna be like whole framework's broken right like it's just terrible but i found it extremely difficult navigating some of those things and answering the people like how do we know to make a change even if it's going to make the whole thing better you might have to break somebody and it's just always it's a very tricky line to walk because you are now not responsible for yourself but responsible for other people and yeah and we did this during spell kits development it became a bit of a meme at one point because we were making um some very sweeping breaking changes the discussion that i told you about a minute ago where we had this very vocal feedback that was a significant breaking change and we wrote a migration script that did most of the work of upgrading people's apps but it still involves some some manual migration um and and people got mad about it but it was absolutely necessary we were able to do that because we're in a pre-release phase we had made no send their commitments but once you made similar commitments it's a different ball game um okay i like that and so you just released also svelt kit right 1.0 right that's like the big thing going on right now you want to talk a little bit about that and kind of tell me about some cool stuff that's gone into that and what makes it something that we should be looking at wanting to use all that good stuff yeah um i'll make it big again put you up here so every every ui framework needs to have an app framework to go with it um for a long time people um were using svelt and were like this is great but like i had to cobble together my own build process and stuff and you can use it with vet and whatever it's fine like you can do that but it leaves all of these questions unanswered like all of the stuff that i brought up at the beginning of the stream like okay and i want to add a i want to add a router how do i do that how do i do code splitting like all of this [ __ ] that you don't really want to deal with you just want to build an app um spell kit is designed to to do that and it's i mean i i don't know i don't want to downplay things here but it is it is just a way to build web apps same way that next and remix and astro and all these other things are it's just a web application framework uh we're not claiming that we've created something radically new in fact the opposite we kind of want people to find it radically familiar if that makes sense um but what we are saying is that we think this is the nicest most enjoyable way to build web apps um that exists today so quick and sorry i had a follow-up to that um why not choose like because you work it for sale so you obviously have the ears of the next js team why not try to figure out how to integrate say with nexjs or something like that as opposed to building your version of it it's just a curiosity one thing yeah for one thing i think the answer would be no okay um i mean i i don't know i've never had that conversation but uh a project like next is quite large in scope and the the complexity of supporting multiple frameworks i think would would break it and i actually don't think it's a good idea for an application framework to support multiple frameworks and i'm gonna piss off the astro people here because like that's kind of their whole deal but the the synergy that you get between the application framework and the ui framework when everything is built like and it's designed to fit together is something that you cannot get if you have this very kind of um sort of unfocused approach to to how you integrate with ui frameworks and there are examples of this install kit the way that the routing and the data loading and the component context and the component stores are all kind of they gel together in a way that would be really really hard to do in a ui framework agnostic application framework so that that i think that's why yeah because i i would assume that if you have more than one framework in some sense you have to go to the lowest common denominator you can't do something special for each it'd just be untenable to try to manage i mean case in point look at what next is doing at the moment react server components that requires some deep integration not just a technical level but a human level like the cell literally hired sebastian to make this possible like i don't think it would have happened if we didn't have these very close ties between um sebastian and the rest of the reacting because there's this whole vision that goes into making something like that work and that's not to say that the two things are coupled to each other they're not at all but um next is is very much benefiting from the fact that there's this close relationship um and i think that that is true of any uh ui app framework pairs all right we do have a really compelling statement right now from chat which is the only thing i don't like about svelte was that the creator used vs code to write it how do you feel about that do you have any answers for that uh look if if someone can show me an editor that i can be as productive in as vs code um without me having to learn a bunch of stuff or set up a bunch of stuff then have at it but right now i use vs code and about 25 of my code is written for me by copilot so at the very least you have you have to find me a co-pilot substitute uh what do you mean a co-pilot substitute can you explain that for a quick second because i'm pretty sure that in a hardware project co-pilot would fail but yeah i have co-pilot running on this thing t pope and nat friedman worked together and wrote co-pilot for uh neil van all right yeah oh okay look i've tried them i you know i yeah them is the thing that when i had to resolve merge conflicts or get doesn't know what's going like i i have to go into them and i have to remember to do the the colon thing and then fart around and then i had to figure out how to get out of it again and i use it it's fine if i ever need to do something over ssh then like i can i can survive in them i do not want that to be my primary editing experience you're missing out you're missing out once you're done i'm sure i am i've tried i've tried multiple times i've like in several points in my life i've been like okay i'm going to spend two weeks just in them i'm gonna learn this [ __ ] let's go and i always get like six or seven days in an hour like this is this is not for me yeah no i get it i get it all right well one of these days we'll have to well we may have to have a comeback where i give you a script you paste it in and every language server that every file that you go to will have a language server you can have co-pilot we can have it all it'll just automatically work for you and then you can try them the vim way which does require a waifu in the background so you do you have to figure that out challenge accepted also linux socks i'll buy you thigh high socks just to make sure that you're nice and comfortable all right um okay so let's actually let's let's keep going on this felt thing um so you just got done releasing it it was yesterday right that this all yes that this all came out uh how has the reception been have you had is it just like on fire right now are you doing this interview while panicking currently you know it's the smoothest lunch that we could possibly have had i i was braced for things to go kinda wrong um you know we did a lot of work in the days leading up to it i didn't get a whole lot of sleep and i just assumed that things are gonna gonna be terrible and we actually launched it live on on a youtube youtube stream oh no so we had this sister organizations felt society they run um events and like we had a conference in stockholm in september um they also do the spelled radio podcast and so we had a live episode of the spelled radio podcast me and simon who is on the core team works with me at the salons felt we were on there and we we pressed the button live on air to release it and i assumed it was going to fail because these things always fail but um dominic another core team member had spent several days doing like multiple dry runs and figuring out how to collapse 16 000 lines of change sets into a stable release and it all went so perfectly i couldn't believe it and then we put it on happy news or someone put it on hacker news and the reaction was just incredibly positive um to the point that people would message me saying like you you you're on hacker news and people are being nice what the [ __ ] did you do so the reaction so far has been has been overwhelmingly positive which i'm i'm very very pleased about because people like get a little bit um ornery about new javascript framework releases um and so far people seem to really like it i like that that uh i i think what i think what you could partially obviously speak to is that you built a good product right people get to use it they get up and running there's no glaring or obvious problems so people like that uh but i think more so i i do think there is a bit of like framework fatigue in the sense that whenever you have to do something and say like react you do have to find a lot of the ways to do things in react whereas here it does feel like i could just make jquery happen if i wanted to use jquery and just like would just be jquery running right like there's not like a lot of stuff that feels very custom and i do think that that just makes you know i think that makes everybody breathe a little easier i think that's why jquery was so successful as it was and i do think that just the fact that i can do like this whole like input binding business that we had right here uh i i just think that that's like a successful thing because it doesn't it doesn't require a lot of effort but the exact same time i can bind something out feels fantastic and yay yeah we have a lot of stuff built into the framework a lot of things that you would normally need to install a package for like motion element transitions stuff like that it's all just kind of kind of there um so you never need to even if you need to consult the documentation you only ever need to consult our documentation for the most part um which i think makes it easier and and i think in general like the mistake that a lot of um a lot of us make in in open source tool development is we assume that people are using our thing all the time and in some cases that's true like some people work in a react code base day in day out and that's all they do but there's a large number of developers who only go into the code occasionally when they need to update something or need to change something and for those people if you need to relearn a whole lot of stuff it's a pain yeah and because the people building all of these things they're in it all the time and they're talking to framework enthusiasts the kind of people who are watching the stream right now like we forget that this is not how most people interact with software yeah yeah i i actually feel like i'm more this target market than you realize because i do so little front end that you know every time i do it i have to relearn the universe and and so that can be very painful every single time that's the thing and then like you're a stone cold expert it's not like you're a beginner programmer like we're condescending to you by making things super easy it's not like spell is a framework for idiots it's a framework for people who don't want to have to give a [ __ ] about frameworks yes uh yeah i i do feel that because every single time i get started back up i inevitably run in like i spent three hours on various bugs with react just recently because i'm having to build a front end for something and i just got so frustrated hence the reason why i threw it away when just when was solid solid is at least one step a lot easier right you kind of have a point of movement and then it's like then it's just pretty much javascript with jsx after that and it's it's fairly easy this feels like it's it's just another step in that direction where it's like now i'm just not even caring about any of that i'm just doing html which is like webmd when i need or webmd pretty much webmd uh mozilla w whatever it's called oh my gosh webmd man the moment i get there it feels great you know it's just like it feels like i could learn that very fast i have to learn a couple things i probably won't forget bind because that's a fairly easy thing you know you're only remembering one thing that you then can use okay this is great this is fantastic yeah and so spoke is designed to be the app framework version of that like you install it and you're off to the racism interesting interesting so there's a couple of ways that we could go about this um we so we have spoke it in the tutorial still um so you can actually learn spell kit inside the context of this little um uh little window pane at the bottom can we just get like a world or we can create a project yeah like can i just do a quick little hello world in it because i'm actually very curious about it um yeah all right let's get to the command line then yeah i'm already there let me make it uh shrink me shrink me baby i will um now i'm too big uh let's see take that guy and we'll make you smaller there we go we're both nice and small now all right so npm npm create svelte i don't know just all separate words create space um spelled at latest just to make sure that it cashed or anything and then you can optionally create a directory hit yes yes okay i do want to create a directory uh leave blank to use current directory no uh we'll just call this thing uh svelte uh spelled there we go so i assume i just do svelte kit demo app correct you can do the demo app you can do the skeleton project which is the hello world that you wanted okay yeah let's go to skeleton project is it will that have like no that's the library skeleton project you don't want that this is brief you're going to make a package for other people to consume oh okay so this is just this will have the router effectively all set in place and i can have effect an entry point all right i'll i would like to use typescript eslint um i'll use eslint uh i don't like well i mean i like using prettier but i don't like it on i don't want to use any any testing no testing we don't need testing all right so there we go so we have everything cd uh stealthy's felt and then we have an end oh let's let's do uh yeah we'll do npmi and then i get a net and get add oh you did a capital a get commit richie rich i think i got that all correct first try we're about to find out all right there we go let's find out my typing skills you know i may be very fast but i make mistakes every now and then all right it works look at that let's go that was great all right so we have all this so this should be running on okay nice nice address thank you for not making it three thousand as every person in the universe currently makes it oh there you go welcome i love the 1990s spotlight graphics going on here this is fantastic do you know what's happening here um so i i had no idea this was gonna happen this is because i didn't open yeah i was in i had dark readers on oh i see yeah it you can't blame dark readers dark readers kind of screws up everything so right don't blame him that we needed to fix but okay all right try and if we if we had a if we had a dark theme on this like if we had uh preferred color scheme media query would that would that dog food and not do that i'm not sure if dark reader does it i think it's still added stuff dark reader always kind of sucks right like dark reader is the thing you use because not every site has dark stuff right and so it unfortunately screws i had to turn it off for quite a few things there's actually some things that i still can't even use it on at all i forgot which one it was but it makes the text and everything all the same color uh i want to say it's like jira or something i had i just had a horrible experience at one point anyways okay so this is fantastic i know i had to use zero recently all right so we have this thing up and running which means that i should be oh i put it in position one i'm gonna screw that up uh let's go to sveltees felt let's vim this up all right so uh what is it it's app html no um sorry that's your yeah all right so routing is based on the file system and so just like in next and remix and all these other things and your routes are derived from the file system where we are slightly different from some frameworks and although we're actually aligned with with next and quick city and basically everyone is going to do this in future because it is a much better model is that uh all of your routes are defined by the directors of your file system at the moment you're in the root root directory root route directory if you prefer the american pronunciation and then you have the you have the about and this fertile um routes there as well and within each root directory you can create these root files which are distinguished by having this plus sign at the beginning of the word um so the the page dots plus page dots felt says that there is a page at this location um and because it has a plus sign we know that these are files that are special to spell kit but you can put all of your other files like your utils js your components you can put that inside your root directory without that creating another route or conflicting with something that's felkit is going to do and everything against component right because these other libraries they have like a component section so you just don't even need to do that weird kind of like requiring all the way back yeah none of that no okay sorry so because it's here you kind of have your your routing is built into your tree structure of your component so it actually makes it a touch easier to have nicer organization here okay exactly and so this thing doesn't get required you can't go to sveld counter and then one quick question obviously there's a page.ts this must be handled slightly different what is this yeah so uh we have separate concepts of of the the data tree or the loading tree and the render tree um your your page dot svelt is your user interface obviously but your page ts this is where you would add data loading this is where you configure the page and you decide whether this page is going to be server rendered whether it's going to be client rendered whether it's going to be pre-rendered at build time yeah so what is free oh pre-rendered means that this is a static site is that what that means or this page effectively yes so this this page is is static you can make your entire application static if it's suitable or you can just make individual pages static and what that means is that when you build this app you do pmpm build uh or npm run build um it will create the optimized production version of your app and then it will um it will crawl the application that it's just built and any pages that it finds that are pre-renderable it will bake those out as html files so that when that gets deployed um in the majority of cases uh depending on like which adapter you use to deploy to a different target in the majority of cases the requests that will come into that page they will just hit a cdn that serves a static html file and no computation happens it doesn't need to go to your server or your serverless function or anything like that but then some other routes of your app which do depend on dynamic data or they have personalized content or whatever those can be handled by a server or a serverless function or an edge function so you get this really nice high rid of maximum performance for the pages that can be statically pre-rendered but infinite flexibility for the pages that cannot all within the same app and it's just this single line of code to toggle between the two and you can do it for an individual page you can do it for the entire application you can do it for a subtree of your application it's all very straightforward that's cool i like that a lot because uh you don't have to it it's always kind of a pain when you have to try to when you have to try to separate out these static non-static things so this makes it look like it's actually fairly easy and then is all the actual uh uh serving of the aesthetic things also handled i assume by spelled kit and then the only thing you have to do is like throw some sort of caching proxy ahead of it and then therefore you have great caching it it so it depends how how you deploy around you have um all of the flexibility that you need um if you if you deploy to the cell or netlify or cloudflare pages it's all handled for you it's all zero configuration um you just link your your git repo and it takes care of everything um from there if you want to deploy your own node server you're using render or fly or something like that then you just swap out the adapter in the configuration file for adapter node and then it will create a node server for you and at that point you have complete control you can add whatever caching layer you want um or if you're doing a fully static thing you can use adapt to static instead and then you've got a bunch of html files that you can put on github pages or whatever else very cool that's actually that that's super convenient i like that and there's so there's an api for creating more adapters people have built adapters for dino and bun there's adapters for aws lambda app engine azure all of these different things um completely agnostic i thought it was as you are yeah i think i think it i think it's it's it's pretty fancy if i'm not mistaken yeah well i'm not a fancy guy and neither am i i don't know mr fire in the background festive christmas christmas come on to the max behind you it looks so warm and inviting in your place it's even tinted yellow that's probably just because there's crap on my webcam it looks nice um all right let's let's open it up do you want to field some questions sure hit me okay yeah yeah let's do some questions from chat uh we got some people watching i don't know where we're at we're at uh 1260 people in twitch yeah so don't say anything stupid i know it is kind of crazy can you believe this many people watched uh tech streams these days like when i started streaming it was 30 people like that was like a big stream 50 was lana lux she was the lux the luxury of all of us right like and that was pinnacle was like 50 people now the world is just so much different it's crazy yeah i've got to be honest this this whole thing kind of passed me by the the world of of streaming just passed me by uh i still get my news from the javascript weekly email newsletter that's how i stay in touch with things and i follow people on twitter i like it i follow people too on twitter but it's mostly for me to just [ __ ] post uh i say the stupidest things all right okay here we go so i'm not gonna pre-read these questions so if they come out stupid or they say something inappropriate i'm sorry uh can we get a first class svelt kit adapter for for sales package tool or something like that for devs like me who need to deploy a customer servers or two cus uh it must be custom servers and docker is not an option don't ask why uh i mean you could definitely write one if i've understood what the package tool does correctly i i think this is this is a thing where you if you have a node app then you can you can bundle node and your code into a single executable that then just blend somewhere um you could probably just use the sales package tool build a node server run that tool on it and boom you've got your your portable executable but i don't know i've never used it i would imagine that it's pretty straightforward but please don't quote me on that yeah all right hold on let's see let's see hold on let's see if we got i know we got some questions over here on twitch too uh all right here's another one uh is there a plan for the future to have a way to not have to type lang equals ts into your script tag and just auto opt into ts uh i mean you could probably do that today just with a preprocessor adam personally love that the the lang equals ts is for your benefit as much as ours um it you know makes it clear what you're dealing with but i don't know maybe i don't know i never thought about that i can see how it would be preferable if typescript is is the default um yeah that's a good question why why still you know because i know a lot of you know t3 stack or whatever you're not even allowed to select javascript so why uh why even support javascript at this point like javascript is is the language that runs on the web and i there's a lot of people who who don't know typescript don't want to know typescript and i don't want to abandon those people my personal preference is to is to write javascript but with type checking provided by js dot comments uh that way i get full type safety but i can run my code in node without any intermediate stuff i don't need to install ts node and fart around with that everything just works there's no moving parts it's kind of beautiful i i'm actually on your team with that one i do i do love that i would prefer if i never have to keep setting up these insane build systems but instead it just runs because we're already it's it there's something painful about writing and code that doesn't even execute on its own that we now have to build code from code that has to be rebuilt again just to be grand right there is just something kind of painful emotionally about that i i think i think we lose sight of just how much overhead we add with all of this complexity in the name of convenience we make things incredibly inconvenient and once i realize that you can get type safety in javascript that runs natively just by adding these js dot comments it's a little bit more verbose than using inline typescript but it's a game changer it's it's a breath of fresh air to not have any tooling involved in in running type safe code i'm really hopeful that the typescript team is going to get this proposal through tc39 that is going to allow typescript comments in javascript or at least typescript-ish comments in javascript um do you know about this no i i don't i don't i don't honestly keep up that much with all right um so in the same way that you can you can express um types through jsdoc comments and there's a proposal to make typescript annotations appear as comments to the javascript parser so if you've got you know const foo colon capital foo oh i love that equals whatever the the javascript parser just doesn't even see the colon foo it thinks that's a comment same with if you had double slash and then it ignores everything after that it will ignore everything from the colon to the end of the identifier and so that way you could have your nice concise typescript syntax and typescript would still be able to type check it but you would be able to run it in node or in the browsers or wherever else javascript runs without any need to compile it beforehand it's the way of the future i like that i actually i i think that that that's probably that's probably the best way i've heard it uh yet proposed because i was actually i'm not gonna lie to you i was pretty sad when i started i saw some of the early prototypes of like js types that was being thrown out there and the fact that it wasn't just like in make typescript a thing it's just like the world does not need more fracturing like can we just can we just not do that and so this would allow this would this would feel great all right we've got another one yeah uh in terms of breaking changes mentioned force felt for next year is there anything you want to flag or give us a heads up about like uh next does with rfcs uh so we we're not really in a position to make any commitments about what is going to go into salt for because with all of our focus has been on spoke kit lately um now that's out we're gonna start thinking a bit more about spelled four but i can kind of talk about some of the things that are on our radar some of it is just clearing out technical debt um so what one feature that spell has is element transitions um where you can just add a director to an element and then when it appears in the in the page uh this transition will play and when it gets removed from the pages transitional page so like an element can fade in and fade out or fly in and fly out and this is all done with css animations the way that it works is you provide a javascript function that creates uh the css for each of the like the 60 frames that is that it's going to take to to run this animation and then spell compiles that into a big css animation puts that into the dom applies the class to the element that triggers that css animation and then the css animation plays this allows you to have these smooth javascript control transitions but in a way that runs off the main thread and it's nice and perform and serves battery life it's also hacky as [ __ ] and now we have the web animations api it's well supported in today's browsers in a way that it was not when we made spell three three years ago so we would like to get rid of that css hackery in favor of a web animations based api if you're using the transitions that are built into svelt that will not be a breaking change if you've built your own custom transitions then that is probably going to be a breaking change so that is an example of the kind of thing where we're just clearing out some technical debt and there will be some minor breakage as a result larger changes that are potentially breaking is how we think about stores so i mentioned earlier on the stream that we have a state primitive that's kind of analogous to solid signals for having um state that lives outside components and one of the things that people rightly criticize for uh right rightly criticize itself for is that um using these state primitives is slightly different to how you use internal component state what i mean by that is that when you have um a variable like count equals zero and then you do count plus equals one you're just referring to that variable um by its own name if you were to turn that into a store you would do cons count equals writable zero and then you would update it by doing something like count dot set one or count dot update and then you would pass the value like a a function like a reducer to update that and that's all fine but then in order to reference that value inside your component you can no longer just use the word count because that is the name of the store and what you want is the value of the store and so we have some syntax sugar you reference it by putting a dollar sign in front of the account so you have to change your curly brace count into curly brace dollar count and anytime you refactor some internal component state into a store so that you can share it with other components that are in a different subtree or whatever it is you need to to make that that switch and it's annoying yeah someone pointed out a while back what if instead of having the name of the store be the variable and then you have to prefix it what if stores were identified by having a dollar suffix instead of the value having a dollar prefix and this as it turns out is exactly what people in the rxjs will do yep anytime you have an rxjs observable you have a dollar suffix and so one thing that i would love to get into spell four is a convention whereby stores are identified by the dollar suffix and you you reference them by just removing that suffix and that way you can refactor between component internal state and the store primitive very easily and so that is the kind of thing that is going to be i think a probably a quite substantial quality of life and improvement but it is going to be a breaking change we will try and make that migration as seamless as possible we might even have a compatibility mode but stuff like that is that that's like the size of breakage that we're talking about like we're not probably going to introduce some wacky new syntax or anything like that i i would imagine that the experience of writing spelled four components is going to be very similar to the experience of writing spelled three components internally everything will be different we're going to rewrite the compiler and modernize it but um the breakage i think is going to be minimal and it's not something that should dissuade people from learning spell three today nice um would you are you gonna release some sort of a linter type you know some sort of es lint plug-in that you could start giving people warnings early on right like so if they're using these stores can you start warning them like hey it's spelled force coming throw dollar sign at the end of this it will make it easier eventually we might well do that there is an eslin plug-in it has two excellent plugins we need to consolidate them nice um more is better that is that is that is something that we we very well might do in the past we've we've done this thing where you can opt in to the the forthcoming default behavior through a compiler flag um and that that is people's migrations from svelt 1 to spell two and then consult two to self three we could very well do something like that as well interesting okay uh i had two two kind of declarations of love uh here's two of them hi i love writing and spell js but i'm coming from react so solid.js feels more home to me i just wanted to know how spell js reactivities differs from solid js reactivity i guess you'd have to probably just watch this you could just go back and watch this video to see a lot of that i feel like we fairly well covered that correct uh and the second one is i just wanted to say i thanks to rich uh svelte makes me hopeful for my web dev career i'm new to web dev and i genuinely love building sites thanks to svelte and how fun it is that's really cool his musically is welcome to web devs we are very happy to have you i feel like there is something really true there that you limit the surface area thus newer people feel more empowered to do something and i i do think there's a huge bonus there that's probably underspoken on that one that's all i mean so this is partly a consequence of of west folk came from right i was using it inside newsrooms i wasn't using it just so that i could build stuff in svelt i had co-workers who were also building graphics and a lot of people who work in newsrooms and do this kind of thing um are not people who care about code very deeply a lot of people have html experience a lot of people have css experience and javascript is kind of this thing that they have to deal with occasionally um and so svelte was was we came out of this this world in which a lot of people do not consider themselves programmers they consider themselves journalists who happen to write a bit of code and because of that there is an upper limit on the amount of complexity that people will tolerate i also have a pretty low threshold for complexity before i might i don't i don't care about this i don't want to know about this um but having people around you who are also like i don't i don't want to learn how to configure webpack i don't want to learn babel and all of this other [ __ ] just like give me a thing that i can use to make the thing today because i have a deadline and then i'm happy and so that's why spell is the way it is yeah i like that all right are you guys planning to migrate uh to turbo pack or continue to use vite uh we're definitely going to continue to use veet um turbo pack is on the radar absolutely as a potential alternative um to beat for people who want it the idea is that uh if if you if you want all of the features in the ecosystem of heat then you can use felt kit via the v plugin um but if you wanted the like the blazingly fast performance of turbo pack then you could use that instead um this is all speculative at the moment because turbo pack isn't um yet ready for projects beyond the next dev server to use but like 100 we're gonna we're gonna look into that and this is the benefit of spell kit just being a veep plug-in um the integration between them is uh like on a human level we are very close with the v team um there are core team members on svelt who are also core team members on veep for example and so we talked to them all of the time but on a on a code level oh we're fairly cleanly abstracted um such that we could in theory use alternative build tools like turbo packs but we're going to continue supporting v we love the everyone loves v is not going anywhere a quick question is that actually i'm skipping some questions uh fireship mentioned a plus loading svelte in his uh spell kit video but that's not currently a thing was this a mistake on his part or is it uh or is that an upcoming feature so i haven't seen the video so i don't know what he said about it but um i you saw those root files before the plus page dot spell plus layout dot spell all of that stuff should we do a live react sure just a straight up live react rich harris watching a svelte kit video by fireship because then you can you can see what he said i like fireship by the way uh flash is great i love fireship yep he is the person that i every now and then i i talk to and i'm just like yo dog i need help all right this is two hours ago all right hold on i gotta make so here's the problem is i'm gonna now give you my broadcast stream so it's gonna be a little bit or actually let's see let's see if i can i might just be able to give you system which means you won't be able to hear me and i'll have to kind of toggle back and forth because i don't have a way to like combine two audios uh well i do but then i'd get your audio back to you and that's super hard to talk whenever you hear yourself okay you know what i mean uh let's see if i can get this really quickly hold on all right uh let's see let's do let's see it let's see oh oh no changing your output device requires a refresh okay hold on i'll be right back hey there all right can you hear me okay perfect let's see can you hear this oh wait you're not oh no i did that totally wrong oh my goodness we did this totally wrong help help uh let's go back to oh man yes i'll be right back all right there we go all right so i'm just gonna give you my broadcast mix so i'll turn it off every time i can okay all right it is december 15th oh and then my audio screwed of course my audio is screwed up oh my goodness we're not laughing at myself oh my god oh [ __ ] there you go i turned you off that's it we're not reacting stupid linux gosh we're gonna do something so great and of course linux sucks um oh my goodness all i want for christmas is working audio consistently oh this is just that was just so sad all right we're gonna do some more questions sorry if i'm skipping some of these things um i hope that you're okay with that uh okay this person says he hates the dollar and hates rxjs that's useful uh let's see uh does felt has needs trcp's felt query um i i think there is a spell query um i i think tana built that in a like a framework agnostic way and if it doesn't exist then it's gonna exist soon i believe um trpc there is a trpc spell kit integration you will you might find so i i don't want to talk trash about anything but you'll probably find that you don't need tlpc um most of the time when you're using socket because we have typesafe data loading built in um what we don't have is type safe mutations which is one of the advantages of trpc and that's because we emphasize the use of html forms for doing data mutation because it's like use the platform you know it's progressive investment all of that stuff works out javascript but forms are just a nightmare to use with type safety like you just can't do type safe film data very well um but for the for the data loading part like i don't know if we're gonna uh look at some code at any point um but would you would see that when you return data from a load function that you get type safety inside your components already across the network so uh you absolutely can use trpc result kit a lot of people do and they absolutely love it but you might not need it okay all right this is good let's see uh let's see if we got anything else i'm gonna go to the new one sorry if i've skipped over any of you you feel hurtful uh there was actually a good one i saw in here it was about uh kind of like class based operations it was really it was really clever being able to set values based on the class of your property on i'm british so i hate to talk about class but yeah i know well looks like it got lost to the annals of twitch chat uh we'll do i'll see if it comes back up because that actually is pretty uh pretty exciting all right so if you had one reason you'd say i should consider svelt for my next project over next js felt kit uh what would it be i am very comfortable with next but have the autonomy to choose my own direction um so if if you're if you haven't used this stuff before uh and you're very familiar with next then it depends on whether you need to ship something quickly or not if you're happy with next and you have a requirement to build an app quickly then stay with next it is a fantastic choice um by using spell kit you will be expanding your your breadth of knowledge a little bit you'll see some different ways of doing things some different design philosophies and if you become proficient in it i would make the claim that you will be more productive once you know svelt kit anything like as well as you know next um just because building stuff in svelt tends to take a lot less code tends to be a little bit more streamlined than building code and react in my experience and the experiences other people i like it okay question is it possible to use multiple classes with the class directive class colon foo or class colon single quote foo space bar equals some boom boom um so i mean you can obviously have multiple class directives on your elements um but you would need to have the the value passed to each of those that is something that i had never considered before maybe maybe we need to because it's effectively just one class name at that point it's like the the class name is foo spacebar effectively maybe there's a way that we could make that work i don't know um yeah or or you could just do it inside the class attribute class equals open quotes and then have a ternary like condition question mark through spacebar colon empty string you could do that okay uh i'm using pulse audio for anyone that knows isn't it like hold on hold on one second maybe i can i can figure out a way to do this it's like pulse uh pulse audio really why is it an underscore in there pulse audio k maybe i'm not using i'm on system 76 i actually have no idea what i'm using now that you say that uh i guess i'm using pipe wire oh look at that i have no idea pipe wire pipe wire me dad uh what's that does anyone know how to reset pipelier i like how some people's answer is use a different audio service [laughter] cool yeah i'll get to that okay so how do you do dependency injection in spelled what does that mean uh but and what why do you need to use dependency injection yeah i guess yes follow-up question why do you need to use uh dependency injection i mean in some sense uh require is dependency injection import is dependency injection what is web3 no get out of here um i i you might not get the oh oh really if you just delete the home directory it helps okay i'll try that out uh best day about it all right let's see uh let's see uh will there will there ever be a switch block maybe we because i do like that solid solid's really nice to have a switch block but i mean do you have a if else conditions in your xbox so i mean we we do it it nets out to like the same amount of code yeah like it's interesting we we prototyped it a little bit um and i think you can do it this is like a preprocessor that will turn you can right switch and it will turn it into the equivalent if else um but it's it's kind of funky because in a declarative template that doesn't there isn't you're not running code from top to bottom in the way that you are with with javascript and this is one of the reasons that javascript by itself is a bad choice for ui languages which is why dsls like spelled exist um you're not re-running code from top to bottom you're changing the bits of of the template the um that have that have changed and in the case of a switch block that gets a little bit hairy because you need to think about break and all of these other things and like where do you express the the default um with if and else that control flow is very straightforward but with switch the semantics just get super hard to reason about as soon as you express that in a declarative um declarative way so i i don't know it's i'm not going to rule it out but i'm not going to rule it in either do you think that if pattern matching does land in javascript you'll have to kind of rethink that statement maybe okay maybe because i do think that that that's interesting to say the least because obviously pattern matching is is beautiful but yeah i i don't know every time i've looked at the pattern matching proposal i'm like why the [ __ ] would i ever need this i i just find the code very unpleasant to look at oh well again if you'd use rust okay i just wanted to make sure i could get in there one one last time uh someone was saying that you didn't show off the favorite block the await block yeah so we have an await block which is a way of dealing with asynchronous values in svelte all right here let me just uh since i'm already here i should be able just to jump over to page dotsfelt and let's go like this i should be able to do something like a weight yeah and i could say foo right and then go const foo equals new promise uh res uh set time out um let's see res hello world two seconds right is that asynchronous enough yep i think i think like this hold on i'm gonna have to make it a concern i always forget these things are uh they're hot there you go so can i do that yeah and then how would i use this like how do i get that value of foo out uh so first let's close your weight block just like drop down a couple of lines and add a slasher weight all right there we go and then inside that block and the content that you write will be uh present while the promise is still resolving all right let's see oh waiting yeah and then drop down to the next line and then add a colon then block inside yeah yeah yeah yeah yeah uh then um and then in between the then and the closing await you can uh oh actually you need to you need to give a name to the value so then uh call it foo or whatever or message or you know whatever it is and then you can reference that same way you'd reference any other value oh my goodness and then you can have a you can have a catch in case the promise is capable of throwing an error you can have a catch and then you in the same way that you do then foo you would do catch error oh my goodness uh yeah uh aired all right well i actually i want to see this so i believe if i'm not mistaken i actually still have this thing running in my personal directory fantastic go back over here where are you uh awaiting awaiting hello oh oh my goodness uh that was actually very fantastic let's go reg um uh reg there we go same thing i mean it should be an air but whatever uh let's go back here awaiting awaiting awaiting error hello world that was a chef's kiss that just happened right there i was i would just like to say that that was a full on chef's kiss that was beautiful so yeah you can you can use a weight um for that that sort of thing it's it's not quite as elegant as suspense mechanisms because there's no coordination between components um and i find myself not using a weight a lot because i want to do all of the asynchronous stuff in my loading function typically um like i don't want to have a lot of asynchronous stuff going on in the component itself but it's there and it's like it's super handy when you have uh when you have those needs okay okay let's see uh question so there's svelt cubed svelt 3 and now uh throttle uh why are there so many different rappers around uh and why do you recommend so um uh uh a little every year ago what is that by the way can you can you explain what those are it sounds like 3js i have no idea what it is so if you use react 3 fiber it's the same thing it's just like a binding between spell and and three which allows you to express your 3ds scenes using components which if you've ever used 3js it's kind of like using the dom in a way everything is super imperative um and what react free fiber and what all of these things do is they give you a declarative interface to use 3ds which is is super nice um and a little over a year ago when i was working at the new york times still we were covering the the olympics um and we decided that we wanted to have these little 3d animations of um of swimmers uh we would get the data from the from the olympic people they would get this giant json feed of all of the lap times of all of the different swimmers and what we would do is we would turn that into um a little animation in fact i kind of want to see if i can find this now uh by the time swimming results graphics uh ah how do i find this how do i find my own work thank you yeah here we go um okay can i how can i send you a link um well there is chat here but that's terrible can you go on twitch i can try yeah switch.tv the premium here i will slash t-h-e-p-r-i-m-e [music] -a-g-e-n do i need to be signed in to send a chat you do uh uh send me the link i i'll figure out how to get send me the link in ping chat um there's like a little chat box in ping yeah i see there you go um so so this is so that people have context of what i'm talking about here um if you go onto this page and then scroll down to let's scroll down to the men's 200 meters individual medley hold on i'm i'm getting there there we go oh looks like somebody already got it there uh all right here we go all right here we go we're scrolling down um i don't think i'm going to be able to do this because i don't i don't have a membership oh come on can i gift it to you hold on hold on hold on we we might just be able to do something here because i was able to scroll it for a brief moment so you never know sometimes these things you know you can kind of i don't know these peoples are finicky what is this thing there's there's definitely a content here okay i hacked the website all right so here we go all right you know i all i did was move the main element out of behind the paint wall oh no [laughter] no don't do that people don't steal news don't journalists need to be paid uh but if anyone wants to clip that we will take the new york's time and laugh at them all right um all right so what do i do here so just like hit play on on one of these there's there's one down that is down there which is the individual medley which like they have all the different strokes um so what you're looking at here this is this is a spelled component and that uses a a wrapper called spelled cube to render these these little swimmers um and this is using data that was coming directly from from the olympic data feed and what we did was so we had a little spell kit app that ingested this data rendered this stuff um using a wasm build of ffmpeg it would turn it into a video that would then get sent to our social media team over slack and they would then tweet it out and then we would take the take the same thing and then we would embed it in the live blog and on these articles here and like all of this you can imagine the amount of coordination that is involved between all of the different moving parts here yeah we had to do this in 3js directly it would have been an absolute cluster folk i i just don't think we would have been able to build it but because we were using a component wrapper this was something that our team could actually work on and um like we built a little animation studio to to develop the like the the swimming strokes and everything um and we did a we did the same thing for runners there's like a little track that the people are running around um and all of this stuff is is done using svelt cube which is a 3js wrapper that i wrote last year i wrote it and then i didn't finish it because that's what happens yeah and so um another team came along and said we like we like the idea of this but we want to be able to integrate physics and pre-process uh like post-processing to do bloom filters and like whatever the house you can do with with 3js like all of this stuff is not going to happen in spoke cube because i don't have time to work on it and so they picked up the baton and wrote thrilled and it's super cool it's just the best way to use 3js in my opinion okay and it's it's not a rapid development and it's got so many more features than my little thing has um and it's what i would recommend people who want to use uh 3ds inside a spell component should use okay that was excellent i like that um very cool all right so uh i i'm gonna probably i you know there's there's plenty of questions left but i think we're just gonna probably have to call it here we've been we've been on for a while and i'm sure you got things to do at this point uh thanks for being around that was awesome that was a great time yeah thanks for having me yeah it was a lot of fun uh i do hope we can grab another dinner it was unfortunate that you were just far enough away during dinner that we didn't get to hang out nearly as much but it was still fun yeah it was great we'll see how it uh we'll see we'll i don't know if we'll run into each other again when we will because remember i live uh out in the pioneer days so i do have to time travel just to get to humans anytime i'm in a part of the world do i need to pee outside i'll i'll give you a bell yeah or at least think of me while you be outside