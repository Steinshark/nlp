today i'm going to be showing you the difference between shallow copies and deep copies in python and this is an incredibly important concept especially if you want to create copies of lists there are some things that we're doing in python that aren't actually happening the way we thought they were so to explain this a bit better i went ahead and created this code snippet right now we have a list of type integer that's called a and we have a list of type integer which is called b which just takes a or references a and what we're trying to do here is copy the values or copy the list of a so that we can have two independent copies now here i'm printing the ids to see if we get some new objects and here i'm extending b just to make some changes so that when we print these lists we can see if there are any changes and if you programmed in python before you'll notice that there aren't going to be any changes because by doing this you are just referencing the list of a which means b is now connected to a in other words they have the exact same ids which means if you make a change to b you're making a change to a and vice versa so if you were to say a at the index of 0 now equals banana and it's not happy about that because of course we want integers only but that's not going to stop us from inserting banana but if we run that you'll see that both lists are going to acquire these changes so this is the wrong syntax of course we're not supposed to do this if we want to get a copy one alternative of course would be to use the dot copy and that's going to fix the problem temporarily although this does not perform a deep copy so we're not really getting a true copy of the list so if you don't know what i'm talking about follow along with this tutorial because i'm going to teach you something very interesting about copying lists there's actually two ways to do it and these are the two ways you need to be aware of when you're actually trying to copy the list so i will remove banana from here that's not important and what i will do instead is explain what dot copy actually does so dot copy performs a one level deep copy which means it's copying the list but any item that is one level deeper is not going to be copied it's only going to be referenced and let me show you what that means by providing a different example so the code here is slightly different instead of having a list with a single dimension we now have a list of lists inside so this is two-dimensional and by using dot copy we're creating a shallow copy of this list and this is where you will notice the difference once you start using dot copy it is not suitable for deep copies and right here we have an array of course with two different arrays inside so these lists are going to be copied but the values inside are only going to be referenced and we're going to print the id of a and the id of b again then we're going to extend b then we're going to try to change the value for b at the index of 0 at the index of zero which means this is the first index of zero and this is the second index of zero so which changing the number one to 999 now we're going to print the id of this one over here for both of the lists and we're going to print the lists out to see what we get if we run this we're going to get a crazy result or actually we're going to get the result that we had earlier more or less so even if we made a copy and we have lists with different ids you'll notice that in the list at the index of 0 we have this id here which is the same as the element at index of 0 in list b so this one here is referring to the same object and we can even change that to hello and if we run that we will still get the same id for hello because this was not deep copied this was just referenced the only thing that was copied was the outer layer the first level of the array everything inside it was not copied but just referenced and that's why if we include the value of hello and we try to print the id of that in different lists it's still going to be the same id because it's actually the same object and as you saw if we try to change that value in a different list it changed it still in both of the arrays although when we extended b we only got it in b because this is the first level that we're editing not the second level or the third level this is the first level of this list and let's change this back to one so how can we avoid this how can we make sure that when we're creating a copy of list a that we get a true copy of it that when we try to edit these values inside the second dimension we actually can edit those without affecting list a and the answer is actually quite simple all we need to do here is import copy and then we can go down and say copy dot deep copy and passing a now if we run this snippet of code we're going to finally get independent lists with independent items inside these two lists are now completely independent from each other there are no references whatsoever so here now if we change the value of 1 to 999 in b as we did here you'll notice that it only happens in list b and not in list a and this should have been a list of a list not just the numbers so if we run that again we'll get these three lists of lists but now all the ids for all the items are unique because once again dot copy will only make a single level copy which means that's okay if you have values such as one two three for this array because these are single levels there's not another array inside this array so these are going to be unique because it's a single level deep but as soon as you go one level or more deep you're going to want to deep copy that or else you're going to have problems with editing these values because they are not independent anymore so to sum this up use copy if you have only a single dimensional array if you have a multi-dimensional array it's much better to use the deep copy because you will be able to edit each variable independently but anyways that's all i wanted to cover in this lesson i just found it really interesting that we have these two options in python and i see a lot of people missing this when they start out with python so it's quite an important concept to keep in mind when you're programming because if you just create a copy you might think that will work if you didn't read the documentation and it's so simple to use because you don't have to import anything so it's just easy to go down that line without knowing exactly what a deep copy is because a while back i personally thought that copy was actually deep copying my lists but with that being said as always thanks for watching and i'll see you in the next video