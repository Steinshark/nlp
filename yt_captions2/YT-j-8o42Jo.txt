so people i don't know if you've seen this right here but 20 years is nothing close and accept whatever that is in the previous edition of this magazine we argued english was so pervasive in our industry nobody even questioned its use anymore the same can be said of get it is difficult to imagine that merely 20 years ago the landscape of source control tools was more diverse 20 years ago i was using tortois svn tortoise okay have you heard of tortois i don't think you have i don't think you have any clue what a tortoise is cows literally do not make mayo but still cool yeah isn't mayo made out of egg whites and something else tortoise svn yeah i know it is difficult to imagine that merely 20 years ago the landscape of source control tools was more diverse and the choice of one such tool was more complicated than today actually git was not even on the map yet true git was 2005 right uh git uh when was git uh created right that 2005 yeah april 7th 2005 bam bam bam bam bam bam bam bam soy be oil gross git is now a pretty dang good source control even for large files and stuff actually git was not even on the map yet before debating whether the uh hemony of git is good or bad let us go back in time for a little while one of the most famous uh tango of all time carlos gardell famously sings to feel that life is a breath of fresh air that 20 years is nothing that feverish that feverish the gaze wandering in the shadows seeks and names you i'm not sure what it's about to tell you the truth i don't even know what that's about i'm lost in the poetry lost in the poetry okay lost lost in the sauce anyways the second edition of code complete by steve mcconnell was published in 2004 on page 668 of this 900 page volume we m we find the only reference to the subject of the source control in the whole book about 3/4 of a page long nothing else chat gpt can easily summarize all of it with one phrase version control software is good and brings several benefits not a lot to phone home about we're really far from get ops at this point wow that is kind of crazy this like that's not even that long ago that this is 20 years ago people just didn't even think about this stuff they're just like yeah whatever yeah you know you should just use version control because it's good okay the same year almost exactly 20 years ago at the time of the publication of the article subversion io saw the light of day what was subversion probably the shortest lived idea with good intentions in the history of computing c subversion or svn uh was supposed to be better than cvs no not the pharmacy but the other thing oh yeah c yeah yeah better than cvs meant back back in those days to be transactional database anyone and to have somewhat better support for branches we do not have higher ambitions back then kids you know i honestly didn't really understand the difference between git and svn when i first started using g i was just like that feels like svn tom's a genius yeah if you didn't understand dude honestly i was just like this is like svn but with a lot of branches and stuff i didn't know how good it was okay i didn't i didn't understand okay i didn't understand uh lonus tval however did the higher ambition in 2004 the linux colonel developer got increasingly strong disagreement over the use of bitkeeper the proprietary distributed version control system used to manage the kernel source code so what is a developer to do well lonus has a tradition of writing the soft for everybody needs and nobody wants to start he also has a tradition of naming things after himself legend says that the first version of git was written in a couple weeks isn't git an insult in in in in in americanese uh version .1 is that true yeah okay yeah okay here we go uh c cvs never heard of cvs it was source control system that joel spolski boo uh described in september 2000 uh as fine emphasis his in the first item of his eponymous eponymous eponymous joel test for better software i let's see i've used commercial source control packages and i've used cvs which is free and i'll let you uh and let me tell you cvs is fine give this man chief marketing officer position right now i mean this guy this guy needs to tweet uh yes the first step for better software was shocker using source control software as a side note i started my professional career as a software developer in 1997 and nope we did not use source control not even cvs yes you guessed it right we just saved vb script files locally and uploaded them via ftp this is like i lived that life i lived that life for quite some time all right by the way ftp fantastic flip i don't know what you're going to do i don't know how you massage that one out okay good luck flip on that one uh too bad if we over wrote changes with one another you only lived once yolo let's go i have definitely done this have you ever overwrote changes on yourself you know what the worst part about ftp is when you had two computers and you wrote some really good things and then on another computer you erased those really good things and you're just like dear why am i my own worst enemy why is the killer always in the house why why why why why why i had to wait till 2002 to use source control system for the first time and for the curious among you it was a rationale clear case never heard of joel spolski well he was the co-creator of stack overflow which i guess you have used it uh some point in your career 2 if you use co-pilot you pretty much are using stack overflow uh 24 years ago joel was one of the first influencers of the burgeoning field of software engineering think kelsey hightower but with more controversial views or steve yi but with less controversial views okay so i know basically who kelsey high tower is i know nothing about him and i have no idea who this steve fella is you've read all of jool on software link one of the best jool on software we'll read it uh speaking about stack overflow here's an example of the state of art source control in 2008 one of the first ever questions asked on the site dated september 8th 2008 asked precisely what version control system to use for a single developer workflow interestingly that question was asked precisely at the same time while in the real world the 2008 financial crisis was wreaking havoc or breaking h wreaking breaking havoc i'm not sure if you break havoc as much as you wreak it uh our industry lives in a bubble no doubt about that but i'm but i'm digressing once again that is hilarious the world is falling apart so what you version controls should i use which one should i do which one which one should i do i'm trying to find a uh source control for my own personal use that's as simple as possible the main feature i need is being able to read slp a past version of my code i'm the only developer the replies to this question consist of a long catalog of pretty much every version control system known to mankind at that point in time windows control odyssey oh my goodness but let us return to the year 20 okay for those that don't understand what's happening here i think if anything this should just give you an incredible eye into whatever you think is like eternal or should always be used like how much does software change like it is just like so wild 20 years ago is not a long time i know for a lot of you zoomers that's most of your life but for a lot of other people it's it's it's not a crazy amount amount of time 20 years nothing it is like a short amount of time that things like completely completely change but let us returns to the year 2000 in the year 2000 anyone nam that now a few days ago before joel uh spolski published his joel test mark lukowski gave a tit uh talk titled windows a software engineering odyssey at the fourth youth nicks the distant future anyone conan obrien let's go somebody got it uh windows system symposium in seattle washington mr l ski why are are these all a bunch of uh what are these where why why are there a bunch of owski where are they from are they are they all fellow fellow belgium together what who's who's the who's the skis polish they're all poles they're all poles i have no idea i never know where these things come from polls okay uh was a member of the original windows nt team from 1998 to the mid 2000s the powerpoint slides of the talk are still available online and at the time of this writing and i seriously recommend you take a look at them uh part of the odyssey was you guessed it source control on slide 14 you can learn that windows nt 3.51 used an internally developed system which was on life support by the time windows 2000 is that why windows 2000 and millennium edition were the worst windows of all time is that what happened is that is that is this how this happened was it version control that caused all the problems i'm kidding it's just windows windows was the problem you guys actually fell for that oops not a great way to onboard new team members now that now you know why the agile manifesto published in 2001 was so revolutionary thanks to raymond chen arguably the most important lecturer of the windows history we learned the name of said internal development system in the early days microsoft used a homemade source control system formerly called source library manager but which was generally abbreviated slm slime right and pronounced slime yeah that's funny it was simple system that did not support branching dear i mean man two th i mean those days they really believed in trunk-based development i mean these guys were trunk based developing as hard as they could in slide 24 mark lukowski's powerpoint slides we learned that microsoft took the decision to migrate the source control of windows 2000 to something called source depot raymond chen agrees shortly after windows 2000 shipped the windows source code transitioned to a source control system known as source depot which was an authorized fork of perforce i was using perforce at netflix when i started 2014 or 2013 2013 boom goes the dynamite we were still using perforce the choice had to do with the gigantic size microsoft windows source code base the justification is perhaps less relevant than it was but perforce tends to perform better on larger posor than subversion yep this is one of the reasons microsoft acquired a source license to perforce and build source depot 's repository is a monster and not many product commercial commercial or otherwise can handle it perforce sucks used in pearson in 2014 yeah perforce does suck it does perforce well that kind of sucks uh mark lukowski's sum summarized the benefits of source depot in two bullet points uh on slide 24 of his presentation new machine set up three hours versus one week normal sync 5 minutes versus 2 hours let's go we're improving uh is microsoft windows team still using source depot today apparently not in 2007 we learned that microsoft migrated all 300 gigabytes of windows source code to get that's a lot of code that can't be all code it has to be other things it just has to be other things right it has to be right it spyware right 300 gigabytes i mean that it can't be that it can't be that because that is what uh every gigabyte if you type one character per second a gigabyte would take 33 years right and so that would be 300 time 33 which is just an enormous amount of time it literally would take millennia to type that at one character per second so that means if we were to go if you had a thousand people on that it would still take so dang long thousand people typing one character per second it would take a year so it has to be assets one picture of your mom's nudes damn is that what those 300 gigabytes is i can't confirm sadly i should say uh microsoft's adoption of git however was not without hurdles and led to the creation of git virtual file system gvfs project but git isn't designed to handle 300 gab repository made up of 3.5 million files microsoft had to embark on a project to customize git to enable it to handle the company scale okay 3.5 million files let's pretend that creating one file takes how long what what do you think is a what do you think is a good amount of time per file no you guys are just saying the craziest numbers like real talk what do you think it is it won't be milliseconds cu that's the literal process of creating a file like you have to be in the correct location you have to come up with a name for it you have to then create it you then have to save it once right you unless if you use touch right some things when you create it it doesn't necessarily save it so how long uh let's let's go with 20 seconds is 20 seconds fine two seconds but yeah but you have to think about things a little bit what do you think the average is you got to remember that we're not talking about how fast is your fastest file we're talking about what is the average you got to remember some people rightclick they navigate with their little finger to a whole new place and you got to also remember like say sometimes you want to create a well you have to be in the right directory so you have to navigate to the directory then when you navigate to said directory then you have to create the file in there then you have to name it then you have to save it and then you you know so how long do you think 20 seconds is 20 seconds fair if you average in all those really slow people versus all the really fast people versus files that exist somewhere else versus files that are in this current location right all of the stuff right 20 seconds let's go with 20 seconds okay 35 0 * 20 seconds divided by 60 seconds divided by 60 minutes divided by 24 hours uh divided by 365 that means during the life of the windows project for 2.21 years straight people were creating files just non-stop file creation for 2.21 years dude what you do for what was your name my i was a full-time file creator i created files at the speed the speed of 10 seconds they saw how good it was anyways i know that there's like a bunch of reasons why this is probably not correct and all that kind of stuff it's just fun to think about that way it's just fun to think about it in the most dumb way possible all right anyways the age of git the infatuation of microsoft with git reached its peak in 2018 when it swallowed github the platform that arguably made git mainstream three years prior sensing temps i'm not sure what that i i what does that even mean is this like writing on the wall but french style okay sensing sensing what what what is currently in they released visual studio code with integrated g support by the way this was microsoft's greatest play ever to get into every like think about this you one thing you got to be impressed about microsoft is they saw the value that they didn't even know what was going to happen but they knew that if they could be in between every developer and their code they're going to be able to monetize it and so they knew that that that was just going to happen and so vs code has been this i mean vs code is the longest con that has ever been created for literally a decade they knew they just had to be between every single developer and their code and if they could do that they will be able to make money and then years later co-pilot happened and then that's why they bought github cuz they knew if again if they can be between every developer and their code they were going to be able to charge a monthly fee on this thing if they just can you know they just knew it and so they designed all these things to bring people in and then when it came out when they actually they didn't even they probably didn't even know how they were going to do when they first developed it right when they first developed vs code they're probably just like we just need to be between them and we know at some point we're going to be able to monetize them and because they're big enough that they can make that kind of investment right 30 people paying 30 engineers at a trillion dollar company like is that is that really is that really like a big thing no it's not a big thing at all so they're just like go get them we need to own the ecosystem go and get them because for a long time they did uh microsoft uh visual studio right and then when they realized that they could start bringing it into the common person they made visual studio express and if you remember visual studio express visual studio express was like the predecessor to vss code man that's where like that's they knew for so long that they had to get in between it and now look at this now look co-pilot like you can like i want who here use co-pilot press one in the chat if you use co-pilot okay i want all of you who use copilot i want you to turn it off just for one day that's all i'm asking one day and i want you to feel what it's done to you right just turn it off for one day and and realize what has just happened to you right it is so interesting it is super interesting wait till you do it like i i do mean that i i you will be shocked at how you've changed it's it's very very interesting anyways it just means they've won they literally created something that you're addicted to and now you like all those people like you guys are like you got you got your you got your money you got your money from here on out what do you let's see what if you've never turned it on does that make you better than all of you prime jin i even use arch by the way no i don't i don't think so i know you're you're you're old pulling the old chain here bisco but i do think that i don't think that using or not using copilot makes you better or worse but it's very interesting when you're used to co-pilot what it does to you when you turn it off you realize you are the co-pilot it's incredible i turn it off by accident and i realize just how weirdly dependent i was on it and i was just like okay what the hell is happening and so for the last couple if you haven't noticed the last couple streams i've been doing nothing it's jesus takes the wheel except for it's uh except for it's uh who's who's the ceo of of microsoft again gosh i can see his face why can't i remember his name saa saa saa d nuts right uh saa take the wheel all right in 20 let's see we are in 2024 get is everywhere the long evolution that led to get supremacy in the 2010s and apparently also the 2020s can be summarized as a sequence of open source programs one replacing the other yeah well i forgot to read this one github introduced the concept of poll request to the world as early as february 2008 a feature later adopted and adapted by gitlab g tea and the recent uh forge joe and bitbucket which became uh bread and butter for code reviews during the la past 15 years but the matter of fact is that github also created a paradox in the world of git suddenly a distributed control system became centralized some are understandably a gassed by the state of things i actually do not mind centralized source control like i i i don't think it's bad i like the distributed nature of g i think distributed nature with a uh with with uh with uh a centralized u uh authority source i think is actually pretty cool i think that that's a good setup i i i really don't mind it what i'm shocked about is you know i never really thought about it you can only push and pull the concept of a pull request doesn't exist in git i never really thought about that wild huh i don't know why i didn't think about this i know i know a lot about get and it just it just never really dawned on me get only knows email i know it's wild uh we are in 20 or 2024 and get is everywhere the long evolution that led to get supremacy in 2010s and apparently also in the 2020s can be summarized as a sequence of open source programs one replacing the other ss's in the 1970s rcs react component servers in 1980s cvs in 1990s subversion in 2000s to ensure a smooth migration path subversion could import cvs repositories and git can import subversion repositories but more most importantly version control systems migrated from local only systems like sccs and rc cs to client server architectures cvs and subversion to distributed systems like git and others most notably maerial speaking about maerial did you know that firefox developers recently decided to drop it and use git instead i mean git is inevitable git is the thanos of version control dude po request uh was a script in git since 2005 github did not invent prs i mean it doesn't have an actual there there there's no operation i don't know this poll request script true but it's rest i don't know this script the script business look at this you learn something new request poll oh interesting generate a request asking your upstream project to pull changes into their tree okay well today i learned i literally there are so many effing commands in get i don't know if you know this did you just see that 140 7 it's crazy git is massive git is massive i'm not surprised that i have no idea about these things i learn new things about git all the time that's what she said she i've never heard her say that personally but this me this makes sense for to be said about git okay okay git and its cheap branching facilities had uh had a lasting impact on developer workflows vincent dreon published in january 2010 a se seminal article titled a successful git branching model introduced the world to the controversial concept of get flow hey bro i heard you like branches so we put branches in your branches why controversial well because be i'm not watching it well because most opinions in software industry are such now there is a github git flow and at laian gitf flow workflow and many more branching workflows available git repositories have become eventful with every push merge or tag operation triggering a workflow somewhere a whole industry has sprung up including names such as argo cd nuts uh github actions gitlab cic cd pipelines and g t runner providing a new level of automation and convenience the influence of git is so strong in this space that the terms get ops now refers to a whole subset of our industry but you should not be using branches for deployments you've been warned it is really interesting this is super interesting that we there is an entire cottage industry revolving around using and testing software it's kind of crazy it's kind of crazy to think about how far we came the question is simple now what comes after after git at this point is it probably impossible to challenge the immense popularity of git i say probably because in our industry it's impossible to predict the future anyways the question is simple now what comes after git at this point is probably impossible to challenge the immense popularity of git i say probably because in our industry it's impossible to predict the future yeah i mean i would say that react is probably in this very similar position right now at this point but i'd say react has jumped potentially a shark there might be the thing is is that a giant can still fall react server components is very interesting because there's people who absolutely love react server components and call you a complete [ __ ] for suggesting anything else and then there's other people who are like yeah i kind of like react i also do all these other things and then there's other people like me that are like htm x htm x htm x right and so it's interesting it's very interesting because git you don't really have this with git i don't know anybody that's like who' use git i use perforce dog i'm all about that perforce you know what i mean i i've i've like never heard anyone say that for any reason i have no idea uh anyways um there are two interesting uh contenders worthy to mention p written in rust it start with with o camel a decade ago man poor o camel or fossil written by the creators of squeal light now this on the other hand how much do you want to bet fossil has one based based code of conduct do they have an ethics they don't have an ethic doc if you if you read the uh what's it called if you uh if you read um the code of conduct or the the code of ethics for squeal light it's like thou shalt not commit murder thou shalt not defraud your neighbor it's just like the ten commandments and then expounding upon them from some code of conduct that some dude invented like 2,000 years ago it's pretty funny it's pretty great it's pretty great how old's your code of conduct oh ours is 2,000 years old uh let's be real here few people uh dispute that g provides a sub optimal user user experience you know there was that one person that was from google saying how bad git is and i didn't quite understand it right i really did not understand this thing a lot of underlying implementation show through into the user interface the user interface is so bad that there is even a parody site that generates fake git man pages yes uh git git gits man pages are so bad they've gotten a lot better but there's still some really bad ones out there right here you go save uh acquire saved local graphs for multi- rebate and message reverting unreachable objects that sounds i mean this literally sounds like it sounds like it if you ever look at uh man get tag right uh uh add a tag reference in ref tags unless dlv is given to delete list or verify tags unless f is given and the name tag must not yet exist if one of a s or u is passed the command creates tag object and requires a tag message unless m or f is given and an editor started for the user to type in a tag message well what the hell's a tag just tell me what a tag is can you just first start with what the hell is a tag just nothing there is does not exist normal man page dude you read that and you're just like i don't get it i know what a tag is i know what a tag is and i don't know what i just read it's a reference in ref sl tags duh duh everybody knows that most people don't know what ref sl tags is okay most people this would make if yeah if you did my g course it was your g course explained this yes but you would not understand that unless if you understood that there is something called get which inside of here has refs which inside of here has something like heads which is master and if you cat out what master is you'll see that cat is literally this and if i go get if i do get log one line you will also see exact same thing c90 c90 like it's just like a file it's just a thing that points to it anyways it's very confusing while we wait for a better alternative let us read man 7 get everyday page and call get extra sorcer get uh get fugitive oh yes fugitive mentioned fugitive is by far the best of all plugins there is no i in my personal opinion i think fugitive is my favorite way i interact with git i use it non-stop i use it nonstop love it absolutely love fugitive um and m everyone seems to love though so pick would say m people are all about m and then there's a lot of lazy getters which i'm not too sure about lazy get i guess i haven't used it i don't know uh it seems that whether you like it or not we will probably be storing our source code and get repositories for the next 20 years i think that's pretty fair isn't it magette no it's magette magette these nuts out of your mouth okay uh lazy git is pretty nice yeah people seem to love lazy git i never really got into lazy git uh i just really liked fugitive and i think i'm going to stick with fugitive it's pronounced jit okay well now that we're going to we're actually we're literally going to create a holy war here uh mget i'm pretty sure mget is in elden ring if i'm not mistaken that's like your first major boss you fight and i just didn't like it okay i did not like magette okay way too hard honestly you like you come walking into magette and you're like level you know like 10 and and all of a sudden he calls you tarnished and and then he slaps you around and then you die and i died of hubris is what he told me but i personally felt i died from a wooden staff that was punched into my face several times okay that's what i thought i died from but it turns out it was hubris i didn't know i didn't i didn't i didn't know that i didn't realize that's what huus meant being beaten to death by a wooden staff any thoughts about mind goblin you know i think when i really take the time and really just mull it over and really just swish around these nuts i find that i could mind goblin these nuts bam got them come on dude mind goblin come on come on what is this you you can't you can't de nuts me with that old of a joke go go mullet uh no mullets hey the name the name is the primagen