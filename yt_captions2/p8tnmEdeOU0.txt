this video was brought to you by ind dentle io learning python made simple in today's lesson i'm going to be teaching you how you can turn any synchronous function into an asynchronous function in python and this is quite important because you might be working with a module such as the requests module which is a synchronous module which kind of sucks because if you're making a request for some json from some sort of api you might not want that to block your code and anyway to get started we're going to open up the terminal and type in pip install requests because that's what i'm going to be using as an example for this tutorial and once we have that we can import requests and since i'm going to be using a type annotation from requests i'm going to import from requests import the response now by this point you should be quite familiar with how the requests module actually works if you want a response you would say response of type response response equals requests do getet and you' pass in your url then once you get the response you can call response. json if you have an api or you can even just get some other information from that response once you make that request but once again this is a blocking request and what if we want to check many websites or various websites at the exact same time well to demonstrate how we can do that i'm just going to create a sample script that checks whether multiple websites are online and to do that before we actually move any further i'm going to import async iio and from asyn iio i'm going to import the task type then down below we can create an asynchronous function or a co- routine and call it fetch status and call it fetch status which will take a url of type string and it's going to return to us a dictionary that we will define now first of all we will add some beautiful print message which will say fetching status for and we will pass in the url then we can create our response of type response which will equal a weight and this is the juicy part this is the way you can turn any synchronous function into an asynchronous function so await asyn iio do2 thread so that's going to st it on a separate thread and as the arguments we can pass in a function the arguments for that function and the keyword arguments for that function so in this case since we're using get we're going to call request.get and the only argument we want to pass in really right now is the url so we're just going to pass it in as is and for the arguments you'd want to pass them in in order the same way you would pass them in for get if you hover over get you'll see that we have the url then we have the parameters and so on now my pi does complain to me so what i do is pass in none for the rest and my pi does not complain anymore and it's as simple as that to turn any function into an asynchronous function now that we have that there we can print that we got it so i'm just going to print done and we're going to return a dictionary with the status which will be the response. status code and which url that was for now let's try to use this by creating our main entry point so async def main and that returns none and first we'll create an apple task and i don't like how little space we have so i'll make some more apple task of type task which returns a dictionary is going to equal an asyn i. create task and we're going to pass in fetch status with the url that we want to fetch the status for in this case i'm going to pass in apple.com but you can pass in whatever website you want and then i'm going to duplicate that and i'm going to call it google task and we're going to pass in google.com then of course we need to wait for these tasks to complete so apple status of type dictionary is going to equal await apple task and the same thing goes for google task and of course we want different names then all that's left for us to do here is to display the results so print apple status and print google status and of course we need to run this so if name is equal to main we're going to run our script using asyn i.run with the main entry point being our main function now with that we can actually test this script by tapping on run and what you should notice in the console is that we're able to fetch the status for both both of these websites asynchronously we did not need to wait for this one to complete before moving on to google we were able to send the request for both of them and then once both of them got these status back we were able to use those statuses anyway it was as simple as that to turn a synchronous function into an asynchronous function and yes you could use gather if you have much if you have many more websites you don't need to do it one by one this is very labor intensive if you have lots of tasks but you get the point now you know how to make functions that are not asynchronous asynchronous that's another very difficult sentence i don't know why i decided to say it like that anyway that's actually all i wanted to cover in today's video do let me know in the comment section down below whether this helped with anything or whether you have some added information i would love to hear about that but otherwise as always thanks for watching and i'll see you in the next video