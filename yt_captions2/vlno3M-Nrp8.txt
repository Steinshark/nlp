today we're going to be looking at the difference between is and is equal to and there is a very important difference that we need to cover because if you use these wrong it's going to mess up your entire program and sometimes it might look like you can use them for the same thing but this is actually a lie and i will show you why that is so let's create a simple example to get started we're going to say a is equal to 500 and b is equal to 500. if we go ahead and print that a is equal to b we're going to get a return of course of true so let's go ahead and run that and as you can see we have true there and if we do the same thing with is we're going to go ahead and get true as well now let's go ahead and do something a bit funky let's go ahead and pretend we have a third variable and we're just going to call it underscore because we're not going to use it later and we're going to change a to a thousand and b is going to be b plus underscore so it should also be 1000 and we can prove that by printing out a and b what you're going to find out is that if we use the a is b we're actually going to get false regardless of the values being 1000 each and if we change this to equals 2 we're going to get true so what is happening here why is it that one of them is going to give us the correct response while the other one is only working 50 of the time well to answer that question is is used for comparing instances which means if it is the same instance or the same exact object it's going to evaluate to true and the is equal to operator is used solely for comparing values such as 1000 and 1000 or to check if a string is the same as another string but another very good way to understand why a and b are not the same instance is by checking the id if we go ahead and check the id of a and check the id of b you'll see that we're going to get two different ids so these have to be the exact same number for is to evaluate to true there are some constants in python that are guaranteed to always be the same instance and one of this of course is the true boolean the false boolean and keywords such as none these are guaranteed to always be the same instance and that just makes sure that every time we go ahead and check that true is true we're going to get true back and the same thing goes for none is none this will always guarantee that we get true back because one thing i didn't mention yet is that if we create two variables with the same value such as one thousand and one thousand and now we go ahead and print a is b you'll notice that we're going to get true back and that's because python is extremely efficient and sometimes it allocates the same value to the same spot of memory which means a and b right now are sharing the exact same memory address and that's just used to save space of course if we change this number they can no longer share that same space of memory which means they're going to have to change the id for b and a and the worst part about this is that this is not even guaranteed so you should never rely on is if you're planning to compare the value of strings or the value of integers floats or whatever you should never use is to make that comparison you should always use is equal to because this will make sure that 1000 is equal to one thousand not that the id of a is equal to the id of b because the id can easily change at any point in the program making it really hard to make sure that the number is exactly the same now just to demonstrate this one more time i created some print statements of course it shows the id chose the difference between is and equals and it prints the values of both of these so what we're going to do here is go ahead and say that a is 100 and b is going to be 10 000 divided by a which should give us 100 back so if we go ahead and run this you'll notice that we're not going to get the same id but we will get the same value and here we got 100 is equal to 100 now this also works with classes and anything you can create an instance from so for example i went ahead and created a class called fruits it has an initializer which creates a name for the fruits and some calories for the fruit then i used the is equal to dunda method which just makes sure that i can compare one object to another object by comparing the two dictionaries and with that being done we can go ahead and compare two fruits for example if we go ahead and paste this in you'll see that fruit a is a banana with 10 calories and fruit b is a banana with 10 calories now if we go ahead and run this program we're going to get that fruit a and fruit b is not the same thing they are two separate instances although the value is exactly the same so once again the id of fruit a and fruit b are going to be different but the value is going to remain the same and that's what you need to keep in mind when you're working with is and the is equal to operator they are very different but are a very fundamental part of python but anyways guys with that being said that's all i wanted to share in today's lesson so as always thanks for watching and i'll see you in the next video