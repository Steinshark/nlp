go versus rust versus bun versus note a simple http benchmark okay let's start with let's start with the y well it looks like there's actually a bunch of stuff before the y the the table of contents is missing the the i guess the foreplay all right the pre-why recently button 1.0 was released which shows promise as a tool for serving many users without using too many resources to evaluate its performance a simple benchmark test was created to measure the number of http calls the server could handle per second the benchmark also compares bun with go rust and node as these languages are frequently compared in other benchmarks using similar purposes okay the benchmark test by the way i have a very hot hot take but i refuse to give it right now but this take is going to be a scalding hot scalding okay so get ready for the scalder uh the benchmark uh test was a run both locally and on the node server i love okay good i love to see this i love the lenode server take uh with two dedicated cpu cores with four gigabytes of ram running debian 11 on lenode all four tests were compiled uh and run using the following commands all right run build minify index out file benchmark okay good and then run the benchmark cargo build target rust okay go build okay good good good good good good uh node benchmark okay the test will run on the following runtime versions arrest uh 174 okay 121 1 and 2006. okay so the latest environments this is good because the difference between node' and node 20 there's actually quite a few performance improvements all right to benchmark eat uh and it's it's to do with v8 more than anything else to benchmark test each runtime go uh rusco node and bun were built for production usage and the same test was a run for each language the test was connected with 100 concurrent connections running for one minute and all of the runtime you utilized multi-threading okay so here's my real question did this person whoever wrote this uh emil did you run it from your computer or a series of one or more computers in lenode that's my first question right away because if you're running it from your own machine even as the test client i mean it's not as good of a test if you aren't running from your own machine you know what i mean it's always better to run from your own machine i mean a run from not your own machine not not let's see the hp test we're running using this uh right here okay wg work all the languages use built-in http servers except for rust which uses axum and tokyo because rust doesn't come with the built-in http server fair it has a tcp server but not an http server uh the let's see the source code for these can be found here okay why before i show you the results i'd like to explain why i conducted this test mainly out of curiosity i wanted to see if there is a js runtime that can perform almost as fast as rust or go i'm not a huge fan of js in general mainly because i don't enjoy writing the language that's perfectly valid but i also feel that there hasn't been a js runtime that is good enough the js world got dino a while ago which seems a bit faster but still not good enough okay okay again by scalding hot take is boiling inside of me it's trying to come out i'm not letting it come out in the real world the bottlenecks in your system probably wouldn't uh probably not be the run time it would probably be something else such as your database or ingress etc uh we can we can see this if we look at the results of running the test in the cloud this type of test may not be the best but it still provides a good indication of buns performance compared to others with this we are now at the run time that we could have a good choice uh when building businesses okay there's probably a better way to conduct this type of test probably by running a websocket with numerous clients listening to the socket to determine which running performs the best however this is a test for another time i don't really get this end part but it's good that he recognizes that this isn't necessarily a great test and that in the real world your bottlenecks aren't usually what's being tested right now right fair or in the test locally all right uh first rust okay latency this thing uh obviously this none of this really matters right here request a second okay we got 8.87 k requests a second we did this many requests in 30 seconds uh this much okay awesome awesome awesome then go go also looking pretty girth pretty girthy a little bit different though look at that a little bit different about the same amount less megabytes red requests per second not as good then bun not as good as go as you can see right here okay and then node node came in you know that meme you know the beam where it's like the i don't even want to say the name it's going to give me it's going to get me canceled okay you know no tried okay node tried dude you haven't seen url parser does it have the ada parser does it have the ada parser in it because if it had the eight of parser it'd probably be 10 times faster honestly 10 times faster when running a test locally we see that russ serves more requests per second compared to the other options okay yeah that's probably not too surprising i don't think anyone's necessarily surprised by this um yeah i mean the differences should be fairly minimal between these frameworks i'm actually surprised it's this bad honestly i'm actually surprised it is this bad that the difference between fun and say rust or bun and go is that far off because like the reality is garbage collection happens in c plus plus http processing and everything happens in c plus plus every part of this is c plus plus so why is it this much different i mean buns obviously zig instead of c plus plus and go as go or whatever whatever do however they work and rust is i think rust rust writes rust itself but either way it just breaks down to you know a series of syscalls i can't imagine that one's better than the other somehow that's why it's just so surprising that i'm saying this all right testing locally uh it's time to speed uh let's see time it yeah all right here we go it is time to test the speed of each runtime in serializing and returning simple json strings the task is to serialize a simple json struct in return okay so this is actually a better test because really what you're going to see so i hope the longevity of the test is there you really do need to run this over the course of a couple minutes which is you want to see garbage collection let's begin with rust and there's another thing that i'm going to talk about here shortly uh with this test rust okay so somehow it is somehow let's see four three four two three 423 it is pretty much the same speed right nothing about it is much different not too surprising very little works actually going go pretty much the same speed bun drastic fall down that's actually a bit surprising that bun suffered that much from a json stringify locally now obviously there could be a lot of questions what's going on blah blah blah but nonetheless i'm surprised it suffered that hard from json stringifying effectively a constant right because if you remember the other one uh you know the other one is about 10 faster and node 's about the same right if you look right here no didn't change no change like rust didn't change right it's effectively the same thing okay so that's interesting to me it says maybe there's something going on with bun and bun doesn't have a good json whatever uh i'd say i thought they would have pulled uh that into native zig or something json is so core to javascript well no it should be it's it's within the javascript engine it wouldn't be in zig it'd be within the javascript engine it'd be within um uh javascript core that's safari so maybe the safari implementation of of java uh json.stringify or json.parse isn't quite there read proven's message um pravan say your message to my face right now i can just shortcut it honestly i can just shortcut it oh hold up that's my article roasting me let's go getting roasted get roasted kid okay so i'm actually more surprised by how much bun faltered because go didn't change rust didn't change no didn't change bun really changed that's okay that's a bit surprising that's something to investigate that's kind of interesting running uh the test in the cloud it's time to run the same test in the cloud by the way pravan i really love that you put it also up in lenode and you do like a cloud test i think that that's very good uh this time i have spun up a server with a dedicated cpu in stockholm oh you're having a little bit of stockholm syndrome as they call it to avoid limitations i am running the benchmark from my local computer to the server okay so that can be a little bit i'm a little worried about that but okay uh if i were to run a client server within the node i would uh be limited to choosing only two dedicated cpus without creating a support ticket additionally my local computer has more cores and internet connection that is good enough for the test fine at least they're all running the same thing i've also increased the number of connections to the server in order to achieve better results okay test testing returning only a simple string is this the json one i assume this is like the or this is just a simple string all right so rust obviously a huge downgrade this all makes perfect sense if you think about it i'm a little worried about the connection uh and all these things just because this is where you know i see things just fall apart especially locally usually whenever i do something that has a lot of connections i i tend to break it onto several machines uh all in the cloud but i get the idea was looking good okay go yep this makes sense bun all right bun is now sitting equal with rust what this tells me is that i did you did you run sar by any chance and just like see the network utilization and the and the server utilization and all that here ddos your own server absolutely in the name of science because i'd be curious what's the running speed i have that vmrss script as well to see how much memory things are taken up yeah no i saw i saw the link to it but i was just wondering if you ran any of the sar stuff to look at how much uh cpu is actually being taken and finally no node again or can we all get an rip node i feel bad for no no just always coming in all right testing of json so this will be interesting so rust again pretty much same speed right 713 718 yeah maybe a one percent difference go same thing uh wait does did go did go get faster somehow go got faster again maybe not long enough tests i mean this is so this would be one of the problems with this type of test right you gotta let it run for a while usually kind of isolate any of these weird issues so go somehow got faster doubt right hashtag doubt um bun bun still doing great somehow bun is pretty much identical to rust in this situation and finally node is like this i'd love to see some profiling are you actually using the cpu summary it's excited to see uh that bun performs so well and seems to be a runtime that can compete with rust or go for http i'm also thrilled that there's a run time that does it all unlike languages such as rust and go which provide package managers bun provide one as well yes note on the other hand has various package managers it has various everythings for everythings and all the things have everything it's very it's a pain in the ass to get started and many different ways of achieving the same thing where each method is faster than the others yep although i'm not a big fan of writing javascript in general i look forward to building something with bun i would love to receive feedback this is great so i think this is really great hey go follow go follow pravan on twitter okay it's right here but uh all right so here's my here's my hot steaming hot thing about this which is i don't find these type of tests interesting because it doesn't really test the environment well uh the the the json one kind of did but here's the deal is that there's a lot of these things that happen right there's a lot of ways that uh these companies have or companies these well i mean technically buns the company as well but uh there's a lot of way these these languages handle how do how does it do garbage collection and so when you write an endpoint you typically get some data you do like an await it goes off to a database it comes back you do maybe another await you go to some other thing maybe you wait for a couple different awaits and these things can take a little bit of time right and then you get a response and then you get your response back and then you return it all out and so what ends up happening is you have these objects that end up living longer and crossing the boundary of a collection and being promoted from nursery into something larger and so therefore you get a much more kind of complex operating or runtime experience which means that your your request per second or whatever can go way down because you start to get all of the different uh all the different facets of the language actually running and so that's one of my worries whenever you see just a pure http test is you're not really testing much other than what is the runtime doing and i know that's the purpose of this article but i like to see a little bit more like what does it actually offer does js core actually offer a compelling difference between v8 or is it purely just how well did they write the system interface for with zig right because let's just face it like you said it's the least interesting part of the whole thing it's great for yourself let's see it's great if your server is fast but it's not great if it's too easy to accidentally generate gigabytes of gc collected memory for no reason exactly exactly like this is a real thing this is why just last night when we were talking about it we were reading something or i forgot what we were doing last night but it's all about letting node die it's okay that no dies it's hard right that's like the whole argument for why serverless is becoming popular with node is that one of the arguments is that it's hard to make a node server live for a long time which really is kind of a crazy statement to if you really think about it could you really say that that's like a great thing like that's a language or an environment you should be using is one in which you can't get to live for a long time node is not stable the experience is not stable and it's not that node is not stable is that the language itself doesn't give you the constructs to avoid problems from happening you probably just missed a try catch you probably just actually did something you're not allowed to do you just didn't realize you couldn't do that you actually held on to memory and a closure that points to a map and then it ended up exploding it's really easy to do dumb stuff in javascript and so i totally get that and that's what always you know that's what worries me more about the language than anything else i would love to see i mean because i'm seeing right now a bunch of o camel being executed from bun so to me that actually seems like a really compelling argument for bun is that bun has really great ffi and so maybe just maybe you know what i mean maybe just maybe and so i i like this idea you know what i mean you got to soak the testing you got to do a deep soaking you know what i mean all right anyways i think ffi is a great selling point i agree i'm on that team i think the ffi is a great selling point and i'd love to do more about that oh wow i really want to make middleware and with o camel i can't wait to use a language level abstractions exactly and so there's something really dina wilson rip but really like to me this is really what makes it more compelling is that you have bun to handle all the shitty parts about programming right javascript is actually a really great language for handling shitty parts of programming we all agree that sometimes you don't want to handle every single type you don't want to have to write all the structs you don't want to have to have everything instead you can kind of like reduce it you know you don't really want to do any of that so you kind of handle the things that are shitty in javascript because it's super easy and then you have your your better language do all the complex parts and so it's like i could see why that is kind of exciting js is kind of great at working it's it's kind of great at doing things but it shoots you the foot right it's it's a faustian bargain working with javascript is a continuous fallacy and bargain you you've missed error handling you've missed some some typing you did not expect because the thing is is that you have to define all the typing that could happen right whereas it's like the inverse in a static language a static language you define what types are allowed to be and that's that the type system cannot pass if it doesn't work whereas with typescript nothing nothing it's if you just get handed a string instead of a number and you didn't plan for that it doesn't matter your tests your code you've written it just works and that's what's gonna happen right and you have to you're you're duped you're doomed in a weird sense that things are going to happen in a weird way you didn't expect it to happen because you have to know every possible type or you have to do the typeless programming where you enforce your types zod would be an example and if you use zod your server is going to screech to a halt on how fast it could go kyle simpson would disagree i don't care what kyle simpson has to say you have to know your types either way you don't know what your third-party services are going to respond with they can respond with things you don't expect because that's what happens you have to expect everybody to play ball right and get let's just face it not everyone's great at playing ball anyways the name is i really like this article it was pretty interesting and i'm very excited about more of it by the way for those that don't know i've been i've been i've teased it a few times we're going i'm going through some bun versus node.js performance tighter is better but bun super tight 3 million 3.2 million on what i want to see and another one a 2.2 million on what i want to see exact code exact everything the difference is is that the one i want to see only has 1.3 million and 1.4 million way better performance on bun on identical code way tighter distribution lots of things i'm excited about can't wait to see it that's very bright sorry for the flashbang the name is the primogen