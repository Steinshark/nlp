let's do this time to build a twitch clone that's it time to do my own video delivery service should we use amazon for video delivery probably 200 iq you know what i mean we finally did it we completely get rid of our front end dependency next gs and spelit and we are only using goang with hdmx and this all right i'm going to ask this again now that twitch is back up who hears removed a big ass dependency a whole ass thing from one of their projects one in the chat it is it feels so dang good i absolutely love doing that it feels so good oh my goodness when you can delete just thousands upon thousands of lines of code it's just the best you know i'm not going to lie to you i've doing this tw twice in a row doesn't feel as good twitch needs to quit effing around you know what i mean all right this is good i want to hear this because this is incredible to go from spel kit because typically this is not the direction you would see like i i would expect going from react to hdmx to be more normal than going from spelt kit cuz spelt kit is just such a i mean spelt is just a much smaller you know it's it's just a different front end and it should feel pretty good whereas i can understand the react desire to get away so i'm i'm a little bit confused by the um by the spel kit so let's see what let's see let's see not a meme this is not a clickbait if you want to know why we did it and how we did it you definitely need to watch this video but first of all if you're not yet subscribed to my channel please consider subscribing give me a thumbs up and leave all your questions in the comments and of course jump into the discord community all links in the description right so first of all um wood wood who is thissing is is swate well it's laue right so basically laue is a company i uh started found it two years ago with a with a couple other good people and um we recently actually got a series a uh funding of 8 million so it's not it's not a joking company right dang okay so this is a this is a serious company they got money on the line they got little they got little sweet underlines i mean that's pretty that's pretty big time yeah i know i mean it's is this an advertisement it's more like he's putting credibility to why like i don't look at this as an advertisement nearly as much as hey this is this is like a real product this isn't some toy product in which has three users in which that's what we're doing if you get a series a for 8 million they they they believe that you're you're going to be a real product at this point at this point there's a chance for people to take some risks on so yeah so this is good this is exciting it's it's a big deal we also acquire two other companies and two years ago we uh wrote our platform or marketplace in uh next gs right everything in next gs everything was fine uh no big of a deal good piece of technology right but of course right now we we need to scale a lot uh we need to rethink how how our marketplace is working and we decided to make a v2 right a complete rewrite sometimes hey it is what it is so so with all the feedback we gathered over the past three years we are going to make a version to and um we were thinking okay cool we have the opportunity to rewrite what are we going to use please somebody tell me this is not the greatest feeling ever somebody tell me that this is not the greatest feeling ever right now re oh o o o o rewrites are great if the original team let's see uh if you're the original team but really awful if everyone who made the decision in the first go round left you because you have likely little context oh yes yes absolutely if you rewrite because you have nobody left you absolutely 100% that's not a rewrite that's just a first timer that's all it is it's just a first time with some basic context on a problem that would be terrifying i would not be a big fan of that and we decided with three other people which basically my included so two other people we decided to go with spel kit in the front end and goling in the back end sounds like a power deal you know what i mean sounds like a good stack to to to work in and that's true i like it but but we came in some some some problems so this is the y part right so we have swel in the front end gulang in the back end so i guess i have to ask the question before we continue which is did they set themselves up for disaster meaning a lot of these front-end frameworks kind of like implicitly dictate what your backend should be written in which is almost exclusively javascript and so it is it kind of is it kind of like are you set up for disaster at this point by having a go back end and a spelt front end that's my general take on a lot of these is that i find them to be more difficult when it's not more of a holistic experience you don't agree okay you don't agree yeah that's just been my experience thus far is that when you have multiple when you when you have when you have these two things together they don't go to they don't go as together together as well uh i you know again hx say for lazy backend devs who refuse to learn modern js development prove me wrong fyi i do love anthony gg great channel uh i think you're completely and utterly wrong i don't need to prove you wrong i want you to just go build some stuff how does that sound you go build some stuff i want you to go spend a good 10 years building with modern front-end frameworks and then come back and tell me all about why it's the lord's framework to do everything with these gigantic gigantic ones i want you to i want you to do that okay um but the only thing we were doing actually was we didn't want to use client side rendering on the front end right so we were using spel kit with the with the service side rendering but we had all our business logic setting in the goang back end so the only thing we were doing was just rendering html duplicating the types types script and proxying the request to the backet right that's the only thing we're doing yeah that's that's like a hard htx just use htx at that point that's that's clear that's a clear w htx max there's a lot of shenanigans going on for nothing right so if we have a handler uh if we have some some kind of an api call uh in in in the back end that returns some json we needed to go into the front end under the html make the types do the call but actually just proxy it right so it's it's on the it's on the back end right so it's not from the it's on the serice side uh stuff from uh on get instead of the client side stuff so it's basically just a proxy right one thing that he may not be saying is that you also have to think about it from this perspective that the backend gets all the data aggregates all the data from whatever sources that it's using it now creates the data to create a view then it takes the data and converts it into json some intermediate representation of the view because it's you know because it's view agnostic right and so it sends down this and so then you take that json and effectively you're r trying to understand what your back end has done and then create a view from that so it's kind of like you're going through a translation layer just to get to your front end and then to create the experience and that's what i always end up seeing is that that's where a l i mean that's a huge source of bugs out of out of state problems all of that is just or out of sync state problems all come from the fact that you have to do these multiple levels of translation just to get to the front end as opposed to being like i have the data i know what i want to display there is no login button is you're already logged in send it down as just the thing that's already rendered you know like why why send down that information for something else to make that decision you've already made that decision you've already done it you already know yeah and that was just annoying because if i was working on the back end and i needed to just change some little some small little html value or whatever in the front end i just needed to open up the whole spell kit stuff i needed to make the types i needed to make the proxy request i needed to do all do all that authentication needs to be okay the user y yada the state it was annoying so we did the thinking process like guys listen do we really need to have that front end complexity right although our marketplace is very interactive right it's a big thing it's a lot of things are happening but still is is it worth it to have these two separate things the front end and the back end especially if you don't have a mobile app right if you have a mobile app you could basically question what we're doing but we don't have a mobile app because using lavue on a mobile app is basically just i don't know playing soccer with no legs you know what i mean uh you don't classic playing soccer with no legs analogy i do agree mobile apps mobile apps definitely build a whole different thing but that's that's where again i i make the argument that's where uh accept headers are so important accept headers allow you to say what you want your backend to respond in we accept jason okay so now you have jason and so now you can have your mobile app do its own you know can do its own thing and then then your front end your web your web front end can accept ht text/html and then you can just have html on one side you can have html in the streets and jizel in the sheets you know what i'm talking about little jizel do that maybe we will later on but it's going to be a subset right so we were thinking guys listen we need to get rid of this of this uh of of this of this front end dependency but the only thing that was holding me back because i did a lot of goling backends like like php like lal or like rubi res where you have everything in your back end and you render templates which is just a breed of fresh air to work in the problem with goaling is that your templates are basically not type safe that's the only problem you have in i love that i love that take it is something that just drives me nuts i love the go templating language honestly it's really great the go templating language for what it is for how minimal it is for how little it is it is fantastic that it's just straight up supported right in the language it just makes like your 0 to 60 or your 0 to 30 is super easy and go it's just so dang easy i love it right because you have a map with some data you want to basically use in your html but if you be it's a map so it's not it's not type safe right if you m type a string you have no value yeah and then debugging is going to be very hard especially if you have a lot of stuff going on a lot of templates i would love to see if go could figure that out if they could make their their their templating library type safe or a way for you to opt into typ safety man like go go would be such a killer just out of the box product because i mean that's that's one thing i just i would just love to see obviously i mean i know everyone says like enums better error handling i'd love to see syntax even if it's just like zig and you just put a try in front of it and it automatically returns the air if it doesn't work like all those things yes i want all those things okay we all want all those things yes we're we're all on the same side but go templates is already pretty dang nice right now whenever i use go those are all baked into the cake right i don't consider them problems i consider that working with go and so i just kind of ignore it as a bad thing it's just the cost of using go i'm fine with that but temple temple from uh also from the community but also uh an employee of leue he came up with this he came up with this he said anthony listen look at that that wait a second anthony gg's employee at leue came up with temple i didn't realize he came up with temple that is cool okay so that's super cool the fact that it started out of this company is super cool that is like super duper duper cool cuz temple is uh is is a pretty big w dang big w here hold on uh temple you just got to see this for a second if you've never seen it uh temple by the way you got to be careful a little bit on trying to search up temple it's virtually impossible to search up if you don't know the right words to use but this little this little demonstration i think will show everything that you need oh where where's the where's the nice little there it is vin by the way i'm kidding it's not but anyways you can see this look at this so you get some you get some auto completes going on here look at those nice little auto completes and you get a little div and then you do email and then okay this is nice you know some nice autocompletes nothing big but look at this go up to p. name name email name email name email auto complete in the template very very nice very very happy about that i know it's vs code i just want to pretend like it's vim okay i want to pretend like it's vin because it's the only thing that makes sense to me and i said what the hell is that an html templating language for go that has great developer tooling and boy oh boy it's completely insane people are sleeping on this i don't know what i never heard of this this is just a sleeper thing especially one one one one thing to be aware of is that you have to pass in strings only into here so there is a bit of work there is a bit of leg work that you have to do in here just fyi if you know how to use it right so it's just basically template files but you use them as it's just a goal file so it means that you can write goang in your html a little bit the same as uh using g uh using a function in in next in next in react actually where you're returning a gsx it's actually almost the same yep right so this completely changes the game because now you have type save values right it's just cool ling it's just cool line it's crazy for example here right you have this index with errors you can have layouts you can just write what was a good example you can just look at that this is a diff and you can write goal line inside of this thing you can make you can even make input components you can make yep it's crazy yes it let me know if you want to see uh an inp video on how we set that up if you want to see an in-depth video on how to use that right on how it works on how we made it work like it's crazy right it's just so cool because it feel i i did not expect this coming out of goang but the reason why you can do this in goang and you could not do it like i i i just always assumed this type of stuff wasn't possible to there's no macros right so i just assumed it was not it was not even it was not a a thing uh the reason why this is possible is that goang compiles so fast that what actually happens underneath the hood is that temple proxies the go pleas server and just goes and actually makes it transpiles does all this and then grabs the results out and then puts it as part of it so like the temple ls actually that sounds funny to say temple ls like does all of that work for you so it feels feels like you're getting like this really nice go experience but you're in a temple file and that's simply because gol is just so dang fast it's wild not temple os temple ls the the language server if you want to see that if you have enough comments if you have enough likes on i will make a special tutorial for this because i think it's it's a sleeper stack uh and if you basically use it well man this this is insane uh what's going on e yeah so um yeah you can see you can just write write go ling and in your handler sudden you open up a handler here uh is out handler you can see what you do here is basically um for example if you have erors here if we have templates if you have uh sign up erors we can just return login index with errors which is basically just uh this thing right with errors directly from goling right so you have typed errors and you can do whatever whatever you want with that right um nice they must be boo so they must be boosting if they're using htm x because notice this form is just method post so they must be boosting meaning that well if you if you're not familiar with a boost it does a full page refresh is that what's happening here i think so and so that's one of the cool things about htm x is that if you don't want to uh do a full upgrade on your site to make every part of it feel like a spa you can just boost it and it will feel like a spa despite actually being not one which just dramatically simplifies your logic if it's cheap enough for you to do it right if you're not displaying a whole bunch of stuff you can totally get away with this and have performance that's better than any modern framework despite it actually being full page refreshes on every single click and so it's it's pretty clever it's pretty dang clever it's that easy right h the cool stuff is with this templating thing is that you it works very good in vs code because there is a plugin i think it's also for vim not quite sure you need to check it but you can gd in uh go to definition and all these stuff h go to it's not gd does not stand for go to definition by the way it's not go to definition it stands for the good definition okay it's the good definition right isn't that amazing you can basically just do boom your it's it's it's insane it's crazy look at that g uh you see what what joel is doing here i' shar the logo so it's a complete uh component stuff it's wild guys i swear i cannot even even stop talking about it it's just insane so big cats to jel for finding this because i didn't know he found it he didn't uh he didn't uh he didn't create it he found it yeah awesome i love i've been loving temple and it's something that i've been really wanting to do more of and it's it's why my next project i'm struggling either between rust or go purely because of go temple go temple is truly that good so that's that's what we that's what it is right and if you want to build that i don't know if it's going to run but you just cuz it right now my my the two stacks i want to use is either rust with leptos or go with temple make run it's it's compiling these templates like a madman right it's compiling all these templates it's generating go- code for you and you don't need to look at that and it's just boom using the echo framework by the way um nice i like echo hey i using echo let me know i will make a a video i like echo so that's actually it what i want to show you we're also using hdmx here and there um for min the stuff okay anthony you got to let me know at some point you got to let me know what's going on here what's go what's going on here because you know like i i i like go i like temple i like htm x i like echo and yet look at this look what's here you you the exact same thing what's going on here okay u i'm not quite sure where but it's just very minor right so if you want to have some we have some a couple of use cases but we didn't port everything yet but i'm going to definitely make a follow-up video where we using hdmx where needed right to um reduce the am amount of typescript javascript we need in a film although what i want to show you is that we we use uh some stuff right because by the way modern modern front-end application how many configuration files do you need for a modern front-end application i would just like to say all of them i need all of them if i'm i mean honestly if you're going to be doing something in the front end you need to be able to configure every step of the way what you got some tailwind get some config there you got a little bit of testing get a little bit of in there you got some ts config get a little bit of config in there you got ts config that you need configure different on your server versus your client versus your test you're going to have to have several of them you got just you have just test with ts node with s swc with es build you need a little bit of prettier you got you have your prettier ignore you got to have your docker ignore you got like it just it just keeps on going it's just life is are some uh use cases where you really need that javascript well that's no problem you just uh do that right yeah look at that even using some uh sweet uh what's it called using some web components web components you know i feel like web components definitely are more useful than you realize and i do think that there needs to be more thought i want to play with it more do an mpm run or mpm bolt or something um that's why this is basically still bking but you can write just yavas typescript here and uh use that with these templates and all that stuff uh insane i know it's it's it's amazing guys uh this speeds up or or uh development process uh done right because now we don't need to juggle between front and back end uh deployment is just a breeze man with the get up runners on our server we just boom we push to master and it's deployed right it's just a make run um and and it's there that's the power of goaling right um that's such a good that i mean that right there is such a good win which is that you can literally go from build to production in virtually zero seconds with go that that is another it's just in general it's a really cool part about go there's not this long build process like right now for uh for tv the bu building process from like a clean build is like 30 minutes of javascript it's wild it takes so long so long to build whereas like go it's just like it's done press build it sun i can't even get to my browser and i'm pretty fast yes that let me check out uh i will put some some links in description check out this templating language pretty amazing um like this video leave some comments especially if you want to see me make a follow-up video uh with a tutorial on how to set that up leave it in the comments give me a thumbs up boost this video into the algorithm and i'm looking forward to see you in my next video or live stream peace out loved it that was a great video anthony that was a great video that was a great great video i love the product you're working on i love that he set it up this was such a good video i already got boosted i'm already boosted out of my mind um it was such it was such a good video i am really happy i got to watch that i'm really happy to see uh a change i really the think the thing i really liked about the takeaway which is we can move faster now because our like our world makes more sense and i think that's just such a huge problem right now in the front end space is that a lot of people struggle with like kind of making sense between them i can't tell uh if he pauses to think or we lost connection no he he pauses to think anthony's very good i like his golang videos a lot he talks uh real things from real life yes i i i'm a big big fan how do you handle modals web components right so in general like in general i would avoid modells as much as possible the problem with modells is that they create a state in which is unreproducible right after like the moment you open it up and like that's that is a huge problem and so that's one thing i just i just i just dislike about modell in general and so if you're asking me why all you have to do is just think about whatever is behind your modell if it's any sort of live data you cannot recreate that state or it's extremely extremely difficult yeah but they look cool they do look cool i'm not saying that they're they're not the i'm not i'm not saying that they're not cool i'm just saying that you can use modells and you can use them with htx htx has no hmx has nothing to say whether or not modells are good i like how i have to read both chats depending on which one decides to be connected i don't know which one's going to be connected anyways really like this one i i really like models i really like this video uh something to think about so if you're ever doing models just remember you have to be you know it's really great to be able to recreate a state you know and if you can't recreate a state you should ask yourself is it worth really doing because if you can't recreate a state model's can be kind of you know they're kind of a pain in the ass you know what i mean they're kind of a pain in the ass real estate yeah exactly modal means mvc no no no no no no no no no no no no no no no no no no no no no no no no no no the name is man the internet sucked today aen