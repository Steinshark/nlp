w logo it's css is hard okay to be fair i zoomed in zoomed in css is effectively impossible to get right okay no website has ever got it right okay oh jul julia sorry i couldn't read that julia julia evans fear makes you a worse programmer okay i i'm curious where this is going okay is julia saying that i should not be afraid should i use uh should we use x xz 5.6 .1 not afraid i'm not afraid don't be afraid anyways yesterday morning i asked twitter does anyone have a good rating about fear plus programming and how being afraid to make important changes makes you a worse programmer and i feel like there's a really important line between caution a++ excellent and fear which holds you back from doing necessary work i this this may okay so this may be one of those topics where i am categorically bad at relating to and maybe it's the acoustics in this room but if there's a challenge whether at work or in my personal life i've never went oh i can't do that i always thought no matter how hard this is i can do it i can do this and i will figure it out and i've never really had i've never really had this thing that holds me back due to fear of being a a failure and i think maybe i have a broken brain maybe i'm neurod divergent i should put that on my twitter handle neurod divergent confidence too high uh but i i it's something you learn with time i i never had that problem from the beginning right i've never i like from the very very beginning i've never thought i couldn't do something me and a friend were laughing because we call it our toxic trait where i see someone do anything juggling swords and i'm like i can do that right like i just think i could do anything like i see anyone doing anything and i'm like i could probably do that i could i could probably do that literally i'm hold my beer guy and for better or for worse here i am what are you afraid of i mean there's like things to be afraid of like i wouldn't want to get tortured to death right i wouldn't want to go out like that i'm neurod divergent too i know i get does that make me neurod divergent oh my goodness did i just receive did i just receive twitter clout i'm here for a good time not a long time w did did i just receive twitter clout am i officially twitter clouded can i put that in my bio um anyways a lot of super uh interesting discussion into so this is so i may not be able to add a lot to this just because of that kind of broken perspective in some sense where i think i can do anything we'll find out a lot of super interesting discussion ensued and i'd like to talk about some of it before i start ryan kennedy linked me to the slide deck of a presentation he gave at fear-driven development which i absolutely loved and i think you should look at it i think my favorite sentence from the presentation is fear creates local local maximums i okay okay i find that when i'm afraid i become super conservative we cannot possibly make this this change what if it breaks and this means worse software it actually uh kind of disastrous if you have let's see if you are scared of making changes you can't make something dramatically better or do the big code cleanup maybe you can't even deploy the code that you already wrote and test it because it feels too scary you just want to stick to what's sort of working even if it's not great i mean i think one thing that's that's that that could be kind of real about this is that if you if you don't have any form of metrics to know that you're even breaking right like if you don't even know that things are breaking i i i would be cautious for sure on making big changes one time i made a change at netflix that broke a uh that if you pressed add to my list on the billboard of the website it went into an infinite loop infinite loop react okay react do a little state change do a little rerender do little state change do little reender and i just just just own literally froze the site you had to close the tab smooth move i know and we missed i don't know what happened i did that though i did that seems like we should have caught that in our testing i thought we did must have goofed that one up a lot of people brought up tools and processes in particular a fantastic keasley gilmore enus who who has a new to me things to say about better process for testing code every time i talk to her uh ke uh or kelsey i thought it was keasley wow i was way off i have open source in my brain i know you're talking uh more psychologically but this one is one of my main reasons i believe investing in tests early is important i believe writing your code to be testable in thinking ahead of time of how you're going to test and how you're going to ensure that changes don't break things is very important again i have a very simple approach which is if you can't get it right first try you should test it i usually use tests as a way to drive development because if i can't get it right the first try it means i'm going to have a really long and annoying testing cycle for me to make it right therefore i will write a test once i've written something complicated it's opposite of tdd really it's still the opposite of tdd i decide all the apis and everything beforehand and then after i get done doing it i then do the next thing so like harpoon my most recent change to harpoon i added a i add i added a whole bunch of uh i've added a new feature in which is very very complicated which allows for holes inside the lists nils inside the list so for me to be able to validate that this is true i first wrote everything and then now i'm just going through and i'm just testing everything in my head i like to do it in two different tries so being able to drive testability is really really important and i've added in all the hooks and software for me to be able to do it even this one right here equals i can override how i determine the equal the equality of list items within harpoon itself so i like it i think it's good so i i do agree thinking about testing should always be one of your first steps right holes in the list is a l achilles heel yeah i totally agree with that uh obsessive monitoring ci canary deploys chat uh chat ops dog fooding selfs serve infra yeah all those are very very good so here's a few tools or ways tools and processes to make you less to make us less afraid i don't know if afraid is the right word though like if you're just deploying into production with absolutely no way to monitor i don't think being afraid to do that is anything but wise you should be greatly worried about that you're making changes with no observability it feels kind of crazy to me just raw dog in production that it that feels really really difficult version control means that you uh can make changes to your code without being uh scared of losing old versions this is one of the uh this one is so basic to me now i can't even imagine how afraid i would be if i were programming without version control yeah i mean version control is so cheap too i i can't even imagine programming like i don't even know how to program without version control at this point it's get a knit get add dot move on right it's not about fear it's about irresponsibility i think you're being affected like to me this sounds like a irresponsibility or maybe not irresponsibility that might be a little too hard of a word because some people if you don't even know it's there kind of like one of those unknown unknowns you may not even realize that it's a problem right it could just be sheer ignorance right uh right if you you know i've been ignorant of a lot of things it's taken a lot a long time for me to learn a lot of stuff uh so many people mentioned testing is a way to build confidence i don't think testing is a way to build confidence i think it's a way to ensure that it hasn't broken in ways that you think it could break and that's it testing doesn't build confidence for me it maintains confidence for me and that's it i think there's a i think there's a big difference and i always assume that all my code has bugs in it no matter how much testing i do my favorite thing i've read about testing is from working effectively with legacy code where every chapter title is something that's scary or difficult about working with legacy code he defines legacy code as code without tests to give you a flavor oh that's a strange way to define legacy code i think we should probably not define legacy code that way just because that's kind of confusing for instance i don't understand the code well enough to change it how do i know that i'm not breaking anything i don't have much time and i have to change it you know surprisingly i don't get fear for any of those things like yeah i'll i i i i'm a bit hesitant i try to test things myself but at some point i go well this is as good as we can get i have no testing infrastructure let's go for it right this tweet from uncle bob martin explains this idea pretty well even with good test design without test you feel fear of change and so code will rot with good test there's no fear uh so you'll clean the code i disagree with that too generally i disagree with that because it depends on the size and scope of the tests right if you change it it totally depends on the size and scope like right now uh again returning to harpoon uh i have this whole list functionality and i'm adding a bunch of new functionality and changing things but i also have a bunch of integration tests right that kind of go through and change this so if if i can prove with my integration tests that these still work then i'll be more confident that that this worked but if i change the interface then i have to go through and change all the tests and if i change all the tests then am i confident did i misdo the tests i don't know like it really just depends you know it really just depends on the level in which the test changes right i have zero confident like you know i think the word is good test i know but good test is such a [ __ ] word and what i mean by a [ __ ] word is that how good are you at good tests i i think i'm pretty good but i don't think i'm always that good just saying i think i say that word a lot and i might not be saying that word well good like good is like yeah you're right test that the pro here's the problem is that you then you get into the fallacy you pretty much run into the dark force of tests how do you know a test is good you have a test that breaks sometimes is that test bad is infrastructure bad is the person who control made it kind of a dummy is the person who made it really really good because it's green yeah is it green is that the reason why it's good like that none of those are good reasons but testing and version control are not the only tools we have we can also build qa environments where breaking things is totally allowed and encourag deploy that go out a little bit at a time the slow clap uh the ability to roll back and deploy easily that's good qa teams whose uh job is to exhaustively test software i'm curious about the future of of of ai teams i think that that's a very interesting area to think about with um with ai and enough data about how your users use the application i think there's like a really interesting area that exists where if you have all of the you like if you have how users use your application and you can take an ai to just continuously run effectively against your application just walking like a user kind of walks like a fuzzing like a ui fuzzing it'd be very very interesting and when i say how the ai walks what i mean by that is that it's able to grab a screenshot and loosely say this is a kind of what we would expect i know we're there's a lot of research at plenty of places looking for this kind of basic answer walking as a gradient [music] descent i'm curious and if you put in enough asserts there's something to it right if you can put in enough asserts and you do enough just random stochastic walking i don't know could be interesting could be interesting uh would that just create by definition a just crack or treadmill probably or or threadmill a dummy protection is a must but ai can't do dummy protection facts i mean if if you have every way if you have every way a users use your app then there is some level of which you can reproduce how a dummy uses your app but we'll see depends on how it's changed right uh like optimizing humor interaction in general is kind of sketchy uh yeah uh tools uh that will email you if your program throws an exception and a lot more get hit with an email yeah fear of retribution and blameless postmortem but tools and processes are absolutely not uh the only thing even if i have amazing tools in qa systems and the best deploy and uh well tested uh testing code i'm still going to make mistakes sometimes and what happens when i make mistakes is really critical etsy and google and stripe where where i work all have blameless post-mortems this means that if you make a change that breaks something people talk about what happened by focusing on the change and the facts not blaming you the you know the the reason why i don't like this is that if you break things regularly people are counting people are keeping score people are most certainly keeping score and so that's where a lot of these things are where it's just like yeah it's blameless and all these things but is it blameless yeah i'm sure they bring up the score with people who are breaking enough yeah it becomes talk bind their back i don't think that this somehow creates a good culture i really don't think this creates good cultures i don't know if the other way creates good cultures either i'm not offering a solution i'm just offering an observation that i'm not con vinced this is a net positive uh maybe it's less about blame and more about the ability to come out say you effed up and just plainly say what you did yeah to me it just that's like what it comes down to is like if everyone's just kind of a grown-up and just you know put their big the big boy pants on just say yeah i i messed up how do we fix this what how do we prevent this from happening again the thing is is you get you actually get quite a few you get quite a few oopsy daisies before people look at you like you need to improve right it takes quite a bit of time time right and the more like the reality is the more accountability you take typically people are more lenient with you uh i also realized that this goes much further than programming and mark linked me to an amazing site about restorative justice i'm not sure what that means anytime there's an adjective with justice i always get i get confused by it which you should also go read so if you blame people for breaking things they'll become more scared to make changes in the future and you'll end up with worse programs i don't know if i i'm not sure if i buy i i think this is a a bit of a logical leap the problem that i have generally with this take is that that i think you always being afraid is more of a problem than you trying to set up a system that prevents you from having the fear in general i think addressing the root cause is i mean for me this seems like symptom curing that's how i look at it is that you're trying to avoid people having the symptom as opposed to figuring out what's the cure anyways uh one last thing that uh one last thing that that fear driven driven development talk talks about that really resonates with me was some fears are irrational very true and they can infect other people if you deploy something goes wrong and you and you figure out the cause and fix the problem and nobody yells at you hopefully future deploy should not be that scary yeah i mean i i i do understand if you're new at a job and your first time putting out code there's probably a little bit of hesitation for sure i have the problem with calling it fear because i don't really feel afraid i just like oh man i got to make sure i i checked all the boxes and that i i do good here uh but because we are only human and not logical robots sometimes they still are and maybe you feel nervous about doing deploys for a while until you see that things are really uh usually fine i think there's a lot more to be said about irrational fears and i'd be interest interested to hear more uh this year was the first year that i worked on a large software system that affected lots of people and it's been scary sometimes next year will be the second year and my plan is to uh for it to be easier i mean i i really like i really like the the highlighting of irrational fears cuz i think almost all of us are i think not all of us a lot of us have irrational fears on this thing right and i think that if you look at most of the things you think are scary they're all irrational here give i'll give you an example a lot of people are very afraid of whiteboard interviews coming in a huge co code base can be scary if if you think it's scary that's such the wrong word overwhelming much better word whelming probably even a the best word um scary is a a strange one but let's go back to whiteboard interviews um it can also be underwhelming after after you've seen it you might realize the code is garbage and then you're underwhelmed by the quality um but when i talk about whiteboard interviews i see a lot of people that are like they they say how scared they are about the whiteboard interview and i i i get very curious or confused by the statement because there's a couple things that are true the interviewer could ask you something that you do not know right i mean that's that's really where the fear kind of breaks down to is that you're going to be asked a question in which you cannot answer what happen if you're asked a question that you can't answer how have you increased your surface area of questions that you can't answer can you answer those questions if you feel like you have a pretty good surface area you've done a lot of studying you've really thought about your craft you've been doing it for a while then why are you afraid the chance of them asking you some question you don't know always exist like why are you focusing on the negative side of things it's kind of irrational yeah that's why we call it irrational fear like but that that's that's why you you logically think through the situation like what cures a lot of fear is being logical about your approach of course anxiety sucks and and it's definitely i mean there there's definitely a trained habit within anxiety as well and what i mean by a trained habit habit is that if you feel fear and you just sit there and let it control you and you change how you act because of fear that makes you like technically a coward and by doing that you've just allowed whatever that like whatever that behavioral pattern to set in stronger there's this there's this phrase that people say which is neurons that uh fire together wire together and so if you allow these things to happen then you're going to do that you're you're going to allow those things to to to wire together see by the way this is a very stupid phrase damn cowards won't play in traffic that has nothing to do with what we're talking about if you somehow equate a whiteboard interview and being afraid you might be asked a question that you're not going to get versus doing something that's objectively dangerous you are a [ __ ] right like you're you're genuinely a [ __ ] okay so don't don't be a [ __ ] be be be at least a little clever okay at least think about things before you say them right [ __ ] is a strong word it's not a strong word you're being a [ __ ] if you cannot hear somebody say something without thinking of the most objectable or obviously bad faith argument possible then you are being a that's what a [ __ ] does okay a fool might be a better word um and so don't like that's how i think about this which is there's always a chance you will fail no matter what in any sort of in any sort of the in any activity you do there's a chance you'll fail think about it this way take the best free throw free throw shooter in the world has been practicing their entire lifetime what's their percentage it's not 100% they can't even reproduce a physical shot over and over again they can't do a physical motion over and over again the same 100% of the time so imagine something that's significantly more complex right so why shouldn't you like why should you expect not to fail sometimes it's not an it's not a critique of your character it's literally that it this is an expectation this should be what you think should happen right and so that's where i have a lot of the problems with these things is that people generate all these fears and they they want they want the world to change around them because the world is because there might be failure like yeah the world will always have failure you cannot protect yourself against failure embrace the fact you're going to fail and it's going to just destroy a huge percentage of your anxiety over these kind of things like if you just if you if you if you willingly embrace that it's going to be good but i'll say the inverse which is that if you constantly make decisions in which you accept the fear and say i'm going to change what i'm doing because of fear you are going to become more afraid there's no staying in in one position you can never stay in one place you'll either become more afraid or you'll become less afraid there you there is no there is no stagnant failure is growth exactly do you know how scary it is to go on stage and talk in front of people every single time every single time i feel awful it's why i don't like to hold microphones whenever i do it you know what i mean every single time i go on onto a stage it feels awful but you will never be able to detect it from my voice you know why cuz when i go up there i make a commitment to my heart then when i walk on there i'm going to go on there and i'm going to just speak with my chest and i'm just going to say it and i'm not going to flinch and on my inside if i hold a microphone i'm shaking i'm shaking wildly but externally i have made the choice i will just defeat that i just refuse to give into the into the into any sort of like fear like that or anxiety around things you can't you can't let yourself be dictated by it right you really don't you really don't want to be dictated by that thing cu you will you will significantly hinder your growth as a person and in your life if you expect the world to become a safer place for you rather than you to become a more brave person for the world i'm not saying it's easy by the way like i said i shake i shake like like someone just said i shake like an old alcoholic when i get on stage and i hope i never have to hold a mic right i hope i never have to hold a mic while doing it but if you give me a mic and say you have to hold this mic and go speak in front of a thousand people right now i'll do it and i'm going to shake and i'm going to feel like i look like an idiot but i'm going to go out there and i'm going to speak with all of my chest and i'm going to just absolutely go all in on it anyways sorry uh uh fear can make you freeze or it can inspire you to move yeah it's true the whole fight orf flight thing right that's why mentorship is important yeah i agree with that anyways sorry that you know i'm not saying it's easy i hope i hope the takeaway people have isn't that it's easy and you know what some of some of you will have more anxiety and some of you will have less anxiety right we're all we all have permutations like tj is probably the best programmer i've ever met hands down probably the best programmer i have ever met and part of that is because he is uh he practices and does does a lot of work but the other part of it is because he is uh dude he's just born talented the man is just simply born talented if you don't know teach oh lauren said who's te you haven't met me facts okay i don't know why te didn't show up here uh te where's te there you go twitch tv te dv uh but yeah like genuinely clear clearly physically gifted but also has worked hard and so i know i know variations exist right all variations exists some people you know the worst part about a lot of these things like you go and interview and some people won't like you for some stupid ass reason right some people could hear my voice and just not like it oh i don't like this guy and now guess what you're fighting an uphill battle you got to not only impress the person but you got to like now overcome someone not liking you for some stupid immutable feature right and that does exist so anyways just something to think about just something to think about and i don't want you guys to get all uh you know anyways sorry i feel strongly about this topic okay i feel you know i didn't think i was going to have a lot to say but man it turns out i i i feel very strongly about it the reason why i feel so strongly about it here's the reason why i feel so strongly about it when i read this article you know what my takeaway to this is julia views herself as a victim in her own story that's how i take it now that may not be true i i don't want to over overstep anything but that's how i take it and i don't mean that like victim mentality i mean like she's already losing and needs to fight and and you know like you know it's very very hard and very you know scary or it's just like don't be the victim in your own story i don't know it's hard it's hard it's not easy i've had a lot of i've had a lot of very shockingly mean things said to me uh in groups of people over my career you know it's hard it can make you feel bad it can make you feel like you're not uh good enough um you know it's hard there always will be people that aren't fun to work with that aren't good you know what i mean but you can do it you can still do it you know programming is a little bit less scary than say being a cop yeah yeah that's a whole different level of scary imagine approaching a car that just one out of a thousand times you might get shot at that's kind of scary um anyways there there you go don't be the don't do that be careful be very you know be careful it's okay to be hesitant it's okay to cross your eyes and dot your teas and make sure you're doing the right stuff but don't shy away from challenge because it might be scary you will forever and forever never live up to your true calling