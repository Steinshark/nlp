so first off let's start with who you are what you've been working on and then kind of why this moment right now is exciting so let's kind of go that direction you know i've been on your i've been on your would you call it a show i've been on your stream i've been here before one time i think you've definitely been here but but there's been a lot of change of people you know every day new set yeah that's hey isn't that the way the world works um astro is a really cool web framework so if you are someone who builds websites and you haven't been super happy with like the fullon job javascript full-on react full-on spelt whatever the current state of web development is astro kind of got popular by being this uh other take on web development so you get to still bring your react components your spell components your view components your solid js components um you can even bring htm x which i think we're gonna get into a little bit in a second um and what we tried to do is provide this like foundation of like a modern dev experience with a really lightweight front end architecture so we're kind of combining these things like the the goal is you have this really really powerful web framework that's really simple in it's trying to do it schol is kind of to get out of the way so it does server side rendering gets you your html using your components you already have um and then you're able to like inject interactive ui on the page so it's not a full-blown spa if people are familiar with that term it's a much it's it's really new it's like a very interesting architecture that we are super proud of and yeah astro 3 just kind of turns that to 11 okay okay with uh with hmx included and all that it doesn't that just make it a spa at that point so here's the wild thing so when does something become a spa maybe i'm i'm confused here and for those that don't know single page applications it means that all of your actual url state management everything is all managed within javascript or some javascript framework that updates where you're at so back button everything works it feels like one singular app experience despite being several individual potential dis disjointed experiences the word app is i think really key there it's it's literally a javascript app become website is is essentially versus like server renders html and then gets kind of hydrated as you go and that's that kind of became mpa which was multipage app but i don't know these terms are kind of getting a little so the big release of astro 3 is this view transition api which is actually a browser api we're basically just exposing this which if you haven't had a chance to check out the demos i haven't oh d i'll send you a couple it's we should check out some demos do you have any with hmx too so we can like look at a little bit of source code or pull out something that's pretty sweet because i i bet you ben ben's probably been working on some of those he's so red pilt these days he can't even hang the amount of hdmx and rust he's over there talking about like some types and stuff i'm like dude this kid look at this kid yeah i i think we're somewhere i don't know if we're on the left or the right of that graph you i love that graph like i'm on one of those sides like i think hdmx if you have a problem and hmx solves it that's awesome you should use it um i'll find a i'll find a video but it's super cool it's like animating from one page to one page has always been a thing that only a javascript app could do so if you wanted that experience you had to ship an application like not really a website as i'd consider it um and this new api is basically the browser saying like all right give us the start give us the end point even if that's from one page to another page and we'll like morph things across the transition we'll we'll fade out one page and fade in this other page but we'll keep the header like it's it's such a powerful api um for a lot of other frameworks it's just like oh yeah we already have that like we're spas but for us it's like this superpower that's unlocked because we don't do the app thing we do the website thing well not only that but uh there is thousands hundreds to a thousand plus lines of code devoted to make that thing work and now it's natively supported by the web browser which means it's just less things to go wrong in your tool less bespoke ways that you can handle the same thing it is now kind of like a streamlined better experience because i was vaguely familiar with it and so it just makes way more sense to have the browser to do something it's kind of like the days of jquery when we didn't have uh query selector or query selector all you had this really kind of goofy way in which can you throw that in the twitch chat uh you had this really goofy way of which you handled it which was jquery to normalize the api now it is just simply normalized and you don't need hundreds if not a thousand lines of jquery to do the same thing a browser can just do so it's always good when you offload 100% yeah the more you offload things just the better it is look at that oh yeah bright side let's go okay so look at that audio player down there right this is individual pages that we're navig navigating across oh nice yeah and you can deep link and everything but you have this audio player that's running to it side and this is fantastic i like this yeah this is something that would always be like a full app like all right here's my client router here's let me ship all this to the client so i can do these cool animations these cool transitions this is all now powered by the browser so you're sending and receiving html full page html and the browser stitching it back together that makes so much more sense and you don't have to do a thing it's all the browser this this makes like this is honestly like a thousand times cooler because uh i really hated the amount of like dealing with all these transitions and everything that's like so much of programming that goes wrong is built up in this just one activity right here right like this would take like weeks this would be like a huge deal this would be like what makes you know your spotify web service like better than google play or whatever but no this is just now a couple minutes yeah and the only thing that's hard is you got to get that little record player to kind of that little onload have the thing come out and then do a little spinny that's i mean that's your only thing that you got you got any sort of difficulty with yeah true this did not take 2 minutes to build but the transition part of it for sure yeah the transition part seems straightforward all right well hey this is fantastic now was there something more specific about astro let's see so you're you're doing i don't think we answer the question what is this big release about astro 3 what new things are coming what makes it worthy of a big kind of announcement what makes you pumped up besides for the view transitions or is the view trans i'm just i'm always pumped up to talk i'm always um view transitions are definitely so i should clarify if you're watching this live right now um astro 3 comes out tomorrow so we actually haven't launched this yet you can get it there's instructions on the doc site it's uh you have to install you know astro rc i think is the version number it's august 29th by the way so when you see this on youtube it's already live wait 24 hours and it's live so it's probably live if you're watching this um for the majority of people um view transitions is definitely the big thing because this has just been something that like every other framework has held over our heads for the last two years of like ah but you can't do this now you can um there's a bunch of other really cool stuff i'd say one of the biggest things for um almost like ironically is our jsx and react supports gone a lot better we now do like fast refresh which is that idea of um you know you change something in the browser um or sorry you change something in your local file and the browser doesn't refresh it just automatically like inherits that new code change but the state of the component so if you have like a counter basically if you've ever worked with like a modal or like a multi-step ui flow and every time you hit save you have to go reset that ui flow go back to the modal go back and click like three steps in um we now solve for that which is basically pushing that update to the browser and react handles that upgrade without like totally blowing out your state okay okay um so if you're building spas weirdly ironically if you're building the spa this thing that we've always been like the anti- framework for like we're kind of weirdly becoming good at that and that's where i get back to that like flexibility thing like you can actually just embed a spot in your astro site so instead of being like a spa framework it's one of the things you can do with astra so marketing site over here full like client side rendered like logged in sas app over here all in the same code base is the goal okay i like it i like it i like it a lot now we can also get into a little bit more of the little like technicalities and we can do a quick little coding session is that what you were hoping for um yeah there i mean whatever you think would be fun on the stream the thing that doesn't exist today which i thought um you'd get a kick out of is htm x support it's possible today but there's this really annoying thing you have to do where you basically have to like filter out all the like partial information to get at the the um yeah the partial i guess it's called um that's one annoying thing that i really wanted to turn into a library so that was the one idea i came in with was help the world of htx use astro help them create this library and we could publish it like i think in the next 30 minutes it's a pretty small snippet of code really well we can get as far as we can but it's basically how to use astro hdmx and astro um it's i think like 20 lines of code jack harrington i'm gonna give him a shout out because i know he was someone who was playing around with this a lot um i think we to down to like 20 lines okay and just making it like publicly repackaged for people is kind of the only thing blocking it from being a reality all right so i'm in my personal directory i want to get started with astro can i give a quick shout out to one thing it's it's one of the things the team's gonna kill me if i don't do this um this is my this is my only plug you don't have to ask for any more plugs um i'm not a plug but this is my plug um we are live on product hunt today um doing something called starlight so it's our docs theme it's awesome it's we're doing this whole launch week and today's big thing is starlight um if anyone's watching this live if you're watching it on youtube who cares we don't care about you but live um there's this whole thing about getting um you know on the featured page on the homepage all that good stuff we could use all the support we can get link it in the t chat and i'm glad that you emphasized i don't care about you youtube i don't okay don't care i just want your thumbs up um let me yeah wait so can i post it in the twitch chat yeah yeah yeah go for it boom all right i would appreciate yeah that's one of those things we're we're number two i think we can be number one classic number two classic number two there you go there's fred right there yeah awesome if anyone yeah just uh love any support sharing it liking it all that good stuff starlet's awesome too if you're trying to build a doc site you should check it out it's it's everything we've learned about building docs nice all wrapped up i'm sorry as youtube you feel very neglected i'm sorry by the way i love that you're one of the more wholesome people on the twitter's yet your handle look like [ __ ] dev every single time i see that i just i i giggle to myself because it's definitely not it but it feels that way and it just it's just so much fun for me our uh someone on twitter is really trying to make astro glide happen like the the lube as like our like brand basically i don't know i don't know what the end goal is but i i'm getting a lot of tweets about that there is no end goal when it comes to twitter okay the the meme itself is the end goal the go for you to say okay we'll be astro glide and then moment right here yeah change the profile pick change the banner we got them damn it this this guy [ __ ] see you can't even help it you can't even help it it's happening okay so let's do this you think it's going to be a pretty quick one i'm a pretty fast typer uh i'm vaguely familiar with the whole node ecosystem so all right let's do it let's someone time us i think we can do this pretty quick um what is your like package manager are you an mpm boy or uh whatever you want they're all the same to me except for actually they're all the same no who are you about to throw into the bus no it's just that like uh npm if you do workspace command it will run them all uh serially but if one fails it'll still continue to run the rest of them so if you do some sort of workspaces command and you're doing ci your error will be buried beneath potentially thousands of line like there's just it's more just like the in in congruent nature of npm or the package ecosystem itself where you have to write 1,000 commands to do just just so you have good ci experience yeah yeah word okay well whichever one you like um the create command um so mpm space create space astro um and we can use the rc no yeah let's just do this can can i should i provide a name um i think it's going to prompt you for all that good stuff as long as you're in a directory now where you can create subd directories uh don't do this in your like i don't know your documents folder there we go 322 looking good looking good all all right there we go we're going i love htm x so you got me by that one you really did get me by the htx one all right let's go uh awaiting further instructions okay cutesy cutesy what should i name your new project what should we name it hmx table cover hmx glide let's go all right is it sample files blog template or empty um let's just do sample files i guess that makes the most sense okay good and you gotta be careful i'm going definitely need your help on the hdmx sides but i can provide the astro side i think together we're going to form a dynamic duo here okay okay we don't sound so excited we can be a pretty cool dynamic i have pretty good knowledge of of of how htm x works these days which by the way here let me get the the the lsp up here because if i'm not mistaken uh i've had o get diff do i get diff yeah i'll go like this get reset hard get status get pull origin master rebase because i'm a champion there we go and then cargo build all right we'll go back to here there we go um and we'll go right here so there's go do you plan on writing typescript typically yes um strictest strict i like strict my favorite is still a t3 app by theo where if you say no it's just like no you're wrong you are going to be writing typescript i do like that i do like that but i will i do have one gripe with that kid that that kid theo just one just one just this one gripe which is that he disabled array array generics and then use a generic definition you can only do type brackets which means that you have to wrap some things in some extra uh extra parentheses if you want certain behavior on key of and type of and so this so funny that just came up in our own code base and someone was trying to like yeah it's it's such a small decision but there are things you can't do with right yeah you have to wrap it in a pren and i don't want that i don't want to have these weird like key of because of type of because of this thing parentheses then squirt you know you just don't want that i mean you know what you can do right you can start the war of the github issue yes send the army i know i could do it live on stream and then have everybody come in with a thousand thumbs of yeah why not i've seen you do it before i've done it before all right get repository there we go so we're going to go we're going to get everything built uh that thing was built let me while this is happening we're going to jump back here i'm going to quit this i just want to make sure this is all working still uh just because i don't want to be embarrassed you know what i mean live um all right look at that we got all these beautiful things in here we got swap look at this look at this swap going in here and it's still broken dang it i thought i pulled all this stuff down i got to figure this out okay anyways it completes afterwards right so here's all your different potential swaps anyways okay you were saying this is going to work i mean not to put you on the spot this is hopefully should theoretically work in an astro component because it's all just redx right no it's not redx son please it's put your head down hey keep your head down yeah it's don't move it uh no it's it's it's tre sitter the the the good stuff htm x htm x glide very cool this shows how little i know the person eric on our team who works with language tools is like heckling and laughing at me right now yeah absolutely all right what do we do here okay so i have it up what's the what's the thing all right let's do it um the first thing you want to do is going to create some middleware so i'll tell everyone the hack is going to be a little gross we want to make this actually just a built-in thing um but basically astro is going to return for every page you create it's going to return a full html so doc type head yep yep yeah which is not what you want with htx you want these like nice little partials you can you can actually still do it with hdmx you can use uh you can do select hdmx select will actually select out of a response the html you wish to actually merge into the component just to throw that out there yeah okay well then maybe we just get htx working to start and then we can do this cool middleware layer thing later if we have time um because that's where i want to get to i want to like yeah that's that's awesome that you can do that i would love to get to a point where you don't need to worry about any of that that would be my goal um but for us right now yeah let's make sure it all works all right what do we do okay so source well actually let's um can you spin up your cli to get the dev server running that'll be the first uh which is i assume it's like runev yeah yeah npm runev there we go we have it exposed here's my little conway game of life look at that conway this is all htm x baby wait whoa cool yeah it's htm x this is all client side but the saving is all server side oh you can mix you can mix and match there's no there's no you don't have to have one way of doing things around here all right there we go we have this yeah we have this beautiful astro page look at that that awesome um i guess we should decide what we want to build like again this is where you probably know what would be like a good way to show off htm x like simple build something very very simp let's just build a counter a little server side we'll just do an inmemory cache counter you just click a button and it counts easy love it um let's go into source then and pages um all right see source pages pages index there go just clear out everything after line six all right so line six and yep because that looks like that looks like um some sort of you just you know what clear everything out just toss it all keep the layout oh yeah i was going to say keep the layout but we'll we'll add that back in in a sec all right there we go everything's here um so clear out the styles okay all right there we go blank slate um let's bring back a layout component i think that just is going to give you like it's going to just give you some basic stuff he but isn't that like react or something um no so you can see on line four it's a asro component so if if this is any one's first time seeing astro i'll just give the quick summary um astro feels a lot like spelt or even react like our templates are basically gsx but what makes it special is this this is all server side it's basically react server components before server components were a thing it's this slot right here right is that where everything gets put into yeah exactly exactly so it makes we basically took our favorite parts of felt and view and and react and the idea is that this is a server side language so there's no like client state or interactivity this is all going to render to html and what makes specials you can then inject a react component like import a react component like anything else or a view component or both of them next to each other living in harmony um and that's going to be your interactive ui so astro for server for html okay it's like a really advanced templating language that supports plugging in uh client side runtime templating like yeah when we say like server side templating people think like low powered but that's effectively what it is it's like a super powered so in other words layout right here uh oh i can't jump to that sag i must not have the right thing is actually producing this string right here right in some sense we could call it string maybe that's unfair to say but you get the idea then you also have these props and everything that must be brought in i assume this is just like query parameters or whatever is going on here i don't know some sort of parameters but server side so yeah you can uh you like pass props through the layout component so layout um title equals if you wanted to so i can go something like uh class we'll go h uh hx get uh equals actually we should you know to be fair we should do a post and and we should get the count uh if onclick and let's do i think everything else should be fine and then we need something that does the count so that's what i don't know how to do yet which we'll get there and then if you click this it just makes it just keeps on going right so if you click that it posts to that endpoint yes if i click this div it will post to the endpoint we can make other things we can make it on hover we could do a bunch of we could throttle it uh we could do a little hx um what do we got here we got so many things i forget we could do a trigger that has uh like delay some amount and we could we could make it repeat on mouse over and all sorts of fun stuff but we won't do that we'll keep it like this very simple onclick replace in html with whatever comes back from the server nice okay so in html of this element this count is whatever comes back the html that comes back from that yes and if we need to hx select we'll hx select out what we need to begin with okay cool well let's just build that count end point then so that would be source pages count um so we do the file based routing thing so we have to create a new one a new file count asro yeah exactly okay and then and then we had you had some of these headers right i noticed you had these things this must be for some sort of javascript or some sort of persistent type stuff can i make a persistent piece of data can i do a left count and this will exist between pages no it's not that easy um can i use f trying think about the best the best way to save yeah you could do fs for sure okay because then i could do some sort of import uh fs from fs and then just go like this cons count equals plus uh fs. read file sync and we'll do a uh temp count boom boom boom boom boom right does this look good that looks great there we go so i just read it out of there so here just to make sure we're going to go like this echo z into temp count cat temp count there we go we got a zero in there we're looking good we're looking solid we got our database up first inmemory database of all time right here there's like if this is something that is going to be totally fine for our use case um i think we traditionally say like a store like even just an esm module somewhere that like keeps this variable state would also do the trick for you um because this is gonna break if you ever like try to deploy a server abol right now totally perfect yeah i'm also just showing my new inus what's the plus do on that uh that's uh it's this is just shorthand for uh number oh clever it's not it's not a parse int it's parse int has some extra rules like an empty string turns into a zero very cool so it's like it's a little bit more dangerous than a parent but i just use it when i'm just like ah it's just a thing i already know right it's the thing i already know it is the thing there you go it is that's what it is that's super clever all right so there you go i think that should work out and let's erase this thing there we go we have ourselves a nice little back um you want to probably return the new count right so you want to make sure this is going to return the old count so i'm just going to go something like count yep but this is gonna return old count not new count oh yes that's that is that's right we should probably do something like that i guess i should probably put it up here huh that' probably be a little bit nicer because then i don't have to do this whole thing and that whole thing making this productionize code using file sync and read read sync and wr sync all right there we go all right so made this end point so what do i do now uh let's actually just go check it out so if you go to the local dev server again sl count you should see this um count is not defined we effed up oh my goodness we are such rookies so we should probably turn this into a module right no this was fine um if you go back to the page it was actually the last page we were on the index but i might want a module do i import something then oh because you want to show the first count of all time yeah i need to have the first count and every time you refresh the page the count should really go up yeah let's put it at zero right now just to make sure it's working like if you just hardcode that to zero oh it's working i have confidence in both me and you look at this beautiful more confidence than i do look at this beautiful color scheme we have going here count zero so things are looking good if i click it slash count if i click it you'll notice that we're getting we're getting some sort of request going on here oh but something has become very angry i think is it disabling the requests connection refused what is is happening here your your body's covering the uh there we go nice there we go we have this nice little count here when i click it it gives me an issue what is this deprecated feature how dare you yeah how dare you where where's the uh i'm not see reest oh we don't have h dude we're so stupid we don't have hdmx that's so embarrassing this happens to me every single time i use htx the first time i go why is it happen what why why don't come hdmx and it's just build hdmx into the browser you cowards i know you won't you won't you won't all right yeah grab that i mean the nice thing about astro is again the flexible kind of we're not like taking care control of your whole app so you can just put a script tag um let's do that in the yeah the head right there that's perfect got it all in there every everybody's happy uh this should build all right everyone's happy with that now we refresh this one and i should be getting there we go we have the request going there go and look at it's 12 13 14 15 17 20 21 22 24 25 26 27 now when we refresh it's back to zero but if i press it again if i press it again it should be 31 31 look at that it's 31 you can't see it that black on black there you go let's uh let's add a quick sty that's gonna bother me for that or you can turn into a button and just add like a quick like body text equals uh you know color you just really hate that thing don't you all right hold on accessibility brain i've been accessibility ped where the where the heck are these things i just don't have them all your styles are in the layout component i think there we go we're go like that nice all right so i i could probably make this into a button right you you're want me to make this into a button yeah that works lower case be for the html tag oh yeah sorry i don't do h i don't do htmls too much um let's go post uh equals count uh hx swap equals outer html bam bam bam uh go back to here and i guess we probably want we're just going to have to i'm doing the same thing twice i know it's not the greatest thing just let it happen oh you're actually replacing the button now i'm just goingon to just replace the button we don't have to do that but there you go we now have a button that's being replaced there it is it's counting up nice you love to see it love to see this um so yeah for saving that state um there's a couple different ways yeah if you just created a js file that like literally export let or export const equals no you have to change it so export let um count somewhere in your project really that memory like yeah because it'll but you'll have to do it in its own file is like the kind of weird thing easier where where do we put this top level just throw it right in throw right here we'll clean it up later count ts let count equals zero yeah and export that baby yeah oh my goodness look at that it feels so good so that means i should be able to go right here and i should be able to import count from back it up uh count right yep is that fair are we looking fair let's try it out there's a chance i mean so the browser should like if we're following the back if everything's going well this should work the only thing won't work the only thing that won't work about this is that every time we make a change in our brow in our in our button refreshes i assume we'll have a little bit of an issue there and so i'm i think so oh come on it's in memory javascripts you know this uh function count let's just go like that paste that and do that and return count oh yeah that works too there we go yeah yeah yeah then you're not even keeping state yeah okay i'm just going to pretend like this thing can build itself can this thing build itself uh why are you saying that you can't do it okay count has been might erors yeah that's always a little bit of a problem with our output all right let's go over here throw in one of those as long as i've done everything thing right i don't get any information there and then we'll do the exact same thing here import yeah this is such an interesting pattern because you could what you've actually created here is a button component not really even a route i'm thinking through there's some way to just turn this into a component that both no but you want to return the html see this is where htx breaks my brain i know we're so we're so trained to think differently about the web yeah of course this works it's beautiful and look at this look at this our inmemory database is right there 87 haters haters are gonna hate that haters that's what true database performance looks like it is it's the fastest readwrite operations you've ever seen in your lifetime i'm surprised this is working based on my understanding because i thought that this was doing that thing where i was going to take the whole html document and like weirdly inject that on your page you might just have a misunderstanding of the old uh htx htx just it htx contains absolutely no opinions about anything it just says give me the verb you wish to per uh to perform the action you wish to perform it on and how you wish to do the swapping and it has really sensible defaults which is it will swap its insides with the response of the thing that comes back and since we since we've literally only built something that makes a button i'm outer swapping now i could just go right here and do this thing erase that one jump back here and jump in with inner h2 oh look at that lsp by the way look at that lsp in astro astro in astro who made that lsp actually the community i didn't make this they're way better than me um there we go they're looking dude they're they're so good so many good red jaxes so now it just replaces the insides and you can see that so the response yeah let me see the response body there the response is that it's just an html response with just that and it resp it literally replaces the insides so here we're going to keep on going because you seem very excited about this so we're just going to do it well i'm just i'm wored this is an astro bug that there's no head or body coming back but it's working i'm not complaining i love it all right so i'm going to go like this i'm going to do this okay uh we're going to go like this count right so now if we do this this will o obviously once i click this it gets all something's really getting messed up inside of here apparently you can't shove divs look at this button it's it's like super effed up right now right because yeah this is what i this is what i'd heard i'd heard stories of this yeah so now we're all messed up because the button contains like everything going wrong so we can go back here and i can give it the old hx select plan and go uh count right is that what i made it as did an id yeah there we go and so i just css selector that that son of a be and now i'm just doing that now i'm only getting the count i'm only getting the thing i'm selecting out i think you probably could even do something with insides i don't know if you can do like inside but i bet you there's way i was going to say cuz you're getting the div in the button which is fine but but this is also you would literally never have this as actual code a button that fetches data to replace its own text that makes no no sense at all fair enough um well i'd still love to try out this middleware thing i think it's gonna save a lot of hal me so again jack harrington is basically who i'm ripping this from um i post a link in the i mean i can post a link in twitch chat if you'd like this super twitch chat the the place you're put that's my windows streaming computer okay i know it's blasphemy people actually there's someone's head that will explode right now oh you can't i oh i've turned dang it i turned it off so the window sounds won't make a window sound right now but it's supposed to go bling bling bling but it's not happening all right whatever stupid anyways all right i post that link in there um scroll up a little bit um so this is the middleware that whoa there we go um that jack wrote um to get around this problem and he kind of left a really nice comment i love this um basically we're going to return everything on the page that's probably not what you want his solution was to have a source pages prompts route but i think you can call this whatever you want like sl fragments partials and basically what this middleware is going to do it sits in front of every request every response and it's going to look at anything coming out of that api or sorry that um route pattern and strip out all the stuff you don't want okay okay that's that's very interesting i think i i get this okay because you don't want to do it for everything because uh hmx makes a heavy use of boosting and if you don't know what boosting is boosting is really really cool yeah i don't know you don't know what boosting is can i show you a quick moment of bo sounds like is this this one of those those kid those drugs the kids are doing it is you're boosting we're boosting boosting we're boosting hard all right so i'm gna go like this um we're going to go uh let's see let's just go like this uh h1 uh hello this is going to trap us but that's okay and i'm going to make something inside my index that looks like this i'm going to have a uh i'm going to have a div that has hx boost on here as true look at that lsp still doing it is that co-pilot or is that your no that's got to be co-pilot no not the lsp part that that lsp part that's all that lsp so that little true right there that ain't nothing ain nothing but lsp and hard sorry i like to brag about what other people did for me uh i really didn't do any of this stuff so i'm going to call boost on here and i'm going to go like this a herf equals uh what's the thing called i'm going to call it wait what do we call it we called a thing yeah we did yeah we did uh thing okay so so typically you know what's going to happen when i follow this link we're going to that whole page right everything's going to be all that so here we go we got thing now i'm going to press thing and you can see everything like that happened right mh yeah but that's not what happened you'll notice that we we did thing it got the response out it selected out of the it selects out of the body and then puts the body in here oh it's like a turbo links yeah it just it boosts your link so it creates an update onto your uh onto your history replaces this so if i had another thing right here it would swap it back and forth it would do it all for you ni okay so yeah that's what i knew i knew hdmx had some good stuff going on there there's two other projects that have been doing the view transition stuff exploring it um n has experimental support we beat them to stable taking that a win got them hdmx has had it for like a year of course because they were just like oh yeah we could do vi transitions that's because they're very very simple right they just don't have all the beautiful transitioning part you just have to write that but now the browser does so it will literally replace it and then let view transitions do the rest of the job for you and you get to keep all your local state in here so all your variables and everything still exist in the same state that's how i get conways game of life to work when i go to saved is it keeps this state because it hasn't changed anything it's just boosting you're boosted i'm boosted dog um yeah like that i think that's where hdmx and astro share actually some common dna where like we're incentivized to explore this because it's a solution to a problem versus like an implementation detail so yeah yeah boosting ast view transitions there there a lot of similarities there with the way that we persist state and persist elements and don't do a full page refresh in browsers that don't support like the full html uh yeah view transition just yet all right so help me on this one what do we do here with this beautiful little uh well yeah this whole thing right here we we you wanted middleware right yeah let's um let's see st problem and you didn't want to use sel but you wanted to use middleware to strip out all the extra stuff because it does send down some extra script tags and all that is that a development only thing or is that like a production thing as well it's gna do that in prod because this is kind of not how we designed astro it's not a major difference but like everything in the pages directory is a page so you want the full head the full dock type the body everything okay and what hdx says is no you want these like special partials that are just snippets and that's what we don't currently like natively support you don't have hyper media uh hyper media as application state driving lot of the blahos good stuff i don't i got some of those words as the engine of application state there you go yes is that the full book title no that's that's it's it's it's hados that's like it's uh it's acronym oh yeah oh i think you cut out that sounded like 20 words and i was just kind of like okay cool yeah yeah yeah it it is 20 words hyper media as the engine of st of application state oh that's what the for no i'm missing something hados hados hados okay what is hados hyperdia as the engine of application state that is why you are sending these little partials back it's because html describes where your application can change got it and your server contains the state of that change right you broke my brain i know absolutely broke it's a great say it a thousand times it is a great thing all right so how do i do middleware what's the middleware thing oh my god so funny um in source middleware um source middleware dots oh we don't even have a middleware one all right middle it's not a folder it's just a file middleware dots we don't even have that one right there's no middle we don't have it here we're going to create it for the f for the first time middleware is is it it's yeah there we go uh ts there we go all right and i'm just going to copy and paste whatever was in there right yeah i don't know if i like that prompt i might call it like uh partials i think prompt might have been something very specific he was building some sort of prompt system should shouldn't you just have all the different h oh yeah you'd have to you'd have to list all of your different hdmx routes there's some other cool stuff i mean i saw some people suggesting we do a partial do asro and then no matter where it lives that would be like the way to do it i do like that i think where we'll end up is actually in an partial you can just do like export cons partial equals true and it's a more declarative way in each partial to say i'm a partial versus like your magic partials go here and others st and having to manage that i' rather i'd rather i'd rather have the later now or the ladder now that you say that because if you do the ladder i can always do something like grep and then i can gp for that string or you can build in an astro like an astro function in your lsp to be like give me all partials and you can get it as like a quick fix list or something i don't know what vs code has um vs code probably just freezes or uses all your memory but whatever they have we have a quick fix list and that'd be better yeah yeah i i don't know i i'm just an aggressive find all refactor find all replace all yeah i like i like anything i can find all and add it to a list yeah hell yeah um this should be all we need i think now if you move count into a so move it into a partial subdirectory okay so i go pages partials rename uh rename count as uh partials partials and there we go right so now it's right there did i have so if you looked at that middleware snippet it's going to strip out everything like style scripts anything from that partti should be remov i'm updating that there we go all right so now if i do the exact same thing let's see do i have anything that i i think on i think i was doing some sort of h let's let's remove the select there we go we've removed the select so now we only get the response which is going to be just that how does that sound okay yeah let's uh we can check the output in the partials sl count oh good catch yeah right okay am i missing anything else i don't think i am let's go backwards uh there we go we have this thing so when i click this we could not important file oh yes yes yes yes yes yes yes uh that makes sense because we did this there we go i'm surprised to let it build oh right i think the component might be did the component get fixed let's see there we go so we got all that nice look at that and it is just updating it notice we have no extra text or anything oh very cool love that so check out the network response let's make sure that that's coming back network response is only just 121 with the dock type of hml nice and you could probably remove that dock type too i'd assume yeah snip it y here what's that middleware yep source yeah there it is you don't really have to care about that level of bites long as you don't exceed one mtu you you don't have anything to worry about what's a mtu uh minimum trans trans uh trans transition youit trans what's the thing called transmission there we go i knew it was trans i just couldn't get the rest of it it's how it's the it's the largest size any packet can be yes i have a very good friend that works on the networks at netflix and he said effectively that if you are within one packet it takes about one packet amount of time to send if you have two packets between two to 20 packets is about the same time to send so a singular packet is fast and snappy two packets is 20 packets oh jesus okay so usually 140000 btes how many bites do you have in in a packet 1400 approximately 1500 sounds we're talking about drugs how many bites you got like let me get let me get two packets two packets of the boo boosted stuff how many you got all right uh let's go like this uh i'll remove all of this and say what is it it's doc dude i i wouldn't even honestly know what this thing is you guys in your fangled html the first pack it's free that exactly first pack first pack it's free uh all right so do i just go like that uh two slashes i'm so bad at regex's because i don't ever do regx because they're like the devil i've gotten better but like i think co-pilot is like [ __ ] with me honestly like it gives me something like that can't be right you're messing with me for sure so we still get him so my guess is that uh this must get added because my guess is it gets added due to the fact that the uh the headers are coming down as text html oh true yeah you can't see that but it comes down as text html which means that this thing's probably getting an implicit it's a doc types because here's the preview it's just that where it's like yeah that would explain why jack never added that yep respon so mug guess cool there we go so what i want to do and maybe i mean anyone can do this but whoever gets their first wins um like we could turn this into we don't have to do it on stream by the way like but turning this into a package would let anyone just do like my middleware should be this package it can also inject htx on the p so that whole thing of like you having to forget oh [ __ ] there's no htx on the page yeah yeah there's just like some quity of life things here like you can use as htx today i want it to be like so streamlined so so one thing i would be u more cognizant of definitely that this thing probably has to be bigger which is a lot of like say delete operations or post operations can often post a 303 back with htm x and the reason why it does a 303 is that a 302 propels whatever verb you used so if you used a delete and you returned a 302 from the server it will then call the next url with a delete uh whereas if you do a 303 it will call the next url with a get it's always a get at the end and so they do a lot of things where like say you have a singular contact page and you want to delete it you press delete it calls delete to the server the server returns a 303 to go back to your main contact page your main contact page then gets fetched and everything gets done so you see it's deleted you get the message deleted redirecting boom you redirected it takes care remember hados yeah hyper media as the engine of application state it does all that for you in the idea of using just verbs and html okay but that thing about it like reusing the delete for that sounds crazy it is it's actually very useful so like imagine you uh you had a server in which is some sort of proxy for some sort of resource so you say slash contacts uh one two3 delete and it's like okay go over here for that contact so then you'd want to do a 302 because you want to delete it but if you want to just do a get afterwards you have to do a 303 this is one of those things that made so much sense in like the 90s that now like is not how my brain works i i that that makes total sense when you explain it that way react makes bra not how i've coded in like 20 years yeah i know you have a you have a react brain injury is what i like to refer to that as exactly exactly this is water man this is just the life i live who i am okay um okay this would have to get a lot more complicated if you wanted one to really truly do the hdmx style um for me when i see this my general response would be use the select tag until you can till astro could really do it because honestly i think there'd be a lot of complications when it comes to like 303s and other things going on that you'd have to really be thoughtful about or 302s cuz now you're assuming the intention and you're not letting the server do that for you uh can astro do 302s like can you add that kind of endpoint in i was going to say if you actually go back so the one thing i can show off really quickly because i don't know actually what's better based on how you've described hdmx to this point um if you go back to pages go back to count don't go into it though oh de too late turn that into an account. ts file okay uh rename this is our yeah this is our support for api endpoints so now instead of like defaulting to an html templated thing this is going to default to returning whatever you want so it can be json it can be so you can set the headers out or you can look at the more control okay okay so you accept the accept headers and you can say okay they're requesting json therefore i return json or if they're requesting html this must be a h uh you know a uh h htm x applications therefore our endpoint becomes an html producing application you can do all those things exactly okay all those things all that and more interesting okay yeah so the only reason why i'm not supporting your middleware is for the reasons i've said is it just needs to be more complex i think you should handle it through select endor end points yeah that makes sense or do what you said we're ever gna take responsibility for anything it needs to be rock solid yeah i'd rather you the hdmax developer own this until we can get there yeah okay this is super cool though i like it i'm very happy that astro is thinking about htx i really do i've been saying this a lot i want to get your opinion on this which is i have my my theory of why applications are so effing complicated it it doesn't really have a lot to do with javascript being just in general a bad language uh because every language just has a bunch of shitty parts to it right so there's no you can't say it's bad because of javascript i don't think that's the reason why i don't think it's bad because of legacy or being 20 years old c c++ all these languages have bad things but they you know they have a whole rich history of being improved or improved in the moment and people still write them today and you can still be successful in them so it can't be that so my general hypothesis is that in the web 1.0 days you had the server as the only source of state and you only got rendered out for fragments and that is it and so you could never alter or mutate state without uh you know enjoying a nice server refresh of the page so then when we started kind of you know when ajax hit the scene those xml http request objects hit the scene and whatever that one is for uh microsoft active request or something like that uh yeah yeah i i can't remember that's why i used that's why i used jquery uh you then have the server as the state the server then synthesizes its state as json then you take that json state and you resynthesize it back into what the server state was trying to tell you as html and we've built from this paradigm ever since trying to have two or trying to have two separate caches and cach is really hard so we have the server the source you have the javascript runtime as the first level of cach and then the html it produces as the second level of cash and so now you have this series of caches and it's just constantly trying to invalidate them based off the intention of what the server is telling you to do and htm x inverts that and just says there is no more shared middle ground there's no more middle earth caching the server is the cash html is the cash there is no third level of cash yeah get rid of that third level of cash and i think that's why it's so successful is because people use that and it just makes it so much easier not to foot gun yourself yeah i mean that's yeah that's something i will always believe in like there are so many good ideas that we left behind but not because they were bad ideas but just because some mental model changed where like didn't become the default thinking anymore that's very much astros like yeah like do more server rendering and htx being like yeah like do more ser stuff on the server in general y um that's all stuff i totally believe in can i tell you the worst my worst story about this yeah from that web one period of like i guess state's kind of owned everywhere we had a php app that would render comments on the server but we didn't want to have to wait for a full submission of the comment it took too long we wanted like really snappy ui and was just like kind of cool on the scenes so we ended up rebuilding the exact same template like pretty complicated comment flow in react to then rerender just when you click submit but in a great out state that then would get replaced by the server code at the end of the day we basically rebuilt a really complex flow in the site in two different languages they had to mirror each other exactly just for like that idea of like well how do you have a interactive ui that feels happ but has server rendering and client it was yeah we could have used something like this yeah no this is so this is perfectly it yeah in hmx if you wanted to do the exact same thing in htm x there's actually things called indicators and so you could literally load an indicator that is an image a throbber of that thing you wanted and it could just sit there and you know svg puls it we didn't have svgs and all this fancy technology back then i totally get why you did what you did and it could be the thing that looks like the card until the card comes in and so you get all that exact same just without yeah and that's it's like because we didn't have that we went fully spba world and it's like that is just like such an overreaction if that was the problem now yeah it's like i think sometimes a browser does have to catch up and give you new primitives and then simple tools i think that's always a push pull i think we as developers add complexity to solve problems and i think i see the browsers as like well if we can solve this really small little problem here it like collapses the whole house of cards that led you to where you are now yeah i think that's what we're seeing with stuff like view transitions htx i hope ast can be a part of that i am also glad though that you and i pretty much are on the same page that jquery started this all and caused us to write these really crazy applications with cash everywhere i mean jquery is actually anything so that's when i got started with web development so i'm actually i have a blind spot from the before times like i don't know what jak even saw for i just knew like browser bad jquery good and that's like all i ever learned so i don't even know that that web you have the same you you effectively just did what you did with jquery that's all jquery would do is you you just did it more by hand it was you know react gives you a templating language yeah and so it's built in that's what you got in those old days um i would say this is something that ryan carniato the creator of sjs talks about a lot his his mental model is more like who owns state the server and the client and i think he is like i see him really struggling with this because his whole thing is like he likes server components like he wants to build that for solid at the same time who owns the state the server owns a state but it also has to send that state to the client so the client can make changes but then the server component has to go render when there's an update so now you have to send the client like state back it's this wild i think his take is like it works but it's like wildly complex to basically say who owns a state like nobody is kind of the answer or like we share that responsibility yep y i'm on a team it is a very very complicated thing again that's why i i'll will always be a hados guy because i really think it solves that entire problem by going straight to monkey and there just is no more state like that the state is a ser because most 99.9% of all applications don't need that google docs you probably need it you want offline editing mode spreadsheets again you probably want that but that's like this many applications fall into the maps spreadsheet docs category netflix doesn't need react it doesn't it's just a bx interesting i would think think of netflix is falling into that no because the only thing you really need is that one thing to be completely different which is the video player that's it in other words conway's game of life you just need that one thing that runs outside of the htm x hados area and that's that one small thing everything else is just not that complicated it's your right now yeah that's the pitch for astro it's all server html throw hdmx in there and then the second you need that super complicated ui that doesn't have to be the full thing um there's your spa there's your island there's your react t yeah i'm on that team i'm on that team i'm glad you're driving it that's why i have huge affinity for you fred also you're just a nice guy but uh i'm glad that you're doing that you and aaron francis two nicest people in development i'm quite positive of this right now so hey thanks for showing us some astro that was sweet thank you thank you for having me on um product hunt i gotta show it go to product hunt if you haven't been there check it out um starlight is the thing we're launching today and yeah the team's worked super hard on that so any love you can share there would' be awesome awesome uh i'm sorry that i always i am i love promoting whatever i think is just the most fantastic during during whatever day right so you're always going to hear me getting way too passionate about things so thank you for letting me get totally into hdmx there for a second hell yeah no it's great i'm i'm a big fan all right well hey take care have a good day love you fred love you bye bye