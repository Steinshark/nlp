hello in this video we're going to be creating a simple camera shake i'd like to start by stepping through the seven parameters it will be using to control the shake first there's the angle which determines the initial direction of the shake then there's the strength which controls how far the shake can move the camera speed is then of course just how fast the camera moves during the shake and duration is how long the shaking lasts so with these current settings the shake looks like this it's a little bit bland at present so the next parameter noise percent allows us to introduce some random variation to the shake we then have the damping percent which controls how quickly the strength of the shake decreases over time the final parameter rotation percent determines how much the movement of the shake affects the camera's rotation so a quick overview of how we'll be implementing this we begin by moving the camera in a straight line based on the angle strength and speed parameters we can think of this path as defining the rad ius of a circle when the camera reaches the end of the path we need to choose a new point for it to move to we do this by first finding the point on the opposite side of the circle and then the noise percent parameter determines a range in which a new point can be randomly selected once we've chosen a point we can then imagine a smaller circle onto which we project our new point this point on the smaller circle is where we'll be moving the camera to next this process continues until the radi i of the circle is zero at which point the camera will have returned to its original location note that the rate at which the circle shrinks is determined by the damping percent parameter a value close to zero means that the circle shrinks at roughly a constant rate whereas a value close to one means that the circle will shrink very rapidly initially but slow down towards the end all right so in unity i've got this simple scene set up with some cubes scattered around and of course there's also the main camera object now we don't want our camera shake to interfere with the camera's main movement which is presumably following the player around so we are going to create a empty game object i'm going to call this the camera holder and let me just put that at the same position as the camera so that's 0 to -10 in my case and i will parent the main camera to the camera holder so now any camera follow script should be attached to the camera holder and our shake script will be attached to the main camera and uh everything will be done relative to the camera holders uh position and rotation let's go ahead and create a new cop script called camera shake we'll attach that to the main camera and we can then open that up now the first thing i want to do in here is create a subass called something like like settings or properties which will hold the seven parameters i was talking about earlier so public float angle public float strength and just going to paste the rest of these into safe time but it's speed duration noise percent damping percent and rotation percent and for these percent ones we can make this show up nicely in the inspector with a little slider by adding the range attribute between 0 and one so i'll copy that for these other two as well and of course for it to shop in the inspector we need to add the system. serializable attribute and we can now create a public properties object which i will call the test properties all right now the actual shaking is going to be done inside of a co-routine so you can make a ion numerator call this shake and this will take in a property object called properties and we can start by defining a float completion percent so that's a value between 0 and one starting of course at zero and another float move percent which is just how far the camera is between any two waypoints now we want a few more variables so one for our current angle and i just want to specify that this is going to be in radians so i'll add underscore radians this will be equal to properties do angle and we'll just multiply this by a conversion factor from degrees to radians then we also want a vector 3 for our previous waypoint just set that equal to vector 3.0 and a vector 3 for our current waypoint to will also set to vector 3.0 then the last variable we want for now is a float for the distance between the two way points i'll just call this the move distance which set to zero all right now we'll want a while loop i'll just say while true so this will loop forever and we can have a yield return null statement here so that it just waits for a frame between each execution of the while loop and in here we'll say completion percent gets increased by time. delta time divided by the duration of the shake which is stored in properties. duration then our move percent gets increased by time. delta time divided by the move distance multiplied by the camera's speed stored in properties. speed so the idea is that we want to maintain a constant speed so the further the camera has to travel the slower the move percent should increase and obviously the faster it travels the faster moved percentage increase now to actually move the camera to the current waypoint we can set transform. local position equal to vector 3. lp which of course is short for linear interpolation between the previous waypoint and the current waypoint using our our move percent all right now if the move percent is greater than or equal to one that means that we've reached the current waypoint and we want to figure out our next waypoint so let's say if move percent is greater than or equal to one then we'll want to first of all rotate our angle by'0degrees so quickly if you're not familiar with radians there are 2 pi radians in a circle so pi is'0degrees so we can say angle in radians plus equals math f. pi now as i described we'll also want to add a sort of noise angle based on our noise percent so above here let's actually create a float called noise angle and i want this to be equal to a random number between negative piun / 2 and positive piun / 2 so just somewhere inside of a semicircle circle so let's start with a random number between -1 and positive 1 you can do in a number of ways but i'll just use random. value which is a random number between 0 and one i'll subtract a half and multiply by two and then we can multiply by math f. pi / 2 and of course if you like these twos can cancel out then we will add our noise angle over here and we'll multiply it by our uh noise percent now we of course want to set our current waypoint based on this new angle we've calculated so we can say current waypoint is equal to a new vector 3 and for the x uh component that will be math f. cosine of our angle and the y component will be math f do sign of the angle then we also need to determine the radius of the circle so let's multiply this by properties do strength we'll then set the previous waypoint equal to our camera's current position so transform. local position and we'll calculate the distance between the current waypoint and the previous uh waypoint move distance equals vector 3. distance current waypoint previous waypoint finally we'll set the move percent back to zero so that it can start moving from the previous waypoint to the new current waypoint okay so we haven't yet implemented damping or the camera rotation but i'd quite like to test and see if everything that we've got so far is working correctly ly now one thing that we definitely need to resolve before we can do that is these three variables up here which have just been given default values of zero so in order to assign their starting values we really want to use these three lines over here uh but we don't just want to copy this and paste it in there for example because while it works it's just a bit of a gross solution because we're duplicating our code so what we'd prefer is for this if block to execute once at the start of the loop as well as whenever move percent is greater than or equal to one so what we can do is just add or completion percent is equal to zero and we'll move this up to the top of the while loop the one cat here is that since we're rotating our angle by pi we'll actually want to subtract pi up at the top here so we'll just minus math f. pi okay let's set this up so that we can test our shake so we'll have a public void start shake which takes in a properties object and then we're going to want to start co routine shake and pass in the properties now if the shake cod routine is already running when this method gets called to start a new shake then we'll want to stop the old shake first in order to be able to do that we're going to need to store ion numerator current shake co- routin so over here we'll say if the current shake co- routin is not equal to null then stop coutin current shake c routine and then we'll say that the current shake c routine is equal to shake with our given uh properties and then we will start our new current shaker routine all right so now just for the purposes of testing let's create a update method and we'll say if we get key down keycode dospace we will start a new shake using our test properties all right let's try this out first of all no errors so we can go into the main camera here and set up a few of these properties so i'll set the strength to one and the speed to five the duration shouldn't actually have any effect at the moment so let's just play this and press space bar and we'll shake from side to side forever let's try set the starting angle to 90degrees and then press space bar and we should see that that overrides the previous shake and we can also try increasing the noise percent and we should see this starts jumping around a little bit randomly all right let's head back to the script to finish off the remaining things so first of all damping as i mentioned earlier when the damping percent is equal to zero we want the radius of the shak circle to decrease fairly linearly like so but as ding percent approaches one the circle should shrink more rapidly there obviously a variety of equations we could use here but the one i've chosen is 1 - x the a all to the^ 3 where a is a value between 0.25 and 2 when it's equal to 0.25 we get this and when it's equal to 2 we get this okay so in our script we're now going to want a method returning a float called something like damping curve and we'll take in a float x which should be a value between 0 and one and a float dumping percent let's start by verifying or rather enforcing that x is between 0 and 1 by saying xal math f. clamp1 and passing an x then we can say float a is equal to math f lurp from 2 to .25 based on the damping percent and then we can say float b is equal to 1 minus math f. power so we'll be raising x to the power a and then we'll want to return our result b cubed so b * b * b as per the equation okay so then over here uh when we're calculating all of these values we can start off by saying damping factor is equal to damping curve using our completion percent as the x value and of course properties do damping percent for the second parameter and then over here where we're multiplying by properties do strength as our shake circle radius we can also multiply by the damping factor so let's save that and go into unity to try this out i'll set the duration of the shake now to 3 seconds and let's try this with a ding percent of zero so if i start the shake you can see the size of the shake decreases fairly linearly and if i set this to about 0.5 then it decreases much faster and at one it decreases uh down to zero almost immediately okay what i'd like to do now is add some rotation to the camera so we're going to need a quan target rotation which i'll set equal to quan do identity and quenan uh let's call this previous rotation which is also equal to quion do identity and then we'll give those actual values in here so or we can say target rotation is equal to quan do oiler which allows us to convert from a vector 3 to a quan we'll be using the current waypoint to determine the rotation so let's say new vector 3 and on the x-axis we want current waypoint doy since you need to rotate on the xaxis to look upwards and on the y- ais current waypoint do x we can then normalize that and then multiply this by properties do rotation percent multiplied by damping factor multiplied by a constant that we'll be creating in a moment called max angle all right then the previous rotation will just be equal to transform dot local rotation okay and over here just below where we're resetting the position we can say transform. local rotation is equal to cortan do slurp between the previous rotation and the target rotation based on the move percent now somewhere at the top of the class here let's just create a constant float max angle for the maximum amount that the camera can rotate and i'll set this to something fairly low like 10degrees all right now it would be very nice if this while loop didn't run forever and ever but actually stopped once the shake was finished now unfortunately we can't just write while completion percent is less than or equal to one even though that seems to make sense because when the completion percent reaches one the camera will still need to move back to to the original position in other words local position 0 0 0 so what we're instead going to do is say while the move distance is greater than zero because once move distance is zero that means that our current waypoint and our previous waypoint are at the same uh position which means the shake is finished but there's a problem move distance is equal to zero right at the beginning which means that this while loop won't even execute once so to fix that we're going to change this to a do while loop so we say do and then at the bottom here we say while move distance is greater than zero so it will always run this at least once and then it will only keep running it if move distance is greater than zero okay the last thing that i'd like to do is just move all of this test code to a another class so in unity i'm going to create a new cop script i'll just call this the shake test open that up so i want to copy this or rather cut this update method to there and also cut this test properties and then let's just clean this up a little bit okay paste that in there uh of course we can't just refer directly to properties we have to say camera shake. properties and start shake doesn't exist in this class so we'll have to get a reference to the camera shake uh just for now let's say find object of type camera shake do start shake passing in the test properties you might want to make camera shake a singleton or just store a reference to this somewhere but this will be fine for here one thing i should actually quickly do is just go down to the properties class and press command i to create a constructor i'll just select all of these uh different variables here and press enter to generate that so now from our shake test if we didn't want to expose this in the inspector we could also say new camera shake. properties and pass in our values like so but for now i'll just be passing in the test properties and we can go into unity and test this out so i'll just drag the shake test onto my scene object and let's quickly set this up say 3 five 7 some noise a bit of dumping and a little bit of rotation so we can press play and see how this looks all right not too bad i'll be ending this here and bidding you farewell