hi everyone in this final episode we need to add the ability to delete points by shift left clicking on them will also to create a custom inspector to show all of the shapes and provide an easy way to select and delete them and finally willian to get the mesh display working for our shapes okay so to start with let's create a method called delete point under mouse and this is going to get the selected shape and it's going to say selection shape drop points dot remove at and the remove index will be selection info dot point index now that we've deleted the point we'll want to make sure that selection info touch point is selected is false and selection info dot mouse is over point is also false and then we can request a repaint and we'll also want to set this up with the undo functionality so undo dot record object passing in the shape crater and a name for the action which i'll just make delete point okay i want to call this delete point under mouse method when the user shift left clicks on a point so let's come down to the handle shift left mouse down method and i'm going to say if the mouse is over a point then we want to delete the point under the mouse but we're first going to want to actually make sure that the shape under the mouse is selected so i'll say select shape under mouse and if the mouse is just over empty space then we'll create a new shape and create a new point so let's save that go into your tee and you want to my game object here i can try shift left clicking to delete some of these points and let me try this on a greyed out object so that all seems to be working as expected so next up let's make a display in the inspector for all of the shapes so going into the shape editor script let us up at the top here create an override for the on inspector gui method and i want a for loop to loop through shape create a dot shapes count and for each of the shapes i want to draw a label so i'll say gui layout don't label and it will just say shape and then the number of the shape so i plus one all right i then also wanted a button so that we can press on it to select the shape so i'll say if gui layout dot button and i'll call the button select and then we can have our selection code we'll simply set selection info dot selected shape index equal to i and then let's have another button gui layout dot button call this one delete and here we can't delete the shape immediately because that will cause havoc with our for loop so let's rather outside of the loop create an int called shape delete index set that equal to negative one and if we press the delete button then i'll set the shape delete index equal to i outside of the loop we can then say if the shape delete index is not equal to negative 1 then we can say shape crater and dot shapes dot remove at and will remove at the shape delete index now we want to be sure that when we delete a shape our selected shape index it doesn't go out of bounds so let's just say a selection info dot selected shape index is equal to math f dot clamp so the value we want to clamp is the selected shape index the minimum value it can have zero and the max value it can have is a shape crater and dark shapes dot count minus one let's also then make it so that we can undo the deletion of a shape so undo record object shape crater and i'll colas delete shape okay let's save this and you enter unity and we should see our shapes list popping up here for a lot more shapes than i expected it seems like i must have accidentally created a bunch of empty shapes so let me quickly right-click and just reset the shape crater script to clear all of that and i'll just create three shapes here quickly to experiment with so if i press select on shape two for example you can see that nothing actually changes in the scene until i bring the mouse over the scene view which forces it to repaint and the same will probably go for the deleting as you can see so in the script let's at the bottom here say if gooey dot changed which will be true if we interact with any of the elements in the inspector so for example if we click on any of these buttons then i'm going to say needs repaint is true and i'm going to force the scene view to repaint by saying scene view dot repaint all alright so if we save this now go back into unity then we should be able to select these points and also delete them and come on said it should bring us back now i'm noticing that when i undo it's not selecting the last shape as we set it up to do in the previous episode and i think the reason for this if we go down to the undo or redo method here is that the selected shape index can also be a negative one so let's just say oh selection info shape index is equal to negative one then we want to set it to the last element there okay coming back up to the on inspector gui method let's make this a little bit more compact by just surrounding this in a call to gui layout dot begin horizontal and gui layout and dot end horizontal all right so if i save that go into unity should see that this packs each of these onto a single line i think it would also be nice if the select button of the shape that is currently selected would be grayed out so let's quickly just before we draw the select button say gui dot enabled is true only if i is not equal to the selected shape index and then after we draw the button let's just make sure that we don't enable to get set back to true all right so if we have a look at this quickly shape one is now grayed out on the select button and you can see how that works if we select the other shapes okay when we have lots of shapes it might be nice to be able to hide the shapes list if we don't want it getting in our way so let's quickly go into the shape crater script and here i'm going to create a public blue called show shapes list and i'm going to make this hidden in the inspector with the heightened inspector attribute and of course the reason we're making this variable in the shape crater script rather than in the shape editor is just because these variables are serialized so i can save their value between script recompiles or loading the project so that's obviously important for a toggle because we don't want it forgetting its value each time we make a change to a script or reload the scene or whatever so what we'll do just before calling the for loop to drawl of the buttons is say shape crater dot show shapes list is equal to editor gui layout dot a foldout and we pass in the current value of shape creator dot shapes list and then we can give a name to the fold-out so i'll just call this show shapes list okay and then only if shape crater show shapes list is true will we draw any of the stuff okay so if i save that given to unity we should see this surrounded in a little fold-out so we can show or hide that as we please all right now one minor annoyance is this little transform gizmo can get in the way a little bit so let's hide that by going into the shape editor into the on enable method we can just say tools dot hidden is true and then i'm disabled we'll just set that back to false so tools hidden equals false so now we should see that disappear and then if we go into another object then the transform gizmo will come back okay now the last thing that i want to set up for the series is getting a mesh drawn in full of these shapes so let me quickly rename this object to shape creator and then we'll create a new empty game object called shape mesh and just reset that transform and this is going to have a mesh filter and a mesh renderer component and i'm going to want a material for that mesh renderer i said any quickly create new material let's call this the mesh material and maybe make this just an unlit gray something like that apply that there and then in the shape crater script we're going to want a reference to the mesh renderer so i'll just call this mesh renderer and then also have a public void update mesh display all right and we'll provide the implementation for that in a moment but for now i want to go into the shape editor and in the draw method say just down here at the bottom i'll have if needs repaint and then a shape creator dot update mesh display all right now this needs repaint a variable name is actually a little bit misleading and because whenever the scene view repaints itself we need to run this draw code otherwise just nothing will be drawn to the scene and that has to happen regardless of whether or not needs repaint is true so what this needs repaint actually means is has the shape changed since the last repaint call so i'm going to rename it to shape changed since last repaint and now because we want the shape crater to update the mesh display immediately when the object is first selected in on enable will say shape changed since last repaint is true all right let's save that and you're into unity and wait for the slow mesh renderer to pop up here and we can drag our shape mesh objects in there now to actually implement this update a mesh display method we're going to need a couple of scripts which as i mentioned in the first episode i'll be providing to handle all of the mesh triangulation so you can download those now from the link in the description of this video i'm just going to drag them into my project here it's this geometry folder and here we've got a bunch of scripts but i just want to draw your attention to the shape script if i open this up you can see that this is identical to the shape class that we created in the shape creator so i'm actually going to now delete this from here and let this one take over and you can also see that all of the geometry stuff is in this namespace sebastien dot geometry so up at the top of the class we're going to add using sebastiano geometry and that will need to apply for the shape editor as well so i'll come up here using geometry okay then in update mesh display we just need to create a composite shape so i'll call this comp sheep is equal to a new composite shape passing in our shapes list and then we can say mesh renderer dot mesh i'm just just realizing it's the mesh filter of course that holds the mesh let me change this quickly to mesh filter and rename this mesh filter here we say the mesh filter and dot mesh is equal to composite shape dot get mesh okay so we can save that go into unity will of course need to now apply the mesh filter here so we can see the scene view going haywire that all right but just clear those errors now and here we can see a mesh being drawn in for all of these shapes and hopefully if i create a shape inside of another shape you should see that it actually carves a hole out of that so let me just delete these shapes here quickly and just experiment with this a bit so i made you create one big shape here and if you want to see the triangulations by the way just as a matter of curiosity you can turn on shaded wireframe the triangulation is being done with an algorithm called a clipping which is a fairly slow algorithm and my implementation of it is probably not very optimal either but it should be totally fine for the purposes of this tool at least now just to talk in terms of what you can and can't do you can have multiple nested shapes and holes like so the only thing you can't really do is have polygons which intersect so if i make a self intersection here i'll see it just simply won't draw it and also if you have a overlapping hole like so it will just not draw one of the holes one small bug that i've discovered is that sometimes when i do an undo the mesh doesn't always update immediately so what i can do is just come down to the on undo or redo method and just make sure that we say that the shape has changed since the last repaint all right i think the very last thing that i want to do in this series is just add a little help box at the top of the shape crater here just explaining the commands so we can go up to the top of the shape editor into the on inspector gui method and here let's make a string called help message and i'll just say left click to add points and then on a new line shift left click on point to delete a new line shift left click on empty space to create a new shape all right i think that basically covers the important stuff and then we can just say editor gui layout and dot help box pass in our help message and then we want you to supply a message type to tell it how to display it and we just want it to be a info message all right so if we save this go into unity we should see a little help box popping up right there cool so that is everything for this series i hope you have enjoyed and until next time cheers