hi everyone in this episode we're going to look at generating a falloff map which we can use if we want to ensure that a land mass is entirely surrounded by water so for example we have a height map such as this one on which our terrain is based and then if we create this falloff map which is just a range of values going from zero at the center to one around the edges we can subtract the falloff map from the height map to result in a terrain such as this one all right so in unity let's create a cop script and i'll call this something like falloff generator can open that up and this is going to be a static class so it won't inherit from monor behavor and it's just going to have a public static method returning a 2d float array for our falloff map you can just call this generate falloff map all right and can maybe just take an an integer for the size of the map we want to generate and so we can start off by creating the map with uh dimensions of the size variable we've been given so then we're going to want to populate the map with values so we'll need to create two little four loops to loop through it so just i equal to z i less than the size i ++ and the second one 4 in jal 0 j less than size j++ so if we imagine i and j is being the sort of coordinates of a point inside of our square map i want to now take those coordinates and make them in the range netive one to 1 so let's say float x is equal to i ided by the size and we'll probably want to cast size to a float otherwise it's going to just round this down to zero and that will give us a value from 0 to 1 so to transform that then into a range of- 1 to 1 we can just multiply by two and subtract one let's do the same thing for y so this will be equal to j / size multiplied by 2 - one all right and then all we want to do to get the value to use for our map is to find out which one x or y is closest to the edge of the square so we can simply say this is equal to math f. max i want to find out which one's closer to one so we'll just say absolute value of x and absolute value of y all right then we can just say map with an index of i by j is equal to that value we've just calculated and then at the end of all of this we can just return our map all right so that's straightforward enough it would be nicer if we could visualize what we've just done so let's head over to the map generator and we've got this draw mode enum so if we just add a another option on here for the falloff map then in the draw map and editor uh method that we have going here we can say else if draw mode is equal to draw mode. falloff map then let's say display. draw texture and we'll use our text generator to generate a texture from a height map and we can pass in falloff generator do generate falloff map and pass in the map chunk size variable all right how many parentheses do i need is it just the two i think it's just the two all right so let's save that go into unity oh uh maybe it's three yep let's uh just unhide this plane and going to change the draw mode here to falloff map and you can see we've got a nice little fallof map going from black at the center and then fading into white all around the edges okay so now to apply this fallof map let's head back to the map generator and someone here let's perhaps make a public pool so that we can choose whether or not we want to apply the fall of map and let's just create a 2d float array to store the falloff map we can just generate it once in the start method so let's just say void let's actually make that the awake method and we can say fallof map is equal to falloff generator generate falloff map and pass in the map chunk size okay and then we're going to go down here to the generate map data method and while we're looping through the noise map that uh we have over here we can say if we're using the falloff map then the noise map value at this point x comma y is going to be equal to noise map x by y and from that we're going to subtract the value at the same point of our fallof map and we're going to want to clamp that between 0 and one so let's just say mathf do clamp 01 and pass that in all right so save go into unity and let's change our draw mode to color map all right um i'm just going to increase the noise scale so we've got this little map here and somewhere there should be this bull use falloff let's set that to true uh okay fair enough we're running into the problem that since we haven't started the game the falloff map isn't actually being created uh since of course the awake method won't run so let's also add the line to the un validate method we can say falloff map is equal to falloff generator do generate falloff map map chunk size okay should work this time let's just uh clear this error message and hit generate and we now have this cute little island in the midst of a vast expansive sea so obviously our falloff map is a little bit too strong at the moment uh we really want more of it to be black and then for it only fade into white uh much closer to the edges so what we want is an equation for a curve that will allow us to play with these values let's consider the function f ofx is equal to x to the^ a divided by x ^ a + 1 - x to the^ a if i just add a slider for a and make this in the range one to say 10 we get this very nice little curve going from 0 to one and we can imagine that where y is zero this is the sort of region of our map that is completely black and then this curve represents the transision to white and where y is equal to 1 then it's completely white we can also get some added control over our graph by multiplying 1 - x by a new variable b so let me change this to b minus bx and if we just add this in make it in the range of say 1 to 10 you can see that increasing b just uh shifts this along the x-axis which just allows us to uh control this region that is uh completely black so these values seem to work pretty well aal 3 bal 2.2 so let's head over to mon develop and over in the falloff generator just going to create a static method returning a float let's call this evaluate for want of a better name can take in a float value so we can write in our float value a so that was three and b we chose a value of 2.2 we just need to write out our function so we're going to want to use math f. power to raise value to the power a and we'll divide that by mathf do power again value to the a plus b minus b * value once again this is all raised to the^ a so ma f.p to the a all right so this is of course a little bit slow with all of these uh power operations but the falloff map is only being generated once at the start of the game so it's not a problem at all uh let's just go over here where we're setting the map value and we'll just run the value through this through this evaluate method just like so so just wait for that to compile and then generate all right so that looks much better now uh let's try creating our color map okay so that's looking very nice we can see this within without the falloff map uh let's change our draw mode to mesh and if i just hide the plane and enable our mesh preview object instead this is currently looking very very flat so i'm just going to fiddle with some settings increase this mesh height multiplier a bit and uh just change the regions maybe bring the sand uh down a little bit and um maybe do the same for the grass all right that's looking pretty nice i'll just bring the mountains down as well yeah just something like that that looks pretty cool we can just change off seed run through a couple of iterations it's all looking fairly nice all right so that's everything for this episode don't forget that you can support these videos on patreon if you'd like and i will see you in the next episode until then cheers