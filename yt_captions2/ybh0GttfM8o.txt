hello and welcome i'm james murphy and today 
we're going to be testing to see how fast is   python's built-in sort well i've already got 
the code here let's just uncomment it you see   i make a list i shuffle it up and then i time 
how long it takes to sort it and print it out   so let's see how long it takes... well there you 
go 207 microseconds end of the video right? well   no. obviously there are a ton of things wrong 
with the way that i tried to profile this.   for one i'm recording the video at 
the same time that i ran the test   and that's definitely going to affect the speed 
if i want to measure the performance of sort in   a more reliable way, better than this quick 
and dirty implementation, then i'm going to   have to put a little bit more thought into it. 
so for starters i've listed out here some of   the common things that affect the performance 
of a sort these first four are obvious things,   the performance can also depend on less obvious 
things like the order that you run the tests in.   this is a very common trap that people fall into 
if you're not familiar with performance testing   consider this case for example. i have two 
functions function and function 2 and i wanna see   which one is faster so i write the most obvious 
thing i just profile them one at a time i run it   see how much time it took and then i run 
the second one and see how much time it took   well let's do it so in this case we can see 671 
versus 417 so it looks like function 2 is better   right well just to be sure let's run it again 
okay this time it was about 500 versus 300 so the   numbers were a little bit different but it still 
definitely looks like the second one is better   okay so what are these two functions well the 
first one i was just converting a range of 10   000 integers to a list and the second function 
was... oh well it's exactly the same function so   you can see that it's not function one or function 
two that's slower it's whichever one ran first is   the slower one and in addition to all these things 
of course it matters what else is running on your   machine at the same time and all kinds of wild 
things can affect the performance. that's why   performance testing is actually a very very subtle 
and tricky field what i'm going to show you here   today of course is only going to be applicable 
for my computer my operating system my version   of python and everything else that's specific 
to just my machine but the source code is on the   github page so if you want to see how fast your 
sort is then feel free to run the code yourself.   okay so let's get started so the first thing 
that i'm going to define is a sorting test   case this specifies everything that you need 
to run a single test for a single size one time   then you can run the test as many times as you 
want to get better data about your test case.   the size here is meant to represent the size of 
the list that you're going to be sorting. the seed   allows me to ensure that i have a reproducible 
test case every time. this data maker is another   class that we're defining essentially its job 
is to take in the size and seed and give you   some data so part of a test case is you need to 
generate some data and then sort it so the data   maker tells you how to generate the data and then 
the sort keyword arguments tell you what arguments   you pass to the sort. finally this field of 
times is where we store the results of our   runs of the test so let's take a look at this 
data maker class well in actuality there's   not much in data maker it is an abstract base 
class it's essentially defining an interface.   all i'm saying is that anything that claims 
to be a data maker needs to have a make method   it needs to take in the size and the seed and 
produce a list of data that we're going to sort.   the compatible keys and compatible sort keyword 
arguments functions here are not really important   at this stage they're essentially just saying 
for this type of data maker what kind of things   can you call the sort function with so what is an 
example of a data maker? well the simplest thing   is how about random integers so you can see an 
implementation of a data maker is very simple all   i do is specify this make function i use the numpy 
seed function to see the numpy random generator   and then i use numpy random to generate random 
integers between you know some low and high of   the given size and then i convert that to a list 
so this would be your typical most common sorting   case you're just sorting integers for this data 
maker it's a sorted uniform maker meaning i start   by getting uniform ints and then i sort them so 
this is going to be useful for testing how long   does sort take on data that's already sorted, and 
then you could have something like nearly sorted   which is i start out with something sorted and 
then make 10 random swaps in it, does that affect   things? i don't know we'll find out. the rest of 
these are just slight variations on the same idea   with different types or different you know 
extra parameters so uniformly distributed   floats between zero and one same thing as 
the previous but sorting them what if i   generate using a gaussian distribution or normal 
distribution instead of a uniform distribution   this maker looks at the case where there aren't 
that many choices of what the answer could be   so you could see my low here is 0 and the high of 
32 so there's only 33 choices of possible answer   and then these two just make random strings or 
sorted random strings finally for data makers   i've defined a class here two ints and a string 
this is meant as a stand-in in your code you have   defined some classes and for whatever reason 
you don't want them to be just you know a   tuple or something it's a real class pretend 
that it has extra methods and it does things   and it's only data members are x y and s so 
how long does it take to sort a class that has   a you know built in less than operator then this 
maker just makes random int random randomint and   then random strings and then plops them into the 
two ints and a string class and returns a list of   those so this one is the same as the previous one 
except instead of storing x y and s in this class   two instead of string we're going to store it just 
in a tuple and now we're back down to the sorting   test case so you can see now what this is we have 
our size, seed, data maker so this is going to be   something like our uniform int maker which is 
going to tell us okay given this size and seed   go ahead and make me some data then what does the 
run do? well it just times how long does it take   to sort so it does the timing and then appends 
the time to the end of the times list the next   function i want to look at is this make all test 
cases basically it takes in a list of sizes seeds   and data makers that you want to test and then 
it creates all the test cases and then puts them   in a big list of test cases. once i have my big 
list of test cases i pass it to this function run   tests n times which actually does something very 
important. so in order to counteract the problem   that we saw at the beginning where the order that 
we run the tests in affects the answer to the you   know performance test in order to counteract 
that we're actually going to shuffle our tests   so we're going to shuffle them and then run all 
of them and then shuffle them and then run all of   them and so on and so forth this many times once 
i run all my tests then i'm going to convert them   to a pandas data frame for easy processing and 
plotting and then i will make a plot out of it so   let's see how it's all put together in main first 
off we have this recompute results if this is true   that means you want to actually run all the tests 
and once you run the test it's actually going to   save it to a file save the results to a file so 
that if you just want to show the plot again and   not rerun all the tests again you can just set 
this to false and then rerun it this parameter   just lets you choose whether or not you also 
want to show the reverse sorts in the same plot   then here are the important things so what sizes 
are we going to be testing well range 1024 so the   numbers zero to 1023 and what seeds am i using 
well zero through nine and then finally trials   is the number of times that i'm going to run 
every single test case so same seed same size   i'm going to run every single one 20 times then 
here i have my list of data makers and you can   see i just make an instance of each of those 
maker classes i'm just going to test everything so you can see if we want to 
recompute the results then we   make all the test cases run them end 
times convert them to a data frame   and then pickle them to a file if we don't want 
to recompute things then we hit this else and   just read the existing file and then filter out 
the data makers that we're not interested in   so of course i can't run this code while i'm 
recording so i'm going to go ahead and do that   offline and then show you the results that i got 
which are then going to be saved into this file. the first thing that i notice is that there are 
definitely clumps of twos so you can see for each   of these lines there's essentially two colors and 
that's because the reverse sort and the forward   sword are taking essentially the same time okay so 
let's comment out these and just look at the ints   so the first thing that i notice is 
what are these down at the very bottom   so if i click on these you can see that these 
sorted ones are the ones down at the bottom   so python is definitely doing something that's a 
lot faster for already sorted arrays i also notice   that the reverse sort is always slightly above the 
normal sort that kind of makes sense because to   do a reverse sort you just reverse sort and then 
reverse or that's how python does it anyway okay   let's get rid of the sorted ones and the reversed 
ones so the difference between these three curves   is essentially due to the distribution so this 
pink one is the uniform the blue one is the one   that was uniform but there were only a few choices 
so the blue one had a lot of overlaps and then the   green one was nearly sorted so it wasn't as fast 
as the ones that were already sorted but it does   seem to be quite a bit faster than the ones that 
aren't sorted so here are the floats and again we   see that the reverse ones are pretty similar to 
the non-reversed ones so let me just hide those   and again we see that the already sorted 
one is the fastest one by a large margin   and then the difference between these two is 
whether it was a uniformly distributed float   or a normally distributed gaussian distribution 
so we can see that whether it's uniform or normal   makes essentially no difference for floats 
let's move on to strings once again the   sorted ones are much faster and reverse 
sorting a sorted collection of strings   is doing significantly worse than the sorted 
version but significantly better than just random   however just for random strings reverse sorting 
is just about the same as normal sorting   all right let's finally go to two ints and a 
string and we see something very surprising   for this one well first let me note unsurprisingly 
sorting this struct took quite a bit longer than   sorting just an integer but the surprising thing 
is here look at the difference between sorting   a class versus sorting a tuple that contains the 
same information as the class. the reverse sorting   is essentially the same as the forward sorting 
now we just see the difference this blue line   is trying to sort a list of elements of 
a class and the green line is sorting   the same exact elements but just stored 
in a tuple that's a huge difference.   yeah so this is like 1/10 the time scale so 
that's an interesting find all. right let me   just put the picture back up where i'm not going 
to show any of the reverse plots and i'm not going   to show any of the sorted things just so we can 
get one final glimpse at the picture of how long   it takes to sort. so this is kind of the final 
picture that you can take away from this process   but i just want to reiterate some of the lessons 
that we've learned through exploring this data.   so the final answer to the question how fast 
is python's built in sort is it depends. it   depends on how much you're sorting what type 
of data what the parameters of the sort are   what's the distribution of the data and all 
kinds of different other things completely   unrelated to the data so there's no real one 
answer of course the real point of this video   is that if you want to measure performance and 
you want a reliable answer you need to test   it yourself on your own hardware in a production 
setting where you're going to be using it you need   to control as many of these different variables 
as you can and make them as realistic as possible   so sorry if the title was clickbait. as always 
thanks for watching don't forget if you liked the   video leave a like and if you especially liked the 
video consider subscribing see you in the next one