this video was brought to you by ind dentle io learning python made simple how's it going everyone in today's video we're going to be covering three bad python habits that you should get rid of so to get started let's take a look at this snippet of code here we have a total of type float which starts at zero and then i created a while true loop so that we can have an infinite loop for our program and on each iteration i ask the user user for some input which is going to end up being some sort of number which we can add to this total so practically the user can enter any kind of number and it will be added to the total endlessly but of course things can go wrong when you try to convert user input to a float so i wrapped that in a tr and accept block and here we use the accept and we just print that something goes wrong if the user enters something that doesn't make sense then we print the current total so right now if we were to run that we can add any number we can say 10 we we can add 5.5 we can add 2033 and our program will work as expected if we enter abc what we're going to get as an output is something went wrong and this is terrible i never recommend you put something so generic as something went wrong or that you ever ed the bare accept block this is the laziest approach to creating a program if i ever saw this in a script i would think that someone paid you maybe $1 to generate this script i would not take the script seriously this is something i'd probably do if i was drunk and tired even accepting the exception as e is a much better approach than just accepting the exception although even this is an incredibly lazy approach but at least with this approach you can use the error message and you can log it somewhere so that you can fix it later so now the next time we run this we can do something such as adding hello and this time we will get a value error back or at least the representation of the error message but now that we have the information of something that can potentially go wrong as a professional developer the best thing to do is to be specific about how to handle that error so instead of just accepting everything as an error we're going to accept the value error as an error we're being specific about what happens in that scenario if your drunk user enters some text instead of a number into their calculator we're going to want to tell them to please enter a valid number so print please enter a valid number and for everything else we're just going to print the representation of course i don't recommend you show this information to your users but it would be nice to get that information logged somewhere so that you can fix it later but now if we were to run this we can try adding 10 and maybe 333 and we're also going to add bob but that's going to raise a value error and as a result is going to give us an appropriate message moving on to bad habit number two and this time we're going to be talking about mutable defaults but first of all i'm going to import from typing the iterable type and the type th type because we're going to be using some generics then i'm going to create a generic called t so that i can create my next function and this function is going to be called append to list and what we're going to take are some elements which are going to be of type iterable and that can be of any type it's going to be a generic type and we also want a target list and i'm going to call this target which is going to be of type list of t and we're going to give this a mutable default and then this will return a list of that generic type and all we're saying with this is that if we insert a list of integer we're going to get a list of integer out t is whatever type of element we insert to that list and that's much more specific than inserting list of any because any doesn't really say anything about the data type besides that it can be literally anything in the universe so we want to be more specific by saying whatever we put in is what we want to get out anyway what we're going to do in here is type in target. extend and we're going to extend that list with the elements and then we're going to return that target and just like that we created a function that can add any amount of elements to a target list if the target list doesn't exist it's going to create a new list so right now let's try to print the result of this appen to list and what we want to do is insert an interval of one and two and we're not going to provide a target list here because we wanted to use the default right now if we were to run this what we would get back is a new list with the values of one and two but what if we want to create a new list and this time we want to create it with the values of three and four well what you're going to notice is that it's also going to remember the values from the previous operation and we do not not want this because it looks like some very buggy behavior each time we use this function without providing a default we're going to want it to create a new list we don't want it to reference the old list but something you'll notice is that if you were to actually pass in your own list and we're going to insert the values of 5 and six what you're going to notice as soon as we enter our own list is that the buggy behavior is going to go away and this is the wrong location this should be inside the appental list function but check it out once we provide our own default the list works as expected but still if we were ever to use this function without providing a default and this time we will use a and b it will always reference the list or the default that it created in the function signature and again this is not what we want this is unintended behavior and that's why code editors will warn you if you pass in a mutable default so now you might be asking well cool you want me but how do we fix this well the solution is ultra simple instead of passing in an empty mutable type what you need to do is pass in none for the default and then you have to do a simple check each time you run this function and that is checking if the target is none then you will create that target list so the target is going to equal an empty list and this ensures that we create it on the spot if we do not provide a default which means the next time we run our snippet of code it's going to run as intended if we do not provide a default it's going to create a new list and insert those elements and as you can see this time each list is going to be its own list and this applies to all mple types so if you're creating a set or a dictionary just make sure to check if it is not and then create it on the spot up next we have the final bad habit of the day and i see a lot of silly people doing this on the internet for i don't know what reason but to show you the next bad habit i'm going to have to import the get size of function and this function just returns the size of any object in the form of bytes anyway for this example we're going to create something called my range which will be of type range and that's going to equal a range of 1 million and i'm going to be using this exponential power to make it easier on myself i mean yes you can also do this in scientific notation and then convert this to an integer that also works but range takes an integer so i'm just going to be using the power of six what we did here is create an iterator or a generator like object and if you were to print my range you would notice that you would get an object back a range object back you you can also print type of my range and it's going to be of type range and the nice thing about these objects is that they are incredibly memory efficient so if we type in get size of my range and then we type in bytes you'll see that even with 1 million numbers this is only 48 bytes it doesn't occupy that much memory because it's incredibly efficient it only gives us the numbers or the information back from that object as we request it now what i see a lot of silly people on the internet do is convert these objects directly to a list or to a tuple or even to a set for absolutely no reason so let's copy this line of code paste it right under and this time we're just going to call it my list and this will be a list of type integer and we're going to convert this to a list directly and i guess we also need to update this to my list and this one over here to my list as well but now watch what happens when we run this in the console you'll notice that the range will be 48 bytes while the list is going to be a whopping 8 million bytes and that's a lot of information to load into memory for no reason and there's absolutely no reason to do that because you don't need to convert it to a list or to a tuple if you want to iterate through it for example if you were to type in for i in my range that would work exactly the same way as if you were to do it with the list each time it iterates through the range it grabs one value from that iterator so that you can use it and i'm not saying that ranges are faster than lists i'm just saying that they are much more memory efficient because they do not load all the data directly into memory anyway all i wanted to say is that anytime you get a generator back or an iterator back such as a range or maybe a map object or even a filter object do not convert it immediately to a list unless you absolutely have to because these are extremely memory efficient and by converting it to a data type such as a list or a tupal you're loading all the information into memory for no reason but yeah those were the three bad habits that i see a lot of beginners do but i'd love to hear what kind of bad habits you see other people make on the internet or even at your workplace in the comment section down below otherwise with all that being said as always thanks for watching and i'll see you in the next video