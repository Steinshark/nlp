all right how slow is javascript i've gotten a lot of flack for using javascript for a lot of these projects and possibly rightly so historically it's been a super slow language not one that you'd associate with game development and i'm actually not sure how fast it is i'm not actually a javascript programmer i just kind of play one of these videos so i'm kind of curious what we find here a very brief history of javascript apparently life for javascript started out around 1993 a programmer for an escape name i feel like the history of javascript has been told so many times at this point it might be the most told story in the programming world and brendan i crapped it out over the course of 10 days which is pretty amazing given its popularity today we'll fast forward a bit bunch of crap happened over the years javascript got standardized through ecmo international none of this is particularly and then javascript got stabbed in the buns by microsoft why do i know this voice i have no idea yeah microsoft uh really hurt a lot of ecmascript they were really trying to make jscript or whatever it was called the thing what's ecma irrelevant to us so let's just kind of skim through here so in 2006 google hired this guy lars back to build a new javascript engine that would go on to become v8 and this is where things got interesting okay this is where javascript changed from being this painfully slow interpreted language to one that had compilation i like it here's a seemingly endless stream of clever optimizations has trickled out from the va team dramatically improving performance year after year i do think that that is just not said enough v8 is truly the reason why javascript is awesome v8 made what a crappy language the va team was so talented they took one of the worst languages of all time and made it pretty fast like they did a pretty good job like no one could be upset about that i should really cover that mic arm shouldn't i like they did that they did that imagine how hard that had to be uh you sound like you're friends with someone who worked on the va team in 2019 at the international javascript conference there was a talk called speed speed javascript versus c plus versus webassembly by one of google's engineers oh i saw that talking because they had some benchmarks where they showed roughly how close javascript and c plus plus was for the same algorithm now i don't have the source they used but i i never liked this comparison because it's so single-minded uh or single like i hate single implementation you know like if you watch any of my main channel youtube stuff you always see how i talk about like i've done a lot of performance things and when it comes to like building something actually even if that actually is small the difference between javascript and something else is is just you know it's just massive it's just massive they got roughly a 2x difference which is pretty good and we'll use that as a baseline for our own comparisons let's write some code by the way quick reminder to subscribe and if you want to support me making future videos most games i've ever worked on don't involve millions of string manipulations and stuff it tends to be mostly math and manipulation of data structures so we'll stick to that side of things first up i'll start with the soup he just hit us with so much math that i don't even know what happened i just looked at the math saw some integrals realize i'm not very good at integrals you know what i mean i'm just not that good at integrals i thought i was good at integrals i'm not good at integrals super basic loop gotta have a basic loop let's just loop over a bunch of crap and sum it up for something no reason other than it's easy you can see the c plus plus code is pretty simple just a for loop which code here is virtually identical just a simple loop send them up wrap the loop in performance.now calls it runs in about 22 milliseconds or so on the first run and then 17 milliseconds and later runs i'm guessing all right so the thing i don't like about about this type of optimization that that he's speaking about or just even this comparison in general is that one of the biggest problems here is that there is no like interaction with what makes javascript bad you know what i mean it's like such a tight experience that javascript's big part that it falls apart on is not this like yeah the jits really fast like it did a really good job but where things aren't good is when you start allocating and deallocating notice that we're really just not doing much for allocations or de-allocations uh because it's a small number so they called us me right so that's stored in a single pointer where the first bit is a zero i think it is and that signifies that it's a small integer stored in there so it's like it's such like a small nothing that happens in the javascript engine whereas like the moment you start allocating anything that's when everything starts breaking down not only that but you have to like let it run for a while like let it run for five minutes doing something and then watch how much does garbage collection make a real difference in the performance of say a server uh i mean real and optimization's kicking in to really absolutely nobody surprised the ac plus version is faster compiled with gcc-o3 which is the highest optimization level we get about 15 milliseconds what's pretty cool is that it's not that much faster than the javascript version only a two millisecond lead how about we try more complex calculations let's emulate a basically well again he's saying don't do it for uh game stuff because it's slow i would assume that you create objects and you throw away objects and stuff like that i think the garbage collection can be a really big problem and so i'm curious like you have to not create garbage to make it work out javascript i think you could make one in javascript that's like a simple game because you just have to make sure that you statically allocate everything and then you reuse all of your objects and you make sure you never have to use delete right you have to have some sort of like good way to make pools so that way you don't accidentally make stuff in like all these terrible ways blah blah blah uh because you never want to like delete or do something like this basic glsl shader with a supply normal in color and use a directional light look something like this chunk of code javascript write shaders at one point i have no idea how they work anymore i just it was like a decade and a half ago now they're just magic to me when i look at code i'm just like wow it's magic we'll start by generating some random data to serve as the frame buffer and then just a big loop over all the data to do the dot products multiplications etc plus code about as simple as it can be pretty much the same loop and i've got a vector class here just to simplify things a bit not unlike the javascript version we'll inline a bunch of stuff not that it matters my understanding is that these are hints at best and ultimately please don't mind me i let this run a bunch of times and took the best of the runs that gives the jet compiler time to do its thing identify an inline stuff best foot forward and all that anyway got around 110 milliseconds or so 109 milliseconds on the best run give or take a few milliseconds here or there maybe the first result is any indication the c plus plus version will be around 95 milliseconds but the margin of victory is pretty substantial on the c plus plus side 27 milliseconds so that comes in at over four times faster for this just the most basic version of the loop with gcc-o3 let's do another example so i think that was that one was getting closer i wonder if he was uh creating new objects or was he still reusing the same objects and the real question is is he perform you know like again it just always comes down to garbage collection memory and allocation and all that so if i guess as long as you're reusing everything maybe it's you know you could argue it's not as as big of a problem as it is uh i mean i can buy that argument game updates tend to involve updating many entities manipulating data structures that sort of thing and i did something similar with these spatial hash grids a while back check out that video for the javascript implementation but let's quickly port that yeah anything special no clever optimizations or anything this is just a straightforward line-by-line port of the javascript version to try to be fair so i'll run the javascript benchmark here and we can check out the results i got around 167 milliseconds or so for five nearby and eight milliseconds for the update roughly now when we run the c plus plus version we get around 86 milliseconds per fight nearby and six milliseconds for the update so actually not that i do feel like you can't you shouldn't port things one for one like line of code by line of code you should try to use like the general constructs that are good in one language versus another right like so if you just did like a straight you know transport to rust you'd want to use rusty type principles and if you you know just like we were talking about earlier like if you're using buying docs or box dine uh trait references to make it work out in in rust you're going to be doing things that are just inherently slower than not doing it that way and so you know is it should you always write things one you know yeah idiomatic translations not transliteration so a lot of times we do like for these things a lot of times we we would do something like a transliteration where you're actually just line by line transforming that line of code into a different language whereas you should do like meaning for meaning translations greg greg leptos greg understands in line with the twice the speed claim from the va team what does this all mean all in all not too bad of a showing for javascript for a straight comparison with c plus plus code we got very roughly around two to four times the time for javascript to run versus the equivalent c plus plus code a bit slower than what google said but at the same time meaning for meaning called it yeah you did pick you always call i don't know how you do it how do you always call it how do you know i'm still pretty amazing given this is supposed to be a slow web language let's screw around a bit more when i compare the dot product version i had written several versions comparing performance the version shown wasn't the fastest but it also wasn't the slowest i played with versions that were straight array implementations so normal in color was a three element array i also tried it out with objects with xyz properties and they all were roughly in the same ballpark give or take there might be small differences but i kind of lumped them together i also wrote a four of loop instead of a classic for loop since i'd heard somewhere that they were slower but i didn't see a world of difference here yeah when i tried just using one big typed array of floats i managed to get the loop down to 17 mile seconds or so there you go these typed arrays you get a lot of benefits that you just don't get in regular javascript and so i think this is really important thing that he's calling out right here type to raise in javascript allow you to have uh like a big continuous block of memory and so if you're doing operations especially if you're doing operations that can be easily jitted you could you could get some pretty amazing things coming out of this i think that's where you're going to see a lot of the benefits in the javascript world i wonder if i could make a javascript program perform really well you know just a thought so about two and a half times lower than the c plus plus version albeit at the cost of some readability but there's some performance foot guns floating around too when i tried map and four each their performance was seriously unimpressive a straight loop was a way bigger win but wait there's more we're not done with c plus plus yet because normally in games we have a bottleneck that involves turning through a bunch of data doing calculations often the first instinct is to go out and break out the intrinsics and vectorize that section of code so what i did with the first loop was i just quickly cropped out an sse and an avx version so purchasing four eight floats at a time did clearly smarter than me the end result was that our time goes from 15 milliseconds to six milliseconds for the soc version and four milliseconds for the avx version so not bad that makes it over four times faster than the js version the second loop the shader same thing i went ahead and made a simple sse version got a little bit lazy about making an avx version but still saw an immediate improvement the time went down quite a bit but wait there's even more we're using gcc-o3 for the tests but at these games i've worked on typically they ship with unsafe math optimizations so we'll go ahead and swap that for dash o fast one thing to keep in mind is that floating point operations aren't associative meaning brackets a plus b plus c does not equal to a plus bracket b plus c since floats are inherently inexact by specifying so fast we've given the compiler permission to break strict standards compliance and go ahead and reorder floating point statements for games this is generally fine calculations just need to be close broken math called it it's enough when we do that the first loop the scalar basic version drops to four milliseconds on par with the avx version meaning i kind of wasted time writing that when the compiler's version was just as good it looks like the basic shader dropped down to 22 milliseconds from 27 so got a decent win there and i'm not clear i saw much of a win on the spatial hashgrid code but maybe i didn't run it enough times so what does this all mean this wasn't meant to be the most scientific of tests i mostly just wanted to get a rough idea of javascript and relative performance that being said honestly javascript surprised me a bit i mean i've been screwing around for the last year in my spare time on random projects to see what it could do but i'm very much not a javascript programmer i spent most of my career in c plus plus with a few years in python if you couldn't tell another javascript code it's definitely not that slow crappy language that it was back in the 2000s and the jet compiler is just going to keep getting better and better over time so expect the difference between c plus and js to keep narrowing in the future as the va team comes up with ever more clever ways of generating machine code the c plus plus was that turtle doing drugs is that what i'm saying right now are we having some sort of totally drug problem going on i don't know about this this doesn't feel right kids don't be doing  okay i've heard i've heard a lot of kids have been doing jit these days on the street um and you know i i have you seen what your brain yeah have you seen what happens to your brain when you're on jit it's not good okay not good though i do hear it does help your max honestly like if you're hitting the gym a lot maybe you do want to jit a little bit you know not like jit a lot you don't want to get like some you know jit rage you just wanna just a little bit you know do it for the bros come on just a little bit nice thing is that you've got options you can go lower and lower level massaging your code to be even faster and compilers are super good and getting better every year i wasn't actually expecting to be gcc i figured it's auto vectorization would have beat me out easily maybe it has something to do with the way i'm using a vac 4 is a vex 3 with w padding or maybe i just made some horrible mistakes somewhere but but anyway i get the easier role in that i understand my code and my specific intentions and it sucks to have the compiler's job i guess maybe the next step is to learn to read my mind until next time cheers i did it is kind of funny that we just watched a video hey look it's me hey look it's me uh it is kind of funny look they're giving me my own videos uh it is kind of funny that we watched two videos in a row that are effectively the exact same idea but almost like inversions of each other where like he's just like ah look you can't get faster but look at this this code is kind of like the way i like it you know what i mean kind of like that you know or the other was like you get faster now i don't know i i think no matter what javascript will always be slower compared to any native option like it just can't beat them but the benefit of javascript is that it's pretty easy to write you know like if you're just doing stuff it's really easy you can get vibe really really quick i've been using i've been doing javascript i've been jitting you know i've been hitting the jets you know for a while now and i must say it's it's it's pretty easy but it's also not that easy sometimes like if you're using typescript and you're defining a types of some more complicated operations i'm gonna say that that if i were to define this in rust i would spend significantly less time like so much dude like so much less time i think that's the thing is that i think javascript written as an application is easier and faster to write than rust but javascript libraries that involve typescript and just doing all that stupid typing that you have to do i think is just massively massively harder than rust like by a significant portion because the the type system is nutty right like the type system is you're you have to write so much more code to make it correct and then uh it's just it's just a lot harder i'll be able to show you guys the code here in probably about three months