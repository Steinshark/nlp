when i first heard about the zig programming language i was skeptical why do we need another language in the systems programming space we already have c c plus plus rust and carbon in theory but i gave it some thought and there actually is a place for this language in the systems programming ecosystem and i think you should love it too in this video we're going to talk about what zig is where it fits in the systems programming architecture and my thoughts on the language let's get into it so here we're on the website for the zig language we're at ziglang.org and zig is kind of a cool language because it's built around three simple principles to keep it as simple as possible first the language is meant to have no hidden control flow meaning the code only does what you say it does there are no secret features two there are no hidden memory allocations meaning that the code only allocates the memory that you ask it to nothing happens in the background and three there's no preprocessor and no macros meaning the code that you write is the only code that gets put into your program no more and no less this comes at a time where i think a lot of languages that are meant to be low level like c for example are kind of bloated with their run times like lib c you know the program he does a lot of stuff before it actually gets to the code that you write which could force you to spend your time debugging the language and not your code itself which is kind of the whole mantra of the language right keep in mind that everything i say in this video is at the time that zig is in zero one zero zero so it's not even at a 1.0 yet so everything in this video is subject to change so what are the principles surrounding zig and where does it fit in all the other languages i would say that zig is one level above assembly and one level below c of one level above assembly obviously because the program has human readable syntax that is not just you transposing memory in and out of registers but it's one level below c because you were actually given finer control of your code than c but without all the blow when you make a program in c it by default links in the c standard library it does a lot of stuff under the hood that you're not necessarily aware of here in zig the program is a little simpler granted there is an imported standard library but it's just not as bulky as c so again a level above assembly one level below c let's go into the developer ecosystem which is one of the things that i'm happiest with with zig that makes it kind of fun uh for a new programmer if you install the zig compiler which i've already done we'll make a bit like a folder called zig video when you run the zig compiler you're giving this really nice menu that kind of reads like the cargo program in rust you're able to do things like initialize a library initialize a folder for an exe initialize a folder for a library and do a bunch of things like ast checking running an entire integrated test suite that runs inside the program as well which is a halter video that i'll make later on this also the zig compiler can translate c code into zig code and also act in as a drop in archiver compiler and c plus compiler a bunch of cool stuff for zig so let's go ahead and make project real quick and we'll do zig init exe so here it's created the repo for us just like cargo wood and we have our code here main.zig a lot of comments here but basically all this does is it prints out some code and the code says all your code base are belong to us so to build that pretty simple nothing crazy going on here we'll do zig uh build and then run so that'll run the compiler it'll invoke the llvm back end to output the object and then we get our executable which gets ran all your code base are belong to us another really really cool feature that i like about zig is that if you saw here at the bottom of our our source code you can actually write in a test directly into your code so that instead of zig build run we can do zig build test and that actually invokes every test that we write into our code so we can do zig build test it'll do the same thing it'll compile all of our tests and it'll say yep we ran all these functions and none of them failed so all of your tests passed is pretty cool another really important part to stick that i like is again it's meant to be a systems programming language if you've ever coded in a language like c or assembly one of the big problems is transposing your code it from you know x86 64 on linux and maybe you want to move that code to a you know mips processor running windows i know it doesn't exist but you see my point what you can do here is you can do zig build tech d target and i can say equals x86 64. windows and this will actually produce a windows executable i can't run it because i'm not on windows but i think that's a really really important feature here we have zig video.exe which will do the exact same thing on the windows api so really really interesting another big piece that i really really enjoyed from using this language is the security baseline of a language so if you are learning to code but you are writing a project in c you should not be doing that because c is known to be a very dangerous language it's very easy for a new programmer to make errors when you're writing c that leave your code vulnerable to attack i tried to do this on stream i tried to use zig to make a program that was able to be hacked so with this piece of zig code does is it creates a tcp server it binds on a port and then it listens for a message from the user what i really really like about zig is that it does have security in mind from the go all the functions are being used like rust splices where the types have associated length values to them meaning it's really really really hard to allow the programmer to make a vulnerable condition in this language every thing lengthwise and memory management wise is done under the hood for you without having to explicitly control the languages so i spent literally two hours trying to make this language break and i and i couldn't do it so i really really liked that another important piece of this language is the documentation so any new language you're going to have to learn how to code it and the ziglang.org does a really good job of documenting the language everything from the standard library down to the types and basically every feature that the language has you have like your vectors you have your pointer concepts here you have your vitals your non-vodles uh everything that the test suite allows you to do is documented here in the documentation so i found that very very enjoyable also they have the entire standard library mapped out into documentation where it shows you the types that it has and also if those types are able to throw errors you have to handle in the specific rust error handling scheme so that's pretty cool too i think there is a fundamental question though that is still unanswered to this language and the question is why zig why would you have a new language like this if things like rust already exist i think we are moving into a world where if you're learning a new language you should be learning type safe languages that are not breakable you know to a certain extent like rust the problem is it is very hard to justify teaching rust to a new programmer because rust in itself is already a very difficult language i highly suggest that if you're learning to program you don't learn rust as your first language for that reason it's a very complicated language that makes things safer but you have to know what things are unsafe before you can make things safer zig on the other hand is much easier for the user to learn this code reads a lot more like python or c than it does like rust and makes the syntax a lot easier to hold on to so where does zig fit in in these systems programming namespace i think where it fits is if you already know the basics of programming but want to learn a type safe language that isn't as complicated as rust and get your hands dirty with doing some embedded systems projects that don't have to take the rust language into account zig is the language for you also subscribe