you might not be as good of a programmer as you 
think today i'm going to be sharing with you some   of the top faux pas or sins that developers or 
programmers make i can attest firsthand and admit   firsthand that i have made i think all of them i 
think all of them at least one point in my career   and i'm sure you can be the same but the 
key here is to not keep on repeating them   before we get into it though make sure to 
hit that subscribe button for more tech   and coding related videos shout out to some 
of the subscribers here thank you for your   love your feedback support you know you 
just all are amazing okay let's dive in the first sign that you are not as 
good of a programmer as you think   is you think you are a good programmer this obviously comes with a bit of humor 
but there is some serious behind it i feel   like all the programmers that i have met who are 
amazing amazing at what they do they don't really   announce that or think they are as good as 
they are and this comes into play with imposter   syndrome feeling that there's always room for 
improvement now of course this first point is   more of a joke than to take seriously you want 
to think you are a good programmer and continue   to build up your confidence but it's also there's 
a lot of truth in it if you kind of think or have   a lot of imposter syndrome around your programming 
skills you probably are doing great but it's just   because you are continuing to grow and it makes 
you feel uncomfortable like you're always learning   the second sign that you are not as good of a 
programmer as you think is that you judge other   people's code or kind of say oh this is shitty i 
can do better well of course there is some truth   to that i think a really good programmer rather 
than just writing off someone else's code whether   it be a team members or open source project 
actually dives into what is going on and what   is the problem there are always two ways to go 
about problems that you're faced with one just   writing it off because you don't understand it 
and just saying this is horrible i can do better   and the other way where it's actually curiosity 
and saying hey why did they do this is it lack of   experience is it just am i missing something 
here and actually understanding the problem   and i think if you are a very good programmer you 
actually want to understand the problem rather   than writing it off and simply saying i can do 
better the third one on the list is that you can't   explain complex problems in very simple formats 
this is something that comes with time so if you   are still working on it i'm still working on it 
it doesn't mean that you are a horrible programmer   but once you get to a stage in your career or 
your experience where you can explain very complex   things in a very simple way it really shows and 
tells a lot about the programmer that they are   doing really well they really fully understand it 
i always say if you can explain complex problems   in a way that a child would understand you really 
have a strong understanding of it if you have to   explain complex things in a complex way you might 
not fully understand what you're speaking about   number four on the list is you think one 
programming language or one framework is   better than another and well yes let hear me out 
for a second here yes of course to some degree   different languages might be better than others 
for specific reasons for example react is the best   anyone who uses vue is horrible and just different 
things like this i sometimes hear i just think   maybe they're using it for a reason and really 
good programmers have an understanding of when and   why to use specific languages specific frameworks 
and libraries a lot of times we write off other   languages or frameworks because we just don't know 
them or we're not familiar with them and we like   to stay in our comfort zone the last one on the 
list is you are probably not a good programmer   if you see things in black and white and what i 
mean by that is either right or wrong good or bad   when it comes to programming there are so many 
different solutions and you just have to be aware   of the spectrum of what would be considered a good 
solution versus what would be considered a bad   solution there is never or very rarely i should 
say just one solution to one specific problem so   you need to be open-minded in understanding that 
there are tons of different solutions that could   work of course you need to identify good solutions 
not just any solutions and that takes a really   good programmer to do okay those are my top five 
signs if you are not these things you might not be   as good of a programmer as you think of course 
there's always room for growth and i think we've   all done all of these things so please don't get 
caught up on this but i really wanted to highlight   some of the more faux pas that developers or 
programmers often make or get comfortable with   if you haven't already make sure to hit 
that subscribe button for more tech and   coding related videos give this video a thumbs 
up and i will see you all soon thanks everyone