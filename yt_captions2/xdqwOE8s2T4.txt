this is jonathan blow's interview on why he does or does not like rust and apparently chat is a bunch of degenerates we need to work on is we need to make software work better generally we need to make it more so that when you write a program you know that it's correct right to a greater degree than today yeah right um and it would be helpful to do that in ways that are not the ones that have been well trodden because we we kind of have seen those ways before so for example you know a garbage collect like a list variant or something right is actually it's safe in certain ways but it's actually very unsafe in other ways because like lisps for example were not traditionally statically type checked and who who realized that that's actually important right okay i mean i like this i like this take which is that today's languages and the way we've done things aren't necessarily the best way to do things right we can all agree that we've all had pretty crappy experiences with programming uh we've all had really long debugging sessions because of the reliability of of what we've done so i'm totally on board with that i agree typescript is a terrible thing and and so you know rust i think has a good has a good set of ingredients there the problem that i have with it is when i'm working on really hard stuff i don't exactly know what i'm doing for a long time right yeah and so so if the cost of experimentation is driven too high yeah it actually impairs my ability to get work done right totally true which is that no matter what if you can't iterate quickly if you don't know what you're doing i actually i've come more onto that camp wow i've i've come a lot more into that camp which is if you don't know what you're doing at all and it's like an exploratory phase i can find rust annoying when it's not dealing with like say strings like if i'm doing string processing and i'm just kind of like trying to print out some stuff and i'm just doing something weird usually i'm just doing that in awk or or grep or something different fbi open up or jq but if i for whatever reason i have to go and and do something you know i i kind of compete on which one's faster is just javascript or rust which one's faster i don't i don't know i'm not good enough at ocamel to really be able to run with that one yet but i feel like as of right now they're about the same thing like if i can't use cli tools those two are about the same thing but once i go beyond something simple rust is great when i know what i want to do right when i already have the idea in my head and it's a very self-contained program like i can imagine writing out a csv parser is a lot it makes a lot of sense because the problem the the domain is a very very understood well shall i say understood that's a very funny phrase but the domain is is in some sense well understood there there's a set of rules that must be applied and you just gotta apply those rules in a linear fashion and boom you're good to go so to me that seems like such a w right that seems like such an easy win it's well trodden it's at least mostly understand so a place with rust and that just seems like such aw whereas if i don't know what i want like let's just say you have a server that has a bunch of data mongodb you don't even know what's in it this literally happened to me you don't know what's in it it's a mongodb and now you have to go and explore and try to figure out how to pull some statistics out of it right like you don't even know what's in the thing so you know and and for me there was lit there was a hundred types or 150 individual types so i built a program you could still find it to this day undefined right uh all it does is it takes in a config file in a stream of objects and this stream of objects will literally turn it into a bunch of typescript definitions and so it's kind of like clever and that was the way i explored a data source that i had no idea what's in it there's no type definitions and it was all just like some nonsense and so this was my way of solving that issue and to me this was like a great example where rust would have just not been good this just simply wouldn't have been a great rust experience whereas to understand the database was just much better in typescript i know totally sucks but it just is what it is i wrote something like this in in bash junior dev moment yikes he likes uh it looks like a lost opportunity to use rust to me all right let's hear what he has to say yeah i think that's fair that is so and so my my approach that we're doing in the language i'm working on is uh is different it's like um you have very very extensive meta programming facilities and you can use those to build uh your own correctness checking right for your program that you traditionally would have needed to make like a compiler extension to do which is like that's pretty far away from what people do day to day and they just don't end up doing it even if they could have right and so so what happens is your meta program gets information that normally would only be internal to the compiler like like here's you get like a message loop while you're compiling and it's like oh this this declaration just compiled uh it's a procedure you get the full type like here's the types of the arguments here's the types of the return value here's the you know this identifier maps to this other thing and so you could start having house rules that huh that okay so so an example is i have kind of the the compile time of compile time logic that can enforce different kind of constraints yes and you can decide what that is later so a video game example because you know this is all motivated by the i would love to see an example of that because i'm trying to wrap my head around what exactly does that mean i think i have some set of ideas of what he's trying to say but there's something that seems really amazing about the idea of being able to define some basic safety logic yourself while having an overall kind of loosey-goosey platform for exploration so that way you can still move fast but once you have moved fast enough you can then set more safety measures in stone by like enabling doing things i'd have to understand what this means uh comp time zig i assume it's different than comp time zig i love the comp time is my favorite feature i really wish they wouldn't have had that i really wish the rust foundation would have had that whole debacle with shepard's oasis where he was doing the whole um uh what's it called uh comp time exploration in rust because i think comp time is vastly superior to macros macros are incredibly difficult to understand parsing through and working through the sin crate and understanding all these little things and trying to build up this syntax and all that just feels awful whereas comp time you understand it inherently it's like cooler generics is how i think of comp time in fact comp time to me seems like a more reasonable approach to generics than generics have ever been because generics feel like a runtime thing right even though it's technically like it's not a runtime thing it feels like a runtime thing whereas comp time it does not feel that way oh by the way when someone says rust macos are great i totally am on your team they are great to use they are horrifying to write if you're doing proc macros declarative or no wait hold on which one which one now now i'm yeah proc macros are the ones where you do where you have to do the whole working through the syntax whereas declarative macros are the ones where you get to just like kind of write basic code that almost looks like it but either way you know what i'd rather do i'd rather just write rust code that's executed at compile time that generates code right that's what makes comp time so incredible in zig you if you know zig you know comp time it's that simple macros can be a huge pain in the acid bug exactly comp time again incredible but i will agree macros macros are what's enabled leptosyntax and that's also incredible the fact that you don't have to have a transpiler but to be able to have jsx in rust amazing so that's why i don't say that they're i love macros i love using macros i hate creating macros two very different things whereas with comp time i love using comp time because you don't even really realize you're using it you're just passing types into something and then boom out comes something but creating comp time just as easy right you're just like oh yeah i'm doing this okay here's the value t we're just using t all around here it's awesome does a comp time generate code to use at runtime yes exactly that's what it does think of it like it's it's extremely simple if you've never if you've never seen it here we'll do a quick detour zig comp time example uh uh let's see if we just have a quick uh quick version okay let's see if we can see a quick version okay uh comp time so here we go let's see if we can let's see is this a good one well this is kind of interesting must be all uppercase oh interesting so this is like a insensitive equals compare two strings okay where's a good one for like doing um i want to see one that's like using not that kind of comp time just a simple one to build like a linked list here a linked list i know i actually have one uh the primogen here uh github uh zig there we go i was working through some zig stuff rewriting rust i get it here there we go i'll do this right here i think i have a linked list or a stack there you go a stack that takes in a type a list node is just a struct that has type t and a reference and an optional reference to the next thing then all i have to do is just start creating things right so when i push in one stuff i create a node i set the value to the value values just t boom is that that is so it looks do you see this it looks just like i mean this just looks like generic programming right but all of this is executed at runtime or all this is executed at compile time and so there's only one piece of code here which is creates a version of this code where all the t's you can just imagine every t in here is just simply replaced with i32 that's all it's done i've only created one version of the program or one version of that code and that's it so at compile time that's what's compiled in that's it super cool right like to me this makes a lot of sense this feels really really good like i totally get that yeah and so it's so they call comp time so i'm writing just zig code i'm not writing anything else which i think is probably the coolest feature of zig is this if you haven't done it it's it's really cool and that's why i always say uh this is why i always recommend people take a little bit of time and explore different languages because you can see things in different ways right it just feels different right and sure this is kind of like effectively the same thing as um you one could call this is no different than generic programming pretty much i agree with that in general i agree with the sentiment but it's incredible to see another perspective all right let's keep on going i see teaching there by the way teach streams on twitch tv did you know that the reality that i come from right yeah so we have these game engines and an object in a game world we don't use the word object because that got commandeered by object oriented so we call them entities right thing right even though somebody else right so like my coffee cup is like an entity right and so entities have data associated with them and so forth and you might have different kinds of entities like a person you probably want a lot of different things to happen for a person than like uh you know a soccer ball right those are very different by the way he's about to talk about ecs right nd component system stuff i've always wanted to really understand entity component system stuff because i feel like it's the ultimate uh a composition over uh inheritance business but i've never really like built it out myself i've always wanted to do that i really really really really really want to try it out you know what i mean and and so you know we tend to make those different types of entity and somehow they end up having different behavior and so forth but i don't want to work with it i want to build it i understand how to work with it uh but but i wanna i wanna feel it you know what i mean you know the way people have different ways of representing this of course but the way that i tend to do it is like a very very shallow inheritance thing where there's like there's a base that's like entity and it's got all the things that are common to everybody and then like one level subclassing maybe right other people do that a different way but um i think the way i do it is probably among the most common right well it's not really about interface and implementation the thing it's just like look there's the data and do it do what you want with it like there's not getters and setters and whatever right okay so i'm a little bit lost on words i i really actually want to keep looking at this but i'm a little bit lost on uh on what it has to do with uh rust okay so at 145 it goes back to rust okay let's let's keep on going because we're almost to 145 i'm just interested in what he has to say usually right okay i i don't find those to actually component systems stands for so usually uh an entity will have an id like it's got some handle that you step it up it's probably an integer or functionally an integer maybe it's a couple fields packed into a thing right and so because there's a coordination problem you have a lot of things moving around in a game and like something gets destroyed right you blow it up or it gets paged out to another area of the world that you're not simulating anymore or something and you have to work within a limited amount of memory so you have to destroy these things he just said the word limited amount of memory i don't think we've i don't you know that's not a real thing i don't know i don't know if you oh sorry for everyone that's getting ads right now uh five dollars pretty good music thank you for five dollars a month um but uh you know it's very very funny that uh you know talking about memory because this you know largely everyone in the audience here is a web programmer and in web programming when was the last time you thought about memory honestly your your your time your little list contains an insane amount of memory for what it's doing a list of three integers is just vastly oversized in comparison to what you actually get but the nature of a game is all these things want to coordinate with each other right and so if you just naively delete something then some other entity that's trying to follow that thing is now following uninitialized memory right right so what do you do well you know i've been meaning to release my csv parser or my csv generator that can take data can take data from a lot of async sources and it builds it up in the smallest representation on a server and so this is something i because i i struggled building um building things in javascript because everything i'm doing has millions of events and i always end up crashing my server so it actually used an array buffer and i would create an in-memory table for every position and use that as a way to store a bunch of data in a bunch of these columns and so it's been really really awesome to do that and i haven't dealt with strings yet effectively i'm just creating like flat puffers inside of memory and yeah it'd be kind of fun to open source that one kind of finished it off with strings as well or like us because i only have integers but you kind of need strings as well so that way you can have a complex type it'd be pretty fun to do well often you'll refer to things with a handle modern c plus plus people i'm putting air quotes uh as i say that because i think it's a silly phrase but but those people would say like you should use some weird kind of smartphone smartphone are incredible in some sense okay if you're working in a large application that's not a video game a smart pointer can save you a lot of of just headaches i use smart pointers like wild when i'm building apps right you got to i mean the fact that you live a life where where you just don't even know the life cycle of something pointing to memory just sucks whereas at least with like a unique or shared they're great they're great but i i do agree if you're not if you're not in that world you gotta go all in on pointers and do them well that's not actually what you want to do because you want to have like a very clear and authoritative control over what is the memory for this thing when is it live when is it not live exactly what happens at exactly that moment right which is interesting smart pointers are more about like kind of hiding things and magically stuff happens later when i don't exactly know right it's the wrong thing so anyway see so i agree there's also atomic locks on shared pointers right or there's not atomic locks there's like atomic counters on it too so you i mean you could be getting a huge performance penalties by using shared pointers if you need to pass it all around so i i mean i'm on team you've got to control what you got to control you have some integer id that you use and you say hey give me the pointer to the entity that corresponds to this id that like say i'm following this entity so i get back that pointer or it says oh it doesn't exist and because there's a specific time at which this happens you're gonna handle the non-existing case because it's obvious right right and then it's like okay i'm going to start looking at all this data which might be quite a lot of data you know i might need to use a lot so i take the pointer for a while and do stuff with it now we have a safety problem right because like okay yeah right and uh so in games the way that's traditionally handled is there's a very natural barrier which is the end of the frame right so we do a bunch of stuff over and over 60 times per second or 200 times percent whatever right and at the end of that frame we pretty much know that it's all garbage now well we're not we're not really hanging on to anything right right exactly so it's a very clean cut yeah right right so well it's a very reasonable thing to say it's fine to do that stuff as long as you don't hold an entity pointer across a frame boundary yeah now that's not a very generalizable rule because what's an entity pointer versus a pointer to something else your compiler doesn't know that right but you know that right and so when the new guy shows up or the summer intern shows up and writes some code where he puts that in any pointer into a data structure that like that actually is surviving that's sitting around right that's going to be a problem right and that's a very practical real kind of yeah they said there's going to be more rust talk i mean he's he's describing a bunch of things that are extremely similar to rust like i can i can totally understand a lot of these things that that is happening right here um you know like i like one thing i really love about is that the frame that he's talking about you can do so many cool optimizations if you control memory and you know your life cycles whereas rust you're right rust does not solve that problem rust by its very nature doesn't solve that problem and if it attempts to solve that problem it solves it in a really kind of crappy way to solve it whereas i understand why people like c plus for this exact reason is because you can really go you can really do something simple with it and you know you can do these really beautiful arena allocators and just like you can effectively free in a single call or just reuse right right afterwards it's really cool i really i really do like everything that he has to say about it and i know he's not directly saying i don't like rust or critiquing rust in general he's giving really great points about how things are very difficult in the rust world versus this he got into those he got a drama a couple years before this for uh dissing a rust conference talk about entity component system yeah i mean you're allowed to do that sorry rust entity component system bevy um but you're allowed to totally dis on things especially it sounds like he doesn't really use ecs he kind of uses ecs he has some sort of mix of what it sounds like ecs because you have this whole id lookup but then it also sounds like he has some sort of inheritance thing going on as well i don't know sounds kind of interesting i don't really get it uh i'm not a game programmer so i don't understand things that more than a very surface box is an arrow understanding but i really like what he has to say i know jonathan blows a very contrarian individual uh but i think that you should always take time to listen to contrarians even if you don't agree with anything they're saying like even though he's giving a completely different perspective on where rust falls short and you may have never thought of that or understood his perspective without taking this time and i really do like i really really like this perspective i'd actually like to listen to this whole thing i'll link this whole thing i'll probably go listen to it myself on my own time but this was this was really good um i don't know but by the way i don't agree with everything yesterday i think he has some pretty messed up opinions uh like his opinion about open source is identical to closed source right it's no different like if you think that somehow open source uh open source is bad and closed source is good stupid right biggest closed source suffers from the identical problem is open source except for open source people i would argue are motivated in a different way which may make more artisanal software um you know i i didn't like that take i did not like that take i want to listen to the whole thing i want to listen to the whole thing i'll leave the link in the description go check it all out this is amazing i love to hear more on this now that he uh now that jai is out there i mean him have talked by the way uh i'm not going to be using it at least right now he doesn't want it into some large uh ecosystem but i think as he's going and as he's releasing stuff i will i will probably end up uh shooting him a couple messages and we will get something really good going where when he releases something public i can get something out there as soon as possible so people can go check it out below on the stream surely uh i don't think blow would want to be on the stream i don't think he's that kind of guy i don't know i've never really talked to him other than a couple email exchanges seems like a good guy i mean he seems like a nice guy honestly uh he just seems like any person who's an expert in his field is that when you've seen so much stuff it's very it's really hard to remember what the thought process is that you had 20 years ago and so i can totally get why you know he's a bit tougher on the people right like i do understand that way of life um so i don't want to be too hard on the guy for something like that but it ain't me the name is the prime gin