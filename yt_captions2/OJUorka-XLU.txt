if you love using python but you need more performance there are a few options you can buy a really fast really expensive computer which is not ideal you can also use c or rust bindings and code the part that needs more performance in c or rust but that does mean you need to learn new language switch context etc today i want to talk about another option which is using another programming language altogether but one that looks a lot like python i'm talking about mojo i'm going to show you how to use mojo and how different from using plain old python and i'm also going to share some of my thoughts about using it and well some mixed feelings i have about it before we start if you want to learn more about how to design a piece of software from scratch i have a free guide for you you can get it at ron. c/d design guide it's contains seven steps that i take whenever i design new piece of software and hopefully it helps you avoid some of the mistakes that i made in the past i codesign guide the link is also in the description of this video now let's dive into mojo mojo is a relatively new programming language that builds on the syntax of python and adds quite a few different features on top of that it works internally in a different way than python there are quite a few differences there actually and that actually helps it achieve that much higher performance the main difference is that mojo is actually a compiled language versus python which is interpreted in a sense you can look at mojo as sort of a marriage of python and rust so instead of being interpreted like python is mojo is compiled it has much stronger type safety it supports static typing which makes a lot of sense in a compiled language there is memory safety there's garbage collection it uses a sort of rust style ownership model and i'm going to show you some examples of that later in the video a caveat is that mojo is still in early development so it's it's not ready for production it's still missing some essential features in fact at the moment it mostly works well on unix and mac machines and on windows you can still use it but you have to use the windows subsystem for linux also that means that probably features that we have now are going to be removed replaced improved over time so if you're looking for a really stable language mojo is not what you should use but still it can be fun to take a closer look at mojo as a form of experimentation and exploration here's an example of a basic hello world mojo script and to run this you can simply type mojo and then the name of the script assuming of course that you have installed the tool now i did run into a few issues with installing the tool by the way that was related with using p en and picking the right python version and there were some issues with it not being able to find some libraries again it's not production ready so that's kind of how it is but anyway i got it working and this is the result let's take a clos look at some of the differences with python and some of the features that mojo has on top of what python offers if you look at the hello world file you see that there's a couple of minor differences like instead of having a def we write fn in front of the function name similar to what we have in rust also main is the actual entry point of the script so that's the function that's going to be run when you execute the script with python that's not the case you simply write your commands at the root indentation level and then that's going to run of course my best practice that i recommend is that you actually always define a main function in your script and then call it explicitly so it's clear what the entry point of the script is but in modu this is by default the main function just like in rust just like python there are types in this case we have strings a and b as strings and this also returns a string so that's the same syntax as with python's type annotations but these are actually static types so that's an important difference these are checked at compile time another couple of differences in python we can simply define a variable like this in mojo that doesn't work you see we get some sort of error it doesn't know what x is so we need to actually declare it you can do that by writing the var keyword in front of the variable name that makes it a mutable variable so you can change the value later for example i can write xal 6 after that but alternatively you can also use the let keyword and then it's constant value and you also see that when we try to assign a value to x then this actually gives us an error that this is not allowed also if you declare functions like this and you have parameters like a or b in this case you need to supply a type so if i remove this you see that we actually also get an error here because we need to indicate to mojo what the type is of a otherwise it can compile the code so let's put that back in the function body itself you don't have to supply a type annotation so if i write let's say let my name equals ar i don't need to indicate that my name is actually of type string but of course if you want to you can add a type annotation here it's just not necessary and typically when i define variables like this i don't include the type annotation unless it's completely unclear what the type is normally you can easily infer it from on the right hand side so there's no need to do it by the way if you like talking about different programming languages their pros and their cons how they affect software design you should definitely check out my free discord server you can get access by going to discord. ion.co the link is also below a few other things that i want to show you so this is another version of that same hello world example so we still have our main function and i've added a couple of other functions here as well there's a hello function but there's also a python style world function mojo is in principle compati with python but of course it's a compiled language so there needs to be some kind of boundary between the unsafe messy python world and the memory safe very strict mojo world and the way mojo does that is with the exception mechanism here you see an example of that so i have a python style function here called world that's simply going to print world and then when i want to call it i need to put that in a tr accept block so if i turn this into comment like so then you see that now we actually get an error that uh we cannot call function that may raise in a context that we cannot raise so mojo does these types of checks and that means that if you want to call python function from a mojo function you need to put it in a try except po like so if you write a python style function like this well that comes at the cost of type safety because python doesn't enforce types and because of that mod you also use the different just in time compilation mechanism in order to compile python code and that's a bit slower than running mojo code directly so that's something to be aware of here's another example that shows a couple of different things that mojo offers so again there's a main function at the bottom that's the entry point of the program and then there's a couple of other things here there's a struct and there's a trait so these things look very similar to what we have seen in rust before so let's go over how this actually works so we have a struct called user similar to what a struct is in rust there's one difference though you can define these sorts of functions to be part of the struct and rust you need to use an input for that a struct can have variables so a user in this case has a username and an email you need to declare these with the var keywords inside the struct and then we have an initializer with a couple of arguments and we can set the values inside the struct in the initializer and there's a couple of other functions that are added here as well such as this type which means that we can have a string representation of that struct so the struct user implements this stringle trait which simply says that the type can be converted to a string another thing you can see here is value decorator and this simply means that the user struct can be copied and moved around similar to the copy trait in rust so you may think okay so struct is basically a class well it is slightly different in that there is no inheritance mechanisms for example classes are not yet supported in modjo but that is a pled feature another thing that i'm using here is something called a dynamic vector and this is similar to python's list you also see we supply a type of dynamic vector so this is a vector list of users and then we can depend users to that dynamic vector now in order to be able to do that we need to implement the collection element tra that means this user struct is allowed to be part of collections if i remove this then you see we're going to get an error here that this is not allowed because it needs to have the collection element type and finally similar to python we can use a for loop to go through the list of users now unfortunately if you try this then that doesn't work because dynamic vectors currently doesn't implement the iter method i don't know if they want to add that in the future but that would actually be helpful to have something like that so things like string b collection elements that trades just like in rust and you can also define your own trads i have here another trade called emailable that i've defined here at the top so this trade defines two functions get email and send email and then of course if you add the trade then you also need to implement the methods here so if i change these two comments then again we're going to get an error because it doesn't implement all the requirements for the tradeit so let me put that back so traits are also in the ross programming language it's sort of comparable to what we have in python with protocols but of course protocol classes in python are not enforced at all the simply hints and with languages like rust and moo these are actually enforced and checked when you compile the code a final thing that i want to mention about python compatibility and how you would transition from python to mojo is that typically like i've shown here in this hello world example you would have your python code in a def function similar to how we would do it in python and then you put it in a try accept block when you call it from a modo style function so if you want to transition from python to modu to benefit from the higher performance then one way that you can do it in steps is simply call that python code using a tri accept loog and then slowly migrate the functions to mojo functions at type safety where necessary final thing that i want to to talk about is ownership so this is similar to how rust also manages memory and we have a couple of different keywords in modo to handle ownership so there is inout there is owned and there is borrowed and this indicates who owns the value at any given time and that in turn determines whether the value is actually still needed or can be cleaned up by looking at who owns the value the first option is inout this borrows ownership during the function call and it's also mutable but after that it returns the ownership so that means that when we run this function we get a self object and we can actually set values in it we can change it that's what in out does if we remove that we get an errow because we're trying to set values in it so this needs to be mutable next to the inout keyword we have the borrowed keyword which is exactly the same as inout except that it's immutable so you can't change the object and before there was a tiny mistake here this actually returns ownership the final keyword that you can use to manage ownership is owned so this actually transfers the ownership of the value from the color of the function to the function itself so now username if it's no longer being used afterwards then the value will be destroyed by the runtime after that by default the parameter of mojo function is borrowed so if you look at the hello world example that i shown you before so we have the add function so actually a and b they're both borrowed so you don't need to write the borrowed keyword in front of it even though you can if you have a python style function like the function here you add a parameter to that then then by default that parameter is going to be owned so ownership is transferred and that choice that design choice also has to do with the more dynamic nature of python so it makes more sense that because python is more dynamic and we have less control over what happens that we actually transfer the ownership of values when we call python code so i hope these examples gave you an idea of what mojo is and how it's different from python now currently like i said mojo is not ready for production so don't use it for mission critical applications even though it's a nice tool to experiment with and see what is possible it can also help you if you are thinking about moving to rust for example to get a bit of an idea of how things work in an ownership model of memory and then you know maybe later on transition to rust if you find that interesting so there's still several features that need to be implemented that still need to be done and it also means that the syntax may change over time and that if you write a program in mojo now that in 6 months or a year it may no longer work correctly because things have changed in the meantime also it was kind of finicky to set up at least on my mac i needed to set paths explicitly run some commands explicitly so it wasn't as easy as just installing python and then off you go now granted i think most of those issues were related to me using pan but still that's a pretty standard setup for people using python so i think if you introduce a new language like moju you should take that into account and make sure that actually also works in those cases but i did get it working as it should in the end so i'm sure the modu team is working on improving those things as well so final thoughts about this i think mojo is an intriguing language it's an interesting marriage between python and rust and they find that intriguing because it gives us an idea of what it could look like if we have a language that sort of marries the best things of both worlds both python with its flexibility and simplicity and rust with its types safety performance so am i going to use it personally no it's not yet ready for production yet and when i look at how i use python actually in most cases by far most cases python is actually perfectly suitable to me and if i really need high performance which is actually kind of rare for me then i think i would first investigate whether i could start using rust more and integrate that into python rust is completely open programming language you don't need to sign up for anything and it's also quickly gaining popularity so i would put my chips on rust at the moment so the bottom line for me is that mojo doesn't really solve a problem for me it's a bit too early but that might change in the future who knows now i'd like to hear from you are you using mojo why are you using it instead of python or rost or something else what are your thoughts about mojo let me know in the comments talking about rust if you want to learn more about that i did an introduction video a while back helping pythonistas get started with rust more quickly and you can watch that right here thanks for watching and see you next time