hello everybody. and welcome back to the youtube video. so in today's video would all be doing is discussing the topics and skills that you need to learn to become a master at the python programming language. now i've broken these skills up into four main categories. those are basic intermediate advanced, and then finally expert slash master level. and if you're someone who's a beginner programmer, you can kind of treat this video as a curriculum or kind of a general guideline on the skills that you should learn. and in what order you should learn them. if you're someone who is more intermediate or we consider yourself advanced, then maybe i'll list some skills and topics you haven't heard of before. and i can give you some ideas for things that you may want to learn to really make your python skills just that much better. so without further ado, let's go ahead and get started and talk about the skills and topics you need to learn to become a master at the python programming language. so a quick note here that i have a ton of resources related to the topics i'm going to be mentioning here, especially in the beginner and intermediate sections. so i will link those resources in the description and i'll leave kind of a list of the topics that i've talked about here. so if you're getting lost or if, you know, you think i'm going to quickly just consult the description and it will have kind of like a mini transcript of what we've talked about in this video. so let's get started with the basic section. so this is really focusing on just fundamental programming concepts and really understanding like the basic, basic building blocks of programming. so the core syntax, the way a program actually reads, uh, the way the different lines of codes are going to be executed, conditions, variables, all that kind of stuff. so to give us kind of a formal list of the topics that i would learn in some kind of relative order, some of these will be out of order. i would go with, and i have a list kind of in front of me right here, variables. so you want to understand how variables work. so, you know, x equals one, y equals two x equals y what does x equal? you know, just the basics like that and understanding why we even use variables in programming then probably moving forward into conditions. so boolean conditions, you know, how do we compare two different variables together? how do we check if the user typed something in and it's equal to something else, chaining conditionals together. so, okay. how can we make a chain conditional that has more than one condition in it? how do we evaluate, you know, this condition and that condition at the same time, next that's going to be operators that you want to learn. so how do we add two variables subtract two variables. what is the modulates operator do into your division? just these basic tools that you're going to need to be using. as soon as you get out of this basic level, then after that, it's probably going to go to control flow. so it's things like if else, else, if you're going to want to master those, then just learning about loops and iterable. so for loops, while loops, how do we loop through a list? how do we loop through a dictionary that leads me nicely into what else i would recommend learning, which is basic data structures in python. so understanding lists, understanding, sets, understanding dictionaries, what about strings booleans ins floats. that's all stuff that you really need to master after that. and you've learned kind of the core basic syntax and language features of python. then you're probably going to move into functions. functions are really important, a huge part of python, and really will teach you a lot if you can understand how those work. and that leads me nicely into the next thing, which is mutable and immutable data types. so it's actually not known to a lot of beginner programmers that a string is treated very differently in python than say a list. i can actually pass a list to a function and modify that list what's known as kind of in place rather than actually creating a new version of it. whereas with a string, i cannot modify the original string that i pass into that function. kind of hard to explain that without a good example, but that's what i'm trying to get at with mutable verse immutable. then after you've done that, i would learn about some of the common methods in python. so for example, if you have a string, how do you turn that string into all uppercase or all lowercase? how do you add a new element to a list or add a new element to a set, just kind of these basics, um, operations and methods, which are really easy to learn and find it, but that you kinda need to know before moving much, um, much further, sorry. okay. and then finally i would recommend having a basic knowledge of io operations, so input, output operations. and what i mean by that is really just, how do you read from a text file? how do you write to a text file? can you open a csv file, things that you may need to do, especially if you want to actually make some kind of real applications or maybe you want to store something or whatever it may be, you should know kind of those basic topics. so that is going to be the basic section for you guys. i know that's a lot and it sounds really overwhelming. i can promise you these topics are not that hard. just a bunch of things that i would recommend. you know, if you want to get on your way to becoming a master at python. so now moving out of the basics, we're going to head into these intermediate skills. now i'll quickly say that it's very important to practice these skills that you're learning. you need to actually implement this. you need to really use this in a coding project. you shouldn't just be watching videos that tell you about these things. you should be at least following along with those videos, making changes, actually writing that code with your hands by yourself. that is how you're going to get better. but anyways, let's go into the intermediate skills. i have my list here as well. the first thing that i'm going to focus on here and intermediate skills is object oriented, programming, understanding classes and understanding objects. so this goes a really long way, and this is something that you're going to want to understand, especially if you're using other languages other than python, uh, but super important. it's used pretty much everywhere. and if you only get one thing from this intermediate section, understand that you have to have a really good foundation and object oriented programming to really understand anything above this level. so after that, of course, understanding now how to work with classes, make objects a little bit about basic kind of design patterns in good practices when it comes to object oriented programming. and then after you've learned that i would recommend you move into data structures. so once you have a solid foundation of object oriented, you want to learn about data structures. now this is intimidating for a lot of people. i'll quickly say that. one of the ways i really practice my knowledge and data structures is using a site called algo expert. it is a paid platform. if you guys are interested in it, i do have a 10% discount code, but that is what i use to prepare for my coding interviews. so i usually talk about it just cause people ask kind of what my resources were. so i'll leave that in the description, but moving forward, you do definitely need to understand data structures, whatever way you decide to learn. that is totally fine, but understanding the cues, um, you know, hash maps, the stacks priority cues, whatever it may be, you just need to understand those topics cause they will come up and understanding the efficiency and time complexity in big o notation is actually really important when it comes to becoming a good programmer. next, after that, you're going to learn more about some specific python skills in my opinion, and i will learn about comprehensions. so in python, there's these really cool, fancy looking things called list comprehensions dictionary, comprehensions. i think you can do them for sets and a bunch of other things as well, but they're pretty much ways of doing kind of one liners. some people don't like them, but it's a very pathetic thing. and python is just meaning something that's pretty specific to python. so definitely learn about list comprehensions, dictionary, comprehensions, and just be able to at least read them and understand them. if you see them next, i would recommend you learn about lambda functions. so these are anonymous functions. they're actually super useful. i can almost guarantee you'll see them in immediately be like, oh, i could have used that here. and they're going to be used in the next thing i'm going to talk about, which is the collections module as well as map and filter. so what lambda is just to give it really a basic explanation, essentially, as an anonymous function, it doesn't have a name. you write it on one line, but you can use it like in really specific places. and it makes a lot of sense. so map and filter are methods that you can use on collections where you will use lambda within them. so you have to look at that to really understand, but that's why i'm talking about lambda after that. and after you look into the collections module, which has a built in module in python, which implements some of the data structures that i talked about previously, you're going to want to look into star arg and star star quarks. so when it comes to passing arguments or parameters, if you don't know how many you're going to be passing out where you want to set up decorators or more advanced things, you need to understand this thing called orgs, which is astrix arcs and then asterix, asterix, quarks. and that's a mouthful, but you need to know those. then i would recommend learning about inheritance. this kind of goes with object oriented programming, but i just wanted to list it as a separate thing in case people didn't think of that. but inheritance is very important as well. and just other object oriented principles like polymorphism and all those kinds of things. next, i would recommend learning about advanced class behavior in python. so things like dunder methods, of course, things like medic classes and more advanced stuff we'll talk about later, but there is these things called dunder methods. if you've ever seen underscore underscore and knit, that's an example of a special method in python. dunder stands for double underscore. if you ever see double underscore, eeq double underscore, that is pretty much implementing a higher level operation on a class. so just understanding how those works is really important. next, i would recommend you learn about pip. so python package manager, or whatever that actually stands for and how you can install modules and use third party modules in your python programs. that's really important then understanding python environments. so using like anaconda environments, for example, environment variables, and finally making your own modules. so actually separating your code out from this kind of one huge, massive python file into separate modules that make sense. now those are kind of the basic things for intermediate. one last thing i'll throw in is asynchronous programming. so async io, which is a built in module in python that could technically go into kind of the more advanced section, but i'll throw it in here just in case. so anyways is my list for the intermediate section. this definitely have the most amount of stuff. now we're going to get into some tricky stuff in the advanced and expert level section. all right. so next we're moving into the advanced section. okay. i want to be clear here that a lot of the topics in this section you don't really need to know to be good at python, right? to consider yourself a python developer to go work as a software engineer, you don't need to know most of what i'm going to describe here. these are kind of nuances, specific things in the language. and if you know the basic and intermediate stuff, you can learn this when you need to learn it kind of thing. so yeah, just don't be discouraged if you don't already know these things. i only recently learned them. i do have a tutorial series on my channel though, that goes through them in what i consider to be a pretty kind of digestible form. anyways, let's go through the list. the first thing i have is decorators. so if you have like a class method, a static method and ucl at static method at class method at login required, those are examples of decorators, things that decorate a function or a method. i think you can decorate a class as well. although i might be wrong on that. uh, we also have have a generators. so generators are a way to kind of utilize memory efficiently in python. let's say you have a really long collection or you're generating a collection rather than just generating the entire thing. you can generate one item at a time. if you only need access to one item from that collection at a time, or maybe two items or three items or something like that, you can use a generator to do that. next. we have context managers you've ever seen that with keywords. so like, you know, with open files, this that's an example of a context manager essentially enforcing that there's kind of a cleanup operation that happens when you break out of that context manager. next we have medic classes. these are too advanced, even really give a basic description, but they are pretty much how python classes actually operate and allow you to do some really advanced things with classes, hook into some things that you can't usually hook into unless you know about them. and then next after you learn about decorators, generators, context, pantries, and yeah, medic classes, i would recommend learning about concurrency and parallelism. this arguably could go into the intermediate section. this could be in a different order. i wasn't quite sure where to put this, but i definitely would consider this kind of an advanced topic. so say you have a cpu core that has four processing cores on it. so for actual cpu, how can you use python to utilize all of those cores? well, that's when you're going to learn about something called a global interpreter lock, and then you can talk about multiprocessing and multithreading so multithreading is essentially how do we let one part of our program kind of wait while the other program is doing something and how do we not block pieces of code, uh, when they don't need to be blocked. so that's a really vague definition of it, but that should hopefully give you a little bit of an idea. it's pretty much revolving around speed within the python language, then i would get into testing. so once you've learned all of those, i would learn about unit testing and how you can actually do test driven development in python or in whatever programming language, just understanding testing pipelines. and all of that is very important. then i would learn about how you actually build and manipulate packages. so packages are different than modules, but i throw this in the advanced section because if you're writing enough code that you could fill a module, you're probably sorry, a package you're probably advanced. and then finally in the advanced section, i added. this could probably go into the export or master level section, but ethan is essentially how can you write c code that can interact with python? so say i have a really performance, heavy piece of code or operation that needs to be done super quickly. and i don't trust python to do that for me, or python's just not capable. i can actually write that block of code in c and then link it up to python using a module called the. all right. so that concludes the idea and section. so now we move into the expert slash master section. now this section was really hard for me to come up with because i figured that if you made it pass basic intermediate and advanced, you can pretty much learn anything you want. and at this point you probably have an idea of what you want to do, and you don't need me to tell you, but i'm just going to go through some of the things that i would imagine, you know, the master and expert level programmers might do. and these are really specific. so i would say with, once you learn kind of all of these general things related to python, you know, a lot about the python programming language, maybe you even understand the interpreters and the compilers and lower level features of python. so understanding how python is actually built and really like the low level concepts that most people don't care to get into. i'd classify that as something that most experts and master level python programmers should know, then you're going to be singing, talking about what am i doing with python? so where am i using these skills? maybe you're a web developer. maybe you're making professional websites. maybe you're doing artificial intelligence and machine learning. maybe you're a data scientist. maybe you're working with microcontrollers. maybe you're scripting, maybe you're doing ethical. hacking is about a million different things you could do once you get to this level and where you're going to go as a master or expert, is really based on where your expertise is and what you actually want to do. maybe your writing breasts, api apis, maybe you're actually creating these artificial intelligence models or analyzing data for a company. and that's why i can't really give any concrete examples for master or expert level things you need to know in python. but i would say once you get to that level, you kind of need to focus in on one specific area or maybe you're good at all those things, but you need to now learn about modules. you need to learn about tensorflow or keras and actually figure out how you can take all of this theoretical knowledge of the language and apply that into some kind of job into some kind of business and actually use those skills. so i'm going to keep this section short. that's all i have for expert or master. i apologize if that may have disappointed you, but i think that's really the reality when you get that good. now you're doing something with the code, you know, right. maybe you're teaching it, maybe you're, you know, ai ml, data science, web dev, whatever it may be, you're doing something with it. so anyways, that has pretty much been my video. i wanted to kind of go through and just quickly list off all of the different topics and things. i think you should know if you're working towards becoming a master in python. so if this video helped you out, please do make sure you leave a, like subscribe to the channel. and of course i will see you all again in another youtube. yeah, yeah.