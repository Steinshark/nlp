we're doing this eight reasons why whatsapp was able to support 50 billion messages a day with only 32 engineers now this is a lot of messages i don't care what anyone has to say people are like oh you're just going from a to b how's this so difficult whenever there's 50 billion anythings you have to do you got to remember that what is it 84 600 seconds in a day that means every single second you're doing 591 000 messages that means every millisecond you're doing 591 messages every millisecond that's really really really really really really really fast right that's a lot think about it javascript can't even wake up on a timer when you tell it to wake up on a timer okay it will be off by a millisecond you just pushed back 591 messages because you were off by a half millisecond okay that is crazy in this post we'll be outlining the incredible story of whatsapp co-founder uh jan comb or and the engineering techniques employed to scale whatsapp quickly if you know somebody who wants to study scalability patterns considering sharing this post with them we're gonna share right now actually in january 2008 california united states classic 2008. everyone was there uh jan coleman engineer at yahoo why is that i swear to good to gosh he double hockey sticks what the he double hockey sticks is going on here the best engineers i know were early day yahoo engineers i think there is something i think there's something to it i think there's something in there do you know what i mean anyone that's been a part of the valley knows for a fact that when you were early yahoo this was like a sign of the great engineers like these are the great ones now everybody had this idea that you know google was the great place i'm telling you google was not the place in the valley everybody talked about the yahoo engineers my time there especially in the early 2013s i went from 2013 to 2020 was my time in the valley and during like 2013 to 15 that's all you heard about was yahoo engineers it's wild yui i worked with some of the creators of yui it's crazy it is crazy uh let's see applies to work at facebook rejected loser this was not the end he moved on with his life he buys an iphone in a subsequent year and immediately recognizes the huge potential of the new app store he decides to build an instant these pop-ups are just the worst he buys an iphone in the subsequent year and immediately recognized the huge potential of the new app store he decides to build an instant messenger with some of his former former co-workers from yahoo called it yahoo's skill issue they name it whatsapp the vision behind whatsapp was to replace the expensive sms brilliant really sms was expensive during those days remember those days do you remember that you used to have to buy like a thousand messages and then you had to like pay for more than a thousand messages isn't that wild like that's wild you had to do that crazy with one million people signing up each day the growth rate of whatsapp was mind-boggling agreed whatsapp was able to support 50 billion messages a day from 450 million daily active users with only 32 engineers so i do want to say something right here that makes this slightly less impressive in some sense we netflix supported billion hours of streaming with like um with less than 2 000 engineers for quite some time and part of that is because when you have a very narrow product you can also make a really big things happen on a very narrow scale so i don't think it's like so whatsapp is a very narrow product you're not trying to build the soup kitchen this ain't amazon you're building one thing and one thing well right so is this good is this bad i still think it's impressive although explosive product growth is a good problem to have yawn i'm just gonna call them yon and the team behind whatsapp had to adopt the best engineering practices to overcome the challenges in my opinion jan if you were on here be like oh yeah yeah it is yawn all that problem's so hard oh that's me doing a german accent which i'm very bad at yeah the german accent so bad oh yeah canceled all right all right now that we got done a speed speed running canceling today uh whatsapp engineering the whatsapp engineering practices to attain extreme scalability can be summarized as follows single responsibility principle the product focus was always on the core feature messaging yes i just i literally said this single likes single focused single focused yeah you got to put all your focus on it anyways [music] they didn't bother to build an advertising network or a social media platform yeah users needs stakeholders ideas this is great this is really great this is a great beautiful picture right here this is great i'm not blushing you're blushing uh they eliminate feature creep at all costs feature creep is when you add excessive features to a product that make it too difficult to use uh the minimalistic product requirements the team was able to prioritize the reliability of whatsapp over everything else absolutely we did this a lot in my early days at netflix i built out the social network feature in netflix way back in the day uh 2013 2014 2014 it came out darwin social mountain is what we called it and we saw a lift in streaming more people used our product and started streaming but because we were doing a rewrite coming up next of the website and the streaming lift was there but it wasn't huge we literally just scraped the feature because why support a feature long term right wasn't worth it get it out get it out technology stack erlang programming language was used to implement the core functionality of whatsapp servers for the following reasons of course here it comes functional bros shy rye come on shy rye you want to talk about elixir now shy right shy right it's not oh campbell kind of sounds pretty stupid to me sounds kind of lame just saying it sounds kind of lame not oh camel not my problem that's what i always say provides extremely high scalability with tiny footprint monads okay we're gonna do it we're gonna go to imager uh we're gonna go to imager it just feels like the right time to do this right uh ancient aliens guy right this just feels like the right one we jump onto here this feels like a good time to do this and just toss in monads it just feels like the right thing to say in the moment you know sometimes you just gotta do it and you just generate the meme and you just save it and you moan ads it just feels right you know and then you go to you go to what appears to be twitter.com but it says x but we're still at twitter nobody knows what's actually happening with this whole twitter.com business take this post it and there you go that's how you become a successful social marketer okay that's when i was looking up stuff about that so there we go we're back in we're back in blazingly fast memes monads a less problem that's true uh uh joe armstrong did not uh regard erlang as a functional programming language he regarded it as a concurrent programming language above all else oh that's actually extremely interesting take huh okay that's cool that's kind of like a cool way to think about it uh extremely high scalability with a tiny uh footprint supports hot reloading that's cool hot reloading is a big thing the faster your stuff happens obviously the nicer it is really like that threads our native feature of erlang unlike java or c plus where threads belong to the operating system the native threads in erlang make context switching cheaper because there's no need to save the entire cpu state in other words green threads but green threads have been implemented everywhere at this point how reloading makes it easier to deploy code changes without the server restarting or traffic reduction a redirection oh interesting you can just hot reload that damn thing live and so in simple words hot reloading offers extreme high availability that's cool just literally go that's cool that's cool why reinvent the wheel do not reinvent the wheel either use open source or purchase a commercial solution sorry i'm too busy yeah okay fair fair uh egypt baird is an open source real-time messaging server written in erlang whatsapp was built on top of eduard um really that stands for edgebeard which is actually edge lord with the beard i think is what it means the team extended edge beard by writing uh some of the core components to fit their requirements what's app leveraged third-party services such as google push to provide push notifications yeah that i mean that seems reasonable cross-cutting concerns cross-cutting concerns are the things that affect many parts of the product and are hard to separate for example monitoring and alerting the health of services a huge emphasis was given to cross-cutting concerns to improve product quality okay yeah yeah i mean these all look good i love your circle thank you for that continuous integration is a practice where engineers regularly merge their code changes into a central repository continuous delivery is a practice of automating or automatically deploying your code okay whatsapp employed continuous integrations and continuous delivery to improve their software development process with hot reloading okay so i mean this is just called up good prep just like everybody everybody does this okay that's not what are you trying to impress me at this point you trying to impress me what are you trying to like make me feel happy about something come on come on come on uh scalability horizontal scaling is the process of increasing the number of machines in the resource pool vertical scaling is the process of increasing the capacity of an existing machine such as cpu memory diagonal scaling is the hybrid of horizontal and vertical scaling where computing and resources add both vertically and horizontally okay whatsapp utilized diagonal scaling uh to keep costs and operational complexity low this is actually really good because i do think i do like the idea of diagonal scaling if you have the ability to use all your processes like unlike a node application in which you have to treat you have to like come up with this highly theoretical idea of how you're supposed to handle how many node instances are on a machine and you have to go all confusing as opposed to a single language managing at all i like the idea that you want to do both right because a more expensive machine might be able to handle three times more of the load but cost only twice as much as the smaller ones so there is something really good here right there's something very very good here free bsd operating system was used to run a whatsapp neckbeards for sure uh because i mean i guess they are using erlang i mean they're already there they're already there not surprised at this point because they had previous experience with freebsd while working at yahoo in addition freebsd offers a nicely tuned and reliable network stack yeah i've heard really great things about the network stack freebsd was fine-tuned to accommodate two plus million connections per server the kernel parameters such as files and sockets were modified class classic gotta bump that you limit dog uh the servers were over provisioned to handle sudden traffic spikes and keep head room for failure such as network partitions or hardware faults okay the metrics such as cpu contact switches and system calls were measured the bottlenecks were identified and eliminated this was performed at regular intervals okay the continuous feedback cycle tremendously improved the performance of whatsapp load testing is the process of measuring i mean by the way this all sounds really good right you use the right they i mean it really sounds like they used the right tools for the job right you have a language that can hot reload itself in production you used the operating system in which is like known for being best in class networking you offload everything you don't want to build yourself and you just crush i mean this it seems this seems and then you can continuously try to improve performance this seems like the right model for a very simple app right i don't understand anything we'll start understanding then load testing is the process of measuring the performance of a system under anticipated load uh load testing was performed to identify single points of failure yep that's good uh load testing was performed by either generating artificial production traffic or configuring dns to redirect more traffic to a particular server classic dns is always the issue i i always worry about anytime you touch dns terrifying it's just terrifying okay small team size the communication path between engineers increased quadratically as the wow quadratically um pound mini daddy redirection that's what it stands for uh as the team uh grows in size uh this is a recipe for degraded productivity i actually agree with this heavily the more i have to communicate the harder it is like just like that thing i was talking to you earlier about about uh having a schema and a data output and i just wanted the schema decoding function that was used clearly on a website and this website was was handled by like six different teams and i must have communicated with at least 20 to 30 different engineers none of whom could actually tell me i went to several slack rooms and at the end it was more efficient for me just to rewrite the decoding process than to figure out what the hell happened to that library or whatever they used right like there just does come a point where duplication is a requirement as engineers grow and it's very very difficult the size of whatsapp engineering team was a was a small kept 32 engineers right whatsapp uh so i do think that this is a huge w when you have a narrow product plus few engineers you can accomplish an incredible amount of stuff i don't know if you can say it's a fully connected graph like this but it is something that really does scale disproportional uh whatsapp is considered one of the most successful instant messengers on the market in 2014 whatsapp was acquired by for a whopping 19 billion usd by the same facebook that rejected yan according to forbes jana has a net worth of 14 billions in 2023. so many commas um moral of the story facebook loves spying on your ass thanks for the moral of your story i appreciate that a good reason by the way this is a great reason to use signal okay signal is designed in a way that it's unacquirable right signal use signal because guess what it's actual encryption that takes place not in some place in which is saving all your data love it love signal hashtag ad this is not an ad actually i just use signal all the time because it's way way way way way good right signal is good but it could be better of course it could but that's what happens when you make zero dollars signal do you know that signal is ran off of charity do re you realize that right signals ran by the the nsa dude greatest anime betrayal of all time the name is i've actually never used whatsapp i mean i i was a part of it one time and then i just never got it again because it just made me feel uncomfortable and i didn't really like whatsapp this was like back in 2018 when i was text messaging some of my yahoo former yahoo uh co-workers at netflix it was very fantastic again