in this video i really want to briefly bring up why you should never trust python optimizations and there are many reasons you should not trust them and i know i make a lot of videos about python optimizations on this channel but i also want to bring up that there's a lot you need to keep into account when you're actually trying to optimize python code now python isn't really a language people think about when they think about optimizing code it's not the fastest language in the world and in fact it's probably one of the slowest it gets the job done with minimal effort but that doesn't mean you shouldn't write in python and that the code can't be clean and it can't be optimized because there are some optimizations that are indispensable to python and i'm not talking about micro optimizations because those can easily become a huge waste of time but sometimes you can rewrite a block of code and that can save you seconds of time per execution and that's a huge win so those are the kinds of optimizations we are are looking for but the first thing i really want to mention is that optimizations can become biased and they are subject to change over time with computers and python versions things can easily change throughout time so an optimization that worked before might not work in the future because when you're optimizing in python there are several factors to consider one of them might be your computer resources what's happening at a certain time running tests in python are sometimes not as reliable and straightforward as they look because if you're downloading something or your computer is doing some calculation it might perform the test a bit slower than if it was not doing that so you need to run these tests many times and again the versions of a package or the versions of python can change the speed of your code python 3.11 did optimize a lot of random aspects of the language so some of the optimizations that we're working in previous versions are just built into the new version but the whole reason i decided to make this video videos because i read a comment or actually a post by jamillian in stack overflow and that inspired me to make this video because what he says pretty much is that any benchmark can lie it can be unprofessional marketing or it can be something else and it's very important to understand that a lot of optimization videos concentrate on a specific aspect of a certain feature it's very rarely going to be good in every single case so it's very important you perform these tests in your own code and don't blindly follow whatever they are promoting but continuing with this post by jamillian he really points out a lot that can be wrong with tests or with optimizations so what you should get from this is that you should always test the optimization for yourself in your own code base because even if i show you in my video or someone else says okay this is extremely fast and optimized there's a big chance that if that was maybe a year ago that it might not be fast in your code base or it might have been completely biased it's very easy to produce biased statistics so it's always important that you test it in your own code and see if that actually makes sense for your code base and i've been subject to making optimizations that have been broken in future releases of python i believe one of them has to do with using dot notation so to sum up this video never blindly trust python optimizations because again if it's a year old or maybe even a week old and something changes in a python version or in a package version or computers advance in some sort of way the optimization might not be as big as it seemed or might not be an optimization at all and again some optimizations only work in certain cases so even if i bring you an optimization on this channel it's very important you test it in your own code in those scenarios and i do my best to bring non-biased tests and that is really hard to do so sometimes you'll see that i am missing maybe a detail or two so there's a lot to learn also from trying to optimize code and in general always try to make your code work before trying to optimize anything i like to look for optimizations because i like to make videos about optimizations and i think that might be one of the only scenarios where you should look for optimizations before you create the code so prioritize your code first make sure it's actually working because a working product is much more valuable than a non-working product it doesn't matter how fast or slow your product is get it working optimize it later but anyways do let me know what you think about optimizations in python what was the last optimization you learned in python and whether it makes sense to optimize in general but anyways with all that being said as always thanks for watching and i'll see you in the next video