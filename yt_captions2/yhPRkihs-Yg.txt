hi everyone in this video we're going to be adding the combat animations to our game so i want to start by replacing this player file with the latest version so i need to never get over to earth is stored on the hard drive and just drag in this new file and replace it okay so going back into unity this will take a moment to reimpose and when that's done i've got a bunch of errors here but i can safely clear those i think now if i go onto the player mesh consists actually disappearing and reappearing and i think this is just happening because we changed the rig a little bit in the last blender episode so i'm just going to delete this from the scene and drag it back in and it should be happy now so on this player object do you need to set up the player animator and also just reconnect this target mesh of the equipment manager to the body master alright now go to delete all of the equipment except for the sword in the shield since those are new and i want to set up items for those so delete the rest of these right prefab instance that's fine and now i'll go into the item meshes folder and just drag in the shield and the sword and then going into the equipment sprites folder i'll drag in my sword and shield icons just like both of these and change that extra type to sprite and apply that okay so now going into the items folder i'm going to create a new equipment item i'll call a sword and i'm gonna have to set up all these properties quickly so that's called sword there as well the icon is the sword icon of course the equip slosh is weapon i'll give it a damage modifier at 5 and then for the mesh we just drag on that sword mesh we created and doesn't cover any mesh region so we can just leave that then i'll do the same thing for the shield item so i'll name that here set up the right then set the equips lot to shield give it some armor modifier and finally set up the mesh so just dragon shield okay so we have got the item set up now i'd like to be able to pick this off the ground like we're currently doing for the e armor here so we need a preview version of these shield and sword meshes because when it's a skinned mesh renderer like this we can actually position this in the scene so back a few episodes we created this script for converting this the skinned mesh renderer to a mesh renderer mesh filter pair so i'll select the shield and the sword say add component and can just search for this mesh from skinned mesh script that we created i'll add that and it'll set that up nicely for us so we've got these two items here i think what i'll do is i'll grab the plate body and the plate legs just command d to duplicate that and go to drag this over here and then just position at roughly where i want and i'll rename this to sword and shield get rid of these preview objects and replace that with these guys let me reset the transforms on these i want to change the rotation here same thing for the shield oh what am i doing when you reset this first and then rotate that around okay that looks fine and then we only set up the actual items on each of these so instead of referring to the plate body it refers to the sword and the shield refers to the shield okay so that should be working can modify these bounds if we want but not too bothered for the moment let's try this out still enter play mode and mean to right-click on these two to pick them up i'll just grab some of the armor as well might as well get all of it press ice you go to the inventory and get an equip of the shield the sword and all of the armor and run around looking very intimidating okay let's not bring in the combat animations so i'm going to go on to the player go into the animations tab here and just add six new animations so we've got the grip left grip right then as a combat idle and then an unarmed punch attack and then two sword attacks all right the combat idol should have looped i'm set to true so once we've done all that can just press apply now i want to start by getting the gripping setup so basically whenever the character equipped something one of his hands the appropriate group animation should play now that grip animation should only affect the hand it shouldn't override the animation on any other part of the body so we're gonna be creating an avatar mask i'll call this left hand and under the humanoid section i'll just kick off to the sides here to deselect all these regions and then just select the characters left hand and i'll duplicate this college right hand and once again under humanoid i will now deselect the characters left hand and instead select the right hand okay i'm gonna double click on the player animator and in the layers section here i'm going to click to add a new layer which i'll call right hand and go into the settings here i want to choose the right hand mask and then i want to find the grip right animation and just drag that in there do the same thing for the left so set the mask yeah - left hand of course and dragon the grip left okay so our base layer is layer zero then the right hand is layer one left hand is layer two so by setting the weight of layer two to one we can make the character grip an object and same thing with the weight of layer one for the right hand so let's go into the scripts and i'm going to create a new c sharp script called the player animator which i'll open up this script is going to inherit from the character animator so i'll just press command d to head over to that script and i want to make things like the animator protected instead of private so that the derived class can access it and similarly these methods should be protected and virtual so that they can be overridden alright so now i'll save that head back to the player animator class and in here i want a method that gets called when the equipment changes for the player so i'll call this on equipment changed it can take in equipment new item and equipment old item like so and in here let's start by handling the case where we're equipping a new weapon so we want to set the weight of the right hand layer to one so i'll say if the new item is not equal to null and the new item has an equip slot equal to weapon then we can say animator dot asset layer which layer with an index of 1 weight of 1 then let's handle the case where we're unequipping a weapon so i can say else if the new item is null so we're not equipping anything in its place and the old item is firstly not null and also it was a weapon so equip slot is equal to equipments dot weapon then we want to set the layer weight to zero so animator dot set layer weight 1 comma 0 all right let's just copy-paste this for the left hand so change equipments lot dot weapon to shield in both of these cases and instead of layer index 1 it's now lay index 2 okay now currently this on equipment changed method isn't being called from anywhere so let's subscribe it to the on equipment changed event in the equipment manager class so i'm going to override the character animators start method like so just call base dot start and then i'll say equipment manager dot instance dot on equipment changed plus equals our local on equipment change method okay so we can save that go into unity and once this finishes compiling can go into the player object and remove the character animator and add instead the new player animator all right i'm going to go into play mode pick up the sword in the shield and i'm quickly going to see in view and just zoom in on this so we can see it a bit better so opening up the inventory i'll equip the sword you can see the right hand closing around that if i cup the shield the left hand closes and if i press you to unequip then the hands go back to their neutral pose ok so next up i've actually got the character to go into his combat stance when he's fighting so i mean she opened the character combat class and this is going to have a public pool in combat which i'll make private to search and then i'll have a constant float combat cooldown so i can really set that to five seconds basically if the character hasn't performed an attack in the last five seconds then they'll no longer be in combat so let me also make a flow chair last attack time and so in the update method if time dot time minus the last attack time is greater than the combat cooldown then we're no longer in combat so set that to false and if an attack is performed then in combat we'll be set to true and the last attack time will be equal to time to time now i would like in combat to immediately be set to false if the character kills its target so in this do damage routine after taking the damage from the opponent stats i'll say if stats dot current health is less than or equal to zero that means we've defeated our opponent so we're no longer in combat alright so saving that and going into the character animator i'll now create a protected character combat variable and i'll assign that in the start method so combat is equal to get component of type character combat and then in update we can say animator dot set pool this pool will be called i guess just in combat and we'll set that to combat dot in combat all right i'll save that go into unity and open up the player's animator here i don't you go to the base layer and i also want to find this combat idle here it is so i'll drag that in and going into the parameters again to add a new bull called in combat okay so we can transition locomotion to combat idle if the in combat pool is true but then the character also has to not be moving for this transition to occur so i'll say speed percent is less than some small value may be 0.1 okay i'll set has x at time to false because this transition can occur whenever and then you can adjust the duration of the transition that then we transition back to locomotion if the in combat pool is no longer true once the 'unless doesn't have by particular xr x will set that to false but then it must also transition back if the character starts moving so we can't just add another condition here because this is an end condition and what we really want is an or condition so we can just add a another transition coming back so this one here is our in combat is false and we can set this one once again removing has x at time to be speed percent is greater than say 0.1 so let's try this now i will grab my trusty sword head over to the enemy and once i attack him see we enter the combat stance and now i haven't attacked for a couple of seconds so i returned to my regular idle pose and if i run away then it also returns to the locomotion blend tree all right let's finally get these attack animations set up so i need to add a new parameter which will be a trigger called attack and then i'll drag in one of these attack animations doesn't matter which one and this can be triggered from any stage so i'll just set the condition here to attack and when it's finished playing it will transition to the ii combat idle so i can just adjust the duration of that now i say it doesn't matter which clip ii use because we're going to be replacing this clip from our animation script based on what weapon the character is currently using so let's go into the character animator in here we can have a protected animator override controller i'll just call the override controller and we're going to assign that in the start method so override controller is equal to a new animator override controller we need to pass in our runtime controller just say animator dodge runtime animator controller and then animator dot r on time animator controller is equal to this override controller and this just allows us an easy way to swap out any of the clips in our animator for some other clip so to use this we just have to say override controller and then in square brackets the name of the clip that we want to replace so say for example the punch clip is equal to and we can assign some other clip okay but we're not going to do that in just yet first we need a array of clips for our tech animations i'll make a protected animation clip array we'll call this the current attack animation search and then i'm also going to have a public array of animation clips this is gonna be called the default attack animation search and in the start method i'll set current attack animation set equal to the default set so the idea is that most non-player characters are only going to have a single attack animation set because unlike the player they're not going to be changing equipment so their current attack animation set will always be equal to the default attack animation set but for the player whenever the equipment gets changed we can sort this out for a new animation set all right so i'm going to create a protected virtual void here in the character animator called on attack and this is first of all going to activate the animators attack trigger so we can say set trigger attack and then i want to swap out the default attack animation for a random animation in the current attack animation search so you can say int attack index is equal to random dot range from 0 to current attack animation set dot length and then i'll say override controller and i want to pass in the name of the default attack animation so in this case it was punch and i want to set this equal to current attack animation set with an index of attack index now i don't particularly want to hard-code this name here what i mean said grrah have is a public animation clip called the replaceable attack animation and then i will just get the name of that clip here okay going into the player animator we're going to need to be able to tie certain animations to a certain piece of equipment so i'm going to create a public struct called weapon animations this is going to hold a public equipment for the weapon and its associated animation clips so there will be an array of animation clips i'll just call it clips and i want this to be serializing inspector so i'll add the system serialize all attribute and then make a public array of these weapon animations now it would be nice for these to actually be in a dictionary so we can't have dictionaries in the inspector at the moment but we can just populate it at runtime so dictionary equipment as the key and animation clip array as the value call this the weapon animations dictionary and then in the start method we can just loop through all of the weapon animations so for each weapon animation a in the web animations array i'll say weapon animations dictionary dot add passing 1/8 of weapon and it's clips ok could have to initialize the dictionary first it's equal to new dictionary ok so then when the equipment has changed if we're equipping a new weapon then we want to check if our weapon animation dictionary contains that weapon so i'll pass a new item if it does then we want to set our current attack animation set equal to the set in that dictionary with a key of our new item alright now if we're unequipping our weapon we just want to set the current attack animation set back to the default attack animation set ok let's save that go into unity wait for her to compile and then can come into the player animator here so this clip that i used as my sort of replaceable animation clip here is the punch so i'm going to drag the punch clip into the replaceable attack animation slot then the default attack animations well this is just the punch at the moment and weapon animations we've only got one weapon so just add a single element there that is the sword so there are two items at the sword and it has two clips that is sword attack 1 and sword attack - i'm getting a tiny bit ahead of myself still need to come back into the character animator quickly and actually subscribe this on a tech method to the on attack event in the combat script so in the start method just say combat dodge on attack + equals our local on attack method ok so now we should will to save that and i'm quickly gonna go into the enemy and just give it a little bit more health say a hundred so i can test out these attack animations without him dying too quickly so let me just grab my equipment i'll put this stuff on and head over here right click got a little punch and then i quit the sword now we're randomly going between the two attack animations here if i unequip then we're back to good old-fashioned punching ok that is it for this episode there will be another integration video following shortly so until then cheers