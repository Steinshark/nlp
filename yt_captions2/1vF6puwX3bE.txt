web components will outlive your javascript framework this is a bold this is a bold claim this is bold ass claim especially since uh google has recently started leaning not into web components but leaning into these frameworks starting to build things out i don't know if you saw at the nextjs conference but they even had like a google uh dev real dev community person building components for the react ecosystem i know it's crazy i can't believe they're building it not for htm x which is what i would do i'd build it for the htm x ecosystem which means you don't actually even have to build anything which is fantastic i mean imagine you all you have to do is do nothing and your job's complete that's htm x but whatever okay so our web components going to outlive your javascrip framework who here a type one in the chat if you hate web components there's approximately 1300 people right now in chat not a lot okay type 69 in the chat if you are ambivalent sl love web components there's a lot of people if you're anything like me when you're starting a project there's uh a paralyzing period of indecision while you try to figure out how to build it literally never happened to me okay don't hit me with the ey ladies um this literally doesn't happen to me whatever is the current thing i like i support the current thing npc which is me i i just i just go straight into that in the javascript world oh gosh there's like 9,000 choices that usually boils down to picking a framework do you go with the all reliable aka react uh or something slimmer and trendier like spelt or solid how about kicking at old school with a serers side framework and htm x now now we're talking it's not even old school it's old school it's new school it's all the schools okay the best part about hados is that you can actually find articles of people talking and arguing about it on stack overflow in 2015 there's articles by the guy who like creator of rust writing about it in 2011 can the creator of rust be wrong i don't know just saying uh when i was writing my crdt blog post series i wanted the uh let's see i knew i wanted to include interactive demos to illustrate the concepts here's a toy example of pixel art uh editor a collaborative pixel art editor oh cool wow look at that thing go it's a look it's a canon do you like my canon i drew a canon um even though i have written before i still believe that react is a good default option the constraints of a project should deter the technology decisions in this case i choose to use vanilla js web components i want to talk about why there is there was one guiding principle for this project although they happen to be built with html css and js these examples were content not code hey i like that i actually really like this i like that he points this out the thing is is that content is a very unique way in which you code do you know what i mean what i build to show somebody is much different than what i build at work they just look different they just simply will always look different you don't think about all of the steps that you need to do to support and maintain it in a long reliable fashion uh in other words they uh they'd be they'd be handled more or less the same as any image or video i would include in my blog post they should be portable to any place in which i can render html as of 2023 this is uh built with astro before that it was built with my own static site generator nice before that hugo before that a custom cms written in php is that wordpress uh and before that tumblr movable type and wordpress and i'm sure i'm missing some in between i really like astro but it's reasonable to assume that this website won't run forever this is a good take this is actually i love when people that have been in the industry for a while go through all the things that they have created that are the same just new technologies underneath the hood like i think this is really really good for people to see especially new people that think react as some sort of eternal like they think it's raw the sun god of egypt and they just think it's going to live forever and then we're going to have some sweet series called stargate and it's going to be awesome and then you're going to have that one actor which i forget in the original stargate who had the battle raw and that's not going to happen okay it's not the same it's just not going to happen instead you're going to have this continuously updating newer better slicker oilier version stargate hdmx go temple we pretty much have most of the things i should mention i knew you a man of taste you know judo i didn't say stargate the series stargate the og with raw um one thing that may has made uh these migrations easier in recent years is keeping all my content in plain text written in markdown rather than dealing with the uh invariably convoluted process of moving content between systems this is good also i like this too in a sense that the more things you can keep in a generic format that don't need any sort of special handling like performance is just not a concern in a in in a personal blog you're not you're not trying to write the greatest personal blog you're trying to write something that you can just keep on distributing over and over again and markdown makes perfect sense exporting it from one importing into another fixing any incompatibilities maybe removing some things that i can't find a proper way to port over i drop my markdown files into the new website and it mostly just works where's the trademark where is the trademark oh gosh i'm getting hit with the cdn image whenever this happens you know i got to look at it i do support the current thing i support the current thing okay this might become my new twitter profile we don't know yet uh in most let's see most website generators have a way to include more complex markup within your content and astro is no different by the way i really like where this article is going and i have a lot to say i'm just kind of i'm trying to let the article cook why are you just not stay stay erect boy i have a lot i want to say i just don't want want to uh i don't want to say it yet okay so let's let's keep on going and then we'll we'll we'll we'll get there those components have access to all the niceties of the astro build system you can write html css and js in one file and astro will automatically extract and optimize everything for you it will scope css selectors and compile typescript and let you conditionally render markup and do all sorts of other fancy stuff the drawback of course is that it only works inside astro in order to switch to a different site generator i'd have to rewrite those components i might need to split up html cs njs or configure a new build system or find a new way to scope styles so astro specific features were off limits no matter how convenient i actually i actually am now moving further and further onto this person's side because i came into it like 50/50 honestly i came into this article going can someone really convince me that web components are better than than than all these frameworks um i mean i have my own personal belief that they are better simply for the fact that you're not using one of these incredibly bloated frameworks and you can just learn how to use your own ecosystem but instead it's about like reusability it is so true that how much of this site has been changed over and over and over again given the fact that he's been on these all these different versions right i absolutely love this take this take is really really good in the sense that there is a benefit to avoiding the continuous churn of modern javascript you know what i mean uh the drawback of course let's see hold on uh but markdown has a secret weapon you can write html inside of it that means a fancy interactive diagrams i wanted to add would just be as portable as the rest of my markdown as long as i could express them as plain html tags web components hit uh hit that nail square on the head this is good uh they're they are a set of w3c standards for building reusable html elements you can use them by writing a class for a custom element registering a tag name and using it in your markup here's how i embedded that pixel art before this is real good that's the honest to goodness html i have the markdown in this post that's it there's no special setup i don't have to remember to put specific elements on the page before calling a function and load a bunch of extra resources of course i do need to keep the js file around and link them with the script tag but that goes for any media there needs to be some way to reference it within textual content with web components once the script is loaded the tag name gets registered and works anywhere on the page even if the markup is present before javascript runs oh this is so good this is so good web components uh encapsulate all their html css and js within a single file with no build system necessary having all the code for a component in one place significantly reduces my mental overhead and i continue to be a huge fan of single file components for uh their develop developer experience while components aren't quite as nice uh to write as their astro or felt counterparts they are still super convenient i do agree with this like i don't like the process of writing web components maybe that's where this whole lit component thing is and you just accept the react render way of doing things i'm dangerously close to influencer money on this one this is true i don't know i' i've really enjoyed it with htm x i've used uh some web components and it's been honestly a a a great experience using using that because you can just drop things in and it is pretty dang fun like i i do enjoy it uh obviously the bad part is is that like maintaining the state and understanding your web component can be kind of a pain in the ass right there is definitely something to it that is not trivial but it also makes reusability pretty high once you understand it so i i'm totally on that team that it's not simple right pixel editor okay pixel art demo uh constructor do all this stuff render attached uh shadow closed resolution bam bam uh alice bob pixel editor bam bam debug here we go oh this looks like a lit element by the way this has to be a lit element yeah this has to be a lit element this do shadow do no it's not never mind they're just setting it right here here's all this information i don't like i in general i tend to dislike uh template development just because often template development has no auto completion uh i'm sure people will figure out kind of how to do this like hey let's start uh some basic autocompletion start your lsps whenever you're inside of a uh template string and i'm you know tailwind is just going to work right you're going to be able to use tailwind lsp in here the hdmx um the hdmx lsp will just work tends to dislike template development oh yes when i say template tj uh template string in javascript i thought you'd understand that given the context but uh clearly you didn't tj tj biggest biggest fan of no context template strings are just not that great uh they tend to just be harder to work with they they feel good at the beginning but i always kind of go back and forth on it but i do like this right here this is nice this is really really nice because then you can just drop this in wherever wherever the drop in was i forget he just had the drop in somewhere uh right here that bam i don't know why i didn't see it i love this i love that let's see though it's still early web components have a declarative shadow dom for ssr and there is a similar uh there are similar api to react context api coming soon yeah i don't think i'm going to use uh the thing is is when i'm doing serers side code i don't want to use javascript just hands down i don't want to use javascript i want to use something other than javascript so will i use web components on the back end probably not i just don't really think i have a good reason to use web components on the back end because that means that i'm going to be using javascript and i want to avoid that i want to use go i i want to like if i had infinite time i'd learn elixir and really verify if elixir is that great we'll see no js users in shambles uh i like rust rust is great rust is just really hard for demonstration purposes rust is really great for a youtube video it's really bad if you're trying to show somebody something because people just there's like a momentum problem with rust with go you can just show a piece of go code and most people can kind of figure it out right they can kind go oh yeah yeah yeah yeah yeah i get that it's inconvenient but rust on the other hand you show them a piece of rust co and they're like i don't get it i don't get any of it right uh another nice thing about web components is shadow dom which isolates the component from the surrounding page i think shadow dom is often awkward when you want to share styles between your components and the rest of your app but it's perfect when you truly want everything to be isolated just like images and videos these components will look and act the same no matter where they are used i do like that uh i look at rust and i'm like i don't want to get it exactly that's the problem about rust is that no matter what when you see a piece of uh go code here uh htm x sub2 there we go uh like even this this is some go templates you effectively know what's happening here this is pretty straightforward to know exactly what's happening here you can see i've defined a block it ends right here i've defined another one it ends right here i'm doing like a loop over it i'm checking an if statement like all of this is pretty much if you have any programming experience this is not hard to understand what's happening you know uh you jump over here into this like new data is that hard to understand i think pretty much anyone with any basic programming experience we'll look at this and go yeah i know what's going on here like this this ain this ain't hard this ain't this ain't hard to understand what's happening here and that's the one nice part about go is that it takes almost no skill to understand and that's one thing that's very nice rust on the other hand takes a lot of skill right uh this is kind of cool sorry they're not just like images and videos web components can expose attributes that allow you to configure them outside your uh uh from the outside this is true you can actually put in the color yeah exactly i love the fact that he's showing this i hate the fact that he has cursive in here do you want me to have dyslexia nightmares do you want me to do you want me to hate my life apparently that's kind of cool that's kind of cool i i yeah but i love this right i love the fact that this exists right i love that you can do these kind of things um here's the markup uh that is used for the uh attributes to alter the components behavior setting the resolution to 20 and setting a debug information on every pixel nice debug resolution 20 boom if you're wondering uh what uh those calls to get attribute and has attribute were doing in the web component class now you know this is is particularly useful when reusing the same component for different stages of a tutorial allowing me to enable certain features as the tutorial progresses that is super cool again i i'm loving this idea of web components and how uh he's building up this idea of how to use web components and to use it well i like all this i love all the examples right i think all these examples are awesome would i want to just use web components for every website unsure do i like the example given right now absolutely i' to i i still haven't done a large system with web components i've only ever done small things and so we'll get there we'll get there if you're wondering let's see hold on the other part of the equation was using vanilla js there are frameworks that compile to web components most notably lit uh although i'd call it more of a library but also stencil felt and probably others i'm sure they're all wonderful tools that would have made my life easier uh in a lot of ways whoopsies hold my wife's calling me but frameworks are dependencies and dependencies have a bunch of trade-offs in this case the trade-offs i'm most worried about is maintenance all right so i'm actually really excited about this topic this is a topic that's becoming more and more exciting to me which is using some amount of js doc to type no build systems has anyone else been thinking more and more about this anyone because i know i keep seeing it more and more on twitter and i've been playing around with it myself which is just like i don't want to always have typescript for everything because you have to have this unnecessary process within uh your build system especially on something small which you're just trying to show something off instead i like the idea of being able to just put in types when i need them and that dictates everything i've just been thinking about this a lot which is just i let's see yes i hate types in components visual code js do syntax is awful ah i'd say you're just not old okay for those that grew up in the java world i would say that uh js do is perfectly fine uh for those that don't understand people see people are confusing me i am not dhh i actually in fact i said the exact opposite of what dhh is saying i'm actually saying use types just don't use typescript which is kind of funny because i realized that there's a huge there's a huge gap for people when they're learning and understanding and they think the world exists in a specific way here let me just uh test.js uh function uh let's go like this fu l all right so right now l has nothing javascript can't do anything about this right if i throw this up in here my by the way i i got to get a a nice little thing let's let's call it an html element right and i go in here and i go like this l uh what can we do now with this thing well first i got to close off my comment you know what i mean um there we go now l is an html element now i have all the typings and everything this goes through typescript server right this is fantastic i i want to get i want to get some leis snippets where i can kind of generate these super super fast but this is fantastic right yes typescript takes less characters absolutely but typescript requires a build step this requires no build step wait js doc is just java docs but for typescript yes yes it is and so this is fantastic so you get all you get all the autocomplete you've ever wanted but you don't have to have a build step and so it's like when you're doing these little when you're doing a little bit of javascript typically what i'd end up doing is i'm always writing these dumb scripts and i want to use types like i hate not using types okay so that's why like i said i am not dhh i hate typeless programming so what do i end up doing i always end up writing these stupid uh typescript things then you run them with bun and then the moment you need to distribute it to somebody else you have to explain to them why they have to install bun or dino to run your script and it just makes absolutely no no sense but then you're just trading one inconvenience for another no it's literally the opposite i'm i'm getting the convenience of types without the build step i'm dropping one i'm dropping a requirement and maintaining the same things and second off you can also only type the things you want to type some things just aren't worth typing right some things just aren't worth typing and you don't need to type them um and that's fine anyways i've just been playing with this more and more uh uh we can shorten js docs to jsds uh yes we should i think you're right just use any then you can use any but you still have to say any let i equals number equals zer why well you get the idea though anyways it's just a it's just a thought just a thought i've been having you know just a thought just been thinking uh nice for explaining uh jsds yeah jsds approved absolutely get these jsds out there anyways and the cost accumulates over time it would be one thing if i plan to continually work on this code it's usually simple enough to migrate from one version of a dependency to the next but i'm planning but i'm not planning to ever really touch this code again unless i absolutely need to and if i do ever need to touch this code i really don't want to go through multiple years worth of updates all at once this is good i mean dependencies come with their own problems uh i've learned that lesson the hard way when i built my online museum wiping the cobwebs off code uh saved on laptops that i hadn't uh had had been turned on in a full decade the more dependencies a website had the more difficult it was to restore this is good i have been building on web for almost 20 years that's long enough to witness the birth rise and fall of jquery i started before jquery and i have continued to program post jquery node.js was created forked into ijs and merged back into node backbone burst onto the scene was quickly replaced by angler js which was replaced with react which has been around for only half the time and still uh gone through like five different ways to write components remember when it was just like hey man look at this we got ourselves a component it's like a class with some life cycle hooks it makes building components easier one year later hey man we would never use some of these life cycle methods we're going to we're going to we're going to rename that into unsafe component will receive props we use component did mount now if you're going to write components of course you're going to do it this way one year later nobody actually does that anymore we're all about functional components okay okay so functional components are the way to do things okay they're just the greatest thing ever one year later so use effect wasn't quite exactly what we thought it was going to be uh so you shouldn't use use effect anymore we don't know what to use yet though one year later react on the server is the greatest thing that has ever existed it actually is good trust us this will be the one this is finally the savior we have finally created it we have finally achieved pinnacle front and back end sure your server component can produce a client component which has a rendered server component which has a client component which has a rendered server component inside of it it's not like it's going to be hard to debug or understand what's going on it's going to be fantastic this is truly the pinnacle of front end okay you just don't understand it cuz the front end should have always been on the back end one year later so htm x is actually a really great library we had no idea that hmx was fantastic i just i just didn't get it i just i guess i thought we should have just built everything on the front end i just get bothered by this because people like the reason why i get so hot and bothered the reason why i just hate seeing people talk about how the next thing is the most glorious thing ever is that everything you use comes with trade-offs you just have to understand that whatever you're using in react will be deprecated and the new version will happen two years from now so whatever they're recommending today will be considered harmful articles will come out harmful within two 2 years okay react 19 react' considered harmful but as the ecosystem around it swirled the web platform itself remained remarkably stable largely because the stewards of standards painstakingly ensured that no new change would break existing websites the original space jam website from 1996 is famously still up and still renders perfectly in modern browsers by the way do you see how fast this thing moves i'm not going to lie to you for an old ass website this thing moves fast like this thing is fast right can we all can we all agree that this is blazing ass fast if they just simply included htm x and put boost on the body this would all work as if it was a as a spa that's all it would take is just simply a simple boost and that is it and it would work so good one single markup boom fast as crap it's your 2020 cpu yeah have you tried other websites i still can't use uh i still can't use whatever this is this this this twitter business right here without a completely breaking and getting me uh out of memory regularly okay regularly my phone breaks all the time with uh using the website it just does that's just what happens all right let's go back this was great this is beautiful all right let's see if you want the long let's see if you want the sort of longevity we need to avoid dependencies that don't control and stick to standards that we don't uh that we uh know won't break if you want our work to be accessible in five or 10 or even 20 years we need to use a web with no layers in between for all its warts the web has become the most resilient portable futureproof computing platform that we've ever created at least if we build that with uh we build with that in mind honestly i think that this is a fantastic take i again i'm in i'm in i'm in my uh return to monkey phase and obviously htm x has been really really really really really good um i absolutely have loved it i think it's fantastic and so web components and hdmx obviously go together really really well so i love this i love this i absolutely loved this article do i think it's as convenient like i'm not stupid like i i i get the allure of using react right because when you do a simple example it is so dang easy you know what i mean when you just use the basics we find the hot new trend in the industry and then build the opposite of that this is actually extremely extremely awesome this might be the great this might be the greatest thing of all time um but but real talk the allure of react is that it looks extremely good in example programs and i think small programs react is just fine i think as it grows it starts to suck it just starts to suck real question is js do going to enforce the type of a parameter or shown errors i don't like i don't like typescript but i do like to see the benefits on build of course it does you got you can use you can use you literally use ts server you liter literally use ts server to check types type checking can still be used by typescript js doc is actually just going into typescript server underneath the hood how will you reuse types in uh js doc you can like alias man it's no different how do you reuse it in typescript you go type foo and then you give it something okay you do the exact same thing in js doc you can type def something you can type defa whatever you want to do foo there we go guess what my element is now a foo guess what my l is still an effing html element it still just works it's just the same thing can you type check yes you can type check anyways you know i think the problem is is that there's this idea of endless prog uh progressivism right is that that what we're doing today isn't as good as what we could be doing and it's not that we've sussed out and understood all the things that are happening today it's just that there are better ideas and we know they're better ideas we don't have a proof of why they're better ideas we just know that they're better ideas and something i kind of want you to think about is is that if you were to go and think about more in the htm the htm x way to do something you can actually kind of model it out pretty simple client makes request to delete object object responds with 302 30 or 303 303 gets the new uh resource 303 merges it back in right like you can actually kind of sequence diagram the only useful uml diagram of all time you can sequence diagram out htm x which is actually it just makes life really simple cuz you just think of it in states every url contains the state and it just like it goes which is fantastic anyways enough about this the name is i you know i i could love web components i'm still kind of green at them i've made a few of them maybe i should get more of them a genen