rust is being used for evil and you may not believe me but here are over 30 samples of malware picked up in the last 30 days all using rus as their programming language you may be asking why are they using rust one of the best languages on earth as seen by this tier list it is here with trash dev in the primogen 100 accurate why are they using rust to make this malware in this video i'll discuss the three primary points that i think is causing malware authors to use rust as we begin to see the sea to rust revolution in the world of malware let's get into it one rust is an incredibly memory safe language it is almost impossible to make a code that crashes using rust i actually did a stream yesterday where i wrote an http server that returned a file over tcp using the http protocol that entire time encoding that server in rust i was literally unable to produce code that crashes there we go our little server works and nothing crashes that's the craziest part dude i need you to understand how file that is that we wrote this and like we haven't actually crashed it yet i've fought with the compiler more than i wouldn't see in doing that i've written this thing without crashing it a single time that is amazing this is because of the memory safety and borrow checking functionality that the rust compiler comes with that enables you to write code that is extremely safe if you're a malware author you want your code to go out into the wild and do the evil thing that you wanted to do and you wanted to do that reliably if your code crashes you have to go out and fix it maybe a malware analyst finds your crash software because that sends off a trigger in the sock a lot of things can go wrong if your malware crashes rust makes it very difficult for malware to crash because of how safe the language is and i think that's drawing the community of evil people that write malware to use it in their campaigns two rust is extremely portable because rust uses llvm for co-generation and if you don't know what llvm is llvm is a framework for compilers so you can actually create languages as front ends for llvm and then the back end of llvm is going to be used to produce the code that's native to a processor for example you could think of rust as a front end for llvm and the producer for arm assembly for example is the back end for lvm because rust is integrated into this compiler framework unlike a lot of other languages it makes rust extremely portable and this is the thing that actually matters for both malware authors and regular software engineers you want to write the code one time and you hopefully want it to work everywhere the first time that's not always how code works but using a framework like this your code can be ran in multiple places with as little effort as possible as a malware author may be operating out of some crime cell for example you don't have a lot of resources so they probably want their code to run on a windows target and a linux target so using rust helps with this and number three rust is actually extremely difficult to reverse engineer there's a few reasons for this one is that the language is fairly new and there just isn't a lot of tooling for reverse engineering rust now i know you can put a rust binary into ghidro like i've done here but it's not going to look the same as it does for a c binary the gator decompiler is trying to actually convert your binary back into the c that it came from and when you decompile rust you're getting the c representation of the rust decompilation which is just much different than what the actual source code looks like also rust includes a lot of very low cost or even cost-free abstractions and that makes the code base a little more complicated and less human readable in a reverse engineering context because of this ross is just inherently harder to reverse engineer and less likely for malware authors to be able to figure out what's going on this adds a barrier to entry in doing malware analysis on rust malware that makes things much easier for evil ransomware groups and the harder it is for an analyst to reverse engineer your malware the harder it is for you to get caught so that's it for now hit that like button and hit subscribe and then go watch this video to get started on your reverse engineering journey it's right dudes it's right there just click on