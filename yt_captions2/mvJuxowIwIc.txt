hello and welcome i'm james murphy here to 
tell you about the beta release of python 3.10   as of may 3rd 2021 python 3.10 is now in beta that 
means from now until sometime in october when it   is actually released there will be no new features 
added to 3.10 it's only bug fixes from here on   out so it's especially important for viewers like 
you to try out 3.10 before it's actually released   of course there are a ton of things that have 
been changed in 3.10 and i'm not going to go   through all of them i'm just going to go through 
the biggest ones and the ones that really stand   out to me of course in my opinion structural 
pattern matching is the biggest most important   new feature that's added in 310. i've already 
made a whole video explaining all the nitty-gritty   details of structural pattern matching for that 
reason i'm not going to say anything more about   structural pattern matching in this video go 
watch my old video if you want to hear about it.  to me the remaining features fall into two 
general categories: those that support the   typing library that help you write better 
type hints, and quality of life improvements.  this video is going to focus specifically 
on everything related to typing.   the quality of life improvements and other 
miscellaneous changes will be covered in my   next video. okay let's get started with typing. 
first up is pep 604 with the new type union   operator. in the past it's been a little bit 
annoying to work with type unions. first i have   to import union from the typing library and then 
writing it this way just doesn't feel very good.   well from now on you can use the vertical bar or 
pipe character to denote the union of two types.   i no longer need to import union from the typing 
library. this syntax int pipe float is a synonym   for the union of int and float. in my opinion this 
is a welcome improvement really encouraging people   by making it that much easier to type things. next 
up is pep 612 with parameter specifications. param   specs are meant to help users type hint higher 
order functions. similar to a type variable,   a param spec will match whatever parameters of 
a function are given. this would allow you to   say take in any function and return a function 
that has the same signature. here is an example   of using a param spec from the pep. we create 
a param spec just like we do a type variable.   we're going to write this function add logging. 
add logging takes in a callable and returns   another callable with the same parameters except 
the return type has been changed to an awaitable   of r. that means from this function we return 
another function with the same parameters as the   original but now the return type is an awaitable 
of the original because here we're using an   await keyword and an async function. notice 
here that we can now properly type hint star   args and star star kwargs to be p dot args and 
p dot kwargs. this way we can refer specifically   to the args and kwargs of the original 
function's parameters which were captured by p.   this means that whatever parameters the passed in 
callable has you can refer to its args and kwargs   by accessing p dot args and p dot kwargs. here 
are some more examples of signatures of functions   that either add, remove, or change parameters. 
this function add takes in a callable with some   parameters that returns an int and it returns 
a new callable that has a new additional string   parameter along with all the other old parameters. 
additionally it now returns a bool. here we are   using the newly introduced typing dot concatenate 
which can only be used in this context as the   first argument in a callable. concatenate str p 
means that the parameters to this new function   should first be a string followed by all the 
parameters that were passed into the original   function. we can use concatenate and param spec 
in the input of a function instead of the output   to remove parameters instead of add them. here 
we're taking in a function which takes an int   and some other stuff and returns a function which 
just takes the other stuff, no more int. next on   the list is pep 613 with explicit type aliases. 
if you have a recursive data structure or a data   structure where you refer to the type of the 
data structure in one of the type hints in   the data structure, you can't use the actual 
type of the data structure when you do that.   this is because within the definition of the data 
structure, the data structure is not yet defined,   so you can't use it. for this reason python allows 
you to use strings that name types instead of   the actual types themselves. that part's not new. 
what is new is that now you can explicitly mark a   string as being a type alias, meaning it shouldn't 
be used as just another string object, it should   only be used as a type hint. this is mainly to 
help type checkers from getting confused between   global string declarations that might look like 
types and actual things that are supposed to be   types. you would use a type alias in much the 
same kind of situation that you would use a   forward declaration in c or c plus plus. you're 
essentially telling the type checker i'm going   to define a type with this name in the future. 
next up, pep 647 with user defined type guards.   static type checking is fundamentally limited in a 
dynamic language. there are some situations where   a type checker can infer more information on a 
type based off of what's around the statements.   in this case val is an optional string 
which means it's either a string or none.   we check to see if val is not none. if val isn't 
none then within this if block we can assume that   it's a string. type checkers today already do 
this. similarly in the else block we know that   it must be none. there are already a few cases 
where type checkers can narrow down the type   based off of code execution. for instance you can 
narrow down a union using an is instance check,   or you can narrow down a literal by using an 
equality check. but in some cases the type checker   just can't do it. in this case we go through a 
list of objects and check to see if they're all   instances of strings. if they're all instances 
of strings, then this is a list of strings and   i should be able to join that list. but type 
checkers aren't smart enough to be able to figure   this out. enter user defined type guards. you take 
as an argument some object with some type hint.   the return type of the function is labeled as type 
guard of something. what this actually means is   that this function returns a bool that determines 
whether or not the input is of the given type.   so if this function returns true then the type 
checker should assume that val is actually a   list of str not a list of object. if the function 
returns false then no more information is gathered   about the type. if your function takes more 
than one parameter, the type guard only applies   to the first argument, it says nothing about the 
second or any other arguments. if your function   is actually a method or class method though, 
then it applies to the second argument, the   one after self or class. finally there were some 
small changes to how the typing literal works.   literal no longer cares about duplicate 
arguments or the order of its arguments,   but it does now care about the type of its 
arguments and whether or not its arguments   are hashable. okay that's all the typing related 
content that i could fit into one video. if i left   your favorite out then make sure to post it in the 
comments. thanks for watching and stay tuned for   the next video on all the rest of the improvements 
coming in python. go ahead and start beta testing.