my anaconda don't want none unless you got bun hon all right so apparently bun is catching a little bit of flack this tweet garnering 1 million views which is a lot on twitter that's a lot for tech twitter tech twitter like a big tweet is like a hundred thousand views like that that you're you're doing something pretty big on twitter when you're hitting that and jesse goes off and says hey how is how is it possible for bun to dunk on every single js benchmark does no one else care about performance or what i mean you know i know jesse probably did mean it this way but when you come out the gate swinging like that i think you're only gonna get defensive answers can we all agree maybe like maybe a little too defensive here people are gonna come out and they're gonna be pissed  you know you already know what's gonna happen here it's that people are gonna get people are gonna get spicy uh all right so mateo mateo's been working on uh uh node for a long long time uh here's a few reasons let's see what matteo has to say uh first off node has no budget of its own and npm is maintained by a tiny team yeah well fbm also sucks most of the investment being made are in adding capabilities are things more secure not by making things faster making things faster does not make anyone more money it's a bit of a tragedy of the comments interesting but it saves them more money so maybe perhaps that's something you should care about bun does not care about backward compatibility with a significant portion of the npm ecosystem in specific despite their claim node.js processes are built around not breaking the ecosystem instead so i wonder about this one this is the one that i really want to know more about because they made that claim in the one in the bun 1.0 release it says it's pretty much a drop-in replacement for node.js we are going to take some time this week to test whether or not that's actually real is it i don't know uh button is also a different trade-offs in a few areas making it unsuitable for my own workflow my two cents is that if those trade-offs were done by node and npm they would have not reached the success uh they they have as an example it does not copy files when installing dependencies i'll have to think about that why is that good or why is that bad so are you saying that a bunch of sim links a bunch of directories is that why bun is faster you know how if you look at the bun 1.0 release it's like dude we get done in absolutely no time uh sim links on linux hard links on mac okay i believe in open let's see in open standard and open governance or runtimes and infrastructures are better with it uh see a terraform fiasco having open governance means broader decision making process which everyone is heard but it's also slower i don't i don't actually agree that this is better or worse i don't think you can say that this is a either a positive or a negative in the sense that terraform is in trouble because they just didn't have the dollar dollar bills and they they you know it just didn't work out it's four is altruistic i actually do agree with that assessment it's it's kind of a fake conundrum you're putting yourself into like first off open governance doesn't necessarily mean good outcomes see the rust foundation for examples of not being good i think that it's nice to have like any platform i do believe in the idea of open source right i think that if you're going to be using a platform i think it's very nice when it's open source so you can look at it that you can see what's going on so that you can understand how it works but at the exact same time i don't i just don't know if i buy this last one as like what makes node better or worse let's see although bun is yc backed how many human hours were put into bun in comparison with node much less you're significantly underestimating how much there is behind building a runtime that can work on a combination of 50-something os's and hardware also legacy slow things down quite a bit starting from scratch is much lower effort i think mateo's completely right on this one and i really don't think this i like saying they are vc funded i don't think is like a really good sell can we all agree that that's not necessarily a great sell here like you're not making me think bun is less capable or more but all right so we're gonna back up a little bit because this is where i think we get to the egregious one so let's see what goes on here are you guys ready for this one are you ready for this one a better tea would have been sorry zig wasn't around when we wrote node.js well it's not just zig right c plus plus and zig should have identical performance there's nothing in zig or c plus plus that should make it somehow faster if you know what i mean it if anything let me think about this for a second i really don't think it should make a huge huge difference here uh so i i'm just trying to think of anything that in which one would have if if one would have an advantage over another i don't see it uh zig is just newer it has some nicer constructs already kind of built into the language so perhaps development is a bit easier but the language is also significantly less mature so it is also kind of like difficult bun apparently isn't a superset we're going to prove this hopefully at some point all right hey i'm the person working on a performance at node.js who says bun is fast at every single benchmark did you look into the recent performance improvements in node.js did you read the url uh benchmarks for example it doesn't that doesn't feel like a the right response or the right response here oh my whoa dude you got the golden kappa oh only one person on twitch get those every 24 hours this is twice now in my chat that i've seen the the golden kappa ever let's go jetster you got it you got the golden kappa um yeah when i see this uh yeah are you serious absolutely the golden kappa is is a real thing i've never only there's only been like 400 some people that have received a golden kappa ever uh anyways who says yeah so this this feels a little strange this feels a little strange in the sense that like i don't know what you know again url is this gonna be a big win for everybody is everyone gonna feel fantastic about it you know like citing here's like a general rule of uh rule of thumb when it comes to arguments if you're going to say like if you are attacked and you can't refute with like just like hey here's a series of tests we've done to show the differences between bun and node.js but instead you're just like yeah well so like you answer kind of like um uh harry does on dumb and dumber you really aren't you aren't getting the w there's no w going on here all right so we're going to go into the response anyone who claims node.js isn't focusing on performance should read this post by raphael okay so we have a this is in 2023 so they are looking at uh the performance stuff hold on they are looking at http 3 a lot of benchmarks blah blah blah blah blah this is an extremely long blog post maybe it's something we could go over at some point but they are doing a lot of work and i mean i don't think anyone should be surprised that they're doing work here actually i'll keep this up maybe we'll do this at a as a separate thing see i like this one so this is what i want to see right here so this is exactly what i suggested you should go and like do an actual performance do something that really shows the difference between the two because at least then we could all argue what is pros and what is cons plus you get to double check their uh plus you're gonna check their numbers and what did he say if i get paid for it yes unfortunately all my work on node.js is voluntary and not paid rip bud or node or whatever i mean personally i'm just gonna continue to use go but i i'm not gonna lie to you that's that maybe you know you could have said the same thing without saying the same thing do you know what i mean one could imagine you could have said something more along the lines of you know i work purely voluntarily you know i work you know i i'm a complete volunteer when it comes to this so i don't have a lot of time to be able to spare for these type of adventures maybe we could put it on the backlog and we'll see if we can get to it you know it's a good it's a good way to you can say a lot of things without saying a lot of things you know what i mean i don't get paid enough to have soft skills that says corporate speak uh yeah of course it's corporate speak sometimes you want to do corporate speak you know what i mean like if you're speaking on behalf of a corporation which node.js is a corporation you want to come out with a little bit of corporate speak you'll notice i never talk on behalf of no uh on of netflix that's because i'm smarter than that i'm not gonna say nothing i don't know nothing i'm not i'm not on that but nonetheless it's just like you can't complain about something or okay actually you can this is actually the twitter way you complain about things that you can easily prove as good or bad or where they're good or bad but instead it's easier to simply complain and when someone says okay well then show me the receipts you say yeah i mean not like i'm gonna pay to do this work i am paid to do the work in which i personally complained about and also identified myself as probably the most capable individual of doing it anyways scroll down a little bit okay we're gonna go more could you provide evidence where a bun is inferior to note it would be interesting to see a node bite back url parsing okay that's it it's just url parsing are they parsing wait please tell me that they're not parsing are they parsing urls please tell me you're not parsing urls in anything but just just just just do it in c plus plus dog okay yeah they're just doing it in c plus plus okay incredible it's it's a url parser i'm not gonna lie to you hanging your hat on a url parser is not necessarily um like i i'm not uh i'm not like super impressed just throwing it out there i know this may sound offensive to some people but if you're like i mean bun just came out and was just like we've improved package management we've improved runtime we've improved startup speed we've improved this we've improved that we've improved this we've improved that we're trying to make it compatible we're doing this we're doing that and then you're like yeah well have you seen our url parser this shit's faster than slick of the grace faster than lightning it's speedy it's just like i mean it's not it's not the way to come out it's not it's just not the way to come out you know what i mean that url part's gonna be a life changer i know it's a greased lightning i know it is truly greased lightning uh it's the lightning mcqueen of url forcing good ciao as long as we don't talk about cars 2 and make tj go on that 15-minute chat he goes on every single time he hears that someone likes cars too long as we don't say that i think we're good uh okay so this is i mean this all seems pretty it seems pretty wild by the way jared obviously i mean look at the man's eyes right there those eyes say i've committed something like one 2.5 million lines of code and then they show us graph right here and they're like hey man you committed like 2.5 million lines of code seen i've seen some okay i've seen so much you have no idea it's all zig um okay so this is good i i mean i like everything that's going on okay so here's what i think okay we're gonna we're gonna reach out with dax dax has the most based takes of them all i love dax first off it's hard not to love anybody that grew up in a commie country and then escaped it and then comes to america and becomes successful i love it i love it i love it i love the guy he has those stories that everybody loves okay it's fantastic inspirational okay the man's running a 400 and under a minute before anybody else love to hear it so let's see it with buns 1-0 launch there's gonna be inevitable cry of but it's vc funded i hope i can provide some perspectives don't get me wrong i'm not a huge fan of vcs yeah i don't think anyone are they're soul-sucking evil people anyways uh i've spent my entire career building early stage companies and the majority of vcs provide a negative value the classic inverse value they just give you money i want to give you money and then suggest bad ideas for the rest of your life take it or you can't build your company and you're like oh this is the worst this is a faustian bargain if i've ever seen him in my lifetime i think a lot of companies should have never gone down the path but i think people miss why companies absolutely should building a business is hard you have to wake up every day and try to push it forward while the world largely ignores you the entire struggle is about staying motivated and the reality is that it was a lot more fun and energizing to shoot for something ridiculously ambitious and impossible day to day a small business and massive business take the same amount of struggle in terms of pure concept the small business seems easier to execute on but things fail when the co-found when the founders run out of energy not really because the idea was too hard it's very interesting there's not much uh that's more tedious and painful than building something like bun the pain that feels a bit pointless if the outcome is small consulting business they're clearly talented they would have had the constant distraction of better sounding opportunities floating around but might have not even made it to 1.0 it feels more worth it when the outcome could be running massive data centers around the planet executing the majority of the world's compute and i do and to do something like that you need to go down the vc path they'll likely fail but when they do at least it won't be because they've got bored and couldn't follow through foreign as always dax just coming out with just like the most awesome tanks of all time honestly dax's takes are always so damn good uh this is perfect i think this is honestly a perfect take in the sense that i mean i i cannot tell you how hard it is building a startup i spent a year and a half doing a startup and got it pretty dang far uh even got a governor a guy running for governor to use my product which i thought was pretty good breakthrough like we went pretty far but ultimately we just didn't have the money to continue the energy wasn't there people were just starting to lose it and you know it's really hard it's it's really hard to say no to something you thought could be the one you know what i mean uh they know each other so i think this is just some sort of joke and also they're always calling this guy uh a racist poor dax gets called a racist all the time thanks for linking that that makes all things great yeah they call they constantly call dax white and he's uh the least white white guy i know of currently today today he's by far the least white white person that twitter has deemed a white person and calls him racist all the time very strange it's very strange it's very strange what dex gets to go through on the regular i know a very way to jason i mean poor guy a poor guy he gets he gets dunked on quite a bit for all this stuff uh i started a company with someone and it ended up when he stole all the money that sucks anyways um all right back to dax i like this take i think i think the thing that needs to be understood here is that bun has an inherent vantage over node they have no backwards compatibility they have uh they have no need to have like some huge long tail running you know legacy code base right they they're just brand new so they obviously have a huge advantage you know first mover advantage is very important but it's not actually end game i did try bun about six months ago and it kept seg faulting on me so i'm very very curious what does it feel like today i am going to give it a try i'm very excited about i think it could be something really good because here's the deal about node and just the javascript ecosystem that sucks there's no build tool right you put the one in you like some people still just copy pasta their webpack config when they need to build something some people use vite there's parcel there's there's turbo pack apparently snowpack still exists people still use so pack okay snowpack still a thing uh you still got ice i've seen projects recently that still have uh uh what's it called uh gulp and grunt as part of it right it's still a thing and so it's like there's no build tool there's no bundler there's no specifying of anything there's no standard tool for any operation in javascript which means it's just one gigantic constant um just constant annoying battling that's always going on and so it's very very amazing to see um it's very amazing to see someone to try to like create an entire ecosystem for it that's all yeah and poor bauer can we just pour one out for bauer bauer it didn't work um dude i hated bauer by the way bauer ruined my life i spent unlimited amount of hours working with bauer bauer was awful um but i will say that someone trying to bring all these two were tools uh under one roof and just like here's the run time the tools it takes everything it all goes together go i love the idea i think they're actually doing the right thing um all right so here's a huge naysayer uh corey bun is exciting but buns all in one approach has many risks and downsides i actually think it has mostly upsides that's what every other language does like right i don't build go with some other tool other than go i don't run go with some other tool then go i don't install dependencies with some other tool then go i don't do anything with some other tool then go same thing with rust same thing with zig same thing with v leg same thing with any modern anything you would literally never do some like oh hey you want to just amalgamate your own pile of like no you don't use tiny go no i don't use tiny go ugh no one wants to do that nobody wants to do that okay you just want it to work all right so what does he have to say um but will often lag behind changes to sep uh to the separate tools it replaces when js innovate let's see when js tools innovate bun will be able to quickly support something similar um i'm unsure what like when it comes to bundling a file i'm unsure if there's much room left for innovation you know what i mean like i don't think there's like a ton left there um minification you could argue hey you know but will bun just use an off-the-shelf minifier it just this seems like this seems kind of like an argument that doesn't make any sense and js tool is innovating we've mostly innovating into hell if it's buggy or insufficient bun is harder to replace than separate tools okay fair one could argue that is a fair statement but again look at what it's look at what it's predicated on there's already an assumption that it's not going to work built into this right if it's buggy or insufficient then it's harder to replace absolutely but you've got to also do the inverse it's also really hard to build anything in which you have 50 choices for everything oh you want to like do csv parser for node.js let me see what do we got here you got like everything there's like so many different ones there's a top 10 for 2022. okay 10 separate csv parsers 10. oh maybe web sockets will be even easier web sockets node.js best to use you're gonna get nine nine nine and guess what on the nine not a single one of these nine contains micro web sockets which is actually the fastest and one of them contains socket io which is just like what is what it what it what is this why would you do that why would you contain socket io okay so it is kind of nice that bun provides a lot of things you know rust also provides tcp and http and do do we need do we really need someone else to provide some of these things i don't know i just don't know uh can i still mix and match uh tools to select the best of breed stack well you can still have the stack you want yes you just don't need the world but worry about bundling dog hey dog you don't need to worry about bundling anymore higher risk the tool chain is reliant on one team instead of many this still this is like a faustian bargain still you have to assemble it um yes i would say but this part this is a real one right here what if bun burns out slash loses funding bun will be hard to replace can we all agree with that one that's a very hard one to replace so that's a good one which is if bun doesn't make it are you sure you want to bet on something that's not making money right he wants a bundling stack the best bundling stack to me that's actually this is a real argument which is it's still pretty new it makes no money and it has vc funding which means it at some point won't have vc funding so you better have you better have something kind of prepared lack of ecosystem will cloud provider support bun will community form around bun to provide extensions and support are those docs sufficient uh those sound like questions you should ask before putting a check mark and saying no uh will bunn honor js standards or seek to extend and extinguish this guy better not be using any microsoft tools okay you can't be you can't be quoting microsoft if you're using vs code which is literally the we're gonna figure out a way to charge developers a hundred dollars a month for them to be able to develop there's been no greater extend extinguished move by microsoft in the last decade than vs code uh i would be shocked it better not be using it well bun honor js standards or seek to extend and extinguish the latter is common approach that makes products sticky but also breaks compatibility bun already has some non-standard behaviors i'd have to look into this but i'm pretty sure it's not js standards that they're talking about i'm pretty sure uh corey right here is mixing up js with node right i'm pretty sure they mean i'm pretty sure he means node standards i'm pretty sure that's what he means and so that is fair game ecmascript standards i'd be so i'd be genuinely surprised because that means you have to write your own engine they don't write their own engine they use what safari uses so whatever is non-standard would mean that safari has non-standers macros yeah the macros is a bit interesting but that's like an extension i'm not sure if yeah i mean extend and then extinguish uh it is it's it is a curious bit of behavior i'm very worried about macros i think that that probably is a dumb play probably a dumb play it's probably a dumb play it could be a dumb play got him i will agree okay there is one thing that you can say yes the macros are a warning for me i'm upset about the macros i am upset about the macros i don't know about that one can one team support something this uh complex long term okay this last this last statement is just nonsensical it's one company can one company support this long term yes one would assume that if they continue to get funding and make money one can do that like npm's small team yeah like i'd be typically clear i'm rooting for bun but they're trying to accomplish as hard and risky will it work uh i think you can drop most of these and really just focus on i think the macro idea is stupid you should be extremely careful about macros lack of ecosystem i don't buy this for one second higher risk uh yes this is the higher risk part um i don't think relying on many tools instead of one is somehow better in any argument i don't think this is real i think you're just making this up this is kind of a uh what if bad scenario yeah what if uh what if tomorrow vite pushes a bad build and breaks everybody build and then that's the only one available well yeah i could come up with a doomsday scenario that doesn't make any sense i you know i don't even know if i like the idea of bun white pad white pad could happen tomorrow but at the same time this idea that node is the only thing that should exist is also silly you know what i don't think javascript is in a great place okay vc equals venture capital is is chat really struggling with what venture capital is come on chat anyways so this is extremely important point about bun versus node.js node.js has all these things kind of going against it which really is just like a huge legacy code base a bunch of things that they support they don't they're not as narrow they've just lived longer right that's a really hard momentum to undo bun obviously has the advantage they have the advantage by providing something faster right they're going to be able to say hey we don't support as much but that is okay because everything that we're doing uh everything that we're doing is going to be more amazing and for the hardware you're actually targeting right you run on servers here's something designed for servers it's most excellent right so everyone can agree that's very very nice we want to see that uh but here's the problem about making it a business can i just throw out the the bad part all right so it's going to take millions upon millions upon millions of dollars to be able to build out this business you're gonna have to go to vendors and whoever to try to change their minds about hosting node but actually start adding a a bun option which means that all these vendors are going to start having to to just also do a whole bunch of work to get this done maybe they're gonna have to spend millions of dollars to be able to get bun working i don't know how much money it's going to take but at the end of the day it could also take paying three people the hundreds of thousands maybe a million dollars for them to go fix the parts of node that are slow right now that are competitive to bun right and they could do that in a few weeks maybe a couple months i'm saying i'm about bun versus pnpm install speed comparisons but i would like to provide some nuance uh the absurd perf differences usually as a result of one tooling running with a network api call overhead while the other is not yes this is what i exactly am thinking this is why i said i don't trust those results it's probably one is just literally just sim linking some folders and the other one is literally downloading crap right let's see bun installs defaults to behavior similar to pnpa's prefer offline flag which skips uh hitting the npm api to simulate the default behavior of npm you have to use bun force here's some comparisons on my machine network from singapore okay uh button with cash lock files okay button force with cash log files uh okay so it's still a button is still faster okay so he like this is still this is actually a much more reasonable comparison is in this case nobody cares right nobody right here is going to be caring but the this case in this case are more interesting the no cash no log file request slow is it faster absolutely it's faster so buns better uh this one right here uh cash with log file cache with no lock files the same state yeah this is better so to me that's a good comparison good job evan good job evan just dynamite right there all right anyway so that's my thoughts about uh bun which is it to me it seems really hard they are compile time execution yeah the all macros tend to are compile time execution so the hard part i see for bun is that they can be easily defeated without anybody opting into a new system you know what i mean you don't have to opt into a new system with new bugs with no anything there's no moat the moat is truly just that hey we have better dev tools and that is a good moat so there you go those are all my thoughts i think i have on it is getting excited by marketing uh i don't know i i'm not as excited for thea uh uh for bud i'm not nearly as excited for bun i think as everybody else but i think bun has a potential i i need to see what it looks like right i i'd have a personally a hard time betting on it right now like if it was a horse race and i had to bet in five year who's gonna have a bigger market share node or bun this feels like a really hard bet to make you know what i mean i think if anything buns just gonna emphasize the fact that you want really nice tools someone keeps asking what a macro is macro is just like compile time code right you think of c preprocessor macros think of rust macros they're little declarations they're usually very declarative in your code i want this thing to happen and then that thing has some sort of running thing underneath the hood your mom absolutely front end peter my mom the name is the am i even qualified to talk about bun i think i am i think i am as somebody's done a lot of node.js i feel like i have a lot to say about it now i might be wrong but at least i'm trying something okay i've tried to give a reasonable last take here in an unreasonable world where everybody has to have like a one-sided one-dimensional take either everything's a huge risk or everything is going to be the most greatest thing in the universe and you should switch everything to it all at the exact same time you know what my advice is go use rust or go again