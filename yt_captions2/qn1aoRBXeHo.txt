in this video i'm going to be showing you how you can use yaml in your programs so what is yaml well yaml is a human readable serialization language that can be used for configuration and for data storage yaml is an acronym for yaml ain't markup language so i would say recursive acronym which is quite fun and some of the major benefits of using yaml is that it is simple it is highly readable and it also has a wide language support so let's create our first yaml file and i'm going to be doing this in pycharm so i'll hold command plus n to create a new file which i'm going to call config dot yaml and you can actually also specify it to be dot yml if you prefer but i'm going to keep it at yaml both of these extensions are going to lead us to a yaml file and i will make this a bit smaller so first of all we're going to create a simple yaml file and we're also going to load it into our python script so to do that first we're going to create or we can actually add a comment to get started we're going to call this web server configuration so a web server is going to have some info of the version which is going to be set to 1.0.0 because that's the first version and we're going to have a website for this which is called https example.com so the first thing to note is that in yaml we have indentation which is represented by spaces and that's how you create a block just like in python and the second thing to notice is that now we have key value pairs and that's how you create fields in yaml but i'll be showing you what this looks like in a dictionary format very shortly so you'll have a better idea on what it actually does but then let's create a database and the database is going to have a type and a path so another thing to mention is that you do not need to specify quotation marks for what you're typing in here it just helps you keep it a bit more explicit of what data type it is because yaml does infer the data type based on what input you put so if you put 10 it's going to see that as an integer otherwise if you add quotation marks around a variable it's going to see it as a string but these are going to be interpreted as strings and finally we're going to create some roots and inside here we're going to create a list and to do that we're going to use a dash so it's going to have a path which will be api and it's going to have these methods that are going to have get and post which is a shorthand list so now we have this list here and this list here that both leads to these parameters so it's a very basic configuration file and i'll explain more of this in just a moment but let's load that into our script so to load it we actually need to install a package so we're going to type in pip install pi yaml and with this package we're going to be able to load it just like we would load json for example but once you have that installed you can type in import yaml that's going to be the package it's not going to be called payaml but it's just going to be called yaml and we're also going to import pretty print so actually from p print we will import p print then with open and you will add config.yaml in read mode as file we're going to say that the configuration which is of type dictionary is going to equal yaml dot safe load and we're going to load the file now with yaml you have two options you can either load it just as it is or you can use safe load and safe load is just supposed to be a way that protects you from malicious attacks from code or from yaml files that you've maybe downloaded from the internet and just like with many recommendations if you download something random from the internet there's always a chance it can contain something malicious in there and if you're familiar with the concept of pickling in python then you'll understand exactly what i mean you don't want your program to execute arbitrary code in case you don't know what pickling is i will leave a link in the description box down below because i'm sure you'll probably find that interesting as well but all you should know is that this provides a safe alternative to loading data from a yaml file which might be malicious but with that being loaded we can now pretty print the configuration and we're going to set sort dictionaries to false because pretty print does like to organize them alphabetically and i don't want that i want them to print exactly in the order that we mentioned in our yaml file but once you have all of that and you run the program you'll notice you're going to get this kind of dictionary back with the data that we've provided so let's go back to our configuration file to analyze this so first we created a block with info so as you can see info is going to be the key and what's inside it is going to be a block which is another dictionary with the version number and the website we did the exact same thing with the database and as you can see they were interpreted as strings so we got a database key with a database dictionary inside with the type and the path then for the routes we managed to create a list so roots was the key and by adding a dash we created a list with these dictionaries inside so that gave us a path with this and some methods and another path with admin and some other methods so now we can use this configuration however we like just like with tomal or with json all we have to do is make a simple change inside here such as version 1.0.1 and it's going to reflect across our entire program so that's very nice it's very simple and it's very efficient so with that being said we've got a basic idea on what yaml looks like now it's time i actually explain the data types that you can use with yaml so you have a better understanding on what you can specify and what you can't so here we'll just type in a comment of data types and we'll get started with a string value so a string value can have quotation marks or it can choose not to have quotation marks but if it is text it's going to be interpreted as a string so he'll say hello world for example and that's going to guarantee that that's going to be a string because if you don't write that and you just say hello it's still going to be interpreted as a string but if for some reason you change this to a number later you'll notice that it's not going to be a string any longer it's now being interpreted as an integer so next you can choose to have an int which is just any whole number or a float which is just a decimal number such as 3.14 and if you run these they will actually end up being either a float or an integer and then you have booleans and booleans in yaml are actually really fun because there's different ways you can actually specify a boolean one way is to use true and false so if you say true it will give us true and if you say false it's going to give us false so that's quite simple but something super cool about this is that you can also say yes or no and it's going to pass that into the boolean format that your language uses so in python we have uppercase true and uppercase false so you can say yes or no you can say off or on and all of these are going to give us either true or false so i just found that quite cute in yaml that you can use these kind of keywords to specify a boolean but we'll just set that defaults and finally we have a null value so if we type in null we can specify it to be null and that means we're going to get none back in python and maybe i should have changed this to something else such as null well so now we have a key of null value with a none type and you can also specify that by keeping this empty or by using this tilde it's going to consider it a non-value so these were the primitive data types or the scalars that we could use with yaml now there are some more complex data types such as dictionaries or mappings and to create a mapping you can just type in mapping or any kind of title you want and then you provide a key and a value pair just like you would with normal json so here we get a mapping with the dictionary inside then if you want a list you just type in list and you can either make it shorthand as this over here and it will provide a list for us or you can make it look more like a cooking recipe and you can say item one item two and item three and it will give you the same result except in this nicer format next we have nested mappings so we can type in nested mapping and to create a nested mapping you just add a key and then you add a key inside that key so we're now starting to create this hierarchy of values inside values so we got the key with the key value pair inside that key and you can add as many as you want so if you run this you'll see that the nested mapping is going to have a dictionary of two other mappings to go a level deeper and you can do the same thing with the lists so if we type in nested list you'll see that we can add a list item and then inside that list item we can add some more list items or some elements and if we run that we will get a list of these list items inside the nested list and finally if you want you can even mix these two you can say for example that you have a sub list or a sub key so we'll say sub key and inside this sub key we'll have these elements so now we're mixing the syntax of both the mappings and the list so if we run that you'll see that we're going to have a lot of nesting being done inside our nested list so that's the basic concept on how you can use the data types and the valid data types but there are some super powers that come with yaml that i also want to show you when you are using yaml and actually i'm just going to call these features i think that word is much more adapt so he will type in features so the first feature is quite simple we have a sample that contains an item and all i'm going to demonstrate here is that you can use comments they can either be inline or they can be outside so that's up to you you create a comment by adding a hash symbol just like in python and when you run this the comment will be ignored but you'll still have that sample item key pair being executed in the yaml next let's pretend you have some text so we'll call this text and maybe you want to have a multi-line string of text so we're just going to type in this is a short story about an apple so if we indent that and we run the script you'll see that it's going to be passed to a single line it's going to remove the new lines and it's going to leave it in one line so if you want to get around that you're going to have to add a pipeline and we're going to have to put this under so the pipeline is just telling the program that everything under here should be treated as it is so it's going to create the new lines for us as you can see now it has the new line in every line break which means if we actually try to print that text so if we go back here and we say print and we get the config and we print it at the index of text you'll see it's going to print to the console just as we wrote it in the yaml file then we have something called a folded string so if we add this right arrow we can now convert this text to a folded string which means it's going to remove the single new lines and it's going to change double new lines to single new lines and that's actually really confusing i had to ask chat gbt what the hell it was talking about and what it came to was that if you have two new lines this will be reverted to a single new line while this will be concatenated together so for example if we run this you'll see that this is a short story because here we have one new line so one new line was removed and converted into a single line while two new lines were converted into a single line so as you can see down here we have this is a short story with only one new line if this was a pipeline we would have two new lines here and one new line where it says this is so luckily chachi bt did help me out with understanding that silly difference and now you know as well what it does next we're going to be looking at anchors and aliases so what is an anchor and what is an alias well the best way to explain that is to create an example so here we have a key of item and we're actually going to turn this into an anchor so we'll just say that this is an item inker and then we're going to give it the value so we can give it a value of let's say 1 2 and 3. so it's a shorthand list of one two three now next time we create something such as let's say um tool we can give this tool a name such as hammer and now we can also specify an item and we can now refer to the item anchor so it's kind of like creating a variable we now created an item anchor that links to these values here and before we run this we need to remove the configuration test but when we do run this you'll see that item has these values and now the tool of hammer also has an item with the same values that refer to the original item which means if we change something in the item anchor such as 10 it's going to update it also in the item of the tool so this is what they define to be an anchor and this is the alias or in other words it's a variable but you can do some things that are even cooler than that you can type in person and we can say this person has a person anchor so person anchor and you don't have to type in anchor you can write something else if you want but if we continue this and we fill out the information we have john doe who's 30 and is a developer we now created an anchor of john doe which means if we want to create another person that follows his example we can do that first by adding two left arrows which creates a mapping or it creates a merging of mappings so with that we can type in person anchor so now it's going to put all of these values from john doe or from that person into this other person and we can also override those values so maybe instead of john doe we have apple bob who's going to also be 30 and a developer so just like that we can reuse these values without having to rewrite that code so now we have person of john doe blah blah blah and we have another person of apple bob who has the same values as john doe with the exception of the values that we changed so it's kind of like creating a class of that person it has some given attributes and this just fills it out for the next person that we use it with and the final feature i'm going to show you are the compact mappings and the compact lists but those are quite selfish explanatory so for example we have a compact map which is going to be of type dictionary or as you can see we just insert a dictionary and that creates a compact mapping and the same thing goes for the list so if you want to have a compact list you can do that just by inserting a list just like that and that might be just a bit cleaner depending on what you're doing instead of typing in list and adding each item one by one using the dash so depending on what you're doing you might choose one over the other but the result is going to be the same for both of these and to conclude this video i'm going to show you a simple example of where you could use yaml in a real life project so in this example we have a folder called translations and inside translations i have english translations with info greetings and messages and i also have a spanish translation and i didn't check if these are correct translations and not i used chat gpt to generate these translations because it's fast and simple but here we now have two files that we can use for our sample script so i'm going to import yaml i'm going to ask the user to select a language and it's going to ask them in english so that can be changed depending on your current locale if you want to add that into your functionality but as soon as we pick a language it's going to load the given yaml file and it's going to add or print those messages to the console so if we run this program and we say en it's going to give us the english messages but maybe we're loading this program in spain or some other latin country and we say es now it's going to give us the spanish translation so that was a very simple way to use yaml but there are plenty of other use cases so it's very important you understand the syntax and while this video won't give you a full tutorial on where to use it in a professional context it should have given you the basic understanding on how you can get started with using it reading it and just creating it for yourself but that just about covers everything i wanted to go over regarding yaml do let me know in the comment section what you think about it and whether you would like to know something else about it but otherwise with all that being said as always thanks for watching and i'll see you in the next video