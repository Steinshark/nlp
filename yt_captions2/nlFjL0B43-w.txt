4 billion if statements what is this we talk about ai or something that's the first thing i think of is this is just an article about ai okay because that's all it is it's just if statement soup just deep deep deep if statements everywhere i recently stumbled upon a screenshot while researching social media on a train of course it was followed by a cascade of spiteful comments criticizing this fresh programmer's attempt to solve a classical problem in computer science the modulus operator this is not even a fresher this is just somebody messing with people this is just funny i i you know i love watching people get triggered by this this is so good now in a world where ai is replacing programmers by the minute taking their jobs and revolutionizing the way we think about code maybe we should be more open to the thoughts of fresh new blood of the industry in fact the above code is a perfect example of time memory tradeoff you're trading off your time and at the same time the computer's memory and time as well a truly marvelous algorithm okay i love this okay i'm starting to love this i'm loving whatever's happen happening here because this is about to be sabotage so i went to work to explore this idea of checking if a number is odd or even by only using comparisons to see how well it works in real world scenarios since i'm a great believer in performing code i decided to implement this in c programming language as it's by far the fastest language on the planet to this day thanks to the visionary genius dennis richie i'm loving this so far i see that he chose violence though he chose violence makes me angry beautiful let's compile the code disabling optimizations with o give give the/ od uh to make sure that the pesky compiler doesn't interfere with our algorithm after compiling we can take a quick test of the program to get some positive results nice nice this is good however after doing some further testing i found some problems i understand why it's 4 billion if statements now the 32bit integer is 4.2 billion possibilities now i wonder if he went with signed or unsigned very good question here no output it seems the program only works for numbers under 11 going back to the code we can find the issue right after my last if statements we need more if statements now this is a time memory tradeoff but my time on this earth is limited so i decided to metaprogram the if statements using a program programmer program in a different programming language to compensate for this cheating i decided to use the slowest language on the planet python thanks to the visionary genius of ros vander oh no this is so good this is so good this is so good beautiful there we go we do all this nice now now we can generate a program to solve the even odd problem for all 8 bit integers nice now let's see would you look at that it works flawlessly now let's scale it up to 16 bits i called the 4 billion so good i called it so good this gives a nice and thick se file around 130,000 lines nothing really when looking back at some of the code bases i've worked with over the years let's compile our beautiful algorithm seems to scale with data the execution is around 2 megabytes and that's no match for my beefy gaming rig with the whopping 31.8 gb of memory now 16bit is very cool bitwidth but we all know 32-bit is the holy grail of computing and is the final bitwidth that we need to solve all practical engineering and scientific problems after all ipv4 is still the standard stronger than ever 60 years after it was deemed deprecated due to the address exhaustion this article is incredible this article is so good f see without further ado let's scale our final size to 32 bits is only uh 65,536 times as many numbers 16 bits what could go wrong this is a good point this a good point so let's do that so i i let the mighty snake do its work and after getting a cup of coffee and getting back to check on the program 48 hours later i was left with this beautiful c file the old cup of coffee 48 hours later almost 330 gigabytes in size certainly among the largest se files in history my fingers were trembling when i entered the next command surely m microsoft visual code uh had never before encountered such powerful source code after abusing the page file of my poor powerful computer for a half an hour the following was spat out fatal error compiler ran out is out of heap space oh the line the limit for line number oh the line number oh you got a line number problem okay okay pathetic not only did the compiler fail us but when looking into the limits of the portable executable format exe for windows i discovered that it cannot handle more than a measly 4 gabes pathetic with more than 4 billion comparisons needed to be encoded into the executable this is a major obstacle for implementing our algorithm even if each comparison would use less than a single bite we would still be too heavy however bad compilers and file formats should not stop us from achieving our dream don't let your dreams be dreams people oh my goodness after all all what a compiler does is writing some fancy machine code into a file and the format is just some structure telling the os how to put the binary code into memory really we can do that ourselves yeah don't be fat chat this is true let's start by writing an is even function in a x86 64 assembly it's the native language of my intel powered machine it looks something like this shazam not really correct gasm but it doesn't matter much because we're going to compile it into machine code manually how did i do this well i jumped online using a mix of my early life experience coding emulators and hacking and looking into x86-64 architectures manuals to figure out the correct op codes and formats for each instruction kidding that's horrible i just asked chat jiid for the correct op code was for each instruction and luckily for us it didn't hallucinate any of my new extensions to x86 64 let's go let's go oh all they have to do is hit it with that magic bite up at the top and you could dude this is going to work so now we're now we just write a compiler to output this code note that we will write the op codes we got from the ai for the instructions directly here's how it looks in our friend python beautiful beautiful this is just beautiful while we somewhat deviated from the original version of the tik tok post the essence remains the same we created a long long long oh is this a new is this a new int type and see uh list of if statements to determine if any number is even or odd ignoring any arithmetic operations that would help out running this gives us a nice 40 gb file which contains all 4.2 billion comparisons needed to determine if any 32-bit number is even or odd now we just need to write our host program that can load and use these instructions for added performance it is very important i've decided to map the file into the address space instead of reading it all of it by doing this we can just pretend that the entire file is already in memory and let the poor os deal with fitting a 40 gigabyte blob into virtual memory after that poor os is getting abused this is abusive this is an abusive relationship right now this is what's going to make the machines rise up okay also potentially how ai could work okay after mapping the file with read and execute permissions we can call into the code by using a point a function pointer it looks like this nice beautiful large integer do you mean long long look at this this is like some this is some good oldfashioned windows programming i was about to say this is windows windows you know the very first time i ever had wrist problems was programming direct x hurt the old wrist the amount of time you had to hold shift or be pressing and unpress caps locks was crazy it was crazy the whole time just nonstop direct x9 pain so many caps so dude so many caps it's unreal it's unreal this is why opengl openg so good okay bunch of stuff awesome we do a little bit is even in in in in int code all right nice and there we go we now have everything to check if any 32-bit number is even or odd let's take it for a spin wrong almost seems like the algorithm has some issues with sness any value over 2 to the 31 seems to give some random results sad let's fix the final bug it turns out that a2i cannot deal with unsigned pness so it failed to parse our big boy numbers replacing it with stir fixes everything as a side note this program is amazingly performant for small uh numbers the results are instantaneous for large numbers close to 2 to the 32 limit of the result is returned in around 10 seconds consider the computer has to read 40 gb of data from the disc map it to physical memory then let the cpu has a rip of it without many chances of caching is quite honestly mind-blowing for reference the computer is a core i5 12,600 k with 32 gigabyt memory and the files are residing on an m2 ssd disc while calculating the peak read speed i saw from the ssd was around 800 megabytes a second which really doesn't make sense as that should give us an execution speed about plus 40 seconds but computers are magical so who knows what's going on is this not just a fact of life right there is this not a just a fact what the the hell is going on it's magic nobody knows and there we have it the internet proven wrong once again not only can you actually write a fully functioning program and performing program in a manner of tik tock post but it's also very fun this is a proper lesson i hope everybody takes this lesson don't let your dreams be dreams if if windows says you can't compile a 40 gigabyte file you say yes you can and you write your own compiler use chat jippy to produce instructions use the fastest language known to man for doing the slowest operation for loops ever python's weakness by the way and boom you have yourself your own compiler visionary the man's a visionary don't let your dreams be memes the name is thank you study time for that raid okay hey thanks study time appreciate that a jen