so apparently there is a professor that reacted to me reacting to dave farley about functional programming is not better than oop i'm a little nervous cuz one i hate hearing myself talk i think all people don't really like hearing themselves talk back cuz uh and b i also don't plan anything i'm going to say i just kind of free form okay i kind of ejaculate words out of my mouth and so like just like that phrase that phrase was not necessarily a plann phrase but it still came out the face hole and so here we are reacting to a reaction of a reac okay i i tell my wife every time i teach this particular lecture like this is such a snoozefest so i've decided this time average doctor disrespect enjoyer you can just tell right away this man is an average doctor disrespected joyer right there just hitting hitting him with the snoozefest you know for a fact this guy is out there just being like you know my students just flap of their gums all day dude it's so good especially because we're trying to squeeze it in a little bit let's only talk about the stuff that matters and let's try and make it a bit more fun so this was what the outline looked like as of uh october 22nd or you know a few days ago this is what it's going to be today i am really deeply feeling uncomfortable right now i really don't want to know what stupid opinion i had and i can't believe dude i can't believe i sound like a cartoon character we're start by watching uh prime who said the name right said the the name right let's go let's go random b tier blog let's go dude the guy a he likes it he likes it proto prototype based language javascript get the hell out of here somebody that i just found like one of my friends showed me him a little bit ago we're gonna still focus heavily on the core concepts of o cuz that's something that actually matters you guys think think that you know what o is you don't even know what the concepts are oh no i think i know what he's going to quote me on i think i know what's about to happen here but you've written a lot of o so it's going to be familiar deeply uncomfortable uh then we're going to look at this kind of bad blog uh but it shows an interesting point uh we're going to skip prototype based stuff entirely talk a little bit about this language called small talk the small talk you know the funny part is is that every time i hear someone talk about small talk it's almost universally pretty positive which is strange because it seems like small talk would be awful but i've heard so many positive things about it which is i'm just having a hard time uh believing that small talk is true o op apparently it is the only true scotsman how's the weather driven development small talk yeah cuz nobody is actually using it anymore okay i mean that's that's fair it's i mean fair if you want modern small talk you can try pharaoh i don't want modern small talk okay it's like latin everyone knows that it exists but no one actually speaks it out loud you've probably never heard of but is extremely influential so with that said welcome to professor reacts to primogen reacts to functional programming is not better than oop please like and subscribe one of my most yes let's go man this okay this this prof this professor is pretty good this professor is pretty good because i never remember to say like and subscribe and he's out here just doing the lord's work for me all right this might be a little bit low so i'm not exactly sure i i may have to like bump up the volume okay and then it might get really loud when the professor talks just a ear warning okay ear warning i can subscribe one of my most successful videos on this channel so far compared functional and objectoriented programming this is an interesting topic and clearly not just to me but there's more to this debate than we discussed in that episode this is one of those debates that to be honest seems a little weird to me i think i could have agreed with this this this take not too long ago real talk i i really do think i would be on the this is yeah so we're we're currently talking about the debate between functional versus oo which one is better primagen is a netflix senior engineer he's got like two decades of experience writing code he's also like a twitch streamer that you know is kind of funny so hey we got kind of funny we got kind of funny okay i think i could put that on the shelf i feel like that is going to work out oh man that in fact that's turning into a tweet right there and boom i'll accept it i i'm going to accept it i accepting kind of funny not not like fully funny not like zach galaan ascus funny but you know we we're getting places okay we're getting places a three out of five funny yeah a solid three out of five funny some professor while uh while shrugging while shrugging we're going to watch just a little bit of this strange debate kind of talk maybe if you would have asked me five years ago seven years ago hey prime what do you think on the functional versus non-functional debate i would probably take i'd probably have some stupid ass take right this was probably during the height maybe if you went eight years ago my height of loving rxjs and i'd have been like reactive functional programming so great right but i really don't even know what functional programming is at that point still don't even really know what it is i you know a real i'm just going to be straight up here does anybody really know what functional programming is you know that's kind of hard procedural programming is greater than everything else what is procedural programming let's go does anybody really know what functional programming i mean pck does pick knows but i don't know okay i don't know really no okay i'm not a hasler okay even my only base experience my baseline experience in functional programming is my brief little forier my little little dip in my hot dog into uh o camel and that was not like it's not like o camels considered real functional programming to the hkers haskers look down on on o camel they're like oh o camel that's not even real right and so it's just like o camel my camel feels real but apparently it's not really real t surely knows functional by now no he doesn't he only knows o camel tj isn't a real functional programmer yet okay it has a while loop in it it's fake functional programming it is fake functional programming okay is it like scripting pretty much no no it's different than that you guys have all written procedural code i love this c c is procedural it means you use a function yes a procedure is called a function i love it if you wrote functions you've done procedural code he's using it in a slightly different sense in that everyone talks about rust being procedural they just say that because they want to pretend it's like c yep anyway oh my goodness that is such a good take they just want to pretend rust is like c they just wish rust actually was based but it's not based okay it's never been based it just always wished it could be but they just they can't you know and should we ever be surprised that an authoritarian language has people that are running it that are authoritarian no we shouldn't be we should not be surprised this is great my stance is not that i hate functional programming in love o or vice versa but rather that i think of each of these approaches as tools rather than things to go to war about so so i i'm not even so this whole idea of saying that a language paradigm is a tool is an interesting take to begin with right i'm trying not to insult it's a wrong take a paradigm a paradigm is a perspective let's go functional programming is not a tool it's a way to look at a problem go then the language itself is a tool that you can use to solve that problem oh i love that that's actually a really good take by the way bas professor dunking on prime this was perfect i got dunked on and i am completely okay with it that is like the perfect way to say it by the way is that it is a paradigm it's a way to look at a problem it is not a tool that was perfect this was fantastic let's go retake it i'm doing a quick retake retake that's my opinion that you know that you know that meme where the guy hands an opinion to somebody else and then somebody else is holding it and then they're just like that's my opinion that's not my opinion this is my opinion that's mine you're welcome professor but the paradigm is a perspective because is it a tool or is one objectively better than the other because they're both they're both an equalizer if you will they both simply take i i disagree with a lot of this it's kind of nonsense whoa i don't think it's nonsense i like the framing they both can end with the same result is what i was saying okay i got wrecked i got wrecked wholesome man becomes wrecking me here okay but i i mean what i say is they both can end in the exact same result both can produce the same end software though hasal has never actually delivered to production i i hear a can and i hear it's the best software ever uh he disagrees so he fast forwards well he has to it's not like he he could just sit there and do that but is is it actual like one problem i always see is that efficiency of tools is the largest indicator of whether or not your project is going to be successful the first time that i wrote harpoon i wrote a terrible because i really didn't know neovim the second time i'm writing harpoon i'm doing a lot better and it's just simply a proficiency of tool problem now that i know my tool better i can now use it and write better and so if you are really adept at functional programming you can program pretty much any problem using functional programming and so is there any real uh you know like is there is there is there a difference in the end it's always a skill issue life is literally a skill issue just constantly happening oh i think we can skip through actually versus oriented is like the uh that something is leaning towards or going towards it uh anyways uh i could agree with this take so far okay me and this dave guy make have changed this is an interesting insight and certainly bears some relationship to how i usually designed systems even though as i've said before i think of my approach as more objectoriented than functional definitions of oo usually include abstraction which allows us to hide unnecessary details inherit i don't like that word okay i'm a 1d programmer i like one level of abstraction rtion anytime you're working with an abstraction of abstractions it becomes this insanity to refactor like the moment you need to change something you have to change so many fundamental absum absum assumptions wow that's not even assumptions about what you've done and it just like blows things up anyone here anyone here have that happen to them anyone here work in really abstracted environments to make every problem feel simple anyone here uh i work in an enterprise platform in which every single problem needs to feel simple and therefore a simple problem which is one line of code at the end of the day feels nice but the moment you need to change it the amount of underlying things you need to change to remain this one line of code being nice is crazy find that abstractions though they look nice in their end product like you know you tell me tell me this does does not feel good when you come up with an abstraction that when you write it out in like its final line it's like one line of code and you're like dot do that do done that boom look at look at me raise of hands how many people agree with that statement you reach that point it's so nice it is so nice how good i am you know you're feeling so smooth i totally agree with me okay i was right on that one i was 100% right on this one pre-at pre-reacted and then somebody comes along it's like uh i need to add one and you're just like my life i hate myself and i hate everything here and i'm going to quit my job right like it's just like you somehow ruin your life over like the simplest request because you think you have something great and then all of a sudden you're completely wrong because your abstraction just slightly changes and now you're refactoring an abstraction that's built on an abstraction that's built on an abstraction and your whole life crumbles i hate it defining one type of thing in terms of another polymorphism being able to access things of different types through the same inter pretty much all of this is functional programming minus inheritance but i'm sure there's some sort of i'm sure there's some sort of like type type field property inheritance that you can do right i'm sure that literally exists where you can just like map over the properties from one onto another object and it's like a it's like a a thing you can have inheritance in hasal yeah yeah face an encapsulation which allows us to hide polymorphism isn't just an oo principle right i mean polymorphism all right we have our first definition of oo yeah we have four principles that make up what is object oriented abstraction inheritance polymorphism and encapsulation and with that let's actually swap back to slides i i was really hoping he was going to say that's also functional pretty much that is is functional programming right like that legitimately those four points minus inheritance inheritance probably you could you could remove off that abstraction encapsulation i forget the other one uh polymorphism like it's not like any of those aren't functional programming also it's it's emotionally painful okay it's it's emotionally painful but hey pis labs appreciate this reaction uh i know you didn't like that part okay sorry you didn't like my full reaction okay i tried my best out there i don't know if i don't know if you ever do that but it sometimes you just say things and they don't come out necessarily correct but hey w professor appreciate that hey like and subscribe on his channel bam subscribed bam i'm liking it uh professor using prime videos w professor i know still a w a w is a w that was fun hey thank you very much the name is the reyen