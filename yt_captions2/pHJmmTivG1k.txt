how to be a negative 10x engineer we used to always make this joke at netflix that we had a lot of 10x engineers all the 10x engineers just made 10x more work for everybody else a plus 10x engineers may be mythical but negative 10x engineers exist absolutely to become a negative 10x engineer simply needs to wait 400 engineering hours per week combine the following strategies this is great this is great nullify the output of 10 engineers change the requirements as far into development as possible to avoid blame obfuscate requirements from the start okay that's pretty good that's pretty good but i would call this uh i would just call this regular work this just this sounds like uh this sounds like a scrub master uh all right create 400 hours of busy work ask your team to perform tasks that uh resemble work common examples include presentations diagrams ticket management create pointless rituals this is so good oh this just this just you just got kicked in the agile right there no man astral's really good or let me just hold on one second hold on just one second you know what i think we're missing have a retro about how our last week went you know let's just talk about it because i feel like there's some complicated things there boom one hour across five people you just went i mean you literally got over one percent of your goal in a single phrase think about that for a second 400 hours of burnout turnover okay okay be thankless forced blame so confusion get angry cause others to work overtime interesting okay one time i had a i had a so i had this thing that i i still to this day i'm a little bit salty about to this day i'm still pretty salty about it i'm still very salty about this okay i am very sorry okay i'm gonna be real here i'm actually pretty dang salty and it's like 10 years later okay uh i was working at a company called workiva i won't name anybody uh but one of the teams decided to make a change to their software and the change was that they're gonna have a default options have a certain set of things on it so they're therefore they're going to reduce some set of production bugs by having default options contain certain values and here's the deal they didn't tell anybody and they published the software under a patch version you're probably thinking why was it a patched version well the original input to this was in python of course and when you originally instantiated this this had to do with kerning of characters and all that when you originally instantiated it you could pass nothing in and it would instantiate but not all the default options were filled in so they just made their own default options right they just did their own thing and just threw it in there now here's the deal they didn't change any interface at all so since they did not add to an interface that's not minor since they didn't break a contract it's not major it's a patch version they only changed inside the function but they literally changed it i forgot to turn off the alarms thank you lithium they changed it inside the function so new defaults came out of nowhere they just chose defaults that they decided and so of course they published it we pulled it into production and the next thing you know i am off trying to fix some stupid ass bugs in production and i go over and say yo what's going on here uh it's like this whole thing changed and they said what do you mean i'm like it used to work in zero eight one and it doesn't work in zero a2 what happened and they're like oh we changed the defaults and then i said why don't you bump that like as a major change or a minor change they're like oh well the interface didn't change i was like no but it really did change like implicitly like you're in changing what was happening and they're like no it didn't change we're not going to do it and so like i've i've had something like this happen where it's just like you create you sow confusion you create people to go work overtime to go figure out some nonsense because things are breaking in production all over the place but there's absolutely like sorry that's how that's how suddenver works and you're like no it's yes it's house denver works but no it's not no it's not olivia you're not working overtime with me and i just oh man i hated it i hated that was i'm still salty to this day and it's why i hate semper like to this day i hate semper because of that it's an incomplete thing when people dogmatically follow semper it's the worst i think you should just you should just simply follow it like the heart not the letter and it goes way better it would have been more obvious if the defaults were part of the contract it wasn't though that's what caused this whole argument whole 10 engineers hostage in a technical discussion all this oh man this is actually why i got burnout and this is why i quit netflix let's let engineers discuss ideas encourage them to pursue elegance over pragmatism ensure nobody has the authority to make decisions okay no no so i'd go the other way around so i think i i don't think he's quite doing it i don't think he's quite doing it right here you don't want that what you want is you want to find the most idealistic engineer possible and then i want you to make them you want to make them architects but you don't want them to code and then you let them change their mind once a week about everything in the pursuit of elegance over pragmatism i quit netflix in 2016. i joined back in but i'm just saying this this was like 2016 or 2015 or 2017. somewhere a long time ago and it was just like i still remember that where man we would have these four engineer meetings and every single every single three days it was like a new thing was needed and the amount of times i rewrote an algorithm is mind-numbing i felt emotionally painful by the end of it like i i i i i i i i i i i uh meeting let's say meetings rec calendars to inconspicuously waste others times write lengthy messages and documents and share them as widely as possible welcome all opinions that aim for engagement oh my goodness okay so this is actually this is like hilarious because this is definitely netflix is a very largely uh document driven culture i see this quite a bit it's like it's impossible it's impossible it's impossible i hate that i hate that everyone's life eventually everyone's life becomes uh becomes documents and it's just the worst i try to i try to avoid it as much as i can uh waste 10 weeks of wages on cloud costs oh this is a good one this is a really good one this is actually a really good one write slow programs avoid db indices write single threaded programs on 16 core machines uh opt for exotic hardware with fancy ram and gpus store the data on ram slash disk liberally don't compress anything pay no attention to data layouts all right so i do actually have something in here that i think is really really good so right here run single threaded programs on 16 core machines actually so actually i think this is actually a really good take it's one of the reasons why i like grep over rg and over these other multi-threaded uh solutions is that i think if you're running just grep you're probably doing it wrong learn how to use parallel you control how much searching you want to be able to do and where and so i do a lot of things where i will i will do i like writing single threaded programs intentionally and heavily relying on standard in and standard out and then using parallel to do all of the you know all of that uh like threading through multiple lines right like if you really write a good set of tools you can have parallel these things parallel these things parallel these things now see the parallel green threads no not green threads it's it's the program parallel gnu parallel i really do love this thing it is fantastic and the more it's like xargs but multi-threaded all right it's really really nice and so the more you actually uh the more you end up using this i find that i actually have a really like if you write your tools right and stupid and just use one thread well you can really massively parallelize your tools without the high effort of every individual tool being parallelized because one of the problems is this is that so one of the reasons why like here i know we're on a tangent here but check this out i'm gonna just grab this thing all right we're gonna go like this so you have uh you know you know tool one right you know it can be whatever you want and you have tool too uh tool two and let's do one more tool right and you have tool three and so what typically what you're gonna do is tool one will go off and create a bunch of threads to do its work right because this is kind of like the rg you know these other things you know right you get you get a lot of these right and they just create massive amounts of stuff and as they're done they're piping out their input into tool two right well tool two also is like ah you have six cpus well guess what i'll use all six of your cpus or you know whatever whatever it says right and then now you have the you have the exact same problem going here because each one has their own threading model and then you have another problem right so each stage in your pipeline just massively spawns things and all of a sudden you've made just this crazy you've made this kind of crazy thing or you have to build in a pretty comp you have to build in a threading model that takes in a numbers and then you have to manage the numbers yourself through all this which is just super annoying it's just like not fun so instead what i've been doing is getting rid of all of this and i just go do you like i've that i've chosen this turd brown color i feel like this turd brown color just really speaks authority right i've been doing parallel right like parallel you know parallel five right parallel five this and then just run parallel and pipe these into each other and so i just have these five streams of running data so that way as one thing completes it flows into the next one which flows into the next one so i'm getting these completions faster and i'm not like completing one pipeline or one set of the tool fast and then pushing everything through right i like it better and so usually all my programs always start with something like cat right i feel like cat is just the place to start with right some sort of cat right meows in a bunch of session ids and then from my session ids i flow them through the through the system and i really feel like if you build tools like this it makes life a lot easier compose your tools don't build it in you know what i mean this is excally draw personal opinion though again very personal opinion some people strongly disagree with that but that's kind of like a tool design choice you know what i mean so anyways this is great create useless tools oh i've definitely done this decide that an existing solutions aren't quite what you need write scripts that only one person understands if the script does something important avoid documentation okay so this is a hard one because there's definitely like a like there's definitely a problem with this one there's not always you can't always go on pave path but i totally get this right the don't write the documentation less important as much as just i mean depends on what you mean documentation how to use the tool very important what the tool does internally in like code documentation i just i've never looked at i don't know i like this i like this that there's this whole problem if you work at any sufficiently large company there's more and more domain knowledge tools you know what i mean like at some point you have to do it and there's just no way you know i mean there's just like no way you can you can avoid it i don't know so that that was really hard this one i feel like is a hard one that every tool struggle every company struggles with of a certain size add 400 hours of compilation build time this is great slow builds waste time in our let's say an incurred compound interest as build times increase developers are more likely to distract themselves ensure that developers are context switching yes this is beautiful yes you only need it to take that long what whatever the mean time or the median time to twitter usage is go like one quantile higher if it's like if the 50 percentile or if if it's if the 50 percentile is say like three seconds and that's what causes you know half the people to go go to like the 75th percentile what's going to cause three-fourths of the people to become distracted if you can hit that you're doing good that waste huge time right pointless test oh i love this create dependencies on particular variables without testing the underlying functionality mock function calls until no original call uh code runs introduce subtle randomness into your test so that they succeed or fail without hmm i'd say that if you're gonna do this if you're gonna do it if you really wanted to do this i wouldn't say write pointless test let me uh hold on what i would do is i'd write a series of tests that actually have a bug introduced intentionally into it in a very subtle way such that when you fix the bug it will cause like 25 test to fail and so it becomes excessively hard to figure out where you went wrong and what is broken about each one of these tests you know what i mean now that to me would be way more insidious because then it becomes harder and harder to fix tests yeah weighs 400 hours of engineering on bad architecture oh this is an easy one oh this is an easy one oh dude this one is simple just follow react's current guidelines remember when they said uh higher order components were the way yeah and if you've ever seen a 10x engineer become a million x engineer higher order components were that higher order components were the first ever million x engineer ever it has literally destroyed the universe oh man that was such that was such a nightmare that was like the most nightmarish thing of all time what's the problem with high uh hlc uh dude hocs create the greatest debugging nightmares of all time just the worst every time you can add in one more hoc is every one more confusing debugging way you get to go about things it's beautiful uh all right 400 wasted hours on deployment okay create as many environment environments as possible production and staging must differ wildly this is actually really funny it's actually really hard to have a staging that is like perfectly aligned to production i feel like this just happens if you have a staging it's wildly different than production uh launch fragile code with fragile build systems yep this is great beautiful lose 10 weeks of wages on unhappy customers okay this is easy just have have simple bugs crop up repetitively simple ones right worthless documentation oh i love it oh i love it i love when you enter into a file and there's like a 10 line there's like a 10 line explanation of the code and it's like the simplest code you've ever read in your lifetime and you're just sitting there like why is this all here or you have code or you have like these do you have these files that are just like these large swaths of comments and these like single little bits of code and you're just trying to figure out what the hell the thing does oh beautiful trap10 engineers and futile skunk works projects okay attract bright engineers and waste their potential undersell the difficulty of the pro oh yeah understand let's see under oversell the project's usefulness tell management it's almost complete until they scrape it i've seen this happens a lot this happens a lot i've built the wrong tool once and this happened to me i did this on accident so to be fair sometimes this just accidentally happens add dependencies that demand 400 hours of maintenance oh i love it engineers uh individually learn each library i love it i still remember ramda made it into the netflix code base ramda i love curring everybody else should love curring ramda uh never admit failure drown your team in a sunk cost ignore 80 20 compromises that can improve your circumstances i love it i love it delay pivoting is always this is actually such a real one right here if you can delay pivoting you can destroy a project like when you know something's wrong higher 10 xerox engineers oh the is this the bozo explosion that steve jobs used to talk about for those that don't know there's this old phrase that used to happen this used to be like a big thing people used to talk about but now i think it's like no longer politically correct to talk about but they call it the bozo explosion where effectively you hire top tier talent right you hire four a's but they're not accident you let one a minus in right and now that you've let one a minus in well a minuses can spot a's but an a minus might accidentally like indifferently see uh or uh they might accidentally see a b plus as equivalent to themselves right and so now you have a b plus that sneaks in and then your b plus makes the same mistake it might see a b as the same as an a because it doesn't really know and then you keep on going and eventually your organization is only filled with season d's and so there's this like big thing that steve jobs kind of pioneered i believe he was the one that called it the bozo explosion but that was kind of like the big thing that it was like the mantra of companies in like 2010 era was don't hire a minuses because you'll create a bozo explosion it was very very funny but really if you do hire what like because the thing is it i mean this is a really good point though if you do hire a couple bad engineers couple bad engineers will let through more bad engineers it's a really hard thing hiring is just super hard in general because you it's really hard to tell the difference right i can i mean that i barely can tell a difference we're all bozos at some point exactly everyone's a bozo at the same point right uh you know i mean like i i'm fine with bozos the thing is my big thing is when i'm hiring someone i'm gonna go on the inverse on this one when i'm hiring someone what i really do look for is someone that is just thirsty that's it if you can just at least hire someone that's curious and constantly learning you're gonna get the right you're going to get the right talent eventually and that's all you really want when i say thirsty i don't mean like twitter thirsty okay that's a little different you know what i mean you know what i mean higher uh five negative one engineers don't settle for dead weight actively hire engineers who cost catastrophes and resist learning this is funny prevent 10 negative one engineers from getting fired oh beautiful beautiful vouch for bad engineering yep incur 400 hours of bug triage make un uh debuggable programs plaster layers of abstraction over everything right spaghetti code to make everything sensitive to initial conditions avoid peer functions use dependency uh liberally uh say it works on my machine whenever possible you know there's one thing i've always wanted to do is that i believe if you could you could make enough pre-processor preprocessor macros in c to make it impossible to understand that you've just created math or like true equals uh some random number is greater than 0.05 or whatever it is you can make true false in the most completely undetectable way that no sane engineer could look at and you could write the craziest the craziest bug ever that only shows up every 1 000th try i believe it's possible i i truly believe it's possible you could do it define yeah but i don't know how i've always wanted to try to research like how to create the the most insane bug i'm sure someone's done it that's borderline terrorism exactly it's pure evil but i think it'd be really fun because you could you could always read out of dev random right and you could always get a random number no matter what you know you know you could fight you could find some way to get a random number find some way to make it super super small and just screw somebody right but it only screws them yeah exactly that's pure evil but i think it could be really fun yeah i think so too i think it could be really really fun to see like can you create a preprocessor macro that is like a series of macros that are a series of macro spread out over like a 15 files 20 files and eventually make it zero in on define true false every now and then foreign yeah but but this one i mean that one the whole replace uh uh semicolon with a greek question mark that one the problem with that one is that one's always a bug you want something that doesn't always do it you know like it's a rarity it has to like you have to do something so magical that you can't it only shows up every now and then that's where the true magic happens you know what i mean that's where the true magic happens something that's not repeat yeah exactly you don't want something repeatable yeah exactly anyways this was a great this is a great article these are all great things to do honestly there's a lot of these things that you can just avoid i i personally say that just in the industry at least everything i've been a part of the biggest way to avoid a lot of these is just be more pragmatic in discussions right away avoid people that like to pontificate you know what i mean just avoid that if if there's people that love bike shedding don't work with them just go no i don't want to do that tell your boss be like this person bike sheds constantly i can't do it like help me avoid working with them just literally go against bike shedding bike shedding is just the worst i hate it i don't do it i don't like to do it i don't want anything to do with it it is so annoying the end okay