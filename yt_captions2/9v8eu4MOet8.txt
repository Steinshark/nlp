hello and welcome i'm james murphy and today 
we're taking a look at a subtle rule that   python has about variable scopes. let's 
play a game. what does the function print?   let's start with an easy one, shout out the 
answers as we go. tell me either what it's   going to print or what error it's going to give. 
let's start with f what do you think happens when   we run it? well of course when we run it we 
get an error, specifically a name error. okay   the first one was really easy what about the 
second one, g. is it any different from f? well of course we still get an error, but it's 
actually a different error. now, technically,   unbound local error derives from name error, but 
i think it might be surprising to many of you   that something different happened at all. somehow 
python knew that i was going to assign to x later   in the function. normally in python, outside of a 
looping context, we don't expect statements in a   function that are later in the function to affect 
statements that are earlier in the function.   it turns out that whether or not a 
variable like x is determined to be a   free variable or a local variable is actually 
determined at compile time, not at runtime.   in the function f, there are no assignments 
to the variable x so x is determined to be a   free variable. that means when we say print x it 
tries to look up x in the global scope and fails.   in g, however, the function does contain an 
assignment for x, it says x equals 1. so that   means that in the function g, x is determined to 
be a local variable. that means that when we try   to print x it looks it up in the local scope and 
hence we get a local error, not a global error.   keeping that in mind, let's look at another 
two examples and see if you get them right.   what do you think happens when we call h? we 
have defined the global variable y equals 0   before defining the function and then we try to 
print y in the function. go on just shout it out.   okay this was another easy one, it prints zero. 
now what do you think happens for the j function? take your time, i'll wait. okay have 
you locked your guess in? here we go.   when i run the j function, i get another unbound 
local error. now you might look at this and say:   when i call j, we have this global variable y 
that's defined to be zero, so print y should be   printing 0 just like in the previous case. but 
that's not how the variable lookup rules work.   because somewhere in the function j assigns y a 
value, everywhere in the function y is treated as   a local variable. that means at the beginning when 
we try to print y, it doesn't even try to look   it up in the global scope. it only looks in the 
local scope. this can be extra confusing because   this assignment y equals 1 could theoretically 
be hundreds of lines later in the function.   this is yet another reason to avoid 
using global variables if you can.   i also want to point out that other languages 
like c and c++ do not do things this way.   when i run this function it first prints 
the global i and then prints the local i,   that's why we get 0 and then 1 down at the bottom 
here. i even compile with -wall and -wextra to   give me extra warnings and still no warnings to 
be seen. if i want to get a warning for this kind   of behavior i have to compile with -wshadow. the 
shadow here is referring to the fact that what i'm   doing is called variable shadowing. if i have a 
variable in an inner scope like inside a function   where i define a variable that has the same 
name as another variable in an outer scope   like the global scope, then this is called 
"variable shadowing". in this case i would   say that this variable i shadows the one 
in the global scope. for obvious reasons   you should really try to avoid this if at all 
possible. of course the same goes for python,   shadowing variables puts you on the fast track 
to writing bugs. in case you were ever wondering,   this is actually one of the reasons why i define 
a separate main function rather than just putting   things down here. any assignments that i do 
down here are actually in the global scope   and that means there's a chance that they're being 
shadowed. i might expect an error if i try to   print y here but because the y down here is in the 
global scope i actually just print that y instead.   on the other hand if i define a main function 
then any assignments in here that i do are local   to that function. that means anything that i do 
in here i don't have to worry about affecting   things in other functions like h. now when i 
run the function i get the expected error in h. that's all i've got on this topic. now that you 
know the rules, go back and watch the video again   and let me know if you get them all right this 
time. if you like the video, please consider   sharing with your friends, subscribing, and 
slapping that like button an odd number of times.