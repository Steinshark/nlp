all right so this has to be the craziest title i've ever seen in my entire lifetime so of course we're going to have to do this by the way for those that don't know ai and dev fear caused by agile and scrum failures i mean first off all my homies hate agile okay so i'm loving this already my name is carl and today we're going to talk about devon again we're not going to talk about is deon a software engineer i did that video the problem we're going to talk about today is i didn't see the video on is devon a software engineer but i will say that all the people that work on devon i forget the name of the company that does devon they all have human software engineer in their title and honestly like nothing's ever made me want to like you know the batman meme like i just i just i just want to i just want to slap them you know what i mean like you are just sof engineer just shut up you know what i mean dude it just it's bad it's real bad you shouldn't do that you shouldn't do that okay given that no one would consider for a second the idea that this asphalt p leing machine was a civil engineer why do so many people think so little of software engineering that they would believe that okay first off i got i got in there look at me i got in i got in on it let's go let's go by the way if you did watch my video on devon i i am personally not impressed by devon okay so for those that don't know i don't think devon's a software engineer let's go we got mentioned we got the free publicity boys we got it devin was a software engineer the answer as you probably saw in the thumbnail is agile but how we got there that's the interesting part so the story starts as most of mine do back in the 1990s back then software projects were a new thing people only knew one good way to manage projects and that was a gant chart and this is a gant chart it doesn't work great for software by the way i started programming like late 90s and then was in college in like mid 2000s so i never even i've never even heard of a gant chart okay this looks like waterfall by the way waterfall like can we all be real for one quick second agile is just waterfall okay agile is just you're taking a kayak down a waterfall so you can try to like you can try to adjust courses but let's just face it it's all waterfall okay it's all waterfall in the end there are many waterfalls because here's most of agile is that you do the same [ __ ] for like three months and because you're agile it means that the product manager can then pivot you so you're in this ever repe competing cycle of never actually finishing anything and getting emotionally rung out and eventually leading to dark places like burnout like that that's like the power of agile like if i could describe agile in a couple sents that would be it agile just means you can throw stuff away without uh forcing a group suicide yes you can do it without force suicide but you also get for you get you get these slow inevitable burn of group suicide due to the fact that it's just like man it just repeats and then all a sudden you're getting somewhere things are actually looking like you're going to do something and then they're just like i mean we're angel let's just pivot a little bit and then bam hate my life i'm literally getting in trouble right now because my project has no testable pieces for qa until the project is done and they're yelling uh and they're yelling about agile and [laughter] testing i hate agile i hate agile okay there are all of these dates and durations and things and with software it's really hard to estimate how long something is going to take 3 months from now when you don't even know things that are going to happen between now and then you can manage projects with this and i have but it's not a really good fit agree and in the late 90s we got this alternative called xp extreme programming there's something kind of hilarious about the title of extreme programming a gentle introduction like i can't why is anything that is extreme why is it why how could you ever have a gentle introduction into it like you should never be there should be no gentle extremely ungentle introduction into extremely gentle and it differentiated itself from the gant chart stuff which they retroactively renamed waterfall as being you know more flexible and it was certainly more flexible and that was a good thing here are the rules for extreme programming um you may have never heard of extreme programming but if you look at some of these rules they'll seem familiar from what you've actually been doing lately these iterations and small releases became sprints interation planning became sprint planning oh look the stand stand up meeting joy yo i hate standup meetings i think we should make our own version and we're going to call radical programming okay i'm gonna can i can i can i just take a step back here i'm going to say something that some of you are going to have feelings hurt afterwards in fact i'm going to not only just do that i'm going to do it on twitter maximum maximum casualties i don't like working with people that like standups there set it post it let's go how do you feel about that how do you feel about that okay you know what i just said right there you know what i just said i went in i went in i don't want to work with people that want more meetings okay i want people that are be like this meeting better be an email or the most productive thing i've ever had because we're not wasting time around here okay i don't want any of that i don't want none of it context though dude this is twitter there's no context on twitter okay if you want context and you want discussion don't go on twitter twitter is use ful for only two things platitudes that are completely worthless and vim versus the world arguments there's like nothing else okay there's nothing else and if you think there should be something else you're wrong also [ __ ] in the bio all right now i i didn't think i say [ __ ] the bile today but here we are here we are but a lot of stuff didn't last back then we had release planning and a release schedule but a concept pa program to be fair with this kind of stuff if especially since this was like early 2000s there are still like the majority of stuff being created was being created in like uh c++ land java goys right like that they're actually shipping out hard products they're not doing the internets you know what i mean and so like internets the idea of release planning in a release schedule doesn't make a lot of sense you know what i mean it just doesn't because there's not like some definite date it's not like hey we need to drop our product on people's desktop and we don't have a chance to update it very easily so we better get this one thing right you know like that's a much different feel back then than with the internet the internet's like i don't know we might get it right today and if we don't i don't care programming turned out to be not very popular and we stopped having as much emphasis on testing as we probably should by the way code the unit test first extreme programming birth tdd those sons of [ __ ] those sons of [ __ ] were the ones that did this didn't they use collective ownership is that communism mentioned did we just get communism and tdd tdd is communism is that what i'm hearing right now nobody does tdd correct is that is that is that what i'm hearing right here right now i think i am i think i actually am unfortunately for xp in 2001 we got windows xp so that branding wasn't going to stick so not long after we got windows xp we got the agile manifesto generally you should never i i why manifesto whenever i hear the word manifesto i just assume whatever i'm about to read is going to be unhinged can we just all agree that somehow that word manifesto at least in my head contains like uni bomber vibes okay serial killer vibes yeah it's just i've never like maybe i don't understand what a manifesto is maybe i have like a wrong definition on it but it's it it seems terrible almost every single time i've ever heard it we gave up on agile when we realized we are more agile without agile yeah yeah absolutely absolutely mortal kombat nice um and it came out it was more fuzzy than the xp rules uh we got these four values here by the way i've completely forgot that this is a video about devon and i'm just completely triggered about about agile development and standups and all this i'm not even sure how we got here but however however this is going to link everything we're talking about to to devon i just cannot wait i i am so i'm super excited i'm super excited i've completely forgot that this was an ai video let's go let's go we deprecated processes documentation contracts and plans which i guess at the time seemed like a good way to distance this methodology from waterfall okay but i think this planted the se that grew into our current problem and the year after that we got the scrum alliance and it was way less fuzzy i hit narrowed things down to what it called rituals and ceremonies that were either four or this document single-handedly has probably created more pain in anyone's life than anything else okay cult cult called just ceremonies we just have a couple ceremonies that's all we're doing it's not a big deal all i need is for you to bring a little bit a little bit of goats butt it's not a big deal five of them depending on whether you count the sprint itself as being a a ritual or a ceremony i don't know exactly why they did this i don't know exactly what they were thinking or why this happened what i do know java is the answer java put the the ultimate spin on programming because there was a while there where we thought you could actually engineer to a craft programming aava yeah know true it's true though it there was a time there when yava first came out that there's this idea that that like we could actually take computer science from a science into a hard like into like a an engineering discipline and that there could be like actual methodology like methodologies to to building stuff and like to be fair it was semi true like you can't if everybody does the same thing and knows all the patterns you can build software together and any person is like replaceable like an engineer but you also need to edit like 50 files to add a little bit more json to an endpoint so it's like what's the trade-off here to have completely replaceable engineers that have to program the world's worst spaghetti coat ever but because there's patterns that actually kind of make sense when you really think about it or just get in there and mess some [ __ ] up right we have 3,417 scss files that's crazy wait hold on no please tell me this is is this true if this is true hold on jeremy jeremy i just did i see that correctly jeremy jeremy can you please tell me if this is true and if this is true can you please tell me it's one like class profile just [ __ ] talking damn damn son that would i would have been so happy i would have been so happy not true i've seen it but not currently okay well damn what a let down jeremy way to let everybody down in chat now can we get back to the ai chat is that being a project manager if you can keep the customer focused on one sprint at a time and two weeks at a time yeah and not look at the big project plan and not look at the whole calendar it's a lot easier to keep the customer from asking questions like weren't we supposed to have been done by now and how much longer is this going to take and wow isn't this costing a lot it makes it a lot easier to stretch jobs out which i can say i have seen a lot of unscrupulous development shops take advantage of that one just this morning but the relationship between scrum and consulting projects deserves its own video so i'll be worrying about that later i do want to give a fa a fair one on that one which is that scrum naturally tries to reach into consulting because consulting is like a hard deadline activity and scrum makes this unfounded promise that you can actually you know do the thing and measure it out and make consistent progress towards a goal the only problem with honestly the only problem with scrum is that it doesn't take into account that people work on the product does that mean where're this is this where we're going so what do you think about when you think about an engineer if you're like most people you think about engineering drawings and the important thing about engineering not being so much the output of the engineer but the decisions and the thoughts that went into doing that this man is using entirely too much circly device in which i've currently forgot its name okay and he's he's actually making circles on a blueprint that already has a circle i don't i don't know what this guy's doing okay something about this is just a a protractor a protractor isn't it no it's not a compass it's a protractor isn't it you ape y'all we need okay that's it we're having a standup everybody get in line we're doing a standup and we don't do that because we don't really do documentation and i get it because documentation is boring and nobody wants to do documentation facts but in this case an lm might actually help us it's quite possible we're going to be able to get the large language models to help us do a better job of documentation with less effort doubt but we need to do something because if we want to be taken seriously as a profession we need to grow up this is on the left the example deliverables from an engineer that i got off a website you can see the link down in the description and on the right we've got the manifesto for agile software development what you see on the left if you look at it for a sec is that a bunch of that stuffff that an engineer thinks is important explicitly deprioritized and agile there's you know just a lot of stuff here that we've explicitly just deprioritized and made people think not so much that we don't do but these are not things that people associate with with software projects working software over comprehensive documentation okay okay maybe you know maybe the agile manifesto wasn't all bad okay maybe it wasn't completely wrong so what are we left with what are our deliverables well we stand in a circle we take tickets dang it okay hold on vocabulary a protractor ah shoot damn i'm way off okay okay you you're right y'all right yall right i'm wrong we bang out some code we check off the tickets we stand in a circle we answer the same three question questions day after day after day we take tickets yesterday you get the idea every once in a while we'll have a demo meeting and then we'll have a calm and rational sprint retrospective then we have a planning meeting where we try to fit a bunch of t-shirt sized stuff into a blatantly arbitrarily sized bucket with the fewest amount of things hanging out wow what kind of crazy pieces are these and by the way if you designed this by accident and had this as your last piece tell me this is not just like the most satisfying thing ever this guy is on to something here he's cooking okay i actually think that we're going somewhere okay we're going somewhere and then we go back to standing in a circle again i am so going to get cancelled oh well so given that is it really so surprising that so many people think that the job of a software engineer can get done by a fancy autocomp completing stochastic parrot so what do we do about it well i don't have a magic wand i do have a bunch of ideas we'll be talking a lot more about them in future videos okay but i think that software development is going to need to change and the way that we do things is going to need to change both to take advantage of llms but also to survive them but regardless of what we do it's going to take us a long time to dig out of this public perception but it starts with making a distinction between the structural work and banging out and checking in features and bugs fixes think about whether or not the time you're spending has long-term benefits to the project or if it's just yet more inexhaustible backlog turn because devon is coming for your backlog and i think that's great because i hate grinding the backlog if that's all you do grinding the backlog is your job then devon will be coming for you too and that's not a place you want to be so for now best of luck to you let's be careful out there damn damn that was good i liked it i'm liking it i'm hitting that subscribe check hey go go like that video go like go like the video that was great that was fantastic ain't no way um okay so obviously that that last part with like if all your job is is gretting the backlog devon's coming for you in some sense he's correct in some sense he's obviously not correct um in the sense that your backlogs filled with bugs and various things and and new features and ideas and all that kind of stuff you know backlogs are filled with the whole kitchen sink and so this this a that devon can actually do any of that stuff i don't buy it like honestly i don't i don't buy most of that in the sense that i just don't think we are this iteration of ai i don't think is sophisticated enough to make meaningful changes that aren't just a huge huge pain in the ass 99% of the time we've already seen how well lms are reporting bugs and curl exactly like we've already seen this and it was awful it was actually genuinely awful for those that don't know it there's a video i forgot what i call it uh it's like our horrible future and open source and it was just like just terrible what they're doing they're reporting they're just literally turning out development hours into fake investigations it's it's a worthless waste of time and so i i'm not the i in llm stands for intelligence yeah i i actually fully agree with that statement and so i think people just have this really odd view that i i this is what i think is is that the first time you used an llm right cuz they're they're pretty new and the first time we did it it was incredible right like you you saw it you did it the first time you opened it up tried it out and it gave you the yeah like the bert reynolds riding a horse on dolly and you're just like damn man this is incredible i can't believe it just generated that right and you were you were shook right and then you tried like some code and you're like yo write me a python function to to to graph x and y and then it did it and you're like damn this is so cool this is going to take over the world but when you try it in real in practice like in real stuff lms are the same uh as every new thing when it works it's amazing when it fails it kills kittens in a fire yeah yeah this is this is exactly what happens do you want to kill do you want to kill kittens in a fire do you i don't think so anyways uh for all those that are still worried i know there's a lot of people that watch my channel i get questions like every single day like oh should i even learn computer science oh my gosh should i even go into software engineering oh my goodness should any of these things happen here's my thing to you uh that code bases okay code bases survive because there's one engineer that has the foresight to be able to write code that's at like the 90th the the you know the 90th through the 90th percentile of skill and ability okay this one engineer puts a bunch of stuff on rails uh then quits cuz he's like peace out i got better i got i got better money somewhere else leaves and then a bunch of you know then a bunch of the people that are remaining just take this and keep running with it until it just absolutely goes off the rails and then things do not work any longer right like this is just software engineering 101 if you don't think this is the case wait until you you find out wait till you do it llms is like being able to take code that's generated right out of the you know right out of the median right and so you're not getting your software developed by this person and putting the rails on here you're actually getting the software and putting the railing on by this person which means that your expected lifetime on your software is going to be like this you're gna be like oh yeah it's working and boom it's gna just it's gonna suck it's just gna suck whereas the other one it's still crashes and burns like this guy didn't have all the foresight in the world it's going to go it's going to go and then maybe it crashes and burns but man that distance right here this is the difference between your startup making it and your startup not making it okay learn to code take your time become good the best way to learn how to code is to create crappy projects that's it it's that easy create a project scale it until it completely fails create another project scale it until it fails you just need to you need to do that like 15 times because then you see i can write a code i can write code such that it will work for a while you know maybe it works like maybe you could write code that is right for like six months if you could write code that's right for six months that is incredible like honestly that's incredible that means you had enough foresight not to over abstract write the right interface and it just works like that's good that means you're that means you're you're improving if you think you can write code that will never need to be rewritten you're writing quick sort or you're diluted like that's it sorry hate to break it to hate to break it to you the name is the primagen