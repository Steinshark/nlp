hey flappy birds implemented in typescript types the ultimate type level trickery okay i wrote a 2d flappy bird game purely in typescript types i literally hate this i i literally hate this i i literally hate what i'm seeing um but you know i i i got to say something what in the what in the name of a 480 whatever the super is or whatever it is how in the hell is it running at what appears to be 60 frames a second how is it this smooth how typescript can't even compile a single file what is this what is this uh let's see yes you heard it right this game is written entirely in typescript type annotations which is if you do not know our turing complete so how the hell am i running it in the browser rend ing the game in typescript types the basic rundown is that i created a type level typescript runtime allowing typescript types to be run outside of the typescript compiler and language server what the [ __ ] am i looking at now port doom to typescript types until doom uh oh gosh there's something good here there's something good here uh until doom can be created with typescript types types uh typescript isn't a real language that feels about right is that about right uh insanity of article all all of it oh my goodness how do i search tabs what's the searching i have so many tabs open i am completely o overwhelmed by it banger yeah thank you uh thank you that was it was a banger tweet uh so how the hell am i running in the browser okay let's see this runtime is a custom vm implemented in zig yes yes this is the greatest article ever oh my goodness which executes a custom bite code format i compiled the typescript code into oh my goodness let me go into more detail this is such a w such a w okay now that actually let's see now the actual type level typescript code for the game is surprisingly simple first you must understand typ level typescript is a purely functional programming language a key tenant of peer and functional programming language is that the state is immutable so instead of mutating some global state bird pos and the pipes we thread the game through st uh state through a series of functions which each return a new copy of the game state updated each frame or every frame the game does uh something like this new game state type new game state equals move pipes apply gravity handle jumps game state oh my goodness this is like this is not crazy can how do we hire whoever this is but i will i find this elegantly beautiful it's very clear to see the transformations that happen on the game state it's beautiful this is just a it's just beautiful it's just be it's just beautiful it's [ __ ] beautiful it's beautiful no no no no it's not beautiful the next tricky part is rendering the game we need to draw the bird the pipes in the background drawing in uh inspiration from graphics let's see hold on drawing inspiration from graphics apis i had the idea to give the game state a command buffer an array of drawing commands a draw command looks like this oh no you literally create every kind of draw command and you somehow program how do you programmatically create it though the task of rendering is uh is filling the command buffer with the appropriate draw commands to display our game which can be neatly done at the end of our game uh transformations okay draw state game extend state return state or is state and draw commands draw the background draw the bird draw the pipes what is bird x and bird y each frame the game state is updated the command buffer is populated and then the runtime takes a few draw commands and executes them uh and that's the core game loop obviously i skipped over a lot of details this is how we do it in game dev a little game dev you know game dev is just a little bit of a zig wrapper and then a bunch of typescript types i mean let's just be real typescripts the ultimate game programming language typescript types uh now that's the core of the game loop okay uh you can check out the full game here uh typescript code for checking collisions of the bird on the pipes ground etc oh my goodness that is insane how does the runtime work well there's two main parts the compiler written in rust i love this takes typescript uh source code and spits out bite code the vm written in zigg is a custom stack virtual machine that runs bite code to evaluate the types this man's a man after my own heart right here a man after my own heart this is everything i want to see always always and forever more this is beautiful this is beautiful right here here uh i've compiled the runtime to wasm so it takes uh the draw command from the game and executes them using the web canvas api conceptually the runtime could use any graphics backend like open g vulcan metal etc the vm uh has specialized instructions for computation that would otherwise be expensive in regular type level typescript a prominent groups uh of such expensive computations are arithmetic arithmetic operations the type level typescript you can hack arithmetic uh by using arrays or templates uh template strings both are extremely expensive operations especially in comparison to how trivial u arithmetic is for the cpo to compute normally i decided arithmetic people say arithmetic what is that why do they say that why is it stuck in my brain which one's correct arithmetic or arithmetic hey thank you thank you bob not original bob no one has said it except for you adjective noun difference yeah it turns out tj you don't know you're talking about stupid dumb dumb one's an adjective okay trivial arithmetic is for cpu to compute normally uh i decided to provide a standard library with functions uh that get compiled into uh specialized and vary performance instructions in the vm okay nice add subtraction less than or equal to operator nice you don't need anything else other than less than or equal to oper you don't even need a not command apparently forget that knot compute the x fibonacci number okay x extends number lte x1 extends true x else add sub sub okay the main function computes the 35th uh fibonacci number and prints it wouldn't this like take forever okay jaker people you got to give to extra life by the way today we're doing a charity stream a 24hour charity stream we're a couple hours in we are 2 hours and 43 minutes in thank you for the 2,800 people that are here thank you jay gold thank you everybody this is going to be awesome thank you not original bob okay we're doing a good job here for the kids here over 50 grand already we're barely into it already average react and andy and shambles right now i'm pretty excited about all the cool optimizations i can implement in the vm i mentioned earlier that type level typescript is purely functional programming language we can actually borrow a lot of cool optimizations from implement uh from the implementation of fp languages performant immutable data structures hash array mapped tries rrb trees don't even know what you're trying to say to me i understand i understand all these words individually this is the first time this has ever happened where i literally understand everything individually but when you put them together in that order i do not know what they mean i have no clue i genuinely have no clue what that means i mean i don't get it uh specialize reference counting and reuse uh tail call optimizations uh already implemented this get own get wrecked i'm pretty happy with uh the split let's see the split uh using russ for the front end and zig for the hardcore lowlevel implementation of the vm russ high level and zero cost substraction makes it well suited for walking asds and generating p code with speed absolutely oh there's a there's a box elder bug on my screen come here box elder bug how did you get in here come here boxy i live really close to box elder okay you're being annoying you're going to get i'm i'm literally going to kill you if you don't stop this all right now now you're dead now you're dead kid you're dead you're dead all right there we go killed him that was nice to it didn't didn't listen to me also instead of writing another typescript parser uh i get to leverage the typescript parser of the ox project which is the best jsts parser i've used so far oh i didn't realize that was a thing really ox project what the what the hell is even that what about s swc uh oxidation compilers is creating a suite of high performance tools for javascript and typescript o really i haven't heard of any of this have you guys heard of this uh i always talk to the annoying bugs i hate when it makes it yeah sometimes get the i've never heard of this though i know s swc i've never seen this you guys doing oxy around here hell yeah oxy lint smash me daddy all is swc on here okay so swc is pretty good rome wow okay i don't see whenever i see this i don't believe it right this i do believe linter benchmark the linter on more than 50 times faster than es lint yes and scales with the number yeah okay i don't know this could be cool i'm going to give it a check i'm going to give it a little lookie that sounds actually super cool all right uh why is z and rust okay the future of tyvm a performant type checker uh a type level typescript runtime started out as a type checker for typescript called tyvm um the idea was to use vm to exponentially speed up the type checking has been tried before i decided to try my hand at it because i uh just find this stuff fun absolutely i just had an idea focusing only typ level typescript first my plan was that because of the simplicity of just type level typescript we could nail down the aspect first before moving into typechecking the entirety of typescript this would allow for tyvm to be useful far more quickly an example is that we could use typescript tooling there's a lot of tools to convert typescript t uh types to x where x is something like graph queen wheel prisma schemas gesson types um okay all things that emotionally hurt me i see uh what is this what is this a list of things that hurt me uh but all of them are pretty limited in not uh being able to support complex typescript types yeah this could jumpstart my dream of making type level typescript a very powerful dsl for writing schemas yeah i mean i think there's a i think you can make uh proto buffs the problem about typescript is that the the language is so complex it's really hard to make it fit into other ones without accidentally over like like going over your skis on it and what i mean by that is that to you can't prot buffs you can't represent everything you can represent in typescript in proto buffs if i'm not mistaken and so you kind of have you run into this problem where it can be a little bit confusing you know what i mean we can be a little bit confused we're taking yeah this is a small detour from harpoon let's see when running the update user mutation we can update any field from the user type except for its id of course without typescripts types i'd have to rewrite all the fields so that the uh so it could be error prone and i'd change user but i'd forget to update the mutation arguments yeah to me this is the most expressive way yes i actually really like this idea i really like the idea of being able to have something that generates types from this but i don't really know how it looks you know what i mean check out the flappy i love that he build flappy bird here though uh okay footnotes some awesome stuff with uh that very hit me up on twitter all right oh i'm following i'm following back all right uh this guy is all boners for rust yes the man after my own heart even as a quote oh my goodness i love i love you zach zack i love you the guy is all boners for for rust man did you see that he's all also boners for zig oh my goodness hey this was a great article and i love it that it was a really like it gave me everything i wanted to see i love that you could do this like this makes perfect sense now that i look at it i actually kind of get this um i love the idea of having rust for the compiler zig for the runtime i think that's super smart because zig is just really great this just feels better for zig right you don't have to fight the borrow checker you can kind of do all the things you need to do to make a runtime simple uh allocation and all that you can write custom allocators it seems like this is a place this is zig this is zig if i've ever seen a zig thing awesome i love it i love it i love it beautiful the game it runs so smooth might i add so whatever you're doing in your vm great job on your vm your vm is beautiful i would like to say that your flappy bird play though i'm not going to lie to you you're kind of pathetic at this flappy bird play okay and you also aren't getting the bird rotations which is pissing me off okay your bird has to kind of dive down you know what i'm talking about zack overflow beautiful though beautiful beautiful the name boners for rusten