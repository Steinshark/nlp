we migrated to squeal our biggest learning don't use prisma milky have you used much prisma i have i have prism income stock uh in t3 and i've used prisma a little bit here and there it was like the client's super nice super convenient to use okay anytime i've ever used an orm i eventually have regretted it yeah i don't know if this is if this is universal everyone even uh ter so says that the drizzle client is incredible uh but generally my my general take is orms are great until they're horrible like most technology there's a trade-off there's something to it so let's find out last week gration that switched our underlying database from mongodb to post degree no one actually nobody knows how to say this word it is the unpronounceable word because usually it's like post grease squeal or is it postgres queel like we don't know is it postgres or post gree i'm a postgres okay you're a gentleman i say postgres when i invite people to code with me okay i say post gree because i feel like greece with me yeah because the s is a part of the squeal okay anyways we faced a lot of interesting challenges and the biggest of them was a two-time rewrite of the code base a back to back yeah you're doing something there's a lot of questions that need to be answered if you've rewritten something twice like i get a rewrite like it does happen but but to be like you know what that last three right let's do it again we gotta try that again i do want to say i think it's a great decision they're going from mongodb to post greece when i first read that i was already i was like this is this is a good article i'm going to continue reading this this is a good this hooked me in better than the don't use prisma title so i was i was already invested at this point yep this article is for developers considering using prisma for the production workloads don't don't okay okay okay let's find out uh because is this a skill issue or is this like a prism issue sometimes it's just a skill issue that's you know you miss something we wrote our back end in prisma first so i'm not sure what that means but let's go on one of the biggest mistakes we did was trusting prisma marketing blindly look at this beautiful landing page damn this is like a this is a stopping next generation node.js and typescript orm i feel like you should have known right away that this was a bad idea because it doesn't say the word go or rust like i feel like i could just see it right away like oh you know where you screwed up i i honestly trust websites or services where the landing page looks terrible like if it looks too good i'm like your marketing is way too invested i want something where it's like pure html a little bit of css that it's not good to look at but when i see the code or the use case i'm like i love this because if it looks too good i'm like oh this is this yes like browserify what's like the classic example of box or the marketing there's an image of a wizard some kids some person's a kid probably made they're like this is good we're good here we've done it this is the key web 2.0 all right anyways you know you stock colors like they're just like yep you know what let's throw this on a weekend and let's keep going they still think that maybe it's only 600 pixels like that's all you're gonna have for the screen ah that's me live by the way i was live by the way click here where my foot's pointing to uh by the way milky streams all right but that's pretty much the benefits of where the benefits end we rewrote our first version of the back end converting the full code base from mongoose orm to prisma uh it looked great by the way i've used mongoose and that's uh i also have the exact same problem with mongoose which is it's great until it's horrifying um all right problems with the uh deployment at code damn damn we used aws lambdas for hosting our graph coil powered back end the first problem we saw with prisma which nobody noticed earlier is that prisma is shipping multiple 10 to 20 megabyte engines mm-hmm dang i've heard about this i've heard that they're they they have quite the load so i didn't know about this i didn't once you go deeper into this i like i was reading this and i was seeing the uh just on the side like the prison documents because i didn't hear about the engines or i really didn't pay attention to the engines until this kind of opened my eyes i'm like what like what what are they using the engine and then when you see how prisma showcases like the breakdown and the layers of retraction and separation you're like huh i see and then just you go deeper into the hole so all right it was a shock finding out that prisma uh needs almost a db engine layer of its own read more about this okay we can look at this later if it's worth it our aws lambda deployments were failing because we exceeded 50 megabit uh megabyte limit size how do i mean it's still i i have okay i do have a question before this which is it's 10 to 20 okay so if it's multiple meaning that you you are actually taking up like 40 50 megabytes just by prisma engines i get that but if it's just one that's 10 to 20 megabytes and you're exceeding the 30 what's the other 30 doing i got a lot of questions they didn't kind of quite specify uh we use es build to build the back end typescript and we had to write multiple patches in the build pipeline to remove extra engines extra prisma files and node modules and bring the deployment size under 50 megabytes that is crazy this so this is the part where i remember i'm like you should have backed out here this is the point where i'm like you should have stopped using prisma if you're doing all these patching getting in here to do some crazy stuff but they're like no we should we did it you know we we spent the two weeks patching prisma let's keep going lads this doesn't scare me yeah they're like oh that's the worst we're good now like we figured it out so what we have said running as part of our our build step it is it makes sense we remove things with said you're like no dude i'm telling you this is usually where you've gone wrong yeah i like how it's like the engines are like a core part of the prisma and they're like let's just remove that like we don't like let's just remove a bit of that because we don't need it let's make it fit under our serverless hard limits and we're good guys like this is gonna be great i would like to invert it which is howard okay multiple engines and you can just remove them and your thing works correctly i am like by like that alone my brain's like this i don't know what's happening like what kind of weird ass car are you driving where you can just like take out an engine you're like don't worry i got a spare one in the back yeah we don't need that one i don't need that one i can drive this thing with three wheels actually it's built for low performance okay okay our second mistake was that we turned on emulated foreign key relation mode in prisma well i can tell you right away this already sounds like a bad idea because the database is not supposed to emulate it it's supposed to literally have a foreign key for any sort of relational database like i'm just like these are all red flags i'm just like hmm what is prison the right architecture for me right now i feel like there's some issue we've been solving that are kind of weird let's see initially we wanted to use planet scale for our database wrong mistakes we used to or so but it turns out that it wasn't the best choice for us either but that's another blog post i'd like to read it prisma generally and emulating foreign key relations in prisma is a performance nightmare damn here are a few i assume it's because what ends up happening is it makes a squeal query it gets them all back it gets all these emulated foreign keys and then it makes a second follow-up query to the database to like do the relation because you can't quite do it is my guess i have no idea because i i just i don't know what they're doing here are a few things juicy okay i want to get juiced uh here are a few things that we observed when we tried to test migrations of our data from staging mongodb to staging planet scale via adapters written in prisma you know i would just like to take a moment here this sentence is insane do you need abstraction always like at what point have you just abstracted we prisma our planet scale no and edge no database database you're like what the hell is it just rate sequels you got this i'm positive you could do this every new insert via prisma opened a database level transaction uh an extremely weird design choice by prisma i mean is it i mean i like the idea of you always have transactional type of operations maybe you can chain them maybe there's some things we don't know about yet we often would exhaust our transaction pool uh on vitess on planet scale yeah yeah uh and and this error uh we will end up a 10 to 20 seconds in migration oh crazy yeah this one to me was like okay yeah that that i can see how that's bad but i was like i'm not too shocked at that you know that first one i'm like okay that's like an appetizer i believe yeah also you know if you have these hard limits any kind of client that's opening up and doing transactions and all that you should have some sort of pool in which you can you know or some sort of concurrent limit something in which you can control this if you needed to but if you're hitting a concurrent limit you've already like you a while ago right like you you like you're you need to back this up and go what have i done wrong here uh we were not dumping insanely wait hold on we were not dumping insanely in the squeal database i don't even know what the sentence means we would hit the above air doing maybe 50 to 100 parallel insert calls in db some of our collections had records well over 20 million we couldn't wait for days to migrate since downtime was involved here i don't understand why we need days to migrate for downtime you know and you just said you're not dumping insanely into the sql database and you're like but we couldn't wait days to migrate it's like what yeah also 20 million for me 20 million feels fairly insanely if you're like maybe not a netflix or at uh twitch right those aren't insane numbers but you know we're also going to use prisma to handle this stuff with that kind of traffic and that just sounds a little crazy okay there is no concept of squeal level joins in prisma this is it so it is so it truly is built for something like not postgres because like i mean why would you ever use a back end that is a relational database if you cannot join yep this this i i was floored when i read this paragraph here i was absolutely floored by it and the fact that they offer these like join methods under the prisma client but really it's what you said it's like doing one query from one table following that up for the second query and then doing some additional logic from those engines i was like people would do anything but write sql look at the extents people go to instead of just writing sql in the code base it's really not hard to be like select id and hairstyle from hairstyles joined with comb right like no no no no no no we need a client that i can do a javascript method that calls this logic that does it for me that's what we need is is squealed declarative i think it might be but i think not i need jsx to do my squeal yeah like what all right this was one of the most shocking revelations to us in some by the way this for me this is like a no-go if you cannot do sql level joins in a in an orm which this seems kind of crazy this seems like the whole point of an orm is so that you don't have to write squeal but you learn a completely bespoke api this seems crazy that you can't do it okay this was one of those shocking revelations to us in some queries we inspected that supposedly should have used squeal joins or sub queries we discovered that at a low level prisma was fetching the data from both tables then combining the results in its rust engine okay i don't know why you gotta scare quotes in yeah okay we know rust is fast what were they trying to prove here rust i think it's because everyone's like oh it's rust it's fast and they're just like not fast performance this actually seems it just crazy to me this was a path for absolute trash performance so one reason why this is crazy is that often especially on a client when or like a the middleware server right uh where you're just trying to like get all the data and then hand it back to the client you don't want to do a huge amount of computation there because your goal is to have like as much distributed requests as possible so if you're joining like thousands upon thousands of rows constantly with every request and you're manually doing it you're not even offloading to your database server and then planet scale that's the point of planet scales that you don't even do the computation like someone else does it prime check this out i'm going to link you a prisma docs to show you how far they are from the actual like database from the actual connection so i just linked you this is this is the architecture from prisma and the the the blog uh links as well but look at the layers of extractions it's two layers away from your actual sql database and it's just like that's where you're losing so much performance and getting all this trash like you know you're so far from it then of course when you're gonna hit like actual data you're just gonna be hitting so many bottlenecks because you're two letters away from just connecting to your database and making the sequel i'm sure there's a really good reason to use prisma i'm sure someone can give me a good reason i just don't currently see it right this this does seem very overkill considering most people's squeal queries are literally select star from this where ide insert insert yeah they're like exceptionally simple stuff most people don't like this ain't big data you're not doing data analysis you're you're getting data or mutating data exactly wow okay okay okay let's this this we got to keep on going this is this is exciting this path wasn't at this this was a path for absolute trash performance are they saying something against trash death i think so i think it's a shout out for trash dive here yeah shout out i think it's like this is how we mimic his performance at his level a senior engineer by the way all right once we figure this out we were extremely doubtful about how prisma actually emulates the foreign key constraints really now you start doubting now you're pressing x uh does this perform does it perform cascading select operations on all associated tables on a uh code operation what's a cud operation i also didn't know that i just read it over i'm like i hope no one asked me that so i'm just like i could and i'm like all right let's see is there supposed to be an r in there like crud on all crud operations hey this is a cuda operations it's just create update delete forget we don't need those r's here oh see seems like the llc seems like the only way and since we saw that every insert used a transaction that has a limited pool size i'm surprised you can't turn that off there must be a way to turn it off we were sure it would be a non-negotiate negotiable performance penalty for us on production workloads i love the wording there non-negotiable as if you're talking to like prisma's agent or something it's like you're only gonna get this many pool types that's that's not part of the contract how about this one we'll we will drop squeal joins for a few more transaction pool items no non-negotiable you get what we give you that's it you can get something else you can get our uh we give you a pack you know like a t-shirt that says prisma on it i i normally don't like on technologies this much but i guess i never use prisma so i'm a little bit shocked at exactly what prisma is doing or what they're i i'm confused at what it's offering do you know what i mean i think it's also offering convenience like again like the client is super super convenient to use in like a javascript typescript ecosystem you just pull it in like it's like a hook and you basically just use it kind of anywhere in your code and it's super convenient you have these pre-built methods that allow you to kind of you know not only think too deep into uh you know the sequel itself and it works really well with other things like you know zod or any other things that are part of the t3 stack but yeah i mean the performance that you'll get on something that at this scale and you know 20 mil like we can argue that's not that much data like i think you start seeing some bottlenecks and the convenience is you know not so much interesting okay yeah i guess i i don't have enough experience with it but like this article paints a very glib picture for its future all right on every insert prisma opens a transaction where it inserts and then returns the inserted record too even if i don't want it that's i found this one funny just fyi return yeah it's just like i get one i don't want this does postgres do that by default or does it not do i don't think it does it by default don't you have to call for it yeah you have to call from postgres yeah you have to do it really sure wheel light you have to say like you know insert whatever whatever and also return out the value which i like i mean i like when especially on uh primary keys when you want to get the primary key like that if it's an auto incrementing index it's nice to be able to say hey give me automatically back the the id but to get the entire record back just seems like a useless select yeah anyways uh square results let's see squeal results patching inside its own engine was a deal breaker for us maybe it's somehow optimized it further too but there is no way you are outperforming the database in its own game even if you ship a 15 megabyte rust engine to do so again rustic rust is not going to beat it here further inspection we discover that your code never makes the actual db call your prisma code performs a graph wheel a network request uh to the prisma rust oh whoa it actually does a it does a network request yeah because even if you're on the same machine this still is infinitely more expensive than not doing it like you could also just not do it and it's free or do it and it costs this which then translate your request into an actual db calls really yep so those two layers of extractions all like it's like a rest api that you're basically calling this query engine you know the rust engine and then that you know makes the sql equivalent to the actual database okay so it's not just a two litter separate it's like two like it's like a network request and then there's a further a further logic written in rust and it's like well why do you need all this you know why not just at this point you could just probably go straight to the database you know there's probably a better alternative i think i understand what what's going on here there well i mean i don't understand why but i understand what they're doing the connection pool stuff here and i think they're attempting to optimize it in some sense as being the fastest possible execution which i totally get you want it as fast as possible uh and i think part of the reason why they came to that conclusion is that they're doing joins and so if you're doing programmatic joins doing that in js would probably be an untenable operation even in the thousands uh versus in rust you're getting the the speed you know speed speed but you're probably using like because you don't i don't i'm very curious about it because yeah i have so many i have so many curiosities right now all right we're gonna go back let's keep on how why does it never go back to the thing i was just on all right dropping planet scale now our planet scale database was able to pass our stress test of inserting and reading multiple records okay that's good it however failed when we used prisma because of the limited transaction pool inside vitess which was getting exhausted very quickly and after that let's see and after that all further calls to plant scale db will fail for a few minutes yeah that is just cray-cray however passing on planet scale was because of two reasons no foreign key support by the way tercel just allows you to write squeal it's just sqlite that's all it is you just write squeal and you get done it and you can and you can foreign key you can build the tables how you want to there's just like none of this stuff all seems nuts to me that these providers don't just give you edge database these managed ideas because it makes it simpler for developers just seem like it's a pain in the ass it makes it super unsimple for developers yep yep i mean again it's it's like the instant convenience factor i think you know i think right away you get convenience because you don't have to worry about the setting up or the infra you just get like you know a string essentially plug that into your code base it all plays nice and and there you go you have things that can process data super quickly but then when you go into you know you know a day later you kind of realize wait a second a lot of stuff's going on here that isn't supposed to be going and i need to probably you know get more more closer to the details closer to the code to make it run how i want to i just made an edge database right there shall i create some tables like ter so super convenient and it can have replications and all that but you don't have to have all that extra stuff you just don't have to have all that other stuff okay anyways it's just like it's just funny because it's a weird tech choice i don't understand yet uh this is something we overlooked initially but as we worked more and more on the migration and coming from relation data to manga or in mongodb we figured out that it is a huge safety net of not making data corrupt we had a lot of data corruption in mongodb just because we did not respect relations among collections yeah i mean again mongodb mongodbs again it's it's one of those conveniences you trade for pretty much everything else and weird pricing planet scales prices uh planet scale prices you on a row reads and row rights per month what is weird is that the row reads is something that nobody controls it is the squeal query planner which determines the query plan which results in how many rows you read or you are reading internally oh that's kind of weird a black box reading can be a little bit confusing like i totally get if it just executes and if you get a million rows it costs a million reads uh remember that row reads are not row returns you can write the wrong query that returns zero rows but you still uh do a full table scan of a million rows and planet scale will charge you for it interesting see i've never used plan skill too much i don't know too much about it but that seems that has to be wrong this has to be wrong i can't imagine that that that is true if it is true then that's like a huge red flag but if it's not because yeah holy cow no vpc uh appearing mongodb atlas uh supported vpc peering on dedicated clusters which avoided data flow over the internet planet scale supported it only on enterprise plans okay well that's just you gotta pay to play okay yeah yep all right prisma plus planet scale built for each other but not for production workloads not for the heavy loads yeah none of those here this is a seething line like this is as tenses i guess planet scale is fine when we used independently but prisma might lure you in with its dx i've been lorded by the d talk to the author the way they use the words here like non-negotiable it will lure you in prisma devs if you're using prisma don't like this is so great i love the way this is written it's clearly not chat gbt which i think just makes it refreshing additional features like accelerate and tooling okay if you love performance even one bit on heavy production systems avoid using prisma prisma pr in shambles right now hey prisma devrel i'm sorry you know we're not we're not the ones saying this we're just don't kill the messenger okay prisma's website has a page called why prisma it says three things raw squeal full control low productivity wait what foreign i see it i see it i see it i see it squeal query builders high control medium productivity uh orms less control better productivity okay so i see okay okay so this is the old argument that we know better dx is more important than anything else hardware is super fast you don't have to worry about this stuff which it sounds like you actually know you do have to worry about it here's the actual truth or here's the actual and true truth version of it ross wheel full control low productivity insane performance query builders high control medium productivity insane performance orms less control slightly better productivity and syntax bonkers performance bonkers it's straight bonkers uh okay bonkers be good and like what if someone says oh i just built something in the performance with straight bonkers i'd be like oh that's great that's amazing bonkers tends to be the the good side so i just when i read that i'm like damn that's good performance yeah i'm like oh okay i want to i want to use prisma now bonkers performance and blazingly bonkers yeah blazingly bonkers our current stack after evaluating multiple options here's what we ended up with schema uh is written in prisma using prisma migration tooling for applying migrations on db aws aurora serverless v2 postcrete aws lambda linked to aws aurora under private vpc no internet traffic flow uh kaisley keasley for squeal query builder okay easily is not a feature complete yet but it has escape patches that still allow us to keep code type safe even if we want to write ross wheel uh at times okay so i'm going to make a quick judgment here again if you just use uh a different language a lot of these problems go away because in go you can't just be like as any right like you can you can't just do that you have to define the thing and so it is typesafe inherently you cannot make it untype safe like this and so same with rust you have to say what it is and when it isn't it returns you in error when you attempt to decode it and there's something about that that is really really nice versus this whole typescript thing which is like well if it's wrong yeah really what you're getting so it's not really type safety as much as it is really nice lsp integration to confidently tell you what the property is even if it's wrong and it'll give you some sort of runtime checks to ensure you're calling the right properties because you have some level of type safety to me this just seems like a whole problem we've created right here i think it's also worth noting here that the authors went off on prisma but they are still using features of prisma which we kind of looked over so the schema being written in prisma is extremely extremely nice you get basically this one file that just defines all your screen uh your schema defines your models your relationships and that is you know completely separate from the actual engine or the client that prism provides and that is very convenient and it's great for migration tools it's great for you know kicking things over to the db creating everything uh so there is you know besides the the wonderful use cases of prisma outside of the the schema it the schema is a really good plus of prisma i have to say okay so this is obviously a good selling point which is which is migrations are a huge pain in the ass they've always been a pain in the ass there's never been a time where i've migrated a database and thought i'm going to enjoy this it's always terrifying it's it's just the worst experience ever and so this is good to see i like to hear that especially go from like a nosql database to a sql database like a relation database like that's a nightmare like just going from one relational database to another one that's already like tough no sql to relation that's like oh like i can't even imagine that yeah wow this is a great article milky great find milky we can find you on twitch right and twitter absolutely twitch.tv milky right is it milky dev on twitter and youtube yes it's milky dove on twitter and youtube i couldn't get i couldn't get the domains there i'm in a legal battle with the milky who owns those domains but we're trying to get that milky we're trying to make the we're trying to migrate from milk it up to milky uh making it seamless is he milking the milk he is he is he drinks skim milk you know he does you know that throw straight skim milk behavior right there all right uh the milkman go check out milky right here milky oh sorry i'm reversed right there check him out thank you for joining us this was a great article really appreciate it thank you appreciate appreciate everyone have a great stream i love you guys peace bye