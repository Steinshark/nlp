have you ever wondered how you can create a data class in python or what a data class even is in python well this video is going to give you a quick guide on how you can use the data class in python so i'm going to show you some examples on how to use it some special features that come with it how it's faster than creating a conventional class and how it gives you a bit more functionality when it comes to modeling your data but to begin we're going to import from data classes the data class and this will allow us to create data classes easily in python but first i'm going to show you how we would conventionally create a data class before this came into play so for example here we can create something called a fruit it's a class of fruit and all we wanted to do is to hold some data so he'll create an initializer and in the initializer each fruit will have a name of type string and the calories of the fruits of type float then we need to bind those values so self.name will equal name and self dot calories are going to be equal to the calories so that creates a simple class that initializes a fruit with some values and you can use it as a data class if you want because now we have those fields so here we can type in banana is going to equal a fruit and inside the fruit we need to of course define it to be a banana with the calorie value of 10. and you can also create an apple if you want you can say apple and here we'll change this to apple but apples have a bit more calories so we'll say 20. and now we have two models of fruits that we can use that hold data all they do is hold data in a modeled way so if we ever want to refer to that data we can type in apple dot name or apple dot calories and we can get that data back but right now if we print apple or banana what we're going to get back in the console is the representation of the object which usually is not that useful so let me show you now how we can create it using this data class import so we're going to create the exact same example but using that data class and to do it in python you actually have to use this decorator which is just called data class and you just create a class as normal directly under it so here we have a class of type fruits and to make this work all you have to do is type in name of type string and calories of type float and that's all you have to do with your data class then we can copy these values once again paste it right under the data class and this time when we try to print the banana which we have redeclared of course that's why we're getting this yellow syntax highlighting but it's going to use the latest one because that's how python works and when we print it we're going to get a better representation and that's really nice because as i showed you earlier if you just do it with a normal class you get the representation here all we're saying is that we're modeling this data to look like this and that we more or less want to get something accurate back when we print it such as the banana we printed down here we got an accurate representation of what this actually was another difference with data classes versus the regular classes is that when you compare them it will take extra setup with the class of fruit to compare the values in them for example if we have a banana and we have a banana too and they contain the exact same values they're not going to be the same because when you compare the fruits it's checking that the instances are the same so for example you can type in banana is equal to banana 2 and when you run that you're going to get false even if they have the exact same values they are not the same object and i'm very aware that you're supposed to use is for checking instances but this is just to show you that you cannot compare them that simply but if we copy this and paste this directly under down here you'll notice that with a regular data class you can type in banana is equal to banana 2. and when you run that you'll get true back because the values of banana and banana 2 are the same so what it's comparing will return true you can do this of course with the regular conventional class you can type in def equality and here you can insert your way of comparing these fruits so in general you would return self dots done the dictionary so you can grab those values and you want to check that it's equal to the other thunder dictionary so that would be a way to compare them and to simulate the exact same behavior as a data class but once again this is a lot of added functionality that we have to personally implement into our class of fruits to give it something that we should just have by default so the first reason to use the data class is to avoid all this useless code of course it's nice to see what you are implementing but you don't really need to do this each time it really helps us reduce that boilerplate just by adding the data class keyword and in case you want to have a different implementation for the equality you can define all of that inside your data class so if you're modeling data i really would recommend you avoid using a normal class because it does create a lot of boilerplate and just like with normal classes in data classes you can provide default values so you can say the calories of float are 10 and then you can exclude the calories in these instances and when you print one of them you'll get 10 as the default value but let's go back to having only one banana it's also important to understand that you can change these values you can type in banana dot calories and you can say okay the calories are not really tender more around maybe 60 not 69.60 and if we print this banana now we will have 60 calories in this model and maybe you don't want that maybe you don't want your fruit to be able to change the data maybe you just want it to be read only and and that might often be the case when you're reading data from online so one very important keyword you need to know about is the frozen keyword not in the class but in the data class so frozen once we set this to true it changes this to read only so as you can see right now we even got an immediate syntax highlighting that bananas.calories is read only and if you try to run the program it won't even allow you to do that next i want to show you how you can use slots with this data class because as you probably know each time you create a class or a data class it creates a dictionary for that class to make it easier to grab some attributes and that's why in general it can be a good idea to create slots and traditionally you'll just type in underscore underscore slots use the slots thunder method and you would create a list with those slots so here we have name and we have calories so this will avoid the program from having to recreate this each time we create a new instance and we cannot have a default value for that so we need to remove that but now we have the slots which will result in faster attribute access and can help reduce the usage of your ram but of course we need to define another value here and when we run it everything will run the same but if you have millions of these fruits hypothetically maybe you have 10 or 100 every time you access something such as name or calories it should be faster than when you did not have these slots and this might be annoying to create all the time so in python 3.10 they did introduce a new keyword to the data class and that's called slots so all you have to do is set slots to true to make it work with the new data class so here we're achieving the exact same thing except with a simple keyword it was that simple you rerun the program everything's going to run as normal so the only reason to create these slots manually here is for backwards compatibility i know not all programs are working on 3.10 so you might have to do it the other way around but if you are working from 3.10 and above it might just be worth it to use the slots keyword and as i mentioned earlier when you print this fruit you get a quite accurate string representation of what the fruit is or what this class is if it was of a cryptocurrency it will say crypto value and whatever it will give you something that you can actually read unlike the conventional class but maybe you want to change this because maybe this isn't what you want to see when you print the fruit out and they have a dunder method for this called string and all you have to do is return what you want the string to be or what you want it to be modeled like so here we can type in let's say self.name colon space self dot calories now each time we print out this object we will get the name followed by the calories you can even type in calories here so banana 10 calories and if you absolutely want to return a representation you can define that by yourself you can type in deaf wrapper and you can return your representation and then to get that representation all you have to do is type in representation banana and you'll get that representation back but you need to implement this by yourself of course and let's change that all back to what we had earlier there will be times that you'll have a data class and you want to make sure that the user knows what they are inserting so you would want to define them to have keywords or keyword only set to true which means python is not going to be happy with you passing these in as arguments it's going to say takes positional arguments now which means we do need to explicitly say name and explicitly say calories so this enforces that we are using keywords in each instance of the fruit that we are creating and that's just a way to tell the programmer hey you need to be very clear about what you're passing in so the user has a better picture of what they're passing in so that was most of the theory behind a data class now let me show you one real example where i like to use data classes and this has to do with modeling data that you get from json for example so here we'll type in data class and we'll type in slots and set that to true then we'll create a class of person for example and that person is going to have a name of type string it's going to have an age of type integer it's going to have a job of type string which is initially set to none because the person might or might not have a job and this person might have friends so i'll type in friends of type list of string and that's going to also equal none initially and just like with normal classes and functions variables with default values must come after the ones without them but after we've defined that we're going to define a string method and i'm just going to paste this one in because i really hate typing long sentences such as this one but all it says is that self.name is self.h is old and works as a self.job his friends are the following friends that we have here so it just gives us a nice string back each time we try to print the person to understand who we are printing but after that we need to create some json some data that we're getting from the internet so i'm going to simulate that by creating a dictionary and inside this dictionary we're going to have the following data so the name is going to be set to bob and this has to be a key and it's a bit early but this should be a colon as well so we have a name that is set to bob now because i'm having a really hard time typing this in i'm just going to paste in the rest we have an age of 10 we have a job of salesman and the friends are mario and luigi so that's just an example of one item you'd get back from a json response and we want to use that and in general once you have json you can just say print json and you can grab something at the index of name and i personally hate this approach because many times or maybe not many times but there will be a percentage of times either when you're tired or when you're typing too fast that you will mistype something you might say gnome instead of name and when you run it you'll get a key error so it's very easy to make mistakes when you're trying to access items from json those items might not even exist so i like to get that out of the way as soon as possible by creating a data class that can model that data and make it easier to access this information so instead of just printing it by accessing the key we're going to type in bob and that's going to equal a person and we're going to model the data inside here so we still need to call the json for each field so for the name we need to say json add name for the age we need to say json at the index of age i'll remove this for now and then we still have to do it for the other two so json at job and json at friends so here we grabbed the information but again the benefit is that we only had to do this once and now from this point forward every time we need to access something from bob we just need to use dot notation and we'll be able to access it using the dot notation and this is the easiest way in my opinion to access items from a dictionary or from some sort of model such as this json here usually you'll have a json with a list of people so it wouldn't just be one and you'd create a model which allows you to use this with each and every person but this is the basic example on how you can create a data class modeled on a person so that you can easily access the elements from that person so now we have print bob.job and if we run it we'll get salesman if we just print bob we will get that bob is 10 years old and works as a salesman his friends are mario and luigi and we can still do comparisons we can say bob and bob 2 is bob equal to bob two because they have the same name the same age the same job and the same friends they must be the same person bob 2 is not going to fool anyone but anyways i hope that gave you a good picture on how you can use data classes in python it's some very powerful syntax that really allows us to model our data in a way that helps us reuse it without creating so many errors and it really helps us avoid a lot of boilerplate code that usually comes with creating a conventional class and there were other ways to create data classes you could use i believe it was a named tuple or some other convention but this is by far the easiest way in python to create an effective data class so with all that being said do let me know in the comment section down below what you think about it or whether there's something else you'd like me to explain in a future video but with all that being said as always thanks for watching and i'll see you in the next video