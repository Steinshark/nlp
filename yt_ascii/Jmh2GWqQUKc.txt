this video was brought to you by ind dentle io learning python made simple how's it going everyone in today's video we're going to be looking at a special built-in function that comes from the operator module and this is something i never knew about until recently so i thought it would be quite fun to share it with all of you so what we're going to do is import from operator the item geta next let's take a look at how we can use the item gaa in our code and to do so i'm first going to create a variable called elements which will be a list of type integer that's going to equal 1 2 3 four and five and i'm going to quickly edit this off screen anyway here we have some elements next suppose we want to grab the first element and the last element from this list well to do so we'd have to create a variable or you could just print it directly but here i'm going to create a variable and that's going to be of type tuple of integer to integer because we always want to get the first and the last elements and that's going to equal the elements at the index of zero and the elements at the index of minus one that way we don't have to worry about what position the last element is at and this should actually be in square brackets but next we can print the selected elements and what we should get back is the first element and the last element and that was quite straightforward but now imagine you have a different list you want to do this for now we have to recreate this tuple with the new list name or you could also possibly create a function such as i don't know grab first and last so f a l and then you could insert your list in here and you could return it as a tuple you could also do that but in python we already have that functionality built in and that's what the item getter actually does so instead of doing all of this nonsense i'm going to replace that with our item gaa and i'm going to call it first and last which will be of type item geta and that's going to equal the item geta and here we can decide what we want to grab so we can decide to insert the index of zero and the index of -1 and it's going to refer to these indices when we use first and last and to use first and last all we need to do is type in first and last and insert the elements and just like that it's going to get the exact same items except now we have something that's completely reusable so we can use this with literally any list and you can insert as many indices as you want you can also do 0 - one and two i mean the order there is a bit funky but it's going to grab those elements and this also works for other data types such as dictionaries so in our next example we have a dictionary of items and the items have a key of type string which is just just a letter and their value is just going to be of type integer so a1 b2 c3 and so on now if we want we can define another item getter that always retrieves a key that contains the string of a and a key that contains the string of c and to do that we can create something called a and c which will be of type item gter and here we'll type in item gter and we will pass in a and c and this will search for those keys when we try to retrieve them so once again we can print a and c and pass in our items and when we run this we will get both a and c printed to the console and again the benefit of doing this is that it's ultra reusable and very easy to create so if we wanted we could create another dictionary called elements once again and this will be a dictionary of type int or actually string to integer i don't know why i'm trying to change that but it's going to contain a with the value of 100 b with the value of 200 and c with the value of 300 thanks to our item geta we can just easily insert it here and get that exact same functionality used on our elements so now we're going to get back 100 and 300 and i know some of you are asking what happens if we define a key or a value in here that does not exist inside a list or a dictionary well what's going to happen happen is that we're going to get an error back so for example if we don't have c and we try to retrieve c we're going to get that key error it's not going to be any different from when you're trying to access something that doesn't exist the normal way so for example if we want to print elements at the index of c we still don't have c there and that's exactly what we're doing here and if we were to take it back to our first and last item gaa if we were to insert an index that did not exist such as six and we were to print for first and last of these elements it would raise an exception because this is out of the range all item gter doeses is simplify the process of extracting elements from a list or a dictionary or practically any iterable and i would say it's quite similar to creating a slice object such as if we had something called reversed or actually that's built in so we're just going to call this r of type slice it's going to equal a slice of n nus one if we were to use this slice on any iterable it will reverse that iterable so here we can have our elements and we can pass in r as the slice and that would create a reusable slice and as you can see that will reverse the list so what i was trying to say is that they're quite similar in the sense that they both create a reusable component for our iterables one will do it for the slicing and one will do it for the item getting but yeah that's actually all i wanted to cover in today's video do let me know in the comments section down below whether you knew about this already or whether you have any other tips and tricks regarding this functionality in python but otherwise as always thanks for watching and i'll see you in the next video