hello in the series we'll be creating a simple 2d busy a curve editor as use case examples we'll also look at moving an object along the curve as well as extruding a flat mesh from the curve now before diving into the editor scripting i just want to go over a few basic concepts if we have two points a and b we can write a simple function to help us move in a straight line between them this function returns the position of point a plus the displacement of a to be multiplied by t so with a t value of zero will be at point a and as t increases to one we move directly to point b this is known as linear interpolation or lerp for short now if we want to move between two points in a curve we'll need to add a third point to control what that curve looks like so i'll create a new function and sure we'll use our old left function to calculate a point between a and b as well as between b and c to visualize this i'll increase t so that we can see the points p naught and p 1 that were calculating to create our curve we'll now simply return the linear interpolation between p naught and p 1 the result of this is this blue point moving in a straight line from p naught to p 1 and if we trace a line out behind it we can see the curve that we've created with three points this is called a quadratic bezier curve because if we actually write the calculation option full rather than making all these calls to the lerp function we get the following quadratic polynomial now with just a single control point our influence of the curve is a little bit limited so let's add a fourth point and create a new function for computing this curve we'll use our old quadratic curve function to calculate p naught the point on the curve between points a b and c and p 1 the point on the curve between points b c and d so if we visualize this quickly the two blue points are p naught in p 1 each tracing out their own quadratic curve we now return the linear interpolation between p naught and p 1 which is visualized with this green point we can watch how it moves in a straight line from the end of the first curve to the end of the second curve as time increases if we trace a line out behind the green point we can now visualize nicely the cubic curve that it's creating if we write the calculation for this four-point curve out in full we get the following cubic polynomial so with these four points we have a lot of control over our curve but if we want to extend this we're going to need to stitch a whole bunch of these segments together for example here's a path made from two separate curves notice that the first point in the second curve is the same as the last point in the first curve in the series i'll be calling the points which the line passes through the anchor points while these other points which helped shape the curve will be called control points so around each anchor point we have two control points except of course for the first and last points in the path which only have one control point now if i move this one control point you can see that there's no longer a smooth join between the two curves to fix this we can lock the two corresponding control points together so that they always form a straight line with the anchor point between them for best results one of course wants to set the control points by hand but in the series rules to be experimenting with an approach for setting them automatically which is useful just as a convenience but also an application such as procedural generation where there's obviously no human to manually define them alright that is it for this introduction video until next episode cheers