and so i'm looking very much forward to hear from him about c++ in the developing world and why it matters matthew himself comes from kenya so he kind of knows what he's talking about and so matthew let's get started okay so hello everyone my name is matthew benson i'm from nairobi kenya and as we speaking a little bit about c++ which i really like and i would like to believe that we are all here because it's a language that we like and i know maybe some of us may be new to the language and and you're here because you're curious so we're mostly here to talk about this language why this particular language i think holds great potential and this is coming from my work and my experience with programming i am a computer scientist by by trade so i've been working with computers for a very long time practicing and programming and tinkering trying to make it work especially in situations that are not what we're kind of like calling the developing world so it's something that i've been working on trying to make to find ways to make computing work in unusual areas and places i'm particularly passionate about energy efficient computing making the most out of older hardware and i mean this is connected with what i' had said earlier so can reach me twitter i'm i'm benson nina on masteron you can find me on email at benson. oren live.com i have a github page matthew benson cod and i usually hang out at the cpp africa discord server so what will we be talking about today the three main areas i will touch on today first being the importance of c++ as a language when we writing efficient code for older hardware which is much easier to access in the developing world i'll also look at c++ as a language for learning about software development and why i think it's a very important language especially because of its connection with c but i'll get more into that as we go along i'll also touch briefly on some tooling and resources especially in unusual circumstances places where you're constrained by resources some of my experience in this and what i think may be a good way forward so to begin with i'd like to define a few terms the first and most important term i'll define is the first word first word in the title of the talk c++ what exactly is c++ and i know this is a something a bit strange it's it's not a usual question that you'd expect to be asked here and you know at meeting c++ or at a c++ conference but it's actually an interesting question because i try to think about it in terms of how do i explain this to somebody who doesn't know exactly what it is and it's actually a difficult question to answer without first talking about c yes it is a programming language but c is the very first cut character in its name so many of us do know and those who do not know that c++ is an evolution from an older language called c and this evolution is analogous to a journey and c in times past was referred to as a high level language meaning it's it's higher than something and that something is the machine language so when we program we we're talking about translating concepts that are written in a more humanlike way to a language that our computers understand so as computers have advanced the machine language used to be programmed manually with you know circuits and other means over time and as complexity increased there needed to be a way to to describe more complex features and functionality and programs and many programs have been written especially in sea over time but as complexity did increase as we tend to deal with more as our hardware has gotten faster problems that we are solving in are more complicated we have needed to step up from c to express things in a way that is easier to manage the complexity so c++ was a step up from c and even c++ itself has really grown we it started as many of you know as project called c with classes and it grew got a new name c++ then eventually it got standardized the first standardization in 1998 and there have been many standards there been this iso group which keeps on releasing new versions over time so this particular language has a very beautiful attribute to it which is basically one of the things i really want to emphasize in this talk and in dealing with that one of the most important things in this language is the plus+ c++ many of you will know that this there's incrementing operator which basically means add by one take a single step so the way i see c++ is that it is a language that has been taking a single step at a time managing the complexity up until wait has reached today and that stepbystep bit is actually one of the reasons i think it is a very important language so i'll move on to talk about the developing world this is the next important phrase in the title c++ in the developing world wikipedia defines the developing world from the perspective of income levels and access to money and yes it is a fact that we are all aware of that the different countries different places with different access to resources and jobs and income and the like i'll take a slightly different trajectory in this stock and approach it from the perspective of computing because you see there there are many other aspects but we'll we'll focus in on programming and computing and access to computers and what computers can do for us so in order to do that in order to define developing well we must first talk about what it means to be developed what's what is this development what is dev what does it mean to be developed so developed computing ideally it's we're talking about an ideal state that you have a computer that is fast enough to do everything you need it to do whatever you throw at it it does in good time great speed multiple tasks and the like it also means having access to other people through your computer connectivity internet access that doesn't feel slow and to power all this you do need electricity a constant supply of electricity and just as a small aside that yes you can have access to the internet but having it consistently and persistently is what i would describe as that's a developed experience that's something we we yearn for and we are longing for and a very important thing that is very easy to overlook is a knowledge to know what to do with these resources knowing how to harness it and very importantly especially in the discussion when we're talking about developing or developed world or developed computing is for many people to be able to access it it should be at a friendly cost to as many people as possible so now that we've touched on what it means to be developed the the word developing in the phrase develop world is we're talking about a process we're heading there we are working towards that ideal state but we're not at there we're lacking in one of the in one of the developed st states so to speak so in terms of computers if the word developing i'm describing the word developing as lacking in one of those areas for example yes i could have electricity but i have no connectivity or i may have connectivity but i have no power or limited access to power like my laptop would go off in an hour's time how much can i actually do in that time so world the word world de as developing world i want to emphasize that for the context of this talk and i think being fair to just any individual just taking a blank canvas and saying we're talking about just anybody who is in any situation where they're lacking any of the ideal states so to speak so the developing world is just any place that is not at that perfect state of computing be it cost wise power-wise knowledge wise and the like so in light of that i'd like to speak a little bit about older hardware and and in light of that we do know that as time has progressed one of the things that has changed is that our computers have gotten smaller and smaller because the electrical components that make up our computers are getting smaller and smaller that we have like what would be a computer that would fill a room in the 1970s or 60s fits even with in our phones it fits in our pockets like a phone fitting in our pocket or even our watches our smart watches are actually have so much computing power but this advancement changes things in interesting ways one of the re one of the benefits of smaller components is that they use less power and when are you using less power you can either make things smaller but maintain the same level of computing or you can do a lot more with the same amount of power for example at a certain power budget say 100 100 wats these days we have 12 ces eight ces when a few years back that was just two calls or even just a single core so older hardware usually means that you have access to less resources that if you are using a computer from 10 years ago for the same amount of energy you'll likely have less cause or for the same amount of cause you'll be using a lot more energy and the fact of the matter is that new hardware is expensive because it takes a lot of money to make this small tiny hardwares to put so many cpu ces within a small area so one of the good things is that as technology advances the older hardware becomes cheaper meaning that it becomes easier to access for more people so the title of this talk is c++ in the developing world and c++ is a language with performance at its heart so i want to transition that now to talk about why efficient code matters because it it helps to bring down the cost of computing that the better code we write the more access it provides to more more people and there is a very large population of people that may not have access to the resources that would allow them to have that ideal computing environment so it is with code that we can bridge that gap in my opinion so this is the cause that i think that we as a c++ community should be targeting yes there is a performance goal which is good but the the purpose of even this talk was to bring out the conversation that where does c++ matter it matters in the performance that reduces the cost of accessing computing in the world so there is a riddle of how do you balance the cost of computer computing the quality of computing and the cost of computing and naturally things have taken an interesting shall i say progression because on the on the angle of computers becoming small i do see in my country that these days almost everyone you meet on the street has access to a smartphone meaning that that is the computer they have access to but does our code meet the needs of computing i mean can can the can a mobile phone do what a pc 10 years ago could do another thing that a trend that i have noticed is that on the streets on the high street and in the marketplace there's a lot of shall i say older and obsolete computers from developed countries former office ps these are the pcs that people are now having more access to however they were discarded because they probably used too much energy and that in itself is a problem because now there are computers but how do you make them use less energy so that they're able to be used in more places then and especially like in places where outside of cities in rural areas how do we bridge that gap and it is indeed true that we do see shall i say new computers new budget computers with our manufacturers but more often than not tends to be that this new computers are just older hardware you know given a new name repolished so to speak so there's a riddle of how do we balance all of this how do we make how do we bridge this gap just as an aside we i'm aware that chromebooks are regarded as a lowcost computing platform however chromebooks do have a problem because they require you to be connected so even if the hardware or or like what chromebooks are you see it's essentially just a chrome browser tied to the to a to a linux system but it's closed down that you really can't you know hand somebody a computer and they go off to the mountains and they're able to compute because it's it's designed to be to be used in a connected environment so this what what what is regarded as a budget computing experience in a country where there is internet good internet connectivity might not work in the rest of the developing world mobile phones on the other hand do hold some potential because i do see that mobile phones are accepted by many more people many many people have them and many people are using them so they do hold some potential if the software is able to bridge that gap of the ability to use the the the phone itself without the network connectivity so the power of software to solve this riddle a fact is that in the developing world the computing systems available to most people would usually be underpowered or very power efficient in efficient so to speak therefore software performance is crucial because it is very important to always think about this low end because that's that this performance is where the people that need it the most are this is where this the efforts that we make with our language making our loops more efficient making you know every optimization this is where i think it it really matters it's also a place where scale matters because large deployments say schools governments you know any attempt to to to roll out computing education to a large number of people the projects that wouldn't even take off because the cost is just too much but if the cost is lowered if there was a way to do it then more people will be able to benefit from it so just wanted to touch briefly on the evolution of software i've talked about the evolution of hardware that yes it has gotten smaller but there's something very important that also happens our software has also been evolving what c++ is now is not what c++ was 10 years ago so the ev this evolution is also bringing new opportunities that would bridge this gap there are optimizations that come up after the hardware is in people's hands as people work with it people find new ways of writing better software that if applied to the older hardware would be very beneficial isue and one of the areas that in fact i'm really looking forward to in with this regard is the use of the c++ 20 modules something i've been experimenting with a little bit and i really it it it couldn't come sooner because it it reduces so much work unnecessary work pound include needs to go we need to use the import statement so i'd like to speak about why i think c++ in particular is very important in solving this problem one of the core things about it is its design it's designed with awareness of the cost of doing things it is is a very realistic language in my opinion it doesn't it's not designed to hide from you what it what is actually going on behind the scenes so we need to be mindful of every cycle of everything that our programs are doing and that control is available to us in c++ by design it gives you control over the stock and having control over what our programs are doing having control and knowing that what you're doing costs this much and but this is the benefit i'm getting from it having that control is very crucial especially in areas where the cost or ignoring wasted cycles really matters i know i have worked with for example c before and java and i know some of you do know that there's this there's this approach by the governments of i think america and canada and like many nations talking about security secure safety memory safety saying that c or c++ are unsafe languages so they are pushing to the quotequote safe languages well there's been quite a bit of discussion about this i think i've seen a couple talks this year about this developments but i still do think that c++ in particular it's it's like fire you know it's it's dangerous but it's also useful and its performance is very essential especially where the cost of computing is very sensitive so we're discussing about the developing world so i guess the concerns of the developing world might be a bit different our focus is in performance in lowering the cost safety may not be an issue but still c++ is an improvement on c that brings that safety to the masses so to speak one of the areas i think c++ also shines in my opinion is with the compil time computing this is something that's been worked on and has been built into the language con const expro we want to compute as much as possible at compile time so that when we when we deploy our software it doesn't waste time doing unnecessary things so the less work done on the client pc the better for energy and accessibility and cost so there was a talk called c++ seasoning by sean parent which gave some time back and there's there's there's a section of that talk where he talks about structuring of code especially for parallel computing that you need to be able to structure if you structure your code right then you can be able to take advantage of the parallelism that is available to us with our many calls and our many threads in this day and age but it requires structuring your code right and that needs access to the stack that needs control you need the tools to control and to write your code well that's something that i feel c++ does give us so one of the core things or one of the core points even that i want to make even in this talk is that c++ the evolutionary nature of it is actually one of the core benefits of it so i believe most of us have heard of the manch of you know rewrite it in rust whatever problem you're facing with c just rewrite it in rust but i propose that it's better to use c++ and the reason why i say that is that i think that as we write our code as humans our evolution is is step by step the way i used to write code 10 years ago is not the way i write code now and you notice that even in large code bases code changes gradually you might start out using camel case and at some point later on you change and say that no we're going to name our variables sneak case the point is whatever improvements we make are generally step by step and that's what i think c++ represents that step by step nature that you you literally see the growth even in our own code or in a code base in a company you see that things have been improving over time and it's likely that you know like many many of us find ourselves in a situation where we have code that is been written a certain way c++ 98 style and changed to maybe c++ 11 over time yes that can be a problem but also i think it also offers an opportunity for lifting up those old code bases with something that's compatible because you can get to change just one function at a time or like a small library you can rewrite it using modern ways and still maintain that compatibility and i think that's how software likely does grow and improve so the compatibility with c especially with so many libraries written in c actually the the other day i think just like a day ago i saw a blog post by the the author of the car curl library i mean he was talking about evolving the code the mistakes that have been made the errors that have been made and as i was reading that i was looking at us he did mention why he wouldn't rewrite the code in in rust but i as i was reading that i was thinking about that there is an opportunity to lift up a old c code basis a function at a time a loop at a time by being able to introduce c++ so i think that this language does have that potential to lift up code bases that we are using now that are written in c but can be modernized step by step so the other thing is just on the same vein that a lot of what we actually use today are libraries that are close to the hardware and they're written in c open gil vulcan direct 3d but to be able to to add more complexity or to to like the reason why even many of our games are written in c++ is because of the compatibility so this language gives us access to a lot of programs or a lot of libraries that are still in use today it's it's kind of like an international language of computing but with benefits of safety benefit benefits of modernity so i i do think that this compatibility that c++ may be the best way to lift up our code of course it may mean going back and rewriting that code which i know is a significant cost but i think it's important to discuss and to consider so in light of that now that we've talked about the why why c++ is important i'd like to touch a little bit on the how how do we make this happen well i'd like to give a disclaimer that i'm not a teacher of i'm just somebody who happens to spend a bit of time with it so i'll just give a few thoughts on what i think about learning this language about what my thoughts on how i think it can be done so i'll not rely so much on statistics and facts and figures but i'll just speak on my own experience and hopefully even as we discuss this more later maybe people will share what i'm what what what what what my thoughts so to speak we are conversant with the concept of our diversity that we are very different there many different kinds of people different kinds of circumstances different talents different abilities and what have you so but there are also those things that are common to us so i'll approach this from thep perspective of human language comparing it to human language because c++ is just a language so let's compare with how we learn our human languages so there's a website for the american linguistic association and there's an faq section in that website which i find very interesting it talks about the process of how children learn how to talk how we all develop learning how to talk it states that we have the natural ability to pick up language just like a bird has a natural ability to fly so the primary way that we get to learn how to speak is based on the interaction with the language talking with adults talking with with other people just speaking using the language that's how we learn the language and the steps of learning the language are pretty similar regardless of the language i'll not go into the steps right now but you can have a look at that site it's a very interesting read but the core thing is that this learning is gradual and there are steps involved to it and one of the core elements of learning language is that the parents and those around a child have a very crucial role in teaching the language because it usually comes by interaction so we can help people learn this language of course by talking about it more by sharing what we've written the same way that children get helped to learn the language by their parents sort of like taking a step down as a parent usually or those who are around a child you usually use baby talk you know you kind of like step down a level and you help the child to come up to where you are so the same mantra i think has potential in teaching this language called c++ so the point is that in order to do this we need to do it together the human interaction is the key to making it possible for more people to understand this language and to understand how to use their computers or how to make the most out of them because as i mentioned earlier that the knowledge of even what to do with your computer is actually very crucial if you don't know that you likely be using it in a very wasteful way but if you learn if you're able to speak if you're able to read and understand more about what the computer is actually doing then there are more opportunities for optimization so this is the benefit of these meetups of our conferences our user groups our discord servers etc so the more we speak about code interact with our code read it the better we get at using our computers so we also need to i mean to constantly reevaluate why we're using our computers why we're doing what we're doing and we need to shall i say be like the ambassadors i because we we are the developers i mean our families look to us people look to us to to to know what to do so how we to do this i i'm looking for ideas but this is just my thoughts because we are all very different so we all have different starting points so for example what i may think is the best way may not be the best way for everyone but hopefully as we just try and reach out we'll be able to help each other so in light of that i'll give my opinion on what i think is a road map for learning c++ because just as i alluded to earlier with our diversity there's no one siiz fits all answer but there is the concept of seeking and finding because you need to really look for the people who understand things the way you understand things or people who may be able to explain things to you in a language you may understand i say this because i've heard you know from many people you know saying that oh how did you learn i don't i i i feel discouraged i may not be able to learn i don't think i can do it or i don't think i can understand the way you're telling me but from my experience i have learned from many people i've had to learn and relearn actually for there was a time there that i actually wasn't quite sure if the problem was with me like you know kind of like why am i not understanding this but i've learned that you learn different things from different people i might be good at explaining this concept but somebody else is better at explaining something else so you do need to just keep keep on keep at it and find that explanation that matches the way your brain works and so we need to see the story the c++ story but to see the story we need to talk about c we need to to be aware that there's a history to this when i gave this talk and cpon somebody thought that i i meant that there's no way of learning c++ without learning c yes it is possible to learn c++ but i think to make the most of it you need to be aware of where things are coming from for example when you know you use a st vector you need to be aware that yes st vector is an improvement of the classic c array and you need to understand i mean it's it's good to be mindful to understand why vector exists why st string exists as opposed to con con stars so as you use a language like c++ the name c is in its is in its structure meaning it's an improvement of something that even though you use modern c++ it's always good to be aware that there's more to it and dig into it find out when you have the chance why was it designed this way because it has taken a lot of work to get here it has taken a lot of effort to grow step by step up until where we are and the beauty of c++ i think in my personal opinion is best appre appreciated when you see where things are coming from just like a movie in series of movies it mean it's it's a story that's very rich that may not be able to fit to the length of one movie but it's like 10 movies worth i mean of a lot of effort to get here so as you use the modern features when you have the chance to take the time to dig a little deeper because that's where the beauty of c++ actually does lie because i think personally that there is a great opportunity to revisit old code even just i mean like the many repositories and just try and lift up a c cod b try and use an iterator instead of pointers and see why iterators exist like you know these are things to do especially for those that are wondering where where can i get a project to you know to to to show off what i can do it's these small things lift up a c function write it in c++ and see where things were and where things are and where things are going so the one step at a time is what i think is the essence of c+++ one plus one + one because in the words of lau a journey of a th miles begins with a single step so it takes time to learn especially for those learning now it does take time but it is possible so is this something that you just need to do you just need to take one step at a time keep your map at hand for example there's a cpp reference.com site like keep it as close as possible to you and just take one step at a time you will get there don't be discouraged just keep cut it because even this language has taken a long time to get to where it is now so i just wanted to mention just as a foundation for those who are trying to learn that you need to understand the structure of the language that yes even if you may be able to copy and paste code here and there and read from the internet and what have you it's very important to understand this concepts it's very important to go back and just really understand what these concepts mean these foundational concepts because they'll help you to see the whole picture so i want to touch briefly about tooling especially in resource constrainted environments especially when it comes to learning about programming learning about computers learning about c++ when we're dealing with older hardware we have less luxury so to speak to to have certain niceties and it's very important to be mindful of this but then again also it's very important to to know and to see see that it's very important to walk i mean to tr to to learn to crawl before you walk and to walk before you run so even if you're working with constrained hardware even if you don't have as much energy even if your computer is slower in a way it's actually to your advantage because when you're starting out you you kind of like need to start slow so being slower is not a problem but it's something to keep in mind so when we're talking about spreading computing learning computing you really don't have to have the latest and greatest hardware because the concepts that you're dealing with are pretty simple so take your time and it's okay to start a bit slower and and with in regard to that one core thing that would bridge the gap is looking to how things were done in the past so in light of that when one is learning computing i would advice this is my personal advice if you are working in a constrained environment don't start with the integrated development environments they are too heavy on older computers they're designed for high high speed work environments when you have the luxury of having fast hardware to run them so i think as a way of bridging even the cost gap that when we we're talking about teaching we can take a step back and start with a simple terminal with just the compiler like how do you give the the instructions to the compiler then once you're comfortable with that then now you can graduate to the ides because the id make those processes faster but you need to understand what the computer is doing for you you need to understand what an include file is what does pound include actually do and why are we now being told to use import when you using a older computer and a slower computer is when you really really understand the difference so it's useful to step back to the terminal to how things used to be especially when dealing with programming this is where we are coming from this is how things were done in the 80s this was the state of the art then it used to run on what was the high-end computing then but what is very cheap now and starting from this foundation i think we give you a better leg up in understanding this complex things that you know you hear about in programming it'll help you to understand what is actually going on and it's also a very lowcost model for teaching programming to more people in more situation because it allows us to do something very interesting it allows us to make more use of a single computer it allows us to to to find opportunities for more people to use the same hardware if it's harnessed in the correct way so in light of that i would urge anybody trying to learn programming to really take the time to learn about the terminal to learn about shell languages learn a bit of bash a bit of powershell just google them and understand what they are that is a very core starting point then as a next step there's importance of keeping as much as you can locally this this kind of like deals with the issue of connectivity that you know it's it's it's important to have as much as you can as close to you as you can so that you're able to chew on it work with it feel it know it leave it like if you're learning to speak the language c++ you need to be exposed to it you need to be working with it you need to be like it needs to be like air to you so keep the resources as close as you can buy a book hold on to it carry it with you everywhere you go there is a way to download the entire cpp reference.com site locally i use arch linux and it's available as a package there on arch b bed distress there is a way to download even the there's a very good documentation on the microsoft website the c++ section it's even downloadable as a pdf put it on your phone print it carry it with you everywhere you can it's actually something i did some time back and it was very helpful to me and buy good books when you can afford to so in light of that just along the same vein so to speak it's always important to keep as much as you can as close to you as you can for example having access to compile explorer on a local land say in a school is useful because now you don't have to worry so much about the cost of always connecting to amazon so even if you're in an isolated place a small group of people can be able to you know write code chan out code practice the point is keep it as close to you as possible practice practice practice it's invaluable and another benefit of the the terminal so to speak like i mentioned earlier that it allows multiplying computing resources and there's an opportunity here especially with the prevalence of mobile phones that mobile phones can run terminals the the terminal emulator so to speak so it's possible to share even one computer amongst many people using mobile phones as the c lowcost terminals but sharing one you know kind of like desktop pc as a means to practice and and rehearse and you know work with the computing so it's actually something that i do i generally always ssh into my wife's windows pc but generally i'm online linux and i'm always you know even if she's using the pc i'm able to you know kind of like share the resource because all i just need is a compiler and i use vim so i'm able to do everything i need to do windows linux just as the touch of a button and i think there's potential here for multiplying what one computer can do and reducing the cost of just general computing so in conclusion i think c++ has great potential in lowering the cost of computing i think it's the language to learn because it is shall i say the most profitable language in my opinion especially because of the access to c level apis with a common language and this performance benefits of writing code well i think is the way or our way of making computing more available to more people especially with the prevalence of older hardware that's you know being discarded so we can reduce on the e-waist we can make more use of what is being thrown out in more places if you can reduce how much energy tasks take then it means connecting a battery to a desktop and having it you know kind of like connected to a wife network is something that can bring more opportunities to more people so these are my thoughts on what i why i think c++ is important and i think we can do a lot more with our computers we can reach a lot more people this is kind of like just a message that i felt my heart to talk about and hopefully somebody out there sees the same as me so i think that this language is something that we need to keep alive needs to be taught more it needs to spread more yes so thank you for your time thank you for taking the time to be here and to listen to this talk and i hope that i mean this will start a bigger conversation that's my dream that's what i hope all this leads to so thank you very much that is my [music] talk thank you matthew that was an interesting talk there's some more general questions which we have i might you know favor taking some of those as the panel but let's just quick do those let me show them here so what are your thoughts about premature optimization do you think software engineers following the statement premature optimization is the root of all evil in the right sense well i think yes it is possible to you know kind of like waste a lot of time i mean trying to optimize for the wrong reasons i think okay generally like what when when even when i'm writing code or when when i'm working on programs i think if you use the right structures structures that have been you know like researched on say using vector just you know there's a there's a common advice like just use stood vector it's something that is already established that's a good starting point then only optimize after i mean you know kind of like you have something off the ground so yes premature optimization is a trap that you know many people do fall into i would advocate more for you know kind of like just start with a standard established structure you know kind of like use algorithms the st algorithms and only optimize after you kind of like have something on the ground okay someone like wonders like how do you see like a general feeling about variable naming especially like in the context of like code being like read internationally i think something that you know even i personally struggle with is you know kind of like coming up with a consistent naming convention sometimes when i'm starting out i start with this convention and you know maybe you know like maybe a few months later i start naming things differently i think that the the ability to go back and change things or to adapt things is i mean like in your in in your projects it's it's important to be open to going back and changing things so variable naming i mean if if you're accommodating somebody whose language is different from yours it's something that needs a bit of time and care so to speak i mean it's it's all about who will be reading your code and why will they be reading your code so i mean if your audience is say primarily say french for example and you see like the the purpose of naming things naming functions naming variables is that it's supposed to be readable so i would imagine that even if it means having different versions of your code base to ensure that as many people are able to read it as possible i mean the goal is to communicate so i mean it depends on your audience it depends on your team so to speak and i think we shouldn't be afraid to go back and even if it means renaming everything to just to accommodate i mean to to accomplish that goal of clear communication like a code should be readable at the end of the day that's what i think all right then let's continue with the panel in 10 minutes and thank you for your talk and we see us all in 10 minutes at the panel and