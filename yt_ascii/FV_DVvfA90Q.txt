we rewrote our product and go from scratch this blows my mind that you could write a back end in scratch why on earth would anyone do that yeah why on earth would anyone write a back end in scratch okay this makes no sense chances are if that was the first thought you had after reading the title it's shockingly isn't if you're if you've been building software long enough you know that a full rewrite is generally a bad idea this is such good advice right here already this is a great post just like this post alone could be nothing but blankness or lorem ipsum after this this is such a good thing i have i would worked at a company where a ceo got fired because of a rewrite i have worked at i i was at netflix during the great rewrite it rewrites are awful rewrites hands down always screw everything up progressive refactoring is the way unless if you are doing the full language change if you're doing the full language change guess what that's different that's just different and and of course so someone said elon twitter the thing about twitter though the thing about netflix the thing about backends is often their micro service just cluster cluster and so that means you can rewrite from scratch but it's like a small service and so the the rewriting doesn't it's not the effort is much much smaller you know what i mean so that's okay because you're rewriting a few hundred line a few you know a couple thousand line applications from one to another that's that's a simple rewrite that's a simple simple rewrite the hard part's really the infrastructure honestly when it comes to microservices and all that the microservice is the easy part it's the logging it's the messages it's the debugging it's the productions it's the canaries it's the staging environment versus production environment it's like the the ancillary issues is insane versus the actual like the thing right the thing is not that hard holy cow i'm not convinced microservices are the greatest thing in the universe anyways wow did we detract let's see it looks tempting because you think it's going to be quick and solve multiple structural problems at once i've done this and every time i'm wrong however it's almost always becomes a never-ending time sync that creates many more structural problems that you didn't even know existed because the original version had solved them from day one yep every time you know the best part about this you look at someone's code and go why would you even do that five hours into the rewrite you go oh that's why you do that duh every dime goodness gracious you also probably know that companies who did it often feel obliged to write a blog post justifying why they're used or their case is different and wasn't a mistake at all this leads to growing number of pro rewrite blog posts and that tense even more companies into doing it [music] what an irony but hear me out our case is different loving the start of this this is so good this is so good all right is your tool and go link this is literally the question we we got asked several times by users not even what is it written in straight up is it in go apparently people not only care what digger is written in they care specifically well i don't know what is digger i don't i don't know this product what is this thing they care specifically whether or not it is in go is this is this like some old it's a gold it's for gold oh link in paragraph two okay oh is it okay okay okay okay okay hold on and on let's see they care specifically whether or not it is written in go and unfortunately it was python sorry for all the pythonistas out there nothing wrong with it by the way pythonistas are some of the easiest crowds on stack overflow to trick into getting stack overflow karma one of my best stack overflow questions ever was which one is more pythonic and then just put some out there and you'll get hundreds of responses people jumping in upvotes all over the place your question will be edited like 16 times for clarifications it's it's beautiful always bet on the pythonist is getting after it okay always do always do so let's see it just so happens that golang is the go-to language in devops tooling pun intended and we didn't know that before we didn't know that before starting the latest iteration of digger naturally we use the same language that the previous four iterations were written in python it turns out that sub-optimal for cli first tools yeah agreed especially if the tool is meant for automation yeah okay so this makes perfect sense why you'd have to do a full rewrite if you're doing a an open source an open source alternative to terraform enterprise this makes perfect sense right everyone has all this tooling and go so they just want to be able to use your tool in go right it's probably time to tell you what digger is an open source alternative to terraform enterprise digger runs terraform plan and apply in your existing ci system unlike terraform cloud and equivalents that are effectively dedicated full stack ci cd platforms with compute and jobs and logs and everything we thought there's got to be a better way to run terraform than duplicating your entire ci stack so digger is a thin wrapper slash orchestrator that seamlessly integrates with your ci toolkit like github actions gitlab or azoir devops okay a single brain works everywhere command line tool written in python may look small but it has implicit dependencies on the interpreter even if it ships with all the dependencies you of course could build you of course could bundle a python distribution with the tool but that makes the package super heavy and if you don't do that there's no guarantee that everything will work as intended on the host platform goodness gracious is this not the truth is this not the truth every every or i see dude the amount of time i've spent in the exceptionally limited amount of time i've spent using python has been hey guess what wrong oh matplotlib more like matplot that's on your face it's just like dude okay i have i'm going to just use anaconda from here on out you're using anaconda i use anaconda and then it doesn't work you're like damn it why is my anaconda not like your anaconda it's just it's just it's just just frustrating a single binary on the other hand will always work because it has no external dependencies yep faster means cheaper statically compiled binary is much smaller and faster to run that is not about performance optimizations modern applications don't need anything fancy in terms of algorithm slash data structures that could you could argue differently about that for certain things but i guess they do say the word most modern okay i can i could buy that okay i could buy it but even then fast versus slow boot time is a huge differentiator yep go just starts python you got a whole environment you need you know what i mean especially if the tool is a part of ci cd pipeline faster means cheaper a single binary not only uses less cpu cycles or minutes got them python it also uses much less ram gotham python which means you need less vms to handle your parallel runs got them python is this does that mean update or does that is that just a misspelling of you udp you get the ecosystem of tooling of the tool is using this is true thanks to this person for pointing this out we haven't thought of this as a potential reason but it makes so much sense indeed it's the only natural to know what language that the tool is written is because if it's node then it'll let's see then it'll make you use npm gems for gems who's doing gyms a standalone binary on the other hand doesn't enforce the opinion of the ecosystem very very true this is very very beautiful this is very very beautiful we did it in two weeks yes the whole thing in 10 in 10 working days wow that's really fast how's this possible that's really fast it must have been a small project then is it really that small of a project because 10 days there's there's two ways this could happen one you have deep familiarity with the language you're gonna write it in and you have deep familiarity with the entire code base so therefore you can just write it super fast or two or there's like some i don't know there's some spectrum of that to the other side which is like you're not as familiar but you hear it's better slash the project super small could have done it in rust in 12 days could have done it could have done it in rust in 12 days it's true it's true i guess the whole thing in 10 working days how's that possible well i have a dirty secret to tell there wasn't much there wasn't that much to rewrite we started digger as an alternative ui for aws aws that auto-generated and ran terraform behind the scenes for every scenario you'd expect as a piece of sh wait no wait hold on a pass like heroku to do like like deploy a container a database however we have quickly learned that this is too big a problem to tackle for a startup simply too many edge cases yeah we just we just want we wanted to just do impossible under the sun is that too much just all of it that's all just like heroku just like a little quick heroku clone that's all we're gonna do a little huracan clone so we zoomed in to focus on only infrastructure okay then we also dropped the terraform generation part and focused exclusively on terraform deployment which led us to realizing that we're essentially duplicating a ci cd stack so why don't we use reuse existing ci infrastructure this is why the python code base we decided to rewrite and golang wasn't that huge it essentially is a wrapper on top of terraform that also is aware of state and s3 and stored metadata in dynamodb back then we didn't have an orchestrator backend or an api or ui of any kind we plan to do it in a week and we kind of did but we were new to go so it took another week to get into the production ready state and move early adopters over to the new version oh interesting okay so they weren't even familiar with go i think this also speaks volumes to just goes a simple language i know it's not sexy it's not something like goes like eating vegetables you know what i mean it's probably just good for you you know it's just that's all there is to it it's just good for you that's all there is to it go is not go is it's just an exceptionally simple language and i always have this problem where it's not like python python's more complicated than go go is like literally the dumbest language possible it's about as dumb as it gets yeah if air does not equal nil is still better than throwing errors what you like raising exceptions what are you a dummy that's like the worst possible of them all that's i mean i like go but it's boring if that's why i don't want to do go that's why i don't do go inside projects because i want to have something that i feel like is exciting i like rust but i can't love it as much because go just feels like you can always win and go despite no matter what it just somehow always gets i get things done every single time i take go error handling of errors any time of the day i'd rather use go than typescript you know how much go doesn't support almond dude wait hold on you put your squirrely brace on a new line what hold on you won't use go because you program like this yeah get out get out gross gross oh who would want that yes c-sharp user microsoft outed let him cook instaband macbook off the roof dude macbook's going off the roof unfriend syntax let's see let's see syntax dialing behind being a deal breaker is insane the only thing the only thing that's worse okay so i'll give you one thing that i think is really dumb about go lane is that it aligns types and everything according to the length of the name so all the types are right here and the names are on the other side of the struct you have to put a new line to make it stop doing that i hate that for me i understand that not all of you know syntax is whatever but that is that's it's not readable you start getting into these stupid things where you have to like you have like space in between okay my dumb brain can't be following a gap a big old thigh gap of of white space i can't do that i'm gonna miss the whole thing okay i can't do that i i ain't doing that all right here we go the switch happened in the 20th of march in this pr with an unassuming name copy files nice back then we didn't have much traction and we didn't even know for sure that was the right thing to be building three months and 700 get starbs later github stars later man i can't read this morning of course we are now following much stricter pr naming guidelines contributions welcome oh this is actually really cool real talk this was actually super cool that i'm surprised that you could really get something up and running and being quote unquote production ready in 10 days even if the scope's not huge but being unfamiliar with the language but familiar with the problem and being able to translate everything you have into another language again i think that just speaks volume of just how simple go really is again not a huge fan of go again i'm a leptos guy i'm a rust leptos guy okay this is what i want that's what i want this is what i want okay i'm not used to this non version of that no one hears love and go okay we use it because it just it's just a it's just a language that is successful that's all it is it's just a very easy language to get something right in try maintaining a huge code base and go yeah i've seen many i i my previous company was all about it and my current company is all about it i contribute to go at my current company it's not that bad at all anyways hey guess what the name is i don't really love go but i'm always intrigued by how productive people are in it and sometimes i wonder if my choice is about rust given how crappy the foundation is maybe i should have chosen go and just eaten vegetables instead of this wild delicious boutique food i choose called rust a jet