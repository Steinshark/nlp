all right, so we talked about separable filters and the nice thing about separable filters is that they're incredibly quick and this means that for example in computer games you could actually do some of this on the graphics card at 60 frames a second, right? these are the kind of things that people who are writing computer games not me people who know what they're doing well, i think if you the games are thinking about right, how can we do post processing like motion blur and bloom and other kinds of filters that look good in a game, but don't drive the whole thing to a halt separable filters are a great way of doing this the problem is that gaussian blur which is the thing we kind of focused on doesn't look that good as a blur right if you say well i want to do some depth of field i want to do some optical depth of field all right so i want the foreground person in my game to be nice and sharp and i want the background to be lovely blur, right? it will look a bit odd. if you use a gaussian because that's not what a lens does you need to use a proper bokeh blur. i don't know how you pronounce that where bouquet is right bouquet right bokeh bouquet oh, yeah, i lost interest. it's because of the way that the optics of a camera work, right? so a gaussian your point is spread over a sort of gaussian function. so it decreases like this, right? that's not what happens in an optical blur my lens blur so if we remember back a while ago, we did a light-filled video you've got a point light source here, which is something in your scene a person a light. they've tree not important, right? it's gonna be quite a few of these if they if your image has more than one pixel in it you have a lens right which looks like this it might have other glass optical elements and you have an imaging plane here like this and what happens is point light don't just travel directly into your camera. everything just emits light in lots of directions depending on its properties so it comes in like this and when it's in focus it will come and it will hit a point on here and that pixel will obtain that color the color will be the sum of all of these light rays and then it sort of simplified to be usually between nought and 255 if you're out of focus what will happen is these light rays will come pass the camera like this and focus on a point behind it and actually you'll have this light will now be spread over this whole area from the front if this is the front of our square sensor every point will now be a circle like this and each other point will also be a circle and another circle in another circle and this gets you that kind of characteristic lens blur that you see when something like light sources christmas tree lights or something are out of focus cut to a nice shot of this so people spend a lot of money on lenses primarily, i think because of the quality of this kind of blur. they're not perfect circles all the time sometimes there's slightly odd all their hexagons because you've got an aperture and things like this they give this blurry sort of unique characteristic even down to a lens which you can't really get on a computer but we can have a go because we've got to do it at 60 frames a second you haven't got the option of thinking about zeiss and like although this is most obvious when you're looking at point light actually this applies to any blur right? if you do a gaussian blow of a scene, that doesn't have very bright bits it will still look a bit different than if you have a normal bouquet blur right, and and actually you look much better. if you do it properly. can we recreate our separable filters, but now perform a lens blur or at least an approximation to a lens blur and the answer is not it's not so easy, but you can kind of have a go you have to start looking at imaginary numbers a little bit but if we just sort of not worry about it too much you essentially replace your separable convolutions with two complex separable convolutions and we can start to start to get something going so one particular game engine that does this is ea's frostbite engine which drives a lot of its sports games so things like madden will have a nice blur on certain shots that's created by an artificial lens blur not a gaussian blur other games might kind of fake it a bit of a gaussian i don't know primavera folks. it's not technically correct. there's a kind of short paper on this there's a few blogs online that talk about stepper lens blur. there's some implementations out there i've got my own implementation that i wrote which i'll release at the end of this video there was a nice presentation at the game developers conference in 2017 showing office technology, right? so, this is real-time bouquet blur not gaussian blur right? so how does it work? well the idea is that what we want to do is instead of having our kernel which is sort of like this and a gaussian we need to have it be a circle right in an ideal world that right which from the top looks like a nice cut clear-cut circle now you can do that but you can't separate it you can have a kernel which is jazz a load of zeros and then a circle of ones in the middle and that will produce you a very nice filter but it will take ages because you have to do all this point wise and it's not separable so what we need to do is find a function that we can split into a vertical pass and a horizontal pass all right, let's look at example, right one of the nice things about gaussian is but it's separable right? it's a naturally separable function. so how can we convert a gaussian to something that kind of approximates this circular shape? and the answer is that we can sort of add in an imaginary component and create sort of complex gaussian now obviously we're not gonna go into huge amount of detail on complex numbers but they have an imaginary and a real component. the imaginary component is multiplied by i which is a square root of minus 1 the good news for us is that most of the time when we actually need to use it the eyes get multiplied out and they'd a sort disappear or become a minus number all right that's all buddy time gonna go into actually it's a bit like when we talked about our discrete cosine transform and when maybe some time we'll talk about fourier transforms we have waves that add together to create something the shape we want in this case the wave is going to be a gaussian, right? but it's going to go up and down like this so instead of our gaussian going like this, which is not quite centered what we're going to roll on it we have one that goes up and down right in the complex the complex component of this gaussian is the bit that makes it do that so we have a gaussian that sort of goes down like this and sort of centers around here and it comes down like this all right. it's symmetrical and then we have another one but perhaps come sort of like this and when you add them together you get the thing we want so these kind of cancel out and you sort of get some of looks a bit like this with a bit of wobbling around and then it comes up about here and then kind of goes like that and then down like that right and that is our circle and that is also separable because it's essentially got a gaussian as it's sort of primary function so i've coded this up and i've been using it to mess around with different blurs most of the code is to do with creating the kernels i do some normalization and things like this then i pass the image from each component and the very end i combine them mayon. i'll draw a little diagram to show how that works the more components you use a bit like in jpeg or any kind of sort of adding of waves the more ways you use the better approximation. you're going to get right? so if you're not watching it for a game engine, you can use maybe two each time you do this you've got quite a few convolutions you can have to do these are complex multiplication operations in addition it takes time, even on a graphics card, right and bear in mind. there's other game things to do, right? the game isn't static with just this nice blur so you've got other stuff to be worrying about fact that there's an imaginary number involved in some sense to me anyway, personally, i like to look at it. it's basically not making any difference at all the only difference is but the addition and multiplication that you would normally do in a convolution is now a complex addition and a complex multiplication which are sort of well defined structures that you can just apply and this is a mathematical term not just as saying it's different it's absolutely a mathematical term right and it's actually not very complicated. you have your image, right? we have our first component c naught here and we have another component so you want we could have lots of errs this has a complex kernel so that we'll have a real and imaginary right but they're just going to look a bit like gaussians like i showed you this is going to be the same over here. these are different ones and the idea is that when we add these two together, we get a very nice disk so what we're going to do is we're going to converge with these and we're going to converse in which with these and we're going to add them together at the end because i see a lot of addition goes on. all right so we take our image we go through here and we get another image out, which is our real and another image out which is our imaginary we go through here we get an image out. that's real and image out that's an imaginary and then we add these two together in a weighted sum and then we take our fine or weighted images for each component and we add them together in our final output like that. the reason we have to do these separately is so that we can make it separable, right? this is this can be done separately this can be done in the same way very very quickly, right if you're doing it for just two components there's a few convolutions you have to do add it all together and you have your result the sepa bility means that instead of doing all the kernel for every location we do a vertical pass of a strip and we take that output and put it through a horizontal pass and then we combine the outputs at the end and that's that's it mathematically equivalent to doing the 2d version but much much faster so let's have a look at some outputs right now i've written some code here very straightforward that essentially produces these complex kernels in one dimension and kind of higher than 10 image you know in the correct order add them up at the end so we can blur smooches, you know i'll release the code so you can have a look the original post that led me to this work outlined a few parameters for these kernels that butt looks good, right they heat optimized so i put them in as well so let's have a look a couple of these kernels and see what they are. so if i just look at the zero the one component pass, right? so this is if you want to try and create a disc with just one of these complex kernels, like what would it look like? well, let's have a look. these are the real and imaginary parts of this particular component and this is going to look roughly like a disc when we add these two together. let's see. so if i take the two together we can run it and it's kind of a doughnut he disc right? and the reason is because you can't get a perfect disc with just a real and imaginary part added together it's not going to work. so what we can do is we can take another kernel add that to it and now we've got kind of two wheels and two imaginaries in some loose sense add these all together and maybe we can start to approximate this disc so we'll get a little bit better if i change this and run that together all right. so now it's got a bit of a ripple to it but this is starting to look quite a lot better. like this looks to me quite a lot like the disc i'm hoping for and this is still separable so i can take a strip from the middle with a strip here and i can run it in two passes and save a huge amount of time because this is a sort of a this is i think a 64 or 65 by 65 pixel kernel, this will be a big deal if you wanted to run this over an image especially, you know a sort of resolution of modern games run out so we can get even better we can add more and more components so if i've ramped up the number of components like we get somebody looks really really quite good. there we go so this now looks i think quite a lot like a disc so essentially this is equivalent to running a circle of ones in a convolution over an image it's just that now we can do it in these separable components and save ourselves a huge amount of time. it's not perfect, right? the size is difficult to manage. the edge is not as sharp as i'd like this should be a sharp edge but you can't get an absolutely sharp edge, but for a sort of game engine something in the background, it's gonna look great and it's going to run really really quick in the ea and in the frostbite engine they'll only use two components so it won't be a perfect colonel but it will look pretty good stars are a classic example of some where we can use this blur because of course their point lights have a nice spread out nicely so this is what happens if we gaussian blur this image, it looks dull and light just like not high-resolution and doesn't look great right, if we if we look at the lens version, i mean i think it's aesthetically better, right? when it looks like this, right each of these points has spread out into a nice disc i've had to do some exposure here because it's that's difficult to do but i think it looks pretty good so that's the gaussian and that is the lens blur. i think that looks a lot better so this is our fake lens blur by using our our circular disc kernel with lots of components because i wasn't worried about speed right? even if you did it with two components, we still look good so if you were running this in a game what you would do is you would start to separate out the foreground and the background of a scene you'd blur anything you wanted to not be in focus and keep anything you did want to be in focus sharp, and then you'd start to bring them all together at the end by you know alpha blending or overlaying so you sent me a picture of some lego so we've got a lego man here on a table with some lights in a jar behind, right? so this is quite a good example of something we could try this out on so you also thankfully gave me some foreground and background masks for this so i blurred the background and i blended in the foreground as you might do in a game but love and encode it. i kind of hacked it together in paint, but i think it looks really good so so this is our gaussian attempt. so here i've essentially taken the man away i've blurred at this using a gaussian and i put the man back in basically and he looks okay but if we flip to the lens blur, i think it looks a lot better, right? it looks a lot more like a true sort of bouquet blur. you might expect from a lens and so this is exactly what you'll see when you play fifa and when you play pga tour and when you play madden and any of these sports titles when it cuts to a kind of nice depth of field shot let let's say means instant replay. this will be at work behind the scenes. there's loads of different tricks it's just one of them. i think this is really interesting because apart from the fact that i think this is quite mathematically elegant, right? not everyone will agree. i just think it's cooler in these games and in you know they're doing all these little tips and tricks to make it run at 60 frames but still look really good and you don't notice like you know what no one really knows until you read up on it that madden has a different depth of field approach to some other games, but maybe you just liked that a little bit better you didn't know and that's one of the things you liked about that game and i just think that's really cool that you know these things are going on behind the scenes so we don't know they exist but they just make it a little bit better what you think right? so in this case, it's going through glass. the glass is moving things around that is going to be lost a little bit in our in our blur another thing is about our disk is not absolutely sharp. right and we can't approximate hexagons with it so you can't do that kind of blur but i think the main problem is that the exposure is very hard to get