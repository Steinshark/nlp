so, i've come here today because you promised me "cache", but i don't see any money. i thought you were paying me for these things, but- no, we're not talking about that sort of cash. we're actually looking for the cache that is built into our cpus and they're used in computers to try and make things run faster. now, we talked about how the cpu talks to memory, and we spent some time looking at how we can build memory chips out of discrete logic circuits. while you probably want to build all the memory in your computer system like that, there are other ways you can build them to create sims as you're using in the late 80s, early 90s. and this one is about 256 kilobytes, but you can get dimms that are as big as 16 gig these days. now, if you remember back to what steve furber was saying about when you build the bbc micro, he was talking about how when they built it, they used ram chips that ran at twice the speed of the cpu. so, we got the 8 ram chips here, and they're connected directly, more or less, to the cpu here. the memory ran at 4 megahertz and the cpu ran at 2 megahertz. and so the cpu could make its requests and the ram  would return it very quickly. and while the cpu was still processing that, the video circuits could grab the data from memory to form the display. so, it was able to multiplex the two and not slow the cpu down, unlike some of the systems. now, as time went on, the cpus got much faster so by the end of 80s, you could get cpus like this, which ran at 8 megahertz and then 16 megahertz, 32 megahertz and so on. and now a 3 gigahertz cpu is very easy to get a hold of. unfortunately, the ram didn't increase speed at the same rate. so these days, the ram runs several orders of magnitude slower than what the cpu runs at. so, this leaves us with a problem. even if the clock speed of the cpu increased, it would still have to wait for the memory, so it wouldn't actually appear to get any faster. so actually, it is possible to build memory that will work at the speed that the cpu executes at. but the problem is it takes more space on the silicon to store each bit of information, and so therefore, it costs a lot more to produce the memory compared to the dimms, the dram that we use today. so the way we get around this is we split the memory up into two types. we have our main memory, which we build out of dynamic ram. but we also have a second type of memory which is actually often built into the cpu as well. now this is much smaller, but it's built out of much faster memory. and this is referred to as the cache. now, the cache is perhaps an old-fashioned english word, but it basically just means a small place where we can store things. so you might use it to store your hidden treasure if you're a pirate or to store your food for winter. another example where you might come across a cache is with your web browser. so the cache on the web browser is used to get around because it takes a relatively long time to fetch a piece of information over the internet compared to accessing something on your local machine. so what happens is: when you go and fetch a page from the internet the browser will go and get the html page, it'll get the css files, the images and so on. and it's stores or caches a copy onto your local disk that it can then refer if it needs to get it again. and the idea is that we can get the data from the local copy a lot quicker than it could if it had to go fetch it from the web server somewhere else in the world. and it's this same approach that is used by the cpus. the cpu's got the same problem. it can talk to its cache on the cpu very, very quickly, but talking to main memory, compared to talking to the cache is a relatively long time. so what happens is: every time it requests a bit of data, it caches a copy locally in the cache built onto the cpu, so that when it needs to fetch is again in the near future, it can access it from its local copy a lot faster. there's some other tricks that it can do as well, because the cpu can say, "well, actually, if i fetch this instruction, there's a very good chance that i'm going to execute the next instruction, and the one after that at the same time." and so what it can do is, rather than just getting one word of memory at a time, it'll say, "well okay, get me the next 128 bytes of memory." and it'll read what we call a cache line, one single lot of 128 bytes from memory into the cpu in one go. the idea being that it takes less time to read 128 bytes in one go, than just to read each 128 bytes individually. but that's down to the way memory actually store things. so, we talked about, in the previous video, how we would have an address, a binary number that represents each different bit in the ram chips. but actually, rather than storing it as one big list of bits, it actually stores it as a grid. the address that you give it from the cpu gets split up to reference a particular row, and a column of that grid to get the particular bit it's interested in. now, the way the ram chips work: one you've selected a specific row, you can then access each of the columns in that relatively quickly, compared to changing to a different row. so if we want to get 128 bytes, if they're all in the same row of memory, then we can access them very quickly, and so copy them into the cpu's cache much quicker than if we were having to select different rows at a time. so, how big does the cache on your cpu need to be? well, actually it turns out, you only need a relatively small amount of cache to make a significant difference because our programs are often sitting in loops, executing the same set of instructions again and again and again. so if you've got enough to store that loop, then they can be cached and it'll work fine. or the program's accessing the same block of data and manipulating that in different ways. and so if that will fit into the cache, things work relatively fine. so we don't need that much. you often use separate caches for the instructions and for the data so you don't remove the instruction that you're interested in to put a copy of the data that you're going to process in there. i mean, you could think about it, that you might have a field full of turnips and so you'd have to go and dig them up. but you might also have a cupboard with your turnips in the kitchen, so you can make your stew that night without having to go out into the field and if you're out working somewhere else, you may even have a turnip in your backpack to eat on the way out. second level turnip cache? yeah! *laughter*