all right from vim to zed around 20 years of using vim in december by the way if you guys don't know thorston ball thorston ball is awesome he worked a lot at source graph he has a really incredible book which you can actually get 30% off with a copen code that i have and i don't get any money from it it's just literally you get it for free he said one day he'll buy me some beer or something like that the interpreter book.com and he also has a compiler book he's really really smart awesome engineer i absolutely think he's just one of the one of the top top shelves to do that anyways really like thoron ball so he's he's writing from vim to zed and so he works on zed now he's helping with the linux port he also did he's doing vim emulation he's doing a lot of stuff like that so great guy to be doing this he's worked in tools i know he worked at source craft before this doing a lot of the language tools and all that with te so i think he he's very very smart so i want to see what he has to say here around 20 years of using vim in december last year i switched to zed as my main editor since some friends have asked me about the switch not that you work at zed are you using zed instead of him i thought i'd write about it you know that i'd switch yes so what's left to talk about is the why okay this dude's a 100x engineer he's literally a 100x engineer before we do that though let me make something clear i love vi and neo him i've used vim professionally intensely admiringly loudly guess that's why people ask me whether i switched for the last 13 years i wrote a blog post about getting better at vim 12 years ago and i haven't lost entrance since 5 years ago i switched to neovim discovering what neo and his community had to offer brought me a lot of joy i've got 10,000 hours in vim the man's the man's good okay we get it you used to you used to use vim and you're old that's right i have to tell you all of this since i wrote about testing before and put a paragraph with credentials in it and people still thought i hadn't written enough tests [laughter] yet i hate the internet okay so let me say it again in the second paragraph i love i know vim i'm very good at vim i can hear drew neil's accent when i close my eyes i know who my pope is he's talking about t pope the only pope and i remember where derek said vim is the wonder horse and i've learned vim tricks from gary bernard and i was there when tj read the vim manual i live on the home row i once spent a christmas vacation reading through the best vim tips back when it was a single text file on vim org by the way there when tj read the vim manuals crazy others leave dude i leave i leave colon q's around others leave colon q's around i twitch vap gp or gq when writing pros grown-ups i brought tears with my use of vim macros it's not clear whether it was awesome struck weeping or just stop and do this by hand so we can move on weeping but that shall not or that shall not matter for this discussion okay credentialed we we're credentialed we know it's credentialed what's hopefully clear now is that i don't switch editors lightly yet i did did why i'm i'm not going to lie to you i'm a little nervous am i going to become a zetter i'm a little worried okay i'm a little worried what happened if at the end of this article i want a zed let's start with the obvious even though it's more of a requirement than a reason zed has vim mode without that i wouldn't have switched but that's intriguing to me what lured me to zed is that vim mode is composable with the rest of zed and zed has a lot of things i've always been curious about multi cursors multi selections undo redo stack for selections in zed i can use them all while using vim motions and operators imagine as i did the powers of vim mode combined with multi cursors multi selections that's right or that's what got my curiosity conversely that's also why i find the idea of just embedding neovim into z zed a bit boring in my eyes it would make z just another gue rapper i actually agree with the statement totally agree with that totally agree with this cool cool okay okay i i it's neat i mean the the usage of mac rookie probably doesn't even use him anyway there's a let's see so so command so command d isn't that what vs code does too that's pretty neat it's mac os osx only thorson's working on the port i believe and then there's a multi-buffer oh yeah multi-buffer what a thing of beauty in short the multi-buffer allows you to view multiple excerpts from multiple buffers files in a single tab and there and here's the amazing part edit them as if they are all the same file what's it called cock. viim right yeah neoc ces this one totally does the same thing you can do this search and replace that's super cool where you can actually search it up and you'll get a file that looks just like one big file and as you edited it edits every single individual file within it it's it's absolutely it's it's a really cool thing i actually thought  was super cool it's just that it ended up i just i mean i can't even run it right now i believe it requires node i can't even run it right now i don't even have node on my system edit them as if they are all the same file yes you can search my dumb typo find all references of a variable or find all implementations of an interface and the result all gets displayed in a multi-buffer and in the multi-buffer you can edit all the excerpts it's glorious vim users imagine if you could edit the quick fix list we can h emac users yes you already know you let's see you already know this and you call it aur mode thanks for tuning in but i do agree with this this is super cool by the way because with this you can do like replaces across several files and so it feels super you know it feels super handy right this is super cool look at that doing multiple cursors across multiple files it's pretty cool like i can see why this is good i mean i typically i would do something like c do you can do c do you can also run cursor you can also run macros across files you can actually put all that c do c do allows you so for those that don't know what c do is here slog here i'll just search up slog put everything into a quick fix list so i can just walk through every reference of slog and then i can go c do i'm going to rename slog to bog right and i'll do a gc so i'll do it globally and i'm going to do it and i'm going to confirm each time yes yes yes yes yes and it's just going across every single occurrence in here i like it okay multi cursor multi buffer multi selection in combination with vim mode the power seems endless how could i not try that i i mean i think it's pretty cool i i like that the problem is is all the things i like about vim are all the small things right like harpoon i like how telescope works i like my quick i like quick fix list a whole bunch right like the problem is is the things i like about vim are a little bit different than multi cursor is neat i often just go into macros or find and replace maybe i'm missing out i mean there are some things i think multic cursor can do that macros can't i don't think so because multic cursor is just a macro that you play all at once you just play live right that's all it really is i don't know anyways interesting to linger on the practical matter before switching plus i it's really easy to hack on but maybe maybe zed's really easy to hack on i've never i've never tried that to linger on the more practical matters before switching to the abstract yes i worked at zed i work at zed that's also a reason for why i use it would i use it even if i didn't work there yes i did before i joined zed now i use zed because i work at zed i work at zed because i used zed and found it very interesting pulling this apart into hypothetical it seems pointless what i can tell you is that i wouldn't work at zed without using it that seems hypothetically absurd to me agreed if you worked at an editor company and you didn't use the editor itself that is absurd right you should make the editor exactly like if you like it would make no sense for me to go work at intellig and develop intellig via dm because it just means i i i fundamentally don't use that product and it just feels like very especially something like that that means i don't like it right i don't like it enough to use it so why why would i be a good developer on it i wouldn't be would i write this post if i didn't work there yes absolutely do i work there because i'm the type of guy who writes blog posts about switching editors probably all right these are good points now for the let's see for the abstract that made me try it out and switch and makes me keep using it the values behind z the editor and the team overlap with my own performance simplicity focus aesthetics love of the craft that's what i saw when i first used it and what resonated with me whether the founders would sign off on the list i'm not sure about but does it matter maybe i don't know i'd have to think about that right because if because eventually they will break the reasons why you like it if they are not aligned with what you're saying sometimes you use software and it's as if you're walking past a bar hear hear music coming out of it and you immediately start to nod you to nod to what you hear you start to nod your ear wait i i i don't know what nod your head you start to nod your head there we go you start to nod your head do you go in or go home and listen to the same music you've always been listening to it's a good question he's jamming he's jamming whoopsies oh my goodness can we just stop with that floaty thing i like the highlight do do i have to share everything as a quote but thorston value shales what i want to know does it support vim macro's registers marks does it have jump lists what about rainbow parenthesis it supports some of these will support a lot of others might never reach 100% feature compatibility with neovin but i have to admit i don't care that much i need to feel 90% vi me so i don't curse but what's more important than getting the other 10% to me is it's something new i think this is where we now fundamentally break off from each other for me that last 10% is is what really makes me excited i really really enjoy it i mean that's i mean we wouldn't have been making a a realtime renderer in all of this for for no reason right it it wouldn't make any sense we wouldn't have done all this and so i absolutely just i i think maybe i'm a little crazy sure sure reasonable but for me this is just like what i like i don't know and so i think the value is in the 10% jump lists i absolutely love jump list rainbow parenthesis i don't care about rainbow parentheses that's not i i assume they can support that that's just a plugin right that's rainbow parenthesis is like it doesn't really matter right registers i love love register macros loves them marks absolutely dude marks are very very good but i guess i got harpoon these days so i can i can forego marks for harpoons but i do still use local marks every now and then because it just sometimes is easier having local mark it's more about being hackable at the end of the day i do agree with that if it's really hackable and it's really easy to hack on for me that's the big thing is vim is really easy to hack on it's really easy like they didn't or neovim shall i say it's very very very easy yeah z is not hackable yet so that's like a big problem for me right i mean neovim is so dang easy you need a few lines of code and you can open up a window a few more lines and you can put in anything you want in there it's all searchable i mean that's one thing like neovim you know you pretty much go api. neovim blah blah blah blah blah for it but here neovim sl buff buff set mark name text lines keymap options extens marks virtual text get off said get lines event right get i can get all these things right it's just like right there it's very very very easy get current buffer get current window get current line get tab page get cursor right like it's all just right there and it makes it so easy to be able to do all those do all those things i don't know for me building being able to build things inside my editor is super important because i get to solve so many annoying issues is neo hackable as emx no it's not as hackable as emac there's some things that it's not hackable with like moving the status from bottom to top i believe is not hackable there's some things that are like locked into neovim all mike thank you for the seven months and so you can't do anything like that here are some examples a few years ago i didn't use any autocomplete only vim's file name completion then i tred to language servers and autocomplete and now i can't live without them inlay hints for the first time i saw them in vs code i had to try it out when writing rust ended up writing rust and vs code for a few months purely because of inlay hints then switched back to neovim when inlay hints landed there i think inlay hints in neovim is actually so much better i actually hate vs code's inlay hints where it puts the type within the line whereas like when you're doing like a bunch of what's it called vin puts it on the outside and i really like that because it doesn't move the text i hate when text moves based on those things it just drives me bonkers it drives me bonkers anyways the first time i saw them in vs code i had to try it out when writing rust i ended up writing rust in vss code for a few months purely because of inlay hints that switch back to neil when inlay hints landed there and now i'm convinced inlay hints are a game changer in developer tooling i i i don't use them anymore i i i never really i guess i very rarely need to use them and anytime i need to use anything like that i just do something like k when i need to see what's going on right and i go okay these are the things these are the things that i need is there anything else okay no i don't need those okay you know like i've never really needed that inlay hints effectively inlay hints if you're doing rust you would see like a little you'd see shadow text appear here and be like like you know this thing is a string right it would tell you that this line is producing an iterator of string iter of iter of type equal string or whatever it is right and so you can kind of see that let's see this year i also ditched t-u oh really from my regular setup purely because i wanted to know what's it's like using ghosty so i'm actually in the ghosty discord i'm going to use ghosty uh i'm going to i'm going to okay hashy i'm going to without t-m in the middle i want to try it out to get more performance out of it back in 2017 i flirted with emac oh my goodness i flirted with emac in 2017 too oh i did so much time with emac and doax and all that still think of the ideas i found regular basis and to this day i still go like this leader pf to do a project file search right tell me that's not doom max tell me i'm not do max leader ps to do a file or to do a project search it's like it's ingrained in my head some of those items that they did i actually liked i liked doom max and what i've had to offer so there you go i switched to zed let's see i switched because zed had vim mode and there's something very intriguing intriguing text editing mechanics in it because its value resonates with me because i wanted to try something new do i still use vim yes for some config files or when i want to edit to directly using oil neovim but my main editor for programming is zed there's a lot to learn thank you thoron it's very interesting i don't know i for me i i'm not convinced those i mean i think those things are really cool like watching this i think this is super super cool i liked all of that it's it's definitely more convenient to begin with than macros for sure and maybe it's nicer to use than macros but one nice part about macros is their replayability so when i get done having this and i see another line that i need to do it i can replay that macro and re-execute on it so there's some things that i really like about that because this is just macros that you're running live right this is just a live running macro that's the only difference between multi cursor and and macros is just that they're they're pretty much the same thing anyway pretty interesting pretty interesting he uses mouse cursor to do that no he uses controled you can see command d right here right he highlights this with visual selection and then says command d which finds the next occurrences and then he can do that the jump list and quick fix list are really nice and yeah that i mean so those are the big things that are really hard for me to move is location list quick fix list jump lists those are all super duper for me and this is just macros they're lifel which is i mean generally more convenient i can agree more convenient there's some things that are really hard to do with multic cursors that are really easy to do with macros some things with multic cursors just generally are easier than macros so same same tool though i like it though i like it i like it you're missing out multi cursor is king no no no macros are king multic cursors are more convenient right right multi cursor is nice when you can go above and below the macro change stuff macros you can go quite wild with right i'm sure you could set up a multic cursor ne them i i'm sure there's something that you could do i wouldn't know how to do it it may not be possible multic cursor is like a one-trick pony i would agree with that but multi cursors are super convenient like i'm not a fool multi cursors are very very convenient for me i mean really this whole article comes down to anyways i can't find the spot where he says for him it's about feeling a vimi yeah there we go i don't know the hard part is can you feel vimi without registers marks jump lists location lists quick fix lists i don't know that's like such a core thing i do i don't know be hard it would be interesting i do like it you know one thing i think we could all take away from this is that i love you know there's a reason why he's really amazing as an engineer there's a reason why thorston is like a 100x engineer and you can see it throughout this article can anyone guess what it is not only is he not afraid to try things he has like deep curiosity that makes him not just try it for a moment but try it and get really good at it and then go oh i like these things from it and i don't like these other things and like that is such a such a valuable skill he's clearly handsome af that would be the other thing he does the biggest weakness i see in engineers is the most evident when it comes to working with go which is they open up they start using go and when they start using go they go it doesn't have macros like rust does oh man it doesn't have some types like rust does and they they they try to take go and try to make it into rust and then when they're severely dis dis appointed that it doesn't do it how rust does it they're like this language sucks you could say the same thing about any of those any other languages when you compare them that is the single worst way to use and learn a language it's because you are trying to use the language as if it were rust it's not how does it propose you solve something it could be vastly different than what you're used to and maybe that difference is better maybe it's worse but you will never know unless if you understand how it wants to do something and that's the important part and you can just see this oozing out of this article is that he goes i want to know how it does something and that's why when he talked about embedding neovim he said it would be boring because it is of course it's boring you could just embed neovim into zed but why would you do that you lose the zed you lose the zed thing right now you're just neovim with zed chrome no it's like i want to use zed for the zed purpose and then see if i like it anyway just some thoughts the name it's the primagen