hey we're going to be going over everything that we know so far with xe i invited on lowlevel learning so i hope that you stick around and enjoy it we're going to go deep into the bash scripts they're incredibly interesting so you got to check it out so stay around first off for anyone who doesn't know right now we have llll on the phone commonly referred to as low-level learning which you wanted to just be called lowlevel at one point right yeah i i'm having a bit of an identity crisis with regard to my title but i think love learning will stick for right now so we're we're good we're good okay well let's go to low level learning i want to bring up your youtube really quickly tell everybody to go follow it right here lowle learning does you do all the awesome things on security and some some memes on c's and some various some various like things that have gone wrong in programming and things like that is that is that about right yeah it's anything from software development to software security to you know happenings and cyber security hence the the xz situation okay nice and would you like to what have you done in your security world to so my day job so everyone on on youtube and twitch much smarter than me they actually write the code so what i do instead is i read the code and i look at binaries and source code and i'm like hey this piece of code here is unsecure write a report for it i'm a security researcher right so instead of writing the code i find the bugs in the code and make sure people know that their code can be breakable so yeah so it's a good time all right so yeah so you've been doing this and how long have you been doing it for i've been in the community since 2012 but doing it fulltime since 2016 okay and you can't really talk about your job so yeah basically all of our clients give us like fancy ndas so i can't talk about like spe specifics of what we find but i can say like yeah like i get code i get binaries i look take them apart and and find cool bugs lots of reverse engineering a lot of taking apart stuff oh yeah yeah it's a good time man okay do they at least like give you somebody that also wrote it or do you just like here's a binary bye-bye it depends right sometimes we get the actual source code and like an engineer to talk through but a lot of it is a blackbox red team assessment so it's like hey you get nothing go look at it you know and see see what you can find from an adversarial mindset as opposed to if you had an insight to it it would bias where you would look right cuz the engineer wrote it with a bias but if you come in with no bias you're going to look at places that they didn't even think about right so it's pretty cool okay very very cool awesome okay so you're you're an experienced individual and we are going to let's see hold on let me find someone actually des nots me so good so i know you already have a video on this but i'm going to go over this to begin with this is like the original thread that set off this entire thing right i i'm actually so i assume this this andre's guy didn't really realize the level in which he was kind of releasing about how much crap would happen right afterwards yeah because like github right now last time i checked you can't even you can't even look at the repository right now yep it's completely disabled this one issue just exploded everything they disabled the xz repo they disabled the account of the malicious contributor and also the main maintainer of xz because there's a a rumor and again unsubstantiated rumor that they're all in cahoots with each other right they're working together so they disabled the main maintainer and g's main accounts on github wild dang okay so it's there's a lot of questions here so just to go over it this is how he discovered which is hilarious the way that he discovered it hi and after observing a few odd symptoms around lib lzma which by the way lib lzma we use i believe lz ham or something like that at netflix so it's just a compression algorithm library right that has various i think there's like lz is like the original it's just a bunch of people's names right yeah all right sorry just just just some diplomacy diplomacy classic yeah yeah white wife is currently out we have a property she's renovating my wife does all the physical manual labor she's not general contractor she's also she's also handy and where the term handome comes from is someone that was good with working physically with their hands and so handsome is handome which is they were able to fix things my wife is also handsome uhome handsome wife that's awesome i have a handsome wife yeah i just said that out loud all right anyways flip take that out don't put that in flip my wife is beautiful all right after observing a few odd symptoms around l lib lzma part of the zx or xz package on debian sid installations over the last weeks logins with ssh taking a lot of the cpu and val grind erors i figured out the answer the upstream xz repository and the xz tarballs have been back doored and so then he goes through like how he investigated it what versions 56 and or 560 and 561 here's the tar balls and all that and where it comes down to which is super super interesting and i think you highlighted this in a video by the way i looked at this and i was just like man this is some crazy code right here like how could anyone read this cu for those that don't know you are literally just cutting out sections like 1024 at a time out of a file and then you're also cutting like like this amount of lines out if you don't know for those that don't know head anytime if you had a like if i had a file that's like fu bar baz and i go head one it just prints out the first line so like they're doing some pretty wild stuff like this statement is i could not even follow this at all what's insane is that like the back door the way that it's packaged is it's packaged as a fuzz test case that you're supposed to use brilliant li lzma so it's going to look like garbage but he hid his back door in this fake lzma stream and then this script is cutting it into pieces and extracting the one piece that is the malicious op object it's absolutely genius before at the top of the scpt at the top of the the list the only reason this got found is because a security engineer at microsoft noticed hm ssh is taking half a second more than usual let's go figure out what's going on and then he's like oh i discovered an ap trying to back door open source like absolutely insane it is crazy i i think the biggest thing to take away that i i've never even once thought about is the fact that they back doored in the testing part of it where no no one's going to look no one's going to look at testing code they're you know like where where's the problem well the problem's in the code right so let's look at the code and this one on the other hand takes effectively to summarize it is it overrides the linker on a couple calls and back doors the rsa decode right to where they can backdoor their own i think you mentioned it's something along the lines of being able to grab out just like their public key and go okay this person gets super duper permissions that's the assumption right now right is like people are thinking like okay they're rerouting rsa public decrypt so obviously what they're doing is they're waiting for a known public key and then doing back door functionality but because of how ob fiscated and how complicated the back door is no one really has the full functionality yet it's all a lot of speculation and assumptions so it's going to come out as people begin to re and do more work on it but right now it's very much like okay we know rsa public decrypt is rerouted that's kind of all we know right now bam it and and the and the and the big thing is it's so aus skated right now you have what tens of thousands of hobbyist experts looking at this code m and right now there's still no updated information after like what four days four or so days yeah there there are people on github that are putting out like you know okay i reverse engineered this function i think it does this but there is no holistic write up of like end to end what the back door does because it's that it's that complex which is amazing it is pretty amazing because usually i i would assume a lot of these things they once you know where it's at once you know what's going on it's it's somewhat trivial to get it like starting to unravel it whereas this one they know exactly where to look and they're just like i can't even look at it it's that complex it's like well the genius part is like you know not a lot of people know how compression works right so if you look if you look at a compression library in gidra or ida you're going to see a bunch of nonsense and structures you're not going to really be able to just objectively look at it and see oh i know what that does so then if you take that and you take confiscated features of a back door it looks like the original code you know what i mean so it's like how do you determine that that's the back door feature and that's the the actual compression feature yeah yeah and and compression code is in itself extremely complex as it is so beautiful absolutely beautiful then it eventually figures it out this causes the whole github reo to go go down it's all hidden in test code which is just amazing and it caused an extra slowdown really the only real oopsy daisy was causing the slowdown so if that slowdown would have never happened this back door would have lived on yeah so this is where it kind of begs a really scary question about open source right is like this person the only reason they got caught is because someone observed their code with a slowdown right so the way that it works it searches the memory space of the process for the elf header and checks to see if that elf is the linker and then does that for every elf right so it's basically like ent scanning the process image memory space which is very slow but this guy got caught which is pretty scary right but where else has this person committed code is this person a persona of many personas that are doing the same thing to other code that microsoft researchers aren't looking right so like where else are there binary blobs that are getting linked into public repos it's it's absolutely terrifying and not only that but you can't like this also now just implanted the idea so let's just pretend this guy had a completely novel approach to things and no one else has ever thought about doing it through this route this is now a new vector that has just opened up in that kind of sense where people are going to start doing this which is going to make it even more difficult it makes it more popular but also it's going to put a lot bigger of criticism on binary commits right like i i personally believe that you should never be committing binary code anywhere because for me when i'm using open source software the whole point of it is i should be able to repr produce the binary via the source code like why would i ever as an open source maintainer accept a binary blob now i know that this is a a test file quote unquote so like there's kind of justification for there but you should be able to have the source code that that proves you produce the test file you know what i mean like the idea of a binary blob is odd to me yeah i mean the hard part again hashing or a compression library it's like here's a specific difficult binary to compress and this is why it's better you know i can totally see why because if you try to in code it's literally going to be a bunch of binary symbols in code and so it's like is that any more understandable at the end of the day sure no that's a good point but if you're looking right here they they make it extremely difficult to even replicate it so obviously like if you if you link lzma with like the the the back door version against any binary it's not going to run on every binary right the back door is written to only trigger on those conditions so you're not in a terminal your your argv is sshd you have no debug ld set no ld profile set and lang has to be set so basically it's like specifically targeting so that it can't be debugged and it's running in a server environment on sshd it's really really sophisticated it's pretty amazing yeah you know oh my goodness yeah it's it's it's quite wild so anyway so he they end up figuring it out that there's some there's some basic things that all end up happening and we won't go into all those details quite yet because i think there's a lot more that has just come out in the last couple days but this is the original one i can link out the original one for everyone to go check out here you go for everyone that's wanting to go check that out so this is this is rather impressive right and so for this to to happen it required them to build it required it to be built on the system you couldn't just simply apt install it you had to grab down the tarball and install it is that how it effectively ran yeah so so the commits or the malicious commits were not made to version control they were only put into the release tarballs of the of the xc library right so basically if you have a version of software that depends on liv zma 560 or 561 that was built by a package maintainer through the released t balls you're you're not you're vulnerable you're you're being attacked right but if you went and you went like you know get clone repo tag 560561 you're not going to be attacked because the those tballs are not in the actual version control itself which is kind of weird i think that was done primarily to ob fisc the binary itself and to give the the research community less of a surface to look at but obviously you got caught anyway so okay followup people people love speculation people love it like anytime there's a hack remember like the apex hack everyone's just like we are now getting back doored on everyone's last computer through easy antiche or whatever it was and all that kind of stuff and then everyone then everyone jumps on stuff and and a lot of people get bullied and you know respawn gets just completely crapped on for no reason people are asking about state state sponsored hacking is there any evidence that is this or is that pure just speculation no it's all speculation the only evidence would be the sophistication in someone playing the long game right like literally if you look at the git history of this guy he's been building trust with the zx or sorry xz maintainers since 2021 which is pretty impressive right so he's literally been a regular contributor to xz since 2021 doing not only code commits but like fixing translation errors and then if you look at his commit history within the last couple weeks he's like okay boom boom boom here are my malicious commits right so for someone to play the long game and to be a quote unquote cyber criminal or crypto criminal or whatever is very unlikely versus it's more likely that either a nation state or some bigger you know like ransomware corporation like i forget the name of the one that just got rolled up the one in russia but one of those bigger people that have a lot to lose or a lot to gain and are willing to spend you know the three years of of resources to get somebody on the inside right yeah yeah so whoever it was whoever did it you know regardless if someone's account got hacked to make him start getting these commits all that kind of stuff it seems i guess i mean i guess the other possible answer is that he got hacked at the last minute but was away and didn't look at his account but i feel like that one's the least likely because he probably would have at some point realized well wait a second i'm getting a lot of emails here something seems a little goofy what are all these commits going on here so i i doubt that one so it does seem like it literally is someone who played a very long game which means that there has to be some level of sponsorship right or he's independently you know can be independent of taking this time doesn't have does you i guess has the time to spare on it that's the other possible answer right i don't want to jump to sponsorship is independently playing the long game right like he's just like oh wouldn't it be cool if i could get in and do this crazy thing and then i have my own personal back door but i don't know from like a rational human being standpoint like the the other side is like okay cool and then you go to jail for like 50 years like i i would not take that risk now unless somebody were going to hand me a p a bag with like a million dollars in it then it's like okay well maybe maybe really a million dollars for 50 years i doubt that i live in america where a million dollars is like you know 20 bucks in the 1990s but maybe if you're in a foreign country that's a little more money i don't know okay okay so you plan to go to costa rica right afterwards right there you go little pull john mcafee and then suicide myself okay definitely definitely suicide yourself yeah all right okay so we're gonna kind of skip over this i assume there's been a lot of videos a lot of people have discussed this you have a wonderful video on it which is very concise what was it 6 minutes long it: i got over that that youtube 8 minute mark you know what i mean okay it was beautiful it was absolutely beautiful loved it and so here's the everything we need to know about have you read any of this this i have skimmed i have not read it in depth no okay so i'll just start reading it and we can stop at points whenever you want anything to talk about updating at the speed of light blink once and a word could be gone these nodes are erratic unstable dangerous but that's why they are fun okay so it's going to be maybe even updated as we read please not this is being updated in real time the intent is to make sense of a lot of simultaneous discoveries regarding this this back door last updated 10:30 p.m. est i'm not sure what 10:30 is they don't give a day yeah i'm assuming yesterday but i'm not sure yesterday eve maybe all right so 2021 g t75 gan creates their github account okay so this is in 2021 their first commit is to they make are not to xz but they are deeply suspicious specifically they open a pr in lib archive added airor text to a warning when un tarring with bsd tar this commit does little more than than it says it replaces safe fprint with an unsafe variant potentially introducing another vulnerability the code was merged without any discussion and lives on to this day patched oh interesting yeah yeah like how how big is this is this like nest that's crazy okay so he's sounds like pre-plan like the intention of this account was to cause harm or havoc yeah and it's like maybe this was him testing the waters right like hey if i make a malicious commit how many people are going to know m you know what i mean and it looks like oh yeah looks good to me merge and then he's like okay cool so now i have kind of the green light to begin my long con and not only that but you also have maybe a little bit of credit right oh this guy yeah he committed to what whatever it's called lib something anytime you you already have something with the word lib in front of it which means that you're you're doing pretty good there right li archive right all right 2022 in april 2022 gan submits a patch via a mailing list the patch is irrelevant but the events that follow are a new persona gigar kumar enters and begins pressuring for this patch to be merged ooh ooh soon after gigar kumar begins pressuring lassa colin to add another maintainer to xz in the fallout we learn a little bit about the mental health in open source o that's unfortunate interesting i've heard i've heard i've heard some comments about that effectively the things i've seen is that the xz maintainer was effectively super burnt out and users have been super hostile so standard open source right right and just like completely burning out and just accepting you know like you get to that point where it no longer matters and so anyways three days after sorry like i said before last colin is the one whose account is currently disabled so last colin like the maintainer of xz and gan both are currently suspended on github okay interesting three days after the emails pressuring last colin to add another maintainer jot t75 makes their first commit to xz tests created tests for hardware functions since this commit they became a regular contributor to to xz they are currently the second most active it's unclear exactly when they became trusted in this repository jager kumar is never seen again sunset it another account dennis ns also participates in pressure with a similar name plus number formatted email this account is also never seen outside of xz discussion and both do not have any associated accounts that have been discovered yeah super sussy right so if we're talking about a world of like personas and like this gan may or may not exist maybe he's also just another member of an army that are you know trying to pressure last colin who is notably burnt out and maybe mental health issues right to to do something he would not otherwise do allow gan to contribute code which is insane dang all right glyph i really hope that this causes an industrywide reckoning with the common practice of letting your entire goddamn project rest on the shoulders of one overworked person having a slow mental health chasis without financially or operating operationally supporting them whatso ever i want everyone who has an open source dependency to read this message so there's a message about this so this could be pretty interesting right here so this must be mentioning this is la so this is last all right uh gigar kumar wrote progress will not happen until there is a new maintainer xz for c has sparse commit log two dennis you are better off waiting until new maintainer happens or fork yourself submitting patches here has no purp purpose these days the current maintainer lost interest or doesn't care to maintain anymore it is sad to see for a repo like this so that's like the this must be the precursor for last to yeah effectively gting him right like you don't care about your repo [ __ ] you like you know what i mean like you should get somebody else in here oh come hang out with my cousin gan or whatever like he can help out i know of a perfect fella to it all right i haven't lost interest but my ability to care has been fairly limited mostly due to long-term mental health issues but also due to some other things recently i've work worked off list a bit with gan on xz utils and perhaps he will have a bigger role in the future we'll see it's also good to keep in mind that this is an unpaid hobby project i mean this i mean this right here is just it is devastating how much open source is just hobby projects with people just getting just rinsed from from people who use it and why do that because you care right people who like genuinely give a crap about open source and then guys like this come in and be like you don't care about this repo and it's like okay dude sorry like you caught me i guess whatever anyways i assure you that i know far too well about the problem that not much progress has been made the thought of finding new maintainers has existed for a long time too as the current situation is obviously bad and sad for the project the new xz util stable branch should get released this year with threaded decoder etc and a few alpab beta releases before that perhaps the moment after 54 release would would be a convenient moment to make changes in the list of project maintainers forks are obviously another possibility and i cannot control that if those happen i hope the file format changes are done so that no silly problems occur like using the same id for different things in two projects szip supports xz and keeping its developers eigor pavlov informed about the format changes including new filters is important too dang okay so mentioning just like the difficulty of maintaining an open source project yeah and and trying to come up with like solutions too he's like hey you guys can fork this but like note that that's also like not a you know a fix all that's also hard you have to keep the rest of the community involved with like the changes to the xz spec right so he he gives a crap he's really trying to come up with ways to make this work but getting gas lit by the rest of the community is not helpful yeah and so i i have a slightly hard time believing that the long con involves this guy as well though maybe i mean it would be incredible if that was actually a part of the long con was this entire messaging was just like even even being him being involved is like again conspiratorial and speculation as well i think that's why he got suspended not because they know it's happening it's because like it's a possibility they're trying they're trying to prevent any additional spread of a back door like this if he were involved in this or others yeah i'm sure chat has a bunch of i'm sure a bunch of people have a bunch of things to say about this but we're not going to look at them all right anyways we'll keep going all right 2023 g 75 merges their first commit on january 7th 2003 which gives us a good indication into when they fully gained trust in march the primary contact email in google oss fuzz up is updated to be gas instead of lass colin okay so lass is he he's looking for a way out at this point been doing it for long enough time to kind of back away testing infrastructure that will be used in this exploit is committed despite last colin being attributed as the author for this gan committed it and it was originally written by h jensen in june okay so i don't know this hans jensen f we haven't seen this name get mention yeah so i don't know a ton of the details about this guy they mention it i think later in the article here but yeah the idea is that there's another guy hans jensen that pops up and it's like either gan is hans jensen or they're in cahoots but that he makes his account just to do this poll request okay yeah yeah a hans jenson account was seemingly made specifically to create this poll request there is very little activity before and after they will later push for a compromised version of xz to be included in debut okay so that's all it is it's a sock puppet account likely or something along those lines in in a let's see in july a pr was opened in oss fuzz to disable i funk for fuzzing builds due to the issues introduced by the changes above this appears to be deliberate to mass the malicious changes that will be introduced soon also g75 opened an issue about a warning in clang that while indeed incorrect drew attention to iuns yeah so in gbc there's a function called iuns where effectively you can do operator overloading type things like c++ but in c functions right so you can have multiple implementations of the same function and the use of the ifunk is how they included the malicious crc 64 resolve that is the back door right so g 10 effectively made changes to oss fuzz to ignore iuns so that when he later committed his xz back door it would not be fuzzed by oss fuzz like it wouldn't be caught by the security repo which is insane right like long game talking like he did this well before he made this this is this is march oh july yeah this is in yeah this is in july 2023 so that is what 11 months ago 10 months ago yeah that's a long time this is a long time there this is a this is a long con right here a poll request for google's oss fuzz is opened that changes the url for the project from tuani is that how you say that tuani or xz to tuani or xl oh my goodness xz to .org zxxz i cannot the the dyslexia really kicks in when there's a lot of letters all right is hosted at this address in finland at this hosting company the xz subdomain meanwhile points to github pages this furthers the amount of control ja has over the project a commit containing the final steps required to execute this back door is added to the repository test a few test files and test up let's see updated the two test files okay so you added a bunch of really complex tests and then you make a small update that is the kind of final i guess final stroke in delivering it yeah exactly like i think the first one was the like was the 560 commit and then the second one is a 561 commit that actually fixed broken features in the 560 commit i might be mixing those up but yeah like the the the way that he's obosa this is like no one cares about software testing to begin with but then if i commit binary testing files that i'm using to fuzz lzma and i'm just a security guy like no one's going to check my math they're like okay that's fine here you go good and commit yeah it doesn't even show up like binary files also don't even show up and it's it's effectively impossible to hand eyeball a binary file so a good large compressed lzma you're like oh yeah i guess that's pro i mean it's good it's large yeah yeah i believe you looks big done like looks good to me that is pretty large i will say dang man that is quite the long game on that one yeah hand eyeball okay maybe i didn't say that correctly wow it's i mean this is all very shocking to me because this is such i didn't realize how big this was all right so that's that's currently the information i guess that we know so there's more inclus there's more discovery there's still a lot more holy cow okay i thought this was the end i thought this was the author all right an email is sent to the oss security mailing list back door in upstream xe lib lzma leading to ssh server compromise announcing this discovery and doing its best to explain the exploit chain i was doing some micro benchmarking at the time needed to qus qus the system to reduce noise what is it no no it's ks you're right i'm good are are you messing with me i'm hungry so i said keich but it is ks you're right okay okay i'm also hungry the system to reduce noise saw ss sshd processes we're using a surprising amount of cpu despite immediately failing because of the wrong usernames etc profile d sshd showing lots of cpu time in lib lzma with perf unable to attribute to it to a symbol okay okay got suspicious man that is like the biggest thing right here got suspicious like how crazy is that that you saw some time in a compression library and you're like ah yeah that's probably something bad yeah i need to re-emphasize like how important it is that this guy is like the gigachad that he is right because if not for him profiling sshd cu he noticed it was a little slow he would have like he would have missed a back door that would have gone into every major linux distribution for god knows how long you know what i mean like it's absolutely insane that this guy caught it recalled that i have seen an odd valr val grind complaint in automated testing of postgrad a few weeks earlier after package updates really required a lot of coincidences yeah man a gist has been published with a very good high level technical overview and a what you need to know in addition to the gist the email above the number of analysis attempts have begun okay then a whole bunch of people are all jumping in a sudden push for inclusion request for the vulner able version to be included in debian is opened by hans okay so this is when we start getting the push hans the sock puppet account is now coming in right this request is opened with open the same week hans debian gitlab account was created the account created with a few similar update requests in various low traffic repositories to build credibility after asking for this one okay so he's just trying to look like he's not suspicious at all yeah right a number of other suspicious anonymous name plus number accounts with little former activity also pushed for this inclusion including miso eater 91 and cry gorin 4545 and c gorin 4545s pgp keys was made two days before joining the discussion man yeah so army of bots trying to be like hey this looks legit like i'm not this other guy please include this code into devian you know funny you should say that also convenient to me miso eater 91 very very excited about this specific thing right also seeing this bug extra val grine output causes some failed tests for me looks like a new version will resolve it would like this new version so i can continue work i noticed this last week and almost made a val grind bug glad to see the bug fixed thanks hans and he just pictured this guy he's like in his basement and he has like all of his like different personas he's like oh thanks hans oh thanks miso eater like he's just one dude with like 38 different eer hey right but yeah so these these people are faking like they found bugs in it i think they're actually were bugs in the implementation but so they're like being like oh look let's fix this piece of code that's breaking and then they're just committing fixes to the back door and like osss is like oh good call finding bugs that's great fixing bugs in your back door like i me there's something about that that just has to hurt a little bit the val grind bugs mentioned were introduced by this malicious injection as noted in the email to oss security subsequently the injected code more about that below caused val grind errors and crashes in some configurations due to the stack layout differing from what the back door was expecting these issues were attempted to be worked around in 561 a oh so that must be when they disabled a lot of the like any of the environment variables saying like hey this thing is any form of debugging is that when that kind of stuff came in i'm not sure the major difference is between 560 and 561 i know a lot of additional obis and symbol stripping was done in 561 but in terms of the actual like how it checks the environment i haven't observed that yet okay that's all when all the fixing was happening yeah exactly a lot of fixing a poll request goes to a library by a one password employee is opened asking to upgrade the library to the vulnerable version however it was all unfortunate timing one password reached out by email referring to me to this comment and everything seems to check out a fedora contributor states that ga was pushing for its inclusion in fedora as it contains great new features i mean that does feel like a scam yeah hey yeah that's the thing right and i i i'm hoping that if gigachad at microsoft hadn't caught this the rest of the maintainer community would have been like why is this one guy pushing really hard for an xz update like what's going on with this and then see new features yeah like we made we made we made crc 64 a little faster on intel like all right what are you what are you doing over there why does this seem to be so important right all right gan also attempted to get into ubuntu days before the beta freeze a few hours after all this came out github suspended you know like the funny part is is maybe if less pushing would have happened it might have actually got in yeah you know like just just let the long slow game just keep on going it's so funny that they could play the slow game for multiple years and then right as it got near they couldn't handle the edging any longer and just went sweaty they're just like oh [ __ ] man like we're almost dead we're almost dead boys just let the the actually community do their thing right like if if people saw in fedora that they didn't have the most recent xz they would have pushed for it themselves you know what i mean guys how are we not using cutting edge software like let happen and then it would just happen but this one guy like couldn't handle the fact that his baby wasn't being included everywhere he got caught man that is so wild oh i'm gonna see chat do you have any do you have any insight that we're missing by the way right now chat i i like to i like to let you guys have a chance to say anything because all right so there's that everything you need to know oh your oh that's the one i'm reading any insight anything that we need to know any binaries you want me to run l take get out here people love to say l take because they just want to see me lose it they're just like oh would you say lte sky blue lte [ __ ] you all right okay every time they know they know they'll trigger me all right all right so after a few hours this came out github suspended g's 75 account thanks they also banned the repository meaning people can no longer audit the changes that made yeah that i mean that was unfortunate immensely helpful gith they also suspended last colins account which is a completely disg i mean i don't i don't actually agree with it being completely disgraceful right this is obviously a very long play and if you could trust no like this is like the dark forest for those that haven't read the three body problems sorry like it's just better to blow just to to to destroy everything than to wait for the answers to come out and so this feels like a reasonable response the most trustworthy thing open source software the trust has been violated so therefore violate all the trust temporarily to figure out what the hell is going on so again unfortunate if if mr collins is having like mental health issues or is burnt out but like unfortunately i think the right answer is to like for right now disable his account but i i do agree that taking the repost off of github felt counterintuitive because like while you don't want it to spread any further you also do want to leave it out for the research community to figure out what's going on with it and it made it very difficult for even me like to find the right version that that has the back door right luckily the way back machine like archived did but still oh really okay nice you got the way back way back machine helped you that's pretty cool it is i mean for me the kind of the surprising part is is that this obviously exploded it was a very high visible thing and so i think even just like a warning or some sort of banner or anything like a disabling any further changes to the you know to the project you know any sort of notification will probably been a lot more meaningful to github than suspending it rme someone in your chat just put a link to a proof of concept i'm going to go see if i can find that you can keep doing your thing i just want to see if this is legit or not okay am i about to get back doored maybe here we go here we go boys okay interesting okay did someone finally figure this out looks like if this is real this has like the implementation to use the back door it's called xy bot yeah i'm not i'm not fallen for this one where's the exe i i made some small some small commits with some features don't mind these binary test files just run this code it's fine just run itude blasting at the back door why is there code okay yeah i i i'll let you look at that but i'm going to keep it yeah you can run that later i don't want to run anything right now i'm not i'm not set up to be a security researcher i will just literally own my system and that is it nice all right let's see last has begun reverting changes introduced by g including one that added a sneaky period to disable the sandbox they they also added a published fact and began to explain the situation okay cool so again it doesn't look like it's probably targeted okay so created this one released tarballs contain that one anything i assume this is all everything we know let see only i have access to the main tani org website get tani org repos related gan only had access to things host on github including xc okay so that's how he got kind of got that subdomain going as cuz that was on github okay y okay yeah i got ads for swedish nsa coincidence someone's getting ads right now on twitch for swedish intelligence agency what hold on swedish nsa let's look that [ __ ] up swedish security service the trip s wow look at that wow that's pretty cool all right anyways osint various people have reached out to me regarding the discoveries about the identity of ga some of this has been incorporated into the timeline but other stuff is timeless so i'm going to put it here irc i just received an email that clarified a few points and provided new insight into the situation gan was present on the the irc channel nice on libra chat a who is revealed their connecting ip and activity oh dang just dropping ips right now running an end map on the ip shows a lot of open ports which probably indicates a proxy hosting provider or something of that sort the ip is from singapore further research shows that the ip belongs to w witopia witopia witopia vpn so it's not entirely indicative of a region given the time zone however i feel like proximity becomes plausible okay interesting it's getting deeper important notes on linkedin nice i've received a few emails alerting me to linkedin of somebody named oh man poor poor people who have this name today sucks dude this is like being the devon of security right now just totally sucks to be that guy i woke up and twitter hated me they're bio boast of large scale vulnerability management oo ooh they claim to live in california is this our man the commits of g 75's github are set to plus 800 which would not indicate presence in california utc 800 would utc 800 would be in california most of the commits were made between utc 12 and 17 which is awfully early for california in my opinion there is no sufficient evidence that the linkedin being discussed is our man is our man i think identity theft is more likely but of course i'm open to more evidence o yeah that's actually kind of interesting pick somebody that already has a well-known like credibility sure i mean okay so you're saying like identity theft someone stole their account and gan on linkedin is real cuz i was saying like why would homie make a false persona and then also make a linkedin that's them you know what i mean like i didn't not check that math but yeah maybe maybe someone like we were saying before like stole their account and made those commits at the very end well maybe not even steal their account just make an account that's named g 1075 right and then it just happens to share a name with a large scale vulnerability management person right so if someone starts trying to check and find this person there's this really nice high cred linkedin profile one could say that has a bunch of information and you know again if we're playing the long game which it sounds like they are i mean they're it seems like they're trying to until the end and you know that would be a very good way to kind of establish kind of like incidental credibility yeah 100% all right discoveries in the git logs i received an email from minu wing who investigated the git log and found one instance where g's username was different oh oo okay oh look at that gia chong chong ah okay okay they found this particularly interesting as chong is a new information i've now learned from another source that chong isn't mandarin it's cantones this source theorized that chong is a variant of the surname as yong matches i'm i'm kind of out of my waters here i'm out of my death chines yeah i mean mandarin's easy version of cantonese too so cantones is even harder a canones romanization standard and chung is pretty common in hong kong as an official surname roman romanization a third source has alerted me that ga is mandrin as canton's rarely use j and especially not ji the tan last name is possible in mandarin but is most common for the hokan chinese dialect pronunciation of the character that cantony chan mandarin chen oh i see what they're saying okay yeah so they're asserting that like that name isn't a real name right like it's someone who wanted to pretend they were chinese but when they put those syllables together like that that name is not plausible in chinese yes it's both mandarin and cantonese so it it appears confusing at le to the onlook or to a layman like me i would have no idea blob it's like that looks fine but it's like if know you're talking about it's like oh that ain't corre this pretty much a binary attack for me you got me like i would have no idea love it all right then there's a bunch of footnotes so joey appreciate that here i'm gonna put a little i'll put a little joey a little joey link for hacky dm oh my goodness why can't i press enter oh it's because it's joey and adding hacky term oh that's kind of funny there you go so there you go people can to have non-standard name yeah yeah people can have non-standard name but i assume oh nice i'm the 400th i'm 420,000 visitor let's go so close to 4269 i know i so so close i know i was only off by just a like a hundred i'm receiving $16.28 per week from seven patrons my goal is $20 chat get in there and gift that man cash money he's literally doing the lord's work yeah here you go if anyone want would like to give a give a payout here you go what a what a what a very nice $5 a month a month yes five $5 all right so there's one other note that we did oh by the way so this will be something that will probably be looked at later we'll probably come out as whether it's true or not or what i'm very curious about that but it looks like right here is that it looks like it's being done his rout is that is that the exploit that we're seeing right here oh i'm trying to watch what's happening watch point i mean i think that first line is them watching open ssl getting hooked but what the rest i can't really tell the ssh is on i assume that's user 1 2 3 4 and then does something an id redirected to temp z and then temp xz is now set to user zero oh you know what no i think what happening is they said recently that the back door not only is a credential back door but it gives the the person using the back door rce like a shell onto your computer so that may be them auditing the child shell that's forked off from sshd and showing you that it has root or something because if you're running sshd sshd runs as root and then spawns off the child process as the user but if you have code execution at that top level you are root right so maybe they're showing that yeah yeah okay so that would be the that potentially what it is because yeah at least i'm seeing right here that it we're rooting boys we're rooting hard right now again not going to execute this on my computer not set i'm not set up for that i don't have a vm i don't got anything oh cool kids are doing it man come on double rooting just come on just just come on just execute the code just tell me your name just tell me your real name hey i appreciate you being on here and taking the time to go over this i think there was one more item we could have looked at i'm not sure if it's any any real updating i think it's just simply about the burnout more about like yeah about open sourcing right here yeah and so this was published a day later on saturday mh and so this has to do with i think open sourcing and just kind of like the struggles yeah yeah you can see it it's i'm sorry about your mental health issues okay so this is so this is like them pressing lass effectively to do all the dirty work un on kn l poor guy dude like stressed out open source maintainer and now he's like the you know the the lynch pin in a nation state supply chain operation like absolutely crazy it is oh cool right up on the bash stage update so there is a bass a bash one maybe yeah so the two intermediate stages were they were modifying the make file to force the inclusion of one of those lzma blobs so there's like a a bat stage that creates the make file and then the make file rips apart that other lzma blob to expose the back door and then includes that in the the build process okay okay and this guy breaks down like how that all works because again like everything else in this whole system it's all very heavily obis skated all right do you want to you want to go over this do you have time sure have time yeah yeah yeah okay okay yesterday andre's fond fond emailed this one okay so we saw this one this is about the back door so before we begin we have a few notes first of all there are two versions of xz lib lzma affected 560 and 561 differences between them are minor this one contains some nice val grind fixes right yeah some real good bug fixes for that back door yeah just the features are unbelievable differences between them are minor but they do but do exist i'll try to cover them both secondly the bash parts split into three four stages of interest which i have named stage zero that's the start of the code in m4 build to host m4 and stage two i'll touch on potentially stage three as well though i don't think it's fully materialized yet please also note that ausc encrypted stages and later binary back door are hidden in two test files yeah man this is such an impressive oh look good large compressed we actually looked at good large compress we love that one yeah we love that one it's aply named nicely as pointed out by andre's you know is so brilliant is hiding the backd door code in legitimate test code like this could actually be legitimate actual test code right here that's not even you know that's actually showing that things are being compressed well and then a section of it you pull out and combine with some other testing file that actually becomes the that i mean crazy is that in that second file the back door is compressed with lzma so to extract it you have to use back door lzma to open it up to build lzma you know what i mean like it's just like this meta brain explosion of how they included this in the in the build process who is flip flip is prime's dad yeah flip is my editor edits all my videos he's been so so little quick quick story about flip is that him and i started playing fortnite together a long time ago and he you know he was he was a young he was a young fell didn't didn't have any idea what he wanted to do with his life and i bamboozled him into being my editor and i promised him 50% of whatever i make in youtube ads wow i didn't know that's wholesome as hell man that's great yeah and so i don't know if you saw this but i just crossed a 100 million views on youtube combined let's go very and so flip started off where we made where it took us months to get to just even mti monetizing and if you don't know mon if you can monetize it means you're making pennies a day right that's what monetizing means is now you you are officially allowed to make your one cent i think the first day i got monetized on youtube i made 64 cents like dude damn don't cry flip don't cry don't cry flip anyways big big fan of flip and so if i ever do a sponsored ad read also on any youtube we split that too split that 5050 you know he was he was there for years when we made nothing so now it's paying off dude that's great i love to hear that for him that's really cool yeah and so what a what a great yeah i i just think it's a great story personally i don't know if you guys think it's a great story i think it's a great story because it's cool all right stage zero so as so i forgot where we were my kid came in just let me know that one of the other kids is trying to watch tv and causing all sorts of ruckus so i know kids being a tattletail kids being a tattletail anyways as pointed out by andre's things start in build build the host m4 file here are the relevant pieces of code again i like like tr tr is wild like i'm trying to even read this tr we're replacing we're replacing tabs with spaces spaces with tabs dashes with underscores and and underscores with dashes yeah it's a it's a cluster it just like how would you even read like this is a looking at it like all yeah if you saw this in a commit it's like yeah it's fine like i wouldn't know what to do with this i would just be like yeah i'm sure you committed this for a reason i'm sure so okay go ahead but it's test code so looks good to me crazy test code right i don't i i really hope i don't have to debug this later can you put a comment as as why yeah well no so this one is actually in the in the build process this one hooks how configure generates the make file but even it's so it's so deep in the process it's like i as long as it builds still i trust you you know what i mean and again going back to the trust issue with open source software like i trust that this commit works okay that's fine yeah and it pass all the b you know all everything check marks right so all right this code which i believe is run somewhere during the build process extract stage one script here's an overview bites from test files bad 3 corrupt lzma 2 xz are read from the file and outputed to a standard output sl input of the next step this chain of steps is pretty typical throughout the whole process every everything let's see after everything is read a new line is added as well okay so that would be like how the malicious attacker is able to tell each kind of like little section is that you wait for you hit that new line and then you call it a call it a day the second step is to run tr translate as in map characters to other characters or substitute characters to target characters which basically changes selected characters or bite values to other characters or other bite values let's work through a few features explained echo bash to tr okay so we kind of did this this would make yeah there you go as you can see a is replaced with one b's replaced with two and then three and four aren't used and you can see ba is 21 so there you go tr pretty pretty great utility by the way solved one of the advent of code with tr oh no way that's pretty cool tr tr is great stuff last year was hard as hell by the way just little just putting that out there i used to be on liners now it's just pain i don't know about this whole one lineer was like six years ago it was the int computer for the apollo something or whatever it was and that was extremely difficult called yeah i gave up after some time all right i i always do always give up hashtag let's see instead of characters we can specify ranges of characters in our initial example we could do ab to a- d oh okay okay i actually didn't know that okay cool similarly instead of specifying characters we can specify their asky codes in octal so okay okay now we're getting more confusing now i'm completely l much harder to read all right very it is much harder this can also be mixed eg would create a set of abc d then numbers 1- n then letters octal 111 jk ln m octal code 115 oh wow okay so you can you can really that's crazy i did not know that today we learned about tr this is true both for the input characters and the target characters oh crazy all right so going back to the code we have this which just replac the space and tabs right space tabs dashes and underscore so this all looks very like i guess i wouldn't be very surprised about this which does the following in the bites let's see let's see replaces tabs with spaces white space with tabs dashes with underscores and underscores with dashes this actually uncorrupt the bad corrupted which forms a proper xz stream again oh my god okay i didn't realize that that's amazing so it's supposed to be a file used to fuzz lzma and it's corrupted quote unquote right that's on purpose but with that that one line of bash it uncorrupt it so now it's a real lzma stream i'm a real boy and then you can you can decompress it and out pops a real thing oh that is so clever and because because it's such a it's it's such like a standard thing like i wouldn't really bat an eye at this because nothing in this looks harmful right exactly it looks like oh okay they're just like changing a couple characters right like it looks like you're base 64 slurl decoding right you're adding those like that little extra transform right at the end to help it do url encoding oh man okay i would have not seen this the last step this is why i'm not a security researcher in this last step of the stage the fixed xz bite stream is extracted with errors being ignored the stream seems to be truncated but that doesn't matter as the whole meaningful output has already been written out the outcome of this is stage one script which is promptly executed okay so this is where the this is where the the chunking begins there's a little picture down here which i think i understand now yep all right in let's see in andre's email that's that's the bash that starts with hello which is pretty short so let's pres presented here differences between 50 and 5 or 560 and 561 marked with black background a few binary bytes here but as the comment let's see but that are ignored i don't get this why why have the same thing over and over again yeah again i think maybe it's to make it look like a proper fuzzing file right like in fuzzing you have a lot of just repetition to make the the parsers confused so he may have hit it like that in the lzma compression so that when it got decompressed it it looked like it was like a repetition but it actually mattered for the script yeah but why you do that same line six times i'm not sure obviously they're doing this so that you're you're targeting linux exclusively but why do it five times i couldn't tell you that's very odd so i would say are you ready for this one because this line looks so obvious why do this because this is a bash script right so we shouldn't you shouldn't even worry about having to execute the same thing a bunch of times but this right here look at that threw in a little extra you may not be able to see the color difference it's kind of hard to see the color difference but now adds a little bit of tr ranges right here looks like some some something sus went down right here and and then xz decompresses it which is a crazy part like at the very end of that and pipe it into xz like your back dooring xz it's crazy and then pipe it into a bin sh yep like that okay so that probably should have been like a big warning right here is that sh is being executed after all of this right right well i mean no one even got to this part though right this was like you know in that they hit right here and they're just like oh yeah oh yeah that's right it was in so like you didn't even you would have to know this that the lz blob was corrupted know how to uncorrupt it then decompress it then you see this so no one ever got here until obviously it was found right but yeah still insane okay oh man that's wild and then when they saw this it may not be obvious what's happening right this would have been the the winner right there all right the first difference are random bites in the comments are the second line right here i'm not sure if these differences are meaningful in any way but wanted to note that the check whether the script is running on linux was added in 561 and the fact that it's repeated five times makes it's pretty funny was someone like oops i forgot this last time and it caused issues better put it five times as an atonement yeah like what okay so we're everyone's equally confused at why five times if gan could clarify this one that'd be fantastic yeah let let us know in the comments please yeah yeah please we'll start we'll get back to the renaming differences later but for now let's switch to stage two extraction code which is that huge export i which is that big weird head thing oh even more interesting that it throws it on an export so you don't even like you may not even see it that's now just a part of something that can be executed at some point right because i assume you're oh later at eval eyes see that in that pipe after the l make and pressed right there hold i'm not even seeing it hold on hold on this it might take me a moment no test right there right there no up up one to the right ev oh oh but so it's like it exports that output into the environment and then runs that the output of that as bash you know what i mean okay gosh i'm too stupid for this all right the first let's see the the first difference oh oh look at this the second one is also decompressed good large compression lzma and piped as input to this one to eval ey jesus yeah okay so it is like okay so that's that oh wow that's is very very very smart i let's see i'm not sure okay i understand it now so the the the actual attack script was in good large compressed yep and it was it was hidden in the bad code which had which contained failing decompression and this was produced out by the failing code which actually then used the good code hidden in pl site and chopped up to get it out right to get out the back door which is then injected to the build process which is the next stage i'll talk about it's wild dude like one sophisticated back doors ever all right to check whether the script is running on linux was added in 561 in the fact that it's repeated 5 oh yeah we already read that we'll get back to the let's see we'll get back to the remaining differences later but for now let's switch to stage two extraction code which is a huge export ey line with lots of heads as previously let's go step by step export i at the beginning is basically just a function definition it's being invoked in step three as well as stage two so we'll get to it in a second let's see the let's see the first actual step in the extraction process of stage two is the decompression decompression of the good large compression lzma file to the standard output this is this as previously as previously as previously states uh starts a chain of outputs of one step being used as inputs to the next okay so this is where the yeah okay so we assessed it correctly it's actually it actually is the problem now we get to the i function invocation eval i this function is basically a chain of head calls that either output the next end bytes or skip ignore the next end bytes at the very beginning we have something like this okay so grabs the first two to the 10 outputs it the c 2 to the 10 option tells head to read the output only to the next 10 24 bytes oh the- c doesn't consume everything it only reads some of it is that what happens from the incoming data stream oh note that the plus there are let's see is ignored but it doesn't do anything unlike tail however since the output is redirected in this case to devnull what we effectively get is skip the next okay very clever extremely clever yeah that's amazing head is skipping okay i didn't even know that about head i didn't know you could i i didn't know that if you had a stream you could skip it for a bit of time so he he wrote like a file parser like a file carver in bash using the head flag nuances that's insane bad cop right now is just loving this yes exactly this is a good moment to note that if we look at the first 1024 bytes in the uncompressed data stream from a good large compressed lzm file it's basically the a character repeated 10 24 times yep to add a bit of foreshadowing after the first two to the 10 characters there is some binary data the next head call looks almost identical with a different length yep grab the next you know to the 11 out note that in this case the output is not ignored it will actually be passed to the next step as input this pattern repeats 1024 bytes are ignored then 280 bytes are outputed 1024 bytes ignore 280 output and so on until we get to the very end of the file we're only 724 bytes in this one or three or 939 bytes sorry this where i get really hard to read in 561 are outputting okay amazing yeah amazing and the visualization is honestly the best right here yes so the the the gray bars are a's mh and the data is all in here so it just puts it all together yeah this is a an entropy graph so when you're doing binary analysis you can kind of see like what's going on in a binary by the entropy of the data right so when the colors are the same the entropy is low so it's all the same data so they effectively take all those bytes that are the same using the 1024 carve those out and then just leave the high entropy binary data and that gets you the final like blob it's sick that makes a ton of sense okay so that's a super cool tool in the next step tail das c this big number the initial portion of the data what is that 2 to the 15 the initial portion of the data is discarded spoiler it hides the binary back door which is extracted in the next stage so it's not needed now in 560 that would be the first 31264 bytes and in 561 that's two one oh gosh i can't read that anymore you get it the off by one difference is because of tail uh- c plus n means start outputting from bite n and not ignore the first nend bytes had to do a quick bug fix all right nice step five revisits the tr command which in this case is used a very simple substitution cipher with key bite value mappings being different in 560 and 561 okay so they just literally just cesar ciper this yeah exactly like it's kind of the same thing as stage one just like make all the parts correct so that the you know it it's actually a binary now it's not a lzma stream okay so yeah even if you had that even if you had it from stage four or a step four it wouldn't actually work until you do this next one because this is the one that actually wow this is like really trying to cover your tracks yes exactly in the last step of the decipher data is decompressed and let's see and the resulting stage two is is promptly executed all right so stage two is the infected text file attached by andrees in the original email that's how 560 version by the way there's a lot going on in this bash script as this is where the actual compilation process modification happens from the perspective of obfuscation analysis there are three in interesting fragments to this script two of which appear only in 561 version so let's start with them as they are let's see as they are all also simpler wow sorry give me a break here can you tell me a quick story when my wife and i were in college we went to spain my job was to buy the train tickets to go from barcelona where we were to the airport we were going to leave from i didn't do that i bought the plane tickets for the wrong day so we or the train tickets rather so we had to rent a car when we were like 19 with no money and drive across the country of spain to make a 6 a.m. flight the next day we we weren't even like engaged then we were just boyfriend girlfriend and the fact that we're stool together like is amazing to me to this day yeah that that's wife material right there puts up with you in a car all night in a foreign country manual neither of us drove manual like it was a good time it was fun the spain drive on left or right hand side of the road the right side thank god oh my god man disaster it is so hard like what i found is the left hand side is not that hard the left hand side but it's that all the signs are different and there's this like cs lewis quote about seeing something different for the first time means you can't even see it like you don't even have the ability to visually process it so when i was driving around in the uk i was like dude i can't even see a stop sign like i don't even see it cuz it's not the shape i'm used to it's like my brain just erases the signs as they come flying by it was so difficult my i would be so nervous in the uk if i make a left turn that i would turn into the wrong lane i would like make a left into the right yeah yeah yeah it was very hard because you're trying to like you're trying to make that like you know like it just it just works out way different you're doing this spatial orientation in your head about like what lane is correct and then you're just crash into the people yeah i would i would kill a lot of people it would not be good the struggle is real all right sorry i need i needed a quick break because when i read too many numbers and letters it you know i kind of it's like i get momentum into my visual problem and so now i've just demed myself hopefully you flush that brain cash you're all you're all ready to roll i'm ready to roll all right so let's look at fragment one all right so vss equals we do like a grip i don't even know what those options are yeah oh i know what o is o specifically captures a group yeah o is only a is for all for binary files b i don't know i think r is recursive no capital r is recursive i don't know what lowercase r is yeah i don't know any of these things anyways okay and so we're apparently supposed to do tiy bang colore w oh my god it's bro af chat i just realized that's funny gp bro bro af dude this man is bro af bro let's go dude just giga dude this this whole thing is just giga chatted from the beginning to the end on the good and the evil side like the evil guys are like gigachad in their design but the the good side is a guy who noticed a half second perf difference and that's a sage and they caught it like it's [ __ ] it's amazing this is all so good all right so we have some if statements i don't like i don't even know what this means does not equal x then it leaves so it's doing a lot of it's doing a lot of stuff i'm just going to have him explain this because this is yeah yeah i can explain this so this is actually what andre's found in the the li oss article or sorry the oss security article this is checking to make sure that the compiler you're using is gcc that one of the expressions evaluates to yes and that you're doing this on x86 64 linux i don't know how we figured that out from here but i saw that the x patterns the x variable patterns is how he figured that out basically this is doing targeting yeah okay sorry i was about to say because this right here grabs something out and then this string con constructs x plus whatever it grabbed out yeah if it doesn't equal x that means we're on something that must have been able to grab whatever that whatever this was produced that must have grabb the problem so that's how this person knows that we've goofed up let's exactly just making sure that we're on the right system we're not trying to like compile this back door that was hard compiled for ex6 on like arm or something wow yeah all right so there's a lot of stuff in here we'll let this all insane yeah we'll let someone explain it to me because i mean it's not even indented it's like it's already expert mode bash let alone with no indents right minify bash yeah it's good let's see if these two fragments are pretty much identical so let's handle them both at the same time here's what they do oh a little min twa here first of all they try to find grep brf two files in test files directory which contain the following bites okay note that what's actually outputed by grep in this case has the following format file name colon offset colon signature for example bro fxy has this okay if such a file is found the offset for each file is extracted cut this which takes the second field assuming colon is the field delimiter and the first offset plus seven and saves as the start the second offset from the second file is saved as end wow this is getting so intricate once the script has a start and an end offset it carves out the part of the file that had the first signature i trust you article guy like i i'm lost in the bash lost in the i know this one because i have something called catter i think is what it's called and it's just cat with a range so i can provide a range and you tail the beginning so it goes all the way to the beginning and then passes from the end to the beginning of what you want and then head will only read the first so many characters to the end so you effectively do ranged slice out of the file i call the c cool yeah okay so this is a good one and the follow follows is the first the subst oh my goodness and what follows is first the substitution cipher using okay 560 so here's that crazy cipher and then decompressing the data for it to be promptly executed oh yeah because it evals it y dang note that in either of the investigation tar archives 560 and 561 there were any files with the with any of the signatures this whole thing basically looks like an extension patching system that would allow adding future scripts to be run in the context of stage two nice an extensible hack so just in case you need to add some patch it live you could do this pretty easily through extra add some more binary files that match a certain pattern it'll get compiled into future versions that is insane oh my god dude bros out there making hackable npm right now literally his own personal package manager for the globe can you imagine oh dude oh man oh man his hacks would get so confusing though because then he'd have to have like versioned binaries depending on what version of xz you have yeah right right right he's about to have version imagine a a code review on this guy's team you didn't use the tr right here you got to use this range like oh dude i i'm lost oh man without having to modify the original payload carrying test files which makes sense as modifying a bad and good file test files over and over again is pretty suspicious yeah this is super well thought through so the plan seemed to be just add new test files instead which would have been picked up deciphered and executed this is so smart that man like this is truly a i mean they really had to think about this for an extended period of time of how they're going to do it plus adding this like they not only were they going to put in a backd door but they had plans to be able to just even do more and more and more which is like this is such a wellth thought through yeah and it really begins to b the question like are we sure it's one guy or is this an organization of people that are thinking through like how do we maintain this system for years right like how would you do it oh make a patchable bash extension system like this right cu one guy like why would one guy engineer this you know what i mean it's just it's insane yeah yeah i'd be very i'd be very skeptical if one person did it all because it is exceptionally difficult work here especially the bash as pointed out by andre's in the original email at some some point a a and. o file is extracted and weaved into the compilation linking process the following code is responsible for that again differences between versions marked with black background the 8192 was highlighted it's very hard to see there you go okay so there's a little bit of little little bit of extra so something else happened here i'm not really sure what we're looking at the differences between versions boil down to the size of the compressed but somewhat mangled payload that's 8879 92 in 560 and 8866 4 in 561 and one value change in the ox script to which will get in a second okay man you should have had a more extensible packing system it's too obvious now i mean i would have caught that one oh yeah obviously easy as in all previous cases the extraction process is a chain of commands where the output of one command is the input of the next furthermore actually some steps are identical at stage one which which makes sense since as i've mentioned the binary payload resides in the previously ignored part of the good file data so let's take a look the first step is identical to step two in stage one the test files good large compressed lzma file is being extracted with xc second step is to turn identical as stage or step three in stage one that was a whole lot of heads function yep okay we remember that and here is where things diverge first of all the previous output gets mangled with the said command lc lc all c said what is this map this okay so this is a lower lower eye fight when i fighting kirby so it's match the first character of anything put that into a match group reput that match group and then put a new line and then do it for everything so line from parentheses and then take it out of them a new line here here oh my goodness i am not in there we go i can go like this test it's pretty straightforward okay here we go if i take that i go like this s so you do a little fight in oneeyed kirby right here so this is a match group it just matches the first character slash one rep puts out that one and then it is sln at the end which for f is slr and then we did a g at the end so it just puts it all into one line oh i see okay got it yeah okay what this does is actually putting oh i guess great yeah what this actually does is putting a new line character after each bite with the exception of the new line character itself so what we end up with on the output is a bite per line situation yes there is a lot of mixing text and binary approaches to files in here this is actually needed for the next step okay very crazy so just feeding one bite at a time here the next step is an o script man this is so crazy a that's a simple scripting language for text processing simple is a very unique word choice here yes which does as mac pointed out for me rc 4ish description of the input stream here's the pried version of the script okay i can't read that are you a kn person no no but i'm just going to trust that it's rc4 like a stream cipher cool all right okay yeah yeah creating the stream cipher key skipping this one doing all that you can kind of see this i know that begin means this is the this is like the processing this is like you get a chance to do some stuff the initialization part this is the actual thing that runs and then you can have an end at the end how r works you create using the cipher key the lookup table for the replacement and then like when it runs you just do an x for ciper on that lookup table right so that's rc4 boom okay and look at this you can even see the exor right here they're talking about it yep okay cool thank you for that after the input has been decrypted it gets decompressed xz dc single stream and then the btes from n0 to w 86 kb are being carved out using the same usual head tricks and saved as an lib lzma la cc64 fast o which is the binary final binary back door so they even se se caesar cipher not caesar cipher just replacement ciphered even their output if someone were to discover it yeah it would look like a bunch of nonsense and they did it even to the entire thing to create this o file yep wow and then it does all this awesome summary someone put a lot of effort into this pretty innocent looking and decently let see and decently hidden from binary test files used to store payloads to carving out substitution ciphers and an rc4 variant implemented in a all done with just standard command line tools and all this in sta three stages of execution and with an extension system to future proof things and not have to change the binary test files again i can't help but to wonder as i'm sure the rest of our security community if this was found by accident how many things still remain undiscovered yeah yeah yeah yeah and that's kind of like the scarest part about this whole thing right is like you think about this you found that it was found on accident it was committed fairly recently how many other instances like this have gone on in the past where have people like this committed code like for example i think there is a speculation that gan had also committed squash ofest which is a compressed at rest like file system right so like did he make similar contributions to test files at back door squash ofest for example right so it it bs this really scary question about like the current state of open source like how how open source is open source man yeah and the worst part is is that it's so aus skated i mean my favorite part is you know all the ai bros right now are just like ai could have caught this i don't think ai could have caught this no doubt doubt like this is just so clever yeah dang all right there's a lot more summaries oh jonathan blow talked about this before his discovered that open source was vulnerable to this kind of attack yeah i mean i think everybody knew this kind of attack could happen with open source that a malicious character was able to somehow get in code i'm just surprised that it's this i mean this is like this feels you know just because i'm ignorant in the security world if you will mr low-level learning due to me being so ignorant this feels like it's from like the terminator series it's so you know it's like so it feels so clever that it's like ah someone from the future wrote this yeah i mean that's kind of the thing is people always speculated that you could attack open source but no one really knew how right because you know the nature of open source that it's open source like okay just go read the code but this is like the first instance where someone has proved like oh yeah dude if you just figure out a way to incorporate a binary file into the build process and offis skate it with the right this and that that no one's going to look at you could easily do this so it it's proven that it's possible and it's proven that it may have happened in the past and it maybe december got caught so truly truly scary times hold on people are sending me a video on this one yeah i mean the thing is is that we all knew the basics which was that open source's biggest vulnerability was that a that a good actor got hacked and wasn't able to respond in time for someone to be able to publish out like say a malicious npm script or some way in which people really live at the at like the edge right right which is which is very unusual whereas this on the other hand this isn't this isn't at the edge this is a multi-year plan yeah so which i think is which is way way more wild in before github banss tr no i mean tr is just such a needed script you i mean i've used tr what feels like hundreds of times anyways okay well hey thanks for joining me on this one thanks for sheding some light on a lot of the a lot of the stuffs thanks for having me i had a i had a blast talking about this i think this stuff is so interesting you know like i said before the the scary question is where else has this happened and while that question is scary and is now being asked i think it's also cool that we're we're looking right like people are actively probably scouring resources or repositories for binary blobs to see if other stuff has happened so if they're out there they're going to get caught you know cuz this guy did so am man yeah well yeah i mean it's the perfect storm right it's the perfect storm bash cop look bad cop i was just mentioned to you look at look at all of this bad cop i mean that was a cover your eyes for a quick second look at how beautiful this is just bash everywhere i mean i i i don't want you to i don't want you to get too hot and bothered by all this but i mean they're bashing they're bashing hard right now brings a tear to my eye it's just a a tear to my code review i love o i know is o the lord's bash is that what i'm hearing i'm never i'm not good at a i'm okay at said and i'm only okay at said because of vim because everything in vim is like if you if you can do it in vim it can be directly transferable to said effectively there's like a couple things that don't work but it pretty much work so if you ever want to do that do the highlighting so you can see it happen and then you can kind of like experiment with it i usually get my said commands correct in vim and then just copy paste them over into said that's cool yeah because i can i can watch go one at a time nice yeah little little fun little fun fact you know all right hey thanks here where can we find you youtube.com clearning that's me i also do stream on twitch twitch.tv/ larning yeah that's that's about it kind of just hanging out doing that stuff yeah man all right let me twitter as well let me yeah you're you're low-level tweeting on twitter right low tweets twitter.com lowl because l learning is too long for some reason but yeah man let let me make sure i linked the right person there we go awesome hell yeah all right and then i i i had the youtube up earlier oh hey just in case chat just needed to see this one more time just in case feel like getting punched in the dick i absolutely love it the feeling of being punched in the dick is definitely a vibe i want to keep for this whole all right now that we got that done if you don't know that one that one is a great scene where it says getting punched in the dick and he's the guy's like that's definitely the vibe we're going for in this video game all right it's tarov if you've never played tarov it's literally getting punched in the dick for i haven't but it looks like a lot like rust where it's just like constant pain no success just yeah it's a game of it's like playing tetris you only play to know you're about to lose there's not actually a victory love it cool all right brother thanks for having me appreciate it appreciate that take care see you