the rust killer i actually haven't watched this this new language is better than rust it is zig when i first heard about the zig programming language i was skeptical why do we need another language in the systems programming space agree we already have c c plus plus rust and carbon he forgot to go when he heard c plus plus by the way a kind of a miss you should always be spitting that crap clean out in theory but i gave it some thought and there actually is a place for this language in the systems programming ecosystem and i think you should love it too in this video by the way this is low level learning if you haven't seen low-level learning great youtuber good friend really appreciate him he's given me a lot of advice well we've worked out quite a bit we've actually been trying to figure out a way to even do a little collab and i think this would be a lot of fun we're gonna talk about what zig is where it fits in the systems programming architecture i can tell you where it fits in and my thoughts on the language let's get into it so here we're on the website for the zig language right ziglang.org and zig is kind of does flip edits edit this does my editor edit this guy i'm not sure i actually don't even know does because that little transition that was very flippy i i'm actually convinced right now that this guy gets this video edited by my editor all right anyways kind of a cool language because it's built around three simple principles to keep it as simple as possible okay first the language is meant to have no hidden control [applause] let's go let's go let's go dude there's nothing more than i hate in the universe than that i hate this i hate this i hate hidden control flow and what does it mean by hitting control flow that's gonna be try catch right try catch you don't know where the hell you're going when a function throws you don't no you don't know where it's going you don't know how where it's gonna get to all you know is that the moment that it throws your whole program's gonna the band you don't even know why i think i made a nice little flow somewhere around here did i oh come on i made this really nice diagram oh yeah there it is look at this here like you can imagine this is your stack right this is the stack and say this function throws if this function throws which function is going to catch it above you and even worse when it comes specifically to javascript there is nothing that identifies if a function throws and to me that is javascript's worst design feature i think i've spent i i bet you there's been more server 500s there's been more wasted cycles there's been more wasted requests there's been more production problems purely because people do not know that a function does or does not throw you just don't even know so you get all these weird production problems like one out of a thousand and you have no clue why and it's because some function you just don't even know throws you know what i mean i just hate it i just hate it so i love that that's one thing i'll always love about this language is that all right let's go back into it let's get back into it i think go handles it better i do think go handles air is better than javascript because even though that ghost handling of errors is clunky it's still error first error as values there's nothing better than errors as values you must maintain that as your mantra because the moment that you don't have that your program just goes to it's every time troll flow meaning of course go hand go error handling is ugly but the point is it's better than not knowing right if i had to choose it goes rust or like the of the results syntax go which is like for both handling and then guess guess when error handling did you catch it no i'm not a great catcher okay just i just suck at it the code only does what you say it does there are no secret features yeah i love it two there are no hidden memory allocations the code only allocates the memory that you ask it to nothing happens i know that sounds really nice but the reality is that if i'm not mistaken you also have to like you have to you have to give an allocator to the thing and then after you give an allocator you have to use the allocator to allocate on like the stack but for me i just want to say struct whatever and it just allocates right there on the stack if i've defined heap based objects then it just heaps right like string in rust it's like there's a or effect in rust like i want that to be a real thing i don't want to have to think about it all the time so i'm not a huge fan of this though i can see why this would be probably really great in a you know in embedded the embedded world to really have like a strong wrapping around what can and how it can be allocated i could see why that'd be great yeah i tried to write my own memory arena once it's extremely hard i wrote it in c for wasm before like without using bind gen or whatever it's called uh and and scriptum it was really hard it's in the background i got it wrong three every time no preprocessor and no macros meaning the code that you write is the only code that gets put into your program no so this is a good this is a really good debate which is are macros bad i would say pre-processor style macro something that you see in c plus plus like define those are effectively the devil can we all agree those are the actual devil walking around on the earth casting those with he with he wills into the to the pits of hell but macros like rust style macros i love them every macro i've used from rust i am happy it's a macro loving it loving it right and that's because it's a different one it has a very strict syntax in which you can go to you can follow it's very tightly integrated with the lsp it makes sense you identify identifiers expansions all that kind of stuff think about rust without drawer i know rust without derived macros would be a terrible language i wouldn't use it and i'm not convinced that zig's version zig does effectively have this what zig has is something that i would almost argue is more powerful than rust macros but also i think harder to visualize meaning that it has code that executes during compile time and code that executes during runtime so compile time compiles into more code so it's like an expansion but it's written in zig so it's a little different let's see what again sorry let's just keep on going this comes at a time where i think a lot of languages that are meant to be low level like c for example are kind of bloated with their run times like lib c you know the program does a lot of stuff before it actually gets to the code that you write which could force you to spend your time debugging the language and not your code itself which is kind of the whole mantra of the language right keep in mind that everything i say in this video is at the time that zig is in zero one zero zero so it's not even at a 1.0 yet so everything in this video is subject to ch 0 1 0 0 was the most confusing way to say zero ten zero one zero zero nice binary solo there low level learning what's what are you doing out there that's a 10 it's not a one zero change so what are the principles surrounding zig and where does it fit in all the other languages i would say that zig is one level above assembly and one level below c one level above assembly one level below c but i thought we didn't do jokes below the sea level such shitty reference to tick tock don't worry about it don't worry about it all right let's just keep on going stop it shut up obviously because the program has human readable syntax that is not just you transposing memory in and out of register sorry but it's one level below c because you were actually given finer control of your code than c but without all the blow when you make a program in c there there you just say see and bloat i mean i know what he's trying to say but still see it i know that's what i heard that i was like see it's bloated what i think chad's like what the hell does that mean what do i mean by c's bloated all right let's find out what he means by season bloated this is it that is just funny i know what he's trying to say in some sense zig feels like a higher level language than c and it does it has a lot of higher level abstractions but it's also in some sense i understand what he means by its lower level right it by default links in the c standard library it does a lot of stuff under the hood that you're not necessarily aware of here in zig the program is a little simpler granted there is an imported standard library but it's just not as bulky as oh gosh so again a level i believe he means stud right as we learned yesterday it's called stud it's not called it's standard no one says standard okay we all call it stud right right above assembly one level below c i'll stood let's go to the developer ecosystem which is one of the things that i'm happiest with with zig that makes it kind of fun for a new programmer if you install the zig compiler which i've already done we'll make a bit like a folder color i do have one thing to say right before it keeps on going he said fun for developer stuff when i tried to do an http library i think i was i mean this must have been three months ago when i played with zig i had to download the source code and just put it into my project i hate that pat without a dependency manager your language can get the out of here okay i don't want it like without it i i need dependencies because i don't want to i like there's it's the same reason why i don't use dwm window manager right i don't want to i don't want to be in charge of patching okay i don't want to be in charge of patching i want your code to be your code i don't want some dingleberry flopping around inside of this third-party code and doing a small little change for us and then the next thing you know it's like incomprehensible and incompatible to update ever again i just i i have a very hard time with that but we'll see old zig video when you run the zig compiler you're giving this really nice menu that kind of reads like the cargo program in rust you're able to do things like initialize rust by the way library initialize a folder for an exe initialize a folder for a library and do a bunch of things as key checking running an entire integrated test suite that runs inside the program as well which is a halter video that i'll make later on this also the zig compiler can translate do you hear his dog itching himself in the background listen closely listen closely you can hear the dog video that i'll make later on this also the zig compiler can translate c code into zig code and also act in as a drop in archiver compiler in c plus compiler a bunch of cool stuff for sick so let's go ahead and make a project real quick and we'll do zig init exe so here it's created the repo for us just like cargo wood and we have our code here main.zig a lot of comments here but basically all this does is it prints out some code and the code says all your code base are belong to us so to build that pretty simple nothing crazy going on here we'll do zig build and then run so that'll run the compiler it'll invoke the llvm back end to output the object and then we get our executable which gets ran all your code base all belong to us another really really cool feature that i like about zig is that if you saw here at the bottom of our our source code you can actually write in tests directly into your code so that instead of zig build run we can do zig build test and that actually invokes every test that we write into i think that's really good i know i know it's it's not very hip today to love unit testing i still am a big fan of unit testing where it makes sense this is i i love testing testing should be built in i think it's a huge language flop if testing is not like a a front and center thing like even if you hate unit testing you must admit testing should be a pre-thought not an afterthought like i just think that it's just crazy town the fact that there's it's just crazy to me that like testing is not even even kind of what go did with their testing i wish they would have they i wish they would have went harder into their test i hate that you have to have third-party stuff to get good testing it just bothers me it really bothers me testing should always be first class every time i actually so so i don't really get unit i don't get unit test anxiety when i don't have unit tests what i like unit test for honestly is whenever i come to a piece of code in which i cannot implement within 30 seconds inside my brain right like it's not like oh i know the answer to this thing for me that screams i use a unit test as a form of implementation meaning i implement what i think i want then i go to a test and try to drive through completion the correctness of it all right so i i i don't like tdd because tdd is you write your test and then you write your code i like to write my code get it kind of how i want i believe i've done it correctly and then do some tests to make sure that it's correct right to make sure that i've done it i i rarely test my code but when i test it it's in places in which you can't immediately understand the code right there's definitely like a i don't do red green refactor i don't do any of that i i'm a very practical pragmatic individual which means that until it is hard what third party thing you need for going oh the testing like to get good to get good testing that t library sucks it's a bunch of if else's and i don't like i don't i want assert i want just simple diff assert like go every time you do something and go it's three lines of code right it's if this thing is not nil then fail for this reason ending squirrely brace well this might be new assert equal must be new but i just want assert i just want effing assert i want to say assert that this is equal to that that is it right and it just drives me bonkers okay so that's my only thing nice content hey love from france we'll have a good one yeah that's just a me personal situation all right let's keep on going sorry about the little sorry about like this whole like breakdown getting all excited about testing i get really excited about testing okay you know what i mean i get really excited about this you can do zig build test it'll do the same thing it'll compile all of our tests and it'll say yep we ran all these functions and none of them failed so all of your a lot of tests have passed was pretty cool another by the way i'm using i forget i forget what unit test framework i'm using for for c plus plus but it's such a nightmare like the how i have to write my code to be able to unit test it in c plus plus is such a just a doo-doo head i hate i don't like their their i don't like their how they do abstract classes slash interfaces in c plus plus i don't like any other patterns i don't like any of it just just it's emotionally painful okay i would just like to let you know that it's emotionally painful the really important part of thing that i like is again it's meant to be a systems programming language if you've ever coded in a language like c or assembly one of the big problems is transposing your code from you know x8664 on linux and maybe you want to move that code to a you know mips processor running windows i know it doesn't exist but you see my point what you can do here is you can do zig build do you see this down here you may not be able to see this down here i3 by the way hey nice i3 dude i love the fact that he has default i3 he straight up has default i3 just like me let's go that's what we're talking about get that default okay default default default default right oh it's so good i'm i'm default gang all the way attack d target and i can say equals x86 64. i go away windows and this will actually produce a windows executor i like that i that's awesome on windows but it's a really really important feature i mean building a modern language today without handling all the different platforms would be just nuts i mean the fact again c plus plus you have to learn two languages you have to learn c plus plus which takes if you don't know the 21 days to learn c plus plus it takes about 90 years and then you travel back in time and then kill your previous self and boom you've learned c plus plus in 21 days but then you have to learn cmake which is like a whole nother thing this is like this just needs to be a thing exact same thing on the windows api so really really interesting another big piece that i really really enjoyed from using this language is the security baseline of a language so if you are learning to code but you are writing a project in c you should not be doing that because c is known to be a very dangerous i don't know that that's a hard i don't know i i you know low-level learning for the most part i fully agree with him almost universally but i do think there is something good about writing at least one project and c i think it's a great learning experience because it just feels extremely raw right in the sense that you're just i mean you only have a few primitives you're mapping memory or structs over memory it just feels really raw very easy to mess a bunch of stuff up i feel like you kind of have to go over that just so that you can you can experience it i think he's saying if you're trying to ship it to other people i think i mean i've had to shift some c code to some people i think it's great to do it at least once i had to ship a driver for this thing let's see is it plugged in a little netflix test device right so sometimes i just need to test stuff we call it a little odroid just like like a simple little basic television processor so if i just want to test on device this is something that we just internally test on because that way we can i can like i can like log on to it and see what happens i can run debuggers on and all that kind of stuff but i have to drive i had to write a video driver for that thing and so it's like it's good writing something in c is good it's good for you it's good for your soul it's good for your soul everyone should do it i think everyone should write at least one program and see and experience it this language it's very easy for a new but i can agree with you that a c for a brand new person shipping to somebody would be very difficult but my very first job was embedded programming with c shipping it to the government it was extremely difficult but it taught me a lot and see you should not be doing that because c is known to be a very dangerous language it's very easy for a new programmer to make errors when you're writing c that leave your code vulnerable to attack i tried to do this on stream i tried to use zig to make a program that was able to be hacked so what this piece of zig code does is it creates a tcp server it binds on a port and then it listens for a message from the user what i really really like about zig is that it does have security in mind from the go all the functions are being used like is rust splices where the types have associated length values to them meaning it's really really really hard to allow the programmer to make a vulnerable condition in this language everything lengthwise and memory management wise is done under the hood for what they're what he's saying is is that there's no like sterling or what's it called uh buff copy whatever what is it called stir copy what's the thing called where there's like the stir end copy versus stir copy where you're copying in versus you're copying in with a length there's like all those different ones store copy for stir and copy or stir copy in you know what i mean like in c you have to you have to manage between use the length versus yeah store copy i forget what it's called it's been a while now but there's like use the n ones versus don't use the n ones and the non-n ones just like every time every i print f printf like i dude i always explode myself because of that stupid store men buff copy and classic storm and buff copy in right for you languages i spent literally two hours trying to make this language oh and don't forget slash hand slash n gives me every time who here has not been crushed by slash n who here has not caused some damn buffer problem because you forgot about slash n or not slash and slash zero every single time slash zero every time my life is just one big slash zero segmentation fault it happens every single time in my entire lifetime i i don't i just i hate it i get it it gets me every damn time another important piece of this language is the documentation so any new language you're gonna have to learn how to code it and the ziglang.org does a really good job of documenting the language everything from the standard library down to the types and basically every feature that the language has you have like your vectors you have your pointer concepts here you have your volatiles your non-volatals everything that the test can i pause it for a quick second why why why did c plus plus and zig and rust column vectors is there like some sort of documentation i'm missing on why it's called a vector because like every time i hear the term vector i i assume it's because it's it's based off the mathematical idea of a of a one by n matrix you know calling it a vector but every time i hear a vector i always think like vec three or a vek4 right like are we talking about are we talking about a three-dimensional one are we talking about like a quaternion stored in a vector i think it's i know just for me i don't understand why it's called a vector because i always associate a vector with like a constant time yeah out of here betty with all your c plus plus get them out benny comes in here trying to talk about c plus plus and so we banned that ass [music] so get this like i'm over here and i'm all like hey well something something about vectors and then benny comes in here starts yapping his mouth about c plus plus karen we got c plus plus started vector oh karen i gotta go pick up a laptop i may or may not have thrown one out of a window that needs to be refurbished do you know any refurbishers of laptops [music] get benny back in let's keep on going get betty betty sweet allows you to do is oh there's a link link it link it to me afterwards link it to me documented here in the documentation so i found that very very enjoyable ignorant also they have the entire standard library mapped out into documentation where it shows you the types that it has and also if those types are able to throw errors you have to handle in the specific rust error handling scheme so that's pretty cool too i think there is a fundamental question though that is still unanswered to this language and the question is why zig why would you have a new language like this if things like rust already exist yeah i think we are moving into a world where if you're learning a new language you should be learning type safe languages that are not breakable you know to a certain extent like rust the problem is it is very hard to justify teaching rust to a new programmer i keep going back and forth on this one sorry i wanted to pause it before he says his thing i i really do go back and forth on this at first i really do think typescript is probably the best for a beginner it's easy to learn you can move really quickly you can get somebody seeing something you can see it happening it becomes quite simple and then you can go into like a harder better language like like understand the fundamentals of programming and then learn about something that's not programming right and or you know concepts of programming that way it's like a little easier you know it's an easier transition i keep saying this but i keep kind of going back to this idea that am i wrong about that i almost feel like i'm wrong about that and what i mean by that is that if you if you think about it there's concepts and there's like these there's unknown knowns in world right like i forget i think was it donald rumsfeld who i forgot who said this right there's no knowns there's known unknowns and then there's unknown unknowns but there's actually a fourth category which is unknown knowns like things you know that you don't realize you know and the pro one of the reasons why rust is super hard is because you come into it with unknown knowns you have this like construct of how you view the world and you you will you will build and and and create software in this like unknown or yeah this unknown known way and it's just kind of like like for me it's a huge gut thing right i'm i'm very very fast at like building software and that's because i kind of have like this internal guide but i don't really know why i do it anymore i just know that i build it this way because it it feels right and i'm sure there's better ways to build software blah blah blah but when it comes to rust and learning a language for the first time how much do you start like developing that internal guide that just makes rust even harder to build do you know what i mean yeah instincts would be a good term for unknown knowns right you know you don't know why you know the thing but you feel like this is inherently right and so i'm very curious if that actually makes it harder to learn rust do you know what i mean like maybe it is a lot harder i don't know i actually don't know i i can't say that it's good bad or or not you know you know because rust in itself is already a very difficult language i highly suggest that if you're learning to program you don't learn rust as your first language for that reason it's a very complicated language that makes things safer but you have to know what things are unsafe before you can make things safer i could buy that argument it's much easier for the user to learn this code reads a lot more like python or c than it does like rust and makes the syntax a lot easier to hold on to so where does zig fit in in these systems programming namespace i think where it fits is if you already know the basics of programming but want to learn a type safe language that isn't as complicated as rust and get your hands dirty with doing some embedded systems projects that don't have to take the rust language into account zig is the language for you all yeah i'm curious about zig because obviously there's the whole null problem there's the whole there's still errors are still kind of raw errors i don't know if they have enums as in like some types you know what i mean i i don't know you know like i don't know if you get the same i i worry about it i'm not sure i i'm not i don't buy that ziggs a great type safe first language i think typescript's a better type safe my big problem with zig just in general is this is that c has a huge momentum behind it and i think for zig to to win it's going to take a series of really motivated contributors to actually make zig have all the things it needs to compete with say c in the embedded world or rust in the embedded worlds right like those things are very important and they're very very hard to do right like to get enough motivated people to do all that it's a lot of work and so i think that zig i think will continuously fight against trying to catch up until they reach a mass of people that's fast enough i think that i i think embedded is a great hurdle for zig i think that zig i think zig's best argument is that it's a good replacement for c and it feels mostly like c it's less hard than rust i i would agree with that it took me less time to get something up and running in zig but i don't know i still have this hard part with his is that until zig has a big enough momentum in the open source world and its tooling has proper package management and all the things that's really needed to make it really slick i think it's just gonna struggle i think it's going to struggle and the hard part is that there's so many super motivated restations that anytime zig catches up rust has already caught up plus a year ahead and so i i think that's just gonna take it's gonna take a lot of effort you know what i mean i think if you're very competent at c switching to zig is easier so maybe that's kind of the play is that you want more type safe stuff and so therefore zig is just like a great transition natural transition from c and also zig has a better compiler interaction story with c right i don't know if it has like a drop-in replacement or an easy interaction with with c but i i swear i read something where it's it's very easy to interrupt between the two and linking and all blah blah blah blah blah so very curious about it is this the ruscular i don't think it is i think rust is going to win because i think russ's biggest strength isn't that it's a systems programming language i think russ's biggest strength is that it can act like a general programming like a general purpose programming language do you know what i mean i think that's its biggest strength and that's going to be really hard to beat because you have system capability general purpose programming language and so i think that that's really amazing i tried carbon but they didn't have a compiler what am i supposed to do write it on a piece of paper and imagine how it feels oh no right like what am i what am i supposed to do with carbon oh yeah look at this garbage code it's incredible one day when this i can execute this it's gonna be amazing