hi everyone, in this two part series we're
going to be looking delegates and events. so actually creating a delegate is very straightforward. we simply write the keyword 'delegate', and
then, as though we were creating a method, we specify a return type - so say void - the
name of the delegate - i'll call this one delegateexample - and then any parameters
we may want - for instance here i'll specifiy just a single integer paramater. we could of course have multiple parameters,
in which case they'd be comma-seprated like a normal method, or we could have no parameters
at all. let's now make a method whose parameters and
return type match those of the delegateexample. so a void method, which i'll call it foo,
which takes in a single integer parameter. we can say that this method foo is 'compatible'
with delegateexample. say we have a start method, which is called
when the program runs. in here, we'll make an instance of delegateexample,
called perhaps 'mydelegate', and we can set this equal to the foo method, since it is
compatible. obviously if we had another method, say 'bar',
which which was also compatible with the delegateexample, mydelegate could be set to bar instead. the point i'm trying to make is that no matter
what a method does, as long as its return type and paremeters match those specified
by the delegate, we are allowed to store a reference to it in the delegate variable. so whichever method happens to be stored in
mydelegate, in this case it's of course bar, we can call it writing 'mydelegate dot invoke',
and supplying values for whichever paramters the delegate specifies. now instead of writing dot invoke, there is
a shorthand version which is just to write double parentheses as though mydelegate were
the method itself. behind the scenes this will call invoke, to
actually call the method stored in the delegate. now that we can store references to methods
inside a variable, this means that we can pass methods into other methods. so if we make one more method called 'foobar',
taking in a delegateexample parameter, which we can just call 'mydelegate' as well. then, when we call foobar, we can pass in
the mydelegate variable. of course it's not strictly necessary to create
the mydelegate variable above, we could just pass foo or bar directly pass the foobar method. whichever we pass in, the foobar method could
then call it in the same way we saw previously, by simply writing mydelegate, followed by
parentheses, and passing in values for the parameters. now to understand why this is anything to
be excited about, let's look at an example where delegates might make our lives a little
happier. imagine we're making sort sort of online shooter
game, and we have a class called playerstats which keeps track of each player's statistics
throughout a round - so just things like kills, deaths, flags captured and so forth. when the round ends, we want to display the
names of the players who were most succesfull in different categories. so, in the displayplayernames class, we might
have an ongameover method, which takes in an array of all of the player stats. let's start by finding the name of the player
with the most kills. we'll make a method called getplayernamemostkills,
returning a string for the name of the player, and taking in the array of all player stats. in here we'll create a string for the player
name, as well as an int for the best score. then, looping through all the stats, we can
say int score is equal to the current stats killcount. and if the score is greater than the best
score, we'll update the bestscore as well as the name variable. this way, when the loop has finished, we can
return the player name. so, if we now want to know the name of the
player with most kills, it's as simple as writing 'string playernamemostkills = getplayernamemostkills',
and passing in all the player stats. next, let's make a method for finding the
player with the most flag captures. we can copy the most kills method, since it's
going to be the same functionality, we just need to change the name to most flag captures,
and change the way we find the score from 'stats.kills', to 'stats.flagscaptured'. now we can simply write 'string playernamemostflagscaptured
= getplayernamemostflagscaptured' and pass in all the stats. you can imagine we might have many such methods,
for all sorts of different categories. all these methods are identical, except for
how the score is determined. this sort of situation where you've got multiple
methods doing the same thing, is usually a pretty good indications that you'll want to
at least consider using delegates. let's delete the mostflagscaptured method,
and at the top of the class create a delegate, with return type int, called scoredelegate,
which takes in a single playerstats parameter. we can rename the mostkills method to something
more general like 'getplayernametopscore'. this will now take in an additional paramter,
a scoredelegate, called something like scorecalculator. when we want to find the score, we now just
say 'int score = scorecalculator' passing in the current stats variable. this works because a scoredelegate returns
an integer, and takes in a playerstats. now lets make a scorebykillcount method, which
returns a score integer based on the number of kills. we can also make a scorebyflagcaptures method,
which returns a score integer based on the number of flagscaptured. note that both of these methods are compatible
with the scoredelegate. so now, to find the playernames we must first
of all update the method name - we changed that to getplayernametopscore- but then we
can simply pass in the scoring method we want to use. so in this first one i'll pass in the scorebykillcount,
and for the second one i'll pass in scorebyflagcaptures. hopefully you'll agree that delegates have
made this code a lot nicer. this is probably a good moment to mention
lambda expressions, which are based on delegates. so if we consider our scoredelegate, it indicates
a single input of type playerstats, and an output of type int. thus, we can create a scoredelegate by writing
a name for the playerstats input - i'll just call it stats - followed by the lambda operator
- which is an equals sign and a right angle bracket - followed finally by the output,
for example: stats.kills. what we've written here is equivalent to our
scorebykillcount method. we'll look at lambda expressions more closely
some other time, but what this allows us to do is to replace the named score methods,
with these inline lambda expressions. i hope you found this video helpful. following on from this we'll be looking at
events. until then, cheers.