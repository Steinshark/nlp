and with that tonight these are our hosts of the tables this is the content we have in this fair industry modern c plus plus for absolute beginners conan by dre frock undo and the open source tools from kdib because now we're actually gonna go and get started with the demos which is sexual content for tonight right and here we go with demo from undo i think they're demoing the life recorder and let me bring on greg hello greg from undo hello hey yeah it's going all right going all right hello everyone and let me bring online your yeah so here's your screen and we're all waiting for your demo thank you very much all right i just want to do like a couple of slides before we get into the demo just want to set the context that's okay so i think a lot of people know this quote from konaghan debugging is twice as hard as writing the code in the first place so if you write it cleverly as possible you are no definition not smart enough to debug it well let's look about let's look at how we well kind of why why that is and think about how we actually how do we debug and actually i think as developers we spend actually most of our time debugging right i'm including the inner loop debugging think about how many lines of code do you think you can write and have it work first time right maybe you're a better programmer than i am but for me it's like 20 probably not even 10 maybe how many lines of code can i change and have it work first time i think that number averages to less than one right we spend a lot of time debugging and sometimes we use like dynamic checkers like valgrind or sanitizers maybe we have them as part of rci maybe we pull them out like well i don't know maybe like this is the sort of thing you maybe do a lot of times i think a lot of people a few times a year maybe use a debugger maybe maybe you know again a few times a year a few times a month maybe some sort of fancy dynamic logging yeah some people a lot of people don't have that or we just printf and that's what we do most of the time every time and i think there are a couple of reasons for this one is i think i'm going to be a bit controversial but just laziness so we all know this xkcd cartoon why is it compiling it's compiling because i added the printer right so i can feel like i'm working but not work but the other reason is that it gives me it's actually better than most debuggers are telling me what happened right i'm trying to think when i'm debugging how did that happen i don't mean like how did that happen or how did that happen i mean i had expectations of what my code was going to do in reality diverge from those expectations and when i'm debugging i'm trying to think backwards to like figure out where did reality diverge from expectations of course usually it does something a little bit more like that so this is where time travel comes in so and this is well undo live recorder comes in so we want if we can make the debugger just allow us to see exactly what happened rather than what most debuggers do which is let you see what is happening much more powerful so let me show you what that looks like i've actually got loaded up here this is this is our internal github insight undo and this is a pull request that i made that's failing some tests right so made the pull request kicked off some jenkins tests all very kind of normal here's jenkins okay some of the tests have failed if i go into here i can just like take a look at one of these at random i've got some log information and okay some kind of abort oh yeah okay look at assertion failure here right it's got a normal experience right we look through the logs and if we're lucky sometimes in the logs we have enough information to root cause the issue and you just like oh yeah i know what it is let me fix that and go again but often probably most times we don't have enough information in the logs with like that assertion failed like it should never fail right that's why it's an assert what's going on so what would i do normally i'd maybe add some more logging run it again maybe see if i can reproduce it locally i don't need to do any of that because i've got this link to something we call the observatory if i open this up this is a whole bunch of recordings that got taken of my test as it ran this test actually ran i think yesterday but these are recordings of the program's execution various processes and things ran but i'm going to just pick this one it makes for the best demo so what this is going to do now i just clicked on that play button this is going to provision a docker image it's gonna check out the source code from the right version and and it's gonna load up let's go now here we go and it's going to load up a a view through vs code here onto my application kind of at the point that it crashed which is going to be like a little bit like looking through a call file but this is a recording and i get full history every line of code that executed and also full data so i can actually go back to any line of code that executed and i can see all of the data so let's just let this all get provisions that's checking out the right version from git it's setting everything up it gives me some tips because i'm kind of a bit lazy it's just it'll get it's usually it's a little bit quicker than this but here we go all right so i've got a few things that are a bit different here i've got this timeline this is all inside the browser right so this is this is the test that i was just looking at remember we were looking at it in jenkins and jenkins log and we saw this assertion it failed and i can sort of hover here and i can see this assertion fails because square root cache is zero and it should have been 15. i can kind of hover around elsewhere and i can see that okay well that's so passing in a number to cash calculate number is 255 and what it gets back is zero and what it should have got back was a square root right zero is not the square is not the square root of two five five so kind of okay so if i was looking at a core file i could get this information it's a bit more convenient because i've got the right code hannah jenkins and stuff but doesn't give me enough information to record this right i need to know why did cash calculate return what it did well let's have a look out on the left here i'm just going to remove these windows around a little bit so i've got a bunch of threads and they've each got a cool stack actually this is like if i look in here i can click this show more stack frames this is inside lipsy right so actually i'm not here at this assertion i'm inside lipsy from where the assert failed so what i'm going to do is i'm going to hit this uh sorry this button here reverse step out and that's going to pop up one stack frame and again and again and once more and so here we are inside our code now again i could have done this with a core file but now this is where stuff like life starts to get really interesting okay i'm going to just wind the clock back and see what the program did and why and see why did cash calculate return that bogus number so go back one line okay that's pretty funky now i'm going to step into cash calculate because i want to know why it returned what it did okay cash calculates returning look look it's got a cash hit here it's returning zero okay we knew that okay there's some threading stuff going on i mean thread 11 here maybe it's a race condition and i've got some locking happenings maybe i can go back before this lock was released and let's see if everything looks same here so just go back a few lines okay stood in thread 11 it will stay inside the threads this is before the thread was released now let's have a look here so it's returning from the cache it's returning the ice entry in the cache i is 90 and go over here in my watches and like look at g cash 90 and if i open that up yeah okay sure enough the cache contains bad data right so this is like bad day at the office right i've got my cash contains bad data i don't know i don't even know how that came to be how did that happen i don't know whether that was another thread so pointer error is it a logic error all i know is something like stomped on my data structure and gave me bad data so what i'm going to do here this is a super cool feature this is really kind of one of the killer features i'm going to click this let me just hover that so you can see it click this last changed button and it's going to give me an expression so i want to know when did g cash 90 whoops 90 last change so i can enter and what this has done now is wound me back in time to the like the most recent time that that element of the cache got updated so i'm midway through the update actually it's executed the first line here and not the second so it's midway through the update so if i go back one line now okay so now the data structure contains good data the square root of 40 really is six like with integers watch the data as i step forwards now it's like live action replay of the corruption happening right step step so that's it that's two five five and zero being written in there let's see like what's going on well we're writing number adjacent and it's square root and number adjacent to negative one so the square root is garbage why am i trying to take the square root of negative one well i could i'm getting pretty close now i could do this by code inspection but as this is a demo let's let's do it just a slightly different way i'm going to use the last command we've got the command line here so y there's number adjacent where is number of graysons minus one okay it's being set here number adjacent well it hasn't been initialized yet it's been initialized to number which is zero minus one so here's the bug called the function with a number of zero it returned the right thing it returns zero but there's a side effect you left one entry in the cache in a bad state right so it was calculating square roots either side and the basis is some kind of locality of reference and i didn't notice until sometime later in the execution different thread came along actually in this case looks like it was the same thread usually it's a different one anyway different a thread and unless you know the same or different thread came along and tripped over that bad data and then and then the program assert failed now this is a trivial program right it's like less than 100 lines of code it's just to show a demo we want to show a very quick demo in like 10 minutes but so fight just want to say that this scales right so our customers are people writing really you know code at scale millions and millions of lines of highly optimized c plus plus and and they use this you know all the time every day even even in those environments so that's it that's the quick demo i will be hanging around in the lounge afterwards to take any questions thank you very much thank you that was an awesome demo of the life recorder for nando and yeah crackers is an expert and many things so we will be having a table for undo and the launch later but now let's continue with this is our next guest in our next topic now there's a new book actually a new version of this book the modern c plus for episode beginners book has a new version second edition and we are going to talk with the author now about this let me bring on slobodan hello slobodan so you're sharing your book so i can share that so tell us about the new version yeah sure so this is the second version of the of my first book which was which is a modern c plus for absolute beginners but i like to refer to my book by its second title which is a a friendly introduction to c plus plus the the book introduces the language itself the standard library and more than c plus standards in the second edition i've covered the some of the features in c plus 23 also the second edition features more diagrams and one of the feedbacks i often received is that people would like to see it full source code projects so i've included six new full source code projects in addition to the exercises so i'm very much looking forward to having a discussion with people on hublot platform and yeah thanks for having me and looking forward to presenting about my book okay what what can you show us about you you have the book here can you show us a chapter an example sure sure basically the book is divided the book is divided into let's look at the table of contents the book is divided into basically three parts the first part deals with the language itself the basic facilities in the language followed by the abstraction mechanisms such as classes and templates then we move on to the standard library where we cover some of the most used algorithms and containers etc also finally we are addressing the notable features introduced in c plus 11 1417 and 23 and finally at the end of this book there are four basically six source code projects fully written out and we do a basic commentary etc etc so after each of these theoretical introduction there is a there is an exercises part with solved source code exercises which have also included after every every chapter so i'm very much looking forward to any questions you might have about this book and looking forward to it once again okay thank you you're welcome so if you're curious about his book he'll be later on the launch and yeah i've heard very good things about your first version and it's very popular i can kind of you know see at which books people look and your first version has been in the top five there at median c plus plus so definitely there has been some interests in in that book and now we have a version which also covers the newer standards maybe we talked we should talk about that a quick a little bit 23. well well basically in in the second edition i wanted to feel i wanted to focus more on i've revisited some of the chapters i didn't as you said earlier there isn't so much material in c plus 23 to be addressed but basically what i put my focus on were addressing and readdressing a couple of topics which were introduced in the first edition and i also introduced many more diagnosed people wanted to see more diagrams visual representations of certain concepts so i did that i've also updated a couple of exercises and mainly what people wanted to see were fully written out source code products written from zero and then we building complexity and the commentary is also there etc etc so we're building complexity step by step we start by zero and then we are expanding so i'm very much looking forward to any questions in the cubital platform after this presentation okay so if that's everything you have to say about your book then we'll look forward to coming to your table and meet the author and the book so let's see who is next thanks lobodan we have conan as our guest now but i need to find my table my window again here we are so here's chris from conan and chris i think you have a demo about conan yes i do i have a few slides and a quick demo so i'm going to share my screen for everybody that's what i'm after yeah so according to zero has been released in february i think and it's been renovated and it's great to have it so let's see what chris has to say about conan to zero and conan in general let's go so just a quick introduction to conan 2.0 for the tool fair here today my name is christopher mcarthur i'm the conan developer advocate if you're on any of our social medias you'll definitely find me we're in a bunch of different places like the cpp alliance slang the hashtag include discord and you can follow us and keep up to date with all the different releases that are going on so one of the first questions i always get is what is conan so it's a cnc plus plus package manager and the role of this is really easy it's just to simply install dependencies we've all had that frustration of i'd like to try out a new project but the building three or four different projects putting and installing them all in the right place configuring the system it's quite a hassle at times and being able to just quickly develop and prototype things is one of the most convenient features of a package manager so the distinction between conan and a lot of the other package managers is it focuses on building and distributing the binaries so when you're talking about things like api compatibility binary compatibility between different versions being able to model that track that and make decisions around it is where conan's strengths really lie so we have jfrog's con center i've been contributing to that for several years now there's over 1500 open source projects and it's built in over 100 configurations so you can see this in the demo very soon but i'll show you that you can quickly just install the dependencies need so conan is open source it's mit licensed it's a distributed model so there's one client to many servers it's scalable and flexible so you can have different combinations of remotes and servers working combination it supports all the major build systems so cmake meson auto tools any platform windows linux ios android your heart's content embedded devices as well and it's more than just c make list.taxed so being a python package manager really gives you some flexibility so you can do more things and more completely so let's say we just have a simple consumer example right so i want to make an app and it's going to be version 1.0 because i'm real fancy you can just make a clone file.text you don't really need to get into the python and it's a very easy syntax requires speed log 1.11.0 we're going to be using some generators this is a conan's language for the integrations for build systems so you can see here we're going to use cmake tool chain and c makeups and our layout for this project is going to be cmake because it's a cmake project so we can just get clone our app we can cd into the repository and do a kona install and that's like the easiest way to get going but the secret here is the dependency graph so what you didn't see in the previous slide was this dependency on fmt so the format library so my app is going to have a direct requirement to speed log but that speed log is going to have a recipe and it's going to have a requirement to fmt and that transitive dependency is carried through the conan model graph and being able to make these distinctions and understand these things we get to do fun things like having requirement traits so we know whether or not the header libraries are exposed whether you need the symbols to link against whether it's a dll that needs to be copied at runtime you can make more informed decisions when you're building and deploying your app and you can do some fun optimizations in that so i mentioned a recipe so our app here is going to have one we're going to use conan to build and distribute it because that's the next step we figured out how to install our dependencies but we need a recipe for how do we build and package this so we're going to make an app and it's going to have a binary and it's going to have a clone file and there's going to be a source method a build method and a package method and this works just the same where you clone your repository and instead of doing cone and install we're going to do cone and create so fun little demo i have here a terminal we're already in our app directory so if i just do ls minus la you can see minus the bad text coloring there are a few directories going on so we have a source folder here as well as a test package and we can see here our clonefile.py so if i tap to that conan file you can see here we have a handful of things i cheated and just used one of our nifty little commands in common so if you do conan new you can actually just generate yourself an example recipe which is what i did right here and you can see here we have our layout which should match what you saw previously in the cone file.text most of these things translate over we have our requirements generate build and package so these are the different methods that conan can invoke and this is how you teach it to build and package your software you can see here for our binary configuration our settings our operating system compiler and build type architecture and this is just how you describe things there's some fun fill-ins you can do your metadata and here we're going to be making an application so easily laid out so if i go back to my cheat sheet and i steal my command i can run this here so i'm going to compile this with c plus 14. and you can see conan will go through and work and it'll build our app so our graph here you'll notice it's going with our app and it was exported so it was in our cache and you can see our dependencies here we have a speed log and fmt so our version range here so i need version of speed lock anything greater than 1.10 and it resolved that and it found the latest and it turns out it was a 111. compatibility so depending on your c plus plus standard you can get different binaries the default compatibility in conan 2.0 is very easy it accepts any cpp sd which is generally what you would expect most of the time that most of them should be compatible it is a plug-in so you can change and customize it however you like here you can see our requirements these are the different binary packages that it resolved to and found and it generated our files for us and this created our package so the introduction section to the new conan 2.0 docs is going to be your best friend it's a narrative story so similarly how we solve from slow band for his book where there's like real code examples all of that is here present with conan as well it makes it very easy to get hands-on and try it so why would you pick conan over the other ones and i touched about this a little bit earlier but its focus on being able to package and distribute software is one of the key aspects of it and it also gives you that flexibility so you can build a framework for doing devops devops isn't really something we talk a lot about in the c plus plus ecosystem but spoiler alert you've been probably doing it this whole time with building and saving packages somewhere those binaries if you build and debug and release or different compilers and platforms you've already been doing devops so conan just gives you more tools to manage that and do it better and you can do things like model modeling the platform configurations and language between libraries which is very convenient what's new in content 2.0 quite literally everything so there's been five years without a breaking change and that commitment to stability is still true with calling 2.0 so about 60 of the code base is new and about 20 is back ports but the example i just showed you is completely compatible with conan 1.x as well so you can do the latest in conan one.x and then plan your migration over to 2.0 and this was done intentionally and the design was really thoughtful behind this so this is a slide just to show all the different changes on the left hand side you can see a list of different breaking changes these are more structural changes to how the client works and on the right hand side you can see a whole long list of new features and this will give you a good overview of like what to expect i mentioned the plugins in diego cpp contact he used the expression death by a thousand bytes and that is absolutely truth so one of the changes in column 2.0 is you have the power to help yourself there's a profile checker command wrapper and package signing to name a few and this will really make it easier for people to try things out so new graph model new plugins extensions deployers binary compatibility things i didn't mention multi-revision cache there's new package id modes there's lock files got a huge revamp which is super good configurations environments got an overhauled package immutability and so much more there's a page on the docs what's new and you can learn all about it there some more resources if you curious there's an accu talk by diego a year ago now we did an introduction to 2.0 blog as well the tutorial which i mentioned if you have questions the official place to get help is the conan issues on our github repo if you want community help i highly recommend our cpu alliance lock channel it's one of the most active in the c plus plus ecosystem and it'll definitely give you a good overview and people are definitely helpful so if you want updates twitter i run the twitter i do make typos you can make fun of me i appreciate it thank you very much pip install conan that's it easy peasies thank you chris that was a nice short demo and more about conan on the table in so i need to go once again and thanks conan and next we have kdab presenting on their open source and cuter tools so let's bring on helium and we are written i need to add yes that looks better so welcome everyone i'm milian from kdub we have quite a few open source tools i'm mostly interested in two of them keep track and hotspot is what i've been doing those profilers for linux one keep track is a memory profiler so heat memory profiler and another one is hotspot which is what i'm going to talk about later is a ui for the linux perf subsystem and we also have tools like crazy which is a llvm based study code analyzer for especially for cute so it helps you for example to port your code from q5 to q6 and finds little paper cuts that slow down your application and whatnot and yet another pretty popular tool of ours that is also open source like the others is gamma ray a cute visual debugger and introspection tool all of these tools are pretty interesting i would say and i could easily fill 10 minutes each but today we'll talk just about hotspot and the thing here is this is mostly interesting for linux people but i guess or hope that there are quite a few of those in the audience and historically and if you look at how you do profiling on linux then sooner or later you will stumble over the linux path subsystem so the perf record and perf report commands and those are pretty damn hard to use on the command line just to give you a quick example i hope you can roughly read what i have here [music] if i go to some application that i want to profile then i used to be i used to have to do something like perf record and then i have to remember that i actually want to do dwarf unwinding and then maybe i want to enable the z standard compression and then i want to run my application and then it did something and if i report it then all i get is this fancy or not so fancy standard console ui that is in my opinion not good enough so i set out a few years ago to write hotspot which is essentially the same thing that i just showed you on the command line using the ready-made perf tools but in a ui package built around q5 and kd frameworks and the notable features really are is that it's much much easier to use and it tries to give you some context sensitive information which is what i'm going to show you next and a few other things that i will not show today like actually being able to very easily access the profiling data that you recorded on an embedded target so let's say an arm device raspberry pi you name it and then you copy the perf data file over to your development machine maybe different architecture there and then you just connect to this root and the debug symbols there and analyze everything and that just works so let's talk about some some demon time so as i showed you before i actually recorded some data and instead of just saying perf report like i did before i can just use hotspot as a drop-in replacement for puff report it will look for the perf.data file in the same directory and then it will actually look at what is needed to analyze the data and now it's done you get a little overview page hopefully looks like that you might have seen a little progress about earlier and that actually was me downloading debug information through debug info d which is pretty epic nowadays and then the first thing that you really should look at is either the overview or what id do is the flame graph so if you haven't seen a flame graph yet please please educate yourself on this great innovation by brandon gregg it is essentially a visual representation of this tabular data that you probably know from any profiling tool and it literally just divides the full width in fractions so if you can read a thing here in this tower city landscape then it means it has a fractional large contribution to the overall cost perfect sampling profiler so that translates very nicely so 66.8 which you can see in the bottom corner is in this raw motherboard file pretty clear and now i can easily say i actually want to colorize it by some demo by the binary or whether it's in kernel space or user space so we can see here a few red towers that are kerners-based but the rest is all user space here and i can see what is system and what is user space and these are just different ways to slice and dice the data eventually you will essentially go from top to bottom look for a white thing that you have under your control and in this case it's this draw motherboard one and as you can see at the bottom in this timeline view all the threads that we recorded and the cpus and when you hover something you actually get to see when a sample was recorded that contained this frame on the stack as well and okay now let's assume i found something here right draw motherboard how do i figure out where in the code that is you can right click view color kali and then it's yet again a different way to look at the same data and here on the right hand side you would have a list of all the lines of code that actually got recorded you can sort by inclusive cycling cost and then you would see okay bundleboardline.cp dot cpp line 40 is apparently costly and i can double click it and open it in an editor of my choice and i would see here is something that is apparently slow a different way to look at the same data is if you go to right click and then disassembly and this is essentially kind of like gold bold but integrated and for profiling data so we also disassemble the data just like god bold does and then try to do this what's it called basic building block colorization and then you will see the same line here that i just opened in the editor with the high inclusive cost and i can also look in the raw disassembly code and find the equivalent costs there as needed if you need this kind of low level data it's all there now which is pretty cool and there are some more improvements coming along in this area so i would say for the 90 use case this is all of what i'm doing in my daily job as a software developer when i need to do profiling of c plus plus code hotspot is trivial to work it's super fast and i just do this a lot now one thing though that i mean many tools can do something like that pretty easily right but one thing that is pretty nice is i can also record data so i don't even have to remember these arcane command line tools and i can enable more advanced path features for example the off cpu profiling which is pretty nifty so let's start recording and i get here a example application and now if i try to resize this window it's really really slow right and well yeah i deliberately wrote very slow code here let's close the application and if you are interested in what a command was run you could even just copy and paste this out and put it in a shell script or whatever there's no magic going on here really now we can view the results and again some debug info d that should be pretty quick because most is already cached at least i hope so famous last words yeah okay so now and this is done and the summary in this case is actually pretty interesting because we see that for some reason this application starts 210 threads which is pretty stupid on a laptop like mine which only has eight cores similarly on average just 0.4 cores are running so not a lot is happening and down here in the timeline you can also see that really being the case right let's jump over to the flame graph and make that more clear so first of all we have this list of cpus and there is stuff going on but not a lot and then down here i see apparently some threads get created and then they get killed and then more threads are created and then they're killed and more and more and more and so forth this is very very bad code similarly let's try to figure out where the code is actually sleeping so let's see as i said in the summary page it says on average most of the threads are just sitting around idly not doing anything and because i did this off cpu profile profiling i can now select the different cost source for the flame graph so by default it shows me the on cpu cycling cost sampling based but now i can switch to off cpu tracing costs through the scheduler trace points and then the flame graph looks totally different and this is actually a sleep time cost now and when you look at this a large screen is useful but let's have a look at what happens when i hover the timeline i actually see the towers at the top i'm getting highlighted as well and for example here this thread is the so-called dbos thread it's i can actually ignore that let's say exclude this thread i'm not interested in that similar here is a event thread which is really just this little part of the flame graph here in the middle so again let's say i'm not interested in that i'm going to exclude that thread as well and then what else do we have we have the main thread sometimes not doing anything because i simply didn't interact with the window that you saw so if i zoom in here i can also say let's exclude this whole stack whenever this frame is in encountered and bit by bit i can clean up my flame graph that way until i eventually find the needle in the haystack which is in this case this left big chunk where a function that i have under my control apparently tries to lock a mutex and again i can just go to view caller colleague and sort by the off cpu time and find so here again it's on the right hand side and when i saw it by the of cpu time i go to manualbroad.cpp line 124 and indeed i double click and i instantly see the lock that is being held here which is obviously pretty badly placed so let's quickly optimize this i just reduced the size of the critical section and then i will recompile give me a second and then i'll just quickly rerun that to show you the advantage here so i just re-record and i resize i close i view the results i wait for the cache to be filled and now things look much better than before there's actually some threads being used in parallel on average not much because i'm actually still not interacting with the main window all the time but when something is happening so for example in this area here let's filter in on that then you can see all threads are more or less busy doing something and the flame graph looks nice i can again look into what is now on cpu what is off cpu just like before and then further look into my application try to come up with additional ways to speed it up so yeah if you have any more questions around hotspot heap track gamma ray crazy any of the other tools come by visit us at the virtual table and thanks for listening thank you for the demo all right thanks sumilian from caleb and this is now the end of this kickoff join us now in the lounge