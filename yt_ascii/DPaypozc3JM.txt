so today we're going to have with us globber from turo he's the ceo of turo and turo if you're not familiar is a edge-based sequel light that is fantastic just so that everybody knows you sponsor this platform you are one of my proud very proud one of my like two sponsors i have kinesis and you so thank you very much appreciate that proud i want to make sure i say that just because i don't want anyone to feel like they're getting bamboozled or anything like that cuz you know i get it okay so you're here for a very specific reason i am this is a very special week for tel it is it's our launch week our second launch week you want to tell you want to give you want to give us the breakdown let let's do it so we try to do first of all we try to do like launch weeks every you know six months more or less sometimes a little bit more sometimes a little bit less but essentially is a way to pack a bunch of cool stuff together in in in the same week instead of releasing them p last time we did something super special and we we had a limit of three databases in our free tier so somebody could join the free tier and create three databases for free and we increased that to 500 because why the [ __ ] not right and then people although i curse maybe i shouldn't but like uh and freeer i actually wanted to call her free tier back then the planet scaler but our vpf marketing was against it he's like the adult in the room in this company so we just called it you know it's actually really good you didn't do that because then you would could potentially be related to people think maybe the planet scaler got you know became we but we do have by the way we do have a discount code now called torso forever for the people who are coming from planet scale you want to try torso you go to torso. txo forever and that that one i want but anyway just on on our scaler plan people can create like 10,000 databases i i'll give him some time to recuperate for those that don't know for for those that aren't getting the joke planet scale forever was the infamous memo in which said hey we're laying off people and there's no more free t free pl so turo forever is the obviously to go outside in the sun yeah welcome to costco i love you sorry there was a there was an alert i just realized i still have alerts on welcome to costco love you james appreciate that anyway forever n na forever is actually a pretty deep thought in there does that mean yeah that nothing nothing is forever i guess we we'll see i mean i'll die one day i hope i i don't know see is kind of forever you're right there me it gets close to javascript is forever unfortunately you know but but be be it as it may be it as it may like immediately as after we launched that people started asking us look what do i do with this it's like too many databases and and questions started to arise i mean migration database migrations are a pain in the butt and now you want me to do 10,000 of them right so you want you want me to do a million of them how do i do this and what what we try to tell people at the time is is essentially like look not all use cases require you to have a database migration happening at all those databases at the same time casing point you had last week here in the stream i understand our or two weeks ago our great friend fred from astro yeah so what astro is doing is they built on top of torso something it was actually firebase but we we're saying torso you know just for just for the lows but they built on top of firebase l turo this offering called astro gb that you essentially every astro user can now get a bunch of cite databases so those databases are independent because they're giving them to their users they don't have to have the same schema but look you're right for for lots of the use cases where you are just keeping data segregated is like we hear sometimes people saying hey i have i have a healthcare company i have patient data i don't want patient a knowing what patient b has and i don't want to build all the security around it just give him an independent database that's great now those databases would have the same schema so what we did for this launch week was essentially a way to make it a little bit easier to change the schema of however many databases you have at the same time and i was wondering if we could just play with play with it a little bit i mean i'll let you drive and i'll guide through it but we can show the audience how it works first off we do have to correct one record the firebase joke j is is largely it's it's it's it's gone so far out that now people think it's firebase yeah it's the problem it's the problem of of like those type of jokes is that people is that the in crowd thinks it's funny but there's always 10x more out crowd than there is in crowd so yes and and you know what's worse the worst part about this joke is that we had we were not even the ones who started like somebody because it wasn't a joke to begin with people are like fire base i can't believe astro is doing this no this i don't know if it's the coo or the cto of sentry i don't know if he knew it was turo but he very clearly knew it was not fire bas and then he just tweeted i can't believe astro just robbed fire base and and and we found it funny so we started like a but but you're absolutely right i mean asro db is built on turo they got their blogs and and again the it's all their blog they take advantage of this fact that we just give everybody like a epic number of databases but those databases don't have the same schema and today in our launch week we're bringing a solution for those use cases where the databases have the same schema most excellent most excellent okay so do do you have any like do we have like a sweet demo or something you want to show i i i can show my screen i was hoping i would just guide you through it because it's always funnier okay you can guide me through it all right all right yeah yeah yeah if you if if you want if we got something quick you can kind of give me give me a quick on then yeah yeah yeah yeah all right here we go i'm in do i need to make a directory of some sort what what do you want me to do you have your terso cli installed right y yeah i have turo ready and it's working and it's super awesome so what you're going to do is we're going to create a new database okay and usually when you create a new database you just do turo don't type enter yet but you just do tho gb create and the number of and the name of the database right yeah there you go so if if this would just create you a new database but now we're going to do something different we're going to do dash-type type and then the type is going to be schema all right schema there we go like that the schema there you go that's that's the correct we're creating a schema database and and you got it right so what you've done now is they you created a database that is special that database is called a schema database and every change that is made to that to the schema of that schema database is going to be propagated to all databases that inherit the same schema so what we're going to do is we're going to create this grouping and say hey like this is we can call it like this this is the parent database now we're going to create a bunch or we can create like two or three children database that inherit the schema from the parent and every change you make to the parent you're going to see they're all propagated to all of those databases again one command one round trip super awesome interesting so now now when you look we can do it both ways you quick question i have a when when you make a change to the schema you may have to do some sort of like migration step or something like that do you have like some sort of way you can inject like how it should migrate and then second are the migration do they just happen all at once or does it happen upon first use no so like answering your first question your first question first so yes most of the time you're doing a ation but this is just the the beauty of the database of the schema type database is that it behaves to you as if you were just a database so you do whatever you would do in a database you can actually connect to this database in fact let's do it right now you can do torso gb shell and and connect to the database and then do right yeah there you go and you can do whatever you want there like you can create don't have anything to describe t yeah oh you can't control c right there okay anyways yeah you can do create table yeah if you do do schema you will see that it's empty a dot schema yeah it's empty okay and then i always forget the syntax you have to remind me create table andate table want prim in yeah no no first the name of the table all right we'll call it in your defense i forget that all the time as well man i know i these ones are the ones you do rarely and then i forget every single time and then i think it's parentheses and it's like name parentheses name the columns yeah name type then it goes we'll just go fu bar fu then it's comma bar comma baz right yeah that's right yeah and then closing parth and in site in site inspired by javascript you don't actually have to do any types the types are optional so you're essentially creating three text columns when you do this you're all good okay and then do how do i make it go there we go awesome yeah that's right semicolons i always forget every single time semicolons are the go to every single time yeah there we go all right i spent like i spent like 15 sem prime know it's good for c it's good for you the name you can't argue with that one can't ar i know like really when i was playing with sqlc one of my biggest problems is i just didn't have a semicolon it kept having these weird errors and i'm just like i don't understand why i'm having and it's just like oh dang i always dude that i forget you know i've got so used to go and rust and sometimes javascript and now look at me now i can't remember them at all there you go man there there's hope for you it's okay there is hope if i can do it you can do it all right so we have table fufu right here there you go so now when you if you create a new database you're going to pass parameter yeah torso db create all right and let's go like this let's call this a bar bar will be my implementation f is my schema there you go now you're going to pass pass dash dash schema schema fu schema fu all right right so then i can go db or i can go terso db shell bar should we log into bar there you go you do yeah all right i want to see this now i can go schema right there you go yeah that's pretty neat so this the same table you created in the full schema database is now created in the bar database and you can keep creating databases that point to the schema again you don't have to do this for all of your databases you picking choose which databases we will share the schema if you create a database now without passing d- schema it's going to be empty yep we'll drop that and we'll do baz there we go and we will db or turo db shell baz do schema and there you go nothing nice huh that's pretty ne okay so okay can i make a quick change to f how do i walk me through a quick change here where are you sh l it yeah all right i'm in fu create create another table just create another table just create oh yeah look at that it has this fu another we'll just call it another table there we go do you use is it underscoring do we use underscores or do you use c cam case for for naming in whatever whatever your heart desire me we are that's not how programming works okay there's a right and wrong answer even on opinions absolutely even on stylistic opinion choices one two there there we go bam okay so we created another table fantastic so now i'm going to turo back into bar right if i go schema oh is it because is it because i logged in and therefore got or because i like since i created a connection to bar it upgraded it and created this second table no i mean right right away like right away like nothing is instant right so there is speed of light and [ __ ] like that so what happens is that you will have a period and most most smart people understand like the way you do database migrations is that you create a new you can create like a new column and then you move data and etc there's going to be a period of time in which the migration is still happening right yeah so you will have this as well like as as soon as you as in this case it's only one database it's all good it's super it's quick as soon as you created the change in the full scheme of database this is going to be propagated to all databases now it's not going to finish immediately but you're going to have the guarantee that like if if there is a problem those things are going to be rolled back right so all of the databases are going to be updated or none of them so it's transactional we keep a log of like which databases are done which databases are not done so you can you can go and roll back that's super cool so you can it actually oh okay well hey i really like that that's actually pretty pretty dang sweet you don't have to yeah you don't have to do a bash loop with 500,000 databases in it so this makes well you had until last week you had until last week so it's a transactional database migration and it's kind of provided as part of the infastructure with this whole schema table foing and so this would make the idea of having a multi-tenant database easier meaning multitenant meaning per user database yeah if you have these like smaller databases like say i'm making vim vim apm and i want to keep all of your motions in a in your own database that means that means i will be sorry tj is just saying the stupidest things on the internet that means i i can't help but to read chat and chat is always trying to derail me with the dumbest possible i'm reading i'm reading some questions as well and i'll try my best to answer them later but like yeah but that means effectively i'll be able to just make one update and it'll just spread as fast as possible through all of this and be able to update each user database for for say my vim motions and that's that it it's actually more i side with the people who were skeptical with the feature before we launched it because it's more than easier it makes it doable right if if if you don't have something like this you can't really do database per tenant look if if you have five users that's fine but like the moment you have 10,000 20,000 like managing this is it's essentially impractical right you don't have rolling back you just have this like disaster that's happening you're just like which thousand databases are incorrect versus the other million that are correct okay yeah so for for us this is more than just like a quality of life make it easier kind of thing like we're trying to make this pattern like workable nice which is a pattern that a lot of people did with site for the longest time by the way like just i keep hearing about people doing this i mean even before tho cite is just so easy to create databases because they're just a file then people just create a bunch of files but you have those kinds of problems right qui now how do i iterate on on those files and one of the things that we want to do with torso is exactly that like how do you get the good things about cite that people have been doing since forever and build the tooling around it and make the changes required in the core database to support it when needed so you can bring these patterns to prime time pun intended pun intended nice very cool and then you you okay first off i really i i like the scheme i'm gonna have to play around with it and try to i want to understand like how to write you know any sort of migration scripts any way to be able to copy over data blah blah blah obviously i assume you have that all documented out and everything absolutely fantastic and we are we are marking this feature as beta because again we just released and because it's weak hope well no because it's beta because we're beta i guess in a sense for just a softer because it may break i mean we are we are aware of some limitations and we are aware of some stuff that doesn't work so we just prefer to like release it as beta than not releasing at all and we're going to be working to solve some of those corner cases you know databases are full of corner cases essentially databases is one giant corner case exactly yeah but but it's it's working decently well already and it's in a pretty good spot is lib squeal by the way someone's asking is lib squeal still single thread right yes is that why the per is that why user per database is is speedy it yeah so honestly if if you're doing this if you're just creating like many databases as a way to go around the limitation of single single thread right you should be asking yourself i mean is this really the right tool right because tools have their their sometimes even though i'm here like i'm the ceo and founder etc i'm not going to be saying that our database is the best for every single use case if you have a lots and lots of rights and by that i mean like hundreds of thousands a second it's probably not the best tool for you this i think this pattern has other advantages and and and then we try to do those migration things to accommodate for those used cases where look i i want the data to be segregated but how how do i handle those migrations how do i handle like cross database queries is another thing that we're doing i i don't think we you know we're not going to demonstrate here today but we also allowing you to to cross database query so you get two databases together and you you do a join across them nice so is well based yes 100k wres a second isn't necessary for usual cases well that's not it's not even like the i mean you got to remember that when you're you're in that when you're at that level you're at the very very edge of most companies most companies aren't running at 100k rights a second well some do but then again like those those are the companies that should be looking into all their solutions yeah yeah edging confirmed absolutely all right so you have some other launches this week besides for okay so you have some multi-tenant management what else you yeah so today we're launching some new improvements to embedded replicas embedded replicas are a way to replicate your toural database whatever you want so you can replicate this inside your server you can replicate on a mobile device you can replicate essentially whatever you you can think of and and we're bringing some improvements to embedded replicas the my favorite of them is that we're going to allow that file that that embeded replica that gets to your server device whatever to be encrypted rest so it's a it's essentially a security feature super nice now you can replicate even to hostile environments if you want like a user mobile or whatnot because you have the encryption key and you hold that encryption key i don't hold an encryption key so it's a security feature we're going to be announcing a new plan as well on on wednesday and then for other features look just stay tuned on on twitter or x that's where we're doing most of our announcements at at tal database most if not all uh of the announcements are going to be centered around this idea of like running production workloads with with turo andite lipso running more and more complicated use cases either all the features are either enabling some pattern like that like we just described today or encryption compliance other clouds and stuff like that nice nice okay that's that's pretty dang cool i i like that the the embedded replica one that one's from last you've had this one for a while now people don't real i think the mobile one i think that's a huge awesome case i even think we i think warren is in here warren buffering i think he even has put a little bit of eyeballs on this whole local you know this mobile first squeal light approach which is i i i think it's really really cool for mobile because there's so much stuff you just simply read and when you write just being able to write through out to a remote database and then just always having that microsc read just makes it feel like makes mobile apps feel creamy smooth i like it yeah and and again like one of the things that we heard from many people is that i would love to do this but then again now i'm putting the data out in the open whoever i i may not feel comfortable doing this and now we brought encryption at r yeah and so that's going to solve that problem as well that's pretty cool is there any performance penalties for encryption at rest i mean i assume there has to be some minimal amount right but but is is it is it enough to be annoying or is it is it pretty neat it's pretty neat because we don't encrypt the whole file actually doing that is easy like encrypt encrypting the whole site file everybody can do that right this is just a file encrypt the file good to go what we do is that we encrypt the pages individually and again that's why that's one of the reasons why we felt like we had to fork cite to do those kind of things because how else are you going to be able to do this right it's it's very it's very complicated you need an extension mechanism you know there are ways to do it sometimes you have to work around issues and you know that the right way to technically solve the problem is one way but you can't do it that way because site doesn't expose the hook right there yeah you know that's one of the advantages of having fork but every page is encrypted individually right so so you decrypt you never have to yeah exactly you never have to decrypt the whole file and then be worried about i have a 20 gigabyte file what do i do with that doesn't matter because all the pages are encrypted individually how can we invest in turo you can use us dollars talk to me i i don't know you like money do you like money i like oh someone ask had a good question so a replica is a local copy of the db do the rights go directly there or does it go to remote first and then if you have this migration this schema how does that work with mobile because now i have this embeded embedded replica on my mobile device how do i get the new schema update great question so when you're using embeded replicas all the rights go to the primary and this is something that we want to change in the future not change as in this doesn't work well but allow there are some new cases that would prefer that the rights happen locally at first to be fully offline what we have now is the ability to always do offline reads but we don't support offline rights and this is going to still be the case for a couple of months and we're working on enabling offline rights as well but until we do all the rights always go to the primary so you have to be connected to the database to be able to write one of the things that we announcing today by the way is changing the consistency guarantee so the consistency guarantee that you have now it's a consistency guarantee called read your own rights what that means is that if you write locally the rights going to go to the remote but it's not going to come back to you until all the changes come back as well so you can always see the rights you never get into the situation where look why i wrote something now i read right after and the data is not there so with the announcement today we are making dur swim better at replicas read your own rights guarantee you always have that and every yeah every second what we showed you when we were here last time you had to go and call sync manually you had to put a background thread and now we're doing this for you yeah exactly you don't need to do this anymore which is another change that we announcing today you just set a period so you say for example every second every 500 milliseconds every hour however it fits your use case that sync automatically happens right and when that sync happens you get all the changes that happen to the primary database into your embedded replica including schema changes so if you change the schema on the primary the schema will eventually be reflected in in the replica as well okay nice nice and is there okay so i mean i'm just thinking as a mobile as a mobile headed person if i have a version of my application that does not require a force a forced update but i have made a change to the schema table how do i have multiple versions like that like is there a way to prevent the schema updating because that's kind of just where my head goes right away with mobile which is like i have version a and then i pushed version b which contains a schema change but they don't upgrade to version b i need to have forced updates on the user or can they maintain both states no you have to you have to write your code in a way they can handle both states right so usually the way to the way to that we recommend handling migrations is always this never make migrations for example that change the schema you're always adding to the schema because that way you don't have that problem right so if if your client is still reading a set of columns and you don't rename a column to another one you add a column you don't have that problem but this is a problem that usually this is a best practices have to be used to handle that case okay yeah because i think that that that will that will be a difficult that will be a difficult just i mean first off that's just a hard problem no matter what you're using that's a very very hard you know you know who did very well you know who handled this problem very very well like credit where credits do planet scale they're fantastic at that like the they one of the things that put them on the map is essenti is exactly how they did migrations following a git workflow they were forcing this idea on you and sometimes if feel like i don't want anything forced on me but sometimes it's good like they were forcing this idea on you that like this is how you do migrations you don't change stuff you add stuff and then you remove stuff later when all the clients are updated etc nice okay this is very cool so you big week how what's what's your cadence for launching these launch weeks do you have any sort of cadence to this more or less every six months but nothing happens if we don't i mean sometimes five sometimes seven we don't do you think you'll ever just get to the point where you're just releasing features as you know just like like a steady line of features or will it always be more in these kind of bigger no we do we do we do that too we do that too like it's not that outside of launch weeks we release nothing is that like on the launch week is is we try to plan things so that like a lot of big features are ready at the same time and then you can use that week to release a bunch of stuff together it works pretty well okay this is awesome i i am very excited i i i think turo is very fantastic and hopefully my entire week during uh brazil time i'll be working on per user authentication turo databasing and all that fun stuff that's my goal for streaming in brazil and and a reminder a reminder for people in the chat especially the ones in brazil the ones who are not in brazil can always travel there and get there if you build an application with torso or azion or partner or both why not you can get the chance to meet the man in persons yep and i will judge your application he will judge you i will judge we'll be announcing more details hopefully the beginning of next week but that's going to be amazing