you probably code like this but yoda codes like this this is yoda notation and it's extremely controversial in this video we'll discuss yoda notation what it is the pros and cons of using it the controversy around yoda notation and my recommendation if you should use it or not so yoda notation is the practice of reversing the order of a boolean check on a constant or a function call so for example here this is yoda notation because the number comes before the variable to explore why we use yoda notation let's look at my example here in my c snippet here we call sum function and we want to check the return value of that function and see if it's equal to some number that we expect if the return value is 42 we do something in our code seems easy enough but what happens if we're a new programmer and we make a mistake or we're a senior programmer that rushes through the code pretty quickly and we make this error here to try to make some code submission deadline what happens in this code does this code compile does this code throw an error foreign this code is actually valid c and it will compile what happens here is the return value will get set to 42 this expression will return 42 to the outer interpreter and this if statement will always return true so despite the value that's returned from some function this block of code will always execute and the worst part of it is it won't even throw a compiler warning which means unless this piece of code causes some problem in production or in testing we will never catch it so this is where yoda notation comes in let's say for example instead of using our previous notation we did this with yoda notation here we write 42 is equal to red and what will actually happen here in the compiler is we are trying to set a constant value equal to another variable this will throw an error in the compiler and force us to check out this code and fix the problem so you may be wondering why is this controversial is there a reason why someone wouldn't want to use yoda notation and there actually is a fairly good argument against yoda notation so here we're doing a boolean operation to see if two values are equal a number and a variable or maybe a function call and a variable this is a good place to use yoda notation one of the pros one of the cons is that it makes the code a lot harder to read and understand not so much in the boolean comparison case but in the greater than or equal to case if i want to check to see if my code returns a value that is less than 42 i could do it with this snippet of code here but for someone else to read my code and to go through and find out what my code does this actually makes the code extremely hard to understand if 42 is greater than equal to my return value so i have to sit there for a second do some math and then okay that actually means if my return value is less than or equal to 42. so this is the majority of where the controversy comes in when it comes to yoda notation people think it makes code unnecessarily unreal readable and it's only beneficial to the author so generally the recommendation is you use yoda notation when you're doing just a flat out comparison check either with a double equals or maybe a triple equals for languages like php that do concrete comparisons but when you're doing things like greater than or less than comparisons it's typically more acceptable to use the regular non-yoda notation just because there's no way that you can put an equal sign here that will cause the issue we talked about before and also this makes our code much more readable compared to something like this that being said pick and choose where you use yoda notation appropriately it's not appropriate to use it everywhere but if you're doing basic comparisons like equal comparisons it's probably advantageous to use yoder notation that being said leave it up to your organization to determine if the yoda notation risk is worth the yoda notation reward it's also important to point out that certain languages yoda notation is just not necessary for example i've recreated the same error we got into before in python where instead of saying x double 42 i say x equals 42. you may think that we actually created the same scenario that we would have in c but luckily the python interpreter does not allow this to occur this will throw a syntax error in languages like c where the logic is a lot more up to interpretation use your notation where appropriate but things like python where you literally can't recreate that error maybe the code readability issue is just not worth it anyway guys that's it thanks for watching really appreciate it i hope you learned something about yoda notation and how you can code like a jedi if you want to learn more about how to code a safer go watch this video on the consequences of ignoring memory safety it's it's right there man just click on it