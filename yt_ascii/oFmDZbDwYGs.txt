according to my latest quiz about half of you don't really know what the reversed inbuilt method actually does so in this lesson i'm going to be showing you how to use it and what it actually returns and why it returns what it returns so to get started i have this code which i wrote ahead of time and essentially it's a function that displays the information of a variable and by information it just shows us how many bytes that variable is so we can see the memory usage then we have two iterables one is a text of type string which just contains python language and the other one are some coordinates for battleship so we have a1 b2 and so on which is a list of type string so let's look at first how we can reverse this and we're going to start with the sugar syntax that a lot of us use because it is probably the easiest way to reverse text or lists and that is using the text at the index of colon colon -1 so we're using slicing notation and we're taking a step backwards for each element and if we try to display the info for this you'll see that we're going to get the reverse of the python language we're going to get whatever this says i can't pronounce that but that's what we're going to get back and we can do the same thing for the coordinates so with this sugar syntax we can just run that and we're going to get the reverse of our list so what was the point of doing that when you can just type in text dot reverse well first of all that doesn't exist in python and that's one of the most common comments i get in my shorts is just use dot reverse that doesn't exist in python but what about reversed well that doesn't work either you can't just type in dot reversed that's not going to do anything other than give us a attribute error because that doesn't exist but then you might be thinking okay if you're using it wrong of course it doesn't work so try doing it like this instead and then we will print that why don't i just do this well that's going to give us a reversed object back so let's talk about what this reversed object actually is and to do that i'm going to first create two new variables one is called reversed text and that's going to equal reversed with the text inside and then reversed coordinates which is going to equal the reversed coordinates so now theoretically we have two reversed objects now let's display the information regarding these objects so display info for reverse text and display info for reversed coordinates when we run this we're going to get two objects back and they're going to both be of 48 bytes because what we're returning is an iterator which can act as a generator so it's extremely memory efficient because we haven't loaded all of the elements into memory we've just created an object that contains the information regarding those elements so they have been reversed but now they're stored in an iterator which means if we actually want to get them out of there we're going to have to call or use some methods that extract those so for example if we want to get the string reversed or take the string out of that object we're going to have to use an empty space with the join method and then we can pass in that iterator so here we can pass in the reversed text and that will work just fine we can run the program and it's going to reverse the text and what you will notice is that once we take everything out of that object it's going to take the same amount of memory as it did earlier so we're saving on memory by not using everything at once and the same thing is going to go for our list our list of coordinates if we go here and we just say okay we're going to convert our iterator to a list you'll see that this will take 104 bytes as soon as we convert it completely to a list so creating an object will save on memory and these are some very small variables i mean as you can see 104 bytes is nothing 64 bytes is nothing but what if this contains millions of elements maybe that's exaggerating maybe that's not but what if it does and in those cases it's usually a bad idea to get all of the elements back at once converting it to a list can literally take minutes depending on your computer a better solution would be to use an iterator and i just want to mention one more thing and that is that these iterators are exhaustive and to demonstrate that i'm just going to remove all of this and all of this so we only have the reverse text and the reversed coordinates so with these two we're going to print the next element in the reversed coordinates and we're going to do this two times or three times and when we run that you'll see that we will get one element back at a time each time we call next and now let's print the list of the reversed coordinates and you'll see that at the end we're going to get the remaining three elements because we are slowly exhausting that iterator so it works exactly like a generator as soon as you yield a value it disappears from that generator so to sum this up reversed returns an object while the slice notation immediately returns the reversed string or list or whatever iterable you're trying to reverse but i'm very curious to hear what you think about the reversed method in the comment section down below whether you use it for anything or whether you think it's a complete waste of time but with all that being said as always thanks for watching and i'll see you in the next video