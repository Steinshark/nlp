in addition to optimizing code we can also pessimize code we can do things that make it harder for the cpu to run it for no real reason like just we had two things we could choose to do here and we'd arbitrarily somewhat chose this much worse one because of some other weird metrics that i don't necessarily know where they come from like clean code that i don't feel like anyone ever proved really made anyone more productive but i can prove they make the cpu less productive so it seems like a bad trade and that was pessimization there's there's this weird thing i think that we all have in our head as programmers which is what if i add one more and i feel like this has created an abstraction like complex among everybody it's just like well we could have tomorrow and it's like yeah we will and when we do we could consider something different but for now i'm just i always just do like 1d programming because there's no need like i don't care if we add new things tomorrow i'll deal with it tomorrow today i just want to make it work and make it nice and tomorrow if it really truly does call for this really abstract concept then we can do it but almost always has the abstract concept looked clean on a single line where it could be like dot get type or whatever but the behind it is crazy and the moment you need to change you're like i have to burn the whole thing down i can't remember what i did and it's completely confusing so that that thing that you literally just said is one of the biggest things that if we could just stop people from doing it it would make a huge huge impact because what happens is people and and you know i i think i'm a pretty good programmer but i and i've definitely worked with some of great programmers right so i've seen what they can do and so i think i have a pretty good handle on like if i was to think of the best programmer i know what do i think their capabilities are and this is this program is going to be like way better way better than the average like your john carmax those kind of guys i know if we have one at netflix his name is kevin lee there you go so you know that guy you can think of who that guy is right and the thing is when i think about that i know that they even them don't really have the ability to think through an entire complex programming problem without actually doing the programming they have to see all of the details before they really get it and usually they have to do it and then they'll change some stuff after they're like oh i see how that went now i'm going to revise what i did because there was a better way oh my goodness i love this keep going yeah see what i'm saying though right you you know you maybe i'm missing the mark here because someone out there thinking about the best program they know and that's not true but like literally every best programmer i know where i look at that person like holy crap this this person's amazing this was true of them and so the way i think of it and it's it's absolutely true for me because it's gonna be true for them it's gonna be true for me that's just a given but i feel it in practice is that i can't predict the correct code structure for something i haven't done yet so if by definition i'm choosing a particular code path because i think it does something that i want to take advantage of in the future i almost always tell myself no because i'm wrong not because it wouldn't be great to be able to do that but because you're wrong that won't be the design that you actually want when you go to do the thing that you haven't done yet oh this is you know what i'm saying no this is totally true what happens to me is that and i've i've i still do it today sometimes because the voice doesn't kick in i know it doesn't i do it too oh my goodness and so every time something i do goes smoothly it's because i remembered write the damn thing first that just does literally what you were trying to do and then you will see after you do that which which only takes like a day or two yeah right yeah because you're not thinking about anything else you're just writing this little thing that does something fairly simple and then you will see what the correct design was for that and you just make some modifications to put that into a nice simple state and then you're done and when the time comes because it will come and this is fine when you decide you need to change it you just write that one new piece and you re you move the design around a little bit to accommodate it and it goes very smoothly because you're always working with the actual ground truth you actually have the thing running so you know whether or not the design works because it is literally working predictive design except first off this is great talk i love this i love this so much you know i i get  on the most one of my most controversial opinions i think on the twitter space and on everywhere else i have tick tocks describing why i'm stupid calling me oh he thinks he's a genius i say learn to type fast because you know what you're gonna get yeah way more opportunities to make a good decision because you could just simply get your idea out there it is worth more than anything else in my life it's just being able to type fast and that's that it's not a hard thing then you know you always get the people be like well you know i plan my stuff ahead i can't i'm not smart enough to plan all my stuff ahead i have to play with it because i'm like oh this api is going to return a json object oh yeah but then it sometimes you know request times out sometimes we get bad requests for no reason sometimes it just doesn't respond like it just gives you empty and you blow up your program like there's like nine different ways to hell you don't know any of them just get things out there try it out see what's going on and then i go back and like take some time and redesign it every single time it's been the best way to write software i've ever done and i've tried i actually was getting my masters in software engineering if you even realized that that was a thing it turns out it is a thing there's a masters in software engineering and i had to write out like sequence diagrams and uml diagrams and all of this and we took six months to design this thing that's gonna be running on a super computer day one i go and throw up like a very simple thing too slow for a super computer couldn't even run on it it was so bad and i said okay i'm gonna break this design and i'm just going to make a bunch of public getters because this was in java 1.5 days i think and i'm like i'm just gonna make a bunch of getters and we're gonna drop all these functions and everything ran smoothly was like a hundred times faster and i was like why is this what has happened here and then that's when i realized you can plan all you want you're just wrong you just built the wrong thing it's all it is i mean everything you just said is just it's just the truth like typing fast yes like i mean you maybe you don't have to type fast maybe you can get the ai to do it for you or something but whatever it is the experimentation the trying the actual thing is is the only way you can actually get all the details out it's too big for a human brain that's why we use the computer to do it right yeah and so it yeah uml diagrams leave out all of the important details that actually determine how the code will run and you can't get rid of them right so it's just yeah i mean absolutely absolutely no question love it all right we should we could probably end the conversation here unless if you have more time i don't know where we're going anymore but this was great i really enjoyed this a lot