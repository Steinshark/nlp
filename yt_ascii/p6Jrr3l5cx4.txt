okay so i have this problem all right i hate templating but i think i hate jsx more and let me explain why i think jsx is worse okay i think it's pretty simple is that in the world of templating you run into the same problem every single time which is you need html and then at some point you also maybe need just a little bit of logic right maybe like a like a for loop right or you know arrange okay still we're still fine i'd say we're all fine this can build almost every single what happened to that text this can build almost every single application right this is 98 of all applications but sometimes you still need just a little bit more some nicer things to do and so what do you end up having you end up having these weird functions that you have to try to inject into templating or you have to start coming up with these really annoying ways to do stuff and it just feels bad right you start having a bunch of if statements inside of your attributes and it just it just makes you want to cry right it just makes you want to cry and so i've just always this is where templates just like they just make me want to die on the inside and this is really where jsx shines is that jsx allows you to do all that and it feels fairly not all that bad but the problem with jsx which stands for javascript sucks the problem here is that you can do anything okay you can do anything okay anything which means you end up making the world's most complicated like just just for a second i want you to think through the world that how did we end up with templating and we end here where what we try to do is we try to do not just templating but we will do data fetching in our template okay that's a little bit strange we will come up with an entire scheme to manage context okay redux we'll have this entire like you have to start thinking about everything in this weird top-down rendering right like it's very hard to think outside your application and then this like ties into all this other crap and then all of a sudden you have so much extra libraries and classes because you designed your application and your back end based on the ordering and which is rendered on your front end right like that it i mean like when you say it out loud it feels a little crazy it feels a little crazy okay it feels a little crazy and then you get this whole slew of issues that go along with this because then you know once you cross this line you just run to all these issues where either everyone that comes onto your team has to have this really intense and obvious outlook on exactly how the application can be built it's very hard to just bring on somebody new it just becomes excessively painful and so it's kind of it's it's just funny i just find it to be funny and i'm not sure if templating is any better right real talk i don't know if it's any better i think the ultimate answer is very very simple there's two ultimate answers one no matter what you choose it sucks fair fair two what you choose determines how much you wish to suck and i'm not gonna lie to you i just feel like js jsxers they love sucking okay if there's another library to be had we're sucking on that library we're sucking out every last bite of possible javascript ever in the universe okay it's just what we do what is that left pad we need left pad okay we can't possibly add a little bit of white space to the front of our string it's impossible what is that and a number how do you know if it's even or odd i don't know we need a named function from a package okay react as a framework react as a framework it is a framework okay people just debate react is not a framework okay it's a library and a meta framework okay it's not a framework it's not a framework it's not going to be lad anyways i just constantly think about these things and right now i think my current favorite universe right now is is go temple right i can use a bit of i can use a i can use a bit of go to do the logic i need to transform stuff i can accept an arbitrary number of just variables so i don't have to build a struct per template or then or build these like a bunch of strucks to build it i don't have to have weird scope issues right like that's one thing i've always hated about templates is stupid scope issues right like when you do a range why is the thing inside your range now that item like i hate i hate that right yes it totally works and you can get by with it but it also sometimes like i just like names and i like to be able to say what names i'm using and be able to point to the thing i'm using instead it's just like now you're in this one you did a range you're now here this is the new this is your new scope and then it just makes you have to think constantly about what you're doing whereas i want the convenience of writing html in whatever language i'm using i want to be able to use simple logic that i already understand right like i already know how to write an if statement and go you know if if if name equals this we can do that right like none of these things those are very normal things to do right and i don't want to have to like use a bunch of brain power to learn a bunch of different like ways to do comparisons throughout every single template but i will say that out of all templates i've used the go templating default system is shocking so what so what's the difference between why why is temple good and why is jsx bad great question the difference between go temple and jsx is very simple go temple is truly a templating language jsx looks like a templing language feels like one but it actually has like in react it has a whole meaning that is different than say if you're in solid.js right it has a completely different meaning which a i don't it's just you know i just it just it's just it's emotionally painful but not only that it also directly ties into the dom so now you have this whole different problem which is that you have a templating language end client reactivity all into one which is probably why it also got data fetching why it probably got all these other things right it just kept on going well the virtual dom may be we don't know if it has a virtual dom and solid.js is there a virtual dom and there is not a virtual dom in react there is a virtual dom right so it's it's it's it you know anyways that's all my problems that's all i have to say i just have this hard i mean it's just why i like templating right now and go right here it's because it's simple i can refer to other templates it's just right in the middle that makes it pretty straightforward and i just all i want is i want the i'm just trying to find the shortest path between what you want to do and what you produce that anybody can come on and start seeing how it's done does that make sense because like the thing is is that if you go into any modern react project you have to come in with the ecosystem and what people want depending on the year it was created in your head right like i would i would guarantee you there's few people in the chat right now that could tell me how urls work on tvi given the code base and three hours worth of searching on their own and that's simply because you have to like you there's so much state you have to put on your head to work with with these large react projects it can be very difficult 69 that's out okay fair fair take anyways the name what what is it redux oxygen