go 1.22 fixing some for loops and go this is kind of exciting go 1.21 includes a preview let's see of a change of for loop scoping we plan to ship and go one two two removing one of the most common go mistakes so this is awesome this is great if you've written any amount of go code you've probably made this mistake of keeping a reference to a loop variable variable past the end of its iteration at which point it takes on a new value that you didn't want for example consider this program there we go four v value ranges print this who hasn't done this one this also like if you ever did let i in uh javascript same same experience wait for all go routines the three let's see the three created go routines are all printed the same variable v so they usually print c c instead of printing a b and c and some ordering okay this is cool so you can now just do this although concurrency is often involved it does not need to be this example is the same problem but with no go routines for i okay we do a little simple one append prints function print oh there you go yeah there you go this exact same thing exact same thing in javascript people would create and immediately invoked function that takes in the argument and all sorts of crazy stuff this kind of mistake has caused production problems and many companies including publicly documented issue at let at let's encrypt as an encryption company getting caught by a for loop i'm not gonna lie to you it greatly makes me feel less confident this is actually a really this this happens in a bunch of languages right it just can't happen in rust right let's not yeah this is a skill issue in that instance the accidental capture of a loop variable was spread across multiple functions and much more difficult to notice nice converts the mapping of a domain to auth2 models into a protobuf authorization map okay so what do we got here we get a response we get the authorizations we go over the range make a copy of k because it'll be reassigned in each loop all right there we go os pb we do a little bit of that pass in the value return error if nil append this okay a reference to k copy bam the let's see the author of this code clearly understood the general problem because he made a copy of k but it turns out the model to auth pb used pointers in the field of v when constructing yep yep classic didn't didn't v copy only gave him the k copy you can't dude you can't give the k copy without the v copy yeah i didn't see that one okay not not skill issue anymore to be honest again this is a tricky one i see this this was a tricky one okay yes you also need to make a copy of heat tools we have been written to identify these mistakes but it's hard to analyze whether a reference to a variable outlived its iteration or not absolutely it's it's very very hard these tools must choose between false negatives and false positives the loop closure analyzer used by go vet and go please opts for false negatives only reporting when it's sure there is a problem but missing others other checkers opt for false positives accusing correct code of being incorrect we rarely analyze the analysis of commits adding x equals x lines in open source go code expecting to find bug fixes instead we found many unnecessary lines being added suggesting instead that popular checkers have significant false positive rates but developers add the lines anyways to keep the checkers happy yeah see i don't like that yeah this is a great this is a great change by the way and go let's just avoid the whole effing problem one pair of examples we found was particularly illuminating this this diff was one program and another program was this oof let's see one of these two diffs is a bug fix the other is unnecessary change you can't tell which is which unless you know more about the types and functions involved yeah see that's the thing is i don't know monitor seems probably correct but maybe this also isn't i don't know what this stop channel is i don't even know how informer i don't know anything right here right i don't even know have you used go routines i know go routines i'm just curious which one causes a bug and which one doesn't you can't tell the fix and go one two two we plan to change for loops to make these variables have a per iteration scope instead of per loop scope this will change let's see this change will fix the examples above so they will also no longer buggy go let's see so that they are no longer buggy go programs it will end the production problems caused by such a mistake and it will remove the need for imprecise tools that prompt users to make unnecessary changes to their code this is a great change by the way this is a great change to ensure backwards compatibility with existing code that was my next question which is goes like goes really all about backwards compatibility the new semantics will only apply in packages containing a module declared go 1.22 or later in their go mod files this per module decision provides developer control of gradual updates to their semantics throughout their code base it also is possible to use go slash build lines to control the decisions per file okay okay okay okay that's pretty cool old code will continue to mean exactly what it means today the fix only applies to new and updated code this will give developers control over when the semantics change to a particular package as consequences of our forward compatibility work yeah i mean you have to do forward compatibility stuff sometimes it's not great basically rushed editions yeah yeah you got it let's see go one two one will not attempt to compile code that declares go one two two or later will that make sense we will include a special case with the same effect in the point releases of go one two 128 and 119 13 so that go 122 is released one go one two two is released the code written depending on the new semantics will never be compiled with the old semantics unless people are using a very old version of unsupported go okay you can go preview the fix you can do a little go experiment loop var okay fixing a buggy test although we had no production problems to prepare for that switch we did have to correct many buggy tests that we're not testing what they thought they were testing like this oh that's funny they had their own test breaking think about think about how that has to feel when you make a change to be like okay this is correct go code all right me the go compiler writer who's an expert at go let me just oh we have a bunch of test breaking laughs like if even the expert of experts at go can't write it correctly it's a good feature can we all agree that's probably a good feature at this point probably a good feature tessa wrong is the worst test wrong are actually the worst they're actually the worst yeah that's actually really funny oh man oh man test all even buggy that is so funny that is just so dang funny ah love it i love go so much i actually do like go quite a bit let's help those losers i loved i love go quite a bit so i'm happy with all good changes positive changes a hundred percent uh code coverage on point dude i know this is exactly why code coverage is just such a stupid term is because you can just make bad ones try it out hmx plus go yesterday it's glorious it is it's legitimately glorious hey i like go go 1.22 is getting better we're starting to get all these great generic functions of types where you can just do min and max and all these things on any numbers and things are just starting to work so goes actually becoming like a really good modern language and i'm getting very very very excited for its future love to see this love to see some of the fixes coming in down the pipe let's go a jen