today we're going to talk about object
oriented programming, it's one of the most common ways that software is written
these days certainly for things like applications on desktops and mobile
devices. the problem with object oriented programming though is that it can be quite difficult
to get your head around at first 'cause it uses so many different terms, you talk about objects sending messages to other objects, objects doing things and you think "well they're just bits of code, how are they doing anything?" and so on so it can be difficult to get your head around it. for nicholas wirth, who invented pascal, once
described programs as being algorithms plus data structures.  now the data structures we can think of as the sort of the data that our program's manipulating, whatever that might be. and the algorithm - that's basically the
code they we're running to manipulate that data.  one way we can think about this is thinking about something like a simple pong game, sort of the very early computer games
you got back in the seventies.  pong was a very simple game that you played on
your tv.  it had - so that's your tv screen - you had a little bat on this side which one
person controlled; you had another bat on this side that another person controlled and then you had a ball which was a square block.  these literally were square blocks that were filled in on the screen. so one player could control this and move it up and down, and the other player could control this to move it up and down, and the ball would bounce between effectively trying to be a sort of tennis game.  the graphics were state of the art for the time, and you can still find pongs lying around mainly
museums.  there's one at the computer history museum down in cambridge if you were to go and play with it.  so the pong game's very, very simple but we can use it to sort of
think about how the probe would work and so on and things.  so you've got two bats and a
ball.  so the data for this would be relatively simple.  this paddle or
bat over here - you'd need to know where it is, so you need its position; and we'll call that its y position.  and you'd probably keep track of its x position as well just to make
it easier to draw things.  and you'd need the same for this one over here and
again for the ball you'd need the ball's x pos., and the ball's y position.  so that's
the data that our program would represent.  it doesn't need anything more than that really.  you'd perhaps have some representation of screen but that'd be handled by the
computer, so we'll ignore that for now. and we'd be able to write programs
which would use this data, manipulate it to run the game.  so if a key was pressed, we would change the y position to make the bat go up; or if a different key was pressed, we'd change this one's y position to make the bat go down.  and we can change this to make
the ball sort of bounce off the edge of the screen, so it looks like the ball's
moving around.  so we've got to write some code very simply to do this.  so we could say something like, if he - alright, so we've got to use q to go up - is pressed then paddle 1 y pos equals paddle 1 y pos plus 1. and we could do something similar for the going down for the same paddles - we could write a basic program code that manipulate the variables to move the paddles around. then we can redraw the screen; and so we redraw the screen.  it looks like the things are moving.  actually all we've
done is change the variables' data and then redraw the screen.  this is ok, and
for a simple program like this, this approach would work and anything else would
perhaps be over the top.  but often you would find that you'd have lots of data
that you'd want to group together.  so for example with our pong game, we've got a variable to hold the x position; a variable to hold the y position; a variable to
hold the ball's x position; a variable to hold the ball's y position; and so on. and we might actually say we're talking a lot of the
time about points on things. so we actually want to group them together.  so we can
use in various programs that have the facility to group things together as what we call a data structure.   and we can then refer to this position either as a whole, so you can
set the position to be the same as another position; or we can refer to the
individual things inside it.  so we can pass it into a function, say, to draw the paddle, just passing the whole position in there; but if you want to update one of the
values, we can just update that specific value about the y position that we want to manipulate.  but there's still a slight issue with this sort of approach.  it makes it easy to
refer to things and we could have lots of these data structures referring to different things.  rather than having separate variables here, we could have a position
for paddle 1; and a position for paddle 2. so we can refer to them and have lots of them.  we can have one data structure which we can then have many different things for.  so we can actually group the data together, which is quite useful. but the problem with all of this is that
the date is completely open and we can write code anywhere in our program that
can manipulate it.  for a simple program like pong, having the data open is not a
problem.  your program is probably not gonna be more than a few hundred lines
long.  as the program grows, you're writing something bigger, then you have lots of
files accessing the data and you might change some things and forget to update part of the program. so for example, you might update one
part of the program to only allow ten entries rather the hundred and something, but the other part of the problem still expects a hundred, and so it writes over the end, walks all over memory that's used for something else. that's how you get a crash; your program won't work.  so, with object oriented programming we turn things on their heads slightly.  rather than thinking of the program in terms of the code we write and how it modifies the data, we think rather
in terms of objects.  so, what would an object be?  well, using our pong example - the objects in this game would
be - well we've got two paddles in here; so we'd have objects that would represent the
paddles; and we've got another object here, which is the ball.  so we can sort of see what might be an object in a program.  but the other thing we need to think about, rather think about writing code that
manipulates the data, we need to think about what these objects can do.  what
operations can we perform on them? so for example, on our paddle, we might have operations which make it move up.  we might have an operation that make it move down.
and that would be the same for both paddles.  and we could ask the object to
perform that operation based on input from the keyboard.  so the ball object would be
similar.  rather having operations to move it up to move it down, we just have
an operation says update your position. we let the ball itself work out how
its going to move around the screen.  the other thing we might have is
an operation to detect whether the ball has collided with a paddle.  in this case,
we'd say to the ball, have you collided with this other object?  so we'd have the two
objects working together to work out whether they've collided.  now i've described
that and i've talked about objects working with each other; objects having
operations.  how does this all fit down to the way it works with a computer?  well, to do that, we need to think about what an object is.  and actually, an object is made up of three things. so let's look at the paddle as an example to start with, and we'll think about the ball in a minute.  it's got some state.  and that's things like its
x position and its y position.  but you might also if you - taking this further - you might
have to be like the speed associated with it as well.  and they'll just be
numerical values, perhaps integers, floating point numbers, depending on the system they're using.  there could also be other
objects, or we could build an object out of other objects, but that's gonna be
advanced.  we'll look at that later on. so what we've got here is no different from the
data structures we talked about earlier. we've got some data and we've encapsulated
it together, and we can refer to it as a whole.  the other thing that makes it
different is that we also have the operations, and these are the things that
the object can do.  so if you think about our paddle, we said it would be able to move up, and we said it would be able to move down. we also said that you might be able to
draw it on the screen so we'd have a draw operation as well.  we might have other operations that we need to make the program work, but these aren't things that we're necessarily going to want do to the object like making it move up or down.  so we might have to have operations in ours to get its position.  so we might have a get position operation.  and that might be used, say, by the ball object we can detect whether it's collided with it or not.  and it's having these operations which makes a difference between a simple data structure and an object.  we think about the state as being the center of the
object.  so we've got that state.  that's our x position and our y position.  we'll keep it simple for now for the paddle.  when we think about things in an object oriented way,
we say, no, there's a defined interface that can manipulate this data.  and so you have
this sort of ring fence around the data. so you've got this sort of move up operation, the move down, the draw operation and the get position operation.  and the only way
this data here can be accessed or manipulated by calling these operations.  and these create what we call the interface to the object.  you can get its
position, which will give you an xy coordinate.  we'll have more to have it return that.  you can draw it, and you'd perhaps have to give it the screen you'd want it to be drawn on. you can get it to move down, and you can get it to move up. and so we now write our programs not in terms of manipulating the data,
but in terms of telling this object to move up or to move down.  what actually
happens is that when the move up operation is performed, there's a bit of code that we
specify here which updates the y variable and then it returns back to
whatever called it to continue working. so it's actually a way of thinking about, and a way of
structuring, the program. [offscreen] would it be fair to say that's a small program in its own right? yes; i mean, that's one way you could think about it.  the object is a small self-contained program that's in its own right.  so it's got a
move up, and a move down, it can be drawn and you get its position.  and then you write another self-contained program for the ball, and that would perhaps have a similar state, but it would have different operations associated with it.  so an object is actually made up of three things.  we've seen the state; we've seen the operations; but the third thing
we have is actually not part of the object as such.  but we also have identity.  and this is simply saying that we can have many objects of the same type.  so we can have one paddle, like this; but we can also - and i'll draw a smaller one for speed - we can also have another one with its state and the operations around it.  and this can represent the other paddle.  so we've got two objects with the identical interfaces:
one to represent the paddle on the left; one to represent the paddle on the right.
so the only thing that can alter the data is the operation on the object of a particular identity.  so if we wanted to access it, we say to an object with this identity, perform this operation; and that would then go and
modify the state of that object. as i'm sure you've guessed we'd have
another type of object to represent the ball, which should also have an x and a y position.  and it would have a different set of operations around it.  so, some of them
might be similar.  things like, we might have a draw operation.  but we might have a collide operation instead, and then this time update positions - that's really got an increase speed operation as well - let's have a speed value in there.  the two objects that represent the paddle of the same type.  they have the same state
associated with them, the same operations associated with them.  but this one is of
a different type.  it's got different state - it's got an xy position and speed, and it
also has a different set of operations associated with it.  and of course it has its own identity, and if we wanted to, we could have two balls in the game.  and generally, in most object oriented languages, when we write these things, we define what we call a class, which is
basically the blueprint for building objects that it specifies, what operations they have; and provides the code for those operations.   even though it acts on each individual object, it also specifies how the data is stored and so on.  and then when we create an object, we create a new one with its own identity,
with its own state, and then the operations can perform on that individual object. [offscreen] if we come to update our program, you talked about how that can be a problem with structures. [offscreen] how's it easier here, then? because we've got this
defined interface for the object, the rest of the program doesn't know
anything about how that object is implemented.  so it doesn't need to know there's a y coordinate or an x coordinate in there. all it needs to know is, to make it move up, it invokes the move-up operation on the object; or invokes the move down to make it move down.  the beauty of this is you have lots of different classes of objects that
implement this interface, and then you can drop in whichever one you want.  so you could have a paddle which is wider, which would just be different class of object,
and drop that in.  we could have perhaps a specialist paddle which was two paddles that moved up and down in sync with each other. and that'd just be a different class of object which you'd drop in inside.  and this is part of what we call inheritance in object oriented
programming is one of the things which can make it really powerful, which we'll look at in another video. over a long enough time scale, i think that human level artificial intelligence is completely inevitable. um, if your auntie hangs around for long enough and continues to progress in what it can do...