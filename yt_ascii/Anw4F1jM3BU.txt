today we're going to be looking at the difference between new and init in a nutshell which means i'm just going to blatantly or very simply show you what they do if you want to learn more about this there are plenty of videos on youtube but this will help you get started with understanding the difference and what they actually do so to get started i'm going to create a class called connection and connection is going to be a class that's dedicated to establishing an internet connection and we want to make sure that the user only creates one internet connection at a time because if you create multiple internet connections from the same device that might be a waste of time it might not even make sense in your program so we're going to create a singleton pattern with this class now first i'm going to create a private attribute called instance because we only want to have one instance of this class running at all times and then we're going to use the new method the new dunda method so underscore underscore new and first of all if you have code completion on or if you're using pycharm you're going to see it's going to fill out the parameters with a class with some arguments and with some keyword arguments but what's important to note is that we are working with the class here and that's already one major difference than when we are working with the init now what we want to check in here is if the class instance is none then we're going to create a new connection so we're going to say print and here we're going to type in connecting something that the user can see and here we'll type in class instance is going to equal the super call and we want to create a new instance from this class so we're just going to pass in the class here so now we have a new instance of the class which means each time we try to create a new object from this class it's going to check if this class is none and since this will not be none the next time we create an object it's not going to create a new instance but something that's very important when you use the new dunda method is to return the class or the instance so here we'll return class instance because if you return nothing then it's not going to be able to call the initializer you always need to return some sort of class or object so that's what happens if the instance is none if this is the first object we're creating else we're going to print warning there's already an instance of connection and we're just going to return whatever the class instance is so that's already the one that has been created so that's a very simple example of using new now let's create our initializer so down here we'll type in dev init and all we're going to do is print connected to the internet so let's try to create a connection here we'll type in connection because we want to connect to the internet and that's going to equal a connection as soon as we run this we're going to get connected to the internet we're going to try to connect and now we are connected but that doesn't really say anything about what we just did so let's try to make a second connection we'll call that connection number two if we run connection number two we're going to get the else block triggered because right now when we were trying to create this instance it checked that instance was done and since that was not the case it went to the else block and it returned to us the current instance now what does it mean if it returns to us the current instance well it means that we have the exact same instance for both of these variables and if we print let's say connection is equal to connection two we will get true because both of these points to the same object we're pointing to the instance that we created earlier the first instance so now no matter what we do if we try to create a new connection while we're already connected or while we already have a connection object it's not going to do that it's going to tell us there's already a connection so we don't waste those resources a more common example with the singleton pattern would be with a database you don't want to create several instances of the same database because that just makes things a bit more complicated but this example should get the point across so to sum up this example the new dunder method is always called before the initializer and it takes care of object creation which means you can actually include some extra functionality that modifies the class before actually creating the instance the initializer does not return anything as you can see and as you are probably aware of by now it returns nothing but it does help us initialize the object so maybe you have some sort of name you want to give the object or something else in the initializer you can do a lot of that setup but i'm going to show you one more example that should help you grasp this concept and this time we're going to create a class called vehicle and we're going to do the same thing as earlier we're going to use the new dunder method except this time we're not going to use the args and keyword args we're just going to add wheels of type integer and actually i need to paste in two classes which i do not want to write by hand so right below that i'm going to paste in a motorbike and a car these are two classes that i'm going to use for this example and all they do is initialize an object once a motorbike and one's a car but the reason i did that is because in new what we're going to do here is check if wheels is equal to two then we're going to return a motorbike if wheels is equal to four then we will return a car else or actually that should be alif else return super dot new and we're going to pass in the class again so we create a new vehicle class then inside the initializer we can type in def in it and here we need to include wheels of type integer so the arguments and the keyword arguments for new must match the ones of the initializer otherwise of course you can use args and keyword args which make it a bit more flexible for your initializer so let's change that back to wheels so everything is working and here we'll type in self dot wheels is equal to wheels and we will initialize this object right after so f initializing vehicle with wheels wheels because some cars might have a thousand wheels okay that's a bad example but some cars might have more wheels than four and we want to handle that if that happens so now in this example we have the constructor right here which takes care of the object creation so depending on what we insert for the wheels we're going to get a different object back but always remember to return something or else the initializer will never get cold and if we go all the way to the bottom and actually try to use this code we can type in that mb for motorbike is equal to a vehicle with two wheels and if we run that we will get initializing motorbike because up here it triggered the if wheels is equal to two and it returned to us a motorbike object the second example can be a bus we can say there's a vehicle with 20 wheels it's an interesting bus and if we run that we will get initializing a vehicle with 20 wheels because if felt alif felt but else worked so we created a new object which then triggered the initializer which triggered all of this code and if we use four it's going to initialize the car because a car in our definition has four wheels so as you can see using the new dunder method can be very useful with object creation if you want to have some custom functionality and return an altered version of the class or even if you want to implement the singleton pattern you can do that with the new dunder method which always gets called before the initializer but anyways i hope this intro to the new dunder method helped it's not something you learn immediately in python and i actually learned it just a couple of weeks ago so i mean that's already three years i didn't know about it or actually ever used it but it's always cool to know about these things in case you do want to use them in case you're looking for something a bit more technical m coding has a really good video on the technicalities of how this works but otherwise with all that being said as always thanks for watching and i'll see you in the next video