let's talk a little bit about encryption and specifically kind of modern encryption and how it works now before we jump straight into something like the advanced encryption standard. i wanted to talk about sp networks or substitution-permutation networks because they are the basis for a lot of modern cryptography?-?not all of it, but a lot of symmetric cryptography anyway. dave has done a lot of videos on things like enigma. enigma is a kind of classic cipher and it's a substitution cipher. just like the caesar cipher. it's just that its substitution is a little bit better than the caesar cipher so with something like enigma or the caesar cipher you've got an input which is you know letter 1, letter 2, 3, 4, 5 this is the message going this way and this is going to undergo some kind of substitution and turn it into another one which let's say is kind of ciphertext 1 ciphertext 2 3 4 and so on each one now there's a lot of problems to the caesar cipher - okay and there's a few problems with enigma, but one of the problems is but there's only ever a one to one mapping that is to say this character is encrypted and becomes this character and this one is encrypted. it becomes this character, which means that however complicated the substitution is to work out the mapping you really need to focus on these two characters alone if this cipher text was based on ten of these characters that'll be a little bit more difficult already so we could say that the enigma machine or caesar cipher has a block size of one right which is but it encrypts a block of one character into an output of one character right now modern encryption doesn't work. this way modern encryption has a block size it's quite a lot larger, right? certainly. this is a block cipher so a block cipher is something that takes a block of a certain size let's say 128 bits and it turns it into an output or ciphertext of 128 bits so what i want to talk about today was a very simple example of a network that you can make significantly more complicated and end up being the most used algorithm on the planet might not the one i'm going to show you so this is an sp network the idea is that is that what we want to do is combine some kind of substitution process changing characters for other characters with something called a permutation process swapping characters around xor in things to other things moving things about and that way not only do is the mapping between the input and the output confusing but it moves all over the place. so it's even more confusing technically, that's what enigma does though, right? no yeah, because every time you change it the map, you know, so so the yes a good question, right? so let's go back to this so what enigma does is it changes this substitution if we tick but it doesn't mean that this goes to this and this goes to this and this goes to this so it's still one-to-one it's just for the substitution is confusing and changes. so it's still gonna block size of one an engel, i guess will be better if i had a bigger block size, but i don't know how they would wire that up what we want is some kind of slightly larger block, so i'm going to have a full block substitution. alright, so i'm gonna have something called an s box right an s box i'm gonna do like this takes four bits of input so these are the bits might be the north or one or two one or two one or two one and it outputs four bits and then in it, i'm going to come up with some rules so when a five goes in let's say a seven comes out and when a fourteen goes in a two comes down right, and i can come up with some rules. so i'm going to make up some balls now i'm not going to draw them all in here because i've already want to have space so this is two to the four possible combinations so numbers between 0 and 15 right all zeros to all want okay, so let's come up with some rules. right? so for example, let's let's do all the inputs so in what north one two, three, four five six? possible to this bit. i think those are all the different combinations so i'm gonna use a different pen because otherwise it's gonna get confusing. okay? these are some rules i've come up with now. these are not particularly good there's a lot of reasons for this one is my xbox is too small but the other thing is that i haven't given i mean i've paid a little bit of attention to things not going back on themselves but so things like if a one went to a 10 and a 10 went to a 1 that's kind of invertible and that's some a statistically weaker but if you didn't do that, right? so there's a little bit always you should be careful about when you're designing these kind of things, right? my best advice would be to use the ones that have already been designed and not develop your own let's put a number through here. so let's put the number twelve in through this s box. okay so 12 is 8 plus 4 plus nor plus naught so 12 goes in and 12 maps to 5. so that's going to be naught 1 or 1/4 plus 1, okay so so this comes out as 5 right now this could be this could go into another mess box or just some other process, right? the idea is that you're just mapping numbers to another number now this on its own it's like a terrible version of enigma, right a number goes in and a really poorly masked number comes out, right? it's terrible because everyone can see this so, you know what this is you can just invert it. we need more than this ok. so what we do is we also implement some permutation. so let's list this contra permutation box a permutation box in my example it's just going to move things about so we're going to take let's say an 8 bit permutation box so that's going to be like this 1 2 3 4 5 6 7 8 bits of input 8 bits of output and then we're just gonna mix it up so we're gonna take that one over here and that one over here this is getting confusing i'm running out of lines okay, right i made that up. so i mean, you know, is that good? i don't know but it's not it's not important how good it is as a cipher so you would have 2 x boxes here - 4 bit s boxes for example plugging into one 8-bit permutation box so the outputs of these get jumbled about or mixed up here the way an sp network works. is it repeats? substitution and permutation over and over again. so i'll just draw like an example without drawing all the lines up again and then we'll go through using our permutations so you might for example have 4 bits in and another s box here 4 bits in these 4 bits come into our permutation box and go through that mapping which i won't draw out again, but that one right and then out come 8 bits of ciphertext in some sense. so let's put it on belen and see how it works. ok i've got control now pick a number between 1 to 5 5 way 103 okay, i'm gonna give you come about now before i break it 103 like let me get a pen a different pen so one. oh three. oh one 100 warms wand one, right? i checked because making a mistake will be two emerging now. so just do business box on its own first, right? these are my rules i've got here. i'm going to refer to them just sort of on the side this number here is four plus two, which is six so if i look in here six goes to eight so that's 1 0 0 0 so 1 0 0 0 like that 0 1 1 1 is 4 plus 2 plus 1 alright, which is 7 so i look 7 up goes to 3 eventually buy naught naught 1 1 okay, so i'm gonna start trying to i mean because i haven't drawn them in here. i don't know where they're going but this one goes all the way to the end. so this one comes down here. this one goes to that one apparently that's not great. that's not very exciting. so that's a lot. this one goes to here this one goes 1 across to here. i think i didn't i didn't separate them out not very excited. okay, i mean, yeah, it was mostly not that no i'll pick a bad number date. yeah it do you not know anything about my cipher i've got completely lost about which number i was turning on which that that one so one goes to there. yeah. okay. so there's one there one there yeah, we can cut this out and it will all look great. that one goes to there that one k so now you would program this up so you work quite as slow as me right because because aes for example can encrypt at 700 megabits per second. i can't i've done 8 bits and it's taking this way too long. okay, right. so this number is so 16 plus a 4 of 20 plus the wall is 21 21 so is this a good cipher? well let's put aside the fact that it's trivially decrypted all and say well 103 is not a lot like 21 so intuitively maybe right it's not absolute table now on its own. this is not very good this is called a round right and the idea is of what you would do is you would repeat this over and well over again and hopefully you wouldn't just be switching eight bits about you'd have a whole hundred twenty eight bit block and overtime bits from the very left it getting moves over to the vote right and having effects on everything alright, so this mapping becomes much much more confusing the other thing is that we've got to introduce a secret key because about a secret key if you know the code for this you can just reverse the process. this is not hard to reverse the inverse box is just a reverse lookup of this table and this permutation is just a reverse direction for all these wires so how do we introduce a key? obviously called something called key mixing. so what we have is we have our message alright, which is the size of our block. thankfully we're gonna put it through around like this round one and we're gonna put it through and - and then we're gonna get some ciphertext now that alone is not very good so what we do is we have our key aisle secret key and we expand it into a nice block of this length and we split it up to be let's say three chunks long right in this case and the first chunk is ex-ored with this here and the second chunk is xor dear and the third chunk in the edge sword here like this and that means that once you take the key away, you can no longer reverses process, but the key is the secret bit we all know how the s boxes work. we all know how the permutation box works but as soon as you take a key away, we're a bit stuffed way if you have the key decryption is really easy you expand the key right something called a key schedule and you start with a ciphertext you xor it with this bit of a key you go through the inverse of here you xor of this bit you go through the inverse of this you excellent this bit and you've got the message back so you can go forward you can go backwards all you need to do is change these light arrows to left if you take the key away you can't perform these xor operations which are going to be flipping bits and ompletely muddling around with the input so none of this is going to work right you'll be able to achieve absolutely nothing like i said what we don't do is keep our s box or a permutation box secret right because it will be easy to decompile the code and work out. what happened what we do is we develop really really good s boxes and permutation boxes and then we introduce a key schedule to mix our key in and then when you take a key away, you can't break it that's how a modern s network works, you've got two rounds there or they're usually more another different is usually more. they're not different, right? so typically you'd use the same round as usual rounds really good the number of rounds of use will depend on the algorithm the strength of your round function so a ees uses between ten and fourteen rounds the way it's designed is that you increase the number of rounds until you can't break it any more that's the idea if you use too few mounds they'll probably be some statistical mapping between the input and the output you might better work out how to break that cipher only one half if you just use a billion rounds then no one's going to do anything because they're all busy encrypting and it's going to take too long so you've put there's a compromise between how many rounds you use for speed and how many miles you use for security right and this? used in anything we can put our finger on now this is actually absolutely so so this sp network is the basis for the advanced encryption standard and the advanced encryption standard encrypts almost every connection over the internet right the one you're using now we'll talk another time about aes the advanced encryption standard, but it functions quite a lot like this it's just that they've given a little bit more consideration to their design than i have video cycle can being applied to every frame of an image it's gonna be little bit noisy why you're gonna have to take steps or tries to move that out yet? 38 billion hashes per second, which is why md5 is not usable in any sense anymore ever? don't use it. okay, is that clear yet?