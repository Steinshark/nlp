hi everyone in this episode we're going to start by importing the data we'll be using to train and test our network the brightness of each pixel is represented by a value between 0 & 1 with zero being black and one being white the images are 28 by 28 so that's 784 values for a single image these 784 values are stored in a column vector each image also has a corresponding label this is a column vector with 10 entries 9 of which are 0 with the one telling us which digit the image is supposed to represent this data comes originally from the emne starter base but i formatted a load to make it easier for us to load news in the series there'll be a link to download it in the description ok so i'm going to start by adding this file to my digit recognition folder and as you can see this is called m&s dot n pz and p said by the way is just a format for storing multiple numpy arrays so in the program we can load this in with an umpire dot load and then the path to that file so since it's in the same folder as the script we should just be able to use its name m nest dot n p zed i'll quickly run that to make sure that it's working for some setups you may have to use the absolute path here but if you're having trouble getting that working there'll be some more info on it in the description ok now i want this file to be closed automatically when we're done using it so i'm just going to use this with statement share and assign this to a variable called data and now inside this block we can get the arrays from the data file so if we want to see what the data file actually contains we can quickly print out data dot files and i'll run that you can see we've got training images training labels and also test images and labels as well as validation images and labels will just be worrying about these first two for now though so to load these in i'll come up here and create a variable called training images and set that equal to the training images from the data file same thing for training labels that's equal to data with a key of training labels all right let's now make sure that this is all in the format that we expect so i'll print out training images dot shape and also training labels dot shape so now if i run that we can see we've got these 784 by 1 vectors for the images as expected and there are 50,000 of them in the training set and then we've also got 50,000 of these ten by one label vectors so let's try just printing out one of these images i'll print out the first one run this and you can see we get this column vector and if we scroll through this you can see all of our brightness values here between 0 & 1 and let's print out the corresponding label so your training labels and that out and it is here watch zero zero zero zero zero one that's in the sixth place that means this is an image of the digit five now if you actually want to view the images you'll need to download something like mat plot library and i'll just very quickly show how you could use that so we'll import mat plot library dot type lodge and i'll just call this plt for short and then we can say plt dot m show and we'll pass in one of our training images so i'll just pass in the first one again and we need to reshape this into its original 28 by 28 form and we'll just tell it to interpret the values as grayscale values by saying color map is equal to gray finally we just need to say plot dot show and then we can run this and that will pop up and it is indeed a 5 as we saw from the label i'm not actually going to keep this display code since we don't really need it but that's how you could do that if you wanted to all right let's not try passing this training data through our network so i'll set the input layer size to 784 and we can delete this dummy input we are creating earlier since you've got the actual input now and then i will pass the training images into the prediction method i'll then print out prediction dot shape and if i run this you can see that our predictions are 50,000 of these 10 by 1 vectors so by comparing these to the training labels we'll be able to see how many the network is getting right let's try printing out just one of these so print out the first prediction so remember we're interpreting each of these numbers is essentially the likelihood of it being a particular digit so we'd want to look for the highest one here which i think is this last one point six two so we'd say the network is predicting this image as a nine which of course we know is wrong it should be a five but that's what it currently thinks of course if we run this again we'll get a different output because remember the weights are being randomized at the start by the way if we want to know which of these values is the highest we can use this function called arg max passing in the vector and it will give us the index of the highest value so if i run this now you can see it actually guessed it right this time as a 5 if i run it again knots guessing that it's a 2 let's now go over to the neural network class and electric rate a method to print out the accuracy of the network so i'll create a method print accuracy and this will take in images and labels and i can start by getting the predictions so it will just call self dot predict pass in the images and now we want to compare these predictions to the labels to see how many we got right so i'll do a list comprehend saying for a comma b in zip predictions comma labels and then for each of these pairs i want to check if the index of the highest value in a is the same as for b so you can say numpy dot arg max of a equal to 9 pi dot r max of b so we now have this list filled with true and false values which can also be interpreted as ones and zeros so we just need to sum those all up to get the total number that were predicted correctly so i'll say num correct is equal to and we can just use the sum function and pass in the list let's then have our printout so i wanted to first print the number that it got correct out of the total number that there were and then the accuracy as a percentage so now we say dot format and repassing the values for those so num correct and then for the total number you can just pass in the length of either the images all the labels they'll both be the same and then for the accuracy that will be number correct divided by the total number and then just multiply that by a hundred to get it as a percentage okay let's save that go back to the program and instead of running this prediction i'm listening to say net touch print accuracy passing in training images and training labels let's run that and see how it does so it's getting six thousand and twenty out of 50,000 correct that's an accuracy of twelve percent for the current weights if i run this again yet seven percent accuracy i'll run this one last time and you can see we're averaging around percent accuracy and since there are 10 possible labels this is exactly what we'd expect for random guessing so in the next episodes we'll be looking at how to train the network to vastly improve its accuracy but until then cheers