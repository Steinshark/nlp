so my my name is rhino grim only a few words about me i should not speak so loud only a few words about me i'm since 24 i don't know it's exactly more since 24 i give hiding classes i really started with the one version you see it's a little bit old okay since around 28 i give c plus plus classes since 2016 i'm an independent trainer mainly for pi for c plus plus but i have a python history and sometimes i talk about python because i love both languages and only one little advertisement since april i have a worldwide mentioning program running because i don't lifted a three day classes is the solution to our problems we need a life learning process or learning during the recital daily workload some things like that so if you're curious i'm happy to answer but anyway so you know i have a long python a vlog c plus plus story and what i now want to talk about how you can talk from python to c plus plus or c forwards backwards and i want to give you an overflow meaning i start simple and each time i add a little bit more so let's start so first of all what is extending extending means essentially that you call from python into c or c plus plus and essentially it consists of three steps you have to convert the values from python to cc plus plus have to do your stuff in cc plus plus and f2 converter values back and when do you do it in the opposite direction it's called embedding it's not so heavily used but it's also sometimes really really has a benefit this means you convert the data from c plus plus to python and once more just the other way around most of the time you do extending okay first of all why do you want to do that of course you know this rule don't repeat yourself you have something resisting in c plus plus why should you implement it on small python just use it second point when you do python programming and you have a performance issue and you you measured your performance bottleneck what you often just do is implement this stuff as a library as a shared object and just call it from python and call inside the c plus functionality this is an easy way to overcome performance issues python has a serious issue honestly it's not so serious but it has an issue this is a call called kill global interpreter log i only speak about a c implementation of python forget about the other ones global interpreter log this means c has no idea of concurrency it means when you call from python c which what you do underhood only one thread can run at one point in time because there's a global lock and maybe you want to overcome it and just you could do it by implementing the stuff with mighty sweating semantic inside in c plus plus for example third use case for this stuff and the first one is something i will give a presentation in three four weeks which is also interesting assume you have big big data and you have a lot of c functional to do it in the data and you want to visualize the data honestly this is simply way easier than in c plus plus you can use the jupiter notebook or you can use a replica this is extremely convenient so you write a python wrapper to import this stuff inside in in python and then you can play with a matte plot clip or what else this is also a nice use case because once more you are way way way more agile when you do python but you want to do the hard work in c plus plus so for use cases let's continue i start with extending most of the time it's about extending and we start simple simple means first of all we need a shared library once more i start simple and then i use different tools how you can do it and there's a reason why it ends with pi by 11 but anyway what does simple means here is the stuff i want to create a shared library out of of course you know it from yesterday this is the old version of hello world but anyway this is a c hollow word function header source file and now i want to invoke this sea stuff from piney first of all i need to build a shared library or as all or how you would call it in in windows the dll dynamic link library all the examples i show you are builded with gcc on linux but i also did it with on windows this is pretty similar sometimes it's a little bit more complicated but anyway you can do it on each platform all what i did here you can also use on windows to make it short so what you first have to do is to create positioned independent code pick then create a shared library and only to see that it works i created out of this shared library executable and you see it works i can compile it and now we have a hello rod i use just this shared library but of course from c but we want to do python that's the reason why we are here so the first thing which you can do is you know titan has a statement which is called batteries included oh let me let us make a small pull do you know how many libraries are included in the python standard you just installed three dots the newest one is 3.11. honestly i don't know it but i can say at least more than who who who has an idea how many libraries fighting has more sorry only the standard i don't talk about tip understand that more than 300. the issue of biden is not don't have it but to fight the right one or to which one you want to use and this is one you should know this is the c types library this is a library which is built in in python we have it since two so we have it and this library allows you directly call from python shared object or dls devil we don't have to do anything you see types this is the rapid rebel stands for read event print loop it's a shell with a python interpreter inside and now what you can see i can just load this shared library i built it before you see that's all and then i execute it in a qualified feedback because i imported it qualified this is all what you have to do but of course when you have bigger project this is quite tedious but anyway here have a look what you can do this same thing works on windows you have to use a different instruction to load it you load the lipsy because why because slip c the site see those ellipses way faster than python no i don't know why but anyway you can do it you load it and then you can invoke lip c time these are the second since the i if you don't believe me calculate it i don't know it anyway you can directly use printf this is a this is a binary string similar to an sq string hello world you can use printf and here you can say ah this is a integral this is a floating point number and here you see something special tightened by default only supports integral data types in streams it adapt is what neither one of them therefore you have to specify using c types hey this is a double please interpret this as a double this is what you get with c types now you can display it but you can do it even more sophisticated you can specify a function prototype arch types and here you can specify the types you want to have with the next printf call you see char pointer chart pointer int double looks a little bit dark and anger notation i hate it but anyway and now you can display it you see string in double here we have it once more this is built in nothing i would have to do for this the same goes for return value this is string anyway this gives me the string until the first appearance of the letter w but when i don't specify the return type it assumes it's an int and of course this is not what i want to have therefore i have to specify the return type and you see it here let's type hey this is a c string and now we have it and now you can do both of it once more this is a little bit tedious but it works when you only want to invoke a few members a few things on your library this works this was the first step the most no i'm not sure if this is the most native but anyway this was the first step let's do it a little bit differently do it natively i strongly suggest that you don't do what i do now but it gives you an idea what's happening under the hood which is for me i think essential now i do it natively once more this is my hello world i want to have a module and i want to invoke it from fighting and this is the extension module you see 27 lines only the important ones this stuff i i compiled this stuff with a c compiler and then i have a module which i can invoke from python now let's analyze it first of all python.h this gives me the python function the the c functionality essentially you need this this special wrappers to come from privacy and forwards backwards then i i declare the function i want to invoke from python and this is by the way home of you knows python and you know in python the basic data type is object object and this is the c point all to it therefore you see here always pi object this is the native mapping okay here you specify the c function this is static this is the method table this other function you want to export i only do it with one here i define my module consisting of this method table here's the definition of my c function and here this is involved when i import the module when i say import hello world or something like that this was all of you let me dive into the details python.h you get it when you install python slash dev then you get the setters this is unnecessary must be the first header a few c headers are included in a few additional stuff this is necessary all visible symbols starts with py why written with small or capital letter this is just a naming convention it's a method table you see this is my method this is the c function name this is the python function names this is how i want to rock it this is this is how do you the convention for passing arguments and this is the doc string how many of you know what a dog string is in titan or as we would say how would you call a dog string in python than the dog two underscores before talk to underscore after short double under by shorter thunder in finally we call it thunder dark okay now this was extremely tiny specific there can be mobile s1 and here this is the sentinel here this is i only export one function server and finance it next point this is my module this is my module let's see what i do this is the name of the module this is the documentations thing of the module so then the dock of the module i always always use the only minus five one okay and this is the name of the muscle table we defined before the model consisting of the method table and now the final step when you import the module hello world by the way you have two extremely careful to follow this naming conventional rules if not you get a lot of crazy errors so this exactly has to be called such as the model hello world you see these are really really aki arrows sometimes on windows they want to have additional underscore and so this is always a lot of fun so and this is the module it returns a pi object as always here's initialized and when you import it this would be returned this is your module this is essentially all but this is only a hello world how would you build it of course python battery is included we have this autos which allows you to create packages and this is a minimal description of a package it's not minimal a few things are not necessary what should be part of it is of course the name of the module and second that is the extension consisting of this c file and when you now call python setup dot poo this file is by the way called setup and you install it locally build extension in place you have it you can use it so now we did it natively let me just have a look at my clock because as always i'm pretty fast no and just in time and now i can import my module because it was installed in the same place if not a compiling compiler would not find it i can invoke it i can look inside and you see here's my hello world function by the way in python under the hood all is a dictionary and what is that the keys of the dict no more and then then i can use this key and use it as a function and therefore i get to recite hello world okay this was native i don't suggest that you do this but it helps you maybe to understand error messages to get an idea what's happening underhood let's go one step further i looked it up a few minutes ago there was actually a release a few days ago a new release of swig is a thing which makes this product process kind of automatically it's pretty old it's from 1995. so pretty old it's also also is david beardsley by the way if you ever want to listen to interesting talks listen to talks about david business unbelievable how how skilled he is but anyway here's the original author of this took tool stands for simplified wrapper interface generator this means means this tool allows you to create interfaces of interface definition description files sorry for this word and they can be created for different programming language including python does any one of you ever used swift isometer in the past it was heavily used but nowadays we have better tools this is even a quote from from david anyway this is the definition or this is the declaration of my interface this is all what you have to do this is literally copied into the corresponding creating file create file and this is what this this interface exports you see hello world not more this is a dot e file and what you do to have to do is extremely simple you say civic minus python hello world.e and it creates two different files dot py and dot rep.c file and when you look at the numbers you see the c file is a little bit bigger here under hood all the stuff is done which i did before essentially despise stuff by object and stuff like set and passing and brightness of course big interface to talk directly to see because it's based on c and what you do is you invoke essentially this module and this module is wrapped through this c file and this is what's happening underwood so this is the low level wrapper and this is the high level which you would import from python you would say import hello world in it immediately wraps to the c implementation which makes the magic which a little bit explained in my previous slides how does it work of course we need a setup.p file here's the implementation you see it's not magic just a simple see stuff by the way the next step i i put a plus plus behind because we have a c plus conference okay and this is what you do such as before and then you say import world and now when you say dear you see there's a little bit of strange things inside which are usually not inside but anyway at least we have a lot which we want to use and that's what was the step i can could essentially use the setup.pi file from from the previous example okay this was big and now comes my favorite this is pi point 11. this is but based on boost python but without the boost dependency is essentially it's called 11 because it's based on c plus plus 11 but such this week i forgot to mention it it supports many features up to 20. i'm not sure if any but i think with 17 we are quite good so it's fully implemented in header files based on boost python and you can extend and embed i only will now extend but anyway you can do it in both directions call from pi dc and also the other way around by the way not c c plus plus now we talk about c plus plus what can you do forget about it anything it makes no sense to put all the features i know about c plus plus on the slide and have a look how nice this looks i don't know why and that there's a reason why i now use the function at you see it in a few seconds this is first the c declaration or you can also say let me say c plus plus because underwood mingling is happening so it's c plus plus essentially this is a simple function and this is my python binding this is all to get the functionality f to install it and i have to include it this is called by import just call here here this is my module m and i bind something to it what do i bind to it i say from pipe i want to invoke it which dispatches to the add function here buff and this is the doc string as before this is all what i have to do the building is a little bit more complicated but they also support the cmake file which makes it happen out of the hood but honestly i had the issue in the first it tries with windows before i found the cmake file because this linux you have special commands and makes it quite easy but we don't have to miss windows but anyway there's a cmake file this makes this step happening okay now i show you a few features and then i show you how it looks like when i use it in rebel and then i do really something c plus pluses i create a class to do a little bit of a class hierarchy and to see how easy this is first of all it's a convention to use pipeline with this is here just to know it because it's a little bit long name second it supports keyword arguments home of you know what keyword arguments in python are a feature we we we desperately want in c plus but we don't have what are keyword arguments in python who knows it this essentially means that you have a function which says the first argument function parameter which is called first second is called second you can call them by name this is extremely convenient in particular when you provide default values this makes it extremely convenient let me say a joke in c plus plus i would say having a function with more than three arguments is a code smell in in titan we have for example the the the module sub process for invoking creating sub processes do we know how many arguments this construct has more than 20 but you don't care you have only to specify one or two you don't care in c plus plus this would be horrible imagine a function there's 20 arguments you specify the first one then you have to repeat all the default arguments which were written in the declaration this is crazy but not implied so what you can do is the following and by name and you can also provide default values once more i implement the ad function and now it comes to something which is really really crazy when you reach your overload and you think about title is something here feeling strange for you what did i say before in python all is addict a class is also the member functions are keys in the class dictionary to say it specific it's called standard understanding and you know what what is key of addict sorry for this that the key can only appear once this means in python we don't have overloading of function even it's even worse even we have a collision between attributes and function names that can only be one name because under what it's addict if you don't like it think about another map it's the same essentially and you know what we can make python more powerful using pipeline now we can have have a function sum which takes two arguments and three this is not possible in pine but now it's possible because it's mapped to a sum function in c plus plus taking two or three arguments this is for me honestly crazy titan becomes more powerful with pi binder 11. and of course we can have attributes only to be completed now let me try it out i say this time i invoke it unqualified you see by the way you should never do it but i did it only for presentations from function import star now i can invoke them they are part of my global namespace and i can invoke them globally directly i can say it i can use them by name i can use them without arguments because they have different fault values i can invoke some with two with three arguments and of course have two attributes in my module okay now let's do a little bit more or thingy this is a class human being and this is the binding for it or pi bind 11 binding for it this is the entire stuff of course rich in production code you have two files but anyway this is all this is the entire functionality you have a human being it has a constructor taking a constitution graph it has a member function which comes to turn a constraint graph enters a members to string okay i use this abbreviation here which i already mentioned and this is my binding human this is the name of non module this creates a class i bind it to modules you see mn this is the day of the class and here's something interesting this is a a kind of describing this is my constructor do you know the constructor in python is called danda in it dunder you know i'm lazy underscore underscore in it underscore in this in it and this means this is my constructor in python and it's dispatches to the constructor in c plus plus having this signature and additionally you have a member function get name this is the name from python initiative speeches to this function of this class here buff or member function you see this looks extremely how should i say readable or understandable okay this is also something which i like about pipeline 11. who knows what thunder wrapper means can you say it just cry on earth if not i could do it maybe it's anyway thunder wrapper is a kind of output operator for piking this is when you want to display something in a scientific note scientific way or exactly you overload done the wrapper when you want to do it more human readable your overload thunderstorm so once more and have a look here i define heal done the wrapper which x which is the patch dispatch to a lambda this is extremely convenient so now my data type supports displaying in the rebel or be to be displayed in the rebel and when it when it's displayed it says human being and the name of this human being h dot name this is extremely convenient i just annotate a lambda of course you could also you could also annotate any coralville i can have attributes which are read write they could only be read or could only be right but here i used to it right what i can also do is i can do inheritance i have a class human being such as before and now i derive woman from human being and it has the same constructor also could start to take string this looks extreme for me it looks you just tweeted and you know what's happening it is way more sophisticated such as the hello world from before okay let's play with it i once more imported unqualified from human import star maybe you don't know beatrix it's my wife anyway you see beer woman beatrix so i create a woman i invoke the constructor now i have a beatrix when i display it under in the rebel done the wrapper is called which i mentioned before and down the rebel what does thunder rubber do human being h dot name and this is exactly what we see here human being h.e then i display the attributes of this class once more this is our only keys you see there's a there's for example here the standard where's my dunder thunder wrapper i forgot to mention i also implemented on the string but anyway this is this this is the way python implements operator overloading it's heavily used in python but it works a little bit differently what i do afterwards i display the family name because it's sweet white i can also do it by invoking this member function get name i can ask for the gender and you know what why i get this strange method strange answer because gender is a function not an attribute therefore it's just the place hey this is only a function to use it as a function of course i have to lock it and here when i say print beer this goes to the thunderstorm and this is the way i implemented it i forgot to show it to you so it just works the main point here is the following when you see this program you have no idea let me see you have no idea that underhood this is c plus plus functionality which is just triggered even the attributes inside i see here nothing special this is all usual stuff yeah okay as always i'm too fast but anyway any questions so far okay then let me because i'm too fast let me say a short let me explain a short story about embedding what i do now is extremely straightforward so but anyway let me say a short story which what we did around 2022 before boost was created or boost pi boost python was available in my company we had a big simulation software for car crashes and this is a lot of data therefore we had a big big qt or cute anyway how we would call it application to load the data have a lot of different buttons and so play with the data and then this was it this was supposed to chop you know what they did i didn't do it this was one of my colleagues and i just used it what they did was the following say started the qt application which is of course c plus plus they each c plus plus each thing they did on the ide was was written down as a python instruction so you created out of c plus plus python instructions then afterwards you'll you let run as a purifying script to make it a little bit purified a little bit and afterwards you can start the application directly from python and you can automate it therefore we use this tool to automate our tests algorith tests therefore we loaded other data sets because we can and this was really how should i say it yeah extremely interesting use case and this is what you can do with embedding you can embed and python interpret into your c plus plus application and afterwards you can from your python interpreter from the rebel the sound switch but this is possible and we did it okay but anyway i'm too fast embed python there are essentially three ways to do it you can just execute a string you can execute a module or python file or you can execute functions once more now we do it the other way around we have see and we want in this case let's see and we want to call from c python first it's extremely easy once more i did it despite it was jesus seeing the examples the gcc in windows the examples are with gcc on linux here's what i have to do i have this is a c program i have to initialize and shut down the pyth interface this is all what i have to do and here i you see pi run this is stuff which we got from the spine.h file and here what i do is i just execute this string here important print times c time you see these are pine statements and when i compile it and when i execute it this happens showtime it's not so interesting but you can do it so i started the c program which triggers a pipe which starts a python interpreter does some python thing okay what can i also do i can do it i can let run a module this module is called short showtime.p and this is what i want to invoke from c now the almost the same stuff but inside the module and what i have to do is the following oh wrong button one small python.h i need the c header i initialize a shutdown the interpreter i opened a file the file i check if this opening was successful if yes i execute a python file and i close the file the end time module just execute and now to the most sophisticated part in this script is a little bit see file is a little bit more sophisticated i have it but i i don't have it here as part of my slides and now i want to do something more complicated this is a python script having foreign we should count correctly three functions faculty sum and product first of all i display you you know the syntax this is pretty similar to the c plus plus format string syntax other way around format string is based on this syntax but anyway what i do is i just display return faculty off and what is here inside so and and then i calculate the faculty using this function tool function which does a uh yeah which calculates the faculty of a function by work by by doing recursion by the way we have reduced in c plus since c plus plus 11 before c plus plus 11 we call this accumulator just that you learn also hear a little bit about c plus plus okay then i do a little bit of some in that real little bit of product and this is now the python function i want to use from c here's how i use it i will explain your details later this is a c function which invokes this script from before and says perform a faculty with the argumentation so what should i do to make this happen to make out to run out of c titan second this is the output produced by python and this is the output produced by c and the result here is calculated by python what do you have to do here are the steps let me see okay i have it more clear first you have to read a command line of course we have to read from see the command line with a lot of this pi instructions then you have eggs eggs have to extend the swiss path search pass is the module search pass in python and i don't know why it should be but in this case it will not look in your local directory where you invoke the c function therefore you have to extend this pass this pass is underwood a list and you can extend into a social path things felt you have to import the python module of course i only specified i want to have it you see i only specify i want to have it my math second no second no force and more anyway you have to pass the function arguments this is strange photos then you have to call the python thing and then you have to use the results from the python function in c these are the the steps you have to perform and here's here are more details you see all pie first i import the swiss module because swiss hester function path which gives you access to the module search path then i extend this path with my local church you see the point here which should be part of this pass but in my case it was not i don't know why then you have two important pipe modules you see out for for one until you import this pi import import next you have to pass the function arguments command line arguments and here pylon from long what you do essentially here is let me think about it you have it from c and you want to prepare it for python you have all to think in which direction it goes then you call it a titan functions you see python from here i'll drop off as it was before and then you display the result in c which you have from python p-value p-value is created here and now you have it in c but this is underhood calling this fighting thing and this is embedding so the other way around and of course this is a file of 40 50 lines but essentially it looks this way okay now i have an issue because i'm already done with the stuff i want to tell so i'm a little bit too fast anyway this was extending embedding i strongly suggest that you use pi byte 11 when you want to extend something because it's extremely convenient it even people are unwolfed in this project which gave presentations here such as boys shelling which may few of you may know and it it's extremely easy extreme convenient extremely readable and extremely powerful what should i say and it just worked out of the box the only issue i had was the build process but after i found cmake by the way home of you used p bind 11 in the past what was your experience now we're on the open question and answer face any addition to my remarks about p.11 any things which didn't work the way it should work okay i also gave you the example about embedding it was extremely simple example therefore i wanted to give you an idea what you can at least achieve think about this example automate testing of course in c plus this is not an easy job anyway so once more i'm done mr stuff i wanted to tell you i'm a little bit too fast i don't know why no no it's always maybe okay for me so i'm open to questions just do okay thanks a lot okay i have a question so before you start talking about embedding python you mentioned acute application yeah and my question ties into that i wanted to ask you if you're familiar or heard have heard of pi side cute for python hi what once more high side so pi side like the left side of the room cute for python which is cute's own solution for extending an embedding python for this closure i'm i'm from the cute booth i just start i joined that team that works on queue for python a few months ago so ulterior motives for the question no astonishing i don't know it but anyway what i often did in my past was to use piquity this was only yeah i think between fighting and cootie i did in my past working for python is pretty similar to pi cute so i'd say piques are direct competitor but the idea of pi size we have so we have automatic we have a binding generator you have a we have a type system you have an xml5 where your specified type system you you specify how to which type maps to which type or if we have a function signature how that signature maps in our signature you can inject code into the for handing over ship from python to c plus and vice versa and then you can generate the by you can generate a wrapper you compile a wrapper that is then compiled with a library and then you call from c plus plus it's the the binding generator is not exclusive to q so you can use it for any other kind of okay library a good point i forgot to mention of course this binding is worldwide use this is one of the reason python is the success story regarding programming language of the last 20 years because underhood you have always extremely fast but maybe sometimes a bit ugly c plus plus stuff but now you have panda you have you have this numpy this entire numeric stuff which and this is i think titan is now the i'm i'm i hope this is an english term frank we like the language you use when you want to create a binding you always start with binding do you have to add something but i think huh do you have to add something but i think this is also what you see titan is the language you support when you want to add yeah then you want to open this language to this library to something else yeah no i agree i mean python is such a vast repository non-pai skype exactly disk ai stuff into this is all based on on the hood you have c c plus plus stuff but you have an extremely nice python layer we'll be ashamed to keep those exclusive to python right so why not allow why not allow other languages to use them yeah so i agree the microphone thank you at least you can see for my talk how easy it to inject even titan supports it natively we see types so hi thanks for the talk very interesting it's really straightforward i have a question yeah even with pi band you have some boilerplate to to write and i'm just wondering if there's a tool like swig for example which maybe you give it just a class definition a header and then it's outputs yeah most of the boilerplate already generated and then you only fill the holes i i don't agree with you honestly we think there's a lot of things you have to do you have to do a lot of additional how should i say it a special instruction to make something happen here but despite value level i've i think we are quite close to the minimal stuff we have to do i think maybe you think about an header passer which creates you something out of that or something like that yes exactly something like this i hmm you have to write it now you have to do next year you can give a presentation here so i don't know it okay thanks in the back would be a nice idea by the way there's one which one pie okay just as binding something okay pointed to your others and dimensions and on which c plus plus version is based on i don't know no sorry here too late so he just he he don't know it sorry and but this sounds interesting this would make this thing a little bit easier but i i don't know it and i don't know how how good it is what it supports sorry i have one question regarding debugging can you recommend like or what do you use to debug the control flow between python and c plus plus so good point so far i never did it so a good point i cannot suggest anything but so far i had no issue is it good is it bad i don't know well sounds good but on the other side it's not an answer so what should i say okay i was just curious for me it's extremely intuitive honestly and when i would have time i would really in the future look inside this this implementation of pi by 11 because i'm but i'm curious about which c plus plus techniques they use underwood but i assume it's pretty sophisticated i have also to admit i'm a c plus plus expert but i'm not the python expert anymore such as i mean c plus but i'm at least good enough to give glasses anyway yeah thanks for the talk we use boost pyth network and we always wrap c plus plus classes and my question is how do you deal without parameters or functions what do you mean by out parameters or functions what is special in this regard if you want to wrap a c plus function which has an out parameter and you want to get it in python after you called the function we only found the solution to return a basically transformed list containing this out parameter can someone help me i'm not sure what he means you you noted do you know what he means can you could you help me for example a non-conscious reference parameter which are part of the return statement anyway what is the issue i don't get it ah we call them in out parameter not out parameter we call them non-const alpha reference you mean yes we call them in out parameter now i have it i'm sorry an out parameters gear for me but now at least i understand the question but i cannot give you the answer on it is honestly okay but once more officials they're called in out parameter this is a non-const l value reference in vector which you modify inside intercaller should see your modification and you have to do it by non-constant l value reference because you want to modify it and it's expensive to copy something like that exactly i know there is no no sorry good point i will look it up into it but today i don't have an answer and this is an issue with boost python boost biden the issue is that we have to transform the function to return basically a tuple or something python 2p python list so that we get all the out or in our parameters ah okay this is a little bit i'll cumbersome anyway two weeks ago i met steve but now it's too late boost operands okay good point but i i will look it up so essentially in our parameter in pi by 11. thanks for the talk we saw some cool magic with converting like was making object-oriented code but does that also possible to make something similar for template functions or template classes look of course you can also do a lot of stuff with templates and i would probably pause about the code from python i mean honestly i never did it but this is just written in the documentation you can use it and by the way it's based on titan boost on boost sometimes use a few templates i assume this works anyway i never tried it out what i did was i started simple just want to describe the process and i ended with pipeline 11 and this is what's so far i tried out and worked out of the box okay cool there should not be an issue i only know that in speak you have an issue with templates you have to explicitly instantiate them but in by the 11th they will not mention this therefore i don't think there's anything here so sweet also supports c plus plus but they do it a little bit more complicated okay thanks as far as saying no the python has a reference semantic python has reference cemented down it's a little bit more complicated it's gone okay so the question is is it possible to bind non-copyable types to from c plus plus to python like a unique pointer for example you can do this unique pointer you can do it with a you can even do it this week so they supported i so see no reason why but you say reference semantic i mean if you copy then this object inside python what will happen in c plus plus code once more how would you start you start from python and what do you want to do so i i start with c plus plus and i have an object that contains a unique pointer as a member and then i wrapped this class and propagate it to python then in python i instantiate this class and then make a copy of this object but since inside there is a unique pointer in c plus plus you cannot simply copy this object and if i copy it in python will be a reference semantic this is a little bit complicated because here are the language is a little bit different python first of all python reference semantic it depends when you have immutable data types such as numbers such as strings they have copy semantic so when you assign one to the other you get a new copy of this thing but when you have multiple things such as sticked list or classes they have reference semantic and therefore it's a bit more complicated in python or different but this will not answer your question honestly i cannot give you a definite answer here but once more python is here a little bit special and the reason is you always have to consider is something mutable or immutable and either it has copy or it has reference semantic either you work on the element when you want to change it or you give something new back mona functional style such as full string thank you sorry now you see here here my limitations hi so maybe i didn't notice this during the presentation but i have a question about embedding python and the question is like if you are building this your executable then the python interpreter is actually like linked to your executable or are you calling the interpreter that's already installed on the system or what is this yeah of course you need a pi interpret without a python project work and it's called so it's the interpreter that's already installed on the on the system where we are running the executable when you execute the system you have to call it it have to be found okay thank you but you can do a lot of crazy things with a python bit what we often did in my in my past was i had customers who want to use python but you know in this specific companies you cannot install anything what you can do is to make a thing which is called frozen python kind of which it means essentially you build i have a pipe model and you also includes a python infrastructure and now you install on the customer site in main memory a python interpreter so not on the locally so it what you get essentially is a zip file which and which uh which is in place expanded and it plays invoked but it runs in main memory therefore you can use python without the installation and probably you can do some crazy things also here but i don't know how typically called frozen but there are many projects which uses this technique i'm not sure what is nowadaysus i used it 15 years ago but it was their possible yeah so my question kind of follow-ups on that and you kind of asked could you just get an executable with just everything and statically link in the whole python and then you can just give it someone and say okay this is this is exactly what i mentioned but you you meant you have to deploy a zip but you also have to the sip  which is in place expanded then it invokes some magic stuff inside i i don't know if this is now more easily be doable but there are additional tools in python which which detects which of the pied modules so actually need to let this run through get a minimal executable and it looks like executed but it's a python run time with your application and which you which now runs in my memory and this for me feels like executable it's a little bit of magic i love it okay thanks and what's what we had to do it quite often in daimler on dialogue for example because you could not install anything and a process to extend this infrastructure with a patent runtime would at least take years in these companies okay he said we should stop which is also not bad because now we can eat something so thank you