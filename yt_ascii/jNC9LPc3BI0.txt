i've got a question for you sean how many things can a computer do at once yeah well i i feel like is i don't know if you've ever watched qi where the big bell goes up above your head and go you've got it wrong for viewers you've not seen as a quiz show where yeah that you you're lulled into answering the obvious answer but i'm going to say only [music] one only one thing at a time well that's a great answer and certainly was true in the sort of 80s there are different ways that computers can do more than one thing at a time there's a sort of human level thing where the computer is doing one thing at a time but it's switching between them so quick that you don't notice and so as far as you're concerned you've got your word processor over here you're playing your music and all that kind of stuff you're like hey it's doing all these things at once it's not right then modern computers have got actually got separate cpus inside of them and so it can actually be doing two completely separate things at once because you've got one process are doing one thing another processor doing nothing that's great we're not going to talk about that today inside of one cpu itself so just a single processor with a single stream of instructions that's come down our little pipeline how many things can it do at a time and again you might think once well we have talked a little bit about some of the processes that are able to look and see if there are two instructions coming down one after another that aren't related to each other then actually i can hand them to two separate parts of of the chip so that i can do an add and a multiply at the same time or two ads if i've got two adding units or things like that and that by and large is how cpus nowadays work so the laptop that i'm on right now talking to you on has actually got 10 independent units in each cpu and i have four cpus in the laptop so in theory i could be doing 40 instructions like actually executing them at once and that's not even including the ones that are all queued up in the pipeline ready to go so that's one of the reasons that computers have felt and gotten faster over like the last decade or so even though you've probably not noticed that the speed you know the the gigahertz of the computer hasn't really gone up all that much you know we've sort of stuck at two to three ghz but somehow the computers are getting faster still and that's because they're getting smarter about doing more than one thing at a time so how on earth can the computer do this right it's it's maybe true ral if somehow you can look down the pipeline and see that there are two instructions coming that have been decoded and turned into some kind of representation of like what what i need to do and one of them is an add with a and b and the other ones a multiply with d and e so like they don't overlap with each other maybe a very simple circuit can say well okay i can run those two things together but then as soon as something needs the result of the multiply or the result of the ad now suddenly the chip is like well how do i know when i can run the the next instruction because i've got this sort of tangle of instructions that may be dependent on each other and so today we're going to look at what might be going on inside the cpu and i'm going to a very simplified version of this first and foremost and then maybe we'll talk about some of the more complicated issues that we hit because it gets very complicated very quick but i'm going to start with a sort of a motivating example of something that you might want to do we've been sort of doing fibonacci to death with all of these various examples here so i'm coming up with something slightly different slightly more sophisticated as now moving into you know the late ' 90s early ors what about if we wanted to get the distance between two points in two dimensional space something like that right the formula for that is like the distance or r for result is equal to the square root of the distance between the x's so x1 - x2 all squar plus y1 - y2 the distance between the two points y and i can't this is now turning into an episode of bad number file sorry and you can't even read my my handwriting there let me try and get it at least upright i must post you some green bar paper at some point you do need to give me some yeah yeah or i'll come and pick some up when i when i come and see you so yeah we've got this this relatively straightforward equation and this is basically a bit of pythagoras but kind of reworked right exactly that yes yes you could rearrange this and work it out as being yeah as you say pythagoras but it's the difference between two things squared plus the difference of two other things squared and then the result of that is all square rooted and we get the distance and maybe we're doing some kind of game we want to see how far away the player is from the thing he wants to pick up and then if he's below some threshold we going to give him 100 points or something like that it's only motivating in as much as i'm interested in like computer graphics and and games and things like that it's not really doesn't really matter what it is so what first of all we need to turn this into something that our our cpu can execute a sequence of instructions that it can execute and each each i'm not going to use real assembly this time around we're just going to sort of do abstract type stuff just to get the gist of get pudo assembly pseudo assembly exactly we've just invented here first so so the rules of my assembly are that there's always going to be each step has one output and maybe two one or two inputs to it and it has an operation associated with it and i'm going to give myself an infinite amount of registers or variables or whatever and i'm just going to assume that x1 x2 y1 and y2 are things that are already existing and have been the program before this part has provided them and put them into registers called x1x2 or something like that okay so again very pseudo so the first thing i need to do and now we're going sort of now we're doing a compiler we're writing our own compiler by you know in our head it's like well what's the first thing you would do as a human well the first thing i would do is i would do the inside of this bracket here and i'd say some kind of thing like temporary t1 so i'm just giving a temporary name to the result of x1 - x2 t1 = x1 - x 2 that's this part here the the inside of the the parentheses and i'm going to say t2 is t1 * t1 that's squaring that value that was inside the first x1 - x2 so t2 is essentially x1 - x2 all squared we're going to do the same over here for y so t3 = y1 - y 2 t4 = t3 * t3 and then finally well not finally penultimately it's always dangerous to use words like finally isn't it it's like and next next yeah next is best right yeah yes t5 now i'm going to sum those two things so what have we got here we've got the x1 - x2 squ is in t2 y1 - y 2 is in t4 so t2 plus t4 is what now the sum of those two things and then finally r is going to be equal to the square root of t5 and i'm going to assume our our cpu can do a square root even though that's one of the more complicated things you might do modern cpus really can do but so what we've got here we've got this array of 1 2 3 4 five six pseudo instructions pseudo assembly instructions m and a naive processor such as we've been discussing so far would see these in sequence one after another and so it would do let's just say one tick it does the x1 - x2 next one does squared next one yus y 2 next one's doing the square t5 is adding those two things together and then finally we're doing the square root so assuming some mythical machine that can do each of these in one cycle each this takes six cpu cycles mhm which is a hard thing to say but there is some parallelism in this there are actually things that we could be doing at the same time so for example if we had two arithmetic units if we had two parts of the system that could be doing either adds or subtracts or multip wi then you and i know that we could do x1 - x2 at the same time that y1 - y2 they're totally independent of each other but they're they're sort of separated in space here by quite a few instructions so you know you'd have to be quite smart this our pairing thing that we talked about with one of the earlier videos the sega dreamcast which is my favorite game console to work on had an hitachi sh4 processor that could do two things at once wouldn't work because t1 instruction and t2 instruction can't run at the same time because the t2 needs the results of t1 so it would stop waiting and it might be able to do something clever here but we're going to ignore that for now right so this is time to get a prop out hey so thankfully there are six instructions here and thankfully my children who no longer use this have a whiteboard that's got the days of the week on and then that gives us one and all the dog hairs excuse me that's fine so we're going to assume that those instructions which which i'm going to put over here so i can remember what they are this genuinely is like a whiteboard or a scoreboard in in the literature i'm actually mixing two things together there's a thing called a reservation station and there's a thing called a reorder buffer and we're going to be sort of looking at both of those combined just because it makes it easier as a human but in terms of the real chip real estate there's other clever things going on but what's going to happen is as the instructions that are coming down the pipeline have been decoded as they roll off the end of the the the production line just after they've been decoded they're put into a sequence of tables rows so i'm going to write them in like this so t1 is here the operation so this is register the result register where the answer is going to go this is the operation that needs to be done here are the two inputs and a state over here tells me whether this row is done or what what state it's in so to start with t1 is going to come in it's going to have an operation of subtract input one is going to be x1 now we already know what x1 is so let's just say what is x1 let's say x1 has the value of 5 x2 has the value of 10 y1 is 1 and y 2 is two so we actually know the actual values of those coming in so as we go into the beginning of writing into this table if we already know the numbers instead of putting the name of the register here we're going to actually put the values into this little table slot here so as t1 comes in so x1 - x2 so input one is five input two is 10 and this the state well this instruction is actually ready to execute because we know where the results going and we know what the two inputs are so this is ready i'm going to put ready in this i'm i'm going to go through the table and do all six of these at once realistically speaking these this is happening as they're falling off the end of the pipeline but the pipeline runs so fast that we can actually get lots of them into this before the the the robots again i haven't really spoken about the robots this time the robots with their abacuses start looking at this table to say hey is there something for me to do yeah which is going to be the next step so t2 here is going to be the operation is multiply input one well we don't know the value at the point at which this is coming off the end of the table we don't know the value of these things so i'm going to write t1 as a sort of placeholder to say hey when we know what the value of t1 is and then t1 is the other operand for that and then the state for this one is waiting like we're waiting for the result for the inputs to become ready and then we're going to go down the rest of these t3 minus y1 is 1 y 2 is two this one's ready oh look you can already see now that we're starting to discover things that could run right now t4 is multiply t3 t3 waiting t5 so this is adding the result of and again t4 and t2 and this one's waiting and then lastly the result r square root and it just has one input which is t5 and then there's no input here this's also waiting okay so assuming that this is all coming off the the conveyor belt and this is filled in are however many robots that we've got that can use their abacus or whatever to do the work their job is to just look at this and look for anything that's ready and then say hey i'm working on that now and take it off and you can see that it doesn't matter which sequence they're doing they could actually start with t3 if they wanted to even though that was much later in this in the in the stream of instructions they could start working on that and so what happens when they work on it so let's assume our two robots one picks t1 because it's ready and so now it's being you know worked on oh when i'm can't work on this but it's like you know being processing and this one's also being processing by another robot they're going to go off and they're going to do so what is the result of t1 t1 is 5 - 10 which is of course minus 5 which is an awkward number for me to have picked so when the first instruction has completed two things happen so the robot who has this minus5 now knows what the value of t1 actually is so he now searches through the whole rest of this table and anytime he finds a t1 he replaces it with the actual value that he's now found so now when this one comes in we put i'm going to cross it out and hopefully you can do something nice with with graphics afterwards we're going to put minus5 in here and minus5 in here and then having done that we check to see are we still waiting for anything in this instruction if we are we leave it waiting but if not it becomes ready so this is now ready because we've now written in all of the values mh that we need we're waiting for yeah we don't need to do anything else at this point right so now the robot has finished you can say this instruction is completed this this one has been done so no one needs to look at this ever again and he can go off and search for more work and of course if he starts immediately searching for work he'll discover that now he can do this second instruction but simultaneously the second robot has finished the t3 he's done 1 - why did i make everything negative that was a terrible idea so he's done 1 minus 2 this instruction is now complete anywhere i see t3 i can now replace with minus one so i'm going to do minus one minus one has this become ready yes it is so this is now ready and again now he's finished he's going to look for work and the only piece of work he can do is this one assuming sorry now this guy would i suppose the first robot would have immediately picked this one up and said yeah he's working on this one second robot goes okay now t4 is ready mhm oh double yes w is working on it i' keep to my own consistent view here so i now i'm going to try and remember how many clock cycles we've been ticking so the first one we completed t1 and t3 together the second one we're doing t2 and t4 together so let's assume our second step the - 5 * -5 is + 25 isn't it yeah so we know now the value of t2 is 25 so first robot finishes doing his multiplication comes in replaces t2 with 25 m is this instruction ready to go no we're still waiting for t4 okay and now actually if we the the the robot was looking for work he hasn't got anything to do nothing else is ready they're either being worked on by the other robot or or there's or we're waiting still so this is kind of not being able to do anything useful this but and then that's one of the reasons why you know i said the laptop has 10 of these units in there most of them are sat idle most of the time because there isn't that much work that isn't interrelated with it itself but our second robot finishes -1 * -1 is + one hopefully so he writes in one here this one obviously now is ready this instruction is ready it's ready one of the two robots you know coint tos picks up this piece of work works on it gets the answer 26 puts the answer 6 down in here for the t5 and then we can go and do our square root and of course once that's finished we've got the value of r hooray so obviously i've picked something which is hopefully motivating because it's a real world thing that we might want to do and it was just small enough to fit on my little board here with all the horrible sc scribbling and scrolling on it yeah so there's an interesting sort of second part to this that is obviously we've got this table of six i've written c for complete and i should have written c for complete and all these other ones as we completed them here there's a kind of final step to this so we've done all these things in in a higgledy piggledy order and you could imagine that in modern cpus this table is not 6 entries long it's something like 100 150 entries long so they can have up to 150 instructions in flight and obviously there are much more complicated dependency change so like a square root for example will take quite a long time quite a lot of sequence clock ticks before it's ready and you could imagine if the program continued beyond here and we were like doing the squ the excuse me the distance of some other point then we could start doing all the ads and squares and ads and squares for lots of other things while we're still waiting and maybe you're summing all of these these distances up at the end and then suddenly that l that instructions waiting for all these square roots to finish is stuck there this table is completely filled with things that have been done but not completed yet not not retired which is this last stage so in order to finally get everything back in the right sequence so that the the outside world doesn't see things happening in the wrong order there is a final process and now we've added a a new robot on the end of the very very end of the production line and he's responsible for going down this table in the strict sequence that the program was written and committing the values of t12 maybe the permanent register file inside the cpu these are like internal to this kind of in inside side part this might be an instruction that writes to memory i've i've glossed over that cu that gets very quick complicated very quickly with aling and stuff but so the retirement stage effectively commits each instruction to say now it's been done and that has to only be done in strict program order and if there's anything waiting we have to stop there until that instruction has completed the important part of this is what i've written out here is just a sequence of instructions now as we've talked about as you started with this whole discussion branch prediction is a really important part of what allows us to fill up this pipeline with a bunch of instructions without necessarily knowing ahead of time which way the pipeline is going to be going which the flow of in instructions are going to be going and of course i haven't written any branches in here because it makes my life a 100 times easier but let's just assume one of these instructions was a branch so ignore what's on here for now let's just assume this third instruction down here was a branch that was predicted to be taken which means that the fetcher would have pic would have fetched the instructions for where the branch went to in this slot and then the one after that and then the one after that as we're running down here when we actually execute that branch we have to check to see whether we got it right or not if we got it right no harm no foul we just carry on fine we're done but if we got it wrong we know that we you know previously we talked about like throwing everything off the production line and and saying okay we we're we're done now we have to start again well we've already potentially done some work after the branch yeah right because this you know this maybe this branch was conditional on the result of a square root in which case it's waiting around for like a 100 cycles for that square root to finish and and we don't know whether or not we got it right or not but meanwhile we've carried on past it and we're doing all this extra work and that's where this retirement stage comes in really handy because we haven't retired anything after the branch yet because we only strictly retire things in the order they came in once we know that the answer is correct and so if we predict the branch wrong we just go oops we do throw off the pipeline the bit in front of us the bit that's fetching it all that gets thrown in the work but all of these sorry thrown off the production line into the into the bin and we start again fetching but also any of these further instructions that are after the point of the branch have to be discarded but that's fine because they never got committed anywhere they never got written back out to memory they never got written out to the real register file and so we can throw all that work away pretty straightforwardly and then just carry on with the newly fetched version once the pipeline fills back up again in this new slot afterwards so this table this reorder buffer and this whole idea of committing as we go forward gives us the mechanism by which we can speculate which instructions are going to be run and then undo them because it's as if they never happened if we never committed them even though we've done the work for it a processor that can do more than one thing at a time is called a super scaler processor and then this which is a bit like that the the hitachi sh4 thing that we talked about with in one of the earlier videos and it's like some of the earlier pentiums could do like two things at a time but now we've added this this capability to our system this is called outof order execution it allows multiple units to happen it allows multiple things to go on and more importantly the actual execution part can happen in an arbitrary order provided it u follows the rules of don't run an instruction till you know the inputs are have been completed and as long as nobody outside of the cpu ever notices that this this kind of reordering has happened because the external visible results come out in strict program order we still get the benefit of everything without like having strange weird time traveling things going on this is a bit like the kind of looking inside the sausage factory most people put you know see the food go in one end and see the sausage come out the other end but we're looking inside the sausage to see how it works right exactly right exactly right and the most of the time we don't even know that this is happening we don't need to have to care that it's happening as a programmer even someone who spends a whole bunch of time worrying about the performance of their code you generally don't have to worry about this kind of stuff but it's absolutely fascinating the the reason where why it became sort of more on people's radar is that what if sake of argument what if there was something that couldn't be undone that was sort of ahead of us in the pipeline what if there was something that we could view on the outside world even when we roll back and went oops the branch predictor made a mistake we rolled back to this point but you know we ran some code that really we shouldn't have run the predictor was was was wrong and it turns out there is one thing that isn't rolled back exactly perfectly by this system and it's to do with the way memory works and the way that cashes work which we haven't talked about in this series but that because you can measure externally the the the performance of the cache and see if it's faster or slower depending on whether it's been used recently and if one of these instructions ahead of you read from a cache then that would speed up something that you would see later on you've kind of primed the cach and that can't be rolled back once it's been pulled into the cach by a read that that you shouldn't have done then that's that's a sort of permanent effect now you can suddenly see how things like spectre uh which the specula speculative attack on security if as long as you can coers the branch predictor into letting you temporarily mispredict go the wrong way run some code that you weren't supposed to run supposedly it's all undone but if you can contrive it so that the the bit that was running that you shouldn't have run has a noticeable effect in the cache then you can take advantage of it and run it we should see the message hello so it's getting the data various things and we see here hell therefore we can calculate the lighting effects and it's why i'm able to have a shadow here because what we would do