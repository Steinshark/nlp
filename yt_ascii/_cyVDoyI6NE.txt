and a graphics processor is a specialist processor that is designed to make processing of three-dimensional images more efficient than other forms of processor. it is a digital world. it's all 1s and 0s, adds and minuses. and if you do lots of adds, you can turn it into a multiply. but actually, a graphics processor takes a very specialist workload and does it much more efficiently. what are the fundamental differences between a central processing unit and a graphics processing unit? well, fundamentally, we're here to put pixels on screens. so, at the end of the day, we are here to execute some commands whose purpose is to say that pixel on that screen is that color. and usually that's presented to us as: here's some data. so, usually there's a three-dimensional model. so, in front of us is a table. there's a circle which is a few feet off the ground and it's x thickness and it's got some legs and it's at this position. there's some chairs in the room. there's me, there's the walls all around. there's a three-dimensional model. so, first of all, you get given a bunch of coordinates and say the following things are at the following places. and then you say give them some more data, which is the chair's a lilac and the table's a sort of sludgy grey, and so it's fine. and so you get given some color information, which is what we call textures. the geometry of the scene is usually broken up into triangles because triangles is nice and simple. we're very simple people. we can't cope with complicated stuff. a triangle, three points, always has to be flat. you've never seen a triangle that isn't flat. and so you divide complex surfaces up into triangles and then you have some information about what colors those triangles are. so you say, right, okay, i've got the geometry. i've got the color. what do we do next? well, you put some lights in the scene. so there's some lights in the ceiling which are shedding some light in certain directions. and then you need a camera. so you say the camera is here. so now you have to do some three-dimensional geometry to say well, what does it look like in the camera? and the first thing you observe is well, about half the room, you can't see. phew, that's good. so, i don't have to calculate everything that's behind you. the only thing that i have to calculate are the bits you can see. and you project it so that it goes into the two-dimensional screen and this it what it looks like. and then you move the camera around, usually, to get sort of a real impression of moving through the scene. so, there's a lot of different types of calculation involved in that. first is loads and loads and loads of three-dimensional matrix arithmetic. you know, xyz coordinates, sometimes four-dimensional arrays with xyz and transparency information. and lots and lots of rgb, red, green, blue, color. so, a device that's really, really good at matrix arithmetic is a good start. floating point, because the position of all of these things are usually expressed as floating point. and then finally, you've got this unit in the back which says, oh well, i've got lots and lots of pixels to deal with, so we need to run through that and get them all into a buffer in memory. so, some of that's really quite different from a cpu. a lot of three-dimensional plane equations have to be solved. so, for example, here's the table, here's the floor. well, which bits of the floor and which bits of the table can i see? so you have to do a lot of matrix solving to work that one out. and that's the difference in the problem that gets given to us, right? the difference in the design is: we say, well actually, i can do loads of this in parallel actually, i can do a lot of these quick calculations in parallel because they don't depend on each other. so, every time you hear the phrase, "for every vertex in the geometry, do blah." "for every pixel in the screen, do foo." you can actually say, well actually, that's a million pixels. i can actually calculate them in batches of 256 or something like that. so, we extract the parallelism out of the algorithm, and we design a processor that is actually very good at parallel processing. so the difference between a cpu and a gpu predominately is, yes, there's some really, really fixed function blocks which we do very, very efficiently compared to a cpu, which does everything itself. but also, we are very, very good at extracting parallelism. so, if i want to multiply three floating point numbers together, i'll do it more slowly than a cpu. but if you ask me to multiply a million three floating point numbers together, then the length of time it takes me to do a million will be a lot shorter than the time it takes a cpu to do a million. so, we don't care so much about how long anything individually takes. what we work on is the bulk throughput, and it's a different end to the problem. and of course, there are blurred areas, and some people are now saying well, actually there's some sort of computing i could do that would do better on a gpu than on a cpu. and so you get this whole thing called gpu computing coming along where people are not actually doing graphics, but they're doing throughput computing. and actually, that's been quite interesting hearing. i think one of the ones that somebody suggested was people doing bitcoin mining with gpus because it's just lots and lots of maths. yes. but also, image processing. so, in modern devices, you tend to have quite a poor lens, or a poor sensor, and you're trying to take pictures that are as good as that camera you're holding in your hand that costs thousands. and actually, that takes an awful lot of image cleanup so, there's an awful lot of computing that's taking place on those digital images. and it turns out that actually a lot of those go quite well when executed on gpus, not executed on cpus. can it fix my bad focusing as well? that is coming, that is coming.