there was an exploit found for-
that works on linux- and because of the way its works, you'll see when we take it apart, it'll probably work on other unixes as well- that if you type this one command in, then what you end up doing is getting full root control
of the machine just by typing in this one command. i should say that it doesn't work on all linux
installations, it has to be set up in the right way, but a lot of the major ones are set up like that. so yeah, if you can remember the
command or can find it on twitter, you can type this in and get full
access to control the machine. i think the best place to start is if i show it.
so let me just start up the laptop. i've got a linux virtual machine.
it's running centos 7. i've just literally gone and downloaded this off the
centos website and we can now see what's going. you could type it in from inside
the graphical user interface. i've found it works slightly better
if you switch to a command line. so i've logged in here to the machine and i'm just
sitting at the command line in the standard place, and if i try and, say, change the password
of root to something else, it'll say: "only root can specify a user name";
i'm not logged in with any sort of special permissions, but if i type in this command
that's been tweeted and so on: cd /etc; xorg -fp "root [garbled speech]
" -logfile shadow :1; su right, so if we hit this... boom! it goes off and sets a few
things up, the screen goes black, but if i switch back to my other
one, if i type su again... it's logged me in as root, and of course, i can now
change the password on root without any problems. how does this actually work? well let's sort of break down this command,
because actually it's made of three commands; the semi-colons in the thing that
we're running actually just say, "execute this command, followed
by this one, followed by this one." so the first part of it, cd /etc. now anyone
who's used any linux will know what that does. it moves into the directory /etc, and if we
look in there, there's a whole load of files in there, and that's a standard unix directory. inside there, you've got the configuration files
that tell you how to mount the filesystems, how to start up the individual programs and things. also what you have in there are the password file
and something called the shadow password file, which contain details of user's usernames
and passwords, what their user identifiers are, what their home directory is, and so on. so you've got those files in there. so that's the first command. let's have a look at the last command
next, so we'll come back to the middle one. so the last command is su. the su
command basically says, "go superuser." so the su command will log you in, in the
same session, as a superuser-as root, basically. now, normally, that would ask you for a password, but as we saw here, after you've done this
exploit, it doesn't ask you for a password. so what's going on?
what's the middle one? so we've got xorg, and then we
call it with various commands. so we have -fp, and then we give it root: and then
various bits and pieces that i'm not going to write out, and then we have -logfile shadow :1. we're running the program xorg. xorg is the
program that draws everything on the screen, handles the graphics card and
things under unix-/linux-type machines. often this will run as root so
that it can control the hardware. i think there are ways you can have it not run as
root, but by default, often it will be running as root. now, sometimes, you need to be
able to start that as a non-root user, so there's a special way it's set
up that we'll look at in a minute which enables us to run it as a normal user
but still let that program have access as root. normally, doing this on its own would not let us get
root, because we don't know the password, normally, but after we've executed this command,
this xorg command, then we can get root. so what's going on here? well, two
things we need to see what's happening on. first of all-certainly on this version
of linux, not necessarily on all of them- this program is set up with what's called
the "suid bit", or the "set uid bit" set on it. so if we actually have a look at the program, which is in /usr/bin/xorg, we can
see that when we look at the program, it has this s-flag on it in the list
of attributes that it's got there. it's read/write and it's got the
s-flag. this means "set uid". all that means is that when that program is run, it runs it as the user id that the
program is owned by on the disk, rather than by the current-user-that-started-it's id. so this program then will run as root,
and normally you'd want that to happen. that in itself isn't an exploit,
that's what you want to happen. there's lots of programs that
work like that, you want that to do it, but it means that, because that program is
running as root, because of the way it's set up, it has access to files that the
normal user wouldn't have access to. for example, the ones in /etc
that set up the password file. if we break this command down a bit further,
we've got two parts of this command. we'll come back to this one in a second,
but the first one is relatively simple. it's just setting up the log file
to be output to the file shadow, which, of course, will be in the directory /etc
because we've already moved in to that directory. so all that's telling it is, "when you
write a log file telling me what's happening," so you can track down any configuration errors if you
want to see what's- if things aren't working properly, it's gonna be called shadow in the current directory. now, /etc/shadow is one of the files which
stores the password data for linux and other unixes. there's actually two-originally, it was /etc/passwd,
and that stored things, and that was world-readable, so you could actually read the hashed
versions of people's passwords- watch mike's video on what
password hashing is up here. so that wasn't a good idea. so what they did is they sort of kept the
password file, took the hashes out of it, and put the hashes in a copy of
the password file called shadow, which "shadowed" the password files, hence the name. so that was only accessed by root, which
meant that when you needed to check a password, the root stuff could access it and do that, and so on. so we're overwriting that file, shadow, with
the log file. so, okay, well, why does that help us? well, we get to the first part of the command,
which is this one here, which is setting the font path. so we're setting the font path-
which is what the -fp flag does- to have this string, "root:, blah, blah, blah". so why does setting the font path, coupled with setting- logging into the
shadow file, enable us to grab root access? well, let's have a look at the log file
that was created when we ran the exploit. what we see is all the x logging
information as it's started up, telling you what version it is, what
operating system we're running on, build ids, various information about what's happening and so on. so then we get down to this line here at the bottom
which is telling us what we've set the font path to, and it happily outputs every single
line that we set the font path to. now, what have we set the font path to?
we've set it to the "root:, blah, blah, blah", and so on, and the interesting thing about that is- one: it's been copied out on a line
on its own in the new shadow file- okay, some spaces at the beginning,
but that's not a problem- but the format of that line we've
written is the exact format required to tell the operating system the
password for root and all its details, but in this case, the password would normally
be between the first two colons, and that's blank; there's no hash there. so when you run su, the program- the
operating system looks at the shadow password file, says, "there's no password there! i'll let you log in," and so you've got this wonderfully clever, almost
old-school exploit. there's quite a few like this. there was one in emacs back in the '80s, which clifford stoll documented in his book, the cuckoo's egg, and various others where you could do similar things. you could have programs that
had access to write as root, could copy files into the right place and then give you
root access when perhaps you weren't meant to have it, and exactly the same thing has happened here. we're allowed to run xorg, because we
want to display things on the screen, and sometimes you'll have the machine
set up so the users start it when they need it, rather than it starting up in that environment. so running it would be okay, but having the
"set uid" bit set is what you need in those cases, but coupled with the fact that we can write
out arbitrary data in the font path into the file, coupled with the fact that we can then log that into the
shadow file, which we normally wouldn't have access to, we can change the password for root,
or any other user we'd want to, and then log in as that user without any issue. now, of course, the problem
is that as soon as you do this, you've overwritten the shadow password
file with, basically, junk and lines, so you'd probably want to be able to revert things back. whether you can do that is an interesting question. hopefully, it's made a backup of the file;
shadow.old looks like it might be a thing. so yeah, there's a backup that we could then move back into place and hide it if we wanted to, but we've now managed to get root access. once we've got that, we can set up our own user, raise our privileges, and then we've got full control of the machine. the person that discovered it probably sort of thought, "well, actually, okay, i can log into different places,
i can write the log file into various different places," and you think, "well, okay, if i can
write the log file into different places, "can i use that as a sort of way to get
the data i want into the right place?" so that's what you try and do, you say,
"i can write this file here," but, of course, as we saw, the format is very different, you've got all those square
brackets at the beginning of lines, and so you couldn't just use it
to, say, overwrite a program file. so, some of the other ones we've looked at, and they were just to overwrite a standard
program file and get an exploit that way, and so you look at what options you've got, and you think, "okay, well this font path thing
will print out the list of all the font paths, "so if you've got more than one font path, you'd
see them all on separate lines, one after the other. "okay, i can use that, because you can
then write out a font path which isn't a path, "but is actually the data you
need for the shadow password file," and suddenly, you've got your exploit that works. now the reason this actually happened,
the reason this has been there- and apparently it's been in the code for
two years before someone discovered it- there used to be a check on the log file
command and the module path command- there's another slight way you can exploit this as well- that would check whether you were
running with elevated privileges, i.e. as root. if you were, it wouldn't let
you use the -logfile command. it also wouldn't let you change the module path,
which is another slight way you can exploit this as well. you could put some arbitrary code
and get that into the system as well, and when they were refactoring the
code, then they- for some reason, that bit of the check didn't get put back in, and so on. so the fix would be dead simple, you just put that bit
of code back in, so i think patches will be available, but the quickest way to fix this is-if you do-
is to remove the "set uid" bit from xorg.