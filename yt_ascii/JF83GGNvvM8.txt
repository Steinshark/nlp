welcome to my talk about clean test my modern testing framework so since this is my first conference appearance maybe a few words about myself i'm philip i actually did a phd in mathematics and worked on algorithms that optimize the physical layout of computer chips and after that i joined the bell deep l is a interesting european startup that develops neural networks to help people work with language and we have a fast growing user base which brings both challenging algorithmic and technical problems and some of these we solve with c plus plus services of our own that benefit from the latest tooling that latest tooling and stupid standards that is out there so if any of this sounds interesting to you with many open engineering positions several of which are in c plus teams and yeah you can take a look at our page or talk to me but back to my talk so clean test is the testing framework that i wish existed a couple of years ago and here's my attempt to bring what i wish a testing framework offers so it's standard written in standard c plus plus and does not use any macros it provides it is so nowadays if you execute tests sequentially you essentially waste resources both your time and your machines time and this is why clean test executes tests in parallel and supports simultaneous failures of assertions it is not header only because that would mean that every user is going to recompile the framework in every translation unit but instead it's almost as easy to integrate it's a cmake library that does not have external dependencies and it has all the expected convenience functionality for usci pipelines for instance it can export the unit reports of the of your test runs and it can deal in with invalid unicode and it's released on the boost license so available on the right you see the first example and you might already notice that you don't need to bring your own main function you can of course bring your own main function but as in this case you don't have to and what i want to point out so since this is just a standard c plus plus you can even without continuing to listen to this talk take this demo and discover clean test on your own so for instance expect is a function and you can take your favorite ide and start to poke around in this example see read the documentation and get an understanding how the framework works and how you are supposed to be using it but nevertheless i won't of course want to take the opportunity and explain the three basic concepts that you already see here which are concepts which are suits tests and expectations so first so this qr code leads to the presentation pdf in case you want to click have clickable links so this slide is here for a second so you can take a copy if you want but of course it's the the pf will not go away so let's let me start with with the test suit a test suit is something that is a callable object that is executed automatically upon program start so when you execute your test binary these suits are invoked and they are of course they are just some callable object and you can do whatever you want in that but you're supposed to be setting up tests inside suits and the reason the primary reason why it's handy to set up tests inside suits is that suits set up the right naming scheme for instance in this case we have a talk suit and this torque prefix will be used by all the tests that will be defined inside this talk suit and of course suits nest you can take a couple of suits and start to build a tree of tests a test case on the other hand is something that is executed later so notice not all tests will be executed all the time some you can enable and disable some of them and some will just be skipped and yeah and a test case is something that is supposed to be standalone and you need to be careful that you don't i don't know capture that have a dangling reference in the capture for instance but that is that these are standard problems with c plus and i would just want to point to the special assignment that i have to use in line seven so this is necessary on namespace scope so there's no way around that but otherwise i always use the syntax that i prefer most which is with these user defined literals and the assignment in case you don't like this you can of course stick to ordinary constructors and objects which i do in the second example and you can either assign into a test or suit or you can use the respective callable object as a secondary constructor parameter and a test does not only have a name which is basically just a string but it also has it can be tagged and these tags so in this case i tag a the third test case and these tags can then be used as additional credit criteria to enable or disable tests and so now this let's let's look how this let's see how this looks if you run it on the left you see how you how this test binary works if you just run it without extra parameters first see that the test cases are indeed executed in parallel so you see that's a bunch so every basically we start three test cases before any of them succeed so before any of those is done of course then now i want to emphasize that this is not like a possible output of course it's non-deterministic but it is so the process of building this pdf actually includes compiling the demos and capturing the real output i got yesterday evening and so this in particularly means that all the demos that you will see today really compile and yeah and this is the the output that i got on the right you see that what you can also do with this test binary you can use dash dash list which instead of executing the tests prints this nice unicode tree of what's inside of this executable and there you see the three test cases some of which are tagged and then you can start for instance to write a filter that and selects parts of the branch parts of the branches of this tree that you are maybe interested in and after that you omit the dash list and execute your selection in addition there are many other runtime parameters that you can play around with but you can of course discover these on your own using help and that brings me to the third and probably most important concept of clean test which are expectations and so for this as you already saw we have the expect function and it is yeah for for instance in line seven so this is the first expectation that is succeeding so on the corresponding console i'll put on the right you don't see an error and on line eight we have the first failure and you see that we correctly capture the line number and report that something is wrong there but what's certainly unsatisfying is that we just print the value false what we would have liked to see would be that on the command line we see where the spot is actually coming from why the expectation is violated and what which values correspond to this violation and so the sad truth is there is no way to get this without macros on this level because essentially whatever we pass and to expect is already converted to a bool and so expect has no way of finding out where this value of false is coming from for expect it's simply a bull with false but of course there are solutions for that and they require a little assistance of the user and the essential idea is that we will not be passing the boolean value to expect but instead we will pass an object that is basically the expression tree so the tree of how your expression looks like and to start building this tree you usually start by another api of clean test which is called lift and lift wraps perhaps a given argument into a thin wrapper you will see details in a second and the wrapped objects then have overloaded operators to start to build this kind of expression tree and how you look how that can look like you see for instance on line 9 where of course all these assertions are failing because we want to see the failure message and on the right you see that it is in indeed working that we can lift the pointer and compare it to the null pointer and get like the the real addresses that have been compared on the command line and for convenience again there are many user different literals again that work on scalar or string types that you can use to lift these values and so the seven underscore i in line 10 is a lifted integer of value 7. okay and yeah so this is probably the core and core feature of clean test and therefore i want to spend some time how to explain how this is really working in detail and after that i'll come back to a bunch of higher level features of clean tests that that are also built in and so this whole idea to pass an expression tree along is of course not new i i didn't know the name and but of course i didn't certainly not think that i would be inventing it but it's called expression templates and it's apparently already known for more than two decades which at least surprised me and yeah so let's so now we'll go through a first demo implementation of course it's not the real implementation but it's roughly accurate and we'll we'll see how did how that works so i want to explain the example that you just seen so how lifting and equality comparison works so let's start with a clause a clause is the result of lifting something so that means a clause is the clause is this the thin wrapper that i just announced and since it's wrapping something we have a template argument and the constructor just forwards into the cached value so to say and then a clause provides three three functions as a as an api and all expression objects that clean test will be dealing with have the same api and so let's go through through each and each one of those so the first one is value value means get me the value of evaluating the tree that is below you so in that case it's very trivial because we have we a clause is a cached value and so the value is simply this object then we have a conversion operator to bool which is necessary for using clauses and other expressions in static asserts the implementation is always the same like in this line 22. and the third one is the output operator the output operator is supposed to print not what the value is but instead how the value has been computed so for this first example of the clause this is the same that's why line 27 simply prints the value but you will see more interesting examples in a minute and then we have the expression concept in line 32 which identifies all of the expression objects that clean tests that come from clean test as being those which derive from tag and then with that we can go through the implementation of lift so lift gets anything and then does it case extinction either the given object is already some expression then we simply forward we are the identity function and otherwise we wrap the given argument in a clause so pretty simple let's look at a more interesting example equality comparison it works pretty similar so now we have an equal object the equal object will be the return type of an equality comparison of two expressions that's why it has two template parameters both of which again are already expressions so then the constructor simply forwards into both left and right hand side and then we have to go through the three level api again which in this case is a bit more interesting the value is the equality comparison of course of both left and right hand side but since the left and right hand sides are themselves expressions we have to ask for the value in order to compare for to get the right objects to compare that's line 57. operator bool is standard as always and then the output operator now is a bit more interesting because in the now we don't print the value anymore but instead we print the both left and right hand side that has contributed to the evaluation and again so the left and right hand side are expressions and so line 66 and 67 again use the output operators of those expression of the objects and with that we can overload the quality operator we take a left and a right hand side and then for convenience we just lift both of them because we know if this is already an expression the lift is doing the right thing and then we just build an equal object around it with which with the deduction guide above that's the right does the right thing notice that so in this example i omitted the necessary concept requirements for this operator so you on on the one hand you should check that at least one of left and right hand side actually is an expression because otherwise this operator should not take part in overload resolution and the second thing is that you should also check that the underlying values of left and right hand side are in fact equality comparable because otherwise this is not going to work anyways and so clean test does this but i'll omitted this for this mockup implementation so the the last remaining ingredient is a demo of expect of course so the real expect clean test does some bookkeeping which i entirely skipped so this is but it's sufficient to understand the the core aspects of expect we take something and then we print whether this expectation was met or not so we need to convert it to bool and we just print some tag for it and also we print t which if in case t is some expression has a chance of printing the expression tree and so this works pretty well line in 95 demonstrates that it even works at compile time and line 96 shows that it also works to print this simple equality comparison of seven and eight so at that point you might wonder or have the the a sense that ata lines 88 and 89 could be considered a code smell because we might be calling the values multiple times of t and so you are correct with that it's actually a real problem and in a second you will see why we come back to that yeah and before i i want to let's say introduce this tree notation so the this is basically the expression tree and the it is rooted at the equality operator the orange box and it has two children the clauses the yellow boxes of the lifted values seven and eight okay so that's pretty trivial but we come back to this notation later and there it will be helpful okay so this is a quality comparison so of course in when you write expectations you don't only want a equality compare values and therefore clean tests overloads not only a quality comparison but 22 operators in total so these are unary operators arithmetic operators bitways operators comparison operators and even special operators like comma and andor first i personally personally prefer the textural version of not and and orb so don't get confused so it's equivalent to of course the exclamation mark double am percent and double bar second is all these of course c plus plus even has more operators than these but those are the ones that usually operate on constant arguments and so that's why i only overload those because otherwise it's probably very confusing whether the printed value would be the one that was taken before the applying the operation or after so in either case you're probably confuse half of your users which so therefore i just don't do it so and yes so then among all these operators the implementation for and and or is the hardest one to get right and that's why i also want to present that one so we will start with the first attempt how you could implement it and see how far we can get so this is the attempt in essence it's pretty much the same as equal that you've seen two slides ago it's or is a binary operation that takes two expressions the constructor of just four words and now it's basically it's a copy of the equal object with two modifications the first modification is in line 103 where of course instead of applying equality comparison we apply the or off left and right hand side value and the other difference is in line 113 where we switch out the equality comparison string for the or string so pretty simple and we can use it and so the with an aura you can do the for instance you can use an orf to get these pointer checks that you are used to and this standard pointer checks are follow along the lines that you want either one the pointer to be null or you want the pointer to hold some value in this case 42 okay and the corresponding expression tree is shown on the bottom and so maybe unsurprising to some of you this crashes and now it is it's maybe not super intricate that it is crashing but still it's interesting to understand why actually it's crashing and so let's let's understand that so or as an operator that is special because it is supposed to have short circuiting semantics meaning that after evaluating the left hand side there is a sequence point and you decide whether you even consider the right hand side at all so usually on an or you in case you do this type of check and you come with a null pointer then you don't evaluate the right hand side whatever is written there but this short circuiting does not apply to overloaded operator ores which is due to the fact that basically an overloaded ore is a function that takes two arguments and if you want to call that function you need to bring both arguments so there's no way of skipping evaluating the right hand side argument of an overloaded ore okay but still how do we actually crash so it's we do not crash in line 103 because line 103 applies an or to the to after getting the respective values so in this case the values are pools so the or in line 103 is in fact short circuiting so and it is correctly only evaluating the left hand side and skipping evaluating the right hand side but of course line 113 does indeed crash because we are unconditionally evaluating the right hand side or upon printing it in an attempt to print it i should rather say okay so so that means we should we should probably fix this print there are two options how we could fix it one is we just re-evaluate the left hand side to see whether we are supposed to print the right hand side right hand side sorry but that could be costly i mean there are examples that you can come up with where it's even impossible to re-evaluate the part of the tree that you had before and so that's not the way we are going instead we will add caching so let's attempt to add caching so first for that we need a template alias this template alias is yeah sure and printing it should not evaluate it yeah of course yeah but you want to yeah i mean you you usually when you print the stars or the stars probably a bit special because it's not too useful to simply print the address and say yeah the value can be obtained by or could have been obtained by printing whatever is inside this address but usually you also include what what is lying there and that's what i already also do here because otherwise it's less useful so yeah but that's true that's a true remark but you should not try to print it if it's a null point or should you yeah of course you can also add a check there but i mean you are not supposed to be going down this path anyways sorrow yeah okay it's okay let's let's try to fix it by adding this caching layer so it could look like this we start by introducing a value template alias which determines the type that is returned by the value of call on some given expression and with that we have this caching or that replaces the former ore it has again a left and right hand side expression and in addition a cached left hand side value and optionally also a cache right hand side value and then we in the constructor we after forwarding left and right hand side we cache the value of the left hand side and then depending on whether it is true or not or truish or not we either skip evaluating the right hand side or we do evaluate it and then again line 114 in the value call is pretty similar to the thing that we saw before notice that we don't need to check whether the right hand side is available because in the constructor we ensure that it is available when we need it essentially and then in the output operator we add this conditional print that either prints the right hand side or prints an unknown string to indicate that we did not pursue this expression tree in that direction okay and so that fixes this example so in that case we correctly let's say print that we did not con consider to evaluate the right hand side branch of dior the problem is all you'll probably have guessed it is that there is another example so the problem is that so this is a different example now the corresponding trees are on the right and on the right and the oars have line numbers in the bottom and they correspond to the line numbers in the code and so i'll go through the second example so that is again an expression that is rooted at an or and it has two children one of them being the not p check that you've seen before and the other one is again an or which checks that pd references to not a non-zero value or or false which doesn't matter so the thing here is that again evaluating the left hand side branch of this or in line 193 is again crashing because it involves dereferencing the nut printer and so but that that is precisely what we implemented one slide ago in this caching or implementation so or in other words so in case our or is part of an unevaluated tree of the expression a branch of the expression sorry we should not even consider evaluating its left branch okay so we need to fix that what we can do is we can try to use mutable data members to also wrap the left hand side value in an optional and only initialize it upon the first value call problem though is that it these mutable data members are not available and but i decided so either i can find a way to get this working so then i will implement all these 22 operators and everything else that is missing or i will probably abandon this project and in the end of course i solved it and i'll show you how and it is comes pretty much down to the fundamental theorem of software engineering and so we will be adding another level of indirection and so now we will have two layers one is the expression layer which is constructed eagerly that builds the expression tree and the other layer is a sort of evaluation tree if you want and that is only constructed lazily where it's actually relevant and so let's see how that looks like so this is the final implementation and yeah that that that will actually work so now we have the or expression which again has two operands and but does not cache any values and we notice that we now change the api so an or now simply has an evaluation function which returns an evaluation object of this or that is constructed from this or and you will see on the next slide how such an evaluation object looks like and other than that this or expression only provides the conversion to bull for static asserts again and and there you already already see that in evaluation a variation happens to bring now this value api that you've seen before okay and now let's look how this evaluation object looks like the evaluation object cap has a again is a has two template parameters notice that the template parameters now are not the expressions anymore but they are the evaluations of the respective left and right hand side expressions and then we have a left hand side evaluation a right hand side evaluation which is wrapped in an optional and also a cached value and then let's go through the constructor it accepts some expression which is an or so it's the order that you've seen before and then we after initializing the left hand side evaluation in line 145 we conditionally also initialize the right hand side evaluation if it is necessary so in case value is false-ish and then we also cache the value of the entire or okay so that makes the implementation of the value api very simple because it's line 161 we simply have used the cache value and upon printing we have all the details that we need we either print the left hand side we always print the left hand side evaluation and then depending on whether we have the right hand side we also include it okay so and this really fixes also the third example that i provided and to visualize it on the right you see now the corresponding expression trees and with their respective evaluation trees these are now the blue trees and there you can see how that would be constructed in on these examples and now you see that we really support the case where neither of the or branches in line 193 are evaluated because yeah we we skip entirely constructing this evaluation object okay so now let's okay of course so we changed the api of of the or expression object and basically split it into the expression and the evaluation and of course that needs to be carried over to every other operator of the 22 that i announced and mo that is of course done and most of the bowler plate is hidden behind a crtp base but still it's work that needs to be done and yeah of course that i i should have mentioned that you see the expect function again which also needs to be adapted so we need to query the evaluation once and then both convert this object to bool and printed okay and so now let's let's go back and ask ourselves so what does this mean for a user of clean test so one is if you want to have this sort of perfect expression introspection then you need to make sure that every operator of your expectation is applied to at least one expression of clean test so usually that means apply lift somewhere but you should not be scared too much in case you do this incorrectly the worst thing thing that could happen is that the command line output is not perfect but still you will capture errors reliably and you maybe fix the output later the other thing is that all this all the the entire idea sort of steps at function calls so take for instance line 16 so you can check that if p is either 0 or we dereference it and if this dereference operation for instance is done inside a function or on as a parameter to a function then this works on the standard or so to say line' so you are expected you expect that this is working but of course it is not working if the left hand side is a lifted object or a an expression of clean test and the or in line' is the overloaded or because then again you don't have this short circuiting guarantee by default and so this would evaluate the right hand side and of course crash so there are two alternatives to get that one is you can either you can spell out this conditional check more explicitly like i did in 20 to line 22 22. the other alternative is that you can also lift the function invocation which is another case that the implementation of lift actually provides so you can get you can to lift you can bring a callable object and then this the return thing is a lazy function call meaning that clean test will use the given callable object when it's necessary and otherwise it the object will not be invoked at all and so in this case we can fix it by wrapping this use the reference p in a lambda and get lifted okay [music] okay so this this is about the machinery behind expect and so now i want to get back to more high level convenience features of that clean test is also bring the first one is you can add debug output okay that can be pretty handy for instance in case you want to you have additional data that is useful for debugging and you want to include it in case of an error and again you see on the right how that would look like the other thing is so usually if you have a test case with an expectation and the expectation is failing then the execution of the test case continues even after the failure but of course you remember that the test case was a failure instead you can also mark you can get stricter expectations by marking them as asserted in that case when you hit an a failure in an asserted expectation then this will abandon the entire test case so in particular then it is the potentially dangerous quote that follows after it will be skipped and quite the opposite is that you can also mark expectations as being flaky meaning that the failure will be recorded but it will not cause a failure of the corresponding test case so the execution goes on and the test case will be considered a pass even though we you saw an error on a flaky expectation and both of them both flaky and asserted expectations can also be introduced conditionally you can also check for exceptions with the throws api you can either check for any exception being thrown or for an exception of a certain type in that case we want in the example case we only want to see whether the given object can be invoked without an ex exception and that of course can simply be done by negating it so the re what throws is returning is essentially a pool that nicely prints to the command line and you can also check for harder types of failures you can check for aborts or aborts in debug mode which is handy in case you are using a cert the only caveat is that this is not supported on windows currently the other thing that you might be might want to use in expectations is comparison of numbers and so in particular of course floating point numbers so let's say you'll have two doubles let's say line 19 and 22 two results of adding doubles and of course this is a deliberately chosen example so that is mathematically both numbers are the same but if you compare the doubles then you get a failure line 22 or console and you see it on the console lines three and four on the bottom and what you usually do with doubles is you don't check for equality but instead you check for closeness and so cleantesses bring this is close api which takes two arguments and then in that case identifies those x and y as being close what you so is close is just a shorthand and the what it is a shorthand for you can see in the resulting from the failure in line 24 i artificially changed the right hand side of this expression significantly and as you can see is close is on console line six and seven is close is computing the both the absolute and relative distance of these values and comparing it to some default tolerance which is by default are the epsilon values of the respective value t that is part used in this expression and so the absolute and relative distance are computing using a norm more specifically are the clean test utils norm which is a customization point object that is that first is const expert and returning t in cases where stood norm which got introduced with complex is only returning double so that's one difference the other is that it's extensible by either adl or member functions of your custom types that you might be working on and yeah but but of course so is close is just a convenient shorthand that is likely useful in many cases but in case you need something different then of course you can spell this out yourself you can that's what i do in line 27 you can come and take the exact same expression that was in 20 failed in 24 and compare it to some tolerance where we artificially increase the absolute tolerance and then this expression expectation is met again okay okay at that point you might you might be wondering okay so this sounds pretty pretty nice but i happen to be stuck with some other testing framework and it appears to be very tedious to go basically through every line of my test code and start to apply this lifting logic and i can offer some help so i also have an accompanying project which is clean test migration it's it's implemented in python it's just started as a i thought it was a quick and easy way to get those migration scripts turned out it was actually quite some work and way more complicated than i anticipated so this these converters are not are not a compiler and therefore they are only a heuristic that is tuned and works well in practice on the bottom you see how that works for a sample boost test case translation unit and so what these migration tools do is they take your expectations they really build this expression tree and then decide which of the nodes need to be lifted in a way that on the one hand brings per this sort of perfect expression introspection and on the other hand needs to require us to lift as few nodes as possible and yeah you can and then of course you need to in addition you need to switch out a bunch of micro calls with the respective clean test construct and in that example it works flawlessly so i should point out that this macro switch is i currently only implemented for boost because that was the most pressing concern for me at that time but of course it can be extended to other other frameworks and you should not expect that this these tools like work perfectly in all cases for instance macro based frameworks differ significantly to clean tests for obvious reasons and for instance it's both testing frameworks have different allow for instance helper functions in different places and so it might be that the converted result needs some manual adaptations for it to make it compile but but still it it is should be extremely helpful to migrate away all the the tedious parts of this kind of refactoring if you want to be start using clean test yeah and with that i want to come back to two even higher level features of clean tests so the first one is concurrency so maybe one step back so why is it that basically every unit testing framework that is out there is executing tests sequentially the probably the primary reason for that is that it makes the correlation very easy that if you see some failure that you always know which test case just failed because i mean you just execute at most one so if any test case is supposed to fail it's that one that is different for clean test so clean test is executing multiple test cases at the same time and needs to need some explicit link of an ex failing potentially expect failing expectation to the corresponding test case and this is handled explicitly by a so-called observer class so first takeaway should be that you don't need to worry about these observers if your test is single threaded and so you've all the test cases that i've shown so far were single thread and so you didn't need to bother to handle any observers and that works the reason why it's working is that when clean test starts to execute a test case it populates a thread local variable with the right observer and this observer is picked to get picked up again by expect by default so if you don't pass it explicitly expect this using the thread local one and but of course there are scenarios where this is not sufficient and then you can start to yeah to to bring the observer in explicitly so on the right you see an example how that can look like first the way to get the right observer is by accepting and extra observer reference argument in your test case 922 notice that an observer is intentionally only forward declared so you cannot do anything with an observer other than pass it to other apis of clean test and then let's go through some examples line 23 is picking up the default observer so that is fine in this sort of main thread line 24 is also okay that's how you bring the an explicit of observer to an expectation and then but let's see how what happens if we do something in another thread so async is a function that just takes calls something in a different thread and waits for the result and so in that case line 26 we have to use the right observer explicitly to expect something otherwise line 27 so this will produce a warning on the bottom notice that the warning will be printed regardless of the evaluation results so even if the result the expectation is met you still get the warning but of course you only get the warning for code that you are executing and so line 26 basically is a one possible fix for this case the other is that you can explicitly repopulate the thread local variable by a scoped object which is called observation setup so that in line 30 we built this scoped object and as long as it is alive we can use expect as before so given depending on your circumstances it might be beneficial to set this object up once and then have a bunch of expect calls after it and at that point i really want to emphasize that all this concurrent considerations really make sense because expect in indeed is thread safe otherwise all that would not make any sense and so you can have multiple threads executing the same expectations on the same line even and all of the possible failures will be recorded reliably and also reported correctly to the command line okay and this is the final feature that i want to touch on data-driven tests so i personally quite like data driven tests because i find that these are a very convenient way of ensuring some invariants of my code by simply executing a function on different inputs okay a data driven test is a test case so that operates on a bunch of value data samples and the way to get this sample is by accepting an additional parameter for this data sample so for instance line 23 the int constant n and you can test the data in two ways either you use an extra constructor parameter in line 23. or you can also use the more fancy pipe notation in line 28 you pipe the data into a test you can either this correctly prolongs the lifetime of temporary data samples in case it is necessary [music] in case it's necessary and i should also emphasize that it does not only work for homogeneous data meaning data of the same type but only different values but it also works for data that is inhomogeneous so maybe a tuple of different types so you see an example for a vector in line 22 and also a tuple example in 27. notice that of course for these yeah you need to make sure how you work with references so this data is marked as static so it has its lifetime is sufficiently long otherwise that could be problematic because in 23 we invoke the constructor on an l value reference and in case you really want to do that on temporary data then you should probably consider moving the data into the test constructor and yeah on this is how you set up these data driven tests and on the right you see how this executes you see that some of the samples in some of the samples we pass and in some we fail and notice also that the test case name includes the printed data sample in case that is possible so otherwise we just use a counter okay so that is all the features that i intended to elaborate so let me wrap up so clean test i i presented clean test which is my modern versatile and yet very simple to use testing framework it supports short circuiting in expression introspection without requiring macros in addition it also brings a bunch of productivity features that you expect from a modern testing framework and it's built for a world where tests are both executed in parallel and also simultaneously fail yeah this project is of course not never done so the my primary goal for the let's say a couple of weeks next couple of weeks is getting a 1.0 release which i'm i think i'm pretty close to i would like some to have some more documentation online but everything that i presented today i think is pretty ironed out and and works reliably but of course i i have a a bunch of extensions in mind that i might be implementing in the future if if users are are interested in and there yeah you you can i provided references where you can read all the code that i presented today and of course how you can reach out to me i value any any feedback be it even just a a star on github and yeah with that thanks for your attention and i think i have a couple of minutes left for questions [applause] hey good talk good testing framework also good intentions one question did you consider test matches so it's a different style of expressing your matches right now all the you print on the console is then zero is seven or it's not seven so it's obvious that it's failing but when you have more complex data types you have one site that is evaluated to a complex physics simulation or whatever and then the other side is your test data where you compare to it and depending on who writes the test the left side is the expected value or the right side is the expected value and it's quite inconvenient if you don't have one test failing but several and you are confused and have to look up each test what's going on there so if they have test matches and you have very clear expression in the code which side is evaluated and which side is your test data compared to okay i did not consider that [music] yeah so is is there more difference there is there what's the difference in addition to disambiguate maybe what's left and what's the meaning of the left and right hand side so we probably have some it's some function that asserts some condition then right the basically this expression system works well if you have equal comparison because then it's very clear what is not matching and what's not working on if you have like less than or greater than then it becomes not really that obvious and the test matchers basically say you don't want to limit yourself to a bull operators you just say for example i have a string and this string has to contain a substring yeah so and then that's the matter exactly okay and the old the other thing is that you can write a framework where the users can write new matches for their own data types okay okay okay yeah but that is possible so i mean i did not consider to write let's call it bring more matches from for instance for this string example but of course you can users can could do that so you can have some function that the only thing that you have to do is comply with this evaluation api and it's pretty pretty much the same you can come with your own contains function that gets two strings maybe and then maybe the the input and the required substring that you want somewhere and yeah then you'll this returns an object but probably that only captures these values by reference and upon evaluation that's the real check and then prints to the can you can also then of course control how that is printed to the command line and include whatever is suitable to your contact stuff of course that's that's possible but i so this is not like available currently by default yeah thank you very much i really like it that it doesn't take any macros this leads to immediate use in modules but my question is more about compile time testing how far does your testing framework go in the realm of doing testing as much as possible at compile time i'm shifting as much as that i can in my code actually to do the testing at compile time so that it don't have to be done at runtime i've not seen very much about how much is a constable friendly how much is const expert yeah so can you please expand a little bit on that yeah sure so i'd say that like most of this expression so i'm thinking hard to find places where i know that it's not available at compile time and i i don't see any currently so most of that stuff at least probably all of it is available at compile time but so you could argue that the the use is limited because of course you don't have this nice at compile time you cannot argue that you want nicer console output so you just yeah okay but but so that is not available so i mean my primary primary intention to make all that available at constant export time is to sort of justify that this overhead of building these expression keys and so so on is in some sense limited because in static asserts the compiler in the end sees through all of that correctly and so that i got of course if you use it it's just in a static assert then you also get just get yeah this expectation is not met and you'll need to find out why and yeah if you want to have a better introspection at compile time so yeah that's probably something what that would be very nice to have but that's that would be a future extension for me i know one question tech test fixtures so if you have a suite and you want to have comments that up until down code how do you implement that so test fixtures are tricky because so at least i cannot see currently a way where you get that without the in the in the let's say the the way you are currently used to with macro based frameworks and yeah so i i don't see a way to conveniently write it and so currently it would mean that you're just in the first line construct your picture fixture that your tests need of course then you need to prefix every method that you're using that is provided by the fixture with the respective variable name but apart from that that's the con the most convenient way of getting the fixtures and that's also the way for instance the migration tools are converting fixtures of boost tests to clean test and then of course this will not compile so this is another example where the migration tools are not perfect and but what you need to do should be very obvious if you if you see end up in this situation but if you have an idea how to how to get it without marcus then i'm of course happy to discuss details yeah okay yeah thank you [applause]