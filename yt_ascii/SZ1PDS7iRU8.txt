1 billion row challenge in goang from 95 seconds to 1.96 seconds okay so if you guys don't know i like reading these because often they they're going to be they're going to be filled with a bunch of like information i love goang okay there's a lot of code in here so i want to go look at how he's doing the codes and how he's making this thing fast so i'm actually pretty excited about this okay i know we've already done one but i want to love it even more okay this is exciting the 1 billion row challenge is quite simple the task is developing a program capable of reading a file with 1 billion lines aggregating the information contained in in each line by the way if you don't know the 1 billion road challenge started off as a java challenge and then spread to every single language this is like the fourth thing that i've read on the 1 billion road challenge it's actually super super cool i actually think this is quite awesome and print a report with a result each line within a file contains a weather station name a temperature reading in the format of station name temperature where station name may be spaces and other special characters excluding that and the temperature is a floating point number ranging from 99.9 to 99.9 with precision limited to one decimal point the expected output format is station name equals min or min mean max holy cow dyslexia is kicking in sorted alphabetically by station name in where min mean and max denote the computed minimum average and maximum temperature reading for each respective station example of a measurement file yellow knife 16.1 whatever in in in in 32.9 example of the expected output all right awesome given that 1 billion line file is approximately 13 gigabytes instead of providing a fixed database the official repository offers a script to generate synthetic data with random readings just follow the instruction to create your own database although the challenge is primarily targeted for java developers the problem pro presents presets the problem presents probably is the t is going for an interesting toy exercise to experiment in any language as i've been working with goang in a daily basis at gamers club i've decided to give it a try to test how deep i could go but before going forward with this article i want to acknowledge that despite being well-versed i am no specialist in goang i am the kind of dumb for low-level optimizations domain to which i have never been very interested in this article i will pres present all the steps i took to optimize the solution everything was written and tested on aizen 9 7900x pc not overclocked so 4.7 ghz with 12 cores and 24 threads an as rock b650 mhdc slm2 motherboard a 2x6 gb 6,000 bajillion mehz ddr5 kingston fury beast ram man you know when you're reading when you start reading computer specs out loud i feel it feels funny to say is is he bre is this humble bragging yeah just a little personal pc you know just backto back 32 gigs of really really really fast not even overclocked not even overclocked just standard clocked which is fast enough 6 ghz is normal for ddr okay i didn't know that and kingston ssd sv300 s37a 1220g windows 11 and go 1.22.0 amd64 okay okay okay okay the partial results i present or the results i present is the lowest consistent value i got for the runs while the editor and browser were open the final result is presented the final result is presented by presenting the aggregated result from 55 executions i'm not going to lie if he says the word presented once more i'm going to lose it okay i can't i can't i'm getting i'm getting satiated have you ever had visual satiation it's happening right now it's happening right now how slow is too slow before deciding to work seriously on this challenge i was curious how much how much slow is reading and processing the scary 1 billion rows file i had a feeling that the naive approach to it would take a long time driven by this curiosity i wanted to give it a try and implement the simplest solution possible name min max count okay good so this is a pretty classic approach right if you have the sum and the count you can create the average at the very very end pretty straightforward you have the min in the max you got a couple extra you know you got a couple extra things right here you got the name you really technically don't need the name you could use the key to the map as the name but whatever okay i digress all right data map string station i wonder if you don't want it as a pointer would you want it not as a pointer for even better since you're doing literally a billion lookups on this thing is at that point would that like a pointer actually make a difference here if you're doing one billion lookups i would assume a pointer would actually now you're starting to think about pointers anyways file open up the measurements panic if that's not there defer the closing scan the new scanner scan line text string line okay so this is like your very simple version of doing this we all know this one my my assumption is this would actually take quite a bit of time to run all right so this is like your very simple one right because buffered scanning i'm not exactly sure what it has to do but i'm sure it doesn't it probably scans the string at least once if not more anyways okay so we see all this to my surprise this code ran the code above ran in 95 seconds a lot better than i expected it would be note that print result and main functions will be used for the remaining of the article with little to no change okay okay so i think everybody saw this one coming right it it seems like if i were to try to optimize this problem i would start with file reading like how fast can i get file reading done and like that's really your bottom like your your your bibity bottom here what whatever speed you can do this you win right like that that's the rest seems like it's it you don't have to probably consider too hard for optimization i'm curious about that how fast is how fast is possible satisfied i went to bed and i couldn't sleep i knew how much time i needed to process the data but i couldn't stop asking what would be the fastest time possible to just open and read the file without overhead of processing oh i'm very actually happy he's going this direction because this is actually my question with go i have no idea i am actually very excited about this because i wanted to know how fast can you read it in right that was what i just stated and i'm curious how he does this because i assume you just can't use this you can't use a buff iio because a buff iio by the very nature has to read data put it in here and then you have to read it again to like you doing something is my understanding right and so i can't imagine this will work right let's see first try notice that i'm using bytes instead of string a quick research told me that string conversion is slower and involves allocation of memory the bytes function reuse of an internal buffer returning the same object so there's no additional allocation the result was astonish thing 36 seconds okay i think you can still go faster scanner but scanner default configuration is really bad for the task i already knew that it was possible to reach much much faster since java entries could reach the same result in 1.5 seconds but 36 seconds was surprisingly slow the scanner class has a buffer function which accepts a predefined bite object and a maximum number of elements for the case when the buffer can grow up to up in size without much details about how it works internally i tried to use it and tested some different values for the buffer size oh nice okay okay look at that interesting reduce this calls equals win yeah okay so you i mean with this with this buffered one you can get it at least down quite a bit okay i mean i guess this makes sense right in the sense that if you have a small buffer you have to constantly be reading over and over and over and over and over and over again well at some point it has to get worse right at some point it has to get worse because this is a lot of buffering right i think at some point it has to get worse because you're no longer i wonder what why the reason is i'd have to think about that actually i guess you're not is there a reason why that'd be worse cuz my assumption is allocating this would take almost no almost no time right allocating this should take almost no time reading empty space oh you think it's reading empty space h much better so using a buffer around 20 this one bytes 4 to 16 megabytes respectively could improve 80% reaching around 6.7 seconds okay so i think you can still get faster so experimenting how fast go can do this okay so that's i mean this is pretty interesting so scanner is scanner is not all that fast buff reader another quick test i could do was using a buff io. reader object which would read bite by bite okay this change actually increased the time to 25.5 seconds okay yeah i i would assume that makes sense because i assume you're having a lot of the same problems here right all right we were there let's see buff let's see buff reader line instead of a reader read bite i tried read line i assume this would actually still get this is still bad which got it all the way down to this okay okay we're not there yet so we're still not there yet i like i like his i like his attempts here like i like what he's doing by the way which is just i i do like just trying a bunch of stuff and just measuring it empirically and coming up with an idea as to what what's going to happen here i think this is good after some initial exploration i checked out how scanner. scan works internally and i noticed that it does a lot of things that i don't need it manipulates the buffer object a lot not sure why i also found not sure why chesterton's fence mentioned i also found that it uses file. read which had never used before let's try it out ah all of a sudden you get the control all of a sudden you get the control how big that buffer is hopefully he takes his ideas from the previous one these larger buffers and maybe uses that okay that would be fantastic right all right resulting in'.86% file so i tested different buffer sizes again there we go let's go okay we're starting to get closer we're starting to get closer all right i like it i like it i'm surprised so i'm surprised it's going to take him a half second to process through all that data but okay okay i i guess i could believe it it's a billion objects it's a billion things you have to parse in a half second actually that you know now that i say that out loud that's it feels fast i wonder what it would take in javascript i wonder how fast you could make this in javascript i don't know now i want to try now i actually want to see how fast can you make it in javascript just because it's so hard to get javascript to run correctly probably close you could probably make it fairly close because you got to remember that when you call to a map you're calling to c++ functions when you read from a file you're effectively doing c++ stuff i think this is where bun versus no node would make a huge difference to business days all right t it's going to be about two business days great now that we make a lot more sense okay all right now that makes now now that make a lot more sense okay good so we're looking good i like it i lack the knowledge to explain why large buffer file reads is so much better than other versions but i believe it may be related to how the information is retrieved from ssd yes you're calling the system a lot less right you stay in your land longer than than in other person's land to finish up the minimum structure i want to communicate with multiple go routines to get the feel of how much overhead that could add my idea was to create a single go routine send the buffer directly to it using a channel so i can measure the cost of communication alone interesting yeah because you almost because you couldn't reuse the buffer i bet you could kind of cheat the system by making like something like five buffers the indent is insane it's just because it's a tab right welcome to tabs tabs on the internet you know for all those people saying tabs are appear good and everyone should just use tabs there's always internet problems okay we still got a long way to go we still got a long way to go okay all right to finish up the minimum structure i want to communicate with multiple go routines okay we already did this one so this makes sense so here consumer is just reading from the channel writer is literally just sending these things one at a time okay cool this increased time to 1. 1266 seconds interesting i'm a little bit surprised by that i'm surprised it took oh is he using a buffer channel yeah he's even using a buffer channel i'm a little bit surprised that it took 3 seconds to send that over is it really that that much i guess yeah it's a billion road i guess you're sending over a billion items you're setting over a billion items i i i i can never remember do is a go routine different than a co- routine i would say no i s i'm assuming depending on how you allocate this but probably not like not a co- routine you think a co- routine is different like a sort of i can never tell when it comes to a co- routine is that just con is is is that exclusively so just for my own knowledge when people use the term co-routine does that imply no parallelism or does it imply there could be parallelism that's the one thing i don't know co- routines are two generators yielding to each other there's no actual parallelism yeah so that that was my question was is a co- routine because lua co- routines aren't they don't run in parallel there's no parallelism okay okay then a go routine does have parallelism you can have parallelism and go routines are effectively just you know you got these nice green threads so my question was does a go does a channel is a channel a lock free q cotlin cobes can be par okay well that ruins everything yeah it does have a of course it has some sort of schedule during the leg the leg work i mean anything that anything that's doing acing stuff or anything that's doing stuff and running in parallel you have some managed environment running it right there's there's no it would make zero sense if you didn't right they how could it ever even run something's doing it right gertin are are made parallel viia threads yes a go routine has a mutex okay interesting it has a mutex okay you mean not a routine a a a channel a channel has a mutex okay i feel like i've asked this question before if a channel is a lock free q or if it's a mutex protected item but okay so it's a it's a i wonder i wonder if there's there's a speed difference i have no idea i honestly have i have no idea the speed difference between a lock fre q versus a newex channel i have no idea copying the buffer all right let's see i still got some problems the first one is that the file. read buffer will override the buffer every let's see let's see buffer every reading thus if we send the buffer to the channel directly among other synchronization problems the consumer will read inconsistent data this problem will be even worse when we add more go routines correct i wonder if you even really need more go routines to avoid this situation i will copy the buffer data into another array see i don't think you need i wonder if you need to do that i don't think you need to do that increasing the time to about 2.3 seconds almost doubling it notice that i tried to create a slice and copy the data manually with for this without any improvement okay so now we we're back to being slow we're back to being slow in sag again single girl routine copying buffer people let's see people take over two weeks to review my diffs and i'm being pushed out oh sorry we're in the middle of something we're in the middle so i can't i can be asking questions about things plus you kind of gave me like the middle you gave me like the middle of it i don't even know like the ends of it i have no idea what you're talking about flip take that out if you can flip please flip i'm telling you flip could you take that out all right leftover logic a let's see a natural way to scale our solution is spending each chunk or sending each chunk of data to a different go routine in parallel the go routines aggregate or aggregate the data independently and when finished the main thread should merge the information i believe that this process is similar to how no squeal databases optimize their queries however at this point the main thread reads a fixed buffer amount from the file but the lines can have different lengths which means that the buffer will cut off the last line unless we're really lucky yes yes i added leftover logic to store incomplete last line from one read from one reading to be used as the first part of the next chunk interesting interesting interesting interesting i don't know if i would do that nice by the way for those that are wondering 10 10 is the value of a new line character if i'm not mistaken right it's hexa which is the new line because you don't actually have to do this interesting anyways whatever all right so we're at 2.3 seconds okay so how does he get it lower you're hexy yeah i know all right workers and communications as i stated previously the natural evolution from here is to create a workflow where go routine process the data chunks and return the partial aggregation and the main thread merges and presents the results okay yeah my idea was creating a list of go routines and sending the data to each of them sequentially cycling the go routines until the end of the file there was no significant increase of of time with this modification at this point i just copied the old processing with a few changes okay so why are we still using scanner i thought we're done using scanner here people were we done using scanner did we not prove that you got to do you got to do this one you guys drop the scanner anyways input chan oh is that thing this article is much better than i expected why i thought this article is going to be great right all right so we see all these things we're going to do some parsing some floating some blah blah blah blah all right consumer okay so this is a consumer here we go okay so it's reading this and it's using a scanner to read the data oh interesting it's using a scanner crazy okay it seems like a lot of work for this especially since the temperature you know is a single decimal point to precision and always within like this very specified amount it kind of feels like you could always make like a pretty easy read here right the read are somewhere the the read is somewhere between three to five bytes every single time all right anyways okay so they do a lot of this blah blah blah we've already seen all this they've read they oh file reading we've already talked about that they do the copying with the leftover data send over the data current worker doing one of these little cyc things by the way okay nice beautiful do this thing do all that thing little weight group wait for all the workers to finish okay fantastic and then we put all the data together and then i guess you aggregate all the data okay okay now we got two new parameters to adjust the number of workers and the size of the buffer channel to discover the impact of these parameters i created a grid test that run with each pair of configuration to see the results okay well that well done well done buffers and workers okay so i don't know why that one i don't know why that one's better i can't i don't know why that one's better but okay i like this i mean i like i like what he's doing here this is good this is really great exploration work by the way as expected for somebody that like cuz you got to remember this guy explicitly stated he is not somebody that knows about a bunch of low-level optimization like he just does he has no idea so he's just experimenting i love i love watching empirical investigations go down this much code better be building a full operating system or i'm going to be disappointed as expected a few go routines with a s single message buffer in the channel lock the main thread waiting to channel let's see waiting for the channel to become available there was no significant gain with more than 25 workers after the buffer size of 10 for a balanced setting i will proceed with 25 workers in a buffer size of 25 okay right in this he's shooting for this region right here okay i love latin modern serif okay okay i'm glad you love that discovery and progress managers be like push it to p we're done good enough optimization starting from the basic implementation i'll show how identified and worked to optimize individual code pass if you wish to repeat the process you can add the following stimp it at the beginning of your program cpu profiler prof this okay so we're going to start doing a little bit of that delicious cpu profiler let's go all right then i'll run the tool go tool ppr htp this thing right here cpu profiler prof which will open a detailed site showing the cpu profile insights the image below is one let's see is one of the reports presented by the site called a flame graph here technically it's an icicle chart okay cuz it's hanging from the it's a stag m cuz it's hanging from the ceiling and not going upwards like flames you know some people try to call these things icicle charts instead of flame graphs you know we used to have just one term for things and then people got so cutesy and then all of a sudden now some people toss out the phrase icicle chart and i'm just like is it stag tight i think it's stag might is it am i wrong on this one stag stag i dud i don't even know how to spell the effing thing oh damn you're right it's rising from the floor man oh man i'm stupid damn stag these nuts got him god my my cap my cave knowledge gosh dang people my cave knowledge is so weak anyways by the way can we just take one brief second here just one brief second here and just appreciate that this is supported in go can we just all be very happy that this is free free and go javascript can do that javascript cannot do that my friend okay you have to use what is referred to as the chrome debugger protocol to hook up specifically to v8 to be able to transfer out this type of information you have to be able to use that chrome does not do that or i mean javascript does not do that v8 does that javascript core has some level of support for that and it's been varying over the years and as as chrome adds something like say the performance timeline which is the new thing they've been pushing you'll notice that something like javascript core does not have it bun doo support so those are run times bun uses javascript core which means it's going to lag behind anything that you see in v8 because v8 is chrome right i mean the same same team so they're working hand and glove dino on the other hand's using v8 so technically it should be able to do that long as the runtime allows for you to interact and set those flags all right anyways fantastic okay so what do we got here look at that look at that parse float you knew it was going to be parse float that son of a was going to be parse float you knew for a fact that son of a was going to be a parse float let's see let's begin with a bite split function or which i'm let's see which i'm using to split the name and temperature readings for each line as we can see the flame graph most of the time consumed is attributed to memory allocations runtime make slice and make malik gc the simplest solution is to keep a fix siiz buffer for the name and temperature and copy the bites from the original line into new buffers yeah yeah yeah yeah that makes sense how how do they how do they do that okay we got this nice little output channel weight weight group we all have all this stuff do we have like a fix size buffer there you go named buffer temperature buffer we do this thing i'm trying to find where he does this thing i don't know where he's doing this could you like not convert it to a string could you just store a series of bytes a bite array as a key i wonder how that keys into this with this change we could only reach 5.5 seconds optimizing solution removing the bite split reduced about almost 3 seconds of total time this is where things get get funny right isn't it funny how once you get into this level of optimization when it comes to this many items simple things like this actually make like second difference that's why like you know that's why i always have that grudge with the 4 each loop in javascript when i was using a 4 each loop throughout my program because i was trying to be mr good guy and not use you know not use boomer loops and then all of a sudden when i just tried for fun to remove my boom or to or to use boomer loops instead of these four eaches it it was like on the order of like 6 seconds and i was just like okay i'm just not going to use stupid loops anymore i'm going to use boomer loops because that's way better boomer loops four four loops 4 i equals z i has to be less [music] than there we go damn now i feel old yeah well i'm a boomer and i like those boomer loops all right custom bite hash now the next major offender is bites to string conversion see i was wondering about this i was wondering about this a subsequent map lookup the former is a problem because the statement string name buffer this is the exact line i was asking about it's almost like i pre-read this also allocates memory luckily this conversion is not necessary for interacting of the loop the name as string serves two purposes first to store it in the station data struct second to be used to look up in the map the the map lookup involves extracting a hash from the key and applying internal logic to to locate the corresponding data within the struct we can speed up the processing by sending a preash key so i decided to use the fnv hash which is a built-in and go i have no idea how it works but it works all right hell yeah yeah yeah there we go give me that give me that data give me that data reset right bam bam bam bam let's go i like it i like it i like it did did they also alter the line they must have also altered the line right here the string data wait hold on did you actually keep it in right here you what why why you got to keep the st first off you spelled that wrong okay first off typo second off you can't just be removing one name and then keeping it also right here just drop the station name dog all right there you go that improved it all right all right fantastic fantastic parsing float ne next biggest vendor is parse float i tried the same approach of converting the bites directly to the float big indian o we got the nice big indian indan babies oo the big indians attempt one attempt two i don't see how these things are going to work cuz you're still using parse float you don't need parse float the attempt was using the binary built-in package but its performance was a lot worse the second attempt was using the btes the btes converted from the perf package let's see as you can see here but the results was equivalent so i considered parsing the individual bites but i let's see but i couldn't thought in any real improvement to the function but i couldn't thought however at this point i already had consulted some of the java solutions and one of the best approaches they used is converting the temperature to an int instead of floats which proved to be a lot more efficient he's lost he lost his mind while optimizing yeah something english is a little hard in this one something english is a little hard i told you god damn it integer is a gift from god it well yes it's that's because the float specification is crazy and you already know that it's up to two digits a period and one digit so it's kind of like you really don't even need to parse int you need to just simply you know you could have the simplest number function that's just like 0 through 9 0 through n period skip it 0 through n that's it right like i i don't know it feels like you don't even need to do parsent at all already showed some improvement but notice that if we just conver because you don't even have to check like you check for a negative sign once you know but notice that if we convert the data to int from string we'll lose the decimal point thus i wrote a custom int conver ver that will keep the decimal point and generate an int equivalent in float temperature this this this we can just have the final result by dividing the mean min max by 10 let's go that'd be good that's all you need to do i think bites to int is it negative yes it is negative result there you go i like it i like it i like it this is good okay this is exactly what you want this is fantastic this is fantastic negative do this this i don't think you really need to do this i guess you do need to do that you do have to multiply by 10 yeah what am i saying you have to do that anyways again well maybe i'm sure there's probably another way you could make this better but again another large improvement 3. 3 seconds nice nice let's go we're getting so far down oh we've seen a lot we've seen a lot of main time thing we got stack these bad boys uh custom scan the custom scan function is very straightforward we just needed to read the bytes until we find the slash end yep so there must be yeah there you go scanner so they're going to try to take out this chunk right here because if you take out this chunk you're going to see a huge you're going to see a huge w right here yeah you have to do the 10x to yeah this let's see the custom scan function is very straightforward we just read the btes until we find the slash head yep all right right that shouldn't be too hard read all these things blah blah blah blah i think we all know what's going on here by the way multiple return items are just fantastic okay i love implied tupal can we all just take a moment and say that if you can't return multiple values from a function your language is weak okay weak no no that's not returning multiple you're returning a single one you're destructuring on both sides that does not count this does not count there's a whole set of problems that go along with that when you return an object again you have to like typee that object you have to build it up there's like all sorts of things you have to do when you have to do that okay it does it in fact does not count this does not count this in fact does not count this is coping this is called cope you you typescript bros have just you you guys have lost it you guys have genuinely lost it you you know what you should do you should just take the l okay and say yeah it's true we don't got multiple return parameters but we can we can at least create an object wra the object return the object and destructure set object okay that's not the same we are not the same you got to remember when you return an array or an object you're also getting all the other things that an object does must be talking about js we are tech savvy travy people are trying to say that this like javascript can do this too you just wrap a little array around it or just do or just put a little object right there easy not hard it's just like well it's not the same there's still like javascript constructs a lot of things when it comes to an object right it does put something in the nursery gc you must remember that there's a nursery gc it gets added to the nursery gc there's like things that happen okay it's not for freezy it's not it's not zero it's not zero cost all right so as usual look at this and this is our flame graph okay so it looks like we got we got to do some sort of we got to do some stacking here okay we got to stack these sons of custom hash i began considering a custom computation for the map hash after noticing an increased relevance of function some rate at this point i had the done some analysis and could extract some insights about the data in the measurements file one interesting finding was determining the number of bytes required to represent a station name without colliding with other stations in my database i found that i needed nine bytes with values ranging from 65 to 196 using this information i had the idea of concatenating every number into a single large un 64 while ensuring that the value does not surpass the upper limit of this i think that's fine but you're still having to like do a bunch of math to get stuff out i'm not sure if i buy this as like a win i'm not sure if i buy this before implementing the my solution i benched it against my f half running those functions this one okay yeah well i guess this wins there you go i guess you're doing a special case hash but how often are you colliding like the real question is is that are you actually slowing down all the map side of things that's where the danger comes whenever you write your own hash function your hash fun your hash function may be faster but it may collide more and you may you may get yourself some oopsy daisies on the other side you get a you get you get a real problem potentially so you know i'm not saying this is a great idea it's worth noting that this hash is very situation and may fail fall let's see fail in different data sets a problem for later nonetheless in this particular case the result was 2.7 seconds okay awesome okay okay i still think i still think we got some things left here okay inline functions the consumer let's see consumer is a hot let's see is the hot path thus any function call outside of it can potentially generate unnecessary overhead however inlining all the functions didn't show any improvement but made me lose the profiling information edit i just learned that go inline functions automatic automatically whenever possible you don't yeah there you go fantastic workers reading the file while drafting this article i realized that i was super close to reaching the max the minimum threshold i had set with the main thread configuration upon analyzing most of the time in the main thread was related to go routine communication with .98 seconds to reading the file and 0.13 seconds to communicating the data to co- routines it struck me that i could just move the file reference to a consumer and completely eliminate the communication overhead including replacing the communication buffer for a fixed buffer reducing the memory allocation overhead yeah but you're locking are you really i mean i guess if you're saying that your your reading is is better it's not cheating it's just that you're assuming that you're i mean it could be right because you're not actually doing any sort of i mean to be completely fair you're not coping buffers anymore and you're able to if if there's already a mutex in the channel then why not just try your own because then there's no because you're not actually do there's no buffering there's no extra anything going on you're just literally doing that this is actually pretty interesting okay by delegating the reading task to the consumers the go routine can locally the the only hard part is when you read how do you not accidentally read so far as to hit hit a new line that's where my question is is that you have to read to a new line and then you have to like not read a mutex is a spin lock underneath the hood i think you're right i think it might be a spin lock underneath the hood by delegating the reading task to the consumer the go routine can locally read from the file using a mut text to avoid any concurrency issues for testing purposes i let's see only i will discard the first and last line of the buffer to avoid complex distribution leftover logic for now the results were reduced further to 2.1 seconds yeah see i'm consider i'm curious about the distribution of little endline things right how do you do the end lines i don't know how they did that trash bin in order to recover the first and last line of each chunk i created a trash bin go routine that receives the discarded paths from other go routines and tried to merge the individual parts to complete the line that sounds crazy how this can't be right notice that the first line of the go routine is always complete complete valid line the last line of the go routine is always empty the file ends with sln all parts of the line between the match let's see matched by their id each read from each read from file increases the id the first line is kept as the previous id and the last line assumes the next id this process is controlled by the same m text used in reading the file guaranteeing the cons concurrency consistency i don't know how this works i don't understand how things are reading file like this i don't know how you're even guaranteeing this order question couldn't you just have a global bite that's like say i don't know 500 bytes or something like that just some small amount of bytes that the last one that you're reading while you have the lock mutex is that you read back take that trash amount and put it into this little global buffer and then when you unlock you're actually locking two things at once instead of one wouldn't you just have that you like i i don't see why you'd want to use like a channel or something like that a go routine that receives like that's the confusing part is this go routine receiving business that i don't really quite understand name and temp puffer i finally realize that i don't need a name and temp buffer yeah i know i let's see if i just use the sub slice of the read buffer i don't need the copy of the name and temperature buffer over and over again with this change of further reduced it to two seconds pretty much 2.07 seconds okay we're getting we're getting swiss swiss map i think we missed we missed some statement with the swiss map all right all right we're getting smaller we're getting smaller finishing up with grid test i to finish up in style i wanted to perform a new grid test however i needed more samples for a setting in order to address the time variation which is too which is much too close to each other now since i removed the channel buffer i only have two parameters read the buffer size read buff size and the number of workers after 15 runs for each configuration as you can see let's see all right could be achieved in less than two seconds and some runs now using the winner configuration for the final test i increased the number of runs to 55 and closed everything in the computer but the terminal the results are the following pretty good job pretty dang good job i feel like this would be a fun challenge to do just to because i've never used any the gopr tools the pepr tools i've never i haven't used them in the goand i just love the fact that they exist here it just seems so beautiful it'd be fun to do link i've already linked it once people come on get get your in the game people the p prof the pp prof that that a p prof gun thank you still mind blowing that java managed to get it to 1.5 seconds there must be something that they're doing you know there's probably something that is done wrong here cuz it you know someone was saying they got it in like milliseconds but there has to be something wrong with that right and what i mean by let's say i'm i'm going to have to do this aren't i i know travy that's how i already feel i already feel like i'm going to have to do this i already feel like i do whipped mango thank you very much final thoughts okay moreover for me the results are more incredible because i i didn't bother too much about manipulating the bites individually like the java best like the best java solution okay there we go fantastic all right this was a great article this is a great do you see why we like to do this does everyone see why you like to do this this is actually kind of fantastic this is great abs absolutely love it this one's a lot better than the java one you think so compile linux from scratch and let's get those numbers down absolutely that's the easiest way to do it the name is someone saying it's less than one second no guys guys look it says right here 1.96 okay dog what are you talking about it's right here hey the name the name is the prime gen you know what i mean that's the name