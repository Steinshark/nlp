we fired our top talent best decision we have ever made free code camp you actually just reached out recently for a sponsorship are you trying to tell me i'm i'm not top topline talent here is that what you're saying are you implicitly calling me soft is that what you're saying i don't know how i feel right now i honestly don't know how i feel right now i'm hurting right now jonathan let's go you will never be able to understand any of what i've created i am albert effing einstein and you are all monkeys scrabbling in the dirt oh beautiful wife thank you so our resident genius dr jackal explos explosively completed his transformation into mr hyde he declared this in front of our product design team developers management and pre-launch customers one of our project sponsored had the tarity to ask when the problem crippling our product would be fixed wait someone actually said this out loud hell yeah dude can i can i somehow be in that meeting i want to be called a monkey scribbling in dirt like i i want to be that guy i want to be sitting there going i'm too stupid yeah yeah i'm too stup stupid i want i want to be in there i want to see this genius is a fickle beast sometimes you have the good fortune to work with a mad genius other times you are doomed to work with pure madness i love that statement there was a genius a guy that wrote the rhyme of the the mariner coolidge and throughout his life he struggled with alcoholism and he would often go mad and he would talk they in fact another great poet i forget the guy's name said that he would talk from from dawn until dusk or he used some specific phrase that milton also used in paradise loss when describing satan's fall from heaven to hell and he said the same thing that that coolidge could talk like the devil and he would actually turn people like there's writings about people saying i am not willing to meet with you again because of how much you talk and like how mad he was genius is real and it can be crazy to me this isn't a genius this is just this is just this is just a blow this is just a blow hard other times you are doomed to work with pure madness there are also times when it's hard to tell the difference this story is about the fall from grace of an extremely gifted team member with a deep understanding of our product's architecture he had an uncanny ab uncanny ability to forecast future requirements and a ton of domain specific knowledge ooh this is a hard fire that's a hard fire when someone can do this that's a hard fire he was our top contributor he was killing our flagship project project ooh we'll call this person rick effing rick you should have first off huge fail here should have called him tom everybody knows about tom tom's a genius you wouldn't understand this you called him rick mr sanchez pickle rick good old fashioned pickling you know what i mean rick was universally recognized on the team as the top talent he was the lead developer and architect of the software projects anytime anyone had a question about code or needed help with the task they would go to rick rick had a giant whiteboard installed in his office used only for his this purpose it was always cluttered with ghosts of the past discussions that that wouldn't quite erase anytime there was a particularly challenging by the way if you can get a whiteboard in your office you your iq your perceived iq goes up an entire generation like 15 points it's the fastest way to make people think you're smarter is just just be closer to a whiteboard right proximity to a whiteboard it's just like stocks it's like the netflix stock honestly it's just like netflix stock yes we're going up today we're going up people 0.13% let's go let's go oh boys red lobsters on me tonight anytime there was a particularly challenging problem rick would handle it rick had a server had a server with the same specs as our production server installed at his desk he used this to run the entire application stack independently and troubleshoot every layer at once oh yeah rick didn't need anybody else rick preferred to work alone in his private workpace rick didn't need anything anybody else built he built everything he needed from scratch because it was infinitely better than the poultry offerings of mere mortals that's pretty exciting soon rick stopped attending meetings all right yeah that's a good that's a power move right there rick okay this is a p this is a power move right here okay i'm just not attending meetings okay okay i aspire to be rick yeah i think we need the all asp to be rick right now rick didn't have time for meetings anymore because there was too much to code let's go rick rick closed his door his whiteboard lay fallow rick no longer had time to train anyone because he had too much to solve on his own interesting so there's a kind of a weird story going on here i wonder if this whole fall from grace this whole milton fall going on right here from from dawn to dusk i wonder if part of the problem also lay in the management of rick let me guess the next step he did was as the hr how strict the sexual harassment policies were sounds like a move a rick would do i'm just saying cuz this already sounds like people really like what he's producing so they let rick keep making these bad decisions thus creating rick into the villain right all legends live long enough to become villains let rick cook they let rick cook that's the problem is they kept letting rick cook they made rick okay a backlog grew behind rick bugs were popping up in old tools he built they snapped his attention from meeting commitments on new product development got to be careful about this i mean homegrown tools are both the the best thing and the worst thing right now i'm in the process of making a determination about using an industry standard tool or what we can do ourselves to meet our specific needs and our specific needs are just different than what the industry needs but at the same time this is a this is a real problem about building your own tools is that you will lose time because you also have to start meeting things homegrown is the worst it's not the worst sometimes homegrown is the best type one in the chat if you love react there are a couple ones there's not a lot of ones but there is some ones in chat think about that for a second though that's a homegrown tool okay what about solid anyone here wants solid that's the thing is that just because something's homegrown doesn't mean it's bad or good homegrown works if the company that produces it makes room for it to be successful does that make sense yes i like metal gear solid when i worked on falor netflix falor should have been more successful honestly it should it should have been so much more successful than it was it honestly there's a lot of good things about falor i think there's some things that we could have made a lot better falor had a lot of really good ideas in it the reason why it wasn't successful ful is that pretty much at one point it was just me programming it was really really hard you know and the problem space was huge falor mentioned let's go i ain't rick i'm just saying you need tools you need support you need someone like that's thrown together the lsp you need somebody that's thrown together documentation you need somebody that's also meeting bugs that's talking with people you also need someone that's managing the community falkor's community when we released falor in 2015 i think to the public it had 5,000 stars on github that's crazy back then that was like day one you realize there all sudden there was like thousands i'm going through thousands of issues trying to fix all these people's issues responding to everything it started showing up on questions on stack overflow all of a sudden i'm on stack overflow answering all these questions then at work people are like why isn't this delivered why isn't this delivered where is all these things and you be like this is real you can't let rick happen of course these bugs were happening because the users had misstated their assumptions of course there wasn't any problem in his work of course on our project dashboard green flags changed to yellow yellow changed to red and red light started blinking ling one by one task status has changed to impeded everyone was waiting for rick the project manager got a six-month extension from a sponsor at the end of the 6 months production readiness was estimated to be a 7 months away at the end of the year production readiness was 2 years out i totally get it i totally get that software estimating is really really hard i know where is management and all this that exact well i mean the problem is that there's a beast they've created a beast i rick was their own creation i mean obviously rick allowed it to happen probably got a lot of accolades slaps on the back you know there's probably people being like wow i can't believe you created this thing this thing is so useful for what we're doing i'm not saying he was right he should have had the wisdom to know not to build your own tools but also when everyone's cheering you on do you build your own tools rick got the premium bathroom ramen all the time you know he did you know for a fact pick he was getting that premium hand-fed wagu bathroom ramen adab boys are nice adab boys can make terrible decisions rick was churning out code faster than ever he was working 7 days a week 12 hours a day everyone knew only rick could pull the team out of this mess everyone held their breath and waited for rick to invent the a miracle cure that would mend this crippled project every day ruk grew more belligerent and isolated really have you ever worked 7 days a week you know what happens when you do that that's some big rick energy right there the mask was coming off jackal was becoming hide i participated in my first meeting with the project team about 2 years after the original agreed release date i had been aware of the project for a while because it had grown infamous in my organization and hadn't been assigned to it i was sent to see if we could save it my first meeting on the project was the aff mentioned albert einstein meeting i dove into the source code rick was right no one could possibly understand what rick had created except for rick it was a reflection of the workings of his own mind some of it was very clever a lot of it was copy pasta it was all very idiosyncratic and it was not all well documented i went to our cio with the verdict only rick would ever be able to maintain this product plus every day that rick worked on the project moved the delivery date back a week that's an oof right there rick was a negative 10x engineer all along like i've like we've said we've said quite a bit on this channel for a long time that the only true 10x engineer is the engineer that can create 10x the work they just need more ricks honestly just more ricks we sat down with rick and had a conversation about his role in the project we reviewed our concerns we sidestepped his self-comparison to albert einstein that's probably a good move you know if anyone ever says that they're on the level of albert einstein probably a good move to avoid it they drove rick into burnout then fired him yeah yeah that's what it that's that's what we're about to look at free code camp i don't think this article is doing what you think it's doing free camp i'm not sure if you're reading the article the way other people are reading it we explained our new strategy the team was going to collaborate on building new products from scratch this effort would be very limited in scope and would only provide the bare essentials to get us to production the whole team would contribute and be able to support it no bottlenecks how did rick react to this the only way rick could rick exploded yeah imagine working on something for se 12 hours a day s days a week after being cheered on and told that you're great at this only to become slowly more and more burnt out to at the end someone says we're going to throw away all those years of work they are dr frank like i just think about this for rick like from rick's perspective for second dude what i mean here's here's the real deal though you should always control your emotions there's no excuse to like you should really never try to let yourself explode they created a main character and then realized there ain't no main character i feel for rick i don't albert einstein said some albert einstein was feisty i hope know that all of albert einstein's quotes none of them are nice yeah i don't know work seven days a week in a row for a while and see how your temper is judo that's what happened to me that's the falor time dude i flew off the handle at some point i went to my boss met with her and i was like i quit this [ __ ] i quit [ __ ] everything that was me i did that it's what happens when you work too much you you lose you lose it you lose perspective on life rick i wanted no part of this farce if we couldn't appreciate his genius that was our fault not his rick predicted that within months we'd come crawling back to him begging him to to save us rick screamed that we lacked the basic mental capacity to appreciate genius when it was staring us in the face i i you know the one thing i don't get about rick though is have you ever been in this situation i feel like if you've been in this situation i wouldn't be screaming this i'd be screaming like why the hell haven't you done all these things right like i feel like i'd be screaming a different set of tunes sadly after this rick rejected months of overtures by leadership he refused to take time off or allow any work to be delegated he rejected repeated attempts to introduce free open source frameworks to replace his hard to maintain bespoke tools he reverted code changes including tested bug fixes by other developers he asserted that he wouldn't be held accountable for supporting other people's work he continued publicly belittling his colleagues we fired rick i mean i do agree public belittling is not is not good i think this is more based on a true story i don't know i just assume free code camp probably wouldn't want to exaggerate too hard about somebody can we all just agree on this one this is a no rick team it took about a week for the dust to settle it took time for the shocked team to gather themselves after losing their embattled guru then i saw them huddle around a white board collaboration stock photo of collaboration you can tell because it has a hard hat and no person in the universe has rolled up paper at their desk this this tall they collaborated they designed a replacement product it would be much simpler it wouldn't have all the bells and whistles nor would it anticipate requirements from 5 years down the product road map never write real code without a real hard hat rick's a product supported a dynamic workflow with over 15,000 permutations in reality 99% of our use cases followed one of three pass holy [ __ ] wait a second i know this plot this is the black mirror choose your own adventure movie wait a second black mirror choose your own adventure this is just this is just bander snatch did they just did they just did they are they retelling bander snatch is that what we're getting right now this is such a bander snatch moment netflix mentioned let's go this removed over 30% of rick's work the team hardcoded the workflow by the way this is like the greatest way to do things i do want to say that if you're building something that has a workflow just build the effing workflow stop trying to create some system that's going to solve every possible workflow ever created doesn't work that way it wouldn't have custom hand-coded components for every task they stripped out every bespoke dependency that they could buy instead of build nice this removed hundreds of hours r of risk contributions but it also removed thousands of hours of technical debt we obtained an agreement from the project sponsor to shut off the edge case functionality this had served only 5% of our pre-launch user group and was responsible for about a quarter of the product's complexity we re-released the product to this group it consist of 10% of rick's original code which was was pretty stable it also had a few thousand lines of new code to replace about 150,000 lines of incomprehensible mess that's a lot that's a lot of coding that's a lot of coding the team had replaced 5 years of work in about 6 months over the next few months we expanded from pilot to full customer release not only had we replaced what rick had built we spent we we sped past him and fully launched the product all in under a year the result was less than a fifth of the size of complexity of what rick had built yeah if only if if only there was somebody hear me out here hear me out here everybody a just just hear me out just for a second okay imagine if there was like a position where somebody manages the product and prevents people from over engineering it imagine not possible i don't think that exists okay that' be amazing yeah i know i'm an idea man i'm an idea man okay a scrum mommy we need a scrub mommy we need a scrum mommy immediately soy chaotic where are you i always call you soy chaotic i know it's soy chotic okay but in my head it's soy chaotic okay cuz it's more descriptive i feel like you're our scrum mommy so i need you in here telling rick how to livei you could save him you could change him okay i believe in you it was also hundreds of times faster and nearly bug-free despite having been assembled in a fraction of the time and serving 10 times as many customers that went back to rick's other products they threw away his old code too they re-released another product after his 3 years in development with 3 months of concerted team effort there were no ricks left on the team we didn't have any mad geniuses building everything from scratch but our productivity was never higher rick was very talented developer rick could solve complex business logic problems and created sophisticated architectures to support his lofty designs rick could not solve the problem of how to work effectively on a team this is a hard one i still go back to this one as being a very hard one i i like using open source tools until they quit fitting your needs then you kind of have to build from scratch or find a new tool what a long linkedin post rick's presence was destructive in several ways first he created a cult of dependence any problem eventually became a rick problem a myth he encouraged developers learned to stop trying and way just wait for rick second he didn't write maintainable code he never documented or tested anything and he failed in spite of his own intelligence his belief in his personal infallibility trumped common sense third he was personally destructive team members didn't want to speak up and offer their own ideas because he always berated them for it rick only respected rick and went out of his way to make everyone else feel small fourth he lacked all personal accountability no failure was his fault he sincerely believed this and prevented him from learning his own mistakes i don't believe rick started out this way i saw him met his worst this was after years of working escalated overtime and facing increasing criticism from customers and colleagues it's sad that rick descended this far his manager shared in this responsibility this is good i'm glad that they because you know what this should have been classic narcissism everyone's a narcissist okay real talk time and circumstances people time and circumstances that's what separates you from rick some people are more narcissistic than others i feel like that's kind of a narcissist point of view my friend i hate when you decide to use a tool and then it takes longer to make it work than your use cas it would have been just to write the own thing directly to fit your needs it's sometimes it's hard to know which way yes that's but that's the thing is that i i feel like a responsible developer first fails by using open source and then fails by trying to write it internally you should first fail by using open source unfortunately rick was so far gone that he couldn't or wouldn't be brought back no amount of coaching feedback time off or assignment to other projects could change his toxic behavior by this point i mean firing actually is a pretty good move like if sometimes you need a sharp wakeup call and that can really help you or you'll just send further depending on which one by this time the whole team knew he was destructive but the cult of dependence was so strong that everyone believed he was the only option there is always another option your team strength is not a function of the talent of individual team members it's a function of their collaboration tenacity and mutual respect and their talent as well also maybe it is also like cuz if you have a really tenacious highly collaborative very respectful group of idiots you're still going to build bad software there's definitely you can't just you can't just throw talent out the window maybe talent is still semi relevant you know what i mean like maybe you got to put a little little you got to put like a little something in there focusing on building teams that value each other and try to bring the best out of one another together they'll be able to tackle greater challenges than rick could ever fathom it's just like wheel of time when women can link together but a man can't link together without a woman and so therefore a woman could defeat a man by joining with another woman even the strongest man could be defeated by multiple women teamwork makes the dreamwork everybody knows that wheel of time reference let's go not amazon wheel of prime okay if you haven't seen wheel of prime you don't need to watch that but wheel of time good book okay if you don't know wheel of time you're a loser that's all come on you don't read extensive worldbuilding fantasy that's like 10,000 pages long what do you guys do with your free time it's described in this s i took place many years ago and do not reflect the opinions or experiences of my current employer i have published follow-up story with our lessons learned if you're interested in reading more and then this is just like hey i got a physics degree from stanford university i've never worked with anyone named rick okay good rick treating his team is equal to prime treating his chat yeah i mean but there's a difference here okay you guys are actual idiots like i don't know what rick's team was like okay i don't know anything about who rick was working with hey youtube chat rules gosh get oh [ __ ] that's pretty good i have a cousin rick a little torn on this one rick didn't fail alone yeah i'm torn on this one too rick did not fail alone i think what what i i see a couple really good lessons here one the encouragement of the self self-propelled individual can be very destructive and you see this actually quite a bit at netflix in the sense that everybody works kind of more in silos and silos are great if someone can execute within that silo and silos can also be very destructive if you have to have more and more cross collaboration and so that's kind of like it's both really really fantastic and both really really hurtful sometimes sometimes you have to go into something and it's really hard to work in that something because it's so siloed off it's such a representation of that ind like that individual's way of doing something and so is it good is it bad i don't know it's hard for me to tell buzz factor is important and right now there's a lot of buzz factor you know how does a a solo dev get feedback that's another thing it's very hard the silos are both great and terrible you know what i mean that's why you have to have standards you have to have standards but standards i mean the problem with standards is process it's always the same thing process is both good and bad i'm a bigger fan of less process i don't think i should tell what another team should do i think that team should make that decision but that naturally leads to silos but that's okay in my personal opinion but here's the deal if that other team is dysfunctional and can't ever get something off the ground that's a failure of the manager the manager should have known things aren't going well that collaboration isn't going well and that way you can get rid of this entire process let engineers discuss what they need and management is supposed to be there to make things work i don't know why people want this constant manager sinking status updates every last little bit of information like you don't need that level you need engineers building managers ensuring timelines are going and that people are actually doing what they're saying they're doing right agile is a sign of bad management in some sense yeah depending on how agile that agile is right at some point do you ever get help from other devs and falor so this is something i've always wanted to talk about i'm not sure how to say it yet but there's something that i i i there's a short coming out of this that i i want to say you constantly hear people saying oh we need to write all of our code in javascript because all we have are javascript engineers or something along that line right where the problem is that we have to adhere to this one singular path because if we don't people on the outside who find bugs won't be able to contribute to what we're doing and here's my kind of inver first take to that which is that i have been working on plenty of projects that were both inner source and open source for a company and every single time that's ever happened no single person ever has come in specifically on inner source has ever helped out in any way ever it seems crazy to say that you must program ins say javascript so that other people can contribute because no one's going to contribute no one's going to help you you should just be able to build it in the language you want long as you can make it fit in the stack because at at the end of the day you're and whoever is on your team are the only people responsible for maintaining and making that project successful and nobody ever is going to come in there out of the goodness of their own free will come and help you make the project better inner source is always a lie it's always been a lie there is no such thing as inner source onboarding is not the problem because people don't have time to just stop doing their job to go play data splunker to try to figure out why your project isn't working no one at your team's going to do that they're going to file a ticket and and that's that the reason is not to write haskell this is true this is probably the reason why this stuff fails so much is that people who have this license go off and write it in hll and then you literally are the only person that can look at it what's inner source you're referring to inner source is when a big company has like open source internally hasal mentioned let's go you know what i think is a tragedy i think every single person that starts a cicd pipeline some person that builds an internal service and they use javascript i think as a i think as a sign of a failure waiting to happen javascript javascript reli ability is extremely difficult use go use rust use anything else use java at least java tells you when things are going to throw and you have to handle them skill issue it's not a skill issue it's like simply not a skill issue it's that javascript just doesn't let you know every single place that an error can occur and things just constantly fail it has like a 1% failure rate do you hate javascript because of falcore no i hate javascript because it doesn't tell you what's throwing and that you don't have to handle it i want errors as values i want to be forced to handle it and i hate handling errors handling errors is tedious and annoying errors have happen constantly errors are everywhere they're all throughout your code and it's absolutely frustrating having to deal with them but what's more frustrating is the fact that you don't deal with them and they just screw up your project slowly over time the name is don't be like rick be a good teammate and talent also matters as well okay