get to see that many people early in the morning on the further the conference actually that's felt great so we'll talk about kind of standard c plus plus tool set whatever it means i mean like that's a little bit maybe a tricky title because i personally do not believe we have a standard c plus plus toolset but we'll try to find out if we have something at least close to it so we're gonna talk about different aspects of the tools today and like what we have and what are the trends so for those who don't know me so my name is anastasia kazakova so i work for jab brains before jailbrains i spent eight years in like cnc plus development for embedded systems we're mostly doing like telecom networking devices we were doing the policy controller for 4g lte networks so all kind of you know funny stuff when you launch the 4g network for the first time in the country that was fun but then i moved to their brains i mostly do not i don't do like c plus plus in production code and working as a product marketing manager but with my c plus plus background just try and help the team and do our best for c plus plus developers and you can find me on twitter and i'm always ready to answer any questions you have around the tools or just like talks or whatever so let's try and figure out what is actually the tool set at least like how i do understand it i'll try to explain it right now so for me the tool set actually that's all the tools we have for the language like literally everything however you can split them into essential tools and as i call them complementary tools essential tools are the tools without which you actually can develop because you can't do any civil plus development without a compiler because you actually need to compile the code yeah and like to then to run it so standard library is also essential to me you kind of can and try deal without it i mean like game developers used to use their own standard library that's fine it has this experience but usually you kind of need at least something from the standard library so i do count standard library as an essential tooling here project model and build systems again it's like you might deal with just compilation flags and just compile your code but it's much easier especially if you have a huge project to deal with like project model or some build system at least something just so you just don't write all your compilation flags in the command line for the huge projects dependency manager again i do count it as an essential even though if that means for you just put your library into the project so you at least doing some dependency manager so you're finding the proper package with the proper version put it maybe into your source code compile it with the whole source code that's also kind of dependency manager maybe not the best way to deal with it but still and like yeah the debugger here again so you might be debugging with like printing some variable values that's also like debugging techniques there's also something you use and like the language might help you and the tool set might help you with some like maybe standalone debugger but that's still essential tooling analyzer is like complementary tools so you literally don't need it if you just build the code and run it so or debug it it's better if you have it and you like running the code checks and you like trying to figure out if you may be running into some potential issues and all that like the other stuff like unit testing framework and all the other tools they're very very important but i also count them as complementary that doesn't mean that you don't need them but just you can survive without them on the first stage but later you still might need them let's briefly see how the other languages are doing so just a brief overview across like maybe a couple of languages so java it has actually i would say one kampala like chavak is either you take it from the like oracle official runtime or gdk doesn't matter the compiler is literally the same they were like there are actually a few more compilers for jello they are not that popular the most popular one probably is the eclipse compiler for java and i wanted to mention it here because it's very specific it was especially created for the id needs so it's quite close to my heart i kind of understand what they were trying to achieve there because the biggest features of this ecg compiler were probably that they can run the code which has some blocks which doesn't compile so it's fine so and also it can do the incremental builds and since it was actually created for the id for eclipse so by the time you finish writing the code it will be already compiled so that was kinda compiler close to the language engine in the id so it's close how the regular language engines are working inside the ids so it's a little bit different from the regular compiler philosophy but kind of close to yeah to id needs so that was done by clips i guessed it kind of abandoned it so it still exists but they're not like putting too much efforts indeed so java class library is rich and like usually when the people feel envy in c plus plus they usually feel envy towards you know java because they have this huge library and they can literally get anything out of it in terms of build systems and project models so they still have several like and is kinda more or less abundant so i'm i it's like used by a small portion of java developers like maven and gradle are the top two probably and maven is kind of more popular but still bridle has its audience so the numbers are quite different like 20 percent came from our japanese developer ecosystem and 49 came from j rebel survey i guess both are biased so the truth is somewhere in between so i put it just through the dash yeah and j unit is just like if you need to do the tests with java like some basic tasks you just take the g unit ruby it's a little bit tricky because like it doesn't need a compiler kind it's an interpreter so it's a different philosophy they have like several of them and they have because that's like you can do an interpreter you can do jit and you can do some other techniques here there are several implementations so mri is the original implementation for ruby internal from the like ruby offer it's also called c ruby yarv is like yet another ruby vm i guess that's something which the ruby offer is right now developing so it's some new thing like j ruby for gvm rubinos based on lvm like iron ruby4.net so there were several implementations interesting fact i don't know how many of you know what's the real singularity means for ruby anyone here no okay so you've probably heard that there is this ruby on rails framework it's very popular i mean like it's used by 86 or something like that percent of the ruby developers and it's very complex it has some it uses some ruby specific features quite many of them and it's actually hard to compile it properly and so ruby like real singularity for ruby means so if you can compile ruby on rails then like your compiler is good enough and as far as i know they're just not that many compilers that pass pass the test it's just mri and yarf and also i guess like j ruby and rubinos so the others are kind of good but they are not passing the real singularity so ruby developers they just don't take them seriously if the compiler doesn't pass that they don't need it anyway like they have a fantastic package management approach so they have ruby games they have bundler which i guess it was a third party tool but it's somehow now the official part of the ecosystem and it's used like by 90 of the ruby developers and yeah i respect for tests they also have some other frameworks but that just depends on the frameworks and specific areas you are using the ruby at swift it's fantastic example from apple i mean like apple just maintains everything i mean like they have the swift tool chain you just get it from apple you have the swift compiler it's like lvm based but you'd better take it like from this swift to chain and the same story with actual ldb so you can't use just a regular ledb you have to take the swift tool chain take the compiler from it take the debugger from it and everything just working like a charm for you they have source kit which is like an language server protocol and there are lots of analyzers and the source kit is like also providing some code analysis and you can build some tooling on top of it there is this approach for suite when you can actually not just debug your code but you can like play around it with the playgrounds or redevelop print loop approach when you just you know it's kind of like an interpreter so you play with the code and it's got interpreted and you see the result swift package manager spm was specifically created for swift cacao bots are still popular but the main reason i guess is that they were the top package manager for objective c objective c plus plus and the people just keep using it for a swift but i see the trend that the swift developers who came from objective c background and who are using cucopos they are kind of migrating to spm because spm is official so everyone were expected actually that when the swift were was announced everyone i guess was expecting apple to buy the company behind the cocoa pots and just you know get it official but surprisingly they didn't do that so they maintained their spm and so now there are two but i guess spm will kind of win in the future unfortunately cacao parts is actually quite nice and like your exitus is just the main framework and the example which is closer to like our house as c plus plus developers and which i think is a perfect example here because to me raste echo system in terms of the tool set is kind of ideal i mean you have rusty compiler that's it that's just one compiler you have cargo which is a build system and also a package manager i mean like it does incredible job for you so it downloads compiles distributes uploads all the packages so you don't have actually to care about anything so it takes the packages from the official red like registry it like compiles everything in your project so you just say like i need this package of like this version raster from t are very popular for matter they also have kind of standard rust analyzer that's again the lsp thing like the language server protocol based analyzer interesting fact that due to our surveys like 60 of the rust developers they do debug via the printing function or via the special debug macro which rust has so they kinda also has the proper they have the proper standalone debugger but they mostly not using it and yeah the the for tasks they just enable the special model for a cargo and just use it so this ecosystem is very very simple and straightforward and in terms of the c plus plus tool set so you you might feel about rust differently but the tool set is actually ideal i mean like they have everything very very standard very open to everyone so it's not like first for swift it's also standard but it's maintained by apple and you like never know how it goes and it's just their decision for us it's more like open to the community but still standard which is good why at all the standard two set matters actually to start quicker with the language because when the when like someone who is coming to the language or to the project you just enable everything you set the development environment easily like maybe it's a docker container or some other way to distribute the standard environment you just enable everything and the person is just using some standard thing he or she got used to so there are no like questions if this compiler working differently or how to work with this build system i've never worked with it so standard tool set kind of makes the things easier it helps with some like unifications and like indeed makes the onboarding much easier and also it helps with adoption of the good practices because when you have a standard unit testing framework or maybe even a couple but they are kind of standard you know how to use them through like some official package managers with some like build system which everyone around you like is using then it's easier for you to start because if to start with the unit tests you need to you know spend couple of hours digging through the whole internet trying to find a proper unit testing framework then for a couple of hours trying to learn how to enable it big chances somewhere in the middle you will just say okay i don't need unit tests at all so standard two set indeed makes the life a little bit easier and like kind of increases the chances that you'll be using like good tooling and good practices it doesn't mean that it has to be just one tool for everything no but you just need to have kind of standard tool set even if there are like several tools for the purposes so yeah and if you don't have you have like some conflicts and inconsistencies which like makes your life harder and you probably don't want that from the tool set let's talk about some interesting thing here about like some things not directly related to maybe the tool set as like compiler debugger build system but some other types of inconsistencies you might run into c plus plus and if you don't have a standard approach here you also might run into trouble or at least you need some tools which will help you and this is like the syntax style and i like this thing about c plus plus actually that we can do things in different ways so that we have many opportunities to express ourselves but sometimes the issue is that expressing ourselves in different ways inside one project inside why one team makes the things difficult for our colleagues and the typical examples is the syntax style and c plus plus where we have different approaches to writing the code like just four examples here like almost always out approach when you try to put you know outer specifier almost everywhere or like the opposite camp which says that like yeah when the type is evident we have to put the outer and not in other cases or don't do that for numeric types so this is just the several ways of using the outer across your code then also yeah this is like kind of very known like west coast vs east coast you probably have heard about it so that's about the way where to place con specifier before or after the type it applies to so also two different ways of writing const trailing return type approach is interesting because trillion return type appeared like mostly for expressing the type for lambdas but then some people say like maybe you have to use it everywhere i mean and we have to convert our like regular return type into the trailing return type for the function and there are people who say in the like no we have to use it only like for these cases where we can't live without it or we have to use it everywhere and yeah sometimes it even comes to different styles used in different areas like an example is that simple plus core guidelines they say that when you override a function you have to put either override or like final and you don't have to put virtual and unreal engine guiding standard like which is used by unreal engine game engine they explicitly say that our virtual has to be put explicitly well you don't need it but like the guidelines say that you have to do that and it's interesting because they're a completely conflicting with the core guidelines here so anyway like when we decided to support all these syntax style rules the actually the list of settings is twice longer it just doesn't fits the to the slide i mean i just wanted to show you that we have many many things in the syntax style which we can do differently so and in terms of the standard tool set you need to have like in this case it's mostly the analyzer which we'll be checking these rules for you if you want some standard approach across the whole code base because like if someone is using these rules differently in the same code base is probably not good so yeah for that you kind of need some tool which will be applying the standard approach and so like doing the things like like yeah for example converting the trailing to the trailing return type for you automatically maybe like another thing here about the package management struggle i think like we all know about it but just to show you some statistics so that came from developer ecosystem survey by chair brains from 2021 so when we ask people how do they manage different party libraries in c plus you can find kind of see that like one fourth of the developers they just have the library source code as part of their build so like and i guess the package managers are these numbers in the bottom i mean like vc package and conan and whatever the people use like some nougats some build to approach but like most of the people they just rely on a system package manager or just try to download some pre-built libraries or just like yeah compile the libraries through their instructions okay so c plus plus where we actually now with the tool set let's try to figure out i have to say that for the c plus two set to explain it i really like this slide from bryce talk from c plus now where he was showing like the he was talking about this standard library so again some kind of a standard tool set here is the standard library and what actually belongs to it and he was talking about the universality of the language and how c plus plus is used in different areas and he the language has to adopt to all these platforms all these paradigms and all these like types of problems the users are solving so for that for sure we probably can't just have one you know standard set of tools like one standard compiler one star build system i don't think it's possible because we are solving different types of problems so in that sense for example rust is mostly used for like some small utilities or some specific like types of applications so it's not used like for this variety of applications so maybe for us it's okay to have these standard tool set but for c plus plus i don't think we'll be able to unify to that extent and probably we don't need that interestingly back in 20 2015 so when we were starting our c plus plus tool said jab brains we were kind of young and naive but we were trying to make the tools right so we started tools creation from the survey so we actually were trying to do some research on what is the standard tool set people are using because we needed it for prioritization so we needed to start with something in the tool and we saw the whole variety of like build system compilers debuggers and we say we said okay like we we will do the survey we will do the research we're trying to we'll try to figure out like the popular set of like compiler build tool and debugger and we'll start with it and then the others will come later and so at that time for us the winner was like gcc cmake and gdb it's like changed quite quite fast after we started the tools like clank started to grow significantly but like yeah at that time so for for sure like on mac the set was different it was clunk on mac for sure so we started doing clank at the same time as gcc support so that was fine for us but generally yeah it was interesting to interested in experience to figure out what is the standard tool set okay so since i started talking about the compilers actually in c plus plus we have quite many compilers and that's not all of them here so maybe just to name you know the the biggest names so obviously we have like clank gcc and amazing and also intel compiler which now exists like in two versions like intel old compiler and intel based on lvm so it's kinda clank but with intel optimizations so they migrated quite recently to lvm architecture like to lvm back end for the compiler so they have their reasons for that partially because they see how lvm evolves in terms of the new language feature support and they just probably don't want to support everything from scratch inside intel compiler but just want to do the specific optimizations and of course there is a huge pack of the embedded compilers compilers for embedded development i'm just you know naming here like kale and ir which are like probably the two big compilers in this area but there are many many compilers there like gcc based compilers and some specific compilers from the vendors there are lots of them like i came from the embedded area and i know like how different these compilers could be and sometimes there are not compatible with like the compilers we know in general like gcc or clank okay so but what do developers actually use so these this is actually quite new statistic this is coming from 2022 survey we haven't published the results yet they will be coming somehow in maybe a month or so but i already took the numbers from it so these are the numbers from this year so and in terms of the compiler it's not a surprise that gcc is winning because there are many people who are like using gcc based compiler especially in like embedded so they're like selecting gcc here clank and clank cl this year we actually put it as a separate compiler because we had many questions before if i should select clank or msvc if i'm using clank cl and that's a good question actually so i decided just to put it as a separate option in like and intel is also split into two and you can see that intel lvm is actually adoption is growing quite fast i mean like i would expect that they will be much bigger next year and the regular intel will probably fall down because intel themselves they encourage people to migrate to the new compiler and yeah some like more specific compilers for microcontrollers i just aggregated all of them here to this seven percent and some custom compilers whatever it means to three percent interestingly like the story with the compilers in c plus is that we have different defaults on different like operation systems like obviously on linux you are more about gcc on mac os you kind of used to clank but like apple clunk is not regular clunk i mean like it's completely different it's usually like way behind the clank you can just download and build on your machine and it has like some apple stuff in it but that's at least the compiler you get with your like operation system with xcode with xcode build tools you just have it so you don't need to install anything specifically and i don't think there is like a default for windows i mean like microsoft compiler is kind of default but you need first to install it so it's not coming with the windows installation for you and there are other options for windows but like they they are not that nicely working like i mean mingw and c green is usually a pain if you're trying to configure them like not just compile a simple hello world but just do some regular stuff i mean have some libraries you always struggle if that's the case like clank cell yeah is mostly popular if you would like to use clank on windows it's now at accessible to use clank from just lvm on windows without like big issues with libraries and windows age and whatever but it's still a pain to configure it properly actually you need to use some mcs libraries and the stuff yeah so and i have to say that if you take game dev area for example the microsoft compiler will be dominating the market like it's used across the whole game dev so all game deaf engines are relying on ms built they are doing their work with microsoft's compiler and it was easily you can't easily compile with clank because you will have the console sdk which is not like compatible with clank for example it's quite often is compatible just with msvc so just no one in the game dev will be trying that i mean like there are a few attempts like unreal engine actually announce that you can compile with clank on windows because you can actually use clank on other platforms so why not try and compile on windows but that's a pain i mean in terms of the libraries okay a few other things about how the compilers are different the easy thing is the compiler options and like while gcc and clank there are very similar in terms of options like microsoft compiler is completely different an easy thing if you try to enable the all the extra you do that differently for microsoft compiler and gcc and clan compiler so if you know how to do that for one compiler that doesn't mean that you know how to do that for other and that's usually a pain for people i mean like unification of the options kind of help because like if you know how the options work for one kampala then you probably can just apply your knowledge to another compiler in terms of these c plus plus standards support the story is even more interesting because like for a very very long time adoption in clank were just pleasantly fast for the new features but with c plus 20 somehow microsoft is ahead of others right now so it's literally nearly got everything in this table just few features left while gcc clank are still behind and that happened i guess mostly with c plus 20 so i haven't observed this big trend before that microsoft is actually doing a great work of adopting dc plus 20. and yeah i guess probably just because they really need it i mean like when you really need something and you're maintaining the compiler probably you can yeah boost the development and the client and gcc kind of behind hopefully they they will catch up so there are more or less doing that but still but think about the clank is actually it's not just a compiler so compared to like if you take gcc or if you take mspc clank is actually a whole ecosystem of lvm which is used in other tools in many ways like there is lip clank and clank d and this language server protocol which is used often by vendors like us in ides when we maintain some other tooling based on this clang d because it actually provides you a nice ast like syntax tree from which you can you can navigate through it and do some maybe changes like refactorings or something based on it so it's nice provider and a nice language engine and it's often used these days i mean like nearly all modern c plus plus ids except like visual studio i use an clank clank d actually now to some extent maybe not as the main language engine but at least as a complementary language engine like we do that for c line in resharper we're only using like clank tidy not as a language engine but just as analyzer but literally everyone like does that because it's easier to maintain like the community maintains the language engine kinda for you because they bring the new features for you and you just have to do your work on top clang analyzer and clank tidy are kind of the most popular tools for analyzing the c plus plus code i also like part of this ecosystem like clank format like ids as i told you before so yeah everything that actually needs the est they are using the clank ecosystem right now and these infrastructure and that's good so yeah clank is kind of a basis for the rest of the c plus tools so it's not just a compiler okay so what's going on with the build systems let's take a look kind of an obvious picture right now it was not like that seven years ago like cmake was very very close to like amazon build and make files but right now it's used by the majority of the c plus developers there are still people who are only using others like again game dev is targeted on like windows echo system so it's about amazon's built like and like microsoft compiler embedded developers are more about make files and like outer tools so they started using c make but it's not like the top tool for them right now the others like are kind of like in behind basil has its like audience mostly driven by like google mason also has some audience and like some others so yeah and if you see how it all evolved through the years you can see a huge boost for cmake which happened at some point of time so these here i just collected the developer ecosystem results from 2017 to 2022 which we like maintain for all these years and how it all changed and you can actually notice that in the beginning in 2017 amaze built was the top project model build system for c plus plus but then the simple the cmake has started growing blazingly fast and it's now like a top and i wanted just to quote price from the same talk from c plus plus now when he was talking about the standard library so like you want a standard simplest build system you got one it's called cmic you may like it or dislike but it's it's kind of standard so we still have others for different cases it might be bigger usage like in game dev but it's kind of standard and if we talk about the cmake adoption and how it's actually adopted across like different tools i see now that there are more libraries coming to simex so quite often if you find an open source library on github quite likely there will be some cimic in there so you can kind of try and maintain it and use it via the cmake package managers are also like good friends of cmake like both conan and vc package are ids are now supporting cmic i guess all of them i mean like microsoft edits cmake support and actually evolves it a lot so it's like i mean like it's not like i must built in visual studio but it's like a good quality of support for cmic and all the others like we started our ides like we started c-line from scratch on cemex so it's like the first citizens and like others also have support for cma cloud cute actually migrated in q6 from qmake to cmake that was a big move for them so they kind of abandoned a q make and moved to cmake embedded developers surprisingly finally moving to cmake as well like they were mostly about make files and outer tools but you can notice right now this trend like the zephyr erthos so airtos this like open source real-time operating systems so it's on cmake nordic semiconductor who are providing these nrf microcontrollers they're very popular for for example if you use the bluetooth mouse quite often that's a nordic semiconductor microcontroller inside so they actually migrated the whole sdk to cmake so that that was a huge move for them a couple of years ago boost even had some you know cmake effort didn't make it so they kind of abandoned the effort but at least they tried i mean like good try cmake file api was actually a huge move for simc because that gave an opportunity for every tool vendor to work properly with cmic because before that when you were working with cmic you had to actually run the whole cimic and like you know pass the output but cmc file api is actually this black box which tells you all the information about the project and like for example if you integrate in cmake into your id you just communicate with cmake via the cmake file api and that's much better much easier and like you have just less errors because you are doing the proper api calls not parsing some you know creepy output and simic presets were actually a huge milestone for cemek which i do hope will like just give another booster to make even more because the presets actually if you don't know that's a way to configure your cmake in some standard way which you can share with your colleagues so you just have these presets files and you just describe what tool chain you are using there so how you like all this configuration and build steps in the cmake are done and you can just share these files into repository there are like two types of files the types of files you can share in the repository and then your local files so you still can do some customizations for your local case the presets were driven by microsoft again a lot there was a huge collaboration between microsoft and kitware and presets were released in like i guess more than a year ago already so maybe a couple of years already and they evolve somehow they're still young i mean they still break the compatibility with every new version of the presets so it's hard to you know kind of migrate from one preset version to another i guess it's four or five already the fifth version of the preset i guess is the the latest one right now but i might be wrong so yeah but it's it's the easy way to have the configurable builds which you can share across the team so it's a good way to configure and but cmake is a language sorry saying this for the record but it's crap i mean like as a language it's really hard it's good for quizzes literally and i remember the fantastic talk from mateos and you probably noticed cpp now is one of my favorite conferences i like a lot of talks from it but materials from ipam he was doing a talk several years ago at the online version of cpp now it was called like c make and conan three years later and first part of the talk he dedicated to the quiz and i have to blame myself i try to do that but i failed completely i mean like he was asking questions about like if you set this variable to this value and then you do like if class operator with this value what would be the result i mean like to realize that in a language you have like ignore not found and off values working as false that's a hard language but like if you cook a try then it gives you the power but it's like in terms of the language it's not easy and if to confirm that it's not easy i have to say that in c line recently we actually released a cmake debugger just imagine you have a build system for which you need a debugger to write a proper build system code but the people actually need it it's one of the most popular feature of the recent release we're now doing because the people say oh we now have a debugger we can just debug the simi code like see the values of the variables like all the targets environment variables and we also like inline in some values in the editor and now it's much easier to understand what's going on in my cma code like yeah it's a good helper but like yeah we need a debugger for the build system it's hard and okay another story i like can't avoid here is cmake and modulus because c plus plus 20 model is great feature but to adopt it we need the tools and i see some kind of for disappointment in the community because when we first ask the people in developer ecosystem survey couple of years ago when just the standard was released which big features of this plus 20 you're gonna use quite soon like in the next six months the majority was select and modulus so there was a huge excitement and now when we ask them like concepts are kind of trending because the people are okay we'll wait for tools because they realize that they can't use modulus it's a great feature but they don't have any tooling but some people do the the the great work here so like compilers actually started implementing models but that was not enough because the people were like okay i have to put some shitty compiler flags how to do that properly it doesn't work for me reliably and it differs from one compiler to another compiler so they were kind of waiting for the build system to support it it was the build to first i guess which kind of they announced that they have some support and they have some working example but i don't think that many people are using build too but when cmake said that yeah they're doing some job towards modulus that was a bigger excitement and with together with microsoft they finally released this kind of approach when you can use cmic plus visual studio generator and then you can kind of build modulus but it's a little bit tricky way because you just build them as a regular c plus plus files you don't get what's going on with these models because you're just trying to build models files with your regular source files and then some magic happens inside so probably not a very straightforward way if you want to understand how you build your models and what what you are actually doing there okay let's take compiler flux so we actually this is a working example it works with clank for us i've failed actually to make a working example with gcc to be honest with you i followed all the instructions how to build models with gcc compiler flux at least on mac and i felt it doesn't work for me maybe i'm doing something wrong so but for clank that kind of works so like you just put all kind of creepy flags and you kind of build a model and then you get like everything there is like not a very big c make that's just one function out of it but you can do that there are some issues i mean like i recently ran into issue with the clan compiler when i was building model modulus on my mac and then i updated the mac os and it got some like new target architecture when building the modulus i removed the whole build director where everything was built i mean like literally cleaned everything just you know delete it and was trying to rebuild it from scratch and i still got some conflicts of the architectures between the models and my source files i don't know why it looks like clank was just saving some information somewhere outside of my project i have no idea where so i just put the proper architecture as a kampala flag and forced it to rebuild the model with this architecture but that looks like a bug to me in the it was like clank 15. so hopefully they will address it but at least you can do that and even better cmic just released free 25 like literally this week the release candidate was just a couple of weeks ago and they released it with like quite silently at the stage of release candidate they just added some modular support there it was not in the release notes we just noticed that there were some examples which appeared on the cemex side and then in the release they finally announced it so these are the working example actually from cmake we made it work so we made it like work on i guess at least windows maybe mac as well i don't remember maybe not all the platforms but yeah it's kind of working they have more examples in the repository so you can actually now build models for cmic you can notice this creepy file set variable and i do not understand there like approach but they just put all models file into some variable they called file set and that's where you have the models i don't know where the naming is coming from while file set and we were very much surprised because they didn't propagate this variable to the cmake file api in 325 they fixed it for 326 so i we don't get this information in like id for example from the cmake file api with 325 but like yeah it seems they're doing some work around it so maybe it's not the best attempt from them but like it works okay now like coming from the build system to the dependency managers because they're kind of close this is like similar data i was showing before but i will just add some historical data here like not the historical but the sorry the areas splits because i wanted to show you what is the situation in the embedded because this is the area where which kind of shows like the blue is the overall data and the green is the data from the embedded developers and you can see that there are even less using the some like standard two not the standard tools but like some tools like vc package or conan so they're more like compiling all the things as part of their builds and they have lots of libraries and many of them are distributed by the vendor so i guess you can actually try and put this into the package manager from the vendor because the libraries are kind of provided by the vendor and they're more or less standard at least as a some specific version so it's interesting to me if they actually move because i think if embedded tries to do that and tries to move to package management i guess that will drive the package management for others as well because like yeah these people if they move to something new that's a huge step about a little bit more about the other tools i have to say here so clunk format and it's literally the standard formatting tools right now so if you find any repository on github quite often you have the clank format config file in it so you just download the repository you run clank format and you get the same formatting as the offer of the repository on the team behind it we're having in mind and that's good actually so that you can have this tender formatting there are some interesting things about the clank format that while it is the part of the lvm ecosystem it still has this fuzzy parser so to have the performance benefits they're kind of not using the proper parsing like the clank compiler so and sometimes some people can notice the differences i mean like you compile the things in one way but then you understand the clank format treats it differently and the people even got used to it and now if you like if in our two sometimes we do not call the clank format directly but just mimic it so like map in the the config file and then call calling our own formatter with the same settings and we realized that we are doing the things differently and the people say like oh no the clank forward behaves differently so you have to behave like the clank format they were like okay we're just trying to behave like a normal compiler who just bars the code correctly but probably we have to fix that for you because you got used to how the clank firmer does that and also like the big issue with the clank format is that they are breaking compatibility between versions and that even comes quite often come to the situation when they have the parameter for example which had in the config file values like yes or no and then it was converted to some enum value next version so your config file is completely broken so you have to use the proper version of the client format for which this config file was created because otherwise quite often you are running tissues and i know many companies who are saying to us like yeah we're using the specific version of the clank format where i stick to it because otherwise we have issues with the compatibility okay like my favorite topic is code analysis i like it a lot and this is also the data from this year the question we ask is what kind of the code analysis tools and guideline enforcement you are using and like the majority of the people are using either none which is set or the id built in which is good because the ids can now do a good job for you and they have lots of tools built in so you just rely on what the tools provide to you that's fine i mean like visual studio or our tools we have lots of code analysis tooling built in so you can just rely on it and like yeah no surprise that the lvm ecosystem is dominating for the rest like clank tidy clank format which people still consider like a code analysis while it's not clang analyzer and then comes the rest i actually cut those analyzers which have like less than three percent but there are quite many of them as well like there are more coming here okay so talking about the code analysis like indeed the client id is kind of baseline so many many people are using clank tidy it's integrated in many tools you can now even maybe you don't know that you're using clank tidy but you're using it i mean like if it's integrating into your ide you might have noticed that there are some checks but you maybe even don't know if they're coming from clank tidy or some other analyzer you just have them that's good they they have like lots of checks like modernized checks or query guidelines checks or some specific checks like submitted to google and the good thing about the clank type is that you can actually do some custom check which is great i mean like you can write your custom check in your company and then build the custom binary of your clank tidy with your custom check put it to like some tooling storage you have and like run this clank tidy on your like ci or a developer's machine every time and have your specific chat this is great so this is a good thing also like in the modern tooling with the code analysis you can now have the great like a lot of information coming out of the data flow analysis more more and more tools are now trying to integrate data flow analysis so we started in our tools like in c line several years ago i know others who are doing the data flow analysis so and it's literally the code analysis which goes beyond the compiler like abilities because it analyzes the possible values and how they flow through the code so you can do that inside the function scope or you can do that inside the translation unit scope like in c line we are doing like local as function scope or global as translation unit scope but there is even a like proof of concept how to do this cross-translation unit analysis there is a checker from ericsson which they presented at some of the lvm meetings long time ago and there is like some description how to do that in clang so it's not like widely used by any known code analyzer but at least there is a proof of concept that you can do that cross-translation unit but usually yeah it's mostly in the scope of the translation unit and you can actually check and look for many things here so the dfa so it actually takes into account like the function parameters and arguments the return values the filling global various and it actually outputs the value ranges for the variables and later you can do this assumptions like you possibly have like a dangling pointer well there are issues with lifetimes or the indexes out of scope or there is an unreachable code or endless loop or endless recursion whatever so you can do this chucks on top of this knowledge foreign also in terms of code analysis so like there are lots of for c plus plus and like c there's lots of analyzers for which are the main specific and that's good because like if you're working with cute for example you have crazy which not just takes the general c plus plus code but it understands all these signals the cudas so and you are doing the checks based on this like matter information about what it actually is all i can unreal engine there is a real header tool which understands this macro system which unreal engine is using for reflection because yeah we still don't have a reflection in the language so all the game engines are just struggling and using some some implementation so unreal engine uses macros and they have this specific analyzer which is kind of using this meta information about what this macros are what they have to have and just provide you some maybe possible warnings and there are lots of analyzers specific to embed it i mean like there are lots of checkers and of course like we are actually good at doing code analysis because we have like some tools on ci like there is a very popular tools from sonar source so we also started doing a job brains also some tools like kadana which is also called analysis on ci and that's actually a different type of the workflow so it's not just like you're working as a developer with your code and you would like to run some checks probably you don't need to run them on ci unless they're like platform specific and you can do that on the local machine or they're just quite greedy in terms of resources or time and then you probably need to run them on ci but quite often ci checks are just the health check for the whole project so like you have the projects and there you have the constant code analysis running like maybe daily or once per week on the ci and someone in the team i would say like some manager i mean like tech lead or someone so it's checking how the project is doing so what what's happening there so this kind of management and health check tool and it's good for open source projects like if everyone is just contributing to it and you have some constant ci configured so you run the code analysis just to make sure that the project is doing good and so these tools which work with code analysis on ci quite often they help annotating like the pull requests and like helping you to to do the things or like do some code reviews for them and actually i talk a lot about it in a different talk so you can take a look at my talk from simpleplus now and i guess sooner will be the recording of the new version from ndc tech town where i have the whole talk dedicated to code analysis in modern c plus so i don't want to spend more time on this right now and maybe just a few slides i would like to discuss in the end is about the unit testing and actually unit testing practices are quite popular among all developers so this is just the statistics from the journal developers not just c plus plus so like for 75 percent of all developers in the world say the testing plays an integral role in their development and like 67 percent are using some kind of a unit test which is kind of good and there are other types of testing the people are also used to if you look at the c plus plus world so we have like in c and c plus plus both we have several frameworks which are quite popular so we have the and we had actually the google test like we had them for ages they were like before like pre-package management area i would say even in this current form in its current shape and c plus plus it was usually a pain to get google tests into your project because you had to find it download it put it into your project compile with the proper flags and they even had this feq at the google side when they were explicitly saying please compile the whole library with your flags as you do need for your project so that you don't have any conflicts in terms of the compilation flags like right now i guess every decent package manager just that's the first thing they add the google test but it's still not that easy it's not just like one button pressed but it works for like and you can see for the majority of the c plus plus developers and in 2022 even they have the big erasure for google test catch is also there but with the catch i guess the story was when it was the header only it was i guess it was super popular i saw how it was growing blazingly fast but with version two like catch two 3.0 i guess like that's a creepy name for the version but like yeah catch two 3.0 they move to the different distribution models so like they are distributed via the statically compiled library so it's not header only anymore they have their reasons they do explain in the release notes that they are kind of becoming more profound and they are adding more advanced features and they just don't want everyone to you know get it as a header included so that's fine but it looks like the developers who were using cash they were quite often using it because it was header only and they were a little bit disappointed so i'm not sure how it's gonna go further but i see that the grove actually slowed down a little bit this year boost tests they are kind of still popular cpp unit someone is still using them doctast is there but it's not that popular but it's a good you know approach because it's quite often considered as now as an alternative for catch being a header only and yeah there was a great talk with a clean code yesterday which i really enjoyed and that's probably the direction we need i mean like we probably need to have proper mac free macro free unit testing framework which is based on like reflection and introspection the clean code which was presented here at this conference yesterday was exactly about that there's an attempt to make a unit testing framework via the reflection which is like macro free approach so and it's good probably like we'll we'll get there one day hopefully just yeah just do tests don't fall into this category and just the last thing since we were talking about the tasks there are also as a part of the tool set there is also the code coverage tools and you can do coverage in like different ways you can do the line coverage so calculating like how many lines of code are covered or in terms of the statements or you can do the branch coverage where you just check what's going on through all the branches and there are several like more or less standard tooling like lvm coverage and gcuff like one is mostly used with clank and one is mostly used for gcc you can still use them like gcaf you can do via the clank as well they have different flags so you just need to configure them properly and you need to take into account some differences like gcaf and lvm cup for example they do take compiler generated branches differently like gcaf takes them into account so you have to understand that if you're doing the branch coverage you might get different results with lvm curve and g-cuff because gcaf will be taking compilation branches into account so you just get different numbers so you you have to understand what you're doing but that's generally a kind of good advice so yeah but the tools are kind of standard i mean like those who are trying to do coverage like you can to take them and get the result okay and probably just the last one to long term treat so trying to summarize what we have currently in this plus ecosystem so do we have a standard c plus plus two set not in the sense of like swift rust but we kind of have lots of tools which are more or less standard commonly used for different use cases and sometimes of this kind of standard for this specific area and like do we miss some tools definitely yes the package managers is a good example or the macro free unit testing framework we probably have to do that can we unify more for sure there's also a room for improvement and we can like integrate tools which with each other and do a better job here so and yeah this is mostly it there are some links i have here and i will publish the presentation so you can just click these links and not you know copy anything from here and that's it thank you [music] yeah and like if you have some questions i guess we still have maybe a couple of minutes to answer and then i can answer you know privately i think you can just raise your hand and that guys they have microphones so feel free to ask and like i'm here at jab brain's booth so if you have any questions just feel free to come i'll be happy to answer i'm here for the whole day okay then thank you and have a great day [applause]