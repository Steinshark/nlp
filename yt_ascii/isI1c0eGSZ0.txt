all right boys and girls it's grug time grug on testing grug have love-hate relationship with test tough save greg many many uncountable time and grug love and respect test i just turned off alerts by the way can someone tell me congratulations right now tell it to me you know what you should press the like button because i just turned it off and you don't have to hear welcome to costco i love you all right unfortunately also many tests shamans exist some tests shaman make test idle demand things like first test before grug even write code or have any idea what grug doing domain [applause] [music]  on tdd this is beautiful how grunt test what grug not even understand domain yet oh don't worry the test will show you what you need to do once again grug or grug once again catch grug slowly react reaching for club but grogs stay calm good job grug i do agree grug this is pure nonsense instead prefer write most tests after prototype phase when code has begun firm up typically at that point when the code begins to firm i'm pretty firm too feeling ready to write some tests you know not too many tests right you just want the tip you don't want you don't want to go all in on it you know what you know what like a whole thing you just want just enough you know what i mean that's right pick you know what i'm talking about pick you know you know pick out pick out their tip out all day okay we all know this by the way pick there's gonna be at least 40 000 people that hear me say that exact phrase about you so sorry you're welcome go follow pick on twitter but no well grug must here be very disciplined easy grug to move on and not write tests because work on grug's machine this very very bad no guarantee work on other machine and no guarantee work on drug machine and future many times test shaman have good point on importance of tests even if test shaman often sometimes not complete useful feature in life and talk only about test all time deserve a club but heart in right place i think this is specifically calling out dave farley that's pretty funny also test shaman often talk unit tests very much but grug not so find useful greg experienced that ideal test are not unit tests or either end-to-end tests but in between tests dude love it unit test fine okay but break as implementation change much compared to api and make refactor hard and frankly many bugs anyway often do interactions other code often throw away when when code change yeah absolutely absolutely great point absolutely grugright unit test mostly at start a project help get things going but not get too attached or expect value long time and and test good show whole system work but hard to understand when breaking drive grow crazy very often sometimes grug just ends up ignoring because oh that breaks all the time very bad dude i'm totally on to this i i love this absolutely love what is going on right here which is unit tests i find unit tests only super useful when pretty much tied to implementation and what i mean by that is that you have an exceptionally hard narrow thing in which the the what does he call it the the something spirit demon complexity spirit demon when the complexity spirit demon is just strong in one small area and there's just like no way to make that simple and it's extremely hard to get right first try and you have to run it like 19 times to make the thing probably correct to me you want to test that it's tied into implementation it is what it is you know what i mean it is what it is end to end though i hate working with real data i don't want a single service ever ever to be involved i hate it in between tests grug here shaman call integration tests sometimes often with sour look on facebook drugs say integration test sweet spot according to grug high level enough test correctness of system low level enough with good debugger easy to see what break like it grug prefers some unit tests especially to start but not 100 all code test and definitely not first test yes yes test along the way work pretty well for grug especially as grug figure things out grug focus much for us ferocious integration test effort as cut point emerge and system stabilize so i like this so one thing one thing that i really try to do because i i build predominantly tools so if you don't know i'm just a tool and i build tools and so what i do is i always try to make all my tools either take in a file or standard in treat that the same and then that way as i do my operation i can actually do mock data in fantastic right and then on top of that any data requesting when i enable an an integration test i always make it so that any data request throws an exception because sometimes by accident you're gonna have some level of data requesting actually sneak in right i've had some happen where data changed on the other side and all my integration tests worked except for one tiny teeny tiny bit that was actually requesting like the title of a video or something like that and i didn't realize it was requesting the title of a video that service worked every single time except for when they changed the title and then completely and absolutely dominated me and so you know it's just my that's how i that's how i do it you know what i mean that's that's what i like to do i like to be really really really really really really specific on those things anyways cut point api hopefully stable compare implementation and integration tests remain valuable many long time and easy to bug i find i still find integration tests kind of hard to debug right they're they're definitely not easy because it's the entire system right the entire system always makes everything difficult or most of the system right it's is configuring neovimo wasting your time no also small well-curated end-to-end test suite is created to be kept working religiously or relig religiously yeah on pain of clubbing focus of important end-to-end test on most common ui features and few most important edge cases but not too many or become impossible to maintain then ignore this is so true who here type one in the chat if you've worked at a place that has failing tests but they never get fixed and there becomes this one test that fails fifty percent of the time press one yeah there's definitely like this this happens all the time but here's the worst part sometimes the test fails for real and you're just like that's that one test it fails all the time let it go and then you're like oh it's broken we just had a meeting about it's one of the most common common problems in programming is failing tests they're okay so i always have so people i've heard people try to argue differently but generally this is how it goes i prefer in order correct data missing data bad data so same thing with tess correct test no test flaky test because if you have a flaky test that is the worst of all outcomes especially when it's a sporadic one that makes rounds against all different tests because at that point you have to think oh you know if it fails a couple times whatever i've seen these different tests all pass it's probably okay right it's it's actually the worst it is by far the worst right i well no no i prefer 200 404 500. i don't prefer 200 500 404 500 worse 500 bad 500 bad like fake data or bad data bad data bad every single time bad data is the worst bad data is single-handedly these the worst thing you can do for a company if you have bad data as a company you will hands down create and do features and make things for people that don't exist or what they're doing does not exist and you'll think you're doing a good job bad data is the worst 419 i'm a teapot i'll accept that as well this ideal set of tests to grug or this ideal set of testic rug you may not like but this peak drug testing also grug dislike mocking intestine if you have to mock you've done something wrong fight me this again is why i think a little bit of unit testing makes you a better programmer if you know how to unit test you will start building things in which you'd stop mocking it's so epic simple jump in here okay i know we're in here okay blah blah blah blah you have some function complex that does a bunch of stuff right it's in here and it does just just a bunch of crap right blah blah blah very very much so complex and in in here you do something stupid like import fs from fs blah blah blah and you're like you know you'll do something like file name you know whatever oh string there we go and it passes out a string why not right we'll just do this return this bam bam bam and you go up here and you go like this const you know whatever there you go read file sync got it nailed it right bad this is bad don't do this don't do that instead you write two things you have complex whoopsies oh my goodness i somehow jumped there okay vim just too powerful for me instead you have you know file contents right and you do the complex stuff right here that's where the complex stuff happens then you have another function that's actually like you know get the effing data and it goes in and it gets the data right like that's the one you want to do right here because that's the one you don't have to mock anymore this is the thing you're testing this is the thing that integrates with the environment stop mocking this step it is bad for your health for the health of everyone around you unless the file is a one terabyte big stop the music stop the music hey hey come here if you have a unit test or an integration test or an end-to-end test that involves one terabyte long file i would strongly recommend thinking a touch more because first off reading a terabyte is going to take several several several several seconds and then after you do all that you're going to crash your api constantly because guess what hey guess what dummy node.js has like a maximum four gigabyte heap without that special flag you don't got that much memory sitting around on your pewter it's not going to work out anyway so it's just that the whole notion and everything you're saying don't make no frankincense okay so don't do that make simple things you can test pick a simple things to test equal simple things to debug simple things to debug equals you don't spend your time just crying because every time that one test breaks you know you have a four hour what the just happened debugging session no good okay keep it simple stupid and i mean that okay i mean that i i'm not calling you stupid karen okay i think you're clearly talented and you you know things you're a peop you're a people person okay that's different see i'm an engineer okay i don't talk i don't talk to people karen okay we're different okay we're different hey the compiler is my unit test huh i'll remember that because i don't think i want to work with you all right anyways don't worry if it builds it works right because when you write rust it certainly could never have a logical bug or a memory leak nope that doesn't exist in in rust world new new new new new also krug dislike mocking and test prefer only when absolute necessary two rare slash never and coarse grain mocking cut point systems only at that one exception first test dislike by grug when bug found grug always tried to reproduce but our first reproduced bug with regression test then fix bug this case only for some reason worked better yeah yeah i get that i get this like the whole write a new test for every bug you fix it's kind of an interesting thing because it depends on you know where the bug is and what what happened and how it happened is it just like some stupid thing you've done that you're not gonna mess up again right like has anyone ever done that has anyone ever had someone just like put a one added a one where a one shouldn't be maybe you shouldn't do that maybe you should i don't know it's kind of hard because now you're like testing you're testing the implementation directly as opposed to like the output and then it can be a little bit tricky you know i'm always a little worried about how close you get to the source code when it comes to testing i'm always a little worried i never know the right answer but i don't know the wrong answer you know what i mean what up monte kelder hey guess what that's grog on testing huh huh hey if you if you press like enough i might even just read agile okay i just mine who am i kidding the name is the primogen