hey mixing react and htmx let's do this this is actually from a little bit ago almost a year ago so this will be interesting to see this was before server components happened i'd love to hear the like a like an update to this but this is very exciting a recent project required a complex html user interface with multiple interdependent elements with the goal of using hmax i implemented the initial prototype using custom elements but a grew and complexity quite fast in the end i found this to be an occasion in which react provides a clean and elegant way to structure code and data flow not content with not content with giving up on ace max for the rest of the application i set out to combine both libraries in this blog post i'd like to walk you through the resulting setup so there you go are you ready we're going to be mixing a little of every world here okay every world will be included in this world libraries will continue to be combined until morale and proofs all right the basic idea is to use a custom element that wraps the react root in the spirit of hypermedia driven applications the goal is to let the regular dom always reflect the application state and to let react render the shadow dom of the current of the custom element using a mutation observer the element updates the shadow dom as the regular dom changes either driven by htmx or react it's funny that we're just talking about simplicity versus complexity this feels like we've just hit something that feels complex anyways the running example for this post will be a simple react component that displays a message react root react element type my app props equals this all right here the react root element is our wrapper and the react element specifies the type and props of the root component oh man you got like a hmm that looks just encouragingly difficult there's no such thing as simple react component i know this simple react component comes with 250 000 characters it is the equivalent of jsx and my app hello yes this would be the equivalent to define it react root element we start with an autonomous custom element that extends the html element and then fills out the details step by step yep okay there we go nothing nothing feels better than an anonymous class i feel like you've hit peak javascript when you're throwing down anonymous classes by the way this is just how you do custom elements they're just creating a web component here that the web component uses react i mean we got it we all got to be pretty proud of this moment okay the constructor attaches the shadow dom and sets up the observer observer for any changes to the children or their attributes there you go we have a constructor road equals null attached shadow mode open mutation observer i'm not even sure what a mutation observer is at this point other than something that sounds like some sort of rxjs does this have rxjs as well or is this like knockout what is this what is going on here how is this the third library we've spotted so far in this project every time the children are updated the render method is called which updates the react route by re-rendering it with the current type and current props is this driven by a use effect hook i'm not even sure knockout i don't know that's vanilla js classic it really is it actually vanilla js mutation observer javascript is that oh i think i spelled it with an n i need to keep up with stuff i didn't even know there was a mutation observer just just hanging out there well i'm dumb look at that oh i see what they're doing oh that's cool so they're using a mutation observer to observe when htmx changes the dom is my assumptions here and then react and then send in stuff to make react respond to it is that am i am i catching that correct they are super modern can we say postmodern all right root render this dot root dot render create element all of this stuff right here oh nothing like taking in an object and creating a copy of it inside of here oh love it all right note how the root element injects itself as the root prop this way the element can be accessed from within react for example to send events to the rest of the page or to update props the current type and the current props are reflections of the corresponding properties of the first react element contained within our custom element this can be accomplished with the getters okay beautiful beautiful do a little query selecting do a little json parse element attribute props love it love it string to object to object copy of object rendering beautiful similar similarly the custom element also implements the corresponding setters and those properties can easily be modified programmatically in addition the custom element also cleans up the react root once it's disconnected from the dom see the full source for details okay we won't but very very cool new event bubbles true dispatch this event are they just just doing non-jsx here right am i am i reading this correctly this is the this is the imperative version of the declarative jsx right this is what you compile down to just a bunch of create elements yeah yeah and people would do anything but remove react i know there's a few things you should never do in the world you should never ask a woman if she's pregnant okay you just never make that mistake when's that baby due right never do that okay just the worst possible thing you can do the second less known worst possible thing you can do is remove react everybody knows this the display let's see the div displays the message that is set in the props the button triggers the custom event now we can instantiate the app and html and connect it with htmax okay this actually kind of this this is very interesting look at this oh what you have your server producing man this is this literally react server components before they were invented is that what we're looking at right now react root id root acx update trigger my react event oh that's that's pretty clever foreign oh i never even thought about doing that i never thought about containing an element and the places where i do custom javascript such as this thing with with this little fun thing i'm working on i never once thought about the idea that i could actually emit custom events from here and have htmx react to the custom events ah what this is actually a really clever idea i think this is awesome yeah no there's a lot of really good takeaways here i love making fun of react don't get me wrong i'll make fun of it but there's a lot of really good ideas here right there's a lot of really good ideas and you shouldn't shouldn't sleep on that all right button update target root okay update so you have a button on the outside that will replace the stuff here and then you also have something within here that will cause it to replace itself via the custom event very cool this is very very cool this is super actually this is actually super cool the updates via hmx can either be triggered from the outside or react via the update button which we just saw or from inside react via the custom my react event in both cases hmx will replace the react element inside the react root with the server response this the react root element then notices the change and triggers a re-render importantly that's that's what so that's what the mutation observers for importantly react applies here it's a diffing logic and updates the dom only for modified parts of the tree for example the button in the component will never be updated okay another option is to set props on the react root element itself from javascript again this will change the attributes on react element and then trigger a re-render my app component for the setup reads okay my app on click do this thing set the props right here and then it does all this and oh it's funny that i didn't use the little ease here right and this must be from the mutation observer right run this render function and observe it on this element and its subtree its children list its attributes and and filter on props and type very cool i did not know about mutation observer what a super cool thing what a super cool thing i did not know about that you can find the complete demo here it showcases the different update modalities and also in a multiple independent react roots use a show source to look at the implementation as always feel free to reach out to me on twitter hey thank you cprom hey you know what i'm gonna go over here i'm going to follow this person right here i'm gonna give this guy a little follow what a cool little thing that he built that is super cool there's a lot of really good ideas in here i'm not the reacts part but i mean everything else is really really cool it's actually a really good way to kind of look at because there's something because at some point with hdmax if you're building something that that just requires client-side interactivity that makes no sense to be server driven again conway's game of life why would you ever have the server render each click right this is not a live produced video game okay we're not doing rtmp there is no point in having this thing being rendered out right and so this makes perfect sense to be purely client-side and so i can really see a cool use case using something a little bit more clever here with start and enter and all that there's a lot of cool tricks right here i really like that yeah what a good coding trick lets our ad or 100 or a thousandth react trick well this one's not a react trick it's just a way for me to look at and try to understand better how to create more rich games or more rich applications with htmx without the need for react right the first time you have a chance at the top is the second one you get a free pass i'm not sure what that means but i like that just trigger the state to saving when needed exactly but it's cool feels like you should just use web components using lit or something yeah i have never looked into lit it's something i really do want to look into because i feel like that's like a really useful item i want to play with but i need something that works well with go so i'm gonna play i'm gonna play with it you know what i mean i'm gonna play i'm gonna play we're gonna find it out lit is lit okay anyways the name is the primogen