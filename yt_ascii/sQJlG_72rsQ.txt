yes you can measure software developer productivity also apparently this company is quite in trouble they're they're known for some pretty shady business practices is it shocking that they're also attempting to measure this so let's find out okay we're going to take a little we're gonna take a little looksy lou into the future and see can we actually measure software developer productivity all right measure tracking and benchmarking developer productivity has long been considered a black box it doesn't have to be that way man i don't want to work at this place let's find out what they do to make this place a horrible place to work at compared with other critical business functions such as sales or customer operations software development is perennially under measured the long-held belief by many in tech is that it's not possible to do it correctly and that in any case only trained engineers any knowledgeable enough to assess the performance of their peers okay okay so that's me let's let's prove you know what i mean let's let's find out i don't know i don't believe it yes that status quo is no longer sustainable really now that most companies are becoming to one degree or another software companies regardless of industry leaders need to know they are deploying their most valuable talent as successfully as possible all right this is going to be fun people i can i can feel myself so willing to disagree that it's just shocking it's absolutely shocking how much i feel like i can disagree with this statement anyways let's keep on going there is no denying that measuring developer productivity is difficult other functions can be measured reasonably well some even with just a single metric where let's see whereas in software development the link between inputs and output is considerably less clear software development is also highly collaborative complex and creative work that requires different metrics for different levels such as systems teams and individuals what's more and also software choices legacy type of features you're developing like there's a whole slew of things that you may not even be able to get who you're hiring and what are they good at versus anything else i don't know i don't know feels feels feels fake okay what's more even if there is genuine commitment to track productivity properly traditional metrics can require systems and software that are set up to allow more nuanced and comprehensive measurement for some standard metrics entire tech stacks and development pipelines need to be reconfigured to enable tracking and putting in place the necessary instruments and tools to yield meaningful insights can require significant long-term investment what i'm hearing at least is all you need to do is just hire like 10 engineers to set up everything to measure all the engineers to prove you are deploying your engineering stuff correctly is that what i'm hearing does that mean you have to hire engineers to hire engineers to hire engine like how many how many turtles do we get before we're all the way there let's find out let's see the furthermore the landscape of software development is changing quickly as generative ai tools such as copilot x and chat gpt have potential to enable developers to complete tasks up to two times faster yeah this this thing i think it's from github oh this is another one of them this is just like such a metric it it only works in software in which you're a consultant and you want and you want to simply produce it as fast as possible and you give literally two about its maintainability and you just want to get that done right like any person that i know that uses co-pilot to complete logic is absolutely and outstanding nuts right i don't know why you would ever do that it completely breaks your flow state it completely breaks everything i love copilot for for like logical boilerplate right when i'm like struck video has timestamp has this has this has this struct audio frame has this this this good job co-pilot you do right like i like that that makes sense but anything beyond that you are being crazy to help overcome these challenges and make this critical test by the way it is a w take i think personally i don't think generative ai is there i really don't think it is there i like copilot i use it all the time for for any sort of boilerplate completion is it faster than just using your lsp i would say it's a minor bit faster just like a hint faster but if you have good strong lsp understanding and completion setup i think that the lsp can almost be as good and if you're using languages like go go already does most of what co-pilot effectively does for me right goes lsp is like top of the market anyways to help overcome these challenges and make this critical task more feasible we developed an approach to measuring software develop okay this is like the longest foreplay i've ever read just give me the meat and give it to me raw okay a new approach has been implemented at nearly 10 20 tech finance and pharmaceuticals companies and the initial results are promising they include the following improvements 20 to 30 percent reduction in customer reported product defects okay i mean that's good 20 improvement in employee experience scores i'm not sure what that means but okay 60 point improvement in customer satisfaction ratings okay okay let's find out it's a consulting company what do you expect i know so this all sounds like honestly when i hear this there's an old phrase that we all like to say right which is there's lies there's damned lies and then there's statistics and so i feel like we might be beyond damn lies i know made up metrics right you can make up these things so easily you can drop certain things you can take out outliers right like people do this crap all the time when they tell you a statistic you don't know how many outliers have been removed yeah if you just remove the outliers and normal you normalize the data you know you normalize it is this a normal distribution is it some sort of alpha beta distribution that's happening right now right because here's the problem let's just say you have a you have an alpha beta distribution for those that don't know an alpha beta distribution looks something like ah it's like the internet right a lot of internet packets fall into here and then there's just like this giant tale of just slow ass data and so all you have to do to get a 20 improvement is you just have one person that improves like 90 out of 20 companies and then you have a bunch of people that have improvements of like two to four percent and you're just like stop testing tell me what the median is okay with the median i don't care about your avarages nobody cares leveraging productivity insights with the access to richer productivity data and insights leaders can begin to answer pressing questions about the software engineering talent they fought so hard to attract and retain such as the following what are the impediments to engineers working at their best level react how much does culture and organization affect their ability to produce their best work so we're gonna micromanage all their tasks to find out how effective they are so that we know how does culture and organization affect their ability to do tasks how do we know if they're using their time on activities that truly drive value if you look at facebook or twitter or threads or reddit you're not driving value you're an  how can we know if we have all the software engineer talent we need well that's kind of like an impossible question right all right understanding the foundation can you just tell me what it is stop with the foreplay let's get to it to use a sufficiently nuanced system if i hear how complex the system is one more damn time without telling me what it is i'm gonna lose my okay of measuring developer productivity it's essential to understand the three types of metrics that need to be tracked those at the system level the team level and the individual level didn't you literally just say it right up here in the parenthetical group where's the parenthetical group systems teams individuals look at that okay we got it we understand we understand you got metrics at different levels just give us the meat people unlike a function such as a sales where a system level metric of dollar earned or deals close could be used to measure the work of both teams and individuals software development is collaborative in a distinctive way that requires different lenses for instance while deployment frequency is a perfectly good metric to assess systems or teams it depends on all team members doing their respective tasks and is therefore not a useful way to track individual performance it also is completely the dumbest metric i have ever heard my lifetime if you think deployment frequent quincy is a good metric well guess what you could deploy every single commit that passes some big old cic the cd pipeline and it doesn't matter now you have infinity commands but what you're doing to your production system what are you doing you're cash busting every single time thus lowering your time to first whatever render good gosh it's like why would you do this why would you do this why update the readme like this is just oh my goodness it's so frustrating another critical dimension to recognize is what the various metrics do and do not tell you if you of course for example measuring deployment frequency or lead time for changes can give you a clear view of certain outcomes but not of whether the engineering organization is optimized and while metrics such as story points completed or interruptions i have not put down story points in 10 years or interruptions can help determine opt determine optimization they require more investigation to identify improvements that might be beneficial okay all of that didn't mean anything to me in building our set of metrics we looked to expand on two sets of metrics already developed by the software industry the first is the dora dora the explorer metrics named for google's devops research and assessment team i don't even know what this is these are the what are they these are the closest a tech sector has to a standard and they are great for measuring outcomes when a dora metric returns a subpar outcome it is a signal to investigate what has gone wrong which can often involve a protracting protracted sleuthing they just make up something by putting two words together for example if such a metric as deploy frequency increases or decreases there can be multiple causes thank you you could have just said that to begin with this whole paragraph could have been that determining what they are and how to resolve them is often not straightforward if you who suggested this article who suggest who's going to get banned today who's getting banned okay we got another we got another one what is this the government we have dora space metrics the second set of industry developed measurements is space metrics satisfaction and well-being performance activity communication and collaboration how does that spell space and efficiency and workflow what how does that spell space i'm super confused satisfaction and well-being performance at activity communication and collaboration and efficiency and flow that is the greatest abuse i've ever seen in my lifetime that's the greatest abuse ever for creating an acronym greatest ever which github and microsoft research development to augment dora metrics by adopting an individual lens particularly around developer well-being space metrics are great at clarifying whether an engineer organization is optimized for example an increase in interruptions that developers experience indicate a need for optimization on top of these already powerful metrics our approach seeks to identify okay just get give me the meat okay here we go dora metrics this one space metrics that one opportunity focus metrics deployment frequency stupid customer satisfaction reliability uptime okay i mean again customer satisfaction like i just want you to think about this for a second okay i want you to think about this for a second okay there exist this there exists there exists a curve like the iq bell curve okay there's really smart guy over here right we all know about really smart guy in the hood right then we got you know the the midway right we got the midway and then we got like the the five head space station guy right okay each of them not looking too good no tom is actually the point one percent cube brain then there's tom right right and his brain's just huge right he's like he's really far out there okay he's way far out there he's he's he's the next level he's the 0.01 and at netflix we've developed i work on netflix by the way just in case you're wondering we've developed many of things that make people watch more netflix and enjoy more shows and thus give us higher favorability ratings now here's the problem we've developed things that also make people really upset and don't like it and so that's a whole product manager thing going on here and so if you are just simply you know here's the deal is that you're targeting this group you're saying what do the midwits love because that's most people most people are midwits okay now these people are like i hate automatic playing shows i hate automatic playing shows but these people are like ah that's what i want to watch right and so we developed these features where everyone on twitter which is pretty much these people are like i hate this and everybody right here loves it and everybody that's on reddit which thinks they're smart they might fall into this or they don't well actually they're over there like i hate it so this is what happens and so when you're like hey customer satisfaction how can you measure that right it's it's not just engineers it's also product managers it's also what you're building it's also your market you're trying to like you know like think about vrbo versus airbnb vrbo was the thing everyone liked vrbo it sucks it's not a great piece of software they were satisfied and then airbnb came along and made better software and now people are unsatisfied with vrbo right are you having did you change something no the market changed underneath anyways it's just stupid the whole thing's stupid these opportunity focused productivity metrics use a few different lenses to generate a nuanced view of complex range of activities involved with software product development inner outer loop time spent to identify specific areas for improvement it's helpful to think of the activities involved in software development as being arranged in two loops an inner loop comprised of activities directly related to creating the product coding building and unit testing and outer loop comprised of task developers must do to push their code to production integration integration testing releasing and deployment from both a productivity and personal experience standpoint maximizing the amount of time developers spend in the inner loop is desirable products so again this is just like building out a nice streamlined place right like i don't think there's anything nice loop dog nice loop anyways cool that was cool i'm not even gonna continue to read this at this point it seems like mostly crap my general rule of thumb is that how do you know an organization is healthy you make time and you hire talent to take care of the quote unquote outer loop right i measure things not by individuals but mostly by or organization health right so this outer loop deployment ci testing infrastructure all that stuff how important does your company take that do they hire the right people does every single engineer have to think about that do they have to take their time and understand what's happening how fast can they put up new ci cd how fast can they do all these things how good is your production measurement like how much time and stuff have you set up to be able to understand when production fails when a when a when a commits bad all that kind of stuff like if you don't have a really great thing right here it kind of seems like the rest of metrics are stupid and every way you're trying to measure people and all that is just dumb to me the sign of a good working place is how good is this box because the next box that's inside of it will be able to move fast based on a couple decisions technology you previously chosen to base your entire life on and b and b how good this outer box is and so it's like yeah you chose angular 1.6 and the whole place moved on from you and now you can only hire angular 1.6 people which you have no idea what their kind of level of proficiency is and so you kind of made a bad decision now you either have to stop you have to burn the ship down or you have to or you have to just deal with what you've created but you can still have a really great experience here where you're releasing and doing all the right things right here so it's like there's no way i i just think that anyone who attempts to measure software as like some sort of scientific way is just doing the wrong thing i think their intentions are bad i know that's a pretty bold statement to say their intentions are bad either their their intentions are naive or their intentions are bad because at this point it's been tried a hundred times and if you think for whatever reason that you can do it i think you're wrong i think you're just simply wrong they're measuring the wrong thing of course they're measuring the wrong thing right it's really hard to blame one individual and less if that one individual is always at the center of everything going wrong then you can start to blame an individual right that can happen but i think it takes time to kind of get like you really have to measure over a long period of time and you usually usually before any of those things happen all the co-workers are like hey this guy he ain't cutting it this has been this has been awful you know and then usually you know that quite you know that way earlier you know what i mean you know that way way way way earlier anyways just some thoughts i have what can you do i would suggest not measuring productivity in that kind of sense i think that your co-workers and everyone around you can kind of sense the productivity of the team and you can sense what is going wrong and long as you do those things i think that you'll get a lot more out of this than some nonsense whatever blah blah blah blah blah blah the name i don't have a good one so the primogen