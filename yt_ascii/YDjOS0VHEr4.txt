- the ribosome, who i
mentioned a little while back, can make an elephant
one molecule at a time. ribosomes are slow. they run at about one molecule a second, but ribosomes make ribosomes, so you have trillions of them and that makes an elephant. in the same way these little
assembly robots i'm describing can make giant structures, at heart because the robot can make the robot. so more recently two of my students, amira and miana, had a
nature communication paper showing how this robot can
be made out of the parts it's making so the robots
can make the robot, so you build up the capacity
of robotic assembly. - the following is a conversation
with neil gershenfeld, the director of mit's
center for bits and atoms, an amazing laboratory that
is breaking down boundaries between the digital and physical worlds, fabricating objects and machines
at all scales of reality, including robots and automata that can build copies of themselves and self-assemble into complex structures. his work inspires
millions across the world as part of the maker
movement to build cool stuff, to create, the very act
that makes life so beautiful and fun. this is a lex fridman podcast. to support it, please check out our
sponsors in the description. and now, dear friends,
here's neil gershenfeld. you have spent your life
working at the boundary between bits and atoms, so
the digital and the physical. what have you learned about engineering and about nature of reality
from working at this divide, trying to bridge this divide? - i learned why von neumann and turing made fundamental mistakes. i learned the secret of life. i learned how to solve many of the world's most important problems,
which all sound presumptuous, but all of those are things
i learned at that boundary. - so turing and von
neumann, let's start there. some of the most
impactful, important humans who have ever lived in computing, why were they wrong? - so i worked with andy gleason, who was turing's counterpart. so just for background,
if anybody doesn't know, turing is credited with
the modern architecture of computing, among many other things. andy gleason was his us counterpart, and you might not have
heard of andy gleason, but you might have heard
of the hilbert problems. and andy gleason solved the fifth one. so he was a really notable mathematician. during the war, he was
turing's his counterpart. then von neumann is credited
with the modern architecture of computing and one of his
students was marvin minsky. so i could ask marvin
what johnny was thinking and i could ask andy
what alan was thinking. and what came out from that, what i came to appreciate as background, i never understood the difference
between computer science and physical science. but turing's machine that's the foundation of modern computing has a simple physics mistake, which is the head is
distinct from the tape. so in the turing machine, there's a head that
programmatically moves and reads and writes a tape. the head is distinct from the tape, which means persistence of
information is separate from interaction with information. then von neumann wrote
deeply and beautifully about many things, but not computing. he wrote a horrible memo
called the first draft of a report on the ed vac, which is how you program
a very early computer. in it, he essentially roughly
took turing's architecture and built it into a machine. so the legacy of that is the
computer somebody's using to watch this is spending
much of its effort moving information from
storage transistors to processing transistors, even though they have the
same computational complexity. so in computer science, when you learn about computing, there's a ridiculous taxonomy of about 100 different models of computation. but they're all fictions. in physics, a patch of
space occupies space, it stores state, it takes time to transit,
and you can interact. that is the only model of
computation that's physical. everything else is a fiction. i really came to appreciate
that a few years back when i did a keynote
for the annual meeting of the super computer industry and then went into the
halls and spent time with the super computer builders
and came to appreciate- if you're familiar with
the movie the metropolis, people would frolic
upstairs in the gardens and down in the basement
people would move levers. and that's how computing exists today, that we pretend software is not physical, it's separate from hardware. and the whole canon of computer science is based on this fiction that bits aren't constrained by atoms. but all sorts of scaling
issues in computing come from that boundary. but all sorts of opportunities
come from that boundary. and so you can trace
it all the way back to turing's machine making this mistake between the head and the tape, von neumann, he never called
it von neumann's architecture. he wrote about it in this dreadful memo and then he wrote beautifully
about other things we'll talk about. now to end a long answer,
turing and von neumann both knew this. so all of the canon of computer
scientists credits them for what was never meant to
be a computer architecture. both turing and von
neumann ended their life studying exactly how
software becomes hardware. so von neumann studied
self-reproducing automata, how a machine communicates
its own construction. turing studied morphogenesis, how genes give rise to form. they ended their life
studying the embodiment of computation, something that's been forgotten
by the canon of computing, but developed sort of off to the sides by a really interesting lineage. - so there's no distinction
between the head and the tape, between the computer and
the computation editor, it's all computation? - right. i never understood the difference between computer science and physical science. and working at that boundary
helped lead to things like my lab was part of doing with a number of interesting collaborators. the first faster than
classical quantum computations, we were part of a collaboration creating the minimal synthetic
organism where you design life in a computer. those both involve domains
where you just can't separate hardware from software, computation is embodied in
these really profound ways. - so the first quantum
computations, synthetic life, so in the space of biology, so the space of physics
at the lowest level and the space of biology
at the lowest level. so let's talk about cba,
center of bits and atoms. what's the origin story of
this legendary mit center that you were a part of creating? - in high school, i really wanted to go to vocational school where you learned to weld
and fix cars and build houses and i was told, no, you're smart. you have to sit in a room. and nobody could explain to me why i couldn't go to vocational school. i then worked at bell labs, this wonderful place before deregulation, legendary place, and i
would get union grievances because i would go into the workshop and try to make something
and they would say, no, you're smart, you have to
tell somebody what to do. and it wasn't until mit, and i'll explain how cba started, but i could create cba
that i came to understand this is a mistake that dates
back to the renaissance. so in the renaissance, the liberal arts emerged
and liberal doesn't mean politically liberal. this was the path to
liberation, birth of humanism. and so the liberal arts with
the trivium, quadrivium, roughly language, natural science. and at that moment what
emerged was this sort of dreadful concept of the illiberal arts. so anything that wasn't the liberal arts was for commercial gain
and was just making stuff and wasn't valid for serious study. and so that's why we're
left with learning to weld wasn't a subject for serious study. but the means of expression have changed since the renaissance, so micromachining or embedded coding is
every bit as expressive as painting a painting or writing a sonnet. so never understanding this difference between computer science
and physical science, the path that led me to
create cba with colleagues, i was what's called a
junior fellow at harvard. i was visiting mit through marvin because i was interested in the
physics of musical instruments. this'll be another slight digression. in cornell, i would study physics and then i would cross the
street and go to the music department where i played the bassoon and i would trim reeds and play the reeds. and they'd be beautiful
but then they'd get soggy. and then i discovered in
the basement of the music department at cornell was david borden, who you might not have heard of but is legendary in electronic
music 'cause he was really the first electronic musician. so bob moog, who invented
moog synthesizers was a physics student at cornell, like me crossing the street. and eventually he was kicked out and invented electronic music. david borden was the first musician who created electronic music. so he is legendary for
people like phil glass and steve reich. and so that got me thinking about, i would behave as a scientist
in the physics department but not in the music department. got me thinking about what's
the computational capacity of a musical instrument. and through marvin, he introduced me to todd
machover at the media lab who was just about to start
a project with yo-yo ma that led to a collaboration
to instrument a cello to extract yo-yo's data
and bring it out into computational environments. - what is the computational
capacity of musical instrument, as we continue on this tangent and when we shall return to cba. - one part of that is to
understand the computing. and if you look at like
the finest time scale and length scale, you
need to model the physics. it's not heroic. a good gpu can do teraflops today. that used to be a national
class supercomputer, now it's just a gpu. if you take the time
scales and length scales relevant for the physics, that's about the scale
of the physics computing. for yo-yo, what was really driving it was he's completely
unsentimental about the strad. it's not that it makes
some magical wiggles in the sound wave, it's
performance as a controller, how he can manipulate it
as an interface device. - interface between what and what exactly? - him and sound. and so what it led to was, i had started by thinking
about ops per second, but yo-yo's question was really
resolution and bandwidth. it's how fast can you measure what he does and the bandwidth and the resolution of detecting his controls and then mapping them into sounds. and what he found was if you
instrument everything he does and connect it to almost anything, it sounds like yo-yo, that the magic is in the control, not in ineffable details
in how the wood wiggles. and so with yo-yo and todd, that led to a piece and
towards the end i asked yo-yo, what it would take for him
to get rid of his strad and use our stuff. and his answer was just logistics. it was, at that time, our stuff was like a rack of electronics and lots of cables and some
grad students to make it work. once the technology becomes
as invisible as the strad, then, sure, absolutely
he he would take it. and by the way, as a
footnote on the footnote, an accident in the
sensing of yo-yo's cello led to a hundred million dollar a year auto safety business to
control airbags in cars. - how did that work? - i had to instrument the bow
without interfering with it. so i set up local electromagnetic fields where i would detect how
those fields interact with the bow he's playing. but we had a problem that his hand, whenever his hand got
near these sensing fields, i would start sensing his hand rather than the materials on the bow. and i didn't quite
understand what was going on with that interference. so my very first grad student ever, josh smith, did a thesis on
tomography with electric fields, had to see in 3d with electric fields. then through todd, and at that
point a research scientist in my lab, joe paradiso, it led to a collaboration
with penn and teller where we did a magic trick in
las vegas to contact houdini and sort of these fields are sort of like contacting spirits. so we did a magic trick in las vegas. and then the crazy thing
that happened after that was phil rittmuller came
running into my lab. he worked with, this
became with honda and nec, airbags were killing infants
in rear-facing child seats. cars need to distinguish
a front-facing adult, where you'd save the life, versus a bag of groceries
where you don't need to fire the airbag versus
a rear facing infant where you would kill it. and so the seat needed to, in effect, see in 3d to understand the occupants. and so we took the penn
and teller magic trick derived from josh's
thesis from yo-yo's cello to an auto show. and all the car companies said, great, when can we buy it? and so that became elesys
and it was a hundred million dollar a year business making sensors. there wasn't a lot of publicity
because it was in the car so the car didn't kill you. so they didn't sort of advertise, we have nice sensors so
the car doesn't kill you. but it became a leading
auto safety sensor. - and that started from the
cello and the question of the computational capacity
of the musical instrument. - so now to get back to mit. i was spending a lot of
outside time at ibm research that had gods of the
foundations of computing. there's just amazing people there. and i'd always expected to
go to ibm to take over a lab, but at the last minute
pivoted and came to mit to take a position in the media lab and start what became
the predecessor to cba. media lab is well known
for nicholas negroponte. what's less well known is
the role of jerry wiesner. so jerry was mit's president, before that, kennedy science advisor, grand old man of science. at the end of his life, he was frustrated by how
knowledge was segregated. and so he wanted to create a department of none of the above. a department for work that
didn't fit in departments. and the media lab, in a
sense, was a cover story for him to hide a department. as mit's president towards
the end of his tenure, if he said, i'm gonna make a department for things that don't fit in departments, the departments would've screamed. but everybody was sort of
paying attention to nicholas creating the media lab. and jerry kind of hid in
it a department called media arts and sciences. it's really the department
of none of the above. and jerry explaining that and
nicholas then confirming it is really why i pivoted and went to mit because my students who help
create quantum computing or synthetic life get degrees
from media arts and sciences, this department of none of the above. so that led to coming to mit. with todd and joe paradiso and mike holly, we started a consortium
called things that think, and this was around the
birth of internet of things and rfid. but then we started doing
things like work we can discuss that became the beginnings
of quantum computing and cryptography and materials
and logic and microfluidics. and those needed much more
significant infrastructure and were much longer research arcs. so with a bigger team of about 20 people, we wrote a proposal to the nsf to assemble one of every tool to make
anything of any size, was roughly the proposal. - one of any tool to make
anything of any size? - so there're usually
nanometers, micrometers, millimeters, meters are segregated, input and output is segregated. we wanted to look just very
literally at how digital becomes physical and
physical becomes digital. and fortunately we got nsf on a good day and they funded this facility of one of almost every tool to make anything. and so with a group of core colleagues that included joe jacobson,
ike chuang, scott manalis, we launched cba. - and so you're talking
about nanoscale, microscale, nano structures, microstructures,
macro structures, electron microscopes, and
focused high beam probes for nano structures, laser micromachining,
and x-ray microtomography for microstructures, multi-axis machining and 3d
printing for macro structures, just some examples. what are we talking
about in terms of scale? how can we build tiny
things and big things all in one place? how's that possible? - a well-equipped research
lab has the sort of tools we're talking about,
but they're segregated in different places. they're typically also run by technicians where you then have an account
and a project and you charge. all of these tools are essentially, when you don't know what you're doing, not when you do know what you're doing, in that they're when you need
to work across length scales. once projects are
running in this facility, we don't charge for time. you don't make a formal
proposal to schedule and the users really run the tools and it's for work that's kind of inchoate, that needs to span these
disciplines and length scales. and so work in the project today, work in cba today ranges
from developing zeptojoule electronics for the lowest power computing to micromachining diamond to
take 10 million rpm bearings for molecular spectroscopy studies up to exploring robots to
build 100 meter structures in space. - the three things you just mentioned. let's start with the biggest. what are some of the biggest
stuff you attempted to explore how to build in a lab? - so viewed from one direction, what we're talking about
is a crazy random-seeming of almost unrelated projects, but if you rotate 90 degrees, it's really just a core
thought over and over again. just very literally how
bits and atoms relate, how digital and just going
from digital to physical, in many different domains. but it's really just the same
idea over and over again. so to understand the biggest things, let me go back to bring in now shannon as well as von neumann. - claude shannon? - so what is digital? the casual, obvious answer
is digital in one in zero, but that's wrong. there's a much deeper answer, which is claude shannon at mit wrote the best master's thesis ever. in his master's thesis, he invented our modern
notion of digital logic. where it came from was vannevar bush was a grand old man at mit. he created the post-war
research establishment that led to the national
science foundation. and he made an important
mistake, which we can talk about. but he also made the
differential analyzer, which was the last great analog computer. so it was a room full of gears and pulleys and the longer it ran,
the worse the answer was. and shannon worked on it as a student. and he got so annoyed,
in his master's thesis, he invented digital logic. but he then went on to bell labs. and what he did there was communication was beginning to expand. there was more demand for phone lines. and so there's a question
about how many phone messages you could send down a wire and you could try to just
make it better and better. he asked a question nobody had asked, which is rather than make
it better and better, what's the limit to how good it can be? and he proved a couple things, but one of the main things he proved was a threshold theorem for channel capacity. and so what he showed was my voice to you right now is
coming as a wave through sound and the further you get,
the worse it sounds. but people watching this are getting it as packets of data in a network. when the computer they're
watching this gets the packet of information, it can
detect and correct an error. and what shannon showed is
if the noise in the cable to the people watching
this is above a threshold, they're doomed. but if the noise is below a threshold, for a linear increase in the energy representing our conversation, the error rate goes down exponentially. exponentials are fast, there's very few of them in engineering. and the exponential reduction
of error below a threshold if you restore state is
called a threshold theorem. that's what led to digital, that means unreliable
things can work reliably. so shannon did that for communication. then von neumann was inspired by that and applied it to
computation and he showed how an unreliable computer
can operate reliably by using the same threshold
property of restoring state. it was then forgotten many years. we had to rediscover it, in effect, in the quantum computing era when things are very unreliable again. but now to go back to
how does this relate to the biggest things i've made. so in fabrication, mit invented computer-controlled manufacturing in 1952. jet aircraft were just emerging. there was a limit to
turning cranks on a machine, on a milling machine to
make parts for jet aircraft. now this is a messy story. mit actually stole
computer-controlled machining from an inventor who brought it to mit, wanted to do a joint
project with the air force, and mit effectively stole it from him. so it's kind of a messy history, but that sounds like the birth of computer-controlled machining, 1952. there are a number of
inventors of 3d printing. one of the companies spun off from my lab by max lobovsky's formlabs, which is now a billion
dollar 3d printing company. that's the modern version. but all of that's analog, meaning the information is
in the control computer, there's no information in the materials. and so it goes back to vannevar
bush's analog computer. if you make a mistake in
printing or machining, just the mistake accumulates. the real birth of computerized
digital manufacturing is 4 billion years ago. that's the evolutionary
age of the ribosome. so the way you are
manufactured is there's a code that describes you, the genetic code. it goes to a micromachine, the ribosome, which is this molecular factory
that builds the molecules that are you. the key thing to know about
that is there're about 20 amino acids that get assembled and in that machinery, it does everything shannon and von neumann taught us. you detect and correct errors. so if you mix chemicals, the error rate is about
a part in a hundred. when you elongate protein in the ribosome, it's about a part and 10 to the 4. when you replicate dna, there's an extra level
of error correction, it's a part in 10 to the 8. and so in the molecules that make you, you can detect and correct errors and you don't need a ruler to make you, the geometry comes from your parts. so now compare a child playing with lego and a state-of-the-art 3d printer or computerized milling machine. the tower made by a child is more accurate than their motor control
because the act of snapping the bricks together gives you
a constraint on the joints. you can join bricks made
out of dissimilar materials. you don't need a ruler for lego 'cause the geometry locally
gives you the global parts and there's no lego trash. the parts have enough
information to disassemble them. those are exactly the
properties of a digital code. - the unreliable is made reliable. - yes, absolutely. so what the ribosome figured
out 4 billion years ago is how to embody these digital properties, but not for communication
or computation, in effect, but for construction. so a number of projects in
my lab have been studying the idea of digital materials and think of a digital
material just as lego bricks. the precise meaning is
a discreet set of parts reversibly joined with global geometry determined from local constraints. and so it's digitizing the materials. and so i'm coming back to
what are the biggest things i've made. my lab was working with
the aerospace industry. so spirit aero was boeing's factories. they asked us for how to join composites. when you make a composite airplane, you make these giant
wing and fuselage parts. and they asked us for a better
way to stick them together 'cause the joints were a place of failure. and what we discovered was instead of making a few big parts, if you make little loops of carbon fiber and you reversibly link them in joints and you do it in a special geometry that balances being underconstrained and overconstrained with just
the right degrees of freedom, we set the world record
for the highest modulus ultralight material just by, in effect, making carbon fiber lego. lightweight materials are
crucial for energy efficiency. this let us make the lightest
weight high modulus material. we then showed that with
just a few part types, we can tune the material properties and then you can create really wild robots that instead of having a
tool the size of a jumbo jet to make a jumbo jet, you can make little
robots that walk on these cellular structures to
build the structures where they error-correct their
position on the structure and they navigate on the structure. and so using all of that, with nasa, we made morphing airplanes. a former student, kenny
chung and ben jeannette, made a morphing airplane
the size of nasa langley's biggest wind tunnel. with toyota, we've made
super efficiency race cars. we're right now looking
at projects with nasa to build these for things
like space telescopes and space habitats where the ribosome, who i mentioned a little while back, can make an elephant
one molecule at a time. ribosomes are slow, they run
at about one molecule a second. but ribosomes make ribosomes. so you have thousands of
them, trillions of them, and that makes an elephant. in the same way, these
little assembly robots i'm describing can make giant structures, at heart because the
robot can make the robot. so more recently, two of my
students, amira and miana, had a nature communication paper showing how this robot can
be made out of the parts it's making so the robots
can make the robot. so you build up the capacity
of robotic assembly. - it can self-replicate. can you linger on what
that robot looks like? what is a robot that can walk
along and do error correction? and what is a robot
that can self-replicate from the materials it is given? what does that look like? what are we talking? this is fascinating. - the answer is different
at different length scales. so to explain that, in biology, primary structure is the
code in the messenger rna that says what the ribosome should build. secondary structure
are geometrical motifs. they're things like helices or sheets. tertiary structures
are functional elements like electron donors or acceptors. quaternary structure is
things like molecular motors that are moving my mouth
or making the synapses work in my brain. so there's that hierarchy
of primary, secondary, tertiary, quaternary. now what's interesting is if
you wanna buy electronics today from a vendor, there are hundreds of
thousands of types of resistors or capacitors or
transistors, huge inventory. all of biology is just
made from this inventory of 20 parts, the amino acids. and by composing them, you
can create all of life. and so as part of this
digitization of materials, we're in effect trying to create something like amino acids for engineering, creating all of technology from 20 parts. as another discussion, i helped start an office
for science in hollywood. and there was a fun thing
for the movie the martian where i did a program with
bill nye and a few others on how to actually build
a civilization on mars that they described in
a way that i like as, i was talking about how to
go to mars without luggage and at heart, it's sort
of how to create life in non-living materials. if you think about this
primary, secondary, tertiary, quaternary structure, in my lab, we're doing that but on
different length scales for different purposes. so we're making microrobots
out of like nano bricks and to make the robots to
build large scale structures in space, the elements of the robots now are centimeters rather than micrometers. and so the assembly robots
for the bigger structures, there're the cells that
make up the structure, but then we have functional cells. and so cells that can process and actuate, each cell can like move
one degree of freedom or attach or detach or process. now those elements i just described, we can make out of the
still smaller parts. so eventually, there's a
hierarchy of the little parts make little robots that make
bigger parts of bigger robots up through that hierarchy. - in that way you can
move up to landscape? - early on i tried to
go in a straight line from the bottom to the top and that ended up being a bad idea. instead, we're kind of doing
all of these in parallel and then they're growing together. and so to make the
larger scale structures, there's a lot of hype right
now about 3d printing houses where you have a printer
the size of the house. we're right now working
on using swarms of these table scale robots that
walk on the structures to place the parts much more efficiently. - that's amazing. but you're saying you
can't for now go from the very small to the very large. - that'll come, that'll come in stages. - can we just linger on this idea, starting from von
neumann's self-replicating automata that you mentioned. it's just a beautiful idea. - so that's at the heart of all of this. in the stack i described, so one student, will langford,
made these microrobots out of little parts that then we're using for miana's bigger robots
up through this hierarchy. and it's really realizing this idea of the self-reproducing automata. so von neumann, when i complained about the von neumann architecture, it's not fair to von neumann
'cause he never claimed it as his architecture. he really wrote about it in
this one fairly dreadful memo that led to all sorts
of lawsuits and fights about the early days of computing. he did beautiful work
on reliable computation and unreliable devices. and towards the end of his
life what he studied was how, and i have to say this precisely, how a computation communicates
its own construction. - so beautiful. - so a computation can store a description of how to build itself. but now there's a really hard problem, which is, if you have that in your mind, how do you transfer it and wake up a thing that then can contain it. so how do you give birth to a thing that knows how to make itself? and so with stan ulam, he invented cellular automata
as a way to simulate these, but that was theoretical. now the work i'm describing in my lab is fundamentally how to realize it, how to realize self-reproducing automata. and so this is something
von neumann thought very deeply and very
beautifully about theoretically. and it's right at this intersection. it's not communication or
computation or fabrication. it's right at this intersection
where communication and computation meets fabrication. now the reason self-reproducing
automata intellectually is so important 'cause this
is the foundation of life. this is really just
understanding the essence of how to life. and in effect we're trying to create life in non-living material. the reason it's so
important technologically is because that's how you scale capacity. that's how you can make an
elephant from a ribosome, 'cause assemblers make assemblers. - so simple building blocks
that inside themselves contain the information how to build more building blocks. and between each other, construct arbitrarily complex objects. - now let me give you the numbers. so let me relate this to, right now we're living in
ai mania explosion time. let me relate that to
what we're talking about. a 100 petaflop computer, which is a current
generation supercomputer, not quite the biggest ones, does 10 to the 17 ops per second. your brain does 10 to
the 17 ops per second. it has about 10 to the 15 synapses and they run at about 100 hertz. so as of a year or two ago, the performance of a big
computer matched a brain. so you could view ai as a breakthrough. but the real story is within
about a year or two ago, the supercomputer has about
10 to the 15 transistors in the processors, 10 to the
15 transistors in the memory, which is the synopses in your brain. so the real breakthrough
was the computers match the computational capacity of a brain. and so we'd be sort of
derelict if they couldn't do about the same thing. but now the reason i'm
mentioning that is the chip fab making the super computer is placing about 10 to the 10 transistors a second. while you're digesting
your lunch right now, you're placing about 10 to
the' parts per second. there's an eight order
of magnitude difference. so in computational capacity, it's done, we've caught up. but there's eight orders
of magnitude difference in the rate at which biology can build versus state-of-the-art
manufacturing can build. and that distinction is
what we're talking about, that distinction is not analog, but this deep sense of
digital fabrication, of embodying codes in construction. so a description doesn't describe a thing, but the description becomes the thing. - so you're saying, this is
one of the cases you're making, that this is this third revolution. we've seen the moore's
law in communication, we've seen the moore's
law-like type of growth in computation, and you're anticipating
we're going to see that in digital fabrication. can you actually, first of all, describe what you mean by
this term digital fabrication? - the casual meaning is
the computer controls the tool to make something. and that was invented
when mit stole it in 1952. there's the deep meaning
of what the ribosome does, of a digital description
doesn't describe a thing, a digital description becomes the thing. that's the path to the
star trek replicator. and that's the thing
that doesn't exist yet. now i think the best way to understand what this roadmap looks like
is to now bring in fablabs and how they relate to all of this. - what are fablabs? - so here's a sequence. with colleagues, i
accidentally started a network of what's now 2,500 digital
fabrication community labs called fablabs, right
now in 125 countries. and they double every year and a half. that's called lass' law
after sherri lassiter, who i'll explain. so here's the sequence. we started center for bits
and atoms to do the kind of research we're talking about. we had all of these machines
and then had a problem. it would take a lifetime of classes to learn to use all the machines. so with colleagues who helped start cba, we began a class modestly called how to make almost anything. and there's no big agenda. it was aimed at a few research
students to use the machines. and we were completely
unprepared for the first time we taught it. we were swamped by, every year since, hundreds of students
try to take the class. it's one of the most
oversubscribed classes at mit. students would say things like, can you teach this at mit? it seems too useful. it's just how to work these machines. and the students in the class, i would teach them all the
skills to use all these tools and then they would do
projects integrating them and they're amazing. so kelly was a sculptor,
no engineering background. her project was she made a
device that saves up screams when you're mad and
placed them back later. - saves up screams when you're mad and plays them back later? - you scream into this device
and it deadens the sound, records it, and then when it's convenient, releases your scream. - can we just pause on the brilliance of that invention, creation, the art, i don't know, the brilliance. who is this that created this? - kelly dobson. gone on to do a number
of interesting things. mejin, who's gone on to do a
number of interesting things, made a dress instrumented
with sensors and spines. and when somebody creepy comes close, it would defend your personal space. - also very useful. - another project early on
was a web browser for parrots, which have the cognitive
ability of a young child and let's parrots surf the internet. another was an alarm
clock you wrestle with and prove you're awake. and what connects all of these is, so mit made the first realtime
computer, the whirlwind. that was transistorized as the tx. the tx was spun off from mit as the pdp. pdps were the mini computers
that created the internet. so outside mit was deck,
prime, wang, data general, the whole mini computer industry, the whole computing industry was there, and it all failed when
computing became personal. ken olson, the head of
digital, famously said, you don't need a computer at home. there's a little background to that, but deck completely missed
computing became personal. so i mention all of that
because i was asking how to do digital fabrication,
but not really why. the students in this how to make class were showing me that the killer
app of digital fabrication is personal fabrication. - how do you jump to the
personal fabrication? - so kelly didn't make the screen body because it was for a thesis. she wasn't writing a research paper, it wasn't a business model, it was 'cause she wanted one. it was personal expression, going back to me in vocational school. personal expression in these
new means of expression. so that's happened every year since. - the course is literally called how to make almost anything. a legendary course at mit. every year. - and it's grown to multiple labs at mit with as many people involved
as teaching as taking it. and there's even a harvard
lab for the mit class. - what have you learned about humans colliding with the fablab
about what the capacity of humans to be creative and to build? - i mentioned marvin,
another mentor at mit, sadly no longer living, is seymour papert. so papert studied with piaget. he came to mit to get access to the early- piaget was a pioneer in how kids learn. papert came to mit to get
access to the early computers with the goal of letting
kids play with them. piaget helped show kids
are like scientists. they learn as scientists
and it gets kind of throttled out of them. seymour wanted to let kids have
a broader landscape to play. seymour's work led with
mitch resnick to lego, logo, mindstorms, all of that stuff. as fablab spread and we started creating educational programs for kids in them, seymour said something really interesting, he made a gesture. he said it was a thorn in his side that they invented
what's called the turtle, an early robot kids could program to connect it to a mainframe computer. seymour said the goal was not for the kids to program the robot, it was for the kids to create the robot. and so in that sense, the fablabs, which for me were just this accident, he described as sort of
this fulfillment of the arc of kids learn by experimenting. it was to give them the tools to create, not just assemble things
and program things, but actually create. so coming to your question. what i've learned is mit a few years back, somebody added up businesses
from spun off from mit and it's the world's 10th economy. it falls between india and russia. and i view that in a way as a bad number because it's only a few thousand people and these aren't uniquely
the 4,000 brightest people. it's just a productive
environment for them. and what we found is in
rural indian villages and african shanty towns
and arctic hamlets, i find exactly, precisely that profile. so ling sai did a few hours above tromso, way above the arctic circles. it's so far north, the satellite
dishes look at the ground, not the sky. hans christian in the lab
was considered a problem in the local school 'cause they
couldn't teach him anything. i showed him a few projects. next time i came back he
was designing and building little robot vehicles. and in south africa, i mentioned sochengovi, in
this apartheid township, the local technical institute taught kids how to make bricks and fold sheets. it was punitive. but chapiso in the fablab was
actually doing all the work of my mit classes. and so over and over, we found precisely the same kind of bright,
inventive creativity. and historically, the answer
was you're smart, go away. it's sort of like me
and vocational school. but in this lab network, what we could then do is in
effect bring the world to them. now let's look at the
scaling of all of this. so there's one earth, a thousand
cities, a million towns, a billion people, a trillion things. there was one whirlwind computer and my team made the
first realtime computer. there were thousands of pdps. there were millions of hobbyist computers that came from that. billions of personal computers. trillions of internet of things. so now if we look at this fablab story, 1952 was the nc mill. there are now thousands of fablabs. and the fablab costs exactly the same cost and complexity of the mini computer. so on the mini computer, it
didn't fit in your pocket, it filled a room. but video games, email, word processing, really anything you do with the internet, anything you do with a computer
today happened at that era because it got on the
scale of a work group, not a corporation. in the same way, fablabs
are like the mini computers inventing how does the world work if anybody can make anything. then if you look at that scaling, fablabs today are transitioning from buying a machine to
machines making machines. so we're transitioning to, you can go to a fablab
not to make a project, but to make a new machine. so we talked about the deep
sense of self-replication. there's a very practical
sense of fablab machines making fablab machines. and so that's the equivalent
of the hobbyist computer era, whatever it's called,
the altera, historically. then the work we spent
a while talking about about assemblers and self-assemblers, that's the equivalent of
smartphones and internet of things. that's when the assemblers
are like the smartphone where a smartphone today
has the capacity of what used to be a
supercomputer in your pocket. and then the smart thermostat on your wall has the power of the
original pdp computer. not metaphorically, but literally. and now there's trillions of those. in the same sense that when
we finally merge materials with the machines in the self-assembly, that's like the internet of things stage. but here's the important lesson. if you look at the computing analogy, computing expanded exponentially but it really didn't fundamentally change. the core things happened
in that transition in the mini computer era. so in the same sense, the research now we spent
a while talking about is how we get to the replicator. today, you can do all of that if you close your eyes
and view the whole fablab as a machine. in that room, you can
make almost anything, but you need a lot of inputs. bit by bit, the inputs will go down and the size of the room will go down as we go through each of these stages. - so how difficult is it to create a self-replicating assembler, self-replicating machine
that builds copies of itself or builds more complicated
version of itself, which is kind of the dream
towards which you're pushing in a generic arbitrary sense? - i had a student, nadia
peak with jonathan ward, who for me started this idea
of how do we use the tools in my lab to make the tools in the lab? in a very clear sense, they are making self-reproducing machines. so one of the really cool
things that's happened is there's a whole network
of machine builders around the world. so there's danielle now in
germany and yens in norway. and each of these people
has learned the skills to go into a fablab and make a machine. and so we've started creating
a network of super fab. so the fablab can make a machine, but it can't make a number
of the precision parts of the machine. so in places like bhutan or
carroll in the south of india, we've started creating
super fablabs that have more advanced tools to make
the parts of the machines so that the machines
themselves become even cheaper. so that is self-reproducing machines, but you need to feed
it things like bearings or microcontrollers. they can't make those parts. but other than that, they're
making their own things. and i should note as a footnote, the stack i described of
computers controlling machines to machine making machines to assemblers to self assemblers, view that as fab one, two, three, four. so we're transitioning
from fab one to fab two and the research in the
lab is three and four. at this fab two stage,
a big component of this is sustainability in the
material feed stocks. so alicia, colleague in chile,
is leading a great effort looking at how you take forest
products and coffee grounds and seashells and a range of
locally available materials and produce the high tech
materials that go into the lab. so all of that is machine building today. then back in the lab, what we can do today is we
have robots that can build structures and can assemble more robots that build structures. we have finer resolution robots that can build micromechanical systems. so robots that can build robots that can walk and manipulate. and we're just now we have a
project at the layer below that where there's endless attention today to billion dollar chip fab investments. but a really interesting
thing we passed through is today the smallest
transistors you can buy as a single transistor just commercially for electronics is actually the size of an early transistor in
an integrated circuit. so we're using these
machines making machines, making assemblers to place
those parts to not use a billion dollar chip fab
to make integrated circuits, but actually assemble little
electronic components. - so have a fine enough,
precise enough actuators and manipulators that allow
you to place these transistors. - that's a research project in my lab called dice, on discrete assembly
of integrated electronics. and we're just at the point
to really start to take seriously this notion
of not having a chip fab make integrated electronics,
but having, not a 3d printer, but a thing that's a cross
between a pick and place makes circuit boards in 2d, the 3d printer extrudes in 3d, we're making sort of a micromanipulator that acts like a printer but it's placing to
build electronics in 3d. - but this micromanipulator
is distributed. so there's a bunch of them or
is this one centralized thing? - so that's why that's a great question. so i have a prize that's
almost but not been claimed for the students whose thesis
can walk out of the printer. - oh, nice. - so you have to print
the thesis with the means to exit the printer and it
has to contain its description of the thesis that says how to do that. - it's a really good, it's a fun example of exactly
the thing we're talking about. - and i've had a few
students almost get to that. and so in what i'm describing, there's this stack where
we're getting closer, but it's still quite a few
years to really go from a- so there's a layer below the transistors where we assemble the base materials that become the transistor. we're now just at the edge
of assembling the transistors to make the circuits. we can assemble the microparts
to make the microrobots, we can assemble the bigger
robots, and in the coming years, we'll be patching together
all of those scales. - so do you see a vision of
just endless billions of robots at the different scales,
self-assembling, self-replicating, and building more complicated structures? - yes, and the but to the yes but, is let me clarify two things. one is, that immediately
raises king charles fear of gray goo of runaway mutant
self-reproducing things. the reason why there are
many things i can tell you to worry about, but
that's not one of them, is if you want things to
autonomously self-reproduce and take over the world, that means they need
to compete with nature on using the resources of
nature, of water and sunlight. and in light of everything i'm describing, biology knows everything i told you. every single thing i explain, biology already knows how to do. what i'm describing isn't new for biology, it's new for non-biological systems. so in the digital era, the economic win ended
up being centralized, the big platforms. in this world of machines
that can make machines, i'm asked for example, what's
the killer opportunity? who's gonna make all the
money, who to invest in? but if the machine can make the machine, it's not a great business
to invest in the machine. in the same way that if you can produce, if you can think globally
but produce locally, then the way the technology
goes out into society isn't a function of central control but is fundamentally distributed. now that raises an
obvious kind of concern, which is, well, doesn't this
mean you could make bombs and guns and all of that? the reason that's much less of a problem than you would think is
making bombs and guns and all of that is a very
well met market need. anywhere we go, there's a fine supply chain for weapons. now hobbyists have been
making guns for ages and guns are available
just about anywhere. so you could go into
the lab and make a gun. today, it's not a very good gun and guns are easily available. and so generally, we've run
these labs in war zones. what we find is people don't
go to them to make weapons, which you can already do anyway. it's an alternative to making weapons. coming back to your question, i'd say the single most
important thing i've learned is the greatest natural
resource of the planet is this amazing density of
bright, inventive people whose brains are underused. and you could view the social
engineering of this lab work is creating the capacity for them. and so in the end, the way this is going to impact society isn't gonna be command and control. it's how the world uses it. and it's been really gratifying for me to see just how it does. - but what are the
different ways the evolution of the exponential scaling
of digital fabrication can evolve? self-replicating nanobots,
this is the gray goo fear. it's a caricature of a fear, but nevertheless there's
interesting, just like you said, spam and all these kinds
of things that came with the scaling of communication
and computation. what are the different
ways that malevolent actors will use this technology? - first let me start
with a benevolent story which is trash is an analog concept. there's no trash in a forest. all the parts get disassembled and reused. trash means something doesn't
have enough information to tell you how to reuse it. it's as simple as there's
no trash in a lego room. when you assemble lego, the lego bricks have enough
information to disassemble them. so as you go through this fab
one, two, three, four story, one of the implications of this transition from printing to assembling. so the real breakthrough technologically isn't additive versus subtractive, which is a subject of a
lot of attention and hype. 3d printers are useful. we spun off companies
like formlabs led by max for 3d printing, but in a fablab, it's 1 of maybe 10 machines. it's used but it's only
part of the machines. the real technological change
is when we go from printing and cutting to assembling and dissembling, but that reduces inventories
of hundreds of thousands of parts to just having a few
parts to make almost anything. it reduces global supply
chains to locally sourcing these building blocks. but one of the key
implications is it gets rid of technological trash because
you can disassemble and reuse the parts, not throw them away. and so initially, that's
of interest for things at the end of long supply
chains like satellites on orbit. but one of the things coming
is eliminating technical trash through reuse of the building blocks. - so like when you
think about 3d printers, you're thinking about
addition and subtraction. when you think about the
other options available to you in that parameter space as you call it, that's going to be assembly,
disassembly, cutting, you said? - so the 1952 nc mill was subtractive. you remove material. and 3d printing, additive. and there's a couple claims to
the invention of 3d printing that's closer to what's called net shape, which is you don't have
to cut away the material you don't need, you just put
material where you do need it. and so that's the 3d printing revolution. but there are all sorts of
limitations on 3d printing to the kinds of materials you can print, the kind of functionality you can print. we're just not gonna get to making everything in a cell
phone on a single printer. but i do expect to make
everything in a cell phone with an assembler. and so instead of printing
and cutting technologically, it's this transition to
assembling and dissembling. going back to shannon and von neumann, going back to the ribosome
4 billion years ago. you come to malevolent. let me tell you a story about i was doing a briefing for the
national academy of sciences group that advises the
intelligence communities and i talked about the
kind of research we do and at the very end i
showed a little video clip of valentina in ghana, a local girl, making surface mount
electronics in the fablab. and i showed that to
this room full of people. one of the members of the
intelligence community got up, livid, and said, how dare you waste our time
showing us a young girl in an african village making
surface mount electronics. we need to know about disruptive threats to the future of the united states. and somebody else got up in
the room and yelled at him, you idiot, i can't think of anything
more important than this. but for two reasons. one reason was because if we rely on informational superiority
in the battlefield, it means other people
could get access to it. but this intelligence
person's point, bless him, wasn't that, it was
getting at the root causes of conflict is if this young
girl in an african village could actually master
surface mount electronics, it changes some of the
most fundamental things about recruitment for terrorism, impact of economic migration, basic assumptions about an economy. it's just existential for
the future of the planet. - but you know, we've just
lived through a pandemic. i would love to linger on
this cause the possibilities that are positive are endless. but the possibilities that are negative are still nevertheless
extremely important. with both positive and negative, what do you do with a large
number of general assemblers? - with the fablab, you
could roughly make a bio lab then learn biotechnology. now that's terrifying because
making self-reproducing gray goo that outcompetes biology, i consider doom because
biology knows everything i'm describing and is
really good at what it does. in how to grow almost anything, you learn skills in
biotechnology that let you make serious biological threats. - and when you combine some
of the innovations you see with large language models, some of the innovations
you see with alpha fold, so applications of ai for
designing biological systems, for writing programs, which you can with large language models increasingly, so there seems to be an
interesting dance here of automating the design stage
of complex systems using ai. and then that's the bits. and you can leap now, the
innovations you're talking about, you can leap from the complex
systems in the digital space to the printing, to the creation, to the assembly at
scale of complex systems in the physical space. - so something to be
scared about is a fablab can make a bio lab, a bio
lab can make biotechnology, somebody could learn to make a virus. that's scary. unlike some of the things
i said i don't worry about, that's something i really
worry about that is scary. now how do you deal with that? prior threats we dealt
with command and control. so like early color
copiers had unique codes and you could tell which copier made them. eventually you couldn't keep up with that. there was a famous meeting at asilomar in the early days of recombinant dna where that community
recognized the dangers of what it was doing and
put in place a regime to help manage it. and so that led to the kind
of research management. mit has an office that supervises research and it works with the national office. that works if you can
identify who's doing it and where, it doesn't work in this world we're describing. so anybody could do this anywhere. and so what we've found
is you can't contain this. it's already out. you can't forbid because there
isn't command and control. the most useful thing you
can do is provide incentives for transparency. but really the heart of what
we do is you could do this by yourself in a basement
for nefarious reasons or you could come into
a place in the light where you get help and you get community and you get resources. and there's an incentive
to do it in the open, not in the dark. and that might sound naive, but in the sort of places we're working, again, bad people do bad
things in these places already, but providing openness
and providing transparency is a key part of managing these. it transitions from
regulating risks as regulation to soft power to manage them. - so there's so much potential for good, so much capacity for good that fablabs and the ability and the tools of creation really unlock that potential. - i don't say that as
sort of dewy-eyed naive. i say that empirically
from just years of seeing how this plays out in communities. - i wonder if it's the early
days of personal computers though, before we get spam. - in the end, most fundamentally, literally the mother of all problems is who designed us? so assume success in that
we're gonna transition to the machines making machines and all of these new sort of
social systems we're describing will help manage them and curate
them and democratize them. if we close the gap i just led off with of 10 to the 10 to 10 to the
18 between chip fab and you, we're ultimately, in
marrying communication, computation, and fabrication, gonna be able to create
unimaginable complexity. and how do you design that? and so i'd say the
deepest of all questions that i've been working on goes back to the oldest
part of our genome. so in our genome what are called hox gene, and these are morphogenes, and nowhere in your
genome is the number five. it doesn't store the fact
that you have five fingers. what it stores is what's
called a developmental program. it's a series of steps. and the steps have the character
of like grow up a gradient or break symmetry. and at the end of that
developmental program, you have five fingers. so you are stored not as a body plan, but as a growth plan. and there's two reasons for that. one reason is just compression. billions of genes can
place trillions of cells. but the much deeper one is evolution doesn't randomly perturb. almost anything you did
randomly in the genome would be fatal or inconsequential,
but not interesting. but when you modify things in
these developmental programs, you go from like webs
for swimming to fingers or you go from walking
to wings for flying. it's a space in which
search is interesting. so this is the heart of the success of ai. in part, it was the scaling
we talked about a while ago. and in part, it was the
representations for which search is effective. ai has found good representations. it hasn't found new ways to search, but it's found good
representations of search. - and you're saying that's what biology, that's what evolution has done, is created representations, structures, biological structures through
which search is effective. - and so the developmental programs in the genome beautifully
encapsulate the lessons of ai. and it's embodied, it's
molecular intelligence. it's ai embodied in our genome. it's every bit as profound as
the cognition in our brain. but now this is sort of
thinking in molecular thinking in how you design. and so i'd say the most fundamental
problem we're working on is it's kind of tautological
that when you design a phone, you design the phone, you represent the design of the phone. but that actually fails
when you get to the sort of complexity that we're talking about. and so there's this
profound transition to come. once i can have self-reducing assemblers placing 10 to the' parts, you need to, not sort of metaphorically, but create life in that you
need to learn how to evolve. but evolutionary design
has a really misleading, trivial meaning. it's not as simple as you
randomly mutate things. it's as much more deep embodiment of ai and morphogenesis. - is there a way for us
to continue the kind of evolutionary design that
led us to this place from the early days of
bacteria, single cell organism to ribosomes and the 20 amino acids? - you mean for human augmentation? - for life- what would you call assemblers
that are self-replicating and placing parts? what is the dynamic
complex things built with digital fabrication? what is that? that's life. - so ultimately, absolutely, if you add everything i'm talking about, it's building up to creating
life in non-living materials. i don't view this as copying life. i view it as driving life. i didn't start from how does biology work and then i'm gonna copy it. i start from how to
solve problems and then it leads me to, in a
sense, rediscover biology. so if you go back to valentina in ghana making her circuit board, she still needs a chip fab very far away to make the processor
in her circuit board. for her to make the processor locally, for all the reasons we described, you actually need the deep things we were just talking about. and so it really does lead you. there's a wonderful series
of books by gingery. book one is how to make
a charcoal furnace. and at the end of book seven,
you have a machine shop. it's sort of how you do your own personal industrial revolution. isru is what nasa calls in
situ resource utilization. and that's how do you go to a planet and create a civilization. isru has essentially assumed gingery. you go go through the
industrial revolution and you create the inventory of 100,00 resistors. what we're finding is the
minimum building blocks for a civilization is roughly 20 parts. so what's interesting
about the amino acids is they're not interesting. they're hydrophobic or
hydrophilic, basic or acidic. they have typical but
not extremal properties. but they're good enough
you can combine them to make you. so what this is leading
towards is technology doesn't need enormous
global supply chains. it just needs about 20
properties you can compose to create all technology as
the minimum building blocks for a technological civilization. - so there's going to be
20 basic building blocks based on which the self-replicating
assemblers can work? - right. and i say that not philosophically, just empirically, that's
where it's heading. and i like thinking about how you bootstrap a civilization
on mars, that problem. there's a fun video on
bonus material for the movie where with a neat group of people we talk about it because it has
really profound implications back here on earth about
how we live sustainably. - what does that civilization
on mars look like that's using isru, that's
using these 20 building blocks and does self-assembly. - go through primary,
secondary, tertiary, quaternary. you extract properties like
conducting, insulating, semiconducting, magnetic,
dielectric, flexural. these are the kind of
roughly 20 properties. with those, those are enough
for us to assemble logic and they're enough for
us to assemble actuation. with logic and actuation,
we can make microrobots. the microrobots can build bigger robots. the bigger robots can then take
the building block materials and make the structural
elements that you then do to make construction. and then you boot up through the stages of a technological civilization. - by the way, where in the
span of logic and actuation did the sensing come in? - oh, i skipped over that. but my favorite sensor is a step response. so if you just make a step
and measure the response to the electric field, that ranges from user
interfaces to positioning to material properties. and if you do it at higher frequencies, you get chemistry. and you can get all of
that just from a step in an electric field. so for example, once you have
time resolution in logic, something as simple as two electrodes let you do amazingly capable sensing. so we've been talking
about all the work i do, there's a story about how it happens, where do ideas come from? - that's an interesting story. where do ideas come from? - so i had mentioned vannevar bush and he wrote a really influential thing called the endless frontier. so science won world war ii. the more known story is nuclear bombs. the less well known story is the rad lab. so at mit, an amazing group
of people invented radar, which is really credited
as winning the war. so after the war, grand old man from mit was charged with science won the war, how do we maintain that edge? and the report he wrote
led to the national science foundation and the modern
notion we take for granted but didn't really exist
before then of public funding of research, of research agencies. in it, he made what i
consider an important mistake, which is he described
basic research leads to applied research leads to applications leads to commercialization
leads to impact. and so we need to invest in that pipeline. the reason i consider it a mistake is almost all of the examples
we've been talking about in my lab went backwards. that the basic research
came from applications. and further, almost all of the examples we've been talking about came
fundamentally from mistakes. essentially everything i've
ever worked on has failed, but in failing, something better happened. so the way i like to describe it is ready, aim, fire is you do your homework, you aim carefully at something, a target you wanna accomplish, and if everything goes right, you then hit the target and succeed. what i do you can think
of is ready, fire, aim. so you do a lot of work to get ready, then you close your eyes and
you don't really think about where you're aiming, but you look very carefully
at where you did aim, you aim after you fire. and the reason that's so important is if you do ready, aim, fire, the best you can hope
is hit what you aim at. so let me give you some examples, cause this is a source of great- - you're full of good lines today. - source of great frustration. i mentioned the early quantum computing. quantum computing is this power of using quantum mechanics to make computers that for some problems are
dramatically more powerful than classical computers. before it started, there was a really
interesting group of people who knew a lot about physics and computing that were inventing what
became quantum computing before it was clear there
was an opportunity there. it was just studying how those relate. here's how it fits to
the ready, fire, aim. i was doing really short
term work in my lab on shoplifting tags on. this was really before
there was modern rfid. and so how you put tags
in objects to sense them. something we just take
for granted commercially. and there was a problem of
how you can sense multiple objects at the same time. and so i was studying how you
can remotely sense materials to make low-cost tags that
could let you distinguish multiple objects simultaneously. to do that you need non-linearity so that the signal is modulated. and so i was looking for
material sources of non-linearity and that led me to look
at how nuclear spins interact, just for spin resonance. this the sort of things
you use when you go in an mri machine. and so i was studying how to use that and it turns out that it was a bad idea. you couldn't remotely use
it for shoplifting tags, but i realized you could compute. and so with a group of colleagues thinking about early quantum computing like david divincenzo and
charlie bennett was articulating, what are the properties
you need to compute? and then looking at how to make the tags. it turns out the tags were a terrible idea for sensing objects in
a supermarket checkout, but i realized they were computing. so with ike chuang and a few other people, we realized we could program
nuclear spins to compute. and so that's what we use to
do grover's search algorithm. and then it was used for
shor's factoring algorithm and it worked out. the systems we did it in
nuclear magnetic resonance don't scale beyond a few qubits, but the techniques have lived on. and so all the current
quantum computing techniques grew out of the ways we
would talk to these spins. but i'm telling this whole story because it came from a bad way to
make a shoplifting tag. - starting with an application, mistakes led to breakthroughs
of fundamental science. can you just linger on that, using nuclear spins to do computation, what gave you the guts to
try to think through this? from a digital fabrication perspective, actually, how to leap
from one to the other. - i wouldn't call it guts, i
would call it collaboration. so at ibm there was this amazing group of, like i mentioned charlie
bennett and david divincenzo and ralph landau and nabil amer. and these were all gods
of thinking about physics and computing. i yelled at the whole computer industry being based on a fiction metropolis, programmers frolicking in the garden while somebody moves
levers in the basement. there's a complete parallel history of maxwell to boltzmann to
zollar to landau to bennett. most people won't know most of these names but this whole parallel history thinking deeply about how
computation and physics relate. so i was collaborating with
that whole group of people. and then, at mit i was in
this high traffic environment. i wasn't deeply inspired
to think about better ways to detect shoplifting tags but stumbled across companies
that needed help with that and was thinking about it. and then i realized those
two worlds intersected and we could use the failed approach for the shoplifting tags to make early quantum computing algorithms. - this kind of stumbling is
fundamental to the fablab idea? - right. here's one more example. with the student, manu,
we talked about ribosomes and i was trying to build a ribosome that worked on fluids
so that i could place the little parts we're talking about. it kept failing 'cause bubbles
would come into our system and the bubbles would make
the whole thing stop working. and we spent about half a year trying to get rid of the bubbles. then manu said, wait a minute, the bubbles are actually
better than what we're doing. we should just use the bubbles. and so we invented how
to do universal object logic with little bubbles and fluid. - you have to explain this
microfluidic bubble logic, please. how does this work? that's super interesting. - i'll come back and explain it. but what it led to was we
showed fluids could do, it'd been known fluid could do logic, like your old automobile
transmissions do logic, but that's macroscopic. it didn't work at little scales. we showed with these bubbles we could do it at little scales. then i'm gonna come back and explain it. but what came out of
that is manu then showed you could make a 50 cent
microscope using little bubbles. and then the techniques we developed are what we use to transplant genomes to make synthetic life all
came out of the failure of trying to make the ribosome. the way the bubble logic
works is in a little channel, fluid at small scales is fairly viscous. it's sort of like pushing
jello, think of it as. if a bubble gets stuck, the fluid has to detour around it. so now imagine a channel that
has two wells and one bubble. if the bubble is in one well, the fluid has to go in the other channel. if the fluid is in the other well, it has to go in the first channel. so the position of the bubble can switch. it's a switch, it can switch
the fluid between two channels. so now we have one element of switch and it's also a memory
because you can detect whether or not a bubble is stored there. then if two bubbles meet, if you have two channels crossing, a bubble can go through one way or a bubble can go through the other way. but if two bubbles come together, then they push on each
other and one goes one way and one goes the other way. that's a logic operation. that's a logic gate. so we now have a switch, we have a memory, and
we have a logic gate. and that's everything you need
to make a universal computer. - the fact that you did that with bubbles and microfluid, it's
just kind of brilliant. - to stay with that example, what we proposed to do was
to make a fluidic ribosome and the project crashed and burned. it was a disaster. this is what came out of it. and so it was precisely ready, fire, aim in that we had to do a lot
of homework to be able to make these microfluidic systems. the fire part was we didn't think too hard about making the ribosome,
we just tried to do it. the aim part was we
realized the ribosome failed but something better had happened. and if you look all
across research funding, research management, it
doesn't anticipate this. so fail fast is familiar, but fail fast tends to miss ready and aim. you can't just fail. you have to do your homework
before the fail part and you have to do the aim
part after the fail part. and so the whole language of research is about like milestones and deliverables, that works when you're
going down a straight line, but it doesn't work for
this kind of discovery. and to leap to something you
said that's really important is i view part of what the
fablab network is doing is giving more people
the opportunity to fail. - you've said that geometry is
really important in biology. what does fabrication biology look like? why is geometry important? - so molecular biology
is dominated by geometry. that's why the protein
folding is so important, that the geometry gives the function. and there's this hierarchical construction of as you go through primary,
second, tertiary, quaternary, the shapes of the molecules make the shape of the molecular machines. and they really are exquisite machines. if you look at how your muscles move, if you were to see a simulation of it, it would look like a improbable
science fiction cyborg world of these little walking
robots that walk on a discreet lattice. they're really exquisite machines. and then from there, there's
this whole hierarchical stack of once you get to the top of that, you then start making
organelles that make cells that make organs through
the stack of that hierarchy. - just stepping back, does it amaze you that
from small building blocks where amino acids, you
mentioned molecules, let's go to the very beginning
of hydrogen and helium at the start of this universe, that we're able to build up such complex and beautiful things like our human brain? - so studying thermodynamics, which is exactly the question of batteries run out and need recharging, cars get old and fail, yet life doesn't. that's why there's a sense in which life seems to violate thermodynamics, although of course it doesn't. - it seems to resist the march
towards entropy, somehow. - right. and so maxwell, who helped give rise to the science of thermodynamics posited a problem that was so infuriating it led to a series of suicides. there was a series of
advisors and advisees, three in a row, that all
ended up committing suicide that happened to work on this problem. and maxwell's demon is this
simple but infamous problem where right now, in this
room, we're surrounded by molecules and they run
at different velocities. imagine a container that has a wall and it's got gas on both
sides and a little door. and if the door is a
molecular-sized creature and it could watch the molecules coming, and when a fast molecule is
coming, it opens the door. when a slow molecule is
coming, it closes the door. after it does that for a while, one side is hot, one is cold. once something is hot and is
cold, you can make an engine. and so you close that
and you make an engine and you make energy. so the demon is violating thermodynamics because it's never touching the molecule, yet by just opening and closing the door, it can make arbitrary amounts
of energy and power a machine. and in thermodynamics you can't do that. so that's maxwell's demon. that problem is connected to
everything we just spoke about for the last few hours. so leo szilard around early
1900s was a deep physicist who then had a lot to do with also post-war anti-nuclear things. but he reduced maxwell's
demon to a single molecule. so there's only one molecule. and the question is, which
side of the partition is it on? that led to the idea of
one bit of information. so shannon credited szilard's analysis of maxwell's demon for
the invention of the bit. for many years, people tried
to explain maxwell's demon by like the energy in the
demon looking at the molecule or the energy to open and close the door and nothing ever made sense. finally, ralph landau, one of the colleagues i mentioned at ibm, finally solved the problem. he showed that you can
explain maxwell's demon by you need the mind of the demon. when the demon open and closes the door, as long as it remembers what it did, you can run the whole thing backwards. but when the demon forgets, then you can't run it backwards. and that's where you get dissipation and that's where you get the
violation of thermodynamics. and so the explanation of
maxwell's demon is that it's in the demon's brain. so then ralph's call
colleague charlie at ibm then shocked ralph by
showing you can compute with arbitrarily low energy. so one of the things
that's not well covered is the big computers used
for big machine learning, the data centers, use tens
of megawatts of power. they use as much power as a city. charlie showed you can actually compute with arbitrarily low amounts of energy by making computers that can go backwards as well as forwards. and what limits the speed of the computer is how fast you want an answer and how certain you want the answer to be. but we're orders of
magnitude away from that. so i have a student, cameron, working with lincoln labs
on making superconducting computers that operate
near this landau limit that are orders of
magnitude more efficient. so stepping back to all of that, that whole tour was driven
by your question about life. right at the heart of
it is maxwell's demon: life exists because it can
locally violate thermodynamics. it can locally violate thermodynamics because of intelligence and
it's molecular intelligence. i would even go out on a limb
to say we can already see we're beginning to come to the
end of this current ai phase. so depending on how you count, this is, i'd say, the
fifth ai boom-bust cycle. and you can already, it's exploding, but you can already
see where it's heading, how it's going to saturate, what happens on the far side. the big thing that's not yet on horizons is embodied ai molecular intelligence. so to step back to this ai story, there was automation and that
was gonna change everything. then there were expert systems. there was then the first phase of the neural network systems. there've been about five of these. in each case, on the slope up, it's gonna change everything. each case, what happens
is on the slope down, we sort of move the goalposts and it becomes sort of irrelevant. so a good example is on
going up, computer chess was gonna change everything. once computers could play chess, that fundamentally changes the world. now on the downside, computers play chess. winning at chess is no longer
seen as a unique human thing but people still play chess. this new phase is gonna
take a new chunk of things that we thought computers couldn't do. now computers will be able to do, they have roughly our brain capacity, but we'll keep thinking
as well as computers. and as i described, while we've been going
through these five boom-busts, if you just look at the
numbers of ops per second, bits storage, bits of io, that's the more interesting one. that's been steady and that's what finally caught up to people. as we've talked about a couple times, there's eight orders of magnitude to go, not in the intelligence in the
transistors or in the brain, but in the embodied intelligence, in the intelligence in our body. - so the intelligent
constructions of physical systems that would embody the intelligence versus contain it within the computation. - right. there's a brain centrism
that assumes our intelligence is centered in our brain and in endless ways in this conversation, we've been talking about
molecular intelligence. our molecular systems do a deep kind of artificial intelligence. all the things you think of
as artificial intelligence does in representing
knowledge, storing knowledge, searching over knowledge,
adapting to knowledge, our molecular systems do. but the output isn't just a thought. it's us. it's the evolution of us. and the real horizon to
come is now embodying ai of not just a processor and a robot but building systems that
really can grow and evolve. - so we've been speaking
about this boundary between bits and atoms. so let me ask you about
one of the big mysteries of consciousness. do you think it comes from
somewhere between that boundary? - i won't name names, but if you know who i'm talking about it, it's probably clear. i once did a drive, in fact, up to the mussolini-era
villa outside torino in the early days of what
became quantum computing with a famous person who
thinks about quantum mechanics and consciousness. and we had the most
infuriating conversation that went roughly along the lines of consciousness is weird, quantum mechanics is weird, therefore quantum mechanics
explains consciousness. that was roughly the logical process. - and you're not satisfied
with that process. - no, and i say that very
precisely in the following sense. i was a program manager
somewhat by accident in a darpa program on quantum biology. and so biology trivially
uses quantum mechanics that were made out of atoms. but the distinction is
in quantum computing, quantum information, you need quantum coherence and there's a lot of muddled thinking about like collapse of the wave function and claims of quantum computing that garbles quantum coherence. you can think of it as a
wave that has very special properties, but these
wave-like properties. and so there's a small set
of places where biology uses quantum mechanics
in that deeper sense. one is how light is converted
to energy in photo systems. it looks like one is olfaction, how your nose is able to
tell different smells. probably one has to do
with how birds navigate, how they sense magnetic fields. that involves a coupling
between a very weak energy with the magnetic field coupling
into chemical reactions. and there's a beautiful system. standard in chemistry is
magnetic fields like this can influence chemistry, but there are biological
circuits that are carefully balanced with two pathways
that become unbalanced with magnetic fields. so each of these areas
are expensive for biology. it has to consume resources
to use quantum mechanics in this way. so those are places where we know there's quantum mechanics in biology. in cognition, there's just no evidence. there's no evidence of anything
quantum mechanical going on in how cognition works. - consciousness. - i'm saying cognition, i'm
not saying consciousness. but to get from cognition
to consciousness... so mcculloch and pitts
made a model of neurons. that led to perceptrons that then through a couple boom-busts
led to deep learning. one of the interesting
things about that sequence is it diverged off. so deep neural networks
used in machine learning diverged from trying to
understand how the brain works. what makes them work, what's emerged is it's a really interesting story. this may be too much of a technical detail but it has to do with
function approximation. we had talked about exponentials, a deep network needs
an exponentially larger shallow network to do the same function. and that exponential
is what gives the power to deep networks. but what's interesting is
the sort of lessons about building these deep architectures and how to train them have
really interesting echoes to how brains work. and there's an interesting conversation that's sort of coming
back of neuroscientists looking over the shoulder
of people training these deep networks, seeing interesting echoes
for how the brain works, interesting parallels with it. and so i didn't say consciousness, i just said cognition. but i don't know any experimental evidence that points to anything in neurobiology that says we need quantum mechanics. i view the question about
whether a large language model is conscious as silly, in that biology is full of hacks and it works. there's no evidence we have
that there's anything deeper going on than just this
sort of stacking up of hacks in the brain. - and somehow consciousness
is one of the hacks or an emergent property of the hacks. - absolutely. and just numerically,
i said big computations now have the degrees
of freedom of the brain and they're showing a
lot of the phenomenology of what we think is properties
of what a brain can do. and i don't see any reason
to invoke anything else. - that makes you wonder
what kind of beautiful stuff digital fabrication will create if biology created a few
hacks on top of which consciousness and cognition, some of the things we love
about human beings was created, it makes you wonder what kind of beauty in the complexity can create
from digital fabrication. - there's an early peak at that which is, there's a misleading term
which is generative design. generative design is where
you don't tell a computer how to design something. you tell the computer
what you want it to do. that doesn't work. that only works in limited subdomains. you can't do really complex
functionality that way. the one place it's matured
though is topology optimization for structure. so let's say you wanted to
make a bicycle or a table. you describe the loads on it and it figures out how to design it. and what it makes are beautiful,
organic looking things. these are things that look
like they grew in a forest and they look like they grew in a forest 'cause that's sort of
exactly what they are. they're solving the ways
of how you handle loads in the same way biology does. and so you get things that
look like trees and shells and all of that. and so that's a peak at this transition from we design to we teach
the machines how to design. - what can you say about, 'cause you mentioned
cellular automata earlier, about from this example you just gave and in general the
observation you can make by looking at cellular automata that from simple rules and
simple building blocks can emerge arbitrary complexity. do you understand what that is? how that can be leveraged? - so understand what it is is
much easier than it sounds. i complained about turing's machine making a physics mistake, but turing never intended it
to be a computer architecture. he used it just to prove
results about computability. what turing did on what is
computation is exquisite, is gorgeous. he gave us our notion of
computational universality. and something that sounds deep and turns out to be trivial is it's really easy to show almost everything is
computationally universal. so norm margolis wrote a
beautiful paper with tom toffoli showing in a cellular automata world is like the game of life where
you just move tokens around. they showed that modeling
billiard balls on a billiard table with cellular automata
is a universal computer. to be universal, you
need a persistent state, you need a non-linear
operation to interact them, and you need connectivity. so that's what you need to show
computational universality. so they showed that a ca
modeling billiard balls is a universal computer. chris moore went on to
show that instead of chaos- turing showed there're
problems in computation that you can't solve that, that they're harder
than you can't predict. they're actually in a deep reason. they are unsolvable. chris moore showed it's very
easy to make physical systems that are uncomputable, that
what the physics system does, just bouncing balls and surfaces, you can make systems that
solve uncomputable problems. and so almost any
non-trivial physical system is computationally universal. so the first part of the
answer to your question is, this comes back to my comment
about how do you bootstrap a civilization? you just don't need much to
be computationally universal. there isn't today a notion of like fabricational universality
or fabricational complexity. the sort of numbers i've been giving you about you eating lunch
versus the chip fab, that's in the same spirit
of what shannon did. but once you connect
computational universality to fabrication universality, you then get the ability to
grow and adapt and evolve. - because that evolution
happens in the physical space? - and so that's why, for me, the heart of this whole
conversation is morphogenesis. so just to come back to that, what turing ended his sadly
cut short life studying was how genes give rise to form. how the relatively, in effect,
small amount of information in the genome can give
rise to the complexity of who you are. and that's where what resides is this molecular intelligence, which is first how to describe you, but then how to describe you such that you can exist
and you can reproduce and you can grow and you can evolve. and so that's the seat of
our molecular intelligence. - the maker revolution in biology. - it really is. it it really is. and that's where you can't
separate communication, computation, and fabrication. you can't separate computer
science and physical science. you can't separate hardware and software. they all intersect right at that place. - do you think of our universe as just one giant computation? - i would even kind of
say quantum computing is overhyped in that there's a few things quantum computing's gonna be good at. one is breaking cryptosystems, what we know how to
make new cryptosystems. what it's really good at is
modeling other quantum systems. so for studying nanotechnology,
it's gonna be powerful, but quantum computing is not going to disrupt and change everything. but the reason i say that
is this interesting group of strange people who helped
invent quantum computing before it was clear anything was there, one of the main reasons they did it wasn't to make a computer
that can break a cryptosystem. it was, you could turn this backwards, you could be surprised quantum mechanics can compute or you can go
in the opposite direction and say if quantum mechanics can compute, that's a description of nature. so physics is written in terms of partial differential equations. that is an information technology
from two centuries ago. the equations of physics are not, this will sound very strange to say, but the equations of physics, schrodinger's equations
and maxwell's equations and all of them, are not fundamental. they're a representation of physics that was accessible to us in the era of having a pencil and a piece of paper. they have a fundamental problem which is if you make a
dot on a piece of paper, in traditional physics theory, there's infinite information in that dot. a point has infinite information. that can't be true because information is a fundamental resource
that's connected to energy. and in fact, one of my favorite questions
you can ask a cosmologist to trip them up is ask, is information a conserved
quantity in the universe? was all the information
created in the big bang or can the universe create information? i've yet to meet a cosmologist
who doesn't stutter and not clearly know how to handle that existential question. but sort of putting that to a side, in physics theory the way it's taught, information comes late. you're taught about x, a
variable, which can contain infinite information, but
physically that's unrealistic. and so physics theories have
to find ways to cut that off. so instead, there are a number of people who start with a theory of the universe should start with
information and computation as the fundamental resources
that explain nature. and then you build up
from that to something that looks like throwing
baseballs down a slope. and so in that sense, the work on physics and
computation has many applications that we've been talking about. but more deeply, it's
really getting at new ways to think about how the universe works. and there are a number of
things that are hard to do in traditional physics
that make more sense when you start with
information and computation as the root of physical theory. - information and computation being the real fundamental
thing in the universe. - that information is a resource. you can't have infinite
information in finite space. information propagates and interacts, and from there you erect
the scaffolding of physics. now it happens, the words i just said look a lot like quantum field theories, but there's an interesting
way where instead of starting with differential equations to get to quantum field theories and quantum field theories,
you get to quantization. if you start from computation information, you begin sort of quantized
and you build up from there. and so that's the sense
in which absolutely i think about the universe as a computer. the easy way to understand that is almost anything is
computationally universal. but the deep way is it's
a real fundamental way to understand how the universe works. - let me go a little bit to the personal and with the center of bits and atoms. you have worked with, the
students you've worked with, have gone on to do some
incredible things in this world, including build super
computers that power facebook and twitter and so on. what advice would you
give to young people? what advice have you given them how to have one heck of a great career? one heck of a great life? - one important one is if
you look at junior faculty trying to get tenure at a place like mit, the ones who try to figure
out how to get tenure are miserable and don't get tenure. and the ones who don't
try to figure it out are happy and do get it. you have to love what you're
doing and believe in it and nothing else could possibly be what you wanna be doing with your life. and it gets you outta bed in the morning. and again, it sounds naive, but within the limited
domain i'm describing now of getting tenure at mit, that's the key attribute to it. and in the same sense, if you take the sort of outliers students were talking about, 99 out
of 100 come to me and say your work is very fascinating. i'd be interesting to work for you. and 1 out of 100 come and say you're wrong, here's your mistake. here's what you should have been doing. and they just sort of say i'm here and get to work. i don't know how far this resource goes. i've said i consider the
world's greatest resource this engine of bright inventive people of which we only see a
tiny little iceberg of it. and everywhere we open these labs, they come out of the woodwork. we didn't create all these
educational programs, all these other things i'm describing. we tried to partner
everywhere with local schools and local companies and kept
tripping over dysfunction and find we had to create the environment where people like this can flourish. and so i don't know if this is everyone, if it's 1% of society,
what the fraction is, but it's so many orders
of magnitude bigger than we see today. we've been racing to keep up with it to take advantage of that resource. - something tells me it's
a very large fraction of the population. - the thing that gives me
most hope for the future is that population. once a year, this whole lab network meets and it's my favorite gathering. it's in bhutan this year because it's every body shape, it's
every language, every geography, but it's the same person
in all those packages. it's the same sense of bright,
inventive joy and discovery. - if there's people listening to this and they're just overwhelmed
with how exciting this is, which i think they would be,
how can they participate, how can they help, how can they encourage
young people or themselves to build stuff, to create stuff? - that's a great question. this is part of a much
bigger maker movement that has a lot of embodiments. the part i've been involved
in, this fablab network, you can think of as a curated
part that works as a network. so you don't benefit in a
gym if somebody exercises in another gym. but in the fab network,
you do in a sense benefit when somebody works in another network, another lab in the way it
functions as a network. you can come to cba.mit.edu
to see the research we're talking about. there's a fab foundation
run by sherry lassiter at fabfoundation.org. fab labs io is a portal
into this lab network. fabacademy.org is this
distributed hands-on educational program. fab.city is the platform
of cities producing what they consume. those are all nodes in this network. - so you can learn with fab academy and you can perhaps launch or help launch or participate in launching a fablab. - and in particular,
from one to a thousand, we carefully counted labs. now we're going from a
thousand to a million where it ceases to become
interesting to count them. and in a thousand to the million, what's interesting about that
stage is technologically, you go to a lab not to
get access to the machine, but you go to the lab to make the machine. but the other thing interesting in it is we have an interesting collaboration on a fablab in a box. and this came out of a
collaboration with solidworks on how you can put a fablab in a box, which is not just the
tools but the knowledge. so you open the box and the
box contains the knowledge of how to use it as well
as the tools within it so that the knowledge can propagate. and so we have an interesting
group of people working on... the original fablabs,
we'd have a whole team to get involved in the
setting up and training. and the fab academy is a real in-depth, deep, technical program in the training. but in this next phase,
how sort of the lab itself knows how to do the lab. we've talked deeply about the
intelligence in fabrication, but in a much more
accessible one about how the ai in the lab in effect
becomes a collaborator with you in this nearer term to help get started. and for people wanting to connect, it can seem like a big
step, a big threshold, but we've gotten to thousands of these and they're doubling exactly that way, just from people opting in. - and in so doing, driving towards this kind of idea of personal digital fabrication. - and it's not utopia, it's not free, but come back to today, we
separately have education, we have big business, we have startups, we have entertainment, each of these things are segregated. when you have global
connection to one of these local facilities, in that, you can do play and art and education and create infrastructure. you can make many of
the things you consume. you could make it for yourself. it could be done on a community scale, it could be done on a regional scale. i'd say the research we
spent the last few hours talking about, i thought was hard. and in a sense, it's non-trivial, but in a sense, it's
just sort of playing out, we're turning the crank. what i didn't think was hard is if anybody can make
almost anything anywhere, how do you live, how do you learn, how do you work, how you play, these very basic assumptions
about how society functions. there's a way in which it's
kind of back to the future in that this mode where
work is money is consumption and consumption is shopping by selecting is only a kind
of a few decade-old stretch. in some ways, we're getting back to a sami village in north
norway is deeply sustainable. but rather than just
reverting to living the way we did a few thousand years ago, being connected globally, having the benefits of modern society, but connecting it back to older
notions of sustainability, i hadn't remotely anticipated
just how fundamentally that challenges how a society functions and how interesting and how hard it is to figure out how we can make that work. - and it's possible that
this kind of process will give a deeper sense
of meaning to each person. - let me violently agree in two ways. one way is this community-making crosses many sensitive
sectarian boundaries in many parts of the
world where there's just implicit or explicit conflict, but sort of this act of
making seems to transcend a lot of historical divisions. i don't say that philosophically. i just say that as an observation. and i think there's
something really fundamental in what you said, which is deep in our brain is
shaping our environment. a lot of what's strange about our society is the way that we can't do that. the act of shaping our
environment touches something really, really deep that gets
to the essence of who we are. that's, again, why i say that in a way the most important thing
made in made in these labs is making itself. - what do you think, if the shaping of our environment
gets to something deep, what do you think is
the meaning of it all? what's the meaning of life, neil? - i can tell you my insights
into how life works. i can tell you my insights in
how to make life meaningful and fulfilling and sustainable. i have no idea what
the meaning of life is, but maybe that's the meaning of life. - the uncertainty, the confusion, because there's a magic to it all. everything you've talked about, from starting from the basic
elements with the big bang that somehow created the sun that somehow said f you to thermodynamics and created life and all the ways that you've talked about from ribosomes that created the machinery
that created the machine, and then now the
biological machine creating through digital fabrication, more complex, artificial
machines, all of that. there's a magic to that creative process. and we notice, we humans are smart enough to notice the magic. - you haven't said the s word yet. - which one is that? - singularity. i'm not sure if ray kurzweil is listening, if he is, hi ray. but i have a complex relationship with ray because a lot of the things
he projects i find annoying, but then he does his homework. and then, somewhat annoyingly, he points out how almost
everything i'm doing fits on his roadmaps. and so the question is, are we heading towards a singularity? i'd have to say i lean towards sigmoids rather than exponentials. - but we've done pretty
well with sigmoids. - sigmoids are things grow and they taper, and then there can be one
after it and one after it. i'll pass on whether
there's enough of them that they diverge. the selfish gene answer
to the meaning of life is the meaning of life is
the propagation of life. it was a step for atoms to
assemble into a molecule, for molecules to assemble
into a proto cell, for the proto cell to form, to then form organelles for
the organ cells to form organs, the organs to form an organism. then it was a step for
organisms to form family units, then family units to form villages. you can view each of those as a stack in the level of organizations. you could view everything
we've spoken about as the imperative of life, just the next step in
the hierarchy of that. and the fulfillment of
the inexorable drive of the violation of thermodynamics. i'm an embodiment of the
will of the violation of thermodynamics speaking. - the two of us, having an old chat. and so it continues, and
even then the singularity is just a transition up the ladder. - there's nothing deeper
to consciousness than it's a derived property of
distributed problem solving. there's nothing deeper
to life than embodied ai in morphogenesis. so why so much of this
conversation in my life is involved in these fablabs and initially it just started as outreach. then it started as keeping up with it, then it turned to it was rewarding. then it turned to we're
learning as much from these labs in as goes out to them. it began as outreach, but now more knowledge is
coming back from the labs than is going into them. and then finally it ends with what i described as
competing with myself at mit but a better way to say that
is tapping the brain power of the planet. and so i guess for me personally, that's the meaning of my life. - and maybe that's the
meaning for the universe too. it's using us humans and our
creations to understand itself. in a way, it's whatever
the creative process that created earth, it's
competing with a self. - so you could take
morphogenesis as a summary of this whole conversation
or you could take recursion, that in a sense, what
we've been talking about is recursion all the way down. - and in the end, i think this
whole thing is pretty fun. it's short, life is, but it's pretty fun. and so is this conversation. i mentioned to you offline, i'm going through some
difficult stuff personally. and your passion for what you
do is just really inspiring and it just lights up my
mood and lights up my heart. and you're an inspiration for, i know, thousands of people that
work with you at mit and millions of people across the world. it's a big honor that you
would sit with me today. this was really fun. - this was a pleasure. - thanks for listening
to this conversation with neil gershenfeld. to support this podcast, please check out our
sponsors in the description. and now let me leave you with
some words from pablo picasso. every child is an artist. a challenge is staying an
artist when you grow up. thank you for listening and
hope to see you next time.