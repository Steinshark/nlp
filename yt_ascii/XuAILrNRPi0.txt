previously i showed you how you can create a decorator in python and i'm going to be leaving a link in the description box down below to that video in case you're curious to understand how to create it from scratch but in this lesson we're going to cover how we can add arguments to that decorator so we're going to customize it much more than we did in the previous video so for this example we're going to import from funk tools the wraps and we will also import from typing the callable type so the decorator we'll be creating here is a decorator that will repeat any function the given amount of times so it's going to take the number of type integer and depending on which number we insert we want that function to be run that many times now inside here we'll add a doc string and we'll type in repeat function call x amount of times below that we can type in depth decorator so we can add the function which should be a callable function that's the only requirement for this to work now inside the decorator we can go ahead and add the add wraps so we make sure that we actually get the correct details for the correct function we want to make sure that we get the correct doc string and of course the correct function name so we'll type in wraps and we want to wrap the function that's the data we want to get back when we try to retrieve the function name or the function docstring and we can create the wrapper inside here so the wrapper is going to take arguments and keyword arguments as always and then we can write whatever code we want inside here so if you are already familiar with decorators you'll see that all we did is add an extra layer to our decorator so now we have the usual decorator inside here except this time we have an external function that actually allows us to pass in an argument and to use it we can just create something such as value is equal to none initially and for underscore in range of times we're going to repeat that function the given amount of times so value will equal the function with the arguments that we pass in and the keyword arguments that we pass in and this should be number and not times but if we fix that it should work fine then we want to return the value at the end of all the code you run in the wrapper you want to return the function with the arguments and the keyword arguments in case it returns a value if it doesn't return a value it's going to return none just like every default function you create now funny enough we need to return also the wrapper without any function calls and we also need to return the decorator so there's a lot of returning being done inside this decorator and that's just the syntax we need to follow in case we want to include our own parameters and you can even customize this a bit more you can say message for example add a string and at the end of the execution of the code in the wrapper you can print that message in case you want to so now we have a decorator that repeats a function x amount of times and we can test this out by creating a function but first let's use this decorator by typing in at repeat and we need to provide a number and a message so we will repeat it three times and the message will say done that we can create that function that says function one and it will just print hello now we can also call this by creating our if name is equal to main check and calling function one now if we run this we will get hello printed three times with the custom message at the bottom so all of this code was executed when we called that function it managed to repeat that function with the given arguments and the keyword arguments and it managed to print the message for returning the value which is going to be none in this scenario so even if we print this we will get none as a return type but in the case that this did take some values such as a of type integer and we decided to return a for example so we type in return a we would be able to insert it into the function we can type in 10 and it would give us that value back from the function call because we returned the value if we decide not to return that value we would get done back no matter what we did and we don't want that because even if the functionality works we're not getting the function back that we want to get back so return that value to make sure everybody's happy and that you get the value back from your function and it was that simple to add some arguments and parameters to your decorator but do let me know in the comment section down below in case i missed something i'd be happy to be enlightened with that being said as always thanks for watching and i'll see you in the next video