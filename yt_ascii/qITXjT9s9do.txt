hi everyone in this episode we're going to be adding support for collisions and jumping job character let's start by adding in a few obstacles so i'll just use unity standard prototyping assets for this dragon a couple of these cube prefabs just like so and we scale this randomly something like that should be fine and just for fun we can also add in a ramp and maybe some steps as well all right let me get that above-ground preferably then just organize the scene a little bit i'll make an empty game object and i'll just call this collisions and just drag all of these things under there alright then to enable collisions for our character we're going to want to either use the rigidbody or the character controller component for convenience sake we'll be using the character controller in this series because that gives us some information about where collisions actually occur and as an added bonus it can walk up steps when we created our character we made them with a height of 1.7 units so let's set our character's collider height to 1.7 and then we'll want to set the center on the y-axis to half of that so 0.85 and we also want to make the radius a little bit smaller i'll put it about 0.3 and it can maybe move this forward slightly on the z-axis all right opening up the player controller script will want to get a reference to our character controller so let's just write character controller can call that controller and then in the start method we'll just set that using getcomponent of type character controller i'll right now in our update method instead of using transform drop translate we're instead going to create a vector3 velocity which we'll set equal to transform at forward times current speed and we'll leave up time to tell the time and then to actually move the character with a controller move and pass in velocity times time dot delta time alright so if we save that and try it out now we should be able to move around and have our movement be constrained to collisions currently importantly there's no gravity being applied so once we run up this slope we never actually fall down let us rectify that so we can ob create a public float here for the gravity value we want to use gravity let's set that equal to say negative twelve by default and then we're also going to want a float that will store our velocity on the y axis so each frame will say velocity y plus equals x or delta time times gravity and then we'll include our velocity y in our velocity calculation by just saying plus vector three dot up multiplied by velocity y now we both want to reset velocity y when the character is standing on the ground so we'll say if controller dot is grounded then velocity y is equal to zero alright let's save that and try it out if we run up the slope now we do fall down and we also run up the steps and that works as well all right now one thing that i'd like to fix is that currently if we run into an obstacle you can see we're not moving anywhere but the animation is still playing so i'd like to make it so that if we're not actually moving then the character just stands still so the character controller has got a velocity variable which is what the controller's actual velocity is once you take collisions into account so now that we've moved the character we want to update our current speed variable to what the control is actual current speed is so remember that this current speed only worries about the x and z axes since we are calculating velocity y separately so we're going to say current speed is now equal to a new vector2 based on controller dot velocity dot x and controller dot velocity dot z and then we'll get the magnitude of this since this is the speed not the velocity now to figure out the actual animation speed percent we can say if we're running then that will be equal to current speed divided by the maximum run speed otherwise it will be the current speed divided by the maximum walk speed and animation speed descent should be 1/2 when the character is walking so we multiply this by 0.5 all right so let's save and test this out walking and running still work as normal but now if we move into a obstacle the animation stops plane okay next i'd like to add in jumping let's go to the top of the class and add in a new public float which we'll call our jump height let's say we're defaults you can jump one unit high then in the update method we can say if input dot a get keydown i'll use kiko dot space for my jump key just call a jump method so let's say avoid jump and then here we'll say if the controller is grounded then we first want to figure out the jump velocity that will allow us to reach our jump height so let's say float jump velocity now there is a kinematic equation that solves for this if you're not familiar with the kinematic equations i do have a short series on my channel covering those but for now i'll just write out the equation its square root of negative 2 multiplied by gravity multiplied by the jump height all right then we simply say velocity y is equal to jump velocity let's test this out so i can press spacebar to jump and if we just go into orthographic mode here we can use the gridlines to verify that it is jumping one unit high and let's just increase the jump height to 2 and not jumping unsurprisingly 2 units high so in real life of course if you jump once your feet leave the ground you don't really have much control over anything anymore but in our game the carriage can actually completely change direction while in the air so for again that's not necessarily a bad thing because it allows for more precise jumping and makes the character feel more responsive but it would be nice to have a slider so that we can sort of adjust to what extent the player can do this so let's create a public float called air control percent so since this is just a value from 0 to 1 i'm going to add the range attribute 0 1 we're going to be using this value to modify the smooth time for the character's rotation and for the character's current speed so we'll create a method returning a float but something i get modified smooth time that'll take in a float called smooth time in here we can say if controller dot is grounded then we're just going to return the smooth time without any modification so just return smooth time if the controller is in the air however then we're going to want to return smooth time divided by air control percent so just explain this if air control percent is one then obviously there's no modification but say if air control percent is reduced to 0.5 then the smooth time will be doubled meaning it will take twice as long for the character to react to the input and so the player has less control over the character while the characters in the air of course if air control percent is zero then we don't want to divide by it because that's an error so we'll have to drill a check for that if air control percent is equal to zero then we want to return the maximum possible value for the smooth time so we just return float max value all right then whenever we do a smooth operation we will pass our smooth time through the get modified smooth time method all right let's do the same thing for smooth damp angle over here well this is going all the way off my screen but just like that is good so let's save and that slider should pop up now at air control percent zero you can see that once i jump i have no control over my character and i just have to wait until he lands to regain control if i move this up to one then i once again have full control of the character in the air and at any lower value it's obviously just somewhere in between the last thing that i want to do in this episode is just organize the player controller class a little bit better you have a method called move which takes in a vector to input direction as well as a bool called running and i'm just getting to cut all of this stuff from the update method into the move method and in the update method will then call move and pass in input direction as well as a bool running which we need to create so can just grab that from over here paste that in there and pass it into the move method alright i seem to have spelt running with an excessive amount of n so i'll just remove one of those the animation stuff i'm going to remove from the move method and put inside of the update method so this is our input section over here and then we'll have a section over here for the animator alright so it's a little bit tidier now and we can leave it at that so until next episode cheers