i think the best possible future for all developers is where we use languages meant for specific problems and so this is why i have a little bit i i'm confused on the whole odin thing right where does odin fit in odin is definitely a language geared towards graphics but it's also a a gener a general purpose language at the exact same time and so my real question is how do i use that language where do i use it properly i'd like to talk more with ginger bill about the value of odin and is odin really going to be something that's actually shot as a generic language or is it going to continue to be more of like something that's expressly used in a more kind of niche graphics way because obviously it's an amazing language him and i discussed it it's super cool i think it's i think it has a lot i i i think it's genuinely great language but again it's just so the scope tends to be very narrow and so which i'm perfectly fine with by the way i think you should use narrow scope l angues right i think you should use naros scope languages 100% i do mean that like i think that zig is a very very well scoped language right zig is not trying to be a highlevel language zig is not giving you all the niceties of a highlevel language in some sense it's really trying to say hey we are a low-level language we are a systems level language and we are doing system levels like stuff this is what you should use us for and we are convenient and we have all the niceties of modern stuff but we are intentionally being very narrow and it feels delicious right that's why i think rust is going to have such a bad wp is because it doesn't have like that as part of its mission right rust there's not really like a there's not really like this is what rust really should be used for and people just understand it instead people just use rust for everything and then they get burnt by it and you see a lot of people that get really kind of like like emotionally bruised by it and then they hate it and so it's like that's not good because rust is really great for certain activities i think rust is fantastic for certain activities and you're absolutely also right haskell is actually useless like that's why you shouldn't like i don't think you get a w at all by taking goang turning it into wum and running it on the client like i don't think that's a w i do not think that's a w and i do not think you should do that i think you're just asking yourself for a bunch of pain how would that be a w people do that kind of stuff well that i mean isn't that web assembly like did i not just actually describe web assembly text savvy travy that means i also just caught astray to rust doing the exact same thing to any language doing the exact same thing right i just i'm not convinced yet that it's it's fantastic wasm is a w i'm not sure if wms is a w yet like i understand there's niche cases where it's just like we've built we've built this amazing graphic program and now we need to shove it into the into the browser let's go but wm is also like really difficult to debug wasm is not great for actually using right like if you were to build an application from the ground up using wm as like your single source of doing it i think it's like that's tough but if you were to use something else right whatever graphics program you're developing all that you develop it it's fantastic then you transport it and put it into web assembly i think that that is fantastic then that seems to be really grand it's just the other way just seems really painful like i don't know why you know what i mean wm's an output target i get that and then there's also like wasm for the back end which i know wasm is is almost in some sense taking over docker and that's kind of really interesting i don't know for those that are kind of following it but like fermon effectively is that you're you're using you're using wm instead of docker which is actually a really really really really interesting idea wasm can be really nice for the back end yeah it wasn't aware of that well think about it for a second if you have a proper environment that can run all of your basic operations you could really have any language be compiled into wasm and then it just runs right you can kind of now start to think of your your entire system you know wasm aware of that you know what i mean it's like it's pretty cool like i actually am i could buy that as a cool kind of target you do kind of lose some of the performance of why like why are you using rust if you're going to run run it in wm right so i understand like the counter arguments just like yeah i took the whole i did all this time to just power out this really amazing application now we're running it in wm which is not as good as if i just would have built it in the first place you know but it also makes things like what's it called there's a lot of serverless potentials with them wms wm is just really really interesting i i don't know where to go with that one yet i'm very curious on seeing where that where where that ends docker's gross spawn the old tail works on my machine i mean docker isn't that gross you i mean you i hate to on docker can i can i can i just c can i get a second hey can i get a second hey can can can a man get a second i i hate to  on docker because i also was developing before docker or anything like that and that also sucked okay and so no docking to docker was pretty neat okay like that's pretty cool the fact that i can just spot up a docker image toss that crap on fly iio and it's just like like that's pretty cool i'm pretty i am pretty happy about that right containerization is pretty neat but people that build your development environment around containerization first that i i hate it okay i hate it like there is nothing worse than when people try to make it like like your development environment should be through a docker container it's just like no you're a horrible person and what you've done is the spawn of satan and i'm absolutely angry at it okay don't do that okay don't do that it is just the worst thing in the universe containerization just encourages poor environment setup practices in my opinion yeah but that that i mean but that's also unfair i mean it's it's unfair in the sense that you can also make a great one right have you seen the average person's setup to begin with it also allows for the possibility that someone can have a container that they pull that has a good setup i love the idea of dev dockers but in practice yeah it's it's it's not it's not real i wouldn't use it it sucks it sucks i'm of the opinion that i think languages in niche uses are amazing i really like javascript i think javascript's a pretty good language for front ends i actually do think lua is fundamentally better for for building front ends just because it's simpler you can't do as much and you realize like you don't you don't need to bring a cannon to hunt fodder you know or to hunt rabbits you know what i mean and so i think there's something really awesome about lua lua better for building front ends absolutely i think if you if you don't if you haven't used lua enough and you've haven't built a front end yourself then i think that you're kind of you're wrong you you just don't know right you're like that one guy that said htx is all these things but it it was clear you've never used it i think i think lua would have been the better choice cuz it keeps things really really straightforward really really simple and it's really easy to build a nice ui set of items inside of it lu is the best thing ever yeah it's it's very it's very very wonderful people that haven't used lua had just have no idea how nice it really is and once you use that versus javascript it's hard to describe lu's biggest downfall as honestly one-based indexing which just makes everything hard like whenever i had to do one based indexing i i really have to struggle like i have to like you know but that's the thing is it's so rare you do indexing so often that's not like the thing you're thinking about especially in oh it's you're absolutely right it's skill issues absolutely one-based indexing is what makes it fun we might defi we we might define fun a slightly different here but one based indexing is really just difficult because my brain can't you know my brain can't quite like do it right every single time and anytime i do that i have to like i have to write a test whenever i'm doing that right and whenever i'm trying to write some complex piece of code that involves actual manual iteration that i can't just like give me the iterator like wr ey pairs just give me the iterator i can't do that so that is a it's like its own difficult you know thing just confirm tdd well that feels a little offensive okay coming out here coming out out here swinging like that i think we need banned i love tdd oh my goodness okay we're not doing this we're not doing this today either way i really think it was a true miss in the front-end world having javascript versus lua and i think there's a lot of people that have never used lua longer than 3 hours but they have really strong opinions about lua i would say that until you've used lua for like a 100 hours it's really hard to know how good it is as a language there you go it's my take is l greater than python i haven't used python enough to have a really solid opinion about python i've only used python like maybe maybe 100 hours over the last 10 years right so it's like i never use it enough to be like great at python but i already have like two loosey goosey languages in my head do i really want yet another loose goose language in my head do i need to get three out of four of the big prominent loosey gooy languages i don't know js ecosystem is the real culprit i don't think so i think the expressiveness i think the expressiveness of javascript is its own problem i think it causes what are lucy goosey languages javascript python lua ruby i'm sure there's other one elixir may also fall into this category but it's just different is gleam a loose is is gleam a loose gooser l is very very concise strongly typed lucy goosey does not equal jsb php lucy goosey this is true this is true very very different i thought gleam had types to it yeah i i thought gleam had types to it i was very confused by that statement gleam has o camel like types okay yeah that's what i thought yeah your mom's loosey goose okay calm down calm down calm down gleam is not loose all right anyways just some thoughts on languages and things when you know what you're doing js is awesome that's no no no no no no no you can't say that every language is great when you know what you're doing okay that's not a statement that's not that's water's wet i get it you can only you cannot compare a language into itself any language you get good at you will find awesome and easy to use any language okay people build roller coasters in excel okay again you can do it you got to compare and contrast them based off experience okay i've built a lot of uis with javascript that's probably my most used language in the world is javascript i've built a lot of uis in vim which contain a lot of the exact same problems as building uis and you have to use lua and i just find it way simpler i find that i can go way faster and guess what the apis and vim probably aren't even as good as the apis in the browser you know they're just not you know there you go and so it's just very interesting comparing them to each other vim apis are funny they're kind of funny you know what i mean how would you rate yourself designing ui i'll give myself a 69 if water is wet and i'm 70% water am i 70% wet yes do you think javascript is better to learn than typescript even for today's employment i would learn typescript because people seem to be really horned up about it but i would use js do in practice with typescript types that's what i like i've been a big fan of that development oh man so good cli tools with no build step oh my good oh my goodness it's so good dude it's just so good no disc folder no ts node none of that garbage oh my goodness it is so good y'all it's so good it makes it makes the type so nice