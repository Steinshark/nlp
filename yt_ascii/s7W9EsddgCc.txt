hello to linkedin george ask how can we convince the company to change the c++ version for example like from 17 to 20 what is the most important argument in your opinion this depends on your use case but but in general do something optimization like meaning this is now faster than that when you switch from 7 to 20 because optimization of performance is always the the key argument but once more it depends on your use case when you are for example do a lot of concurrency c++ 20 is way better when you do a lot of financial things you may be a big friend of cortines so it depends when you play with generics go to concepts this makes a code way way more readable way way more understandable but in general it depends on your use case but anyway 20 is at least as big as 11 there are many reasons to switch to 20 i think one of the arguments also could be that code generation gets better and other things like when when when you need to communicate this up chain features might not be the big thing because you know i mean except from from bigger things which you know modules if you can utilize modules if modules can make your builds faster i think that modules are great argument to actually say our build time gets better and then that raises productivity and so that would be a very strong argument for people to actually put this through the company but modus have now day issue how will you port them from one platform to the other maybe on windows you are fine so i see this cri modules give a 20 class all of them want to know about modules afterwards i said it's a little bit too early for that so i see modes critical 23 import to is great but modules in 20 we need tool support yeah which is coming depends on on like there there the question is not that easy answerable when you don't know like what what tooling you use and what what platforms you target like are you an embedded are you under windows if you're under windows only i think the the argument for modules is already there exactly and to you know make a experiment with clang and dcc to see what you actually can achieve and also like you know try to to argue that like getting the standard library as a module in in 23 is already available on your fingertips and windows just totally easy and to to move to the new standard you only compile it once and then you can use it and of course the build times are unbelievable around 10 times faster when you switch from an include based library to a modu based okay by the way these are not my numbers these are the numbers from danela and b true has done a lot of work in that field um