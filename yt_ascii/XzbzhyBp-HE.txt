um all right here we go in this video i'm gonna tell you the story of why i switched okay this guy already has a better voice than me we're not even we're not even like a minute into it and his voice is clearly better than mine but i will say i don't like apple earpods okay i don't like apple earpods i don't i don't like the little danglers coming out your ears and more so i don't like interacting with co-workers that use them okay this is why this is why okay hear me out on this one is that you walk up to your co-worker and you're like hey y'all bill okay he's like yeah or he does this yeah you know the ceremonious take it out move it away from your ear move and then you can talk oh my goodness oh my goodness just hate it right i just hate it bill off bill you know what i mean just hate it so i have this thing about these things okay i don't like i don't like them okay i don't like i don't like him okay huge bill just from javascript slash typescript to rust okay and hopefully it will help you make a more informed decision let's do at the end of the video i'll also reflect on that decision and talk about whether switching to rust was a mistake or not if you're already sold on rust and want to get a better understanding of it yeah then make sure to get your free rust cheat sheet let's get rusty.com cheat sheet before i ever learned russ i was a web and mobile developer for about five years he could just said he was a soy boy for five years like that's all you gotta say you don't even need to use all those words you know we all understand we all understand every time i make that joke by the way i swear my youtube video gets inundated with people being like you know i find the term soy boy or soyda very problematic see here's the reason why is that if you look at [music] it goes on for like five minutes and you're just like oh my guy have you been on the internet you know you know people say things that they like they don't necessarily you know like it it's called it's like you know you know stop being such a silly boy and get over it you know what i mean i know i'm turning right because i'm screaming i started my software development career working at a startup where we built a web app using node.js for the back end and angular version one no god yeah no i heard angular one please no no no no those were the dark years of web development but luckily man it doesn't sound like he's on jquery the man doesn't sound like he used moo tools the man the man's program for i okay there were some dark ears out there okay there were some dark years out there in the programming world mutuals was divine eventually react came along by that time i was working for tableau a business intelligence and data visualization company that and tableau can go tab blow me goodness gracious is that thing annoying have you ever used tableau i just should learn how to use it honestly it seems like it could actually be really cool but you know every single time i know got them good every time i use it i just feel like i just need to make a sagandhi's joke instead you know what i mean ended up being acquired by salesforce besides getting to work with react and react native i was also introduced to typescript at that job which blew my mind having the flexibility of javascript coupled with a type safety layer allowed us both to quickly prototype and ship maintainable production ready code it felt like going from building a house with plato to building a house with brick and mortar one of the big takeaways one took 19 times longer no i you know i i do agree once you go onto the typescript train it's really hard to go back it's true it's really hard to go back okay it is really hard now is typescript type safe i mean that's up to the eye of the beholder you know ways i got from this experience was seeing the value of a strongly typed type system at this i'm gonna give it a mediocre i mean maybe they could do they you know typescript could probably use a little bit more time at the gym and then we can call it a strongly typed one you know it's time my team also maintained a few other services written in different languages such as copper and because we had services written in different languages there was some duplication between the code bases we explored different ideas for getting rid of the duplication and one of the ideas was to rewrite the common logic in a language that could be integrated in all our code bases which included back-end services and front-end clients here girls someone bring out the someone bring out the javascript meme or it's just like the one teapot pouring into all the cups oh what is that ml javascript what is that back in javascript here it comes here it comes one language that was being considered was rust this was the first time i ever what okay you got me i did not i thought it was gonna be javascript i thought we're going in the javascript direction and because my team was considering using it and the most senior engineers on my team were enthusiastic about the language i decided to look enthusiastic also means hey what'd you do this weekend oh wow you're working on a project did you write it in rust oh you don't know let me tell you about rust it's i don't want to hear about your project so anyways this weekend what i was writing was rust into it myself the more i looked into rust the more excited i got about the language i tried to learn a low-level programming language before c plus plus to be specific and let's just say the experience was not enjoyable but i was optimistic about rust because develop i really don't like developing in c plus i'm afraid so i i real talk i am afraid that my learning of zig i'm gonna leave i'm gonna leave learning zig with some of the feelings i had for c plus you know what i mean one thing i love about rust real talk is that i don't actually like explicitly allocate or deallocate like i know what's happening the borrow checker is doing it for you blah blah blah blah blah the implicit drops all that kind of stuff and so i don't know i wonder if i'm gonna love zig or if i'm gonna just be like mediocre at sick like zig's like you know i don't know where i'm gonna land the person in the rust community seemed to really enjoy programming in rust after a few weeks of thought and investigation i decided to start learning rust myself and these are some of the reasons why first of all there was a lot of hype around rust senior engineers on my team were raving about it the stack overflow survey showed that it was the most loved programming language year after year and rewrite everything in rust memes were popping up all over the place but the thing my i still love that stack overflow is is always saying that russ is the most loved language stack overflow is the site in which people don't know how to program go to answer or to ask questions and their survey is showing that people love russ the most i'm not sure if there's like a conflict of interest there i'm not sure if this is actually some sort of subliminal messaging i don't know something about it doesn't smell right doesn't smell ripe because i didn't think russ was just hype or another shiny object because russ was solving painful problems in the systems programming space first of all rust of course solved the technical problem of memory safety without sacrificing performance mike you can see the reflection of his phone right here i just started noticing it over and over again the reflection of his phones going kershaw famously released a stat saying that 70 of their security vulnerabilities were caused by memory safety issues which just goes to show by the way did you know that there's this thing that came in in for intel i haven't been able to find it but i did read it in about 2015 2017 somewhere right in there intel released a paper that said that it was 56 or 65 percent of all time spent on servers they went and kind of analyzed were spent copying memory think about that for a second that's all they did copy memory yikes that even with the best engineers in the world manual memory management is extremely error-prone and telling developers to be better is not the solution but rust also solved another really important pain point rust is a low-level programming language for the 21st century managing dependencies building your code base and distributing your application is not straightforward in c plus rust on the other hand comes with a build tool and package manager hey dude just use cmake c makes great i find it offensive included and it has a public package registry called crates.io which is very similar to npm for someone like me coming from a web development background this made rust very accessible rust also has a few other things that make it very accessible namely great error messages great documentation and great it doesn't always have see people always talk about how great the error messages are i will agree that the low level error messages are really good in rust not all low-level messages are great and rust okay that's it we're doing it we're doing it don't have so i have some sort of rust in here don't i do i do i have some sort of rust in here i think i do do i have it in here yeah i do yes i do yes i do i can't take it now this is right next to me i'll take in just a moment but if you have like some sort of like trait foo that has like a function a bar you size and then you have a struct bar that has let's say say i don't know pub x why not that sounds good and then you like this imple foo barf this banded bam and you like this you're trying to do this you're you know you're trying to do this and you're trying to figure it out and you go okay well this one's pretty easy there's no self thing so you're like yeah that's easy and you go self yeah of course i forgot self oh look at this there it goes nice so if it's near if it's near it you can see it but sometimes oh nice okay never mind they must have they must have improved it okay now i feel like a stoopy person okay not too long ago that error message was really tr was really tricky okay that air max that error message was very very very confusing now it's really great okay so maybe russ does that okay rust has great error messages everybody i was just joking i was just joking russ is greater man free resources like the rustling book because russ was so accessible i thought to myself this is going to open up systems programming to a whole new demographic of developers and because of that it was going to be a game changer or low level program now those were some of the external factors that convinced me to learn rust but i also had a few personal reasons i saw that right it's not white noise it's green you know what i mean i'm not drinking white noise dog has had a lot of momentum and it was still the early stages of a big wave i thought to myself if i can catch this wave early it could have a big payoff in the future also as a i do agree this is actually the exact same reason why i learned how to use russ i think this is a really good call out which is being like always attempting to future proof yourself is a really good idea because here's the deal is that you don't know what the future is going to hold and so just being like a one-trick pony just only being say a react dev like if that's what you refer to yourself as is a react dev you've done something wrong you know what i mean like you you did the wrong thing you should always be trying to future proof yourself whether or not that's you learning react or just learning another ui frameworks felt solid something else right do anything right become more than just one person or become more than just one library you know andy you gotta you gotta do a little bit more even if it's all within your same wheelhouse web and mobile developer for many years i often times felt like i lacked a deeper understanding of low-level programming it was a gap in my knowledge a little void that i wanted to fill and rust gave me a chance to do that and i thought to myself once i have this understanding of lower level programming not only can i build websites and mobile apps but i could really build any type of software i want i can create embedded software can work on operating systems etc and this newfound knowledge would make me by the way just because you know russ you're not working on an operating system i just want you to know that now those are hard okay i've never actually i've never i i really wish i i really did not take the operating system class in college and i that's still like my biggest regret foreign yeah i mean my biggest regret i really wish i did because now i gotta go learn it on my own but to learn it on your own is like a gigantic time commitment and i'd rather go through a compiler book again which i'm probably going to i so i kind of have a couple things i want to create with zig and one of them is the compiler book and i don't want to do an os i feel like that's it's a lot of effort instead i want to do a compiler so that's what i'm gonna do zig compiler time more competitive in the job market lastly i thought to myself i already have a highly employable skill set with javascript typescript and react which i can always fall back to so looking back at the decision to learn rust was it a good one in short learning rust was definitely the right decision for me i now have a deeper understanding of computer science a valuable skill set and a rust's momentum is not slowing down anytime soon in fact it's just the beginning all right guys have you seen what the foundation's recently done i mean i really wish this would have at least ended with a sweet meme at the end where he would have been like yeah so was this the right decision i now know this i now know this i now know this and i still am using typescript for my full-time job was it worth it as that's it for this video let me know in the comment section down below what you think of this type of content in addition to my more technical videos and before you go make sure to get your free rust cheat sheet at let's get rusty.com forward slash cheat sheet with that said i'll see you in the next one let's go really good for someone to kind of hear these things because i think a lot of people they don't i think the hard part is that a lot of people use this phrase let's use the best tool for the job and that it doesn't mean they actually use the best tool they just say that phrase right we all say that phrase so that way when we go and use whatever tool we're going to use we just use the wrong tool right we use the tool we're most comfortable with best best tool for the job just simply men's best tool that i can use and that's that and so i do think it's really good to always be flexing your skills always going and just using different things so that at some point you know what's the best tool so let's kind of expand what he's taking and go a bit further what if you needed to have two different services written in different languages and then a third one for the front end and you want to be able to share a type system the problem is is that most people only think json exists this is a great place where protobufs could actually be used quite well and that way you'd have this nice interchange format and what you can kind of generate the types for each one including in javascript or typescript you can have actual typescript generation you could have it in you know go you can have it in rust and that way you have this kind of like nice experience in which you have one type system for every you know service that's in multiple languages so is it bad no it's actually really good to know that and you should try using that and that way when and how you want to use it you can go oh okay this was good oh okay this was bad it is what it is right i think it's i think just expanding your breadth of knowledge is like never the bad choice i know i feel like a broken record i say this too often you guys like i know okay where's the 2x prime there's no 2x but i wanted to show you one other thing do you see these do you see these pills these are fish fish oil pills okay it's a lot of fish oil okay i just want to let you know take your vitamins okay take your vitamins okay they're good for you the name is the vitagen