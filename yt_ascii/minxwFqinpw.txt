(laughing maniacally) - i've finally done it. 10 terabytes of memory and i
can download as much as i want. why? with this power, i can, i can tell you about our
sponsor, build redux. thanks build redux for
sponsoring this video. build redux creates pcs
for gamers who wanna win, and want high frame rates,
without breaking the bank. they're backed by a two-year
parts and labor warranty so you're covered, and you can click the link down below to start creating your pc today. when we saw this tweet from tj horner, first, we were like, "what?" and then we were like, "no." and then we were like, "well, maybe." using our unlimited google drive storage, we followed the instructions
on tj horner's blog, which you can check out down below, and upgraded this computer to
10 terabytes of system memory. behold! but wait, obviously you
can't actually download more dynamic random access
memory, it's a physical thing, looks a little something like this. so, what's going on here? well, if you look closely, you can see that while our
10 terabytes of cloud storage does get lumped into the
same pool as our dram, it's actually broken out
under a separate heading called system swap. "what is that?" you might ask. well, a swap space, or a page
file for our windows friends, is a small partition on
your ssd or hard drive that prevents the system
from crashing outright if you fill up your real memory. that sounds great, right? free ram! well, not exactly. and to understand why, we need to talk about memory hierarchy. directly on your cpu are your registers, that's where the processor stores what it immediately needs to work on, as well as your caches, which contain data that
the cpu is likely to need very soon or very often. most modern chips have
multiple tiers of these caches that get progressively
slower, but also larger. next up we've got your dram,
fast directly-attached storage that gives the cpu
quick access to the data for running programs and applications. then from there, we go
to ssds and hard drives, which are your long-term
permanent storage, your local network, and finally
the internet or the cloud. but the thing is, while windows gets all uppity
about knowing your role, linux actually a allows us to flip the traditional
hierarchy on its head by manually assigning cloud
storage as working memory, leaving only the question
of, how will that perform? so our system here has
only eight gigs of ram along with a high-performance
threadripper cpu. poor thing! tj's configuration uses
rclone to mount a google drive as a local storage space, where
we configure our swap space, effectively turning
google drive into memory. but then the moment we
set up our swap space, (button clicking) it tries to write to it and crashes (fingers snapping) immediately! now how am i supposed to
buy an overpriced pillow on lttstore.com? what happened here is that google drive straight up will not accept
random reads and writes. seemingly, this is to prevent customers from running programs off of google drive, which makes sense since that would be much
harder on their infrastructure than just basic storage. so, that didn't go very well, but it doesn't mean that we're done. we've got some ideas for
how to apply this concept in a way that could work. but first, let's explain what went wrong. running a program out of google drive, even if they allowed you to do it, would've been a terrible experience. and we can actually prove that with math. let's start by doing a quick
aida64 memory benchmark on our ryzen threadripper system, where it manages 44 gigabytes
per second of throughput. even compared to a premium
residential internet connection, that is 350 times faster. so, with google drive ram, you could be conceivably waiting six hours for gta v to load, which might not feel any
different, but it is. but what if we could move our storage a little closer to home. come with me. this is our high-speed
video editing server. and we can connect to it from just about anywhere in the office at 10 gigabit per second. that's still 1/35 the speed of ram, but, i mean, it might be usable, right? now, we're back on our machine and we're gonna run a different script. instead of mounting a
google drive partition as our swap space, we're gonna mount a one
terabyte partition of ssd space off of that server. there you go, swap it around. boop, one terabyte of swap! and... this is just a little script
that fires up a bunch of stuff, renders an image, and, oh, it's supposed
to launch a browser. whew! um, hmm! are we using our swap? we are! we're actually using it! it's working! it's working very slowly. you can see we've run
completely out of memory, 98.3% of our memory is full and we're writing only two mebibytes out of our one terabyte of swap. oh, has this crashed? and we're back. our best guess as to what happened there was that the processor
would've been queuing up a bunch of data to be
shuffled over to the memory. so it would've done that on
its limited eight gigs of ram. but because of how slow
that dumping process was, it actually ran out of memory
just trying to ready the data. so, the bottom line is, if we
try to write too much at once, the system hard crashes. we actually got as high as, i
think, 100 megabytes of swap when we kind of trickled data into it, so maybe there's a way to
make this configuration work. but the point stands that
it's pretty dumb, here's why. just like any car enthusiast will tell you there's more
to life than raw horsepower, the performance of a storage device cannot be represented by
bandwidth numbers alone. let's talk about latency. the cpu expects ram accesses
to happen quickly, like, (fingers snapping) nanoseconds quickly, with
aida64 pegging our system at about 62 nanoseconds. by comparison, our access
latency to whonix servers, somewhere in the neighborhood, of around one millisecond round trip. that is 16,000 times longer. so from the cpu's perspective, that's like your dad
popping out for 15 minutes to buy cigarettes and not
coming back for five months. and there are multiple
factors causing this. first is physical distance. system memory is just
inches from the cpu socket because the signal timing
has to be absolutely perfect to run at those kinds of speeds. following that up is the
fact that our server's ssds are much, much slower than dram. and then finally, our server communicates using the smb protocol, which doesn't handle random
reads and writes very well due to its high latency. but that doesn't mean that swap
space is completely stupid. why don't we try using it the way that it is supposed to be used, with a locally-attached ssd? switching over to local swap. almost out of real memory. wow, that's interesting. it actually doesn't hit
the real memory as hard because the swap is actually working. there we go, we've got
about a gig in the swap now. it works! buying more ram is officially stupid when you can just put a
big fat ssd in your system and use it as an overflow, right? well, no. i mean, it doesn't crash,
which is an improvement, but it's also much slower, especially multitasking like this. and if we just had 128
gigabytes of actual ram so we don't run out. now, what's interesting is, with our eight gig stick
and our swap space, our game still ran pretty well, despite the fact that our ram
was filled up to the brim. why is that? well, this is interesting. the operating system in the background still keeps the memory hierarchy in mind when we're running programs, and it'll actually keep the
most called-on programs, like say for example, our
actively running game, in ram and then it'll take other programs, like our web browser, and
relegate them to the swap space. so even if we were to fill up 128 gigs, it has so much wiggle room to move what we need
currently into our 128 gigs that the performance hit of
overutilizing your memory is very slight; unless you have one application like a scientific analysis application or something like that, that really needs all of it and more. one curious thing is that, even running the exact same
benchmarks with a swap file and with a massive amount of memory, we didn't see the same
amount of total usage. it was somewhere in the
neighborhood of 80 gigs when we had ram, but we're only seeing
about 12 gigs of usage. we've seen as high as 17
when we're using a swap. so, what gives? the thing is that, writing
to swap isn't much faster than just leaving stuff on
the disc in the first place, in fact, they're about the same. so there's no real reason
to write to the swap file when you could just leave
it there in the first place. another thing we're seeing is our processor being
slowed down in the meantime. it's called thrashing. and thrashing happens when the cpu is unable to
perform work efficiently because it's bogged
down moving data around in virtual memory. did it just crash?
- apparently. - whoops, well, apparently
it can crash in these cases. because our ram is filled up, we need to constantly read and write data between the ram and the swap space instead of spending that
time getting work done. that's a big part of
why many users recommend not using a swap space
at all, mention this. ram is relatively cheap these days and it's easy to add to your system. so for now, we're gonna
stick to buying sticks and putting it in our computers instead of trying to download it. or we could stick to buying something from our sponsor, squarespace. do you need a website, but
don't have the know how? squarespace makes it easy. there's a wide selection
of award-winning templates, and all are optimized for mobile, so they'll look great on any device. you can create members-only
content for extra revenue using squarespace's members area, and grow and engage your audience with their powerful and easy
to use email campaign system. if you ever need additional help, squarespace also offers webinars, a full series of help guides, or you can contact their
24/7 customer support via live chat and email. so get started today, and
head to squarespace.com/ltt to get 10% off your first purchase. clearly, ram's a pretty complex topic. so if you wanna learn more about it, check out our video about ram density and how manufacturers could
be trying to rip you off on your pc.