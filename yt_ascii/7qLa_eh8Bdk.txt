what is your advice regarding what all areas meet senior experience software engineers should learn and know other than programming language expertise yeah good question let's go back to this point that the a number of a number of points a couple of points actually specifically yeah and i have sort of sort of said yeah there's the language and then there's a thing outside there's the people outside there's a community there's the stuff there but i've also referred to ecosystems and the things around the languages so therefore it is understanding programming language expertise the programming language that you are working in if that the primary language is c plus plus and obviously having skills and that and improving your skills and that that's great but also what are the secondary languages that you use pay attention to those we have a real habit particularly in environments where we're not naturally using lots of languages to treat these secondary languages as somehow very secondary give them a bit of space you'll be surprised you know we mentioned python i i kind of turned up sometimes to c plus plus places i say okay what's everybody's second language hands go up it's python it's kind of everybody's favorite second language but only a few people really have grasped it and fully understood it and they'll probably write far better python code and even better c plus code i know one place back when see after c plus plus 11 was introduced that their goal was to send people on python courses so they would write better c plus 11. that idea is so even within the programming language space that idea of work was something else and get good at those other things that you think are the edge of what you do bring them into the center but again that's still not the whole picture beyond programming language expertise understand things about architecture we are very it's very easy to get drawn into the syntax and the current class you're working on or the current cluster of classes what about the bigger picture what about the nature of change with time code analytics things like that adam thornhill's book your code is a crime scene where you're really trying to understand the system how does the system of code behave over time in other words who works on it what things change together this is a far deeper approach you know it's it's the difference between looking out of your window and working out the weather and what you should wear when you go out the front door versus having a high level view of watching the weather patterns moving across your region of the country or the world and recognizing oh yeah it's all connected so a bigger architectural view i think and there's a lot to software architecture so i would definitely say that is an area particularly if you're if your job as a senior that is one of the things you want to offer people is not simply i know more stuff about the language but i also see where it fits and you're offering a larger view but in other cases that the learning can be kind of you know so and i can sort of say there's a lot of tooling kind of stuff and probably learns things that are outside your immediate programming language you're not using and not even as a secondary language go and have a look at it if it's different i think there's a lot to be there's a lot to be learned and enjoyed in doing this and the same for other tools and maybe you're excited by ai but you're not working in it sure that's fine go and work with it maybe you seem to think that ai is the whole universe and you are working in it well go and look at something that's not that you know go and look at something else to give you a different perspective but i think the thing that gives us the biggest perspective is the the learn bit i mean people always call them soft skills and there's a question of whether that is the right term it seems to downgrade them a bit but for me i'm it's the idea of building on that software architecture thing the behavior of people creates the system software doesn't come by magic it's the it's how people interact and you can kind of spot software that is created and you know there are development cultures and organizational cultures that are very good and encourage they create the right environment for that and then there are ones that don't and even though the engineers might be individually brilliant what comes out is problematic complex broken there's all kinds of different failure modes so i think i understand the people side a little bit more and certainly at the senior level the way that you do that is by doing coaching you're you're senior work with somebody who's not you know don't assume that they're going to pick up all your knowledge by osmosis simply because you're in the room don't assume that they need to follow necessarily the same path as you give them shortcuts and they will also ask you questions that you will never have thought of because you have a historical if you're senior you have a historical way of learning and it's very tempting to teach other people according to your history whereas people coming into things now it's just like they don't need most of that but they may also see it from a different perspective they may ask a question that initially seems dumb but it's surprisingly hard to answer and gives you an insight so yeah it's it's very much that put yourself in a position where you are mentoring and coaching somebody else you will learn a huge amount