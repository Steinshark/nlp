okay we are good let's sit down and talk 
about some of the lessons the top lessons   i've learned in the past five years working as a 
software developer i'm not gonna lie i didn't   even know if i was gonna share this but right 
before i sat down i just finished work for the day   and a lot of my day today not a lot but part of it 
was definitely there were tears there were tears   it was a tough day something that i didn't expect 
to have five years in but here i am five years in   and there are days that you feel like 
you know nothing that doesn't go away   hey friends welcome back to my channel before we 
get into it make sure to hit that subscribe button   for more tech and coding content and as always i 
try and be as real and candid as possible because   if you are in tech and just wanting to grow 
your career or maybe you want to break in tech   we need transparency we need to be honest 
and real with each other and that's what   this conversation is about today i'm just sitting 
down to chat with you about five the top things   i would say that i have learned in the past 
five years working as a software developer   actually let's rewind that a bit i've been 
working professionally for four and a half years   but the last six the past six months no sorry 
the first six months was learning and growing   just sounded kind of long to say four and 
a half years so we're just gonna say five   we're jumping ahead a bit i think one of the 
top the main things that i have learned in   the past five years that would have kind 
of shocked me initially is that your work   should be replaceable meaning the work that 
you are capable of doing if you were to vanish tomorrow it should be written your 
code should be written in such a good way   and your mentorship of what you gave other people 
advice of have been passed down that if you   disappear tomorrow someone else can pick up where 
you left off this goes back to always trying to   focus on quality code and implement quality code 
i know it's one of those things that it's the   balance of finding quality code versus finishing 
a ticket in time and having that balance but   making code that leaves your footprint that when 
you leave that company the person who replaces you   can come in and be like oh thank goodness that 
the last developer who just left they were good   the one thing though i don't think should be 
replaceable is you is your personality the things   that you bring to the team the uniqueness you have 
we're all so unique and i think a lot of times   when i first started coding i thought coding is a 
technical skill that's all it is and yes on paper   that is true it is just a technical skill but to 
be a good coder i truly believe after five years   of working in the industry that you need to have 
soft skills as well you can't just be have the   technical skills without the soft skills yes you 
can have a career that way but you're not going to   succeed or very quickly and it kind of takes the 
fun out of things it's fun building a community   and getting to work closely with 
your co-workers and i know we love   co-workers but we hate co-workers but they're 
strange and it's like this weird relationship   but try and have a friendship to some 
degree with them it makes work a lot easier   and that brings me to my next thing which is 
people around you really really matter if you   are working on a team where you don't respect the 
people your leaders or your managers or you don't   just don't jibe jive jive with them it's going to 
make for a very painful experience people around   you really matter and you really want to have 
that sense of community when you are working   even if you are a fully remote developer you 
can still build that sense of community by   interacting with your co-workers getting to know 
them what are their interests outside of work   it also for me made it really made 
it much easier when i had a question   or was uncertain about something to go to someone 
who i had that rapport with that trust with and   the only way you can build that is getting to 
know your co-workers another thing that is so   important and it's one of those things that 
i realized further on in my career the more i   the more i grow the more i realize this is not 
everyone knows everything i used to think that   senior developers or technical leads they must 
have all the answers have everything figured out   now as a senior developer i'm like no that's not 
the case at all we maybe get better at googling   and no i'm just kidding we do get better at 
our skills too but it's very true that no   one knows everything and even the most senior 
of senior people have more senior people that   they ask for help from it's not though you get 
to this point where you stop asking for help   and i think the bigger red flag is if you get to a 
point where you stop asking for help it might mean   you're stuck or it might mean that your growth 
has stopped and that's another issue on its own   another thing that i've learned but i'm still 
really working on is to avoid the negative   self-talk this is something that i still face and 
going back to the start of this video i met i was   totally counted with you and told you i was crying 
because sometimes you can get into a rut where   you feel like you can't solve it you keep 
on questioning your skills and it just goes   downhill really quickly with your mindset it's so 
important to catch that early on and recognize hey   this is negative self-talk this is not okay and 
kind of flip the script why are you feeling this   way what is going on reaching out to people who 
who you believe can support you and you trust   and can be vulnerable with and that sometimes is 
hard to find but when you do find someone who can   really support you even when you are feeling 
this way it just makes a world of a difference   and it also goes i think i've learned this 
more through putting content out than i have   through coding because every time if i i'm really 
honest every time i i'm feeling this way and i put   a piece of content out saying hey today sucked 
i feel like a crappy coder i get so many so many   messages of people being like me too i feel that 
way too sometimes and it just really makes me   realize wow everyone has those days everyone feels 
that way and it's okay we just need to not get   let those thoughts consume us another thing 
that i definitely did backwards in my career was   you should focus on core concepts rather than just 
learning frameworks or more programming languages   this when i was starting out in my career i 
was so focused on learning more and more and   more and more more programming languages more 
frameworks more libraries that i skipped a lot   of the core concepts and that really affected 
me i would say midway through my career early   on in my career because i didn't have a solid 
base a solid foundation for the core concepts   learn the core concepts it doesn't matter if 
you're learning them in python javascript whatever   learn them yes it might be tempting to switch 
over because you see that now python's the   hottest language or whatever is coming down 
the pipeline is the hottest language of 2022.   the reality is once you master the fundamentals 
of one language it's so much easier to pick up   another language those are some of the things that 
i really have learned in my past five years oh   i'm saying because i know i have so far to go 
still and i think that's a good thing i think   that's a good thing that is a good thing it's a 
great thing actually it means there's so much to   learn and it's just getting in the mindset that 
you're a forever learner and that's a positive   and to really flip the script of trying to catch 
up with everyone to know everything and realizing   no i'm never going to know everything but just 
being open to things as they come your way and   making sure that when you are learning something 
you're learning the core fundamentals okay that i   just i felt like i just had a therapy session for 
myself i just need to sit down and share some of   my learnings with you and i hope you found this 
valuable and helpful as well just hearing some of   my top learnings as a software developer it's one 
of those things that you are a forever learner and   you just keep on going but i'm curious to 
know what are some of the things for those   of you who are already software developers or 
in the tech industry in general that you have   learned in your time spent in the industry 
leave in the comments below thanks everyone   you