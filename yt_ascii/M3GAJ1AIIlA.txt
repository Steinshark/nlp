hello and welcome. i'm james murphy. and in this episode, we're talking about chained comparisons in python. by a chained comparison, i mean an expression like this where i have multiple comparisons. in this case, i have two less thans that appear in the same expression. so, this kind of thing is totally fine in python. you can have as many of these strung together as you want and you can mix and match operators. i can use less than, less than or equal to, equals, those kind of things. and as long as each of the things pairwise makes sense, like 5 less than equal to 10, as long as each of these things makes sense, then this is a valid thing you can do in python. however, what it means is a little bit non-intuitive. python tried to make things work a little bit more like the way that math works. so, this expression, x < y < z, is supposed to mean what it would in mathematical notation. namely that, y is between x and z. this might be a little bit counter-intuitive especially if you're coming 
from a different language, or if you're trying to comprehend, like: "does this happen left to right and where do the parentheses go?" that kind of thing. so, if you tried to think about it and you said: okay, i know y less than z returns a boolean. so, is this supposed to mean, like y < z, okay 1 is less than 2, that's true, x is 0. 0 is less than true, that's true? and you know putting the parentheses over here wouldn't really make it any better. if i did this, you'd still be like comparing a true and a false versus another thing. but in python, they sort of did away with this idea that you pick a left to right or right to left way of evaluating the parentheses and instead they made it mean following. whenever you have something like this, where you have multiple comparison operators in a row, then you basically just put an and between them. so, what i had before is equivalent to x is less than y and y is less than z. doing it this way can save a little bit of typing, sure. but one of the main benefits of doing it this way is that if i have a temporary variable where i don't really want to give it a name if i have something like, you know, i call some function and i get the return value of the function, i don't have to now call this function twice. if i wanted to do it just in the old written out way, then i would have actually two calls to this function. and if this function was an expensive function and i didn't want to make two calls or if it was something that like had side effects and i didn't want those side effects to happen multiple times, then i would sort of be forced to make a temporary variable storing the value of the function call. so, allowing these chained comparisons definitely saves on more than just the typing. it does prevent you from having to do this kind of pattern here. but the language is actually very very flexible about chaining these comparisons together. so much so that, i think that most of the time you probably shouldn't use this unless you're just doing a very simple comparison like x is less than y is less than z. i think intuitively once you understand that this kind of thing is happening, it's pretty easy to follow and it can make code more readable even. but look at all of the things that you could use in a chain comparison. so, you can use a less than and greater than, less equal, greater equal, equals, not equals, is, is not, in and not in. all of those things for the purposes of python are considered comparison operators. and they can all be chained together. that means that here i could do something like this i could say x is less than y is greater than z now mathematically, what is this supposed to mean? i mean, i know python and i know that the rule is that this means x is less than y and y is greater than z. but looking at it, just looking at x less than y greater than z that no longer really makes sense to me. it makes way more sense to have the and in the middle there and to have a temporary variable for a function call if i need it. i don't think it should really even be allowed to mix like less and greater like that in these chained comparisons. i don't think you're going to do anything but confuse people if you mix a less and a greater and a chained comparison like this. so, let's just go over some examples of what i think would be good use cases versus questionable versus just outright bad. so, here what i would consider good use cases. i would argue that in these cases, it's actually more readable to use the chained comparison and it agrees with mathematical notation and just looking at it it makes sense what it's doing. it's more readable than what you would have if you wrote out the explicit like 0 is less than x and x is less than 1. so, for this one, clearly i'm saying x is strictly between 0 and 1. that makes sense. you can express things like closed and open endpoints, you can express loose inequalities, you can do things the other way around, all of these things just make sense. it even makes sense to have three things all being equal to each other. i think what makes these good cases is that they're all using sort of the same direction of comparison operator. i can still go x is less than or equal to y and y is less than or equal to z. so, x is less than equal to z. it makes sense to skip from the very left to the very right. and that's because these comparison operators are transitive. that's that property. if i have x is less than y and y is less than z, then x is less than z. so, as long as you're sort of respecting the transitivity of the operator, then i don't really have any problem with chaining the comparisons. okay, let's look at some more questionable examples. for these examples, i wouldn't necessarily be upset if someone tried to submit a pull request that has something like this to one of my codebases. but i probably wouldn't write something like this myself. just because i know that when someone sees, you know, a big long expression like this, they're going to have to stop and think, like, what is even happening here? like, they're going to have to take a second to realize that this is a case where they need to think about it as a chained comparison. what this one is saying is that y and z have to be the same, x and y are between 0 and 1 with x less than y. it's definitely cluttered and i would consider refactoring to make it more readable.  but i wouldn't say that it's bad. in this example, this part is completely fine. and i think that this example is only questionable because it's not really clear how the not equals plays into this. is it supposed to be that none of these things are equal to one or just that z isn't equal to 1? well, since we're saying that they're all equal, it doesn't really make any difference. so, that's why i would still include this in an okay to questionable use as opposed to a bad use. so, i think that this example and this example are not actually that questionable. i only include them in this questionable use-case scenario because i think that most people probably aren't aware that is and in are considered comparison operators and can participate in this chain comparison operation. if you didn't know that is was allowed to participate in comparison, i would probably just think this is a syntax error. but once i think about it as a comparison, then yeah, it makes sense that i'm just saying that x, y and z are all identical. they're pointing to the same object. there's nothing too radical about any of these examples and as long as you have a general awareness that the rule exists, then you're not going to be confused by any of these examples. however, let's move on to the: why are these even allowed examples? these are really bad use-cases, in my opinion. i'm actually not sure why this is even allowed. if you read the documentation, it's clear that the person that wrote the documentation knows that this is confusing. they say something like: oh yeah, this is allowed. you're allowed to use mixed, like, less than and greater than or any of the comparison operators. but it's not pretty is the term that they used. so, why this is allowed i'm not quite sure. but it's clear that they knew that it was a bad idea, basically. my only guess is that it was due to something about the ease of implementing it in the language and perhaps due to limitations of the parser. here's another bad example. x is not equal to y is not equal to z now, if you were to write this in a math paper, it's probably going to be interpreted that none of these things are equal to each other. not just x is not equal to y and y is not equal to z so, in this case, i think this actually disagrees with what your intuition might say. my intuition looking at this says: this should mean that x, y and z are all distinct. but it actually doesn't have that implication. it still could have the possibility that x and z are equal to each other. and that's what i think makes this an especially bad use. i think any time that you use a not equals as part of a chain comparison, it's probably going to confuse people, especially if there are multiple not equals. and of course, you're allowed to have as many of these things mixed together as you want. so, you could write something like this and this is perfectly fine. who knows what it means! i don't even really want to parse it. i just wrote it to show a bad example. and here's the motherload of all bad examples that i could come up with. leave your bad examples in the comments below, by the way. we're mixing less than and greater than and we're mixing the right and left bit shift operators. if anyone knows what this code is supposed to do, go ahead tell me. now obviously, no one in their right mind is going to write something this terrible except maybe for an obfuscation contest where you're supposed to make code look as unreadable as possible. but i'm just trying to show this as a point where why is this even allowed in the language. now, i know python has a lot of sharp corners. it has a lot of features. i have a whole video on what i think is the sharpest corner of them all, a sort of a hidden thing that python does that's really unintuitive. and that's sort of just expected. every language is going to have these things that are counter-intuitive or if you don't know the rule, then it's not really going to make sense to beginners or you know that kind of thing. but something like this, i just think that really shouldn't be part of the language. now, i'm not sure how the python core developers would feel about potentially breaking old code that depends on this. but i think it is a good idea to probably rein in these chained comparisons and not allow things like less than and greater than to be used in the same chained comparison. so, i'm not saying that we should get rid of chained comparisons altogether, just the ones that inherently don't make sense, like using less than and greater than together. on the other hand, i would like to see an expansion of chained comparisons to other cases that do make sense. so currently, as of today, if you have something like a numpy array, it's not currently possible to do something like this. i can't chain together 3 is less than x and x is less than 5. so, this kind of thing doesn't actually work in python today. and i think there is a proposal about a way that it could be made to work. but that is one direction that i think that it would be okay if we expanded chained comparisons. and that's all i've got. thanks for watching. if you liked the video don't forget to like, comment and subscribe. special shout out to all my patrons and donors. thanks for watching.