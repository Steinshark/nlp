one trend we've seen a lot in programming in recent years is the attempt to replace c and i think that's both wise and terrifying it's wise because c's about 50 years old and being old doesn't make it bad but it has given us five decades to think about what works and what doesn't work in programming language design we've got 50 years worth of techniques we really ought to be putting into practice and putting them into practice is the terrifying part because c is everywhere you may not write c but i guarantee you're writing something that runs on something that runs c and was written in c it's in the compilation stack for everything we install so if languages like go and rust want to become the new se they've really got their work cut out for them all of which makes this week's topic kind of breathtaking we're looking at zig it's a language that's not only trying to take on c and c++ and rust and go for that systems programming crown it's also trying to replace the infrastructure that c itself gets built on things like llvm so it can hopefully become the best way to build systems level software across all different architectures zig ends up being a project with a huge scope and if you're a fan of programming languages there is a lot to chew on this week we cover crossplatform compilation to memory management techniques to new thoughts in compile time metaprogramming as well as when you've got these huge long-term ambitions how do you structure an open source project for long-term funding there is a lot of ground to cover so this is a bit of a longer episode than usual and we best get started i'm your host chris jenkins this is developer voices and today's voice is loris [music] crow [music] i'm joined today by loris crow how you doing out there loris hello hi ch pretty good thank you good good it's good to have you here i always love it when we do a language deep dive because i'm a particular fan of the world's programming languages and you're going to tell us all about zigg which is a language i don't think i'd heard of until we had yuran dirk grief on the show from tiger beetle who said they've written a new database in zig and i thought we have to do something about zig i have to learn about that so let's start here i always think new programming languages come into being as a reaction to what's missing in the in the marketplace if you like like there's a burning reason why zig needed to exist do you think that's true what zig's raise on ed right right so i i guess a a way of answering this question like factually is maybe to look at how it was created originally so the original creator creator andrew kelly wanted to make a digital audio workstation software for music for making electronic music and that kind of exactly yeah yeah and he tried a bunch of different languages and he was unhappy with all the solutions with all the trade-offs that each offered so i think he started with higher level languages and then quickly found out that to do real-time audio processing you can't use a language with like automated memory management and like languages that don't give you precise control over the hardware yeah because audio is one of those places where we're talking hard real time exactly yeah you have to be there on time yeah and but on the other end of the spectrum at the time the like the main languages that did give you full control over the machine were like cn c++ and each had its own like if you will baggage of issues which some of it is also up to like personal taste but for example c is very low level but it does doesn't have good metaprogramming facilities c macros are very well known for being not particularly good yeah yeah yeah they're not much better than string mungin right yeah exactly you you mess around with with strings and you have a lot of like unwanted side effects yeah often times so it's it's a food gun that that's how we usually think of it yeah yeah on the other hand you have c++ which i don't know if he actually did attempt to use but in general c++ exists in a space where the language is very powerful it's very complex and it's a type of language where you are heavy with abstractions often times and that kind of detracts from what you're trying to accomplish or or rather i'm some people can definitely make it work for them and that is their preferred way of programming so that's good but for some other people c++ doesn't really you know it doesn't feel good in your hand as a tool for some people yeah i can see how people we're not going to start a language war but you can certainly see how people would feel that way about c++ abolutely and and to me you know this is not really a thing of language war at all like i can fully appreciate how somebody who likes that way of doing things can make it work for them and but on the other hand like for me personally that doesn't that way of doing things doesn't really click so ultimately i can totally see how somebody would be productive with c++ and i wouldn't so i need a different tool right and i think that andrew also shares generally speaking this perspective so he wanted to make a language that was lowlevel so that gave you full control over the machine that would be suitable for an audio workstation and that on the other hand it wouldn't be overly complicated and there's like a a sentence that you can you can find in like zigs on on the website where we say it's one of the first things that you can see on the front page it says focus on debugging your application rather than debugging your programming language knowledge right yeah yeah okay so that's kind of i i know people anytime you write something that's sort of competing with c in the lowlevel world someone says why not go and why not rust but you yeah you begin to demarcate those as i'll let you answer it why is it not go or rust so the reason why it's not rust i would say is that like the answer is very in a very general way it's kind of the same answer as why not c++ i think the rust is another language that likes its own complexity and it gains a ton of power from that for sure but but the complexity is there and and also when it comes to like giving you full control over the machine rust it's not entirely of that opinion like rust for good reasons for for for safety reasons rust wants to relegate certain things inside unsafe rust which is a part of rust that you are not supposed to use lightly so that means that you will find out there libraries that when choosing between maximum performance in safety they will choose safety probably over performance often times because you do get audited if you have unsafe or not so in in general r is going for something slightly different than what zig is going for okay so both in terms of like trade-offs between performance and safety but also in terms of abstraction and i would argue also like readability in terms of like the complexity because writing abstracted code makes it harder to understand and to read for for a consumer when it comes to to go i think that go and zig both share an appreciation for simplicity although go is not just simple it's also very minimalistic so i i would say that there are like some parallels between zig and go but we don't have the exact same take on everything and i can get more into detail if you want later but but ultimately go is not as lowlevel as rust and zig are i would i am not sure if would be the best choice for an audi workstation for example or for an operative system because go has a runtime has a garbage collector also interoperability with c is a bit complicated ino because well first of all everything any language that has a run time that makes interoperability with see a little bit more complicated because you need to give information to the runtime of your language to the garbage collector about about what's going on with memory and so that sometimes makes things a little bit awkward but with those specifically i do think that the for the go team interoperability with c was never a priority or something that they really liked so go can call c functions for example but you cannot do the inverse easily so you cannot make a go function that can be easily called from c and i think basically this is like a a philosophy of the go team like they basically said no we want to do something different we don't want to do something we don't want people to rely too much on like we want to be able to consume c libraries but we don't want to do the inverse if you're in goand you just go i think that's kind of their their philosophy there yeah yeah it's like we want to be able to reuse existing ca but we're not intending to live in the same ecosystem quite yeah exactly i would say that and you can see that also in a bunch of choice that they made also with how compilation works in go like in terns of the compiler but i think it's a reasonable it's a choice it makes sense very different from from what zig is going for yeah there's there's a i don't think we need language wars because there's a huge design space to be explored and there's plenty of there's plenty of land for everyone right yeah but okay so that demarks what you want to be what's what's zig's answer to this set of design constraints i think that i think the most interesting part about the answer to like let's say systens programming like lower level programming in general is to rebuild it from scratch all these other languages that i well not all these other languages but like it is common to consider kind of like see the bottom layer of obstruction of what you're building so for example there are programming languages that compiled to c code i think nim is an example of this and rust itself rust doesn't compile to c but for example rust depends on the c standard library of the platform that you're targeting so if you're writing a linux program like a rust program that you want to deploy on linux rust will use the lipsy of your linux distribution okay with zig the idea instead is to really really build everything from the bottom up and this is a big scope this is not like for the faint of heart it's it's a lot of work but it does yield some very good results like some some very good things that you can do once you are willing to do that work so i would say that the most important interesting thing about zig is that it it really is a language that allows you to build for every target from any target meaning that if you want to target like not just normal computers but also very tiny embedded devices you can do so easily and that's also cross compilation because you're t like you're compiling on a linux machine probably which is going to be maybe x86 64 and you're targeting a very tiny arm v8 embedded device so you're you're comp there but this is also from computer to computer so with zig it's very it's considered fundamental the ability to build your program for mac os windows linux from any of those other oses so from linux to windows from windows to mac etc that's surprisingly rare but a very nice feature and it doesn't end here because we can do this for zig applications and to be fair i think that go can do it for go ras can do it for rust but they cannot do it for c while we can do it also for c and c++ so the idea is that if zig if you have a project that has zig code in it and also a c dependency not only you can cross compile the zig part but you can also cross compile the c part really yes and that is i think the huge thing and it's so big that actually you can use zig as your cc++ compiler when you are trying to cross compile a rust a mixed project between rust and c or a go and c1 so for example go people have been using the zig compiler to enable to complete the close the circle to to enable complete cross compilation of seo programs seo is basically what what you call a project that has both go and c in it c go is like a component of of their of the go compiler that's how compile in link to to c code so so go people having using go projects they are using zig to cross compile and same with rust even aws is using zig to cross compile rust lambdas for their lambda engines because rust depends on the lipy of the target and their their machines running lambda functions are running a specific version of the of linux with an older libc and you need to be able to target the correct version of the libc to make sure that everything runs smoothly right and that's not something that normally compilers can do and ras itself which doesn't concern itself with c compilation at all certainly cannot do so they have there's a package called cargo zig build that allows you to use zig to basically link against the correct lipy version that works on lambda how on earth is that working are you telling me that zig also has a c compiler built in or yeah it does it it's straight up does okay so and andrew started out trying to build an audio workstation and ended up building a language that also includes a sea compiler yeah pretty much it's legendary yeah and man and this is like and i would say we're like halfway through the journey because we want to get even more hardcore than this so i mean if you want we can change subject otherwise i can no i'm fascinated keep going yeah okay so do you remember when apple released the m1 architecture right so they went from intel to arm and that was big news because well turned out it's also pretty good cpu like pretty good architecture new max i i would say are pretty nice from like a they're powerful they overheat bit less it's they're nice so when apple released the m1 zig was the first compiler that was able to cross- compile for m1 from another target from another machine so apple obviously when they rel well well not only when they released but also while they were developing the m1 obviously they had tooling to compile for the m1 but they never released over when when everything came out they had not released any tooling for compiling 4 m1 from another machine oh so you had to buy the new mac in order to build for the new mac exactly because what you would get was when you have mechos you get a clang like you get a fork of l lvm which is yeah it's i i would say it's kind of pretty much all vm except with like private patches that apple makes specific to their system and when the m1 came out they had patches specific to the new architecture so you could compile obviously from m1 to m1 but lovm itself the open source project did not support m1 yet fully and so you could not get lovm like on windows or linux and then use that to compile for m we were the first ones and that was because not only zig is a s compil and to be fair the z compiler stuff right now i would say at its core is not super impressive the the idea is that zig uses lvm and lvm is like this library that allows you to it's like a unified framework for optimizing for generating optimized machine code so the idea is that you your compiler reads the program that is trying to compile builds a data structure in memory does semantic analysis all the usual stuff that are language has to do but then the final step is to give some of that information to lovm which will then take care of selecting which exact instructions to use for the for the cpu that you're targeting right so it's i suppose want to say it's almost a little bit like web assembly it's like a very lowlevel language that's actually going to generate the final machine code yeah that's probably a bit of a stretch but i think that's fair that's what that's the that's called the lm ir intermediate representation yeah that's what you create which is a bit code of some kind and bite code sorry of some kind kind kind of like a web assembly i i think that's a fair parallel okay yeah so we give that to lm and since we already bundling all of lvm it doesn't take much to also add clang which is the c compiler that runs on lvm so that what's allow us to to build c there's more than zig does but at its core is not super complicated but but a compiler is just one step necessary to create an exe a final executable there's also a linkin page at the end so the main problem with the new m1 max was that linking needed to be different than it was in the p and the reason why we were the first ones to be able to cross compile 4 and1 was because we had our own in-house linker there's a core team member in the z project his name is jacob cona and he used to work in microsoft and we kind of poached him to work well he i guess he poached himself he wanted to work on on on linkers i think at microsoft he was not working on anything even remotely as exciting and so he decided to jump ship and join the z project full-time so he we have our own link here and most of the work is done by him and so that my point here is that by having our own linker we were able to reach to to have a feature even faster than lovm could and lovm is considered in general like a very good project and it is and it is yeah but by not the point is that we did not consider lvm the baseline we were willing to get past lvm and do some of that work ourselves and now going forward and this ties back to my point that we are only halfway through our journey now going forward we plan to make lvm a completely optional component so that means that we have our own implementation of some of what lvm does so we have what we call them be hands so we have our own implementation of what reads the internal representation of the compiler the internal data structures and decides which instructions to output that's a lot of work because you have to build one of those things for each architecture that you want to support so you want to support x86 64 that's one implementation arm 32bit another arm 64bit x86 like 32-bit x86 that's another one there's more architectures out there so for each one you have to write a specific one and then you have to write another bit based on the os that you're targeting so like xd6 64 windows is a little bit different than exit 664 mac not in terms of like the instructions of the program but like the packaging like how an executable is structured all the like surrounding metadata the framing in a sense right yeah and we're doing it now the work that we're doing in that regard right now is not to replace lovm in terms of optimizations so the the bulk of what lm does and what it's considered state of the art for is optimizations we are not doing that yet what we're doing right now is basically do the work so that we can have debug builds which are not optimized happen without needing lm at all ah that's our starting point but the plan is going forward to basically have a competing optimizing backend so you will still be able to use lvm if you want how it's going to happen in practice doesn't matter much i think it's going to happen that you basically will need to get lvm through the package manager so you you will use the z package manager to get lm instead of getting it bundled in the compiler itself but then you will be able to get an lvm optimized is final executable regardless but we're going to work on our competing version and you will decide which one you like more and over time if we do a good job it might even be that our competing mean becomes compelling enough that people will use that one over ovm c it you're not kidding about going all the way down to the lowest level right yeah jeez yeah okay that that's what's your timeline for that oh that's got to be a multi-year project right 100% yeah for sure honestly i don't know what the timeline is going to be the reality is that the the timeline of these things can vary dramatically depending on the amount of talent that you attract one thing that the people usually say when when we first tell them yeah we want to get rid of lm they start by saying oh you're insane you're never going to be able to do it there's a bunch of geniuses that work on lvm fair fine let's assume that that's right i mean i'm sure that the people work on lvm as smart but it's not like they are bound by a blood contract to work on lvm and if we and working on lvm it's a humongous c++ project takes forever to compile and it's in some ways like it's messy what if we were to be able to present to people working in that field another ecosystem where they can research the same exact kind of of optimizations that they are researching and implementing on lvm but the compiler instead of taking four hours to build it takes 20 seconds i imagine that would be very seductive and i think you're deliberately trying to seduce people z side is fair and i mean we already have people in the court team who have push access to lvm so it's not like we are like well i i don't know anybody who is part of like the the leadership of lm so i wouldn't say we are like insiders but we we already know people who do this so there's a yeah sounds like there's potential for both knowledge sharing maybe some more kinds of sharing out there absolutely and absolutely and if lvm also ends up benefiting from this it's great for everybody sounds like one of those whoever wins we all win situations absolutely okay this is getting very low level maybe we should try and pull it back into user space love the ambition though absolutely but i i do want to get a sense of what it's like to write zig what am i going to find as a programmer what am i going to like need to learn right so the the hardest part about zig is not zig at all zig as a language is very very simple the most complicated part of zig right now is comp time which is the ability to run code at compile time instead of run time and if you're not used to thinking about the two different like lifetimes of your program the two different phases of its life then you might get a little bit confused about what it is that you can can do at comp time or what it is that you cannot do at comp time but overall the core principle is in my opinion kind of straightforward where things get complicated is once you get into systems programming more in general so if you like a javascript or a python developer and you never had in your life to think about stock versus h or maybe people told you but like if you're a python programmer this is something that also happened to me like in university if you do python and people tell you about stack versus heap that's like philosophy to you because that's right you don't have control fascinating but you'll never use this knowledge exactly like you don't have control over it and and yeah but when you're get into lowlevel systems program suddenly this becomes a real concern right exactly and so people so the hardest part is for example understanding the difference between an array of which of whose length you know you know statically like this is going to be a six element array and it's always going to be six or maybe you know you need up to six slots maybe at some point in time you you use fewer than those so you have like a counter that tells you how many slots you're using but six is the limit so and if you know this statically at compile time then this can be put on the stock and there are some things that you can do with with this memory thanks to the knowledge of the fact that it's bounded to six elements and this you know exactly how much memory it's going to need for the whole lifetime of the program exactly and that is critical information for the compiler itself like the language lower level languages are like designed around these very critical concepts of like what you know statically and what you do not know statically so if for example instead you have a program where you ask the user to tell you how many items they want to enter and they are allowed to enter 10,000 if they want or more realistically imagine parsing a json file like a json file can be arbitrarily deeply nested or big in general so in that at that point you need to concern yourself with hip allocation which again is something that in python in javascript you don't do directly because the runtime manages that for you yeah so that's one example another example is all things that your platform like apis that your os operative system gives to you which people sometimes are used to think about as in terms of capabilities that the language gives to them even though the language can only act as an intermediary so for example sometimes people ask how do i get the size of the terminal window in zig and the answer is well the question the real question is how does your os allow you to get an information right and then and that's going to happen through a cis call of some kind and then the the i guess the secondary question is where well has somebody written the boiler plate to access that cis call and where is it in the zig stander library so the question of how you do like this kind of stuff in in zig or in in each specific language it's not completely wrong it does make sense but understanding what is the actual api below you can be a little bit annoying especially when the language wants to show you precisely what what that is and it's not trying to give you a sugared interface that is overly simplified because sometimes you do also get that in other languages which might make sense like a higher level programming language it makes sense that it doesn't give you necessarily lowlevel access to like to everything so i would say these are like the biggest challenges people need to learn systems programming they need to have this mindset where they have to think okay how like when for another example people sometimes ask how do i print colored text in the terminal how do you do that in zig and the answer is zig doesn't concern itself with this like these are escape codes it depends on which terminal imator you're using and a bunch of other related concerns that really are pretty much trans arent to zig but people don't have this mindset so i would say that is the hardest part about learning zig and connected to this there aren't a lot of good learning materials in my opinion ah so this sounds like the usual kind of youngish language problem where maybe there isn't a library for everything yet and there ar there isn't documentation for everything yet yeah for sure but also i mean it's not like zig has invented systems programming so it would be nice right if there was some good piece of like a good book that taught you the core principles without too much fast and and in fact there are plenty of books that try to teach you these things it's just that in my experience most of those that i've seen they tend to conflate c specific stuff with the os so for example you have this book that it's trying to teach you systems programming and it starts by telling you about how the c compilation model works and how that intertwines with like how libraries are certain files are like laid out in your system and this is all real and concrete and it was especially real and concrete and concrete like 40 years ago but those concepts like in other things like macros and where things are usually the is on library but those those are things that are specific to c so if you're not doing c a lot of these things are not as timeless as the book thinks they are while instead stuck versus hep that one is much more timeless so personally i think that we're missing learning materials that can discern between really timeless systems programming concepts like stu versus hip versus cisms that are not they relevant anymore yeah yeah that's a sort of long life cycle but not not mathematically pure you almost say yeah yeah okay but so i would like to talk about how the c interrupt works and maybe this is the way to do it so if i'm if i'm actually looking to get the size of a terminal window am i going to go looking for a sis up call and find i actually have to do it through an osc library and how's that going to play out when i actually start coding so well i guess it depends on the us let's assume that theos is linux okay for simplicity so if theos is linux you're in luck because in linux the cis calls are considered a public api of the os so you are not forced to use the c library of your os you can invoke the is calls directly and in the case of this since we like doing things from scratch you will find in the zig standard library that we do implement the cis call which i think it's iocl the cis call that you can use to get that information from the os so in the case of zig so yeah in the case of of linux that's how you find that out but in other platforms yes you would have to use cel although we do have also bindings to the cel so in practice you wouldn't have to do everything yourself from from scratch when it comes to like these very common things but let's imagine that instead you want to use like a c library okay let's imagine that you want to use i don't know sq light by the way sq light is a perfect example of a very popular library used for example by go there's a lot of go projects that that bundle site but site is a c project project so that that's one major use case of people using zig to do cross compilation when they also want to bundle sq light anyway you want to use site so at its baseline here's what you want to do you want to the way this stuff works in c is that you have c files that contain implementations of things and have header files which are like files with a h extension and those files contain definitions so they contain they do not contain full implementation they only contain like the signature of of a of a function for example the original kind of api docs right exactly the original api docs like they're there what's it called is it called open api i think the thing they used to be called swager it's basically like it's a system to document like restful apis right that's kind of the idea except systems programming yeah so the way this works is that then site comes with bunch of c files and one header file that you are supposed to include in your project to to get access to to the public api with zig you can do that directly so in zig you can import a c header file and it will work right away like you import that and you immediately get access to all the definitions in there oh interesting okay so there's no kind of bridging file that you have to write well the bridging file in a sense gets autogenerated that's the idea right okay so you don't see this and actually if you do want you can do that manually like you can take the header file translate it to c definitions and in case there's like the need to tweak something manually you can do that if you want but the happy path like the the most common way you will want to do this is just straight up import the header file and have zig do that bridging internally okay then at that point you can just straight up call all the esuite functions that are defined in there so you can you can just like go read the esuite documentation and they will tell you call i'm making this up i don't remember how to use sqlite but there's going to be maybe sq this is a test of the sq light header api syntax don't worry okay so there's going to be maybe some kind of sqlite init function so you just call it and it works there's also a couple other things that zig does that help you with interoperability with c so for example c uses null-terminated strings a lot so basically there's a you when you want to give to a function a string you give it a pointer to the beginning of the string and the pointer doesn't carry information about the length the length will be discovered by the function that you're calling by iterating through the sting through the string until it encounters a zero character once it like a zero bte once it finds a zer b it knows that the string is over modern languages don't like to do that anymore modern languages very much prefer something else i'll tell you my age i can remember when we didn't like to do it at the time so in zig for example normally a string it's not just a pointer to the beginning of some data with a null at the end but in zig it we use slices which other languages sometimes call fat pointers so the the tiny what you call the pointer is a pointer but also a length so yeah you you have both information and to be fair sometimes in see you also have apis that want a length not they don't want to disc discover a null bite at some point but they want you to pass in a length but those have have always to be two separate arguments two separate values that you need to move around in parallel anyway so how does z help with the inter interoperability well string literals in zig are not terminated so in basically when you write i don't know hello world and you want to use that string literal in zig that's going to be a pointer plus a length i don't know how long hello word is 10 characters nine characters whatever depends whether you include the traditional exclamation mark at the end okay so so you do have this information but there's also going to be a null bite past the end of the string so you can take a c a zig string literal and pass it to c transparently no need to do anything else and it's always going to work and more in general zig does have a bunch of functions in the standard library that allow you to deal with null-terminated strings which are not the preferred type of string in zig like you don't treat strings as null terminated normally but n terminated strings are a reality because not only because of c interoperability like in terms of sq light but also because of c interoperability with the os like os apis the lib c that's c but also the cis often time inherit some cism some like some ways of of communicating data that are like mirroring what c does yeah unsurprisingly right unsurprising often the os is wr in c so exactly because us is written in c because that's that's maybe how people used to do things at the time and so these things are still there yeah yeah and okay so to conclude yeah you have string lons you have a lot of other like operators in z that you can also use with c functions very easily kind of transparently but just to name one i think it's really cool you can use the fur so the fur is almost the same concept as ghost theer there's like some minor differences but the idea is that basically if you want to free a resource while when exiting the function instead of making sure that you call free or like file close for example like the whatever results release function you need to call instead of making sure that you copy paste that call at every exit point of your function what you can do is on one line you open a file and on the line below you defer close it oh okay yeah so you have basically clean up that you can put immediately after the creation of the resource and whenever you leave that scope no matter how you leave it whenever you leave that scope that function will be called yeah because it's always deeply dissatisfying that you have to you have to remember to stick the close call or the free up call at the end and it just it just scream this is going to get forgett one forgotten one day right yeah absolutely so the fair saves you from having to be too careful about like branching paths in your function and if you look at it from a and maybe it's not as handy as you know what c++ can do with ry with with distractors they run automatically you don't even have to ride the fur but c++ distractors only work with c++ the fur in zig also can be called on c functions it's completely transparent so there's this funny end result we we where basically zig in a sense is better at using c libraries than c because the same cleanup routine in c would require you maybe to even use goto like it's not uncommon for people to use goto and have like a a label like a section of the function with all the cleanup functions but it it gets really messy like i don't think i am able to fully convey how messy cleanup can get in c because it doesn't have the fur i can believe yeah absolutely that's interesting that's interesting still being in sea but building on it with new syntax i have to ask before we leave this particular thread what about pointers do pointer does pointer arithmetic come into zig pointer arithmetic can come into zig by the way that's a great point i was forgetting that's another great improvement overse that also helps beautifully with interoperability so you can do pointer arithmetic in in zig if you want to because because that's what the machine allows you to do and maybe occasionally some os api will require you to do so but in general you do not do pointer arithmatic in zig and specifically in zig you cannot do so in the type system you are not allowed to do arithmetic on pointers what you have to do is take your pointer convert it to an integer which is not like an operation that that does anything at run time it's just like a type system thing like you have to be explicit about taking a pointer in interpreting it as a number apply the math to the number and then convert it back to a pointer so you can do it if you want or if you need probably if you need you shouldn't want but the language is not going to make it easy or like very comfortable to you there's a little bit of friction introduced there and on on the flip side it helps identify very quickly where these kind of shenanigans are happening right so it's it's mainly there for the sake of c interrupt rather than writing zig dayto day exactly and i mean we say see interrupt but i don't know there might be other things out there like i'm thinking of firmware like you programming a tiny embedded device and you need something like this because of the very low level stuff that you're doing which is not really necessarily specific to z to see anymore but it's like low super low level bit fidling maybe at that point you need something like this but otherwise you normally don't and still related to pointers there's another crucial thing pointers in c are very underspecified in the sense that you see a char star so you know it's a point pointer and when you de reference it you get a character but then the question is can that pointer be null or not you don't know maybe documentation tells you but you're not sure normally the second question is okay am i i'm getting a character at the end of this poter assuming it's not null now is there going to be just one character on the other side or is this like a string is this like expected to have another character afterwards and another one afterwards until i encounter a null is there going to be a null or i might supposed to know how many items to get because of another variable this is not encoded in a type system at all in zig all of these are different type of pointers so if a pointer can be null it's an optional pointer so we do the thing that all modern languages are doing where you have like the concept of optional and then you need to the optional and we use that to represent n pointers but then we have types for so you have normal zig slices which are a pointer and a length but then you have a style pointer that can be that's going to be a pointer either to one item one specific item so you're explicitly saying that's going to be one character one chart at the end not many or there's syntax for saying no this is like a pointer to a unknown number of characters so there's specific syntax it's going to tell you yes this is a pointer to many items but the pointer itself doesn't tell you how many and then there's a pointer to an unknown number of character with a n terminator at the end and this is in the type system so for example if you by mistake think that that you know you're trying to create a string off of another string and so like you may maybe take a tiny slice from the middle of the string and you try to pass it to another application and you forget that that that that that api is expecting an alter intern at the end which is not going to be there because you you just split off like a tiny like two characters from the middle of a string right so there's not going to be an al terminator on the other side the zig type system will tell you it will give you a compile error because it will tell you i'm expecting an alterated string but the the the operation that you like the slicing operation that you did on the other string does not yield an unterminated string so you will get a compile error right away instead of having your program read random garbage and maybe sometimes crash yeah yeah that's that's one of the question i have to ask you then cu i can see right now this appealing to people that need to use c don't want to use c got into rust didn't make friends with the borrow checker yeah and now have could find zig being the ideal place if i want more ty type safety around se particularly around strings yeah what about memory management because that's the other big sticking point right yeah agreed so in general so if we want to talk about if you want to talk about ergonomics what i just what i described earlier like the the first statement that really helps a lot with memory management because you allocate a resource defer free it and you're good to go you need to there explicit like aloc maloc free call in zigg land exactly and to to be even more concrete about this z does not have a global allocator so in c you have maloc and maloc is like the allocator and maybe different projects use a different implementation of mlock there's like a few competing implementations but in in zig libraries there's this idea that in c libraries there's this idea that you have maloc coming from the echosystem that allows you to allocate memory in zig allocators are always passed around explicitly so if a function wants to allocate it needs to accept an locator as input interesting yeah so this makes it more easy dramatically more easy to audit what it is that's allocating memory or not if a function doesn't accept an allocator or a data structure that bundles the allocator in it like it's also like for example we have array list which would be like equivalent of a c++ vector so like it's a growable array right when you make an array list you give to it an allocator and then when you when you pass around the array list the array list will be able to allocate because it bundles a reference to the allocator inside of it that's for convenience but in general you can very quickly audit if a function can allocate or not by does that help you audit if a function is forgetting to deallocate d by itself no what it helps is that the doing that is that the what we call the general purpose allocator the main allocator implementation that you find inside of zig in standard library that allocator in theb mode has leak detection so you cannot check statically if all allocator allocations are freid or rather you can't unless you're willing to become rust rust can with all the limits they also have limits on on the type of like memory management strategies that that the bor checker can understand but they can we can't but we can instrument the default allocator with with checks for leaks in the bug builds so when you run your tests basically the allocator will fail the test if at the end of it you have like still memory allocated okay and that's default built-in part of the test site you don't have to specifically instrument exactly you don't have to do anything oh that's nice that's nice actually yeah there's another angle to this also which is that it is correct for programs to want to leak memory occasionally in this sense i'll use the z compiler itself as an example so the z compiler when built in the back mode will make sure to free everything when built in release mode it will not free once it's about to leave it will not free memory when once it's about to leave to to close because the os will clean up that memory anyway and there's no point in freeing every single item that you've allocated if your program is about to exit like making sure to free tiny things makes perfect sense when your program is going to use a ton of memory or it's going to be super long lived like otherwise it's going to consume more and more memory over time until it eats all the available memory and everything explodes yeah but for like let's say one shot programs kind of like a compiler is like you run the utility it runs to the end and then it closes cleaning stuff up at the end is just wasted time so have you ever used like visual studio no for so long i can't believe yeah thankfully i haven't had to use it in a while now now but a few years ago like seven years ago or something i had to use it consistently and it drive me nuts that when you close it not only it takes forever to load that that is already not okay but when you close it it takes forever to close why why is it taking forever to close because as it's closing it's trying to free and run the destructors of every single component and subcomponent and subs sub component i have a vague memory of doing this with eclipse and just getting into the habit of force quitting cuz who cares exactly exactly and and eclipse is another in java i think it's another language that has destructors and and so kind of makes people want to use them a lot but then there's moments where you actually really in terms of like functionality that you're offering to the user you don't want to do it like you just want to close it right away yeah so long story short i i made this point because in reality it is a legitimate behavior to have the program in specific circumstances link memory if you think about it because like for real like the user experience would be genuinely significantly improved in both eclipse and visual studio if the thing just exited right away of course you you do want to have a toggle like a flag that makes sure you free all the memory cleanly so that you can guarantee that you do not have unwanted leaks like you you visual studio for example is a long running program an eclipse yeah so they should not be leaking memory in the normal operations so it's not so you still want to be able to test for that there are like two men there at least two memory management strategies one is be very careful about what you're using because it's a limited resource yeah but for the long run you know what whatever memory you're using at the end you can just drop on the floor right exactly yeah yeah that makes perfect sense that there's one other big thing that you've talked about a little bit but i'm tempted to run over our usual time slot because i'm fascinated by this go for it i i'm not in a rash for sure good okay so comp time you talked a bit about that and as an old list programmer this is a concept that makes sense to me but i think it's never really gone mainstream yeah why don't we talk a bit about the separation between runtime programs and compile time programs sure so let me tell you about how zig does this more specifically so comp time in zig is interesting because zig as a language doesn't have runtime type information so for example in javascript python also in go you can ask questions to the program running at run runtime about its types c programs on the other hand don't have a runtime and they don't have runtime type information usually it's not always the case but usually runtime type information tends to go hand inand with an actual runtime of the language so for example in python you can create new types at runtime you can do introspection and so having a runtime that can yield those dynamic properties to you usually benefits from having runtime type information c doesn't have those facilities because like a struct in c at the end of the day boils down to offsets in memory oh the struct is i don't know 16 bytes long and eight bytes in and like the first it contains two fields the first field is at offset zero and the other one is at offset eight and that that's the end of it so everything else has disappeared but it is useful to be able to inspect types and reason about types at least statically so that's what zig does zig does not give you runtime type information but it does give you come time type information so you are not allowed you're not able to create new types at run time but you are able to create new types at compile time by reasoning on other types and the way you reason on other types and then by the way this is also what generic does in other languages it's just that this is usually done with in other imperative languages this is usually done with a funky declarative syntax and a bunch of diamond brackets where you use diamond brackets to denote like the generic type and then to put constraints on it using like some kind of declarative syntax like i want type t to be i don't know to conform to interface a or interface b etc okay so you're using you're saying you're using comp time to do things like i want a list of a's but now i need to pin it down to be a list of eight8 bit integers yeah yeah okay because you can because the idea is that you are creating a new type by in by referring to another existing types another existing type and the way you do this in zig is not via this custom syntax but by using zig normal zig syntax so literally a list for example let's say you want to make a generic list and you want then to be able to make a list of integers a list of characters whatever the way you you implement this in zig is that you create a function called list that accepts a type as input which has to be marked as a com time parameter so like the signature would literally read fn list open parenthesis com time t column type so it's a comp time parameter named t of of type type you have to pass in a type and so that could be like integer or whatever and then this function returns another type and in the function body you create a fun you create a struct defin you return a struct definition that places that defines the payload field like a str probably that has the payload field of type t what you passed in which is kind of like generics work do but it's normal procedural zig code that gets executed comp time so for example you could create like an let's say you're making a simple array but the length of that array you want to be the result of other reasoning you could create a fibonacci function run it at comp time and and say that your array is long the 10th fibonacci number which i don't know how much it is but it's not going to be 10 it's going to be a bigger number right so you can call normal run normal z code it's going to be in interpreted by the compiler while compiling and usually you do have some of that in other languages it's just not fully general purpose they give you restricted language to specify properties and have they have their own special rules in z it's just you run the z code and and the compiler has like a concept of a execution quot so that like for example if you made a mistake and you try to make you make an array is the 1,000 fibonacci number but your fibonacci implementation is very bad the compiler after a while was going to tell you i executed like 10,000 loops and i and since we couldn't come to a conclusion i gave up and if you really think this is this is this is not like an infinite loop then you can pull up that number like the number of executions before giving up and and we're going to try again but so that way basically we the the compiler is how it deals like with infinite loops and undecidable stuff yeah so you're protecting against people making accidentally making compile time infinitely long exactly yeah yeah yeah and alan cheering has opinions on why you can't automate that yeah exactly so and you know what in our case i think it's fine in practice to solve the inability problem by just giving up because ultimately like you're trying to compile a program and you're not willing to sit there forever or arit along to have it compiled so yeah okay so this raises two natural questions and the first has got to be what's that like as a as a programmer because most of us are used to using like diamond brackets for generics do you prefer the zig way does it feel natural once you get used to it i think it feels insanely natural like you mentioned earlier lisp to me i by the way i also love lisp i've never used lisp professionally but like in university definitely one of my favorite subjects and and i also loved writing macros in lisp and it feels like writing macros in lisp or actually i would i would say it's even better than writing macros in lisp yeah the spicy opinion well so what i think happens with lisp is that people say micros and lisp are nice because lisp is an iconic language so the lang itself is the data structure that represents it it's the list the yeah it's the well the the symbolic expression that represents it which is fair but i do think that the the actual truth is that by having the program be a data structure you are naturally the language is steering you naturally towards treating the program as a data structure instead of it being a textual transformation and in fact you can write macros in list that don't generalize really well that like make assumptions about a specific like argument being an being or not being a list or being or not being quoted for example in zig you are literally comp time is more limited than what you can do with list macros just to be to be clear and that's also kind of by design it's kind of like of a 8020 thing like it gives you 80% of the power but it saves you from the 20% of really curs stuff that people will want to do all the time or or rather with 20% of the complexity which does save you from cursed stuff yeah in zig what you do is like the when you look at the type you literally call a function like you call at type info and you pass in a struct so let's say that you made a struct named person and person has age and name and then you call type info on person and what you get back is a data structure that contains like it's another struct that contains all the info about that type like among other things it will contain like an array that contains the two fields with information about how the field is called what's the type etc etc and so your meta programming is always going to look at the program as data and never as syntax and i think that's the key that makes come time weirdly weirdly natural okay yeah yeah it does remind me i mean the frustration with list macros was always that they were untyped and you could really cause things to explode in an even more spectacular way than normal list absolutely but the nice thing was that there was absolutely no difference between writing programs that worked compile time and run time because it was the same tools same language same everything exactly and it's the same for for zig because you do use the same syntax you like i have an example on a blog post that i wrote trying to introduce people to the concept of comp time and my favorite example in there is this idea that which is actually taken from real life experience i was writing a ris client for zig and in is you have commands like the query language of red makes you write commands that are case insensitive so if you write it upper case or lower case it doesn't matter so at some point in my client i wanted to recognize some of those commands so i wanted to check for equality between two strings and my idea was well to slightly very slightly improve the performance of the comparison function if i know that the constant string like the string literal that i hard code in my program that i used to check the user provided string against if i know that that one is always going to be uppercase i can simplify the comparison code ever so slightly i can just remove one branch from the comparison but now i have i want to enforce that when you call my equal function you always pass in the first argument the argument that you pass in like the first argument that you're passing is always going to be uppercase right so you want some compile time code check those strings correctly wr exactly now imagine trying to do that with diamond brackets stuff i have no idea if you can actually even pull it off here's what you do in zig in zig in the function body you open a comp time block well first of all you have to mark the first argument as always being available at comp time so people will be forced to give you it doesn't have to be string literal directly it can be like a variable name but ultimately the value contained in that variable needs to be resolvable at comp time it doesn't need to depend on weird stuff like the the network yeah so you open a comp time block and in there you have a for loop that loops over the string and checks that each character is in the correct range that's it that's all you do nothing weird you just use the language to check the stram character by character and if you find a character that is not in your expected range so in my case it was between uppercase a and uppercase z what you do is that you emit a compile error and like you can emit a compile error that says well you are supposed to give me a uppercase string and you didn't give me an uppercase string because this character is lowercase like you can even be precise and print the string and point out at point at the specific character if you want like you can craft the message whichever way you want and that becomes the compile error and so now users of your api not only the constraint is enforced so if they give you a bad string they will get a compile error but the compile error is also going to be designed by you so people will get a nice compile from the compiler that will tell them you're supposed to pass an applic string but you didn't nice yeah so you can start doing bespoke compiler extensions and you don't have to learn a new language to do it nope that's pretty sweet okay okay that gives me a good sense of the of the footprint of the language so there's one of the big topic i think we should talk about which is i thought it was really interesting the way that the zig project is funded right because every every language particularly in every open source project has a problem with getting enough work done because you've got to give up your day job if you really want a language to take off yeah and your approach zig's approach to funding is fairly novel tell me about that so zig is a fber 1c3 nonprofit foundation us nonprofit foundation like 5 1c3 is a thing in the us legal system and it's been kind of set up like a charity yeah it's exactly what we normally would consider a charity so it's tax exempt and you cannot pay dividends so all the money that goes into the organization has to be used to pursue your mission so basically you have to use that money to run the company you can take it out and buy a yacht with it or whatever a mention zig is not the only language that has this legal structure python i think it's also another 51 c3 but not all languages are that some other languages are a different type of it's still considered nonprofit but it's a different type of organization and which does have to pay taxes this is a what is usually it's 501 c6 like it might seem that there's not much of a difference between three and six especially because it's placed where we normally in like sman versioning we would have like the patch number so you you think oh c6 c3 whatever it's like they fix the bug in there no that's there's a huge difference well no always consistent with version numbers but my god lawyers they can really change the rules between versions so zig specifically leaves mainly off of donations so most of our income comes from people donating money to the foundation so that we can move forward with with the development of zig some money also comes from other things so it's it's it's only it's mainly donations from individuals we do have also a good number of donations from companies but i think in terms of like if you were to do a pie chart and and plot them both they would i think roughly be balanced so we we do try actively to keep a balance between our sources of income because we don't want to get in a situation where like one entity or like a very small number of individuals end up having control basically over the foundation maybe not directly like right not legally but if they control the money flow then ultimately they do control the destiny of the organization sly yes yeah and we do want to be able to say no to people we do have support contracts or rather we have one with uber because uber is using zig to cross compile they are cross compiling i think as of today all their backend services that require cross compilation because of arm servers mainly so like they wanted a while ago to be able to have arm servers and not just intel well xd 664 and so they use zig and and now they did the work to actually make sure that all their cn c++ stuff course compiles correctly and yeah so they have a support contract with us but then again it's not a huge chunk of our income and that is mainly to when it comes from from income so related to this also we kind of want to be independent and we're very serious about this like we used to joke that like like the because you know people sometimes say oh if you want to if you want this your language to succeed like you cannot make a successful language unless you are supported by a big tech company and we kind of beg to differ but also our standard offer is how much money whatever big te company wants to to give us in exchange for 0% of the foundation and zero seats in the board of directors but they do get zig in the end so they do get something in the end yeah yeah there is some qui proo but no power no power no control at all zero absolute zero and because we really want to make sure that we like the zig is a bdfl run project so also compared to other languages we basically ultimately have andrew who is the creator who acts as like the the ultimate decision maker it's not only him there's a core team there's people there's a process which is also very public like you can read proposals to change the language on the github and discussion happens in public and actually anybody can chime in but for example it's not a democratic process like if a feature proposal has a huge number of upates that counts zero towards the decision of whether to include that feature of or not in zig right yeah that usually that has some downsides but usually has great upsides for design consistency absolutely and it's absolutely in my opinion fundamental if you want to have your language stay small if you don't want it to eventually devolve into a kitchen sink yeah that's true and there was a talk by the creator of the elm programming language recently that i think dove into dove into this general concept i think in a very nice way basically i'm paraphrasing and i'm going to oversimplify the the talk is titled the economics of programming languages i think it's from strange loop and well it was given at strange loop i highly recommend it but the the bit that i'm interested about was said something along the lines of languages that are like 50501 c6 is like more corporate languages that end up having like a bunch of organizations come together into a like kind of consortium or like a trad association they basically look at the language as a marketplace they look at the shared infrastructure and all the commerce all the commerce all all the all the the business that this thing can support so which is reasonable right you look at a language like i don't know c or java and those languages do enable a certain type of commerce so from their perspective they want the commerce to be as much as possible they want to give the best market to their organization members and so if an organization member wants something because it helps them do their business you have a strong incentive of say to say yes and whoever doesn't need that feature they cannot use it they can disable it they don't have to use it right so there's no point in saying no to people if your goal is to enable the have the biggest possible market but as technologies we know that well there's some downsides from that right once your language becomes a kitchen syn then it's like it's not good over time so there's huge value in keeping your thing small and consistent and i think that's what you get by choosing 501c3 over 50166 or rather not going down the path of making your organization like a trades association yeah yeah it's interesting the thought that that one decision how you're structured as a company or as a as a financial organization will influence how you're designed as a language yeah has huge influence people programmers don't want to think about this stuff they like to think oh i just want to focus on the code which is it's a sentiment that i can understand frankly i would like to only focus on the code but the hard lesson that i learned is that the to have the best technology you have to get right the business side like the business side comes first every time you make a mistake there the technology will suffer it will in the long run it really matters in the short term it doesn't the long run it has a huge effect yeah yeah that's true okay well i'm very glad we diverted into comp time but to we should probably wrap up and let the listeners go to runtime how's that for a segue so yeah if you if someone wants to get started with zig i know you have lsp support you have a vs code plugin you've got all the quality of life things for new beginner but where should they start learning my recommendation would be go to the official website zig lang. org and there there's a learn section the learn section has like a guide on how to download zig install it and it also links you to some learning resources personally among those the two actually the three main ones that i would suggest is as a starting point the language reference the documentation that tells you about the language not the s library that one teaches you specifically about like syntax of the language and it's one page it's one long page like it's not an a4 or usl page but it's like just one page is not huge and you don't have to read it all precisely you can scroll through it but that one gives you baseline understanding of zig right then from there i would suggest if you don't have like experience with lower level programming and you want like a very smooth learning learning curve zigg lings is the best starting point in my opinion so zigg lings is like a community project where basically you clone the repo and you get a collection of very tiny programs that don't compile or that don't behave correctly oh okay yeah and the comments tell you how to fix them so you go one by one and you the comment will oh this program is supposed to print h word but it doesn't fix it and that's going to be super simple right you're going to right just fix the the string leal but then going forward the exercises will become very smoothly but they will will become harder and they will require you to understand more of the syntax you know i i think that's how i learned closure they had a similar thing called i think the closure cones it's like a series of failing pro small failing programs that you have to fix and you gradually learn the whole language it's a lovely way to learn a new language yeah zigging is very very very popular i would say it's probably the most popular piece of educational content in the zig ecosystem and the name zigg lings is also inspired by rustlings because rust also has it okay the same yeah thing and they call it rustling right nice i will link to both of those in the show notes but for now loris thank you very much for joining us it's a fascinating a fascinating language with more almost more scope than c which i can't it has pretty much all the scope of c it tries to fix all the things that c for some reason never wanted to fix like think about it why is zig able to cross compile c and a c compiler is not going to be able to give you that out of the box like we didn't get into this but like you get a z you get a z compiler and you write hello world in c and you can compile it from linux to windows try to do the same with clang it's not going to work i'm not even going to try yeah but it's insane so yeah the scope is all of c all of the things that c should have done that he didn't do plus a little bit extra nice that's enough to keep us busy for a while yeah loris thank you very much for joining us thank you thank you loris since we recorded that conversation i have been playing around with the zigging tutorial he mentioned and yeah i can confirm it's a nice way to learn i'm also planning to find time to pull out my old are doino microcontrollers because i've dabbled with kind of embedded hardware in the past i've never really been happy writing c i've loved using rust but it's been a fight to get things to compile onto the embedded hardware so hopefully zig is going to finally make me happy when i'm tinkering with soldering irons and wires and leds and stuff in the meantime i leave you with links to the everything we've discussed they're all in the show notes there is a wealth of information out there about zig how to learn it what it does extra features we didn't get chance to cover and i'll leave you with a fun easter egg if you install zig and type zig zen it will tell you why it exists i'll let you go and discover that before you go please do take the time to give us a like or a share or a rate or a review it is the easiest way to let us know which topics you find most interesting so we can do more episodes on those kinds of topics and if you haven't already click subscribe or follow catch future episodes and until the next episode i've been your host chris jenkins this has been developer voices with loris crow thanks for [music] listening