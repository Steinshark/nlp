why is golang bad for smart programmers an honest review of why golang may be bad for experienced developers okay so when i hear this i i feel i feel in my head that this is going to be one of those you know the these articles where it's actually like the inverse where we're gonna get duped you know what i mean it's gonna be like oh yeah a smart programmer's right cl you know clever code and golang makes it so easy to write production grade code so good you know like it's gonna be one of those things right so let's find out see lots of clappies i hate this image i'm not gonna lie to you this image makes me so angry okay it just does all right in recent months i used go for the implementation of the proof of concept in my leisure time partly the study of go programming language itself such as hello world programs themselves are elementary and not the purpose of this article but the experience of using go itself deserves a few words about it okay okay okay okay okay okay okay okay okay okay okay okay okay okay go promises to be mainstream language for scalable severe code classic that's the kind of production code i write severe code the language was created by goggle you know which is actively used to sum up i honestly think that the design of go is bad for smart programmers oh this isn't an ironic article i don't think golang designed for weak programmers hmm go is very easy to learn so simple that it took me one evening evening to introduce it and then i could write code productively okay so this is one of those articles the book on which i studied is called go an introduction an introduction to programming and go the book like the ghost source its code itself is easy to read has good code examples and contains about 150 pages that you can read at a time the simplicity is refreshing at first especially in a programming world full of overcomplicated technologies but in the end sooner or later the thought arises is this really so google claims that the simplicity of go is a compelling trait and the language is designed for maximum productivity in large teams but i doubt it i love that doubt doubt i mean what is that can you just throw out a doubt like that there are features that are either lacking or overly detailed and all due to the lack of trust in the developers yeah i don't trust developers either hey press one in the chat if you've accidentally written a bug in the last seven days go ahead one in the chat if you've written a bug in the last step that sounds like i got a lot of trust issues going on in in the stream today okay how am i supposed to trust any of you when you guys keep on writing problems okay i've done it today i did it today i fixed two bugs that i wrote today i fixed a bug that exposed an additional bug it was like bug fixed bug new bug fix the new bug success org wait back to status quo damn all right this pursuit of simplicity was a conscious decision of the developers of the language in order to fully understand what it was for we must understand the motivation of developers and what they were striving for and go so why was it made so simple here are a couple quotes from rob pike who is one of the sponsors of the go language the key point here is that our programmers are not researchers they are as a rule very young they come to us after their studies perhaps they have studied java c c plus plus or python they can't understand an outstanding language but at the same time we want them to create good software that that is why their language should be easy for them to understand and learn i'm not gonna lie to you i get or this person's coming from this rob pike fella but when you read it watch it like just just hold on just one second let me just change how i read that for for just a second okay let me just put on a different voice a little different costume here okay point here is that our programmers are not researchers they are as a as a very young and they come to us after our studies perhaps they've studied like java c c plus plus or python they can't even understand an outstanding language but at the same time we want them to create good software that is why their language should be easy for them to understand and learn i'm not gonna lie to you it does sound like a dick hole statement okay like when you when you think about what it's actually saying it seems kind of like a dick a dick thing to say but at the exact same time i totally get this idea which is let's create a piece of software that anyone can be successful in right away that's the more charitable read and you should always try to read things charitably okay which is hey how can we get anyone of any experience level up to running extremely fast that's how i'd like to pretend to read it you know what i mean go is for c go as c for dummies yeah it is it should be familiar roughly similar to c programmers working at google start their careers early and are mostly familiar with procedural language in particular the c family the demand for speedy productivity and new programming language means that the language doesn't have to be too radical i assume by radical he's talking about like that 90s vibe of someone wearing one of those hats with all the different colored triangles on it and has flipped up and is carrying like a skateboard around radical radical radical i'm not gonna lie to you so so i've been pretty much crushing out in zig lately you guys have been seeing it we've been doing many days of zig and by many days i'm probably up to like four or five hours on zig and i'm already significantly better at zig than i was at 20 hours into rust i'm already better at zig than i probably was 30 hours into rust so there is something to be stated about a simple language zig is a fairly simple language you know what i mean it's a fairly simple language there's not a lot to zig so it's very curious i'm curious how it keeps going i don't know what so rob pike in essence says that developers at google are not so good because they have created the language for idiots so that they can do something what an arrogant look at your colleagues i have always believed that google developers are hand-picked from the brightest and best on earth surely they can handle something more challenging hmm i can understand how you get there right we could we could understand how you could re arrive to that conclusion reading that statement being simple is a worthy pursuit in any design and trying to keep things simple as hard however when trying to solve or even express complex problems sometimes a complex tool is needed complexity and confusion are not the best features of a programming language i would argue that they're bad features i would argue that they're not even a feature yeah one of our features is confusion we've been working on the confusion engine for about six months now and the confusion engine is actually pretty amazing okay it uses an advanced ligma algorithm to really reach around and surprise any programmer they felt things they haven't felt ever because we all know we are dealing with arch users okay but there is a golden mean in which it's possible to create an elegant abstractions in a language that is easy to understand and use this is gonna be a rust article isn't it due to simplicity go lacks constructs that are perceived as something natural in other languages it may seem like a good idea at first but in practice verbose code comes out the reason for this should be apparent you need to make it easy for developers to read someone else's code but in reality these simplifications only harm readability there is no shorthand and go either a lot or nothing okay for example a console utility that reads standard in or a file from command line arguments would look like this all right we're gonna do a little bit of flags get some flags we got ourselves a little bit of a string a little scanner a little error if the flags are greater than zero we do a little open if it's not if it's not nil we're going to log out that fatal crash the program else we're gonna grab a little scanner we're gonna hit the standard in we're gonna go in here and grab the text from here if there's any errors we're going to be done we're going to log that out else print the text okay that was incredibly simple that might have been the easiest code i've ever read in my entire lifetime he said long i'm not sure what's long about that declare a couple variables check for the conditions handle error what this is literally like the only thing that could make this smaller would be that you have to have this as a handleable syntax it's a lot of white space yeah people add a lot of white space you could remove that white space right no i mean you don't need any of this white space some people like white space well this code tries to be as general as possible go as forced for boss that gets in the way as a result is a lot of code to solve a simple problem for example here's a solution or to the same problem with a not so known d-lang we're getting a wild dealing okay here we go source args is greater than one we do a file else standard in line by line join write it try catch that's because this is like the worst see the problem is is that this right here is actually hiding a huge amount of pain in the asses okay this hides at just a giant pain in the ass second off why is there a bang here i don't even know what the bang does okay okay i actually have to go and research what this word means whereas in this previous one you didn't have to research what any of this means right you can just you could just guess this you don't you don't even know right unless if you have someone that knows the de-lang this is not easier to read this is this is i would i would argue this is effectively no different in my head other than i don't like this control flow i've never liked to try catch control flow return errors by value is the only way but i mean yeah sure this is a little bit easier to read but i mean this is an exceptionally tour statement i'm not i'm usually not a huge fan of that also lacking of types is really bothersome to me i hate autos in general i hate autos just because i've had such bad experience with it now granted if this has a really good lsp then i wouldn't hate anato but this feels like i could hate it right if it's anything like the c if it's anything like playing deez nuts it is awful all right oh and who is more readable now i'll give my vote d ' okay hey the man likes the d okay it's not a big deal okay some people preferred the some people don't all right it's that simple it's code is much more readable as it it more explicit describes the actions d uses the concepts that are much more complex alternate function calls and templates then go well see nothing really in here is saying nothing nothing up nothing that i read here is that much different other than the fact that he could use a ternary right is that what he's saying is that ternary because he uses a bunch of he like alternate function calls and templates he's using a lot of words that i i don't really understand what they mean therefore i feel stupid therefore i'm getting really upsetting i'm getting i'm getting really upset but i mean this is just the same ternary statement except for you handled the error in line as opposed to throwing it out in the exception right there's actually no difference between this code other than you got to realize that there could be an error here maybe an error here right you don't you just don't even know that there's there's multiple places for errors right you just don't in this statement you don't know what errors in these statements you know exactly what errors you know exactly what airs right it is it is slightly different i guess in one sense you're hidden right ternaries are for betas could be copy hell a popular suggestion for improving go is a generalization this will at least avoid unnecessary copying of code to support all data types for example a function for summing a list of integers can be implemented in no other way except as it's copy pasta let's see of its basic function for each integer type there is no other way okay so this has been fixed with basic generics right this article is obviously just right before generics must have come out because this has been effectively taking care of this problem at least yeah this is now fixed and that's fine right right in this example let's see and this example doesn't work for science types this approach wholly violates the don't repeat yourself principle i don't necessarily believe in the don't repeat yourself principle i think a lot of people see code that is extremely close to each other and try to make some sort of meta function that like makes it all work together and then you end up with code that has like a lot of if statements and it ends up becoming what i consider a lot more confusing often i find that dry people that drive towards dry towards it at the cost of like abstraction and it's it becomes very difficult premature abstractions is the root of all sorts of software woes okay simple elegant and straight to the point is this a d article i haven't had the d in in a long time here is a function reduce for template type and predicate this again more difficult than the go option but not so tricky for smart programmers to understand which example is easier to maintain and more comfortable to read i really don't get this right ln at the end so it's kind of interesting right seems kind of weird to have print debugging as like a first class member that if you just dot it just it just happens all right terry i don't i don't like what you have to say okay terry you're over in here saying weird stuff okay check guess what hey prime can we make out okay hey it's not how that's not how people responded here okay you don't come in here talking to me like that okay i have a beautiful wife all right a beautiful wife theory and my beautiful wife would not appreciate such advances in this chat all right you got that are you feeling me dog karen can we can we do a little psa a little public public service announcement a little public segma announcement that i will not be making out with any of these startup interns okay just a general rule of thumb as ceo ceo ceo ceo and chairman of the board of the startup i'm just not into making up making out with the with interns okay at least director level everybody knows that all right type system let's see as they read this i suppose go programmers will scream you don't do it like that with the foam in their mouths well there is another way to make a generic function in types but that is completely breaks the type system i agree this is harder to read i'm not sure what i'm reading here i'd have to take a little bit to understand what interface interface interface interface interface interface this is what i usually call an attempt to make the worst code possible to make your own argument to make your own argument what this is is this is a in interface which is some sort of array or something a memo for cast results is my guess a function that takes in two items probably to add them together right and then returns out an interface of similar amount and this total function returns out an interface it is right memo boom public reduce list zero funk interface interface interface memo int plus right this is okay yeah so we we we got this yes a generics literally solved this but this was obviously written before generics this implementation reduced was borrowed from an article idiomatic generics and go well if it's idiomatic i wouldn't want to see what non-ideomatic example oh god usage interface is a farce and in the let's say and in the language it only needed to bypass typing it is let's see it is an empty interface and all types implemented allowing complete freedom for everybody this style of programming is ugly and that's not all for acrobatic stunts like this you'll need to to use runtime reflection even raw pike doesn't like individuals who abuse it as he mentioned as a talk i actually do agree that i think interface when i see this i get pretty skeptical right i don't like that usually if you're using interface it's because you don't have the power to do generics right typically that's that's how you get rid of that you should runtime type checking is always just a really bizarre activity to me right it's it's the lack of a good enum yeah it's pretty much a lack of a good type in enum system generics and enums right it is powerful tool that must be used with care it should be avoided unless strictly necessary i would take d template instead of this nonsense how can someone say the interface is more readable and even type safe the grief of dependency management goes a built-in dependency system built on top of the popular vcs hosting is this github are they trying to say on top of the popular vcs is he trying to just say github without saying the word github the tools provide provided with go are aware of these services and can download build and install code from them in one fell swoop but it's not even github right it's actually more than one it's just git in general right wow this is great there is a major versioning oversight indeed you can get the source code from services like github or bitbucket using the go tools but you cannot specify the version is that true i thought you could specify it in the mod in go mod can you not do it in mod i thought there was a versioning thing you could do yes you can nowadays what is a days like in the last year two years or ten years or when when did go ahead i forgot what go added modules it was like in 2016 or something like that i'm pretty sure you can do that january 1st 1970 classic it was like 2017 yeah okay okay you can do it in mod yeah like four years-ish yeah that's more than this article okay again simplicity at the expense of utility i'm not able to understand the logic of such a decision just because you don't understand the feature after asking such questions about fixing the issue the go development team created a forum thread that outlined they were going to get around this issue their recommendation was just a once copy the entire repository into your project and leave it as is what the hell are they thinking well yeah that i mean that is this real okay okay hold on let's see yeah okay who is let's see i want to just see someone saying yep that's how we're gonna do it anyways i don't want to read that i don't want to read that the author's wife i ran off with a go dev oh 2015 yeah that's old i think i believe they fixed that right yeah i do agree that this is i mean when he says this what he's missing right here is like any historic c c plus plus potentially even zig development is that this is kind of like how a lot of versioning happened for a long time in software right you have some sort of vendors library and you build out your vendors and so it's not surprising that that this is how go happen to be girls just like oh we don't need any of that and that's that right get some modules yeah dude get some modules are a pain in the ass but this is kind of where they came from i think in my opinion go was developed by people who have used to see all their lives and by those who did not want to try something new the language can be described as c with training wheels there are no new ideas in it other than support for parallelism which by the way is excellent and this is a shame you have excellent concurrency in a barely functional limp language another creaky problem is that go is a procedural language like the silent horror of cu end up writing code in a procedural style that feels archaic and out of date and outdated i know object oriented programming is not a silver bullet but it would be great to abstract the details into types and provide encapsulation what the [ __ ] i thought it had strucks with properties and receivers isn't that literally level one you have classes with properties and methods and you can make them public or private is that not like the fundamental basis of just like a type system structs and interfaces the problem is this man's had too much d okay this is your brain on d okay you have too much of it and this is what kind of articles you're gonna write okay i'm just saying this is what happens go is designed to be simple and it excels at that goal it is written for weak programmers using the old language as a template it comes complete with simple tools for doing simple things it is easy to read and easy to use it is incredibly verbose lackluster and bad for smart programmers to be real i am happy and i think it makes me want to use go more okay because i don't know if you know this but have you ever had the deal with really clever typescript code have you ever had to deal with real clever react code have you ever had the deal with real clever any code that allows you to be clever it's awful it's awful and the moment you at the refactor it's not just like a little refactor it is a huge refactor right it is hard it is awful and i hate it and so it's like this i don't want smart programmers in some sense this because it was given the fact that a simple language is not good enough for a smart programmer makes me think you want clever concepts and sometimes clever concepts just take too long to thoughtfully you know to get through there are times where there's clever problems that need clever solutions right i bet i you know here's a good example if you've never done request duplication on cash keys it's really really hard to do like if you have the ability just to create like say a shaw 256 or an md5 and throw that into a map and say hey is this request currently running well i can just you know leech off of that yeah it's easy i get it but if you have to do something more complex than that where you have two requests that are asking for a bunch of data and they may have some overlapping data it is really hard to do request deduplication it's a non-trivial problem and it requires a fairly clever algorithm it really does and so if you haven't done it i'm just saying it's fun time it's a fun time i've had to do it i did it took a long time to get it really correct and it took a lot of unit testing i know unit testing a lot of it took a lot of thought to get that stuff kind of correct and so i get you need clever code but this whole this this article is just not i'm not gonna lie to you i don't like it i don't like it i don't like this article okay i think goes a great language i think go is one of the best languages we've had in a long time and the reason why go is such a damn good language is that anyone can program it and be moderately to very successful and that's very very very very very important right if you can get anybody to be up and running and making your product better quickly to me that's a w right it hits a very good sweet spot which is i wish it had more but you can still do a lot one thing that i just love about go is the concurrency i love the channels yeah the channels there's those four on the the four hard cases of channels in which you use that one library to avoid the four hard cases of channels and boom everything is easy but besides for that it's just like why why not i'd be just fine using go on a server i have no problems would i'd rather use another language if i could write it from scratch maybe you know i'd have to really think about who's the team coming in who am i trying to hire what am i trying to do i don't know if i had to just simply get going as fast as i could and i didn't want to use typescript i'd use go even if i die and i barely no go but i know within one week i'd be able to travel faster and go than pretty much any other language and i'm okay with that i just think typescript is a piece of [ __ ] that's all i think that's what i think okay that's what i think all right as someone as someone who programs in typescript probably more than most people and i know probably more about typescript than 85 percent of people in chat typescript is a piece of [ __ ] javascript sucks the name is the primogen flip can you zoom in flip can you can you zoom in flip zip zoom flip zoom in right now okay hey hey the name is the primagen