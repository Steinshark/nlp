i work in the functional programming lab here in the school of computer science   we're interested in finding programming languages and techniques for making it easy to write pretty programs and we believe functional programming is the way to achieve that functions are quite simple in the way you specify them because it is easy to put big systems together using small reasonable functions but then the question is, okay,  we talk about functions in the mathematical sense and it's easy to understand how you might write a function to, say, compute the square of two sums or something like that   uhm but, can we also use it to write say interactive applications, or games, or musical applications, that's not too clear then. we have an application here, it's called the arpeggigon, it's patterned after something called the reactogon which to say is a so called chain reactive performance arpeggiator and this was implemented using functional programming and then more...specifically, a variation of functional programming called reactive functional programming it is tailored for doing this kind of interactive applications ok, so now that's one way in which we can do write games or animations or musical applications in a functional language. brady: i'm liking the sounds. do we need all this equipment to make this work. nilsson: no it's all sort of midi based. so we can just make ... connected to a software synthesizer for example. and then everything can be contained in the laptop. but because it is midi based you can also use it as a component of a larger studio setup for example. brady: now i have seen applications like this sort of thing in the music world before. so what's new here i suppose? why would somebody consider going down this route. nilsson: well, the thing is that time is of course central to music, right? and indeed two kinds of time. we have both continuous time and discrete time. so a musical note might start at a very specific point in time. but if it has say a crescendo or accelerando or something that takes place over a period of time gradually changing. and writing an application like this for music, it is a nice to have a language in which you can express aspects about time in a way that really fits the application domain and functional interactive programming supports this kind of what we call hybrid systems both continuous and discrete time aspects okay, in a rather high level way so it's easier to write this kind of applications so the arpeggigon is based on something called the harmonic table the harmonic table is this kind of hexagonal grid musical nodes are placed on this grid on each direction has a specific musical interval so if you go north it's a perfect fifth if you go north east it's a major third and so on and so forth brady: just so people if they are not that musical understand the idea of this is that harmonics and things mean that it'll sound musical, it won't just... nilsson: yes, so for example if you play a note and the perfect fifth and a major third we get a major chord which sort of sounds nice together it's very easy to play sounds together it sounds nice if they have this kind of layout brady: can you show us what that would be like on a keyboard? nilsson: you mean here? well, a major chord on a keyboard would be something like this, right [synthesizer plays major chord] what's mostly interesting here is that we have this two-dimensional layout so, we can use that to sort of for example implement a kind of pinball game if you like so we can place these tokens or counters on the grid and this, we have a few different ones here, meaning that can do different things so that thing there with the dot that's a start token so when we press play that's going to put the ball on the grid and shoot it off in the direction indicated with the arrow and the other one there is a ricochet token and whenever the ball hits it's going to sort of bounce back in the direction of the arrow and whenever the ball hits the token it's going to play the corresponding notes. if i start this you will see [musical tone] this ball is bouncing back and forth and you get a kind of musical pattern there, right and we can even, if we want to, we can even modify the layouts dynamically, so you could imagine performing with this if you wanted to we could put more start counters onto the grid now, with a different distance between them and that means if i hit play here we are going to get a more of a polyrhythmic pattern we have gotten two different patterns, two different lengths playing at the same time brady: so they go out of sync? nilsson: yes, and then in sync again, right. and we can continue playing this game i can place a few more of these ones up here and the last one there and then we press play and that's quite nice, i think at least - depends on your musical taste i suppose but i like it. brady: and are all of these guaranteed because of this pattern in this layout to be musical; you couldn't make a cacophony, or could you? nilsson: i guess "musical" depends on the listener, right? but it is certainly a lot easier to make it musical because you have these specific intervals, absolutely, yes. brady: and could people play with this themselves... yes, this is free software, it is available online, you can download it and play with it. right now it is a bit rough around the edges, but we are working on it to make it more polished and easy to use. brady: why is it...you mentioned time, let's try and clarify that then why is it easier to write something like this in your functional reactive programming rather than say, java or... nilsson: right, so the thing is that in functional reactive programming or frp as we say, we have a number of language constructs that deals with time directly. and in both continuous time and discrete time. so if we have these elements at your disposal, you can express in this case musical ideas much more directly than you could in, say, java or c. obviously depending on the specific context sometimes you might want to write a piece of c code or whatever and obviously if you work hard enough in c you can maybe implement this kind of support in c as well, right. but here we have done this for you in that sense. and in a very principle way which makes it fit for a functional programming context. brady: can you see other applications for this, other time-critical things? nilsson: it's been used for games, for example and the ideas of reactive programming is seeing increased use for banking applications and things and whenever you have this system and they sort of communicate, you can view these communications as signals over time and then you can sort of process them using frp-like ideas so it's a quite big takeup. now frp is not just one system, it's a lot of different systems as it is more of an umbrella term and depending on this; exactly what to do, there are different implementations of frp that are more or less suitable but the idea as such has really caught traction. um, and in particalar in a distributed setting it is important that that everything is purely functional because if it is not fully functional then it is very difficult to handle the side effects - but if everything is pure, then every node in this system has a function and they communicate by signals. it is a very good fit for very complex distributed systems brady: so is frp a language or are the languages the...? nilsson: um it's a umbrella term for a number of related languages, let's say. brady: what's next for this project, then? we would really want to make it into a tool that people can use for example in a large studio setting like this because we think actually this is the only software implementation of of the reactagon that we are aware of and if people like to compose music in this particular way i think it could be a quite nice application, ignoring how it is written, just for an end user to use. brady: what, you did mention this rectagon, i mean what is that, how does that look normally, is that a piece of hardware or..? nilsson: it is a piece of hardware, yes, you can google "rectagon" you'll find it on youtube and see this big, impressive table with lots of hardware on it. and you can... there are these physical things you can place on all over the board and interact with it. that's very cool but this is easier to use, obviously. > right, we've done b we can count that as done. so, c next right, so we are here we can't go to s we can only go to l, that's a nice, easy one so i need to find l so l goes to c and it's three plus two, it's five so l comes in just underneath a, like this.