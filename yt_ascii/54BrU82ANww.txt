today we're going to talk about interrupts it's basically a way that your programs can respond to unexpected events events that might come in at any particular time during a program's execution so someone pressing a key on keyboard putting a usb stick in a slot a mouse click code needs to be able to detect these events and respond to them and interrupts are a common way to do that we're going to demonstrate it on an arduino because that's uh a bit simpler than than using an actual pc for it so we've got the uino uno and just a switch and an led and we want to be able to toggle the led so it's on it'll go off and if it's off it'll go on the way you might start writing code for that is you've got your main arduino loop if the switch is pressed toggle the led that's fairly simple but if you've got a bunch of other stuff in your program that say here we've just simulated and said that other stuff takes 500 milliseconds to run so you might be writing a load of data to an sd card you might be doing a bunch of complex maths or something that takes a lot of time and that lot of time means that sometimes we'll miss that button press so i press you relatively slowly it toggles but if i press it fast so it's unreliable it's unreliable yeah it's only going to pick it up if it happens to be executing this if switches press line when someone happens to press the switch is this a bit like one of those revolving doors that's always going round and if you need to get out of the building if you'll make it you got to go out got wait to get it get it just right this is called polling you could possibly go out and poll every single thing in the pc saying has this happened has this happened has this happened so instead we use interrupts and they're basically special signals that interrupt the the program that's running and the program execution jumps to a a special routine the interrupt service routine isr and that basically logs that that event has happened so that then the operating system can pick up the event and and handle it appropriately here's the same code so now we've taken the switch polling out of the loop so there's just our other stuff in there and instead in the setup on this line here we've attached an interrupt to the switch pin so that's going to our switch we want to call this function switch pressed isr and the falling just means we're going to respond to a particular so only when it's pressed not when it's released so can we run that code now and see how much more reliable it is so loading so now when i press the button it's responding every single time i can do it quite fast so is this always the way you do this kind of thing that any event that can happen at an unexpected time anything's happening really fast for for switches in mar controllers actually normally we we don't do this because user user press switches are comparatively slow and you and you can probably get away with with polling it but for lots of sensors out there they any digital data that's coming in you simply can't respond to it fast enough just by asking what's what state it's in for example the usb connection here if data is coming in from your pc it's ultimately coming into the microcontroller bite by bite so you're getting eight bits in and the hardware buffer that that those eight bits are stored in there's probably going to be another eight bits coming down the line behind it so you've got to get in there and store those in your pro those eight bytes in your program before they get overwritten so every time eight bytes comes in there's an interrupt and alduino does it all in the background but essentially your program your sketch execution is halted it jumps to a spe the special handler that takes those eight bits out and stores them in ram ready so then this the buffer is clear for the next eight bits to come in and in any moderately complex program anything but the simplest program you simply couldn't do that fast enough just by by pulling the pin it's possible but it takes an enormous amount of program time and it's and it's not extremely reliable so this idea of every time something happens that the program gets interrupted is is that how it works things everything has to stop i know these computers very very fast these days but does everything stop just to sort this out or certainly on on something that's got a a single call like the arino there's only one thread of execution yes that's exactly what happens you things stop you go to the interrupt handler that runs and then your your main thread of execution resume resumes so on when you've got multiple core processes going on and you have more than one mic controller doing things so in a laptop there will be many many processors so there will be one in the hard drive and one on the usb hub and all sorts of different places and they will all have probably their own interrupts and things software going on in there but at the simplest yes an interrupt does exactly how it interrupts the execution so a a good metaphor might be you're working at your laptop and suddenly there's a knock at the door that interrupts you and you have to remember where you where you are with your work you go and answer the door you handle whatever that is and then you come back and start working again and that's exactly what the processor has to do it gets to a certain point it has to remember all the stuff it was doing beforehand so it saves off various bits of data to various registers so it can know where it has to go back to it runs the interrupt service routine jumps back to exactly the same place in execution restores all those registers to how it was before and then gets on with the job so as far as your program is concerned nothing nothing has happened but somewhere something will have changed so a a new bite will be in a buffer or a a flag will be set somewhere that says hey this thing has happened you need to deal with it and interrupts are meant to be fast and simple and get in and get out quickly because they've interrupted the the main thread of execution because you're already in the interrupt so you can't interrupt an interruption but no some processes will will allow for something called re-entrant interrupts where you where you can interrupt and interrupt but generally you don't want to go down that road because it leads to