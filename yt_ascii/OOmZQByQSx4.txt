apparently this is a little bit of a new study coming in claiming that npm registry users download 2.1 billion deprecated packages weekly it's a lot of billions going on and of course for those that don't know i lost a beted i have blue hair so i just need to say that for this recording so you know okay anyways npm register registry users download deprecated packages an estimated 2.1 billion times weekly according to statistical analysis of the top 50,000 most downloaded packages in the registry okay okay deprecated arived and orphaned npm packages can contribute unpatched and or unreported vulnerabilities that pose a risk to projects depend that depend on them warned the researchers from aqua securities team nautilus who published their findings in a blog post on sunday huh huh you know i somehow i'm not surprised about this because first off this code is crazy okay what the what is this code what are we looking at right here this code is crazy who does it at least align their case statements in like descending order here look at this else if results switch type squirly brace the old else if switch statement this is crazy javascript developers who rely on open source npm packages for their own projects may not be aware of the extent to which dependencies on deprecated packages impact their work the nautilus team said in conjunction with their research aqua nautilus such an intense name has released an open source tool that can help developers identify deprecated dependencies in their projects npm publishers may archive packages rather than address security flaws i mean you know like that's that's like that's some open source energy right there instead of just addressing the problem they're like dude i ain't got time for this you know what archived i ain't i i'm not even going to look at that not my problem anymore open source software may stop receiving updates for a variety of reasons and it is up to developers maintainers to communicate this maintenance schedule to users as researchers pointed out not all developers are transparent about potential risks to users who de download or depend on their outdated npm packages aqua nautilus researchers kick off kicked off their analysis after finding that one open source software maintainer responded to a report about a vulnerability naus nautilus discovered by archiving the vulnerable repository the same day such such an alpha move that is just i just can't imagine getting a security yeah i can't imagine getting a security report on one of my packages being like by the way this is going to potentially ruin somebody else's business and my response is and for this reason i am out just just shark tank him the ultimate s i know by archiving the repository without fixing the security flaw or assigning it to cve the owner leaves developers of dependent projects in the dark about the risks the researcher said yeah that sucks huh aqua security researcher isa goldman il ilia il il ila goldman a member of the team nautilus highlight dude if they say the word nautilus i swear one more time they say they've said this word like' times highlighted how vulnerabilities in the open source supply chain can open the door for major cyber attacks a prime example of this can be the log for shell vulnerability which is not in npm but underscores the problem of using package that has a vulnerability and should be treated as deprecated cool yeah i mean i i like i agree i like how they they they bring up the most like one of the larger examples that have happened in a while you know using your crappy npm package this could happen to you you're like yeah it could it really could i don't know i think i think this is just a great reminder of like how much how how much do we rely on potentially really shoddy npm packages with that potential consequence in mind the aqua nautilus team sought to better estimate the reach of unmaintained npm packages in the registry more than 20% of the top 50k npm packages may have maintenance gaps the statistical analysis of the npm package deprecation and pump say both officially deprecated packages and other packages with an uncertain maintenance status due to having an archived or unavailable repository linked as the source commit unavailable repository let's go oh we got a graph coming up taking into consideration both deprecated packages and active packages that have direct dependencies on deprecated projects the researchers found about 4100 8.2% of the topped 50,000 most downloaded npm packages fell under the category of officially deprecation of official deprecation wow that's that's like that's a lot that's a lot of them that's that's a that's a lot of them does that just simply mean that the front end moves too fast it's kind of wild to think that the 50,000 okay you know you know it's another kind of an interesting thought to kind of kind of mle around in your head is that you're a new company and you go out and you pick some packages right you go out there and you pick some technology that you wish to base your stack off of right and you're going to now have to write literally thousands upon tens of thousands upon a 100,000 lines of code right you're going to have to get deep into this and so you pick out some packages and then two years later they're all deprecated because the technology you chose today just has completely moved on blazingly fast great great iio would send them straight to guantanamo could potentially i mean this this happens this like genuinely happens i've worked at like even the even at netflix a lot of the things we're using is is are old they're they're old because we're just not a brand new company you know we have to suffer with the decision someone made eight years ago however adding archived repositories to the definition of deprecated increases the number of packages affected by deprecation and deprecated dependencies to 6,400 12.8% oh my goodness orphan packages with unavailable non-existent repository source commits can also be considered deprecated due to the decrease ability to attract maintenance status view commit history and report issues researcher said damn look at this officially deprecated 4100 officially deprecated repository archived 12.5% officially deprecated repository archived and github unavailable 404 15% of the time top 50,000 most downloaded npm packages officially deprecated repository archived github unavailable 404 no repository linked 21.2% damn rip bozo that's one out of five man this is fine everything is fine extending the definition of deprecation to include npm packages without actively maintained repository reveals more than 20% of the top 50,000 npm packages can be considered deprecated credit aqua secur it's just it's so much it's like it's like it's literally like my github of abandoned projects right it's pretty impressive except for my percentage is probably higher including packages with linked repositories that are shown as unavailable 404 air on github increases the deprecation rate to 15% yeah we already read all that team nautilus estimated that under this broader understanding of package deprecation about 2.1 billion downloads of deprecated packages are made on pm reg stre weekly that's just so many downloads that's just so many downloads the problem stretches farther when considering the wide web of dependency some of these package creates such as officially deprecated request package which has more than 55,000 direct dependencies nice let's go that's a lot of people depending on a on a on a package that is is not even you shouldn't use anymore npm2 there's npm npm2 when yeah if you guys don't know if npm 1 was so good when's the npm2 it's already right here npm2 even better than npm1 fancy window shell install on sigin a everybody lov sigwin npm not properly managed oh everybody loves it developers can use the free dependency deprecation checker published by aqua security to begin identifying deprecated packages among their dependencies the tool allows users to set criteria for deprecation according to their preferences such as excluding packages with archived repositories from the search the researchers note that the tool is proof of concept and thus not entirely comprehensive but can give developers an idea of their deprecation status this is kind of interesting because it'd be fun i i actually kind of want to run it on on some netflix projects and see how do we contribute to this problem aqua security recommended that organizations establish deprecation protocols that outline their criteria for considering a package to be deprecated when react deprecated what do you do then what do what do you do then the team also urges organizations to allow update or replace deprecated dependencies whenever possible it is critical to acknowledge that deprecated dependencies may serve as an entry vector for an attack in this context github can enhance its users notification mechanism goldman suggests although npm displays deprecated messages these could be expanded into including include warnings when a package relies on a deprecated dependency man imagine if you tried to install anything and they did that like just imagine if you tried to install anything you'd be like npm install web sockets and it' just be like all deprecated you're like oh cool dude it'd be so many of them dang okay well i didn't know that i didn't realize it was this bad but i'm not like i mean the problem is is is something i guess the question i have to ask is because repository ar iived is archived considered deprecated i i don't think so i think something can be archived without i mean there's that there's that one guy who went told he had a security warning he was just like and archived but you can archive something saying that its state will just simply not change which i think is fine i think it's fine to archive if you don't think there's any more changes that are needed right and so archived could be a good thing hey careful what you use on npm i think this is just another reason to try to strive for low dependencies you know try to build things as as as simple as possible not just because npm hell exists but because you should want to build things as simple as possible to avoid a lot of these problems i don't think it's terribly hard choose a few things that you find vitally important and and and keep it that way you know what i mean the name is the primagen