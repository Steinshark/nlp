so, i think it's what we're talking about we're talking about multiprocessor systems then is that we're talking about systems where you have multiple cpus to write your software for so as people said as we talked about things like the keyboard have a cpu in them and all of the times we're like the atari or the amiga or even some of the original pcs to process the keyboard and then just send the data to the computer, but that's not usually a cpu that you're going to program yourself, write part of your application to run on in the same way most modern intel motherboards the management engines on runs on a cpu embedded into the chipset that's running on there and providing no one hacks it then you're not gonna be running your code on those. it's it's a cpu it's doing a task, but it's not one we're going to program with. if it's not the central processing unit. it's an additional processing unit. is it still a cpu? it's the central processing unit of that subsystem when we talk about cpu, we're talking about the central processing units a bit at the heart of the system doing things so people are rightly pointing out that we have cpus but we're not gonna write our software to run on them you can and if you look at some weird bits of software they would sometimes shove things down onto this keyboard cpu; i remember there's one virus on the atari st that did that to stay in memory and things but we're really talking about the real central processing where we're gonna write the software that's going to run to do the tasks we need and that's what we're talking about but there is a class of effectively processing units that you do find in machines that are running part of our software i mean the classic example of that would be something like a floating-point unit so these days our cpus whether it's an intel chip or an arm chip or something often have built-in support for doing floating-point maps i adding 3.1415926 to some other random number and so on after they're built in support for that but they didn't originally if you look at the original ibm pc, i want the xt behind me so let's take the lid off this while we're doing that so got a screwdriver built like a tank so inside the original pc and if we look just down here next to the power supply we'll see that if i take this card out it's read-only the serial port at the moment we can see what's going on ht 250 serial card eight bit. i suppose said it wasn't called that then so if we look down here we'll see we've got on the motherboard an intel 8088 cpu. that's the main cpu in the original pcs what all your pc is easing now derive from whether it's a macintosh or windows machine as oh they all have a chip which pretty much still boots up like the intel 8088? did from 1983 but if you look next to it, you'll see there's an empty socket with nothing plugged into it and that was deliberately done there for two reasons one where they designed the 8086 or the 8088 they deliberately built it in the way knowing that they might want to add support for what's called a floating-point unit or fpu which is what goes into that spare hole there and the fpu was a chip that you could buy and put into the pc or put into any machine to have support for an after you to handle the floating-point mathematics so if you wanted to do add floating-point numbers together you could either do it by writing the software add the two numbers together or you could do it by having a floating-point chip inside your computer and the floating-point chip would then add the numbers together and the advantage of that was you could design the floating-point hardware to run a lot of faster than you could just write the software to do with the same speed so you can build dedicated hardware to add floating-point numbers together in the same way. you can build dedicated hardware to add individual numbers together, which is what's inside your cpu so when they designed the 8088 chip and what the 8086 chip they left support him for this and so there were some instructions which have us if the opcode for that instruction started with specific binary pattern would allow a floating-point unit in the system to take control reading the values that are accessing from memory so the cpu would work with the floating-point unit to load the version from memory and then the floating-point unit would go off and do the floating-point calculation in parallel at the same time as a cpu kept money doing into your stuff and so you did get some sort of parallel pricing, but it wasn't a general-purpose process at this time all it could do was floating point stuff if it needed to access memory it was the cpu that started things off there was support in that to actually do some fetch further values and so on using direct memory access but in general it was reliant on the cpu to do a lot of the things so it's all supported the cpu but gave you a significant speed boost compared to doing it all in software the nice thing was is that the cpu if you run those instructions would throw an exception so you could write software then catch them implement those instructions and software but if the cpu if the fpu was present it let the hardware do it in parallel so you could get the best of both worlds you could write the software to use floating point maps. don't worry about the floating point unit being there. if it is there you could then take advantage of it now the reason why the machines shipped with an empty socket is because the empty socket probably cost a few cents a few pennies to put in but the cpu cost about a hundred dollars, i think minimum if not more than that to put in the machine so if you were just doing using something like word processing on the machine you don't need a floating-point unit for most of the stuff you're doing you would you wouldn't bother but if you're doing something that did heavy number crunching then you could drop the floating-point unit into the machine when it was built and you'd have one that would work a lot better to do those sort of? operations now of course is the machines developed through the 81 86 the 286 or 386 or 486 the software developed and by the time the 40s it was popular we had sort of fonts being drawn from outline descriptions things which actually involves doing floating-point calculations and so eventually the floating-point unit got built into the cpus themselves so it can have sort of protesting units, which aren't there as general processing units, but they support the operations of the cpu do they take some of the operations that run on the cpu in software and they don't add any new functionality. there's nothing that you can't do without them but by doing it in hardware you get a speed boost by doing it in the case of the floating-point unit on the original pc or you could get the same for the sort of motorola machines you could perhaps get a hundredfold increase in the speed up to do those floating-point operations everything else rather at the same speed but for the floating-point, operations in about 100 times faster which of course meant if you've got a lot of them you programs around about 100 times faster if you weren't using them you didn't get any benefit at all. another one, which is quite interesting, which you'd find in things like some atari sts and in most amigas is what was called the blitter chip and the bolita chip basically implemented what was called the bit block transfer routine or bit blit often referred to and this was developed at xerox parc in the 70s on the outter machine i think it was and it was basically a generalized algorithm for copying blocks of memory round particularly in the way that you want to do raster graphics one of the things that both the amiga and the atari had and the only reason i'm looking at the atari here is because it had it as a separate chip on the motherboard which is annoyingly under the network part atari developed another chip which implemented the bit block transfer algorithm because he vantage was then that your main cpu wanted to copy a bit of memory was set up this chip will just appear as an i/o barrel and say to this copy this bit of memory from this address to this address combined with what's already there using this sort of combination and you could do some very fancy graphics effects, but the advantage was whereas on the implement in software you had to read the instruction for memory that said load this value from memory and then load it into a register and then read those instruction says load that value from memory and it was loaded into it register and then do the combination and write the value back out this could just have a few hardware counters directly inside it that loading the value from memory loading the next value from memory combined them wrote them back out into memory so you could do it a lot faster. you could run every clock cycle doing some useful work as opposed to some of them having to fetch the instructions that were doing what we needed to be doing so by offloading it onto a dedicated support again, just like with the fpu. you're not doing anything. you can't do with the main cpu but you're offloading it there you having it run slightly faster, and then the cpu can get on with other things although in this case it had to wait for the british ship to finish it but it was still faster than doing it manually for all what the smallest of operations the amiga did the same thing you had a british ship along with a couple of other things which gave it the advantages in terms of graphics, of course the problem had and which a charlie found. is that as your cpu gets faster you also have to make the blitter chip faster or your cpu becomes much faster than the british ships there's no point of having on there so the atari tt for example, which is a thirty two megahertz 68030 as opposed to an eight megahertz, six eight thousand which also had a cat that 68030 also had a cache ran so much faster that the instructions would be in the instruction cache so the cpu could just fetch the data at full speed from memory and write it back with the combination done without the need for the blitter chip and so you very quickly you cpu gets faster you've got a more general architecture you can do whatever you need to do there and so actually the british ship became redundant in some of the atari is pretty soon after it was in lamented well, they didn't put a faster version into the falcon which can be useful in certain modes acorn on the other hand when they built the archimedes they're roughly the same sort of time as commodore amiga and atari st have the blitter chips they said well actually our cpus so fast that we don't need it. there's no advantage to it now but the same approach was taken with graphics cards in computers that you would end up with the graphics card having support to do some of the basic 2d operations that windows is wanting to do and so on so rather than doing them on the actual cpu you would hand that control off to the graphics card to do that things like copying the memory about perhaps drawing a straight line which you can very easily implement in hardware and so you've got this balance between do you you get your cpu to do this as a general piece of software? which you can change and update easily or do you hand this over to a dedicated piece of hardware where you can implement it in a way that's faster and so on. so for some things like the graphics things and floating points they very much now been taken over by dedicated bits of hardware if he's only delicately it's a to li harder and it more we get gpus which are effectively general-purpose processing units but they're very much configured and designed in a way that makes them very amenable to doing particularly 3d graphics processing but also 2d graphics processing as well and almost all cpus these days and desktop machines and laptops and so on have a floating-point unit built-in because we're doing stuff that needs those floating-point. so it makes sense in some cases to have hardware to do that in other cases it makes more sense to have it in the generalized nature of software sort of be responsible for cleaning it yourself you could be responsible for managing the house and things or you can employ someone else to do it on your behalf so you can employ a cleaner or someone to sort of clean the house well, then you haven't to do it yourself as some people might choose to do. it's the same with the computer