today i want to going to talk about the mythical man month it's written by a guy called fred brooks who's part of the ibm new york team in the i guess he must have started in the 50s moving on into the 60s and this was the era of ibm wanting to step beyond architectures that absolutely needed to be programming assembler they wanted a paradigm shift in writing operating systems although they still ended up using assembler for that they wanted higher level languages they wanted a big leap forward and the 360 series did give us several big leaps forward there is no question about it the mythical man month is a myth because unless you are very very lucky and it only happens occasionally men and months are not interchangeable now since it was first written getting on for 45 years ago now in 1975 i'm afraid there's no chance of getting it called a person month or anything like that so i am only following the actuality and i'm afraid that some of the graphs i draw will have men versus months but if you want to put personal power down there absolutely fine the era that you've got to project yourself back into which is a lot easier for me than for many of you is the 1960s and there was a really awkward situation that the basics of computer hardware at least were understood ibm computers solve in minutes problems that once took weeks months even years and what was understood was that having more memory cost a lot of money in a previous video i pointed out and two ibm salesman came buttoned up holding that one megabyte of ibm memory for the 360 series which came as a meg in a box for demonstration purposes but could be supplied in a more chassis mountable format later that one megabyte would have cost you 100 000 now fred was the leader of the team that had not only got to specify the hardware was it going to be six bit characters how much maximum memory could you have and all that they not only were going to specif by the hardware they were also going to try and move on from that to writing an operating system because they realized that this was classic 60s situation even ibm customers won't be able to afford to buy let alone air condition one of these mainframes per programmer it's going to be a big shared machine so we're going to have to give value for money and make sure that it's got a good multi-user multitasking operating system and there's another major task that has to be taken on turn of 1950 to 1960 is not very long after genuinely first generation machines were gradually getting how should we say outdated and think back ed sac 1949 one i'm familiar with it used basically the bordeaux code it was five bits two to the power five is 32. that's not too bad you say until you reflect that for your data you want alphabetics 26 and you want numerics 10 that's 36 slots gone already how do you get over it well you have what's called a shift character this is still here on keyboards or simulated keyboards we use today all of this was a known factor and the pressure then on all architects was shall we make a tentative step forward how about going for six bits and in i should say group discussions within icl within boroughs within every other ibm competitors oh an extra bit oh that's going to cost a fortune will our customers pay for that because you know adding that onto every single location oh it doesn't bear thinking about yes i think we if if we price it carefully we can get away with six bits and certainly again some of you may remember i think i referred to this earlier when i came to nottingham we were stuck with a six bits per character computer the icl 1900 series it had six bit characters and you could pack four of them into a word which might be able to hold a biggish integer although 24 bits isn't very big so to get even bigger agglomerations you had to as it were electronically link two of these together by the time you got to 48-bit words you were getting to a stage that at least you could do single precision arithmetic almost accurately enough to keep her engineer happy if you look up as i have had to do the details about fred by the way he's aged in his early 90s and for those of you who are going to make sarcastic comments in the comments no i haven't met him i'd love to meet him i really would it would be you know a great treat and a great privilege but fred a leader of the team who had been on earlier ibm 6-bit machines not going to have the power and penetration of this new plan series he said no no no no really six bits is not enough okay you could do the alphabet but you can't do the alphabet in upper and lower case which is what we want we increasingly want to be able to typeset stuff so we need to be able to distinguish between lowercase g and uppercase g and they really ought to have codes of their own and when you tot it up numbers uppercase lowercase some punctuation 2 to the 6 64 it's not quite big enough obviously all hardware people know it's unthinkable to have a hardware bite that is actually an odd number of bits that way does madness lie but we have got to be brave here let's go for the eight-bit bite and of course a bite meant in those days any agglomeration of bits that your machine deemed to be worthy of holding a character and i could just imagine fred you know have you gone completely off your rocker you know have you any idea how much this will cost and i think that my retort would have been well look they're ibm customers and they know they're getting the best this this isn't any a memory this is ibm memory and in a way i can see that if anybody was going to pioneer and do this it had better be ibm because they had customers that could afford to be alpha testers on this idea for them and to report back whether it was a good idea or not to shorten the story somewhat they did go for the 8-bit bytes but also what came along with that and i don't know again if it was somebody else on the team or whether it was fred or whatever also came up with the idea of as follows there'll be a temptation to put in or make possible an agglomeration of four of these eight bit entities that's 32 bits that will hold a very decent size integer indeed because on a 6-bit machine digging out each 6-bit character from a 24-bit agglomeration oh it makes me sure to think about it you needed bit shift operators you needed to shift left the six bits on the left into a vacant word as it was 24-bit word and then shift them back again and throw away the other stuff or do whatever and somebody on that ibm team said no we make the bites be addressable had i been the chief hardware man and i've probably had 50 fits because you are making the address bus be that much wider yeah you're basically saying no it's not you know i'm not pointing at one big thing i'm pointing at lots of smaller things individually however of course fred would say yes but once you've landed on that thing and don't forget a lot of our programmers and a lot of our customers use cobol and we if we make our characters be eight bits then all our character-based programming on which from which our bread and butter comes is immediately probably an order of magnitude faster almost than it would be on lesser machines because we've got the eight bit addressable bite so anyway he won the day and i think the the rest is history because looking up his biography now was amused around at the bottoms when people said fred what are you most proud of what was your biggest contribution to system 360 architecture and he didn't say making people aware of the mythical man moment he said no winning the battle that we didn't need a six-bit bite we needed an 8-bit bite and i was so glad to see that down there in black and white in a way the thing we're going to talk about for the latter part of this talk now he would have regarded i guess it's a very nice desirable side effect he decided in the 1970s to write an account of how we did it on the 360. but in a chatty accessible kind of storytelling almost kind of mode and right at the start and in various places in this book do make sure you get the 1995 20 years after version because it's got not only the original reproduced but it's also got an analysis of where i went wrong says fred brooks why did he make his name with that and what was it all about i have here a chart he plots out a task which is typically reckoned to be nine man months of labor and he said okay let's accept that see what it means nine man months what this means is that if i put one person on that task it will indeed take them nine months if i put two persons on that task then of course it'll halve the time won't it it'll only take four and a half months if i put three people on it it'll take one third of the time it'll take three man months and so on and so on until the limit point comes that if i can only afford nine programmers to put onto this task it will all be done in one month stop he says that is an idealized situation almost never realized in practice because it assumes that your nine people do not have a need to communicate with each other that these tasks are truly separable and in parallel a bit like picking tomatoes or strawberries or something like that you have your own patch you don't bump into anybody else you can pick independently of all the other pickers in the vegetable field something like that and he said this very very rarely happens it just isn't like that the situations in the lair below you in the hardware where you can get genuine parallelism like that like fetching bits in parallel since those bits are on separate wires and don't interfere then yes this sort of argument but when it's real people who need to consult then it goes more like this first he said let's take a look at the absolute polar opposite of everything being separated and everybody can do their own thing i do believe that this thing that is now on my left i think it's a rectangular hyperbola because the product of the x and the y numbers yields a constant number as it were nine times one is nine three times three is nine and so on he then points out he said your worst nightmare is to take on nine people in order to get a nine-fold increase you hope but unfortunately your underlying task is not fully and independently partitionable it's one of these horrid things where the person who does a little bit at the beginning and says oh that's my month now i want my money has to hand over the state of his calculation to the next person at all and you say well why can't the person hand it over earlier no no if it's one of these awful problems where you have to compute a magic number to be handed on to the next stage you can't hand it on until you've computed it so it's pointless hiring nine folks up front you're just gonna have to pay them furlough money while they sit there twiddling their thumbs because they haven't had the kickstart that their particular contribution so it's like a you know a passing on of a token in a real area if if you've got a problem that really is like that it's innately cereal from start to finish then you are in deep trouble you can pour men and money and material into it until you're blue in the face you won't get it below nine months worst possible case but then he said it's never quite that bad often let's go to intermediate possibilities on the next sheet now as you might imagine all that does is it takes our previous perfect rectangular hyperbola shifts it up a bit and you can see here the net result is pretty much what you expect you try adding men as fast as you can but it levels off higher than being down here which is the genuine asymptote where it's headed for the axis it doesn't do that and that's because there's inherent enough inherent serial communication there to shove the curve up a bit and you can't do any better than that so that would be the case for if you like an average program that a team might write with some intra-team communication if you get unlucky and you get a task that has got more complex communication you've still got time up here you still get men along here but can you see what's happening now that little curve i've drawn there is trying to get more and more like a flat straight line at the top you remember the diagram before last there's still enough parallelism in there that it doesn't quite flatten itself out into a straight line but you can see what happens you get some improvement and then you get none at all and you just head up towards the inevitable it's nine man months whether you like it or not so task with complex intercommunications can have a curve looking something like that and what he said was you really must bear this in mind all the time it's no use talking about men and months as if they're interchangeable and trade offable they're not one of the things i thought when i saw this is then there's the other thing that you've got to have the handover right yes that's right this person has to explain what's going on to the second person that's exactly right sean and i think he more or less in in different words says that this is another thing about adding manpower to a project particularly late on you spent so much time explaining to the newcomers who are quite talented just why this intricate structure was necessary before they could even start any programming that you'd have been better off not to take them on at all and so there are various homilies in here which say if you think you are underpowered on a project try and realize it early you can probably rescue the situation with more men and whatever if you recognize it early enough and take drastic action but don't leave it until it's one month away from delivery time and then have a panic and saying oh my god there's a year's work to go you know memorable phrase number two how did this project get to be a year late says the big boss and the answer is one day at a time they're all sending their data as well so now what we've got is a situation that wasn't handled by this concept of flow control what we're now going to need to demonstrate this in a second is that some methods log4j is like milk it's like water it's everywhere