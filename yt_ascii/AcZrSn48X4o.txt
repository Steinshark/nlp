so we've been looking in this computer file and the previous one and how when we press a key on a keyboard what actually happens to from that key press being pressed and the physical hardware? to the software say microsoft word displaying that on screen and the previous episode if you haven't seen i suggest you click the link here and go and watch now we saw what happened at the hardware side of things so we sort of left our story where the hardware and we saw how that depending on what the things these days said i'll get packaged up into a serial message which is sent to a specialist port is interrupted the cpu and now we're looking at the sort of the software side of things of what the operating system does to actually make this work just like there was many layers in the hardware there's many layers in the software so the first place we need to look in a modern operating system and i should caveat this by saying i'm going to talk in general terms each operating system with us windows linux macos, probably even cpm for people. i'm sure we're going to talk in general so yes, there'll be some organ systems to do something different there were some which merged some steps. that was something that expands some steps fight about it in the comments. so the first thing that there will be from this side. is that the hardware interrupted. there'll be a bit of software built into the operating system which actually handles that interrupt and probably map it to the right bit of software to handle where the heart what we should have hardware's generated it and eventually summing of that will handle this is a keyboard interrupt mapped through whatever is the usb the bluetooth the direct connection depending on how it works and says, okay. there's been a keyboard interrupt. i know how to handle this sort of thing and i'm then going to do it. so it'll get the data and it will say okay. this key was pressed let's say the letter a was pressed or the letter a was released, but you generally will get messages from the keyboard so the keys been pressed and this message to say that the keys been released so that then we'll get received by the device driver and these generally don't actually need to be that complicated you generally find if you look at the code say in the linux kernel, it's open source that the keyboard software for a simple keyboard like on someone on the atari st or the falcon. it just reads from a memory it's relatively straightforward. of course if you've got a usb or bluetooth keyboard then you've got to implement the whole usb and bluetooth stacks things are a lot more complicated but that's the point of the device driver it can handle all that abstracts it away from your program as a user. you just say what keys been pressed. okay, so we've got that data we're now in software. we know this key has been pressed. what happens then? well, you generally don't have your software say your word processor talked directly to that device driver partly because you'd have to write it for every single possible different device driver you might need do you've got a usb keyboard or a bluetooth one, whatever it is and so on you get then you get the point. so what actually happens is inside say a modern operating system there's a way of handling input devices keyboards mice buttons on your machine and so on that will handle these things and so when the keyboard device driver detects a key press it sends that message or is it generally is turned by that point and event to the relevant input device which has been created for that particular keyboard the other advantage of this is even having multiple keyboards connecting your computer quite easily and you can read them separately don't always have to but you could do that if you want to do so you'd have some sort of event queue inside your operating system that will and remember this is inside the operating system kernel so this is not talking about graphical user interface or anything at this point we're just talking about getting the message from the device driver into the user land where our programs are running and when the keys pressed it would send an event down like it would place an event into that queue saying this key was pressed. this is what the scan code was you could at that point convert that to a ski that i probably actually happened later in the stack probably happen in user mode there's no reason for it to be done there, but it could be done inside the kernel and so on unless you do inside the kernel the less attack service you got from a security point of view you probably timestamp it so you know when that happened and so and you put that into the queue and we imagine this as a boundary in your software between what we call user mode, which is where our programs are run and kernel mode which is where the stuff that wants to talk to the hardware and that things that keep things in control and somewhere on there you'll have some sort of transfer port and their event queue before the inputs would come from the device driver which gets the message from the keyboard and the software pop it into the event queue and then when the program over here read from that it would pull the first one off and get the message say this key was pressed or this key was released so we're now after the kernel we're out of hardware. we've gone through the device driver in the kernel we've gone through the kernels input queues and we're now in user mode and the software can ask what key has been pressed now if this was a command line process it would actually probably be talking to what's called a pseudo tele tie board a teletype type interface in something like linux or unix which literally emulate the alter of teletype? printers and keyboards and so on and the conversion from scan codes to ascii would be handled at that point in the implementation of the teletype terminal for a graphical user interface things tend to have a few more stages in there so what you'll generally have is some a program so on something like a mac, for example, your own called windows server, and there's equivalent things x for example on linux and in windows which handles the whole graphical user interface? so that's sitting there producing the displays and not working out which windows active and so on and it will be that point of the software stack that will get the key presses from the operating system. so that part of it the windows server let's just use it as a term will get the key presses and then it will look to say okay i've got this key press aids been pressed. and where do i actually send this to which window is receiving this? is it the word processor would running on this or is it going into the email client or is it going into a signal to send a secure text message or wherever it is it's going where's it got to go and in those which windows active so it will then say okay this is going to this this window is active we need to send this to this program. now. how does that happen? well again, it's similar to what happens here every graphical user interface program generally has at its heart an event processing message processing loop and basically the way they work it's sometimes explicit you sometimes have to code so if you program windows around 20 years ago you would write code which would have things like peak message translate message dispatch message i'm not remembering the names right functions in a tight loop to handle all those things if you're writing code on a acorn archimedes you would call s y wimpole and soul to do is to get the messages and base you can call that in a loop and then you get a message and dispatch it these days it tends to get wrapped up and things so it's actually hidden in library code and things but generally, it's still doing the same thing. so the window server will send an event to your program saying a key has been pressed in this window and so on it'll happen and again that by that point we probably convert it so still got the scan code there, but we've probably also converted it into the ascii code or the unicode code as well that will be handled by the window server because it can then localize it and do whatever it's needed knowing what sort of keyboard you've got connected and so on there's ways that these can be automatically configured so you'd actually have to physically tell it unless you want to so the windows server will package but at this point you won't use the same sort of event format that the kernel use it could but generally there's probably a more specific one which is tied in to which windows and things are being used that's then got into your program and you say hey, let's say with microsoft word these press the a key you then need to do in your program whatever you need to do in your program to update your data structures to say that whatever document we had before we now need to put an a at wherever the current cursor is in that and that depends on what how your program is written if your game and that you've got wasd for controlling movement when you press a well then you want to update where the player or the cameras position is on the screen at that point once you're into the user code the user program that we're interacting with what happens is up to how the program works it may be that it does absolutely nothing because it doesn't respond to that key. that's a simple case at that point we don't know what's happening is a black box it's the program but we said then what happens? at that point we still haven't updated the screen we've pressed the kini gun and it may be that there's no visual effect from pressing that key you could write a pro and where that didn't happen and then two hours later it put pops up a picture of tom and jerry on the screen to surprise you if you pressed the wrong key probably not going to write a program like that, but you could what's going to happen well, we still need to redraw the screen. so what will happen inside that say the word presser you press the a key we've updated the data structures to say we can now got an a in our document we will then finally say we want to redraw the current window. that's representing that document and what that'll actually probably probably won't draw it then and there well, it'll probably do is tell the window server that this this window needs redrawing and then eventually that will then come and redraw it and the reason why that happens is actually the window main redrawing anyway because you've moved the screen or whatever it is you brought that to the front and actually you can then combine the redraws and speed things up a little bit and that's pretty much the story of what happens when you press a key on a computer. it's quite involved what's fascinating though is i read an article that actually measured the latency the time it takes from you pressing a key on a keyboard to it appearing or having an effect on the screen and actually on modern computer systems whether it's windows mac or linux it's incredibly long compared to what it was like on something like the apple 2 or the bbc micro behind me on the apple 2 or the bbc micro it effectively. did it on the next frame read or within 30 milliseconds on a modern pc is significantly longer than that are all peas treated equally shift control abc are they all the same number one keypad f key. so there's very good question are all keys treated equally the short answer is yes and the long answer is no it depends where you get up to so implementation of the keyboard the shift keys the caps lock key the num lock key all handled identically obviously some of them have leds associated with them to light up when they're press or not generally, the computer will tell the keyboard to light those leds or not like those leds so you press a key and the computer sends a message back. thanks implemented in the keyboard. it depends on the implementation so at the hardware level they're probably identical in the kernel that probably identical i think you'd probably be when you get to the point of the windows server or the actual command line teletype terminal that it would actually be handled and again, if you actually look at the implementation of the operating systems, you can find out what modifier keys are pressed you generally don't get events for those keys you only get events being passed so that the keys being pressed but when you get that event, you can say oh ships pressed as well or ships not pressed and so you can work out what's going on. so the answer is yes, and no that time i was playing manic miner and i jump and i hit the key i had jumped it was the computer that got it wrong, right? possibly depends what looking the way it was implemented in things. i'm not going to comment on your game playing ability just leaves you had a commodore 64