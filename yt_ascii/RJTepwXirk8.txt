what is like the best starting way to get started with svelte probably the tutorial and we've actually just kind of relaunched the tutorial it's a little bit experimental still but do you want to take a look at that yeah let's do that that'd be awesome fire at your browser and go to learn.spel.dev spelled dot dev here i'm gonna i'm gonna probably move you a little bit just so it's it's easier for people to see does that mean you're kind of snuggling up against the fire look at that all right let's see so here we go we are officially here we're looking good all right can i make this texture this is yeah we're using monaco here i don't know that it's great for like zooming tech and stuff it may not work so what just happened is we we installed a node inside your browser and then in the virtual file system we installed v and svelt kit and all of that other stuff and we're actually running spell kit inside that that lower right window and so now if you make some some changes to that that welcome message they should get reflected in in the preview all right so one quick question before we go can you can you explain the difference between svelte and svelte kit again easiest thing is to compare it to other frameworks if spell is like react and it's kind of not but they do the same fundamental job that both ui frameworks then spell kit is like next spell kit is an application framework okay sorry so so like the ui oh keep on going keep on going keep on going i'm so excited so your ui framework is responsible for like isolated units of functionality it combines markup and styles and behaviors into one little thing that you can deploy in different parts of your app but that doesn't solve all the questions about like how do i set up my build process how do i do server-side rendering how do i add a router how do i deal with environment variables how do i load data like all of these things that are outside the the ui frameworks scope that's where the application framework comes in so that's what next does for react is what spell kit does first spell okay good by the way you called react a framework which i believe it's not a framework i mean that's absurd i think you're going to get a gun pointed at you and someone is going to potentially rich harris did not commit suicide is what we're going to be saying after this all right yeah at a certain point it's farcical to pretend that react is not a framework there we go i typed in hello it translated it as hell welcome to hell people all right there we go i type fast enough i type faster than it could update so i actually beat its typing cycle i can't get it again but there we go so we got hello so okay this is cool that's fascinating you might have discovered a race condition that we need to fix well this is why i love doing this stuff i love watching people use these things because like my partner who's not a programmer i i showed her this thing that we were building and she immediately broke spell kit like completely the whole thing just stopped working oh show me how you did that and we kind of tried to reconstruct the exact thing that she did that led to that error and she had found a bug in the framework that we then fixed and i just love doing this kind of user testing for exactly that reason i don't love doing it in front of an audience of 800 people or whatever because that's kind of embarrassing but it's still helpful well this is incredible i mean either way anytime you write a massive piece of software that's meant to take everybody's specific thing they want to build and generalize it to the point where anyone can use it there's always going to be a bug right bugs must exist by that very nature and so it's impressive how little bugs there are i think it's the probably the better thing to think about all right i'm ready so what what do we do here i can see right away that i can type html it looks like html but this isn't necessarily you know this doesn't impress me i i hope it doesn't impress you either disappointing i mean that's what we got that's it we got eight ones let's go so so this tutorial is split into four parts we've got introduction to spell introduction to spell kit advanced spell then advanced felt kit and if people are new to to all of this then i recommend like just going through the the spell tutorial and if you go on to the next the next bit then we're gonna see how to add some data oh to a component okay so it looks like i'm gonna have to build a little script tag nice i like the live updating errors does this come with them nope i'm pressing buttons does it come with them it does have them shortcuts in here can i can i enable those oh no i'm i'm sorry okay i i i'm not a very good typist without vim i mean also disable vimium because that will start screwing things up there we go okay hey i can't help it there's no vim okay stop making fun of me i'm gonna be typing slow here okay let name equals oh my goodness it always tries to take me over sveld there we go so we have spelled and so then we're gonna go down here and we're gonna change this to name oh nice autocomplete there we go yeah it looks like you might need to hit that little refresh button down there you found another bug all right there we go it might be the speed in which i'm doing things sometimes when you type really fast these things you know with uis updating and all that they don't quite get the latest date yeah it's also like this is a lot of moving parts involved here we have this virtual file system in memory and the main thread and then we're writing that to this virtual file system inside a web container web containers are the thing that powerstackblitz.com and then v is doing its thing it's sending a a websocket ping to the front end which is then reloading the page wow there's like a lot of going on and i like to be honest i don't understand all of it as deeply as i should but that's my excuse for for any any lingering bugs which which are on the list of things i need to fix this week that is a what i mean that is an incredible amount of technology i mean i hope you have a sequence number in there somewhere to thus get the latest one so you can put inside the the curly braces there this is just like a jsx expression you can put any any javascript oh yeah awesome can you put like you can do conditionals and all that stuff yeah yeah any any javascript so it's only it's only text nodes inside these these curly braces like you can't return an element because this isn't jsx we don't use a virtual dom or anything like that okay we're trying to make a function or anything like that okay cool yeah since you're brand new to spell why don't we just do the next tutorial yeah and you can start to see all right we can do a little bit of imaging right here right did you really just do this to me i did i really just rickroll you i don't know maybe i did well did i break through the entire stream that was a that was a nice moment everybody this has been rich harris he's been a lovely guest to have on that was fantastic i'm very happy that you have this in here chat's obviously liking it a lot that's a good move that is actually a fantastic move okay and so oh look there's like a little air or something right is that what's that oh no it's just follow the link okay so then that means we'd have to do an alt right a man dances he does dance okay oh cool so then you can even shorthand so anything that's anything that does this it takes the name of this item and compiles it so if i name this foo it'd be foo equals foo effectively yep okay very cool awesome i like that okay this is good i like it it's very very simple so far i'm gonna copy yeah the idea is that if if you know html and you know css and you know javascript then all of this stuff should be pretty familiar yes nothing here what the hell is that fun do not have comic sans on your computer so people make fun of my fonts all the time i don't install anything on my computer i have no idea what my current font is i don't know what font this is this is just whatever my system gives me i ain't got time to fiddle faddle around with things i still don't even know like when people say oh what font are using or even anything about fonts i actually don't know what it is but this is a very beautiful font that you've chosen i also love magenta no i i did not choose this i'm the same i i don't care what font my things are using when when people ask me what theme i'm using in my editor i'm like i don't i don't care doesn't matter whatever the current thing is but not having comic sans installed on a computer it's like there by default you must have actively removed it i'm pretty sure what's happening here is you're just being like such a first worlder right now because i use linux okay i'm not on a fancy mac a macintosh so me being on discount discount mac i don't have all these fonts okay fonts don't come for free you don't have comic sense you pee outside [laughter] in front of the ups guy too rich okay all right well this is this has been illuminating rich everybody rich great guest to have here oh now you're on this side all right let's go to nested components all right so i assume this is where we start really seeing something happen here where i actually can have what appears to be a new file right here which is this is another paragraph okay it's just html that looks just like html and then in here it looks like i can actually import something in right and then i can actually call this thing it looks just like jsx or something like that right oh nice yeah this is another paragraph there we go interesting so why didn't the styles apply in here the styles styles and spell skirts the component that you're writing oh you're very important with the css that belongs to that component and because you have this guarantee that it won't conflict with anything else on the page like it's not going to leak out and control other elements you don't need to have like baroque namespacing conventions you don't need to call it like like class equals foo underscore underscore my paragraph underscore underscore yeah like whatever the kids are doing these days you can use like tailwind and all of this stuff if you want but like a lot of the time people in felt just write their styles directly into the component okay is there a way to share it with like a component tree like are they can you do it like kind of for larger spaces so you don't replicate yes there's a there's a thing that we stole from css modules called the global modifier if you have a select it and you wrap it in colon global like colon global parentheses and then a selector then that is not scoped to the component that will apply to the entire page if you have a selector that does belong to the component followed by one of those global selectors then it will apply to every element inside your current component very cool okay i love that that's that's fantastic that's exactly that's a that had to be really hard to program i assume so that part not not so much i think the hard part is figuring out which elements you need to apply the scoping classes to to do like the minimal interference with with the dom so we don't just like add this scoping class to every element we add it to the fewest elements that we need to to make that work yeah and what we also do is because we have because we can see the markup and the styles together we can compare these two trees and if you haven't had a another class in there like you just add a new selector call it dot unused or something like that oh you mean on on like on on here like class unused no no sorry in in the style block oh yeah yeah yeah yeah yeah dot unused and we'll do and then just like put put whatever styles in there on set zero or inset zero it's the inset i i don't do a lot of css i suck at it yeah i have no idea what inside is but yeah we'll take that so you can't see it right now because we haven't figured out how to get the warnings from the back into the ui that's another to do but that that selector if you were if you had this open in your editor that unused would be it would have like a yellow squiggly under it saying you're not using this class you can delete it and when spelled compiles this component it just won't include that css okay in the styles so if if you've ever experienced this thing where you you build an application and you start adding css and then like you you can't get rid of css because it's fundamentally global by nature and and you don't know which bits are safe to remove so you just keep adding css over time and you have this like an append only style sheet phenomenon this solves that there are other ways to solve it of course like css and js is a thing but this is a way of solving it that results in no runtime overhead then you're just writing css the whole time oh really all right all right hold on let's see yeah i mean you need to have the the whatever the spell extension for the bim is i have yeah i have a i have spelled on yeah there it is okay so oh interesting it's not running weird okay i'll i'll debug that later i was curious about that i had it all installed maybe it doesn't run because i don't have it's set up as a project at all i don't know we'll find out later okay so this is fantastic so we have this we have nested stuff all right should we go to html tags yeah all right string this contains html takes why doesn't it work oh my goodness so what are these things called i don't know do we have a name for them i think we i think we do have a name for them but i forget what it is interesting okay so there must be there must be like i assume there's more than one of these kind of like declarations at the top that tell it how to parse these strings safely we do have one other that i can think of maybe there's more than one but yeah it's just a tag we call it a tag does this allow for x cross side scripting attacks it does it does you are responsible for making sure that you don't just use it blindly with unsanitized user input okay i'm getting just an unterminated template oh yeah oh weird it doesn't like that oh you know why it's because you have the dot slash script that terminates the script block even in a template string yeah yeah that's that's just a that's how html works if you have that string inside oh it will close the script plug so you need to like do angle bracket slash and then close the string and then how to like concatenate the rest of the the thing oh that's right okay so that you have to do yeah okay so you'd have to do kind of some funny things right here oh yeah yeah there you go does that get that do i get the or did i get the log out did i actually am i a hacker now maybe yeah if you look at the console log then you're going to see like a reams and reams of web container output and stuff okay i don't know i'm using firefox i have no idea how to do things in firefox i'm always terrible at it yeah i guess i can just alert right there we go solve whatever okay well that's fine this is exciting though this is exciting okay so i kind of see the the basics of svelte right now but yeah three activity is always the big question because this is like what makes something easy to use or terrible to use all right so here you can just create a button and from there i can just call a function that just exists right so i can literally just go on click so i'm just using oh no it's on colon click on on column click so why'd you go with the rename right here also on click is actually an html attribute yes if you're if you're writing regular html then you would do on click and then you would provide a string that gets turned into a function which is like a a wild way of doing things because you don't have any modularity that's just like in the global scope and it's and it's a terrible way to to program because like you'll have all these global things that that club each other so we we don't do that this is all inside your module you're calling the increment function and it's only applying to to this component oh yeah you've already solved it yeah right bml okay you have html do your way to success i have i'm successing hard with html all the days yeah i mean you don't need to return count there there's oh really there's no yeah all right so you're just you're just changing the state and the and the state is is being reflected do we get like so we don't have an api for changing state we don't have like a use state thing we don't have signals like we're not doing any of this stuff you're just declaring regular javascript values and then you're assigning to them you're a sat you're assigning them or you're mutating them and that causes the component to update interesting so so solid.js would be the one with signals and their goal there is that you kind of prove you you provide points of mutation and then you can pass these points mutation around and anyone can use them and do something with them and thus cause like the next render whereas yours is more scoped like to this file this is kind of your playground of mutation yes so we do have something that is value analogous to signals we call them stores and these are objects that you can pass around and they have a subscribe method which makes them very similar to rxjs observables in fact they're interoperable with rhjs observables and you can reference the value of an observable in your template very similarly to how you would reference the value of the signal but for for the majority of component state that is just a value we don't make you sort of do this ceremony of of of creating a framework specific representation of a value it's just javascript okay okay so so would it be fair to say that a lot of us felt the the goal is to drive it as close to home to javascript as possible yeah there are there are places where we deviate from javascript semantics which will actually encounter in the very next exercise but yeah the the goal is for it to feel very familiar and in fact a lot of people will say that even though svelt has this tiny ecosystem compared to the react world they actually find it easier to integrate existing libraries from npm or whatever because it's it's all just javascript it always kind of fits together in a very natural way you don't need to have spelled wrappers for libraries in the same way that you need to have you know react dash foo on npm because you can't just use foo by itself yeah that's not the case as felt interesting yeah okay yeah because i i guess i've only ever played with felton solid or react in solid and so those ones yeah there are definitely because it's the whole jsx theme and all that there is a little bit more you have to kind of do to use anything that's just html things all right all right this looks nice so what are we looking at here what is this dollar sign are we in php land yeah this is where the money is all right so very often you're gonna have some state inside your component that is derived from other bits of state and the way that you would deal with this in say react is you would have like a you would either just add things together or you would use a use memo and then you would pass in the dependency array and and all that the first way of doing things means that that code would be re-running on every state change the second way of doing things means that you have all of this overhead of the use memo call and the react team are looking into using compilers to optimize away some of the memorization stuff at the moment but spell just has this built into to the language anytime you have a statement at the top level of your script tag and you prefix it with the dollar sign this becomes a reactive statement every time a dependency of that statement changes so count doubled is recomputed interesting how does that oh how does it know how does it know what the account has changed yeah yeah oh my goodness yeah yeah this is fantastic because obviously count just looks like a variable to me so you must be doing something a little bit magic in the transpilation yeah well this is the advantage of having a compiler but at build time we we take this code that you've written and we see the assignment that count plus equals one thing there and because we know that count is state that is local to this component we can realize that this is a reactive variable and so when you assign count plus equals one it actually instruments that we we have an internal function called invalidate which we call with i'm getting very into the wheat here but we call that with a number that is the index into the array of state objects belonging to that component so it looks something like dollar dollar invalidate zero comma and then we just have the count plus equals one obviously that expression returns one and so is that like a function that is created at that point so that way it just calls like hey zero needs to be recalled when this thing gets invalidated yes at the point of the assignment like you are calling in validate you just don't have to to write that code an invalidate's job is to say has this state actually changed it compares the the current value to the old value if it's the same then it doesn't do anything but if it has in fact changed then it says to the the scheduler at the top of the tree by the way this component when you get a chance we need to re-render okay and so on the next on the next tick that component will be updated the component already knows which of its bits of state are out of date so it doesn't do any unnecessary work and as part of that update it looks at that doubled equals count times two thing and it's like oh doubled because we've already analyzed this we've constructed the abstract syntax tree and we've determined that double that depends on count and we've turned that into like a bit mask so that it's double depends on the zeroth state value we can then just rerun that line of code now and so that happens at the end of every update cycle and then we update the the dom with the new state nice does it does the does the compiled product look something like that or it's like do you pass and the count so that way it has that reference and then it so there's there's no function wrapper okay it's just invalidate zero and then count count plus equals one okay interesting okay just curious all right yeah yeah we did whoopsies i just reset it let's undo that one there you go yeah you can see it it's going up it's doubling it's looking good if only this was my stonk portfolio right now i'd be feeling really happy it's not all right this is fantastic okay so so reactivity is is fairly locally scoped is there a way do you pass these things down or is it expected to be passed via props i'm assuming you can pass props yeah i think we cover props fairly soon in the tutorial i just got to reacquaint myself with this i haven't looked at this in a really long time yeah okay so we have a couple more exercises on reactivity and then we'll move on to onto props essentially yeah okay there you go interesting so that's this is just like it'll run arbitrary code now this dollar news effects and news memo in in one oh okay oh okay so it's okay very cool i like this okay so let me just grab this thing is the dot is the dollar count to zero oh my goodness this is fantastic let's see so is this actually just because it's a label and it'll get properly parsed by yeah and then you just use the laser syntax it's a fairly obscure piece of javascript syntax that that doesn't really get used look the the only reason you would ever use a label is if you're breaking out of the loop or something yeah and so because it's it's not a very widely used piece of syntax we kind of said we'll take that we'll repurpose it and we're just taking the dollar sign you can have everything else but we're going to take the dollar sign and we're going to say that it means this very specific thing that this statement is now reactive yeah but because it because it's actually valid javascript we didn't need to write a new parser or anything we're just using an off-the-shelf javascript parser okay for those that don't know you can do something like this right outer for let i equals zero i has to be less than ten i plus plus do one of those you've got the code on the wrong side there you have the call oh i do don't i there we go ah that's one of those grab this thing oh my goodness yep i got you i got you baby i'm gonna take i'm gonna take that out because we do know that works at this point and so there you go so if i wanted to break out of this the inner for loop all the way out to the outer one i could provide a colon a break outer oh my goodness outer correct there we go and so this would allow you to break out of here so you're only taking a singular label which is the dollar sign label so i can still use labels all i want which i have a lot of questions if you're using labels to begin with but nonetheless what kind of code are you writing with labels a fun fact i have to turn every conversation into a rust conversation since everything is an expression in rust we can actually return out of a break so that means should i learn rust it is inc once you learn this oh so here's the problem about learning rust once you learn it it's really hard to go back because enums are just something that you can't imagine you've ever lived without in rust because they're not just the enums that you use you can have subtypes associated with them so it's really really nice then you'll get into iterators and their iterator proper and then you'll get into being able to implement traits on foreign types and stuff like that and all of a sudden it's just like it just becomes super magical can i show you one thing since we're already here can i just show you one super cool thing please i mean i only understood some of those words that you just okay so fast and light advent of code day four i was actually gonna make a youtube video on this because it's just so awesome okay so the problem and advent of code this year on day four was that you've effectively get these little ranges right here and you need to determine is one of those ranges within another range right so does one completely consume the other one and they're inclusive ranges so this is two through four in other words two three four this is six through eight six seven eight so if you look at this one right here two through eight obviously consumes three through seven right it can it can it has the whole thing or is it subsume i never remember anyways there is a thing inside of rust called range inclusive which you represent it by doing dot dot equals so i can say 4i in two up two and including four right so very very simple now in a normal language you would do this and then you'd have to kind of do this testing right but in rust you can do something that's kind of magical here let me just get to the point so you kind of goes through like what you would normally do what you can do is you can say hey i'm going to create an interface that's what a trade is called inclusive range extension it has one function range contains and it's going to take in a reference to the same type that's all it is and so then i'll implement that and i'll say hey does range contain another range and i'll say this and now my range implant my actual range inside the rust standard library now contains your function contains range but it only contains it for the files in which includes the trait oh i was about to ask it's like prototype yeah exactly it's the opposite so it's like you can edit the prototype for a file and if anyone imports that file they get to edit the prototype too so like that is like one of those magical things about rust where it's like you know how many times you have to call you know like parse int parse float you have to parse this object with your version of parsing out of a string this one has to parse with their version coming out or you could just do something as simple as this i know this is not a rust stream but we're doing it anyways i i don't know how i feel about that so i mean okay i'm gonna do one more thing i think this should all work this is what i was playing around with okay it's called rust my balls don't don't look at that so here's something that's kind of interesting about it as well so there's something called dang it this is a this is a hardware thing so there's no things are all jacked up but you can do something like this like say you had a type called foo right i could say let foo of type foo equals then there's some string dot parse and long as i've implemented the trait for that and i have the trait in scope this parse function which exists on the string can infer by the type it's assigning to what parse function to call okay so that's like super neat so these things just exist everywhere where you can define how to interact with the standard library without like altering it for everybody you're just like my component interacts in this way or i want to extend the standard library to do my use case and then only people who need that use case import it and then can thus have better interactivity with the standard yeah i can see why people like that yes like that's like that's the thing that was my current favorite thing is this right here the thing that always puts me off is i i look at rust code and it's just a sea of punctuation it is it's it's it it was definitely pedantic and i was exceptionally reserved i only started learning it just last year december 1st in fact for last advent of code is when i first started using it and my first month i didn't i didn't love it but i was like all right people seem to be freaking out about this i'm gonna use it enough to become okay at it so i built the web server it was horribly hard quit halfway through rebuilt it again this time i succeeded still horribly hard and it was terrible did it again and then i'm like oh okay i'm starting to get this now and then by the fourth time i was like oh and now i'm like 75 as fast as writing it in javascript but midway through i feel like i get like a speed up and i get all these cool utilities and just different ways to approach a problem it's just different right i love this idea right here okay should i wait for rust 2.0 before i start my brush journey i don't think there is a rust 2.0 that's going to happen but anyways there you go i had i had to chill and i had the shillow once okay i had the shield at once because i've just been i've been really enjoying my adventure into rust i'm like you're in okay they're all laughing because you just got bamboozled into learning rust this is now called prime teachers rich rust you come in the primagen stream this is what you what you sign up for yeah anyways i had to i had to do it at least once okay so let's get back to this thing this is fantastic all right so updating arrays and objects all right let's see what are we looking for here so a thing about about reactivity is it's based on the assignment operators equals plus equals minus equals or all of that and so what a lot of people try and do straight off the bat is like i want to push to an array and then i want that to update automatically i did that with solid yep yeah and it doesn't work that way like you need to tell the system that a change has happened and some frameworks solve this with proxies and stuff like that but we just have this one way of updating components date and that is the assignment operator and so if you do mutate an array then you need to do numbers equals numbers which is super weird but it's a way of being able to mutate state and have reactivity if you try and do that in react for example if you mutate an array and then you do set state with that array then it'll just be like well nothing happened yep this is the same object because it has referential equality yep and because of that like you have to create new objects all the time you know it's kind of this ideological position that that mutation is is bad our position is that mutation is bad if you're mutating things that you don't own or if you're mutating things that other people rely on but if you're mutating local state then it's often the most performant and efficient way to do something so we allow you to do that but you have to have this slightly awkward looking self-assignment yeah so in other words just to restate what you're saying i could say numbers dot push numbers oh my goodness length plus one and then i can just go numbers equals numbers and by me doing this last statement i don't have to because again you you hit one of my sore spots with javascript which is just needless waste and so now i don't have to have that oopsies now i can effectively have the exact same reactivity without having to create the extra is that what you're trying to say yeah oh but it's not working oh what happened to numbers to push oh you got number dot length and it's been numbers oh yeah oh okay one five there you go you're right i was stupid there you go look at that that okay so for me this is super super cool because that is like one of my biggest gripes about a lot of these frameworks is that they get you to write code in such a way that actually i mean i know a lot of people love serverless but for those that aren't on serverless this will meaningfully impact your rps the more and more garbage you create the more and more stop the world events that have to happen and so if you're doing server-side rendering and you're doing this like that is damaging eventually depending on how fast you're going so i love the fact that there's an escape hatch to say hey i want to write code in such a way that is that is like creamy smooth i love this this is fantastic this just made me all warm and happy on the inside i like that you're getting you're getting definitely a seal of approval right now very very stoked oh great great yeah because i personally i get i get a emotionally bruised when i see this line okay i know how you feel yeah all right awesome all right so we got some props coming up yeah so props work pretty much how i would expect them too that you can pass props to a component the same way that you would add an attribute to an element the the funky part is that if you want to declare a prop then this is one of the places where we have to abuse javascript okay and that's where this export let business goes right so that's where i'm gonna have to do something like export less not in this component oh the yeah it's the it's the nested component this is where we're gonna turn that local state into a prop that can be set from outside okay so by having this right here this allows me on the outside to pass this answer in yes now let's just look at this for whatever reason i you know i want to just hit solve i must have oh weird anyways there's auto sync error there for a second but yeah okay so this is perfect so this allows for props to be passed in but it does not allow this does not pollute any sort of global space it's only a prop semantic excellent i like that that's kind of nice i think that i think i like this a lot better than currently what i'm dealing with i'm sure with solid or with what you get with react where you get these props that you have to define on the function and so it's like i feel like every single function or every single component i have to define a type for it because i don't want to just inline this ever running object but it's just like every single time i have to define these where it's more like i just write the code that i would want yeah you gotta throw in an export statement here there but nonetheless this allows me to do the same thing without having to define a prop or to define a prop type every time yeah and you can just like slap the type on that export declaration and if you're using typescript okay change your then it will you know it'll generate a dts file that knows that that prop is a particular type and so you get intellisense when you're using the prop like when you're using the component and you pass in the prop it will tell you if you've got the right type all of that stuff nice are you a intellij user i am not okay i'm i'm very vanilla i use vs code foreign chat all right okay hold on so just like this it may feel weird at first i feel like that this feels very natural i think for a lot of people the dollar colon not being a syntax air would probably blows their mind but it's actually just valid javascript which seems exciting i actually think it's just a great use of that all right let's see we can easily specify default values oh nice you even have a default oh my goodness oh that's another thing that i just love that idea like this is so fantastic do you know how many times you run into this exact situation enough is the answer okay so this is super cool oh and you can spread props that's very very useful because that's always i hate this this is just like such a pain in the ass to do is there anything oh what's this okay so now we're getting into something that looks a little unusual yeah this is this is where a lot of people check out they they see this and they're like oh what i gotta learn a whole new language yeah and what i what i want to say to people is yes we have some syntax but there's really not much there's if blocks there's each blocks and there's like a couple of others that you can use for advanced cases but once you've learned these you've learned how to to build spell components and it's very quick to learn and it's it's kind of powerful it's it's a lot nicer in my experience to use these if blocks than it is to use things like turnaries especially if you have nestative conditions and you're like insane nested ternary conditions we actually have dedicated syntax for control flow in templates yeah i i'm 100 on your team turnaries have never once ended well unless if it's a return statement that's exceptionally simple right like i just i've always hated the ternary approach okay so this is this is cool i mean this is no different than like say solid.js you have to know about switch match or four right like you have to you know any of these kind of templatey type things you have to know something about how you're doing it really there is one one important difference which is that we get type narrowing with our control flow ooh okay okay that's that's very nice quick follow-up with this one because when i see this and i'm trying to like understand how stealth runs is it more like solid in the sense that this is a construction phase or is it more like react where something triggers a re-render and these things are just called again all the way through so the the execution model is somewhere between react and solid solid has this extremely fine-grained reactivity where when you change the value of a signal it just like changes the dom around that signal yeah directly and spell the reactivity is at the level of components and components say i need to re-render and then when the scheduler gets to that component it re-renders the whole component but because we have the ability to know which parts of your state changed we're not just re-running everything like the script that script lock at the top that only ever runs once and the stuff inside the f block we will only change that we will only look inside that if block if the state that the if block uses has changed and beyond that we're obviously not gonna like reevaluate whether the button is still a button because we can see that at compile time whereas in reacts like you have this virtual dom you need to compare the element and see if it's still the same element and whatever and install we don't do that we're just focused on the state and we know which bits of state have changed because we have this this this dirty bit mask okay that's funny that you came on the stream right when we were talking about bits trying to teach these kids about bits i know i love them too i love me some bits i've wrote a couple network protocols they're very fun they're just bits all day long is there anything okay so we're i kind of is there anything else we want to touch on because i kind of feel like we now see a good portion of this which is you have control flow you have kind of like props passing it seems pretty simple on how to get other components in here when we go to something like this you just use your standard import syntax is there anything else that makes sense that we should stop by ah let me see so we've covered events and we haven't looked at 2a bindings yet maybe just go into the the menu there oh is there oh the hamburger yeah just yeah bindings that's a bindings should i just go text input yeah okay bind value interesting okay so that must be the name of this thing so instead of just saying value equals which is just straight up you know javascript instead i say bind value and that means as i type this you know how much time i spent yesterday doing this exact thing so i could make a validation thing no no okay quick question can i just follow up with this can i attach a function for when this thing changes or do i now do is that where i do this thing where i actually go you know what i'm gonna make this into one of these yeah so you you don't want to assign to a thing that you've also bound because then like it's kind of confusing as to what owns it but if you have let name then you could have a dollar colon shouty name equals name dot to uppercase all right oh shouty name equals name dot to it always takes my focus away whenever there's an error fun fact that is frustrating we'll figure it out see my cursor when i press dot up on that time i press too many things when i press dot there it goes it's gone it's gone yeah all right two names let's see two up per case okay so that's how you do this so i could also do something like this right where i could actually have an alert right like oh my goodness name changed right and then with that yes is that how you do it or did i do this incorrectly yeah i don't even name it right yeah that's not an expression yeah so just get rid of that is there a way to confine this reactivity to when the name changes yeah so it will it will happen wait wait i see what happened you're not referencing name inside that alert okay at the moment it will run on the component startup which is what just happened that's why you saw that alert box but now if you change that from name change to name change colon and then actually have the value of the name okay hold on we'll go like this equals hello world so then i could do something like this and so how often does this thing get re-ran this little this this like when what triggers this so we we construct a we construct an update function that runs at the end of the components update cycle okay and inside there that's where we're using that dirty bit mask to decide what code should we run so that code will only run when name changes interesting oh that's because oh beautiful this is fantastic so you could effectively do a validation type item here okay okay so let's let's just follow this up for a quick second i actually have a question okay so here's like a great case i would do something like this right is it am i doing this right if the hash goes inside the curly okay hash goes inside the curly so if val validated and then oh crash i should have probably went to the other side here hold on let me just go back and see what they had to do here just so you don't have to try to explain it to me all right so it's if logged in and if okay the wrong example but that's fine okay so it's if validated then i do something like end if just like that right so if i had something in here i could also go like h one it's great so i'm just trying to think of a case that i you know i sometimes run into and so i do else is that how i do it or is it pound else it is colon else okay it was called pound opens colon continues slash closes okay and so then i could take this thing paste that in and say it's bad and then i could have something that looks like this let validated equals equals false it's bad right and well you could you could do a state or whatever and so this happens so instead of having a stupid one of those i could go validate it equals true all right else am i doing a good example here yeah so another way that you could do it is dollar colon validated equals name equals hello world oh yeah yeah i guess i i wouldn't have to do this right so yeah i guess if you had like a validated function right so i could actually have a function up here is what you're trying to say i could have you know well so what i'm saying is is instead of having that that block with the if you could just do dollar colon validated equals and then the expression name triple equals hello world and then you don't even need to do the let validated because it will create the let for you but you can also do a function okay like a few different ways to skin this cat depending on your preference okay does that mean i could do something like this and then put in validated name oh it got out it got out of there yeah god i hate that it's so painful to watch i'm gonna fix it this afternoon i i know it's okay it's okay i i can i can i can oh my goodness i can deal with this losing focus is really hard i do i'm programming this so stupid i sorry tj i can hear tj making fun of me right now so i could do something like this hello world okay so i could do something like that so you don't even need to introduce interactivity because it knows to re-run this check because it's referring to name is what you're trying to say yes exactly that does simplify a lot of things especially like validation stuff because i always find that like when you're trying to say like hey is your input correct right like let's just pretend we decided that we're young and stupid and we decided we're going to write a regex to validate phone numbers and we're testing it out this thing would make it at least easy to test the validation not necessarily to write the regex which you shouldn't do i'm glad you agreed with that if you would have said no write the regex at off the stream like that that's the final straw right there yeah regex is dangerous magic it is all right so this is actually really cool i really like this this actually keeps it shockingly simple what you can do here oh man now i want to do something with with svelt i'm currently building something for netflix with a solid just because they're like all right we gotta i because i had to build a front end to a tool i'm making internally and get it all hosted and running and all that fun stuff and i don't have a much choices on what i can do but i did pull out react and put in solid and that has made it dramatically easier now i'm very excited about you know i'm gonna get in trouble they're gonna be like so we looked at your last few projects and it looks like you have solid you have spelled what's going on over here i almost wrote the front end in leptos with rust and actually made a wasm target but then i know my boss would probably come back to me and say okay so you wrote a front end and rust i want you to just explain your brief reasoning at this point it's it's a form of job security it's a form of job security okay this is this is fantastic and so two-way effectively all this does is that you oh my goodness i love this so you actually took away the sucky part which is this one's on input is that the correct function you call on input but on input does not capture backspace if i'm not mistaken but you there's some new ones yeah i can't remember i just did it yesterday and i can't remember all that literally i did it yesterday and i don't even remember what it was but you go and you do all the bindings and then you actually just call name every single time this changes yeah and all it's doing is it's adding the event listener that assigns to name for you like it's not doing anything special yeah in some cases like it will prevent a case where there's like a deadlock because the event handler is is changing some state which then causes the mutation which then like yeah you can get yourself into an infinite loop and it will prevent that but beyond that all it's doing is just adding the event handler for you it's just syntax sugar interesting do you do something like okay that's actually pretty cool so how do you do you do it to where you can't call a handler more than once on every like update cycle is that how you effectively prevent the the deadlock something like that okay okay that makes sense that's cool yeah this is fantastic this is incredibly simple i'm actually shocked at how simple this is