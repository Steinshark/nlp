hi everyone in this episode we're going to create simple biomes by dividing the planet into different colored regions based on latitude will then add some noise to make the boundaries more organic and finally blend the colors together okay so let's begin by going into the color settings and here i'm going to create a public class called biome color settings and this is going to have a sub class called simply biome and the biome is going to have a gradient which will work the same way as this old gradient up here where the colors are just samples based on the elevation so i can actually go ahead and delete this one we won't use that anymore and then i also need to have a public float for the start height of the biome that'll just be a value between zero and one so at a range attribute iya zero comma one and in case we want to tint the biome with a solid color i'm going to add a public color tint and also over here a public float change percent will again be a value from zero to one so just add a another range attribute alright the biome color settings will then have a public array of these biomes just call that biomes and then i want both of these new classes to be serializable so i'll just add the system dot syria isil attribute over here and over here and then the color settings class can have a public biome color settings just called biome color settings alright i'll save that and go into the color generator script and in here we currently have this texture with just a single row containing all of the colors for the entire planet but instead i want this texture to have a height that corresponds to the number of biomes that each row of the texture can store the colors for that biome so i'll replace this with settings dot biome color settings dot biomes dot length and currently this texture is only being updated if the texture is null but we also wanted to be updated if the number of biome changez so i'll say all the height of the texture is not equal to the number of biomes okay let's then come down to the object colors method and i want to change the size of the colors array to take into account the new height of the texture so i'll set this equal to textures of width x height extra height and then i want to loop through all of the biomes so let's say for each of our biome in settings dot biome color settings dot biomes then inside of this inner loop we can have a color i'll call this the gradient color and this can be equal to i am dot gradient and we can just evaluate it in the same way as we were evaluating the old gradient alright and i'll just delete this other line and then we can have color tint color equal to biome dot tint and now i want to assign to our colors array but we need an index for this so just outside of both loops or create an inch color index set that equal to zero and then we can use that index here this is equal to the gradient color multiplied by 1 minus biome dot 10% so if there's no tint then the color will be entirely based on the gradient color plus 10 color x by m dot 10% okay after doing that we can then just increment the color index okay i'm not going to create a new public method returning a float and this is good we called biome percent from point or taken a vector three point on unit sphere so this should basically return a value of zero if we're in the first biome and a value of one if we're in the last biome and anywhere between zero and one for the other biomes so we will start by creating a float height percent so this should have a value of zero at the planets south pole going to a value of one at the planets north pole so that's a point on your it sphere dot y plus 1/2 since the unit sphere goes from negative one to positive one okay i'm then gonna have a float biome index equal to zero and an int number ohms which shall set equal to settings dot bomb color settings dot biomes dot length and i'm going to loop through the biomes so for i equals zero i less than number of biomes and i'll say if settings dot biome color settings are biomes with an index of i has a start height that is less than the current height percent then i will set and the biome index equal to i otherwise i will break out of the loop now i want to return the spy ohm index but i want to squash it in the range 0 to 1 so i'm going to divide it by the number of biomes minus one unless the number of biomes is one in which case we don't want to divide by zero so i'll just take math f dot max between 1 and the number of biomes minus one see fat 0 then we'll just use a value of 1 instead all right now over for each vertex in the planet we're going to want to calculate which biome it's in using this method here and we're going to want to store that information in its uv channel so that that can get passed to the shader so we can use it to draw the correct color so i mean to save this and now open up the terrain face class and i'm going to come down to the bottom here and create a public voyage called update you v's so taking a color generator i'll collect color generator and here i'll create a new vector to array v equal to a new vector2 array with a size of resolution x resolution which is the number of vertices and then we're going to want to loop through and find all of the points on the unit sphere so we can just copy the code for that from here paste that in there the reason that i don't want to put this inside of this construct mesh method is that i really want to keep all the stuff that generates colors separate from the mesh generation so that when we're updating the colors we don't have to wait for the mesh to rebuild since that can be kind of slow alright so here i'm going to say uv with an index of i is equal to a new vector2 and we can get color generator bind percent from point and pass in the point on unit sphere now we currently don't have anything that we're going to store in the y component of this vector so just give that zero okay at the end of this we should say mesh dasch uv is equal to uv now when we rebuild the mesh over here we don't want to lose this uv data if we've calculated already so up at the top of construct mesh i'm gonna say vector to array uv is equal to mesh dot uv and then at the bottom here after we've cleared the mesh we can reassign that mesh dot uv is equal to uv all right let's save that and go into the planet script and now coming down to generate colors i want to loop through all of the terrain faces so just copy this loop from the generate mesh method paste that in there but instead of calling construct mesh call update you v's passing in the color generator okay let's now save this and go into unity once that finishes compiling i'm going to go into the graphics folder and open up the planets shader so in here recall that what we're doing is filling out the elevation of the terrain as a percent between zero and one and using that as the x component of the uv for the texture what we're going to do now is add a y component to the uv which will be that biown percent that we calculated so let's create a new node have this be an input uv and we want this to be uv zero and then we're interested in the x component of this so let's split it and take the x component and create a vector two i want this to be connected to the y component of the vector 2 and then we can connect this elevation percent to the x component and then connect this to the uv of the texture alright i just want to neaten this up a little bit so i'll move this out like so i think something like that looks ok and then save that alright i can now close this go on to the planet i'll open up biome color settings we're getting errors just because there are no biomes at the moment but i'll add say two and i'm gonna return the 10% up to one for both of these just that i don't have to fiddle around with the gradients at the moment so i'll leave this first one is black and this can maybe be red and here we can increase the start height so you can see that at the bottom we have the black biome and at the top we have a nice red biome i'll add in a third one and can increase the height of that and so you can see i've now got i guess an upside-down german planet alright now it's a little too obvious at the moment that we're breaking the biomes up any sort of sections based on the latitude so i mean to add some noise to just disturb the boundaries a little bit so i'll go into the color settings and here in the biome color settings i'll add a public and noise settings class i'm just call that noise and then i'm also going to create a public float noise offset and noise strength okay i'll save that go into the color generator and up at the top here i'm going to create a eye noise filter i'll call this the biome noise filter and in the update settings method i will just assign that i'm noise filter is equal to a new are we doing this en we have a noise filter factory create noise filter and we pass in the settings so that is settings dot bomb color settings dot noise alright then in the volume percent from point method we just want to disturb the high percent a little bit so we can say high percent plus equals and i'll say by a noise filter dot evaluate at the point on unit sphere and then just to give us some control over how far the noise shifts the biomes up and down and how strongly it does that i need to subtract settings by color settings noise off such put this all in parentheses and then multiply that by the strength so settings at brian color settings dot noise strength all right so now if we save that go back into unity wait for this to compile also just clear these errors in the meanwhile and now we can open up the noise i'll just use simple noise maybe have two layers and here we can increase the strength and you can play with the offset so that it doesn't affect the starting height of the biomes too much i guess this noise strength is a little strong at the moment let me turn it down to 0.2 and we can really have another layer just so we can get some finer detail if you increased the persistence a little bit so i think that's looking a lot more natural or at least it will once we blend the biomes together so let's do this by going into the biome color settings and adding a public float blend amount and i'll make this in the range 0 to 1 save that and come into this i am % method and here i'm going to delete this code from inside the for-loop because we're going to do this slightly differently we'll start by calculating the distance of the biomes start height from the current height % so we can say distance is equal to height % - settings dodge ram color settings dot biomes index of i don't start height and then we're going to create a float weight which will depend on whether this distance is sort of within the range of the blending distance so outside of the for loop i'm quickly gonna create a float blend range this will be equal to settings or by color settings blend amount and / - and now the weight is going to be equal to math f + dot inverse allah from negative blend range to positive blend range based on the distance so just to explain this weight value a little bit and say we have this planet with a black biome and a red biome so this is the starting height of the red biome then this might be the ear positive blend range and this the negative blend range for the red biome so by doing this inversely the negative blend range and the positive blend range we're saying that the red weight is going to be zero at or below the negative blend range line here and the red weight will be one at or above the positive blend range so coming back to the code we can say that by ohm index gets increased by the index of the current by ohm multiplied by the weight of it but then we don't want this biome index to get too large so before we do that we will multiply it by 1 minus of the weight so for example if the weight was 1 which would mean we'd want it to be completely the color of this biome then this would start off by resetting the biome index to zero and then we just add on the current biome index okay now there's one small thing that i want to do which is on to this blend range i just want to add a small value like point zero zero one and that's just because this bit of kochiya won't work nicely if the blend amount is zero so by doing that we'll just make sure that it's always at least a little bit greater than zero okay so i can now save this go back into unity and once that compiles we should see our blend amount popping up here and we can increase this to blend the colors together ok so i'm not going to just create some gradients for the biomes so that my world starts off nice and green at the bottom and then transitions to a sandy region and finally an icy region alright now that we've got these simple biomes set up that is going to be everything for this episode so until next time cheers