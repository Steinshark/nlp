why are there so many
programming languages?  and given that there are so many, how
come people are still  creating more of them?
i mean, it's a lot of work, right?  it's a heck of a lot of work to do
something we seem to have plenty of.  why bother?
i think there are a few  really compelling reasons.
some people do it for research.  they have an idea of how programming
could look in the future,  how it could be, and they
want to take that idea for a walk, put it  through its paces, explore it further.
other people create a new language  because they're cherry-picking.
they look out into the world and say,  "well, i like python's
programming model, but i want  c syntax and some of go's concurrency
features, so i'm going to put them  together in something
new."  a bit like recipe making,
they're baking their own cake.  and other people build a language because
there's a hole in the market.  javascript is the famous example.
it exists because browsers needed a  programming language, so
someone had to create one.  and that's actually my
favorite thing about javascript.  it took you to somewhere you couldn't
have gone without it.  but all these motivations come together
in the creation of a  relatively new programming
language called gleam.  you might not have heard of gleam, but
stick around because you're about to.  i'll give you one metric.
if github stars are   anything to measure
by, it is apparently  more popular than f sharp.
so let's find out why.  i'm joined today by the very charming
louis pilfold, who's the  creator of the gleam programming
language.  and he's going to tell us why he thought
the world needed a new  language, how he survived
for the multi-year crazy journey it takes  to go from idea to
production, and what gleam  has to offer us as programmers.
we're all out there  trying to get a job done.
can gleam help us do it better, faster,  easier, cheaper, more fun?
any of those?  some of the above?
well, let's find out.  let's get cracking.
i'm your host, kris jenkins.  this is developer voices.
and today's voice is louis pilfold.  i'm joined today by louis pilfold.
louis, how are you doing, man?  i'm great.
thanks for having me.  good to see you.
oh, it's a pleasure.  yeah, it's good to see you.
we haven't met in person  since before the pandemic.
oh, since before the event, yes.  the event.
the event that shall not be named.  yeah, i keep having to bump into you, but
yeah, just digital do for now.  they'll have to, even
though london's not that large.  but now i do online.
i feel like we're with the same city and  it's similar interests.
we would have bumped into each other at a  tech or something with
lots of people making  bleeps and bleeps with
sympathizers and stuff.  but no, nothing.
yeah, yeah.  sooner or later, we'll cross paths again.
but for now, i have been keeping tabs on  you in my secret tracking cave.
ominous.  you've been busy writing a whole
programming language.  i have.
it's a, yeah, sort of started as a pet  project and grew wildly
out of a job and it's now  dangerously useful.
it's quite nice.  see, that's something i want to get into,  but first we should
probably set the frame  and what is your
language is called gleam, right?  yes.
what is it?  why do we need a new language?
well, so i think it really comes from me  being always a little bit.
so i'm a person who loves languages,  which i think you are as well.
so i always try and use used to try and  learn a new one or two
or three every year or so.  and i reached this point where i was just
annoyed with every  language because when i
was writing when i was writing elm, i  wished i was writing haskell.
when i was writing haskell,  i wish i was writing erlang.
when i was writing erlang,  i wish i was writing rust.
you know, it's like i wish i could get  that bit from there
and that bit from there.  this would be really easy if i had that.
and so, yeah, i ended up sort of like  saying, well, what
happens if i try to draw all of  the best bits?
could i make something that was like  cohesive and really nice or
would it just be, you know,  the horrible mash of bells and whistles
and nothing quite fitting together?  see, i know a few languages that have
asked that question and  their answer has been a
horrible match.  how are you feeling about your answer?
good. so i think it's tricky.  i took a lot of inspiration from lua and
go and, you know, as a  functional program, i
don't know how to put you off.  i don't mean in the like, it's a very
simple procedural  language, but i tried to make the
surface area of the language very small  and tried to make it very consistent.
hopefully more so than go, i think.  and yeah, it's just sort of like what are
the really valuable  things from these different
types of languages, which i  think are really interesting?
and then how can we take the smallest  amount of all of them
and make it as possible?  which i think is not the way a lot of
people go for languages.  it seems to be like adding more, but i'm
trying to like have less.  and yeah, a bunch of years in, it seems
like it's really  resonating with a lot of people.
so that's quite nice.  i'm pretty happy with that.
very cool.  okay, so tell, tell us what your, what
you've picked from the  buffet car of languages.
so it is a simple functional language in  sort of in the style of elm, perhaps.
i think you're an elm fan from the past.  i'm an elm fan.
yeah.  so, you know, there's, there's the
language got quite a small  number of features and we
generally say like, well, you've got  functions and they take in
values and they return values  and you kind of ignore everything else.
that's sort of all you need.  but rather than having like an elm
syntax, although we did  originally have a syntax like
that, we've got a syntax that's much more  familiar to, you know,
javascript programmers  or c programmers, you know, lots of curly
braces and all that stuff.  and i originally thought,
oh, what's the point of that?  you know, just syntax doesn't matter.
and then we switched in tax and suddenly  everyone was like, oh,
this language is great.  now it's like, nothing's changed.  so i was wrong.
syntax really does matter.  and i sort of miss the old one, but the
new one people really like.  so, and the thing that is, i think one of
the big sales bit is  that it runs on the erlang
virtual machine, which is called the  beam, which is unusual
for a virtual machine that  is designed for functional
languages from the get-go.  and rather than being like a research
project, like a lot of  functional things are, it was
built for industry.  you know, it was built for
telephone switches, ericsson.  so it's got loads or it's really built
with running and  maintaining and debugging, you
know, really reliable systems.  oh, that's interesting.
so the main thing i know about the beam,  other than it's not
apache beam, it's erlang  beam.
yes.  is it's famed for its
novel approach to reliability.  yes.
yeah.  so like, we're trying to both think,
liam, you know, that  there's all these arguments
between the typing people and the erlang  people about how do you should deal with
errors?  like, oh, you should make it impossible
in the in the elm  world, you know, making valid
states unrepresentable in your program,  which is actually
really fantastic to do that.  but all the erlang people are like, no,
that's rubbish,  because like, how do you make
how do you make memory corruption  impossible in your application?
what happens if you're going to, what if  you've got a cluster of
computers and want to get  struck by bolts of lightning because it's
up a telephone pole  doing, you know, run a
telephone switch firmware?  oh, yeah, you can't really
do that with types, can you?  so the whole thing is about
failure is going to happen.  you just have to lean into that your
entire system needs to  be able to explode in some
dramatic way.  and you should be able to survive that.
and it sort of boils down to the sort of,  you know, it crowd have
you tried turning it off  and on type thing and breaking your
system into loads of tiny little  bulkheads where like, oh,
when everyone's gone  wrong in this subsystem.
okay, let's restart that.  did that fix it?
no.  okay, let's go one step bigger.
what if we reset?  what if we discard the corrupted state in
that system and then just  like slowly, incrementally
drop things out?  so you can kind of see parallels between
the beam and maybe  kubernetes or something.
you know, so if you've got a you've got a  pod, a deployment of a web service that's
raining go or something and something  goes wrong in it, while the
vm, the sorry, not the vm,  the instance goes down and then
kubernetes brings it back  up again and then should be a
good state and you've lost those jobs  that are in in progress,
but then it should be okay.  that's really cool.
but kind of rubbish in that, like that  single instance of a go
program is probably running  hundreds or maybe thousands
of of jobs at the same time.  so losing the whole thing sucks.
so like imagine if you could have the  whole pattern, but rather
than like a sort of data  center level, you could have inside your
program level where your  your single vm instance is
really running hundreds, thousands,  millions of threads.
and you can do that incremental shape  state shedding at the
individual thread level.  so maybe you just lose
like one web request.  yeah, yeah, the idea is, i mean, you can
sort of do this sort of  things like, you know, try
catching in, you know, other languages,  but it's it's so much
more it's taking the idea of  like, you know, we'll catch it and we
deal with it, but in a much more  how did it swipe it in a much more fine  grained and sort of
sophisticated way than you would do  in other languages.
and it just results in.  yeah, it results in extremely reliable
services like this  companies that claim nine nines of
reliability with her language.  i'm not sure i've
ever seen proof of that.  but the fact that they can claim it and
people go, oh, maybe, you  know, i think that says a
lot about how how good this thing is.  and it also means you can do things on
the radar to look at.  right.
yeah, exactly.  like the fact that it's plausible implies
that, yeah, this is  really, you know, extremely,
extremely good.  and it means you can do things like
offensive programming quite happily.  so like, i just never going
to check any of the errors.  i'm just going to
insist everything succeeds.  and if it fails, well, i don't need to
write any error handling  logic in my business logic.
that can be dealt with   out there in the
ether with non local  error handling, as they might
call it.  i've always wondered, does that just
result in systems that are  constantly trying and crashing
and trying and crashing in an infinite  loop of let it crash?
yes.  sort of.
sort of.  like there's a there's a company called i
don't know how to pronounce their name.  that's embarrassing.
but they they're one of their they're the  people who run
purescript on the erlang virtual  machine.
and they do video streaming.  and they said they had a bug where the
system would crash every  100 frames or something
like that.  and they didn't notice for eight months.
because it was it just ran so well, like  they didn't notice any
any problems in the area.  it would just it would run for 100 frames
crash system would  restart that tiny little
subsystem, and then it would continue.  oh, so it was picking up after every 100
frame and they got  this like, oh, we'll just
retry that frame.  they just didn't know.
and i was like, maybe they should improve  that, you know, monitoring.
but the fact that you can the fact that,  you know, so if we
think about running systems  in production, we want to we want it to
continue working for our users.  but you also will not want to have a
really stressful time  when it does go wrong.
so, you know, when when things do start  crashing, you do want to know about it.
and there's lots of mechanisms for that.  and you do want to be able to debug it.
there's lots of mechanisms for that.  but mainly, you don't want to like, you
know, you've woken up at  three in the morning with
people screaming down the phone saying  you've got to fix it, got to fix it.
you want to be able to do it in like the  most low stress way possible, right?
so it's all about it holding itself  together just well enough for
you to deal with whatever the  problem is.
right.  because that kind of monitoring,
debugging and failure  handling baked in from the start in
industry, i think really appeals.  yeah.
and i've often like, for the sake of the  platform, the beam, i have
gone towards erlang for a look.  and erlang is really weird.
yeah.  and i say that as a
lisp haskell programmer.  erlang is weird, right?
and it's put me off every time.  yeah, i think that's part of the problem.
so like, the erlang rung time has got  these amazing properties
because they come from real  world requirements, you know, you know,
we want to make sure that a greedy  thread, greedy green
thread can never block the   scheduler and causing problems or anything else.
so you can have a hot loop and it just,  everything continues running.
that's fine.  we want it to, if someone, someone says
it's a bad regex, we don't want it to  block the scheduler.
if something crashes, we don't want it to  print on the system or these things.
they've got that all down.  amazing.
but like the actual language, i mean, i  love erlang, i'm just going
to say it first, but it looks  dreadful.
it looks so bad and it's like, it's  really awkward in lots of
ways and the tooling is strange.  i was looking, i was refreshing myself.
earlier and i had a look and i'd  forgotten about this, but to export a
function out of a module, you  have to export function name slash the
number of arguments.  yes, because of my start slash one.
yeah, because function functions are not  just unique name, it's like
unique base for not just the  name, but also the number of arguments.
so you could have like, main zero, main  one, main two, main three,
those are all separate functions.  i think that's a good question. functions.
it feels like something a computer could  take care of for us.
yeah, but if you it's true, and we do do  that, but like, what is gleam does do
that, but if you have  that control, you can
actually do different things.  like you can actually,
it's actually more powerful.  you can actually decide if you want to
reference the one or two or three.  is that you?
i don't know.  you just end up with in
erlang, they do use it a lot.  you know, it's these sort of things like
whatever tools you're given, you're used  to, you will find uses
for and so even though i, i as a person  who likes, you know, rust and elm and
things like that, i'm  looking again, i'm not sure i
like that feature very much.  all the erlang and elixir people complain
constantly that they don't have this when  they're trying gleam.
so you're sort of  damned either way, really.
and with, you know, one of the goals of  gleam is to make all these wonderful
things you get in the erlang  world, make them much less alien seeming
to, you know, the rest of us.  so people can, people, you know, because
there's only so much  strangeness you can tolerate.
like if someone is mildly interested in  erlang, because they've heard these
really cool things about  this, like super concurrent fault
tolerant runtime, and they're suddenly  met with erlang, they might
go, this is just weird.  this is too much.
the weirdness is  greater than my curiosity.
i'm going to go somewhere else.  yeah, so i want something that looks a
lot more normal, you know, and even if  that is worse in some
ways, if we can get more  people, that'd be better.
that'd be better enough.  always, you know,
it's always a trade off.  yeah, yeah.  let's use the word accessibility because
that makes it sound really good.  okay, not weirdness.
accessibility.  not weirdness.
yeah, i did.  i did once ask the creator of, it was
after a conference and i had a couple  beers, i was feeling
a bit brave and i asked the creator of  erlang, why does it look like that?
and he said, oh, you should have seen it  before we open sourced it.
it looked much worse.  awesome.
can only imagine.  go armstrong, right?
i was asking verding, but yes.  oh, okay.
yeah.  so did you explicitly when you're going
around picking up your  favorite bits of languages, was it
always the case that you wanted to  compete with, replace, offer an
alternative to erlang, but be  on the beam?
so i was very, i've been a  beam user for a long time.
both, i got it through, through elixir  and i quite quickly ended
up writing early as well.  i quite enjoyed both languages.
and it be, it being a runtime that isn't  used very much and i love a lot.
it just seemed like quite an  obvious choice to use this.
and even before i started thinking about  like, how could this be useful to people?
it's like, i really like this runtime.  i really want to use it in my, you know,
my, my ideal pet programming  language that no one's ever
going to use.  they seem like the right way to go.
but even, even if i was designing it to  be like, this is for people,
which i do now, but like from  the very beginning, i think it would have
made the same decision.  um, but i don't see it as being competing
so much because, you know,  the, the, i think the people
who are going to come to erlang and the  people are going to come to
gleam, a two different sets of  people.
um, there's lots of people who, you know,  there's lots of people
who have an interest in the  runtime, but we'll say this thing has
like a weird prologue  mishmash syntax and it is dynamically
typed and it has loads of sort of  unusual, not quite, not quite
prologue, not quite this, not  quite that, um, patterns and stuff in it.
that's probably not for me.  um, i'll go write
scala or something else.  and there's lots of people who always got
this weird ruby, sort of  this weird ruby syntax.
you know, i'm not sure  about this elixir thing.
it's all weird lisp macros.  that's not me.
i won't use it either.  well, those, the people who don't like
those two things may like  the idea of a c looking small,
um, functional language that has a, uh,  sort of an elm style type
system, you know, so i don't  think, i don't think we're going to draw
so many people from  the erlang and lix a lot.
i think it's going to be much more.  we're going to bring people to the, um,
the beam community as a whole, really.  so i'm hoping we'll work together.
and a lot of gleams, the language is  built around the idea of
like interrupt between gleam  and the other languages as well.
so hopefully people write things in it.  well, people can write things in erlang
and lix and we can use  them, but hopefully it's also
the way around.  we make it really easy to write things in
gleam and then that will be  able to use by the erlang and
lix effects as well.  okay.
so that's often overlooked  that kind of two way interop.
yes.  you can be both, you can
both consume and provide.  yeah.
yeah.  the talk, the toolings a bit, um, isn't
quite as good there as i  would like it to be because it
depends upon the erlang and lix people  building a bit of tooling, but there are
ways that they can do it.  um, yeah, i think there's like, you know,
there's loads of value in  it because we're not, i don't
want to compete with  erlang, elixir because i'll lose.
why would i want to compete  with my closest neighbors?
you know, i want to be, we  want to be working together.
um, and i wish more  languages thought about it.
like erlang being the universal language  of the platform, it's
quite easy to, to work in both  directions, but elixir is very much
designed to be able to use  erlang code, but it's a trickier
and a lot of ways to, um, use it from  erlang and there's certain
features you just can't use.  um, that's just the trade-off i've made.
fair enough.  well, an interrupt future, if we'll get
there eventually, universal  computing, but take me through
the, so i, and i know a few programmers  who've done this have
written like a hobby programming  language is kind of one of those rites of
passage once you've been  programming for long enough.
and you, i realized two  things from doing that.
the first is that a  programming language isn't magic, right?
writing a program that evaluates source  code is actually really
interesting and not that hard.  but the journey from that hobby project
to something you can  actually put in production is huge.
yeah.  take me through your journey on that.
i think it's just  stubbornness on my part, really.
i, i went, i was, i was, um, i sort of  explained these people who don't
understand tech as being  like, um, a chap who's built a model
railway in his garage.  so it's like a very, very large ornate
one with multiple layers  and realistic representation
talent.  like it's just, you look at it and you
go, why have you done this?  it's very impressive.
but like, that was clearly   a lot of time.
yeah.  um, but yeah, it was just, um, curiosity
because there's, i love languages and  there's just so many
bits you can dig into.  um, and so that kept me interested and
busy for a few years.  um, maybe the first two or so, but i was,
i was quite lucky in the,  um, i was already fairly well
known in the erlang and elixir world  because i got onto elixir
quite early and i had done a thing  of, oh, well, it doesn't have this thing
that i used to use in, um,  ruby or elm or something.
i really wish i had that.  maybe i'll try and make one.
so i made a, a linter, um, which was  forked and is now the
main linter in the electric  system, which is great because i don't
have to maintain it.  um, i wrote open source
it, push it out the door.  exactly.
yeah.  it's much better than the one i wrote,
but it was mine originally.  um, and i wrote, i wrote a format, um,
cause i thought elm format was amazing.  and so that, that then
inspired an official one.  so just, just from these things, i'll
sort of known a little bit.  um, and then when i started doing this
language thing and i put lots of like  fashionable words on
it, like types, people are  like, oh, that's interesting.
and it's sort of like people started  chatting a bit cause
i'm always, i'm always  insistent on, on, um,
developing in the open.  so even though i wasn't really
publicizing it, people  would look at it and say, oh,
look at this thing.  yeah.
and then that gave me  a lot more, um, yeah.
when people show interest in your work,  you know, it gives you a lot more, um, it
gives you encouragement, you know, you  want to keep working on it.
and then i slowly got to say to like,  maybe this, maybe this,
i actually quite like all  the ideas i've come to here after, you
know, a couple of years of work on it.  maybe this could be useful for something.
um, and yeah, now we're in a place where  people are using it, which is why.
that's amazing.  yeah.
you must have put, i mean, there are a  large number of pieces you must have put
together along the way though, because  just adding a type system to a platform
has never had a type language.  yeah.
that's a whole chunk of  knowledge and research.
yeah.  that was quite painful.
like i knew i was always a lover of  well-typed languages, but never knew how
they worked, you know, so all the, all  the things in, i think
part of the reason why  gleam is doing well is that i'm not a,
like, um, i'm not like a, uh, a very  academic person when it comes to like the
theory of the implementing these things.  um, i would describe myself more as like
a language designer than i am a language  compiler implementer or a runtime
implementer, which is a shame because  i think there's a really fascinating
things, but all my learning has been, i  want specifically x, you know, i've, i've
been, i've, i've, um, spent a lot of  time like experiment with
different language designs.  like what if, what if the language had
this feature and then i would like write  loads of code as if it had that feature
and then just like compile it in my head.  go, what would that do?
how would that work?  how could i write these programs?
and i'd go through that  loop over and over again.
go, right.  i want this.
now, how does that, i  know people can do this.
how do i do it?  and i don't have to like find the, the,
the, uh, and if there's suitable amounts  of, um, understandable papers and stuff
to try and work out and it was just.  it was misery, but, um, i sort of know a
bit about some type of systems now.  so that's good.
like, and also make it, make it useful.  could you pass the, uh, exam now?
i'm sure i couldn't.  it's not loaded into short-term memory.
i'm very good.  i'm very good at anything that gleam has
inside it and  anything it doesn't, i don't
know, and, and it's frustrating a bit  because you get to a point where like you
understand it, um, well enough.  and that's because you've successfully
implemented whatever that feature is.  and i'd really like to continue learning
it, but i actually need to do this other  unrelated thing for the language.
cause gleam, gleam's quite, um, one thing  gleam does, which, uh, i think is quite
clever and when i think more, more  language should do is
that like everything  is, all the bits that you commonly touch,
what we considered part of like the core  language, not called the language, but
like the core project.  um, so we don't just have
like a language and a compiler.  we've also got a build tool and package
manager and, um, language server and,  you know, all these sorts of things and
like a package index, you know, so we,  rather than leaving those things up to
the community, like  that would be baked in.
and that's resulting in like a really  good experience, but i just means i've
learned something interesting about type  systems and i have to go work on like
dependency resolution algorithms instead.  and i never actually
get good at any of them.  that, that how on earth do
you stay on top of all of that?  cause each one of those could be a
project in itself, right?  it's building a package manager from
scratch and making it good.  there are teams of people that do that.
yeah.  so we're package management.
we can, we're luckily we're forced to  cheat a little bit and the, you know, we
want to interrupt really well with the  rest of the beam language.
so we use their package manager.  so that the, the, the side of, um, you
know, uploading and distributing what all  the server side stuff, somebody's already
built that we just have to use their api.  bit confusing because no one's really, i
think as far as how two people have  integrated ever with that api.
so the docs are not amazing three now.  um, so by the time i worked out that, uh,
yeah, i only need to do the client side,  but that's still really complicated.
like the algorithms for how you,   um, you
know, work out which version she's  with a bunch of, uh, bunch of constraints
is quite challenging.  um, but yeah, a lot of it is just working
out what is the, it's the  whole startup thing, right?
you know, what is the mvp of each things?  what is the smallest useful, um, approach
and having a language that is designed to  be small because i think that is a better
experience as a user actually makes it a  lot easier to implement as well.
if i was trying to make it rust or a  scala, i just never possible with it.
but i'm trying to  make it a little or ago.
so right.  yeah.
oh, i can hear your  cat in the background.
happy little guy.  so do you think, because i've followed a
bit about your design process and you  say you're doing like
fantasy programming design, right?  i also know you've done things like, um,
gone off to twitter and  said, hey, what syntax
would you expect for  this behavior and stuff?
and you've run regular twitter polls on  design and you're
keeping the language small.  and that allows you to
make certain design choices.  what's been important about
making a cohesive language?  some languages do that well.
some do it badly.  how do you approach that?
um, so, so the, the, all the polls and  stuff's really useful because i, you
know, i want to make things  not, what's the word we said?
accessible.  um, not to be least surprised.
yeah.  and i just find that, um, i'm often wrong
just about what is normal and what isn't,  you know, i think it's easy to assume
that your opinion is the, is the standard  one, but i just isn't.
i've got. so it's really useful to just have you  done again, sort of, um, sentence check
and say like, which of these two things  looks, you know, try
not to ask it directly.  like which two things looks least weird,
but like sort of ask them simple  questions about some example code and
just see which ones  people get confused by.
um, cause yeah, even if i think something  else is better idea, i'm probably wrong.
um, but it's quite tricky.  just like you just spend, i think just
doing things really slowly really helps.  i know.
i think that's another reason why, you  know, having something that's small where
i'm doing the majority of the work really  helps because i get to
spend an awful lot of time.  cause i know i'm, you know, i'll be
working on a package manager or something  and i would have had an idea for
something six months  before i even started that.
but i'm still working  on this for six months.
so i've got like a year of like, you  know, i'm having
breakfast staring at the window.  i'm like, well, what
if it did this thing?  how would i impact this thing?
how would i impact this thing sort of  like gently brewing ideas in the back of
your head and after like 12 months of  thinking about these things, you'll have
enough moments where something went, oh,  but i would interact with this thing.
oh, that's interesting.  what about that?
and you normally end up sort of  accidentally covering all of it just by,
well, i guess obsessively thinking about  it for an extreme amount of time.
slow, slow programming.  that's my, um, slow but obsessive.
yeah.  never stop thinking,
but spend a long time.  yeah.
yeah.  cause i know i'm going
to try not to name names.  but there are some languages that look
like the author has woken up in the  morning with a new feature idea, throwing
it together as fast as possible and  chipped out of the door.
yeah.  and then there are some
that feel more cohesive, right?  yeah.
and i want to do that.  it feels great to like have an idea,
throw it together and chip it.  like i sort of, i dream of, um, finishing
gleam, you know, handing it over to some,  some gleam foundation that can do things.
and then i can just make the language.  that's all the bad ideas
that i didn't do along the way.  cause they're always like the really,
the, um, the medium ballad is, or were  they're bad and you go,
yeah, that's not clever.  let's not do that.
but the really bad ideas, the ones where  you go, ooh, ooh,
that sounds really good.  let's do that.
and then you think,   um, i don't know.
i'm not sure.  it's always, it's always, it's always
like, whatever sounds fancy as possible.  i wonder is, um, dangerously good
sounding is algebraic effects.  cause you can do all sorts
of exciting things with that.  like you can model, you can in user land
model things like async awaits and  exceptions and try catch
and all that sort of stuff.  like it's a clearly a
really powerful thing.  and, um, i think a lot of future
languages will probably have it in some  degree and it would just become normal.
and that's, and that's part of why it's  such a dangerous idea.
cause it goes, that sounds great.  but actually would that align with any of
the goals of the project?  what's whether i'm trying to make a, like
a really simple language  that's really approachable.
and i'm going to be wedging in a.  yeah.
very powerful tool, which is sort of  experimental and a few
very complicated languages.  um, and it would completely destroy
interrupt with, you know, interrupting  the other direction
with a line of expression.  and stuff like that.
so yeah, it's just not,  it's not particularly smart.
i didn't think.  yeah.
i can see why you want to leave it on the  table, but still be hankering
to revisit it at some point.  i really want it.
it's just so cool.  okay.
then.  so if you've left that on the table, it
does seem like a sensible choice.  which bits, which bits have you taken
that if i want to get started learning  gleam, what you think are
the bits i need to know.  oh, this is something i'm thinking about
at the moment because i'm trying to make  a course for learning.
oh, yeah.  so, um, i've got some funding from the
erlang ecosystem foundation, which is a  lovely org to try and like grow the, the,
you know, the community in general to,  um, make a syllabus on exes as you've
come across that, which is a platform  for, for practicing and learning
different languages.  so, yeah.
yeah.  yeah. in february, we launched a, uh, a regular
track, um, on exes, which they featured,  which is really lovely of them, which is
basically like, here's a small program  and challenge, solve it.
and then you can get, um, you know, you  can have a bunch of tests, um,
automatically run for you, but then also  you can be mentored by, you know, a
member of the community.  and it's just a really fab
little, it's a really fab site.  really recommend using it if you want to,
um, practice any languages, but they also  have like another layer on top of that,
which is a syllabus.  so as well as having challenges, they
can, they have special challenges which  teach you individual
concepts of a language.  so if you've got a well-made syllabus,
you can go from being a programmer, not,  not, you know, you need to know a bit of
programming and you should be able to go  to, um, from zero to usable of a
language, uh, by going through the  course, which is really exciting.
so, um, what do you need to know?  not much really.
we tried to, try to boil it down.  again, i'm playing on easy mode because
it's such a small language,  but, um, it's mostly just, uh,
functions and values and pattern matching  and, and records and
all that sort of jazz.  okay.
okay.  you're so, but i'm going to need to mix
that into some knowledge.  i mean, erlang is very heavily actor
based is gleam like deep  knee deep in the actor model.
no.  i, so in, i think it, i think it's always
tricky with talking about otp, the, the  actor framework of erlang because, um,
erlang is also quite a small language.  it's odd, but it's
quite a small language.  um, so when you learn erlang, you spend
like this much time learning erlang and  this much time learning the actor
framework because it's, you know, it's  much more than just like, um, async await
in, in, or, you know, it's  much more than like a little
concurrency module in other languages.  it's, it's in many ways, much more akin
to an operating system, you know, all  these like independent things and ways
that they talk to each other and patterns  you should use so they can look after
each other and deal with  failure and all this sort of stuff.
and it's really quite complicated.  and i think if you go into beam
programming through erlang, you'll  probably be spending a lot of time
looking at that stuff just because that's  quite at the forefront of
the,   um, of that community.
however, if you learn, if you learn beam  programming through alexa, they've got
much more of a spin on normal sorts of  business programming.
um, so, you know, making web apps and  websites and this sort of
jazz and managing databases.  and even though your code is all running
inside this active framework, you may  never actually see, like, i think, i
think maybe i've also got no data, but i  think maybe the majority of alexa
programmers don't write  any, um, otp code at all.
because they just use, well, i'm using  the web server that comes with the
popular web framework and it has loads of  actors under the hood and their pub
subsystems or actors and all  these other things are actors.
but like, i just write the web handle a  bit that talks with database connection
that it's all actors again and you just  don't worry about it.
it looks very much like if you're writing  an application in, well, even perhaps
like ruby on rails or python or  something, because there's not even any
async or wait inside the code because  it's all just like outside of it wrapping
your, your handler stuff.  right.
so, because i've always had the  impression that you have to get into that
model to get anywhere with erlang.  but i could opt into that later once i've
got my feet under the table.  yeah.
and you may never get there.  so the nice thing about, um, the actor
model over like async or wait or  callbacks from futures and things like
that is that, um, if you're, each actor  only performs one piece of work.
uh, so it's entirely single threaded.  you know, you just write code that says,
well, i pulled the, i pulled the, um, the  body off of the request objects.
there's no async, you just block the  thread and then, oh, and then i'm gonna
talk to the database.  no async block the thread and then i'm
going to send the response.  no async block the thread, you know, it
doesn't get, it looks like, um, you know,  it looks like it should
be really inefficient.  and i've code that, you know, causes the
whole, uh, the operating system thread to  be blocked, but it doesn't because it's
like, you're just  blocking this one actor.
you can have, um, you know, hundreds of  thousands of them for happily.
and people routinely do.  right.
it's, it's a very normal thing in the  beam scheduler, right?
yeah.  yeah.
it's super normal.  like you should be doing that.
you should, you know,  you, you write the sim.
so,   um, um, joe armstrong would say it's
really hard to make one web server that  can handle a million requests
concurrently, but it's really,  easy to make one web server that can run
one, uh, request and  then run a million of them.
and like, that's kind of the whole idea  of, um, like the early otp actor thing.
it's like, just do the thing that's  really simple for your little, whatever
the smallest task is.  and you multiplex it in a
completely different place.  and it also means when something goes
wrong, you don't go, well, how do i  discard that one bit of states and then
not impact with the other ones?  you go, well, it's
just this tiny little box.  like, oof, off it goes.
everything else is okay.  this is something i love in programming.
when we, when we have a different way of  looking at the same problem, that gives
really interesting different results.  okay.
i'm going to have to find  time to play with gleam.
yes.  um, so there are two other things i
really want to ask you and maybe we  should talk about
keeping the lights on first.  okay.
because you've, you've, um, done a  mixture of things to keep developing
this, including being poor, right?  yes.
that was a good one.  what's it like being an
independent language designer?  it's a captifed.
it would, so traditionally the experience  has been, i work a job for a while and i
get progressively more irritated with a  job, not because the job's bad, although
i have had some of those.  but just because i wanted to be doing
this other thing and i'm spending my  evenings and weekends doing it and
there's something where i'm going to quit  and i'm going to work full time on gleam.
and then i just watch  my bank balance do this.
and then at some point i go, oh, so i  need, you know, rents this much.
and my, my bank balance is this much.  i should probably get a
job in the next 30 days.  so i do, i did that like, i
don't know, two or three times.  um, but then at some point, uh, get hub
release, the github sponsors program,  which is like, you know,
pay a patreon for programmers.  um, and some people are
like, you should sign up to that.  and i thought, you know, the idea that
this would ever be a  project that could sustain me.
i just never even considered it really,  because, um, that just making money from
open source seems completely impossible  as far as i can tell, unless you've got
something very  complicated to sell on top of it.
um, so i signed up and then to my  surprise, a few people started, um, yeah,
a few people started sponsoring me and i  was like, wow, that's, that's amazing.
i didn't realize i had that,  like that level of support.
and i just, um, you know, i started  marketing at little more focusing a bit
more on, um, you know, trying to write  things are actually just good.
like let's write more blog posts about  how these, how, how gleam works and
what's going on in the gleam world.  so people keep track of what's going on.
and then it just steadily grew and it  grew to a point at which, um, yeah, it,
it's a lot smaller of an income than any  other job i've had in a long time.  however, it is actually
enough to pay the bills.  and yes, how much money am i willing to
sacrifice in order to like, um, a make  gleam successful and make it exist, uh,
but also, you know, not have a boss.  well, something i care about.
um, and yeah, that's a good trade.  so now i'm, i'm have less money, but can,
can make this thing  happen, which is really good.
and then that's always looking for like  little bits on the side to,
to, um, you know, waste money.  so if i can find a piece of work that
aligns with gleam, um, but also can bring  you some money to, you know, help make it
a bit more sustainable, um, then that's  worth doing like applying for grants and
stuff like the early as in the early  ecosystem foundation one, which i
mentioned earlier for making  this course to learn gleam.
like that, that's a good  example of that sort of thing.
i'd love to do more stuff like that.  ah, cool.
can i ask, i mean, feel free to refuse to  answer this question
because it's about money.  but the, the whole, um, get hub
sponsorship thing, is it like, if you've  got a few large sponsors,
is it lots of little people?  what are the rough numbers in there?
it's almost entirely, uh, money.  um, uh, the biggest sponsor is fly the
deployment platform.  um, it's also a really good product.
i don't have to say that, but it's good.  you should probably use it.
uh, i use it.  uh, right.
yeah.  yeah.
yeah.  i like, i know that because i've got,
i've got good developer experience, but  they just do clever
stuff for firecracker vms.  and i'm sure, oh, that's really clever.
i like that.  um, but, uh, yeah, so they, they give
about maybe a third,  maybe a bit more than a third.
and, um, then the rest is like people who  could be giving anywhere between like,
you know, $1, $5, $10.  and then a few people give a hundred,
which is just amazing for people.  um, i mean, my, my.
ideal situation is would be that, uh, in  the future, the companies that are using
gleam, they'll all give a small, like,  you know, amount of money that is almost
insignificant to a business to, um, not  as clean, but their
dependencies in general.  i think companies should give a small
amount of money to, to support their, um,  you know, any open source projects that
use, and then that will be, uh, you know,  much less scary for me.
if i've got like, you know, tens of  businesses giving us all that money
rather than rely mostly on one company,  giving a larger man, because the flying
guys have been fantastic.  um, and you know, i do hope that they
continue to support.  um, i'm extremely grateful, but like,
there's no reason why they have to, you  know, it may, and point
may come in the future.  they decide that they want to do
something else and that that's it.  that'll be, uh, uncomfortable for me.
so, yeah.  yeah.
did you ever consider,  were you ever offered?
like, um, i know the inventor of elm  ended up working for a company that used
elm heavily and he was just employed to  be their in-house language developer.
is that something you'd be interested in?  i had a few organizations sort of, um, we
didn't get very far down the process, i  think, because i didn't sound very
positive towards it, but a few people  sort of like gently approached that.
but i'm very concerned that, um, having a  single company have such a large
investment or like a large perceived  control in the language, um, will really,
you know, shape what  kind of work that gets done.
and i don't want to, well, i mean, i do  actually, um, if people are sponsoring
and they say, oh, we want to be, you  know, this is a problem for us.
so we want to be able to do that.  i generally, you know, shift the backlog
a bit to try and align with those needs.  but if it was my employer, um, you know,
suddenly it's not really my decision and  i'm not sort of deciding, um, you know,
what i think is best.  i think there's actually going to be a
bunch of obligation there.  and then i'm not convinced that i'll be
building the thing that is best for, um,  you know, the gleam
community and future gleam users.  cause in theory, you know, if all goes
well, this project's going to go on for  decades and decades and decades, you
know, hopefully last longer off.  continue long after i've, um, you know,
finished working on it.  so, you know, what some company needs
today is not super relevant and i'd like  to, to separate those
things out as much as possible.  so does that mean you're going for the
like benevolent dictator for life?  i always, i always joke that it's the
malevolent dictator for life.  really depends on the author.
yeah.  i mean, so i think that, um, i think
elmo, um, evan, the, the elm chap did  some good writing on this about, um, you
know, i think it's a really good fit for  a language at the start of, not just for
language, but technical projects.  um, assuming you've got a good, uh, you
know, assuming you get lucky with the  person, i guess, to some degree and they
make good decisions.  it's really helpful to, to, um, you know,
what, what can be more a cohesive  decision making process than a single
person, eh, you know, and not squabble  and not get caught in these things.
and that can get you to a point when  you're mature enough
in order to go, okay.  and now it's, um, much less pioneering
and much more stewardship at that point.  i think you can spread out a lot more.
um, we're not quite there yet.  um, i think we're pretty close.
um, i got the impression that elm kind of  burnt out before it got
there by putting on one person.  yeah.
i, it's, it's, it's tricky to talk about,  you know, what's going on with elm
because, um, i'm not privy to any of it,  but it did seem at some point the updates
just sort of stopped coming and i, you  know, he's clearly very smart guy.
and i, but i speculate it is, you know,  might be burnout as he, as he suggests,
like he seems to like, um, working on  things, um, like having quite a high
degree of control over it, which, you  know, all, all, everyone in that sort of
situation is going to have  a high degree of control.
but i think delegation is so important,  you know, um, i, i, i'm very
much an old open source nerd.  no, i'm not old, but i'm very, you know,
i've been an open source nerd  for a long, for a long time.
and as such, like, i think the community  aspect of creation is super important.
and so, so much of gleam is, is, you  know, from the way that we manage the
issues and the way that i try and  interact with the, um, you know, the
community, it's about trying to enable  people to, to, to get
involved and build things.  whether that be, um, you know, this
person did this amazing piece of work  that'd be really hard for me to do and it
saved me loads of time.  awesome.
or if it's just this person made a pull  request and it wasn't very good.
um, we helped them get it there and it  probably took a lot more time than if i
just done it myself, but they had a good  time and now they're a
member of the community.  like those are both wins.
those are both really good things.  and so like, trying to grow, trying to
grow both of those things and all the  other, um, you know, interactions can
have is like super important.  and i hope it means if i, you know, if i
were to vanish tomorrow, which i'm not  going to, um, the
board, the board keep going.  do you, so have you got people like
contributing tools,  contributing to the language itself?
yeah.  design decisions.
how spread out from you is it?  the majority of the compiler development
is me, like, you know, quite a large  share, but the, we, we've got a, um, the
community is mostly focused around  discordment, which is lovely.
it's just, it's the friendliest,  cheeriest bunch of people ever.
um, and people just  like, just there to hang out.
some, some people, some people are there  because they want it really interested
and involved in the, the, you know, the  language development and
tools and all sorts of things.  they're making like
great libraries and things.  and you know, there's a few academically
types who do a lot, you know, write  actually quite long form posts about, um,
different language features and how they  can interact with each other and like,
oh, well, and the  references to papers and such.
and then there's the people who just sort  of use gleam and they mostly just sort
of, um, you know, they, maybe they share  some libraries they've made or like show
some pet projects they've got.  and there's just some people who don't
use gleam and they're just  there because they like it.
like not, not, not it isn't gleam.  they like the people like they joined it.
they was like, have you  ever, have you ever used gleam?
like, oh yeah, i installed it once.  i've never run it.
it was like, you'll hit every day.  but that's quite nice.
like i think it probably shows that, um,  we're doing something right.
we're building a community.  if some people are just there because  they like the community so
much, like that's a good sign.  yeah, yeah, absolutely.
it makes me imagine that you're, uh,  eventually going to get sponsorship to
buy like a hundred acre ranch whole clean  community or just work the ranch.
where programmers go to retire.  yes.
yeah, absolutely.  when they're burnt out, the louis pilfold
burnt out retirement clinic.  gone to live in a farm.
yeah, i love it.  but what, what, what
is the future of gleam?  i mean, if i look at gleam two years from
now, when i see exciting new features,  louis pilfold being the mc of gleam comp.
oh, maybe i've made a tricky decision  lately to like do a lot less, um, like
talking at conferences.  um, and i really enjoy it, but it just,
uh, it takes me a long  time to write a talk.
i know some people can write a talk on  the train on the way over, but maybe it's
because i did a lot of theater.  when i was younger, but it always ends up
like writing a script and rehearsing the  thing and like doing iterations on it.
and it just takes many, many, many hours.  and like, i could write a blog post in
much less time than this.  and it would be read by much more people.
and then i can go and make a second blog  post for a third or like work on a
feature and these sort of things.  and you know, at this point in time
where, um, you know, people, people are  looking at gleam, you know, it's got a
lot of, of momentum,  which is really exciting.
it's got more stars on github than f  sharp, which i find bizarre.
wow.  yeah.
like how did that happen?  so like now is the time to, to push.
so we've got to be really efficient with  time and that isn't conferences at the
moment, but i'm hoping somebody will do a  gleam comp because i'll definitely,
definitely do something for that.  um, but in the next two years, like we're
getting, we're finally getting the point  where the language is
starting to look complete.  that doesn't mean nothing will be added
anymore, but like all the things that i  think have been, you know, if there was a
version one of gleam, the language would  have to have this, this,
this, this, this, this mess.  and that's always just seem like this
mountain on, on, on the horizon, but now  it looks like a hill, you know, like it's
still a very large, it's still huge, but  like it's, it's, um, yeah, it's, it's on
the horizon, which is really exciting.  and then there'll be decisions about,
okay, does that mean  we do version one now?
what does, what does version one actually  mean when, um, the binary doesn't have
just the compiler and language in it, but  it also has build tools and a language
server and all these other things.  like, can i have some of those be like
zero point something, or is the version  one of the language only stability
guarantees that only  for the language itself.
and it's not for the surrounding things.  so there's a lot of, there's lots of, um,
you know, nuances to work out and i'd  like to have, um, a good amount of, uh,
just data on how people are using it and  finding it in, in, in production,
because, you know, i feel pretty  confident we've got a good design, but it
may be after two years, people are  actually, this thing sucks.
like that thing there is rubbish.  and i go, okay, cool.
we're going to fix that.  and it'd be really nice if that was like
pre one rather than that.  well, let's do one to two.
um, because you know, the artics, uh,  it'd be the same amount of work.
the upgrade process will be the same, but  it would just feel quite
different to the community.  so you want the major features to be
ironed out in production for a while  before you put the
production stamp on it?  i think so.
like i, i, i, well, i just want to have  some, i just want to have like more data,
more data is always good.  like for any decision, you know, if
you're not entirely sure about something,  just wait a bit, um, have more, have more
shower thoughts and talk to more people  and do more experiments.
go into the gleam community, spawn a  number of actors and
see which one's crack.  exactly.
yeah.  yeah.
now you're talking.  well, i am going to go and check it out
because i've got the  rest of the afternoon off.
um, cool.  louis sounds absolutely great.
i'm looking forward to getting my hands  dirty with a language that isn't as weird
as erlang, but has the power.  thank you very much
for joining me on this.  talk to you soon.
and it's going to be great having you in  the gleam community.
yes, absolutely.  good plug.
cheers.  thank you.
thank you, louis.  and thank you to louis' cat, nubie, for
making a guest appearance there.  with that, i think i am going to head off
and kick the tires on gleam.  i've got some spare time at the moment.
so i'm going to treat  myself, do it a programming.
if you want to learn more  about gleam head to gleam.run.
that's the website with all the details.  and if you're anything like me, you'll
probably also want to look at packages.  gleam.run to see what kind
of library support it's got.  before you head there, this is the part
of a podcast where i tell you about our  sponsor, but we, we don't
actually have a sponsor yet.  so this week's episode is sponsored by
having a nice cup of tea.  whether you're listening to this podcast
in the gym, the kitchen, or on the way to  a trumpet lesson, why not follow it up
with a nice cup of tea  and perhaps a biscuit.
if you want to throw a biscuit my way and  support future episodes of developer
voices, please consider clicking like and  subscribe and share
and all those buttons.  it would be great if you share it with a
friend who you think might be interested.  and we all know the algorithms are trying
to figure out what interests people.  so if you found this interesting, tell
them with a click, please.  and with that, i think we're
at the end of this episode.  i've been your host, kris jenkins.
this has been developer  voices with louis pilfold. 
thank you for listening.