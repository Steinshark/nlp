here are the nine things i wish i knew when i started programming lesson number one there's more to life than big tech a lot of people want to work at big tech companies and don't get me wrong landing a job at one of those companies is definitely something to celebrate but don't make it your life goal i'm going to let my friend ly explain why you shouldn't do this in the simplest way possible a google job is statistically the hardest job in the world to get it's statistically easier to get accepted into harvard than it is to work for google we actually get 2.5 million job applications globally in a single year you think google wants you obviously google's not going to want your college dropout no work history dumbass thanks ly you guys should watch his videos too by the way i hope you guys understand now anyways while it has its perks especially in terms of pay the food and benefits the food but if you're learning programming because you love it you love the art of creation the thrill of solving problems then big tech might not be for you since big tech is you know big you'll find yourself working on very specific parts of a large system maybe you'll learn how to architect large systems but if you're looking to leave an impact that might not happen there big tech is also not sunshine and rainbows some companies have been known for the terrible work life balance where it's not uncommon that an employee will quit within the year however smaller companies and startups offer a playground of opportunities you're not just the cog and the machine you'll often find yourself in different roles from planning designing and implementation and you'll go through all the steps in the development process the work might also be more engaging fulfilling and come on it's probably going to be more fun but at the same time do not let these companies take advantage of you before you get obsessed over working at a big tech company or you're discouraged that you never got hired or you got rejected from them i want you to take a moment to reflect on why you even got into programming in the first place if it's about growth and hands-on experience smaller companies might be more suited for you if you want to relax and just work your 9 to-5 you might want to check out non- te companies like banks government jobs and healthcare anything that's not related to tech and if you're in it for the big bucks then fair enough i guess this tip doesn't really apply to you so go for it l's number two fundamentals are your best friend imagine building a skyscraper right no matter how impressive the design if the foundation is weak the entire structure is at risk the same principle applies to programming the latest frameworks languages and the tools they're just upper layers at the base the core remains consistent the fundamentals whether you're crafting an intricate front end design architecting a robust backend or playing around with machine learning the fundamentals are what's going to guide you variables loops data structures algorithms these are all the building blocks of every coding project maybe today's frameworks might be replaced by another in a few years but you know what's going to remain consistent at the end of the day the fundamentals by solidifying your grasp on them you're not just learning for today but you're also going to future proof your skills which will always make you hirable so before you chase the latest trends of libraries and frameworks i want you to take a step back and invest some time in understanding the basics lesson number three the importance of real world experience back when i was in college i remember working on coding assessments where everything was neatly laid out for us the problem statement was clear the structure was predefined and there was expected answers we were meant to reach and it really did feel satisfying to solve them it was like fitting pieces into a half finish jigsaw puzzle but here's the reality the professional world is not like that at all once you step into the professional world of programming there's no professor giving you a structured assignment or any predefined correct answers while you may have a manager to help you you're often going to be presented with a vague problem and you're expected to find a solution so instead of a pre-made jigsaw it's kind of like a bunch of puzzle pieces from different sets and it's your job to figure out a way to make them fit together while you may learn a lot from textbooks online courses assignments real world experience is going to be your best teacher you'll encounter unexpected bugs systems that don't behave as they should and clients who are going to pivot their requirements overnight you're going to have to adapt innovate and improvise and it's the unpredictability that builds resilience and genuine problem solving skills so for those of you still in college or those that just graduated and they're wondering how to bridge the gap between college assignments and the real world here's my advice start small dive into to open source projects take up freelancing and really find any type of internship big or small any hands-on experience is a step closer to understanding the real world of programming lesson number four network as much as you can when i first started programming i was focused on skills you know master this language learn this framework master this algorithm but as time went on i realized something while skills can open doors it's the connections that light up the path think of the tech industry like a graph every node represents a person and every connection a relationship these rel relationships aren't just about job referrals or project collaborations they're also a collection of shared knowledge experience and insights a casual coffee chat with a senior developer could offer you a solution to a coding problem that's been bugging you for weeks a conversation at a tech conference might introduce you to a job opportunity you didn't know about or a mentor could help steer your career in a direction you didn't think about but i want you to keep this in mind building these connections doesn't mean cold messaging professionals on linkedin or handing out business cards like handy it's about genuine relationships don't be weird it's pretty simple just be a normal human being and just talk to them like a friend join some hackathons build some fun projects make some friends engage listen share and most importantly be genuine in your interactions don't be a robot don't be fake don't act like this is something business just be friendly so for those of you still in college or early in their careers and you're wondering if networking really is that important here's my perspective while technical skills are a good asset combine that with a strong network and you'll turn into an unstoppable force that can get hired anywhere you have to remember opportunities don't just come from what you know but also from who you know lesson number five impostor syndrome will happen to most of you during college i was surrounded by classmates who seemed like they had everything figured out they talked about technical topics they seemed confident in their coding abilities and they asked questions that i didn't even know what they were talking about and they always appeared to be miles ahead of me it felt really easy to feel overshadowed you know underqualified and i always wondered if i miss some class that just turned you into a programming prodigy and that feeling didn't just disappear during my internships either my co-workers were very skilled while i was just trying to keep up with the most basic things i always had some doubts like do i really belong here is programming for me or i'm just not good enough impostor syndrome eats you away it's fueled by doubt it convinces you that you've locked into your position rather than earning it and trust me even the most accomplished smart programmers have felt this way at least once here's my advice it's important that you recognize and acknowledge impostor syndrome as soon as you can you have to understand that you're not alone with these doubts it's a struggle that everyone faces it's okay to not know everything share your feelings with someone close or other programmers and you'll realize that many of them have walked in your shoes you just have to remember that your path is uniquely yours every challenge every problem you solve every project is a testament to your growth and potential lesson number six learn how to collaborate and work as a team in my experience an aspect that a lot of programmers don't learn early on is collaboration collaboration is as important as any programming language or framework during group projects and especially in my internships the importance of collaboration became evident it wasn't just about my code it was about how my code integrated with others how i communicated my ideas and how i navigated feedback and suggestions and there's certain tools that you have to master as well like version control which ensured smooth collaboration but more than just tools it was the soft skills the ability to listen to communicate effectively and to work as one cohesive unit that's what truly mattered in the professional world you're rarely ever alone you're always going to be part of a team whether you're just developing a small feature or architecting a large system you're going to be collaborating and this collaboration isn't just with other developers you're going to be collaborating with designers managers stakeholders and sometimes even the users so it's essential to understand your technical expertise will open doors but your ability to collaborate will define the impact you make within those doors so invest some time mastering tools like git but more importantly nurture your soft skills engage in group projects participate in some team activities and always be open to some feedback lesson number seven specialization versus generalization when i first started learning programming in my mind there were so many things about programming you could get started with web development machine learning game development mobile development there's a lot to choose from there's a lot of languages lots of frameworks and technologies where you're faced with a problem where do i start here's my advice start by being a generalist in the beginning learn some programming fundamentals then explore some areas of programming learn some front end some backend maybe some mobile development and get into game development if you love video games i really think this is important you'll discover what you really love once you find that niche the area of programming that you love start specializing dive deep become an expert because the reality is while generalists can adapt and bring a broad perspective it's the specialists who become invaluable in their domain their depth of knowledge and expertise makes them irreplaceable well until ai steals their knowledge so start broad let curiosity guide you and once you find your passion go deep and commit to it lesson number eight you'll always be a student a lot of people are early on believe that one day they'll become a master at programming but that's just not possible in this field the tech world is always evolving there's always a new version of a language some new technology you know a new javascript framework every 5 seconds things in the tech world just keep shifting and expanding it's something that's both beautiful but challenging so if you ever thought of mastering something here's my advice just enjoy the journey enjoy the journey not the destination enjoy that this is a field where you'll always get the opportunity to learn to grow and evolve you'll always be a student who gets to experience a fresh challenge and learn something new while you may never feel like a master in the traditional sense as long as you commit to lifelong learning you'll become a master of adaptability resilience and evolution and in the world of tech these are the traits that truly define a master and one of the best ways to truly learn and understand programming is using project based learning in college you'll spend countless hours on theoretical concepts algorithms data structures and while it did lay a solid foundation it was only when i started implementing them in projects that's when it really clicked in and i learned them you see there's a big gap between understanding a concept and applying the concept i remember my first programming project you know the classic to-do app once you know the fundamentals it's pretty easy to plan and design it but when you implement it that's when you're truly going to learn the process of turning an idea into a functional application was so exciting it wasn't just about writing code it was about problem solving debugging user experience and just the satisfaction of seeing my creation come to life projects have way of presenting challenges that textbook exercises just can't they push you to integrate various concepts to think critically and often to venture outside your comfort zone whether it's a personal website a mobile app or a game each project is a unique puzzle waiting to be solved so dive into these projects they don't have to be grand or revolutionary it doesn't have to change the world start small build a calculator make a to-do list automate something and with each project you'll not only reinforce your knowledge but also gain practical insights that pure theory often misses in the world of tech projects serve as evidence of your skills they're your portfolio showcasing your abilities to potential employers collaborators and the world but more than that projects are a testament to your journey each one a milestone marking your growth your challenges and your triumphs i'll leave some resources to get you started with project based learning and hopefully improve your technical skill sets and i hope my lessons will help you become a better programmer and get you closer to your dream and not end up like me yeah you should check out my netflix video if you want to truly understand what i mean by [music] that