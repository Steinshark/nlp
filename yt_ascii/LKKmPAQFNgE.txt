yes okay this is on great yeah i want to talk about my favorite memory league because i think that we as c++ developers we can feel envy towards our c programming colleagues who gets to experience the joy of hunting down memory leakes in their day-to-day job it's it's part of how things work and for them to get a memory leag is very easy they don't call free that's it but we don't call free or delete and we still don't get memory leaks because we don't call new and getting memory leaks without calling free that's easy but getting memory leaks without calling you that requires some finesse so i want to show you my favorite memory leak here it is isn't that a beauty this is art so what we have here is the magic part of this destruct v the this is good v is a vector of v's so this is a this is really useful structure this is a v is a node in a tree with an arbitrary number of children so v is a node itself and v do begin to v do end is all the children of v so i don't know if you're familiar with how how vector works but a typical implementation of vector is like this we have an instance of vector v there to the left it has three pointers begin points to the start of a a memory area which contains some data end store points to past the end of that memory area and end points to one past the last element it doesn't have to be implemented that way but this is a very very common implementation so here we have a vector v that has space for eight elements but it actually has only three let's create another one v2 you you get the you get the idea here we have five elements and room for eight this is good swapping two vectors is an amazing operation so all you do is swap we don't touch the elements we just swap the pointers so swap swap swap i this is cool we can do this all day swap swap swap this is cool so let's go through the memory leaks so we have our our main here we we create a v this is the empty vector to to the left the these pointers the empty things that they are null they don't point to anything therefore the vector is empty and then we do and place back so now we create one child to v and it in its turn has no ch children so the the poins are null and now we do swap you remember what we do when we do swap we just exchanged the the pointers so we at this so now v is empty and i believe that is called a self-own and v goes out of scope and we have an orphaned element there we have leaked memory without calling new and i think this is a piece of art this is something that you can impress your colleagues with you can write code leak memory without calling new in a way that passes all code reviews this is wonderful thank you