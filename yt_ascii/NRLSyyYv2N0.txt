how's it going guys in today's video we're going to be looking at the logging module in python and how you can start using it immediately because right now or until this point a lot of us have been using the print statement but the print statement is not as powerful as the logging module so let's find out together in this video how powerful it actually is and how we can start using it in just a matter of minutes so the first thing to note is that to use logging you just need to import logging it's built in so we don't have to install anything it's already there we just need to import it so what is logging well to really break it down if you're running a piece of software and you want to keep track of events as it's running logging is what you use to keep track of those events and when you use the login module there are actually five different levels of logging the first one is logging dot debug and here we're just going to type in debug then we have logging dot info and i'm just going to write info here logging dot warning logging dot error and we'll type in error there and logging dot critical so these are the five levels of inbuilt warnings we have with the logging module and the python documentation actually gives us a quite good description on when we should use each one of them so you would want to use debug for detailed information typically of interest only when diagnosing problems info is used to confirm that things are working as expected warning is to indicate that something unexpected happened but the program is still going to continue working so if you have for example this low disk space then with error you might have some sort of functionality that is unable to perform and that's when you would use error and finally with critical in general your program probably won't be able to continue running so it's a very critical issue so those are the five levels that are provided by the logging module and if we actually run this now you'll notice that in the console or only going to get three printed in the console and that's because by default it only prints warning and above and if you want the other ones to display you are going to have to configure your logging module so you would have to type in logging dot config or basic config and here you can insert the minimum level that you want to display so for example here we can say logging dot debug and at this point if we run it it's going to print everything from debug and above maybe you just want to print everything from error and above so you can do that as well just by specifying the level in the configuration for the logging module so this blank information in the console is great but sometimes it might even be better to display it in a file so you can have a long record of everything that's happening so instead of just typing level in here we will just add it later but i'm going to remove it for now we're going to create a file so you need to specify a file name and i'm just going to call it my underscore logs.log then i'm going to provide an encoding which is going to be utf-8 and with that being done we can just run the program once again and if we open our project folder you'll notice a new file called my logs and if you look inside that you'll see that everything is being logged according to what runs in our script and every time we run this it's going to append new results because each time we run this it's going to log these messages and it's not going to display it in the console anymore it's now just going to directly add it to our my logs file but what if you don't want to continuously append to this file well you can specify a file node and say it's right only which means it's going to overwrite it each time we run the script so now if we run this file and we check our my logs file it's only going to have these three no matter how many times we run it and again if you want to have these two displaying you need to specify that you need to say level is equal to the logging of the minimum level you want to display so with debug if we run this you'll see that all of these are going to be included in the my logs file but let's go back and i'm going to remove all of that because i just want to show it in the console for this tutorial so we're just going to leave it at level dot debug because next i need to show you how you can provide some variable data so for example pretend you have some sort of calculation or a function that returns some sort of result we're just going to pretend that x was the result so x is 10 plus 10 and we want to log that we want the log that we got that result back well here we can type in logging dot info and we're going to type in that the answer is and we're going to format this using the percent sign and the reason we're using the percent sign with the s or this old formatting method is for backwards compatibility that's the main reason to use this format this also works with more recent versions of the formatted string such as the app string so you can also just type in x provide the f here and remove the x both of these are accepted but according to the documentation this is used to maintain backwards compatibility but if you run this both of them are going to print the answer is 20. now very quickly i'm going to create another module so inside my folder i'll type in python file and call this other module and we're going to import login inside here and we're going to create a function and the function is going to say or it's going to be log dot info and we're going to say this is from and we will insert other underscore module dot pi so we understand exactly where this log message is coming from next we can go back to main.pi and continue here because i want to show you how you can configure the logging module to display more detailed information so let's remove all of this and once again i'm going to remove this line of code right here because the first thing we're going to do is now provide a format right now when we were printing to the console or let's actually go back and log something so if we type in logging dot critical and we say okay when we log this you'll see that we don't really get a really nice format this is really hard to read well i mean it's not that hard to read we have a critical error appearing in roots and the message is okay but what if we also want to display the line number the module name and the actual time that this happened well we do need to provide some formatting so let's do that with the basic configuration so here we'll type in formats and the first one we're going to add is percent sign level name followed by an s so this code here is going to give us the level name of the log that we are currently logging so if it's debug it's going to show debug if it's critical it will show critical and before i move on it's actually important to mention that this is not random it is following a special code that they created in python and these are the attributes for it so i'm just going to open up this link and show you some of them because this is where you will get them from and i will leave a link to this in the description box down below but here you will find all the log record attributes so as you can see there's percent ashy time s and that's going to give us the current time then you got level numbers you get line numbers these are the codes you need to follow in this string to get it formatted but moving back here we can continue formatting this so now we have the level name and i'm going to create some parentheses and use percent sign asc time and put an s again so that's going to give us the time for that followed by the actual message so percent sign message s and i also want to provide the line number so i'm going to add some parentheses line i'm going to add percent line no and that has to actually be surrounded by parentheses so line no d and finally i want to show the file name so i'm going to create some square brackets and add the percent sign followed by the file name s now this is probably not the most beginner friendly example but it's just to show you how powerful the basic config actually is so now that we have this line we can add a comma and i also want to format the ashy time so down here we're going to insert date format and here you can format it however you like using the conventional formatting string so for example if we want the date we'll add that date percent month percent capital year followed by the time so percent i percent minutes and finally percent seconds and we're going to show whether it's am or pm as well by using the percent p so this is the format we're going to be using and finally we have the level of debugging what happened to my debugging ah what am i talking about the level the level of logging.debug and now we can finally log some info and get some really neat logs in the console so if we have login.info and we type in hello my name is slim shady and then we have logging dot warning oh no you caught me you'll see that when we run this we'll get this error and if we look up here we'll have the formatting field not found in record level name and the reason behind this is that this should be a lowercase n and not a capital n but if we rerun this we're going to get the format that i was talking about so in info at this date and this time it said hello my name is slim shady on line number nine in main.pi now maybe we don't really care about the date so we'll just remove that that might be very important if you have lots of logs running over a course of several days maybe on a website maybe somewhere else who knows that's up to you but i'm going to exclude it for now because it's really cluttering the console but you can see that we're getting a lot of information back and if we run this again now that we took away the date we will only have the time and whether it's in the morning or in the evening then we'll get the message followed by the line number and so on so we can actually now start moving these on different lines and it's going to give us the line back and that's how powerful it is compared to print print doesn't give us any of this information it's just convenient to use print because it's one keyword and you don't need to configure anything but once you configure logging it just becomes so much more informative and i know you are thinking why did we create the other module and that's just to show you that we can also import other module and write under other module we are just going to call the function or actually we have to refer to it so other module dot function and i know pycharm is not going to be happy that i placed this all the way at the bottom but who cares so let's run this and you'll see that we will get the log from other module dot pi so it actually displayed to us the location of where it came from at which line even if it was in a different module which means now we can also change the name of other module as many times as we want and it's always going to give us an accurate representation of where it's coming from and to demonstrate that we're just going to rename this to hello module and if we rerun this other module is not going to be defined obviously because now i'm importing something different so here we'll type in hello module but as soon as we import the correct module that exists we're going to get line number five hello module dot pi so it updated that for us which means we don't have to go in hello module and change this message each time we want to log something it's doing that for us so we don't even have to say this we can just say i am free now and that's exactly what it is because once you run this line of basic configuration any code that's run after that using the logging module is going to use that basic configuration so we did not have to call basic configuration in hello module to make it work we just had to call it after that we actually specified this because if we were to import hello module before the basic configuration then we're not going to get the effects that we want we're going to get what we had earlier because it did not have the chance to run this line of code so as you could see using the logging module is super easy and it gives us a lot of benefits when it comes to formatting i definitely recommend you check out this documentation because there's much more you can do with it you can provide much more information than what i showed you such as the process or the path name or just the name in general there's a lot of formatting you can do with this so it's really fun to play around with because i mean you don't need to play around with it indefinitely you just need to find some sort of formatting that you enjoy and rearrange this in the way you like it and then just use it for the rest of your programming career until you need to update something specific but it will give you a lot of information in your scripts as you can see if we run this again we get the line number we get the file we get the time we get how important it is and we get the message unlike with prints where we have to do everything manually we can say main.pi and i guess for main.pi we'll say hello so we can do that and it will appear in the console down below and that's of course going to remain one of our favorite methods for a quick debugging but for the bigger projects i would recommend using logging because it does give us a lot more information plus you can store that all in a log file at any point you want as i mentioned earlier and let's actually add that so we can type in file name i will say my logs.log and let's get the file mode and say right so now if we run this and go to my logs we're going to get all of that saved in a log file in case you want to store it for later or in case you want to continuously append to it you can do that and you can always look through all the logs and find out where something went wrong but anyways guys i hope you enjoyed this video do let me know in the comment section down below what you think of logging but otherwise as always thanks for watching and i'll see you in the next video