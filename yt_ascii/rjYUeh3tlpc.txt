so today i want to talk to you about malware detection and what are what have been the trends in malware detection both in the academic community and in industry and i won't in particular to talk about how we came to use machine learning for malware detection as you may be aware of machine learning has had a big revolution in the past few years it's very prevalent in a multitude of domains like there have been great progress in image recognition face recognition these technologies are in our phones but also like both text translation and topic identification techniques or even text generation we've seen many recent breakthroughs even in the past few weeks however it's not as much widespread in the security industry and this has been researched in this academic community also for about i would argue more or less more than 10 years so the question is like why isn't especially in the context of malware detection why isn't machine learning as widespread in industry the key point is that security is an adversarial context by nature at attackers will try to evade detection so they will try to fuse them evade the machine learning system like if we want to represent it in a more formal terms let's say that the benign applications follow a certain distribution and if the attackers develop something malicious it follows another distribution and let's say that antivirus companies can identify a certain threshold to distinguish between benign and malicious the problem comes when attackers want to mimic benign behavior so that it creates a confusion between what is benign and what is malicious and it is not able to distinguish them anymore but this is not a problem just necessarily in security and in malware detection it can be in any domain like even computer vision and it depends on more about the threat model and what you're looking at and that's why you also both academia and the industry have been working into understanding properties of robustness of machine learning in a plethora of domains but today i want to talk more about more specifically about malware detection and i want to start with i mean i want to actually use as a writing example more of the mobile applications because malware can take different forms and general malware is any malicious software that does something to compromise the confidentiality integrity availability of or privacy of a user or a system and while malware can take many forms like it can be a windows pe a javascript plugin it can be like a dll but it's easy to think of it as like a mobile application is self-contained and it's easier to think about it as a as a case study so let's say that while an antivirus company and we want to evaluate whether a certain application is benign normal issues so what is the first thing that we do well first of all we do some static and dynamic analysis static economic analysis derived from compiler theory even it's like there are very basic computer science knowledge and for example dynamic analysis is based on principle of debuggings and certain breakpoints in course so most of you may be familiar with it but the intuition is like to get a representation of the behavior of an application static analysis evaluates an application without executing shooting it so it's a static evaluation of the code and this is often there are a variety of techniques often from the field of program analysis that try to evaluate the code and possible branches or state representations and there are behaviors for it this is kind of like what might this do yes exactly but of course there are like different levels of precisions that you may achieve static analysis can also be very lightweight it can be just even counting the api calls that are present in a certain piece of software of course that is not a very relevant it does not describe any complex behavior per se so it's a very likely static analysis but the quick system of certain apis can still reveal that something malicious i mean that it may identify something that is common also in other malicious applications and dynamic analysis on the other hand is kind of comp to complement it it's more like an actual execution of the application so it executes the app and generates an execution trace and as i told you it's it's based off debugging principle it's like inserting a lot of breakpoints and monitoring the system calls and taking the arguments and again you can have different levels of precisions also here of course the more precision you want to have the more expensive is become the analysis becomes and in dynamic analysis you get the behavior of an actual execution of the application so it has the benefit over static analysis of observing real behavior think about even a social network app and maybe there are parts of the social network app that are even never reached right or are not very commonly used of course a problem that is typical of dynamic analysis is like stimulation right it's like you need to simulate what the users would do like to provide a proper coverage of the application in a sense dynamic analysis provides an under approximation of an application behavior because it's like just an actual execution where a static analysis provides an over approximation maybe there are some areas of code that will never hardly be reached in an actual execution but still maybe you give importance to them indeed one strategy that attackers use to complicate this type of to complicate that action that they're doing something malicious is to add a lot of junk code that is maybe then taken into account into static analysis and then you end up with very complex abstract syntax trees or control flow graphs and it makes it very complex then to distinguish what is actually going on and what the application is doing so they might kind of put a lot of libraries in for add no images or something which it never uses but they get added up and checked and oh this this is just something to do with images right exactly yes it's exactly like you say it's they may insert a lot of junk and actually one of the most common techniques that are used nowadays is like called piggybacking which you take for example an app like a game app and then which like 99 of the app is maybe benign and then you inject something malicious in it so it's it makes it even harder to analyze and identify the malicious part that is triggered so static and dynamic analysis will be the basis of malware detection regardless of whether we use machine learning or something else but what is this something else that has been historically used by antivirus systems is like signature based detection let me just write sbd typically antivirus companies will have a database of signatures that are like they can be as simple as sequence of buys like that that they have been found in malware and if a signature match is found then the application is detected as malware otherwise it's just assumed that it's a benign application but signatures can be also more complicated they can be i mean you can think of them as regular expression they can even they can even be like there are typically languages to like explain or ex express signatures in more more complex signatures like the camera should be behavioral signatures about whether an app is doing x and doing wide and doing that then we have seen it in the past it's a malicious app the problem with the signatures-based that action although this is still used the problem is that it's a time consuming of course attackers in a sense work 24 7 to develop new strategies to evade detection so it becomes more [music] it takes time for defenders to come up with the proper signatures that also have the good amount of false positives and false negatives right you don't want to overlap with benign software detector benign software by accident and the database of signatures then become more and more complex to maintain because a there are prone like imagine like if you i mean anyone that has been work with regular expression it may be the same like if you start having just a set of keyword compositions that can be used in a form let's say then it the more keyword you start allowing i mean of course let's say that you want to express words as regular expressions right the more rules you start adding to this form the more likely than you will either exclude something that was allowed before or include something that should not be allowed so where does this take us it takes us like to then also using machine learning as another way of detecting malware it's still built off of static and dynamic analysis so like it inherits strengths and weaknesses of these approaches let's say that you could also like especially with the rise of deep learning and the many successes of deep learning you can even ideally throw an app inside the machine learning algorithm or like a deep learning algorithm so that it then learns it's deep learning is representation learning so it can learn automatically a representation of the application and its behaviors but i think that the problem there is that we do not i mean most of the neural networks that we have nowadays are for other tasks like for voice recognition text understanding or text translation or image recognition they're not suitable to identify program behavior so it will just identify superior's correlation and treat the app as an image for example so i think that it's it's very prevalent yet to just perform static and dynamic analysis and define with ex human expertise signatures that can express behaviors back to the point like why is and machine learning as popular in industry for malware detection as it is for other tasks and one big aspect is that since security is adversarial as i pointed out before malware evolves quickly over time so like let's say an underlying assumption of machine learning is that training and testing roughly follow the same distribution of course machine learning is about learning from data so actually there's also a way of saying in the machine learning community that it's like garbage in garbage out like if you have poor data representation in the training set whatever the machine learning algorithm learns will also be useless for the tasks that you want to solve in this case it's not necessarily a garbage problem but it's more like maybe you train from data from a set of benign and malicious applications from 2019 but then attackers develop new strategies and now those apps are not representative anymore of the current threat scenario so malware evolution is really it's often referred as concept drift as well or like distribution shift in technical terms and it's a real challenge for this domain but it's not also let's say we should not like surrender there are techniques even for the machine learning community that can be adopted in these cases like such as active learning online learning or another intuition is like classification with rejection sorry like it's another approach like the intuition is that you may for example discard and quarantine decisions that have uncertain probabilities like in which case like if we want to distinguish between good or malware if if the malware detection system tells that it is an hour with 55 percent probability while it most likely is i mean it's very uncertain about it it's like very very my i mean it's very very minor likelihood that it's like a malware so you may decide to quarantine and threshold it right so let's say and that actually this is what what the security academic community has been working on as well it's like trying to understand ways to adapt and to this drift and like understand how to maintain a machine learning models accurate over time people may think that and also when i started working in this field i also thought that okay there is malware and there is a good order clearly separate right but sometimes it's not as clear you could debate that without context certain applications such as i don't know even an email application or a social network application could be just identified as malware right so context is important but yes also the different families originally the families were like very very distinct you had ransomware that encrypts your data and that's for ransom you add like spyware that wanted just to steal your data secretly you had i don't know apps that maybe still credence specifically just credentials for bank accounts but nowadays also the categories have become also more merged it's more typical that the malware does multiple malicious behaviors at a time because they want to achieve different objectives and also over time the same our family will change slightly objectives and this yes this is part of the reason that complicates the whole detection yes we talk about the more revolution over time another thing that is very important to consider is that we cannot like so the attackers are not blind if we start using machine learning for detecting malware then they can also take advantage of the fact that we use machine learning to further evade our system and in a sense in adding as we add machine learning as defenders we increase the attack surface for our system because then the attackers can target this many people may have heard about adversarial machine learning and this is what this is about it's become very popular in the image domain where you have this image of a panda you add a little bit of visually imperceptible pixel perturbation which is carefully crafted and suddenly the panda by all machine learning system is detected as another animal in the more detection domain it the principle remains the same but it's a little bit more complicated you cannot just as in the image domain randomly add bytes to the software it will just not run and even something simple that has made the news such as adding a little bit of bytes at the end of a file it's not sufficient because even just compilers will remove junk code or unreachable code or sometimes it's called also that code it depends on the type of technique but if the code is clearly not reachable then it will be just be discarded by the analogy system so the attack will be ineffective attackers need to may have objectives such as preserving the malicious functionality or making it plausible so that for example it's not a torch app that weighs like three gigabytes part of the reason in which it was i think in the early 2010s industry started you tried to use machine learning as it is and then nothing was working nothing was explainable it wasn't reliable so there was a moment in which it was completely discarded but in that scenario i think that the problem was that we should avoid having a false sense of security one thing that was very typical and still is in the machine learning community is to do careful cross-validation so you divide your data sets into faults in this example like six volts then you use one full for testing and that is for training and then you rotate and the principle is that you want to avoid picking a lucky slice right you want to see whether your approach generalized to different conditions the problem in security is that if you do this you are in a sense integrating future knowledge in the training side you know like disregarding the temporal separation that needs to be present between training and testing set right if you have like three new malware families here that appeared just last year by rotating you will integrate them in the training set whereas if they come later there should be temporarily separators in your evolution in a sense you should should become more aware of in a sense the do's and don'ts of machine learning for computer security and malware detection and use these techniques more appropriately as i understand it when a machine learning system is very good at choosing stuff it's been or identifying stuff it's been trained on it's called overfitting isn't it yes and is that the big problem here because it's seeing things that are new it's seeing things it hasn't found yet in the wild after it's been trained that's the problem is is is there any point in doing this i suppose is what i'm thinking if if that's the big problem it's you know identifying new stuff yes so i i would argue that [music] i think identifying new stuff maybe has like a natural language meaning and a more technical terms meaning i mean there are like actually when you say identifying your stuff people would expect that it is able to identify everything possible but at the same time when i talk about this yeah you can't see it as something similar to overfitting in a sense it's related i wouldn't say it's exactly the same thing it is learning a lot from the training data and people that may say but then it's completely unable to learn new things i think that truth is somewhere in the middle in the sense that the objective is to have a good static and dynamic analysis that could give you also the right level of behavior representation so it's all about as many things in computer science it's a lot about abstract representations so that that with machine learning you can automatically learn what are some key elements that represent actually malicious behaviors this will allow them to identify new variant social test time because it will anyway recognize the underlying patterns so the thing is that in many cases attackers just do the same thing in a different way and i think this is the key point and i think machine if machine learning can help us understanding and scaling to detecting the underlying strategies of attackers then it can generalize in a sense to identify new threats the problem currently is that with the representations that we have they are able to just change the do the same thing in such a different way that the machine learning will not be able to detect it so this is actually the key problem here the holy grail of malware detection is having the right level of abstract representation to identify malicious behaviors which will change this number and hopefully increase it until that is the category that is seen in the image and not the giraffe so this this level will go down and this one will go up let's just write a very silly little python program so i can write this function let me make a little bit of a bigger font size for you