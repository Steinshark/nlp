in today's video i'd like to show you the debuger in vs code and how you can use that to debug your python script before we start if you want to learn more about software development and not just watch videos about it then you can also subscribe to my free newsletter that goes out every friday containing news tips and tricks to help you become a better developer join via my website the link is down below before you can do any debugging work in vs code have to make sure that you have installed the python language extensions so that's this particular package you can simply get the extension from the extension store or whatever it's called and then just install it so that you have it in your vs code set up and then if you have a simple python script for example here i have a main file that contains a couple of different functions and does some very basic things then you can start debugging this by clicking on the debugger icon now the first time you click this you click run and debug it's going to ask you to select a debugger so in this case i'm just going to pick python debugger because that's the standard solution and then as you can see you can also pick all sorts of different debugging configurations so there is one for example for fast api or if you have a python module or if you have a jango app then you can use these settings but what i'm going to do is simply debug a python file by the way if you want me to dive deeper into debugging in f code for example how to to debug a fast api application let me know in the comments below then i can create a separate video about that so now we have started a debugging setting and that simply allows to execute our code and then step in at various places and see what is going on one of the main things that the debugger offers is that you can set break points in your code and what that means is that your code is going to execute up until that point and then it's going to pause and then you can inspect the state of your application things like variables and settings and then that helps you figure out where there is a problem there's three types of break points that you need to know the first is a line breakpoint and that lets the debugger stop at a particular line of code for example if i add a breakpoint here so i can simply click to the left of my code that's on line six and now when i do run and debug you see that actually the debugger stops right here and then we can inspect the state of the actual program that's what you have here on the left so i'll talk more about that in a minute second type of breakpoint that's helpful is a conditional breakpoint and that's also very simple to add so you simply add a breakpoint as usual but then you can click right on it and then you select edit breakpoint and then you can supply an expression or you could even do a couple of other things like a hit count so you can see how often the breakpoint is actually hit but i'm just going to use an expression here that you have access to the variables that are in scope of when the code is executed for example here i could trigger the breako only when the author name equals ion c so i just want to make sure to see what happens when we reach this particular author so now we have this conditional breakpoint and now when i run this code using the debugger you see that the we when we reach this particular breakpoint here that the author name is indeed ion codes and that's where it's going to stop and it's not going to pause as any of the other authors that we are processing a final type of breakpoint that you might find useful is a function break point and that you can do here and then we add a function here calculate average unfortunately there's no o complete here but now that we have this let me run this again you see that here it reached the break point then we continue and it goes basically through all the times that calculate average is being called which is three times in this particular example the thing that you see here at the bottom is the call stack so this shows you where you are in the code and how that code was being called so calculate average is the lowest level but that was called from process author scores that happens in this line and that in turn was called from the main function and whenever i click on the line here in the call st then the variable section is going to show me the variables that are in scope so in calculate average i have the scores local variable and you can also see the values in here if i click on process author scores then we get the loc local variables that are in the scope of process author scores in this particular call and same for the main functions this little bar the top lets you control what's happening in your debugging session so this steps over the current cost so in this case we've reached the function breakpoint and when i click this it continues until it either completes the program or it reaches another breakpoint so that's what we see here you can also now that you're at a breakpoint use these controls to check what is going to happen so this is going to to step over the current function and then it's going to go simply to the next statement so we were on the function call so then it goes to the next statement that's being executed and then you see it goes back to process author scores and goes to the next line this allows to simply go step by step through the program like so what you can also do is have a bit more control and step into things so that instead of just running the particular line of coding to the next line that actually steps into a line so for example here if i press step over then it's going to simply go to the next line which the print statement but i can also step into and then it's going into calculate average if you are in a function you can also step out of it so now i am in disco but i can step out of it and then go back to the level above it and i can also step out of that again so that gives me control over where i am in my debugging session finally you can simply stop the debugging session or you can restart it final thing that you can do is on this panel which is the watch panel and there while you're debuging you can actually define expressions kind of similar to how variables work but there you can actually compute expressions and then you can see what's happening with the values of these expressions for example you could compute the length of the scores and if i do that then you see that it's four and then whenever i keep running then it's going to keep track of the updated length now in this case of course the length are all the same but let's say i change here the length and i add an extra value and here i remove value like so and then i save this and run this then you're going to see that whenever i take the next step that now we go to the next line now the length has changed so we can watch these values and see what's happening with them so these are the very basics of doing debugging in vsod now debugging is just one of the things you can do in vs cod there's like a ton of other useful extensions especially if you're doing things like backand api development if you want to learn more about that check out this video next thanks for watching and see you soon