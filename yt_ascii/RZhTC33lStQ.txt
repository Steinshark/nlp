all right so let's watch the jeremy howard demo and then we're gonna watch the fire ship version of it by the way we're learning about mojo the brand new super sexy very exciting programming language that apparently is like 900 000 times faster than python what kind of  measurement are they doing how much do you want to bet they're just like sitting in a for loop for one and four loop for the other and be like lock python was terrible at loops of course python's terrible loops everybody knows python's terrible loops you all this now i'd love to introduce jeremy howard who will show you how mojo works in practice all right show me jeremy wow bad person thanks chris you know i realized it's been 30 years since i first trained a neural network and to be honest i haven't been that satisfied with any of the languages that i've been able to use throughout that time i think this guy realizes okay so he's over there not being satisfied but what he little does he even know if you go to github.com the prime agend you will see the beginning of my masters okay years ago back when i was the shittiest programmer in the world if you go there and you look at my suppositories you will be able to find everyone's favorite is it a neural neural js yeah i created a trainable network okay look at that okay you see an fizz in there do you not see that look at that look at that we got anphis adaptive neural fuzzy inference systems okay particle swarm optimizations and colony optimizations competitive clustering okay we got probably got some rbfs in their radial basis functions see i don't even know see here's the deal i did this a decade ago and i didn't know that javascript was going to be used for everything think if i would have known that the world was being rewritten in okay i didn't know okay i was brand new i was a baby let me be a baby okay i was a baby and jeremy would have been proud of me in fact i complained to chris about this when i first met him years ago and chris has been telling me ever since don't worry jeremy one day we are going to fix this the thing that i really want to fix is to see a language where i can write performant flexible hardcore code but it should also be concise a lot of a lot of young men all about that hardcore coding okay i've heard about it i've seen it on this okay i've i've seen this i've seen this on the internet there's some posts and it makes me feel really uncomfortable i don't like it i don't like it i don't like it okay can we just go back to standard softcore javascript programming that's all i want to see okay this is inappropriate all right readable understandable code and i think that actually chris and his team here have done it with this new language called mojo mojo is actually a super set of python so i can use my python code here did you just hear that okay so i did i didn't see that one coming the fact that you can just use your python this wow wow that might that might actually make this a very sellable language then right if you could like a theoretically if you could instantaneously have your code be faster and just write python that's a lie okay that is a lie okay just checking check this out i'll show you what i mean okay and here is a notebook actually this notebook is no normal notebook this is yeah i can see because there's a percent sign then the word python which makes me feel strange on the inside mojo notebook by the way does anyone think of austin powers like right now that's all i keep hearing is austin powers in my head and i like i can't get it out frustration because this is the most fundamental foundational algorithm in deep learning we're going to look at matrix multiplication now of course mojo's got its own we don't need to write our own but we're just showing you we can actually write our own hive performance matrix multiplication isn't there like a better version of matrix multiplication right isn't there some new one that's come out that's not like this is there some sort of sweet algorithm that somebody made anyways i stop by comparing to python that's very easy to do yeah and also i assume there must be is there some sweet sweet cmd operations that can be done with reading a bunch of data and then making only a singular multiplication i don't know how any of these steps i don't know how this stuff works i have no idea i you know i'm not a machine level enthusiast i'm too stupid for it okay and then it actually is going to run it on the c python interpreter so here's our basic metrics yeah go across the rows and the columns multiplied together add it up let's write little matrix and a little benchmark and try it out and oh dear 0.005 gigaflops that's not great how do we speed it up well actually believe it or not we just take that code we copy and paste it into a new cell without the percent python and because mojo is a super set of python oh the percent python literally runs python he did say gigaflops okay personally i prefer these sigma flops but some people you know they're honestly not as you know they're not really into the flops so they don't know about that this runs too but this times it runs in mojo not in python and immediately we get an eight and a half times beta now there's a lot of performance left on the table here and to go faster we're going to want a nice fast compact matrix tape okay of course we can use the one that mojo provides for us but just to show you that we can okay from scratch so we're actually creating a structures this is nice compact in memory and it's got the novel things we used to float 32s okay and probably should have chosen a better float huh right it isn't it if you choose a float32 what actually happens underneath the hood isn't it like more instructions if you're running on a 64-bit i forgive me if i'm ignorant on this one but in my head to do a 32-bit operation you have to take your read line right and and actually like bit mask out your data if i'm correct i don't know i've only theorized it in my head i haven't actually you know i haven't actually tried is that true with floats i don't even know by the way this text is unreadable it's unreadable and i have no idea what you're saying other than yeah i do look good i dude i totally agree this mustache is wonderful stuff you don't expect to see in python like alec 70s of course you can see the whole thing fits in about a page of code a screen of code so that's our matrix and so to use it we take copy and paste the code again but this time just added type annotation these are matrices and now it's a 300 time speed up suddenly things are looking pretty amazing but there's a lot more we can do here comes doing if our cpu supports it say eight oh damn we're about oh damn we're about to go full 70s nuts on them elements at a time using simdi instructions manually there's quite a bit of code but we can do it manually i've always i've always wanted to play with some deez nuts you know what i mean like i've always wanted to play with them i've never actually got my hands around them and i've never tried to do something you know what i mean have any of you tried to play with them because that'd be great that's like that is like what i want in life right now maybe that's something we can do in zig a 570 time speed up but better still we can just call vectorize so just write a product operation call vectorize and it will automatically handle it on simdi for us with the same performance speed up so that's going to be happening in the innermost point we're going to be using the simdi and in the outermost what if we just call paralyze this is something we can do now suddenly the rows are going to be done on separate cores for a 2000 times speed up so we've only got four cores going on here so it's not huge how does parallelize work is this some sort of is this some sort of like lightweight green thread that just happens that does something that rust literally could never do is this what russ cannot do no okay no okay well rust really sucks that like if you have one place if you have one buffer of memory and you want to write to it with a bunch of threads going super duper fast but you know that your threads aren't going to stomp on each other like you can't really do that in rust easily if you've got more cores it'll be much bigger this is something okay hold on you tell me hold on then then how does this run you just told me this wasn't green threads but it says it's running on these different chords what kind of what kind of what is it running on what is it doing here i assume it's not spawning actual processes because actual processes are probably too big right you can deal with lifetimes in rust no you cannot can you do that in rust can you actually split really i should try that huh an actual os thread oh okay what they can't do with python you can do some very very basic parallel processing hey i'm glad to be wrong multiple times creating separate processes and having to move memory around and it's pretty nasty and there's all kinds of complexities around the global interpreter like and so forth as well this is how easy it is in mojo and so suddenly we've got a 2000 times faster matrix multiplication written from scratch we can also make sure that we're using the cache really effectively by doing tiling so doing a few bits of memory that's close to each other at a time and reusing them oh wowing is as easy as creating this little tailing function and then calling it to tile our function so now we've got something that is paralyzed tiled and vectorized for a 2170 times beat up over python tailing's new to me okay i understand two out of three of those words which i feel pretty good about because if you understand two out of three like you can pass a lot of colleges you know these earn degrees in some states and so that's like there's definitely a w there somewhere you know what i mean we can also add unrolling so vectorize unroll was already built into mojo so we don't even have to write that now there's a lot of complexity here though like what tile size do we use how many processors what's in these size all this mess to worry about a lot of people struggle with their cmd size i get it you know a lot of us wish it was we could go bigger but you know there's limits to nature and each different person you deploy to is going to have different versions of these or have different memory they're going to have different cpus and so forth no worries look at what you can do we can create an auto-tuned version by simply calling auto-tune so if we want an auto-tune tail size we just say hey mojo try these different tail sizes for us figure out which one's the fastest compile the fastest version for us cache it for this individual computer and then use that paralyzed titled unrolled vectorized 164 times speed up so this is pretty remarkable right it's not just linear algebra stuff we can do really iterative stuff with my mankind can't get into this what the hell just happened right there oh my goodness like attack lady mandelbrot so we could create our own complex number type and it's going to be a strap so again it's going to be compact in memory it looks like absolutely standard python as you can see multiplying subtracting using the operations and to create the mandelbrot kernel we just take the classic mandel brush set everyone knows about that pop it in python here yeah yeah and then we can call it a bunch of times in a loop yeah returning at the appropriate time to accurate the mandelbrot set that's all very well and good did it work it'd be nice to look at it so how would you look at it would be nice to use matplotlib yeah yeah every single python library works in mojo and you can import it check this out plot is import the python module matplotlib np is import the module numpy and the rest of it this is actually mojo code but it's also python code and it was and i always hated rust anyways honestly to tell you the truth i never liked rust i think i've always thought python was the best you know python really is just the best huh yeah i think so too i've always felt that way and this obviously just confirms all the things i've been telling you guys for years at this point and so really happy about this really happy i don't know if you remember but chris actually said the mandelbrot set is 35 000 times faster than python and that's because we could also do an even faster version where we're handling it with cindy and we can actually create the kind of iterative algorithms can we auto-tune this even with the help of stuff like numpy this is something which is really unique to mojo so we now have something here which is incredibly flexible incredibly fast can utilize the hardware you have no matter what it is and is really understandable to python programmers like you and me i think finally we're at a point where we are going to have something where i actually i hate real talk though that was very incredible watching that all right like that was really really incredible it was really incredible you know i i like the dog you know you know me and me and all my homies hate python i get that but that was really incredible like that the fact that you can use all of the libraries that you normally can use with python or at least the ones that they showed now whether it's true universally whether some things that really suck about it whether the blah blah blah blah i get that and it's relatively a fresh language if they come up with a good package manager a good build tool some good linting and then even some i saw some type definitions in there like long as you can throw all those things in there and you can really focus on that kind of like that developer integration notice i don't use the term a developer experience long as you can have those things and you go really hard on the lsp you can make an exceptionally successful language i think i think that this has a lot of opportunity but again you know what opportunity does it have beyond just machine learning i don't know again i don't know i i could see myself using this for all my visualizations right because i have to do a lot of visualizations i have to do a lot of that crap you know and it's really annoying to do all that crap it would be really sweet if this just works it'd also be sweet does this thing per does this does mojo produce an executable does it have a lot of cross compilation stuff is it is it easy to use or is it still more like pythony like is it more interprety i don't know i would just like a faster python apparently this is just a faster python anyways this is super cool rock on i like this and now the fireship version it is may 4th 2023 and you are watching the code report python is a wonderful language for productive programming but it has a good meme right there one big problem it's too slow and going slow means you'll get made fun of by the rust and c plus chats of the world but the tables are about to turn thanks to a brand new programming language called mojo a superset of python that's not just two times faster not ten times faster but up to 35 000 times faster than your we okay well i didn't mean to pause it right here but if that number should just hurt us a little bit right this should just hurt us a little bit and now we do know that it's not as it is a superset but it doesn't work with all the pythons yet but that should just hurt us a little bit that this could even exist that this is a real thing that happens in a real language then your grandpa's python and that's a huge deal because python's the dominant language for artificial intelligence but behind the curtain whoa whoa go back there why are those machines looking at the keyboard okay you would expect the machines to not look at keyboards because python's the dominant language for artificial intelligence hard no no way people no way no this is okay you know what skynet can't happen if they have to look at a keyboard okay if robots literally come out and they're and they go like this you know i spend more time thinking than actually typing so being a good typer doesn't actually influence my programmer speed i would i would literally realize that there's no possible way skynet can't actually exist robots are just as stupid as people but behind the curtain anything that needs to go fast is written in c or c plus plus in today's video we'll take mojo for a spin but first here are five things that you need to know about it one this is not some random guy's side project on github but rather it comes from a company the guy who created the swift programming language and the llvm compiler tool chain if anybody could fix python's problems it's him and if you have no idea what llvm is check out this video two it's a language design for programming on ai hardware like gpus running cuda and other accelerators it achieves this by leveraging multi-level intermediate representation to scale to exotic hardware types without it those are a lot of words and when he says a lot of words at me like that it makes me feel stupid and when i feel stupid i just feel like attacking him so fire ship you know here's the deal fire ship okay first off fire ship you know earlier earlier on twitter when you asked what should my next video be i kindly reported a video and you said the top liked one will win well guess what i did that and you didn't make a video so now i'm giving you an another response right here again for you to make it please make a winrar video okay i'm still waiting on winrar i want you to make winrar and second i'm gonna be back in arizona if you want to you know grab dinner again just just wondering [laughter] ton of complexity and it even has built-in auto tuning to optimize your code for your target hardware three it's designed yeah that auto-tune thing was crazy it was the craziest thing i've ever seen in my lifetime that you can just be like auto-tune and how does it make the decision at compile time is that is there some sort of like reading speed that's related to the hardware you're on so thus it's able to make a good decision why do you even have to why do you even have to you know put what sizes you want as a super set of python in the same way typescript is a superset of javascript so you don't need to i am almost ratioing dhh yeah he didn't respond because he is a coward you know here's the deal if you make a tweet and it gets a thousand likes and someone asks you a question and gets one like you're probably not going to see it real talk not trying to be mean that's just how it works but if you make a tweet that gets a thousand likes and someone's reply to you gets 800 likes you saw it you read it and you didn't respond because you're a coward learn another language to take advantage of it and this is unique compared to other modern systems languages like rust zig nim and so on which would have a higher learning curve for existing python programmers it does have a bunch of features on top of python like declarations and structs but the base language is fully compatible with python and it can also is that how it does the speed i didn't see that i didn't see the struct part is that how they're doing part of the speed up is that they're not doing python crazy classes but instead they're just doing like structs underneath the hood and yes i believe mojo will finally be able to tell me how big my dick is in bytes in python i believe it i truly believe it partner up with the python ecosystem which means you can still use your favorite libraries like numpy pandas etc for it adds strong type checking to the language you can still use dynamic types if you love it but status types are essential for optimized performance for memory management i actually think that's one of the coolest things ever to me that's like what makes this so you know because i i don't i'm not going to learn mojo real talk i'm not going to learn mojo but something that makes me really excited about mojo is the fact that types have implications in how the thing runs whereas in typescript it doesn't the only thing it accidentally gives you is you know monomorphic optimizations right you define your in you know you define your end type by putting types on it and you'll accidentally only call a function with a specific set of types right so you'll accidentally jit it but this thing actually being able to be like oh it only takes in this one type well we can make it special for this that's super cool it has an ownership system yeah similar to rust and also supports manual memory management with pointers super fast is like c plus plus it's a pragmatic language that gives you safety but also the flexibility to be unsafe when needed now the final thing to know is that currently it's not available to the public it's still in very early wait hold on are you telling me we just got done watching multiple videos about a language i can't even use all right mr latner with your big your big claims on performance your big claims on all these things and yet you showed us a for loop which we all know is the slowest in python you make these claims of millions of percents faster yet we can't even look at it right now mojo's kind of like aware to me okay i want you to know that right now development it will be open sourced in the future but currently there's a wait list to try it out i was lucky enough to get early access so let's fire it up so run it you can create a file ending in dot mojo or dot fire emoji that's a huge advantage over python which doesn't allow you to name your files in dot snake but we can also run the code in a jupiter notebook where it behaves like an interpreted language here we have a matrix multiplication demo that computes a dot product to demonstrate the crazy performance gains we get with mojo first it benchmarks a basic function in python i i do say that this feels like a cheating version you found the worst case thing that python does which is loops and then by literally choosing the worst possible answer which is loops you i i do feel like it's a little like this test is a little weak python then by simply importing that code into mojo it's executed 14 times faster with no modifications to the code it was actually eight times faster if you remember the previous video fireship which you didn't remember the previous video okay okay we all remember this part where he jumps in here instead of telling you about this notebook is no normal notebook 8.59 times faster okay some of us were paying attention to mr latner or whoever that person was that was speaking jeremy howard all right mr fireship but we're only just getting started we can further optimize this code by adding types to the python implementation mojo allows us to do that with its own its construct keyword a struct is very similar to a python class but structs are static unlike classes which are dynamic inside this truck we also have keywords like var and let which can define mutable and immutable variables and death is replaced can we just stop with var let and const being different in every language like this language var obviously means change let means no change in typescript let means change and const means you can still change it it's okay we're typescript we love you very much go ahead and do it and in rust you got let and let mute very this whole thing is just really it's really frustrating with that then which is a stricter type of function also notice single instruction multiple data which is a built-in type that represents a vector where a single instruction can be executed across multiple elements in parallel on the underlying hardware once we have this truck you can use it as a type in the python implementation then when we benchmark the code again we get a ridiculous 500x performance boost but we're still not happy yet in the inner loop we can query the vector width instead of hard coding it and that gives us a thousand x games nothing compared to what we're about to do linear algebra is perfect for parallel computing and we can easily make our code multi-threaded with the built-in parallelized function and i'm using our speed bus i'm not going to lie to you this version of this code is like 10 times better than the previous version the previous one he went really into detail this is this is the speed in which i want to get hit with information okay i wanted high 2000 x but now i've got a fever and the only prescription is more performance luckily mojo has built-in tiling utilities that basically allow us to cache and reuse data more efficiently and we can even auto-tune it to find the optimal parameters for our hardware the end result is over four thousand times faster execution compared to the original python code that's pretty crazy and if you want to see this code broken down in greater detail i'd highly recommend this video from jeremy howard but i'm curious what you guys think do you really think mojo could kill python and c plus at the same time i'm a bit skeptical but employers are already hiring mojo developers with 10 years of experience this has been the code report thanks for watching and i will see you in the next one like and subscribe please like and subscribe like i'm subscribed to my other channel hey look at that hey that's me like this got em