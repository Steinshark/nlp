everything i wish i knew before migrating 50 000 lines of code to react server components all right darius take us home react server components are a lot we recently rethought our docs and rebranded mux and while we were at it moved all of mucks.com and duck stop box docs.mux.com over to server components so believe me i know i also know that it's possible and not that scary and probably worth it okay we have this can probably be a positive spin article on it all let me show you why by answering the following questions why do server components matter what are they good for what are they not good for how do you use them how do you incrementally adopt them what kind of advanced patterns should you use to keep them under control and by the end of this you should have a pretty good idea of whether you should use react server components and how to use them effectively so my guess i really would love to hear from mux besides for using react and only probably ever using react did you ever use explore or try other things before landing on react server components because i have this whole theory which is as you optimize locally you keep feeling like it's getting better but there is much much better somewhere else just a thought hopefully they answer it right here how did we get here one great way to understand react server components is to understand what problem they're solving so let's start there a long long ago in the days of yore we generated websites on servers using tech like php this is great for fetching data by using secrets and doing cpu heavy work on big computers so that the clients could just have a knights a light html page and personalize for them yeah htmx does that too and it's new all right i think everybody gets this is pretty much standard then we started wondering what if we wanted faster responses and more interactivity every time a user takes an action do we really want to send cookies back to the server and make the server generate a whole new page what if we made the client do that work instead we can just send all the rendering code to the client as javascript i remember those days this is what we called client-side rendering or single page applications spa and was widely considered a bad move sure it's simple which is worth a lot it's i mean remember the day by remember the day do you remember like' months ago when it was all about if you're not doing this you're just a dummy and you know there's still a lot of people that think it's the best way to go i don't know i don't know about all this is it a bad mood i don't know if it's a bad move please tell me so why does everyone suddenly hate server components so there's like a whole thing and even aguermo says spas were a zero rate zero interest rate phenomenon the only difference is it did happen for like a decade i was building spas in 2011. you know what i mean i'm not too sure if that's like this is 100 percent fact you know anyways sure it's simple which is worth a lot in fact for a long time the react team recommended it as the default approach to their tools create react app and frequently changing highly interactive pages like dashboards it's probably enough but whatever you want a search engine to read your page and that search engine doesn't execute javascript what if you need to keep secrets on a server what if your user's devices are low powered or have poor connections why would you use react to begin with that would be my question all right so you see all this stuff yeah yeah and client-side rendering all clients are sent to javascript needed to render the whole website then they do all this stuff yep so that's always really annoying and then you get all your data via javascript blah blah blah blah this work server side rendering and static site generation came in tools like nexjs and gatsby used ssr and ssg to generate the pages on the server and send them to the client as html and javascript the best of both worlds the client can immediately show that dude i remember when this took over at netflix and people were like we're we're rendering everything on the client and the server and my goodness was it such a pain in the ass ssr when it first came out and everybody was like dude remember hearing the term isomorphic people be tossing that crap out all day isomorphic yeah dude there you go look at this you knew it you knew it you knew it was coming iso isomorphic it's an isomorphic website dude it was just the worst okay first off when i played isomorphic it meant like at a 45 degree angle diablo 4 boulder's gate you know i was having that kind of that's my like you know that's my understanding of the word isomorphic it kind of really it was hard you know what i mean that's isometric see that's how stupid i am do you see that isotonic anyways the best of both worlds the client can easily shut up i'm not even i'm not even looking at chat i'm not even gonna look at whatever i said just accept it accept all the stupid things i say all right yep okay so then assertions can read them this is a real problem though i i do agree that this became a real problem all right so there you go so we do all this blah blah blah blah this is actually quite good but there's still a few problems first most ssr ssg approaches send all the javascript used to generate the page to the client where the client then runs it all again and marries the html with the javascript that just booted up this marriage by the way is called hydration a term you see a lot in this neck of the woods yep do we really need to send and run all the javascript well you know one really cool thing about using require over import is that you don't use all the javascript but you do send it all but sending you know i have some arguments about where your cost of sending is and it probably isn't in the code you wrote because most websites the actual code you wrote is fairly small in comparison to the fact that you have low dash you have ramda you have react you're also experimenting so for whatever reason you also have spelled also in there just because you wanted to check it out you also have left pad you also have you forgot to actually do uh uglification of your code right you have like all this crap inside your code and you're like why is this big do you really need the duplicate all the rendering will work just to hydrate second what if the server-side rendering takes a long time maybe it runs a lot of code maybe it's stuck waiting there's for a slow database call then the user's stuck waiting bummer this is where react server components come in what are react server components what are they good for well server components are unsurprisingly react that runs on the server instead of the client the what isn't nearly as interesting as the why though what let's see why do we want rscs well a frameworks that support rses have two big advantages over ssr first frameworks that support rscs give us the way to define where our code runs what needs to run only on the server like the good old php days by the way his previous argument of things taking a long time to render i'm pretty sure your react server components are going to have the exact same problem here and what should run on the clients like ssr these are called server server components and client components respectively because we can explicitly let's see we can be explicit about where our code runs we can send less javascript to the client i'm actually i'd really love to see some statistics here right this bundle sizing i want to see bundle sizing this is what i want to know is how much less javascript are you actually sending because the moment you need react you're still sending react right that's what i'm like that's what i'm curious are you actually saving code or are you saving like 2k because you gotta remember it's also gzipped it's not only is it minified it's also gzip so your code that you contributed uh does tree shaking help well tree shaking obviously is a good thing but tree shaking kind of is irrelevant in this discussion right assuming all versions of your code are produced the same meaning that tree zip you know tree shaking and both happen and it only comes down to what you need versus the whole thing so i'm just curious about this right there are definitely i mean i am curious we can send less javascript to the client the leading to smaller bundle sizes okay there you go we have all this stuff right here the second advantage of rfc driven framework server side components can fetch data directly from within the component that's actually i think this could be a disadvantage as well when the when the fetch is complete server components can stream the data to the client this new data fetching story changes things in two ways first fetching data in react is a way easier way to think about it any server components can just fetch data directly using a node library or using fetch function we all know and love your user component can fetch user data your movie component can fetch movie data and so on and so forth no more using a library or using use effect yeah use effect is a pain in the ass i get that to manage complex loading states react query i still love you no more fetching a bunch of data at the page level with get server-side props and then drilling it down to the component that needs it yeah i mean again i think this i think like whenever i read this i feel like the whole problem here is that your data representation and your ui representation are trying to be one which causes this whole problem down lower but i'm not sure if this is a great way to solve it up high because you i think running into the n plus one query problem becomes really simple for you even if it's on this on the server and it's way way faster i think it's really easy to goof up and create an exceptionally chatty service you know i think it's i think it's i think it's i think it's easy to do that and i don't think i think that for toy websites or websites that are simple this is not a problem but i think as you get to things like netflix that require a lot of stuff i think that that can become exceptionally more difficult right when you have thousands of pieces of data that you have to have and you make components responsible well you have to be really careful about where does that responsibility lie either you have to keep on trying to drive it upwards right and that's that's the hard part is i think it's not as simple or as easy as people are making it here second it solves the problem we talked about earlier slow database call no need to wait just send that slow component to the client when it's ready your user can enjoy the rest of the site in the meantime i mean yeah i mean being able to stream out each individual like part i think is really nice right like i did like that that's cool right like that's super cool i do like that can we all agree that that's really good right you will get spinner hell though right it's not like you're getting away from something and so i have i have a personal i have a personal belief which is in app spinners cost more than pre-app spinners but again i my perspective comes from netflix which may not be the same thing because you'd go on to netflix a a tv generally is how people watch netflix i mean most most comes from tv right you kind of have this experience of these loading screens and all that so it's kind of pre-baked into the cake and so personal opinion is that outside of app spinners or loading up spinners are less costly than in-app spinning in-app spinning feels worse to me throbbers as they're called netflix by the way bonus round what if you need to fetch data on the server and the user in response to a user's action on the client like a form submission we have a way to do that too the client can send data to the server and the server can do the fetching or whatever and stream the response back to the client just like it streamed the initial data this two-way communication isn't technically react server components it's just react action but it's built on the same foundation is closely related we're not talking about much more much about react to actions here though gotta save something for the next blog post why let's see what aren't react server components good for them up until now i've been painting a pretty rosy picture if rsvs are so much better than the csr and ssr why wouldn't you use them i was wondering the same thing and i learned the hard way as the title of this post suggests there that there is indeed a catch a few actually here are three things that we spent most of the time on when migrating to react server components okay cool i'm glad that they're taking the time to also say the negative parts of things for me that's really important css njs is a non-starter well that should have always been a non-starter i i firmly have been i like i saw react style components or whatever they're called style components and within 14 seconds i said this ain't it this ain't this ain't the move right this ain't the move turns out turns out that as of right now css njs doesn't work in server components this one hurt moving from styled components to tailwind css was probably the biggest part of our rsa conversion although we thought it was worth the trouble yeah that's fine so if you went all in on css njs you've got some work to do at least it's great opportunity to migrate to something better right i always have a hard time you know again i'm happy that react is more opinionated i just don't know if i like that opinion but i get it i i mean you already see me i don't like javascript css and javascript i think it's horrible but if someone uses it that's their stupid choice and they get to make that stupid choice and they're gonna keep making that stupid choice everyone seems to love taylor it's because tailwind is just literally the reinvention of 20 2010 programming okay that's all it is it's 2010 programming if you don't understand 2010 programming you didn't do php with clear fix and float left and float right like if you ever stacked three components together with something in the middle and you had to use floats and clearflixes clear fixes you know exactly what i'm talking about because you had left left left clear fix like that's just what it was you wrote your code where all of your classes were these very very very simple name things that were just construction components i need this thing to float left i need to have a you know margin 20. the only difference was it wasn't pre-processed so you had like defined you had like five margins right you had margin tiny small medium big large right you had padding tiny small you know you had p yeah you know you had this you know you had pt ps pm p l and p like h for huge or something like that right you know you had that you know you had that and then you had every single one of those classes so that whatever you wrote a little component all you did would be like i want i want pm you know ms left clear flicks boom right like we literally did all of this 15 years ago that's all tailwind is is just the reification plus a post processor where you can define your own little pixels like one-third instead of just having your defined amounts okay sorry this is i'm sorry i'm just sorry i'm just telling you a little bit about your past tailwind is nothing new it is just a recreation of what was already there a thousand times before new stack html htmx tailwind php no my new stack right now which i'm pretty excited about is going to be of course htmx oh camel torso tailwind the hot stack hot af it's hot this shit's hot okay react context doesn't work in server components you can access react contacts only in client components if you want to share data between server components without using props you'll probably have to use plain old or a use of plain old modules i don't think i understand this because i know what a module is but this must be something they must be using the term module slightly different are they just saying use a database because sharing data would be actually like a because you're not in the same v8 isolate right one v8 isolates on the server the other v8 isolates on you know on on your client so not really sure what they mean by that i'm confused and here's the kicker if you want some sort of data to be limited to a subtree of your react application there's no great mechanism for doing that in react or in server components if i'm wrong please correct me i really miss this our doc site this was just too big of a pro it wasn't too big of a problem the places where we used react contacts heavily were also places where we're highly interactive and needed to be shipped to the client anyways our search engine experience for example shares state like query string and is open throughout the component tree on our marketing site though this was this really got us our marketing site has areas that share a theme for example is the screenshot but let's see in the screenshot below each component in our in our pre-footer it needs to understand that it is on a green background so it knows to use the dark green border normally that i would have reached for context to share the theme state but since these are largely static components that are ideal candidates for server components context wasn't an option sure we would have worked around this by leaning hard on css custom properties which is probably better since the silent concern not a data concern but other developers may not be so lucky okay fair curious about that sorry my reading really went downhill just then how's that how's my thought stack am i crushing tj yet am i am i going to beat tj yet oh i'm getting close to your tj tj i'm getting so close to you tj i'm coming for you tj oh no i'm not even coming close to you tj tj you've officially ratioed him and everything okay you're the winner tj you're the winner what does llc lines of code honestly it's hard to keep everything in your head at once fundamentally rscs give you more flexibility about where your code runs and what your data fetching looks like with with flexibility comes complexity no tool can completely paint over this complexity so at some point you're going to have to understand it and confront it and communicate it with other developers yeah yes yes every time a new developer picked up our code base the question came up what's running on the server what's running on the client every pr had feedback regarding something accidentally unnecessary shipping to the client i frequently added let's see added console logs to my code to see if the server or the client would be doing the logging i don't even get me started on the complexity of caching when you don't have a distinction between the client and the server what else did you think was gonna happen right like really what else did you think was gonna happen this has gotten better with practice and with reliable patterns that is not a good way to go about it so let's talk about that how do we use react server components how do we suggest migrating incrementally how do we do tricky things without creating an illegible hairball spaghetti code see the fact that this is easy to do should be like this really and truly should be the sign that something's gone wrong right that you have to develop patterns and you have to both have opinionated framework plus conventions it just means there's more foot guns that's all it means which is dangerous by the way did corgi do something corgi didn't have to do that buddy thank you many appreciations i'm you know i'm a little worried about that how do i use react server components yeah let's see you haven't been scared away yet think of the as they think the pros outweigh the cons great let's dive into the basics all right so i don't think i need to do this part i think you guys can do this part this is an exercise for you i'm not going to read this part because that's not the exciting part i guess for me for me it's it's it's it's it's what were the pros what were the cons i think those were that was a pretty good list of pros and cons i think that there's a little bit of copium in all of this which is like i really like react and so if you just use it just right if you use react right it's gonna work out just like communism agile and being a scotsman it's gonna work out you're gonna just you just have to do it right it always worries me just a little bit in the sense that i don't want that right i want something that even if you use it wrong you're like that's not that bad it's still pretty okay like you did it wrong but you know it still works out you did good enough and so that's kind of always been my kind of general desire to see out of something just because it is so easy to create spaghetti right coding is an act of creating spaghetti and trying to not create spaghetti coding is an act of being handed noodles and not creating spaghetti right it's really really really hard oh yeah you could throw using vim under this oh here comes the scotsman the scotsman are like there's the problem it's that they're not a true scotsman let's see then what do you do with the noodles you gotta make not spaghetti okay that is your only goal spas were about competing with native apps not with the multi-page apps here's an epic thread by the way there you go you got an epic threat about the creation and competition of said things look at this that is quite that is quite the epic thread right now that's on the you know no offense jay larkey but that is currently on the old i'm sorry or congratulations coding is just a function of reductionism yeah that's a good way to put it right got noodles make ramen there you go home is still the birdhouse lay the noodles in straight lines and snort them up your nose one at a time that is how you code but real talk like that's most my things is like here's a good example i'm building something for work right now in which there's like this kind of complex application with react and all that kind of stuff and i have to get a whole bunch of data gigabytes worth of data from a service and somehow put it into a ui without exploding both the server or the page right very very hard to do and so what i'm doing right now is that i'm kind of streaming in these results well the problem is in my like fake application which i'm using react and charts js just to kind of get things set up because that's what i usually do whenever i have to integrate with a large project i first build just like a simple version of the thing without the large project because it's really easy because then when i want to do it within i know i just start abstracting out the points from one to the other and so that's kind of what i'm doing right now and so it's like okay i see what i've done wrong here i'm going to pull out these things one at a time okay everything's looking good now how do i not destroy my memory and so that's most my time right now is just spent not creating sorry this page just crashed and so even on my little toy project it's hard so when it goes into the real one it's going to be super hard so that's all i'm doing i'm literally just taking spaghetti and trying not to make spaghetti just so they could have something that works in this beautiful and tighten it up and make it into a nice little bow a nice little package where they instantiate like two classes handed the url and it just starts handing them out data that they can put into their charting software which is not chart js so we'll see how we'll see how well it goes for now i'm going to try not to use an array buffer but we'll find out the name is the array buffer again