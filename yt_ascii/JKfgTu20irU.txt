apache kafka is our topic this week and it's an interesting tool because it's sort of like so many different things in programming sometimes it looks like a database sometimes it looks like a message queue sometimes it solves the problem of overnight batch jobs taking too long to run sometimes it looks like a data integration suite of tools and if you're dealing with large amounts of data or large numbers of departments trying to cooperate i'm going to go on the line and say it's essential to at least know about kafka and to know what it does even if you don't use it it's something you want in your mental toolbox so i've brought in a friend of mine he's a kafka expert and a consultant neil buesing and we talk about all those different ways of understanding kafka and looking at it all the things it can actually do for you we talk about when it's the wrong solution to your problem and when it's the right one how do you actually introduce it into an organization successfully so if you have data problems integration problems or processing speed problems let neil add some knowledge to your toolkit i'm your host chris jenkins this is developer voices and today's voice is neil musing [music] thank you with me today it's neil buesing neil how you doing man doing great how are you very well i'm very glad to see you we've we've crossed paths many times in the past but i've never got you on record before so this should be fun and maybe a little scary we'll have to see a little bit of fear never harms just put the edge on things right exactly you are a consultant and developer in the world of kafka which is how we met i've got a background in cafe too but for those that don't know let's start here what's kafka why do we care about it kafka is a very fast distributed system to basically allow you to build real-time jobs to do work and the core of kafka that i like to get into is it's simple in regards that kafka itself is pretty dumb it is an immutable log of events so it is a record of what's happened and the first thing i usually try to tell people about it when i'm going over kafka is especially those that are already developers working in the java space or in a coding language that i can speak to effectively is you're trying to record what has happened so give me an event tell me something you did versus giving me a command and telling you what to do so from a kafka standpoint i want to record events that i have done and let other people react to it and do their work independently of me and kafka does this very well kafka liberates the ability to write applications to where what i have done what my program has completed is completely independent from what other people have to do as a result of it and by making the infrastructure in kafka to the high throughput low latency durable which means if something goes down things still work or i mean data isn't lost available which means if part of the system goes down the data's deal still available as an application developer i don't have to worry about any of that so kafka liberates me from having to build infrastructure to send messages send events to others and i get to focus on the business logic of building that and the paradigm shift like i i like to tell people is telling me what write an application that says whatever done let other people's do something or not do something as a result there's a lot to kafka it's try it's very hard to summarize and put together in like a a one minute section or one minute and so i will ramble and give it two and maybe flounder on the way there but it's i mean at its simplest and i think it's where jay craps has mentioned when he developed it's an immutable lock and if you think of it that way and you don't put anything more to it then then it's pretty easy to grasp and understand the complexity comes with all the integration that you're going to do with it there is stateful processing with kafka streams or other streaming platforms there's integrations with kafka connect those are things built on top of the core apache kafka components but at the heart it's an immutable log where you record stuff that's happened and you don't have to worry about if someone read it or didn't read it that's up to them i'm going to ask you my favorite kafka question which usually divides the room let me guess i i think i know what the question will be and let's see if you can bring it so you said you're storing large amounts of data with high availability and durability this is really sounding like a database yep i knew that's your question yeah is kafka a database my answer is no but it has the same building blocks that many databases have and it can give you characteristics of a database when you need it so it can emulate options to a database but i think that's more from a practicality stand point versus a theoretical one i think you could argue that kafka is a database theoretically it meets the acid type requirements that a database usually tries to strive for but it's not going to be a database where i do relational inquiry i'm not going to query kafka on its own to find out events that have happened i need to build something from that i'm not going to be able to use it for any type of search any type of business use case by itself so is it a practical database that i can use on its own no but is it a distributed system that has database aspects that ensure that i don't have to build certain things myself yes i don't have to worry about durability kafka takes care of that i don't have to worry about availability kafka takes care of that so from that standpoint i can see why that conversation comes up in in it but as a consultant at a client if someone comes to say can i replace my sequel with with kafka i would say no what's your what's your use case what's your business problem maybe we can replace my sql because you're not using it the way typically a relational database is being used you're using it for a a low level event queuing mechanism then yeah we could replace it but if you're if you're searching for users who bought product three days ago okay okay this is perhaps something your world-class qualified to answer then because this is very abstract let's pin it down when someone calls you in to talk about kafka what problems are they actually trying to solve with it what are they building consultant in this space for many years i've been brought in to to bring in kafka for a variety of verticals i would say when you're i if you're brought into a company that hasn't used kafka before so they're trying to get to real-time streaming the typical use case is we have data that we're refreshing in a system that happens overnight or is two hours old four hours old we can't react to it in real time so typically the the we want to move to kafka or a similar technology but 99 of the time it's it's kafka that's the that's the the tool of choice in this space by by most companies and it the the thing is i need to take this effort that i'm doing and speed it up and that's in verticals in healthcare in financial in retail and others but that's typically it once you get kafka in place which may take a while and you use it as a conduit so your first task typically is moving data now you have data accessible in kafka as it's streaming through so the the benefit you now have is you've now exposed that data for other services that could benefit from it so a typical use case would be taking data from legacy databases and streaming it through kafka into a say an analytical database a pinot or druid and that allows people to do queries on the data analytical type query so how many people are buying ipads at noon at this brick and mortar store in minnesota is in the u.s here we're just talking about that but i realized we started recording after that conversation the so we got this analytic and now we're flowing data through kafka to get it to this other analytical data but now now developers can say what i could build my own microservices listening to those events to maybe determine maybe there's a price issue in a product all of a sudden this product started to have more purchases i could build alerting systems event-driven systems reacting to that data as it's flowing through kafka that's typically after clients have had experience in using kafka integrating it with their business requirements that type of questions is is part of the consulting work and that's usually with the the fun part is you now get to expose them to new use cases that they can do with kafka that they couldn't do before typically i do that in kafka streams which i mentioned is not is is part of apache kafka but it's not the core kafka that people tend to talk about when they ask what is kafka so i didn't go into that which i'm sure we probably will i think we'll touch it so that's a lot of we brought into there there are clients and the one client i like to talk about because we did a talk at kafka summit so i know it's public was work at centene with brian zelly brian zelly and i did a talk in 2019 san francisco summit where we built an event system with kafka so we were building a routing ecosystem because we wanted to make it easier for people to put their data into kafka it's a lot easier to tell people to come to kafka to get your data if we already have it yeah teams will say hey you have data that i'm interested in i'm gonna i'm gonna write consumers i'm gonna to learn about the abro data model that you have on your topics i am going to ingest that and do business logic on it you go to a team and says we need your data so we can let other divisions other parts of the company do something what's in it for me so don't make it hard for them make it easy so we built a system that made it easier for them to bring data in to kafka and then over time people will then start using the product getting access to the data it's all about exposing data so people can do their their business and if it's in kafka streaming they can do it in real time of this is some kind of if you could publish your business data and then subscribe to it in another place you quickly find there are lots of other reasons to subscribe to the same data for different purposes yes yeah good way to put it i some people wonder and i'm sure you can answer this is if it's publish subscribe is it a message queue not yet there's a cop can improvement proposal to to to sort of solve that problem it is not a message queue it is like a message queue the in in a lot of ways it can be if typically when i built ibm mq systems back 10 years ago the the idea was for the one retail business problem that i solved it was one application produced the messages to the queue totally async didn't care about any response from it and another one picked it up i could have replaced that with kafka in a heartbeat it was our the queuing was pretty much an event system i submitted orders that i created and now i want someone to fulfill them for example that is a paradigm with cueing though there's there's certain i need global ordering of processing which you can't get with kafka unless you want really really want it kafka is trying to work through throughput so its goal is you don't need global ordering you typically need just ordering of individual messages like if you update your address i update my address you update your address again i update my address again i need to make sure my events are processed in order your events are processed in order but hopefully mine and yours don't have to be processed in order between each of us yeah the costa has that that yeah you and i exist on different timelines yeah and the same for the shopping basket that i'm trying to fill right correct okay and so and choose the other part that a lot of people do with cues is they want the response mechanism in other words and and there's like temporary cues of them i'm going to publish something but i want you to publish a message back to me after you've completed it that's very hard in kafka it's letting it it's meant to be totally decoupled when there is a sense of coupling that comes back to the problem that's where it becomes usually not the best pattern to use kafka yeah i've def i've done a talk on it and i i actually it's one of the most controversial talks i think i did was called synchronous kafka and it's typically not the pattern you want to do but there's frameworks that add like the ability to get a response back from the actual producer so i want to produce a message and i want so i want you to create an order for me i want it to be asynchronous but i want you to tell me the person who published it that the order was created yeah that's not how kafka typically works and that type of queuing design is a harder one to implement in kaka i sometimes think that not always but it sometimes it's a sign that you're not really architecting your application correctly because you've opted for a queue or kafka or some mechanism that says let's be asynchronous let's fire and forget but you haven't really embraced the fire and forget you're pretending it's still a function call with a return value so yeah yeah that can be thought and typically you try to have it solved without kafka or a different means but you'll be surprised you're brought in they invest it into apache kafka and part of the investment in new technology is what can i remove from my technology stack as a result and saying you shouldn't remove remove your jms cues your rabbit cues should remain or something like that and you're like so i'm spending more i'm investing in more technology and i can't liberate myself from something else so there are times when when you have a small set of of use cases like you should have rabbit or you should have jms but it's one thing there are ways to do that in kafka and i will work with clients to decide do we want to do that what's the risk of doing that or do we want to continue using a technology that was more designed for that that's a that's that's architecting trade-offs that's that's part of of that but it's doing that with the right questions other than you can do everything and kafka kafka is great let me show you how to do it which it is by the way but i i know you're a great fan of kefka but you've you've opened yourself up to a very juicy question there when do you get people calling you in saying we want to use kafka and it's the wrong choice it is a lot of times around the the the microservice the infrastructure is still very rest oriented very much request response and you've built a very command-centric set of microservices or macro services or modeling depending on terminology and and where people are in their their journey if you are like create an order for me and let me know when it's done type of thinking that's going to be a hard shift into into kafka versus i created an order i'm going to tell you about it if you're shipping that's on you if your pricing maybe that's that's on you that's a different service if you adapted that well then then you're better off and there are times where you need to be synchronous i mean we're usually we develop something that is front and center to users on their on their phone or on their computer and they need a response back on what they're doing so there is a synchronous nature to it if you look at a ride share application all that data is typically flowing through kafka to make sure that that user gets that ride in a reason amount of time but they're not using kafka from their phone their phone is doing a an http request server send events involved maybe even websockets if you're lucky but it's not copy that is behind the scenes so you're going to have that other integration that that needs to to happen there and so if people try to move kafka 2 to the front end and there haven't decoupled those systems that may be the case where they're not ready to bring in kafka yet they're not necessarily got to a more event type thinking right and that's usually when they're not either they need to pivot more in their architect design to bring kafka in and use it effectively that's often the hardest thing with technology i and i think it's one of the reasons why we tend to see a lot of new things that are incremental improvements and old things because it's not adopting new technology that's hard it's adopting new ways of thinking about solving problems it's hard so i mean it's always reminded me a lot of functional programming it's exactly yeah yeah i mean and that so kafka streams is built on java which is an object-oriented language with functional aspects to it kafka streams is very functional and it and it and it uses lambda functions of java very beautifully to where it is is pretty elegant but it is very much the idea of functional design reacting and thinking and that paradigm shift for for me was hard even though i i did i did learn functional languages in college in the industry i've never done things functionally because that's not the technologies that were were prevalent when i started and still aren't i mean there there is functional aspects to stuff but the dominant language is functional wasn't their their primary design i mean yeah python is not a functional by initially or people could argue with me maybe java certainly isn't so the i the paradigm shift of kafka is kind of the same the same way and that is the challenge that is the discussion of working with with people in the enterprise to to figure out how to to think differently i think the the idea of microservices which is now a decade old type concept longer definitely makes it easier for people to think and leverage kafka if it wasn't for that i don't think people would be able to to grasp and use kafka effectively that's interesting so because they weren't particularly it's not that like they were co-designed but you think the two approaches are very sympathetic i think so kafka for those that are new to it has this call a from a consumer side a consumer group and consumer viewers a read-only connection we should start there correct yeah consumer is a read-only connection except that it has to keep track where it's read so there is some rights that go on for those that want to know how it works but if i have two consumers they can share the work two consumers in the same group if you start building those in more complicated applications so if i had if i'm reading from orders and i'm reading from inventory and i have two consumers doing them independently but i built them in the same app if i do a a upgrade to one component and not the other i still have to bring both down to bring up that that macro service and it becomes more of a challenge of orchestrating the work that you're doing on top of these systems if if microservices weren't there i think that would be more of a challenge to the people's way of thinking the idea is i write small applications one of the things that that comes up a lot in my design of microservices for for clients is i don't use frameworks anymore if i have a choice i write java code kafka streams is a framework it to me is is a it is it does all those things that most frameworks need to do that people go to them for but i don't use frameworks because my applications are very tiny most of my streams apps do not make any external or calls they don't make any rest calls they don't provide any input requests from from consumers from from web device access so it can be a couple hundred lines of code why do i want to bring in a framework that gives me their opinions that i now have to learn and their infrastructure in order to bring up an application so you write smaller codes very independent you truly can write microservices and not when i wrote microservice 10 years ago it was me pretending to write microservices they were they were small monoliths or they were macro services i tried to put everything into it so i needed a framework to do dependency injection to do security and and now for most of that i don't when i do if i need to build a a front end that serves web requests i'm probably going to bring in a framework because i don't want to write the security around http the the cross site scripting checks i'm going to bring in something to help me do that yeah but if i'm using spring or i'm just doing a simple kafka producer and consumer i'm not i'm just writing in the least amount of framework code that i i possibly can because it should be a fairly straightforward thing to write some stuff as a series of events and read it back is a series of events that should be lightweight code exactly but but that harks back to something you said you said you built a demo and gave a talk because if people could write things in easily it would they would open up kafka to them what was it that was hard about writing stuff into kafka they had to that's a good question i don't consider it hard to write into kafka but it is i have to create a connection to a kafka broker that is not http it is a proprietary connection that requires setting up infrastructure of of open ports and security around that costed client library does all the work for you but there there's still something new that a person needs to bring in the data format how you're storing the data and that put becomes there's no gatekeeper to validate their data they they're publishing directly to kafka you usually then write other streams applications to validate check the data then someone has to build that so most of these clients were already doing restful production of their data to restful services so we built a restful front end that then pushed it to kafka validated they would publish jason we would convert it to avro for those that don't know abroad is a binary a serialization of bytes that that is smaller than writing json and it is well supported in many libraries the the orchestration around it maybe not so much but the binary format i can do it in any language and because it saved about 30 percent in storage and it was strongly typed in other words i knew it was a decimal versus is it an integer or is it and jason you don't know of a numbers what kind of number it is so you have more more data chat so we did all that for them because we needed to make sure that the data was was useful to those that were were consuming it so it wasn't that it was necessarily hard it just wasn't their problem it wasn't these other team's responsibility to get their data to others in a streaming way so we did it for them and try to give them the interface that they were most comfortable with right so that that raises the question like how much of your work is like getting how much of it is the architectural side of this is how you build this kind of real-time streaming app versus okay this is how in detail you write the code that does it versus like being a kind of dba this is how to actually live with it in production it's every week is different every client is different so the work for the centene the part that we talked about that was a a four to six month pilot project let's get it up and running so i was very much hands-on writing code and the architect was brian and great guy and and had that vision and it was taking his vision and putting it in paper and paperment in in kafka streams in in kafka and developing that so i wasn't really an architect from a building an application standpoint i was the kafka architect i was the one determining how we wrote the producers how we wrote the consumers how we leveraged avro which keeps coming up because it was a pain point on on many things with that one the data modeling the data governance of it for other clients that are pretty much new to the kafka in that we have a business problem of trying to get from 12 hours to minutes help us from end to end do that yeah then it's it's finding a team below you to do the the work the daily development work in kafka because there's a lot to do but you trying to how many applications do we need to build how do we deploy those applications you'll be surprised at how much a kafka developer and that level needs to become a devops person just to make sure that we can get our applications deployed because i'm going from some clients that deploy a handful of applications to now hundreds or 12 instances of a consumer so it can be performant five to ten different consumers when before they would write maybe two applications to do that so it tends to is that your preference of how you architect it very very granular or does it naturally lean that way i think it naturally leans that way that's a good question from my standpoint i the more successful projects are the ones that are more granular i think that usually indicates that people have decoupled the problem set better which makes it easier to adapt to kafka right so if you're if you find that you're deploying a lot more services and they're communicating asynchronously with each other it sounds like your deployment management and your monitoring and your observability suddenly become much bigger issues than perhaps they were before yes and getting devops involved or becoming a devops person to help get that involved becomes a big priority it is something that around so i'm actually repeating well i shouldn't say repeating i'm doing another talk this fall at current so kafka summit on kafka streams metrics and doing observability of your caucus stream application so you can make sure it's it's working well and three years ago during the pandemic i did a virtual one of it i am now trying to modernize the talk then talk again because the observability piece is huge and people don't know or need when they don't they need to invest in it and they don't know how much time it is to really do that and every organization is different in their journey of observability do what tools do they use how easy are developers able to to bring tools into that and observe them but yeah it's it's a critical piece in in a lot of the journey is is a lot about getting visibility into the behavior of the apps and that it is just about more than actually writing the apps themselves okay so is that the price you pay for adopting kafka or is that the price you pay for adopting a genuinely distributed real-time application yeah i i think it is a price you pay for building a distributed application i do think kafka adds more i mean because there's not necessarily standards around doing that and because it's a distributed system how you do that you have to invest in doing it the kafka way too but you would be if you were using another technology you would have to to do theirs as well the i think so i mentioned kips a kafka improvement proposal out there this one's in the 700 range i can't remember where it is i think it's a very important kip out there i wish i had the number now that we're talking about it but it's the ability for consumers to push their metrics to the brokers and make the brokers have visibility in how the clients are doing so for example many people use cloud providing services for kafka and they're monitoring tools of that or they've built kafka and have it on prem or self-managed and they built their tooling very well around monitoring that they have all the connections set up they have the dashboards now you go to them and say we need to monitor the health of our clients too like isn't monitoring kafka enough like no it isn't if a consumer is lagging you don't know why or it's not even easy to find out so you have to monitor each application and that's usually where people go oh my gosh now i'm like what is i i should just monitor kafka so there's a kip out there that allows clients to push their metrics to the brokers so the brokers could then make them available for the monitoring tools now i don't have to write scrapers of prometheus if i use prometheus and grafana to go and scrape the metrics from each consumer necessarily doing each one differently i can just expand to what i'm looking at on the broker metrics themselves but that requires a change to kafka to the client libraries to allow clients to push their how well am i doing metrics to the brokers so then it becomes easier for for them to display what's going on so right we need that kip i'm a big advocate of that kip if monitoring is easier people do it better if monitoring doesn't require all these extra steps people do it and then you're not being called at 3am as a result which will be very nice if we could just get to that world where everything was cheap and easy to distribute and we now wake up at 3am except for small children so what you're saying is i mean to put it in equivalent space if i had some kind of queuing mechanism i would monitor the health of the queue but i also end up needing to monitor the readers to see how they're progressing through the queue it would be nice if the readers could report back to the queue and then i've just got one thing to to monitor everything yeah yeah okay we've talked a bit about devops and monitoring let's talk a bit more about programming tell me about kafka streams and what's that for and what headaches people have with dealing with it but kafka streams it is a the best java library out there if people ask me so i should since no one's going to ask me i'm going to state it if you disagree with me or please come onto the podcast and discuss your favorite java library exactly it is a pure java library that allows you to do stateful processing with kafka and there are plenty of alternatives out there you can use flink you can use spark you can use apache beam these are all technologies to do stateful processing of events with kafka and stateful usually means i need to join data like credit card fraud am i gonna enrich it with the user data am i going to compare it to other credit card uses at the same time to do alerts was this credit card used in in the uk and france at the same time and the physical location i need to alert on that but that requires knowing both events that didn't happen at the same time so i need state state needs to be stored somewhere for days hours or forever for me to enrich my data and do something meaningful yeah mo most of the technology in the space requires infrastructure to set up and do that so i have a set of servers running flink that i schedule my jobs to or spark or even apache beam google data flow there's tons of options out there kafka streams approaches it's just a java library 100 self-contained you spin up java code today if you're at a client that you do java work you can use streams it uses rocksdb database internally for the state that it needs so we talked about his kafka database and the answer is not by itself but it has those components i can't search a topic for an event i need to store it somewhere where i can search it that's what rocks does roxdb is the availability of that state kafka's the durability so kafka streams will put the data in a what's called a changelog topic so if my jvm crashes my pod dies someone physically cuts off my hard drive and throws it away i can bring up that java application on that pod and it will rebuild its state from kafka so kafka is the durability kafka is that part of the database that you need to make sure that your data is not lost and you can get and rebuild quickly rocks is that availability aspects to make ensure that i can search for stuff needed so costco stream state is part of the java library right that makes it fast in regards i'm not having to make any calls out to to do work all the work's done in there so if you write streams effectively you're just going to kafka for your or you're letting kafka's data come to you basically you're not going to kafka the data's coming to you to do your enrichment to do your joints that's the the the paradigm difference of kafka streams from the other technologies and as a java developer of 20 odd years it was very easy and natural for me to use adapt and bring into clients who are already in that that space as well pretty easily yeah i can imagine going into new clients if you don't have to set up extra infrastructure on top that already is a huge advantage but a library like that has to for it to be useful it needs to worry about being distributed and highly available correct yeah and kafka is that distribution and highly available aspect behind it as well so if you run jobs on a flink farm and you need to do a lot of work you may spin up 10 cpus and they would distribute work between them costco streams distribute works through through kafka so if i have an order event and i need to join that to a user event to enrich that order with user information and that user is on a different streams pod because of how i built the app in in my old world thinking 10 years ago i would say hey even the jvm that has the order go grab the user data go grab the user data and let me enrich my order that was my that's the restful thinking that's that in the kafka streams world it's totally different and it's it's so elegant at it that's one of the reasons i love kafka's dreams is i have the order but the other worker has the user so it's not me going to grabbing the data from the user it's me re-keying the order so the one that has the user will get the event instead so i'm moving my data to where that i'm moving my order to where my user is and letting that one do the work from a high level standpoint is basically kafka streams uses kafka to distribute the the work across all its workers so if i have 12 streams apps running and this one so they each have one twelfth of the orders 1 12 of the users they're shifting work to where i need it to be not going to where i and bringing the data to me yeah it's i think a good mental model which probably comes from the name is like you've got different streams all flowing gradually together to form a larger river right yeah yeah okay so what makes all this hard neil that's a nice wide question oh man what makes this hard there's well it a lot of times it's trying to bring the people that understand the business problem you're trying to solve and get them to understand the technology well enough to trust you that you need to do something a certain way and it's also getting the the developers to really understand the business domain i mean it and that's that's no that's no different to kafka than it is to any technology in the past i mean i've suffered through with orms i've suffered through that model extensively in 10 15 years ago of of getting object model and database models to to make sense that's always the gap i just think there's a lot to kafka that that gap is is wider it takes more to get up to speed in kafka than than necessarily i mean it's just distributed systems are hard and and understanding that it's it's like i think it's also a paradigm shift of thinking like from object programming to functional from svn to get there is a paradigm shift that that's the end again oh i mean i have since i mentioned it my son is using svn i when i went from scn to get i felt like i i'm too old for this i i'm never gonna get it yeah and then all of a sudden i got it and i'm like oh my gosh this is liberating i understand how git works yes there's a lot of nuances to it but and and i i like using the git example because i think others who switch from a previous tool from get to get have that same shift it's like i'm never gonna get it and when you get it you're like this is the best thing ever this is the way you'd build distributed types of code sharing you you decentralize it and and all that stuff i feel kafka with event thinking is similar there is the i'm never gonna get it type approach i can't think from command thinking to event thinking i'm always in the restful mindset that i need to get a response back in order to do my work that you feel like this is this is like oh my gosh i i need to go back and and and find a different passion but once you get it you're like oh my gosh this is this is this is great this is liberating so the challenge is trying to get business people to get that that feel of their getting it and the benefit that they're going to get from it so as an architect as a developer as someone advocating for kafka it is trying to show them the business benefit of using this technology and that is hard and i think you go with well others are doing it you can approach others are successful in doing it so trust me that you will be successful but let me help you get there it is at least you have the the ability to to reference the the success there's i mean what 80 of the fortune 100 companies are using kafka the numbers are high and yeah so it is a successful tool that people use so it's trying to get that shift and once they see it once they get that paradigm shift i think then things become a lot easier but that switch was hard for me and i see it hard for others if it's not hard for you let me know i would love to to learn how how you got that so quickly because i want to be able to teach that better because that is an important thing it really is it's like i think as our architects and architecturally minded developers we go around looking for ways of doing things that are fundamentally simpler and we're we're prepared to suffer a lot more to get to there so some of us are naturally attracted to beating our head against git or functional programming or kafka in order to reach that promised land where things drop into place and suddenly it's so much simpler you wouldn't go back to the old way and and there's a challenge that because you worry are you are you going to get to where it's simpler or did you just make a hard problem equally hard but now on a new technology stack yeah and as a consultant you don't or as a developer you don't want that my success is by people saying okay neil we don't need you anymore we're happy versus okay neil you made it very hard for us to move on we're not happy but we don't need you anymore type it's a you you want people to feel benefits from using kafka to be happy that they made the transition yeah and and that's and that's the goal but you do worry about it did i make a complicated problem just a distributed complicated problem so now i have more things to worry about yeah i think i'm gonna pick an example of angular version one that was a new way of doing things which just turned out to be a different awful way of doing things that is one that so i i didn't do a i didn't do any angular so and but i i there was like a week where i wanted to okay i want to learn angular enough to be where i can talk about it and that was one of those things like hey i didn't have the time and b i wasn't giving it and i'm kind of glad because it did look like it was one of those things that would be a continued challenge that the the front spaces is is a whole different complicated one to talk about i'm sure i'll let someone else talk about that one yeah but it's one of the most fun ones because you get to see people happily using the thing you built and that relates yeah to what you're saying you want your clients to be happy they went down that road and now they're using it for non-technical reasons they're using it to make the business move forward yeah right do you do you have any favorite success stories that you're allowed to share well i like talking about the centene one because i know i'm allowed to share it because brian has your talk on it i i hear from from them that things keep are are working well from from what i'm the conversation i had so that's definitely a great success from a i'm trying to that is a hard question because you you don't want to misspeak about what someone's doing with it yeah that's bad i'm trying to think if there's i've definitely to that point i've been at the clients where the the the step to get devops can cicd deployment process with kubernetes and i've mentioned this like at open source north which is a conference locally here i mentioned in a talk there that you're going to need to invest in those and ideally you invest in those before you go to kafka if you're an organization that's new to kafka new to microservices new to kubernetes new to cloud you're going to want to pull something off and and try to get all those other things first and i've been at one where we were doing kubernetes kubernetes was relatively new i mean the organization was using it but not to the level that you probably want them to trying to deploy do they deploy kafka on vms bare metal or pods was also another conversation it's just too much so those that were successful and i'll refer back to this sent team one because i know i can't is you have a champion from the business side that has a vision that's solving a business problem that's where you're going to get success when when the champion is a technology evangelist within the organization wanting to use their technology of choice which is a kafka in this example it may not always lead to the best visual success within the organization so the best for me is having that business advocate like brian was in in at centene and me being the technology advocate and and and bringing those things together you need both for to be successful so if you have one where it's just the technology or the business isn't trying to find the the counterpart in the in the to evangelize the technology then you're probably going to flounder or i think you will maybe i'm trying to my mind is trying to think of what i can talk about on that but but yeah that's the part that that where the challenges probably existed so i would say one one thing about that that is critical and the organizations that have people that really understand the data model domain are critical you don't want just everybody putting kafka bites into kafka if you can't come up with an enterprise solution to make sure people can use that data access that data know how the data is available how the data relates you just have a now you just have more data somewhere that no one knows how to get to and that is critical yeah but do you think sometimes there's an element of if you build it they will come if there were a way to get business data in a structured reliable high quality manner then people would start using it but you can't always put the whole organization on the same page in the same day yeah that is a fair point you need a pilot or something there that gets that to show the value and get more people to embrace it and use it that's probably a good better way of putting it do you think going back to the abstract then do you think the the most important thing for technology like kafka is it making data available to different parts of the organization which kafka is good at is it being highly available or is it being real time hmm or something else well i've tried to the answer is yes to both which is about i think i mean it has to be real time but i think that comes with with the highly available too but if if i am not if i'm not able to get data to be in where you can react to it within pretty much when it happened then i'm i'm not going to get this company to the level they are needing to be within their organization they're they're going to lose to their competitors if it's not real time everybody's expecting real time when an alert on my credit when a credit card gets used and the alert doesn't come in until six hours later because email isn't reliable or texting that that doesn't help me i can't react to that i'm frustrated so if i'm building a system that isn't the immediate customers are frustrated business owners are frustrated so that real time is is needed i don't know how that if you don't have availability though i think you don't you kind of don't have really the real time you need to make sure it's it's there so i have a hard time separating that well let me put it from another angle are the people you're talking to are they mostly saying yeah our system just isn't fast enough or ah our system keeps crashing or i know the data's over there i can't get to it because of integration i think that's that last one is my data's there and i can't get to it i think that's probably the the one is where they come to us i i can't get to my data and that was that's a very common pattern at the the last few clients i've been at is a we can't get into a real time but we can't even get to it at all yeah the the pulling data out of a legacy system is you're gonna if you're an enterprise consultant you're going to be working with how do i get data out of a legacy system so people can use it you have a lot of mainframe data that people can't use because it's too costly so they don't open up you can't i don't mips are too expensive on my as400 or my mainframe so you can't access it well i don't care if it's real time or not i need to get it nope you can't access it so getting access to data is a front and center problem in many organizations so maybe that's the probably the primary one is i want i need to get to the data and if i can also make it real time in the process then that's a an extra win yeah yeah i think kafka is one of those technologies where it can solve an immediate problem and have some accidental extra benefits along the way yeah yeah so where do you think will be five years from now do you think kefka will be more mainstream do you think the techniques of kafka we're more mainstream but not the technology what's your prediction well let me let me roll back five years or seven years and then answer that so when i so 2017 time frame is when i went all in kafka i'm like i'm gonna invest in learning this well because it's it's a it's a business and personal benefit from from doing so and i co-founded a company solely in this space so there's definitely value there the when i did this five years ago i'm like if kafka is the leader for five years if i can be this in five years i get return on investment in other words i felt that it was worth the effort it becomes that i felt in five years it would become more like other technologies where more people know it to where than you being an expert in it isn't as beneficial because it's more mainstream it's more common i didn't think it was going to be like the the next technology that faded because it was too hard to bring in to then replace you're not going to replace it with a similar technology you're gonna if someone's gonna have to reinvent the technology the reason to move away from it but i thought it was going to be more mainstream more it is so hard to find kafka developers it they it is it is a hard aspect from a consulting to find people that a know it and want to be in it so from that standpoint if i use the last five years i think the next five years is very strong for kafka because if you know kafka because you're in high demand people will seek you out i get more linkedin really obscure ones on on kafka related inquiries but it's it's it's it's there and i don't see that changing i don't see businesses moving away from it like i said because i don't know what the next thing is that would would replace it and the community aspect of kafka is so rich so vibrant the the people that are improving it it is top-notch people that are making that product better and it's open source that people continue to to leverage so five years from now i i guess maybe i'm thinking my thoughts from five years will be now like a tenure where it's no longer people seeking out i'm get i'm guessing more will move to cloud services to where they need less kafka operational experts but the need for people to build event systems real-time system thinking in ways to to extract data and make it available that will remain but the operational side will probably diminish because things are improving it to make it easier to run and more people are leveraging experts in organizations to run it for them yeah yeah i could say that so whether you're dealing with kafka or functional programming or one of those other ways of changing your thinking you think the future is bright for those new minds do i think the future's bright for in regards to it is people who can make the mental shift to build applications in that way do you think it's worth it as a career investment not just as a mental roughage well i'm definitely a biased opinion and could probably say that i have my my tunnel vision on but i think so i think there is still the the mental thinking of it is is independent of the technology and that has made so many things available today that weren't available 10 15 years ago ride shares wouldn't happen credit card alerts that the levels a lot of the user experience that people get on their phone that's real time distributed systems are behind all of that to make that happen and i think it's vibrant and that i don't see that changing you keep thinking is is the space going to become saturated i like i said i thought it would be by now and it's not even close in my in my mind i think there are a few headline businesses doing this really well but the majority of businesses i'm even close to that way of thinking yet yeah yeah a lot are in there yeah i think i think you hit the nail on the head there there's a lot in it there's a lot like i said there's like 80 of the fortune 100 companies are using it i hope my math is right but are they using it well are the are they the ones that are are showcasing it there's still a lot to learn there there's a lot for me to learn on it i mean as any developer if you look at code you wrote five years ago you should be improved from to where you're not happy with that code yeah at least that's the that's the goal and that's not to say the code is is wrong it's to say that i've i've become better yeah and we and i think that's important yeah we're constantly improving and hopefully so is the industry along the way yeah yeah a positive note to end on and i think i'll let you get back to improving the world in your corner of it and you'll be using i will try for joining us thank you and that's all from neil for now now looking at the calendar it's currently september 2023. neil and i are both going to be a conference together in a few weeks time that's current over in san jose so i'm looking forward to seeing him in person and if by some happy coincidence you're going to be there too do come by and say hi if you're not going to be there but you still want to say hi the internet has your back my contact details are in the show notes as always and that would be a great time to leave a comment or a like or hit subscribe and make sure you catch our next episodes i think that's all for now until next week i've been your host chris jenkins this has been developer voices with neil buesing thanks for listening [music]