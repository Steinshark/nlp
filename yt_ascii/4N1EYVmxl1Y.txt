hello and welcome to minions zippers live and tonight we are hosting the cute the chief cube maintainer for cut his timer hello and welcome folker so there's probably a lot of people who wonder who you are and what you do let's get started with a little bit of an introduction all right thank you jens for having me over so to speak it's a pleasure and honor to be here yeah my name is i'm the chief maintainer of the cube project as a way of introduction i have been working with cute since the late 90s when i was studying computer science in northern germany in lostock started to use q there as one of the not necessarily holiday work assignments but something to that effect at least i'm working with a small company there that did research and using food and as part of my education i then had an internship with troll tech back then in oslo in norway moved to to norway for that and got stuck i should say with working for trolltech working on cute which was a lot of fun for many many years and then nokia as you might remember acquire troll tech where i changed from the technical support role i had in the beginning to more managerial role in nokia and then once nokia decided to not continue the strategy was cute i went to a few other places tried to see some other parts of the industry and now i have been back since 2018 late 2018 in the cute project and the cute community and when last decided to step down and take on some new challenges after 25 years with cute he yeah we had a vote in the community and i'm very happy and very proud and thankful to have become the cute chief maintainer at that opportunity so i'm working today in the queue company as one of the r d area elites director responsible for the graphics and ui area with a whole bunch of fantastic people in oslo and in ulu in northern finland and happily still having some time at least to do coding myself and being involved in some of the technical discussions yeah that's the long control of me i'm in oslo i am german originally like i mentioned studied in northern germany but have been living in also now for 23 years sometimes yeah that's that's quite a vita and you do not have a german accent ah that depends on who you ask but thank you very much so let's start with an easy question what's new and cute what's new and cute we are just finishing the 6.5 release that should come out in the next couple of weeks preparing the release candidate right now yani is working on that trying to get things to line up and in 6.5 we have a number of things i need to write the blog post for the release in the next couple of days as well so yeah leads need some more research because a lot of stuff has happened there some of the highlights is one of the highlighters that we have a new solution for making effects in our acute quick rendering architecture ability to combine multiple facts in a very cost efficient performant way and with a tool that allows you to create effects visually as well and basically implement the shader that way also very well integrating with shader toy for instance so that's one of the highlights that's one of the things that was missing still in q6 we have the graphical effects framework in the combat module only but we were not happy with the architecture of how graphical effects were realized there because it combining multiple effects basically required having several frame buffers and several draw calls and that was not very performant so with q6 we took the time now to craft something that is more sensible more better architectural more performant and also at the same time more more powerful actually both for users that are happy with writing trader code and for people who are not so that's one of the highlights definitely then yeah we've made a couple of things happen on the on the desktop side specifically like integrating better with the gtk3 look and feel for instance on gnome desktops linux users can expect that they're cute applications with q65 follow better the personalization settings that they that that they are and also on windows we tried to come up with a meaningful solution to support the dark mode better cute style implementation on windows still uses the ux theme api that was introduced back in the windows 95 days and that api never gives us any dark assets so we are using this ipi to get to get the assets for the styling for instance and that doesn't that that api doesn't know dark mode so that made it very difficult for us to have a meaningful implementation of a native looking dark mode but as an intermediate step now we have a better integration with the palette system and with the theme system and if you use a style that is actually working with a palette like the fusion style for instance you get a pretty good look and feel for good application on the dark windows 11 for instance what else do we have we have been working quite a bit on connectivity solutions so one of the things we want to introduce as a technology preview with six five is an api for grpc protocol support and protocol support since yeah you can of course write network code today already and consume web services for instance with qt but grpc and protobuf are very efficient very performant and also more modern than doing a low level or yeah risk-based json-based api calls so that's a number of things that we have done there and then yeah a gazillion improvements on the qml engine many of those driven by some of the work that we did internally to expose more of our c plus apis to qml and also one of the things that we have been doing is porting cute location over to q6 that was also one of the frameworks that we didn't have there and that was a larger cleanup effort getting rid of some of the overhead that was required to expose c plus plus types to qml creating wrapper types and so forth so the guys that are working on the qml engine have done a fantastic job in bringing more language level capabilities and engine level capabilities to to expose value types for instance to qml that's going to make a lot of that integration work a lot easier and a lot less boilerplate than overhead and so forth so that's that's something i'm very happy about and let me think on the multimedia side we added screen capturing support which would be useful for something like this fantastic tool being able to share screens and record do screen recordings from a queued api what else very long lists improvements in qpdf including improvements in the cute locale and daytime handling if i recall correctly there's a whole list of what's new in six five already up in the documentation snapshots which you can look at it's a very long tale of of minor and bigger features so i think 6.5 is going to be a pretty pretty good release and pretty pretty much an improvement over both what we had in q64 and also from the 515 perspective now having basically all the functionality that we used to have in q5 over in q6 with some very minor exceptions but by and large pretty much done with that okay so here we have a few questions now from the audience let's get started with which what is a place of queued as a cross-platform framework for audio programming what is the place of cute as a cross-platform framework for audio programming we do have a lot of users in the in the media processing space let's say in the audio processing space both in terms of commercial applications a fair amount of professional applications that you find on yeah in that space are are done with cute or at least have extensibility through compute plugins that is something that many of our customers and users are doing to anna has recently written a blog post i believe about how to yeah how we can integrate into the standard frameworks that are available in that space with cute and how to make the event loops and so forth navigate and integrate with each other and of course we have things like open broadcast studio which is using cute so also on the open source side quite a bit of multimedia processing let's say yeah otherwise i'm not i'm not in the domain of audio programming very deeply to be able to say are people using cute for doing low-level signal processing things for instance but yeah i have to stay with my answer on that someone high level it's one of the it's one of the areas where we see q to be really strong and have a lot of having also native applications running natively on your on your system continues to be the only meaningful way of doing the kind of thing so yeah i found the reason the recent blog post about running a juice application basically as a hello world on on the tooth block yeah i found it interesting and i would be nice to see like an a follow-up like having like more than a proof of concept there yeah foreign from [music] linkedin rust is always a popular topic nowadays so i know that kdab is like working on a bridge from cute to rust execute itself looking at rust as maybe like there's a python port you know so this rust in in the future plans of cute or what's your opinion on rust and yeah it's it's a very popular question and not just rust in in specific but other languages in general i think also when we look at okay c plus plus successor languages from last year and last couple of years that is of course always an opportunity for for us to discuss okay what does that all mean for us there have been various attempts to or and there are various attempts still to to bridge cute and rust to make it easy to use queued apis from rust and and have application developers benefit from the things in queue that are not interested in in some way or the other my view is that rust has a lot of the things as part of the rust standard library so to speak that that we built in queued and have built in queued because it simply isn't or wasn't part of the c plus standard library and frameworks when when cube was created so from that perspective porting you to rust or making all of cute available to arrest programmer i i don't think that solves a real problem and rewriting cute or writing substantial parts of cute in rust i don't think that is currently a focus for for anybody and it's definitely not something we are thinking very actively about if there are any parts in queued for instance that need to be ported to rust that is that is not topical for us what is very interesting for us to think about is can we make those parts of q that are not part of other languages where other languages don't have a solution the ui framework primarily we make that available to us programmers so that rust applications can have their backend written and their application logic written in rust and then have a good interface good integration for instance into cute quick and cute qml i think that is something that has been prototyped already with i think there's a meta object crate in russia that olivier has written several years ago and and some of the kdub workers also if i recall correctly looking into that direction and i think that is where we can really make a difference where we can really bring the fantastic technology we have in queued for ui programming for graphics programming into make that available to people and to to languages and to communities that today at least don't have cute but maybe they have another graphics framework the rust is not free of graphics frameworks but if i look at other languages like for instance python or orzig or or you know many of the c plus successor languages i think there is an opportunity for us there to to rather focus on that part rather than saying let's bring q file or acute network over to to rust and i don't think that scratch is a particularly important dish so yes that is the current state of thinking the future there's a lot more future than what i'm thinking about right now we are of course thinking about we work with industries for safety critical safety criticality is a big topic and certification and so forth and that work and and these conversations might get us to the point where we say okay with c plus plus for instance we might not solve that problem adequately and then we could look into are there other languages that give us more safety nets as a language feature i don't think rust would then be the necessarily obvious choice if i look at some of the other simple successor languages that have perhaps a better and more natural integration into the c plus ecosystem and rust but kudos well i think russ has the advantage of being a metro language at least mostly ideas it's a major language but i think some of the other ideas like like cbp2 or or carbon have a better plug into the cpp ecosystem yeah who knows where they go someone's always struggling struggling to find the roadmap for cute double development long time ago this was easy but today the sinful seems to be quite hidden are there pointers related to this that is definitely something where we are not doing a particularly good job and we're i think also i as a chief maintainer so far i haven't put a lot of attention to how do we bring the community of contributors in particular together we have our contributor summits once a year where we are discussing where do we want to go with cute we have some mailing list discussions in that respect and of course within the cute company as a commercial entity we we have conversations with customers and we have road maps and so forth but i think it's not yeah it's it's something that i know that our product management team from a commercial perspective is looking at can we what can we publish in a meaningful way that also allows us to collect feedback from users what is more important than other things for them so that's something that is work in progress from that perspective but especially also if i look at how can we make sure and how can we help contributors understand where where we would like people to spend time on i think that is something we have been struggling with for a while and yeah i think that the best thing to do at this point is to a look at where the action is in in the in the project so on get it if you are familiar with that tool you can see all the open changes for instance that are that are under review and give you an idea of what are people working on you can look into jira which is yeah we all know at least within the queue project i think that it's it's it's a very big haystack with many many needles and it's hard to find out there what's valuable and of course if you have an idea if you have a proposal if you think there is something that you would like to work on and contribute to cute then starting by making a proposal on the mailing list and seeing what people think and before you start writing tons of code getting some feedback and getting some people to join you perhaps is a good idea not a very satisfactory answer i know but yeah that's the current state of affair indeed another question from linkedin is it possible to prepare a cute kraken for a vs code especially for qml i do believe that somebody in our berlin team has started to work on that and has something that that was ready for testing so we it's definitely possible and yeah there is something in the works i'm not entirely on top of where we are with with that particular work i'm a visual studio code user myself so yeah both in terms of language server support for for qml that of course will be coming to to visual studio code that way and also a more comprehensive plugin with debugging integration and so forth yes and it could there be like a web server api and c plus similar to wts and qt based so at this point i have to say that i don't know what wt is in this particular context we have made an http server module available in the last cute releases versus tech preview and now in 6.5 i believe we make that a fully supported module that is that is a module that you can use to integrate yeah make a web server makes a web service api put that into your application it is not something that we want to replace apache or whatever it was right that is not that is not the point of this exercise but rather to say okay your application is running on a system and it wants to make certain data for instance available to consumers to clients out there and that's that's something you can build with that web service api it's not giving you security controls at this point so you would typically run that kind of thing behind a reverse proxy or in an otherwise trusted network but at least in terms of yeah making using c plus plus and q to to make a web service api that is something that we that we have now with you yes yeah i've actually been looking at that last four for touring around with the cute graph api and graph apis under gpl so i was thinking about making a graph server as a toy example cool and then there's actually another framework which uses cute and offers web service interfaces so you can write that with but i am not sure about their name right now and there are several frameworks out there and github projects and so forth where people not right now cute just yeah there's a an http server which is like for more like for internal things and users but there's not a face or web api brand except that there is maybe you want to quickly also mention that there is web us port of cute you can compile queue transcript that is very true that is our webassembly port right now that is something we are very actively working on i think that's a super exciting technology for us and for us as yeah for the application development space and domain and in general webassembly and yeah that's that's definitely the web as such is for us a rather interesting space right now has it been considered to get rid of the mock compiler in the medium long term for me extra tooling that has been one major pain point when using cute hmm the mock compiler allows us to do things that we believe will really never be adequately solved by just c plus plus because the c plus design philosophy of abstractions without overhead do not reconcile very well with with true runtime introspection and reflection and that is again something that we then need for doing things like language bindings the qml engine and so forth so from what i see coming out of the c plus standards i don't anticipate that we can get rid of the mock there might be you already can today use most of cute without having to worry about the mock or without using the q object macro at all for instance you can connect your own member functions to acute signal for instance without having to make your make your q object subclass have its own meta object so you can not you cannot use the q object macro but still can connect your your objects to cute objects you cannot declare your own signals these signals get implemented by the mock and if you want to expose your your type to to the ql engine for instance and have your own properties or callable functions then yeah then you will need the mock but there are many use cases that you can solve without having to deal with mock at all i have to admit i always find it a bit difficult to see the problem of having other tools than your compiler manage by your build system if if you don't if you think mock is a problem okay but then also rcc will be a problem as a resource compiler and the qml compiler will be a problem and many many other things will be a problem and i don't quite see why we need to know why we should try not to use the tools we have to do these things we have the build system we have cmake or qmake if that is your thing to take away the problem from us to run these extra tools we want to have static code analysis we want to have linters we want to have we want to use tools to make our job easier and mock in that respect is not that different from any of these other tools so from that perspective yes it has limitations you can't declare a template class as a q object or you can't use the key object micro there there are limitations not everything is something we can solve but if there are problems that really that really prevent using it then then i'm sure we can solve it in some cases at least so but the concept of an extra tool is a problem i'm i'm a little bit in denial about that statement to be honest because i think for us as as programmers these tools are good for us because they make it easier for us to do our job and whether the tool is called mock or or or or or a linter or crazy or or good or client format or whatever i don't i don't care that much yeah i think so i have to ask you some questions regarding to that because i years ago i've been playing around with a library called very gross which it enhances the mock that was fun i think yeah yes and i just looked at it on github and yes it's it's still active but the last changes are a few months so it because that just from from back then i i remember how great it was to be able to have a q object class with signals and struts and make it a template like you can have a templated model which is hugely useful when you have models and views you can reuse and just plug in your next class and have the automatically everything displayed instead of having to rewrite and implement that again again so while i well i agree with you that you know removing the mark probably is not the goal because it's so dependent on so many code bases that removing it without breaking code base would be really difficult i i do think that like very gross shows a bit of where things go so do you have any plans to actually touch the code for the mock and update it like make it compatible with modern c plus plus and templates i would need to talk to fabian about it what his plans are as the current mock maintainer and to thiago who i know is on the stream or at least i've seen his name earlier as one of the people working very actively on the q object plumbing and infrastructure what what they think i think they have looked more into their degrees than i have back in the days when olivia was proposing that i i'm yeah i think the the idea is interesting and it's definitely yeah it's like you said it opens new use cases and as we move to more modern c plus plus beyond 17 i think looking into how we can yeah give make use of all the fantastic features that we get from c plus 20 and 23 like like deducing this and so forth to to avoid code duplication that we can make that available also in in q objects and in types that are emitting signals i don't think that will get rid of the mock but yes making more c plus features available in classes than emit signals i think that is that is ultimately a worthy goal and whether we do that through levels of indirection having a signal emitting type that you can simply plug into your your template class for instance or or by using meta programming or other techniques to be to be discovered okay then i heard that like you know rendering is your domain so there's a question do you consider a back end to render to a possibly remote browser surface instead of a local render rp so we have ex explored and experimented and in the cute five days also had a back end for webgl if that is what is meant here with the remote browser service instead of local render api and that is what what basically enabled that use case where you could have a cute application streaming the rendering into the webgl consumer that had a lot of limitations and webgl also doesn't seem to be the technology of choice here we have now recently worked on vnc as a as a remote rendering solution and we see from customers that they have different architectural requirements for running something that is basically a distributed queued application there is of course a traditional cute application or application architecture where you have a backend and a front-end running you know communicating over a data exchange a protocol and then there are those cases where for instance vnc or a remote ui streaming solution is more desirable and that's where vnc right now is a solution that we have been working on but especially if you look for instance into what's happening on the in the web assembly space also with web gpu i think there are definitely going to be to be activities in that space for us to yeah integrate those technologies into what we are having with rhi our rendering hardware abstraction and then seeing how that allows us to render user interfaces into something remote if the if the question here relates to are we planning to generate html for instance or or something like that from a cute quick user interface then i don't think that is the way that we are going to take here but rather working on that on the on the graphics level than on the user interface model level so one route one could go here is web sockets because that you know opens the way to to go anywhere and there's a websocket api by cute you actually work my programs uses to use a web editor in the browser and then bring the edited html back into the program because that saved me from having to bring on the whole chromium part from cute into my application to have an embedded web editor that was a bit of an overhead i didn't want to go to let's see how we are on questions so if you upload questions that always helps me in choosing so i see there is of course also questions on older cute versions ah here we see the limitation these 200 characters so i someone wants to use gcc and support for c plus 20 and 23 and was cute 515 by compiling cute with the latest gcc compiler and they haven't done it with ecc yet but are you aware of any issues they might run into we had to take care of a couple of problems that we experienced when compiling q6 with c plus 20 enabled so i do anticipate that there will be problems here as well be it that implicit conversion to google if i recall correctly was one of the challenges that we had in the cute code things like opera yeah operator comparison operators i think we had to have a discussion and work on making sure that we have a well-defined total ordering so that spaceship for instance operator works with our types i don't remember all the details i know that mark has spent quite some time on looking and making sure that we have cute code and also cute apis that behave well when under c plus 20 semantics basically and so i do not expect that you will have a trouble-free journey when you are trying to do that with q515 so i would rather if you can upgrade your c plus plus compiler and your c plus plus version 2c plus plus to the latest version then you might want to also do that with your key framework yeah actually it's on an internet related question um the new youth policies on their longtime support versions they faced many problems do you think this policy helped the open source community no very simply it did not help the open source community of course one could physically say that was also not the purpose of making these changes helping the open source community i yeah to to to answer this yes and no question with a simple yes or no no it did not help the open source community i think it's from my perspective could have been done differently i understand why we as a company made that change i sympathize with some of the rationale behind those changes but i think both the timing and the way it was done could have been better managed but here we are so from what i understand as the status quo at least with 515 being what it is and and we are releasing the lts supporting patch versions also to the open source community with a with a delay which you know okay one can one can debate that at the extent but especially when we look at now the q6 lts versions that are commercial only like cube 6.2 and now also the upcoming 6.5 from what we understand from for instance the kde community that those lts versions are not including the open source community or the open source version that that is not considered a big deal because the bug fixes that we have include 6.2 point i don't even know which version we are on right now those fixes are of course also available in the in the q6 3 and 64 versions and migrating from 6.2 to 6.4 for instance is not should not be a big problem and and so far also hasn't been for most people okay now there recently has been an interesting talk released by mark mutz about civil plus 20 support on q6 so can you elaborate on that is there like any plans to like bump up the door like officially make their support available for it or what's what's the status on this yeah we have a we have a road map that still needs some discussion within the community on how we can get to making c plus plus 20 the minimal version for q6 it starts with yeah like i mentioned making sure that applications can be compiled with c plus plus 20 even though cute itself doesn't require it and even though pewd itself doesn't use c plus 20 constructs so that's the first step there was a fair amount of work done on that on api level and otherwise to make sure that this is possible and then the next step is of course to see how can we use cute c plus 20 constructs inside of cute can we do that in the first place or do we end up with a situation where then you need to build cute itself with c plus 20 but you don't need to use it yourself that is kind of the idea the challenge here is do we then end up with different versions of the standard of the c plus standard library and what is the abi compatibility between different versions of that library so there are a couple of devils in the details there that we need to discuss internally and then ultimately yes we want to get to a point where we can use c plus plus 20 in our public api so that it becomes basically the the minimal version for using q6 that will take several years for the simple reason that we are supporting platforms and in the embedded space in particular compilers that are not c plus 20 compliant in the real-time operating system space for instance that is not a very fast moving tool chain but yeah we have experience also with q6 that by requiring c plus plus 17 has given the vendors of those tool chains maybe a bit of motivation to to move along and make sure that their tool chain is also supporting the newer standards so i'm optimistic that we can have a similar positive influence there also with q6 and c plus plus 20 in the future okay there is an interesting comment slash question there's no question mark or technically there's another question but think it's an interesting topic to talk to so newbies like lame need to update to the c plus programming was like there's a cute four book by yasmine rashad but of course cute four books are outdated so what are the like other plant like publications you're aware of all the acute six books planned or i have to admit that i'm coming up with a blank here i don't know what the current situation is with book authoring i know that there have been several initiatives to make cute six books that especially like lauren has done some work with using queue for embedded programming but i don't know if anybody is actively working on on yeah updating and replacing yasmeen's book from back in the days i i know for a fact that jasmine is not busy doing that because he is busy with with things completely outside of the huge ecosystem but i'm not i'm not aware of anybody actively working on a book project right now that doesn't mean that there isn't one my question i do want to mention that there's a qml book on the web which is privilege as new material and good material to read on and there's a good introduction to kilometer and cute and there is of course the cute online resources provided by cute itself especially like the cute examples for q6 and that's how i mostly learned the part of what i want to do with students so if you want to do something if you have an idea and you want to do it with cute look into the examples like look into the apis read through things and you know look into the new releases what new apis are coming out and what what you could do with it so are there plans for simplifying cube property declarations so much identical code i haven't been i i have not been again it might be a bit of a denial syndrome but i have not been aware that the q property declaration is excessively full of duplications yes you need to you typically call your geta the same as the name of the property i'm i'm not aware of any plan i don't think there are any plans i'm not even aware of the problem evidently there is a problem so it's a perhaps something worth looking into how we can make the property declarations simpler and how we can take more of of the property declaration into the c plus declaration for instance but then there's a lot of holistic going on and that is a bit of a slippery slope always if we need to figure out that okay here is a here's a getter that or here's a here's a contact member function that that somehow relates to the name of the property maybe maybe too much guesswork is rather doing more harm than good but things like yeah bindable or stored or designable and a couple of these attributes maybe maybe don't need to be there if they can be somehow differently expressed and even if we say if you follow a certain naming convention we can we can figure things out by just naming the property we can figure out the type and the and the names of the getter etc functions so yeah there there is perhaps something we could do here but again it's yeah it's a it can easily become a slippery slope where we make a lot of assumptions and guesswork and things don't actually work out as it has designed but it's a it's an interesting proposal it's an interesting problem to race let's like that that's good feedback so if you have any suggestions how to you know make them simpler to cube maintainers are probably willing to listen to you then we return to c plus 20 if using superfast 20 compiler c plus 20 thread or q threads you know can you mix those or like yeah qq thread has a bit more infrastructure than the c plus plus standard threats in terms of having an extendable or a broader api because you can run an event too for instance in your thread and and there is a virtual function that you can override and these kind of things so yeah q threats are still there q threats and c plus plus threads ultimately both talk to the same operating system level infrastructure to actually create a threat and and control that kind of stuff so they are in interact or in yeah they are the same thing in a different wrapping yeah cue threats and and feud will create queue threads from you for you around threats that you didn't create with a queue thread if needed for instance if you call if you create a key object in in a native thread or in a c plus 20 thread or in something that you created using native apis and and you ask that object for its for its thread affinity it will give you a q thread back so that you can compare pointers and can identify threats via q thread and and know if an object emits a signal to an object and another threat for instance will take care of the of the marshalling then for you so yeah it's the question isn't yeah it doesn't quite represent the the the reality that's going to happen you can use c plus plus 20 threads in your cute application and that's the important message cute will typically not use c plus plus 20 threads or or native threads because we typically rely and depend and want to use the the the service that q thread gives us but there are probably exceptions to that even as well in the cute source code yeah so i personally very much often use a q thread pool because it's so easy just to write a pass to to do some background thing and then use signal slots and the other thing is like cute threat has implemented c plus plus 20 threads depending on your platform may not be implemented already or you know maybe in a different state so with other standardization going on and i think sometimes using an external implementation like q2 boost and certain spaces can be better because you have one implementation which has been tested already implementations on various platforms which are still maturing there is a mac os question how does a cute team deal with mac os specific issues especially with apple releasing a new os on a yearly basis which is making difficult to catch up so yeah many of us are working on mac os as our primary platform so eating our own dog food at least on that level helps we have a reasonably good relationships with apple on an engineering level and also on a let's say commercial level which is which is helpful to understand what they are planning to do and how the changes that they are making on an operating system level api level or framework level how that impacts us we have access to the beta versions and pre-release versions like everybody else that is part of the development program so it's not like we have privileged access to anything here but really just trying to make sure that we are early enough knowing what's coming our way mac os is definitely one of the more interesting platforms to support if i may say say it like that compared to a platform where compatibility for instance is a very strong focus like windows there we have to think about things like look and feel and and and styling and yeah also there we could do more and better but on mac os of course apple is a little bit less strict to itself and to its own behaviors and compatibility promises around mac os deprecating things and so forth but basically yeah using the platform working on it daily and and trying to stay on top of it and having people also of course in the team that are basically having that as their priority make sure that q also looks good and behaves correctly on the next operating system version so that is one of the things that keep us in the cute community and in the cute company in particular very busy it's one of these alice in wonderland things where we have to run as fast as we can just to stand still but that is that is one of the promises we make right you write your code today was cute and and we try to make sure that your code also works and looks good and that your application makes sense on the next version of the operating systems so that that comes with with some some fun work and some yeah repeating the same thing if apple decides to deprecate certain apis that we were using a couple of years ago okay yeah any question it doesn't fully fit but it's mostly i think the important part is there are there any plans to make basic c plus plus cute quick classes like you quick image and others part of the public api it has been set several times in the past five years that it might be coming in the future but you know it hasn't been happening yeah i mean we yeah we regularly discuss what what is the problem that we try to solve and is the problem big enough for us to make things like binary compatibility commitments to our acute quick types on the c plus plus level and so far that that equation has always given us a result which said don't don't go there quite yet maybe yes we see that there is a benefit from having some of the cute quick classes available through public c plus apis and making small steps into the direction is something we yes want to do but we also know that especially on the cute quick framework side which historically has been targeting a very specific use case which was mobile devices with touch screens now that we are putting more and more work into cute quick to also make it a great toolkit for the desktop we are extremely happy that we haven't that we don't have to worry about binary or even source compatibility requirements on the c plus plus side because it would lock us very much up into existing designs that might not be very applicable for what we want to do on the desktop side so at the current state of affairs yes i'm sure there are some of these basic classes like mentioned here cute quick image that are pretty much you know set and there is not a lot of crazy stuff we can do here to to make it work better on on desktop or embedded or mobile but for the framework as a large at large we are we are happy that we don't have any compatibility commitments right now on the c plus side i hope we get to that point where we can say now now we are really happy with what we have done here on the c plus plus side we don't have a very strong entanglement of private abstractions or private classes talking to each other anymore and and then we can look into making that at least some subset of it publicly available but yes the five plus years will probably be six plus or seven plus years before we get there to be honest interesting what grpc be integrated into remote objects or via another rpc system grpc is an established standard for data transfer between services using you know interfaces that get generated into code at compile time and so forth so it's they solve different problems then remote objects specifically whether remote objects with a whether the maintainer of remote objects is the name i have forgotten right now brett bread whether he wants to jump onto the grpc ship as a protocol for the data exchange there is something we need to look into right now these two things are are yeah independent of each other interesting so if you have any more questions now will be the time to post them because that is currently what we had on the key and so as a cute maintainer how much time do you spend like maintaining things and like who's it's like one one thing i was thinking about like you know achieve cute maintainer but which group or which people are like and i guess you're part of the group makes like the decisions and plans for the future of cute so the future of cute where we want to go it's it is each maintainer's privilege to have a road map and to have a vision for the thing that they are maintaining and for also both from a functional perspective and from a code hygiene perspective make sure that we are moving things into the into a good direction where things get incrementally better incrementally improved in small steps or in larger steps that really depends on each module but yeah each each maintainer first and foremost having their own idea of where they want to go with cute and then my responsibility is to try to see how we can make sure that these things are aligned with each other that we are pulling into the same direction if there are differences and if two maintainers find themselves in disagreement and can't really conclude to that then i'm the ultimate arbitrary arbitrator the cute project is not i don't i don't like to think about it as as a a project under benevolent dictatorship i don't think it does justice to the project it's far too complex for a single person to say for all of the different aspects of it from network programming to system level programming to yeah distributed systems to user interface development where each of these things is going so i think the maintainers that we have do a fantastic job in making sure that that things get better that things are staying relevant and modern and reinventing themselves if necessary and yes that is that work is done by doing it as much as it is done by also talking to each other and coordinating but the people who are doing the work the it's a meritocracy so the people who are spending the time sitting down and and implementing their ideas and and pushing patches for review those are the ones that define where the direction is going of course as far as the cute company is concerned we are looking cute as our product we build cute to sell cute ultimately and to make it more valuable and to find to make sure that customers are are seeing value in in renewing their licenses and and upgrading to the latest version so we deal with cute we treat cute as a product with a with a roadmap and with discussions and with trying to understand what customers want to do and so forth so of course given that the queue company is a is a big investor in into cute as a you know employer of most of the developers or a large part of the of the developer spending every day in full-time on cute of course what we decide internally in the company and what we've what we discuss in terms of what is interesting for the business that has a huge influence but it's happening within the context of the open source governance and of the open source maintainers that are otherwise also part of this and i think yeah like i mentioned when the question about the roadmap was asked i'm i i do know that we can do more to involve people and to be more transparent about what's going on that is something that we want to do but yeah that that is basically the different aspects of the decision-making process of where are we going with cute are are involving all these different things many cute examples seem to be a bit lacking from modern c plus plus standpoint like the use of new delete everywhere instead of unique pointer is that because of something like an acute or like just do you like generally maybe like you know talk about like cute using new and delete instead of like modern yeah yeah the cute philosophy and the the the the the way that cute models object ownership doesn't doesn't translate very well into modern c plus plus to be honest it would make very it would it would not be very valuable to have cute examples that allocate objects and manage manage objects that are allocated dynamically with unique pointer just to then hand them over to their parents and then basically remove them from the unique pointer again either implicitly or or or whatever using using a move only api so it wouldn't really add a lot of value to the comprehensibility of the examples i think if you would pepper unique pointers all over the place it would look like okay who is actually owning the object right now right now the q object ownership model is at least it's clear in that sense objects whichever parent are owned by that parent if we throw unique pointer into the mix it i think it would rather confuse people there have been proposals of can we have a template member function two key object make child or or something to that effect which basically yeah or makes the object ownership clearer for for readers of the code when they look for unique pointers and and weak pointers and so forth i think that these are interesting ideas i don't think they they solve a very big problem right now other than that people who are expecting unique pointers and smart pointers generally to to to express object ownership need to understand how cute works you need to understand how cute works anyway in that respect yeah jumping into that understanding head first and having maybe a bit of a surprise moment when you start looking into this and saying okay this is not what they teach in the modern sql test books yes i think the sooner you the sooner you realize that cute does it differently the the less confusion you will have further down the road yeah i think it's like definitely one one thing we should point out is like putting like a huge pointer that is owned by a cute object parent into a unique pointer is a bad idea because then the unique pointer when it gets out of scope will delete the same instance as the cute parents so maybe there's some use case for that but generally as a beginner or someone you know looking in the code cute often reps like the ownership into a parent and when the parent gets deleted it's cascades through the children and so there's no general problem with that and cute in ownership that's taken care of you had almost every there are exceptions of course but almost every polymorph type in cute which you have to allocate using operator new because you wanted to escape the scope almost all of these types are queue objects and and everything else is a value type that you don't allocate with operating on you anyway so in that case again there are exceptions and of course there there are reasons to not give objects ownership and and don't parent them to anything in which case you can of course use a unique pointer and should use a unique pointer to manage your your object lifetime but within within the examples at least that is a i think that is a pretty rare construct okay is there an effort plan to update qml or quick to support more recent standards of ecmascript i would have to talk to ulf and fabian about what their immediate plans are it hasn't been high on the list of our internal planning discussions at least for a while so i'm not entirely sure that is the best i can do right now so i see there is lots of debate under chat on various things we matched and what's your personal take on the newer c plus standards as a cute maintainer how much can you follow that and how much can everybody follow that i mean c plus plus 20 is is huge just understanding the implications of of what that means in practice what are the what are the practical use cases for for certain things that were added i i really loved timo's presentation talk a couple of of weeks ago about like here here is c plus 20 23 changes the way that we develop software or write code and you know he he started with those three or four slides of here all the things in 0.23 and then you know cutting away here are the things that really make a difference and most of the other stuff is is either fixes to the things that weren't there or just you know simple wrappers around things that were complicated to express but here are the four features that really make a difference and c plus plus 20 is a little is even more so right it's a ton of stuff and really trying to understand what of that stuff is really moving the needle in a substantial way in a significant way for us as programmers to be able to to write better more concise but also more comprehensible code that is that is i i struggle to be honest i love of what mark has been doing the presentation was mentioned that he held at the pewd world summit about how c plus plus 20 and cute will will come together and what what our current evaluation is of what the different features are that that are relevant for us and also honestly saying some of the things will not be relevant for us at least not in the current iteration like modules for instance given that we have preprocessor symbols in our headers that they we can't we can't turn compute into a bunch of modules but other things like concepts for instance or or what what we can do with co routines i think we will have some very interesting work that in that direction going on and also talks about that if you are an oslo by the way in a month from now 13th of april we have a we will have a c plus users group meetup where we talk a bit about these things i i love what's happening on the c plus plus standard as far as it's making the language less verbose and easier to comprehend it's concerned like deducing this how that allows us to remove a lot of duplication how and if we can use that that's always for us a question depends a lot on what other implications for binary compatibility for instance or source compatibility can we now start replacing all of our various move only overloads and and use the deduction of this i guess not because you know when we need to make things in line and and we need to have the symbols exported by the library so yeah i i like very much where the standard is going in that respect and how much it makes many things simpler i also think there is a lot of stuff that is really a very sharp knife for people that really know what they are doing and and need that kind of tool but it's not super applicable for even for us as library developers i mean we we need many of these modern c plus features as a library developer that somebody who is developing an application perhaps doesn't really need or care about but even for us as c plus library developers i think many of the things in the standard are really even there is a bit too too specialized too expert to too nishi let's say but it's yeah always a bit of work to find out what other stuff is actually useful how does cute handle security in its code base how does it handle security so there are various parts of cute the majority of cute is not exposed to untrusted content so even if there is a memory issue that would in theory allow you remote remote codes execution or any any attack vector in general that code is never exposed to something that is is untrusted there are on the other hand parts of cute that are exposed to and designed to consume untrusted content like our network code for instance obviously or you know image format handlers or a couple of other a couple of other apis that are supposed are designed to make it easy for an application developer to consume something that the application user or the application developer has no chance of of scrubbing and then yeah that is something that we are discussing right now actually can be document clearer which parts of the cute api are designed to deal with untrusted contents and do we need tighter processes around this we do things like okay make sure that our third party libraries for instance are are always up to date because in many of these parts like image format handlers we depend on third-party libraries doing the actual jobs and and these are party libraries of course get constantly security updates we do keep them up to date so that's one of the things that we are doing for the cute code base itself we do use things like static code analysis for instance to help us catch some of the things that can be caught that way that is definitely not everything it's a it's it's one of the tools in the box one of the things is that the robot for instance is doing is running osfas against feud and exposing the framework to that which is helping us to identify both performance regressions or or some optimal let's say algorithms and complexity but also yeah crashes or or anything else that indicates that we have an attack vector here and then yeah as security policy is concerned if you if you find anything in queue that you believe exposes queued to or queued users to a vulnerability then things reported to us we have a security mailing list just for that security at the queueproject.org and then we triage the incoming reports evaluate them together with the maintainers and see what we need to do and if we have a patch that fixes the security issue then we will port that back to all the still maintained cute versions including q515 at this point so yeah yeah and i this and that point is thank you for also for your openness and your willingness to share the cves on your blog and to actually say this this is an issue this is what we fixed and this is the patches if you want to or if you're like you know need to fix it in your code base and the next question are there any plans to retires cute scoped pointers that are in flavor or favor of the corresponding standard library types not plans to retire them from the public api because it's part of the public api but as far as at least internal code is is concerned it's it's you will probably get a minus one from somebody during code review if you start if you add more code that uses qscope pointer instead of q you need pointer choose code pointer has slightly different semantics from unique pointer and it can actually escape the scope for instance and yeah so yes we don't want to use it anymore but we also acknowledge it's part of the public api people have written code against it and there we are yeah it's avi and api stability yes and what we all face and once you've made it available it's changing it as difficult related question is modern c plus plus favors move in various semantics cute often has copy and write and reference semantics that's this make it more difficult to interface with more modern code bases from children does it make it more difficult to interface with more modern code bases so i mean the the infrastructure that we have for copy and write for instance makes cute value types of course very movable i mean it's it's the it's the showcase for moves advantix that you have your data structures in some dynamically allocated deep pointer thing and that is the one that you that you move so i don't think these things are in contrast or in conflict with each other copy on right is still extremely useful if we can't move a return value out of the function because it's not a temporary so whenever we have a get out of a property that is stored in the class being able to return a copy of that value without having to make a copy of that value but using copy on right of course is is still a huge benefit in terms of performance does it more make it more difficult to interface with modern code bases i i'm i'm not aware of any challenges as such to be honest i mean the fact that cute many of the of the more cuteish cute types are q objects and are polymorph and have virtual functions and you know you can't move them are you can't copy them as a value that doesn't go away and i thought i think that is perhaps if you if you think about modern code bases yes it's maybe an old-fashioned thing to declare functions as virtual because you would rather have algorithms that take a callable or a lambda or something to that effect that allows you to to hook in your customization points but that that ship has sailed for cute at least as far as all the key object types are concerned so but i don't believe i'm no i don't think it makes it more difficult to interface with other modern code bases okay are there any efforts to strengthen the community around cute yes there are we have and i'm very happy about that with pedro bessa a community manager now the company that that basically has a full-time job to interface with communities like meeting c plus plus or or the kde community and and organize several activities around established communities both in the q10 and the c plus space but also very actively these days working with the with schools and universities for instance to see how we can bring cute into the curriculum and and work on that level with with with the educational sector so several activities going on yeah i'm sure there can be more especially on the contribution side i think there i would i would like us to spend more have more time to do more things but the time is what it is and here we are so yes i i do think there there are efforts going on and i do think there could be more efforts going on but what each each small step is is useful and is valuable so yeah i think this is really a good point which actually brings me to another question because i i have been talking also to your community manager and there is a cute conference in brazil and i know that you have also been there and spoke and i just want to know how was the conference in brazil how felt it and what was or is popular with this audience in this community we were actually not there we had an online we had an online keynote at qcon in brazil in when was that late last year i think yeah that i i think people were very happy to to talk to us pedro is from the attack of the woods so he has good connections there and of course i think to some degree due to the nokia days when when nokia had a very active research center in in brazil i think we have a very very active and very strong and very positive community there and and was very good to be invited to their local community conference and and talk about yeah what what we are planning to do with cute that was good that was that was i i really enjoyed that and i haven't heard anything bad about what we talked about there from that side but it's sometimes a bit hard to get feedback of course yeah it's really nice to see that electrical company is actually maintaining a presence in brazil and you know organizing a conference for the local community for the local community organized the conference we didn't actively we were we were invited to to a keynote about both of what paper is doing with the community and what i'm doing as a that then still new and maybe now also to that because there's i think that it's like you know we have the the big conferences in europe and in the us but in the rest of the world there's just now coming up initiatives like india has cpp india and recently in the group has started cpp africa and i hear that somebody plans to have a conference in japan but there's still nothing and with that i think if you have any more questions yeah thiago has posted the link to the cute con in brazil in the chat if you have any more questions post them now and i thank the audience in both a nobilo and in linkedin so far for their questions and we're going now a little bit more than an hour and so any questions or anything you would like to mention [ __ ] any plans was was cute anything you want to mention and still talk about yeah piggybacking on on your question about the community like i mentioned we have we have a meet up in in oslo in on the 13th of april if you are in that part of the world we would be very happy to welcome you to not necessarily our offices but the building in which our office is and we will have some interesting sessions about q10 and c plus plus in particular and that is something that i i hope we can do generally not trying to bootstrap cute communities all over the world but really also being part of the c plus community and and joining that and i know there is always a bit of and so forth i think you know we are we are part of the same community and of course yes we're all getting richer by each other so yeah thanks again for inviting me and making making that conversation part of this group yes see there is a question which is more towards me i quickly want to take that and how often do we do those live sessions so we do those dive sessions roughly once a month and today our guest is and he has been answering questions on cute and the c plus community and c plus plus and you know as as a chief maintainer there's a lot of things to do and to maintain and lots of plans it was a very good conversation thank you for your time thank you for coming it was an honor to have you and thank you i think we're gonna cross the stream and thank you all for coming and for asking interesting questions and yeah looking forward to the follow-up okay take care