okay so today we're going to talk about something with not a very exciting name but basically the way i would i would make your viewers interested is it's a way of programming the kernel without programming the kernel i've heard some people say what javascript is to the web ebpf is to the operating system so there's a big important distinction in most modern computers between user space down here and it's where we spend most of our prayer time programming and running applications and the kernel which is dealt with by the operating system and the kernel is doing things like taking care of the lower level details of files and making sure that display drivers and everything run properly one issue comes if you want to ask questions about say file access or tcp transfers or things like that so you want to ask questions that are you're interrogating the operating system to understand you're monitoring your system and if you want to ask the question about say tcp connections or say file io and you're writing your monitoring program you have this great new idea for how you're going to stop a distributed denial of service or something like this but you're writing it in user space so you need to ask these questions via an a p i application program interface and that limits what you can do and it puts a bit of a drag on how quickly you can do it so if you really want to know you want to monitor file access real quickly you want to monitor tcp connections input output things using memory or whatever ideally you want something running up here in the kernel so ideally you want your program up here i should emphasize the kernel isn't magically faster but for doing accesses on whether a file is being accessed for looking at things like file read rights tcp in outs the kernel is much quicker you don't have to go through this api and make calls upwards into the kernel you're already there there's a lot of problems with that though if you want that program to reside in the kernel kernel programming is pretty tricky and then you say to somebody hey oh i've written this great new monitoring tool oh great so what do i do to run your application well step one rebuild the kernel of your computer so you've already got a big kind of barrier to entry or let's imagine you're working on linux which everybody should be then you'll say dead airlines 12 hours could you put my program in your kernel i have been very good richard clegg and hope that he's going to include it and that maybe takes a few years so is there some way we can get little hooks into the kernel and it turns out there's a little virtual machine in a way i think it's really badly misnamed now e b p f extended berkeley packet filter which is a really weird name because its origins are really strange around about the 90s early 90s some researchers in berkeley about what they call a packet filter they were networking people and they were looking at network traces and i want some simple way to say give me all tcp connections to port 80 or give me all udp packets please so they wrote kind of a a regex regular expression match for packers right and i've been aware of this for years but then a few years ago i started noticing lots of my networking friends in conferences they were presenting all this stuff on berkeley packet filter i was like what's going on here packet filter can't do that sometime around about 2014 people came up with an idea though this packet filter can run in the kernel maybe you can do clever things in the kernel and then they started to extend it and extend it and give it more and more abilities and now it's gone so far away from being this thing that filters packets and tells you which packets which match expression so now in linux and sort of working in windows and i believe a mac versus on the way we've got this little virtual machine sitting in the kernel and do you use a space can write some code and if it matches what the virtual machine wants you can be running little code hooks up in the kernel now what's the use of that it means you can do incredibly quick monitoring or outputting any kind of drag on the cpu this thing has even been taken a little bit further so there is something called xdf so we have if we have our network interface card so their packets are coming in here to be passed up to the kernel there's even something called x d f which will allow these bits of these bpf programs draw on the interface card so you're not even taking the burden on the main parts of your computer now the burden of computation might be going on the network interface card so we've got a way of writing programs in user space having parts of the logic the parts of logic that need to be fast run on the kernel or even on the neck and it's it's just there's an explosion of monitoring tools so for example one that loads of you probably use your android battery monitoring tool if you've got a modern version of android it's probably running ebpf somewhere in the mix to look at powered events and battery events and stop stop starts with bits of software and you know sometimes if you've got an android phone you'll get that thing saying application facebook is using lots of battery do you want to stop it that is probably using ebpf somewhere in the mix on a modern android phone i've only just been learning this so i'm going to show you the world's worst demo of this because i'm i'm not a skilled programmer on ebpf but what i wanted to do was create a kind of minimum application for viewers to see the kind of things that this can do but absolutely don't copy what i've done because it's really bad what i've done is a little python demo here and i will say this this is this is very kind of bodged together and the first thing you'll notice is that this doesn't look like python because at the top of the screen here you can see it defining bpf berkeley packet filter text and then we've got a c program hiding as a matter of text in our python program so we've got a program here called don't touch dot py it's looking like a c program at the top here we can see a little structure that's going to store a name and the length of it because we're doing old school c now so we need to say when we've got a string we need to say not only the characters but the length so that's because it's running on the kernel it's quite a low level yeah yeah so these these bpf programs need to be really low level it's a virtual machine that's pretty much assembler as i understand it the epf hash is a structure and this line is giving it a name access it's telling us it's going to map this info about names to an integer this is not the way i should have done it i have copied this code for a man called brendan greg who's literally written a book on bpf don't worry too much about this bit of the code this is just grabbing the name of a fail being accessed so some file is being accessed and here i'm storing the name of that file and then i am storing the name itself so i'm showing the length of the name and then the name pushing into my hash the number one why am i pushing in the number one because i shouldn't be using a hash at all to do this i'm just adapting somebody else's code so i'm creating a hash map where i should really do something else but i'm creating a hash map between the name of a file that has been accessed and the number one so every time a file is accessed this is going to happen he is the python so here now we're back in python land a little bit more comfortable and this special line says compile me up that text that i was looking at that bpf program compile it up and these flags are just going to stop it spitting a lot of warnings to the screen and here's a crucial bit we're going to attach a kernel level probe to the event vfs read a read in the file system so every time a file is read in the file system we're going to call our little bps program and our little bps program is going to read and put a name and the number one into this little hash map so now whenever a file is read it goes to flash mapping is associated with the number one and yes that is a terribly inefficient way to do it now we're in proper python mode and we're entering a loop sleeping for a second looking for a keyboard interfa interrupting casual board of the program and grabbing that table access and that table is a table of the name of every file that has been accessed we're going to look through that table and see if we can find a file called hands off dot text so that's what we're looking for if we find that file called hands off.txt we're going to play an alert and if we've alerted too many times we're going to exit and that's all we're going to do and then here while that's all happened we're going to clear our list of access to files so let's see what happens when we run this program so i'm going to run don't touch needs to be run as a root in this case okay so now the program's running everyone's second it's looking down the list of files accessed and it's checking whether any of them are called hands off.txt now when i access the file hands off.txt you say oh it's spotted that i've done that and it's saying do not look at the file try again and it's given me another warning i asked you not to look at the file and we can keep on messing about with that and it will keep on doing that now okay that's a really really silly silly example but the original plan i've adapted that from was looking at the most accessed files on the system so instead of just saying is it hands-off dot text it was sorting them all in python sort them all out printing them in the table and showing you a useful monitoring system with the most accessed files on the system now here's the thing if you're going to run code in the kernel you have to be pretty sure that it's not going to disrupt your machine running stuff in a kernel is inherently a little dangerous so let's try something else let's try something a bit dumb let's calculate some fibonacci numbers so everybody loves fibonacci numbers so my kernel program now is going to calculate some fibonacci numbers so i've got a new file it's almost exactly the same but i'm going to add in something new into our structure we're going to add in a 64-bit fibonacci number call that i'm calling fib and i'm doing an iterative calculation of fibonacci now you'll be saying oh hold on richard why are you doing that iteratively it's the classic recursive program i'll come to that in a minute but iteratively we're going to go around and we're going to add together these fibonacci numbers first or second the usual way we do it and return the results so fibonacci and and i've got n is 40 which is about what i can do without an overflow so let me run that and we're doing exactly the same thing for no reason whatsoever we're looking at the file system we're waiting for the don't touch this file and when i press it instead of just giving me a warning it's calculated the 40th fibonacci number which i can look across and see that i've got the correct one if i've made it much higher it would have overflowed why am i doing this stupid thing because it is a really daft thing to do one one thing is you're putting this thing into the kernel what if it stopped running what if it it didn't come back now you've got a kind of a rogue process in your kernel that's not great so let's see what happens if i remove the increment from that loop so i've removed the i plus plus let's imagine i've just messed up in my programming as happens so often so now this is not going to terminate i've written a an unterminating loop and now i try and run this and what is it done we can see when it's tried to compile the c code the ebpf compiler has said infinite loop detected so it's spotted that i'm trying to do something sneaky i'm trying to get this to run forever or or i've messed up or whatever i've done something that's going to not fit within the safety parameters of my kernel and it stopped my code compiling and that's also the reason i'm doing a sort of clunky looking iterative fibonacci because the usual recursive fibonacci another thing that will make this this computer says no is trying to do recursion within within the virtual machine here so that's actually really short demo it's just absolutely a sort of first level taster but this this is used by lots of things now when you look at the companies using ebpf it's all of the big players it's google and facebook or meta as we're supposed to call them now and the guy whose code i i was using brendan gregg is with netflix so people and the people doing the big networking stuff are all using this and us researchers are also getting really excited about this i'll give a particular example slightly local cambridge york and bologna have done some work and they're using this to detect when iot devices are producing a different traffic profile than you expect and that might be a sign of a distributed denial of service device so yeah this technology one thing i would say if you're going to play with it it's one of those technologies where it's at that stage when you read a manual page you read a blog and you think that sounds great i'll implement it and then you find that that was from 2021 and your operating system is from 2022 so it doesn't quite work anymore so i would encourage people to have a play with it but i would also encourage you to have a little bit of patience so i've written this for example in a system called bcc and then about an hour or two after i had written it i found somebody saying bcc is obsolete it's so 2022 so that's why i call it a rapidly moving target if you want to get interested in this because you're in the kernel yeah is there a potential here to kind of look right fry your kind of internal not fry but no lock up the machine you're thinking you're thinking of the halton cash you know you know it could easily be it so if if you start running non terminating loops in your kernel then potential potential not great things will happen which is why it's carefully protecting foolishness it's trying to trap it yes i was a bit mystified with this when i start so somebody who's looking at my code it might go richard what are you doing you've declared fib of the function but you haven't declared n so if i go u64 am mysteriously now it lets it compile which it really shouldn't maybe the devs could tell me why that is certainly that's beyond my level of knowledge of this system so you can see a work in progress but really really important and lots of production systems are running it how much room it's got left so now the sender knows if i don't want to overwhelm that computer i'm only going to send he got slightly dimmer when we got to this road and then slightly brighter again when we got to this row and we might find that but basically if you've got a