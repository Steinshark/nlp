should we do the story of react does that look good i haven't i haven't seen this one before meh the one and true person here thank you dev you know what dev i appreciate that we're gonna react on react let's go i'm gonna react first launched it up hold on i gotta do this thing marker react to react fu on the topic of lsps i just saw your video why ts1 and i'm surprised at the comment about hey hbo pylons i did some digging it looks like open source mit under repos is there something missing this must be a pretty recent change because this was less than a year ago i checked so about six months ago i tried to get html server to work or three months ago you had you can only get a built artifact you can't actually get the code it's not open source the last time i checked just the binary is is open for you to download off of github that's the last time i tried to play around with it because i wanted to use it because it sounds really good you know what i mean sounds really good all right thank you honeypot is going to release a react documentary february 10th are you going to be planning on watching it by the way we should do that should we do a group react watch physical thank you one day i'll understand half the technical stuff you're talking about you will too soon right on all right here we go you ready when react first launched it was not well received comments like these were all over developers really didn't like it and at first why what to me this is a little strange welcome to costco i love you thank you i'll we'll get to that don't worry this is a little strange because when i first saw react i was actually genuinely excited i think react was an amazing experience right the story of react right like when i first saw it i was really really really really really really liking it and so i'm surprised that people were so upset about this stuff i don't know maybe i'm just like maybe i'm just stupid but i thought it was great at first why would they it was completely different than anything that had come before it so the question is how in the world did react go from sentiment like this to being a university loved and mostly respected to answer that we need to go back way back to before react was a thing at the time building for the web was different jquery backbone and angular dominated discussion jquery was the most let's go mateo did you see the little mateo popular way to build for the web and embrace websites for what they truly were a tree of dom nodes with jquery the state of your application lived inside of the dom whenever you wanted to update that state you'd imperatively traverse the dom find the node you wanted to update and then update it jquery revolutionized building for the web by creating a simple and unified i think so when i see this where people reacting so strongly to jquery when i see that the first thing i think is that y'all y'all were you were you guys writing code for ie7 and ie8 jquery was a godsend okay jquery was amazing and so jquery will always hold an exceptionally special spot in my heart right because like you don't know what it was like managing the web before jquery you think tools hey you know what you do go yourself okay that was awful it was awful yeah jquery was just overused everything became a jquery plug-in i would agree with that but man jquery was an amazing amazing start to things query selector no fetch api remember ajax greg do you remember ajax dude you got you got dollar sign dot get and dot post how cool was that like the crap you'd have to do to do hd xml http request correctly never got it right i always had something wrong right like it was just so good okay don't don't dog on jquery don't dog on jquery it really doesn't deserve it it was just in a different time it was in a different time there was no such thing as acorn or a sprema there was no tokenizing i mean granted it's like looking back on it's a terrible idea to build a compiler in javascript for javascript i mean it's just it's insane but like looking back on it it's crazy how good the tool was for the environment you had to deal with no i haven't you know what i mean you just do it attraction over manipulating the dom that worked in any browser incredibly aggravating for me to have to do with all these cross browser issues all the time sure so i was constantly just i i wanted to develop my app in firefox to have it just work in internet explorer and like it just wasn't possible i wanted something that was nice and terse and short that just could let me write and get done ironically jquery's biggest blessing was also its biggest curse turns out relying on shared mutable state is usually a bad idea with jquery let's start it out as a simple way to update dom state i wanna i wanna watch that again is usually a bad idea with jquery what started out as a simple way to update dom state typically devolved into a mess of spaghetti-like mutations that were both hard to predict and keep track of if you weren't careful what jquery needed was something that encouraged a little more structure now it's time for you to jump into more backbone news little devils macbone.js invented the model view controller pattern that's a joke but it was the first popular javascript framework building for the web in just 2 000 lines of code backbone.js allowed you to decouple your application state from the dom instead of living in the dom backbone state lived inside of its model can i be real here i never learned how to use backbone i never learned how to use it this this is a little bit phallic looking i'd agree yeah i never i i just stick i just stuck with jquery because every time i started playing with backbone i really did not like it backhand dev here what the hell's backbone don't worry about it's confusing jquery is still my best language so easy to use it wait it's still my best okay now you're just saying craziness yeah now you can't stop saying the dick this is c equals equals three wait eight wait c equals three yeah i wrote three backwards i wrote three like this and what am i a child from there whenever a model changed all of you would re-render and that was it backbone's entire philosophy was to be as minimal and uninated welcome to costco so much stuff i love you thank you banana farm next time get a banana hammock do you have a hammock on that banana farm i've ruined the joke i ruined the joke minimal and unopinionated as possible so much so the default implementation of backbone's method responsible for rendering the view was a no-off that's just a fancy way of saying it was entirely up to you to implement your own view and templating strategy but you know what wasn't minimal and unopinated anyway so what is angularjs it's a it's it's it's what a web browser would have been we had missed go we had mishko on on on on this one he was a he was a great he was a great cricket i have on there i pushed on him pretty hard and he did a great job he was a really good person to have on twitch very i great a great interviewee is he wearing sandals yeah he's a developer in the early 2000s okay 2001 10. that's like that's developer where he took off his hoodie to look a little bit more professional angularjs is what you want to use when you have to sell rewrite the app within a year yeah head has been designed for web applications this introduction talk was the perfect representation of the angularjs project not because of what was said but because mishko did it entirely barefoot a perfect analogy for the fact that angularjs did whatever the [ __ ] it wanted the idea was simple what if html was more powerful what was that cursing thing yo dog button okay just just okay it's really good because that way you can say words like and guess what it sounds like i didn't say you know what i mean what did i just say there did i say i don't know i don't even know if i did with angularjs you got everything you'd ever want out of the box two-way data binding data filters routing controllers dependency injection templates literally a mini version of jquery angularjs changed the game because it was a true opinionated all-in-one framework for building web applications now you need to remember the environment we were in here too this was 2011 being a pure front-end developer was much more common than it is today the highly opinionated nature of angularjs was convenient for back-end developers who were given the unfortunate task of working on the front end this wasn't as uncommon as you might expect and it fueled angularjs's popularity the problem among others was that angularjs love two-way data binding eighty percent of what you do is just dom manipulation and 20 of what you're going to do is the actual interesting stuff of what the application does and so we want to get rid of this i assume that 80 has only gone upward since modern percent portion so how do we do that well as i said angular is kind of like a spreadsheet so if i start typing you know notice same exact behavior it updates immediately but notice how simple it is great data mining was its way of updating the view whenever the models go and updating the model whenever the view changed in theory this was nice because you didn't have to worry about doing manual dom manipulation yourself hey hey is somebody making fun of yahoo hey we don't make fun of yahoo 2011 days okay 2010 2009 yahoo was the tippity top the cream of the crop okay yahoo had all the best engineers we all know that okay you just don't know how good yahoo engineers were yahoo was the engineers of the valley if you worked at yahoo you knew everybody else welcome to costco i love you they had all the yahoos they had all of them they had every last one of them i wasn't alive in 2010 well i hate you practice well implicit state changes usually lead to code that is both hard to follow and hard to debug it also led to performance issues since angularjs had to constantly this is just the status phrase i've ever seen because it's 100 true yahoo was by far one of the most talented group of people that have ever ever been assembled that i have ever seen and yet somehow they produced a json yahoo mail and a search engine that was just rubble just pure rubble and they didn't do anything about they like avoided buying google for what 5 million or something like that oh my goodness definitely scan your app looking for state changes now though they were the most popular building for the web consisted of more than just jquery backbone and angular but regardless majority of these where's mustaches but if you could avoid the problem entirely you know i take no selfies should i start taking selfies just uploading selfies all the time because i i upload zero selfies currently yeah where's polymer polymer was like 2014 wasn't it i think my dad still has yahoo mail okay anna get with the times here we're not talking about it anymore the simplest way that we've found to to build views is to just basically avoid mutation altogether and you're thinking to yourself wait what you need to update things right what we found is that anytime your data changes if we could just blow away our view and just re-render the thing from scratch like that would be so much easier from a developer standpoint we want to be able to say okay anytime anything anything changes we're just going to start over we're just going to blow everything away and re-render from scratch but we want to do it in a way that's actually performant and actually provides a good user experience right so the solution that we came up with internally is called react our tagline here is a javascript library for building user interfaces one of the core innovations of react was that they made the view a function of your application state all you had to do was worry about how the state in your application this is a very confusing diagram changed and react would handle the rest and this is actually really simple because it's so declarative every place we display data is guaranteed to be up to date and we do it without magical data binding without dirty checking the model which can be expensive and of course this is a modern framework there's no more explicit dom operations and everything is declarative but this was really only half the picture the real innovation happened when you encapsulated this idea into a proper component-based api by doing so the same intuition you have about creating and composing together functions can directly apply to creating and composing components to truly embrace a component-based api react needed a way to allow you to describe what the ui for a component would look like from inside the component itself this is where the most initial hate for react came from and it had to do with reacts interpretation of the separation of concerns principle if you're not familiar separation of concerns is a software design principle for separating a computer program into distinct sections historically the way you did that on the web was to have your that was utterly if there was a way you could restate the word without using the word that was that was a pretty good one that was a pretty good one html separate from your css which was separate from your javascript but react had a different interpretation in reacts opinion anything that had to do with rendering the view whether that be state ui and in some cases even styling was part of its concern to accomplish this react native yeah that was i mean those were the those are really amazing times i i feel like i i feel like one of the hard parts about this video is that if you if you didn't grow up just using or if you didn't grow up discovering and and working on the web when jquery came out it's really hard to tell you how magical this experience was right like i i don't think people realize like how amazing this moment was when react really started coming out you know what i mean like i i really feel like there's just this huge miss here it's it's it's very hard i don't know it man i just remember using it and just i could not believe that that was a real piece of technology you know what i mean like that was amazing it was mad it was a massive transformation for anyone that does not know about that it's just like it's so hard to describe what a transformation it was for everyone that's getting into programming today like you don't have that you didn't have to do it the hard way which hey bless your heart you don't have to do it the hard way don't do it the hard way but doing it the hard way also makes you remember all those little steps in between that were just really incredible seeing things happen a thousand unix neckbeard echoed a scream of collective agony into the ether when people stopped using html as their view concern language this is true but i mean apps have to be sufficiently complicated makes it kind of hard still likes felt though or solid soliders felt i feel like i could get i feel like i could really love svelt i just need to use it more solid i feel like is is awesome i like solid solid feels like the right abstraction for my brain just does way to allow you to describe what the ui for a component would look like from inside the component okay hold on someone's telling me to check theo's chat log deal did i miss something sorry if i missed something this video is a banger i totally misread that you want me just to jump on your stream for a while you know it's not the worst idea i do think that that would be a funny thing you know i mean i think that would be pretty funny javascript went from having terrible products to having terrible developer tool chain yeah javascript is really they really unfortunately react also did something on accident here i know i try i actually have a couple really good ideas that i'm about to that i'm implementing that are just like banger ideas i'll i'll tell you about them but what react didn't mean to do here was they kicked off the javascript now needs c make phase of life before it was kind of like you know you could we all maybe like maybe some people used clojure closure or whatever is called google's like little compiler to build stuff and minify it but for the most part the web was a pretty shitty place and that's that but then out of nowhere the need came in and it's just like it just it just blew it up and then all of a sudden we have like c make and for a decade straight we've had seeming fight i feel like is one of the first times i've enjoyed the tooling in javascript more than i just want to cry vite is probably the first time that i'm i'm happy enough with it i still cannot use chart.js i cannot use it i have a i have a library that's not of type module right a package.json that does not have type module i will not say veet i've already we've already talked about this that's called an endonym i don't use endonyms i use x and ms okay you use you should use x and ms too and if anyone says veet i expect you from here on out to call it chile okay i you better not use the word china if you use the word china not their exonym or endoname i'm going to be very disa disappointed in you okay i'll invite you on that pronunciation yeah yeah i expect if you're gonna be really really you know you know a hawk on antonyms then you better get into it okay i don't i call it turkey okay i call it chili i call it brazil i'm not like oh hey how was your trip to brazil they'll be like what are you saying like did you go to chile and they'll be like shut up you're from montana stop it you're not gonna get in there and i'm gonna be like i'm getting deep in there boys what's that today like just shut up what about dino i just called dino but it probably should be deno i can't tell which one that is because it well because deno or dino i don't think is french i don't know what language it is i'd have to agree with you if the first line of their dogs didn't include the pronunciation guide yeah still again that's such a french thing to do that's like the most frenchy french thing ever describing us is the best that's what html is really good at but you can't mix html and javascript right if you pay attention to the api react is a javascript first paradigm and there's a lot of reasons for that is javascript is powerful it's flexible it's a language you already know you're able to represent interactions and logic that are just really hard to do in other more consistent languages like templating syntaxes a lot of other frameworks are kind of i mean i do agree i the the original times of react when you had to like build everything i mean jsx was definitely a much needed improvements and i am happy that they did that letting you define your entire ui in javascript but it did lead the cmake problem but there's one thing about javascript that ends up kind of like getting in the way as you build these really deeply nested components as you start paying attention to these braces here and you don't even know which one corresponds the other one so what we did at facebook is we addressed this problem by inventing a new syntax that's still every bit javascript but it's a little more familiar to somebody that has experience with templates or html you just say every bit javascript it's fundamentally not javascript that's okay that's what made it good that's also what made the cmake thing happen you heard it here first jsx was purely javascript why do i need a compiler well jsx different was it combined the power and expressiveness of javascript with the readability and accessibility of html i think jsx great abstraction i'm on think it was a great abstraction over relating to what's happening on the page i don't think that that's a bad take i think that's actually i think that's a pretty good take i was saying that back in like 2013 people were hating it i'm all about it i was all about it riding that if you were already comfortable with both javascript and html which you probably were if you were building web apps then you could get up to speed with jsx in a matter of minutes yes it was weird the non-js experts are crazy they did it at first i hate it but i love it once you used it in an actual application it became clear that react was awesome with their interpretation of the separation of concerns principle not only that but by embracing both jsx and reacts component based api i will say we did get into a hard part they keep showing that little the little the little squares coming together you need the half-assed ideas yeah yeah they they really are i agree with you judo on this one they are really they aren't describing the pain here well enough the thing that sucked about css and it still sucks to this day and people just this is the whole like fundamental argument of the tailwind thing which is that for anyone who's written enough css with more than one person two people and or had to come back to it in six months knows that writing j or css is horrifying and when react first came out and you could put css in javascript you just made more horrifying css that's all it was it was actually like the worst of every world ever was like that first little bit once you started using it you're just like not only do i not know what they mean i now have to go play the game of like find all the things that could now you have css important and javascript importante right like what the hell is going on in there it got so confusing it was so hard their interpretation of the separation of concerns principle not only that but by embracing both jsx and reacts component based api all of a sudden what used to require imperative operational light code could be abstracted behind a declarative api this not only enabled a better developer experience but also a vibrant ecosystem of third-party components so that was react in 2013. what's different today well from a philosophical perspective honestly not much you still create components which contain or receive everything they need to render the ui then you compose those components together to get your application though the api for doing this has changed over the years as javascript has matured fundamentally things are still the same what has changed though is how react is used from about 2014 to 2020 react was used usually in conjunction with react router to primarily create single page applications this was spa single page application for those that don't know there's a lot of acronyms so buckle in buckle up get ready sit down shut up open your ears okay react router isn't that the thing that believes that query parameters are fake news and should never be used for state am i correct on that one i make single spa applications yeah is that the one because if i remember correctly react router is the one that was just like who needs query parameters when you could have state parameters it was like [ __ ] that was terrible that was also a bad design decision because hydration was just like if you ever remember that scene in judge dread when the judge was handed a shotgun and asked to go bring law to the lawless like that was his retirement party was he got kicked out into the wasteland that's kind of what i imagine this whole phase was was just like you got handed a shotgun and now you need to go bring law to the lawless mostly fine but there were a few trade-offs first react isn't known for creating small bundle sizes this is especially problematic when you're creating a spa where nothing happens until the browser loads that beefy bundle next by the nature of a component-based what i don't okay i gotta re-listen to that because i was so distracted by the squirrel trying to tell me something that i i genuinely have no idea what just happened there but there were a few trade-offs first react isn't known for creating small bundle size six this is especially problematic when you're creating a spot where nothing happens that beefy bundle next by the nature of a component-based api since most components were in charge of the data they needed to render which included fetching that data if needed loading states were a prominent part of the react experience the solution ironically was and i'm probably going to get crap for this to treat react as more of a ui primitive than an application platform the project that pioneered this idea was next.js next js is a framework built on top of react this allows next to give you all of the benefits of react while also providing some valuable features like support for ssg and ssr smart bundling route prefetching and much more remix is another example by building on top of react remix let's react to what it's good at rendering ui while outsourcing what react isn't great at like global state management and data fetching to distributed edge servers state management in general is just really hard you know that's always a hard thing state management's really really hard regardless of how you feel about react there's no denying that it fundamentally changed how we build web applications and based on everything i'm seeing it shows no signs of slowing down hey go subscribe to the guy ui.dev great videos that's that's a lot of hard work right there yeah i mean i i that was good i think that that video is very very nice i wish i would have saw sponsored by herself that would have been so funny right at the end but real talk is a great video they i feel like it really does miss that whole feeling of of like what happened to the people living through that it kind of made it seem like it wasn't like it wasn't crazy i think that if you were to talk to any developer in this in that moment i i really do think you would get a much different response yeah twitter's a bad in general i would just not look on twitter for advice or ideas or things right you know twitter can sometimes amplify just the worst things right like i mean think about how many stupid things i've posted how many stupid things have i posted today just today right not all the things i say are great advice and so i think you got to be a little bit careful on what you get what you get out of there all right just a little careful just a little next.js seems super overrated i don't know i i actually haven't really used next.js so i i really can't give you solid advice on that one the ogs know what the story is and generally to it on twitter discord tick tock and instagram yeah they're not yeah so just remember like how awesome this experience was they missed a lot of the fun things about the story of react like remember the immutable days the set state days the the on mount the on mount gate the move to hooks like there was a lot of like moments in react that were the next greatest thing repetitively and and it just felt like oh mixins forgot mixins forgot higher order components remember remember debugging your first higher order component and you press f11 and then all you see is a 140 stack frames going to beautiful react and you go i don't know what happened what happened and you just have you just have no idea and then debugging is just super hard remember those days like they skipped over the whole fun time of higher order components higher order components were the future right it was the future yeah i would say that classes to hooks rebooted this is probably where we why react is still relevant today is because they moved away from classes and went to hooks i think hooks in general give an easier welcome to costco mapes and through mapes thank you very much let's go babes i appreciate it do you remember when debuggers generally did not understand how recursion into anonymous functions dude it was crazy talk nothing made any sense there were so many problems you just like it would just stop working debugging on ie anything was just like well i hope this break point gets hit i'm gonna console log and breakpoint because break points aren't reliable it was really hard those were hard days hello from brazil oh thank you good days though it was good days so i i feel like i really wish they would have talked more or it would have been so cool to see any interview with people being like excited about jquery besides for the inventor of jquery or people being really excited about reactions i like i there's just like this there was such optimism in those moments it's really hard to describe that feeling it was really really fun i really really loved it and man if i could go back like there's been few technologies that have made my life better than jquery real talk very few technologies have made my life better than jquery docker is like another one docker might be the next big one for those that haven't dockered because you barely know her you should give it a shot okay it's really really good welcome to costco thank you i love you it's just one of those moments where it's just like it's hard to describe how great those times were you know what i mean it's really hard yeah like docker was an amazing and amazing experience i have never i have never kubernetes so i can't tell you but i know that everyone that uses kubernetes and is good at it loves kubernetes so ansible is another thing that i've really appreciated what about vin though i'm three years colleen of docker i'm clean man