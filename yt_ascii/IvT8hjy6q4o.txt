hi everyone in the first episode i mentioned calculating the velocity required to shoot a ball through a hoop as an example of a problem that could be solved using the kinematic equations in this video we'll be working through an example of such a problem first solving it by hand and then testing our solution by programming a simulation of the problem in the unity game engine here's the exact problem we'll be solving p is a point that lies 66 meters to the right of and 9 meters up from point a g the acceleration due to gravity is negative' meters per second squared downwards if an object is launched from point a such that it reaches a maximum vertical displacement of 25 meters and passes through point p calculate the initial velocity with which the object was launched if you'd like to tackle this problem on your own now would be a good time to pause the video all right so since the kinematic equations deal specifically with motion in a straight line we're going to have to break this motion down into its vertical and horizontal components let's list what we know for each of these so for the upwards motion the displacement is h the acceleration is g and the final velocity at the top of the arc will be zero for the downwards motion the object moves from a height of h down to point p so since we're taking downward movement as being negative we can write the displacement as py minus h once again the only acceleration taking place is the acceleration due to gravity so the acceleration is simply g and at the top of the arc the initial velocity is of course zero finally for the horizontal motion we know only that the displacement is given by px and that since we're ignoring the effects of air resistance there is zero acceleration acting horizontally as you know we need three known values to be able to use the kinematic equations so we need to find one more piece of information about the horizontal motion the key here is to realize that the horizontal motion will take the same amount of time as the upwards motion plus the downwards motion so for the horizontal motion we can write time equals time up plus time down let's begin by writing an equation for our initial upwards velocity we'll want to start with a kinematic equation that contains initial velocity as well as our known variables displacement acceleration and final velocity equation five fits these criteria so let's take that and substitute in what we have listed here on the left so final velocity becomes zero acceleration becomes g and displacement becomes h we can rearrange to solve for initial velocity squared and then take the square root of both sides to arrive at an equation for initial upwards velocity let's then figure out the time of the upwards motion we need an equation that includes time as well as our known variables so we'll be using equation four once again i'll substitute in what we have listed here on the left displacement it becomes h final verse to become zero and acceleration becomes g i'll then rearrange to solve for x squared and take the square root of both sides you know the time of the downwards motion this time we'll be using equation three since we know the initial velocity not the final velocity we'll substitute in what we have listed here on the left so displacement becomes py minus h initial velocity becomes zero and acceleration becomes g then rearrange to solve for x squared and take the square root of both sides now that we have equations for time up and time down we can solve for the initial velocity of the horizontal motion our known variables here are displacement acceleration and time so we'll be using equation three again we can substitute in what we have listed here displacement becomes px time becomes time up plus time down and acceleration becomes zero we then rearrange to sulfa initial velocity and substitute in our expressions for time up and time down the initial horizontal velocity and the initial vertical velocity it's time to substitute in our actual values so substituting into the initial horizontal velocity equation we get a value of 22 and substituting into the initial upwards velocity equation we get a value of 30 thus the final answer to this problem is that the initial velocity required to shoot the ball through point p is 22 meters per second on the x-axis and 30 meters per second on the y-axis let's now program a simulation of this problem in the unity game engine okay so i have a simple scene therapy on unity with two sphere objects the one is called ball and it's got a rigidbody attached and the other is just the target object and as per the problem specifications it is 66 units to the right of the ball and nine units up from the ball let's now create a new c subscript we recall the something like ball launcher and we can open that up and in here we're going to want a reference to the rigidbody of the ball and a reference to the transform of the target object well then also want to be able to specify the maximum vertical displacement of the ball when it's launched which in the diagram i called h so i'll set that to 25 and then we also want a variable for the gravity which i'll set to negative' all right let's now create a method returning a vector three i'll call this calculate launch velocity and in here we're going to want to start off by calculating py which is the displacement of the ball from its initial position to the final position so you can say float this placement y is equal to target it of positioned of y minus bo dot position dot y then we can do the same thing for px except we're going to make it work in three dimensions so i'm say going to make this a vector three and i'll call it displacement x z this is equal to a new vector3 on the x-axis we have target position x minus bold of position dot x zero for the y axis and for the z axis of course just target position dot z minus bowl top position dot said all right so with this information we can now use the equations we figure out earlier to calculate the vertical and horizontal velocity let's start with vector three velocity y set this equal to vector three dot up x and now we'll use our equation so we'll say math f dot square root of negative two x gravity multiplied by h all right and now for our velocity on the x and z axes we can say vector three velocity x z it's equal to and once again referring to our equation px we change to displacement x edge so i'll write a displacement x z divided by and now let's open up some brackets and then in here we've got square root of negative two times h divided by gravity plus another square root this time it's two times and then in brackets we want py minus h or in our case displacement y minus h closed brackets and then divide that by gravity all right now we just need to say return velocity xz plus velocity y ok let's then create a void method called launch and india is simply set the balls velocity equal to the result of our calculator launch velocity method so we want the launch method to be called when the user presses a session key so inside of the update method we can say if input dot get key down i'll make it the space key then we will call the launch method now one problem is that as soon as we start again the ball is going to be falling down because of the rigid body attached to it but we don't actually want gravity to take effect until we launch the ball so in the start method let's say ball dot use gravity equals false and then right before we set the balls velocity we can say a ball daash use gravity equals true we're also of course going to want to set the gravity that the rigid board is going to use to our own gravity value over here so we can say physics dot gravity is equal to and also a vector three dot up multiplied by our gravity value let's also do a printout of the initial velocity so that we can see if what we calculated earlier was in fact correct so let's say print calculate launch velocity okay so in unity we're going to want a object to attach the ball launcher script to so i'll just create a new empty game object call this launcher and attach the ball launcher to that can then drag the ball into the ball slot and the target unbelievably into the target slot let's then press play and if we press the spacebar we should see this fly off and hit into the target object as you can see the printout verifies our solution of 22 on the x-axis and 30 on the y-axis all right two quick things that i want to mention first of all the h value of course has to be greater than the vertical displacement between the ball and the target you can see if we move this up too high and then try launch the ball we're going to get an invalid velocity assign attempt but if i say increase this to 50 now of course it will work just fine the second thing is if you want to have a positive gravity value so say set this to positive 25 in which case the h value needs to be below the target since the ball will be falling upwards let me set this to say negative 20 right off the bat this isn't actually going to work you can see that the velocity it gives us on the y-axis is positive whereas it should actually be launching the ball downwards we can fix this very easily if we just multiply our velocity on the y-axis by negative sign that sign with the g of the gravity so now if for whatever reason you want to a positive gravity value that is something that you can have a final thing i'd like to do is draw the predicted path of the ball in the scene view so in order to do that we'll need to sample the displacement of the ball at different moments in time and we can do this using our third equation but first we're going to need to figure out the overall flight time of the ball from the initial position to the target and of course we already have that it's this bit that we are dividing by to get our velocity exed so let's cut that out and just create a float here called time and then we can simply divide by time over here all right now get rid of this extra bracket so now we want this calculate launch velocity method to return not just velocity but the time as well so we're going to have to create a structure i'll call this something like launch dasha and this will contain a public read-only vector three the initial velocity as well as a public read-only float called the time to target all right they know what a constructor so in one a developer can just press command i to automatically generate one for these two members here and then we'll change it so that this method returns a launch data struct and it also changed the name to calculate launch data and then a st. you need to return a new launch data can pass in this as the initial velocity and then the time as well all right let's get rid of the printout we don't need that anymore and we'll be setting a bullet velocity equal to calculate launch data dot initial velocity all right let's then create a void method called draw path and in here we're going to want to get a launch data and set this equal to the result of calculate launch data then to draw this arc we're obviously need to split it up into smaller line segments so let's create an integer called resolution i'll set this to say 30 by default and then we'll want a for loop going from into i equals 1 to i less than or equal to resolution i plus plus so now if we write float simulation time is equal to i divided by castra float resolution multiplied by launch started up time to target this will now give us a variable that goes from 0 to the overall time so we can then say vector3 displacement and using the third equation we can say launch data dot initial velocity multiplied by our time plus gravity multiplied by x squared divided by 2 all right so then the actual position that the ball will be at at this moment lector three draw point will be equal to the bulls starting position so all the position plus its current displacement will then need to know the previous draw point so outside of the loop let's create vector three previous draw point and this will start at the bulls initial position and then we can say debug dot draw line from the previous draw point to the neutral point and i'll set the color to green and once we've done that we'll want to set the previous draw point equal to our current draw point so previous draw point equals draw point okay it should be as simple as that so let's just make a little pool over here public pool debug path and in the update method we can say if that is true then we are going to call our draw path method okay got a small error here gravity is a float and we're trying to add that to a vector3 so i'll have to change this to plus vector three up multiplied by gravity all right that error should disappear and if we now press play and go into the launcher and enable debug path we can see the path being drawn out we can move this around let me make my gravity negative again and then move the height up above the ball let's set it to 30 and then i'll bring this down a bit as well all right so you can see that it's working and if we press spacebar then it will follow that path and throughout the flight we'll keep updating the path to show the new path if we were to launch it again at that all right that is everything for this video so until next time cheers