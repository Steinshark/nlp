uh our talk is going to be on move semantics stood move and when should you move and when you should not so this talk is aimed mainly for beginners but yet i do find that many people struggle with move semantics so even though it started many years ago i mean in c plus plus 11 that we some call modern c plus plus it is with us for more than a decade and and i think that this is a good time to make sure that we get all the details so it is going to be a very interactive session i would like to get your answers on some of the questions and i will take questions during the talk itself so feel free to put questions in the chat or in the q a but mainly to answer our questions when they come on move semantics of course so let's present myself shortly i'm a lecturer at the academic college of tel aviv university a member of the israeli iso c plus plus national body co organizer of the core cpp conference and meetup group and develop developer advocate at incredibuild two slides on incredibuild we do build acceleration so if you are suffering from slow ci pipeline especially in c plus plus but also in your testing or other parts of your ci then talk with me my email appears at the last slide so if you want to get the email you would have to stay with me till the end incredible a very good product for being more efficient in your ci pipeline in the past year or so we invest much in automotive tools in the environment for automotive so accelerating the build pipeline for all developers work in automotive environment which is embedded linux distributions for embedded so again if you are there please feel free to speak with me the motivation so the motivation is to have more efficient code and i guess that we all know but if not this is the slide to start with that in some cases in c plus before we had move semantics we paid for redundant copies so suppose that we have some kind of a factory that can return good dealers and support that let's suppose that we have a function called create frightening godzilla and this function can create of course godzillas but it creates it locally so there is a godzilla created on the stack and the function returns it now when the function returns to godzilla we actually get a copy of the godzilla from the function and then we copy it into g1 and you can see that there are some redundant copies here so some of the copies would be alighted will be waived by the compiler but it might be still that we may get a copy by creating g1 from a temporary that was returned from the function and we may used the return value and like still its assets or maybe a better word or a nicer would move its assets so instead of taking the object that the function returns and copying maybe we can do something a bit more efficient we have the same issue on the third line when we call assignment and we get back a local a local variable that was returned from the function then we call the assignment which actually in in many cases do deep copy so allocate resources copy the resources from the right side but the right side is an object that is going to die and instead of taking copying its assets maybe we can just take them like move them so this is the motivation for move semantics the third option the third example here is calling pushback so when you use standard library containers you send something to the container anything that you send is going to be copied so this is how pushback works this is how insert works this is how the standard library containers work so when we send the godzilla here even though it is a temporary we may have a copy created on the call to pushback and again we want to avoid this copy so even if there is a need to create another object on the other side instead of copying the content of this sweetie we may be able just to take its values its content and avoid the deletion of this temporary so this is the idea behind move and then after we implement move we want to to ask did we actually call the move functions so we would not hear today implement the move constructor and the move assignment i assume that you saw it somewhere if not you should take it after the after this session but let's take an example suppose that i have a constructor for class a and the constructor is taking a string in this example by value and then i do take this thing that you got and copy it into a data member or another example i have a b class and in b is constructor i'm getting an r value of a string and then again i'm taking this string that we got as an argument and passing it to the data member name and the question to you here and again this is an interactive session so now it is your time is what would be called i mean a b what they call the copy constructor of string the move constructor of string is it the same case in both what is your answer you can post your answer in the chat okay maybe one more maybe someone doesn't think that it is c well we got all answers to see and and this is indeed the answer and the the reason is is that once you have a name and the name is not just because this is the name but the variable is identified by a name then it is considered to be an l value even if you got it as an r value or even if it is a local argument so even though we may move from it because we are the last that are going to use this variable okay we still we still copy in both cases so since we do copy in both cases it is not the best way to do so what we want to do is to use stood move in order to cast it to our value so we actually say okay compiler you just treat it as an l value because it has a name but i actually want to use it as an r value in order to move so let's call stood move and this is the use case for stood move this is the classical use case i mean i know that i can move but compiler you think otherwise because you see that i have a name and it might be that i would use it later on so i can tell the compiler that okay i want to treat this enough it as an r value which then would call the move constructor of string what is being called in the next one so i have a constructor for a i'm getting a constraint by ref then i do stood move which i should not i mean don't move it i mean the the user just sent you something that he may use later on on the caller side but you we we still did move which is not a good thing to do here but then the question is what would happen maybe you would move or maybe you would copy or the code will not compile or maybe it is compiler dependent what do you say please cast your answer please cast your votes on the chat a few more votes please if you're not sure take a guess okay thank you for the answers and the answer is copy and the reason that we would have copy here which is like a pure lack in a way it's not a pure luck these are the rules but i mean you did something wrong if you would move here if you would call the move constructive then you are in a travel and the reason that you would not call them call the move constructor is because name was const we got name as a const so we actually cast to our value but move preserves cv const volatile so it preserves the constness of the variable so we actually get there is a const r value and since we have a const our value cornstar value cannot be moved because in order to move you need to take the assets and put null ptr in pointers like make sure that the other one would not delete your assets after you took them so if you just want to remember the rules there is a very nice table that i took from stack overflow that shows who can go where so in our case in the previous slide we have a constant value because the casting to our value with std move preserves consciousness so we could have been in the fourth row which is a constant value case but usually this is not implemented i mean you couldn't actually move from a const so there isn't any real reason to implement the fourth and indeed string did not implement any constructor that gets something like that the move constructor signature resembles row number three so once you have a constal value for some reason then it is a fallback you you fall back to the copy constructor so this was the case there it doesn't mean that it is okay to move something that you are going to use in a moment or the user is going to use don't do that in some cases it may fail okay so you may want to make sure that if you move it is not only resource that might still be used later on so this is not a good thing but in some way if you say oh but i i saw that it works correctly i mean it didn't call move okay there is a reason because it was const okay so we got that is it valid to stood move an l value reference what do you say can we move l value reference and the answer are answers are it will not compile or maybe it compiles with the warning or maybe it will compile but it's undefined behavior or yes it can be legit in some cases what do you say again please cast your votes i see a lot of b's and c's a lot of b's and c's and a few d's so let's go for the answer and the answer is d yeah you can move from l value reference and in some cases you do like for example swap if you want to swap to variables you get them as l values and you steal from them you move from them y because once you know that lhv would not use its value i'm going to override its value so if you are going to override its value anyhow then you know i i can move from it because you would not use your value i'm going to override you i'm using you but i'm using you in order to override the old value so it is perfectly okay to move from an l value reference and the compiler is fine with that it is just a casting to our value the compiler says if you want it to be our value that's fine and then you actually move so this is equal to the move constructor and this is a call to the move assignment and we do that when we actually call swap by the way when you just move to c plus plus 11 from c plus plus o3 for example you instantly gain performance just but by this move because if you call swap so yours call to swap remains the same call to swap but you then call to the c plus plus 11 version of swap that does this magic of using move and if inside you just swapped two vectors then instead of swapping vectors by copying them you swap the vectors by moving them which is much more efficient and you get that by just you know moving from o3 to c plus 11 or later without changing anything in your code just by using stood swap and stood vector in their c plus plus 11 version let's have another one be cautious with passing by value so there is some recommendation saying that since c plus plus 11 it is okay to pass by value because you can then take what you passed and move it now in some cases it is okay but in most cases you can do it a bit more efficiently so the alternatives would be either to implement two functions one for the l value case and the other for the out value case or to have one using folding reference and in fact our didn't talk about that that the link to the talk is in the previous slide showing or discussing the advantages of having two functions or a single function with a folding reference using stood forward and studentfold would say okay if the folding reference here is an actual r value then pass it with stood move then do move this 240 is a conditional move but if i actually got here an l value because this double ref here is not an r value it's a folding reference it might be an l value it might be an r value so it serves both in a way and stood forward is a conditional move it would move if i actually was an r value so these two would behave a bit better and and this is what would happen if i only get it by value if you send idle value you pay for the copy because i insert okay you you maybe needed a copy but suppose that the item exists in the in the set oh if the item existed in the set i i do not need to copy because you know i just see that the key exists so i can just you know avoid the copy so the l value that gets in and the key exists in the set i can just avoid the copy if i get it as an l value and not by value so by value do the copy anyhow and in all other cases i just avoid that but if i get a const reference and you actually send an r value then i pay for the copy of the r value because the function cannot take the r value as an l value so you actually pay for a copy when you pass it on when you pass it on to the in call to insert okay when you call insert here so yeah i got the value but then i have to copy it inside so eventually if i just want to move the r value and to not do anything here both options would be the best you can see it in the code here what's wrong with this one we are going to the next example i have a plus operator and my plus operator gets two use links and i want to concatenate them so let's assume that they have some kind of continuation code here and at the end i just move back the local variable that i created and the question is what is wrong with this one and the answers are nothing the code is fine or you are returning a dangling reference or maybe there is a performance issue or the code doesn't compile so what do you say about this function again assume that there is some kind of a concatenation logic there and what would happen there is it okay or maybe something is not so good i will give you a few more seconds i know it is fast you have to think fast here so in three two one i will reveal my answer and the answer is that you have a dangling reference and the reason for the dangling reference is because you are returning a reference this is a returning a reference for something that is local i mean i do not copy i do not move i just say let's return the reference it's it's you know a local reference so i your tent is an r value but you cannot return a reference to a local so if you try to do things here a bit more efficient you are not doing that anyone wants to see the actual dangling reference we have a link to the code here so do you want to see the dangling reference happening or you okay let's let's take a look at the at the dangling reference i see the answers of the yes which are on the previous question of whether do you you see me let's take a look at the dangling reference so this is the example okay you see it here thank you for the reactions you should see my compiler explorer i guess let me see if this is the case maybe for that i have to stop here the presentation okay yeah you see the compiler explorer now and i have here string that i just created in order to create the plus operator okay so in order not to have to implement the entire logic of sling i just inherit from stute string and inside i implement the plus by calling the plus of my parent okay so i'm calling the plus of my parent here you can see that line 16 the plus operator and at line 17 the call to my parent and when i stood through and returned by our value actually the program crashes the program crashes i get the warning here in gcc that i'm trying to return a local variable as a reference but i do crash by the way you may crash or you may not crashing is not something that is guaranteed but you are doing something wrong it is undefined behavior to return a local by reference so this is the crashing example don't do that you would crash getting back to the slides so what's wrong here we try to amend the previous example we try to have it as okay so let's return by value i mean i understand i cannot return a reference to a local variable even not an r value reference to a local variable you should not do that by the way in the previous slide you should not do that and there is a link to stock overflow asking is there any case where you would return a link sorry uh r value reference and somebody there is answering the question in stock overflow most great answers for our value and move semantics questions in stack overflow are answered by domain itself our enant so if you go there there is an answer by iodine and the man behind the great idea of our value in roof semantics which is great even if you grow now and ask you questions about that and it is new it is not to duplicate you would get an answer most probably for from our dinant on the subject so you can later on browse this link i would of course put the slides in the proper link so again we amended the example and now we return by value what is wrong here and the answers are nothing the code is fine or we still return a dangling reference or there is a performance issues old code doesn't compile what do you say so the answer is a performance issue and their performance issue is a customization that avoids rvo or in our case nrvo return value optimization or named return value optimization the compiler in many cases is able to see that we return a local variable and do this is a rule of implicit move on so again let me separate it into two even if we do not do stood move there is an implicit move on a return of a local by value so the stood move is redundant even without that you are moving no need for stood move on a local variable that is returned by value it would happen anyhow but there might have been something which is even even better the compiler is able in some cases to see that you return a local variable that is not being used anymore and to say you know what i would create the local variable exactly where the return value should be created on the stack or exactly where somebody is taking it even better in in which case it would create the variable on the place where it is going to be used in such a way that it does not have to be moved so we actually have a better performance by even not moving just by it is called the return value optimization or named return value optimization if the variable has a name so alveo or nrvo are better let's take a look at the code so a very similar example to the one that we saw before but here i have by value we can type and i do stood move inside and i see that i i'm calling the move constructor on the return i'm calling the move constructor i'm calling the move constructor yeah because it's a move but if i would remove the move okay bear with me for a moment i'm removing the move okay there is no constructor i mean i mean you just got a low volt back without constructing i mean there isn't a call to the empty construct sorry to the constructor that creates the sling but then there isn't any constructor on the way out okay so you can see that once i remove the call to stood move on the local variable that is being returned by value i'm becoming a bit more efficient i mean move is quite cheap but there is something cheaper than cheap which is if you pay nothing nothing is usually better than just cheap so we would prefer having this over calling to the move so the answer is yeah there is a performance issue the proper way is not to move and to return by value so the reason implicit movement return of a local variable by value it should say here if it is returned by value and this would happen here unless the compilers say you know what i even not need any move i can just do rvo or nrvo let's take the next one what is wrong here i have a stack in the push function i get a t and i forward forward t inside the vector so the stack is implemented using a vector and since i use the vector i see a question there on the previous slide i would take it in the at the end maybe if we would have time the stack holds a vector and i push back the ford of t because it seems maybe i got it as a folding reference and the answers are the t w ref input is not a following reference thus it will be a compilation error or maybe twf is not affording reference thus we support only push of r values or push may add to the vector of a dangling reference maybe or d push may inefficiently copy when it can move an item into the vector what is the actual problem that we have in this code in the meantime i can answer stefan's question on the previous case if you do a stood move on a local variable returned by value then the compiler might maybe think oh there is a better way to do that but then it falls into the rules of i think the compiler is not allowed to avoid the casting or the call to the constructor so the rules of when the compiler is allowed to do rvo or nrvo may not allow the rvo or nrdo in the case that you called stood move because it's not the same type that you are returning so there is a need like to go to the constructor in order to construct to create the return value and then you go to the move constructor so it's it's not optimization i guess but more of that oblying obeying to the rules of of the standard so let's go back to this example and i see that some are amending their answers you can still do that that's fine and the actual answer is b the double ref ear is not folding reference even though it looks like that because it's a template but i already know t when i call push i mean t is not the direct template parameter of me is a template parameter of the stack so once t is already known then okay it's like oh it's int or it's a string i know what t is and then this is our value and if this is our value it means that we actually do not allow calling push with l value because l value cannot go into a function that expects an r value it is afraid of being you know moved from he yelled some rumor that if he goes there somebody can steal him so our value would get in but l values would not so the proper way is to just have them both or or if you do not want to have them both you can implement one with a real folding reference saying okay i'm a template function expecting some you and now this is a folding reference i may have some requirement on the you that it would be convertible to t otherwise i may get compilation or inside maybe i prefer it to be checked outside there would not be any other match so if this fails i would just not have any other pro possible function but still i may want to write that and then this pushback can use fold this is the second option of achieving the same let's go to the next one what is wrong here i have a stuck the same stack with a vector same thing now i mean the pop function and in the pop function i want to pop something and then again it get it back to the user and i get it back from the back function now with the back function just returns the value it doesn't erase it from the vector so i call back then i call pop back in order to erase it from the vector and then i return e and don't answer oh the stood move here is redundant and is pessimizing because you would not be able to do rvo no i'm not returning a local variable that is written by value this is a reference so if i would just return it as e there isn't any implicit move on a return of a local reference it's a reference so if you do want to move here in this example you should call move but still there is an issue and the answers are populated reference oh pop moves from a dangling reference code would be okay without the call to stood move or pope is an undefined behavior moving out from a vector is impossible oh the reference e is being invalidated once we call pop back now the differences are quite subtle i mean all answers almost say the same thing but it is not exactly the same thing there is a problem here what is the exact problem is the problem with the return value of pope or maybe b is a better answer try to pick the best answer i see there are a lot of these okay so the answer is indeed d and the the reason for d is when we call pop back the element that we got by reference is invalidated by now because pop back called it's distract or the destructor was called here then you cannot return it not with move and neither without move you just cannot return es is because e here even if you try to copy from it yeah which one i would return a copy or a move but a copy a move of of something that was invalidated in the previous statement is not something good don't do that so no no it's not the way to go now comes the question can we move back a value from a popped value from a vector what do you say can we do that is it possible to i mean we can copy out of the vector if i would just use instead of the reference here instead of the reference maybe it would be better but then if i remove the reference here then immediately here i'm copying like this call to back copies into e then maybe i move out but maybe is there a better way i can remove the ref ear but then still i'm copying i'm copying on the first line back without the ref would copy into e is there a better way yeah i see a proposal by kira thank you i would do that so we could say let's take the back and move it into e okay now i use move then pop back you can distract it and then when you return e here don't do stood move here comes again the rule saying do not call stood move on a local variable returned by value because it would be pessimization i mean it has implicit move anyhow but you still want the compiler to consider an rvo return value optimization or named return value optimization a side note implementing move for getting no except if you do implement your own move don't forget the no accept keyword on the move constructor there was a question is vac back already in our value so when we call back back do we get here and our value and the answer is no we get back an l value because the value is still alive in in it is more efficient today to take it as an l value this is how it is implemented by vector because vector can return it as an l value because back is not popped back i mean back is can i get the last one which is still in the vector yeah you can get it i will give you the back as an l value you can even change it and then you change the value inside the vector so it's it's in a way yeah it's like dereferencing the last one the i'll begin thank you kia again so let's go to the side note the side note said implementing move for getting for no accept is costly so if i have a move contractor and i forget to do the no except then if my object is sitting in a vector and the vector is being resized i need more capacity i i need a bigger size and the bigger size requires more capacity because they don't have enough capacity then i need to reallocate and then when you reallocate i mean the vector reallocates for you then if the elements are trivially copy bill if they are truly copyable then they're just copied with mem cpy mem copy but if they are not really copyable then there would be a loop and the loop would either move them or copy them but the move the the loop cannot move them if the move constructor is not saying that it will not throw an exception because the the vector is a bit frayed if i would move elements to the new allocation and one of the elements would throw an exception during this move then i'm with part of the elements in the new allocation and part of the elements still in the order location now i can propagate the exception to the user but the user would lose is all the location is old vector you would say okay no i never mind i would not push back i would not increase and then i say no no it's a bigger problem i just ruined your vector and then the user would be upset so instead of moving because i cannot move back i mean then an exception can be thrown again instead of moving i would copy this would this is what vector would do because when you copy an exception can be thrown also but then i still have all the old elements in the older location which is good i mean okay you can use it you can throw propagate the exception to the user but he still she still has the original vector so if there isn't any no except the com the vector is obliged it needs to copy if you are not sure you can actually try it try it with no except or without run it you would see in a loop i mean not in the loop the loop is in the vector you do a vector you create a vector you push back at a certain point the capacity is exhausted and if you would see a lot of calls to the copic constructor unless you had no except if you are not sure then there is a link down below here you can go to the link later on and check that that's true it would behave like that so don't forget the no except in case you actually implement your move constructor and this is also a good point to say implement the move constructor then consider defaulting or implementing the others i mean remember rule of zero or if i'm not in the rule of zero then think about the rule of five last one last one last chance to gain some points if you count your points on the questions are you ready what's wrong here there aren't this is an open question it's not a multiple choice there aren't any uh answers you have to think you may type in what you think okay there is a problem here something is not so good what is the problem so i see there a few answers that say the same thing in some kind of a different language but it is it is the same thing you cannot move from a resource twice once it was moved from you cannot move it again so here for some reason we think that calling the less than operator with temporaries might be more efficient i don't know maybe but then if you they call it with a stood move and it actually moves inside for some reason then it invalidates b and a and then when you actually want to return them then they might be invalidated i mean if you think that there is any reason to move to to do the casting to our value then it means that it might be that the other side the the less than operators that you are calling would take advantage of that so moving twice or moving multiple times the same resource is not a good thing i mean you can move and then override the value but you cannot move and then use the variable as is the value the variable is invalidated by now let's take a look let's take a look so in order to show the actual problem i have here the exact same code which says okay this is bad and i want to show you the result here my strength with world my strength with the low and the maximum is you can see it here on the right side an empty string how come the maximum is an empty string who stole my string what is happening here okay let's go up to see what happens in the less than operator i mean you called a less than operator something may happen there so for some reason somebody decided to implement the less than operator taking to our values these are 12 values and and and the implementer decided because it took to our values for some reason i mean it is the implemental choice to move the arguments into some temporaries and then to do the comparison on the temporaries nothing is wrong here i mean except for it is not so efficient but you know it's the implementer decision maybe there is some logic in that maybe it needs to do something with the temporaries etc so that is something that could have been done once you send me enough value yeah it could have been stolen it could have been moved from and and then when you go back a and b by now are moved from which means the the string is empty or it might be that this thing is not valid to to deal with at all i mean something that was moved from it doesn't necessarily mean that you can print it here string allows us to print because it just puts an empty sling into the moved from you shouldn't print it it could have just crash so the better way would be not to do that suppose that instead we do that just check and return so in in this case we copy we copy because we return a or b and here we do not have the implicit move on return because we got it as a reference there is an implicit move also on arguments but if there are arguments that we got by value but here we got something as a reference so since we got it as a reference we actually do want to move it out when we return so a better way might be to do this too forward on the entire expression which means okay do this and then when you return something fold it out which means okay if i got them as actual if if the expression here is something that t would accommodate as the t that i got is in our values and take the expression or what i return and do a casting to a value and here we see that we do call move let's go back to the slides i think that i have till the quarter the 15 minutes so it might be that i would have some time for questions because this was the last one but we have still a summary so to summarize there was a question in which cases could it be more efficient to compel two forwarded values i guess never i mean i don't see any logic in oh maybe the comparison would like to copy me or no the comparison you would usually take you as a construct so why should i bother falling i mean i would keep the forwarding for the return value in this case let's go to the summary don't stood move anything without thinking don't move local variables or in turn i mean local variables which are not references and you return them by value don't move something that is still in use don't move something twice or multiple times or in a loop on the other hand don't wave should move when needed you should still move any r value that has a name and you know you won't be using it anymore and thus can move from it so if it needs a move do the stood move and you can stood mobile values if the moved value would not be used like the example that we had in swap i mean don't be too shy of moving l values if you see that you are overriding the value oh so i can before overriding the value i need your value i shouldn't copy i can move the value from because i'm not using the value i just override it in a moment or i i know that the the one that sees the variable outside would see the new value that i'm just putting in like in swap and that brings me to the last slide you have my emails down below if you want to contact me on incredibuild build build acceleration you have my incredible email anything else on the presentation or anything you have also my gmail and i'm open for questions as long as we still have time and you have questions foreign thank you so much for that very interesting talk i haven't seen any questions in the q a yet but i will ask one of my own i'm not sure if i i have to go out briefly but what's the difference between stood move and stood forward okay so uh i i do see a question in the chat okay i would go to the question there in a moment the question on stood movement stood forward so when i get something that might be an l value or might be an r value and i want to move from it only if it was an r value you remember if i do a stood move on an l value it would cast it to another value so you should be very careful if you do not want to move an l value well we saw that in some cases you do want to move an l value then you just call stood move but suppose that i get something that can be an l value or can be an r value the case is template argument so i got a template argument a templated argument on a direct template parameter of my function with a double ref which means okay it's a folding reference it's not necessarily in our value and again we didn't discuss how come these folding reference came into the language it is a following reference it means that it may be an l value or an r value by the way it may even be a constable value reference or even a constant value reference so it can be all four in a templated argument t double ref in which case if i want to move only if it is an actual r value then i would use tilt forward that is in fact a conditional move a conditional move that checks is the t that you got is an r value in which case it was deduced as an r value i mean there is some magic inside the t would just be the type the double riff catches their value okay so i want it to be casted to our value but if i got it as an l value reference then the t would be deduced to the tl value reference and then stood forward would say no no we are not moving it there is no casting to our value you should b l value as we got you so stood forward should be used in templates not regularly and stood move may also be used in templates in case you want to move in any case i mean we had a swap swap use templates but it was a template on l value reference and we knew that we want to move in any case bottom line stood forward conditional move stood move i actually asked to do casting to our value no matter what okay we have we have two other questions in the live chat and i'll ask the first one and maybe decide wait maybe we won't have enough time to do the the second one but we can meet in the lounge afterwards but the first one was from stefan walter and he asks in which cases would be more efficient to compare the forwarded values i guess that's in in your your comparison function that you wrote yeah so i i do see both questions in the chat so for the first question i think that i relate i referenced that during the talk itself so i saw that and i said okay most probably there isn't any viable idea for forwarding into the call to the comparison so it was just you know a toy example you would not do that it was for saying don't do that and i don't see any reason most probably comparison is a non-modifying function it would just get you as a contrast so i would say just pass it as is and the other side would most probably get three test scores as for the other question regarding what is your take on passing stood function is arguments value contract or r value ref so i would take a step back and say okay maybe the signature of a function that expects a stood function should better be templated taking the function as a template argument in which case if i actually send a 0.02 function or a lambda or a function object it would not need to convert itself into a stood function it can just be passed as is and this is more efficient than creating the stood function now then if i need to forward the callable that i got i mean i got this function as a t double ref as a folding reference to the function which might be a lambda might be a pointer to a function etc if i just use it i will just use it but if i need to fold it i would use to forward in order to forward it the same way that i got it so getting a function usually i would like to get it as a folding reference by the way it is better than getting it as a const l value reference because if i get it as a constable value reference it might be that the function tries to modify its state and then i do not allow that and if i get it as a now value i actually allow all possible functions a const function and unconscious function etc we can play with this question i think if i can share the screen in the lounge i guess i can you can yes we'll do i think we we will call us a day there because we've been going for an hour and so let's meet in the track d lounge and thank you very much for your great talk thank you all and we will play in the lounge with the question of how would you pass a collarbel and we will see that passing it as an folding reference and folding it is the better choice let's do that there thank you all bye