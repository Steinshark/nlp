what does implementation actually mean well it's simply as you could say it's writing a program to do it but of course there's a lot of infrastructure behind that when you're devising a strategy or program to do it one of the first things you have to think about is first of all what's the logical progression of what i'm trying to do in the program and secondly what kind of data structures arrays structures whatever what infrastructure is needed to support all that data while you're processing it and different people can have different ideas about what the best implementation is i mean for example we've had recently from alex pinkney linked list this points to null because we're browsing nasa and then read a bit about nasa clicked on the neil armstrong article i mean some people are so mad about linked lists they'd use them for anything and so you say yes i implemented it with linked lists because it was right data structure for this particular thing and then once you've got the data stream you say ah but i felt that the best algorithm to use for this because it's so similar to what he did dijkstra's algorithm you know for finding your way from a to b as it were so the algorithm and the data structure in fact it's i think niklaus veer did a book once called algorithms plus data structures equals programs so it's down to saying what's your choice of both of these things justify why you did it that way and your implementation may differ from other people's implementations because they don't agree with you that that's the way to do it there's no absolute right and wrong one's always amazed that what seems to be absolutely the definitive way to do it very often it doesn't it's never proved completely wrong but there's always some little tweak that you can put on the end and you find this in things like coding theory you know we thought this was the best way to know somebody came up and said actually no the basis of what you've done is right but why not at the tail end do it this way because that makes no end of diff it's a bit in a way like saying newton was not wrong he just only told part of the story and einstein supplied the rest and that can so often happen in programming though very casually you do get a completely new idea comes along you say hey we could tear that up and do it this way and that's once in a very long time that is is there the equivalent sometimes of somebody turning up to a formula one track and a tractor yes it's going to go round the track but is it completely unsuitable to all the wonderful undergrad students of computer science out there forgive me yes certainly sometimes you look at programs that have been handed in and they really are tractors trying to compete with with mclaren formula one cars but yeah they get round but you know in a very non-optimal way but sometimes yeah sometimes you know one is amazed and delighted by the ingenuity that people can show in their choice of algorithms and data structures something really new and i mean back to the other video i've done about you know poetry to programming a lot of us feel and somebody actually said this was it tony hall dijkstra or don kenneth it is like writing a poem if you get your implementation your program to work and you think it's beautiful you get a great sense of satisfaction and somebody does somebody out there tell me who it is somebody does call their completed programs poems somebody won't know yeah i know the feeling touring was a shocker for wanting to do it even though it had been done before and finding it all out for himself because he didn't want the grooves in his mind to be polluted by knowing how other people had done it now that's fine but at the end when you've done it you've got to say has anybody done it differently before and you've then got to take stock turing was a bit of a shocker for doing it his way and not checking whether anybody had done it before if you remember he got his fellowship with tackling a problem and he didn't realize until he done it because he didn't want to look at how other people might have done it they gave him the fellowship anyway but he found it's been done four years earlier but actually his way had some nice little tweaks in it and his tutor said yeah do you know that's nice that little extra tweet you've done there it's worth it so implementation sometimes reinvent the wheel sometimes just go your own way yes that's right yeah two lambda expressions here both of which take two inputs x and y and one chooses the first one x and one chooses the second one y so fair enough what can we actually do with a designer a programming language that we could all use which became haskell