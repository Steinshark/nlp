so what we should really talk about next is how teams use git because that's the other function git protects your code from other people in a way right so it's designed to stop you know if say there's a company with like 100 developers in it and they're all working on different parts of the code base and that code base is stored in a git repository it's got to find a way to make sure that developer number 50 doesn't overwrite the code of developer number 12 when they're working on like the same area so this involves a mixture of things this involves get protecting code when you're trying to do get pushes and get commits but it also involves coordination between people and so one thing one of the main reasons you will see things like github and get labs being used is because those products those kinds of online websites provide you with lots of other features that are sort of added around git functionality to help you communicate with each other and coordinate so let's talk about first the get pushes and get commits and what would happen in practice so if you have two developers and they're both being tasked on fixing a bug at the same time and to fix that bug they both need to make a change to one particular file so maybe i'm editing files one two and four and he's editing files three five and four but we're both gonna edit file four at some point this becomes a situation that git needs to manage for you so if person one edits those three files including file four creates a git commit and pushes them to the server that's fine the server will accept it because there hasn't been any updates from anybody else it's fine with that the second person will create their git commits and then type in git push and then the server will say no you can't do that because from the last time you downloaded the latest version someone else has added more content so your version is out of date basically and it will force you to get yours up to date before it will let you push so this is a really handy feature it's protecting the code by stopping one person overwriting someone else so then what you have to do is type git pull if you're that second person there's actually you could do a couple of things you can do git fetch which downloads metadata about what has changed and then you can manually and carefully merge things or you can just type in git pull and it will pull down the latest version and it will try to automatically merge everything so for those separate files that you both edited and even if you're in one file and you edited different bits of the file git will say when you download the latest version and say great i can merge your changes with the latest version and just does it for you but if you both edit the same sort of area and get isn't sure it's very good then it says well okay i can't do that i'm not smart enough as a bit of software we need a human who is more smart to tell me what should have happened here so what it will do is it will add both of your lines of code into the file with like some metadata above it you see a bunch of side arrows and then the word head and then you see the first person's code and then you see like a separator in the middle and the second person code and then some other line arrows facing the other way to show the last the commit you've been making and it will say okay as a as a human you tell me which ones keep or if i should keep a bit of both you know figure it out intelligently and so your job then is to delete the metadata lines and delete the lines of code that don't need to be there anymore and do the merge cleverly as a human so that's it's sometimes a painful process it involves you communicating maybe with the other human to make sure that you know why did you do that why did i do this you know do we need to keep both that sort of thing and then once you've merged it you can then create a new commit and then you can push the server hoping that no one else has pushed something in the meantime but it's your job as a developer to make sure that you're going to push something that doesn't break other people and get helps you do that by saying no because i can imagine that if you're two developers working for say someone like youtube and you're both working on the code base for youtube servers if you need to sort of subtly adjust that that could affect nearly everybody working on all the different areas so yeah for sure in principle you're right that there's these bits that might get reused by lots of people in practice those bits would also be quite carefully protected either through procedure or through because one thing you can do is you can limit people to pulling areas of code you know or sub projects within git on the server so that not everybody is doing and some bits which are really crucial that are going to affect millions of users you know they will have serious protection lines and that's actually the best thing we should talk about next is the kind of process that teams go through to make sure they coordinate who's doing what so companies like github and gitlab they have added these extra features like milestones and issues issues are like tickets things that need doing and so what they'll say is okay here's a ticket that needs like a bug that needs fixing or a new feature we want to add and we'll assign it to a person or a set of people and those people will be responsible for writing the codes that will resolve that ticket so what they'll do in practice actually is kind of interesting the team is most likely to then create a temporary branch which we've talked about before with the idea of that ticket is this kind of his name because you could otherwise you'd have millions tickets millions of numbers so you name the branch after the kind of ticket you're trying to fix the issue you're trying to fix and then as a group you will work only on that version that's set aside so you're not disrupting the main version of your software you're not disrupting the main branch you're working on like this side developer branch just for this particular issue and then you will all kind of work on that finish it test it yourself properly and then you will push that code onto the server and then you will create what's called a merge request or a pull request depending on what whether you're using githubgitlabs they've got slightly different language what that really then says is we want a senior developer to check it's all okay and then merge it if it's fine and that's that job is normally reserved for someone who's they've got the authority to check something and check his goods and also to put it do something risky like merge it with the product you're about to release you know some more senior people may be given that job and so you can ask git lab or github to notify people that like a new set of code for an issue is ready to review and companies will have review processes that are they're required to do like someone will check that it meets legal standards someone will check that the code structure conforms to the company's standards and that sort of thing and people say yes this looks fine to me yes it's fine to me or no go back and do more and it creates a conversation it forces them to have a conversation and then only when they're happy with it the senior person will do the job of git merge and merge it into some sort of main main version of the software what you find in some companies they will have the main version which is like their release product and they'll have like a release candidate branch and the people who are doing their fixes are branching from that branch and so they make sure the side one works and then only then at some point the future this okay this is a release ready version that we have collectively built and then someone really important we'll carefully make that a public thing for someone to use so lots of companies will protect what's the main branch or protect different versions and they won't give permissions to types of users like developers to push directly to that because that will break it so we might break it they're really worried that people will just push a version and delete or you know delete something critical to the main version of the software so all these protections and processes are put in place to help teams collaborate but i mentioned earlier that sometimes they create like a beta version and they name the version with the git tag like a beta release ready or release candidate what they're doing is they're releasing the software to a set of authorized users who are able to download that beta version and then hopefully there's more expert sort of known beta users will say oh i found something that breaks and then let you know before you release it to the whole world and you can actually do that with chromium which we talked about before because on chromium you can download the latest beta version you can download the latest release candidates you can download the the final version they end up with yesterday so you can choose a developer to go and get these potentially buggy versions and help them to debug it by being part of a sort of smaller known community and all the people that don't know what beta is in practice they just download official releases that chrome tells them to update when they're told to update so it is handy having these kind of first set of people that will try something to show that it breaks which is normally like your own developer community and then a slightly broader community you're happy to have the beta version of and then when it's been tested by lots of people then it goes out because of course there are benefits in having the beta version it might have new features that you know nobody else has got right yeah and so like i know a lot of computer science students are always happy to get like the latest beta version and for a while i was subscribing to the latest release candidate of mac os x and that was fine until like the first release candidate for two weeks they broke apple mail you know and which you know if people were using this on test machines that wouldn't matter because i was using it on my main work machine and suddenly i couldn't use apple mail for two weeks but you know as a person who's happy to test release candidates or beta versions you expect that stuff maybe doesn't work entirely you get early access to features that's maybe exciting and probably you're technically confident enough to not worry if something breaks or you know delete your beta version and then download the proper version if you really need it so what happens is so we'd have to go over here across the distributed shared memory link to get the value and then we could bring the value back so rather than taking 100 nanoseconds just trying to get packets from one lab to another obviously by 1986 we've got lots of things in europe