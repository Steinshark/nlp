why should you use hyper medium the trade-off though is that a uniform interface degrades efficiency since information is transferred in a standardization a standardized form rather than one in which is specific to the application needs absolutely this is true the rest interface is designed to be efficient for large grain hypermedia data transfer optimized for the common case of the web but resulting in an interface that is not optimal for other forms of architectural interaction roy fielding okay okay i can buy this i can i mean in the sense that if you build output specifically for your needs right so if you went and you used a full binary format you did zero allocation architecture and you went all in on it you could make something that's extremely performance based like just based all around but it's only for your you know application that's like you know like you can imagine all game all games they don't just use json and transfer that over udp to trans you know to go through players position updates right that'd be crazy they you wouldn't be able to have a game if you're trying to do json encoding and decoding they're going to use something significantly more efficient but you'd make a trade-off when you do that right no matter what you use you always make a trade-off let's see hyper media is often significantly less complex than a spa approach would be for many problems okay reasonable i forgot to put this we are obviously fans of hyper media and think that it can address at least in part many of the problems that the web development world is facing today okay i agree hypermedia allows your application api to be much more aggressively refactored and optimized okay hypermedia takes the pressure off of adopting a particular server technology since you do not have extensive javascript front-end code base okay yes with hdmx and the additional ux possibilities that it gives you we believe that many modern web applications can be built using html and the hyper media paradigm so this is htmx in a nutshell that's what that's what it's doing so with that being said as with all technical choices there are trade-offs associated with hyper media in this article i'll give you some ways to think about it if hypermedia will be a good fit for your application or feature you are building this is beautiful by the way notice right here that there's no this is the way to build this the best it's just this is good i like it here are reasons you could like it but it may not be for you this is probably a much better way to sell any sort of framework ever right because that's not typically how you're sold on twitter typically how you're sold on twitter is if you're not using this you're falling behind if you're not doing this you're doing the wrong thing let's find out a transitional applications in hypermedia before we get into details of when hypermedia is a good choice we would like to clarify that adopting hypermedia is not an either or decision when building a web application for most singly of single page applications utilize hypermedia after all as a bootstrap mechanism to start the application absolutely it is talk have spas ruin the web rich harris gives us the term transitional applications that is the application that makes both hypermedia and non-hypermedia spot concepts oh i kind of want to watch that at some point that is applications that mix both up whoopsies we have responded to mr harris's talk in a more detail here oh we're gonna have to look at that but suffice to say we violently agree with him that a pragmatic transitional approach to the web development is the best you should use the rights tool for the particular job you are working on okay so again i am i'm on board with this i'm fully on board with this when let's see where we would like to disagree with mr harris is where the line is between features that can be implemented effectively in hypermedia and features that require more sophisticated client-side approach we feel that with hdmax hyper media can go much much further than many web developers today believe is possible and further that for many applications it can address many or all of our ux needs okay seems i mean seems a little crazy hypermedia is a good fit if if your ui is mostly text and images if the mother of all htmx demos david guilla guilo how do you say that name i'm just gonna say i'm gonna just call it gui lot david guilot of the context show how to replacing react with htmx leads to a 67 percent reduction in total code base along with numerous other eye-popping results as a result we would like to claim that every team moving from react to hdmax would experience these results the fact is that the context a web application is extremely amenable to the hyper media style so i guess i'd have to look at this here let me just pop this thing up really quickly is there like an example i guess i'd have to we'd have to watch this one we'll look at this djangocon the django yeah yeah right all right anyways all right if your ui is cruddy another area where hypermedia has a long track record of success is cruddy web applications in the ruby on rail style if your main application mechanic is showing forms and saving the forms into a database hyper media can work very well with hdmax it can be very smooth and non-constraints to a simple list view detailed view approach many server applications take okay if your ui is nested with updates mostly taking place in well-defined blocks okay one area where the hyper media can start going a little wobbly is when the you have a ui dependency that is that spans structural areas of the screen a good example of this and one that often comes up is when discussing the hyper media approach is the issue count number shown in the issues tab and github okay okay for a long time when you close an issue on github the issue count on the tab did not update properly github in general although not exclusive uses hyper media style application ah exclaims the spa enthusiasts see even github can't get this right well github fix the issue but it does not demonstrate a problem with a hypermedia approach how do you update how do you update disjoint parts of the ui cleanly htmx offers a few techniques for making this work and context a in their talks discuss handling the situation very cleanly using this approach okay because this is like a very typical problem which is that you just have various parts of your ui that when new data gets updated you could have multiple things updating at once i i i feel like i understand this i get this event approach hmm typically we would just use a bunch of json right you communicate up in json you get back json and we just go yeah let us grant that this is an area where hypermedia approach can get into trouble to avoid this problem one potential strategy is to co-locate dependent elements for a given resource within a given region or area of the screen in an application an example consider the contact application whose details for a screen for displaying and editing a contact has an area for basic contact information an area for contacts emails count blah blah an area for contact's phone number and the count of those phone numbers the ui could be laid out in the following manner okay that makes sense everything looks just fine in this scenario each subsection has its own dedicated hypermedia endpoints okay perfect the trick here is that the email and phone counts are co-located on the screen with their collection which allows you to target just that particular area for updating okay i mean i get what they're trying to say here which is just you could limit all like notice that all these changes are very limited to the region and so co-locating data to changes or co-locating screen real estate to changes i mean i i get the idea i don't know if i want to be constrained that way but i get the idea right i get the idea do i like it i don't know i don't know right an area effectively let's see each area effectively forms a sort of server-side component independently of the other areas on the screen they all are nested within a broader con contact detail user interface yeah so this is probably one thing that react server components really tries to highlight or do well is that each one of these allows you can just take this component and put it somewhere else and it just works and so how do you do that effectively in htmx i don't know yet i don't know yet but it seems kind of exciting a side note ui driven hypermedia apis note that our previous hypermedia api in our endpoints in this case is driven by the ui if we have a particular ui layout that we want to achieve and we adapt our api to that if the ui changed we would have no qualms with the complexity changing our api to satisfy the new requirements this is a unique aspect of developing with hyper medium and we discussed more detail here okay of course there may be ui requirements that do not allow for grouping of dependent elements in this manner and if this technique mentioned above aren't satisfactory then it may be time to consider an alternative approach okay perfect this is great right this is actually a really great argument for when you should and shouldn't use it if you need deep links and good first rendering performance a final area where hyper media outperforms the other options is when you need deep links that is links to your application that go beyond the landing page or when you need excellent first render performance since hypermedia's natural language of the web and since browsers are very good at rendering html given a url this approach is hard to beat for traditional web features such as these is this true do we have a yes or no on this one i can't tell it's hard to tell you know what i mean it's hard to tell if that's a yes or no i can't i mean one could i mean why does it have better performance couldn't technically couldn't react render the same thing where's the best place to subscribe if you're not on youtube hitting that subscribe button then go to twitch and drop that amazon prime for me prime who's on amazon but amazon won't let me legally recognize that i am amazon prime okay they don't like that because they already have an amazon prime so if i say them both then you know i might as well just call this a rust stream and get in trouble with the foundation she if your ui has many dynamic interdependencies as we discussed in the above section nested uis one area where hyper media can have trouble is when you let's see when there are many ui dependencies spread across your ui and you can't afford to update the whole ui this is what roy fielding was getting at in the quote at the top of the article the web was designed for large grain hypermedia data transfers not for a lot of small data exchanges particularly difficult for hyper media is to handle when these dependencies are dynamic that is they depend on information that cannot be determined at the server-side rendering a good example of this is something like a spreadsheet a user can enter an arbitrary function into a cell and introduce all sorts of dependencies on the screen on the fly okay i i would you know that makes sense i guess yeah that it probably makes more sense to have something else right however for many applications the edible row pattern is an acceptable alternative to a more general spreadsheet like behavior and this pattern does play well with hypermedia by isolating edits within a bounded area okay so in other words if your application has changes in which cause many disparate components to update then probably not good if you require offline functionality hyper media let's see hyper media distributed architecture leans heavily on the server side for rendering representations of resources when a server is down or unreachable the architecture will obviously have trouble it is possible to use service workers to handle offline requests although this is a complex option agreed completely and it is easy to detect when hyper media application is offline and show the offline message and many thick clients applications do as well absolutely i mean if you're offline and you try to go on twitter it's not like you're going to have a great experience all of a sudden just because they don't use hdmax right it doesn't make any sense with that but if your application requires full functionality in offline environment then hypermedia approach is not going to be acceptable okay okay if your ui state is updated extremely frequently another situation where hypermedia is not going to be a good approach is if your ui state is updated frequently a good example is an online game that needs to capture mouse movements putting a hypermedia network request in between a mouse move and a ui update will not work well and you would be far better using far better off writing your own client-side state management for this game and syncing with the server using a different technology absolutely so this makes sense but i mean this is in some sense stadia stadia did this so one could argue you could use this approach if you want stadia-like performance which is that good is that bad probably not what you're wanting if you're writing if you're writing a purely server-side rendered game you know that's a lot of effort and so i don't think i think if you're using html and javascript and you're writing a server-side game you're probably doing the wrong thing can we all argue that's probably you're probably using the wrong language at this point of course your game may also have a settings page and that settings page might be better done with hyper media than whatever solution you use at the core of your game there's nothing wrong with mixing approaches it's a transitional style yeah hms does have websocket support i'm curious about that i'll i'll investigate that maybe tonight who knows negative latency here we go let's go baby predictive mouse movement we should note however that this is typically easier to embed spa components within a large hypermedia architecture than vice versa isolated client components can communicate with broader hypermedia applications via events in a manner demonstrated on the drag and drop sortable js plus htmx example okay if your team is not on board the final reason not to choose hypermedia isn't technical but rather sociological currently hypermedia isn't simply isn't a favor in the web development many companies have adopted react as their standard library for building web applications many developers and consultants have a bet have bet their career on it many hiring managers have heard of never heard of hypermedia let alone htmx but put react on every job post out of habit it is much easier to hire for this is just a fantastic reason for what technologies you should choose to get hired invert this argument are you looking for a job what should you learn learn the thing that has the most applications out there if you see go java javascript react learn those be good at them that way you can get hired somewhere right people always forget this that everyone gives you the secret handshake out loud go to lead code learn how to invert a binary tree handshake slap those hands get everything done so you just nail it go to your friends have them ask you questions when was the last time you struggled at your job and tell us about it how did you resolve the issue you go in there and you give the star approach you give the situation you walk through everything and bam bam bam bam bam and you get hired because you choose all the right technologies and you practice how to interview and bam it's magic it's crazy how magical it is when you just look at the very not so secret secret handshake of getting hired and it works every time well this is frustrating it is a real phenomenon and should be born in mind with humility although kentucky was able to rewrite their application quickly and effectively in hdmax not all teams are as small agile and passionate nor are all applications such a slam dunks for this approach it may be better to adopt hyper media around the edges perhaps for internal tools first to prove its value before talking about it broader or taking a broader look at it first off i love this but then you might hate your react job yeah you might hate your reaction but guess what you get a react job okay you get a react job such that you can move into a better job you know how easy it is to talk to a recruiter when they go why are you trying to go to the back end and you can be like this well i've been doing react now for about a year and i find that the my favorite parts are actually when i'm developing the api or even going further in i love being able to reach into the back end and work on that side i do react because right now that is what my job is and i'm looking for something different i'm wishing to expand my skill set and i've been practicing it a whole bunch in my free time wow that sounds really good it sounds like you're a person who's a real go-getter and knows what you want geez we would like you on our team right like it's just like a slam dunk i love reaching into the back end who doesn't love which did right why speaking so fast i always speaks fast what are you talking about something is better than nothing yes you missed a dab opportunity i don't dab okay i don't dab the only kind of dab i'll do is a bill gates dab that's it i'll only bill gates dab i'll never do any other form of dabbing this is exactly what's happening to me yeah how do i leave embedded do exactly what we just said what to give you an example of two famous applications that we think could be implemented cleanly in hypermedia consider twitter and gmail this seems like a great hypermedia place like when i think about the application this seems fantastic both web applications are text and image heavy with coarse grain updates and thus would be quite amenable amenable amenable to a hyper media approach two famous examples of web applications that would not be amenable to hypermedia approaches are google sheets and google maps google sheets can have a large amount of states a lot large amounts of states within their interdependency between many cells making it untenable to issue a server request on every cell update google maps on the other hand responds rapidly to mouse movements and simply cannot afford a server round trip for every one of them both of these applications require much more sophisticated client setup than what hypermedia can provide of course the vast majority of web applications are nowhere near the scale and complexity of these examples and almost every web application even google sheets or google maps has parts where potentially the hypermedia approach would be better simpler faster cleaner i agree with all these isn't twitter already struggling with their server round trips they're they're struggling in different reasons the problem is is that when you lean super heavily into micro microservices there does come a point where you cross a boundary and you now have 400 microservices and every request requires you talking to like a hundred separate microservices there's just they're you you effectively create your own thundering herd right and it's just like that's all that's happening it's just thundering herd everywhere right so that i mean there's a real problem with that and it becomes really hard to understand what's happening i understand the benefits of microservices obviously i work at netflix and i've seen us be able to you know work around a lot of these issues but nonetheless it's not there is no good answer it sounds like bad micro service usage well that's the hard part how micro should your micro service be right how good or bad should it be i don't know how big how small how much did you put in one how monolith should you go i don't know that's it's hard right it's hard add your share of pain with it too yeah left pad as a surface absolutely having hyper media as a tool in your tool chest will improve your ability to address engineering problems as a web developer even if it doesn't become your favorite hammer there there is a good theoretical basis for this approach practical benefits of many application and it is with with the grain of many web of many of the web in the way other approaches are not and then ends with a nice haiku what does grug think grug wrote this this is grug you know that right grug is designed by the guy who also designed htmx think about it grug probably agrees is my guess yeah this was good this was actually really good i i really am i i really am excited about learning htmx enough because i keep having to build these tools and then it's just like hey can you build a simple ui for it and i find myself spending way too much time building a ui and a lot of it is just getting like state and updating and this and that and blah blah blah blah all correctly when now that i'm discovering if you will htmx a lot of it i'm like oh i could have done that oh i could have done that oh yeah that was probably what i wanted to do oh i like this too that's what i want to do right like a lot of it is actually pretty straightforward for me you know a lot of internal tools they're very very simple right you just like have a text box that you put a uuid in and then it gets a bunch of information about it right like internal tools are very very one-dimensional you put in a uuid you get out of csv that you can download you put in this you get out that right like they're very very very very simple oh no something i need to think about so guess what the name i don't have anything clever to say here so the name is the prime engine okay hey appreciate hey hey thank you very much for all those likes and subs i can't believe it we made it over a hundred thousand did you hear that did you hear that can you believe it can you can you believe it we actually like if you go to youtube.com the prime time ago like look at this look at that how did this happen 103 000. how the hell did that happen why are you guys watching this what are you doing with your life the name is a hundred and three thousand again