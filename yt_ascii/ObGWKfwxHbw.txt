in this video we're going to be talking about something that we can call funky string behavior and a lot of beginers are confused about this or they often get confused about this because strings can act in a quite funky way if you don't really know what they are and a lot of lessons kind of skip this part when it comes to creating strings we all know it's a data type but when you are learning python or any programming language a lot of teachers don't really explain what strings actually are they just say it's a data type that you can use in this way anyway if you've been programming for a long time this video probably won't teach you anything new but if you are quite new to programming or quite new to python i'm going to explain the funky behavior that comes with a string for example right here i'm performing a multiple assignment using a string i have a variable called a and a variable called b and i'm assigning it the string of one and two now when we print a and b it in the console we're going to get one and two back because one was assigned to a and two was assigned to b but what happens if we add a three here well first we're going to get some syntax highlighting that we're doing something funky but as soon as we try to run this we're going to get a value error too many values to unpack which is the expected behavior but this confuses a lot of beginners because by logic one should be assigned to a and then 2 three should be assigned to b but you're looking at this the wrong way essentially what we have here is an iterable and this is an iterable of let's say one two and three and as a tuple this doesn't make sense it's obvious that we have three values here and that we only assigned it to two if we want to make this work we either have to add a third variable name such as c or we're going to have to use the unpacking operator so we can assign the last two elements to be so it makes more sense when this is in an iterable such as a tuple or even a list and the reason multiple assignment works with a string is because a string is an iterable it is a string of letters or characters or actually can be numbers or whatever it's a string of things that we attach together and that means that we can use it as an iterable in many places such as if we were to print some text that would work just fine that doesn't demonstrate that it's un iterable but what does demonstrate that it is a chain of characters or a string of characters is that we can index it we can say let's print whatever is at the index of three and that's going to print t because it has indices and that also means that we can loop through it we can say four letter in text print the letter and i'm going to add an end with a full stop so just like that it's going to loop through each one of these as if it were an element in a list or an array and this also means means that we can create some other funky behavior and i don't recommend you actually do this in a real code base because it's kind of hard to read but what i'm going to show you right here is how you can use strings as key and value pairs so for this example i'm going to damn it is in japanese now so for this example i'm going to create a variable called t1 which will stand for tuple one and that's going to contain a1 and b2 so this is a tuple of two strings and with this we can actually print and convert this to a dictionary we can say dictionary of tal one and when we run this we're going to get a dictionary back with a as the key and one as the value then b is the key and two as the value because this follows the signature of a key and value pair while the code editor might complain that this doesn't make any sense it is perfectly acceptable because it is an iterable that has two elements just like a tuple or a list so the the dictionary method was able to convert that although for readability it would be much more preferable to use a tupal and we don't actually have to use these parentheses on the outside but this is just much more readable and dictionary won't complain because we're passing in the correct data type which are these intervals of a key and a value pa so if we were to run that we would also get a similar output now finally i want to stress that strings are immutable which means you cannot change them without creating a whole new variable and the way we can demonstrate this is by creating a variable called example which holds the value of text and by printing this value so we're going to print this value of example and the id of example and that's going to give us back the actual value with the id so that's the memory address for this variable now let's pretend we want to add something or we want to append a letter to our text so i'm going to close the terminal and i'm going to add add a few lines of code and all i'm adding here is that we're adding the string of one to our example so what we're going to do after is print whatever text we have and the id of it once again once we run that what you're going to notice is that we're going to have two completely ids and that's because once again strings are immutable anyway i hope that helped you understand a bit more regarding how strings work and why they have this funky behavior sometimes everything makes sense when you actually understand how they work and i just wanted to share this with you guys because when i make quizzes or when i share some content sometimes i see that there's a lot of confusion regarding this string behavior mostly with tuple unpacking or when i use it as a key value pair in a dictionary i see a lot of confusion regarding this subject i would love to hear what you think about all of this in the comment section down below whether you learned something new or whether you have something to add upon this subject but otherwise with all that being said thank thanks for watching and i'll see you in the next video by