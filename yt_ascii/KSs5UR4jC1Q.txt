the story of doom source doom 3 source code and how beautiful it is yes beautiful allow me to explain i've never once okay i have okay i'm guilty i'm guilty of it i've called i've seen code that i went this is beautiful code it's infrequent but it's it certainly happens okay it does happen after releasing my video game diad i took a little break and i read some books and watched some movies and i put off let's say i'd put off for too long i was working on the european version of diad but that time what is the european version of diad is that where they drink like tea they complain about they like sue people for privacy stuff what what what is it i don't know what is the european version they just work less hard got them got them first try american view coming in hot but that time was mostly waiting for feedback from sony quality assurance so i had a lot of free time after loafing around for a month or so i started to seriously consider what i was do going to do next i wanted to extract the reusable game engine parts of diad for a new project you can actually teabag people oo is that european is the teabagging a european approach to saying good game let's see when i originally started working on diad there was a very clean pretty functional game engine i created from an accumulation of years of working on other projects by the end of diad i had a hideous mess sounds like every beautiful piece of code i've ever started with honestly in the final six weeks of diet development i added over 13,000 lines of code main menu cc ballooned to 24,500 lines of code love it i love it menus are so effing hard menus are just the worst they're just forms it's forms all over again it's just forms all over again the once beautiful source code was a mess riddled with if defs gratuitous function pointers ugly inline sim dna asm code i learned a new term code entropy yes it's real i searched the internet for other projects that i could learn use to learn how to organize hundreds of thousands of lines of code and after looking through several large game engines i was pretty discouraged the diad source code wasn't actually that bad compared to everything else out there yeah inline simd in your menu is wild like what kind of what the hell is happening in your menu that you need simd going on like i thought menu systems were pretty simple like you're painting some squares with some with some textures on it waiting for input to change what's being focused okay maybe i was maybe i'm being ignorant here but in my head that is like what's happening you know what i mean unsatisfied i continued looking and found a very nice analysis of id software's doom 3 source code i spent a few days going through doom 3 source code and reading fa fabian's excellent article i retweeted all right check out the article and look hey sea mcgarth i'm actually going to go to shan mcgarth over here we're going to hit a little follow on this because you know i just love i just boom followed okay do the same thing it was the truth i've never really cared about source code before i don't really consider myself a programmer programs a video game arguably the hardest median to actually create in makes a successful video game i'm not really a progr programmer i'm good at it but for me it's just a means to an end going through doom 3 source code really made me appreciate good programmers to put things into perspective diad was 193,000 lines of code all c++ again not a programmer people not a programmer doom 3 has 61,000 quake 3 has 229 and quake 2 has 136 that puts diad somewhere between quake 2 and quake 3 these are large projects when i was asked to write this article i used to use it as an excuse to read more source code for from other games and to read about programming standards after days of research i was confused by my own tweet that started this whole thing what would look nic looking or beautiful or for that matter actually mean when referring to source code i asked some programmer friends what they thought that meant their answers were obvious but still worth stating i actually honestly don't know what goodlook source code is honestly i have no idea i think good-look source code changes and it's also like a measure of your understanding as well of the code right like if you understand understand the problem and then you understand how someone framed it and you're like oh that's good but you could look at a piece of code and you could see like man i don't understand the problem and i don't really understand what's going on here this is bad code like that might just be purely a perspective you know what i mean code should be locally coherent and single functioned one function should do exactly one thing i actually don't necessarily agree with this it should be clear about what's what it's doing local code should explain or at least hint at overall syst system design interesting code should be self-documenting comments should be avoided whenever possible love it absolutely love this last part honestly comments for the most part are really dumb unless if it's like a very special circumstance comment duplicate work when both writing and reading code if you need to comment something to make it understandable it should probably be written different i or rewritten i don't agree with that last take some things are just complicated right some things take you debugging for 10 hours to know this one special case and so that one special case should be like hey to save you 10 hours you should should know in this particular situation this thing happens and that's that right there's an itte 4 coding standard doc that i think is worth reading i follow most of the standards and i try to explain why they are good and why spec specifically they make doom 3 code so beautiful all right all right un unified parsing and lexical analysis one of the smartest things i've seen from doom is the generic use of lexical analyzer and parser all resource files are asky files with a unified syntax including scripts animation files config files etc everything is the same this allows one this allows all files to be read and processed by a single chunk of code the parser is particularly robust supporting major subsets of c++ by sticking to a unified parser and lex or all other components of the engine needn't worry about serializing data as there's already code for that this makes all other aspects of the code cleaner okay i mean i think that's just universally good advice if you're going to have some sort of scripting thing make the scripting thing good right this is lua in a nutshell right if you're going to use lu in your project it's probably better than you making up your own your own dsl right like when you use vimel vimel is a little crazy it's kind of wild it just is whereas you use lua and you're like not bad it's not bad right const and rigid parameters doom's code is fairly rigid although not rigid enough in my opinion with respect to const const serves several purposes which i believe too many programmers ignore my rule is everything should be always const unless it can't be i wish all variables in c+ le we con by default oh my goodness rust in the making dude he's getting rustifer you can see it doom almost always sticks to a no inout parameter policy meaning all parameters to a function are either input or output never both this makes it so much easier to understand what's happening with a variable when you pass it to a function for example by the way this statement right here is like javascript people don't understand right this is like you know the american mind can't comprehend this is the javascript mind cannot comprehend this statement which is that there's input and output variables passed to a function right like that's a real thing you do and you see a lot in c it's great it's beautiful right it's beautiful it is amazing and when you learn how to use it it's really useful right it's like a whole another way to solve things this function definition makes me happy just a few const and i know many things the id plane that gets past an argument will not be modified by this function i can safely use the plane after this function executes without checking for modifications of id plane yep i assume this is called id right right this is this is id the software studio so id plane that's what i just assume i know the epsilon won't be changed within the function although it could easily be copied to another value and scaled for instance but that would be counterproductive front back front on plane edges and back on place edges then now we're starting now we're getting into game programming are out out variables these will be written too the final con after the parameter list is my favorite it indicates id surface split won't modify the surface itself this is one of my favorite c++ features missing from other languages it allows me to do something like void f cons surface s okay yes again rust just saying he's ready okay this guy's ready desires it wants it can't wait to have it rust if split wasn't defined as split const this code would not compile now i know that whatever is called f won't modify the surface even if f passes the surface to another function or call some surface method con tells me a lot about the function it also hints at a larger system design simply by reading this function declaration i know surfaces can be split by a plane dynamically instead of modifying the surface it returns new surfaces front and back optionally front on plane edges and back on plain edges oh he called it back on place edges up here see i i was a little bit confused but okay we see it now we see it now okay yeah i mean this is good i mean this is obvious programming goodness is when you know a lot about a function the more you can know from the signature the better it is right that's why typescript is popular because you have the ability to read only if you need to you have the ability to define types i mean that's why dynamic typed languages are generally not considered that great is because i mean generally there are people that love typed untyped or secretly typed languages i call them secretly typed because they're still very much typed they're just hidden behind some opeg surface right dhh so i get that the const rule has and no input output parameter is probably the single most important thing in my eyes that separate good code from beautiful code okay i can buy this it makes the whole system easier to understand and easier to edit and refactor yeah agreed minimal comments this is a stylistic issue but one beautiful thing that doom usually does is not over comment i've seen way too much code that looks like this that looks like i find this extremely irritating i can't i can tell what this method does by its name if its function can't be inferred from its name its name should be changed if it does not if it does too much to describe in its name make it do less if it really can't be refactored and renamed to describe its single purpose then it's okay to comment i think programmers are taught in school that comments are good yes we are i was required to i was required to comment every line in every lab until i got out of school and during my time working on my own startup is where i learned i ain't going to comment okay future me's problem is remembering what i did and that's that i'm going to have to remember what i did and if i don't remember i hope i wrote it well enough which allowed me to come up with a good way to do what i call like the 75% rule program code 75% good enough first try and you can go very very far very fast now it's not the 100% solution it's not one that's going to be be infinitely scalable but it's pretty good it can get you far enough into the project to the point where refactoring makes sense you know what i mean comment every line of so dumb it absolutely is but it's school and they require that comments aren't bad unless they're totally let's see unless they're totally necessary and they're rarely necessary doom does a reasonable job at keeping comments to a minimum using id surface split example let's look at how it's commented split the surface into front and back surface the surface itself stays unchanged front and back plays are optionally stored indices in the to the edges that lay on the split plane return side question mark the first line is completely unnecessary agreed yes because it's part of the con definition it's already in the definition we learned all that information from the function definition the second and third lines are valuable we could infer the second line's properties but the comment removes potential ambiguity okay that's good i actually i actually really like this i really like this observation don't restate what types can state for you and i think this is a good lesson for all the all the ts andes out there all you ts andes in the functions you don't mutate variables maybe it's more and more valuable to start passing in readon you know what i mean maybe we should start maybe we should start making it normal to do read only regularly i don't but maybe that's a good idea is just start readon to like signify to other people the usage of this function could be good or object freeze. life no see i don't like that i don't like object freeze because that's actual programmatic differences whereas you're stating what a function will do this function will not edit this object coming in like to me that's a really great it's a it's it's an api design choice object. freeze is pre- api you pass that in and if you're and if you attempt to mutate the object i don't know if object. freeze throws does object. freeze throw i don't even know honestly i have no idea cons a equals a fu five uh object. freeze a i forget if it returns something does it return something b okay b. bar equals 5 see it b right it doesn't even tell you so it's silently it silently airs right and so by silently airing that's like the worst of all problems i i wouldn't want this right i i i don't want that i want code that i know what happens so by specifying on the api side whether or not it's going to change that's good right strict mode throws okay strict mode throws okay strict mode throws that's good but again that means every time you look up or mutate an object like i i don't really want to have to go through all this you know what i mean yuck design's better than than that right design it well don't you don't need to enforce it if it's designed well anyways the first line is completely unnecessary we learned all that information from the function definition the second and third lines are valuable we can infer the second line's properties but the comment removes potential ambiguity i already i actually completely read that already doom's code is for the most part judicial judicial it should be judicious judicial is a very different word here it's not judicial it's judicious with its comments which it makes it much easier to read i know this may be a style issue for some people but i definitely think there's a clear right way to do it for example what would happen if someone changed the function and removed the const at the end then surface could be changed from within the function and now the comment is out of sync with the code great example great example extraneous comments hurt the readability and accuracy of code thus making the code uglier spacing doom does not waste a vertical space i like this for the most part here's an example from t stencil arc chop winding i don't know this one i can read the entire algorithm on a fourth of my screen leaving the other three fours to understand where the block of code fits relative to its surrounding code i have seen too much code like this this is going to be another point that falls under style i programmed for for more than 10 years with the ladder style forcing myself to convert to a tighter way while working on a project about 6 years ago i'm glad i switched the ladder takes' lines compared to the 11 lines in the first that's nearly double the number of lines of code for the exact same functionality it means that the next chunk of code doesn't fit on the screen for me what what's the next chunk okay i see this argument this argument i really fall into like and i'm not sure i really don't know on this one because here's the deal is like i do like vertical spacing i like to separate out ideas what i mean by that is like i like a variable initialization section it just feels good for me to have like hey i'm going to make three variables and i'm going to have this is the like the thing and then i'm going to have like an action you know what i mean so here let's go over to let's go over to harpoon like i like this right i'm stating i'm stating some i'm stating some things with this right i'm stating here's me reassigning for defaults here's me creating new ones here's me leaving or doing whatever right i like doing things in chunks right i don't know why for me i like that i could tighten this all up i'm just not sure if it's really that great right like is that any better is that more readable probably just more of like a get used to it you know what i mean yeah we're missing the code blocks for sure some people like this i program with a lot of people that prefer this i kind of like i kind of like the spacing you know what i mean i've always been kind of a space andy now i could go this way versus the other way i you know i don't know which way i'm kind of like initializing and using it in one spot i never know the way to do things right for me vertical spacing i find more comfortable i don't know that code makes no sense without the previous loop chunk if i didn't resp respect vertical space their code would be too be much harder to read harder to write harder to maintain and less beautiful okay so we're going to say we disagree with this one generally here i'm going to take a little poll while i'll keep reading and we'll come back to that cuz i'm actually curious how people really feel about this another thing that it does that i believe believe is right and not a style issue is always use these things even when optional this okay i agree with this this is right this is right this is 100% right i think it's a crime to skip the brace brackets i've seen so much code like this i i wonder why we don't get to see the code we're missing the code so just deal with it the ugly code like you you know what he's putting in here it's an if statement or it's a for loop you know how they have you ever seen a for loop and then an if statement a for loop in the if statement oh you think it's dark readers oh how much do you want to bet right on that one i don't think it's dark readers here i'm going to refresh there you go hard refresh and all always right i don't think it's i don't think it's yeah we're just not seeing it we're just not i don't think it's dark raiders i think something else is going on here and i don't understand what it is but you get the idea it's like a it's like a for loop or an if statement with no with no squires on them you know that's ugly code it's the worse than putting braces on their own lines i couldn't find a single example in ids code where they skipped the braces admitting the optional braces makes parsing this wild block okay they're using a while block see that's crazy more timec consuming than it needs to be have you ever added a comment and you didn't realize someone didn't put in the scorely braces like i don't even read the squirly braces like they're they're they're like gone in my brain and i will put in a log line and then ruin the if statement because of it i absolutely hate that my goodness all right absolutely love that okay i love that one minimal templates it did a huge no no in the c++ world they rewrote all required stl functions i personally have lovehate relationship with stl in diad i used it in debug builds to manage dynamic resources in release i baked all the resources so they could be loaded as quickly as possible and don't use any stl functionality the stl is nice because it provides fast generic data structures it's bad because it can often be ugly and error prone for example let's look at vector t class let's say i wanted to iterate over each element dang it i this is where i really wish the code would actually load that doesn't simplify with c++ 11 so this must be doing that whole like iterator thing grab the iterator plus plus on the iterator const auto a colon you know the thing i i don't know personally i don't like to you the use of auto called it called the auto called the auto i think let's see it makes the code easier to write but harder to read i might come around to the usage of auto in the coming years but for now i think it's bad i actually agree with this auto is just not the same it doesn't feel the same it just never feels the same oh you're right maybe it is ad blocking here how do i turn this thing off i've never actually turned it off for a particular site there we go i refreshed the page and now taking literally forever well i mean this might be part of the problem okay see so this is part of the thing that like maybe we don't want that i still didn't get those code blocks though i'm still not getting the code blocks and i'm just getting way more ads okay i'm getting all the ads none of the code blocks okay gee that's going to be typed correctly by every programmer every every time again i we don't even know what they're saying but i think i can i think i believe what he's trying to say yeah i got to get that i got to get that i got to get that block back up baby baby let's get that block back up all right all right that's going to be typed correctly by every programmer every time it it removes all ambiguity they rolled their own generic containers string classes etc they wrote them much less generic than the stl classes presumably to make them easier to understand they're minimally templated and use it specific memory allocators stl code is so littered with template nonsense that is impossible to read fair fair take have you ever tried to walk through some of the stuff it's very difficult to understand c++ code can quickly get unruly and ugly without diligence on the part of the programmers to see how bad things can get check out the stl source code microsoft's and gcc's man just just calling out gcc dude stl is crazy okay stl is is difficult prime why is everyone call me prime oh the way back machine has the code thank you everybody thank you i wonder why the code got deleted because i actually really wanted to see this yeah see again oh interesting choice of spacing look at the spacing it's actually on the almond style versus whatever style i forgot what it is but i actually so i actually prefer this code versus this code yeah that's fine i prefer my braces i prefer my squirly braces on the on the right side you're welcome by the way yeah wordpress must have got pronouned right yeah i mean this is obviously crazy if you program like like that you should be shot in the ankle of course okay like like like a wing clip so it hurts you have to go get some stitches but like you're not dead or anything okay i'm not saying you should be murdered okay in game also so you can just use like a tarov healing pack and you're back in the game okay now you're going to drink a little bit of condensed milk you're dead okay everybody knows that you're dead oh you got some condensed milk you're dead i love that by the way the fact that you drink condensed milk and you die it's just so good anyways all right minimal templates blah blah blah blah all right yeah look this auto it a vector begin it does not equal vector type n i++ like i've always hated that i think this is a disaster luckily they made it nicer and this also like any of like i love i i literally have right there effective c++ third edition i have a tour of c++ as well i have you know like i understand where they were going and there's a lot of beauty with the ideas of making things iterators and how you get them and how you delete from them and all that it's absolutely wonderful but at the exact same time it is a huge pain in the ass okay c++ you know it really is you know what i mean like i the way back machine totally sucks what is this why do i got to have the code why do i have to keepy okay and dang it i'm i think i'm using firefox still which makes it virtually impossible for me to edit because i don't know how to use their their thing okay i don't even know how to use their thing okay what is this what is this section can i just delete you and create is there a delete is there not a delete tell me there's not okay there is a delete okay that didn't work didn't work didn't work okay what are you are you floating or something let me guess you're you're floating you're floating aren't you so we're gonna go like this style equals float left space enter damn it's not floating i thought it was floating i thought we had a float right there i thought we had a float i thought we had something there okay i thought we had something there but we don't i'm not really sure skill issues i it's skill issues import bang import nope import did not work here i'll go like this we'll just keep it easy margin margin left is negative 100 pixels damn it that didn't work either i dude i thought i had it is it styles not style is that my problem is it styles no i don't know what it is okay whatever we're going back to i'm going to go right to here and i'm going to bring over chad okay because this is the only way i can do this okay i can't i can't read stuff that's way to the to this side okay it's weird css am i right am i right am i right i'm not trying anymore okay see c++ code can get quit unruly and ugly without diligence on the part of the programmers to see how bad things can get check out the stl source code microsoft's gcc's blah blah we already read all this all right take a look at andre's alexandr scu's loki library or the boost libraries these are written by some of the best c++ programmers in the world and great care was taken to make them as beautiful as possible they're still ugly and basically unreadable id solves this problem by simply not making things overly generic they have a hashtable and a hash index class hashtable forces the type to be const charar the hash index is an int toint pair this is considered poor c++ practice they should have been should had a single hashtable class and written partial specialization for key type conar star and fully specialized int int what it it does it is completely correct and makes their code much more beautiful it's also specific implementation specific stuff can be really beautiful you know it can be really easy to understand i do agree with that it' be considered by many to be good practice to create specific computation class as a parameter to the hash table like so okay beautiful compute hash this could be specialized for a particular type okay beautiful wonderful then you could pass the compute hash for type as the hash computer for the hash table classic the hash computer for the hash table is going to be the compute hash for type this is similar how i did it it seems smart but boy is it ugly what if there are more optional template parameters maybe memory allocator maybe a debug tracer you'd have a definition like this absolutely this is real this is real i've seen this stuff i've seen it it's not awesome i not happy when i see that stuff did i just see a study time follow or study time raid hey thank you study time for that beautiful raid thank you appreciate that what a wonderful day so good what does this even mean i don't even know there's too many parameters at this point i can't even find the method name without some aggressive syntax highlighting it's in conceivable that there' be more definition code than body code this is clearly not easy to read thus not beautiful i actually fully agree with this statement if your function definition requires more code than the code of the body something something has gone off the rails you you are clean coding you're clean coding hard you know what i mean you've got to the point where or you've probably you've probably left the path of of good programming at this point study time says study s says you're a good human being how do you defend yourself this reminds me of the quote in gladiator where where maximus says to proximo proximo you're in danger of becoming a good man don't worry i will disappoint you i am a piece of it's okay don't worry i i i am completely i i have complete understanding of who i am not good okay this is not something you want to write home about all right anyways i've seen other engines manage to this mess by offloading the template argument specification to a myriad of type defs i've seen this too it's crazy it's even worse yes cuz the the the definition jumping is insane it might make local code easier to understand but it creates another layer of disconnect between local code and overarching system logic making the code not a hint towards system design which is not beautiful i love the use of beautiful here proximo oh dude isn't it so good you can't be prime home i don't even sure what that means for example let's say there was code okay yeah and this i actually agree i feel like i mean i guess in some sense i do like t type defs they can be really nice and go i know that you can use a type def and then attach methods to it so if you have it even though it's like an int you can attach nice little methods to it like there is some really good stuff but i also understand that like when you overly typed def things out in this case it's just really difficult to understand right it is just really difficult to understand it's possible that the string hash tables memory allocator string allocator won't contribute to the global memory which would cause you which would cause you confusion you'd have to back trace through the code to find out where string hash table is actually a type def of a mess of templates parse through the template code and find out that it's a different allocator and find that allocator and blah blah blah it's ugly agreed doom does it does the complete wrong thing according to c common c++ logic it writes things as non-generic as possible using generics only when it makes sense let's go john carac i love this i love this take this is so good what does doom hash table do when it needs to generate a hash of something it calls id stir get hash because the only type of key it accepts is a con char star what would happen if it needs a different key my guess is that they template the key and just force it to call key. has and have the compiler enforce all the key types have the in get has method awesome this is so good remnants of c i don't know how much of the ids original programming team is with the company anymore but john carac at least comes from a c background all id games before quake 3 were written in c i find many c++ programmers without a strong c background over c++ eyes their code the previous template example was just one case three other examples that i can find are the use of get set methods string streams string streams are crazy crazy string streams excessive operator overloading okay who doesn't like a good old fashioned operator overloading right who doesn't love a good oldfashioned operator overloading it is very it is very judicial in all these cases this is a waste of lines of code and reading time it takes longer to write it and read it comparatively class type public var what if you're often increasing var by some number n versus get set var yeah i mean this is just java bleeding into it right this is just java bleeding into the situation you know what i mean everyone's kind of seen this being too dogmatic on any language is bad i blame this on schools not on the language fair this is fair this is definitely the java side of things trying to be like you need getters and setters they're the best don't worry it'll be inline blah blah blah blah it's just like yeah but it's super annoying you know what i mean if see if you have no friends no operator overloading for you just use a struck dude no one forbids it yeah hi mom the first example is much easier to read and write it doesn't it it doesn't use string streams and string streams probably contain the most extreme bastardization of operator overloads i've ever seen the double this direction i do agree i do i've loed this for so long i've loathed it i don't like it that's ugly it does it does have strong advantages you can define the equivalent of java two string method per class without touching the classes v tables but the syntax is offensive and i' choose not to use it choosing to use print f instead of string streams can make their code easier to read and thus i think it's correct decision the only down downside of print f is when you get like slightly incorrect type passing into print f and you can cause some weird teas right print f i actually don't mind this oh look at that beautiful hdmx horse look at that look at that beautiful one i teach all my junior devs on how to write guard clauses they make the code so much readable yeah i do like a good early return is nice let's see syntax for some classes operators would be this would be ridiculous too look at that dude so disgusting why would you do that side note john carac has stated that static analysis tools revealed that their common bug was incorrect parameter matching in print f it's like i predicted the future there i wonder if they changed the string streams in rage because of this gcc and cang both find print f parameter matching errors with w wall so you don't need expressive static analysis tools to find these errors another thing that makes doom code beautiful is the minimal use of operator overloads operator overloading is a very nice feature of c++ it allows you to do things like this yes you can do it in rust too i'm not sure i actually think c++ might have it slightly nicer rust is a little weird you implement these traits and there's like a lot of cases to it like doing the ad one you know you really got to do all these different cases because of how you know the borrow checker works and who owns who and do you produce a new version or not it's like there's a lot to that you know what i mean there is a lot to that without overloading these operations would be more timec consuming to write and pars doom steps here i've seen code that doesn't i've seen code that will operate overload operate the percent to mean dot product vers or operate vector star vector to do piece-wise vector multiplication it doesn't make sense or it doesn't make sense to make the star operator for cross product because that only exists in 3d what if you wanted to do 2d v times 2d v what should it do what about a 40 or higher it's minimal operator overloading that leaves no ambiguity to the read of the code fair one of the biggest things i've learned from doom code was was a simple style change i used to use classes that look like this oh oh baby look at that code oh look at that code and what they're doing is this what according to what okay like i think john karmac is one of the greatest programmers of all time and i have absolute commanding respect for carac but whatever this style of code is it honestly makes me want a vame this is crazy this is crazy looking what am i supposed to do with this i love the fact that the two different constructors here they don't h you know you don't define return types on constructors so it's just like empty space like there's so much stuff this crazy man let john cook i don't know i don't think i should let john cook on this one oh gosh i don't like that i i don't dislike that just because i write hascal dude your phrase your statement makes me think you write hascal you know how many knots are in that phrase crazy okay crazy that bro hitting tabs so many tabs dude crazy they rarely put the inline functions inside the class definition the only time i've seen it to where the code is written on the same line as the function declaration it seems this practice is not the norm and is probably frowned upon this method of organizing class definitions makes it extremely easy to parse i don't know i don't like anything where i have to like be really precise on looking back and forth right i don't want to have like because imagine a wall of definitions it's hard it's hard since you'd have to retype a bunch of information to find the class yeah inline string yeah yeah yeah yeah yeah yeah i'm against all extra typing there's literally extra typing right here i need to get stuff done as fast as possible but this is one situation where i think a little extra okay he owned me he saw me coming and owned me okay owned me on this one very very much so let's see a little extra typing when defining the class more than pays for itself each time the class definition needs to be parsed by a programmer there are several other s stylistic examples provided in doom 3 coding standards and that contribute to the beauty of doom source code method names i think doom's method names rules are lacking i personally enforced the rule that all method names should begin with a verb unless they can't get so i actually let's see for example is much better so i actually i prefer the other way at this point i think this is i actually prefer just the thing as opposed to the get part i don't like the whole enforcing of a verb anymore i used to be that way but it makes more sense to be able to just be like length then get length i don't i just don't think you need that i don't think you're getting anything extra out of this yes it's beautiful i disagree with this point i like all the other points but i disagree with that point i was really excited to write this article because it gave me an extra excuse to think about what beautiful cod is i still don't think i know and maybe it's entirely subjective i would probably i'd say the only time i've truly been struck by like beautiful code is no matter how ugly it is it's when someone solves a problem so different than me it feels like i've unlocked a new way to solve a problem in my brain has anyone ever had that it's like where you see something done so different than how you would approach it that you're just like oh wow right like it just it it's so cool it's such a great experience it's magical and it doesn't happen very often but when you do see it it's prasing like that's the first time prasing has ever been found and recorded and it's true and it feels good and i've been chasing the high ever since i love reading code just in case i find another one of these right you never know when you're going to have your next prasm but when you do so good why not a lot of stylistic choices are definit definitely my personal preferences and i'm sure other programmers will have different opinions i think the choice of what style to use is up to whoever has to read and write the code but i certainly think it's something worth thinking about absolutely here let's go down to the john carac one because i actually do want to see this john carac one here let's go back to the previous one because i had it all i had it out and i really did want to see this one all right john carac a few comments in some ways i still think quake 3 code is cleaner as a fin evolution of my c style rather than my first iteration of my c++ style but it may be more of a factor of the smaller total line count or the fact that i haven't really looked at it in a decade i do think good c++ is better than good c from a readability standpoint all other things being equal i sort of meandered into c++ with doom 3 i was originally experienced c programmer with oop background from next objective c ooh sorry so i just started writing c++ without any proper study of usage and idiom in retrospect i very much wish i had read effective c++ sitting right there on my counter let's go and some other material a couple of the other programmers had prior c++ experience but they most mostly followed the stylistic choices i set i mistrusted templates for many years and i still use them with restraint but i eventually decided i liked strong typing more than i disliked weird code in headers the debate on stdl is still going on here at id and gets a little spirited back when doom 3 started using stl was almost certainly not a good call but reasonable arguments can be made for today even in games okay base take by john i am a full const nazi nowadays that's not a phrase bingo c 2023 not a phrase that was going to come out of my mouth but it just did and i ched any programmer that doesn't const every variable and parameter that can be a major evolution that is still going on for me is towards a more functional programming style which involves unlearning a lot of old habits and breaking away from o directions this is great honestly this is great i think that it's you know what i completely agree with mr carac on this statement you really should strive to make everything constant as you can it just reduces the amount of potential change but it's not really about mutation that i'm worried about it's about sending a signal to other people that what you have designed these points change you can tell somebody where change occurs and that's one thing i really do like about rust is that it's const as basic definition mute as what you have to opt into and i truly do think that that is the best or one of the best features of rust is mute as an extra word you have to add on const should have always been the default he actually had a post in 2014 he actually became more and more of a functional programmer yeah i know i saw that one that that good performance sucks when you forget it yeah yeah i mean there's there's all these other reasons why you should use const but i think for the biggest one is that you you get to understand it you know what i mean you get to look at it and see it and i think that that right there is more beneficial than anything else all right hey sometimes you have a non-con parameter in an interface and one in implementation it can be constant that style the check style complains that it's not const i hate that yeah that's crazy i don't know how to i don't know how to deal with that one but that is kind of rough the name is the beautiful koden