in today's tutorial we're going to be talking about arrays what is an array you ask well according to the internet an array is a data structure consisting of a collection of elements it's not very descriptive so we're going to go a little deeper into it an array in c is used to store a contiguous grouping of variables that are the same size and the same type so the best way to think about an array and see is a group of boxes like this the boxes are contiguous which means there's no gaps in between them you know they're all next to each other with no holes and the boxes are all the same size and the same type so the first one is the same size as the last one so for example if i needed to make a variable in c to track a long list of integers the way that i would do this is to make an integer array so the way that i would do this is i would type int which is the type held by the array then the name of the array as tracked by the compiler and then a hard open parenthesis and that notation with the hard parentheses means that we're dealing with an array type and then inside of that parentheses is the number of elements you want in your array right and this is when you're doing statically sized allocations you finish with a card close parentheses and then a semicolon and what the compiler does with that is it creates room on the stack for six integers so that's gonna be four per integer times 6 so 24 bytes to hold whatever numbers you want so in this case i did 66 44 etc so let's actually get into the code and write some code that creates statically and dynamically sized arrays in c let's get into it right now all right so we're in linux we got our coding environment all set up here if you haven't seen my tutorials on writing your first hello world program in c or the pointer tutorial that i didn't see you're going to be a little lost in the syntax here but if you have seen those or you're a little experienced and see stick around we're going to dive into arrays right now so we're going to talk about two different kinds of array allocations the first we're going to do is a statically sized array allocation and statically sized means you say how big the array is going to be in your code directly and that gets determined at compile time which means every time your program runs the array is that big there's no way to change it the way we do that is just like what we saw before where we say int my array a hard parenthesis the number of elements you want in it and a closed parenthesis semicolon and that's it we can actually compile our code here we'll do gcc gcc tac o arrays and i named my code arrays.c then we can run our code and we get no compile errors that's not very cool right we allocated to some array we don't do anything with it so let's actually print off our array the way we're going to do that is with a for loop so we'll create a for loop by doing the following syntax we'll declare a counter variable with i and we'll start our four syntax so four i is equal to zero while i is less than five and five is the number of elements in our array right i plus plus and then for every iteration of that loop we're going to print something we're gonna do percent d colon percent d backslash n that first d is going to be our counter just so we know where in the array we are and then we're going to introduce some new syntax here which is called an array access when we want to access into our array we type the name of the array and then similar to the declaration we access with hard parentheses and then the element number we want to access and in this case we want to access the i-th element and what that'll do is as i increases right i starts at zero access to zero with element i goes up to one two three four you access the first second third fourth element and so on and you close your your your statement here and then you end your your for loop then if we compile this and we run it we should get so the first two makes sense but the second two or the second three i guess are actually kind of a a programming mistake we didn't specify a default value for our array what actually happens here is we get somewhat of a memory leak we can actually change this value to percent p for pointer recompile it and run it and these values are actually i'm not sure what they are either way the memory that we aren't supposed to see we the user weren't meant to be revealed to in our program we'll put this back to a d but the way that we clean this up is we can specify a default value for our array with the following syntax we say int my array of 5 is equal to curly bracket the default value which you always want to set yourself to zero unless you have another predetermined default value and then you close your parentheses we're gonna save it and run it good now instead of getting memory leaked so we shouldn't have seen in the first place we get all this clean zero values for our brand new variable right now to set the variable to things we can do my array of one is equal to let's see one three three seven we could do my array of four is equal to 4096 4096. we're just going to copy this code and put it back here remember not to grab the declaration of i because you don't want to declare it twice the compiler will yell at you and then we're going to compile and run our code so this is the first iteration right we set the variable equal to zero or we set the array equal to zero and then in the second iteration we set some variables equal to some stuff and we printed them pretty cool right not that hard so like i said before this is a statically sized array allocation every time you run this program know what no matter what the array will always be five no matter what you do you can't change it at runtime because it happens in the creation of the stack for the program another way to do array allocations will delete everything but us viewing the array is with this syntax so instead of this where you use your hard parentheses and that sets the size we're going to set the size of the array a different way we're going to make an int pointer called my array and it's going to be equal to and this brick is a little different instead of pulling memory from the stack which is what our previous allocation did we're going to pull memory from the heap and the heap allows us to do things dynamically where we can change the number of elements we have in our array at a given time during run time as composed to at compile time malik so what malloc does and we have to make sure we include standard lib.h which is where mala comes from malik is memory alec and this is actually the function in lib c that asks the memory allocator hey can we have some memory we need to do things with it and the argument to malik is the amount of memory you would like to allocate right and the amount of member we want to allocate when we let's let's make this a five element int array the amount of memory you need to allocate you need to specify in bytes the question then becomes how many bytes is a five element integer array well some basic math will tell us that it's the size of and that's actually a macro in c size of an int times the number of elements we want right because if int has some size and in this case it's actually four four times five so 20 bytes is the amount of bytes we need to ask from the allocator to create our array and so this will work and give us back memory and then the access and the setting and the reading of the array is actually the exact same syntax this is actually an array d reference of a pointer but you can do that on pointers the same way you can do it on arrays so this will have the exact same effect and we can compile it and run it oh i forgot to declare i unfortunate so we'll clear this cool so we have allocated some memory from the heap how we have a pointer to it and then we treat that pointer like an array and now we're reading the memory that lives in the heap which is actually set by default well at this point in our program to zero right pretty cool and we'll do the same thing as before just prove to you that accesses and sets are the same with dynamically allocated arrays all right so we'll set some values copy the code and we'll compile and run and we'll view it like that anyway guys that's about all i have for a raise thanks for watching i hope you learned something if you did drop a like hit subscribe i put out content like this every week and keep on learning have a good night bye