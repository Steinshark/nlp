hi everyone in this episode we're going to be adding a third-person camera so how i'd like it to work is that when the character is standing still moving the mouse will just orbit the camera around the player and then if you move the character will move off in the direction of the camera and while you're moving if you move the camera then that will actually rotate the character as well by the way i'm going to be referring to the cameras rotation on the x-axis as its pitch and the rotation on the y-axis as you're all right before we begin here i'd just like to do a tiny bit of housekeeping go to delete the backup blend file that was created and just create a new folder for the character we restore the characters materials the model itself and the animator controller all in that one folder and then you recreate a new folder for scripts and put the player controller script in there and one last folder for the scenes and going to put the scene file in there alright to open up the scripts folder and in here go to create a new c shop script called maybe a third-person camera and we can open that up and at the top let's create two floats one for the yaw and one for the pitch you can delete the start method we don't need that so it frame we want to update the gyro and the pitch based on the mouse input so we can say your plus equals input dot get access and this is the horizontal mouse movement so mouse x and then for pitch we're actually going to be subtracting unless of course want the y-axis to be inverted we're subtracting input dot get access mouse y alright we'll probably want to multiply this by some sensitivity factor so let's create a public float mouse sensitivity i'll give that a default value of say 10 and we can just multiply the both of these mouse sensitivity and our sensitivity all right so then let's create a vector three called target rotation so the pitch is the x-axis and the gyro is the y-axis we'll worry about applying some smoothing in a moment for now let's just directly set transformed euler angles to the target rotation let's save this and find our camera just apply the third person scripture that let's press play so we can move the mouse up and down and left and right and that seems to work okay let's now get it actually rotating around a childhood object so we can create a public transform and call this the target and we also want to know how far the camera should be from the target so let's create a public float i call this distance from target so that equal to two by default so here we can simply say transform dot position is equal to the targets position minus our own forage direction multiplied by the distance that we want to maintain from the target okay so let's say that the character is the targets we'll drag that into the slot there and press play so we're now moving around the target we're currently rotating around his feet so let's actually create a empty child of our character and we'll call this the target look cool something to that effect and let's place this higher up around the shoulders or the chest and apply that instead as the target all right so if we try this out now it should behave a little better one problem of course is that we can currently tumble right over the players head and also go through the ground so we need to put some clamp on the minimum and maximum pitch so let's look at our camera quickly probably if we just rotate this around the x-axis we don't want it to be able to go lower than maybe negative 40 degrees and probably not much higher than say 85 degrees let's go with that for now so in the script yo we can either create to public floats called pitchman and pitch max what i usually prefer to do a four-way sort of min/max variable is just to use a vector - you can call this pitch min max and then obviously just the x value is the min value and then the y value is the max value set this equal to a new vector - so for the minimum that'll be negative 40 and the maximum 85 okay so now we just need to clamp our actual pitch variable so pitch is equal to mass f clamp we pass in our pitch value and then the min value which is of course pitch min max dot x and then our max value pitch min max but why okay let's save that and give it a quick try so now we're clamped at 85 degrees and at negative 40 degrees great so let's quickly add some smoothing to the look rotation so like last episode we're going to be using the smooth damp method for our smoothing except instead of using it for a simple float variable we're going to be using it for a vector3 so let's create a public float i'll call this rotation smooth time i'm just going to set this to about 1.2 and then we're also going to need a vector three for our rotation smooth velocity and one more vector three for our current rotation all right so now we're going to say current rotation is equal to vector 3 dot smooth damp and we'll pass in the current rotation our target will be what we have here for target rotation so we can just copy that our current velocity so we say ref rotation smooth velocity and then our rotation smooth time all right we can get rid of this line we no longer need that and we'll set transform that euler angles to current rotation so let's save that and give it a try ok so that is a lot of smoothing happening at the moment actually meant to set this to 0.12 so now we can see this is a lot more responsive very nice just going to quickly update this in the script to what i wanted it to be 0.12 all right so the last thing i want to do in the camera script for now is just change this update method to be a later update method which just means it will be called after all the other update methods and the advantage of that is that the targets position will definitely have been set so then we'll be setting the cameras position to the correct location all right let's save that and then i would like to go into the player controller and just get the player rotating with the camera so let's get a reference to the camera transform called camera t so in the start method here we can say camera t is equal to camera main dot transform and now where we're resetting our target rotation we're just going to add on to that camera t dot euler angles dot y alright so you can save and in unity i'm just gonna make my game window a little bit bigger and let's grab the main camera and just bring it closer to the to the player by default and i'd also like to turn down the sensitivity a little bit if we set that to 5 all right so as long as we're not moving the camera is just going to orbit the player but as soon as we start moving the player will move off in the direction of the camera and while we're moving if we move the camera the player will rotate with the camera all right that's nice it might be a good idea to have the ability to lock and hide the cursor when we enter play mode otherwise when we're trying to look around the mouse's of going off the edge of the screen here so we're going to come back to the camera script and add a public pool called lock cursor and just bring our start method back so if lock cursor then we'll say cursor dot lock state is equal to cursor lock mode locked and cursor dot visible is equal to false so now if we go into the camera and enable that bool and enter play mode the cursor is now locked in hidden and we can get it back by pressing escape and then we just have to move the mouse out of the game window and it will appear all right so that's everything for now until next episode cheers