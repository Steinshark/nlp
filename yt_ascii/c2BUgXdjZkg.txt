hi everyone chunks of different levels of detail currently don't line up perfectly leaving us with these ugly gaps in the terrain so here are two chunks of different levels of detail which do line up correctly what i've done is made a high resolution border around the lower resolution chunk if all chunks have these high resolution borders then chunks of all different levels of detail will be able to line up without any gaps now the solution isn't quite perfect it looks good for the detailed chunks but on the very low detail end of the spectrum we do get some fairly visible seams between the chunks however these low detail chunks should always be too far away from the player for it to really be noticeable okay so first of all a recap of how the mesh is constructed we start with a number called our supported chunk size for this example i'm going to use a size of 12 the factors of this number in this case 1 2 3 4 6 and 12 are the different values we can use as our mesh simplification increment so if we add one to the supported chunk size we get our number of vertices per line in this case 13 so here is a 13x13 map of vertices using our different mesh simplification increments we can construct measures of different levels of detail for this example i'll use a mesh simplification increment of four these violet colored points which represent the vertices actually included in the final mesh will be referred to as the main vertices while the ones which are skipped over will be called the skipped vertices now in order to correctly calculate the normals of the vertices around the edge of the mesh we had to add in an extra ring of vertices which aren't included in the final mesh i'll be referring to these vertices as the out of mesh vertices this adds an extra two vertices per line so our number of vertices per line is increased to supported chunk size + three okay so this is where things stand at the moment now our latest addition will be another extra ring of vertices between the main vertices and the out of mesh vertices called the mesh edge vertices this once again increases our number of vertices per line by two making it supported chunk size + 5 now these mesh edge vertices have to connect to these green vertices to form triangles some of these green vertices are actually main vertices so i'll turn those back to violet the ones which are still green will be called the edge connection vertices okay so in unity i'm going to open up the mesh generator script and quickly head into mesh settings so we saw that the number of vertices per line should be equal to the supported chunk size + 5 so i'll change this to plus 5 and save that and then back in the mesh generator we've currently got all of these different size variables boarded size mesh size mesh size unsimplified it's a bit confusing so i'm just going to delete all of these and just replace it with a single integer called numver per line which is just going to be an easier way of accessing mesh settings. numver per line then i'd also like to rename mesh simplification increment just to something that's a bit less of a mouthful i'm going to call it the skip increment all right and i'm going to take these two top left variables and store them in a single vector 2 called top left this will be equal to a new vector 2 at negative 1 on the x- axis one on the y axis but then multiplied by mesh settings do mesh world size over two all right we can then delete this vertices per line calculation and just pass in num verts per line over here then the vertex indices map should have a size of numver per line by numver per line then we also want to replace boarded size with nonvert per line in these two loops as well as the two loops down here and this is border vertex calculation all right so is border vertex is going to be renamed to is out of mesh vertex and consequently border vertex index will instead be the out of mesh vertex index okay so if the current vertex is an out of mesh vertex then we assign the out of mesh vertex index to the vertex indices map otherwise we're assigning the mesh vertex index to the vertex indices map but we don't want to assign that if this is in fact a skipped vertex so we need to be able to calculate whether or not it's a skipped vertex so if we look at this diagram we can see that all of the skipped vertices lie in the area where x is greater than 2 and x is less than the number of vertices per line minus 3 and y is greater than 2 and y is less than the number of vertices per line minus 3 but now of course we have to be careful to not include the main vertices which also lie in this area the main vertices are all at points where x- 2 is evenly divisible by the skip increment as is y - 2 the minus 2 of course just being because the main vertices only start where x is equal to 2 or y is equal to 2 okay so to exclude these main vertices we can just say and either xus 2 mod the skip increment is not equal to z or y - 2 mod the skip increment is not equal to zero so if either of those are not evenly divisible by skip increment then it's a main vertex and this will be set to false so we can now just change this else statement to else if it's not a skipped vertex only then do we assign the mesh vertex index now because we've got these mesh edge vertices and edge connection vertices if we increase y and x by the skip increment we're going to skip right over those so we now need to just say y gets incremented by one each time as does x and that should be the case in these two loops down here as well y ++ and x++ okay now i'm just going to copy this is skipped vertex pool from a pure and and paste that in and i'll just say only bother to do any of this if it's not a skipped vertex all right so i'll just enclose all of this in there now we're going to have to change our percent calculation if we just consider this on the x- axis we want percent to be equal to zero when x is equal to 1 because that's where the actual mesh starts and we want percent to be equal to 1 when x is equal to the number of veres per line minus 2 because that's when our actual mesh ends so we can set this equal to a new vector 2 with x -1 on the x axis and y - one on the y ais and then divide this by the number of vertices per line minus 3 and that will get us what we want i'm then going to delete this vertex position line and i'm just going to make a vector 2 called vertex position 2d and this is equal to top left plus the percent multiplied by mesh settings do mesh world size and then when we're adding the vertex we can say new vector 3 vertex position 2d dox comma height comma vertex position 2d do y all right now i'd like to get some information about what what type of vertex we're currently dealing with so if we just copy this from here we can tell if it's an out of mesh vertex then i also want to know if it's a mesh edge vertex so it would be a mesh edge vertex if y was equal to 1 or y was equal to the number of vertices per line minus 2 or x was equal to 1 or x was equal to the number of vertices per line - 2 then we have to exclude the out of mesh vertices by saying and not is out of mesh vertex all right less than create a bu is main vertex so it's a main vertex if x - 2 is evenly divisible by the skip increment and y - 2 is also evenly divisible ible by the skip increment and it's also not an out of mesh vertex and it's not a mesh edge vertex okay finally we want to know if it's a edge connection vertex so this can only be the case if y is equal to 2 or y is equal to the number of vertices per line minus 3 or x x is equal to 2 or x is equal to the number of vertices per line minus 3 but then we also have to exclude the out of mesh vertices as well as the mesh edge vertices and finally the main vertices okay so with that done we now need to consider when we want to add triangles so here's a diagram showing all the triangles we want to create now triangles are created from the top left down so for example if we're at vertex 0 comma 0 we'll be making these two triangles here highlighted in white are now all the vertices at which we want to create triangles we don't want to create triangles at the vertices along the bottommost row or along the rightmost column and we also don't want to create triangles at the edge connection vertices of the second row or the second column all right so over here i'm going to create a pool called create triangle and this is going to be true first of all only if we're not in the bottommost row or the rightmost column so if x is less than the number of vertices per line minus one and y is less than number of vertices per line minus one then we also need to make sure that either this is not an edge connection vertex or if it is an edge connection vert then we need to be sure that it's not any of the ones in the second row or the second column so we'll add here that x is not equal to 2 and y is not equal to two okay then we can say if create triangle we'll go ahead and create the triangle but we need to make sure that the triangle that we create is the correct size so in this diagram the white vertices are where we want to create our large simplified triangles so these are all of the main vertices except for where x is equal to the number of vertices per line minus 3 and the same for y okay so over here i'm going to create an integer called the current increment and i'll use a tary operator to say that if it is a main vertex and x is not equal to the number of verts per line minus 3 nor is y equal to the number of vers per lineus 3 then this is going to be a main triangle so we'll set the current increment equal to the skip increment otherwise it's just going to be a small triangle so we'll give it a value of one then we'll use this current increment value over here where we're picking the vertices for the triangle okay now coming down to the constructor for the mesh data we're going to have to calculate the new sizes for all of these arrays let's start with these two border arrays which according to my new naming scheme should actually be the out of mesh vertices and the out of mesh triangles all right and i'm quickly going to rename vertices per line to numts per line and we're going to want to take in another variable here integer skip count okay now in case you're wondering why the calculation for the sizes of these two arrays would have changed it's because the number of vertices per line now includes the out of mesh vertices so this value that were being given is actually different to what it was before okay so the number of out of mesh vertices will be equal to the number of vertices per line times four for each edge and then since will be double counting at each of the corners we'll just have to now subtract four now to figure out the number of out of mesh triangles we can imagine that we've got all these squares down the one side and the number of squares is equal to the number of vertices per line minus one so let's write here in brackets number of vertices per line minus one and then we'll multiply that by four for each of the sides and then subtract four cuz we're once again double count at each of the corners then each square contains two triangles so we want to put all of this in brackets and multiply it by two and then the triangles array doesn't hold the number of triangles but actually the number of vertices so there are three vertes in a triangle so we need to multiply this again by three this simplifies to 24 multiplied by the number of vertices per line minus 2 all right calculating the sizes of these arrays is going to be a little bit more involved let's start with the number of mesh edge vertices so the number of mesh edge vertices per line is just the number of verts per line minus 2 and then we can multiply that by four for each side and minus four for the double counting at the corners then i want to know the number of edge connection vertices so the number of edge connection vertices between each main vertex is equal to the skip count minus one the number of these groups of edge connection vertices along each side is equal to the number of vertices per line minus 5 divided by the skip count so i'll have here num edge connection vertices is equal to the skip count minus1 multiplied by number of vertices per line - 5 divided by skip count and then we need to multiply that by four for each of the sides and there's no double counting here so that is it to then figure out the number of main vertices per line we can use this same idea here that we use to figure out the number of groups of edge connection vertices and then the number of main vertices line will just be one more than that so i'll paste that there and add one the total number of main vertices is then just the number of main vertices per line squared so i'll just multiply that by itself the size of the vertices array is then just all of those added together so number of mesh edge vertices plus the number of edge connect ction vertices plus the number of main vertices the size of the uvs although we don't really use this anymore is equal to just the same as the vertices i'll use vertices do length now we need to calculate the size of the triangles array to calculate the number of mesh edge triangles you can use the same idea that we used for the out of mesh triangles we first want to know how many mesh edge vertices there are per line so that's equal to the number of vertices per line minus 2 then the number of those squares per line will be one less than that so you can change that to minus 3 then we multiply by four for each side and subtract four for the double counting at the corners and then we want to multiply all of this by two since there are two triangles in each square now if you take the trouble to simplify that you'll get 8 multiplied by the number of vertices per line minus 4 the number of main triangles is just equal to the number of main vertices per line minus one squared so multiplied by non main vertices per line minus one and then multiplied by two the length of our triangles array is then the number of mesh edge triangles plus the number of main triangles multiplied by three for the number of vertices okay just a few last things first of all i'm just realizing that i called this the skip count here whereas previously i was referring to it as the skip increment so for the sake of consistency let me rename this skip increment and then border triangle index should be renamed to the out of mesh triangle index then coming up here to where the vertex position 2d is being calculated since we're starting at the top left we want to increase on the x-axis but decrease on the y ais so we can't just add percent we actually need to add new vector to percent dox and negative percent doy okay last thing is to just update the constructor here for the mesh data to also take in the skip increment let's save that and go into unity what i want to do first of all is just change the shading mode to shaded wireframe so that we can see all of these triangles then to just make this a little easier to see on the mesh settings i'm going to turn the chunk size index down as low as possible and then and we can go into the map preview as i increase this preview level of detail we should see the main mesh becoming more and more simplified but that we retain this mesh edge now if we go to the side here you can see these edge connection vertices don't line up correctly so what needs to happen is these green edge connection vertices need to have their heights set along the edge formed by the two nearest main vertices for example the two nearest main vertices of this edge connection vertex over here are these two now the edge connection vertex is one away from main vertex a and three away from main vertex b this means it's 25% of the way from a to b and so its height should be 75% of the height of vertex a plus 25% of the height of vertex b let's pretend for a moment that the mesh edge vertices and the out of mesh vertices don't exist anymore so we start with this main vertex over here at 0 0 and going down we can see that in this example we have a main vertex every four vertices where four is of course the skip increment so if we pick some edge connection vertex say this one at seven on the y- ais over here we can see how many times the skip increment goes into that number so so how many times 4 goes into s which is just once with a remainder of three and that tells us that we are three away from the main vertex above it and if we do skip increment minus that number so 4 minus 3 we get how close it is to the one below it so let's go into the mesh generator script and somewhere over here before we add the vertex we can say that if it is a edge connection vertex then the distance to main vertex a so that's the closest main vertex above the current edge connection vertex that will be equal to y and we have to subtract two to account for the border mod the skip increment all right and then distance to main vertex b is equal to skip increment minus the distance to main vertex a now i don't want to have to deal with the y ais and the x-axis separately so we know that if x is equal to 2 or x is equal to the number of vertices per line minus 3 then we're working with the y ais otherwise we're working with the x-axis so i'm going to create a bull here called is vertical and it's vertical if x is equal to 2 or x is is equal to the number of verts per line minus 3 then over here instead of just using a value of y we can use a tenary operator to say that if it's vertical then we use y - 2 otherwise we use x - 2 all right i then want to get float height of main vertex a so we'll be getting this from the height map of course now we want to say that if is vertical then we just use the current x coordinate but if it's not then we want to get the coordinate of the main vertex on the left so x minus distance to main vertex a and then on the y- ais we'll say if is vertical then we use yus distance to main vertex a to get the main vertex above otherwise we just use the plain y value let me then copy this for the height of main vertex b and all that will change is that instead of distance to main vertex a this is vertex b in both cases and instead of subtracting the value we'll be adding it all right over here i'm now going to add a float distance percent from a to b this will be equal to the distance to main vertex a divided by the skip increment cast to a float just like so all right so we want the height referring to this variable up here we want to set that equal to a weighted sum of a and b with the weight being based on this distance percent so it's equal to height of main vertex a multiplied by 1 minus the distance percent from a to b plus height of main vertex b multiplied by the distance percent all right so this height value is then being used over here where we're adding the vertex so if we just save this this should already work and we should see those snap into place so if i go into shaded mode you can see that we've got some lighting issues along these edge connection vertices so that's of course just because when we're calculating the normals of these vertices it's not taking into consideration this triangle over here now we could quite easily fix this just by interpolating these normals between the normals of the two main vertices in the same way that we did their positions but once again this is only going to be visible in the distance and so not really noticeable so let me know if you think it's important enough to worry about before i end this episode just going to quickly increase the chunk size to about three and going to hit play and just make sure that this is working nice nicely which it does appear to be one last tiny thing i want to do is just in the mesh generator i noticed there's this line incrementing the vertex index and i don't know if that used to have a function but it certainly doesn't anymore because the vertex index is just being set to a new value at the top of the loop so going to delete that and save all right that's everything for this episode until next time cheers is