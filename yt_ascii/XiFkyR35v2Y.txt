this is not really relevant to the video, actually, but this is a slow loris. i just wanted to show it because it was cute, that's all...  don't keep them as pets though. now, the slow loris is i guess my favorite denial of service (dos) attack -- now that says a lot about me, doesn't it, that i have a favorite denial of service attack... before we demonstrate anything, of course, let's get straight out in the open, you shouldn't be using slow loris on anyone, or any other dos attack on anyone else, alright, because you'll get in a lot of trouble. most dos have this idea that you try and defeat some web server, [or] some computer on the other side of the web, by giving it as much bandwitdh as you can, such that it breaks, right, they have a certain amount of bandwidth [that] they are allowed to use. and if you give them more than that, or try to request too many web pages, their server goes down. that's the general idea of a dos. distributed dos is just the next level, where you have multiple computers all attempting to do the same thing, and then, more modern dos will use amplification and things like this, to try and improve this even more. but, the whole point is as much bandwidth as you can all at the same time, alright, and if you get enough, you can take them down. if you don't, then they just laugh, right? so, you know, microsoft and google, you're going to have difficulty bringing them down. but, smaller websites, it can have a massive impact on the amount of money they are making, if no one can visit their shop, or something like that, so it's a real problem. what i like about the slow loris is it comes at it from a completely different way. it's a protocol attack, so a layer-7 application attack, which doesn't need a lot of bandwidth, so i can do a slow loris on someone and then browse the web as normal, play computer games... so let's think back to how me talking to a web server works. i send off a "get" request to a website, and i say "get me index.html", then the web server sends back index.html, and that's the end of that conversation, right, then i start up another conversation that says: "i've read this index.html, i now need, you know, header.jpeg", so i send off another get request, and so on, and we have these short conversations back and forth. now, usually, an http request is just text, right, so it litterally says "http get 1.1", or something, index.html, where i'm sending it, a bit about me, so i'm using, you know, firefox or something, and then some other data, and then it always ends with two caret return line feeds, so two new lines, right, so, normally in text we have a caret return character, and then a line feed character, two of those signals the end of an http request. what the inventor of the slow loris, some hacker named rsnake, i think, (indeed!) decided was "what if i never send those caret return line feeds, can i just keep the website waiting for me, can i go so slowly, by asking for website so slowly, that i just break them", right? and yeah, he can! and -- and so they have things like timeouts and stuff so maybe let's say i'm in the middle of browsing a website, and then -- on my phone, right -- and just as i'm in the middle of sending off a request, i lose phone signal, right? that's pretty common, you know, these days, so that would timeout on the server's end as well, and they would let the connection go, and then they conserve someone else's website. the problem comes if i don't send no data, i send some data, but just painfully slowly. what's great about the slow loris is, there's hardly any code, it talks to a web server, and it basically says "get me index.html", or something like that, and then sends a space, or a 0, or a random number, or something like that, and then it waits for about, you know, 10, 20, 30 seconds, just when the website is about to assume it's gone, and sends another single byte, and says "i'm still here! i'm just really slow", and then it does this again, and it does this again, and keeps that connection going as long as it can, and then it does it with 200 other connections, or as many connections as it can. so, my computer sending out this attack, it's sending 200 byte packets every minute or so, it's not a lot at all, and it's very difficult for a firewall or something to notice this, because these are valid http requests, they're just super slow, right, and you know maybe i've just got a really bad internet connection, maybe. now, this doesn't affect every web server, it mostly affects apache, because of the way apache works. unfortunately, apache is very prevalent, there's about 40, 50% apache these days, it's hard to know for sure, but i had a quick check, and that seems to be about the right estimate. apache when they designed it, they decided it would be a good idea to start up a new thread to serve every concurrent connection, so when a connection comes in with an http request, they set up a new thread that handles that request, and then the thread goes away when it's finished. now, that wasn't entirely stupid, you know, if the connections appear, and then they go away, that's not a problem. but if the connection starts to stay longer than we anticipate, then our connection limit gets reached, so apache will have a connection limit of, let's say, 200 concurrent connections, because beyond that you've just got so many threads [that] the whole thing starts to grind to a halt. so, what slow loris does, is begin to open connections, and as a new one gets freed up, from someone else using the website, they'll open that one, and this one, and that one, until they got all the connections. so, let's see how it works, right, so i've come up with another of my glorious websites, just for this, "mike's website"! so, that's actually this computer here, which is running windows and apache. now, so this is my website, with my company profile, and lorem ipsum. what this website is, is not very important. let's have a quick look at the code, this is not the original implementation of slow loris, this is a python implementation i found, but essentially, it's not very long, right, 67 lines, which another reason in our kit, because it's so elegant. really, what it does -- it has some code here, to start up a socket, which is a tcp connection, and make it get requests, here's our get request text, and then, for all existing sockets, down here, can we send a little bit more data every 15 seconds. and if a socket dies, we recreate it, and we just keep that going, and we'll do this for 200 concurrent sockets, which is more than my apache installation is configured to handle. so let's run this -- there we are, python, slow loris, to the ip address that we just looked up. alright, it's creating all the sockets, and now, it's just going to sit there, every now and then, sending a byte of data to the apache web server. so, the web server thinks that it's got 200 people looking at the website, when in fact it's got one person looking at the website really, really slowly 200 times. if i press refresh on this, because it has been cached, we can see we're now waiting. waiting. (sean:) so if you clear the cache now, in your browser, would that -- that not be able to get the website? (mike:) no, it wouldn't be able to see the website, so let's go to website now, that we're under slow loris. so... alright, we're waiting for it. i mean, we might get lucky, maybe one of these sockets drops out and then the server can respond, alright, but we might not. but... (sean:) you've clicked to go back to that same website, and of course it can't load it and so we're just sitting... (mike:) yeah and [at] some point we might see a timeout on this client-side, saying "no, we didn't get any response from the server". this server is basically -- won't serve this website to me, because it's too busy serving 200 other websites, or more specifically, busy waiting for us to finish the request 200 times so it can actually finally get home with something. (sean:) and how long would that carry on sending those requests? (mike:) as long as i want. and, as soon as a socket dies, another one comes up, and it just keeps going. and, i mean, 67 lines of code, right, and here's the nice bit, "fun things to do", i can just use the net as normal -- my net is fine, right, i'm not using all my bandwidth to do this, i'm using barely any of my bandwidth, which is what i really like about it. this kind of attack is called a low and slow attack. so there's a couple of others, "ruded", [meaning] "are you dead yet?", is another one that does similar things. and, what's clever about them is [that] they're quite hard to detect, because what it's doing is totally normal http, it's just doing it incredibly slowly, and when they designed this, and when they designed apache, they never thought you would do something like that, and that is exactly the problem with these sorts of protocol attacks: the assumption that they will always do what you expect them to do, and they won't do these random, strange things. so, yeah, my favorite dos.