today we're going to talk about clustering do you ever find when you're on youtube you'll watch a video on something and then suddenly you're being recommended a load of other videos that you hadn't even heard of that are actually kind of similar. this happens to me i watched some video on some new type of saw trying to learn it because you know don't know what i'm doing and suddenly i'm being recommended videos on turning verses on wooden lathes and all kinds of weird stuff and what's happening is i'm being clustered into groups of people who are liking those and watching those kind of videos or these kind of videos are all being clustered together as similar, right? so clustering is it's one of the sort of core technologies at the heart of this kind of stuff in fairness i did end up watching a bunch of those woodturning videos we've talked about the different kinds of datasets you might have right and until up to now we've been talking about things like cleaning data transforming data and reducing data now what we want to do is start trying to derive some knowledge now sort of a typical way to do this would be something like a classification algorithm or maybe a regression ad with them but today we're going to talk about how do you separate out data and group data together? when we don't have any labels for that data, so this is an example of unsupervised learning different types of machine learning that we can use one is unsupervised. this is where we don't have any labels then we have supervised learning where we have labels so for example a supervised learning task might be one where you have some labels for you for your products or your videos and you're trying to classify them like that. so maybe you're trying to classify videos into a genre right or unsupervised learning we don't have any labels maybe we've just got a load of products and we're trying to group them into into similar categories so these are all the tools and these will be electronic products and these are all the toys right and maybe we want to do that without having to have a person go through and click on them all so why wouldn't we just label everything and then use that to perform nice powerful machine learning algorithms like classification well, sometimes it's just too expensive to produce labels if you're running a music recommendation system i like the wonder power spotify maybe going through and defining what genre everything is by hand is going to take absolutely ages and one waste of time right way if we can do this automatically so sometimes you aren't gonna have labels for data and it's too expensive to obtain. it's too time-consuming. it's too difficult maybe you don't people disagree over what john or two pieces of music are so in that case you are going to have labels and so clustering is a good option right let's group things together with things that are similar in terms of their attributes without actually knowing what they are what we're going to try and do then is take all the attributes and all the instances objects and use them to group them into similar objects, but the question is what is similar like well let's think back to the way that we structure our data we're going to have rows as our instances and we're going to have columns as our attributes and another way we remember to think about that is that these actually are data points in some space where the position of each point or the position of each instance depends on the attributes? so, for example, we could have a three attribute data set so maybe we have row 1 2 3 4 and we have attribute a b and c, right? so, i don't know maybe one has a value for a in a value for b and a value for c so this means this is a sort of three dimensional data set with our axes a b and c so we're going to have something like this and then see you guys office so this is a this is b, and this is c so maybe in this data set, you know instance 1 appears here and 2 over here and 3 over here and 4 over here right you've just i'm imagine these are in some sort of 3d space, you know, perhaps intuitively we can say well ok one is maybe closer to 4 than 2 is because this is shorter distance but of course, this is a three dimensional space is hard to visualize but doesn't matter how many attributes we have we can still say well ok, in this space. these instances are closer to these instances and then we can start grouping things together so maybe i mean actually 2 is very far away from free so maybe we sort of group these two up and group these two up or something like this so typically we're going to use you're clearly in distance for this right, which is going to be this best distance here between points 1 & 2 in this 3 dimensional space there's obviously going to be questions about how many groups are we grouping them into? it's 3 too far away to be in any of these groups these are things we have to think about but this applies to any number of dimensions as just simply the only thing holding you back is just how fast your computer is and how fast go food is we're gonna look at two different clustering algorithms, right? the first is going to be k-means and then we're going to look at pam alright, which is slightly different now we talked about k-means in computer file before but we're going to talk about it here for this course so just you know to keep things simple for my arm and drawing i'm gonna think the two dimensions here and we've got some sort of data, right which is sort of looks like this and there may be some more data over here and you know to us we can sort of say well maybe there's two groups but we want to sort of formalize this process and you've got to consider that in two dimensions maybe it's quite clear that there's two groups if you've got a sort of n-dimensional space maybe a thousand dimensions or ten thousand dimensions picking out where the groups are is not something you want to be doing by hand so what k-means does is it splits some data into k groups, right? so i'm going to specify them oh strike straight away but k is 2 in this case because i think there are two classes here now if i get that wrong, obviously, that's a problem. we'll talk about that. later but what we're gonna do is we're gonna pick two random points in this space. so let's say this one here and this one here so we've got two classes and we're going to start to assign each of these points based on whichever of these means is closer so these are the center points for our new groups generally speaking. obviously, this is going to be clearly in distance so essentially a circle in this case so we're going to sort of look sort of like this and the blue one's going to come around so kind of like this kind of like this and these will probably be red because they're slightly closer so now but all these are red. what we're going to do is we're going to label these all red i can only do one iteration of this because now painted all over my picture we start by assigning all of them now we might be finished. but let's imagine. we're not what we want to try and do is reevaluate where the positions of our clusters are based on this information so we take the mean or the average position of this group here the red group and we can say well, okay it's sort of bang in the middle here. so we get rid of this one. i'm gonna this above our pen. oh it worked here's my new center position here right, the blue one, which i'm going to have to scribble out is going to move to our about there something like this so that's iteration one right now. we've we calculated these center points so this blue region of what's going to be classified as blue and what's going to be classified as red it's kind of going to move this way a little bit. so i guess we're going to maybe reevaluate and this is going to become blue ooh, this is going to be an iterative process we're going to keep recalculating these means based on the points that have moved back and forth between these two groups and eventually, these means should begin to converge and stop moving around as things settle down and usually this actually happens pretty quickly. i even in a large dimensional space k-means is a very popular algorithm. it's got a few drawbacks one is that let's imagine. we had a single point way over here an outlier right now hopefully you've got rid of most of our lives from the previous video but if you haven't and you've got an outlier here that you weren't expecting then what's going to happen is this is going to be assigned it in the first iteration to be blue it's going to pull the mean of this group this way which means that more of them are going to be assigned red and red is going to go this way as well and it's just going to move the means around and cause a bit of a problem we might get away of it in this case but you can imagine if you've got a large high dimensional space and you're trying to cluster lots and lots of clusters getting the means in the wrong position could cause a bit of instability cause the wrong plate things to be classified and clustered together there's a couple more issues one is that you know where you start your means on the first iteration is obviously quite important if you place it at random there's a charge you're going to put it right up here and things could take a lot longer to converge or could settle on some clustering that you're not happy with so this outlaw is going to be a problem, right? it's going to make k means struggle slightly so as an alternative we can use which is called pam or partitioning around meds by or kay meds whatever you want to call it instead of calculating a mean for our cluster and moving those means around what we're going to do is use actual points from our cluster so what we do is we start off exactly the same as k-means but instead of picking two random positions we pick two random points so for example, what we'll do is we'll pick this red one here and we'll pick this blue one here now these are treated exactly like the means in kami so we've in cluster our data around these two points and then we calculate an error for each cluster that is the distance from all the other points. we assign to it into that cluster so you can imagine hopefully if this point has been chosen in the middle of a cluster then the distance will be quite small because everything will be tightly bound together if it's we're over here as an outlier it's going to be a huge error because the distance to all of these points is massive so then what we do is we pick a group at random and we move the center to another point so we okay we were here let's move to here and we repartition our data and we calculate a new error per distance to all our new clusters based on this new position that we just picked and if it's better, we permanently move our center point there if it's not we go back to where we were before we pick a new cluster at random and a new point at random and we repeat this process. so in k-means you move both means in fact, however, many group clusters, you've got you're going to move all the means at the same time, right? because you repartition the data all the means are going to move around and then you reposition the data and you repeat like this in pam you just move one mean or one exemplar or meadow at a time? so let's say you pick the red one first you move that and maybe pick the red one again and you move that and then it's blues turn you move that and obviously this is gonna take a little while to do over time hopefully what will happen is you find that? more and more of a time you try and move and it doesn't work because you just increase the error because you settled on something really helpful and also eventually if you take long enough doing this you're gonna visit it all your points and then you might as well stop as well so typically what you would do is stop after you fail a number of times to move somewhere better because really you actually found somewhere pretty good this neatly avoids our problem of outliers because this one here won't affect the position of this cluster because if we ever chose it to be a center it will be immediately discarded because the error is so large as opposed to it actually affecting the mean and pulling this cluster this direction so there's one last problem and that is the problem of how did we get? this - i said that i thought there were two clusters in this data and happily there were and that worked out really nicely but if you've got, you know a huge data set there's no way to guess how many clusters this is going to be and or if you do maybe that's not the optimal number of clusters so for example, if you're trying to cluster up songs and spotify, i mean how many clusters is that? i have no idea like lots so you put 80 in and it's okay but is that should you go up should you do 100 or should you do 60? i don't know so there are approaches like db scan which will try and bring in the concept of a neighborhood and have the ability to increase or decrease the number of clusters as appropriate for your data. all right so what's going to happen is they'll say this looks good but if we split this in two and had two clusters here instead that will be a better fit right so these are very useful technique so you can use if you want something a little bit more powerful now it wouldn't be a date of an artist course if we didn't look at the iris dataset at least once this is a classic data set everyone uses and it's good for clustering nice and small and we can have a look and this data set we've got three different species of flower. we've got so tosa versicolor and virginica, we've got four attributes. we've got several length sepal width petal length petal width just for this occasion i looked up what a sepal is and it's the green bit that covers the flower when it's folded up right now i don't know much about these flowers, but they are subtly different. one of them is a little bit more different than the others so it makes for a good clustering problem because we're hoping for three distinct clusters the iris dataset is one of the ones that's built into our you can literally call data iris and it'll load it up for you now let's have a quick look at what we've got because they're lovely function in are called pairs which just shows us a load of scatter plots of different attributes so if i run this this is only going to work for a few attributes before the whole thing becomes very difficult to look at so we've got things like sepal length sepal width and the correlations of these and these are colored by the different class of flower so you can see if the three class is one of them is actually quite different a lot of the time and then some of them bees this red and green class. they've got quite a lot of overlap so clustering nose is going to be a little bit more difficult bearing in mind. we're using four dimensions to do it not the two you're seeing in any individual scatter plot. okay. so let's just start off with standard k-means so we're going to call km3 k-means with three clusters is k-means, there's a function for this in r on the iris data set all of the rows 1 to 4 so not the species of plant we're not going to custom on that three clusters and we're going to allow it to go 400 iterations k-means will stop early if it doesn't improve itself, but if it keeps going maybe it's just going back and forth a little bit it's time to stop that did not take very long this object returned by the k-means function is going to have an integer determining which of our instances have been assigned to which cluster so all of these first ones have been assigned to cluster two and the centers for all of our clusters as well so remember that in our we only have a data frame like this iris we can add other columns to it so we're going to just add our k-means result back into our it's data frame so we can keep track of it so we're going to say iris km3 is equal to km3 dollar cluster that's gonna be in there. okay, so let's put it in a table we'll have a look at how our clusters match up to our actual number of flowers we've got so it's going to be a table of the irf species versus the iris clusters from k-means alright, so if we have a look at that the first thing we'll see is that it doesn't make absolutely much sense because for example say tozer which is our class 1 in some sense has been assigned to cluster 3. so what we're going to do is we're going to reorder these columns so that the correct. classifications are down the diagonal much like a confusion matrix. so we have a function to do that that we're going to call and if we look at this result, we can see that the results are an 89% classification accuracy, there were 50 of each plant in this dataset 48 of these plants have been correctly assigned to cluster two together but two of them were in cluster 1 along with the other virginities and finally the virginica has been 36 of 50 correctly assigned to cluster 1 and 14 have been incorrectly clustered into cluster 2, right so it worked pretty well. it's not perfect bearing in mind if you really want to separate out plants. maybe you need more than 4 dimensions maybe you can't absolutely tell what a plant is just based on 4 dimensions all right, some of these plants are similar enough, but the clustering isn't very well defined so perhaps we can make our life a little bit easier by using principal component analysis to do dimensionality reduction or just to reframe our data onto some different axes to get better clustering result. so we're going to do a very similar thing we're going to run pca on the iris dataset and we're going to project our points into that new principal component space and then we're going to take only the first two dimensions so this is principal component 1 and principal component 2 as we covered in the principal component video then what we're going to do is we're going to apply caming stavos results rather than the original data so what we've done is we've transformed our 4 dimensions of sepal width sepal length petal length and petal width onto our principal component axes and then we've discarded the last two and kept just two axes so i'm going to run that that didn't take very long ok we're going to sign that back to our iris data set just like we did with the results of k-means and then we can bring up another table and see how the results compare table to and then we'll order that again by the diagonal results were almost exactly the same. i think it was 88% 89% something like this you can see that one extra versicolor was put into cluster 2 when it shouldn't have been i but this is with only 2 dimensions instead of 4 dimensions so we've harbor number of dimensions but by using pca we've got almost the exact same result for datasets that you don't have labels for maybe the labels are too hard to get or you don't know what they would be i think clustering is a good way to group up data and start to derive some knowledge the knowledge we can derive or what what items are similar to each other by which products in our database are similar to each other so that we can start using them for a recommender system, you know, what movies are like each other what songs are like each other like what flowers are like each other? so the ideas that were clustering data up and by doing that we can look at these clusters and start to gain some knowledge don't forget also that each of these is going to have a prediction as well so this one here attribute one is going to have let's say like a label if we did play tennis or this person is healthy or this person has this disease. it depends on you