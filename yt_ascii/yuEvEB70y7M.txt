in today's video i'm going to be showing you how to create a modern application in python using custom tk enter and if you are familiar with tk inter it's going to be a breeze because this is essentially just an add-on for tk inter which allows us to make our ui look a lot better with nearly no effort and since this will be our first application we're going to create an increment counter it's going to be simple as this and every time we tap on it it's going to increment the count by one and we can reset it at any moment so this reset button is going to appear as soon as we increment the number and of course if there's nothing to reset the reset button is going to disappear so we can increment it again and we can reset it and as you can see we have this very nice ui and this is going to be the starting point for building applications in python later on on this channel i will create some more complex examples so if you end up enjoying this video do remember to leave a like and possibly even subscribe if you are curious about creating more applications such as this one so let's start with a brand new project in python i'm using python 3.11 for this in pycharm and the first thing we want to do is install the custom tk enter package so here we'll type in pip install custom tk enter and i already have it installed so it's not going to say anything there but you have to do that for this to work now i will make the font size much bigger so we can see what's going on and the first thing we need to do is import custom tk enter as ctk and then we can create our class which is just going to be the application itself and here is where we're going to create the gui for our application now first we need to create an initializer and inside the initializer we need to create what they call the master which is the app itself and it's going to be of type ctk dot ctk next we need to define the master so self dot master is going to equal the master that we insert and we need to say self.master.geometry and this is going to be the window frame so here we're going to type in 250 pixels by 200 pixels self dot master and we're going to set resizable to false for both the width and the height we don't want the user to make it smaller and we don't want the user to make it bigger we just want it to be a set a set frame and finally we want to give this a title so master dot wm title and here you can give your window a title and i'll just call it increment counter so that takes care of the first part of our application of actually creating the window and we can actually test it right now we don't have to wait or do anything funky we can just create it immediately we can say that the app is going to equal ctk dot ctk and we need to initialize that and we want to create the gui which is going to equal the app with the initializer that takes the master so the master is going to be the app itself and we need to just run that application in a main loop so that will keep the program alive and if we run this it's going to create an empty window for us with nothing inside it and of course we need to place in the elements of our choice such as the buttons and the text that we are going to increment so this shows that our program does run and that everything's set up correctly we have a frame that we've created that has the title of increment counter so next let's create a variable called counter and it's going to be of type string and it's going to be set to zero and i'm just using a string of numbers because when you display text in tk enter it has to be a string so i'll show you later how we will implement this and how we will increment it it's a personal decision you can do it of course with an integer and convert it later but i just want the counter to be treated as a string and we can even add a comment there that creates the counter as a string next we need to create a label and a label is going to contain the text that we're going to update so self dot label is going to equal ctk dot ctk label and if you were using tk enter for example you can just remove the c and you can remove this part here and it would look like that so the translation is quite literal now the first thing we need to pass in is the master so self dot master and the text is going to equal self dot counter if this was an integer we would have to type convert it here to a string to make sure that it actually is accepted as an argument then i want this to be quite big so we're going to provide a font and the font is going to contain helvatica bolt and it's going to have a font size of 26. and this scribbly line wants me to type in helvetica because that is the correct font then we need to place this label so self dot label dot place and we need to decide where we want this to actually appear in the frame so we're going to type in first relative x because we want this all to be relative and we're going to put 0.5 so it's placed directly in the center of the frame and we're also going to type in relative y which is going to be 0.4 so it's right above the middle of the center of the frame and it's going to have an anchor which is going to be set to center and every time you create some sort of element i do recommend that you run the program just to see that it is updating in your application now we have this zero here and we want to be able to update it of course but we still need to create that functionality i might actually make this font a bit smaller so we can fit everything on one line so that's going to be like that next we want to create the button the button that actually increments the counter so he will type in self dot button and that's going to equal ctk.ctk button and we're going to pass in the master followed by the text which is going to say increment and we're going to give it a command and it's going to be called self dot increment so let's create it right below and we do need to go out one layer because this will not be part of the initializer this is a function that belongs to our class so here we'll type in dev increment and it should have that self word and we're not going to do anything with it just yet so i'm going to insert an ellipses as a placeholder and we should actually do the same thing for the reset button we're going to have two methods one's going to reset the counter and one's going to increment the counter so it's good to have these two placeholders but now the command does not give us an error and and it's important you do not add the parentheses to the method otherwise it will not work now the last thing to do here is to add a corner radius of 20 and then we will place this button so self dot button dot place and we can actually copy this section here and all we need to change is the relative y so we're going to place it at 60 percent down and if we run this one more time you'll now notice that we will have an increment button right below the counter and we can tap on it but nothing's going to happen because we've not given this any functionality and right below the button we're going to create a reset button so reset button and that's going to be of type ctk dot ctk button or it's going to be of type none because here we're just creating that variable to show the program that it exists and it's going to be initially set to none so now we have an optional here so we don't have to create that button but we do have a reference to it and once again all of these components are being created inside the initializer so make sure that you have the methods outside of that because these methods do not belong inside there now first we're going to take care of the increment functionality so here we'll type in try and i'm going to type in self dot counter is going to equal the string of the integer of self.counter plus one and this can be seen as a confusing implementation so you're more than welcome just to keep the counter as an integer and to just convert it later so for example if you have an integer that you have to insert here you can just convert it directly or not right here but where it says increment was that oh yeah so you can just go here and convert this to a string directly if you want to keep this as an integer to avoid that i'm doing this silly mess over here but it's what i decided to do for this video next we need to call self.label dot configure and what we want to configure is the text so here we'll type in self dot counter and as you can see by making sure that we keep this as a string it does make it easier to insert it around the program but it is quite counterintuitive but it is quite counter-intuitive that a number would end up being a string now we need to also add some logic for when the reset button should appear so here we'll type in if the integer of self.counter is equal to one that means that the user has incremented the button and that we should make the reset button appear so we're going to create a reset button here we'll type in self dot reset button which already exists because we've created a reference to it and that's going to equal ctk dot ctk button and we need to pass in self.master followed by the text which will be set to reset and below that we'll type in command which is going to take the reset command so self.reset without the parentheses and we're going to have to give this a corner radius of 20 a foreground caller of red a hover cooler of dark red and that's all we have to include for this button now below the button we need to type in self dot reset button dot place and we need to choose where we want to place this and we're going to type in relative x and set that to 0.5 because that's perfectly in the center and we want relative y to be 0.8 with the anchor set to the center so you should notice that with relative y we're going up in increments of 0.2 so that's about 20 apart and before we can test this out and run it we do need to add the accept block just in case an error is thrown so here we'll type in accept exception as e and we're just going to print the error in case there is one as e now we're still missing the reset functionality of course but we have a lot of functionality already and let's just test that the reset button actually does appear when we are counting so if we run this program we have our increment counter here and if we tap on it everything is working nicely besides the reset button which has no functionality whatsoever so let's go back to our application and let's finish with the reset functionality so here we'll type in try and we're going to try to set the self counter to zero as a string and then self dot label dot configure and we want to make sure that the text is equal to self.counter and we also want to destroy the reset button so self dot reset button dot destroy and if anything goes wrong we will use the same exception right below it so accept exception as e if something goes wrong we'll find out what it is and that will take care of the remaining functionality so just to recap we first created a class of application then we created an initializer which created the window for our application then we created a counter to keep track of that count as we are updating the text then we needed to create a label which will actually display the counter which is the text itself after that we created the main button which increments the counter each time we tap on it and we created a reference to the reset button that we could use later on in our methods then we created this increments method which increments the first counter and if the counter is equal to one it is going to create the reset button otherwise it will throw an error once there is a reset button we can try to set it to zero and we can configure that to display zero and then we're going to destroy that reset button so it disappears from the screen otherwise we will throw an exception so putting that all together and calling that all down here will result in this application that allows us to increment and reset the counter as we wish and as you can see the button disappears quite nicely but with that being said we've successfully created our very first modern application in python using custom tk enter do let me know in the comment section down below if you have any questions tips advice or just anything that has to do with this video i'm more than happy to read through the comments and get some inspiration but otherwise we are going to be creating many of these applications so if you have any suggestions do remember to leave that in the comment section down below but with all that being said as always thanks for watching and i'll see you in the next video