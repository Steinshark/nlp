hello and welcome. i'm james murphy and this is mcoding. today, we're learning about the crazy code behind python's itertools permutations function. what permutations does is pretty straightforward. it gives you all of the permutations of an object. the second parameter allows you to get partial permutations, or sequences from the original set taken without replacement. using it is straightforward. just give it the items that you want permutations of and the length of the partial permutations that you want. looping over the results, we see that this is a pretty easy way to get all the permutations. but have you ever thought about how you might implement a function like this? well, a viewer of mine, jerry, was thinking about this. jerry sent in the following code that he found in the python docs. technically, you're probably using cpython. and in cpython, this function is actually written in c. but it still does essentially the same thing. so, this is just the python version explaining how it works. but wow. this code looks like an absolute mess. what's going on here? we've got conditional breaking, mutating objects as we're looping and branching inside of a for-loop inside of a while-loop. not to mention, we're also using the somewhat obscure in python for-else paradigm. if i saw this in a real codebase, i'd half expect it to have a comment saying: black magic, do not edit. this is the kind of code that looks so complicated that it scares people away from understanding it. and before my viewer wrote in, that's exactly what happened to me. i've seen the documentation for itertools before. i've read this code before. but after one glance, i decided that it was probably some clever mathematician that came up with the algorithm. and there's a 20 page proof attached to it explaining why it does the right thing. but i claim that the underlying idea is actually very simple. and by the end of this video, you too are going to understand it. surprisingly enough, the key to understanding this code is to not try to understand the code. what i mean is, don't try to figure out what all these things are doing. instead, try to just solve the problem. if you had to come up with a way to iterate over all the permutations of some list, how would you do it? i asked this because the itertools code is using probably the simplest algorithm that you could come up with. optimized into oblivion. and by starting with the simple algorithm, you too can get to this one. so, let's start from the ground up. the simplest version of this problem is to just count how many permutations are there. pick the first element of your permutation. that's n choices. for the second element, you've got n - 1 choices and so on until you get to the r-th element. then we just multiply the numbers together. so, we start with n * (n - 1) * all the way down to (n - r + 1). if r was equal to n, which is the case of full permutations, then this gives n factorial. but just for example, suppose we have 5 things and we want 3 permutations, then we have 5 choices for the first thing, 4 choices for the second thing and 3 choices for the third thing. this is a very straightforward counting argument. you can implement this using reduce. or just using a for-loop, you can multiply the things together. the next step is to take our counting procedure and turn that into a recursive algorithm. well, we started counting by picking an element. okay. so, suppose that we pick the first element. well, if we want to find a permutation of length r and we've fixed the first element being 0, in this case, then what's left to do to find all the permutations that start with 0 is to just find all the permutations of length r - 1 from the remaining items. but that's exactly the same question just on a smaller input. we can just keep track of what part of our permutation is fixed and what part remains to be enumerated. each time we recurse we fix another element. and eventually, we fixed our elements which is the length of the permutation that we're looking for. let's take a stab at implementing this recursive structure. like many recursive problems, the actual recursion will be implemented inside some helper function that has some additional information that we don't want to expose to the user. in this case, the additional information is this variable i which tells us the number of things in the permutation that have already been fixed. at this point, don't worry about input validation or anything like that. and just assume that items is a list from 0 to n - 1. remember, our function is a generator. it runs and then it pauses and can yield a value. each time we have a new permutation, we'll yield. then the caller can just look at the current state of the items to determine the permutation. this is just an implementation detail and we can hide that from the user by doing something like this. every time our recursive generator yields, we just make a copy of the first r items and that's our permutation. first up, our base case. r is the number of remaining things left to choose. if there are no more things left to choose, then we're done. yield the current permutation and stop. if you're not sure why the yield should be there, then consider the case where someone asks for length 0 sequences. how many zero length permutations of n items are there? well, just one. the empty permutation. then the recursive part of the algorithm looks like this. we want to say for each of the remaining items, fix that item and then recurse. so, if the fixed portion of our permutation is just 0 so far, then we want to fix 1 and recurse and then fix 2 and recurse and then fix 3 in recurse and so on. the location just after the bar that determines the things that haven't yet been fixed is exactly what our local variable i represents. so, this loop should be a loop from i to the end. in order to fix an item, we just move it into the i-th position. the way we do that is just by swapping the i and j entries in the list. notice what happens when we swap i and j entries repeatedly. from here to here, we swap 0 and 1. then we swap 0 and 2 to get to here. then 0 and 3 to get to here. notice that each iteration puts the element that was moved in the previous iteration back in its original location except off by one. so, after iteration 0, the 0 moved to 1. after iteration 1, the 1 moved to 2. after iteration 2, the 2 moved to 3. after the last iteration, we just have n - 1 in the fixed slot and then all the numbers in their original order just shifted over by 1. this is actually a slight problem. after swapping an item into the correct place, we would like to just make the recursive call. the recursive call is pretty straightforward. we just say one more thing is fixed and one less thing needs to be fixed. but remember, i'm not making copies here. so, the recursive call might modify items. if items is getting scrambled, then how do i know that i'm choosing each element one time? say, i swapped 0 and 2 and then made a recursive call. if all the numbers got jumbled then when i go to swap 0 and 3, the 3 might not be in that position anymore. well, the great thing about recursion is that you can assume that a recursive call has some nice property and then use that property as long as you're willing to maintain that property in the current call. so, what i can do is add the restriction that after i yield all of the items from the recursive call, the items are going to be put back in the exact same position that they were in before the call. if i have 0, 1, 2, 3 and so on in order, i can swap in the next position, make a recursive call, iterate over all the results. and after the iteration is done, i'm in the same order. so, from the view of the caller, at this point in the code, items has the exact same state as it did right before the for-loop. that's very convenient for me. but now i have to maintain that property. after i swap 0 1, 0 2, 0 3 and so on, we end up in this state. we have the last element at the position just before the bar followed by the rest of them in order. in order to maintain the invariant and get back the original order, i just have to take the item just before the bar and push it to the end. everything else slides left one and we're back exactly where we started. that means, here after the loop, we need to push the i-th element to the back of the list. my preferred way to do that is to just pop the i-th element and append it. let's quickly fix this error. that's supposed to be the first r items not the last r items. and then we should be good to go. and there you have it, printing out the 3 permutations of 5 elements. you can compare against the itertools output. they're the same. so, let's get rid of these unnecessary comments and just take a look. now, i get it. if you're not that familiar with recursion, then this could still be a bit tricky to understand. but if you know the basics of recursion, this is one of the simpler recursive algorithms. it's a pretty straightforward. just do a base case, loop over some remaining choices and then do the recursive problem and then restore an invariant. if you're familiar with recursion, this really is one of the first algorithms that you'd come up with to solve this problem. and in my opinion, it's actually quite readable for what it does. it reads like the counting argument. try all the choices, fix that choice and then find the smaller permutations. if this was the algorithm in the itertools docs, i don't think that anyone would have emailed me about it. so, why doesn't itertools use this approach? what if i want just the first few permutations of a really long list. say, i take 0 to 1999. there are 2000 factorial permutations which is way too many to fit in memory. but itertools has no problem listing off the first hundred of them. let's see what goes wrong with our version. in our version, we get a recursion error. and this makes complete sense. what's the depth of our recursive call stack? we decrease r by 1 with every recursive call. so, we make approximately r recursive calls. we can find out how many function calls we can have on the stack by printing out the recursion limit. technically, all functions count towards this, not just recursive calls. so, it should be called something like 'get function stack limit'. but we're just being approximate anyway. for me, the recursion limit is a very small 1000. you can change the recursion limit with this call. but in this case, that still doesn't work. it ran for a while and then crashed because python's stack isn't big enough. yeah, you can increase the stack size a little bit. but this still is just not the right approach. if we want to support really large values of r, then we have no choice. recursion is out of the question. so, how do you take a recursive algorithm and change it into a not recursive algorithm, an iterative algorithm? well, keep in mind at the level of your hardware, there is no such thing as recursion. everything at the level of machine code is iterative. so, there's some kind of automatic process that's happening that's getting rid of the recursion. you're running some code. when you make a recursive call, you put another function call onto the function stack. the function stack is a data structure that your computer is maintaining for you. so, the general purpose way to get around this problem is to use your own stack. function stack space is very limited. but if you make your own stack, you can make it as big as you want, up to your computer's memory limit. but this video is already too long. so, we're not going to take that approach. instead, we're going to take the much less general approach of trying to be clever. and yes, person-already-typing-in-the-comments, i too agree that you shouldn't try to be clever. but i guarantee you, this code was created by someone being clever. here's how we'd be clever with the recursive function. the goal is to eliminate all the recursive calls. the only outside observable property of this function is that it yields at the right times and then it swaps the elements in the right order. if i swap 0 and 1 and then yield and then swap 0 and 2 and then yield, it doesn't matter whether that happened because of a recursive call or if i just did those things in that order. let's just take a look. what's the order that these swaps are happening in and that these pushes to the back are happening in? each time a swap occurs or a push to the back occurs, i'll just print out a message. here are the swaps and shifts for n equals 5 and r equals 3. i also print out a little diagram of where i and j are when they're swapping. this way we can visually see which locations are swapping and in what order. if you count them, there are five level zero operations. each one surrounded by four level 1 operations. each one surrounded by three level 2 operations. which brings us back to our original counting argument. our innermost recursive call is looping over the three possibilities for this last slot. the next recursive call up is looping over the 4 possibilities for that slot. and the outermost call is looping over the 5 possibilities for the first choice. so, what's happening is a kind of weird countdown timer. each column starts with the number of possibilities from the counting argument. so, here we're using 5 4 3. then you start from the right and count down 3 2 1 0. when you hit a 0, that means you've tried all the possibilities for the previous column and need to switch to the next choice. well, that means there's one less choice for the previous column and three more for the next column. and then you repeat. eventually, you get to 5 1 3 2 1 0 at which point, we've used up all the possibilities for that column. so, we take the next possibility from the outermost column. and then the whole thing starts over on the inner ones. we keep going until we're out of choices for the first column and that's where we stop. we could completely get rid of our recursive calls if we could just iterate over numbers in this way. okay, that's a much easier task to set our sites on. i envision this countdown as kind of like a weird clock mechanism. so, i'm going to call these things ticks. this is what stores the number of remaining possibilities for each of the items. we'll start with the while loop to just keep ticking the clock. and then in the loop, when we discover that there are no more possibilities, we'll return. we want to take down numbers starting from the right. so, we're going to loop over this reversed range. every tick, we subtract 1 and then yield our current state. the current state is going to be a tuple of the index that just changed and the current ticks. if this were a general purpose function in the library, i would probably make a copy of the ticks here. but because its only purpose is to be used in our permutations algorithm, we don't need to make a copy here. we'll just keep in mind that we keep getting back the same copy of ticks mutated. after we do a tick, we need to check if we need to do a carry. we do a carry if at the current position we hit 0. then we can calculate the number to reset it to based off of its distance from the start. when we do a carry, we reset the number back to its original value. then since we did a carry on the next iteration, we need to subtract from one index to the left. well, we're looping from right to left. so, that's what happens automatically. so, what we actually need to do is not do that if there wasn't a carry. in other words, if there wasn't a carry, then break so that the while will start again. and we'll start from the right. then we need to terminate the while-loop somehow. we want to stop when there are no more possibilities for the very first location. so, when this number hits 0. there are a few ways to accomplish this. the most obvious way is when there's a carry, just check if you're at index 0. and if you are, then it's over. another way to do this is with a for-else. if you've never seen for-else before, what it does is it executes the else clause if the for loop terminates normally. so, if it gets to the end of the range or the range was empty, then it will execute this statement. if there's a break or an exception thrown, then it won't execute the statement. in our case, a normal end of the for-loop means, we tried to carry past 0. and so, we should stop there. now, using the iterative countdown function, we can write our iterative permutation function. we start off with a yield for the identity permutation. then we start ticking the clock. here, the index i tells us which index ticked. if there's a carry, that's the situation when we need to push the current element to the back. otherwise, we're doing a swap and it's just a quick calculation to compute which index to swap with. fix this little copy-paste error and then we're all set. this is a completely iterative permutations algorithm. the only thing left to do is error checking and to allow things that aren't lists. so, we take in an arbitrary iterable. just make a copy of it into a tuple, make default parameters and throw errors if anything's wrong. then we just create a list of the same size as our iterable was. we use our algorithm to permutate the indices. and then we just use the indices to index into our tuple. so, basically once you can permute lists, then the whole thing is solved. but wait, you say. what about this code? weren't we supposed to understand this code? it's finally time. we have all the pieces. now we just need to see them fit together in this function. here's the first side by side. and as you can see, the first part is basically the same. except, they called their variable pool instead of items and they're not doing error checking. we call a helper function. they just paste it all into the main function. so, let's compare the helper functions. but first note that whenever the helper function does yield, we're always returning a tuple indexed by these indices into the items. and same thing on the right side. they're always yielding a tuple where they index into their items using the indices. they write it this way which is a little bit shorter. but it's actually making a copy of the indices every time they yield. so, i prefer to do it this way. but it's yielding the same things. now let's compare our subroutine. well, it doesn't look that similar. it looks like they're doing something different. we can sort of correspond some of the parts. here, this is our push to back. and this is actually just another way to do push to back. and here, we're just swapping items. and here, they're just swapping items. they're using a negative index. but we're subtracting n from the tick value. so, it's the same thing as the negative index. so, those pieces are basically the same. but on the right side, they're doing this whole while for-else with an if and breaks in it. oh, wait. that structure is our countdown code. which is what we're looping over. take a bit of a closer look at this. n is not being modified anywhere in this loop. this basically just says: if n is 0, then return. otherwise, while true. in our countdown code, r ticks. that's the same definition as their cycles. and we have a while true with the exact same for-else return and breaks inside. and if you look closely, all this swapping and moving with the indices is completely independent of the iteration. none of the looping conditions, the n or the for i in range r, none of that depends on the indices. it only depends on the cycles. so, we really have the exact same thing. we have a while true. then we have a for i in reversed range. we subtract 1 from our tick. we check if the tick is 0 and reset it if it is. otherwise, we break. and if we didn't break and we get to the end, then we return. that's exactly our countdown code. the only difference is that we factored it out into a function. there we have it. this is functionally identical code. the only difference is that we factored out a function or two. yes, it's technically more efficient if you don't have extra function calls. but remember, this is just expositional code. this isn't actually performance code. the real code was written directly as a c extension module. so, that's the end of our analysis of the code. and i just want to take a moment to step back. this code teaches us a few very important lessons that i hope you can learn from. firstly, if you're considering authoring code that's very clever like this, then you need to be extremely careful. if you do something too clever, there's a decent chance that no one else that looks at the code will even attempt to understand it. this really highlights the importance of breaking your code up into consumable chunks. if they had just factored out this little piece, the countdown into a separate function, way more people would attempt to understand it. and way more people would understand it. mentally, it's easy to separate the operations that you're doing on the list from this countdown ticking thing. they're completely separate independent things. so, don't mix them together in code like this. and second lesson: don't be afraid to try to solve the problem yourself from first principles. beyond using the most basic version of writing a recursive algorithm, none of these steps were really that big of a leap. we started by just counting solutions that was easy. we wrote the recursive algorithm. that's probably the hardest part. but if you have some experience doing that, it's not that much of a leap. it's the first and most straightforward algorithm that came up. then we leveraged our recursive implementation to see what it was doing in terms of indices and create an iterative version. in my mind, all this work combined is less work than just starting with this finished answer and trying to understand what it's doing. the whole thing felt very natural, building and discovering the algorithm from scratch. but going backwards, it's still confusing to look at. so, even when a problem looks hard, don't be afraid to give it a shot. serious thanks to anyone who stuck around. as always, thank you to my patrons and donors for supporting me. i really appreciate your support. if you really enjoy my content, if you love these deep dives, if you want to hear more, please do consider subscribing to my channel and becoming a patron on patreon. don't forget to comment and slap that like button an odd number of times. see you next time.