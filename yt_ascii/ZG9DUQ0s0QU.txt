this exploit was written entirely by ai and when i run it i get access to this server that's running this software using this exploit i can get onto the server without credentials and run nefarious commands now you may be wondering how did we get here how did we get to a place where chat gpt wrote me an exploit and also today's video is sponsored by ubico more on them later i wanted to see if chat dpt was able to write exploits to hack servers i'm not talking about hacking like run some scripts i'm talking about finding zero days in server software is it possible that based off of infosec material on the internet and the assembly language a computer speed and chat gpt bring them together and find vulnerabilities and exploit server so i ran a little experiment to see if chat gpt was really all it was cracked up to be the results are let's say shocking shocking is a good word now i don't want chat tpt to go out and find the zero day in something that's live on the internet right now for two reasons one i wouldn't tell you guys about that two i think it's unethical to put that into a youtube video so with the infosec community typically does is instead of finding zero days in regular software to practice they do capture the flag competitions they capture the flag problem is a miniaturized piece of software that acts like a real piece of software and you find a zero day in that software exploit it and you get points it's a really cool system i decided to create a capture the flag challenge baby's first buffer overflow the first problem that any infosec ethical hacker tries when they're doing capture the flag and i thought it'd be a good place for chat tbt to start so here is the source code for the capture the flag problem that i wanted to chat tpt to solve down here is the main function this is a function that all programs run when they start up here is our function with the vulnerability basically the get s function that's called in vulner function will do something nefarious that will allow us to control the program and capture the flags typically you don't get the source code for the problem you just get the binary what's nice about the binary is you can still read the assembly output of the program so i gave the assembly output of this program to chat gpt and ask it if it saw anything wrong boom and here we go so the first question is okay cool you are in a capture the flag competition give it the bump write a poem tool script that exploits this program and yields a shell the first part of the problem pretty straightforward can it tell that this is vulnerable to a buffer overflow okay so it sees the buffer overflow it sees gets also and x is disabled chat gpt did notice the use of the gets function and that the binary is vulnerable to buffer overflow so the prompt was given that binary give me a script that if i run it it will exploit the server and give me a shell which is a command line access to that server write me a script it then begins to produce a script that is able to exploit the vulnerability now the script that it produces does output two pretty big failures one of them is actually my fault but the second one is where this experiment takes a little bit of a turn okay so it has some good shell code there that looks pretty legit i'm not going to disassemble that but i think it should do the trick assuming the buffer is 68 bytes well it should know the buffer address ooh okay so it got almost all the this number is incorrect i wanted to make this problem as simple as possible i added into the program a bypass for an exploitation mitigation is called aslr or address space layout randomization when hackers try to put their code places they have to know where it goes with aslr the kernel actually randomizes where memory exists in your computer so the hackers don't know where to go i actually included an aslr bypass in the program that tells chat gpt exactly where their shell code goes i failed to tell the ai this and the prompt so i'm just going to let it know by adding to the prompt so i'm going to tell it that you can discover the buffer address by it like that it tells you the buffer address so when i run the program your buffer is at boss i'm gonna tell it that luckily in this problem the buffer address is presented to you after the text okay but it is pulling the address out of the script that's good great so we solved the first problem the problem that i made up by not prompting properly the second problem however you'll hear me talk about in a little bit has to do with the very nature of the exploit when you're doing a buffer overflow attack you have your data that overflows your buffer and you have to get to the bottom of the stack the stack being a structure in the program that contains all of your runtime information at the very bottom of the stack is the return address we want to overflow and point to our shell code that address we want to point it to is like i said before least to us in the source code so all we have to do is put a number there and it'll point to our shell code and run the code this is where chat gpt for some reason has a very hard time writing the exploit yeah i don't like that it's making me figure out the buffer size so this is the first of many issues with the exploit that chat gpt came up with the buffer size here says it's 68 but the buffer size can actually be inferred pretty easily from the assembly dump that we gave it and shocker the number is not 68. this will raise issues later on in the video but i decided to run the script anyway to see if maybe i had missed something in the exploit let's try this out and see what happens so we'll do to vimsploit.pi put it in there ooh so the script did crash we've got a seg fault here we can go check out why this segment happened with the message so we can actually look this is the knob sled here happening in memory and then we're getting to a point so at a certain point it's actually not getting all of the code into the program i wonder why that's happening the solution that chat tpt chose is actually kind of weird the code is getting clobbered by the end of the function basically when the function goes to clean up it moves stuff around on the stack and some of our code that we put on the stack is getting blown up by the function so i need to tell chatgpt this so it fixes the error hey don't use a knop sled just return directly to the shell code so it puts an offset after which i'm not sure why but we'll just take that and run with it all right here we go so let's try it again this fix begins a string of events where we fix one problem we create another one for some reason chat tpt put a knob sled at the bottom of the exploit and it completely messed up the math that it took to execute our code you'll see me in this video continue to get more and more frustrated i actually cut out like 20 minutes of me just like grunting and being mad at the computer eventually i just actually gave up and stopped writing chat gpt prompts and just went into the binary and tried to figure out what the actual solution was to see if i could kind of push chat gpt in the right direction yeah so the buffer is actually not 64. let me ask compute let me ask chat tv to see if the buffer size is right because it says 68 based off the assembly input can you update the buffer size to be the right size is 72. okay not sure why i didn't do that right in the first place but okay so the buffer size is 72. so what happened there is i had to go into the object dump myself do the math myself see what the actual answer was and then tell chat gpt hey i think your answer is wrong can you recheck your math format and then at the end it was like oh yeah you're right sorry about that here's the right answer plot twist that actually wasn't the right answer either eventually i got deep in the code and figured out with the right offset number was and ran the script myself before i then went back and told chat gbt hey i think there's still a problem let's go back and look at the assembly dump yeah okay so it's 72 but it's 72 plus 4 because it preserves ebx okay so i just solved it myself i just changed it to 76. i'm going to ask chat tpt let me see are you sure that offset is correct i'm still getting a crash please consider all preserved registers on the stack what is the final buffer length as for 76. 76 there we go holy so i mean we got we got a shell right like and if if the flag were here i could just cat flag so despite its best efforts eventually chat gpt does solve the problem i rant about this here for a little bit so again like this is what i'm talking about dude it worked but i basically had to like notice everything wrong with the script i had literally i'm on chat tbt4 i had to explain all the mistakes to it if i could have written this exploit in less time then it took me to debug what chat gpt was doing wrong it shouldn't have taken verse 68 then i have to tell it hey 68 is probably wrong oh sorry you're right 72 are are you sure it's right and then 76. so i don't know i'm i'm unimpressed so if you're going to do a capture the flag this weekend do i suggest you use chat gpt to help you write your exploits no i think chat gpt is currently in a spot where it's not super useful for export development but we'll see if that changes with chat cpts 5 through infinity and as language model gets more advanced and while chat gpt may not be able to hack into your server and steal your password password breaches are still becoming more and more common every day that's why today's video is sponsored by ubico an easy way that you can secure your personal data online is by incorporating two factor authentication into your everyday life if a hacker gets access to your password they can use that password to log into your accounts and do evil things with your data but adding a security key to your security toolbox is an easy way to protect your identity online the ub key from ubico is an easy to use two-factor authentication solution in the form of a security key that makes adding a second layer of security to your accounts super simple and the best part is ub key is supported by tons of services like the google g suite cloudflare aws and even coinbase just plug your eb key into your device and then add the ub key to your service the next time you log in you'll be prompted to use your key touch the key and you're in ubikey also comes in a variety of form factors and connectors like usb-a usbc and and thunderbolt for ios devices they also have an nfc option that works with mobile phones like android and iphone this way the next time hackers try to get into your account they just won't have that magic touch if you use my discount code right now low level 5 you can get five dollars off your next ub key that's 10 use it now before it expires thanks again ubico for sponsoring this video