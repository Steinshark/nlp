i'm going to be showing you why you should never import everything from a module and what i'm talking about is this syntax here from my module import asterisk this is something you should avoid at all costs because it will cause a lot of problems but let's get started with the first example so i'm going to import from requests everything as well so we're importing all of the functionality from two independent modules we're going to create also a main function to take care of our code and in here we'll have a url of type string which is going to equal the best website in the world which is python-guide.com then we want to create a response which will be of type response and we can use that because we imported everything from requests so that's quite easy of course and that's very convenient and it's going to take a url which will be set to the url because that is what the documentation requires us to do it requires a url and it's going to return to us a response object next we want to print the response dot status code and it's really not helping me out today and that's because i did not use dot notation so it's my fault as usual but after that we want to run the code so we're going to run main if the name is equal to main check succeeds so with that being done we can click on run and for some reason we're going to get this type error that we got an unexpected keyword argument for url and that's actually very confusing because i mean we read the documentation we understood that that's what it takes as an argument and usually this would work quite well but today we did something very stupid and completely by accident so if we go to my module you'll see that we also have a function called get inside this module which means that when we're importing everything from my module we're actually overriding or shadowing the namespace of the original get method that comes with requests and as you can see that can lead to problems because even if we have the documentation for the one from requests we're actually using the one from my module which gives us very little room for errors because the error message inside the console is not really telling us anything important we got an unexpected argument for url but why is that why is the get giving us that when usually it wouldn't and this might even become harder if you don't even use the keyword now it's going to say attribute error that string object has no attribute of status code we know that this is a response object yet it's still giving us that string has no attribute for status code because now by inserting this website into my silly function here that just returns whatever you insert it's going to give us that object back so now this is actually a string and type hinting doesn't help us here the error message doesn't help us here that much and we're just confused and lost at this point because now get is not doing what it should do and that's the problem with importing everything from a module you're importing everything all the names and all the functions from that module without really knowing what you're importing so you need to be particularly careful if you're doing it with more than one module because it can easily shadow your code and as a consequence of this the order on which you define your imports matters a lot which is something you never want in your projects the order of your imports should never matter of course you can find a way to organize them but it should not matter whether you're importing my module first or the request module first that is something you want to ensure does not matter so we got that out of the way but the next thing i want to show you is what we're importing into our namespace so from pretty print i'm going to import pretty print so we can have so we can format the print very nicely and then we're going to pretty print the globals in this current namespace so if we run that we're going to get a lot of globals back we have successfully polluted our namespace with everything from the request module and this is something you definitely do not want especially with bigger projects the only place i can particularly recommend using import everything is if you're building something that only uses one module maybe you're doing some math for some finances and the only module you're using is the math module that might be a good scenario to use it but once you have several imports this becomes a very bad practice and one more thing i want to mention is that a lot of people believe that importing everything actually takes a lot more memory than just importing specific functionality and according to raymond hettinger one of the core python developers this is not the case it makes no difference since they execute and cache the entire module just like a regular import in other words when you import a module it has to evaluate all of the functions in that module regardless it doesn't matter if you import one or another so it has to look through that entire module to find that specific piece of functionality and then it can import it as we did over here but both of them have to load the entire module to find it i also decided to use chat gbt to understand whether it could have a performance impact and it said the exact opposite of what one of the core python developers said chachi bt said it reduces memory usage i asked chachi pt to prove it so it gave me this code this code doesn't run because you can only use the import all statement on a module level chachi bt apologized and generated a whole new test now i have a little game for you try to spot the differences between these two tests so that probably didn't take too much time there were no differences in what chachi pt gave me i absolutely love chachi pt but that's just about everything i wanted to cover in today's video if you have any extra information regarding this topic i would love to hear about it in the comment section down below but with all that being said as always thanks for watching and i'll see you in the next video