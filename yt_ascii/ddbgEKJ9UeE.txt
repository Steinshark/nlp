so i wanted to do something a little bit different i wanted to start a new section in the prime time because all we ever do is reread articles and that's it but i feel like there's more that we could be doing and so something i've been really wanting to do just lately is i want to be able to have like a news section so this is the first news section which is here's a brand new thing coming out by oh camera this is going to help get you smarter know what's happening and at the same time you get to enjoy tj me or just me or maybe we'll get milky or some other people who knows nice yeah i know we'll get a whole crew of people doing the news together so today we're talking about announcing o camel wasm organization now i'm not sure what it means to announce an organization but to me this means that i forgot to place a marker and flip is going to be very upset at me hold on right now marker oh camel gets awesome flip is gonna be so happy dude he's gonna be so happy i gotta turn off alerts hey dude i'm just doing a great job right now just doing it it's gonna be so happy with this keep this in honestly people love to see how happy flip is gonna be in the video flip if this isn't in the video we're gonna be upset no the people what they really like is when i go hey flip can you take that out and then he doesn't take it out your editor is real good literally caught in 4k like flip what's going on buddy every time i swear most unreliable all right anyways he does great on my videos though just saying it's true flip [music] flip time news channel we are now doing announcing the oh camel wasm organization we should mentioned two prime if you have news that you think should get announced probably submit it to the subreddit that's a great point if you go to reddit.com r the prime time react or actually the primetime react boom you get it i don't even know i just know the link i don't know the link my browser fills it in okay that's all it is but real talk actually i'm actually super excited about this because if we can get leptos in ocamel end game people are done people are done you can't game over game over because i understand why rust probably won't get it but oh camel it could win by chance yeah all right we are happy to announce the creation of the oh camel wasm github organization which will work towards webassembly was some support for ocamel and so if they're so when they have a github organization does that mean they're actually putting people on it or that they just literally created a github organization which i have a few and you know it's not like when you were gonna do the parsers foreign masters really needed me to work on some courses okay i i got distracted no there's there's some stuff actually inside i'm pretty sure we'll read some more and confirm but i think there's some actual work going on the goal of this organization is to enable users to build high performance and secure applications for wasm platform using the ocamel programming language and platform tools i know that's i mean i guess we won't be able to use htmx but htmx claims that they pair greatly they said secure so i think we're just out of luck oh yeah secure classic non-secure hdmax blossom is a binary instruction format designed as a portable compilation target for programming languages enabling deployment on the web for clients and server applications it provides a sandbox execution environment which also makes it attractive for both blockchains blockchain technology blockchains yeah i don't know if you've been to because blockchain.com but if you haven't been it's one of my favorite websites because you just link this in a tweet and that's all that shows up so back in the heyday when everyone wanted to solve something with blockchain you would just literally because blockchain.com and all it would show is just a big image because blockchain smart i know it's good it works every time and cloud deployment for example fastly's compute at edge platform is based on webassembly so it's like wasmer io fermion is based on it there's quite a few things now that are really pushing hard on this whole awesome as a back end which is kind of interesting well yeah so you you don't have to have javascript to be your edge compute it makes sense got him the camel wasm organization brings together the ongoing efforts at compiling o camel to awesome so so are you actually going to use this do you have any use for this tj do i personally have any use for it i would well i'm interested in it like because there's already some ways that you can compile okay i'm old to javascript right yeah but then it's still running javascript so then you know there's lots of i think sorts of things where you would want to run whatever it's going to be but with wasm instead of js like i just saw i think it might have even been linked here somewhere later there's like a a game boy emulator but compiled to wasm or so you can like run that in your browser like that's pretty cool you know that would be pretty cool i could like that so so i think there's not not every website necessarily needs wasm but i think for the ones that do it would be cool to explore where that is and maybe once it's easier to do and you can write it in other languages and the deployment story is good and right like all the sorts of things that they're doing with extensions to awesome maybe it'll make it more practical just like i wouldn't have wanted to build i mean i still technically don't but like i wouldn't have wanted to build some of the things people do with javascript today that run in the browser 20 years ago right like it wasn't ready then to do it yeah so maybe maybe there's something something happening there for wasm too so i don't know for me because i don't know anything about the browser but wasn't still seems cool i guess the other thing is like wasm isn't just for the browser right there's like there's talk for any of them not not anywhere like near completion but like what if we could embed like a wasm runtime or you know you could embed wasm run times into other things and that'd be pretty cool because then you could just run okay more on any of those platforms as well yeah it would definitely reduce some of the complexity of writing different languages to be able to run and stuff it'd be neat i think one of the hard parts i have with just wasm at least in its current state is error handling air handling is always kind of a pain i just find that you you really truly can only rely on printf and if you're doing printf in the browser with rust which rust right now is like the premier web assembly item it just feels like you know the cycles are really long trying to get it to the point where it needs to be and so i'm not i'm not like in love with it right now i'd love to see slightly better stuff hopefully one day hopefully one day alongside this effort terror rides oh i missed this part oh campbell pro has been developing oh was so camel was so camel an experimental compiler back-end for oh campbell that targets wasm starting from the flameda oh what now they're just made this is like flavity five they're like literally making up words at this point intermediate representation of the oh camel compiler oh camel pro engineers have been contributing to the wasmgc working group to ensure that the gc and other extensions in wasm are amenable to target oh camel okay so i do have so the flammeda thing that's not real is from it's like a fork of the okay ml compiler focused on trying to make a bunch of performance improvements and they have some like intermediate representation and some stuff but it's like actively used and i think it's the one that jane street does a bunch of stuff with so it's kind of like they're working in this world that is like partially upstream partially not i don't know all the details but anyways that's kind of just the background for that look at me just not even believing you i just yeah well i'm aware that you don't believe me that's fine this is this is a public service announcement it's not a prime service announcement is now using flamda as its intermediate representation you're just like don't say it like with a w this isn't rust we don't say fuemda that's a rest kind of thing paris of o camel a tool chain to compile oh camel to webassembly based on the battle tested js of ocamel compiler both jsfo camel and wasm of o camel use o camel bike code as the input into mid javascript and wasm respectively okay that seems like a really big w right there if you already have the bytecode and i bet you by code you know there's probably a lot of one-to-one stuff you can do with by code from oh camel to wasm but then there's probably a bunch of stuff that is fairly tricky yeah seems pretty cool i like that it is notable that these efforts started off jointly a few years ago with an exploration aimed at adding a wasm back end to a camel at the time it was clear that wasm did not have enough features to support ocamel efficiently but the implementation of several key wasm extensions in browser engines the time is right for this effort okay so that sounds cool i do really like that jane street and these other there's there's more than one company putting money where their mouth is making this into a better language because for me that's the big thing is that you want it to be able to move fast but you also need just a lot of money going into open source for this to be successful and it seems like it is and it's cool that in general a lot of these things are aimed at trying to find a way to get resolved sort of upstream like in some way whether that's like a definitive open source community like with this organization or like literally getting it merged into the compiler so that seems cool yeah yeah i haven't was them actually being on the wasm runtime gc group just to make sure it all works out i think that's a smart move there exist other to running o camel programs using wasm run times where the speed of generated code is less of a concern for example a relatively straightforward approach is to compile the o camel by code interpreter to wasm and interpret the bike code programs oh camel run awasm and wazi camel are ports of the ocamo by code interpreter tawasm wazi camel furthermore has a compiler mode somewhat similar to wasma volcano but simpler that parses by code executable and translates it into wasm okay so i assume wazi camel is supposed to be something akin to wazi time yeah it must be yeah that's like so yeah you can run this instead of okay yeah i don't know if you know but there's basically like two primary compilation stories for o camel the first one is a compilation two byte code and then there's another one that compiles it to native right so they're basically saying like oh well we'll take the the byte code compilation output and then we'll try and almost run like an interpreter right which is a pretty cool strategy at least for those projects that's pretty interesting okay i like that i like that plan i also think it's pretty cool that they have those two different ones does that mean oh camel can run in interpreted mode yeah you can you can compile it to like a bike well i mean i guess it depends what you mean but you can compile it into by code and then you basically run like an interpreter for the by code it's my understanding there's some sort of opam installable that's like camo runner yeah you just gotta get the benad jesuits to make sure that they do theirs use the voice and then after the hard part is is that all the things in dune are really really hard to say and so you really can only select a few a few things no one knows even how to pronounce or how to spell moab deep correctly looking it up you know it's so true yeah shiloh who's like this was not gonna work out did you just say shia labeouf all right let's keep on going wazam is involving standard wasm 1.0 focuses on low level support for compiling low-level languages such as c and c plus plus there are several extensions under development which aim to provide support for targeting high-level languages including garbage collection tail calls stack switching and threads so this is incredible because that means goes gonna really be able to take off in this as well in particular the awesome development process is completely open and anyone can participate in the evolution of wasm the ocamel pro engineers contributed one to the wasmgc extension with the help of the experimental flanda yeah right so awesome compiler both okay clearly and tolerance engineers are actively involved with the wasm development process on multiple fronts having more than one approach to compiler oh camel to wasm allows us to build comprehensive evidence and make informed arguments to influence the design of wasm extensions in addition a major implement education effort is the runtime system support for wasm compiled ocamel code which will be shared between the different ocamel tawasm compilers oh nice okay and interesting well this is really big so i i mean i think we're kind of like on this precipice of wasm becoming a real thing i still like i i understand why javascript wins a lot of the edge arguments why you want to run it in a lot of these things because you just have like they're able to set up a really high performance router written in a real language and then they just call into v8 and have it just like load your code which sucks and then execute your code which is awesome and then tear down your vm so you're like you don't have to worry about memory you largely don't worry about performance in the sense that you use zod all over the place and zod can execute like' rps per second by itself right like it can like that's it that says maximums that it can do no comments right and so just like i'm gonna use super json to encode and decode everything which also by itself can only do like 30 rps so then you have like you're down to like four rps but since it's serverless and edge you just don't care as much and i think you can get away with a lot more because you can just have shitty programming practices but it allows for wasm to have the same effect and you get a better engine to do it because wasm can execute immediately whereas javascript you still have to parse it even or even the byte code if you just can if you can pre-compile and just have by code you still have to interpret the byte code and then v8 is still going to keep track of all the jitting it's going to create a whole bunch of memory around it it's going to do a whole bunch of things it'll even jit some of your code as you run if you run a function more than you know three times and so there is still like a whole thing that could be just completely removed if you didn't if you could just use wasm so i think there's a lot to it i'm pretty excited about it at school that they're working on you know not just making it good for oak camel but they're trying to work on these extensions that i think like you mentioned making go work better for wasm is also a win yeah like that's also a win for sure that's really cool yeah because i know back in the day one of those big weaknesses for wasm you had to ship like a mega megabyte and a half binary for garbage collection and so like yes you just kind of you're already your doa by the time it even happens and so it seems like a win even though i don't like the idea of garbage collection in blossom i think it's still we'll just allow a bunch of languages to be successful right i mean that's basically the thing right is there are a lot of languages who have a garbage like collector right and they need something to collect the garbage when they're running in wazen land right so that makes sense yeah all right well hey thanks for joining us thanks for bringing this art appreciate it awasma jen there you go well you're supposed to self-promote this is your time to self-promote nice self flip edits is my editor great job flip on this video i'm sure oh [music]