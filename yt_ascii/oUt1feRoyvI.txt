hey everyone, welcome back to
 mcoding with james murphy. that's me! today, i'm getting you up to 
speed with your abcs. wait, can i say that, or is this 
going to get flagged as "for kids"? no, not the alphabet abcs of course, 
i'm talking about abstract base classes. specifically, the abstract collections 
defined in the collections abc module. i'll talk about when and 
why you should use them, including both their typing and 
runtime use cases, and their mix-in use cases. then, we'll finish up 
with an example where we use an abstract collection to 
implement this "invertible dictionary" class. it's just like a dictionary that 
you can use to map keys to values. but you can also map those values 
back to their starting keys. let's get started by taking a 
quick look at the collections abc docs. the first thing to notice is that 
there are quite a few of these abcs. their primary purpose is to serve as 
sort of an interface to some of the built-in tools. so, if you wanted to write 
your own version of that tool, you just need to implement 
these methods to conform to that interface. some are very simple interfaces, like the 
`iterable`, which just needs to define a   __iter__ method. others, like the `sequence` or 
`mmutablesequence`, require a few more methods. so, if i want my type to 
be considered a sequence, i should deine a __getitem__, __len__, __contains__,
 __iter__, __reversed__, index and count function. if you want your type to be considered a 
`sequence`, you do need all these methods. but these are also abcs. 
you can use them as base classes. and if you use them 
as a base class, then really you only need 
to define things in this middle column. so, if i define `__getitem__` and `__len__` 
and inherit from `sequence`, then python will provide default 
implementations of the things in this right column. also, notice that there's a `sequence` 
and a `mutablesequence`. there's a `set` and a `mutableset`, 
there's a `mapping` and a `mutablemapping`. remember, these are just interfaces.
so if you annotate something as being a `mapping`, that doesn't mean it 
also can't be mutable. this distinction has more to do with
type hinting as a way of telling your callers that you're not going to modify their map, 
rather than defining a type that can't be mutated. although that's also 
a possibility. obviously, there are too many 
of these to fully cover in one video.  so that's why i'm announcing a 15-part 
sequence... no, i'm just kidding. there are just a few that are the 
most common that you'll actually use. `iterable`: stuff you can iterate over. `sequence`, and `mutablesequence`
 are abstract versions of a list. then there is`set` and `mutableset` which 
is the abstract version of a set. `mapping`, and `mutablemapping` 
which are the abstact version of a dictionary. i recommend just coming back to this table 
if you ever need to remember what's part of the interface. for the rest of this video, i'm just going 
to focus on `mapping` and `mutablemapping`. so, on to our first example 
use case: type hinting. here's a very simple function 
that's meant to take in a dictionary and just delete the 
entry with the smallest key. if it's empty, we 
just return. we don't error. we find the smallest 
key and then delete that entry. now, i'm not saying that you 
should be typing all of your code all the time. i think type hinting is an 
optional feature of python, as it should be. one of the main benefits, 
of course, is autocomplete. because i haven't type hinted `d`, pycharm is 
giving me basically no good suggestions here.   but if i annotate it as a `dict` and try again, 
now i'm getting a lot more relevant suggestions.   and yes, you can get even better suggestions 
if you specify the key type and value type. but one issue that a lot of people don't think about 
is how restrictive this can be for the caller of the function. as the author of code like this, it might be 
most convenient to specify an exact type here. but if this is an internal function and 
there may be other people calling your function, putting this type in here actually 
becomes a restriction. doing an `if` check, 
finding the minimum key, and deleting a key 
are not specific to the built-in `dict` type. if a user has something like a custom dictionary type, 
maybe they're wrapping a dictionary type,   they might still want to use your function, 
and your implementation might still work for them.   but because of 
your restrictive type hint, now their editor 
is going to complain that they're doing something 
wrong when, in fact, maybe it's just fine. in many cases, if you've 
hinted something to be a dictionary and it's a public-facing api, consider that 
a `mutablemapping` might be a more flexible option.   also, note that our use of 
`mutablemapping` helps inform our caller that we do intend to 
mutate their dictionary, which may not have been 
apparent if we had just annotated it as a `dict`. but type hinting isn't the only 
use case for these abstract collections. it's possible to check, 
and a lot of code does check, whether something is an instance 
or a subclass of one of these abcs at runtime. this allows you to react differently based 
on the structure of the object that you received. something that is actually quite 
useful in a dynamic language like python. here we're defining a `deep_min`, 
which is just like a `min`, but it will also traverse any 
structures like lists or dictionaries and go inside of them 
to find the smallest element. so even if i had this 
nested list of numbers, `deep_min` would still find this 
zero and pick that out as the minimum. if something is iterable, then we just recursively find 
the deep_min and then take the minimum of those. but specifically for mappings, 
we may not be interested in the keys. we don't want to find 
the minimum key. so if we do see a mapping, then we 
only recurse into the values, not the keys. and if we get something 
not iterable, like a number, then that's our base case 
and we just return the value. it's pretty common for a library 
author to do this kind of switching. and if they do, it would typically be based 
on one of the abcs in the collections abc module. there's also a lot of python 
internals that use this machinery. for instance, if you're using the 
`match` statement from python 3.10, then a case like this that 
looks like it's using a dictionary will actually match 
against any mapping type. if you want your custom type to pass
 these `isinstance` or `issubclass` checks, then you can, of course, 
inherit from `mapping`. or if you don't want to or 
can't inherit from `mapping`, you could also fake inherit 
from it by using the `register` method. this will make python treat this class like it's 
a subclass of `mapping`, even if it's not. now, you're basically asking 
python to just trust you on this one. so if you do this, then make sure 
that you actually implement the interface. otherwise, weird things might fail. alright, so how do we 
actually make our own mapping type? we're going to see by implementing an 
"invertible dictionary," which is like a two-way dictionary. it can go from keys to values, but it 
can also take values and go back to keys. of course, type hints are 
completely optional. but i think it actually clears 
things up in this case. so i will go ahead and 
put them in. `kt` and `vt` stand for key 
type and value type. we're going to implement this `invertibledict` 
by just having two dictionaries a forward dictionary and 
a backward dictionary. forward maps keys to values, 
and backward maps values to keys. we'll go ahead and use slots because 
why not? see my video on slots. for this example, we want to 
actually inherit from "mutablemapping" because we want to take advantage 
of the mix in default implementation methods. going back to this one 
with the table, we see that if we define __getitem__, 
__setitem__, __delitem__, __iter__ and __len__, then python will define all 
the rest of these methods for us. meaning we don't have to define 
any of these standard dictionary functions, or any of these mutating 
dictionary functions. the abstract base class will provide default 
implementations just using the files that we did provide. so we go back to our implementation
 and these are the five we actually need to define. after we define those five, then we could use 
our class just like we use dictionary in most cases. everything else is either extra 
functionality like inverse function or typical customization 
point like a __repr__ or custom implementation of something 
that could have been provided by the abc. we will see 
more on that later. of course, the way we write these 
five depends on the structure of our class.  the way i've designed things, our class 
just stores the forward and backward dictionaries which we initialized in 
the init function. typically, we would just have the 
user pass in the forward dictionary, and then we would just 
compute the backward one. depending on what they provide, we
 either start with an empty forward and backward or we start with the forward they 
give us and compute the backward. or, if they provide this backward parameter ,
it's kind of like a secret parameter, then we just use it. it's kind of a convention in python 
that if you have a keyword-only argument that starts with an underscore, it's 
kind of like a private implementation detail. of course, it doesn't actually 
stop anyone from using it, but that's the way that 
we're going to be using it. so our own internal functions like the `inverse` function 
might want to provide this backward argument, but a typical user 
shouldn't be providing it. the specific details of __init__ 
are actually not that important. just keep in mind that `forward` and 
`backward` are just plain old dictionaries. so when someone goes to look 
up a key, how do they do it? well, looking up a key is pretty simple. 
we just look it up using the forward dictionary. similarly, the length of our dictionary 
is just the length of the forward dictionary. and the way that we iterate 
over the keys of our dictionary is just iterating over the 
keys of the forward dictionary. the mutating functions like __setitem__ and __delitem__ 
do have to involve the backward dictionary, though. we'll go through it slowly, but just keep in mind 
that the mathematical invariant of this class is that the forward and backward dictionaries
 represent inverse mappings of each other. they should define a mathematical
 one-to-one correspondence. a key maps to a value from 
the forward direction if and only if the value maps 
back to the key in the backward direction. so let's take a 
look at __setitem__. taking a look at the end here, what 
we ultimately do is maintain that class invariant that the forward and backward 
are inverse maps of each other. in the forward map, we map key to value, and in 
the backward map, we map value to key - simple as that. all the rest of this is to handle the cases where 
either the key or the value already existed in the dictionary. this checks whether the value that we're trying 
to set already has a key associated with it.   if it does, and it's a different key, then 
we're trying to break the class invariant. we're trying to create two different keys 
that map to the same value - that's an error.   this would happen if i started with the dictionary 
like `{1: 'a'}` and then tried to set `{2:  'a'}`. that's perfectly fine 
in a normal dictionary. but this is supposed to be 
an invertible dictionary. so if i had `1` mapping to 
`'a'` and `2` mapping to `'a'`, then what would 
the inverse of `'a'` be? that would be an error, 
so we just raise an exception. this next case is for if the key that we're 
trying to set already existed in the dictionary. for instance, say 
that we had 1 mapping to a, so in the backward dictionary, 
we have a mapping to 1. we could set 1 mapping to b 
and b mapping to 1. that's fine. but that backward dictionary 
would still have a mapping to 1 in it. so we need 
to delete it first. it's okay whether or not the values were
 equal. we're just going to reset it right here anyway. then we get to __delitem__, which
is thankfully much simpler. we're given the key, we look up the value, 
and then delete it from both directions. not too much going on there. 
and that's all five! because we defined these 
five, we can now use our `invertibledict` just like 
we would any other mutable mapping. now, the most fun/elegant part, in my 
opinion - how do we access inverse elements? you might be tempted to do 
something like make an inverse_getitem function that takes values and gives 
you back keys, and you could do that. but you would end 
up rewriting a lot of code. you need the inverse __getitem__, __setitem__, 
__delitem__, __iter__, and __len__.__get__ but wait, those are all functions that are 
provided by `mapping`. i'm just describing another mapping. so what we do instead is provide one extra 
function to access the inverse. we make a `.inv` property that just 
swaps the forward and backward maps. forward and backward are already inverses of 
each other, so i don't need to do any extra work. i just create a new `invertibledict` whose 
forward map is my backward map and whose backward 
map is my forward map. then, check it out - 
we can use it just like this. we create an `invertibledict`. we can print it or print its inverse. we can check that 1 maps to a. and we can check that 
the inverse of a maps to 1. then we can assign the 
inverse of d as 4. and then check that 4 maps to d. this works because the function and its inverse 
are sharing the same underlying dictionaries. modifying the function is modifying the inverse, 
and modifying the inverse is modifying the function. because i defined a repr, 
we can print these things out. the repr only shows 
you the forward dictionary. so if we print the function, we see 
`{1: 'a', 2: 'b', 3: 'c'}`. and if we print the inverse, we see 
`{'a': 1, 'b': 2, 'c': 3}`. and then the second lines, 
we can see that setting the inverse `'d'` as `4` actually sets both of them. this can be extremely useful when you're 
translating between two different representations of a fixed number of objects. a way to tell if you might benefit from using 
this kind of invertible dictionary is to ask yourself: do i have just two dictionaries that have 
the same data mapping in opposite directions? like, if you had two dictionaries 
`int` to `char` and `char` to `int`, that's the kind of situation where you might have 
data on either side and want to convert between them. so feel free to use this idea! alright, i do have one more 
practical piece of advice on the matter. we saw an implementation that 
was inheriting from `mutablemapping`. and `mutablemapping` was 
providing a bunch of functionality. it defines `pop`, `popitem`, `clear`, `update`, 
all these things, and it defines them correctly. but that doesn't mean that these 
default implementations are the most efficient. for instance, look 
at how it's doing `clear`. it's basically got a 
`while true` and tries to pop items. it's popping items off one 
at a time until it gets a `keyerror`. now, for a general `mutablemapping`, that is 
sort of the most general thing that you can do,  that would be correct - pop 
things off one at a time. but our implementation is using two dictionaries, 
which both themselves have `clear` methods. we don't need to pop 
things off one at a time. so for efficiency sake, you may find
 yourself re-implementing a lot of those functions that you were supposed to 
get for free as mix-ins. from my own experience, i've definitely 
found that to be the case, especially for the more 
complex interfaces like `mutablemapping`. and after a few months or maybe a year, 
i've re-implemented everything that was a mix-in. at which point, i may even 
no longer inherit from `mutablemapping` and instead just use a typing 
`generic`, or not inherit from anything at all. just remember 
that if you do this, you will probably want to make 
your class register with `mutablemapping` so that it will still be treated as 
a `mutablemapping`, a mapping type. and finally, for the more advanced 
typing users, unfortunately,   i'm not going to talk about one of the bigger 
benefits of using these interfaces. it has to do with covariance 
and contravariance of type variables, which, unfortunately, i just have 
not set up the prerequisites to talk about. but if your extra studios go ahead 
and look those up in the typing library. i'm sure there's plenty 
for you to learn. thanks to my patrons 
and donors for supporting me. if you really like my channel, 
please consider becoming a patron or donor. don't forget to comment, subscribe. slap that like button an odd number 
of times, and i'll see you in the next one. also, i have a secret giveaway 
for anyone who stayed to the end.