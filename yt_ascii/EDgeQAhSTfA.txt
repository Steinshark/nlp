how fast can you go those first few days where there's no code and someone comes to you and says can you get a feature done and you think yes you start writing code code pours out of every orifice of your body i'm liking this intro like uncle bob yelling about code pouring out of every orifice in your body i'm on team orifice por okay if i ever play world of warcraft and i start a clan it's going to be called orifice poror okay i'll probably get banned but i just want you to know that i think that's a pretty good name and you get that feature working and everybody goes whoo you got that working fast it only took you a few days h we're programmers can you do it again yes come back to that team a year later can you get a feature working for us tricky probably going to take us 6 months he used to be able to do that in a couple of days yeah but you don't know i do like this take i think the conclusion is going to be slightly mis misguided i like where this is going you don't know how it feels oh i know how it feels see this system has become why if we touch even one line of code all hell could break loose yep i've done that why'd that happen now here's the thing that happens to software teens right they start out fast they start out with a beautiful design and they start out lovely and they're fast and they write features and everything's working great but they make a mess because they want to go fast they make a mess and as they make a mess as the mess builds the team gets slower and slower and slower until they bottom out at 1% of their original productivity it's very true so i i i love that i love that i love that take i do not like uncle bob's conclusion to that take which of course is tdd and clean code i i don't think that that's a good conclusion right i am not not on team clean code i'm never going to be on team clean code i'm never going to be on what ryan winchester one time said ryan winchester i know you're in the chat ryan winchester ryan ryan ryan winchester ryan w right here ryan winchester said the following phrase which is where where did you say it where did you say it ryan where did you say it where where did you say it where's that where that oh yeah there we go remember back when we all read clean code and then to do one thing we wrote 25 small functions across several files instead of one 20 line function that you could look at and say i know exactly what the function is doing remember this i will never be a cleaning coden okay it's just that when you break up your functions continuously it is one of the hardest ways to run through a program i have so i do not like uncle bob's conclusion i am fine with slightly larger functions i am am fine with test testing at proper boundaries i am fine foregoing tests to get the initial idea out the door just to get the idea but like any good programming shop if you just if you simply don't have the right mentality set in which is anytime you you go for break net break neck speed you also have to dedicate time to try to reorder the project like if you don't do that it's difficult it's really really difficult and sometimes here i'm gonna say one more thing about this sometimes you don't even know what the right solution is and there's literally no way to know what the right solution is without first building it anyone that tells you that they can come up and just write out the design of a program first and it's super nice are full of the cleanest and most purest form of horeshit almost exclusively to be able to write pure and delicious cat that will live on and is extensible and all these things requires you to have clairvoyance like you just don't have it you're not seeing into the future and almost every time i see somebody try to predict the future they build an abstraction that when we extend it becomes much harder not easier don't abstract wait for the correct thing to come out void star the ultimate abstraction who doesn't love a little good void starring from time to time okay anyways let's go back to this video because i i do want to watch this video i'm hoping that the sound isn't all jacked up now that we're switching and this is what i got right i put this case statement in the front that trapped all the execution paths yeah i have a bunch of methods that look like this that i created and added to the gilded rose okay what language are we even looking at here okay i see a case when i'm not really sure what in case when are we like is this fortran what is this what is this ruby this is ruby this is dhh slang okay class and the rest of the tick method still contains that monsterous 43 line of statement which i don't understand but i no longer need so i'm just going to delete it it's gone now if you don't have good test this may freak you out and then but then if you feel freaked out by this and you don't have good tests you're really making a choice here right if you have code that you don't understand and that you're afraid to change you can keep it forever if you think that's a good idea or you can put some kind of test furnace around it so that you can refactor like keeping it forever is not really a good choice so you want to get to the point where you have confidence that you can safely refactor and then you but it means you never have to understand that code you can do characterization tests around the edges so that you'll have green you wall at your back for test and then you can refactor your way to the point where you can delete the code that you don't understand short fiction has some really interesting that's not a bad approach i mean i i like that i like that you have to be able to test at the proper boundary level and then being able to just simply i mean the hard part is that if you don't understand the code how are you supposed to understand every test case i mean that's like the fundamental problem with that statement is that if you don't know exactly what you want then and you cannot understand the code like what what how how are you to refactor such things like i i i not i like i love the idea i'm not quite following the logic and second off every time i've seen code written really bad like we're talking like really bad and i think i could fix her then i rewrite it about 3/4 way through i realized an edge case i missed so i go back i fix that edge case oh no my code's starting to kind of look like the previous code i go forward again run into another problem have to fix my code oh we're starting to look a lot like the previous solution so we go forward n there's one more thing i missed well oh i just rewrote somebody's code and it looks identical like yeah maybe it went through a slight brain trans translation but it's the same thing so whenever you see shitty code you have to first ask yourself why ask the person that wrote it if you have the chance why is it written this way like what could you walk me through it and as long as you have a good coworker that will actually take the time to talk to you and walk you through things you know i know not all co-workers are good like that some of them do not want to do any of that i get it but if you do have a good one they will walk you through and you'll be able to understand it and it just makes a lot more sense you know what i mean and then you realize why and then maybe you could rewrite it maybe you could rewrite the code but maybe if you rewrote it you'd still arrive to the same conclusion you know what i mean it's a hard one it's a hard problem and i'm under no i'm under absolutely no like conclusion that i somehow i'm going to write it better creative crossovers and contradictions with the world of software development but you can always tap on it for a great series of quotes because people write well one of the interesting challenges that we have here william f is quite there are a thousand thoughts l within a i can't believe this is called go-to conference second off the inspirational music plus all these like little cutout moments it's kind of ridiculous but i we're going to go we're we're going to do this okay that he does not know till he takes up the pen to write this is the very situation we find ourselves when we try to plan a piece of software when we sit down and say i can conceive of the whole i'm going to write this down i'm going to analyze and design i'm going to do it all up front the minute you start writing the world changes you suddenly real that's a different way of doing this and if you don't realize it because unlike most writing software development is a team activity somebody else will realize it and it's normally for a person so the other person will realize it so this is one of the interesting things is that it doesn't matter how hard you think there are several st that try to i don't really quite get that last one i mean me personally i would just say right write an mvp of it wr a prototype of it yeah these microphones are actual potatoes there are several studies that try to quantify what's the impact of interruptions in our work as developers and it seems that every time that we are interrupted we waste between 10 and 15 times of time of 10 and 15 minutes to glow back into the context of the task that we were i really have to question this hypothesis i know we state this all the time this like yeah when you're interrupted for 15 seconds it causes 25 minutes of dist distraction it's like does it i'm gonna i'm going to hit you with something real for a quick second if you're working on a problem for like an hour or two hours and then someone comes up and asks you a question and you out every possible context and you have to start back over from the from the ground to re-remember what you're doing i'd be a little worried you know like personally i would be a touch worried now you may forget a little here a little there i get that i get that but to forget absolutely all context that's goldfish driven development i i you need to get you need to get on those omega-3s okay i need you hitting some omega3 drink a little bit of coffee and sleep in your bed for a while okay you need to get better sleep you need to eat better and you need to exercise because whatever's happening upstairs that ain't right okay when someone interrupts me and something happens yeah i might forget like the latest moment i'm on maybe maybe i'm a setback just a touch but it's not 50 minutes if you're if you're distracted by 50 minutes i got a lot of questions do you remember all your code absolutely i don't remember code i've written three years ago but 15minute distraction is not three years ago code nobody remembers three years ago code everybody knows that code really l you you genuinely think hold i got to hear this i got to hear i got to hear it hit me hit me with facts so you're telling me when you get distracted for for 10 minutes you completely forget everything shut up tj is that what you're trying to tell me i gotta know i gotta know it's super complicated business logic yes so you literally forget everything in 10 minutes you know that ron burgundy you know that ron burgundy one where they're just like i don't believe you i feel like that's what i you know like i don't know how complicated things have to be for me to forget everything like yeah i'll forget maybe something maybe i won't have it all perfectly in my memory anymore but like a 15minute break makes you forget all the things like an o camel out of 10 do you forgot everything i'm doing pretty good remembering a lot of things from when i i pied it up it's not just that i forget what i was doing it's trying to clear my head of what i was distracted by really like i get that you have to you you slow down for a second maybe i think it okay what so when you change tasks you continue to think about your previous task you don't just like straight just dunk it what what why why are you thinking about something why it sounds like some of you need to take a piece of paper write down what you you need to think about later and then just focus on the task at hand instead of trying to think about two things at once it's probably neurod divergence it's neurod divergent that's how the brain works okay well then my brain doesn't work properly i guess my brain don't work properly all right people saying that i i missed something i guess i'm a i guess i'm acoustic there are several studies that try to quantify what's the impact of interruptions in our work developers and it seems that every time that we are interrupted we waste between 10 and 15 times of time of 10 and 15 minutes to blow back into our head the context of the task that we were being interrup so to be efficient that we reduce the number of interruptions to a minim you you guys got to go code on twitch for a little bit okay i expect everyone that suffers from this problem i need you to start reading chat and coding okay i need you to take a little bit of time and train your brain to keep stack state okay you just got to pop you got to push and pop that stack baby come on come on push and pop that stack so that we have long period of time where we can focus on the task at hand there basically two types of interruptions the ones that you control and the ones that other people control the on that we control is probably the worst offender you think that little pap does nothing for your concentration the truth is that for your brain looks more like this millions of years of evolution have made our brains very sensitive to any unexpected movement mostly because of the fear of being hidden maybe my evolutionary brain broken but when something pops up i'm like i'm in the middle of this don't worry the notification symbol will be there later and i will be able to go and look at it i i i i i just can ignore it i just have the ability to completely ignore it i don't maybe i never evolved dude i actually a mony subject to sender and your brain is already working on it the first habit of efficient developers is disabled all notifications why so not just email notifications but all of them that's the point of a notification is it stays there until you check it why are you guys looking at notifications every time they come in what are you doing with your life it stays on your phone oh my goodness this is like the greatest bicycle meme i've ever seen bicycle meme stick puts it in why am i hurt why does this hurt me number notifications anywhere on your on your screen the only notification that you want to see and that one you want it on your face is the one that tells you that you broke the bill now i think email is amazing because it's a synchronous what happened if you get notified when you broke the build checkmate atheist checkmate evolutionist try again you can deal with it in bches nobody expects that you will reply to it immediately and you can choose when to handle it when to be interruped in fact i think we don't use email you know so i want to ask everybody that before going man you guys are really intense about this thing you can't be that naive someone said you can't be that naive like real talk it's called maturity like if you can't get a notification without checking it you simply have to learn to say no you have to take a time in your day to say no like if you cannot say no to your most base urges that's literally the definition of not being free the ability to not listen to your lower will is the definition and basis of freedom you got to simply learn how to have a higher will in your lifetime okay i'm sorry i'm having a hard time coping with this because i guess as somebody who's had to fight an addiction and quit a lot of really really strong vices in my life i've learned to say no i've also learned to protect myself and maybe it is just a parent skill maybe it is just the fact of having kids what addictions i used to smoke a little bit of methamphetamines and pornography pornography being the hardest cigarettes being the second hardest meth being actually the third hardest of them all to quit but saying no and and being able being able to control your lower will is really important control your lower will will it's your only true form of freedom right like you can't be free if you can't even control yourself yeah i mean i i think this is a good way to go about it too if you are too distracted that's fine turn off things but but it's hard turning off things when you turn off notifications you also miss things that you do need to respond to there's also just a simple important important hierarchy if you look over and someone says hey you don't have to respond if you look over and you see like the number seven by somebody's name because they've sent you like a bunch of extra bunch of things maybe that's more important to respond to i don't know i don't know i just usually use some sort of hierarchy of importance and i just don't like i don't need to respond to things right away almost nothing is intensely urgent very few things need to be resp like i see this my wife does this too where she will be responding to things that like in the moment that don't need to be responded to because they're not that important in the moment not all things need to be responded to okay just remember that they can be responded to later it's okay to batch response next time before going and interrupting one of your teammates to think twice if you really really need that answer right now because the same way you hate to be interrupted other people also hate to be interrupted so continuous delivery fundamentally is about making releases boring we want software dely should be a push button event that we can perform at any time including evenings and weekends and it should be something that's very low risk and and repeatable and we can use it for all kinds of changes whether those are networking changes database changes software releases i happy that there's things like continuous delivery and you want to make the the the developer to production pipeline as smooth as possible and you want to have the maximum ability to know when things are not working but if i ever ever ever hear the phrase make a change on a weekend and then the following phrase a change to a database ever again i i'm going to throw chop somebody okay if you make some if you make some saturday afternoon database change i swear you are being a bad person you're just trying to be mean don't do that don't do that rude like you only do that because that's what your company planned on doing like hey our company gets lowest traffic on saturday at 400 p.m. so everybody we're doing this really high-risk change database change at 4 p.m. crazy any kind of change to our production systems or app us running should be able to be done safely and quickly and sustainably how do we do that well it's actually hard and there are a number of things that go into it you can see there's 14 practices that we have found in our research program to continue delivery it's about making delivery simple how do you do it 14 individual practices with a map that looks like this you're just like what what why is less burnout an activity i need the partake in drive continuous delivery from things like trunk based development and continuous integration right through to things like monitoring and observability and proactive notification from production things like database change management how we maintain our code there's actually a number of things that drive continuous delivery so it's it's a pretty holistic picture e practices together that comprise continuous delivery don't just drive improveed performance in culture they also lead to teams that are less burnt out and that experience less pain during the deployment process and that see less rework and this is a nice proxy variable for quality what this means is by giving i think less rework is a good proxy variable for quality music choice is insane yeah this is interstellar we're we're just we're simply going to watch software talks with the idea of interstellar level anxiety in the background it's the only way to experience full developer intensity people be tools to build quality in they build a good quality work products that we find less defects in downstream meaning that we have to do less rework because it wasn't done right the first time okay i mean i like all the things that were said in some capacity or another it's just a little strange okay cu none of this was being more efficient like i'm not going to lie to you nothing here told us how to be an efficient developer nothing here like all those individual statements can be interesting i guess removing distractions could be good a lot of people it sounds like people really struggle with distractions in this audience it sounds like what you really need is maybe a dose of maturity more than you're going to need this oh man people are going to hate that people hate that answer by the way it's why i feel like i'm exclusively hated on tik tok is the answer to most problems i say is maturity people just hate that they're like no no no i will not it is why we use the phrase adulting because adulting is a phrase developed by children to avoid life hot take dropped it perpetual childhood perpetual adolescence suck on that the name is the primagen