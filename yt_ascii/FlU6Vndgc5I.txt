sometimes in python you're going to make these very silly mistakes that are kind of time wasting and in general the more mistakes you make in python the better because later on you start to catch on to how to fix these relatively fast and that's exactly what i want to do today is share with you one of the biggest errors i still make in python and it's actually a very simple error that happens quite often because i might be in a rush or something else and this has to do with naming things in python and let's jump straight into the code so you can see exactly what i'm talking about so here we have a normal project or a normal starter project as you can see we have no code in here but we do have main.pi and everything is just empty but the mistake i'm going to be talking about today is quite ridiculous and it happens to a lot of beginners and even not to beginners it also happens to professionals it happens to myself a lot more than i'd like to admit and that's because i'm a bit clumsy but let's jump straight into it so here we have our file of course and pretend we are learning something about maybe the time module or the requests module or we're learning something on youtube about a certain functionality that has to do with python so we name it according to that for example maybe you're learning about the math module so here you'll type in python and you'll type in math.pi because of course you're learning about math and you want to learn how to use math so math is a good name for you to name this file now here we're going to import math and you're going to think okay let's try to print the square root we'll type in math and we'll type in square roots and we'll say square root of 10. now if we run this we're going to get a circular import because right now we're importing math but we're importing math from math which means we're going into this kind of recursion loop of importing math and as a beginner you wouldn't really know what that means you think okay i imported math just like in the video why am i getting this attribute error but the fact is that you're importing the module that you just created and that might be easy to catch on thanks to your code editor but it's not always that easy because i mean again import results to its containing file that's not an easy message to read for a lot of people but fine let's pretend that this file is empty and we're not even writing the code inside math.pi we just created it and it's somewhere in our code base now in main.pi we can type in import math and we're not going to get any errors at all it's still going to allow us to use math we can say printmath dot square root of 10 and we have no code editor tips telling us that we're doing something wrong here right now we expect to be importing math because the documentation leads to math and that's what we expect to get as a return but again if we right click and run main we're going to get another attribute error that module math has no attribute of square root because the built-in module in python is being overrun by the one that we've created inside so this applies to any module that you're trying to create or import if you create a local variant it's going to override the main version and that's really not what you want now another example of where this can get you really hard and this is where i failed a couple of days ago i was trying to create a timing function so i said import time and i wanted to use the performance counter so of course being a genius and everything i went ahead and called my function time because i wanted to time the function and it should have been called get time right here you can see it's already highlighting it i didn't get that highlighting when i was working on it so i got a bit confused but the first thing i wanted to do inside here is get the start time so to get the start time you type in start and you can say of type float if you want and you would say time dot performance and this will give you a detailed version of the current time and then you would want to provide your functionality so you have a function inside here that you will call and we'll just type in func here because that's what we want the time and we'll get the end time which will equal time dot performance counter then if you want to print the time of that function you would print let's say and minus start and this will give you the time back so i was trying to use this earlier but let's create a fake function let's say hello it's just going to print hello so we want to time that function so what we'll do down here is say time and we'll pass in hello and when we run this we're going to get an attribute error that function object has no attribute performance counter and that's because we created a new local variable that took control of the local time variable which means now we did import time and we still get the methods for time but it's going to use the one that we defined earliest which means the last thing that we defined in our program is the first thing that's going to be used so even if we were to define a variable to equal 10 if we immediately say the variable should equal 15 under of course this one's going to be the one that gets used so this was actually the silly mistake i made a couple of days ago i went so far as to even just type in from time import performance counter and that fixed my issue of course because then i could just use performance counter without using time but i should not have named it after such a popular module such as the time or in the other case you should not name it after math you should give it a more descriptive name and you should try to be quite conscious of the modules that are built in because they are very easy to shadow and you will not always get a warning for them but the moral of this story is if you get an attribute error for a function that should work or for a module that should work there's a huge chance that you've either created a circular import or that you've overwritten that function with your own functionality probably by accident but that's actually all i wanted to share in today's video do let me know in the comment section down below what your biggest errors are in python what kind of silly mistakes you still make but with all that being said as always thanks for watching and i'll see you in the next video