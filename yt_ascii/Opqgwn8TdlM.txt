thank you for joining me and yeah we have a yuletide feast is it a your log what is it what's going on in the world of log files so there's been a an interesting i mean exploit maybe bug feature pick your appropriate sort of word to describe it that's appeared in the last few weeks pick your own word to describe it in a package called log for j2 which is a thing that michael talked about a bit that adds on to java that enables you to log things actually that's that's a little unfair because half the problem isn't in log4j it's actually in another part of java called jndi but we'll come to that let's let's start at the beginning as it were so are you sitting comfortably then i'll begin when you're writing software particularly software that communicates over the internet whether that's just receiving data or processing data or sending data one of the things you often want to do is to log what's happening you want to keep track of what data came in how did i process it what results did i produce that sort of thing so that if something goes wrong you can look back at those logs and think okay i got this data and it produced the wrong answer or i got this and someone was trying to hack into my system and i can see where they came from i can sort of see what was going on i've got some sort of record of what was going on in my system and one way you can do that is you can write that into a text file you can print it out to the screen capture that into a text file and things but often when you're doing these things your log files get more complicated you might want to log them into a database you might want to merge logs from several different packages together and so there's a package called log for j2 which is managed by the apache foundation which people use a lot i think the best way to describe it air oxygen water perhaps equivalent for logging in the java community i mean it's it's it's used everywhere if you look at where this is hit microsoft apple amazon apache you name it think of a company name i bet they've been hit by it me i don't run a company but mike's been hit by it personally so it's used everywhere so it's it's a big deal this thing because it's used everywhere what what's happened with you mike then well i mean it's not too too much of a disaster for me personally but basically we're running a rest api as part of some of our research that allows us to utilize some of our gpu compute infrastructure remotely right now as it happens it's not currently turned on this api so i'm not immediately vulnerable to it but i'm very aware that i'm using log4j for logging and i'm gonna have to go through i mean you know quite simply i can update log4j but what i really need to be doing is going and making sure that i'm not passing any unintentional user input into my logs right and off the top of my head i can't remember so this is kind of this is kind of the problem right you've got this you've got you can log anywhere in your application any amount of data what am i logging well i'm going to have to find that out and make sure that i'm not putting something where it shouldn't be and it's going to cause this problem that's so that sort of alludes to yeah what the problem is then steve so over to you then maybe so yeah so mike's been using this to log things and one of the things as we said is that you log is the data coming in because from a security point of view if someone hacks mike's server and i suspect it's not that hard to do because mike wrote it then you can want to be able to track back and find how steve hacked into it and so you can look at the log and you can see oh steve sent this set of information to it that caused some sort of exploit he then got root etc and things so one of the things you will log a lot is untrusted data it's data that's coming in from sources that you can't trust now that's fine except that log4j has a lot of features which make it very very nice for developers to use because as well as logging the data that's coming in you're probably going to want to log other information about your system what operating system it's running on what version of java it's running various stats about your own system and so what log4j does is it enables you to substitute in the strings that you log so you just log in plain text strings you say log this and it logs it wherever you want that log to go what you can log are variables you can sort of say dollar curly brace something curly brace and as it processes it'll take that dollar curly brace and replace it with some string that's defined i think it's in the hash table equivalent that you set up when you use it or there are some that can be pulled in things like the java version and so on so you can sort of log useful information alongside the data that's coming in now that sounds fine that sounds useful it sounds great in fact except that it does this recursively so when you log something it'll go through in any place it sees dollar curly brace it'll replace that with a string but if that string contains dollar curly brace it'll replace that with the expansion of that string and so on so it's just a recursive process but this also means that it will do that on any untrusted data that you give it so if i sort of make a web connection to mike's server and mike thinks i'm going to keep track of what's going on here so i'll i'll log the ip address so it logs the university ip address sort of 128.243.56.55 whatever it is i've just made that one up and things i hope that isn't a really useful server so it'd log that but it might also decide to say i'll log the user agent what sort of web browser is logging this and so it log that but if i'm a crafty individual then i could change that user interface to have a sort of dollar curly brace in it and then some stuff java colon version curly brace and log4j when it logs that string would replace that with whatever the current version of java is or whatever that's expanded now that doesn't sound like too much of a problem except it means that you can't trust your logs anymore because what you thought you logged is partially under control of you the programmer and partially under control of me the hacker sending you data so you've suddenly found that actually your logs perhaps aren't logging exactly what you thought they were and things but the real killer comes and this is what makes log4j so devastating and why people are really trying to fix this because people are using this is that there is another feature that was added i think was around 2013 which was the ability to use the java naming and discovery interface i think it is i can't remember what the i stands for to look this data up in other services so things like the ldap lightweight directory access protocol you can do a dns lookup using jndi rmi interrupt type stuff you can do lookups in there so you can ask other services to look things up and what someone found is that if you craft a simple enough string and you put it in something that's going to get logged like your user agent then that will then be expanded out and log4j will hand this string over to jndi and jndi will look at it and say okay this is ldaps colon slash then some address i think okay i'll go and talk to that ldap server and request information and so as a person who perhaps maybe up to some nefarious purposes i can send a perfectly well crafted string to mike's server or whoever server this is that gets that machine to connect to another machine now that's bad enough but and this is where it starts to get worse remember we said that the variable expansion was recursive so i can put that into the string that i wanted to connect to so connect to this ldap server slash dollar curly brace java colon version curly brace and find out what version of java they're running or what operating system they're running or get access to the environment variables and start to get information about what's going on on their system how their system is configured and so this leaks information from what should be inside their firewall their setup to me outside as long as i've got a server that i can control here and make them make requests up to that server and as long as i don't do this running on my own machine so they know exactly where i live and they can come and sort of arrest me and things then i can find that information and collect that information except that's not the bad bit that's only the sort of mild and sort of yeah the really bad stuff and i don't understand why this is even part of java but for some reason it is you can craft it in such a way that when you make that jndi request to the ldap server it can return back a java object containing code which the server will or whatever system is running this log4j happily then run untrusted code on your server which i could use or mike could use or sean could use to do whatever havoc that they want to do on that machine so the problem we've got is we've got the feature in log4j which enables us to make jndi requests from outside the software and then we've got the feature you can call it that in jndi which for some reason will happily go down and download a java class file and execute it on that machine for us so coupling these things together what people found is and i think they did this while playing with each other and hacking each other's minecraft servers is that you can basically execute code on someone else's machine very very easily and things which is never a good situation to be in and the problem and i think mike's going to demonstrate this in a second is that log4j is like milk it's like water it's everywhere this isn't just a problem that would affect the machines that are talking to the outside world they can collect data which gets passed to another system within the thing which can then process the data it only takes one of those things to be running log4j and log the data for you to get a a foot in the door as it were and your code to get executed it's not reliant on it being the machine you're talking to as long as something gets past something that gets past something and one of the really nasty things is you can sort of build these up and it could end up being composed from two separate things if you're really clever and knew what was going on then it would still have the same effect it reminds me a bit of the little bobby drop tables exploit is it is it similar to that almost identical to that yeah one of the big problems with it is actually also how easy it is right i mean this is not a difficult string to craft you can just go on twitter and there are 50 examples in your timeline and so it's that perfect combination of quite easy to exploit doesn't need a huge amount of of expertise and everyone's vulnerable to it right it's it's just you know i mean i was meeting a friend and who works for a company in nottingham and they were up on sunday night until 2am trying to fix their servers right trying to push updates to log 4j to all of their servers to prevent these kind of attacks they weren't necessarily getting attacked yet right because a lot of people are just fishing around but i mean i think today there's a worm going around trying to execute this kind of attack on vulnerable servers so you know is it does it come with the java in-store then is it is it kind of like a given you just get this automatically not quite it's very close it's very close to that i think one of the reasons and in fact i can demonstrate that now actually but one of the issues you have is that it's it's incredibly straightforward to use it is almost for default right it's not i mean i'm i've got an example here but i created a spring boot application it's not the default in spring boot but it might as well be if you read any videos for example there is it's a couple of lines to to swap this logger in and start logging things which it's good but that's easy to use in some sense right because for me who doesn't know a huge amount of java needs to get an api running nice and quickly i can do that with very minimal effort right i'd have to go and learn you know read a whole textbook on this but on the other hand i'm now finding myself in a situation which is essentially my fault in something in some way that i'm using a logo i don't really understand with features that i don't really understand and it's causing me vulnerabilities that's where i find myself so let me show you how easy this is right what i've created here is basically it's a spring boot application now spring boot is incredibly powerful you know dependency injection framework but really from my point of view it just allows you to create very very simple rest apis and other web servers so i've done that i've created a little web server that runs on my laptop and if i go to localhost slash api slash my url it sends me back a string right very very straightforward now my api that i use at work is obviously a little bit more advanced than this but basically it's the same principle now if i go into my maven pom file i can see all my dependencies and i could actually say okay i'd like to use log4j for my logging so i'm gonna i'm gonna paste that in what it's saying here is remove the current logger which is the default one that comes with spring boot and then replace it with log4j right so i'm gonna save that as soon as i put in one of these dependencies maven says oh you've added something would you like me to get it for you so i click this refresh button and off it goes and starts resolving dependencies and downloading all the jar files for me essentially so it's now downloading it's downloaded log4j just at the bottom there and now i can use log4j i've coded up this very very simple rest controller so all i need to do is start adding some logging right so to do that i import the logger this won't take very long by the way so if i type import org dot sl4j.blogger so this is the interface that we we're going to be using for logging and there are a few loggers and you know they all operate in basically the same way using the same interface so you don't have to use log4j but of course many many people are including me sl f4j.loggerfactory if i run this application all i'm doing is i'm listening for get requests on this particular url so if i run it we're going to see a load of logs this is spring boot firing up it's firing up databases and all kinds of stuff so if i go to my url you can see it comes back with world's best rest api as its string you know i mean i'm not wrong it's fantastic now maybe i want to log that someone's gone to this url so all i need to do is obtain the logger for this particular class and then i can use it right it's very simple so logger l equals logger factory dot get logger and then this dot get class and then i can say logger l.log and then you can have different kinds of logs right so anyone that's logged will know you have like debug logs warnings errors let's just throw a warning for for the sake of being simple so i can say l dot warn and then i'm gonna go this is a warning it's not very informative this is exactly i mean this is probably why my api isn't vulnerable because my logs are not helpful so let's run that again and then i'll go to my api again it's just starting up there we go we rerun this and then we can see in here i've got my warning show up in my logs right now my log is just going out to the console but it could go to a file it could go to a database right this is this is log4j is pretty flexible and you can do most of this through config so it's quite easy to use so that was i mean that was basically all there was to it you go into you know some java application and you say to something like maven or gradeable i'd like to use log4j it just finds the code on the internet and downloads it for you and that's literally it so it's no surprise that people are using a lot of these libraries why would i code my own logger when there's this great logo i could use you know and so one of the real problems here is just the prevalence of this library in you know anything java so that kind of brings us around to why has it got these functions in it is that right is that where we're going steve yeah i mean i think that's one of the the issues is that you've got a when you include a library you get all this functionality but you also get all the bugs and all the other features or that come with it and you might think okay well by not writing my own log files i save time you do my program is more secure probably is because someone's actually thought about it's being used a lot the bugs have been found but the problem we get is that you're still using a library is still importing someone else's books into your program the nice thing about open source software is that you can look at the bugs and you can fix them yourself and then share them but you still need to fix the bugs you still need to analyze that code to check that it is actually doing what it ex what you expect it to and i think as mike's shown is that it's very easy to use this without thinking about all the ramifications about all the features that you perhaps aren't even aware of i mean i suspect ninety percent of people who use log for j i'm making up statistics on the top of my head i should get a job in government probably didn't even know that a it could make a jndi call and probably never heard of jndi before the vulnerability had come out anyway and so i think if you're designing a library the take-home message from this is keep it simple get it to do one thing well and then design another library that can be built on top of that so that people can compose the services that they need to do what they needed to do so if you're building a library that logs things log the data untransformed if people need to transform the data before it's logged well that's another library which transforms the data and then you compose that on top of the logging information so that you can do it in a way that as a programmer you know is secure for your use case for your application i think what's gone wrong here and this is not a criticism of log4j you can see the similar problems popping up all over the place it was an example a few months ago where iphones were being sort of bricked because there was a wifi network popped up with a percent s in it which caused printf or s printf inside the kernel or something to do a equivalent expansion of that and it all went horribly wrong so i think you need to make sure that you build libraries that do one thing well and then compose other things on top of that if you need that functionality and only if you need that functionality slightly ironic thing is if you actually look inside the log4j source code a lot of it is already built like that in that you've got the logging functionality and then when you do message lookups and sort of look at these variables and things that's an extra layer of code which is sort of put as an object on top of the other object using the decorator pattern and things and you just think if this was exposed to the outside world if this is how the api was constructed then mike could just say no i just want plain logger at this point and things and then later on he could use the other bits to build up more complicated logs for the bits of code because he knows it's safe to do so so so it sounds like the problem is somebody's packaged all of this together instead of perhaps offering it as options or you know as separate components is that is that fair i think so it's understandable why that's happened it certainly makes it easier for a programmer to be able to do this and you can see why someone requested that the jndi was in there though i think it'd be great if i could just look up this username against the person's name they're probably writing something internal that never spoke out of the internet but the trouble is is that because that gets composed into so many different bits of software that functionality suddenly becomes a vector for doing other things so as i said when you're writing the libraries keeping it from a security point of view if you keep it simple to do one thing then the programmers who are using that hopefully we'll then only use the bits they need it's great having huge libraries which do everything but if they do everything there's more spaces for there to be bugs and yeah there's just more spaces for there to be bugs one of the interesting things about this is that it you know it comes up a lot in in discussions among sort of tech enthusiasts and people who are working in the industry is that you know no one's paying for log4j right so what what what right have we to ask that it's secure against some attack or and so on and i think to an extent that's true actually i think that i mean this actually happened before with open ssl open ssl had the heartbleed bug now that was an actual bug in some sense it was is slightly different to this but it turns out at that time that many many companies some of which make a lot of money were using this for free and have now been exposed by a bug and maybe that bug wouldn't exist if it had been properly funded right now we can't predict you know the future from the past and so on we don't know what would happen if there were lots more people working on log4j maybe one of them would have spotted it but i do think it's interesting to think about just how many people including myself who are using these libraries without much consideration about where they came from or who's actually doing the work right and i think that when this thing was implemented in sort of 2013 it was with the best of intentions and it's it's caused somewhat of a problem like more recently and yeah it's something to think about the advantage of open source in cases like this is that the source code is available which means that you can look at the library and say okay this is a problem i can fix it and then you can share that fixed version you have the ability to take the source code to look at it and fix it open source is not going to give you a badge of quality to say and we can see that here that this software is secure that's not what open source means open source means that the source code is available for you to modify and fix and hopefully share that with the rest of the community and so i think the advantage here from people's point of view is if you've got a library you can hack it about and take out the bits you need and just use them rather than sort of if you've got a dll for microsoft or something you'd have to use it as is and have no no ability to change it the great thing about this which is where i think open source shines is not that the software is free it's not that how it's licensed i think it thinks the fact that the source code is available and i can edit it and i can fix it myself and then share those fixes the conversation surrounds these people who are doing what appear to be keystone bits of software in their spare time effectively at the same time as doing a full-time job perhaps as a developer for someone else they might have just kind of been the last one holding the bat on and they're you know tasked with maintaining something that you know 90 percent of the world's java runs on yeah although that can be a double-edged sword because and i'm not saying this in this case but you could see for example bits of software that really should be allowed to die but i mean let's for example let's let's suppose that ms-dos was open source you can guarantee that there would probably be a community of people still maintaining ms-dos today we probably don't want bits of software like ms-dos still being maintained they're interesting historical curiosities they're not software that should be used today and that's the danger is the software exists beyond itself by date because anyone can maintain it and it still looks useful it's one of those situations which is interesting because there's basically been no winners at all right everyone that's been using log4j has got to drastically quickly patch all their stuff and redeploy it and you know maybe you've got 10 000 instances on aws you've got to deploy right this is not trivial and you know i'm lucky with my little api it's not even running that i can fix and re re-run it when i need to you've got the developers who are desperately trying to write patches for this thing and of course that and you know by fixing one bug you might introduce some other bugs right and it's this takes time you don't want you can't just fix this problem in five minutes and push a push or commit and it's all it's all it's all solved so i think that the response has been pretty positive i would say you know companies are just getting on with trying to fix this but we're not we're not going to see the end of this for a while right there's going to be issues like this and as steve said issues in other libraries are going to come up from time to time turns out everyone was using and only two people were writing the thing and you know this is this isn't going to be the last time that happens i think for me the thing this shows is that pandora's box is now well and truly open people are going to be looking at every library every open source library every closed source library to try and find similar things where this can come along we think this is bad we've probably not seen anything yet some of the rounds we do in columns so we mix a b c and d and then we mix this column and then we mix this column a b c and d in this column so sometimes we mix diagonals so it'll be a start to see and then as we go a bit further on we suddenly see that everything starts to disappear