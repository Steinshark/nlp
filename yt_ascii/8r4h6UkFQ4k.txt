so apparently somebody is being a little bit malicious with the npm packages who would have guessed who would have guessed that this would ever happen everything blocks devs from removing their own npm packages which is also hilarious because sometimes the only way to make javascript behave correctly is deleting your npm node modules folder so this is great i'm loving where this is going i'm super excited some coding guy i'm sure you never saw this over the holidays the npm package registry was flooded with more than 3,000 packages including one called everything and others named a variation of the word okay okay the package is quite aptly nam as downloading everything will gradually pull in every single npm package that has ever been published to the npmjs.com registry onto your computer potentially making it run out of storage but that's just the tip of the iceberg guy is this going to be an iode busting problem are we about to see that remember when you you told me about that you're the one that i first heard that term from i did say that yeah yeah yeah yeah yeah if you're asking but who would install everything that ignores a bigger side effect of the package no first off who would install everything i don't know cuz it's funny since there's 3,000 plus packages manages to include every single npm package on npm dude is there everything github everything js i want to just see everything js what is this high dash i don't get this someone find me a link i would love to see dude what is going on with my internet look at that downloading oh it's de come on no no cookies got milked all right since 3,000 packages managed to include every single npm package on npmjs.com registry as their dependency npm package authors who have ever published to npm registry would now be unable to remove their packages at will because of npms policy oh that's so good npm doesn't allow you to remove something if it's being reli on oh let's go everything prevents you from unpublishing your packages what may have started as a simple prank ended up having bigger repercussions for all authors across the npm ecosystem installing everything could have just caused your computer to potentially fall short of storage space and slow down but the package's mere existence on npmjs prevents authors unrelated to this package whatsoever from unpublishing their packages from the world's largest javascript toilet and everything package has just five sub packages published under the everything registry scope listed in its dependencies bleeping computer has observed nice these five packages however gradually manage to pull in every single package present on the entire registry as a dependency for example everything pulls in everything registry chunk two which may further attempt to pull in several other packages by the same author such as everything sub chunk 16223 amazing npm has some sort of we to be able to crawl and search all packages so they probably literally just got every package name possible from npm threw that into a package.json learned you couldn't put them all in package.json then created a bunch of sub projects and just divvied them out some sort of alphabetical and then eventually just rolled it all up into one single one and called it a day what a genius idea i love this guy whoever you are everything registry you're beautiful each of the sub packages or chunks as the author calls them ultimately included about 800 npm projects as their dependency considering the author of everything has published 3,000 plus packages chunks each with hundreds of dependencies a single npm install everything command would start resolving what's referred to as transitive dependencies and end up downloading millions of packages gdi 2290 aka patrick js let's go patrick me and that guy used to i hung out with that guy at conferences who is behind the prank apologize let's go patrick oh patrick let's go patrick oh let's go patrick i didn't know you did this oh patrick what a gem i love what you did yeah let's go patrick let's go patrick let's go patrick i cannot believe you did that you hot dog that is so good we'll we'll have to get him on should we get him on to do like a little 10 minute how did he accomplish it what what what was the thing i would love to just hear his like his explanation cuz it just is so dang funny heck yes yeah yeah i'll send him a message we'll get him on that is so dang funny it preserve shot of the now removed github discussion is provided unpublishing packages hey first off i want to apologize about any difficulties this package has caused we are working to resolve the issues and we have contact npm regarding support with this matter that's so dang funny i just absolutely am so happy this existed imagine you did an experiment published a package to npm and now you want to remove your npm package you can't do it if other packages are using it writes joseph harush head of software supply chain security at check marks uhoh marx isn't mentioned oh the company's blog harish who labeled this campaign dependency hell further states the problem is since everything relies on every package including yours your package gets stuck and there's some unknown package preventing you from removing it can i throw out aside can i just throw out something else if you publish your code to the trash fire known as npm who are all these people that are like i better remove all my code like i i i'm this whole problem doesn't seem like it's real to begin with dldr on why npm is a trash fire one thing is i really dis likee a single point to failure dependency systems right i think git is a significantly better version of dependency i think dino got it right i think go got it right when they did that i don't like the idea of having companies that manage dependencies there's something about that that is just naughty and it's also going to end up there's just problems right there's just simply problems that exist when one person or one company owns it but nobody uses get decentralized that's fine i'm not saying you have to use get decentralized what i mean is that you can have a package on get lab as much as you can have it on stash in your private company a private repo at your company you can have it as much as you want on some other place cargo allows that but cargo also has a named registry and there's some problems with the named registry as we've seen before the cargo foundation has reasons in which they will remove your package and you know there's just something weird about that i don't know it's just weird and they said it's only for specific reasons but then they started getting into all these weird arguments and who and why should something be removed and what happened if they they you know now determine you're a bad actor and start removing your packages i don't know there's just some weird feeling i have about about these things new russo that was from a little bit ago where they were they they had some weird package removing issues but my general take is i just like the idea of having not a company run your packages what is this can what is this what is hex is is is hex the ha hll thing i can't remember what just give me the tldr i can't be looking at all that ryan oh it's elixir elixir hex that's right that's right that's that's right i like what go did i think go is better i think dino did a good job with that it should be immutable when you publish a package publicly it should just simply be immutable go does not have a centralized package authority no i think it's good i think that was i think that's a good move that means you use gitlab bit bucket stash github a private git server at your company you just use that i think it's i i honestly think it's better anyways researchers drew comparison between everything and no one left behind package published in january 2023 that attempted to pull off much the same stunt npn policy shift follows left pad incident unlike other open source software registries like maven central which are immutable and generally prevent authors from removing their published components npm and piie have tradition i love the i love piie piie did you see that github issue with ppie did you see that did you see that get hold on but i love this i love this look at this uploading test piie hits that says hey here's an issue i'm having follows up were you able to resolve it because it got closed and then the author's like no no i decided i don't care love it that energy is just so glorious dude it's so good it's so good oh my goodness everything is it's just beautiful okay let's see what happen has traditionally allowed developers to delete or yank their releases at will following the 2016 incident that entailed left pad's author removing his npm package in protest and breaking a large part of the internet npm made it more difficult for authors to unpublish packages one such policy changed allowing authors to unpublish packages only if no other packages on the npm registry is dependent on it ironically this policy also left patrick js the author of everything unable to easily remove his prank package given the extensively long dependency chain he has set up bleeping computer observed as of this morning while everything continues to live on the registry the thousands of everything registry scope packages used by it now have been made private potentially resolving the issue dude that's so hilarious i just love that this is a problem like this is a problem yeah put that on your resume befuddled and confused npm oh my goodness i also think it's funny that after left pad they realized it's a bad idea to allow people to mutate packages underneath people gez really you realize that you can also post non- incrementing packages right so i can post 1.1.5 and then post 1.1.4 like i can post into the past which means that you could nonm maliciously post a package ag and then maliciously post one behind it and then theoretically before this change you could delete that thus having people fall back onto a malicious package it's why npm is difficult song what did you just say i just saw what you said song a song said what thoughts on sha for package dependencies shaw's tag like get tag sl whatever i mean it's all the same thing right i some sort of unique way to identify stuff the most based package manager is elm he can tell if you've made breaking changes in forces's version of bumps that's pretty cool are you drinking gin absolutely nothing like a good oldfashioned gin in tonic in the morning this just approves that ideas are fundamentally broken all ideas are pretty much broken i'm fine with a shaw i just don't the reason why i don't like shaws is that a shaw doesn't tell me what i have whereas a url plus like say a get tag tells me what i have right that's just a named sha and so i like that i like that better sha malal m dingdong yeah exactly what happened to the prime main channel it's it's things are happening the drink ofin yeah the drink of jin you know it do americans drink jin and tonics oh i'm sure we do i'm sure there's dude there's an american for everything the rule 34 of america is that whatever idea you have of someone doing there's an american that is doing that it's just what it is the name is the primeag