i exchange my call sign with someone in slovakia. if the conditions are just right--and that depends on weather and sun spot activity and stuff-- you can really get your rf out across the world. 2 meter band is generally considered to be much closer range. (are we looking at the post-apocalyptic internet here?) i think so, yeah. (so, after civilization falls apart...) i'll be talking to dave over... making sure everything's ok. it seemed to die--briefly. i'm scared to touch anything because it will suddenly die (so this is quite flaky stuff, right?) it mainly-- it's normally very reliable the problem is that we have these cables which i made myself and, ah... yeah, don't look at this one. (why have we got two thinkpads sitting on the desk in front of us?) ...going to sleep... well, i thought it might be interesting to talk a little bit about packet radio and maybe touch on amateur radio in general as well. packet radio is... it's essentially sending data over the radio waves and the frequency spectrum i'm using at the moment is the amateur radio bands. so this is 2-meter band, what i'm using now, and that's about 144-145 mhz 2-meter band is probably the band with the most packet radio because there's something called "aprs" which is the automatic packet reporting system that's all based upon one protocol called "ax.25" and this is kind of a... sort of... it's ax.25, but... modified to accommodate some of the things required to make it work on amateur radio, instead of over some kind of cable. okay. so we've got two of the cheapest ham radios. these are baofeng uv-5rs we've got two laptops, and we've got two-- what are essentially modems, they're called, "terminal node controllers," and they essentially take data through a serial input and turn it into some some sort of strange sound, a bit like dial-up essentially, we're encapsulating what we would normally put on ethernet, but we're encapsulating into what's called "kiss framing," and on top of that: ax.25 i think i should probably draw this out, because going it's a bit complicated... let's draw a radio--and then we have our modems, or terminal node controllers, and these are talking to the radio. this is actually an audio cable, so this is just audio going straight into the radio. and then we have two computers, ...this is my laptop... and this is a serial cable. i will draw the frame, the tcp/ip... at the very bottom we have kiss which stands for "keep it simple stupid," and the way this type of framing works is that if you send a zero, that means there's a data frame coming in. so it's very simple. after that we have ax.25, and this essentially talks at hardware addresses so what you might typically consider to be mac addresses, but in the case of radio--it's actually my callsign, which is-- m6piu and... (and if you need to get in touch with aaron...) get on the radio (...urgently!) yeah, and then so this ax.25 actually becomes the lowest layer, in the setup that i've got here, over the tcp/ip stack. so this is, let's say m6piu, to my friend, g1zek. this guy actually gave me this tnc here, so this is very low-level framing of messages. it's just saying, "pass this data over to this, and this is the the length of the data." this entire thing is going to be the the tcp/ip stack, with this framing underneath it. on top of that, we have the internet layer. so, this internet layer works on the basis of ip addresses, so ham radio operators are fortunate enough to be allocated: 44.0.0.0/8 that's a huge range of ip addresses, and you can, as a ham radio operator, be allocated a small portion of that. this is the kind of level that the internet protocol layer runs at actual ip addresses rather than ethernet addresses or call signs as in the case of ax.25. if you look in arp.c in the linux kernel, you'll see specific references to ax.25, for the way that it formats callsigns, as if they were ethernet addresses, mac addresses. on top of the internet layer, we have the transport layer. this is tcp... so this is tcp over ip... let's just call it tcp it could also be udp and on top of this, we have the application. maybe we can talk about what's actually being transmitted right now: every five seconds, we're sending a ping. it's at the same level of tcp/udp so, we could also write "ping" here, and you'd also have--for example, "arp"--here. this is the address resolution protocol. it's converting internet addresses into ethernet or call signs. when i want to send a ping to this machine, essentially what's happening is, my computer first uses arp to resolve the call sign for the ip address. so it says, "who is 44.131.56.17 tell [...]" and then the address that it's coming from. so in this case, 44.131.56.16 so-- 17, if it's available, will respond to this packet and say that, 44.131.56.17 is at m6piu-[some ssid] so in the case, i think one of these is 0 and the other one is 1. (is that different devices?) yes, because the call sign is being used as the ethernet address in a typical sense, you can't have the same address in two places, especially if you use more than two machines, because they would both respond, or, they would both end up receiving a packet destined to a certain ip address once you know the call sign of the ethernet address, the packets can be actually sent via ax.25, because that's the the only level above ax.25 it doesn't understand anything past that, it's just call signs and packet length. this information is going to be cached for a while. i forget how long exactly, maybe five or ten minutes? or until it fails to contact the remote host again. (i've got a vision of the airwaves being full, with lots of this happening from lots of devices, but on the same channel, is that how it works?) lots of devices can use the same frequency with ax.25, because the packets are being sent with a sender and a recipient in each packet. (you get clashes, though?) you do-- actually one of the biggest problems with running modern-day linux on ham radio is that it's expecting the network hardware to respond very quickly so when it does this step, it says, "who has this address, tell whoever," it ha s already requested the same information again before it's even gone out of the the modem. so, you have to set this to a more reasonable time, like 5 seconds or something, instead of 100. if you're continuously requesting the same information, the recipient has no time to respond, because this is only half duplex, only one person on the radio wave, or the frequency, can speak at a time. this one is actually pinging right now. i've set the interval to five seconds and it takes about 2.6 seconds for a ping to reach its destination and be replied to. what we have here is machine 0 pinging machine 1, so this is from--no arp information cached at all yet-- so, the first packet that we received is coming from m6piu, with some ssid, going to qst, and qst is kind of usq-code-speak for, "all operators that are listening," so we're saying, to everyone that's listening, "tell me who has this address, 41.131.56.17." this gets sent a couple of times, and eventually, machine 1 responds to machine 0, so it's coming again from me... ...to me... ...and it's saying that machine 1 address is 44.131.56.17, and it's at this, sort of ethernet address, or, hardware address this hardware address is actually my callsign, encoded in some strange way with some bit shifting, just to make the character set fit into what would typically be a hardware address. this happens a few times, because not all packets are sent successfully. sometimes, it's quite impatient and will send the same packet again, especially in the beginning, but once machine 0 has learned that the hardware address, my callsign, is associated with the ip address of machine 1, it can start sending ping requests. these purple packets are icmp, which is the pinging protocol. here we have two ping requests, and then two responses. these are going at a higher layer now in the tcp/ip stack. they're using ip addresses as opposed to hardware addresses. what we ended up with is a ping response time of about two and a half seconds, which is not bad -- considering we're running at, probably around, 1.2 kilobits per second. (this is a closed demo, with two machines and two radios, does anyone else have that?) i quite frequently talk to my friend g1zek over ax.25 not via tcp, but at a lower level. if you don't connect up the stuff, or if you don't activate the tcp layers above this, you can connect to these just by a serial terminal, such as gnu screen, and you can exchange messages, just as text. it's much more reliable than trying to get tcp/ip working off of all of this. (so, because you've got these layers working on tcp/ip...) (what does that give us that you wouldn't get another way?) (would you be able to, say, send a website or...?) we can definitely send a website. i can show you that, it will take quite a while to load. it will be a very small website. let's set up a small web server, and try to load that page. one of the problems is that-- so really, operating two radios in such close proximity is a terrible idea. you can actually damage them. i've got these set to 1 watt, and i tried to put as much space between them as i can. the problem is that with these very cheap usb-to-serial adapters, they can crash if there's too much rf around, so a lot of the time i have to keep on restarting this, because it breaks basically. let's try and load a page. (so the flashing there is connection... the packets being sent...) yeah, so on this side it says x method for transmit and receive. you can see that when transmit is red here, receiver's red over on this side, so they should be alternating. ping actually takes up a significant amount of bandwidth, when... here at this speed, so i'll kill ping. it seems to be working. so your web browser open. i propose a little page earlier it's only one sentence, but... (what we lookin' at for a sentence? a minute? several minutes?) it depends on how reliable it is, because it could take hours at this rate. but a single sentence, i don't know maybe if you have everything tuned quite precisely maybe 20 seconds or something. (shall i ask a silly question: pictures?) i have done it. it took maybe 10 minutes, but a picture of me has transmi... well, probably it's out of space now, you know a a very weak signal of my face. this machine on the left received a packet saying, "here is this address, tell that one..." but, it doesn't seem to have responded... these connectors are also very flaky... give them a squeeze... come on, you can do it! from the activity light here, it looks like pings are being sent, and there are responses coming through, but currently, it says that destination host is unreachable. what you can do, instead of using these things, is actually use the sound card and that's sort of become a lot more popular now, i quite like these because (well you can see a lot more information there...) yeah, i think they're much more cool than using a sound card. it has timed out, what a surprise. (...why [unintelligible] data...) it's showing the packets being exchanged, so they're definitely talking to each other right now. there's a lot of packets which are becoming out of order or being re-transmitted. yeah, i think it has timed-out again. let's try using curl. curl is just simple command-line utility to request web pages and files from web servers. the python web server here picked up that i requested a page. (okay, that's a first start, right?) yeah, it hasn't-- ah! the page  has loaded! but only in curl--i don't want to show you... ...but i will, it's just down here. so this is the html that i typed in, which is this "hello computer" file from m6piu. so we're going to try and load it in the web browser now. (it's all your css, right?) oh yeah, for this website, and on my personal one, it's loaded with css. [ laughter ] should have timed it, shouldn't we? just to be sure, opening a new tab (a lot of re-sent...) yes, i just saw her on this little python web server that the page was requested. also, i got it working this morning, it was fine. so these are our... a-ha! it's done! there you go. "hello, computerphile," i spelled it right, i think... i think, in the early days, it probably contributed somewhat to research towards tcp/ip and other network protocols, especially on slow connections, unreliable connections, like this. and i like to think of it as the grandfather of 
gprs and wi-fi and everything that works now. you would have to s-boxes here to 4-bit s boxes for example plugging into one 8-bit permutation box so the outputs of these get jumbled about a mixed up here the way an sp network works is it? looks a lot more rounded you have some of questions and things actually these numbers were chosen 3/16 5/16 or 1/16 7/16