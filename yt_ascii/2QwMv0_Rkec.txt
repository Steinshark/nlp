welcome back to computer file you've got another story for us well today i thought we'd talk about the great morris internet worm of 1988 which was a watershed moment in the history of the internet it was kind of a transitional event in the internet history because up until this point it had all been a very sort of academic network where we'd all got on very well we'd all share data with all shared programs we'd all sort of helped each other and then this event which was actually well it was november the 2nd 1988 so that's almost a anniversary now at this point i think there are around 60 000 computers on the internet or the arpanet as it probably was it was sort of transitioning at that point and then this thing happened and suddenly a lot of computers found themselves under attack and this was a worm program that was moving around the internet and infecting computers and it was helped quite a lot by the fact that everybody almost used the same computers at the time everybody was running on vax computers pretty much apart from a few sun computers which were also coming into use there were a few others but because they're all using sort of the same computer it was quite easy to attack so this thing was appeared and people suddenly found them all their computers crashing and all sorts of issues the worm wasn't actually malicious so it didn't come in and try and destroy anything it was it was sort of i think somewhere between an academic exercise and and sort of highlighting the security flaws so it sort of moved around between machines but the the problem with it was that it sort of infected the machine and then it tried to infect other machines and then it would infect another machine but then that would come back and reinfect this one and it would get more and more copies of this worm running on the computer until eventually it just keeled over or just ran out of resources or whatever so it used two or three different ways of attacking so the first one was there's a very popular email program called send mail that eric coleman wrote from berkeley and that was used at a lot of computers at the time it was fiendishly hard to configure but once you got it configured it was great and it dealt with all sorts of complexities but it had a sort of back door in it that you could connect to it and there's a whole lot of verbs you could type in the smtp dialogue but one of them was debug which wasn't a standard verb at all but allowed you to sort of switch into tracing and see what was happening and things like that but one of the things you could do there was run a program by surreptitious means so this is what this worm did it it tried to connect this send mail port and immediately tried to switch into the debug and if it if it was compiled with the debug switched on then it could access things and at this point people didn't really run binary distributions of computers you know like today you download a program and you just run it at that time you generally downloaded the source code and you looked at it and said oh it's got all sorts of options which of those do i want and you compiled it up and used whichever version you wanted so some people got the debug built in because they thought it would be useful to work out what was going wrong because this were the early days and things were going wrong all the time at this point so there's quite a few of those another thing it used there was a program called finger which worked best on multi-user programs so this was a pro program you typed finger which sounds a bit dodgy but anyway it gave you information about a user it's not very useful today because everybody's got their own computer but on those days we had like big computers in the basement with maybe 40 or 50 terminals connected to it and so you could see find out information about other people in the department and say you know before walking around the department to see who was in you could quickly see are they in or have they been active right it's a good chance to talk to them so once the internet started people thought oh this might be nice to work between machines so they they had a demon that just would invoke this program and and send you the results across the internet so you could then say okay is sean a computer file active today and it would tell you yes or no the flaw with this program was it used a very old library call called get s which read a line from the terminal which was fine you just read in the line but this one read it into a buffer but it didn't say how big the buffer was so you just gave it a buffer and said read it into that and it had no way of knowing when it was getting towards the end of the buffer so typically people just declared a buffer that was big enough and hoped hoped it would work and this finger declared a buffer i think 256 characters or something which was fairly standard but running under this finger d if you sent 270 characters or something you'd come off the end of the buffer and you'd start writing onto the stack and if you placed the right instructions there this this time you have to be very specific to the machine so you place vax and structuring machine you could overwrite various bits of the stack and then when it returned it would jump into whatever you wanted so he planted a little bomb there that would jump into running a command interpreter and then broke into the machine once it was into the machine it sort of copied itself in it disguised itself it deleted the original code so that you couldn't actually see it there and it disguised its name so it would appear as something else in the list of processes and then it's set about attacking other machines so exploiting these two things but once it was onto a machine it would also look at there was a program called our shell which has now been replaced by s shell or ssh and that that allowed you to jump between machines if you had your account set up so it would start looking at accounts that it had got into and say oh could i use any of these it also had a set of passwords i think it had about 900 possible passwords that it would try it would also try the user's name as its password and user's name backwards as a password and see if you could get into other machines like that so it had two or three tactics for getting around and seemed to do extremely well so it was written by robert i think it's tappan morris he was a student at cornell at this point but he hacked into mit and released it from there so that presumably to sort of disguise himself somewhat awkwardly his father also called robert morris was a computer security expert worked at bell telephone labs for some times also worked at the nsa so i expect that was going to be a few awkward conversations between father and son at that point because it quickly you know spread throughout the internet and they reckoned maybe 6 000 computers were infected over this time it took a couple of days to sort of remove it from each computer because it it kept reinfecting and they weren't sure exactly what it was doing they managed to eventually capture one of these programs in the wild and disassemble it and work out exactly what it was doing and then they they could work out how to stop it there was a very quick hack they found there was a program once it got in it tried to write to a temporary directory called user thump sh if there was was a file there it deleted it but it it didn't actually check to see if that was a file or a directory so if you created a directory user sh that killed it so that was one of the very early things that found that you could stop it and then you know eventually they worked out what it was doing they told everybody to recompile their send mails without the debug switch delete the finger d thing and then gradually it sort of managed to kill it off and stamped it out but for a few days it was it was quite chaos and there was just you know messages on all the internet chat things and all the news groups saying hell we're under attack what do we do and people cut themselves off from the internet which which was good but then they couldn't find the advice for how to stop it so you know then they put themselves back on to try and get an email out what are we doing how do we get so i guess there's a lot of phone calls and other things this was a really big wake-up call for the internet i mean as i said at this point it'd be very much you know we're all sort of academics working together to try and get this internet to work and we're solving problems and so on and we're all helping each other and it was a very sort of free and open culture but this changed it in a big way very suddenly so suddenly security was much more of a concern that you know they started to look at things they they have a set of publications for internet standards called rfc's request for comments and they started mandating that you explore all the security implications of any new protocol and suddenly everybody got very serious about security from that point on and you know that that was kind of the transition from this sort of playground of fun and frolicks in the internet to oh this is getting quite serious and you know we we can't live without the internet now and it's even you know it's obviously much more relevant today but we've come a long way since those days did somebody find out he'd done this or did he raise his hand and say i'm really sorry one of his friends called the new york times and said there's this virus on the loose or this worm on the loose and i it's i don't think he actually said who it was but he did let slip the initials of of the person and it didn't take long for a report to work out that yeah rt rtm was this robert tappen morris and worked back and worked out who it was i think he'd gotten hidden by that point he realized what what chaos he called and he was eventually convicted i've got 400 hours of community service and a fine of 10 050 dollars significant at the time i'm sure probably significant at the time especially for a student who was a you know in his first or second year of university fame secured he probably got some jobs from then on in based on being the guy who did that yeah i remember not long after i mean well a few months after when the the trauma had passed because it didn't actually affect us in the uk we weren't sufficiently well connected at that point but people were discussing would you hire the guy who wrote this because he's obviously quite skilled in that you know he's managed to break into a good fraction of the computers and there's some discussion on it you know some people were still smarting from the blow and saying absolutely not it was horrible that others were saying well you know he has some good skills directed in the right way this this would probably be a good thing to uh to go for so yeah i think he has done reasonably well since although i haven't actually followed what he did i don't think there were many copycats of it at the time although it did inspire things i did actually have a go at writing something similar just to see what it was but i was fearfully careful not to let it run right and there was only two computers it could infect anyway on our small campus did it work to a degree it was not nearly as sophisticated as his it was just a very simple script that copped itself around and sat around but i made absolutely sure only one copy of it after a few experiments i thought oh well that that's that and i'll delete it now before moving on yes move on it's purely sort of intellectual to say oh all right i've never thought of how you could do that could you write a program that could copy its entirety somewhere else and then run it and so on of course you know we all know that's quite possible now we've all had experiences with worms infected windows machines and things like that this get s function is still available today but i look to the manual page and it says do not ever use this function and this is purely here for backwards compatibility never ever use this function you only have to work out whether it's worth alerting the user if you find the key so you know you download the temporary exposure key you perform the encryption you generate the potential rpis and you compare them with the ones you've seen or if you want a more slightly comprehensible message it's saying maybe you haven't applied a function to enough arguments