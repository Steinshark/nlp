so i've been watching back over some old computerphile videos as we all do and i was watching a video by tom rodden on cookies rodden: how then do you do the little shopping carts? pound: and he talks a lot about tracking cookies, which are a big deal, alright. and just a side note, i would say everyone should install ghostery and stop people tracking their whereabouts and what they're up to and what they're browsing online. but i'm not talking about tracking cookies today - or persistent cookies - i'm talking about cookie stealing which is the idea of if i can get ahold of your cookie from your browser, in some way, i can then pretend to be you on that website. perhaps a bit of a recap on what it is that a cookie does so that this puts it into context. now of course if you want to know a lot more about cookies, you go back and look at tom's video. http and html are not persistent. i make a request to a website, it serves me html - and maybe javascript - and that's the end of the transaction, as far as it's concerned. i make another request, it's a brand new transaction. so there's no standard way in that mechanism of me persisting. interviewer: so when you say you make a request, that means, for example, you click on a link or something? pound: yeah. so i go into google and i type www.google.co.uk, or i click on a link in a webpage that takes me to another website. or, indeed, my browser needs to request an image from a server because i've clicked the plus icon on something and i'm trying to look at an image hi-res. interviewer: so even if you're on the same site, you click on different links on that same site it [...] pound: it will start a new connection, or use the existing connection to send off another http request which is basically just a string that says "i want this file, please send it back" and the server will hopefully send it back. because this isn't persistent, the obvious problem is  how do we do things like shopping baskets and "i'm on stage 5 of 6 stages" in setting up my online banking or something how do we remember what i've already typed in? the way we do this is using cookies. so, the first ever time i visit a website, it might send me back a cookie that's maybe a unique identifier to me. so just let's say a string of numbers, alright? and then i think, "well, i'm going to go back to that website and register" so i type in my username that i want and i send off the username and the request for the next page. and i also send back this unique string of numbers. and the reason is because then the server can look in the database and go "oh yeah, i remember him, he was the one that was using this username, and i can now serve him this slightly different webpage where the username is already typed in." or "i have already remembered what's in his shopping basket" or something like this. that's what a cookie is for. now, of course now as tom rightly points out, they're also used for tracking what you're up to online. so banner ads and things will use tracking cookies to keep track of you between websites - which is kind of worrying. but, again, not going to talk about that anymore than to draw people's attention to how scary it is. the problem is that if i obtain a cookie off you, which is supposed to be secure, then i can send that to, let's say, amazon or to a shop and say "i'm sean please, you know, what's in his shopping basket" "what's his address?", "what's his credit card details?" "can i change the address of this?" if i do that halfway through your transaction, when you've typed in your details, i can just override and change the shipping address and get stuff sent to my house instead. it's involved, but it could happen. if i can get ahold of that cookie. now those cookies are stored by the browser, and they're on your computer so that's quite difficult for me to do. but cross-site scripting is a very easy way of doing it. so that's what we're going to do today. we're gonna steal a cookie, and we're gonna do it using a cross-site scripting attack. now this ties back into a different video that tom scott did on cross-site scripting. but what we're basically going to do is we're going to inject a script into a blog - not a secure blog, i should say - and that is going to, when anyone else visits the site obtain their session cookie and send it to me. and that i could theoretically use to take over their session. this is the world's best blog, of course. alright, it looks good and it's got good content on it. here's a picture of a kitten and some kind of banner and that's pretty much it. and some lorem ipsum. and then this blog has crucially got a comments feed at the bottom so if we look at the comments: "many thanks, love the blog" - that sort of stuff. it's all very positive - well nearly - and the point is i can type extra comments in here. so i can say: "thanks!"  from mike again. and i can post this in, and then when i scroll to the bottom there it is. and the time that i did it on. this is just the kind of time where a cross-site scripting attack is possible if you haven't coded your website properly. ok so what i need to be doing when
someone types some some text in here is making sure that's what it is and isn't
in fact valid html script my or javascript because if it is then what
happens is this browser received it back to the server and has no reason to think
that isn't just part of what the server intended i think because it's just a script tag
like any other the server will probably be serving script tags anyway, right, for
doing other things and it just serves another one that's fair enough i mean
they do that all the time so we run it ok and then that's where is a problem so
it's a responsibility of the server and the person programming the server to
make sure that when i submit data it doesn't it isn't actual script, or things that
can run ok so this is a very similar to an sql
injection except we're putting us we are injecting
html instead of sql ok they're very similar kinds of attacks so
let's see if it works the most obvious example be a really
simple one let's see if we can get a pop-up to appear so i'm gonna opening
closing html tags and then we're going to say alert "xss !" ok so theoretically what will happen is
this page will serve these comments to me when i go to this website and they
will see this script and not think it's a comment they will think it's part of
the actual webpage to be run and executed and then off there we go... so let's see if it works. i need to put
a name ok so i don't want to incriminate myself so let's put in someone else so
like sean for example i could submit so i reload
this web page of someone else i get a little pop-up that says
localhost xss ok so the service telling me xss! this is where you
stop and then you go off and tell them about it but you can go further than
this. to be absolutely clear, this is my own website running on my laptop - it's not secure
on purpose and it doesn't matter if i hack it because no one no harm is coming up this ok i wouldn't ever do this on a public
website so i just loaded some files to show you how the blog works behind the
scenes so you get an idea of what's going on so this is php right so it's going to be
a mixture of php code and html right, some which is a result of php some
which is just put in so here you can see that i called
something called session start now what session starts going to do is php is
going to look to see if the cookie they received is a valid session and if it is
it's going to resume my session its going to remember who i am and any parameters
that this website has set for me will be remembered in the database if there is
no cookie on file for me that means i'm coming at it for the first time for my
session expired and it will make one and send it back to me in the first response
right now that all happens within this session start thing and is not something i need
to concern myself with as a developer you can do it yourself now i've got standard submit comments
okay so i output the blog text and then i check if someone clicks "submit comment"
button it will check the post values for content and their name and then it will
put them into a database now as a side note i am actually escaping these
mysql strings there we are so i'm not vulnerable here to a
mysql injection because of these bits so that's good but i'm not vulnerable to
sql injection unfortunately i am vulnerable to cross site scripting so i'm not doing
any kind of cross-site scripting detection here okay i'm just gonna serve back whatever
the person typed in now as an attacker what i've done is i've created another
php file called submit cookie dot php that is it just a file that takes as a
parameter, a string of a cookie stores in a database on these two lines here and
then serves him back in image so what i'm going to do is i'm going to
write a cross-site scripting attack which is basically a comment on this blog that
causes their website or their client to visit this submit cookie dot php and
give them the cookie ok so because this is this is one
question that i remember rising when we talked about these sorts of things before is
the difference between client and server side you know you're doing some code
that will cause the server to come and find this code? imagine that i've so imagine that there
is no php in there is no script right all there is is a website with some images on
it ok you're the server and i'm the client i
say can i get index.html? you say yeah here it is ok i read it and show on the screen and
then i realized that actually it's got an image in it that has a source that's
like your-website / image1.jpg right so i say okay i need this too can i have
jpg this jpeg and you send it back so i make multiple requests to you to get the
various bits of content just like that and just like with a banner ad i might come to a bit in the html that tells me to go to some other website or something else and then and there is no
reason for me to think that is not a reasonable request maybe your images are stored on a
different server so i'm going to go there ok so i go i was an image and i need
that from over here so i go over there and i get it right the fact that it also bagged my cookie
is just an unfortunate side effect but it's not something that was necessary
and it wasn't something was intended when they developed the web but it's
unfortunately what happens now so that's what's going to happen ok
maybe right so i'm gonna start with script so we already know this blog is
vulnerable to cross-site scripting so we don't need to worry specifically about it i don't
have to obfuscate it or do anything clever i'm going to say document dot write ok now that's just going to write
nothing to the screen right so my comment on my blog is just going to be a script that does nothing okay that's
not very interesting so let's do something a bit more interesting our php file takes the cookie and gives an image back so let's just show it on the screen right? so image tag in html img is
the image tag the source of that is http code on / localhost now this could
obviously be a different website / submit cookie dot php question mark - now this takes get
requests so i say submit a cookie . php ? and when i say cookie equals and then
that's what i'm gonna steal their cookie and give it to myself all right to do that all i do is i say
plus document . cookie - i escape this so it passes nicely over html plus and then i'm
going to close my image tag because otherwise it's going to malformed html and it might execute properly and then a single quote ok so let's break down what this is
doing the script here is telling the website that this is a script to be run and not a standard piece of html then the document.right function is just a
piece of javascript that says dump this out as text hey but it can also take parameters
rather than just text yeah and it's going to output some valid html which is
a link to an image but that image is not held on the server held theoretically
elsewhere ok now the actual thing that is
returning an image is a php file not an actual image ok which also takes the parameter of the cookie which is a bit worrying alright so when i first went to this
blog i requested index dot php server started executing this and called the
session start function right which went oh he needs a session cookie and sent me
one okay in the response so i've then bagged
that session cookie and put it in my browser then when i visit that blog
again i've returned that session cookie to the
server to say it's me again yeah and so if i had if i had some some
persistence on this blog like i was in the middle of writing a document it was half
written it would remember who i was now so this cookie is stored by my browser
and theoretically the attacker can't get to it because on my browser and not theirs alright so what you have to do is trick
the browser into sending it back so the order that things happen are i then send a index.php request to
his blog to look at it ok it sends him back at a big website
with stuff on it including some comments one of which has a script in it it that says there's an image here you
need okay at this php file ok so i go oh brilliant, and i get my
document.cookie and i send it off to that php file and i get back an image
and i think nothing's gone wrong but they've now got my cookie >>but the cookie went off to the place
where the image was supposedly? and of course this will return an image but in some cases
it would return nothing and there will be no evidence that this happened at all, apart from if you actually looked at the source code for the file which of course
you know someone's going to do but no one no one normally is going to do so if
this got onto a forum or something lots of people could look at this before
they realize what was going on now it's not unusual for an image to be served by
script over by an actual hard link to an image because for example >>might be an advert or? it might be an advert dynamically created it could be
different it could be a resolution specified in there or you know a good
lots of different reasons why you do that ok so a lot of the time it's going to be
dynamically generated in some way so this is no different to that, except that this is also taking a parameter that it shouldn't be taking ok but i've got no
control over that and the the browser it's not that insecure it's just that
he's got no reason to doubt me you know scripts using document dot
cookies legitimately you know exist and if you block them then websites start
to fall down because they use cookies for persistence so it's a you know a real problem. let's click submit and see what happens >>so what have you done there you've refreshed it? yeah & it didn't work, cause i've done it wrong you know what i didn't type in my name that's
why it didn't work so mike right i'll take credit for this
one so we can submit that and then we run it ok and we scroll down and we got a cookie monster picture so kindly submit cookie dot php has taken my cookie and returned
an image ok now it's not unusual for people to
have images on comments or on forum posts and things so people have seen
this image apart from the fact that it's the cookie monster might not realize what
just happened ok it's completely silent it's happened
behind the scenes. all that's happened is they just quickly whipped their cookie off to someone
else and returned an image ok these kind of request for images happen
all the time it's just this one's got a cookie on it and that's bad news. as an attacker, this is my database and i select * from evil which is the name of my
table that's registering the cookie you can see what my session cookie now
phpsessid it's stuck in here so that's the session
cookie for that session of php now in this blog that doesn't have much effect
right firstly because i already have this cookie but mostly because there
isn't anything on this blog that having a cookie will help with right. it won't let
you get to my basket or get to my credit card details or login ok but if you did this on a website
where there was shopping involved or money involved or banking website and if
not properly coded it getting that session cookie could trick the bank into
thinking that you're resuming their session you know they could get so much
distance into let's say a transaction then you could steal their session go in
and just change the bank account details to yours right the bank doesn't really have any idea of
knowing that people's session cookies are the only thing that really tie them
to that that thing to that website i mean you can do more and complicated
things like you can you can pin ips to session cookies for example right but
people's ips change ok they might move from one wi-fi area
to another their ip changes do you necessarily want them to have to re-authenticate perhaps you do for security right but it
depends on the way website is developed this is sort of a prime example of a
time of check to time of use issue ok which is a security term which is
basically the idea of something changing between when someone authenticates and
when they do something and causing a security problem so i type in the
username password on amazon right then ten minutes later i've wandered off
someone else turns up and spends all my money shipping stuff to their address ok now
that would be a problem so what amazon does is, they force me to reauthenticate just before i actually type in my details ok right before you transact you can add loads of stuff to my basket without having to authenticate myself it's remember that from last time but as
soon as i actually have to do anything proper like spending any money it's going to ask me for my credentials
again same with online banking if i use my bank if i log into my online banking
i use some kind of chip & pin device to authenticate myself that lets me the
first time it lets me see my bank balances if i
want to send any money its going to ask me again because they can't risk me
wandering off by mistake leaving that browser open or someone having stole my cookie we keep carving away at this and what we'll end up with is something that looks nearly like a cube so we probably may be a bit of extra there
and a bit of extra there and there but we'll get it we're getting there ok now some objects obviously a more
amenable to this than others but the more images we get the better it is