i actually think that if we're going to do parsing it might be easiest not to dive into compilers straight away some of you might want me to do but to actually just take a simple very simple subset of the english language and see how we would pass that and if you look up in a dictionary what does parsing mean it says essentially one of the definitions is breaking up sentence structure into its component parts under the direction of the grammar so the grammar is the rules of your language well i have drawn up here a language involving fairy dice and robots and people men and women and cats and dogs and they can bite they can stroke they can whatever and i thought that little grammar which i'll walk you through is capable of generating between two and three hundred sentences and they are all valid english but there's no way it captures the spirit of english the idea that your sentences have subject verb objects is pretty universal i think among what's called the indo-european languages however sometimes it's not always in the order of subject verb objects although that's common sometimes they get twisted around particularly in german where there's a definite option to have the verb last in this example i'm pointing to here i'm using a notation that we did cover about three or four years ago now we'll put out a link i think the episode was called angle brackets and they invented a notation that looks like this pointy brackets yes back in the very late 50s and early 60s people who wanted to write compilers realized they had to write down a formal specification of what were the rules in their language and two computer scientists actually won the turing award acm touring award for their notation and their development of a grammar for the language algol 60 and it uses angle brackets all over the place so that was so-called bacchus now form those are the two computer scientists who developed it people really liked it and i've used it here because it's verbose enough to make some sense i'll read it out to you what i'm saying up at the top of the grammar using the angle brackets for what's going to become parts of a so-called parse tree a sentence is defined as a subject then a verb then an object that's the most common form of english sentence the subject is the personal thing doing the action the verb says what the action is kick bit stroke whatever the object says what it is doing it to the man kicked the robot and it's such a powerful language you can have either the or a definite or indefinite article you can have the robot or a robot you can have a choice of verbs either bit kicked or stroked you're going to be very expressive in this language your subject of the sentence can either be dog cat man woman or robot and finally the tail piece the object i've decided can either be any article followed by a noun again like a dog the robot bitter dog perfectly possible but just to show that you can put in short cuts if you like and put bits of structure in there that aren't pars they're just a glob it you can put in i've defined the phrase two furry dice as being a valid object just the string two fairy dice so the target sentence that ultimately we're going to try and construct from all of this is the lowercase robot stroked running out of space here carry on on the line below the robot stroked two furry dice we all agree it makes sense is it possible against that set of rules and how would you go about showing that it was so by parsable you mean can we decode it can we decode it can we assign everything to be the right flavor of structural component according to those rules now you can either start with the string which we've got here and start trying to group things together and work upwards now we all know about trees the root is at the top we're computer scientists the root is at the top the leaves are at the bottom they're always upside down do we start with the leaves and say oh the robot stroked oh the robot i can looking sideways at the grammar i can see there's a shortcut for the robot shall i start coming from the string upwards and see if i end up back at the root of the tree or shall i start at the root of the tree and say i must have a subject then a verb then an object can i see anything that could likely be the start of a subject that's called coming top down so it's been there in computer science ever since the dawn of computers highest the top-down approach versus the bottom-up approach there's no process for guessing that functional languages like haskell tend by their very structure to favor the top-down approach it's messier is the bottom of approach i shall try and do indicate both okay but let's just this just this one's let's go top down rather than bottom up if we're coming top down it's telling me is this grammar that i must have a subject then a verb then an object now for those of you who are concerned with mechanistics you can actually think of these things if you're coming top down as being pushed as targets that you've got to satisfy on a stack which we all know about stacks this one is not building upwards and downwards it's building from right to left so at the top of my stack currently because i'm coming top down i say my target my sub target is subj i must find a sub but i must keep half an eye on the target string to say does it really match if we cross refer now to this grammar for inspiration we're trying to match a subject if i look at the grammar over there it tells me that a subject can either be an article and a noun like the with a noun like cat dog robot or you can take a shortcut because it tells you here that the subject just could be the phrase the robot so let's go for broke i'm looking at the input string and i see the robot so let's take the shortcut just to be devils right i can say straight away then taking the shortcut the subject can be the string the robot that's good now having satisfied subj i pop it off the top of my stack i've done that next thing to match this sentence you've got to match the verb well we're going along the string we've coped with the robot next word next valid leaf word that has to match up with being a verb i'm looking at stroke is stroke to possibility look at verb what are the possibilities for verb and i say bit kicked or stroked great i choose stroked but once again if you can imagine the stack i then pop that off the top of the stack we've done it the stack is shrinking all we've got left to identify is an object that matches that sentence again i've pulled a fast one here in the rules for object i said you can either break it down into an article and noun just like the subject only it's having the action done to it or you can take a wizzy shortcut an allowed shortcut for an object is what you might call an object phrase and i put it in deliberately just to make a point two fairy dice wonderful simplest pars going an object can be two furry dice we declare success and we say we have matched the robot stroke to fairy dice by going subject verb object subject came down into being shortcut the robot verb developed straight away into being stroked object shortcut to object phrase it's a very shallow tree really but it's developed the target sentence the robot stroke to very nice now the only thing you might say well yes wonderful we've parsed it but would it have worked if the subject instead of taking the robot shortcut could you have done it with the article noun option yes you could i could have basically come here let's write down subject verb object and yes right at the beginning instead of taking the shortcut phrase the robot i could have said ah but i'm going to do it as subject can be an article followed by a noun so the head of the stack then would be when we're looking at the sentence and starting off from the beginning again it's got to be an article to start with article is out or the oh i'm looking at the string i see that bingo so article can be the no problem pop that off the stack what's the next thing what to look for now can noun be robot which is next thing i'm looking at yes robot is an option so i could have done robot now the verb is as before it's got to be stroked and stroked is there and equally the object is as before there's only one way to develop the string to fairy dice and that's to take the declared shortcut that does it for you the reason for doing this rather artificial example is to say oh dear does this matter we have got a sentence that makes perfect sense to us the robot stroked to fairy dice but you've drawn two slightly different trees first time you took the shortcut subject phrase just for the robot next time you said oh but we could also do it by breaking it down further into a the and a robot does that matter in this particular case in informal spoken english no it doesn't if people understand you the fact that your grammar is technically called ambiguous so if you say to yourself what does ambiguous mean it means there's more than one parse tree that seems to satisfy and give the final target phrase does that matter in this case no does it matter in general yes because you might get very different effects under certain circumstances what i think i'll show you is a favorite one almost which is to check your full function desk calculator when you start typing things into a four function so-called hand calculator you're basically putting in shall we say integer numbers let's simplify it but the burning question is something like this that if you type in eight star four star two you may not think of it in those terms but computer scientists would say yes if you got the right grammar rules that's an example of a sentence in quotes you know that is a what's what might you call it a sort of subsection of a long calculation that you're doing on the right hand side of your c statement it's just eight times four times two there's no problem is there eight fours or thirty two two thirty twos or sixty four but then you say ah but we're into tree structures now how would you parse that sentence given that multiply can only multiply two things at a time so are you going to arrange it so that your overall expression groups as eight times four done on the left then you do the multiply by two which is that tree structure so the question is you've got a little bit of depth on your tree structure here it's gone down a level whereas finally you've got one up at the top level do you want that substructure to be on the left or on the right because it's it would be equally okay as we've got things at the moment for you to draw something that's got eight here multiplied by here four two with a multiplier between so have we got a little bit of tree structure on the left or on the right and does it matter and you say no it doesn't matter we all know that you can't complete the expression until it's left operand is known and that involves forcing you to do the multiplier 8 times 4 is 32 fine 32 what's the other wrap around here it's multiplied by 2 32 64. equally over here eight multiplied by four twos eight eight eight and sixty four so you're doing it two different ways but you're getting the same answer and the reason that's okay is that multiply is well behaved mathematicians will tell you it commutes a times b is the same as b times a for integers however just look at that but ambiguity okay two different parse trees and it didn't matter for multiplier just suppose those multipliers weren't multipliers but were divides does it then matter that you do 8 divided by 4 first in this one which gets you 2 and the multipliers and the multipliers you divide 2 divided by 2 one but look at this other possibility and just mentally substitute divides for multiplies eight divided by the result of four divided by two well four divided by two is two eight divided by two is four two completely different answers is it one or is it four if you're panicking take out your calculator now and check the app just do eight slash four slash two and if the answer isn't one demand your money back here we see it then here is an example of where ambiguity does lead to problems because depending which tree you choose you get a different answer so there we are then we now know what a grammar is we know that against a grammar you can try and parse things like sentences but sentence is used in its wider sense it could be a programmed statement from c and just think of this eight times four times two has been as a part of a phrase on the right-hand side of an arithmetic statement and grammar is the guiding principle for the whole thing parallel work in america that they didn't know about had already got there ahead of them in many ways i think some of their mathematical logician friends said john peter are you aware that there's a man called chomsky in the usa he's a linguistics man but very very