so when we looked in the last video my security overview for a particular website we noticed he actually wasn't using diffie hellman it was using elliptic curve diffie-hellman, so this is just going to be a short video that explains broadly the difference between the two without going into too much maths although actually the maths of elliptic curves isn't that difficult. let's not go over diffie-hellman a third time so you and me have some kind of secret key and we use that to talk securely diffie-hellman is how we get that secret key. every time i talk about diffie-hellman and use any kind of analogy people were like oh show us the maths so this is for the maths people we had a few interesting questions on the diffie-hellman video so let's explore remember that alice here has some public variable g ^ a mod n now what's important about this is that in some sense a has been mixed into this generator, so what we can't split it up she can send this around, without everyone working out what a is, which is the important thing. so really what the mathematics behind diffie-hellman does, is allow the protocol to send messages where you can't extract this private variable and that's exactly what elliptic curves do, they just do it in a slightly different way i'll draw a picture elliptic curve ish. right so this is an elliptic curve elliptic curves are curves in two dimensions cameraman: we need colors on this mark, colors, couple colors mark: it's the future, right! so the formula for an elliptic curve is y^2 = x^3 + ax + b. and that's the last time we were to talk about it. so the parameters of the curve are a and b and then the curve will look something like, hold on i'm going to sort take a bit of artistic license with this but something a bit like that. now they vary in shape depending on what a and b are. the thing about an elliptic curve is in our modular arithmetic we had numbers going around modulo n, right which is just a list of numbers it's a cycle of numbers. here we have a cycle of points somewhere on this curve, so our generator will be a point on this curve let's use blue, shall we. this is our generator that's not a good place for my generator it's not a good place my generator, because then my next example of adding things to the generator won't work let's let's do it let's do it there all right ignore that point that can be a different point for later now if this is our generator g what we can do, instead of raising things to powers, we just add g to itself. we have 2g 3g 3g is g plus g plus g. yeah, so what we can do is we can add g to itself. to do that what you do is you draw a line at the tangent of this curve all the way until it hits another point on the curve you flip it over to the other dimension, and this is 2g over here 3g would be the line between these two. find out where it intersects and flip it over here so this is 3g. 3g plus g, would be, it goes along here like this intersects the curve somewhere else flips over and it's over here, so this is 4g. now we won't look at it anymore right the actual formula for this is just mathematics to do with lines and the tangent of this curve it's actually not very complicated the point is what we're doing is by multiplying g by various numbers or adding it to itself this point addition. we're moving around this curve sort of seemingly at random right a bit like how we were moving around our clock face seemingly at random so the nice thing is that if you're adding points together one elliptic curve you will always intersect only one other point which means that you've never got a choice of two or three points where you could go so that helps a lot? when you're doing this so if i give you a point on the curve here and i say question mark g right how many multiples of g is that then any ideas no no idea at all right? it could be 50 g. it. could be 5 billion g we don't we you know it there's no way of knowing that is our private number, and that's the thing we can't extract back out here we couldn't get our a if i give you a g that's all i'm gonna capitalize it now g. plus g plus g plus g a times on this curve i give you that point and ask you to tell me what the private variable was oh no idea, you know for a small curve. you might get it off a few attempts for a big curve you're never going to get it. oh, it's going to take you so long and you won't bother so what? elliptic curves, do is literally a plug in replacement for the mathematics that a modular arithmetic mathematics involved in normal difficulty late b g and their shared secret will end up being a b g and it's very very similar now just to give you someone. we also do this all modulo n because why wouldn't you? know because that's how the mathematics works. that's what we do so in fact. it doesn't really look like a curve anymore i'll show you a picture of one so this is an example of elliptic curve. i just looked on internet right modulo something like 460 this is some curve i don't know what the parameters are now you can see if this was a generator the points are just gonna dot around all over the place eventually they'll go back to the start and cycle background again but not for a long long time so if i give you this point and tell you what was my private number that's how it's secure. it's very hard to undo that and in fact it's very mathematically quite easy to calculate some multiple of g and move around but it's difficult to undo that process that's the private part of elliptic curves. you know i'm going to ask you though why why, would you bother with this? so this looks like it's are being unnecessary complication. yeah well it's a notice in some sense slightly more complicated, but actually mathematically, it's much more efficient the so elliptic curves are a little bit harder to solve this elliptic curve discrete logarithm problem which is what we call it? it's slightly harder to solve in some sense than the regular discrete logarithm problem which means that elliptic curves can get away with shorter key sizes? and that just means less computation when you're calculating a to the g or b to the g to give you an example, so let's imagine that i use a different key was three thousand bits long i would get the same security from an elliptic curve where my prime n is only 256 bits long which is much much shorter the matter is much easier to compute much much faster, so there was a strong tendency to use elliptic curves for that reason if you've got to imagine if you're a server performing these key exchanges all the time because people come into your shop or something like this then that kind of savings actually quite useful. it doesn't really matter if you're doing on your home pc but you know that many you might as well use it with the flip side of that question that yeah is anyone still using the other way yep so there are a few people who are a little bit suspicious of elliptic curves and certain elliptic curves for example the nist p 256 curve has its disk trap detractors because they're not absolutely sure where things like this a and b came from and so on okay maybe i mean for what it's worth big companies are also using that curve, and they seem to be fond of it other curves are available to give you an example i've used a publicly available cryptography library to generate a couple essentially equivalent to g to the a and a g just so you can see the difference in this sort of size we're talking about here if i run this python script we've established a generator and a large prime and this prime is 2048 bits so this is our a and this is our g to the a mod n and you can see i mean this will be slightly shorter, but the idea you can see they're there they're quite long approaching two thousand bits so that on a fast version you can see it didn't take very long to compute but it took a little time to compute if i've run the same thing using elliptic curve. cryptography on the nist p 256 curve we'll see it should be a lot shorter, okay there we go right much shorter the missing 256 bit number much much shorter. you can see our private key is actually a number because it's a number a the number of times we've jumped around our elliptic curve, and this is our actual xy coordinate of our point on the curve so you can see it's split into here's the first part, and then the second part here so this is x and this is y? what you would normally do in this kind of situation if you were driving a key from this is scrap the y and just use the x because it's long enough and secure enough but that will depend on your situation there are debates that i had over what curves are safe to use a lot of people use the nist pt five six curve? but some people other researchers don't think that secure because it may be made they've taken shortcuts on some of the parameters for efficiency reasons they're not sure where somebody's parameters came from and that isn't without precedent there was a situation where an elliptic curve random number generator was found to essentially have a backdoor which might be for a different video so the x.25 five one nine. curve is quite well-regarded because they've gone to great lengths to demonstrate how they came up with their variables, and why it's used you know if you're if you're intricate to graphic research this is something that comes concern. you who's just using the web probably don't worry about it heed the message hello computer file pop up, so it's getting the data of various things and we see here hello computer file we've been able to do this by accessing a value that we shouldn't be able to access this code this if statement should stop us being able to access this past the end of this array