i'd like to talk about face detection all right. so this is the idea or if you've got a picture with one face in it or many faces in it how do we find those faces and the standard approaches is "ah, we'll just use deep learning" now you can use deep learning to find faces but actually the approach that everyone uses isn't deep learning and it was developed in the early 2000s so back before deep learning did everything you kind of had to come up with these algorithms yourself right machine learning was still a thing. so people still use machine learning but they used them with handcrafted features and small neural networks and other kinds of classifiers that they tried to use to do these things now the face detection was you know ongoing research at this time in 2002 paul viola michael jones came up with this paper here called "rapid object detection using a boosted cascade of simple features", and this is a very very good paper. it's been cited some 17,000 times and despite the fact that deep learning has kind of taken over everything. in face detection, this still performs absolutely fine, right it's incredibly quick and if you've got any kind of camera that does some kind of face detection it's going to be using something very similar to this, right? so what does it do? let's talk about that. the problem is, right, there's a few problems with face detection one is that we don't know how big the face is going to be so it could be very big could be very small, and another is, you know, maybe you've got a very high-resolution image. we want to be doing this lots and lots of times a second so what are we going to do to? look over every every tiny bit of image lots and lots of times? complicated, um, machine learning, that says, you know, is this a face? is this not a face? there's a trade-off between speed and accuracy and false-positives and false-negatives. it's a total mess it's very difficult to find faces quickly, right? this is also considering it, you know, we have different ethnic groups young, old people, people who've got glasses on, things like this so all of this adds up to quite a difficult problem, and yet it's not a problem we worry about anymore because we can do it and we can do it because of these guys they came up with a classifier that uses very very simple features, one bit of an image subtracted from another bit of an image and on its own and that's not very good, but if you have thousands and thousands of those, all giving you a clue that maybe this is a face, you could start to come up with proper decision [offscreen] is this looking for facial features then is it as simple as looking for a nose and an eye and etc? so no, not really, right. so deep learning kind of does that right? it takes it takes edges and other features and it combines them together into objects you know, in a hierarchy and then maybe it finds faces. what this is doing is making very quick decisions about what it is to be a face, so in for example, if we're just looking at a grayscale image right, my eye is arguably slightly darker than my forehead, right? in terms of shadowing and the pupils darker and things like this so if you just do this bit of image minus this bit of image my eye is going to produce a different response from this blackboard, right, most of the time now, if you do that on its own, that's not a very good classifier, right? it'll get quite a lot of the faces but it'll also find a load of other stuff as well where something happens to be darker than something else that happens all the time so the question is "can we produce a lot of these things all at once and make a decision that way?" they proposed these very very simple rectangular features which are just one part of an image subtracted from another part of an image so there are a few types of these features. one of them is a two rectangle features so we have a block of image where we subtract one side from the other side their approaches are machine learning-based approach normally, what you would do in machine learning is you would extract -- you can't put the whole image in maybe there's five hundred faces in this image so we put in something we've calculated from the image some features and then we use all machine learning to try and classify bits of the image or the whole image or something like this. their contribution was a very quick way to calculate these features and use them to make a face classification to say there is a face in this block of image or there isn't and the features they use a super simple, right? so they're just rectangular features like this so we've got two rectangles next to each other which, you know are some amount of pixels so maybe it's a it's nine pixels here and nine pixels here or just one pixel and one pixel or hundred pixels and a hundred pixels it's not really important. and we do one subtract the other right? so essentially we're looking for bits of an image where one bit is darker or brighter than another bit this is a two rectangle feature. it can also be oriented the other way so, you know like this we also have three rectangle features which are like this where you're doing sort of maybe the middle subtract the outside or vice versa and we have four rectangle feature which are going to be kind of finding diagonal sort of corner things so something like this even if your image is small right you're going to have a lot of different possible features even of these four types so this four rectangle feature could just be one pixel each or each of these could be half the image it can scale you know or move and move around brady : what determines that?
mike : um, so they do all of them, right? or at least they look at all of them originally and they learn which ones are the most useful for finding a face this over a whole image of a face isn't hugely representative of what a face looks like right? no one's face. the corners are darker than the other two corners that doesn't make sense, right but maybe over their eye, maybe that makes more sense i don't know, that's the kind of the idea. so they have a training process at which was down which of these features are useful, the other problem we've got is that on an image calculating large groups of pixels and summing them up is quite a slow process so they come a really nifty idea called an integral image which makes this way way faster so let's imagine we have an image right, and so think -- consider while we're talking about this that we want to kind of calculate these bits of image but minus some other bit of image, right? so let's imagine we have an image which is nice and small it's too small for me to write on but let's not worry about it right and then let's draw in some pixel values. sast forward. look at the state of that. that's that's a total total shambles this is a rubbable-out pen, right? for goodness sake right right okay okay so all right so let's imagine this is our input image. we're trying to find a face in it now i can't see one but obviously this could be a quite a lot bigger and we want to calculate let's say one of our two rectangle features so maybe we want to do these four pixels up in the top minus the four pixels below it now that's only a few additions : 7 + 7 + 1 + 2 minus 8 + 3 + 1 + 2 but if you're doing this over large sections of image and thousands and thousands of times to try and find faces that's not gonna work so what viola jones came up with was this integral image where we pre-compute some of this arithmetic for us, store it in an intermediate form, and then we can calculate rectangles minus of of rectangles really easily so we do one pass over the image, and every new pixel is the sum of all the pixels above and to the left and it including it. right, so this will be something like this so 1 and 1 + 7 is 8 so this pixel is the sum of these two pixels and this pixel is going to be all these three so that's going to be 12... 14... 23 and now we fast forward while i do a bit of math in my head 8...17 maybe i did somebody's earlier, 24... on a computer this is much much faster the sum of all the pixels is 113. for example, the sum of this 4x4 block is 68 now the reason this is useful, bear with me here but if we want to work out what, let's say, the sum of this region is what we do is we take this one 113 we subtract this one, minus 64 alright, and this one? minus 71 and that's taken off all of that and all of that and then we have to add this bit in because we've been taken off twice so plus 40. all right, so that's four reads. now funnily enough this is a 4 by 4 block so i've achieved nothing but if this was a huge huge image, i've saved a huge amount of time and the answer to this is' which is 6 plus 6 plus 5 plus 1 so the assumption is that i'm not just going to be looking at these pictures one time to do this, right? there's lots of places a face could be i've got to look at lots of combinations of pixels and different regions so i'm going to be doing huge amounts of pixel addition and subtraction so let's calculate this integral image once and then use that as a base to do really quick adding and subtracting of regions, right? and so i think for example a 4 rectangle region is going to take something like nine reads or something like that and a little bit addition. it's very simple all right. so now how do we turn this into a working face detector? let's imagine we have a picture of a face, which is going to be one of my good drawings again now in this particular algorithm, they look 24 by 24 pixel regions, but they can also scale up and down a little bit so let's imagine there's a face here which has, you know eyes, a nose and a mouth right and some hair okay, good. now as i mentioned earlier, there are probably some features that don't make a lot of sense on this so subtracting, for example, if i take my red pen subtracting this half of image from this half. it's not going to represent most faces it may be when there's a lot of lighting on one side, but it's not very good at distinguishing images that have faces in and images that don't have faces in so what they do, is they calculate all of the features, right for a 24 by 24 image they calculate all'0,000 possible combinations of 2, 3, and 4 rectangle features and they work out which one for a given data set of faces and not faces, which one best separates the positives from the negatives, right? so let's say you have 10,000 pictures of faces 10,000 pictures of background which one feature best says "this is a face, this is not a face" 
right, bearing in mind nothing is going to get it completely right with just one feature so the first one it looks it turns out is something like this it's a two rectangle region, but works out a difference between the area of the eyes and the air for cheeks so it's saying if on a normal face your cheeks are generally brighter or darker than your eyes so what they do is they say, okay well, let's start a classifier with just that feature right and see how good it is this is our first feature feature number one, and we have a pretty relaxed threshold so if there's anything plausible in this region we'll let it through right which is going to let through all of the faces and a bunch of other stuff as well that we don't want right. so this is yes. that's okay, right? that's okay if it's a no then we immediately fail that region of image right? so we've done one test which is as we know about four additions so we've said for this region of image if this passes will let it through to the next stage right and we'll say okay it definitely could be a face it's not not-a-face. does that make sense? yeah, okay so let's do look at the next feature the next feature is this one so it's a three region feature and it measures the difference between the nose and the bridge and the eyes, right? which may or may not be darker or lighter. all right, so there's a difference there so this is feature number two, so i'm going to draw that in here number two and if that passes we go to the next feature, so this is a sort of binary, they call it "degenerate decision tree" right, well because the decision tree is a binary tree. this is not really because you immediately stop here you don't go any further.
the argument is that every time we calculate one of these features it takes a little bit of time the quicker we can say "no definitely not a face in there", the better. and the only time we ever need to look at all the features or all of the good ones is when we think, "okay, that actually could be a face here" so we have less and less general, more and more specific features going forward right up to about the number i think it's about six thousand they end up using. all right, so we we say just the first one pass yes, just a second one pass yes, and we keep going until we get a fail and if we get all the way to the end and nothing fails that's a face, right and the beauty of this, is that for the vast majority of the image, there's no computation at all. we just take one look at it, first feature fails "nah, not a face". they designed a really good way of adding and subtracting different regions of the image and then they trained a classifier like this to find the best features and the best order to apply those features which was a nice compromise between always detecting the faces that are there and false positives and speed right? and at the time, this was running on, i think to give you some idea of what the computational technology was like in 2002 this was presented on a 700 megahertz pentium 3 and ran at 15 frames a second which was totally unheard of back then. face detection was the kind of offline, you know, it was okay at that time so this is a really, really cool algorithm and it's so effective that you still see it used in, you know, in your camera phone and in this camera and so on, when you just get a little bounding box around the face and this is still really useful because you might be doing deep learning on something like face recognition, face id something like this but part of that process is firstly working out where the face is, and why reinvent the wheel when this technique works really really well you can't really get into the data center necessarily and take all the chips out that you've put in there so you probably will make the chips look like they're meant to be there like they're something else or hide them so the way a modern printed circuit board is constructed. it's a printed circuit board that's got several layers of fiberglass