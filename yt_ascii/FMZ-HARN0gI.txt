uh i want to talk about gbl circuits a while ago i talked about oblivious transfer and some of you saw this topic coming but i think garbled circuits are amazing garbled circuit so this is ones that have been what purposefully garbled or that's right so it's a cryptographic technique for a problem called multiparty computation multiparty computation is when you have multiple people that want to compute something right it's a computation but they don't want to leak their private information to others so a famous motivating example is yao's millionaires problem you have a dinner and there's a bunch of rich people there and the richest person wants to pay the bill but they don't know who the richest person is did we talk about this kind of problem of the rich people paying the bill wasn't that the beginning of oblivious transfer we did a little bit on that didn't we yes so it turns out that obliv transfer and gobbled circuits go hand in hand so everyone enters their net worth into the protocol and then the protocol will simply say person x is the richest gobbled circuits are a way to solve this problem but not just this problem you can solve any problem that can be logically specified using boolean circuits so that's pretty much how computers work and and compute the answer and just give you the answer and not leak any other information so a quick reminder about oblivious transfer the idea is that you're thinking of the value zero or one and i want you to know a secret depending on which bit you're thinking of and i should not learn your bit and you should not learn what the other potential value is let's think about the millionaires problem for just you and i right so two people so garble circuits actually is always works with two people there's the garbler and the evaluator those are are the terms so that means that you have a certain net worth i have a certain net worth we want to figure out who's richer and we don't want the other person to know exactly how much money we have i will be the garbler so that means that i will build an encrypted circuit and i will give you that encrypted circuit and i will let you do oblivious transfer to translate your net worth in bits into a sequence of secrets and you can then feed those secrets into the circuit and the circuit will then either say you're richer or i'm richer it's of course going to be a big relatively big boolean circuit not very big for a computer but too big for this piece of paper right so i'm going to keep it simple i'm just going to play a different game you're thinking of a bit z or one i'm thinking of a bit z or one and what we want to learn is whether we both are thinking of the bit one and if the answer is yes then of course we will learn the other person was thinking of the bit one but if the answer is no and i was thinking of the bit zero i don't want to learn if you were also thinking zero or if you were thinking one right so this circuit is a simple and gate right the answer is one if both of us have one and it's zero otherwise so it's a very simple boolean circuit so you supply a bit and we call that bit s and i supply a bit and we'll call that bit t so obviously sean's bit tim's bit and what we want to compute is the end gate of this and we'll call that the result right now if we do this in regular boolean logic you supply a value i supply a value we do the end and we get the value the problem is i will know exactly what your value is and you will know what my value is so we're going to do this differently we're going to use a trick for this gate so rather than simply having the value zero or the value one we're going to have a large value called the wire value and there are two possible wire values wire value for true and the yre value for false right so we can call them s0 and s one so the wire value for s if the bit is zero and the yre value for s if the value you're thinking of is one similarly on my wire there will be two possible wire values t0 and t1 again corresponding to false and true and the output will be one of two wire values as well and that's it right so assuming that i'm the garbler and you're the evaluator right that means that as the garbler i'm selecting the wire values s0 s1 t 0 t1 r0 and r1 and i'm constructing this gate then you as the evaluator will simply take the gble circuit that i created and feed in s0 or s1 without you learning what the values of s0 and s1 are and that's of course where oblivious transfer comes in now how do we do this in practice what's the big trick of gobl circuits well this gate is actually a table of encryptions so what are the possible values i think we've all heard of a truth table right so we have 0 0 0 1 1 z and 1 1 that represents the four possible inputs right so this is s and this is t and then what are the output values well that's r right and what we want is 0 0 0 1 right so this is the logical interpretation of the gate but if we do encryption okay what do we have well we've got the wire value s0 s0 s1 s1 t0 t1 t0 and t1 right those are just the yre values corresponding to the bits and what we want as output is r0 r0 r0 and r1 now the big trick is that we're going to do four encryptions four different encryptions we're going to take the value r1 and encrypt it using the combination s0 t0 right so this is some bit string and this is some bit string the big wire values right we combine them together into a single key and we encrypt r0 with that so it's the encryption of r0 symmetric encryption i should say under the key that is consists of s0 and t0 right so that means that if you the evaluator have the values s0 and t 0 you can decrypt this value and find the value r0 similarly for the other ones we want the value r0 here and we're going to encrypt it with the combination s0 and t1 and here we encrypt the value using s1 and t0 and finally the only time we get r1 as the output is when both values are one so it's s1 t1 and this is the table that i'm going to provide you right because i came up with the values s0 s1 t0 t1 r0 and r1 so i can compute all these encryptions right i put them in a table and i then shuffle the table a bit so you don't know oh it's a top value so it's 0 0 right you don't want to know that so i'm going to shuffle the rows but i'm going to give you these four values then i'm going to give you the bit that i'm thinking of in other words i'm just going to give you t0 or t1 you won't be able to learn the other value because there's nothing special about this value right so i'm going to give you for example t0 because i'm thinking of the bit zero then you need to get the bit s0 or s1 now this is where oblivious transfer comes in you think of the bit zero or one and i do the oblivious transfer protocol with you if you were thinking of zero you will get get s0 if you were thinking of one you'll get s1 right and you won't be able to compute the other value from there so you now know either s0 or s1 and either t0 or t1 whichever i gave to you and based on that combination you can only decrypt one of these four rows properly and you don't necessarily know which is which because yeah okay i see yeah yeah and you don't know which is which exactly because we're shuffling the rows right now the problem is there's a minor problem here which is that you can mis decrypt something right you can just use the wrong key and you'll still get an output and so there's a couple of solutions for that the most common one is called point and prute it's a fancy way of saying that in s0 or in s1 and in s t0 or in t1 i'm actually going to give you a hint which row to decrypt but you still don't know whether that row corresponds to this one or that one you just know i need to use that particular row so that that's a trick that they use i've given here an example with a single gate in general i could then use this value r you know for another bigger gate right i can then use this as an input together with some other data from a different circuit and perhaps do an or with that and construct a big circuit arbitrarily big and that means that we can do any arbitrary combination including the millionaire's problem there's going to be a draw right what's the problem problem is yes so it can do anything it only uses symmetric encryption now i think it's been said on this channel many times symmetric encryption is super efficient yes but even if it's super efficient if we're talking about symmetric encryption of 128 bits milliseconds no micros seconds even right but that is to do a single gate and and a single gate in a computer doesn't take micros seconds it takes nano seconds so it's still slowing your circuit down by a lot as you can imagine every circuit also has four encryptions that are usually 128 bits long time 4 you know there's some tricks you can do to reduce it but the circuit description is massive so i'm going to send you mega if not gigabytes of data in order to construct this circuit so while it can solve any problem in theory it can be a bit slow for more advanced problems was seven of diamonds and message one was the nine of spades right and now alis wants to communicate this pretty tiny what i wanted to do is to have a progress bar where it fs on top of the text