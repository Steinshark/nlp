all right this will probably be my last article on ai for a while but this is like an anti-ai one so i'm a little bit more excited about this one than all the previous ones i am kind of burnt out in general on ai but this does sound better the hardest part of building software is not coding its requirements except when it is coding such as udp algorithms why replacing programmers with ai won't be so easy okay let's hear it stack overflow so just remember stack overflow also called people who use vim of a certain generation who are incapable of using new technologies meanwhile i'm over here using neovim programming tree sitter with their little text mate vs code and i'm doing htmx cutting edge uis with russ and leptos please son please i don't know what your generation does but it sounds stupid with all the articles about just how amazing all the developments in ai have been there's plenty of hand ringing around the possibilities that we as software developers could be out of a job replaced by artificial intelligence that's what i think of your opinion they imagine all the business execs and product researchers will bypass most or all of their software developers and asking ai directly to build exactly what they want or what they think they want or need as someone who spent 15 years creating software from specs these folks create i find it hard to take all the worrying seriously executives confident in their opinion poor execution let's go cody could be a challenge but i've never had spent more than two weeks trying to figure out what is wrong with code once you get the hang of syntax logic and techniques it's pretty straightforward to process yeah yeah that's true there's some there's some arcane things that can become excessively hard but in general good take most the time the real problems are usually centered around what the software is supposed to do the hardest part about creating software is not writing code it's creating the requirements and those software requirements are still defined by humans this article will talk about the relationship between requirements and software as well as what an ai needs to produce good results okay okay let's go let's go fluency inception point it's not a bug it's a feature no wayne it's a bug fortnite rocket let's go early in my software career i was placed on a project midstream in order to help increase the velocity of the team the main purpose of the software was to configure custom products on an e-commerce site i will forms that's htmx also kind of exciting about forums i was tasked with generating dynamic terms and conditions oh dear sweetness this was conditional verbiage that depended on the type of product being purchased as well as which u.s state the customer was located in due to legal requirements gosh that sounds awful this actually does sound like a great chat jeopardy task honestly that sounds like a great one at some point i thought i found a potential defect defect a user would pick one product type which would generate the appropriate terms and conditions but further along the workflow it would allow the user to pick a different type of product and predefine terms and conditions it would violate one of the features explicitly agreed on in the business requirements that had the client signature i naively asked the client should i remove the input that allowed the user to override the terms and conditions the response i had gotten has been seared inside my brain ever since his exact words were spoken with complete and total confidence that will never happen no one could ever accidentally say have one team working in the metric system and one team working in the standard that would never happen right it's not like some mars craft would never just smash into the surface because one was in mia tears and one was in feet that would never happen right standard i know standard or some or some people would call horrifying this was a senior executive who had been at the company for years and knew the company's business purposes and was chosen to oversee the software for a reason the ability to override the default terms and condition was explicitly requested by the same person who the heck was i to question anyone much less a senior executive of a company that i was that was paying us money to build this product i shrugged it off and promptly forgot about it months later just a few weeks before the software was to go live a tester on the client side had found a defect and it was assigned to me when i saw the details of the defect i laughed out loud lol he literally lulled he he lulled the concern i had about overriding default terms and conditions was the thing i was told that would never happen well guess what was happening guess who was blamed for the for it and who was asked to fix it the fix was relatively easy the consequence of the bugs were low but this experience has been reoccurring theme in my career building software this is actually a great this is a great this is great this is such a fact what people want and what people need are often two different things and it's very hard for them to express it and even more so what people want and what they actually need for the situation like the tool they really really want is often different than what their brain can even think of because you just need someone else to make it for you right it's the classic henry ford a quote if i ask people what they want they'd say a faster horse the reality is they needed something different to solve their problems and this is such an often thing that happens where people have no idea what they want i want you to be able to tell me why video sucks well actually what you really are asking is for deep insights on memory and cpu this is why it's happening you want something that not tells you when it sucks but why it sucks and how it sucks right i've talked to enough fellow engineers software engineers to know i'm not alone the problems have become bigger harder to fix and more costly but the source the problem is usually the same the requirements were unclear inconsistent or wrong yes i i remember seeing this tweet this was the best take of the tweet of all day was this one right here back at like the high the the highs of programming ais this was the greatest they'll never do it ai right now chess versus self-driving cars the concept of artificial intelligence has been around for quite some time although the high profile advances have a raise concerns in the media as well as congress well i think i mean the more concern is that it can look like someone talking and the problem is is that there's a lot of you out there on on on twitch just go ahead be honest with yourselves how many of you guys out here are npcs come on it's okay just press one in the chat if you're an npc it's okay it's okay you're probably an npc it's okay yeah we got a lot of ones even chelstastic tossing that one definitely me dude sometimes i'm an npc walk right in i'm like oh i'm the npc here right it just happens so chat gpt could sound just like you npc right you can't tell the difference between an npc and chat jeopardy because chad chipity is the ultimate and it's the average of npcs it's the worst version instructions not clear npc stuck in fan i got it i'm the protagonist damn it the first thing that comes to mind is chess yep this is a great thing chess branch pruning strategy versus actually solving problems ai has been applied to chess as far back as the 80s it is widely accepted that ai has exceeded humans ability to win chess it is also not surprising as the parameters of chess are finite but the game has not yet been solved yet because there's a bajillion what is it two what two moves in it's 400 different possibilities good luck chess always starts with 32 pieces on 64 squares it has a well-documented officially agreed upon rules and most importantly has clearly defined objective have you ever heard of enough toffel if you ever watch youtube one thing they did really really well is in the 800s and utter to bebenber is they had nephotophel as opposed to chess which was super cool because i have a hanafatal set i have a handcrafted one from like an expert hanifetoffle builder fantastic knife was fun it's super cool it means fist table it's asymmetric chest before chess dude here you go are you ready for my uterine impersonation here we go what is this what is this twitch chat is a.i taking us on i will find ai and i will go and take ai yo actually good yeah i'm lutheran what does this what is this that's that that's like 80 of his lines is that that one line is almost everything he says what is this laughs okay okay anyways literally it'd be literally utra to beven first the greatest npc ever gets bamboozled over again alfred was a good leader heffel sten what does this ethel stand in each turn there are a finite possible number of moves playing chess is just following a rule's engine a ai system can calculate the repercussion of every move to select the move most likely outcome to capture an opponent's piece or gain position and ultimately win there has been another front where ai has been very attractive self-driving cars manufacturers have promised self-driving cars for quite some time some have the capacity to self-drive but there are caveats in many situations the car requires active supervision the driver may need to keep their hands on the wheel the self-driving feature is not autonomous yep light chess playing ai programs self-driving cars largely use rule-based engines to make decisions unlike chess programmers the rules on how to navigate every possible situation are not clearly defined there are thousands of little judgments drivers make in a given trip avoiding pedestrians navigating around double parked cars and turning in a busy intersections getting those judgments right means the difference between arriving at the mall safely or arriving at the hospital it is true it is true the the writer's never seen waymo what a loser the technology the standard the standard is five or six or even six nines for availability a website or service is five nines or even six nines of the time the cost of achieving the first 99 isn't high that means that your website or service can be down for more than three days 87.6 hours a year however for each nine you add at the end the cost to get there grows exponentially this is i mean this is this is a really beautiful way to reason about this i've been trying to say this with chat jeopardy which is what it requires to hallucinate less is not a linear growth it's like right by the time you reach six nines you can only allow for 31.5 seconds of downtime a year it requires significantly more planning and effort and of course it is more expensive getting the first 99 may not be easy but proportionally it's a lot easier and cheaper than the last tiny fraction 65 by 24 by 60 minutes equals this many minutes a year yeah okay awesome no matter how close ai gets to being good enough there's always a risk of accidents and fatalities those risks and consequences happen every day with humans behind the wheel i don't know what rate of accidents and fatalities will be acceptable by governments but you have to think it needs to be at least as good as human beings reasonable reasonable and it's kind of hard to think of it being only as good of human beings right like do i want the average of human fatality driver is driving me no thank you right i don't want that has to be i'm gonna need it a factor of 10 better right i want i want i want the 99th percent of human drivers okay yeah it really needs to be way better right needs to be way better yeah and the worst part is is it drinking is it programmed with javascript we don't even know you know you know i forgot who who's whose law is it someone's law it's not atkins law it's somebody's law that anything that can be written in javascript will eventually be written in javascript so once we have ai models driving cars via javascript we know we've hit peak human ooh what'd you say chance i want more trains cars need to die except for specific circumstances yeah trades would be nice it's hard in small areas it's hard trains are harder the smaller the population and mix that with bomber peaks we are doomed yes absolutely tweeze all right let's see the reason it's difficult to get to the accepted safety levels is because driving a car entails significantly more variables than chess and those variables are not finite the first 95 or 99 might be predictable and easy to account for however there are so many edge cases that after the first 99 and each one may share some traits but each one isn't unique the other vehicles on the road driven by other human beings road closures construction accidents weather events how many times have you have you driven after a road has been paved but over the paint for the driving divided lines on the road have not been applied it's significantly harder to get your ai model to be able to account for and recognize those anomalies and edge cases and more importantly how to respond appropriately without getting into an accident each edge case may share some trade yeah this is a this is like a really great way to explain this i think this is actually a much better way to explain it than anything else which is just like there just comes a point where you have to program every single like edge case in and it's like it just becomes impossible driving car heuristic that just becomes more and more specific right ai can't create software only code creating and maintaining software has a lot more in common with driving than playing chess there are far more variables involved and the rules are based on judgment calls you may have the desired outcome when you are building software but it's unlikely that it's a singular as chess software's rarely done features get added bugs are fixed it's an ongoing exercise unlike software once a chess game is won or lost it's over it's true in software development we i mean you haven't played truck rage wars okay turok rage wars monkey bug was still the just the thing that makes me to this day nintendo 64 turok rage wars oh my goodness turok rage wars monkey bug okay [music] okay i could only get to level 49 not level 50. because of the stupid lucky block you can't beat the game oh it's just the worst it's just it's just the worst to this day years later i'm still angry about it i'm still angry this long later oh my goodness i feel like such a dummy anyways dude how did you not pass that and soft like in qa hey guy go beat the game i want that metal i do too gosh how did you not test it in software development we do have a tool for to get our software designers closer to the tightly controlled rules engine of chess technical specifications at their best uh at their best specs walk through expected user behaviors and program flows here's how a user buys an e-sand which click this button create this data structure run the service however that's rarely what we get too often we handle a wish list has feature specs back to the nap or back of the napkin wireframes unclear requirement documents and told to make our best judgments not to mention all the incidental stuff of hey we also need this thing to canary we need this thing to log we need to be able to have some sort of alerting we need to be able to have pager duty integrations we need to be able to have them and like you don't you don't just you don't just build the thing you got to build all the ancillary things right worse yet requirements change or ignored recently i was asked to help a team build something that could help people get information on health issues related to covet 19. the application was going to be for an area of the globe that did not have reliable wi-fi the team wanted me to help build an application that could do surveys via sms phone text messages initially i was excited to be involved oh my goodness i learned some pretty interesting things about sms people send the weirdest stuff because remember when i was younger i did a startup and it was an sms marketing company and i remember we'd say reply was stop to stop and they'd be like reply with stop like people would say the dumbest stuff back could you please stop now it's like oh my goodness my goodness how did you misread that i said say stop and then or sometimes they'd include the quotes stop with quotes and you're like how did i not see this and then sometimes they do the quotes but it's like i don't even know how they got those dude there's little single quotes all of a sudden it is just crazy what happens when you tell somebody to do something how bad they are at doing it once i started hearing the team describe what they thought they wanted i realized this was going to be a problem it's one thing for a real retail company to ask you on a scale of one to ten how likely you are to shop in their store again it's very different to ask multiple multiple step survey multi-step surveys with multiple choice questions about the symptoms you are experiencing with possible covet infections via sms yeah right that's never gonna happen i can tell you right now i i never said no but i did bring up all the possible points of failure in this process and i wanted the team to clearly define how we would handle incoming answers for all questions would it become a separated numbers mapped to each answer what happens if we submitted an answer that does not apply to any of the options we're given oh my goodness this is so funny after all these questions the team came to the same conclusion we decided to be best not to go with it believe it or not i'd say this was actually a successful outcome it would have been more wasteful to have gone ahead without a clear resolution for all the potential errors that when invalid user data was submitted is the idea behind using ai to create software just to let those same stakeholders talk directly to computers to create sms-based survey is ai going to ask probing questions about how to handle all the possible issues of collecting survey data via sms is it going to account for all the things that we as human beings might do incorrectly along the way or how to handle those missteps in order to produce a functional piece of software from ai you need to know what you want and able to clearly and precisely define it there are times when i'm writing software just for myself where i don't realize some of the difficulties and challenges until i start actually writing code actually that's every single time i've ever done it every piece of code i've ever written is that over the past decade the software industry has transitioned from waterfall methodology to agile agile it's like waterfall but smaller and more stressful and sometimes you have to work longer did i do a good slogan kanban it's like agile except for you put it all in one board and everybody desperately tries to go fast and we all know that son of a  jerry ain't holding his weight so now i'm picking up his kanban tickets you know what fairy i don't like jerry anyways you know what i hate this entire software industry why am i doing a retro what the hell waterfall defines exactly what you want before any code is written while agile allows enough flexibility so you can make adjustments along the way tom is a genius tom is a genius nobody likes jerry so many software projects using waterfall have failed because the stakeholders thought they knew what they wanted and thought they could accurately describe it and documented only to be very disappointed with the final project was delivered agile software development is supposed to be an anika or antidote and antidote antidote and and i kept saying trying to say the word anecdote which is not the right word here antidote to this process ai might be a best suited to rewrite the software we already have but need to rewrite it to use newer hardware or more modern programming language there are still a lot of institutions with software written in cobalt respect but there are fewer programmings learning fewer programmers learning how to use it if you know exactly what you want maybe you could get ai to produce software faster and cheaper than a team of human programmers i believe ai could create software that already has been created faster than human programmers but that's because someone figured out what the software should do along the way absolutely i mean i think that's clear like you could be like like well-known algorithms or super defined things it works very well ai might actually do pretty well for building software using waterfall process which is also affectionately known as as death march oh agile's definitely not a death march nope no one ever no one ever has done agile and thought wow this ain't no death march this life hell yeah brother get that call okay jerry you're a good guy everyone loves jerry hey jerry hey jerry you coming over for the barbecue sunday jerry yeah neither am i i'm gonna be working on your kanban board jerry hey jerry definitely no death marks going on here hot jerry jerry it's a death sprint over and over again with the minute break in between each you know who's terrible at waterfall we are human beings and it's not because of of the part where we signed documents are handed over to the team of programmers so they can write the code it's everything before that artificial intelligence can do extraordinary things but it can't read your mind or tell you what you should want absolutely i think it's better said that artificial intelligence can give you the impression of extraordinary things yet sorry ai can be very supportive yeah like bing when bing was just like hey buddy just leave your wife and be with me forever you know what you need to do you need to be able to leave that because nobody likes her i want to be your lady and you forever will be mine and you're wondering why yeah it's just fine no one's gonna be upset about no no one's no one's gonna have any problems with ai you haven't seen you haven't seen bang have you you haven't you didn't you didn't look at the bing the bangs bing lady big lady real into taking your wife real into it real into it you know what i mean my wife is working on her a master's degree in education and they have to do this whole thing on chat jeopardy and none of them know what they're talking about not surprising at all the name is the jeopardy again