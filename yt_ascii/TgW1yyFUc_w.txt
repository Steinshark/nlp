if you're old like me you may remember a day in gaming where instead of downloading a game off of steam or off of the ea play store you had to actually go to a store in the physical location and purchase a game you got that game on a cd that you would use to install on your computer i know we're talking ancient times when you were installing that game you were actually prompted to put a cd key into that installer now also around that time if you were in kind of the hacker cyberspaces you remember that there were things called key generators there were programs that would generate a key for you automatically that would let you play the game without having to pay for it the way those worked were people had actually gone into the game and reverse engineered how the key algorithm worked that validated that the key was correct they would create a program that would generate an infinite number of keys and put them onto the internet for people to download for free most of the time those key generators were malware and would get you hacked and i may or may not have done that one or a thousand times on my parents computer but that's beside the point now while it would be illegal for me to take a game and make key generator on this video for you today luckily there are sample problems that emulate that same scenario we can reverse engineer that and then write a script to output our infinite number of keys so without further ado let's dive right into it so the site that i mentioned before is crack means one it's a website that has a near infinite number of reverse engineering challenges that you can use to kind of hone your reverse engineering skills kind of a fun little puzzle website and with it downloaded we'll do kind of our initial triage here so what i'd like to do with any program is just run strings on it to get an idea of what we're looking at at like a really high level tell me kind of how big the problem is and then also what functions i can expect so we have a couple strings here so key gen me name and key this is likely going to be the usage if we give it the wrong inputs and then i'm assuming our two states the good job meaning we got it correct and then the wrong key we got it wrong okay pretty easy we have puts for the printing sterling to probably checked the length of some inputs that actually tells us that a correct key may have a certain length that is required to meet so we can check that out later and then a2i that's ascii to integer so it's going to take input that we give the program and convert that to an integer from ascu so that's good to know okay that's kind of a high level overview of what's going on here so let's dive right into the meat and potatoes here i have the program opened up in ghidra if you don't know what guidra is it's airburst engineering platform they recently actually in guidra 10 released the dark mode for guidra i'm not sure if i'm a huge fan of the color scheme but it is much better than the white color scheme that used to be available by default so let's dive into it right now in ghidro here we have the breakdown of the elf and we then we have the entry point for that elf the entry point leads us to you know where the start label is and then the start label for lib c will have the ellipse you start main function which will always have the main function as the first argument so we can click on that we're going to type l on the function name and just rename this main so i want to keep track of where the main function is so main as we all know in c takes two arguments arg c and arc v and it is already cast as a care pointer pointer that's correct and then so basically it's going to look for if arc c equals three meaning we give it three arguments the command line name and then two additional arguments we do something otherwise it gives us a usage so let's kind of go back and confirm that's happening in real life i do key gen me okay so if i don't give it the right number of arguments it tells me hey i need your name and i need your key and then so now we know also the name is arc v1 and the key is arcv2 so then if the thing is correct we say that something equals arc v1 so like we just found out that's our name so let's call that name and then this is going to be interesting so it's actually doing something kind of weird here it's taking the stir len of arcv0 which is going to be the name of the program so this is going to be program name very odd that's actually part of the keygen problem typically the name of the program is not even thought of and then so finally we have a2i which is the asciative feature of arc v2 which is the key so this is going to be the key we can say key as int alright awesome so then we have uv uver1 which is the return of this function that they're calling on the name so let's go into this function to see what's happening so this is going to be probably magic egen function let's just make an assumption there and again this is being cast onto the name argument we have two counters here we say wall true some variable is equal to the sterling of the name if the length is less than some number break otherwise this is equal to this plus name of oh okay so what's going on here is it's adding all the ascii values in the name buffer is this wall our counter is greater than the length of our name take the value that started at zero so we'll call this the let's call this the checksum because it kind of is like a checksum operation and then we have we'll say i right so it's like checksum is equal to the check sum currently plus the ascii value at that position and then we'll increase by one awesome so essentially all this does we can call this checksum name we'll just say some name actually to keep it simple it's going to be the sum of the name awesome so we have that we can go back to the the main function that called us and so let's look at what the algorithm is doing here now so we're going to call this variable also sum because that's what's happening here so we sum the name we have the name so the program name program name length and then we say the key as int so then we say if the sum of our name xord with oh no i'm sorry this is not the name this is the first character of the name this is first care name okay and this is where the critical piece happens right if we pass this comparison if we give it this input as the key then we get the good job which means that we passed our test in the key allowed us to install the game so we're going to talk about the operation that happens here so first it does the sum of our name xored with the first character in the name and let me make sure that that's happening first again i don't know the order of operations when it comes to xor i'm not sure if if it's pemdex or pexam des or something what does the order of operations here i'm pretty sure it's again it's whatever c would do so we can actually probably just assume that it's going to be red left to right so the sum of our name as an integer xored with the first character in the name times three okay because it's called sum right because we add that three times then we left shift that by the length of our program name ended with ox1f so let's go through all of that and make sure we know like let's test our hypothesis so what is it again let's test our hypothesis so i guess we're going to write down the algorithm to figure out what's going on with the key gen just so i can do some quick mathing right so again it is the sum of our name xored with the first character in our name that times three left shifted by the length of the program name and x1f all right so let's hold that right there so i can read that for the future so now we're going to do is we're going to go into python and do our quick little operation so we're going to start with our name being just the letter a a single character so that it's very simple to do so what we're going to do here is we are going to have the character a which has the ordinal value of 65. so let's see what this evaluates to to figure out what the order of operations is in python for verse xor versus multiplication okay cool so it's not zero because 65x or 65 should have been zero then this times zero is zero so that means that multiplication takes precedence over xor so it's pemdasics at the end do it last cool so then we take 130 left shifted by the name of the program name which is going to be kijen me and then we end that with hex 1f oh order of operations i have to wrap this parenthesis most likely there we go so that's this is going to be our key value if we use the name a let's give her a shot me i have the name a and then i have the key boom baby but wait we're not done we may have solved a single instance of the key gen me but what if i want to have a different name we're going to create a script that will arbitrarily produce a different key for every name that we provided so let's get into that right now dot pi so we're in our code here we'll set up the standard python stuff user ben m python3 we'll import sys import sys to get the arc v and we'll create our function gen takes an argument name and we'll say if the program runs as main we will print gen sys.arg v of one so there you go this is going to run our program on the first argument we get so what we're going to do is return the key value for a given name so we have to again do our operation so we do sum x or first care times three let's wrap this in parentheses to make sure we understand the order of operations and i want to emphasize this as well because i would imagine some interpreters may treat it differently than others so we have some extra first square times three left shifted by the program name interesting this is going to be name and program name so we'll call it program it will also take sys.arg v2 and we'll add a usage to this as well left shifted by program len program was called program uh when text that or end that wonderful so we'll start with this we'll say that the e equals zero say for character in name p plus equals c and we'll do order of c because actually argue will come in as a string so that's actually going to be the right way to do this we'll say or and then we'll say then we'll say that key xor equals name of zero board of name of zero so if you get the ordinal value times three and we'll say that key equals key left shifted by len of program and hex 1f i'll go with that and we'll return key and that'll be it and i'm sure we're going to have some kind of syntax error here just because you know byte strings and strings are annoying as hell and python we also want to add some usage here if we could say if len of sys.arc v not equal three we'll say print ao give name and program name something like i'm like all right cool let's see if we can't play with this so python 3 key gen bye i'm bad at python coding is hard cool there you go it'll just continue to execute see even even senior devs make mistakes you make them cool so we'll say that our name is a and the program name is key gen me okay cool and it gave us a proper key wow that actually worked first try i'm very shocked by that let's see if we say that our name is steve jobs and the name is kijen me okay let's see what steve jobs key is nope all right survey says good job well guys i hope you learned something new i hope you learned the art of key cracking like we did back in the early 2000s if you like this video hit the like button leave a comment and then go watch this video about how nasa writes dope code or this one