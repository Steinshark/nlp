all right i do want to find out is zig actually safer let's turn down the music a little bit for you all right when is ziggs safer and faster than rust there are endless debates online about zig and rust this post explores the side of the argument i don't think is mentioned enough that rust is just simply better than sick i think that's what this opponent of this article better be about and if it's not it's just zig propaganda else it's the truth okay that's the only possible options here intro too long didn't read i'm sorry or congratulations that's really what you should say is i'm sorry or congratulations i feel like that's the better tldr these days i'm sorry congratulations i was intrigued to learn that the roc language rewrote their standard library from rust to zig what made zig a better option they wrote that they were using a lot of unsafe for us and i was getting in their way they also mentioned that zig had more tools for working in a memory unsafe environment such as reporting memory leaks and tests that's very interesting okay making an overall process much better okay okay so is zig a better alternative to writing unsafe for us hmm i always have so many questions here like why are you writing so much unsafe for us i mean i know you do it for performance but i don't know i just get i just get someone it's so many levels of curiousness you know what i mean like what's what what is going on to get to this point i i don't even know i have given zig a try i don't really like zig the problem is i have this i have this problem where zig i don't know what niche it's really trying to fulfill meaning like carbon i think is going to be the true like successor to c plus plus and i think rust is really going to be the safe practically as fast and if you're writing good c plus plus faster alternative right so if you're writing good c plus what i mean by good c plus plus is that you're doing shared memory pointers and unique pointers you don't play around with pointers you know what i mean that's what i mean i know zig is supposed to be the c the c replacement i i'm very curious how the c community feels about that i'm just very curious because to become better than the sea world you also have to like a you have to somehow change you know that whole culture in there from using c then you have to fulfill all those decades of libraries like to me that just seems like such a hard thing you know what i mean by the way i haven't picked a lane do you see my beard is really growing out i accidentally let it grow for the last four days and now look at me now look at me i look horrible take a culture of these nuts okay okay i'll take that into consideration thank you they wrote that they were using a lot of unsafe for us and it was getting in their way they also mentioned that okay i already read that so zig is a better alternative to writing unsafe russ i just wanted to test myself and see how hard unsafe rust would be by building a project that required a substantial amount of unsafe code then i would rewrite the project in zig to see if it'd be easier slash better after i finish but okay so first off right away i will say that there's a huge barrier right here this is a huge barrier the first time you were so i don't know this person's experience level yet okay just to be fair so writing something the first time in a language you're probably not going to do as many idiomatic items second off writing something and then rewriting something you're gonna just do it better the second time you write it you already have like everything in your head floating in there and you program into the future for those items that tricked you up the first time that tripped you that made you do the wrong thing so i i do think you have to write the project rewrite it in zig and then rewrite it from scratch again in rust and then truly see which one was actually easier because i think it's just i think it's unfair to do first try in a language and then second try in another language you're just missing seeing all the the hard parts you know what i mean let's see also i finished both versions i found that zig implementation was safer faster and easier to write i'll share a bit about building both and what i learned i'll let's see we'll be writing a bytecode interpreter or a vm for a programming language that uses mark and sweep garbage collection the garbage collection is an important part it's hard to make it work and be fast and be safe because it's fundamentally a problem that doesn't play nicely with the borrow checker interesting interesting interesting there are two ways that i can think to do it and say for us using reference counting and using arena plus handles yeah yeah arena plus handles is like you have like a numeric offset into a large chunk right or you have some sort of double identification for like arena plus offset into a larger chunk right and you just have these raw undone datas and then you have like a memory mapped piece of data into some raw binary right is that is that what they're trying to say kind of like you know you can have a struct that's laid out in memory and then you just need the point the pointer to the struct in in the in the sea world and boom that's what it is so if you just have a bunch of you know if you just had one big memory region you could just do that with rust i assume in the unsafe world using pointers that's what i assume okay correct i mean that's what i assumed that's how i assume what this means because i've never actually done that in this capacity i've done it but i've never done it to this to this level or in this the specific byte code implement interpreter implementations from my favorite books crafting interpreters i've thorsten balls book by the way the interpreterbook.com i don't know if you know about that in particular it's a stack based vm for a language that supports functions closures classes instances etc it'd be strange if it supported classes but not instances you may define one you shall not create one all right unsafe for us to implementation overall the experience was not great especially compared to the joy of writing regular safe rust i agree with them so much joy unsafe rust is hard unsafe rust is hard a lot harder than c this because unsafe for us has a lot of nuanced rules about undefined behavior thanks to the borrow checker that make it easy to perniciously break things and introduce bugs this is because the compiler makes optimizations assuming you're following its ownership rules but if you break them this that's consideration or that's considered undefined behavior and the compiler chunks along chugs along well i can't read today c makes you be easier yeah it does you can more easily you be with c than rust it's just that's what it means okay you can just have undefined behavior easier all right applying these same optimizations and potentially transforming your code into something dangerous okay that's interesting that's really interesting that it could the compiler could introduce bugs which is also something that maybe is a fixable problem to make matters worse rust doesn't fully know what behavior is considered undefined so it could be the right lucies so you could be writing code that exhibits undefined behavior without even knowing it oh interesting i do want to follow that article but i don't want to you know i don't want to play the game of the forever follow let's see one way to alleviate this is to use miri it's an interpreter for rust mid-level intermediate representation that can detect undefined behavior it let's see it does its job but it comes at its own warts oh interesting miri is showing me undefined behavior no item granting right access for deallocation to take this oh interesting yeah you're really i mean when you're writing code like this you're really in some deep waters right here interesting the most challenging part aliasing rules the most challenging source of undefined behavior i ran into was related to russ aliasing rules as mentioned before russ leverages its borrow checker ownership rules to make compiler optimizations if you break these rules you get undefined behavior so how can i even write this the trick is to use raw pointers oh you know you got a rod dog them pointers boys okay if you're not raw dog and the pointers okay what are you even doing with your life allowing you to sidestep the borrow checker for example you can have many mutable references or mutable console raw pointers you want then the solution be easy right no not quite okay if you turn a raw pointer into a reference you'll have to make it make sure it abides by the rules for that type of reference okay for the duration of its lifetime for example a mutable reference cannot exist while another immutable slash immutable reference exists too okay so you have to do all of your mutations within unsafe mode is that what they're trying to say i assume that's what they're trying to say if you're trying to convert back and forth perhaps it just makes it a lot harder maybe i don't know i again i've never i've never written a line of unsafe rust ever in my lifetime turn the raw pointer into a mutable reference if i create another reference immutable or immutable while the above reference is live that's undefined behavior okay that makes sense i mean that does make sense right they missed the point of rust well i'm curious why even if you're writing unsafe stuff and you're doing arena stuff why is this happening to begin with i'm very curious but maybe i again i don't know the problem space i don't know the problem space okay all right i don't i really don't this is a easy to violate you might let's see you might make a mutable reference to some data call some functions and then like 10 layers deep in the call stack one function might make an immutable reference to the same data and now you have undefined behavior yeah i i could see that i'm curious what the undefined behavior is does anyone know what the undefined behavior of that is because to me it seems like technically it would just chug along would it be a problem i mean you might get some like some data but you can't i mean can you even get data races unless if it's multi-threaded i'm not sure if the thing's multi-threaded or not i guess maybe that's part of the problem right now is that i don't know the oh alias aliasing is undefined interesting we'll use after free well duh duh handling handing out multiple mutable immutability to pre-allocated arena is impossible without unsafe rust yes yes yes i've always wanted to play with some unsafe for us i feel like i need to do that at some point just to like know that i can do it you know what i mean i think that that would be a lot of fun i'd love to do some sort of some equal form of arena allocations you know what i mean okay so what if we avoid making references entirely and only use raw dog pointers there you go so that was my question that was my question well the issue is that raw pointers don't have the same ergonomics as references okay yeah firstly you can't associate functions that take a self as a raw pointer okay that's interesting okay so that's a good point so if they had an unsafe class that could be pretty interesting right it's really crazy that they call this struck class my like my eyeballs can't even read this without like wtfing right now don't even for an example this is like right now i'm just like what the hell's hey what the hell is even happening okay so that means you can have no you have to purely do it by functions and not do it by you can have no methods okay i mean that's inconvenient it'd be really nice not to have that there isn't any nice pointer d referencing syntax in like like c's the code is littered with this okay that's unfortunate i feel like hmm it's disgusting i would say that it's inconvenient for sure i wonder if you could macro this out you know real talk i wonder if you could macro that out where what you do is like the first thing you give you give a list of of pointers and then you give a block of code and then the block of code just gets auto pointer updated like everywhere that the pointers reference that just gets i'm not sure if that's possible i don't know i you know what i mean but just seems interesting russ wants you to explicitly dereference the pointer yeah russ does want you to explicitly dereference the pointer but maybe there should be a convenience you know like if you're already writing unsafe rust a arrow command or an arrow an arrow accessor really makes it obvious that you're dereferencing like to me this reads no different right this just reads as slightly less convenient version of this i know these some of these rules that rust makes like i hear about like no plus plus it just feels like people trying to be pedantic for the sake of being pedantic do you know what i mean like i don't really care if you use plus plus plus or plus equals one like it's the same [ __ ] i don't care you know i mean i don't get the plus plus i don't think anyone truly gets the plus plus one actually before we go forward let's do a little quick pull because i'm actually really really really curious about this let's do the plus plus one new poll let's do a new poll should rust use plus plus yes no undecided oh oh yeah okay let's see let's see we'll go like this should use post only plus plus how does that sound so only post side we're not even talking about pre-incrementing just only post side only post side so you can just go plus plus some variable and that's it like you don't like it would sometimes you have to add one sometimes you have to add one and that's that interesting wow this is actually a lot closer than i thought it would be for those that can't see here let me turn off i'm i i'm personally surprised at this i'm actually really surprised at this i would have thought it would have been like 90 yes plus undecided it's a lot stronger no i mean hey this just goes to show that it's really that nobody understands that nobody understands what people want yes let's add more features to rust well plus plus doesn't interact well with macros okay okay that okay so that's a good reason that's a technical reason i like technical reasons i don't see how you know some some var plus plus versus some var plus equals one i don't see how that changes anything to me they're the same thing to me but if it's about like a specific implementation details like hey it really is hard to do it in this reason totally and totally in you can't say it's explicit plus plus is no less explicit than plus equals right bring me back to the time when swift decided it wasn't going to be c like and remove the plus plus i i don't get any of the arguments of it's more explicit or any of those things those things all they all seem like the same stuff right we're all just it's all pedantic masturbation to me at that point like what is the limitations to me that it does seem interesting there's plenty of redundant stuff well that's why i said post only what about plus plus versus parts i i like i like having the options i use the options i just do i feel like macros are holding some completely new features back sadly oh interesting i wouldn't know that correct correct but when you use it on the same line the compiler is going to ignore it no matter what some macro plus plus might expand to the argument multiple times and cause multiple increments oh interesting okay okay plus equals is more explicit in my mind because it stated how to show when it gets evaluated when you read from top to bottom plus plus is less explicit because you know you have to know what it does not my main reason for against it okay interesting hmm i feel like plus plus post fix is added then prefix was added to since plus plus is already a convention get out of here with your free will conversations stores that yes well that's only if it actually does that's only if it does an actual thing right most compilers at this point you know they will drop they will drop out any of the extra things that need to happen right like if you're not actually using the value it's going to make the optimization it's actually going to turn it into plus plus that variable as opposed to that variable plus plus or it should it'd be crazy if it didn't let's say i want to change my note to say that finally plus plus is or plus equals is sufficient yeah i just have no i have no strong preference on it other than i just or let me say it's i do have a strong preference on it but it's not that strong it's not strong enough to be upset you know what i mean it's just strong enough that it's annoying you know i'm like ah i wish i had that in my opinion it also leads to unnecessary code golf i i don't see that i don't i don't see that next there isn't a nice way to yes okay so i do i do like this i do i would like to see derferencing it really sucks when you have a chain of d references yeah because you know rust takes so much time with the await syntax to make it really nice this does look like that sucks i can agree that looks like it sucks can we agree that that looks like it sucks okay another problem okay so so what i'm hearing is that syntactically it's hard to work with okay so maybe maybe the argument is not against i'm curious if i'm curious if the argument is against the syntax or against are the ease of syntax versus the language itself because right now i'm saying it's like the syntax i know you could argue the syntax is the language but you know nothing prevents rust from adding an arrow function other than the people maintaining it and their reasons why they should or should not do that another problem was working with arrays if i have a raw pointer to my array of data mute t i can turn it into a slice mute t or a mute slice t let's see and i get to use a four in loop over let's see any iterators yep but turning it into this basically makes a reference to all the data in the array so it makes it really easy to violate russ aliasing rules yet again okay interesting interesting okay okay again the solution is to avoid making references so in some places i ended up writing regular style c4 loops on the array raw pointer but raw pointer suck in comparison to rust slices because you can't index them any and you don't get out of bounce checking yeah yeah yeah yeah yeah yeah yeah yeah i mean i like i prefer i i personally do prefer you know avoiding me writing the actual for loop i mess things up you know i messed i mess up a lot of things you know what i mean okay hey unpronounced let me let me look at this here in a moment okay link it again here shortly because i'm actually curious okay pub struct closure up values mute up value what's up value can't index raw pointer closure up values one well what's an up value have to do this and no autobounds checking oh interesting okay yeah miri uses stacked borrow model so it can text you be related to these alias these rules i mentioned above but it fixes that let's see but fixing them was challenging i felt like a lot of let's see it felt a lot like when i was learning russ there are these rules that don't exist but i have a solid mental model of them i would have to figure out why what i was doing was wrong then experiment to find a way to fix it oh that's tough also note that the feedback loop was way slower because there is no lsp in my code editor guiding me interesting i have to recompile the program each time to see amiri's output oh that that's yeah a tool a tooling gap is also a big problem there tooling gaps are big problems what's up doc i don't know let's see this really ruined my experience for me by the end of it i wasn't really enjoying rust yeah okay okay i get that just this weird half of rusty language that was more error prone and and delicate okay so given the fact of all these i could understand that so i think the argument is that rust let me try to summarize the argument i think is that the tooling and the syntax makes unsafe rust not too easy to write is this true oh i got rated oh well let me say thank you very much hey matthias thank you very much for the the raid sorry i have i have alerts off when i'm doing article reading i'm sorry about that we're doing a little text stream we're reading about unsafe rust versus zig so i hope that you enjoyed welcome all 88 people thank you very much for the rate i really appreciate that just because you know alerts make things kind of you know blog to embed code on say for us has to are a focus for them oh interesting so this could be could you link this here when i'm done with this article because that looks really really exciting actually all right if you turn rob let's say hold on all right so let's look at let's look at the next thing zig implementation after spending a lot of time practicing the dark arts in rust i was excited to leave unsafe for us to learn zig and start rewriting the project in it apart from not having crazy you be like in unsafe rust zig is a language that understands that you're going to be doing memory unsafe things so it's designed and optimized around making that experience much better and less error prone okay this is super cool this is super cool i like this this is a good argument for zig on on in unsafe environments but it sounds like the rust teams their 2024 roadmap is to do this so that could you know that could yet again defeat zig in what's the purpose what is zig's strong purpose and zig any function that allocates memory must be passed it an allocator yep this was amazing because i made a garbage collector a custom allocator each allocation slash dallocation tracked how many bytes were allocated and triggered garber collection if needed very cool i like that that's very cool that's actually super cool can't you override how memory is allocated in in rust as well anyways whatever well i guess this makes more sense because then you can oh no you wouldn't want to do that because in global rust you have two different type of memories then right you'd have your vm memory versus your your global memory whereas in in the zig world you have to pass the allocator so therefore your vm allocations can have one allocator and your program running the vm can have the other allocator i assume that's what's happening here right that's pretty cool can you over okay so you can overwrite that the global allocator for just custom ones okay so then theoretically you could quote unquote achieved something similar in rust if they had better unsafe mechanics rock on to use anything for let's see hold on let's see allocators and rust are quite different unfortunately haven't managed to get much use out of them yet despite trying okay very cool this is yeah this is definitely a way out of my waters here let's see constant gc struck the allocator was wrapped over okay inner allocators just an allocator bytes allocated interesting other fields outlook resize and free are required functions all right okay cool collect if needed very cool what i love about this design choice of zigs it makes it frictionless and idiomatic to use different allocation strategies that are optimal in your use case i do think that that is cool this is a really cool feature of zig that you can you have your own custom at first when i saw that i thought oh man that's a lot of overhead but as we were playing with it as i thought about i was like okay there could be some really cool things and this is actually a super cool example of it for example if you know some allocations have similar and finite lifetimes you could use a super fast bump arena allocation yeah or a linear arena allocation yes to speed up your program this stuff exists in rust but it's not as nice and sick okay a special allocator which detects memory bugs when i use or when used it detects use after freeze and double freeze to it prints a nice stack trace of when and where the data was allocated freed and used oh very cool so it's like a debug allocator this in particular was a lifesaver during development absolutely okay that's super cool like a debug allocator that just allocates massive amounts of memory but has it all in there very cool that's actually super cool let's see non-null pointers by default most memory safety bugs are null pointer dereferences and out of bound array indexing yeah that's safe to say lizzy russ raw pointer types are nullable by default and have no null pointer dereference checking okay there is a no null t pointer type that gives you more safety i'm not sure why it's not the default since rust references are non-nullable let's see zig pointers by default default are non non-null oh my goodness i'm saying the word non-null too many times and if you opt out to null ability you use the question operator okay and of course you get a null pointer d referencing checking enabled by default too i much prefer this it makes the default choice the safest pointers and slices zig understands you are going to be working with pointer so it makes the experience great the big problem with unsafe rust version was that raw pointers had terrible ergonomics the syntax for d-referencing yep yeah we we saw that it was terrible if you didn't see it it was like awful like just just parentheses star parentheses star parentheses star like just constant layering on it's pretty much the same await problem in javascript is the pointer dereferencing except for pointer d referencing happens a lot more i find myself doing constant parentheses await accessing something zig pointers have the same ergonomics as rust references namely the dot operator doubles as a pointer der referencing okay zig also has some additional pointer types that help you disambiguate pointers to a single value let's see pointers to a single value from pointers to an array okay a point let's see a pointer to an unknown number of items like rust slice okay an alternative to slices when n is a comp time known constant wow they support indexing with an array syntax and let's see while regular pointers t-star don't which is really great for safety a cool part is that it's very easy to convert in between different pointer types okay okay traditional pointers like the ones you'd see in cc plus plus are very error prone russ solves this by adding a facade layer over pointers it's reference type t and mute t but unfortunately for rust it's raw pointers still have the same issues as cc plus plus yeah zig solves this by removing a lot of foot guns from pointers and adding additional guards okay so again i assume rust could do something here right could we say that rust could theoretically solve a lot of these problems by focusing on unsafe and it sounds like they're focusing on unsafe so all right benchmark results now it's time for what everyone wants to see the benchmarks oh yeah baby give me the good stuff the g-spot the good spot is icon here are a few pics of the results if you want to look at a specific code 35th fibonacci number this has no meaning in my life because it doesn't like how does memory allocation work here i don't even know let's see han what am i looking at okay so this would be is this supposed to be the rust side and this is supposed to be the zig side zlocks zig out okay so this is the zig side so it's like one second this is 1.6 seconds that's a lot okay that's a lot difference that's a lot different that's that's much much much faster if you're getting to this speed out of it that's good i mean it's a good argument right there i can buy that as a good argument method calling stress test well that's a big difference that's a big difference okay interesting interesting string of quality stress test oh interesting very very good i wonder how these all play out in i wonder how these things play out in larger like larger systems do you still do are you gonna universally see larger faster items or is this a micro bench optimization meaning that you're doing the same thing a bunch versus you're doing something a little bit of times over a large field you know of operation so what what exactly happens i don't know what zoo is but all right zoo sounds great so also again really fast so why was it faster for the benchmark zig implementation was around yeah it was like 50 plus faster why is that i tried profiling the two but i didn't get any useful information out i think the reason is that rust version there were a few places where i had to use indices instead of pointers for the stack next instruction call frame stack okay because it was too complicated to get them to use pointers and satisfy mary's ub checks okay interesting is it because he was i mean ultimately using these checks was that part of the problem the zig version uses pointers for those places so super common operations like manipulation are the top top of the stack getting the next instruction or the current call frame was a simple planar d reference where russ had to do pointer arithmetic okay okay so that would be a lot that'd be a little bit more expensive keep in mind those operations are happening super frequently in the vm so these extra ops add up yeah absolutely i tried refactoring the rust version but each time i tried it would take a long time and i wouldn't satisfied mary's checks so i gave up after bit okay reasonable if anyone has any other ideas further why the rust is slower and okay interesting and so reddit apparently has a lot more so if you want to check out reddit go check out reddit i don't want to step through every possible one writing a substantial amount of unsafe for us really sucks and the beauty let's see sucks the beauty out of the language i feel like i was either tiptoeing through the broken glass of undefined behavior or is writing in this really weird half rust half c mutation abomination of the language the whole point of us is to use the borrow checker but when you frequently need to do something the borrow checker doesn't like you should really be using the language okay interesting question this is an interesting question this feels like it was read by someone who likes rust he multiple multiple times refer to it as beautiful the joys of writing it it is amazing i absolutely like i mean this guy is all boners for us right so let it happen right the man's losing blood to his brain at this point let's see the aspect of rust doesn't seem to be talked about enough when people compare rust to zig and definitely should be considered when you're going to do memory safe unsafe things like performance okay give them a pass okay this is not a zig chill it doesn't seem like as someone who loves ross really does he love russ i can't tell at this point i'm definitely going to explore using zig more for projects i like the idea of being able to choose different memory allocation strategies and then performance opportunities that it brings while i was writing the zig version i took a comprehensive notes on my thoughts and feelings about learning okay this is cool this is actually pretty cool i think this would be a really great thing to go through if you want to learn more about these languages i might have to at some point go check this out i may want to retry to rewrite the interpreter i don't know if you know the thorson ball book but last november i tried to write out an interpreter in 12 hours using rust and i've never tried it and it was terrible i didn't do a good job but i would like to try it i'd like to try another swing at that here at some point zig paid actor does rust backward compatible compatibility also applied unsafe interesting by the way where is the article it's on zackoverflow.com all right hey i hope you enjoyed it the name is the private jet hey like the video i got him this is youtube right there youtube everybody