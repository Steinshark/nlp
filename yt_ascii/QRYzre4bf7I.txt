let's talk a bit about anonymization, more specifically onion routing, so max has done a very good video on the dark web and the deep web and the service web and the differences between them when people talk about the dark web they're mostly talking about tor and specifically tor hidden services. now i'm not talking about that certainly today i might do that in a different video tor literally stands for the onion router, right, it is an implementation of onion routing right which was developed in the mid 90s by us naval research.the idea is it bounces around connections between different routers so that they're hard to track and it's and it provides anonymity so this is different from confidentiality which we usually associate with encryption right most of the time, we're encrypting messages so that even if people see that we've sent a message we, they can't read what it is like, but sometimes we don't even want people to see that we sent a message at all so what i'd like to do is focus on onion routing specifically bearing in mind, that tor is a and implementation of it so in some sense i'm also talking about tor, okay and maybe we'll focus a little bit more on what it is that tor does differently a bit later. so this is me and which is my very well drawn computer as always and i want to talk to a server here which doesn't have a monitor because in my view servers don't have monitors, so normally on this client server setup i want to talk to a server, but in this case i don't want anyone to know that i'm talking to a server at all i'd like to be remain completely anonymous, right, now if i then go onto the server and log on obviously that's not anonymous anymore right so it's limits to this but this is the idea, now how this works is i'm going to bounce my connection around and then it's going to go to the server and if in essence the last node on the hop, the last hop on the network is is going to be the one actually visits that website on my behalf a bit like a proxy we're going to use multiple levels of encryption to try and essentially confuse people who are trying to work out what's going on right now tor in it in in its implementation uses three hops three intermediate nodes, so i'm going to limit: one that's not a very good computer two. hang on i thought servers didn't have monitors. oh no, so well. aw, don't. i mean yeah, so that's a good question right so you can run tor and you can be an onion router on a client machine on a laptop you know it doesn't really matter if your net connection is quite good you can do it. the software is free and they very much want people to sign up and become these intermediate nodes because in some ways that's what the power tor is we'll get to that a little bit but in essence what happens here is i send a message to to this guy he forwarded on to this one he falls it on to this one who then forwards onto the server when a server responds they simply pass the messages back now this haven't really solved any problems yet because anyone sniffing here will know well ok we just need to sniff there and then  sniff there. and they can kind of reassemble the communication it makes it a bit of a pain, but it doesn't stop anyone from finding out: what's going on? i, even if these were encrypted so what we need to do is have multiple layers of encryption what's clever about onion routing, is that no one in this network knows anything about the whole connection. they just know what's before them, and what's after them. alright? so let me show you how this works so 
 i'm going to use different colored pen alright, so let's use this red pen. let's imagine for a minute that i've established some shared symmetric keys with these three nodes here, right? so just like in previous videos where we talked about encryption we're talking about let's say an aes key and i have one shared with this guy and one shared with him and one shared with this guy no one else knows what they are. like because i used a key exchange to do this, so i had k1 k2 and k3 and this router knows k1 this router knows k2, and this router knows catering now that might seem implausible but actually that's quite easy to set up using modern key exchange right diffie-hellman for example performance is quite well if i encrypt something with k1 only this router can see it all right and if i could encrypt some of k3 only this router can see it right there is no encryption with the server at the moment. now onion routing essentially sends messages, encrypted multiple times with different keys in layers, so this message here is encrypted three times, right so this is where we sort of fast forward as i draw a bunch of lines on but we're going to say this [risk route] message here encrypted once with k3. it's encrypted another time with k2 and when it's encrypted a final time with k1 now let's think about what that means it means that only this router here could unlock the first layer. that's the first thing it means it also means that when it's done that it's got a totally garbled message, but because it's still encrypted twice already right, so it's gibberish it can't possibly know what's going on but what it can do is forward that message on to k2 so k2 takes a message, which is encrypted by k3 and then again encrypted by k2 and it can strip off a layer as well but again, it then looks at the message and it doesn't make any sense because it's still encrypted by k3 so it forwarded on to this router encrypted by k3 finally k3 decrypts this message looks at it and it does make sense because it's not encrypted anymore, and it and it says the message says i'd like to go to facebook please, and it goes i can do that and it connects to facebook and receives a response now on the way back the exact reverse process happens. this router will add its encryption of k3 and forward the message onto router 2 - who will add k2 route 1 adds k1 and only we can decrypt the whole message because we have all the keys what's really interesting is the property that this gives us, the first thing is that k 2 doesn't need to know anything, except the address of k1 and the address of k3 it doesn't need to know who i am right it receives a message from k1 and all it knows based on the protocol is this is a message that needs to be forwarded to k3 after i've removed my layer of encryption that's all it knows when it receives a message from k3 it adds its encryption and then passed it straight out the other door to router 1 so if this was compromised by an attacker they've learnt nothing right. they've learned that two of these guys and running tor nodes or onion routing nodes they haven't learned who i am they haven't learned who the server is because both times it is encrypted with layers of encryption that they can't remove. this is kind of gives you an insight into what it is that's clever about onion routing they think about some of the other things that it does. k3 knows who the server is because it receives a message. that said i'd like to go to facebook so it knows that someone on this network in visiting facebook, and it knows that the next hop is this chap this router here it knows nothing else. it doesn't know who this client is it doesn't know who router one is so there's no way for it to say: ahh, mike's visiting facebook again, right? he's on there too often, because the way that the tor protocol works. you don't actually know when you decrypt your layer how many more layers there are there could be 200 nodes and layers they don't tend to be but they could be. so the output node only knows what's going on on the server side and similarly the input node my external is called a guard node is only aware that this client is browsing tor any messages it receives are usually encrypted with two other layers of encryption that it can't decrypt so it just says well i've got this message. i need to forward it on to this router. that's all i know right i don't know, but they're on facebook. i don't know that they are on a forum or they're doing amazon shopping i don't know anything about what they're doing, so this is what tor does tor is in essence an implementation of this approach, right? so it has a protocol with you know message lengths and structures that are well defined in its documentation that specify how you establish these keys how you send these messages how each one should decrypt them and forward them on to the next one, but in essence what you do is this client here will create what we call a circuit which is this three hops, by first establishing a shared key of him then instructing him to do the same and then him to do the same and adding extending the circuit each time they want to with new nodes on the end and every time i do that all the previous messages have been encrypted. so nobody knows what's going on, so it's quite interesting is it slower because of all these hops?
 it's a lot slower like you've got to consider that these nodes first of all they might be they might be serving a lot of clients at once so there might be other ca- uhh, keys shared with other people coming in here and leaving here and this one might be an exit node sometimes and he's talking to servers and browsing the web for people and so yes you don't want to be signing up to be an onion router if you haven't got quite a lot of bandwidth also consider that they? may not be located very close together, right? so this could be in germany this one in the united states this over in japan not really important but a point is that it's making you know large global hops which take in the order of sub-second but not small amounts of time so you can expect to wait a little bit longer for your messages to get through, all right, but the benefit you get is that no one knows? what what it is you're doing, right? we've got a situation here where no one really knows anything about what's going on at all, right? which is very very clever and has obvious benefits to people who want to remain anonymous. now there's a few things we've missed out it's a lot of things i've missed out right because because the tor protocol is quite complicated but this is the general idea the first thing is that if you go, if you if you create this circuit, and then you just go to facebook and type in your username password and click it you know that's going to give away what you're up to, all right, facebook will know who you  are for a start but if you go to a website, that's not even encrypted at all. this is sent in the clear, right? so someone's sniffing in at this point let me use my blue pen for sort of eavesdroppers like if someone's eavesdropping in at this position they'll know exactly what you're doing, right? and you type in username and password then they have your username and password. so you still have to use tls or https, uhh, connections to the actual servers right, but that's really on you once you've set up this circuit you said normal http requests and responses to servers as you would normally it's just instead of it going through your normal internet connection and your normal isp router it goes through this circuit and with all the encryption happening so in actual fact the implementation the tor uses. it works essentially like a proxy you talk to your own proxy server which handles all this for you and then responses come back so yes your web connection is a little bit slower, but for all you know it's just a normal connection to a server. that's basically how it works is really not a lot more to it than that right and it's quite elegant, and it works very very well is using tools that like just installing a different kind of browser? yeah
you use a tor browser or you can use it as a service and then you know pipe other thi- other services through it but tor is not illegal and nor should it be it's just encryption. there are a few downsides right the first aside from the speed the first is that people can sniff on this network and start to get the pieces of the puzzle the more positions you are you know the more pieces you get right? but so if i'm sniffing here at position a then what you see is you see that i'm using tor you can't see anything else if i'm sniffing here or here i learn nothing right apart from this encrypted messages going on tor these onion routers are listed publicly in the directory so finding their identity is not a great concern of mine if i'm sniffing a position b at the exit node i find out that someone on tor is visiting this website if it's encrypted let's say using tls then that's all i find out the next question that people be asking is what happens if i control both a and b all right, if i'm at the front of the network going in and at the exit node can i start to find out? what's going on? and the answer is yes, right? that's the weakness of tor and something that basically is unsolvable apart from just to be very very vigilant so how would this work, well? you've got to remember that this is the big network. there's lots of users on it c is not the only person talking to this router, right? he's going to be the intermediary for conversations the third node the second node the first node he might be an exit node. he might also be talking to servers there's a lot of traffic going in and out like some of which is tor some of which is not what we're talking about is looking at a lot of traffic coming from my machine to this router and a lot of traffic going from other routers to websites and trying to correlate them and work out what it was that i did right, which is not an easy job, but you can imagine that if you've got some time signature of messages but let's say a sort of message, message, message, message, message then talking to this server coming out here is going to be a kind of mess of lots of messages but you might be able to find the key points that match up with what i sent in like that's the idea this traffic. analysis is the main approach to essentially de-anonymizing people if you found that i sent 15 messages of a certain size and a certain sort of tempo should we say and then you found out that those 50 messages came out somewhere else on the network at the same just shortly after let's say a half a second after, at the exact same tempo that's a little bit interesting. with all these layers of encryption does that change the file size? no, which is a good thing right? this is cleverly designed with that in mind so tor messages are called cells and cells are 512 bytes long. they're always 512 bytes long the way that a router works out whether it's reading a message or whether it needs to forward it on it's basically based on a small hash or digest that's held in the message essentially it looks at the tail end of the message, calculates a hash on it and goes well that doesn't match the hash i've got at all it must still be encrypted because it's nonsense so then it knows to forward it on, see. and it does this by basically avoiding changing the size of the message it will be obvious as you say right if if three layers of encryption added ahead of each time you would know how far along the hops were and the whole attack would be a lot easier right so onion routing is based around the idea that any message between any node in the network looks like any other message right it could be the first one could the last one it could be something in the middle right it could have nefarious information on it. it could have perfectly benign information on it impossible to know all right which is really really clever. there's a lot of research on tor that goes into working out how to minimize a chance for both a and b are nefarious that's the idea, so this is why they sometimes call these guard nodes because usually you select some trusted ones and you only use those for example. we don't pick at random because lots of