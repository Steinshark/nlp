hi everyone, welcome to episode 02. in the
last episode we discussed variables and methods, and today we're going to be looking at classes. simply put, a class is a means of grouping
related methods and variables together. creating a class can be as simple as writing the keyword
'class', followed by the name of the class (for example player), and then adding an opening
and closing brace between which comes all of the code. classes aren't only for organisation, however,
they also allow us to reduce code repetition through something known as inheritance. let's
take a look at an example: say we're trying to recreate the animal
kingdom in our game. we might have a class for mammals, and a class for birds. if we
start writing code in both of these classes, we'll soon realise that they have
a lot in common. for example, both birds and mammals need methods to define eating and
sleeping behavior. rather than have the same code in both classes, we could create a new
class called 'animal', which has this code in it. both mammal and bird can then
inherit from animal, meaning that they both get access to this functionality. in the mammal
and bird classes, we can then focus only on what is unique about them. for instance, mammals
give live birth to offspring, while birds lay eggs and can also fly. now if we wanted to create an elephant in
our game, it could inherit from mammal. straight away it has all the functionality of other
mammals: eating, sleeping and giving live birth to offspring. all the elephant class
then needs to define is its unique ability to control a trunk. as you can see, this system of inheritance
- going from general, shared behavior, to specific behavior, can be a very powerful
tool. however, in some cases we're likely to run
into some problems with this system. for instance, if we were to create a penguin, we'd find
that while it shares some behaviour with other birds, it can't fly; instead it swims. let's have a look at an alternate way of
arranging things using the concept of composition instead of inheritance. the idea here is to
split the classes up so that each one implements a single behaviour; so one class for swimming,
another for flying, and so on. we can now assemble any animal we like by simply combining
the relevant components. furthermore, if these components are generic enough, we could use them again in future projects. ultimately we aim to keep our code flexible,
so that it is easy to introduce changes later in development, as well as to minimize code
repetition. inheritance and composition are both tools which enable us to do this. alright, now in unity, we generally use classes
in one of three ways. we're going to discuss two of them in this video, and the third will
form part of a later episode. the first is as a behavioural component. these
are the scripts that we attach to the objects in our game to drive their behaviour. these
classes must inherit from unity's monobehaviour class, which simply contains some common object
functionality. one example of this functionality is that
if we create a method with the name 'start' in our class, monobehaviour will ensure that
it gets called once at the start of the game. likewise if we create a method named 'update',
monobehaviour will make sure that it gets called once every frame while the game is
running. so say i create an enemy class. the colon
after the class name indicates that this class inherits from monobehaviour. inside the update
method, i might create a bool variable called canseeplayer, and set it to false. then i'd
have some code that sets canseeplayer to true if the player is within a certain distance.
finally, i'd have an if statement (which we'll learn more about later) to say if
the canseeplayer variable is true, then attack the player. now we've only written one enemy class,
but of course that doesn't mean that there can be only one solitary enemy in our game.
each enemy object can have its own copy, called an 'instance' of the enemy class. importantly,
the variables inside the different instances can have different values while the game is
running. in other words, while the game is being played, one enemy's canseeplayer bool
might = true, while at the same time, another's canseeplayer bool is false. these sorts of
variables are called instance variables, since they belong to the individual instances of
the class. an instance variable is the default type of variable, so all variables that we've
seen up to this point have been instance variables. the opposite of an instance variable is called
a class variable, since it belongs not to one particular instance, but to the class
itself. we create class variables by adding the keyword 'static' when we create the
variable. to illustrate the difference betweeen class
and instance variables, i'm going to create a static integer variable called numberofenemiesalive,
as well as a non-static integer variable called instanceexample, inside the enemy class. say we have 5 enemies, and at the start of the
game, each of them adds +1 to both numberofenemiesalive and instanceexample. now, when the game is
running, the value of numberofenemiesalive is equal to 5, while instanceexample has a
separate value of 1 for each of the 5 enemy instances. let's say i wanted to access the numberofenemiesalive
variable from another class. first we'd have to add the keyword 'public' in front
of it, to make it accessible to other classes. now, in my other class, i could access the
numberofenemiesalive variable by simply writing enemy.numberofenemiesalive. in other words,
the class name, followed by a dot, followed by the variable name. however, if i wanted to know the value of
the instanceexample variable, do you think i could do the same thing? no. in that case
the computer would ask, which instance of the enemy class do you want me to fetch the
value from? and by ask, of course, i just mean that there would be an error. hopefully this example has made the difference
between instance and class variables clear. note that the same concept of static and
non-static applies to methods as well. this leads us to 'way in which classes are
used, number 2'. static classes. making an entire class static has two main implications
for us to consider at the moment. the first is that all of its methods and variables have
to be made static as well. the second is that we can't attach this class to objects in
our game since 'static' forbids us from creating instances of it. on the other hand, as we saw with the numberofenemiesalive
example, the restriction of making something static means that it is very easy to access
from other classes. because of this, static is extremely well-suited to what we call utility
classes. an example of a utility class would be a static
class called maths. inside of this, we might define various things, for example a static
float containing the first 10 digits of pi, or a static method to calculate the squareroot
of a given number. once again these are all made public, so from
any other class, if we want to know the value of pi, we just have to write maths.pi, or
similarly if we need to calculate the square root of a number, we can write maths.squareroot(x); all right, that's all the new information
for this episode. let's do a quick recap: classes are used to group together related
methods and variables. we can expand on the functionality of a base class, such as animal,
by inheriting from it. alternatively, we can have each class define a single behaviour
and build more complex, composite behaviours out of these elements. when we attach a class to an object in our
game, we are creating an instance of it that belongs specifically to that object. values
of the variables inside that instance can be different to the variables of other instances
of the same class. the exception to this is if the variable is static, in which case it
belongs to the class, not any specific instance. making variables and methods static is especially
useful in utility classes such as a maths class, as they can be accessed from other
classes without having to get a reference to a specific instance. i hope you enjoyed the episode. as always,
feel free to ask me anything you're unsure of in the comments. until next time, cheers.