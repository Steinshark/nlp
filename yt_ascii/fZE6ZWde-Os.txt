hey everyone welcome back i'm james murphy and this is m coding today we're going to be talking about a code smell that i recently encountered the smell i'm talking about is lambda inside a loop so first off what's a code smell well a code smell is kind of like other smells in real life if you smell something really smelly that doesn't necessarily mean that it's bad but you might want to look into it there can be really smelly things that turn out to be just fine i'm looking at you cheese but most of the time if something smells really strongly there's a problem basically what i'm saying is that if you see a lambda inside a loop then you might want to take another look because this is usually not what you want but before we move on give me just 30 seconds to talk about my favorite sponsor of all time myself that's right i'm sponsoring my own video this video is sponsored by m coding which is my consulting company we do consulting contracting training and interview prep whether you're a programmer an engineer whatever you are if you have a software project at your company that you think deserves some outside eyes please do reach out emcoding dot io thanks for listening let's get back to the video so without further delay let's dive into this example this example is from a real code base of course the code has been drastically simplified to fit on one-ish screen for you and it's been changed significantly to protect the guilty parties it's me i'm the guilty party so here's the basic setup we have some work that needs to be done meaning functions that need to be called some of them might take a long time to complete but the catches were in a gui application so the real example this comes from a gui application we can't just call these functions on the main thread because that's where the gui runs if one of these functions takes a long time to complete then our application is frozen until it completes so instead we'll run things in a thread pool using a thread pool executor we loop through all of our work and submit each function that needs to be called as a task to the executor the functions will eventually get called on a separate thread and we'll use done callbacks in order to keep track of which ones have completed in this demo code i'm actually creating the threadpool executor right here and then when the with block ends it will actually wait for all the tasks to complete in the real gui application the executor was a pre-existing object and we also don't wait for all the tasks to finish at the end of the function instead we just do this interloop basically submitting more functions into the executor and adding the callback in particular the real version of this function is not a blocking call but it still has the same problem with lambda in a loop so here's how we actually call the function down in maine we're creating our list of work each piece of work is just made up of some unique id and then the callable that i'm supposed to call in this demo our work is just printing out abcd but of course in a real use case these could be complex calculations or doing whatever you want as with some of the worst kinds of errors when we run the code everything appears to be working just fine well bacd those definitely ran out of order but that's not really a problem we were submitting these things to run on multiple different threads the fact that they completed out of order should be expected and from our callback we see that completed was printed four times so they all seem to be called just fine the problem actually shows itself when we run this again trying to print out the actual task id instead of just the word completed apparently task c completed twice but task b never completed i guess you just double shipped one customer's order and lost another customer's order well no because our tasks actually printed out abcd we can see that each of abcd ran exactly once so here it's pretty clear that the problem is in this printing of the task completed and not with the execution of the tasks themselves but in the more realistic scenario where the tasks are not printing out their own names and these task completed messages in the logs are all you have to go off of then this might make for a very alarming log so back to the dispatch code what exactly is the problem with this function and in particular with the lambda the problem is that i used a lambda in a loop and because of the way that lambdas work the task id that the lambda uses is not the value of task id when the lambda was created instead the value that the lambda uses for task id is whatever the value happens to be in the current local variables of this function meaning when the future finishes and the callback runs it's going to use the value of the last submitted task id not the task id for this task we can see the most extreme version of this by sleeping a little bit longer to ensure that all the tasks are submitted before the first one finishes in that case they'll all be using the same value of task id the last one and that's what we see it looks like task d was completed four times when in actuality the actual work shows that each task ran once i do have another video explaining how these weird variable lookups work but in this video let's just focus on how do we fix it luckily it's a pretty easy fix 99.9 of the time when you have lambda in a loop what you really wanted was funk tools partial the first argument is the function that you want to call and then you can pass in any subsequent arguments or keyword arguments that you want to pre-fill for that function add done callback expects a function that accepts just one argument a future so for this function we just need to pre-fill the task ide and then leave the future argument not filled the important distinction here that makes func tools partial work where the lambda did not is it functional's partial actually stores this value the task id somewhere inside of itself whereas the lambda was trying to look up the value in this outer scope each functional is partial stores a different task id the current one whereas the lambdas we're all trying to look up the same task id which is this local variable now when we run it we see what we'd hope each task is logged as completed exactly once but of course there are always exceptions although this use case of a lambda in a loop was bad it's not always bad there's only certain situations where this is a problem the thing that made this a problem in this case is that we're using this variable task id which is not a global variable and it's not an argument of the function it's a variable that needs to be looked up in this outer scope if you weren't using any such variable then it's just not a problem it also wouldn't be a problem if you were just immediately invoking the lambda in which case you are using the most current value of task id but doing something like this is pretty rare that's more of a c plus plus thing if you know what i mean and i guess i should come clean yes this is not just a lambda problem if you defined a local function it has all the exact same problems in my experience though when i see this mistake in real code it always seems to be a lambda not a local function it's almost like people sometimes just use lambda because it's less typing and less thinking rather than because it's the most appropriate choice for the situation you know i've even heard some very experienced programmers say that they think all usages of lambda are a code smell i'm not so sure about that but maybe i'll get there and my last tip for you is that like many common problems in python a good linter can stop this before it ever happens let's run pilint on this example i mean pretty aggressive for warning on every module function or method that doesn't have a doc string okay but you can turn that off right but as you can see here is the no lambda in a loop of course they're not biased against lambdas in particular this cell variable is the more general terminology that encapsulates both lambdas and function definitions yeah cell variable is more accurate but no lambda loop is way catchier right that's something that you can tell a co-worker in one line no lambda and a loop once again i'm james murphy from m coding thank you for watching and as always thank you to my patrons and donors for supporting the channel i really appreciate the support if you like my content please do subscribe and if you really enjoy it consider becoming a patron on patreon thanks and i'll see you in the next one