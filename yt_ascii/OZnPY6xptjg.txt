it must have been resolved because the foundation wasn't involved it's great seeing everybody [music] i'm returning my bounce that wants to avoid any of the problems i can't believe you've come on so many times during this specific segment that's because i'm helping you to not get canceled okay okay so before we before we start just like greg leptos greg said i think it's good to recognize that saturday did eventually revert it i think it's a 10184 is what i saw apparently i don't have i thought i had it up in one of my many links in here that was the very first one the very first one it's literally a pr that was was closing it right oh face out pre-compiled yes yes yes yes yes yes yes all right there we go consensus on this thing reveal okay so to clarify i don't think it has anything to do with 2588 or i don't actually think 2588 has anything to do with the ability to undo pre-compiled saturday derive is going to continue to be slow to compile after this yes the version equally constrained the version of quality constraint thing is independent improvement that's useful for the cases that already depend on saturday saturday derived separately to paralyze the still slow builds really wants to emphasize that okay so there you go so you can avoid this whole thing i don't get this phrase yep yep done unstacked thanks everyone's everyone's happy about it all thumbs up no thumbs down that's good that's not like the first thread it's not like the first thread everyone feels good about the change so just so everybody understands there's no like it has been resolved but what happened i i think is a better one and i think there's actually a really good thing to be pointed out here about communication i think is really the key issue here it does remind me in some sense of the previous one with with sponsored link i know it's like very funny that this happened shortly after the sponsor like shenanigans yes it's it's very very similar in the sense that it's all you know it's another compiled item people feel very concerned about the security the sponsor link one was more egregious because it would take your email obviously you know obviously a problem but man did people just lose their minds over the weekend with all of them they didn't so we should start with what what happened at the beginning right yeah so i don't think most people know what happened you just skipped that it is resolved so that's good we're just making sure that if you only watch 70 of the video first off shame on you yeah but secondly this was what happened at the start all right hold on i want to find i want to find the the proper place which is this one right here and here so this is kind of like the start yeah all right tj would you like to give a basic working of what what happened so my understanding is and i'll give so i was trying to figure out like i don't know how to say his name de tony how do you say it i i assume d is his first name and then is his last name i don't know something like that this whole night my understanding is basically the problem that they're trying to solve in the rust landscape is basically that when and part of part of this also thanks greg for explaining this as well was basically when you have proc macros that executes rust right so if you execute rust and then you get new rust code out the other side that makes sense that's that's how you can rush tokens and it produces rust tokens yes and that's just regular rust code so you can do whatever you want in there which means you could hypothetically make att http request you can crawl the file system there's no like limit it's just rust code right yep so you start there and then there's sort of this twofold problem the part of the problem is rust builds take a long time right everyone agrees on that one that's that's one we're all on the same page about okay this takes a long time and then the second problem is debug code is much slower than release code right so that's the sort of the two the two things that are going on so when you run proc macros and you build in debug mode then when you're running those they're also compiled in debug mode and so then that makes your build takes longer in debug mode oh so you kind of get like a compounding effect yeah everything so okay that's my understanding so effectively the goal of some of these pre-compiled macros because this is saturday derive right not saturday itself yep right so saturday derive which you might put derive on every struct yeah i literally put i i literally put deserialize and serialize pretty much on every single struct right so you might have a lot of these and for really large for really large repos you might have lots and lots and lots and lots of those and those could be in a slow path of your building and basically forcing consecutive linked things and then you end up in the situation where that really stinks especially at scale so it's my understanding of what's going on so what's what's the solve or the possible solve here well you compile sarah to derive into release mode super ultimate release mode omega compile time 69 right like all the way to the timmy top it's been eight hours compiling it you know and then you ship that binary to people so that when they're deriving 80 million structs for their three users you know me myself and i then they get an actually fast build time for those instead of having to wait around for the debug one to be able to do all the driving so that's okay as by understanding of what was happening there and how we got to that sort of like how this situation makes sense from the maintainer side and if you read i think we may read some of the rfc from detonne about this but basically there's a bunch of features in sarah day and some of these other crates that depend a lot on proc macros where they just feel effectively constrained by the build time yep they cannot add new features there's literally like that there are features and they've closed issues and closed improvements and optimizations or just better choices because this runs during compile time and that makes it suck dang and so people are saying that's nice but it should be opt-in i think detolnai from the start basically said yeah that would be nice if cargo supports this yeah that's basically the the i think that's hopefully that's a fair characterization of how how they got there and maybe there are some other arguments from the tolnai's position that are stronger than the ones that i was able to find but a lot of what i saw was just people saying this is bad like plus one and so it's hard to find hard to find sort of the the complete argument for why he wanted to do this and why is this considered drama if you look at the original thread you'll see why it was considered drama yeah i mean de tony got called a terrorist or his actions terroristic so i don't know i think like if you say that someone's actions are terroristic i feel like that is saying they're a terrorists right hey if someone murders someone you're calling them a murderer yeah very murdery i'm not saying he's a murderer i'm just saying he probably stabs you know people slow down he just killed three people i mean it's not a murderer you know he's just a murdery behavior that's all i want to say and so so this exploded yeah in in a lot with and for context like de tony does have a lot of very important crates so yeah i think it shows ecosystem is that what i see is that there's like a couple people you got like tokyo and datolne and they they literally shoulder what feels like half of the rust ecosystem and it feels bad because a lot of what they shoulder almost feels like it should be more a part of rust itself and should be on the responsibility of the rust team like you know you go to any language and a part of the standard library is parsing json that's what most people use ceraday for you know that's the right standard use case is that i'm just using it for just on obviously if you're using like swc or using it to produce an ast and there's all sorts of cool stuff that they can do with that but nonetheless it feels very much so like that where it's it's like this feels more a part of the you know rust responsibility but the community has taken its place it's been doing it for a long time and there's like two people that shoulder half the rust ecosystem and so they make a choice that maybe isn't advantageous for the rust ecosystem it like grinds to a halt everything that's being done so i think in this case it was more that other people in the rust ecosystem felt like the tolene was including this into saturday derived to like force the hand of cargo to add the features that the tone wanted and like there's some i don't know historic issues where it seems like cargo seems a bit understaffed and stuff too so so there's some i don't know some feelings there i don't know we can read some some other stuff about it but that i think that's hopefully a fair summary of the situation yeah and i also thought this part this very top one right here was really good in the in the reddit which is it goes can someone explain how this works i thought saturday was a library not a binary if i deploy my own binary that uses saturday to prod is this binary included saturday derive is a proc macro crate which means it compiles to a shout out to dll a dilib depending on your platform big shout out big shout out oh what this change did is to ship the library pre-compiled instead of being compiled on your machine pro macro libraries are not included in your own library or in your own binary the compiler loads them during compilation to generate the code so okay so what's the concern in general they talk about i mean can you convince your company to have some guy's binary code doesn't matter if that's some guy is a you know quote-unquote legend in the rust community are you going to be able to go to your bank id and be like hey this some guy wants me to execute his binary on my machine during build time and in all of our ci and there are some difficulties as my understanding with producing exactly reproducible binaries so it's not even like you can sort of prove that these men the exact same that there's exactly the same and i think the other major concern is it basically makes like the tolme a huge like attack vector right it doesn't even matter if he would ever do this or whatever right but then if instead you know okay well someone would want to attack them and then get everything to be able to put their stuff on every single machine right yeah like you could imagine like a saturday dash derive or something else some other package very similarly named that people could get confused oh i was saying get the get credentials and push a new version of it with a different one and then well there's that you don't have to do an attack vector in cargo you literally just get the creds and then push your own one up at obfuscating in a way that you pull all of the end vars into something and send it as an http request right like yeah and that is it not that's actually not completely crazy either because you'd have such access to so many computers before it could be discovered right like it would be like a good six hours before somebody would go wait a second right and then you have this entire plus you can't delete crates so they they couldn't just like delete that version as soon as possible they'd have to like publish it and then tell nobody to use that one version which would be something well they could delete that particular version that would be an example where they would delete it yeah yeah but cargo would have to first cargo would have to step in to do that yes right so that part is definitely an attack vector that you would be worried about i mean it doesn't run at runtime but it does run at build time and usually you would probably have what like your secrets maybe in the environment or other things like that especially if you have a ci builder that needs to communicate with databases all that kind of stuff right you'd have a lot of stuff okay so that's just four and var in and make one blob ship it yeah saturday in fact even you saturday itself to just on stringify that there you go yeah exactly and skip it up the irony the irony would be too great and so yeah so for me the thing that i guess my big pull takeaway is this one right here so can i read this one this is my baby go for it take away here so i read this last night which somebody here effectively just said hey i'm working with fedora linux what a loser nice and then tip my fedora to that all sudden he couldn't use it anymore right it just kind of quit working and so he's confused about it there's a little bit of banter here a little bit you know people kind of talking about it and talking about what they want to see about it and so they you know people are suggesting let's move this pre-compiled one to a separate crate all this kind of stuff and then it goes all the way down to hear a lot of discussion about it right just about a lot of the specifics and so this part is i think what caused at least in my opinion all the issues which is thanks for comments everyone i'll go ahead and close this the complete compiled implementation is the only supported way to use macros that are published in saturday derive if there is an implementation work needed in some build tools to accommodate it someone should feel free to do the work got him as i have done for buck and basil which are tools i use and contribute significantly to or publish your own fork of the source code under a different name separately regarding the community or commentary about above about security the best path forward would be for one of the people who cares about this to invest in cargo crates rfc so i think this is where the trying to force cargo's hand probably comes into around first class yep i think so as well yeah around first class pre-compiled macros that there is an approach that would suit your preferences survey derive would adopt that when available as you can see most people did not like that response yeah i i can understand why they don't like it but i do feel like flip could just put a big giga chad face going on right here it is fairly giga chad zoom in on the text and slowly go why it's not a good idea we've already talked about why people wouldn't like this but at the same time reading this don't you just feel like giga chad you know i hear everything everyone's saying and i would just like to answer with a no no thank you go fork your own and contribute to the tools you need to use as i already did with basil you can write an rfc yeah i'll maybe think about it then right so so one thing that i would like to take out of this that i think is is really cool is that he did write this this sandbox deterministic reproducible efficient wasm compilation which he talks about being able to reduce these proc macros from 20 seconds to like a half second yeah and just being able to have a super sandbox environment which only gets a stream of tokens in and can only produce a stream of tokens back out and you effectively disable every type of system reading file access all that kind of stuff to me this was actually this is super cool yes i would have never known about it without this publicity stunt you know what i mean right that's where i think some of the like feelings of drama in the community is basically right like oh he's basically going to hold survey derived hostage until we approve my rfc and someone implements it then i'll fix this crate right and you're like okay yeah i can see why people wouldn't like that even i'm not saying that that's what he's doing right i'm just saying how you could see that that's the feeling that's just a hashtag ad it was all an ad yeah like until you can put twitch usernames in your crate i'm gonna hold all my crates hostage until it prints you know subscribe to the primogen on this i'm gonna ship a small pre-compiled binary you'll only look at your get stuff that's it and then add one second year well that's like not noticeable only adding one second in rust so it needs to add more like five minutes that's more like the only way you'd notice if you're not a subscriber it adds one minute to the build system five dollars a month spending all this time for instant speed up everyone's like you're not sponsoring my project i'm gonna put a few sleeps in the build rs that's been the problem all along i like it i like it all right do you have anything you want to point out this this rfc is super cool what's really interesting is so wasm is like quite a bit slower than native execution but because of how much faster release build is than debug build it's still faster to run in wasm which is kind of cool right like i feel like that's like pretty sweet how fast the compiler can make things yeah it seems awesome yeah i think this would make everybody's life better if we could have something if you can make a dramatic improvement on your compilation step in rust yeah i think everybody would be happy yeah people in chat who are saying it's it's not a like a need to have probably are not riding rust with a lot of other people at a big company and understand that that is one of the things that's slowing down rust adoption is difficulties of like building this well right and people are spending a lot of time to solve those so yeah milky i'm like this because that's just how transparent i am yeah he really just his cards are his cards are open everyone can see him yeah also so here's i this i do think i have a little like video that does explain the situation pretty well how long have you been planning whatever you're about to show me oh this has been from a few days ago this was before i tweet or i sent you the tweets [laughter] i i just i i think i've watched it too many times but i just i just i like how as even his back arches in this one it's just like he just just sense it's just so shocked look at that look at that face oh so yeah there you go that's basically i think that's basically the the summary of the situation it seems like it's been resolved which is nice that's good well i mean i i'd say that there's still one more little there's a couple quick things in here still hit me hit hit you let's see oh dang it where did it go it was right it was not too long afterwards but the thing is is that i think that from here on out you know just like the mock stuff even though the mock stuff has all been reverted and all that i think people genuinely will just distrust david toldme yeah you know it's how fast you can earn trust is really really slow and how fast you can lose trust is extremely fast yeah if you had asked me do i think there's any possibility of a different serialization crate existing ever one week ago i said zero yeah and then now it's like .001 chance like how many arch users have a girlfriend and that's true are you going to win the lottery will there be another saturday crate who knows i mean there's a lot of chances here because i honestly don't even know how to serialize or deserialize jason other than saturday i know there are faster ones there apparently is one that's all like super sweet but i i honestly have no idea though you can't laugh at your joke we gotta just move on they're to the 0.01 you're the po yeah budget present us all right and then lastly i do think it'd be fun to kind of read this this this really amazing because this is actually how i stumbled into it yeah was reading this thing right here yep okay so i had no idea what happened someone just sent me this random link and so i was just like i'll look at this random link and it just like i could not believe what i was actually reading right so there's a couple this is the drama yeah this kind of what set it all a pace though let's see so he talks about hey there's a couple things that they're doing the last one is pinning saturday derive saturday derived since 1.0.171 ships a non-reproducible binary blob in what's a complete compromise of supply chain security this is done in order to reduce compile times yet also for the maintainer of saturday vitilne to leverage saturday's position as the eighth most downloaded crate to attempt to force changes to the rust build pipeline while detolnes contributions to rust are respectable being behind sin quote and proc macro 2 probably the only person that even understands proc macros at this current point the top three crates by downloads along with who's making proc macro three i know i just if it's so great why isn't it a trilogy along with this air great library anyhow great library async trade saves people's lives and more i believe also being a part of the rust project they have unfortunately decided to refuse to listen to the community on this issue or even engage with counter commentary given their political agenda they seemed to be a let's see trying they seem to try to be accomplishing with force in the military i know i'd go as far as to call their actions terroristic as they're using the threat of a binary blob as justification for cargo to ship proper support for binary blobs that's intense that is intense this is arguably representative of detolnes past work on watt watch was a web assembly interpreter to execute a pre-compiled proc macro this would save compile time of proc macros yet sandbox it so it's full binary did not have to be ran all right unfortunately okay there's some more stuff on this detonate also seems to be giving up their role as a foss maintainer given that saturday no longer works in several environments while foss maintainers are not required to never implement breaking changes the version number is still 1.0 while foss maintainers are not required to follow semper releasing a very notable breaking change without a new version number in an ecosystem which does follow semper and then refusing to acknowledge bugs as bugs with their work it does meet my personal definition of not actively maintained their existing work so that's also pretty like large jump i'd say on this one yeah but there you go then it goes through and all it links all the different things right using all this i was a a bit surprised by the the the the seething the seething review here yeah i don't know anything about this person or the project or anything but like to find this in a commit message you're like holy cow things are getting serious yeah i agree with this i agree i always do that no matter what a good rule of thumb is be careful what you write when you get angry one you know i talked earlier about like mentorship and the the importance of it and my the boss that i said was pretty hard or could be pretty hard he one time told me that i need this i need to learn to step away from the keyboard more frequently and just walk away and let things simmer for a second before i type it out because you know no matter what even though no one's gonna know who sent this i don't even know who sent this right i'm not even gonna look at the name i don't need to know it's still it's just like you know the people that will know who you are will go man this is like pretty intense review like i don't know if i'd want to be the person attributed to writing this statement yeah agreed especially since it's been already resolved and you just have this scathing review of it yeah yeah it is a little bit like i mean he did listen to it seems he did listen eventually to the counter commentary in the community right and he merged something else yep all right well there you go that's that's it there you go it's nice to see him actually fix a problem must be because never mind i'm not gonna say anything to you no wait what i was gonna say this is a joke attention youtube flip if you cut this i'll be very mad it must have been resolved because the foundation wasn't involved flip oh and it's my last video it's great seeing everybody [music] oh my goodness back it up i'm returning my bouncy ball i'm take it back i don't want i'd like to report a murder i can't i don't i don't deserve this anymore i don't deserve this anymore dude tj that was so good see tj you should just wait some of those some of those things more often okay just look at me look at look at this i'm enjoying your street credit right now i know i love it i know that's all right so okay i i need to go i think i need to eat some lunch really really put myself step away from the keyboard just let your wife know that maybe this next few months might be a bit more complicated honey i hope you've been saving part of our paycheck [laughter]