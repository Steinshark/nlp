do you have some favorite feature introduced to c plus 11. anode like between 11 and 20 let's give this one question you would like to highlight and like a lot that's a that's a really good question okay we're going out for the easiest thing i'm going to say okay i think it's going to say auto i'm just gonna say the compiler you know the comp having the compiler do all the stuff the compiler already knows you know it the compiler knows it but somehow we've got to feed the syntax it's just like oh my goodness you know it was all the machinery was there you know it's so many it it just the syntactic weight for those of you who've never worked in just straight c plus plus 98 you have no idea what that's like the sheer syntactic weight of of the language was huge and you know it's just being able to say a little more directly so yeah actually i'm gonna go i'm going to be really simple on this one that actually changes the stuff that you write on the minute to minute basis stuff you'll feel yeah feel the stuff you're going to feel comfortable about you're more likely to embrace things that are a little more complex and not get lost in that you can see the code more clearly i yeah i i think that is the simplest usage level change that transforms the appearance and the feel of the language do you agree with her that you should then always use auto oh no i don't no i'm not a i'm not a i'm not a an auto anywhere yeah there is a whole spectrum now i know herb is very much you know just just use it i i don't i don't agree with that and i don't think that is necessarily necessary and sometimes you can end up with great contortions with an auto over here and then an initializer that kind of is feels a little bit unnecessary that you're kind of forcing a lot of the type name stuff over onto the right hand side and and you're making a more complex expression elsewhere now i i definitely i i have a kind of a a kind of set of of rules that i would tend to follow in a number of cases for when i reuse auto when i wouldn't