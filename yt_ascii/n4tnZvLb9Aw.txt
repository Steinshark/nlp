okay yeah i like to show you something which i discovered or not really discovered but made two years ago at my former employer and that is compile time checking your user-defined literals if you're using user-defined literacy i recommend that by the way try to compile time check them and i will demonstrate that here why this is important for example oh by the way if you want to look at this afterwards here's the godbolt link where you can find these and you can play around with that at my former employer benox there we are we did a lot of stuff with networking and so we had our own type for ipv4 addresses here's a simplified version of it it's just a simple wrapper around a uint 32 bit integer and it's of course it has these four components for an ip address and what we like to have especially in unit tests is very often that we wanted to write something like that instead of writing an ip address type and then somehow knowing what the hex code is for that or so that that we get the so we wanted to have some constants and user defined literals is great for that so we would define our own type here ipv4 it's called and you can write something like that and that is perfect and you can also print it like that and it compiles and everything is fine we thought at the beginning we by the way implemented this the the function signature of such a such a user-defined literal looks like that and we implemented that by parsing this string using i think io stream etc and so everything was done at runtime it was fine especially at the time when we implemented the original version which was i think around 2013 or so and but we realized that we got some problems especially for example if you are having something like that here you are writing an ip address type which is not valid you might know 255 is the highest number you can have for one of these four blocks here these groups and this one indeed is not a valid ip address and so yeah you might have other versions here for example you are missing one of the the numbers or the entire group or you're writing an additional group there or you are doing some normals like an empty string literal there or even if you wanted to do something like that adding some extra zeros this should be fine but we didn't like that and as you noticed the compiler is compiling this happily but if you try to execute this code you then realize oh this is not valid only the first thing here is valid here the output but the other ones throw exceptions from the implementation and that was not nice because we wanted to do that at compile time that would be would have been better and luckily later with const extra simplification for const expert we were able to do that and it's even better with c plus plus 20 with constival so now i implemented it differently that i use here some parser function which is entirely const expert or in c 20 const eval and if i encounter something which is not valid then i throw these yeah exceptions here it's just a string literal so that can use during compile time or by the way throwing in from a const expression is not valid so this cannot be evaluated during c in c plus 17 during compile time so that's why we're getting this here at runtime but for c plus plus 20 when we use that you see oh it's not even compiling and why is that because it evaluates this at runtime and so i get here some nice output saying what did i do wrong okay here for this one version i threw i threw because this is not not a valid ip address because i'm have an invalid number in the group the invalid number i had was it here 256. the next one saying oh it's a missing number here that's what we have here and here there's not even a entire group for the number missing so the dot here we have some additional tokens at the end and for all these things i get this error messages now at run at compile time and that's what i really want because although most of these things were would have been used in unit tests we don't want to have the unit test failing just because we wrote it wrong and we want to capture these errors early so i recommend do that try to to check your your string literals during compile time and if you're interested how this is done here how i did this you can look through the implementation as i said the link is here just one note you can even get this to check during compile time for c plus plus 17 if you are calling this from an const expression context and this is for example a static assert and then you realize that here it's complaining because this here says it's not not a constant expression anymore why is that because i threw something from a const exp function but in the next error message it tells me what i threw and why and what the error is so even if you don't are not able to use c plus plus 20 and the const well capable compiler you can luckily also get this if you call this from a static assert for example but still it's nicer if you use c plus plus 20 because then you just get the important stuff there and that's all i wanted to say so test your string literals and compile time and if you haven't used any maybe you should they are pretty cool thank you thanks yeah my name is mark motz i work for the qt company now and i want to talk about q string q any string view something that i did for my former employer but it's in cute that's a variant string view and i want to tell you why even if you don't use qt you should care so in this talk i will briefly present some history that's basically when you download the slides afterwards that you have the links to the to the blogs and and youtube videos then we'll talk about what's there now and what i intend to do in the future so all this started with the introduction of q string view in 2017 and q510 which is basically the q string version of standard string view and there was a series of blogs and talks about that and in meeting c 17 i also did a lightning talk called the most important api design principle question mark that introduced a non-owning interface idiom version one back then and at this meeting c plus plus i did a talk called coroutines as an api principle and that introduced noi version two and all these feed into the notion that you should not use owning containers in the api you should use views if you can otherwise co-routines are are an option so with that let's see what we have in queued at the moment so q string view and assorted classes in q6 we have merged q string tokenizer that's basically a simpler 711 implementation of a core routine to split strings with quite some interesting features q legend one string has magically survived even though it was scheduled to be removed but we still have it because latin one is still important in coding you can't do everything in utf-8 because utf-8 has variable length encoding so you can't get the length of a string in in characters in code points whatever that is easily and in latin one string has this property and you have ascii as a subset of that it's too important to just let it go we have a utf-8 string view too no and we have q any string view and this is what i want to talk to you about so what is q any string view any string view is a variant string view type think start variant of the aforementioned three views q string view q letter one string view it should be called but for legacy reasons it isn't and cue utf-8 string view so whatever you pass to it it will figure out automatically what the encoding is that's easy for eight t stars that's utf-8 obviously q8 in one string is letter one and cod scar stars for for legacy reasons for that's just acute policy that utf-8 is the default encoding so everything that's in car stars byte arrays etc is encoded as utf-8 or interpreted to be in utf-8 and car 16-t cons car star acucar star and so on they are utf-16 unlike your string view you can also construct a q any string view from a single character that was deemed to magic for by at the time that q string view was added because of course as soon as you pass a cue character to a string view and you just store the string view and don't immediately pass it to a function it becomes invalid because internally of course you take the address of the argument and store it in the string view and that you can only do when you immediately pass it on to a function and not when you store it in a local variable so extending that further any string view can now even take car 32 t and decomposes that into two character sequence for utf-60 because car 32 gtx 632 is not supported by qt that is also policy decision policy decision and you can even construct it for mercury string builder to expression template we have this expression templates that if you concatenate strings and you set the correct command line options compiler flags then you get an expression template out of that and you only get a final string constructed once you assign it to an actual string that should work but i just got a bug report this week that it doesn't so i need to look what what's wrong there so here's how to use scanning string view for example in a function called set object name which traditionally has taken a q string by construct like so many things in qt and if you look at the line three four and five in the upper block there the first two are locating and the third one is a statically constructed instance of a q string so it does not allocate but it returns from a nested lambda inside that macro q string literal a temporary q string whose destructor then run and all the funny atomic operations that q string copies perform so if we just change this in the api it took you any string view disregarding how that looks in the implementation for the moment we can now pass the same things and what was allocating before no longer allocates because clearly string is just a view and it's accepting anything it's accepting utf-8 in the first case letter one in the second and even q strings that is now a pessimization because you still have the temporary q string if you would just write u car 30 car 16 t literal you would not get the temporary q string inserted and less code being executed at call time in the caller so unlike your string view q any string was not designed to be overloaded with q string it is designed to replace q string and any other overloads for any other string like types yeah so at the moment you string any string has very little api you basically it accepts everything so it's it's there for its constructors and then when you want to go in you need to use visitation like with a standard variant here's an example of how this looks and the goal here was to replace all that overload sets that we have enqueued with the q string view cue card q legend one string utf-8 string cons caster and so on and just replace that overload set with the single function that takes qna string view and then only in the implementation farm out into level latin 1 utf-8 and utf-16 implementations the way this looks here is that basically you get any string view in and then you call visit on it passing a lambda and then you can do the processing in there and this auto name variable will either be a q letter one string or a q string view or a qtfs 16 a q utf-8 string and then you can just do the thing here we just call tostring which returns a q string from all of these views and since that is so common that's already an api on qnu string view so if all we do is building a q string why take a q any string in the first place there are several reasons first we have now one place in the library behind the api boundary where the q string is being constructed as opposed to at the call side with a temporary q string object which liters every call site with a q string construction and a memory allocation which does the same thing as a sequence of executable assembler instructions but of course it it's duplicated for each caller whereas if you take if you do this in the library you only have a single place where this is being done second we have now gained that implementation no longer is forced to store the thing as a queue string but it can for example store it in a u16 string start your 16 string to get the sso install small swing optimization or in some small small vector in q that's called q bar length sorry so or maybe you're even preprocessing the string anyway and you would anyway cause a detach from that from the q string that you were being passed like for example in q settings we have this key that you can look up and there's an actual preprocessing step and so we didn't actually lose anything because we anyway create a q string and clean up the key before passing it to the back end so if all we do yeah or maybe you're just parsing and not storing at all and if qt is so far away from your day work then just look at the basic fstream ctas constructors lately and you will understand that the standard library has the same problem so that's the present what about the future i will skip that because i'm short in time i just wanted to show this here as the end slide for yentz because we were talking in the in the q a about this this is how to format numbers using the new standard two cars function that we got at c plus plus 17 but with have without having to set up a buffer first manually we're using the css idiom the compiler and the scholar supplied storage idiom to get a buffer into which we then format the data and then we return it as a letter in one string and since we return the letter in one string we're automatically compatible with all the cute infrastructure and with that i thank you okay thank you mark to be ready to get started take it away so meeting cpr plus does not have the famous quiz this year but it has its own special street gang edition i am your front woman for tonight we're going to have five games the goal is to find the value of the return and i will give you a chance to actually win the game if you because there are three answers for you to choose from it's okay if you haven't watched the show the questions are not split game related and a bonus tip if you can remember some details from the code you might be able to guess the right answer if you're wrong you're eliminated which in this case means that you're out so ready or not first game starts now get your answers ready you have three possibilities the right one was tnp everyone who didn't got the right answer is out now sorry let's go to game two and we start time is up choose your answer the right one was struck so again everyone who didn't got the right answer is out now and let's go over to game three and restart time this up and the right answer was all right we're going over to the next game and turn this up get your answer the right one here is float and we move on to the last question and sign this up for the last game and the last answer is any off congratulations to all the winners you're probably wondering what you won i'm very sorry i don't have any money thanks for playing anyway and follow me on twitter i thought i'd give a quick talk on butterflies and zippers plus which is basically you know a follow-up on my last lightning talk at meetings plus 2019 and maybe you remember back then i told you i would be you know taking nice pictures of butterflies and i've been doing this since then more or less but also i had made the decision that i wanted to do more than nice pictures i wanted to contribute to the effort of conservation and so i started with monitoring conservation and yeah being involved in this field and this has been an awesome journey and it's actually too long to give a lightning token so i will you know limit myself a little bit to showing you some pictures and explaining you what this has to do with c plus now first in the monitoring tours i do monitor every species but there are two species which are special this is the first one which already was here on the other side this is the grading or occur bin negazant filter of deutsch which is a very threatened species because this is a species which lives in heath and needs open sand in the landscape which is very rare in our nowadays so this is one of the of the rare species which flies in my county and i'm more or less with the last years trying to see where they where everywhere like where do they fly you know right this is this is my job in the monitoring to to track them down and to see how many can i find all those butterflies and these are kind of hard to find if it's not like on on a heath or on on other blooming plants and the second species i am looking for is of deutsche decline ice or in english the white admiral and this is the butterfly which is not in the in the heath it's a butterfly which is more in the forest and more in the moist parts of a forest so it's you know close to rivers and one of the projects i'm like next year i'm going to start because during the pandemic i have not been as much on the lakes i will look in the lake districts where i usually take other pictures during this winter if i find this butterfly there too because that is still an unexplored corner of my county for this butterfly and yes this butterfly flash only during summer and the other species also has just a few weeks but then of course you always need to be a bit lucky to find those butterflies like for example this is basically like a hundred or two hundred meters away where i did find a different blue link species two years ago and i haven't seen it since and there i found this couple and back then it also was a couple but this is a different species this is agus boiling and agus is kind of the the latin name also so it's i'm not sure what the the english name is bloonings are not like my specialty was english names but then also and here it gets more interesting i take pictures like that i am in monitoring mode and monitoring is has changed my habits on what i take for pictures i take pictures of every single butterfly i see i count them i track that in an app called observation and for that i kind of try to have images which then you know i later load up into the website and for that i cut out the butterfly itself because the image itself is too big and then you have a result like this which of course you know that's not a picture you took because it's a pretty picture that's a picture because i you know was documenting the species was here and that's part of the work i do and this is for like over time this work becomes valuable so if i do it every year and other people do it every year the the collection of the data is very important for conservation efforts and so i began asking myself does a city find find butterflies and i'm not sure yet but i have a friend which is also concerned about asset defined and so we're investigating that but for for now i plan you know to to use c plus two to write something which makes my job a bit easier the the monitoring another another example here in the monitoring i get home in summer after a long day of like hiking for like six hours sometimes and i have like 50 to 80 pictures of butterflies and i don't want to edit them all by by myself manually anymore i want to have a program which does exactly this job i want some some image recognition and i have an example for that which trains something and then uses that and i want to kind of you know put that in a cute program and make that as open source and kind of you know kind of work maybe it was with some of the folks at me super plus online together to have a little bit of fun there and then have a little bit less work with pictures in somewhere and i got also part of this work is caterpillars and i'm not sure if like if that software also would be able to handle caterpillars but that's another field where i have you know been very active this year because i got a macro lens and with the macro lens i suddenly am able to document them and suddenly i keep seeing them and for the monitoring a lot of species i found for moth through the caterpillars and this is i think one of the best finds in this year this is a very rare species which also hadn't been found in that corner for for a few years and i hope to be able to see and find this again next year and maybe to find out a bit more about how how big the population of that north and that corner is this is a very very easy to find not easy to find caterpillar but this is a more in the he's the emperor moth or clan snake van orgo of deutsch it's very you can see them flying the butterfly the moths fly in the dawn in april sometimes already in march depends on the weather and the caterpillar it's like really really well hidden in the heath but once you know have an eye for it and you keep looking in the heat you you keep finding them there they're kind of way more often than other caterpillars in the heath and then in july i heard the voice of a bird on one of the areas where i'm actually monitoring butterflies and it was directly like for me clear that this could be the species european beater and that piqued my interest to to to get a good picture of that bird and i would not have dreamed to get this picture because this picture is also with a rare butterfly which is hard to to find for monitoring purpose and so to to basically kind of get it delivered by air and that's that's awesome that's that's one i think one of the best pictures i took this year and yeah i'm gonna just end with this picture and this is basically what i do now for butterflies i will you know have a bit of more pictures and probably a talk which i prepare for that to you know make this a project that people can help us and we can like you know build something which i hopes was monitoring there and um