ladies and gentlemen the day has come i'm going be honest the holiday season has me busier than i expected i've got people coming in town from family i've got work travel coming up but i don't want to let down my community i have self-chosen i have elected i have sacrificed myself today aoc day9 to attempt to write it in hasell now i'm going to be completely honest i have written this many zero lines of hll in my entire life i am going to need to be aided by chat if you see me looking like this i am getting help from chat aoc day n in hll let's get after it hll sl time to write a white paper you ride the camel through the sandstorm and stop where the ghost maps told you to stop the sandstorm subsequently subsides somehow seeing you're standing in an oasis that is an intentional tongue twister the sandstorm subsequently subsides somehow you're seeing someone standing in the oasis the camel goes to get you some water and you stretch and you stretch your neck okay weird as you look up you discover discover what must be yet another giant floating island thank god this one made of metal that must be where the parts to fix the sand machines come from there's even a hang glider partially buried in the sand there once the sun rises and heats up the sand you may be able to use the glider and the hot air to get all the way up to metal island while you wait for the sun to rise you admire the oasis hidden here in the middle of desert island it must have a delicate ecosystem you might as well take some ecological readings while you wait maybe you can report any environmental instabil ities you find to somebody so the oasis can be around for the next sand sandstorm worn traveler you pull out your handy oasis in sand instability sensor and that literally spells oasis wow that's a recursive acronym and analyze your surroundings the oasis produces a report of many values and how they are changing over time your puzzle input each line in the report contains the history of a single value for example to best protect the oasis your environmental report should include a prediction of the next value in each history to do this start by making a new sequence from the difference at each step of your history if that sequence is not all zeros repeat the process in the above data set for example the first history is zero yep so because that value increases by three each step the first sequence of differences that you generate will be 3 3 3 3 3 note that this sequence has one fewer value than the input sequence because each sequence considers two numbers yeah so i'm i'm doing the difference between all of three so the length of that is n minus one great since these value aren't all zero repeat this process the values differ by zero at each step so the next sequence is 0 0 0 0 this means you have enough information to extrapolate the history okay okay okay get the difference between these the difference between these and kind of like recursively just to do them all until i get to the end right to extrapolate start by adding a new zero to the end of your list of zeros because zeros repr place okay hold on so you can then start filling in placeholders from the bottom up a needs to be the result of increasing by three value to its left by zero if you find the value for the next for each history in this example and add them together you get 114 each line okay so you have to i see i see i see like you could do this by hand but you couldn't do this by hand for all of the values okay okay so hll hll hll hasle so in hasal i know everything is done functionally so i'm trying to mentally figure out how like to run this as like a map can this be done as like a fold operation well no folds reduced into a single number hold on hold on hold on let's get let's get the basics going here main definition is an io type jesus main equals do contents equals read file and i'm doing it that because it unpacks a monad i know that much i've read that much but that was it work print is it lines contents right we have to like it it takes all the lines out go do run run guys how do we run hasle main great thank you so now now we can do something iteratively on these lines so how do we how do we have to approach this right i'm going to add this as a comment and i know that hll comments are like this for some reason okay so we're going to make a new function called like handle line which will take a string and output a integer i believe oh oh it's like handle yeah okay so stir like that you have to do the actual parameters main good three got it okay sweet so we have that we can do this recursively i just don't want to okay we have to do the difference between all of these why can i not map handle line onto lin's content lin's contents produces a a like this right it produces an array an array of something map should allow me to map a thing onto an array of thing produces array of thing b where a produces b so why do i have to do let oh because we're doing we're in a do block we're in a do block okay okay i understand that now must be an expression so then so this has to be an io so how do i return an io let's print contents cu it it has to be an io operation at the end that's confusing dude okay so we effectively have main print the contents and we mapped every line from the lines contents map into this function okay the 21 members of the haso community are enraged right now print x well okay fine we can do that i don't know if an array is printable in has school 2 great sub where i do integer integer ah integer or sub of a bal a minus b right okay now how do i  how do i pair these this language i don't understand okay i'm going to piss a lot of people off right now i don't know why you would ever use this language i don't i don't understand this i don't get it it's great no it's not this is horrible this is not a fun experience it's like oh you just got to know that you got to zip the flip whip the f map the the h funto monoid like are you are you okay okay so let's do zipwith i guess zip with hascol hello benevolent overlord robot please produce for me a function in hcll that given a list of integers will produce a list of pairs of the integers in that list for example 0123 should produce 01 right it should be produced 0 1 1 2 2 3 create pairs is a function that takes a list of a's input produces a a yep create pairs blank create it's recursive oh okay so of course it's it's recursive let's do this let's go back let's go back let's go back let's go back handle line this is still going to be a stir and we'll do this will be parse line right this will turn a list of strings great and we'll do handle line handle line takes a list of integers and returns a list of integers and i can handle the recursive base cases here great and we'll take all this so we'll do map sub create pairs on online but here all we're going to do is just do map read wordster great so do x equals pars line and then we can do let y y equal map handle line map handle line onto x then print y great okay we have that that worked that the fact that this worked actually is like okay i feel like i'm getting into the flow i'm i'm learning are you lowle learning you're godamn right okay let's let's go back and actually figure out what we have to do cuz i i'm just h i got so happy in the fact that i actually could process the list that i lost track of like what the the problem was 0 1 1 + 5 is 6 6 + 15 21 okay so handle line the word line the conditions of the line are set to this so we can just return line right i want [music] to return okay so we have that how do we walk this back up though cuz the issue is we have we still have to do like this this tree thing okay so we're going to return yeah how do i get the last element it's just last hold on hold on hold on did i get it bro holy okay hold on holy okay let me talk a little bit so what do we have going on here i know this is a lot i kind of went dark for a little bit okay we read in the file from contents read file let x equal parse all the lines so effectively we take every line we cut them up into words that then map read onto those words so that converts them from a string input to a list of integers got it then we run handle line handle line is a recursive function that takes an list of integers and returns an integer the base case is if all of the list integers are zero we've gotten to that bottom part and we return zero we add zero to the the recursive tree effectively or whatever of numbers we've been adding otherwise we break the line up into pairs through create pairs we subtract them from each other put that into handle lin so it recursively effectively says do the cut them into pairs subtract them until all of them are equal to zero and then add the last element to that element and then once that's done we get the next number in the pattern okay so let's let's put in the actual sample input and see if i got it okay guys guys guys guys guys guys guys guys guys guys guys guys i have a number didn't crash oh my [applause] god i need you to understand something i am like i am like oh he's a youtuber like he he's dramatic for content no i need you to understand that ever since haskell has gone on the board i have actually had nightmares about getting haskell on this wheel so to to rid myself of that daily stress i literally had to come on here on a saturday when i didn't have to worry about not going to work and taking pto to do advent of code and just bang it out and here we are guys day nine in hasell it's complete first try if you enjoyed that go watch this video you'll enjoy it just as well i appreciate it