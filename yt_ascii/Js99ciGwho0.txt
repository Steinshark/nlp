hello and welcome, i'm james murphy. have you ever   added two floating point numbers like .1 
and .2 and gotten something slightly off?   well in this video we'll find out why by looking 
at how floating point numbers are represented. thanks to this video's sponsor, anvil, a 
browser-based full stack development platform   allowing you to make web apps with nothing but 
python. more about anvil at the end of the video. i'm using python but even if you're using 
a different language like c or c plus plus   you probably got the exact 
same answer that's because   most programming languages follow the same 
standard for representing floating point numbers. most likely your language uses 32 or 64-bit 
floats. python uses 64-bit. i'll use the struct   library to coax python into showing me the bits 
underneath the float. now we can see the actual   bits that make up the numbers .1, .2, .3 and the 
sum of .1 and .2. i've put spaces in the numbers   here so that you can see the different parts of 
the representation of a floating point number. the first bit is a sign bit: zero for 
positive one for negative. the second   and third chunks are an exponent and fraction 
like in scientific notation. most of the time   here's what the number represents: we choose 
the scale of our number by picking the correct   exponent and then we get the right digits by 
putting everything else into the fraction, where   here 1.fraction is a number between 1 and 2 which 
is "1." and then all of these bits interpreted in   binary. you can represent the numbers 0 all the 
way up to 2047 in this exponent. we subtract 1023   from the exponent e in order to allow ourselves 
to be able to represent both really big numbers   but also really small numbers. you can see 
that 0.1 and 0.2 have the same fractional part,   which makes sense because 0.2 is just 2 times 
0.1. so really i just need to increase the   exponent by 1. we also notice that 0.1 and 0.2 are 
repeated decimals because 10 is not a power of 2.   but we only have 64 bits to work with, 52 in 
this group, so that means the repeated decimal   got rounded or cut off at some point. 
that explains why .1 + .2 is not .3,   rounding error. here's what one and negative one 
look like. note that because there's a one dot at   the beginning of the fractional part that's 
implicit we don't need to put that one in,   that's why the representation for one is 
just all zeros in the fractional part.   the exponent is 1023 to offset the bias and 
the sign bit is zero for positive. negative   one is the same with a flipped sign bit. and 
here's what zero and negative zero look like.   that's right, negative zero. any real number 
that has a floating point representation   has only one, except for zero that's the only 
exception. the representation of zero is all zeros   and the representation of negative zero just has a 
one in the sign bit. you can see that they compare   equal to each other but they're definitely not the 
same object. this is different say from integer 0   and negative 0, which are exactly the same object. 
you can also represent plus or minus infinity as a   float. infinities are an exception to the formula 
from before. you just set the exponent to all ones   and the fraction to all zeros and then set the 
sign bit accordingly. notice that if you take   a big number and multiply it by something you 
might get infinity. you can also represent nans,   or not a number, in python using an exponent of 
all ones and anything that's not all zeros for   the fraction. you can make a nan directly or do 
something like multiply infinity times zero. nans   are also one of the only kinds of objects that 
don't compare equal to themselves. aside from   nan's and infinities there's one more exception 
to the rule for the formula for a floating point   number. basically when the exponent gets down to 
zero you drop the implicit one at the beginning of   the fraction. this allows you to get a few more 
powers of two closer to zero. but if you try to   go too far you will just hit zero. so what should 
you do if you want to compare floats for equality?   well don't use equals equals. just look at the 
absolute value of their difference and then check   to see if it's really small. basically you're 
saying if the difference is smaller than this   then i'm just calling them equal. of course if 
you're not okay with any error and you really   need an exact representation then you might 
prefer something like the decimal library.   the decimal library is built into python and 
stores your numbers as a string so they can be as   long as they need to be to get the exact precision 
that you desire. of course if you're trying to   represent an irrational number like square 
root of 2, you're out of luck. but if you're   only dealing with rational numbers and you really 
need exactness, like if you're dealing with money,   then you should definitely use the decimal 
library. storing decimals as a string may   take a little bit more memory, but obviously 
it's worth it if you need the exact precision. hey everyone thanks for watching, slap 
that like button an odd number of times,   and if you want to hear about the 
video sponsor, anvil, stick around. anvil has everything you need to develop and 
deploy a web app written completely in python,   including the front end, so no javascript or html 
required. and it's free to try. create your user   interface by dragging and dropping components. 
anvil's web-based ide allows you to develop in   your browser. no need to install anything. you 
can use anvil's built-in database and let anvil   handle the tricky parts like user authentication. 
when you're ready, deploy your app to the cloud   with a single click. check out the link in the 
description to get started with anvil today.