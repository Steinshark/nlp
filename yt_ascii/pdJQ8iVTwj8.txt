- on one access, you have
more hardware coming in. on the other hand, you have an explosion of innovation in ai. and so what happened with
both tensorflow and pytorch is that the explosion of
innovation in ai has led to, it's not just about matrix
implication and convolution. these things have now, like,
2,000 different operators. and on the other hand, you have, i don't know how many pieces of hardware out there
are there, it's a lot. part of my thesis, part of my belief of where computing goes, if you look out 10 years from now, is it's not gonna get simpler. physics isn't going back
to where we came from. it's only gonna get weirder
from here on out, right? and so to me, the exciting part about
what we're building is it's about building
that universal platform, which the world can continue
to get weird 'cause, again, i don't think it's
avoidable, it's physics, but we can help lift people,
scale, do things with it, and they don't have to rewrite their code every time a new device comes out. and i think that's pretty cool. - the following is a
conversation with chris lattner, his third time on this podcast. as i've said many times before, he's one of the most brilliant engineers in modern computing, having created llvm compiler
infrastructure project, the clang compiler, the
swift programming language, a lot of key contributions to tensorflow and tpus as part of google. he's served as vice president of autopilot software at tesla, was a software innovator
and leader at apple. and now he co-created a new
full stack ai infrastructure for distributed training, inference, and deployment on all kinds
of hardware called modular, and a new programming
language called mojo. that is a superset of python, giving you all the usability of python, but with the performance of c, c++. in many cases, mojo code has demonstrated over 30,000x speed up over python. if you love machine
learning, if you love python, you should definitely give mojo a try. this programming language, this new ai framework and infrastructure and this conversation with
chris is mind-blowing. i love it. it gets pretty technical at times, so i hope you hang on for the ride. this is the lex fridman podcast. to support it, please check out our
sponsors in the description. and now, dear friends,
here's chris lattner. it's been, i think two
years since we last talked, and then in that time, you somehow went and co-created a new programming language called mojo. so it's optimized for ai.
it's a superset of python. let's look at the big picture.
what is the vision for mojo? - for mojo? well, so i mean,
i think you have to zoom out. so i've been working on a lot of related technologies
for many, many years. so i've worked on llvm and a lot of things and mobile and servers
and things like this, but the world's changing. and what's happened with ai is we have new gpus and new machine
learning accelerators and other asics and things like that, that make ai go real fast. at google, i worked on tpus. that's one of the biggest, largest scale deployed
systems that exist for ai. and really what you see is, if you look across all of
the things that are happening in the industry, there's this
new compute platform coming. and it's not just about
cpus, or gpus, or tpus, or npus, or ipus, or whatever, all the pus, (chuckles) right? it's about, how do we
program these things, right? and so for software folks like us, right, it doesn't do us any good if there's this amazing
hardware that we can't use. and one of the things you
find out really quick is that having the theoretical capability of programming something and then having the world's
power and the innovation of all the smart people in the world get unleashed on something
can be quite different. and so really where mojo came from was, starting from a problem of, we need to be able to
take machine learning, take the infrastructure underneath it and make it way more
accessible, way more usable, way more understandable by
normal people and researchers and other folks that are not themselves like experts in gpus and things like this. and then through that
journey, we realized, "hey, we need syntax for this. we need to do a programming language." - so one of the main
features of the language, i say so, fully in jest, is that it allows you to
have the file extension to be an emoji or the fire emoji, which is one of the first emojis used as a file extension
i've ever seen in my life. and then you ask yourself the question, why in the 21st century, we're not using unicode
for file extensions? this, i mean, it's an epic decision. i think, clearly, the most important
decision you made the most, but you could also just use
m-o-j-o as the file extension. - well, so, okay. so take a step back. i mean, come on, lex. you think that the world's ready for this? this is a big moment in the world, right? - we're releasing this onto the world. (chuckles)
- this is innovation. - i mean, it really is kinda brilliant. emojis are such a big
part of our daily lives, why isn't it not in programming? - well, and like you take a step back and look at what file
extensions are, right, they're basically metadata, right? and so why are we spending
all the screen space on them and all this stuff? also, you know, you have them stacked up next to text files and pdf
files and whatever else. like, if you're gonna do something cool, you want it to stand out, right? and emojis are colorful. they're visual. they're beautiful, right?
- yeah. what's been the response so far from... is there a support on like windows on operating system-
- yeah. - in displaying like file explorer? - yeah, yeah. the one problem i've seen is the git doesn't escape it, right? and so it thinks that the
fire emoji is unprintable. and so it like prints out weird hex things if you use the command line git tool, but everything else, as far
as i'm aware, works fine. and i have faith that git can be improved. so i'm not worried.
- and so github is fine. - github is fine, yep. github is fine. visual studio code, windows,
like all this stuff, totally ready because people
have internationalization in their normal-
- yeah. - part of their paths. so let's just like take
the next step, right? somewhere between, "oh,
wow, that makes sense. cool, i like new things," to "oh my god, you're killing my baby. like, what are you talking
about? this can never be. like, i can never handle this.
how am i gonna type this? (imitates bees buzzing)
like, all these things. and so this is something where i think that the world will get there. we don't have to bet
the whole farm on this. i think we can provide both paths, but i think it'll be great. - when can we have emojis as
part of the code? i wonder. - yeah. so, i mean, lots
of languages provide that. so i think that we have
partial support for that. it's probably not fully done yet, but yeah, you can do that. for example, in swift,
you can do that for sure. so an example we gave at apple was the dog cow.
- yeah. - so that's a classical
mac heritage thing. and so you use the dog and
the cow emoji together, and that could be your
variable name, but of course, the internet went and made pile of poop for everything.
- yeah. - so, you know, if you wanna name your
function pile of poop, then you can totally go to town and see how that gets through code review. (lex chuckling) - okay. so let me just ask
a bunch of random questions. so is mojo primarily designed for ai or is it a general purpose programming? - yeah, good question. so it's ai first. and so ai is driving a
lot of the requirements. and so modular is building and designing and driving mojo forward. and it's not because it's
an interesting project, theoretically, to build. it's because we need it. and so at modular, we're really tackling the
ai infrastructure landscape and the big problems in ai and the reasons that is so
difficult to use and scale and adopt and deploy and like
all these big problems in ai. and so we're coming at
it from that perspective. now, when you do that, when you start tackling these problems, you realize that the
solution to these problems isn't actually an ai-specific solution. and so while we're doing
this we're building mojo to be a fully general
programming language. and that means that you
can obviously tackle gpus, and cpus and, like, these ai things, but it's also a really
great way to build numpy and other things like that, or, you know, just if you look at what many
python libraries are today, often they're a layer
of python for the api, and they end up being c and
c++ code underneath them. that's very true in ai. that's true in lots of
other demands as well. and so anytime you see this pattern, that's an opportunity for mojo
to help simplify the world and help people have one thing. - so optimize through
simplification by having one thing. so you mentioned modular. mojo
is the programming language. modular is the whole software stack. - so just over a year ago, we started this company called modular. - [lex] yeah. - okay, what modular's about is, it's about taking ai and up-leveling it into the next generation, right? and so if you take a step back, what's gone on in the last
five, six, seven, eight years is that we've had things like
tensorflow and pytorch and these other systems come in. you've used them. you know this. and what's happened is these things have grown like crazy, and
they get tons of users. it's in production deployment scenarios. it's being used to power so many systems. i mean, ai's all around us now. it used to be controversial
years ago, but now it's a thing. but the challenge with these
systems is that they haven't always been thought out with
current demands in mind. and so you think about it. where were llms eight
years ago? (chuckles) well, they didn't exist, right? ai has changed so much, and a lot of what people are doing today are very different than when
these systems were built. and meanwhile, the hardware side of this has gone into a huge mess. there's tons of new
chips and accelerators, and every big company's announcing a new chip every day, it feels like. and so between that, you have like moving system on one side, moving system on the other side, and it just turns into this gigantic mess, which makes it very difficult
for people to actually use ai, particularly in production
deployment scenarios. and so what modular's doing is we're helping build
out that software stack to help solve some of those problems so then people can be more productive and get more ai research into production. now, what mojo does is it's a really, really, really important piece of that. and so that is, you know, part of that engine and
part of the technology that allows us to solve these problems. - so mojo is a programming
language that allows you to do the higher level programming,
the low-level programming, like do all kinds of
programming in that spectrum that gets you closer and
closer to the hardware. - so take a step back. so lex, what do you love about python? - oh, boy. where do i begin? what is love? what do i love about python? - [chris] you're a guy who
knows love. i know this. - yes. how intuitive it is, how it feels like i'm writing
natural language english. - [chris] yeah. - how, when i can not just write, but read other people's codes, somehow i can understand it faster. it's more condensed than other languages, like ones i'm really familiar
with, like c++ and c, there's a bunch of sexy little features. - [chris] yeah. - we'll probably talk about some of them, but list comprehensions
and stuff like this. - well, so py... and don't forget the entire
ecosystem of all the packages. - [lex] oh, yeah. there's probably huge- - 'cause there's always something. if you wanna do anything,
there's always a package. - yeah, so it's not just the
ecosystem of the packages and the ecosystem of
the humans that do it. that's an interesting dynamic because i think-
- that's good. yeah. - something about the usability and the ecosystem makes
the thing viral, it grows, and then it's a virtuous cycle, i think. - well, and there's many
things that went into that. like, so i think that ml
was very good for python. and so i think that tensorflow
and pytorch and these systems embracing python really
took and helped python grow, but i think that the major
thing underlying it is that python's like the
universal connector, right? it really helps bring together
lots of different systems so you can compose them and
build out larger systems without having to understand how it works. but then, what is the problem
with python? (chuckles) - well, i guess you
could say several things, but probably that it's slow. - i think that's usually what
people complain about, right? and so, slow. i mean, other people would complain about tabs and spaces versus
curly braces or whatever, but i mean, those people are just wrong 'cause it is-
- yeah. - actually just better to use indentation. - wow, strong words.
(chris laughing) so actually, i just
went on a small tangent. let's actually take that. let's
take all kinds of tangents. - oh, come on, lex. you can push me on it. i can take it. - design, designed. listen, i've recently
left emacs for vs code. - [chris] okay. - and the kinda hate
mail i had to receive, because on the way to
doing that, i also said, i've considered vim. - [chris] yep. - and chose not to and
went with vs code and just- - you're touching on
deep religions, right? - anyway, tabs is an
interesting design decision. and so you've really written a new programming language here. yes, it is a superset of python, but you can make a bunch
of different interesting decisions here.
- totally, yeah. - and you chose actually
to stick with python in terms of some of the syntax. - well, so let me explain why, right? so i mean, you can explain
this in many rational ways. i think that the annotation is beautiful, but that's not a rational
explanation, right, but i can defend it rationally, right? so first of all, python 1
has millions of programmers. it's huge. it's everywhere.
- yeah. it owns machine learning, right? and so, factually, it is the thing, right? second of all, if you look at it, c code, sql plus code,
java, whatever, swift, curly brace languages also run through formatting tools and get indented. and so if they're not indented correctly, first of all, will twist
your brain around. (chuckles) it can lead to bugs. there's notorious bugs that
have happened across time where the annotation
was wrong or misleading and it wasn't formatted right, and so it turned into an issue, right? and so what ends up happening in modern large-scale code bases is people run automatic formatters. so now what you end up with is
indentation and curly braces. well, if you're gonna have, you know, the notion of grouping, why not have one thing, right, and get rid of all the clutter and have a more beautiful thing, right? also, you look at many of these
languages, it's like, okay, well, you can have curly braces, or you can omit them if
there's one statement, or you just like enter this entire world of complicated design
space that, objectively, you don't need if you have
python-style indentation, so. - yeah, i would love to
actually see statistics on errors made because of indentation. like, how many errors are
made in python versus in c++ that have to do with basic formatting, all that kinda stuff? i would love to see. - i think it's probably pretty
minor because once you get, like you use vs code, i do too. so if you get vs code set up, it does the annotation for you, generally, right?
- yep. - and so you don't, you know, it's actually really nice
to not have to fight it. and then what you can see
is the editors telling you how your code will work by indenting it, which i think is pretty cool. - i honestly don't think i've ever... i don't remember having an
error in python because i indented stuff wrong.
- yeah. so i mean, i think that there's, again, this is a religious thing. and so i can joke about it and
i love to kind of, you know, i realize that this is
such a polarizing thing and everybody wants to argue about it. and so i like poking at the
bear a little bit, right? but frankly, right, come
back to the first point, python 1, like, it's huge.
- yeah. - it's in ai. it's the right thing. for us, like, we see mojo
as being an incredible part of the python ecosystem. we're not looking to
break python or change it, or, quote, unquote, "fix it." we love python for what it is. our view is that python
is just not done yet. and so if you look at, you know, you mentioned python being slow. well, there's a couple of different things that go into that, which we
can talk about if you want. but one of them is that it just
doesn't have those features that you would use to
do c-like programming. and so if you say, okay, well, i'm forced out of python into
c, for certain use cases, well, then what we're
doing is we're saying, "okay, well, why is that? can we just add those features that are missing from
python back up to mojo?" and then you can have everything
that's great about python, all the things that you're
talking about that you love plus not be forced out of it when you do something a little bit more computationally intense,
or weird, or hardware-y, or whatever it is that you're doing. - well, a million questions i wanna ask, but high level again-
- yeah. - is it compiled or is it
an interpreted language? so python is just-in-time
compilation. what's mojo? - so mojo, a complicated
answer, does all the things. so it's interpreted, it's jit compiled, and it's statically compiled. (chuckles) and so this is for a variety of reasons. so one of the things that
makes python beautiful is that it's very dynamic. and because it's dynamic, one of the things they
added is that it has this powerful metaprogramming feature. and so if you look at something
like pytorch or tensorflow or, i mean, even a simple use case, like you define a class that
has the plus method, right, you can overload the dunder methods, like dunder add, for example, and then the plus method
works on your class. and so it has very nice
and very expressive dynamic metaprogramming features. in mojo, we want all
those features come in. like, we don't wanna break
python, we want it all to work. but the problem is, is you can't run those
super dynamic features on an embedded processor
or on a gpu, right? or if you could, you probably don't want to just
because of the performance. and so we entered this
question of saying, okay, how do you get the power of
this dynamic metaprogramming into a language that has to be super efficient in specific cases? and so what we did was we said, okay, well, take that interpreter. python has an interpreter in it, right? take that interpreter and allow
it to run at compile time. and so now what you get is you get compiled time metaprogramming. and so this is super
interesting, super powerful, because one of the big advantages you get is you get python-style expressive apis, you get the ability to
have overloaded operators. and if you look at what happens inside of, like pytorch, for example, with automatic differentiation and eager mode and like all these things, they're using these really dynamic and powerful features at runtime, but we can take those
features and lift them so that they run at compile time. - 'cause c++ has
metaprogramming with templates. - [chris] yep. - but it's really messy. - it's super messy. it was accidentally, i mean, different people have
different interpretations. my interpretation is that it
was made accidentally powerful. it was not designed to be
turing-complete, for example, but that was discovered kind
of along the way, accidentally. and so there have been a number
of languages in the space. and so they usually have
templates or code instantiation, code-copying features of various sorts. some more modern languages or some newer languages, let's say, like, you know, they're fairly unknown. like zig, for example, says, okay, well, let's take all of
those types you can run it, all those things you can do at runtime and allow them to happen at compile time. and so one of the
problems with c++, i mean, which is one of the problems with c++ is-
- there we go. strong words. we're gonna offend everybody today. - oh, that's okay. i mean, everybody hates me
for a variety of reasons anyways, i'm sure, right? (chuckles) i've written up- - that's the way they show love is to hurt you.
- i have written enough c++ code to earn a little
bit of grumpiness with c++, but one of the problems with
it is that the metaprogramming system templates is just a
completely different universe from the normal runtime programming world. and so if you do
metaprogramming and programming, it's just like a different universe, different syntax, different concepts, different stuff going on. and so, again, one of
our goals with mojo is to make things really easy
to use, easy to learn, and so there's a natural stepping stone. and so as you do this, you say, okay, well, i have to do programming at runtime, i have to do programming at compile time. why are these different things? - how hard is that to pull it off? 'cause that sounds, to me, as a fan of metaprogramming and c++ even, how hard is it to pull that off? that sounds really, really exciting 'cause you can do the
same style programming at compile time and at runtime. that's really, really exciting.
- yep, yep, and so, i mean, in terms of the compiler
implementation details, it's hard. i won't be shy about
that. it's super hard. it requires, i mean, what mojo has underneath the covers is a completely new approach to the design of the compiler itself. and so this builds on these technologies like mir that you mentioned. that also includes other, like caching and other interpreters and jit compilers and
other stuff like that- - [lex] so you have like
an interpreter inside the- - within the compiler, yes. - [lex] oh, man. - and so it really takes the standard model of
programming languages and kind of twists it and unifies
it with the runtime model, which i think is really cool.
- right. - and to me, the value
of that is that, again, many of these languages have
metaprogramming features. like, they grow macros
or something, right? list, right? - yes. - i know your roots, right?
(lex chuckling) you know, and this is a
powerful thing, right? and so, you know, if you go back to list, one of the most powerful
things about it is that it said that the metaprogramming and the programming are the same, right? and so that made it way
simpler, way more consistent, way easier to understand, reason about, and it made it more composable. so if you build a library, you can use it both at
runtime and compile time, which is pretty cool.
- yeah. and for machine learning,
i think metaprogramming, i think we could generally
say, is extremely useful. and so you get features,
i mean, i'll jump around, but the feature of auto-tuning and adaptive compilation
just blows my mind. - yeah, well, so, okay. so
let's come back to that. - [lex] all right. - so what is machine learning, like, what, or what is a machine learning model? like, you take a pytorch model off the internet, right?
- yeah. - it's really interesting to me because what pytorch and what tensorflow and all these frameworks
are kinda pushing compute into is they're pushing into, like, this abstract specification
of a compute problem, which then gets mapped in a whole bunch of different ways, right? and so this is why it became
a metaprogramming problem, is that you wanna be able to say, cool, i have this neural net. now, run it with batch
size a thousand, right? do a mapping across batch. or, okay, i wanna take this problem. now, run it across a
thousand cpus or gpus, right? and so, like, this problem of,
like, describe the compute, and then map it and do things
and transform it, or, like, actually it's very profound
and that's one of the things that makes machine learning
systems really special. - maybe can you describe auto-tuning and how do you pull off, i mean, i guess adaptive compilation is what we're talking about
is metaprogramming. how do you pull off-
- yes. - auto-tuning? i mean, is that as
profound as i think it is? it just seems like a really, like, you know, we'll mention
list comprehensions. to me, from a quick glance
of mojo, which by the way, i have to absolutely, like, dive in, as i realize how amazing this is, i absolutely must dive in it, that looks like just an incredible feature for machine learning people. - yeah. well, so what is auto-tuning? so take a step back. auto-tuning
is a feature in mojo. so very little of what we're
doing is actually research, like many of these ideas have existed in other systems and other places. and so what we're doing
is we're pulling together good ideas, remixing them,
and making them into a, hopefully, a beautiful system, right? and so auto-tuning, the
observation is that, turns out, hardware systems' algorithms
are really complicated. turns out maybe you don't actually want to know how the hardware
works, (chuckles) right? a lot of people don't, right? and so there are lots of
really smart hardware people, i know a lot of them, where they know everything about, "okay, the cache size is this and the
number of registers is that. and if you use this what length of vector, it's gonna be super efficient
because it maps directly onto what it can do" and,
like, all this kinda stuff, or, "the gpu has sms and
it has a warp size of," whatever, right, all this stuff that
goes into these things, or "the tile size of a tpu is 128," like, these factoids, right? my belief is that most normal people, and i love hardware people, also i'm not trying to offend literally everybody on the internet, but most programmers actually don't wanna know this stuff, right? and so if you come at
it from perspective of, how do we allow people to
build both more abstracted but also more portable
code because, you know, it could be that the vector length changes or the cache size changes, or it could be that the tile
size of your matrix changes, or, the number, you know, an a100 versus an h100 versus
a volta versus a, whatever, gpu have different characteristics, right? a lot of the algorithms that you run are actually the same, but the parameters, these magic numbers you have to fill in end up being really fiddly numbers that an expert has to go figure out. and so what auto-tuning does is says, okay, well, guess what? there's a lot of compute out there, right? so instead of having humans go randomly try all the things
or do a grid, search, or go search some complicated
multi-dimensional space, how about we have
computers do that, right? and so what auto-tuning
does is you can say, hey, here's my algorithm. if it's a matrix operation
or something like that, you can say, okay, i'm gonna
carve it up into blocks, i'm gonna do those blocks in parallel and i wanna this, with 128
things that i'm running on, i wanna cut it this way
or that way or whatever. and you can say, hey, go see which one's actually empirically better on the system. - and then the result of that
you cache for that system. you save it.
- yep. and so come back to twisting
your compiler brain, right? so not only does the
compiler have an interpreter that's used to do metaprogramming, that compiler, that interpreter, that metaprogramming now has
to actually take your code and go run it on a target
machine, (chuckles) see which one it likes the best, and then stitch it in and
then keep going, right? - so part of the compilation
is machine-specific. - yeah. well, so i mean, this
is an optional feature, right? so you don't have to use it
for everything, but yeah. so one of the things
that we're in the quest of is ultimate performance, right?
- yes. - ultimate performance is important for a couple of reasons, right? so if you're an enterprise, you're looking to save costs and compute and things like this. ultimate performance translates to, you know, fewer servers. like, if you care about
the environment, hey, better performance leads
to more efficiency, right? i mean, you could joke
and say like, you know, python's bad for the
environment, (chuckles) right? and so if you move to mojo, it's like, at least 10x
better just outta the box, and then keep going, right?
- yeah. - but performance is also
interesting 'cause it leads to better products.
- yeah. - and so in the space of
machine learning, right, if you reduce the latency of
a model so that it runs faster so every time you query the server running the model it takes less time, well, then the product team can go and make the model bigger. well, that's actually makes it so you have a better
experience as a customer. and so a lot of people care about that. - so for auto-tuning, for like tile size, you mentioned 120f for tpu. you would specify like a
bunch of options to try, just in the code-
- yeah. yep. - just simple statement, and then you could just-
- yep. - set and forget and know,
depending wherever it compiles, it'll actually be the fastest. - and yeah, exactly. and the beauty of this
is that it helps you in a whole bunch of different ways, right? so if you're building... so often what'll happen is that, you know, you've written a bunch of
software yourself, right, you wake up one day, you say, "i have an idea. i'm gonna
go code up some code." i get to work, i forget about
it, i move on with life. i come back six months, or a year, or two years, or three years
later, you dust it off, and you go use it again
in a new environment. and maybe your gpu is different. maybe you're running on a
server instead of a laptop, maybe you're, whatever, right? and so the problem now is
you say, okay, well, i mean, again, not everybody
cares about performance, but if you do, you say, okay, well, i wanna take advantage
of all these new features. i don't wanna break the
old thing though, right? and so the typical way of handling this kinda stuff before is, you know, if you're talking about c++ templates or you're talking about c with macros, you end up with #ifdefs. you get like all these weird
things that get layered in, make the code super complicated, and then how do you test it, right? becomes this crazy complexity, multidimensional space that
you have to worry about. and, you know, that just
doesn't scale very well. - actually, lemme just jump around, before i go to some specific features, like the increase in performance
here that we're talking about can be just insane.
- yeah. - you write that mojo can provide a 35,000x speed up over python. how does it do that? - yeah, so i can even do
more, but we'll get to that. so first of all, when we say that, we're talking about what's called cpython, it's the default python
that everybody uses. when you type python 3, that's like typically
the one you use, right? cpython is an interpreter. and so interpreters, they
have an extra layer of, like bike codes and things like this, that they have to go
read, parse, interpret, and it makes them kind of
slow from that perspective. and so one of the first things we do is we moved to a compiler. and so just moving to a compiler, getting the interpreter out of the loop is 2 to 5 to 10x speed
up, depending on the code. so just out of the gate, it's using more modern techniques right? now, if you do that, one of the things you
can do is you can start to look at how cpython
started to lay out data. and so one of the things that cpython did, and this isn't part of the
python spec necessarily, but this is just sets of decisions, is that, if you take
an integer for example, it'll put it in an object 'cause in python, everything's an object. and so they do the very logical thing of keeping the memory representation of all objects the same. so all objects have a header,
they have like payload data. and what this means is that every time you pass around an object, you're passing around
a pointer to the data. well, this has overhead, right? turns out that modern computers don't like chasing pointers
very much and things like this. it means that you have
to allocate the data. it means you have to reference count it, which is another way that python uses to keep track of memory. and so this has a lot of overhead. and so if you say, okay, let's try to get that out
of the heap, out of a box, out of an indirection
and into the registers, that's another 10x, more.
- so it adds up if you're reference counting every single-
- absolutely. - every single thing you
create, that adds up. - yep, and if you look at, you know, people complain about the python gil, this is one of the things
that hurts parallelism. that's because the
reference counting, right? and so the gil and reference counting are very tightly intertwined in python. it's not the only thing, but
it's very tightly intertwined. and so then you lean into
this and you say, okay, cool. well, modern computers, they can do more than
one operation at a time. and so they have vectors.
what is a vector? well, a vector allows you to, instead of taking one piece of data, doing an add or multiply and
then pick up the next one, you can now do a 4, 8, or
16 or 32 at a time, right? well, python doesn't expose
that because of reasons. and so now you can say, okay,
well, you can adopt that. now you have threads. now you have like additional things, like you can control memory hierarchy. and so what mojo allows
you to do is it allows you to start taking advantage
of all these powerful things that have been built into
the hardware over time. the library gives very nice features. so you can say, just parallelize this. do this in parallel, right? so it's very, very powerful
weapons against slowness, which is why people have
been, i think having fun, like just taking code and making go fast because it's just kind
of an adrenaline rush to see like how fast you can get things. - before i talk about some
of the interesting stuff with parallelization and all that, let's first talk about, like, the basics. we talked the indentation, right? so this thing looks like python. it's sexy and beautiful
like python as i mentioned. - [chris] yep. - is it a typed language?
so what's the role of types? - yeah, good question.
so python has types. it has strings, it has integers, it has dictionaries and
like all that stuff, but they all live at runtime, right? and so because all those types
live at runtime in python, you never or you don't have
to spell them. (chuckles) python also has like
this whole typing thing going on now and a lot of people use it. - [lex] yeah. - i'm not talking about that. that's kind of a different thing. we can go back to that if
you want, but typically the, you know, you just say, i have a def and my def
takes two parameters. i'm gonna call them a and b and i don't have to write or type okay? so that is great, but what that does is that forces what's called a consistent representation. so these things have to be a pointer to an object with the object header and they all have to look the same. and then when you dispatch a method, you go through all the
same different paths no matter what the receiver,
whatever that type is. so what mojo does is it allows you to have more than one kind of type. and so what it does is allows
you to say, okay, cool. i have an object and objects
behave like python does. and so it's fully dynamic
and that's all great. and for many things, classes, like, that's all very powerful
and very important. but if you wanna say, hey, it's
an integer and it's 32 bits, or it's 64 bits or whatever it is, or it's a floating point
value and it's 64 bits, well, then the compiler can take that, and it can use that to do
way better optimization. and it turns out, again, getting rid of the
indirections, that's huge. means you can get better code completion 'cause compiler knows what the type is and so it knows what
operations work on it. and so that's actually pretty huge. and so what mojo does is allows you to progressively adopt
types into your program. and so you can start, again,
it's compatible with python, and so then you can add
however many types you want, wherever you want them. and if you don't wanna deal with it, you don't have to deal with it, right? and so one of, you know, our
opinions on this, (chuckles) it's that it's not that
types are the right thing or the wrong thing, it's
that they're a useful thing. - so it's kind of optional,
it's not strict typing, like, you don't have to specify type. - [chris] exactly. - okay, so it's starting from the thing that python's kinda
reaching towards right now with trying to inject types into it, what it's doing.
- yeah, with a very different approach, but yes, yeah.
- so what's the different approach? i'm actually one of the people (sighs) that have not been using
types very much in python. so i haven't-
- that's okay. why did you sigh? - it just, well, because
i know the importance. it's like adults use strict typing. and so i refuse to grow up in that sense. it's a kind of rebellion, but i just know that it probably reduces the amount of errors, even just for, forget about performance improvements, it probably reduces errors
of when you do strict typing. - yeah, so i mean, i think it's interesting
if you look at that, right? and the reason i'm giving
you a hard time then is that-
- yes. - there's this cultural
norm, this pressure, this, like, there has to be
a right way to do things. like, you know-
- yes. - grownups only do it one way. and if you don't do that-
- yes. - you should feel bad, right?
- yes. - like, some people feel like
python's a guilty pleasure or something, and that's like, when it gets serious, i need
to go rewrite it, right? well, i mean, cool.
- exactly. - i understand history and i understand kinda
where this comes from, but i don't think it has
to be a guilty pleasure, (chuckles) right?
- yeah. - so if you look at that, you say, why do you have to rewrite it? well, you have to rewrite it to deploy. well, why do you wanna deploy? well, you care about performance, or you care about predictability,
or you want, you know, a tiny thing on the server
that has no dependencies, or, you know, you have objectives
that you're trying to attain. so what if python can
achieve those objectives? so if you want types, well, maybe you want types
because you wanna make sure you're passing the right thing. sure, you can add a type. if you don't care, you're
prototyping some stuff, you're hacking some things out, you're, like, pulling some
random code off the internet, it should just work, (chuckles) right? and you shouldn't be, like, pressured. you shouldn't feel bad
about doing the right thing or the thing that feels good. now, if you're in a team, right, you're working at some
massive internet company and you have 400 million
lines of python code, well, they may have a house
rule that you use types, right?
- yeah. - because it makes it easier for different humans to talk to each other and understand what's going
on and bugs at scale, right? and so there are lots of good reasons why you might wanna use types, but that doesn't mean that everybody should use 'em all the time, right? so what mojo does is it says, cool. well, allow people to use
types and if you use types, you get nice things out of it, right? you get better performance
and things like this, right? but mojo is a full, compatible
superset of python, right? and so that means it has to
work without types. (chuckles) it has to support all the dynamic things. it has to support all the packages. it has to support for comprehension, list comprehensions and
things like this, right? and so that starting point
i think is really important. and i think that, again, you can look at why i
care so much about this. and there's many
different aspects of that, one of which is the world went
through a very challenging migration from python
2 to python 3, right? - [lex] yes. - this migration took many years and it was very painful for many teams, right?
- yeah. - and there's of a lot of
things that went on in that. i'm not an expert in all the details and i honestly don't wanna be. i don't want the world to
have to go through that, (chuckles) right?
- yeah. - and, you know, people can ignore mojo. and if it's not their thing, that's cool. but if they wanna use mojo, i don't want them to have
to rewrite all their code. - yeah, i mean, this, okay, the superset part is just, i mean, there's so much brilliant stuff here. that definitely is incredible. we'll talk about that.
- yeah. - first of all, how's the typing implemented
differently in python versus mojo?
- yeah. - so this heterogeneous flexibility you said is definitely implemented. - yeah, so i'm not a full expert (chuckles) in the whole
backstory on types in python. so i'll give you that. i can
give you my understanding. my understanding is, basically,
like many dynamic languages, the ecosystem went through a phase where people went from writing scripts to writing large scale,
huge code bases in python. and at scale, kinda helps have types.
- yeah. - people wanna be able to
reason about interfaces, do you expect string, or an int, or, like, these basic things, right? and so what the python
community started doing is it started saying, okay,
let's have tools on the side, checker tools, right, that go and, like, enforce a variance, check for
bugs, try to identify things. these are called static
analysis tools generally. and so these tools run over your code and try to look for bugs. what ended up happening is
there's so many of these things, so many different weird patterns
and different approaches on specifying the types and
different things going on, that the python community
realized and recognized, "hey, hey, hey, there's
the thing here." (chuckles) and so what they started
to do is they started to standardize the syntax
for adding types to python. now, one of the challenges
that they had is that they're coming from
kinda this fragmented world where there's lots of different tools, they have different
trade-offs and interpretations and the types mean different things. and so if you look at types in python, according to the python spec,
the types are ignored, right? so according to the python spec, you can write pretty
much anything (chuckles) in a type position, okay? technically, you can write
any expression, okay? now, that's beautiful
because you can extend it. you can do cool things, you can
write, build your own tools, you can build your own house, linter or something like that, right? but it's also a problem because
any existing python program may be using different tools and they have different interpretations. and so if you adopt somebody's
package into your ecosystem, try to run the tool you prefer, it may throw out tons of
weird errors and warnings and problems just
because it's incompatible with how these things work. also because they're added late and they're not checked
by the python interpret, it's always kinda more of a
hint that it is a requirement. also, the cpython implementation can't use 'em for performance. and so it's really- - i mean, that's a big one, right? so you can't utilize for the compilation, for the just-in-time compilation, okay.
- yep, yep, exactly. and this all comes back to
the design principle of, they're kinda hints, they're kind of, the definition's a little bit murky. it's unclear exactly the
interpretation in a bunch of cases. and so because of that,
you can't actually, even if you want to, it's really difficult to use them to say, like, it is going to be an int, and if it's not, it's a problem, right? a lot of code would break
if you did that, so. so in mojo, right, so you can still use those kind of type annotations, it's fine. but in mojo, if you declare
a type and you use it, then it means it is going to be that type. and the compiler helps you check that, and enforce it and it's safe and it's not a, like,
best-effort hint kind of a thing. - so if you try to shove a
string type thing into a integer- - [chris] you get an
error from the compiler. - from the compiler
compile time. nice, okay. what kinda basic types are there? - yeah. so mojo is pretty hardcore in
terms of what it tries to do in the language, which is the
philosophy there is that we, again, if you look at python, right, python's a beautiful language because it's so extensible, right? and so all of the
different things in python, like for loops and plus
and like all these things can be accessed through these
underbar armbar methods, okay? so you have to say, okay, if i make something that is super fast, i can go all the way down to the metal. why do i need to have integers built into the language, right? and so what mojo does is it says, okay, well, we can have this notion of structs. so you have classes in python. now you can have structs. classes are dynamic, structs are static. cool. we can get high performance. we can write c++ kind of code
with structs if you want. these things mix and work
beautifully together, but what that means is that you can go and implement strings and
ints and floats and arrays and all that kinda stuff
in the language, right? and so that's really
cool because, you know, to me as a idealizing compiler
language type of person, what i wanna do is i wanna get magic out of the compiler and
put in the libraries. because if somebody can, you know, if we can build an
integer that's beautiful and it has an amazing api
and it does all the things you'd expect an integer
to do, we don't like it, maybe you want a big integer, maybe you want, like, sideways
integer, i don't know, like what all the space of integers are, then you can do that, and it's
not a second class citizen. and so if you look at
certain other languages, like c++, one i also love and use a lot, int is hardcoded in the language, but complex is not. and so isn't it kinda
weird that, you know, you have this std complex
class, but you have int, and complex tries to look
like a natural numeric type and things like this. but integers and floating
point have these, like, special promotion rules
and other things like that, that are magic and they're
hacked into the compiler. and because of that, you can't actually make something that works like the built-in types. - is there something provided
as a standard because, you know, because it's ai first, you know, numerical types are so important here. so is there something, like a nice standard
implementation of indigent flows? - yeah, so we're still
building all that stuff out. so we provide integers and
floats and all that kinda stuff. we also provide like buffers and tensors and things like that you'd
expect in an ml context. honestly, we need to keep
designing and redesigning and working with the community to build that out and make that better. that's not our strength right now. give us six months or a year and i think it'll be way better, but the power of putting
in the library means that we can have teams of experts that aren't compiler engineers
that can help us design and refine and drive this forward. - so one of the exciting
things we should mention here is that this is new and fresh. this cake is unbaked. it's almost baked. you can tell it's delicious, but it's not fully ready to be consumed. - yep. that's very fair. it is very useful, but it's very useful if you're a super low-level programmer right now. and what we're doing is we're
working our way up the stack. and so the way i would look at mojo today in may and 2023 is that it's like a 0.1. so i think that, you
know, a year from now, it's gonna be way more interesting
to a variety of people. but what we're doing is we
decide to release it early so that people can get access
to it and play with it. we can build it with the community. we have a big roadmap, fully published, being transparent about this and a lot of people are
involved in this stuff. and so what we're doing
is we're really optimizing for building this thing the right way. and building it the right
way is kind of interesting, working with the community, because everybody wants it yesterday. and so sometimes it's kind of, you know, there's some dynamics there, but i think-
- yeah. - it's the right thing. - so there's a discord also. so the dynamics is pretty interesting. - [chris] yeah. - sometimes the community probably can be very chaotic and
introduce a lot of stress. guido famously quit over the
stress of the walrus operator. i mean, it's, you know-
- yeah, yeah. - it broke... - [chris] straw that
broke the camel's back. - exactly. and so, like, it could be
very stressful to develop, but can you just add a
tangent upon a tangent? is it stressful to work through the design
of various features here, given that the community
is recently involved? - well, so i've been
doing open development and community stuff for
decades now. (chuckles) somehow this has happened to me. so i've learned some tricks, but the thing that always gets me is i wanna make people happy, right? and so maybe not all people
all happy all the time, but generally,
- yeah. - i want people to be happy, right? and so the challenge is that again, we're tapping into some long, some deep seated long
tensions and pressures both in the python world,
but also in the ai world, in the hardware world
and things like this. and so people just want
us to move faster, right? and so again, our decision
was, "let's release this early. let's get people used to it or access to it and play with it. and like, let's build in the open," which we could have, you know, had the language monk sitting in the cloister up on the hilltop, like beavering away
trying to build something. but in my experience, you get something that's way better if you work with the community, right? and so, yes, it can be frustrating, can be challenging for
lots of people involved. and, you know, if you, i mean,
you mentioned our discord. we have over 10,000 people on the discord, 11,000 people or something. keep in mind we released
mojo like two weeks ago. (chuckles)
yeah. so-
- it's very active. - so it's very cool, but what that means is that, you know, 10, 11,000 people all will want
something different, right? and so what we've done
is we've tried to say, okay, cool. here's our roadmap. and the roadmap isn't
completely arbitrary. it's based on here's the logical order in which to build these features or add these capabilities
and things like that. and what we've done is we've spun really fast on like bug fixes. and so we actually have very
few bugs, which is cool, i mean, actually for a
project in this state, but then what we're doing is we're dropping in features
very deliberately. - i mean, this is fun to watch 'cause you got the two
gigantic communities of, like, hardware,
like systems engineers, and then you have the machine
learning python people that are like higher level. - [chris] yeah. - and it's just two, like, army, like- - they've both, they've been at war, yeah. (lex chuckling)
they've been at war, right? and so here's- - [lex] it's a tolkien
novel or something. okay. - well, so here's a test. and again, like, it's super funny for something that's only
been out for two weeks, right? people are so impatient, right? but, okay, cool, let's
fast forward a year. like, in a year's time, mojo will be actually quite amazing and solve tons of
problems and be very good. people still have these problems, right? and so you look at this and you say, and the way i look at this
at least is to say, okay, well, we're solving big,
long-standing problems. to me, again, working on
many different problems, i wanna make sure we do it right, right? there's like a responsibility you feel because if you mess it
up, (chuckles) right, there's very few opportunities
to do projects like this and have them really
have impact on the world. if we do it right, then maybe we can take
those feuding armies and actually heal some of those wounds, right?
- yeah. - this feels like a speech
by george washington or abraham lincoln or something. - and you look at this and it's like, okay, well, how different are we? - [lex] yeah. - we all want beautiful things. we all want something that's nice. we all wanna be able to work together. we all want our stuff to be used, right? and so if we can help heal that, now i'm not optimistic that all people will use mojo and they'll stop using c++, like, that's not my
goal, (chuckles) right, but if we can heal some of that, i think that'd be pretty cool. that'd be nice.
- yeah, and we start by putting the people who like braces into the
gulag, no. (chuckles) - so there are proposals
for adding braces to mojo and we just we tell them no.
- oh, interesting. - oh, okay, (laughs)
(chris laughing) politely, yeah, anyway. so there's a lot of amazing
features on the roadmap and those already
implemented, it'd be awesome if i could just ask you a few things. so-
- yeah, go for it. - so the other performance improvement comes from immutability. so what's this var and this
let thing that we got going on? and what's immutability?
- well, so... - yeah, so one of the
things that is useful, and it's not always
required, but it's useful, is knowing whether something can change out from underneath you, right? and so in python, you have a
pointer to an array, right? and so you pass that pointer
to an array around to things. if you pass into a function, they may take that and scroll away in some other data structure. and so you get your array
back and you go to use it. and now somebody else is like
putting stuff in your array. how do you reason about that?
- yeah. - it gets to be very complicated and leads to lots of bugs, right? and so one of the things
that, you know, again, this is not something mojo forces on you, but something that mojo enables is this thing called value semantics. and what value semantics do
is they take collections, like array, like dictionaries, also tensors and strings and
things like this that are much higher level and make
them behave like proper values. and so it makes it look like, if you pass these things around, you get a logical copy of all the data. and so if i pass you an
array, it's your array. you can go do what you want to it, you're not gonna hurt my array. now that is an interesting and very powerful design principle. it defines away a ton of bugs. you have to be careful to
implement it in an efficient way. - yeah, is there a performance
hit that's significant? - generally not if you
implement it the right way, but it requires a lot of very low-level
getting-the-language-right bits. - i assume that'd be
a huge performance hit 'cause the benefit is really nice 'cause you don't get into these- - absolutely. well, the
trick is you can't do copies. so you have to provide the behavior of copying without doing the copy. - [lex] yeah. how do you do that?
(chris laughing) how do you do that?
- it's not magic. it's just-
- okay. - it's actually pretty cool. well, so first, before we
talk about how that works, let's talk about how it
works in python, right? so in python you define a person class, or maybe a person class is a bad idea. you define a database class, right? and a database class
has an array of records, something like that, right? and so the problem is, is that if you pass in a record or a class instance into the database, it'll take a hold of that object and then it assumes it has it. and if you're passing an object in, you have to know that that
database is gonna take it, and therefore you shouldn't change it after you put it in the database, right? this is-
- you just kinda have to know that. - you just have to kinda know that, right? and so you roll out version
one of the database. you just kinda have to know that. of course, lex uses his
own database, right? - [lex] yeah. - right, 'cause you built it, you understand how this works, right? somebody else joins the
team, they don't know this, right?
- yes. - and so now they suddenly get bugs, you're having to maintain the database, you shake your fist, you argue. the 10th time this
happens, you're like, okay, we have to do something different, right? and so what you do is you
go change your python code and you change your database class to copy the record every time you add it. and so what ends up
happening is you say, okay, i will do what's called a defensive copy inside the database. and then that way if
somebody passes something in, i will have my own copy of it
and they can go do whatever and they're not gonna break
my thing, (chuckles) okay? this is usually the two design patterns. if you look in pytorch, for example, this is cloning a tensor. like, there's a specific thing and you have to know where to call it. and if you don't call
it in the right place, you get these bugs and this
is state-of-the-art, right? so a different approach, so
it's used in many languages, so i've worked with it in
swift, is you say, okay, well, let's provide value semantics. and so we wanna provide
the view that you get a logically independent copy,
but we wanna do that lazily. and so what what we do is we say, okay, if you pass something into a function, it doesn't actually make a copy. what it actually does is it just increments a reference to it. and if you pass it around,
you stick in your database, it can go into the database, you own it. and then you come back outta the stack, nobody's copied anything, you
come back outta the stack, and then the caller let's go of it. well, then you've just handed
it off to the database, you've transferred it and
there's no copies made. now, on the other hand, if, you know, your coworker goes and hands you a record and you pass it in, you
stick it in the database, and then you go to town
and you start modifying it, what happens is you get
a copy lazily on demand. and so what this does, this gives you copies
only when you need them. so it defines the way the bugs, but it also generally reduces the number of copies in practice. and so it's-
- but the implementation details are tricky here, i assume.
- yes, yes. - something with reference counting, but to make it performant across a number of
different kinds of objects? - yeah. well, so you
need a couple of things. so this concept has existed
in many different worlds. and so it's, again, it's not
novel research at all, right? the magic is getting the design right so that you can do this in
a reasonable way, right? and so there's a number of
components that go into this. one is when you're passing around, so we're talking about
python and reference counting and the expense of doing that. when you're passing values around, you don't wanna do
extra reference counting for no good reason. and so you have to make
sure that you're efficient and you transfer ownership
instead of duplicating references and things like that, which
is a very low-level problem. you also have to adopt this, and you have to build
these data structures. and so if you say, you know, mojo has to be compatible with python, so of course the default list
is a reference semantic list that works the way you'd expect in python, but then you have to design
a value semantic list. and so you just have to implement that, and then you implement the logic within. and so the role of the language here is to provide all the low-level hooks that allow the author of the type to be able to get and
express this behavior without forcing it into all cases or hard coding this into
the language itself. - but there's ownership? so you're constantly transferring, you're tracking who owns the thing. - yes. and so there's a whole
system called ownership. and so this is related to work
done in the rust community. also, the swift community
has done a bunch of work and there's a bunch of
different other languages that have all kind of... c++ actually has copy constructors and destructors and things like that. and so, and i mean, c++ has everything. so it has move constructors and has like this whole world of things. and so this is a body of work
that's kind of been developing for many, many years now. and so mojo takes some of the best ideas out of all these systems and
then remixes in a nice way so that you get the power of something like the rust programming language, but you don't have to deal
with it when you don't want to, which is a major thing in
terms of teaching and learning and being able to use
and scale these systems. - how does that play with
argument conventions? what are they? why are they important? how does the value semantics, how does the transfer ownership work with the arguments when they're passing definitions?
- yeah. so if you go deep into
systems programming land, so this isn't, again, this is
not something for everybody, but if you go deep into
systems programming land, what you encounter is you encounter these types that get weird. (chuckles) so if you're used to python,
you think about everything. i can just copy it around. i can go change it and mutate it and do these things and it's all cool. if you get into systems programming land, you get into these things, like, i have an atomic number,
or i have a mutex, or i have a uniquely
owned database handle, things like this, right? so these types, you
can't necessarily copy. sometimes you can't
necessarily even move them to a different address. and so what mojo allows
you to do is it allows you to express, hey, i don't wanna
get a copy of this thing. i wanna actually just
get a reference to it. and by doing that, what you
can say is, you can say, okay, if i'm defining something
weird like a, you know, atomic number or something,
it's like, it has to be... so an atomic number is an area in memory that multiple threads can access at a time without synchronous, without locks, right? and so, like the definition
of atomic numbers, multiple different things
have to be poking at that, therefore they have to
agree on where it is, (chuckles) right? so you can't just like move
it out from underneath one because it kinda breaks what it means. and so that's an example of a type that you can't copy, you can't move it. like, once you create, it has
to be where it was, right? now, if you look at many other examples, like a database handle, right, so, okay, well, what happens? how do you copy a database handle? do you copy the whole database? that's not something you
necessarily wanna do. there's a lot of types like
that where you wanna be able to say that they are uniquely owned. so there's always one of this thing, or if i create a thing, i don't copy it. and so what mojo allows you
to do is it allows you to say, hey, i wanna pass around
in reference to this thing without copying it, and so
it has borrowed conventions. so you can say, you can use it, but you don't get to change it. you can pass it by mutable reference. and so if you do that, then
you get a reference to it, but you can change it. and so it manages all that kinda stuff. - so it's just a really nice
implementation of, like, c++ has-
- yeah. - you know, different kinds of pointers.
- reference, yeah, has pointers. - smart, smart, different kinds of
implementations of smart pointers that you can-
- yeah. - explicitly define, this allows you, but you're saying that's
more like the weird case versus the common case? - well, it depends on where, i mean, i don't think i'm a normal person, so.
- yes. - i mean, i'm not one to
call other people weird. - [lex] yeah.
(chris chuckling) but, you know, if you talk to a typical
python programmer, you're typically not
thinking about this, right? this is a lower level of abstraction. now, certainly if you
talk to a c++ programmer, certainly if you talk to
a rust programmer, again, they're not weird, they're delightful. like, these are all good people, right? those folks will think
about all the time, right? and so i look at this as, there's a spectrum between
very deep, low-level systems, i'm gonna go poke the bits and care about how they're
laid out in memory, all the way up to application and scripting and other things like this. and so it's not that
anybody's right or wrong, it's about how do we build
one system that scales? - by the way, the idea of an atomic
number has been something that always brought me deep happiness, because the flip side of that, the idea that threads
can just modify stuff asynchronously, just the whole idea of
concurrent programming is a source of infinite distrust for me. - well, so this is where you
jump into, you know, again, you zoom out and get out of
program languages or compilers and you just look at what
the industry has done, my mind is constantly
blown by this, right? and you look at what,
you know, moore's law, moore's law is this idea that, like computers, for a long time, single thread performance just got faster and faster and faster and faster for free. but then physics and
other things intervened, and power consumption, like
other things started to matter. and so what ended up happening is we went from single core
computers to multi-core, then we went to accelerators, right? and this trend towards specialization of hardware is only gonna continue. and so for years, us programming language nerds and compiler people
have been saying, okay, well, how do we tackle multi-core, right? for a while it was like,
"multi-core is the future. we have to get on top of this thing." and then it was multi-core is the default. "what are we doing with this thing?" and then it's like, there's chips with
hundreds of cores in them. (chuckles) what will happen, right?
- yeah. - and so i'm super inspired
by the fact that, you know, in the face of this, you know, those machine learning people invented this idea of a tensor,
right? and what's a tensor? a tensor is like an arithmetic
and algebraic concept. it's like an abstraction around a gigantic
parallelizable dataset, right? and because of that and because of things like tensorflow and pytorch,
we're able to say, okay, we'll express the math of the system. this enables you to do
automatic differentiations, enables you to do like
all these cool things. and it's an abstracted representation. well, because you have that
abstract representation, you can now map it onto
these parallel machines without having to control,
okay, put that bite here, put that bite there, put that bite there. and this has enabled an
explosion in terms of ai, compute, accelerators, like all the stuff. and so that's super, super exciting. - what about the deployment and the execution across
multiple machines? - [chris] yeah. - so you write that the
modular compute platform dynamically partitions models
with billions of parameters and distributes their execution
across multiple machines, enabling unparalleled efficiency. by the way, the use of
unparalleled in that sentence... anyway.
(chris chuckling) enabling unparalleled efficiency, scale, and the reliability for
the largest workloads. so how do you do this abstraction of distributed
deployment of large models? - yeah, so one of the
really interesting tensions, so there's a whole bunch of
stuff that goes into that. i'll pick a random walk through it. if you go back and replay the history of machine learning, right, i mean, the brief, most recent
history of machine learning, 'cause this is, as you know, very deep. - [lex] yeah. - i knew lex when he had an ai podcast. - [lex] yes.
(chris chuckling) - [chris] right? - yeah, (chuckles) yeah. - so if you look at just
tensorflow and pytorch, which is pretty recent history
in the big picture, right, but tensorflow is all about graphs. pytorch, i think pretty
unarguably ended up winning. and why did it win? mostly
because the usability, right? and the usability of
pytorch is i think, huge. and i think, again, that's a huge testament to
the power of taking abstract, theoretical technical concepts and bringing it to the masses, right? now the challenge with what the tensorflow versus the pytorch design points was that tensorflow's kinda
difficult to use for researchers, but it was actually pretty
good for deployment. pytorch is really good for researchers. it kind of not super great
for deployment, right? and so i think that we as an
industry have been struggling. and if you look at what deploying
a machine learning model today means is that you'll
have researchers who are, i mean, wicked smart, of course, but they're wicked smart
at model architecture and data and calculus
and (chuckles) like all, like, they're wicked
smart in various domains. they don't wanna know anything
about the hardware deployment or c++ or things like this, right? and so what's happened is you get people who train the model, they throw it over the fence, and then you have people
that try to deploy the model. well, every time you have a team a does x, they throw it over the fence, team b does y, like you have a problem, because of course it never
works the first time. and so you throw over the
fence, they figure out, okay, it's too slow, won't fit,
doesn't use the right operator, the tool crashes, whatever the problem is, then they have to throw
it back over the fence. and every time you throw
a thing over a fence, it takes three weeks of project managers and meetings and things like this. and so what we've seen
today is that getting models in production can take weeks or months. like, it's not atypical, right? i talk to lots of people
and you talk about, like vp of software at
some internet company trying to deploy a
model, and they're like, why do i need a team of
45 people? (chuckles) like, it's so easy trying to model. why can't i deploy it, right? and if you dig into this,
every layer is problematic. so if you look at the language piece, i mean, this is tip of the iceberg. it's a very exciting tip
of the iceberg for folks, but you've got python on one side and c++ on the other side. python doesn't really deploy. i mean, can theoretically,
technically in some cases, but often a lot of production teams will wanna get things out of python because they get better performance and control and whatever else. so mojo can help with that. if you look at serving, so you
talk about gigantic models, well, a gigantic model won't
fit on one machine, right? and so now you have this
model, it's written python, it has to be rewritten in c++. now it also has to be carved up so that half of it runs on one machine, half of it runs on another machine, or maybe it runs on 10 machines. well, so now, suddenly, the
complexity is exploding, right? and the reason for this is that if you look into tensorflow
or pytorch, these systems, they weren't really designed
for this world, right? they were designed for, you know, back in the day when we were
starting and doing things where it was a different,
much simpler world, like you wanted to run resnet-50 or some ancient model
architecture like this. it was a completely different world than- - trained on one gpu. - [chris] exactly. alexnet.
- doing it on one gpu. (chuckles)
- yeah, alexnet, right, the major breakthrough, and the world has changed, right? and so now the challenge is, is that tensorflow,
pytorch, these systems, they weren't actually designed for llms, like, that was not a thing. and so where tensorflow
actually has amazing power in terms of scale and
deployment and things like that, and i think google is, i
mean, maybe not unmatched, but they're, like, incredible, in terms of their capabilities
and gigantic scale, many researchers using pytorch, right? and so pytorch doesn't have
those same capabilities. and so what modular can do
is it can help with that. now, if you take a step
back and you say like, what is modular doing, right? so modular has like a bitter enemy that we're fighting
against in the industry. and it's one of these things
where everybody knows it, but nobody is usually
willing to talk about it. - the bitter enemy. - the bitter thing that we have to destroy that we're all struggling
with and it's like all around, it's like fish can't see
water, it's complexity. - sure, yes. it's complexity. - [chris] right? - that was very philosophical, (chris chuckling)
very well said. - [chris] and so if you look at it, yes, it is on the hardware side. - yes. - all these accelerators, all these software stack
that go with the accelerator, all these, like, there's
massive complexity over there. you look at what's happening
on the modeling side, massive amount of complexity. like, things are changing all the time. people are inventing. turns out the research is
not done, (chuckles) right? and so people wanna be able to move fast. transformers are amazing, but there's a ton of diversity
even within transformers, and what's the next transformer, right? and you look into serving. also,
huge amounts of complexity. it turns out that all the
cloud providers, right, have all their very weird
but very cool hardware for networking and all this kinda stuff. and it's all very complicated.
people aren't using that. you look at classical serving, right, there's this whole world of
people who know how to write high-performance servers
with zero-copy networking and, like, all this
fancy asynchronous i/o, and, like, all these fancy
things in the serving community, very little that has pervaded into the machine learning world, right? and why is that? well, it's because, again, these systems have been
built up over many years. they haven't been rethought, there hasn't been a first
principles approach to this. and so what modular's doing
is we're saying, "okay, we've built many of these things, right?" so i've worked on tensorflow and tpus and things like that. other folks on our team have,
like, worked on pytorch core. we've worked on onnx one time. we've worked on many
of these other systems. and so built systems like
the apple accelerators and all that kinda stuff, like
our team is quite amazing. and so one of the things
that roughly everybody at modular's grumpy about
is that when you're working on one of these projects,
you have a first order goal: get the hardware to work. get the system to enable one more model. get this product out the door. enable the specific workload, or make it solve this problem
for this product team, right? and nobody's been given a chance to actually do that step back. and so we, as an industry, we
didn't take two steps forward. we took like' steps forward in terms of all this
really cool technology across compilers and systems and runtimes and heterogeneous computing,
like all this kinda stuff. and like, all this technology
has been, you know, i wouldn't say beautifully designed, but it's been proven
in different quadrants. like, you know, you look
at google with tpus, massive, huge exif flops of
compute strapped together into machines that researchers are programming in python in a notebook. that's huge. that's amazing.
- that's amazing. that's incredible.
- right, it's incredible. and so you look at the
technology that goes into that, and the algorithms are
actually quite general. and so lots of other hardware out there and lots of other teams
out there don't have the sophistication or the,
maybe the years working on it, or the budget, or whatever
that google does, right? and so they should be getting
access to the same algorithms, but they just don't have that, right? and so what modular's doing,
so we're saying, "cool, this is not research anymore." like, we've built
auto-tuning in many systems. we've built programming languages, right? and so like, have implemented
c++, have implemented swift, have implemented many of these things. and so, you know, it's
hard, but it's not research. and you look at accelerators. well, we know there's
a bunch of different, weird kind of accelerators, but they actually cluster together, right? and you look at gpus. well, there's a couple
of major vendors of gpus and they maybe don't always get along, but their architectures are very similar. you look at cpus. cpus are still super important for the deployment side of things. and you see new architectures coming out from all the cloud providers
and things like this, and they're all super
important to the world, right, but they don't have the
30 years of development that the entrenched people do, right? and so what modular
can do is we're saying, "okay, all this complexity,
like, it's not bad complexity, it's actually innovation,
(chuckles) right?" and so it's innovation that's happening and it's for good reasons, but i have sympathy for the
poor software people, right? i mean, again, i'm a
generally software person too. i love hardware, but software people wanna
build applications and products and solutions that scale over many years. they don't wanna build a
solution for one generation of hardware with one
vendor's tools, right? and because of this, they need something that scales with them. they need something that works
on cloud and mobile, right, because, you know, their
product manager said, hey, i want it to have lower latency and it's better for personalization, or whatever they decide, right? products evolve. and so the challenge with the
machine learning technology and the infrastructure we
have today in the industry is that it's all these point solutions. and because there are all
these point solutions, it means that as your product evolves, you have to like switch
different technology stacks or switch to a different vendor. and what that does is
that slows down progress. - so basically a lot of
the things we've developed in those little silos for
machine learning tasks, you want to make that
the first class citizen of a general purpose programming language that can then be compiled across all these kinds of hardware. - well, so it's not really
about a programming language. i mean, the programming language is a component of the mission, right? and the mission is, or not literal, but our joking mission is "to save the world from
terrible ai software." - [lex] excellent. i love it.
- okay? (chuckles) - so, you know, if you
look at this mission, you need a syntax. so yeah, you need
programming language, right? and like, we wouldn't have to
build the programming language if one existed, right? so if python was already good enough, then cool, we would've
just used it, right? we're not just doing very large scale, expensive engineering
projects for the sake of it, like, it's to solve a problem, right? it's also about accelerators. it's also about exotic
numerics and bfloat16 and matrix multiplication and convolutions and like, this kinda stuff. within the stack, there are
things like kernel fusion. that's a esoteric but
really important thing that leads to much better performance and much more general research
hackability together, right? - and that's enabled by the asics. that's enabled by certain hardware. so it's like-
- well. - where's the dance between, i mean, there's several questions here. like, how do you add-
- yep. - a piece of hardware to the stack if a new piece of-
- yeah. - like if i have this genius invention of a specialized accelerator-
- yeah. - how do i add that to
the modular framework? and also how does modular as a standard start to define the kinds of hardware that should be developed? - yeah, so let me take a step back and talk about status quo, okay?
- yes. - and so if you go back to
tensorflow 1, pytorch 1, this kinda timeframe, and these have all evolved
and gone way more complicated. so let's go back to the
glorious simple days, right? these things basically were cpus and cuda. and so what you do is you
say, go do a dense layer. and a dense layer has a matrix
multiplication in it, right? and so when you say that, you say, go do this big operation,
a matrix multiplication, and if it's on a gpu,
kick off a cuda kernel. if it's on a cpu, go do
like an intel algorithm, or something like that
with an intel mkl, okay? now that's really cool if you're either nvidia or intel, right? but then more hardware comes in, right? and on one access, you have
more hardware coming in. on the other hand, you have an explosion of innovation in ai. and so what happened with
both tensorflow and pytorch is that the explosion of
innovation in ai has led to, it's not just about matrix
multiplication and convolution. these things have now like
2,000 different operators. and on the other hand, you have, i don't know how many pieces of hardware there are out there. it's a lot, (chuckles) okay?
it's not even hundreds. it's probably thousands, okay? and across all of edge and across like, all the different things- - that are used at scale. - [chris] yeah, exactly. i mean-
- also it's not just like a handful.
- ai's everywhere. yeah.
- it's not a handful of tpu alternatives. it's-
- correct. it's every phone, often
with many different chips inside of it-
- right. - from different vendors from...
- right. - like, ai is everywhere.
it's a thing, right? - why are they all making their own chips? like, why is everybody
making their own thing? - [chris] well, so- - is that a good thing, first of all? - so chris's philosophy on hardware, right?
- yeah. - so my philosophy is that there isn't one
right solution, right? and so i think that, again, we're at the end of moore's
law, specialization happens. - [lex] yeah. - if you're building, if
you're training gpt-5, you want some crazy super
computer data center thingy. if you're making a smart
camera that runs on batteries, you want something that
looks very different. if you're building a phone, you want something that
looks very different. if you have something like a laptop, you want something that
looks maybe similar but a different scale, right? and so ai ends up
touching all of our lives. robotics, right? and, like,
lots of different things. and so as you look into this, these have different power envelopes. there's different trade-offs
in terms of the algorithms. there's new innovations and sparsity and other data formats
and things like that. and so hardware innovation, i think, is a really good thing, right? and what i'm interested in
is unlocking that innovation. there's also like analog
and quantum and like all the really weird stuff, right?
- yeah. - and so if somebody
can come up with a chip that uses analog computing and it's 100x more power efficient, think what that would mean
in terms of the daily impact on the products we use, that'd be huge. now, if you're building
an analog computer, you may not be a compiler
specialist, right? these are different skill sets, right? and so you can hire some compiler people if you're running a big company, maybe, but it turns out these are really like exotic new generation
of compilers. (chuckles) like, this is a different thing, right? so if you take a step back out and come back to what is the status quo, the status quo is that if
you're intel or you're nvidia, you keep up with the industry
and you chase and, okay, there's 1,900 now, there's
2-000 now, there's 2,100. and you have a huge team of
people that are like trying to keep up and tune and optimize. and even when one of
the big guys comes out with a new generation of their chip, they have to go back and
rewrite all these things, right? so really it's only powered
by having hundreds of people that are all, like,
frantically trying to keep up. and what that does is that
keeps out the little guys, and sometimes they're not so little guys, the big guys that are also just not in those dominant positions. and so what has been happening, and so you talk about
the rise of new exotic, crazy accelerators is people
have been trying to turn this from a let's go write lots
of special kernels problem into a compiler problem. and so we, and i contributed
to this as well, (chuckles) we as an industry went into a like, let's go make this compiler
problem phase, let's call it. and much of the industry is
still in this phase, by the way. so i wouldn't say this phase is over. and so the idea is to say, look, okay, what a compiler does is it
provides a much more general, extensible hackable interface for dealing with the general case, right? and so within machine learning
algorithms, for example, people figured out that, hey, if i do a matrix multiplication
and i do a relu, right, the classic activation function, it is way faster to do
one passover the data and then do the relu on the output where i'm writing out the data, 'cause relu is just a maximum
operation, right, max at zero. and so it's an amazing
optimization. take mathml, relu. squished together in one
operation, now i have mathml relu. well, wait a second. if i do that, now, i
just went from having, you know, two operators to three. but now i figure out, okay, well, there's a lot of
activation functions. what about a leaky value? what about... like, a million things
that are out there, right? and so as i start fusing these in, now i get permutations of
all these algorithms, right? and so what the compiler people said is they said, "hey, well, cool. well, i will go enumerate
all the algorithms and i will enumerate all the pairs and i will actually
generate a kernel for you." and i think that this has been very, very useful for the industry. this is one of the things
that powers google tpus. pytorch 2's, like, rolling
out really cool compiler stuff with triton, this other
technology, and things like this. and so the compiler
people are kind of coming into their fore and saying like, awesome, this is a compiler
problem. we'll compiler it. here's the problem. (chuckles) not everybody's a compiler person. i love compiler people, trust me, right, but not everybody can or
should be a compiler person. it turns out that they're people that know analog computers really well, or they know some gpu internal architecture thing really well, or they know some crazy sparse numeric interesting algorithm that
is the cusp of research, but they're not compiler people. and so one of the challenges
with this new wave of technology trying to turn
everything into a compiler, 'cause again, it has
excluded a ton of people. and so you look at what does mojo do, what does the modular stack do is brings programmability
back into this world. like, it enables, i
wouldn't say normal people, but like a new, you know, a different kind of delightful nerd that cares about numerics,
or cares about hardware, or cares about things like this, to be able to express that in
the stack and extend the stack without having to actually
go hack the compiler itself. - so extend the stack
on the algorithm side. - [chris] yeah. - and then on the hardware side. - yeah, so again, go back to, like, the simplest example of int, right? and so what both swift
and mojo and other things like this did is we said, okay, pull magic out of the compiler and put it in the standard library, right? and so what modular's doing with the engine that we're providing and like, this very deep
technology stack, right, which goes into heterogeneous runtimes and like a whole bunch of
really cool, really cool things, this whole stack allows that
stack to be extended and hacked and changed by researchers
and by hardware innovators and by people who know
things that we don't know, (chuckles) 'cause, you know,
modular has some smart people, but we don't have all the smart
people it turns out, right? - what are heterogeneous runtimes? - yeah. so what is heterogeneous, right? so heterogeneous just means many different kinds of things together. and so the simplest example you might come up with is a cpu and a gpu. and so it's a simple
heterogeneous computer to say, i'll run my data loading
and pre-processing and other algorithms on the cpu. and then once i get it
into the right shape, i shove it into the gpu. i do a lot of matrix multiplication and convolutions and things like this. and then i get it back out and i do some reductions and summaries and they shove it across the wire, to across the network to
another machine, right? and so you've got now what
are effectively two computers, a cpu and a gpu talking to each other, working together in a
heterogeneous system. but that was 10 years
ago, (chuckles) okay? you look at a modern cell phone. modern cell phone, you've got cpus, and they're not just cpus, there's like big.little cpus and there's multiple different kinds of cpus that are kind-
- yep. - of working together, they're multi-core. you've got gpus, you've got
neural network accelerators, you've got dedicated
hardware blocks for media, so for video decode and jpeg
decode and things like this. and so you've got this
massively complicated system, and this isn't just cell phones. every laptop these days
is doing the same thing. and all these blocks
can run at the same time and need to be choreographed, right? and so again, one of the cool
things about machine learning is it's moving things
to like data flow graphs and higher level of
abstractions and tensors and these things that it doesn't specify, here's how to do the algorithm. it gives the system a lot more flexibility in terms of how to translate or map it or compile it onto the
system that you have. and so what you need, you know, the bottom-est part of the layer there is a way for all these devices
to talk to each other. and so this is one thing that, you know, i'm very passionate about. i mean, you know, i'm a nerd, but all these machines
and all these systems are effectively parallel computers running at the same time,
sending messages to each other. and so they're all fully asynchronous. well, this is actually a small
version of the same problem you have in a data center, right? in a data center, you now have
multiple different machines, sometimes very specialized, sometimes with gpus or tpus in one node and sometimes with disks in other nodes. and so you get a much larger
scale heterogenous computer. and so what ends up happening
is you have this, like, multi-layer abstraction of
hierarchical parallelism, hierarchical, asynchronous
communication and making that, again, my enemy, is complexity. by getting that away from being different specialized systems
at every different part of the stack and having more
consistency and uniformity, i think we can help lift the world and make it much simpler
and actually get used. - well, how do you leverage, like, the strengths of the
different specialized systems? so looking inside the smartphone, like there's what, like-
- yeah. - i don't know, five,
six computers essentially inside the smartphone?
- yeah. - how do you, without trying
to minimize the explicit, making it explicit, which computer is supposed to
be used for which operation? - yeah, so there's a pretty
well-known algorithm, and what you're doing is
you're looking at two factors. you're looking at the
factor of sending data from one thing to another, right, 'cause it takes time to get
it from that side of the chip to that side of the chip
and things like this. and then you're looking at
what is the time it takes to do an operation on a particular block. so take cpus. cpus are fully general.
they can do anything, right? but then you have a neural net accelerator that's really good at
matrix multiplication, okay? and so you say, okay, well, if my workload is
all matrix multiplication, i start up, i send the data
over the neural net thing, it goes and does matrix multiplication. when it's done, it sends
me back the result. all is good, right? and so the simplest thing is just saying, do matrix operations over there, right? but then you realize you get
a little bit more complicated because you can do matrix
multiplication on a gpu, you can do it on a neural net accelerator, you can do it on cpu, and they'll have different
trade-offs and costs. and it's not just matrix multiplication. and so what you actually
look at is you look at, i have generally a graph of compute. i wanna do a partitioning. i wanna look at the communication,
the bisection bandwidth, and like the overhead-
- overheads. - and the sending of all
these different things and build a model for this
and then decide, okay, it's an optimization problem of where do i wanna place this compute? - so it's the old school
theoretical computer science problem of scheduling.
- yep. - and then, presumably it's possible to, somehow, magically include auto-tune into this. - absolutely, so i mean, in my
opinion, this is an opinion, not everybody would agree
with this, but in my opinion, the world benefits from
simple and predictable systems at the bottom you can control. but then once you have a
predictable execution layer, you can build lots of different policies on top of it, right? and so one policy can be that
the human programmer says, do that here, do that here,
do that here, do that here, and like, fully manually
controls everything and the systems should just do it, right? but then you quickly
get in the mode of like, i don't wanna have to tell it to do it. (chuckles)
- yeah. - and so the next logical step
that people typically take is they write some terrible heuristic. "oh, if it's a information
location, do it over there. or if it's floating
point, do it on the gpu. if it's integer, do it on the cpu," like, something like that, right? and then you then get
into this mode of like, people care more and more
and more, and you say, okay, well, let's actually, like,
make the heuristic better. let's get into auto-tuning. let's actually do a search
of the space to decide, well, what is actually better, right? well, then you get into this problem where you realize this
is not a small space. this is a many-dimensional
hyperdimensional space that you cannot exhaustively search. so do you know of any
algorithms that are good at searching very
complicated spaces for... - don't tell me you're gonna turn this into a machine learning problem. - so then you turn into a
machine learning problem, and then you have a space
of genetic algorithms and reinforcement learning and, like, all these concerns.
- can you include that into the stack,
into the modular stack? - yeah, yeah. and so- - where does it sit? where does it live? is it separate thing or is
it part of the compilation? - so you start from simple
and predictable models. and so you can have full control and you can have coarse grain knobs that, like, nudge systems so
you don't have to do this. but if you really care
about getting the best, you know, the last ounce out of a problem, then you can use additional tools. the cool thing is you don't wanna do this every time you run a model. you wanna figure out the right
answer and then cache it. (chuckles) and once you do
that, you can say, okay, cool. well, i can get up and
running very quickly. i can get good execution out of my system, i can decide if something's important, and if it's important, i can go throw a bunch of
machines at it and do a big, expensive search over the space using whatever technique i feel like, it's really up to the problem. and then when i get
the right answer, cool, i can just start using it, right? and so you can get out of this, this trade-off between, okay, am i gonna like spend
forever doing a thing or do i get up and running quickly? and as a quality result, like, these are actually not in
contention with each other if the system's designed to scale. - you started and did a little
bit of a whirlwind overview of how you get the 35,000x
speed up or more over python. jeremy howard did a
really great presentation about sort of the basic,
like, looking at the code, here's how you get the speed up. like you said, that's something
probably developers can do for their own code to see how you can get these gigantic speed ups. but can you maybe speak to the machine learning task in general? how do you make some of this
code fast, and specifics. like, what would you say
is the main bottleneck for machine learning tasks? so are we talking about
mathml matrix multiplication? how do you make that fast? - so i mean, if you just look
at the python problem, right? you can say, how do i make python faster? and there's been a lot of people that have been working on the, okay, how do i make python 2x
faster, or 10x faster, or something like that, right? and there've been a ton of
projects in that vein, right? mojo started from the,
what can the hardware do? like, what is the limit of physics? what is the speed of light?
- yeah. what is the-
- yeah, yeah. - like, how fast can this thing go? and then how do i express that, right?
- yeah. - and so it wasn't anchored relatively on make python a little bit faster. it's saying, cool, i know
what the hard work can do. let's unlock that, right? now when you-
(lex chuckling) - yeah, just say how gutsy
that is to be in the meeting and as opposed to trying to see, how do we get the improvement? it's like, what can the physics do? - i mean, maybe i'm a special kinda nerd, but you look at that, what
is the limit of physics? how fast can these things go, right? when you start looking at that, typically it ends up being
a memory problem, right? and so today, particularly with these
specialized accelerators, the problem is that you can
do a lot of math within them, but you get bottleneck sending data back and forth to memory, whether it be local
memory, or distant memory, or disk, or whatever it is. and that bottleneck, particularly as the
training sizes get large as you start doing tons of
inferences all over the place, like, that becomes a huge
bottleneck for people, right? so again, what happened
is we went through a phase of many years where people
took the special case and hand-tuned it and tweaked
it and tricked it out. and they knew exactly
how the hardware worked and they knew the model
and they made it fast, didn't generalize. (chuckles) and so you can make, you know, resnet-50, or alexnet, or
something, inception v1, like, you can do that, right? because the models are small,
they fit in your head, right? but as the models get
bigger, more complicated, as the machines get more complicated, it stops working, right? and so this is where things
like kernel fusion come in. so what is kernel fusion? this is this idea of saying, let's avoid going to memory
and let's do that by building a new hybrid kernel and
a numerical algorithm that actually keeps
things in the accelerator instead of having to write it all the way out to memory, right? what's happened with
these accelerators now is you get multiple levels of memory. like, in a gpu for example, you'll have global
memory and local memory, and, like, all these things. if you zoom way into how hardware works, the register file is
actually a memory. (chuckles) so the registers are like an l0 cache. and so a lot of taking
advantage of the hardware ends up being fully
utilizing the full power in all of its capability. and this has a number of problems, right? one of which is again, the
complexity of disaster, right? there's too much hardware. even if you just say let's look at the chips from one line of vendor, like apple, or intel, or whatever it is, each version of the chip
comes out with new features and they change things so that it takes more time or less to do different things. and you can't rewrite all the software whenever a new chip comes out, right? and so this is where you need
a much more scalable approach. and this is what mojo and what
the modular stack provides is it provides this
infrastructure and the system for factoring all this complexity and then allowing people
to express algorithms, you talk about auto-tuning, for example, express algorithms in a more portable way so that when a new chip comes out, you don't have to rewrite it all. so to me, like, you know, i kinda joke, like, what is a compiler? well, there's many ways to explain that. you convert thing a into thing b and you convert source
code to machine code. like, you can talk about many, many things that compilers do, but to me it's about a bag of tricks. it's about a system and a framework that you can hang complexity. it's a system that can then generalize and it can work on
problems that are bigger than fit in one human's
head, (chuckles) right? and so what that means, what a good stack and what
the modular stack provides is the ability to walk up
to it with a new problem and it'll generally work quite well. and that's something that
a lot of machine learning infrastructure and tools
and technologies don't have. typical state-of-the-art
today is you walk up, particularly if you're deploying, if you walk up with a new model, you try to push it through the converter and the converter crashes, that's crazy. the state of ml tooling
today is not anything that a c programmer
would ever accept, right? and it's always been this
kind of flaky set of tooling that's never been integrated well, and it's never worked together because it's not designed together. it's built by different teams, it's built by different hardware vendors, it's built by different systems, it's built by different
internet companies. they're trying to solve
their problems, right? and so that means that
we get this fragmented, terrible mess of complexity. - so i mean, the specifics of, and jeremy showed this-
- yeah. - there's the vectorized function, which i guess is built into mojo? - [chris] vectorized, as he showed, is built into the library. - into the library, it's
done on the library. - [chris] yep. - vectorize, parallelize. - [chris] yep. - which vectorize is more low-level, parallelize is higher level. there's the tiling thing, which is how he demonstrated
the auto-tune, i think. - so think about this in, like, levels, hierarchical levels of abstraction, right? if you zoom all the way
into a compute problem, you have one floating point number, right? and so then you say, okay, i can do things one at a
time in an interpreter. (chuckles) it's pretty slow, right? so i can get to doing one
at a time in a compiler, like in c. i can get to doing 4, or 8
or 16 at a time with vectors. that's called vectorization. then you can say, hey, i have
a whole bunch of different... you know, what a multi-core computer is, is it's basically a bunch
of computers, right? so they're all independent computers that they can talk to each
other and they share memory. and so now what parallelize
does, it says, okay, run multiple instances
on different computers. and now, they can all work
together on chrome, right? and so what you're doing is you're saying, keep going out to the next level out. and as you do that, how do
i take advantage of this? so tiling is a memory optimization, right? it says, okay, let's make sure
that we're keeping the data close to the compute part of the problem instead of sending it all back and forth through memory every time i load a block. - and the size of the block, size is, that's how you get to the
auto-tune to make sure it's optimized.
- right, yeah. well, so all of these, the details matter so much
to get good performance. this is another funny thing
about machine learning and high-performance computing that is very different than c compilers we all grew up with where, you know, if you get a new version of
gcc, or a new version of clang, or something like that, you know, maybe something will go 1% faster, right? and so compiler engine
will work really, really, really hard to get half a percent out of your c code, something like that. but when you're talking
about an accelerator, or an ai application, or you're talking about
these kinds of algorithms, now these are things people
used to write in fortran, for example, right? if you get it wrong, it's not 5% or 1%, it could be 2x or 10x, (chuckles) right? if you think about it, you really want to make
use of the full memory you have, the cache, for example. but if you use too much space,
it doesn't fit in the cache, now you're gonna be thrashing all the way back out to main memory. and these can be 2x, 10x
major performance differences. and so this is where
getting these magic numbers and these things right is
really actually quite important. - so you mentioned that mojo
is a superset of python. can you run python code
as if it's mojo code? - yes, yes,
(lex chuckling) and this has two sides of it. so mojo's not done yet. so
i'll give you a disclaimer. mojo's not done yet, but already we see people
that take small pieces of python code, move it
over, they don't change it, and you can get 12x speed ups. like, somebody was just
tweeting about that yesterday, which is pretty cool, right? and again, interpreters, compilers, right? and so without changing
any code, without... also, this is not jit compiling
or doing anything fancy. this is just basic stuff,
move it straight over. now mojo will continue to
grow out and as it grows out, it will have more and
more and more features and our north star's to be
a full superset of python. and so you can bring over, basically, arbitrary python code
and have it just work. it may not always be 12x faster, but it should be at least
as fast and way faster in many cases, is the goal, right? now, it'll take time to do that. and python is a complicated language. there's not just the obvious things, but there's also non-obvious
things that are complicated. like, we have to be able to
talk to cpython packages, to talk to the cpi, and there's
a bunch of pieces to this. - so you have to, i mean, just to make explicit the obvious that may not be so obvious
until you think about it. so, you know, to run python code, that means you have to run all the python packages and libraries. - [chris] yeah, yeah. - so that means what? what's the relationship
between mojo and cpython, the interpreter that's-
- yep. - presumably would be tasked with getting those packages to work? - yep, so in the fullness of time, mojo will solve for all the problems and you'll be able to move python packages over and run them in mojo. - [lex] without the cpython. - without cpython, someday, right, not today, but someday.
- yeah. and that'll be a beautiful day because then you'll get a
whole bunch of advantages and you'll get massive
speedups and things like this. - but you can do that
one at a time, right? you can move packages one at a time.
- exactly, but we're not willing to
wait for that. (chuckles) python is too important.
the ecosystem is too broad. we wanna both be able to build mojo out, we also wanna do it the
right way without time, like, without intense time pressure. we're obviously moving fast, but. and so what we do is we say, okay, well, let's make it so you can import an arbitrary existing package, arbitrary, including, like, you write your own on your local disk (chuckles) or whatever. it's not like a standard,
like an arbitrary package, and import that using cpython because cpython already runs
all the packages, right? and so what we do is we
built an integration layer where we can actually use cpython, again, i'm practical, and to actually just load and use all the existing
packages as they are. the downside of that is you don't get the benefits of mojo for
those packages, right? and so they'll run as fast, as they do in the traditional cpython way, but what that does is that gives you an
incremental migration path. and so if you say, hey,
cool, well, here's a, you know, the python ecosystem is vast. i want all of it to just work, but there's certain things
that are really important. and so if i'm doing weather
forecasting or something, (chuckles) well, i wanna be
able to load all the data, i wanna be able to work with it, and then i have my own crazy
algorithm inside of it. well, normally i'd write that in c++. if i can write in mojo and
have one system that scales, well, that's way easier to work with. - is it hard to do that, to have that layer that's running cpython? because is there some
communication back and forth? - yes, it's complicated. i
mean, this is what we do. so, i mean, we make it look
easy, but it is complicated. but what we do is we use the
cpython existing interpreter. so it's running its own bike codes, and that's how it provides
full compatibility. and then it gives us cpython objects, and we use those objects as is. and so that way we're fully compatible with all the cpython objects
and all the, you know, it's not just the python part,
it's also the c packages, the c libraries underneath them, because they're often hybrid. and so we can fully run and we're fully compatible with all that. and the way we do that is that we have to play by their rules, right? and so we keep objects
in that representation when they're coming from that world. - what's the representation
that's being used? - in memory. we'd have to know a lot about how the cpython interpreter works. it has, for example, reference counting, but also different rules on
how to pass pointers around, and things like this,
super low-level fiddly. and it's not like python. it's like how the interpreter works, okay? and so that gets all exposed out, and then you have to define wrappers around the low-level c code, right? and so what this means is
you have to know not only c, which is a different role
from python, obviously, not only python- - [lex] but the wrappers. - but the interpreter and the wrappers and the implementation
details and the conventions. and it's just this reall complicated mess. and when you do that, now suddenly you have a
debugger that debugs python, they can't step into c code, right? so you have this two-world problem, right? and so by pulling this all into mojo, what you get is you get one world. you get the ability to say, cool, i have un-typed, very dynamic,
beautiful, simple code. okay, i care about performance,
for whatever reason, right? there's lots of reasons you might care. and so then you add types,
you can parallelize things. you can vectorize things,
you can use these techniques, which are general techniques
to solve a problem. and then you can do that
by staying in the system. and if you have that one python package that's really important to
you, you can move it to mojo. you get massive performance benefits on that and other advantages. you know, if you like static types, it's nice if they're enforced. some people like that, right,
rather than being hints. so there's other advantages too. and then you can do that
incrementally as you go. - so one different perspective
on this would be why mojo instead of making cpython
faster, redesigning cpython. - yeah, well, i mean, you could argue mojo
is redesigning cpython, but why not make cpython faster and better and other things like that, there's lots of people working on that. so actually there's a team at microsoft that is really improving... i think cpython 3.11 came out in october or something like that,
and it was, you know, 15% faster, 20% faster across the board, which is pretty huge
given how mature python is and things like this. and so that's awesome. i love it. doesn't run on gpu. (chuckles)
it doesn't do ai stuff. like, it doesn't do
vectors, doesn't do things. 20 percent's good. 35,000
times is better, right? so like, they're definitely... i'm a huge fan of that work, by the way, and it composes well
with what we're doing. it's not like we're fighting
or anything like that. it's actually just, it's
goodness for the world, but it's just a different path, right? and again, we're not working forwards from making python a little bit better. we're working backwards from
what is the limit of physics? - what's the process of
importing python code to mojo? is there... what's involved in that process?
- yeah. - is there tooling for that? - not yet. so we're missing some
basic features right now. and so we're continuing
to drop out new features, like, on a weekly basis, but, you know, at the fullness of time, give us a year and a
half, maybe two years. - is it an automatable process? - so when we're ready, it'll
be very automatable, yes. - is it automatable? like, is it possible to automate, in the general case of python-
- yeah. - to mojo conversion, and
you're saying it's possible. - well, so, and this is why, i mean, among other reasons why we use tabs, (chuckles) right?
- yes. - [chris] so first of
all, by being a superset- - yep. - it's like c versus c++. can you move c code to c++? yeah, right?
- yes. - and you can move c code to c++, and then you can adopt classes,
you can add adopt templates, you can adopt other references or whatever c++ features you want. after you move c code to c++, like, you can't use templates in c, right? and so if you leave it at c, fine. you can't use the cool features,
but it still works, right? and c and c++ good work together. and so that's the analogy, right? now here, right, there's not a python is
bad and mojo is good, (chuckles) right? mojo just gives you superpowers, right? and so if you wanna stay
with python, that's cool, but the tooling should be
actually very beautiful and simple because we're doing the hard
work of defining a superset. - right. so you're right. so there's several things to say there, but also the conversion tooling
should probably give you hints as to, like, how
you can improve the code? - yeah, exactly. once you're in the new world, then you can build all kinds
of cool tools to say like, hey, should you adopt this feature? and we haven't built those tools yet, but i fully expect those tools will exist. and then you can like, you know, quote, unquote, "modernize your code," or however you wanna look at it, right? so i mean one of the things that i think is really
interesting about mojo is that there have been a lot of projects to improve python over the years. everything from, you know, getting python run on
the java virtual machine, pypy, which is a jit compiler. there's tons of these projects
out there that have been working on improving
python in various ways. they fall into one or two camps. so pypy is a great example of a camp that is trying to be
compatible with python. even there, not really. doesn't work with all the c
packages and stuff like that, but they're trying to be
compatible with python. there's also another
category of these things where they're saying, well,
python is too complicated and, you know, i'm gonna cheat on
the edges and at, you know, like integers in python can
be an arbitrary size integer. like if you care about it fitting in a, going fast in a register in a computer, that's really annoying, right? and so you can choose
two pass on that, right? you can say, well, people don't really use
big integers that often, therefore i'm gonna just
not do it and it'll be fine, not a python superset.
- yeah. - (chuckles) or you can do the hard thing and say, okay, this is python, and you can't be a superset of python without being a superset of python. and that's a really hard
technical problem, but it's, in my opinion, worth it, right? and it's worth it because it's
not about any one package. it's about this ecosystem. it's about what python
means for the world. and it also means we don't wanna repeat the python 2 to python 3 transition. like we want people to be able
to adopt this stuff quickly. and so by doing that work,
we can help lift people. - yeah, the challenge, it's
really interesting, technical, philosophical challenge of
really making a language a superset of another language. it's breaking my brain a little bit. - well, it paints you into corners. so again, i'm very happy
with python, right? so all joking aside, i think that the indentation thing is not the actual important
part of the problem. - [lex] yes.
(chris chuckling) - right? but the fact that python has amazing dynamic metaprogramming
features and they translate to beautiful static
metaprogramming features, i think is profound i
think that's huge, right? and so python, i've talked with
guido about this, it's like, it was not designed to
do what we're doing. that was not the reason
they built it this way, but because they really cared
and they were very thoughtful about how they designed the language, it scales very elegantly in this space. but if you look at other languages, for example, c and c++, right, if you're building a superset, you get stuck with the design decisions of the subset, right? and so, you know, c++
is way more complicated because of c in the legacy
than it would've been if they would've theoretically designed a from scratch thing. and there's lots of people right now that are trying to make c++
better and recent syntax c++, it's gonna be great, we'll
just change all the syntax. but if you do that, now
suddenly you have zero packages, you don't have compatibility. - if you could just linger on that, what are the biggest challenges of keeping that superset status? what are the things
you're struggling with? does it all boiled down
to having a big integer? - no, i mean, it's- - what are the other things like? - usually it's the long tail weird things. so let me give you a war story. - [lex] okay. - so war story in the
space is you go away... back in time, project i
worked on is called clang. clang, what it is a c++ parser, right? and when i started working on clang, it must have been like
2006 or something, less, or 2007 something, 2006 when i first started
working on it, right? it's funny how time flies. - [lex] yeah, yeah. - i started that project
and i'm like, okay, well, i wanna build a c
parser, c++ parser for lvm? it's gonna be the... gcc is yucky. you know,
this is me in earlier times. it's yucky, it's unprincipled, it has all these weird features, like all these bugs, like it's yucky. so i'm gonna build a standard
compliant c and c++ parser. it's gonna be beautiful, it'll
be amazing, well-engineered, all the cool things an
engineer wants to do. and so i started implementing
and building it out and building it out and building it out. and then i got to include standard io.h, and all of the headers in the
world use all the gcc stuff, (chuckles) okay?
- yeah. - and so, again, come back away from theory
back to reality, right? i was at a fork on the road. i could have built an amazingly
beautiful academic thing that nobody would ever use or i could say, well, it's
yucky in various ways. all these design mistakes,
accents of history, the legacy. at that point, gcc was
like over 20 years old, which, by the way-
- yeah. - now, llvm's over 20
years old, (laughs) right? and so it's funny how-
- yep. - time catches up to you, right? and so you say, okay, well,
what is easier, right? i mean, as an engineer, it's actually much easier
for me to go implement long tail compatibility weird features, even if they're distasteful
and just do the hard work and like figure it out,
reverse engineer it, understand what it is,
write a bunch of test cases, like, try to understand the behavior. it's way easier to do all
that work as an engineer than it is to go talk to all c programmers and argue with them and try to get them to rewrite their code, right?
- yeah. - and- - [lex] 'cause that
breaks a lot more things. - yeah. the reality is like nobody
actually even understands how the code works 'cause it was written by the person who quit 10
years ago, (chuckles) right? and so this software is kind
of frustrating that way, but it's, that's how the world works, right?
- yeah. unfortunately, it can never be this perfect, beautiful thing. - well, there are occasions in which you get to build, like, you know, you invent a new data structure
or something like that, or there's this beautiful
algorithm that's just like, makes you super happy,
and i love that moment. but when you're working with people-
- yeah. - and you're working with
code and dusty deck code bases and things like this, right, it's not about what's
theoretically beautiful, it's about what's practical, what's real, what people will actually use. and i don't meet a lot of people that say, i wanna rewrite all my code
just for the sake of it. - by the way, there could
be interesting possibilities and we'll probably talk about it where ai can help rewrite some code. that might be farther out feature, but it's a really interesting one, how that could create more-
- yeah, yeah. - be a tool in the battle against
this monster of complexity that you mentioned.
- yeah. - you mentioned guido, the benevolent dictator
for life of python. what does he think about mojo? have you talked to him much about it? - i have talked with him about it. he found it very interesting. we actually talked with
before it launched, and so he was aware of
it before it went public. i have a ton of respect for guido for a bunch of different reasons. you talk about walrus operator and, like, guido's pretty amazing
in terms of steering such a huge and diverse community and, like, driving it forward. and i think python is what
it is thanks to him, right? and so to me it was really important starting to work on
mojo to get his feedback and get his input and get
his eyes on this, right? now a lot of what guido was and is i think concerned about is, how do we not fragment the community? - [lex] yeah. - we don't want a python
2 to python 3 thing. like, that was really painful
for everybody involved. and so we spent quite a bit
of time talking about that. and some of the tricks i
learned from swift, for example, so in the migration from swift, we managed to, like, not
just convert objective-c into a slightly prettier
objective-c, which we did, we then converted, not entirely, but almost an entire community to a completely different language, right? and so there's a bunch
of tricks that you learn along the way that are directly
relevant to what we do. and so this is where, for example, you leverage cpython while
bringing up the new thing. like, that approach is, i think, proven and comes from experience. and so guido's very interested
in like, okay, cool. like, i think that python is really his legacy, it's his baby. i have tons of respect for that. incidentally, i see mojo as a
member of the python family. i'm not trying to take python from guido and from the python community. and so to me it's really important that we're a good member
of that community. i think that, again, you
would have to ask guido this, but i think that he was very
interested in this notion of like, cool python gets
beaten up for being slow. maybe there's a path out of that, right? and that, you know, if the
future is python, right, i mean, look at the far
outside case on this, right? and i'm not saying this
is guido's perspective, but, you know, there's this
path of saying like, okay, well, suddenly python can
suddenly go all the places it's never been able to go before, right? and that means that
python can go even further and can have even more
impact on the world. - so in some sense, mojo
could be seen as python 4.0. - i would not say that. i think that would drive a
lot of people really crazy. - because of the ptsd of the 3.0, 2.0. - i'm willing to annoy
people about emacs versus vim or-
- not that one. - [chris] versus spaces. - not that one. - i don't know. that might be
a little bit far even for me. like, my skin may not be that thick. - but the point is the
step to being a superset and allowing all of these capabilities, i think is the evolution of a language. it feels like an evolution of a language. so he's interested by the
ideas that you're playing with, but also concerned
about the fragmentation. so what are the ideas you've learned? what are you thinking about? how do we avoid fragmenting the community where the pythonistas and the, i don't know what to call the mojo people. - [chris] mojicians. - the mojicians, i like it. - [chris] there you go. - can coexist happily and share code and basically just have
these big code bases that are using cpython and more and more moving towards mojo.
- yeah. yeah. well, so again, these are
lessons i learned from swift. and here, we face very
similar problems, right? in swift, you have
objective-c, super dynamic. they're very different
syntax, (chuckles) right? but you're talking to people who have large scale code bases. i mean, apple's got the biggest, largest scale code base of
objective-c code, right? and so, you know, none of the companies, none of the other ios developers, none of the other developers want to rewrite everything all at once. and so you wanna be able to
adopt things piece at a time. and so a thing that i
found that worked very well in the swift community
was saying, okay, cool, and this is when swift was
very young, and you say, okay, you have a million line
of code objective-c app. don't rewrite it all, but when
you implement a new feature, go implement that new
class using swift, right? and so now this turns out is a very wonderful thing
for an app developer, but it's a huge challenge
for the compiler team and the systems people that
are implementing this, right? and this comes back to what is
this trade-off between doing the hard thing that enables scale versus doing the theoretically
pure and ideal thing, right? and so swift had adopted and built a lot of different machinery
to deeply integrate with the objective-c runtime. and we're doing the same
thing with python right now. what happened in the case of
swift is that swift's language got more and more and more
mature over time, right? and incidentally, mojo is a much simpler language
than swift in many ways. and so i think that mojo
will develop way faster than swift for a variety of reasons. but as the language gets more
mature and parallel with that, you have new people starting
new projects, right? and so if when the language is mature and somebody's starting a new project, that's when they say, okay, cool, i'm not dealing with a
million lines of code. i'll just start and use the
new thing for my whole stack. now the problem is, again, you come back to we're communities and we're people that work together. you build new subsystem or a new feature or a new thing in swift, or
you build a new thing in mojo, then you want it to be end up being used on the other side, (chuckles) right? and so then you need
to work on integration back the other way. and so it's not just
mojo talking to python, it's also python talking to mojo, right? and so what i would love to see, i don't wanna see this next month, right, but what i wanna see over the
course of time is i would love to see people that are
building these packages, like, you know, numpy or, you know,
tensorflow or what, you know, these packages that are
half python, half c++. and if you say, okay, cool, i want to get out of this python c++ world into a unified world and
so i can move to mojo, but i can't give up all my python clients 'cause they're like, these levers get used by everybody and they're not all gonna
switch every, all, you know, all at once and maybe never, right? well, so the way we should do that is we should vend python
interfaces to the mojo types. and that's what we did in
swift and worked great. i mean, it was a huge
implementation challenge for the compiler people, right? but there's only a dozen
of those compiler people and there are millions of users. and so it's a very
expensive, capital-intensive, like, skillset intensive problem. but once you solve that problem, it really helps adoption and
it really helps the community progressively adopt technologies. and so i think that this
approach will work quite well with the python and the mojo world. - so for a package, port it to mojo, and then create a python interface. - [chris] yep. - so when you're on these packages, numpy, pytorch, tensorflow. - yeah. - how do they play nicely together? so is mojo supposed to be... let's talk about the
machine learning ones. is mojo kind of visioned
to replace pytorch, tensorflow to incorporate it? what's the relationship in this? - all right, so take a step back. so i wear many hats. (chuckles) so you're angling it on the mojo side. mojo's a programming language.
- yes. - and so it can help solve the c, c++ python feud that's happening. - the fire emoji got me. i'm sorry. we should be talking modular. yes, yes. - yes, okay. so the fire emoji is amazing. i love it. it's a big deal. the other side of this
is the fire emoji is in service of solving
some big ai problems, right?
- yes. - and so the big ai problems are, again, this fragmentation,
this hardware nightmare, this explosion of new potential, but it's not getting felt
by the industry, right? and so when you look at, how does the modular engine
help tens and pytorch, right, it's not replacing them, right? in fact, when i talk to people, again, they don't like to rewrite all their code. you have people that are
using a bunch of pytorch, a bunch of tensorflow. they have models that
they've been building over the course of many years, right? and when i talk to them,
there's a few exceptions, but generally they don't wanna rewrite all their code, right? and so what we're doing is
we're saying, "okay, well, you don't have to rewrite all your code." what happens is the modular
engine goes in there and goes underneath
tensorflow and pytorch. it's fully compatible and it just provides better performance, better
predictability, better tooling. it's a better experience
that helps lift tensorflow and pytorch and make them even better. i love python, i love tensorflow,
i love pytorch, right? this is about making the world better because we need ai to go further. - but if i have a process
that trains a model and i have a process that
performs inference on that model and i have the model itself, what should i do with that
in the long arc of history in terms of if i use pytorch to train it. should i rewrite stuff in mojo
if i care about performance? - oh, so i mean, again, it depends. so if you care about performance, then writing it in mojo is gonna be way better than writing in python. but if you look at llm
companies, for example, so you look at open ai, rumored, and you look at many of the other folks that are working on many of these llms and other like innovative
machine learning models, on the one hand they're
innovating in the data collection and the model, billions of parameters, and the model architecture
and the rlhf and the, like all the cool things that
people are talking about. but on the other hand, they're spending a lot of time
writing cuda curls, right? and so you say, wait a second, how much faster could all this
progress go if they were not having to hand write all
these cuda curls, right? and so there are a few
technologies that are out there, and people have been working
on this problem for a while and they're trying to solve
subsets of the problem, again, kinda fragmenting the space. and so what mojo provides for
these kinds of companies is the ability to say, cool, i can have a unifying theory, right? and again, the better
together, the unifying theory, the two-world problem, or
the three-world problem, or the n-world problem, like, this is the thing
that is slowing people down. and so as we help solve this problem, i think it'll be very helpful for making this whole cycle go faster. - so obviously we've
talked about the transition from objective-c to swift. you've designed this programming language, and you've also talked quite
a bit about the use of swift for machine learning context. why have you decided to move away from maybe an intense focus on swift for the machine learning
context versus sort of designing a new programming language
that happens to be a superset? - you're saying this is an irrational set of life choices i make or what? (chuckles)
(lex laughing) - did you go to the desert
and did you meditate on it? okay, all right. no, it was bold. it was bold and needed
and i think, i mean, it's just bold and sometimes
to take those leaps, it's a difficult leap to take. - yeah. well, so, okay. i mean, i think there's a
couple of different things. so actually i left to apple back in 2017, like january, 2017. so it's been a number of
years that i left apple. and the reason i left
apple was to do ai, okay? so, and again, i won't
comment on apple and ai, but at the time, right, i wanted to get into and
understand the technology, understand the
applications, the workloads. and so i was like, okay, i'm gonna go dive deep
into applied and ai, and then the technology
underneath it, right? i found myself at google. - and that was like when tpus were waking up.
- yep, exactly. - and so i found myself
at google and jeff dean, who's a rockstar as you know, right? and in 2017, tensorflow's, like, really taking off and
doing incredible things. and i was attracted to google to help them with the tpus, right? and tpus are an innovative
hardware accelerator platform, have now i mean i think
proven massive scale and like done incredible things, right? and so one of the things
that this led into is a bunch of different projects,
which i'll skip over, right? one of which was this swift
for tensorflow project, right? and so that project
was a research project. and so the idea of that is say, okay, well, let's look at innovative
new programming models where we can get a fast
programming language, we can get automatic
differentiation into the language. let's push the boundaries of these things in a
research setting, right? now, that project i think
lasted two, three years. there's some really cool outcomes of that. so one of the things that's
really interesting is i published a talk at an
llvm conference in 2018, again, this seems like so long ago, about graph program abstraction, which is basically the
thing that's in pytorch 2. and so pytorch 2 with
all this dynamorio thing, it's all about this graph
program abstraction thing from python bike codes. and so a lot of the research
that was done ended up pursuing and going out through the
industry and influencing things. and i think it's super exciting
and awesome to see that, but the swift for
tensorflow project itself did not work out super well. and so there's a couple of
different problems with that. one of which is that,
you may have noticed, swift is not python. (chuckles) there's a few
people that write python code. - [lex] yes. - and so it turns out that all of ml is pretty happy with python. - it's actually a problem that other programming
languages have as well, that they're not python. we'll probably maybe
briefly talk about julia, was a very interesting,
beautiful programming language, but it's not python. - exactly. and so like if you're saying, i'm gonna solve a machine learning problem where all the programmers
are python programmers. - [lex] yeah. - and you say the first
thing you have to do is switch to a different language, well, your new thing may
be good or bad or whatever, but if it's a new thing, the adoption barrier is massive less. - it's still possible. - still possible, yeah, absolutely. the world changes and evolves and there's definitely room
for new and good ideas, but it just makes it
so much harder, right? and so lesson learned,
swift is not python, and people are not always
in search of, like, learning a new thing for the
sake of learning a new thing. and if you wanna be compatible
with all the world's code, turns out meet the world
where it is, right? second thing is that, you know, a lesson learned is that swift is a very fast and efficient
language, kind of like mojo, but a different take on it still, really worked well with eager mode. and so eager mode is
something that pytorch does, and it proved out really well, and it enables really
expressive and dynamic and easy to debug programming. tensorflow at the time was not
set up for that, let's say. that was not... - [lex] the timing is also
important in this world. - yeah, yeah. and tensorflow is a good thing and it has many, many strengths, but you could say swift for
tensorflow is a good idea, except for the swift and
except for the tensorflow part. (chuckles) - swift because it's not python
and tensorflow because it- - [chris] it wasn't set up for
eager mode at the time, yeah. - it was 1.0. - exactly. and so one of the things about that is that in the context of it
being a research project, i'm very happy with the fact that we built a lot of
really cool technology. we learned a lot of things. i think the ideas went
on to have influence in other systems, like pytorch. a few people use that i hear, right? and so i think that's super cool. and for me personally, i
learned so much from it, right? and i think a lot of the
engineers that worked on it also learned a tremendous amount. and so, you know, i think that that's just
really exciting to see. and, you know, i'm sorry that
the project didn't work out. i wish it did, of course, right, but, you know, it's a research project. and so you're there to learn from it. - well, it's interesting to think about the evolution of programming as we come up with these
whole new set of algorithms in machine learning, in
artificial intelligence. and what's going to win out is it could be a new programming language. it could be-
- yeah. - i mean, i just mentioned julia. i think there's a lot of ideas behind julia that mojo shares. what are your thoughts
about julia in general? - so i will have to say
that when we launched mojo, one of the biggest things i didn't predict was the response from the julia community. and so i was not, i mean, i've, okay, lemme take a step back. i've known the julia folks
for a really long time. they're an adopter of
llvm a long time ago. they've been pushing state-of-the-art in a bunch of different ways. julia's a really cool system. i had always thought of julia as being mostly a scientific computing
focused environment, right? and i thought that was its focus. i neglected to understand
that one of their missions is to, like, help make python
work end-to-end. (chuckles) and so i think that was my error
for not understanding that. and so i could have been
maybe more sensitive to that, but there's major differences between what mojo's doing
and what julia's doing. so as you say, julia is not python, right? and so one of the things that a lot of the julia people came
out and said is like, "okay, well, if we put a ton of more energy into, ton more money or in engineering
or whatever into julia, maybe that would be better
than starting mojo, right?" well, i mean, maybe that's true, but it still wouldn't make
julia into python. (chuckles) so if you worked backwards
from the goal of, let's build something
for python programmers without requiring them to relearn syntax, then julia just isn't there, right? i mean, that's a different thing, right? and so if you anchor on, i love julia, and i want julia to go further, then you can look at it
from a different lens, but the lens we were coming at was, hey, everybody is using python.
the syntax isn't broken. let's take what's great about python and make it even better. and so it was just a
different starting point. so i think julie's a great language. the community's a lovely community. they're doing really cool stuff,
but it's just a different, it's slightly different angle. - but it does seem that
python is quite sticky. is there some philosophical, almost thing you could
say about why python, by many measures, seems to be the most popular programming language in the world? - well, i can tell you
things i love about it. maybe that's one way to
answer the question, right? so huge package ecosystem, super lightweight and easy to integrate. it has very low startup time, right? - [lex] so what's startup time? you mean like learning curve or what? - yeah, so if you look at
certain other languages, you say like, go, and it just takes a, like java, for example, it takes a long time to
jit compile all the things and then the vm starts up and the garbage (indistinct) kicks in and then it revs its engines and then it can plow through
a lot of internet stuff or whatever, right? python is like scripting. like it just goes, right?
- yeah. - python has a very low compile time. like, so you're not sitting there waiting. python integrates in a
notebooks in a very elegant way that makes exploration super interactive and it's awesome, right? python is also, it's like almost the glue of computing. because it has such a simple
object representation, a lot of things plug into it. that dynamic metaprogramming
thing we were talking about, also enables really expressive
and beautiful apis, right? so there's lots of reasons
that you can look at, technical things the python
has done and say, like, okay, wow, this is actually
a pretty amazing thing. and any one of those you can neglect, people will all just
talk about indentation (chuckles) and ignore like
the fundamental things. but then you also look at
the community side, right? so python owns machine learning. machine learning's pretty big. - yeah, and it's growing. - and it's growing, right? and it's growing in importance, right? and so-
- and there's a reputation of prestige to machine learning to where like if you're a new programmer, you're thinking about, like, which program and language do i use? well, i should probably
care about machine learning, therefore let me try python, and kinda builds and builds and builds. - and even go back before that. like, my kids learned python, right, not because i'm telling
'em to learn python, but because-
- were they rebelling against you or what? - oh, no, no. well, they they also learn scratch, right, and things like this too, but it's because python is
taught everywhere, right? because it's easy to learn, right? and because it's pervasive, right? and there's-
- back in my day, we learned java and c++. - [chris] yeah, well. - well, uphill both directions, but yes. i guess python-
- yeah. - is the main language of teaching software
engineering schools now. - yeah, well, and if you look at this, there's these growth cycles, right? if you look at what causes
things to become popular and then gain in popularity, there's reinforcing feedback
loops and things like this. and i think python has done, again, the whole community has done
a really good job of building those growth loops and
help propel the ecosystem. and i think that, again, you look at what you can get done with just a few lines
of code, it's amazing. - so this kinda self-building
loop is interesting to understand because
when you look at mojo, what it stands for some of the features, it seems sort of clear that
this is a good direction for programming languages to evolve in the machine
learning community, but it's still not obvious
that it will because of this, whatever the engine of
popularity of virality. is there something you
could speak to, like, how do you get people to switch? - yeah, well, i mean, i think that the viral growth loop is to switch people to unicode. - [lex] yes. - i think the unicode file extensions are what i'm betting on. i think that's gonna be the thing. - yeah.
(chris chuckling) - tell the kids that you
could use the fire emoji and they'd be like, what?
- exactly, exactly. (lex chuckling) well, in all seriousness, like, i mean, i think there's really, i'll
give you two opposite answers. one is, i hope if it's
useful, if it solves problems, and if people care about
those problems being solved, they'll adopt the tech, right? that's kinda the simple answer. and when you're looking
to get tech adopted, the question is, is it solving an important
problem people need solved, and is the adoption cost low
enough that they're willing to make the switch and cut
over and do the pain upfront so that they can actually do it, right? and so hopefully mojo will be
that for a bunch of people. and, you know, people building these hybrid
packages are suffering. it is really painful. and so i think that we have a
good shot of helping people, but the other side is like, it's okay if people don't use mojo. like, it's not my job to say
like, everybody should do this. like, i'm not saying python is bad. like, i hope python, cpython, like, all these implementations 'cause python ecosystems,
not just cpython, it's also a bunch of
different implementations with different trade-offs. and this ecosystem is
really powerful and exciting as are other programming languages. it's not like type script or something is gonna go away, right? and so there's not a
winner-take-all thing. and so i hope that mojo's
exciting and useful to people, but if it's not, that's also fine. - but i also wonder what the use case for why you should try mojo would be. so practically speaking- - [chris] yeah. - it seems like, so there's entertainment. there's the dopamine hit of saying, holy, this is 10 times faster. this little piece of code
is 10 times faster in mojo. - [chris] outta the box
before you get to 35,000. - exactly, i mean, just even that, i mean, that's the dopamine hit
that every programmer sorta dreams of is the optimization. it's also the drug that can pull you in and have you waste way
too much of your life optimizing and over optimizing, right? but so what do you see
would be, like, common? it's very hard to predict,
of course, but, you know, if you look 10 years from now
and mojo's super successful. - [chris] yeah. - what do you think would be the thing where people like try
and then use it regularly and it kinda grows and
grows and grows and grows? - well, so you talked about dopamine hit. and so one, again,
humans are not one thing. and some people love rewriting their code and learning new things
and throwing themselves in the deep end and
trying out a new thing. in my experience, most
people, they're too busy. they have other things going on. by number, most people
don't want like this. i wanna rewrite all my code. but (chuckles) even those
people, the two busy people, the people that don't actually
care about the language, that just care about getting stuff done, those people do like
learning new things, right? - [lex] yeah. - and so you talk about the
dopamine rush of 10x faster, wow, that's cool. i wanna do that again. well, it's also like, here's the thing i've heard
about in a different domain, and i don't have to rewrite on my code. i can learn a new trick, right? well, that's called growth,
(chuckles) you know? and so, one thing that i
think is cool about mojo, and again, those will
take a little bit of time, for example, the blog posts
and the books and, like, all that kinda stuff to develop and the language needs
to get further along. but what we're doing,
you talk about types, like you can say, look, you can start with the
world you already know and you can progressively learn new things and adopt them where it makes sense. and if you never do that, that's cool. you're not a bad person. (chuckles) if you get really excited about
it and wanna go all the way in the deep end and rewrite
everything and, like, whatever, that's cool, right? but i think the middle path is
actually the more likely one where it's, you know, you come out with a a new
idea and you discover, wow, that makes my code way simpler, way more beautiful way,
faster way, whatever. and i think that's what people like. now if you fast forward and you said, like, 10 years out, right, i can give you a very different
answer on that, which is, i mean, if you go back and look at what computers looked
like 20 years ago, every' months, they got
faster for free, right, 2x faster every' months. it was like clockwork. it was free, right? you go back 10 years ago
and we entered in this world where suddenly we had
multi-core cpus and we had, and if you squint and turn your head, what a gpus is just a many-core, very simple cpu thing kind of, right? and 10 years ago it was
cpus and gpus and graphics. today, we have cpu, gpus, graphics. and ai, because it's so important, because the compute is so demanding because of the smart
cameras and the watches and all the different places that ai needs to work in our lives, it's caused this explosion of hardware. and so part of my thesis, part of my belief of where computing goes, if you look out 10 years from now, is it's not gonna get simpler. physics isn't going back
to where we came from. it's only gonna get weirder
from here on out, right? and so to me, the exciting part about
what we're building is it's about building
that universal platform, which the world can continue to get weird. 'cause again, i don't think
it's avoidable, it's physics, but we can help lift people,
scale, do things with it, and they don't have to rewrite their code every time a new device comes out. and i think that's pretty cool. and so if mojo can help with that problem, then i think that it will be
hopefully quite interesting and quite useful to a wide range of people because there's so much potential. and like there's so much, you know, maybe analog computers will become a thing or something, right? and we need to be able to get into a mode where we can move this
programming model forward, but do so in a way where
we're lifting people and growing them instead of forcing them to rewrite all their
code and exploding them. - do you think there'll be a few major libraries that go mojo first? - well, so i mean, the modular
engines on mojo. (chuckles) so again, come back to, like, we're not building mojo because it's fun. we're building mojo because we had to solve these accelerators. - that's the origin story, but i mean, ones that are currently in python. - yeah, so i think that a
number of these projects will. and so one of the things, and again, this is just my best guess. like, each of the package
maintainers also has... i'm sure plenty of other things going on. people really don't like rewriting code just for the sake of rewriting code. but sometimes like people are
excited about like adopting a new idea.
- yeah. - and turns out that while rewriting code is generally not people's first thing, turns out that redesigning
something while you rewrite it and using a rewrite as
an excuse to redesign can lead to the 2.0 of your thing that's way better than the 1.0, right? and so i have no idea,
i can't predict that, but there's a lot of
these places where, again, if you have a package that is
half c and half python, right, you just solve the pain, make it easier to move things faster, make it easier to bug and
evolve your tech adopting mojo kinda makes sense to start with. and then it gives you this opportunity to rethink these things. - so the two big gains are
that there's a performance gain and then there's the portability to all kinds of different devices. - and there's safety, right?
so you talk about real types. i mean, not saying this is for everybody, but that's actually a
pretty big thing, right? - [lex] yeah, types are. - and so there's a bunch of
different aspects of what, you know, what value mojo provides. and so, i mean, it's funny for me, like, i've been working on these
kinds of technologies and tools for too many years now, but you look at swift, right, and we talked about swift for tensorflow, but swift as a programming
language, right? swift's now 13 years old from when i started it? - [lex] yeah. - 'cause i started in 2010, if i remember. and so that project, and i was involved with it for
12 years or something, right, that project has gone through its own really interesting story arc, right? and it's a mature, successful, used by millions of people system, right? certainly not dead yet, right? but also going through that story arc, i learned a tremendous amount
about building languages, about building compilers, about working with the
community and things like this. and so that experience, like i'm helping channel
and bring directly into mojo and, you know, other systems, same thing. like, apparently i like building, and iterating and evolving things. and so you look at this llvm thing that i worked on 20 years ago,
and you look at mlir, right? and so a lot of the lessons learned in llvm got fed into mlir, and i think that mlir is a way
better system than llvm was. and, you know, swift is a really good
system and it's amazing, but i hope that mojo will take the next step forward in terms of design. - in terms of running mojo
and people can play with it, what's mojo playground?
- yeah. - and from the interface perspective and from the hardware perspective, what's this incredible thing running on? - yeah, so right now, so here we are, two weeks after launch. - yes. - we decided that, okay, we have this incredible set of technology that we think might be good, but we have not given it
to lots of people yet. and so we were very conservative and said, "let's put it in a workbook
so that if it crashes, we can do something about it. we can monitor and track that, right?" and so, again, things
are still super early, but we're having like one
person a minute sign up with over 70,000 people (chuckles) two weeks in is kinda crazy. - and you can sign up to mojo playground and you can use it in the cloud. - [chris] yeah. - in your browser. - [chris] and so what
that's running on, right? - notebook. - yeah, what that's running on is that's running on cloud vms. and so you share a machine
with a bunch of other people, but turns out there's a bunch of them now because there's a lot of people. and so what you're doing is
you're getting free compute and you're getting to play with this thing in kind of a limited controlled way so that we can make sure that it doesn't totally crash and be embarrassing, right?
- yeah. - so now a lot of the
feedback we've gotten is people wanna download it around locally. so we're working on that right now. and so-
- so that's the goal, to be able to download locally to it. - yeah, that's what everybody expects. and so we're working on that right now. and so we just wanna make
sure that we do it right. i think this is one of the lessons i learned from swift also, by the way, is when we launched swift, gosh, it feels like
forever ago, it was 2014, and we, i mean, it was super exciting. i, and we, the team had worked on swift for a number of years in secrecy, okay? and (chuckles) four years
into this development, roughly, of working on this thing, at that point, about 250
people at apple knew about it. - [lex] yeah. - okay? so it was secret. apple's good at secrecy and
it was a secret project. and so we launched this at wwc, a bunch of hoopla and excitement and said developers are
gonna be able to develop and submit apps in the app
store in three months, okay? well, several interesting
things happened, right? so first of all, we learned
that it had a lot of bugs. it was not actually production quality, and it was extremely stressful
in terms of like trying to get it working for a bunch of people. and so what happened was we
went from zero to, you know, i don't know how many developers
apple had at the time, but a lot of developers overnight. and they ran to a lot of bugs
and it was really embarrassing and it was very stressful for
everybody involved, right? it was also very exciting 'cause everybody was excited about that. the other thing i learned
is that when that happened, roughly every software engineer who did not know about
the project at apple, their head exploded when it was launched 'cause they didn't know it was coming. and so they're like, "wait, what is this? i signed up to work for apple
because i love objective-c. why is there a new thing?," right?
- yeah. - and so now what that
meant practically is that the push from launch
to first of all the fall, but then to 2.0 and 3.0 and
like all the way forward was super painful for the
engineering team and myself. it was very stressful. the developer community
was very grumpy about it because they're like,
"okay, well, wait a second. you're changing and breaking my code, and like, we have to fix the bugs." and it was just like a lot of tension and friction on all sides. there's a lot of technical
debt in the compiler because we have to run really fast and you have to go implement the thing and unblock the use case and do the thing. and you know it's not right, but you never have time to
go back and do it right. and i'm very proud of the swift team because they've come, i mean, we, but they came so far and
made so much progress over this time since launch,
it's pretty incredible. and swift is a very, very good thing, but i just don't wanna
do that again, right? and so-
- so iterate more through the development process. - and so what we're doing
is we're not launching it when it's hopefully 0.9 with no testers. we're launching it and
saying it's 0.1, right? and so we're setting expectations
of saying like, okay, well, don't use this
for production, right? if you're interested in what we're doing, we'll do it in an open way
and we can do it together, but don't use it in production yet. like, we'll get there, but
let's do it the right way. and i'm also saying we're not in a race. the thing that i wanna do is
build the world's best thing. - [lex] yeah. - right, because if you do it right and it lifts the industry, it doesn't matter if it takes an extra two months.
- yeah. - like two months is worth waiting. and so doing it right and not being overwhelmed
with technical debt and things like this is like, again, war wounds, lessons learned, whatever you wanna say, i think is absolutely
the right thing to do. even though right now people are very frustrated that, you know, you can't download it
or that it doesn't have feature x or something like this. and so-
- what have you learned in a little bit of time since it's been released into the wild that people have been complaining
about feature x or y or z? what have they been complaining about? whether they have been excited about like, almost like detailed
things versus a big thing. i think everyone's would be very excited about the big vision. - yeah, yeah. well, so i
mean, i've been very pleased. i mean, in fact, i mean, we've been massively
overwhelmed with response, which is a good problem to have. it's kinda like a success disaster, in a sense, right?
- yeah. - and so, i mean, if you go back in time
when we started modular, which is just not yet
a year and a half ago, so it's still a pretty
new company, new team, small but very good team of people, like we started with extreme conviction that there's a set of problems
that we need to solve. and if we solve it, then people will be interested
in what we're doing, right? but again, you're building
in basically secret, right? you're trying to figure it out. the creation's a messy process. you're having to go
through different paths and understand what you wanna
do and how to explain it. often when you're doing disruptive
and new kinds of things, just knowing how to explain
it is super difficult, right? and so when we launched, we
hope people would be excited, but, you know, i'm an
optimist, but i'm also like, don't wanna get ahead of myself. and so when people found out about mojo, i think their heads exploded
a little bit, right? and, you know, here's a, i think a pretty credible
team that has built some languages and some tools before. and so they have some lessons learned and are tackling some of the deep problems in the python ecosystem and giving it the love and attention
that it should be getting. and i think people got
very excited about that. and so if you look at that, i mean, i think people are excited about ownership and taking a step beyond rust, right? and there's people that
are very excited about that and there's people that are
excited about, you know, just like i made game of life
go 400 times faster, right, and things like that,
and that's really cool. there are people that are
really excited about the, okay, i really hate writing
stuff in c++, save me. - like systems in your, they're like stepping up, like, oh yes. - and so that's me by the way, also. - [lex] yeah. - i really wanna stop
writing c++, but the- - i get third person
excitement when people tweet, here, i made this code, game
of life or whatever, faster. and you're like, yeah. - yeah, and also like, well, i would also say that, let me cast blame out to
people who deserve it. - [lex] sure. - these terrible people who
convinced me to do some of this. jeremy howard, that guy.
- yes, yes. well, he's been pushing
for this kinda thing. he's been pushing-
- he's wanted this for years. - yeah, he's wanted this
for a long, long time. - [chris] he's wanted
this for years. and so- - for people who don't know jeremy howard, he is like one of the most legit people in the machine learning community. he's a grassroots, he really teaches, he's an incredible educator,
he is an incredible teacher, but also legit in terms of
a machine learning engineer himself.
- yes. - and he's been running
the fast.ai and looking, i think for exactly what you've done with mojo.
- exactly. and so, i mean, the first time, so i met jeremy pretty early on, but the first time i sat up and i'm like, this guy is ridiculous, is when i was at google and
we were bringing up tpus and we had a whole team of people and there was this
competition called don bench of who can train imagenet fastest, right?
- yeah. yes. - and jeremy and one of his
researchers crushed google (chuckles) by not through sheer force of the amazing amount of compute and the number of tpus
and stuff like that, that he just decided that
progressive imagery sizing was the right way to train the model in. you were epoch faster and make the whole thing go vroom, right?
- yep. - and i'm like, "this guy is incredible." so you can say,
- right. anyways, come back to, you know, where's mojo coming from? chris finally listened to jeremy. (lex laughing) it's all his fault. - well, there's a kinda very refreshing, pragmatic view that he has about machine learning
that i don't know if it, it's like this mix of a
desire for efficiency, but ultimately grounded and
desired to make machine learning more accessible to a lot of people. i don't know what that is.
- yeah. - i guess that's coupled with
efficiency and performance, but it's not just obsessed
about performance. - well, so a lot of ai and ai research ends up being that it has to go fast
enough to get scale. so a lot of people don't
actually care about performance, particularly on the research side until it allows 'em to have
more a bigger dataset, right? and so suddenly now you care
about distributed compute and like, all these exotic hpc, like, you don't actually
wanna know about that. you just want to be able to
do more experiments faster and do so with bigger datasets, right? and so jeremy has been
really pushing the limits. and one of the things
i'll say about jeremy, and there's many things
i could say about jeremy, 'cause i'm a fanboy of his,
but it fits in his head, and jeremy actually takes the
time where many people don't to really dive deep into
why is the beta parameter of the atom optimizer equal to this, right?
- yeah. - and he'll go survey and understand what are all the activation
functions in the trade-offs, and why is it that everybody
that does, you know, this model, pick that thing. - so the why, not just
trying different values, like, really what is going on here? - right, and so as a consequence
of that, like he's always, he, again, he makes time, but he spends time to understand things at a depth that a lot of people don't. and as you say, he then brings it and teaches people- - [lex] teaches it. - and his mission is
to help lift, you know, his website says "making ai uncool again," like it's about, like,
forget about the hype. it's actually practical and useful. let's teach people how to do this, right? now the problem jeremy struggled with is that he's pushing the envelope, right? research isn't about doing the thing that is staying on the happy path or the well-paved road, right? and so a lot of the systems today have been these really
fragile, fragmented things, are special case in this happy path. and if you fall off the happy path, you get eaten by an alligator. (chuckles) - (chuckles) so what about... so python has this giant
ecosystem of packages and there's a package repository. do you have ideas of how
to do that well for mojo, how to do a repository of packages well? - so that's another
really interesting problem that i knew about but i didn't understand how big of a problem it
was: python packaging. a lot of people have very big pain points and a lot of scars with python packaging. - oh, you mean, so there's
several things to say. - [chris] building and distributing and managing dependencies
- yes. - [chris] and versioning
and all this stuff. - so from the perspective of, if you want to create your own package, and then
- yes, yeah. - or you wanna build on top of a bunch of other people's packages and then they get updated
and things like this. now, i'm not an expert in this,
so i don't know the answer. i think this is one the reasons why it's great that we work as a team and there's other really good
and smart people involved, but one of the things i've
heard from smart people who've done a lot of this is
that the packaging becomes a huge disaster when you get
the python and c together. and so if you have this problem where you have code split
between python and c, now not only do you have
to package the c code, you have to build the c code. c doesn't have a package manager, right? c doesn't have a dependency versioning management system, right? and so i'm not experiencing
the state-of-the-art and all the different
python package managers, but my understanding is that's a massive part of the problem. and i think mojo solves that part of the problem
directly heads on. now, one of the things i think
we'll do with the community, and this isn't, again, we're not solving all the
world's problems at once, we have to be kinda focused, start with, is that i think that we
will have an opportunity to reevaluate packaging, right? and so i think that we can
come back and say, okay, well, given the new tools and technologies and the cool things we
have that we've built up, because we have not just syntax we have an entirely new compiler stack that works in a new way, maybe there's other innovations
we can bring together and maybe we can help solve that problem. - so almost a tangent to that question from the user perspective of packages. it was always surprising to
me that it was not easier to sort of explore and find packages, you know, with, with pip install. it's an incredible ecosystem. it's huge. it's just interesting that it wasn't made. it's still, i think, not made easier to discover
packages to do, yeah. like search and discovery
as youtube calls it. - well, i mean, it is kinda funny because this is one of the challenges of these like intentionally
decentralized communities. and so-
- yeah. - i don't know what the
right answer is for python. i mean, there are many people that i don't even know
the right answer for mojo. like, so there are many
people that would have much more informed opinions than i do, but it's interesting, if
you look at this, right? open source communities,
you know, there's git. git is a fully de decentralized and anybody can do it any way they want, but then there's github, right? and github centralized
commercial in that case, right? thing really helped pull together and help solve some of
the discovery problems and help build a more
consistent community. and so maybe there's opportunities for- - there's something like a github for-
- yeah. - although even github,
i might be wrong on this, but the search and discovery
for github is not that great. like, i still use google search. - yeah, well, i mean, maybe that's because github doesn't wanna replace google search, right? i think there is room
for specialized solutions to specific problems,
but sure, i don't know. i don't know the right
answer for github either. they can go figure that out. - but the point is to have
an interface that's usable, that's successful to people
of all different skill levels and-
- so, well, and again, like what are the benefit
of standards, right? standards allow you to build
these next level-up ecosystem and next level-up infrastructure
and next level-up things. and so, again, come back
to, i hate complexity, c+ python is complicated. it makes everything more
difficult to deal with. it makes it difficult to
port, move code around, work with all these things
get more complicated. and so, i mean, i'm not an expert, but maybe mojo can help a little bit by helping reduce the amount
of c in this ecosystem and make it therefore scale better. - so any kinda packages
that are hybrid in nature would be a natural fit
to move to mojo, which- - which is a lot of them, by the way. - yeah. - so a lot of them, especially that are doing
some interesting stuff computation wise.
- yeah, yeah. let me ask you about some features. - yeah. - so we talked about
obviously indentation, that it's a typed language
or optionally typed. is that the right way to say it? - it's either optional
or progressively or- - progressively, okay. - i think the... so people have very strong opinions on the right word to use.
- yeah. - [chris] i don't know. - i look forward to your letters. so there's the var versus
let, but let is for constance. - yeah. - var is an optional. - yeah, var makes it
mutable. so you can reassign. - okay. then there's function overloading. - oh okay, yeah. - i mean, there's a lot of
source of happiness for me, but function overloading, that's, i guess, is that for performance or is that... why does python not have
function overloading? - so i can speculate. so
python is a dynamic language. the way it works is that
python and objective-c are actually very similar
worlds if you ignore syntax. and so objective-c is straight
line derived from smalltalk, a really venerable interesting language that much of the world
has forgotten about, but the people that remember
it love it generally. and the way that smalltalk works is that every object has a dictionary in it. and the dictionary maps
from the name of a function or the name of a value within an object to its implementation. and so the way you call a method
and objective-c is you say, go look up, the way i call
foo is i go look up foo, i get a pointer to the function
back, and then i call it, okay, that's how python works, right? and so now the problem with that is that the dictionary
within a python object, all the keys are strings
and it's a dictionary. yeah. so you can only have one
entry per name. you think. - it's as simple as that. - i think it's as simple as that. and so now why do they never fix this? like, why do they not change it to not be a dictionary anymore, they not change, like do other things? - well, you don't really have to in python because it's dynamic. and so you can say, i get
into the function now, if i got past an integer,
do some dynamic test for it, if it's a string, go do another thing. there's another additional challenge, which is even if you did support
overloading, you're saying, okay, well, here's a version
of a function for integers and a function for strings. well, even if you could
put it in that dictionary, you'd have to have the
collar do the dispatch. and so every time you call the function, you'd have to say like, is it
an integer or is it a string? and so you'd have to figure
out where to do that test. and so in a dynamic language, overloading is something you, general, you don't have to have. but now you get into a type
language and, you know, in python, if you
subscript with an integer, then you get typically one
element out of a collection. if you subscript with a range, you get a different thing out, right? and so often in type languages, you'll wanna be able to
express the fact that, cool, i have different behavior, depending on what i actually
pass into this thing. and if you can model that, it can make it safer and
more predictable and faster, and, like, all these things. - it somehow feels safer, yes, but also feels empowering,
like in terms of clarity. like you don't have to design
whole different functions. - yeah, well, and this is
also one of the challenges with the existing python typing
systems is that in practice, like you take subscript, like in practice, a lot of these functions, they don't have one signature, right? they actually have different
behavior in different cases. and so this is why it's difficult to like retrofit this
into existing python code and make it play well, with typing. you kinda have to design for that. - okay, so there's a interesting
distinction that people that program python might be
interested in is def versus fn. so it's two different
ways to define a function. - yep. - and fn is a stricter version of def. what's the coolness that
comes from the strictness? - so here you get into, what is the trade-off with the superset? - yes. - okay, so superset, you have to, or you really want to be compatible. like, if you're doing a superset, you've decided compatibility
with existing code is the important thing, even if some of the decisions they made were maybe not what you'd choose. - yeah, okay. - so that means you put a lot
of time into compatibility and it means that you get locked
into decisions of the past, even if they may not have
been a good thing, right? now, systems programmers
typically like to control things, right, and they wanna
make sure that, you know, not all cases of course, and even systems programmers
are not one thing, right, but often you want predictability. and so one of the things that python has, for example, as you know, is
that if you define a variable, you just say, x equals four,
i have a variable name to x. now i say some long method,
some long name equals 17, print out some long name,
oops, but i typoed it, right? well, the compiler, the python compiler
doesn't know in all cases what you're defining
and what you're using, and did you typo the use of
it or the definition, right? and so for people coming
from type languages, again, i'm not saying they're right or wrong, but that drives 'em crazy
because they want the compiler to tell them, you type out
the name of this thing, right? and so what fn does is
it turns on, as you say, it's a strict mode and so it says, okay, well, you have to actually declare, intentionally declare your
variables before you use them. that gives you more predictability, more error checking and things like this, but you don't have to use it. and this is a way that
mojo is both compatible 'cause defs work the same way that defs have already always worked, but it provides a new alternative that gives you more control. and it allows certain kinds of people that have a different philosophy to be able to express that and get that. - but usually if you're
writing mojo code from scratch, you'll be using fn. - it depends, again, it depends
on your mentality, right? it's not that def is
python and fn is mojo. mojo has both, and it loves both, right? it really depends on that is
just strict. yeah, exactly. are you playing around and
scripting something out? is it a one-off throwaway script? cool. like, python is great at that. - i'll still be using fn, but yeah. - well, so i love strictness. okay. - well, so control, power. you
also like suffering, right? yes, go hand in hand. - how many pull-ups? - i've lost count at this. yeah, exactly. at this point. - so, and that's cool. i love you for that. yeah. and i love other people who
like strict things, right, but i don't want to say
that that's the right thing because python's also very beautiful for hacking around and
doing stuff in research and these other cases where
you may not want that. - you see, i just feel like
maybe i'm wrong in that, but it feels like strictness
leads to faster debugging. so in terms of going from, even on a small project from
zero to completion, it just, i guess it depends how many
bugs you generate usually. yeah. - well, so i mean, if it's again, lessons learned in
looking at the ecosystem, it's really, i mean, i think it's, if you study some of
these languages over time, like the ruby community for example, now ruby is a pretty well, developed, pretty established community, but along their path they
really invested in unit testing. like, so i think that
the ruby community is really pushed forward the
state-of-the-art of testing because they didn't have a type system that caught a lot of bugs
at compile time, right? and so you can have the
best of both worlds. you can have good testing
and good types, right, and things like this, but i thought that it
was really interesting to see how certain challenges get solved. and in python, for example, the interactive notebook
kind of experiences and stuff like this are really amazing. and if you typo something,
it doesn't matter. it just tells you it's fine, right? and so i think that the
trades are very different if you're building a, you know, large scale production system versus you're building
an exploring a notebook. - and speaking of control, the hilarious thing, if you look at code, i write just for myself, for fun, it's like littered with
asserts everywhere, okay? - it's a kinda, well, then. - yeah, you would like text. - it's basically saying
in a dictatorial way, this should be true now,
otherwise everything stops. - well, and that is the sign. and i love you, man, but that is a sign of
somebody who likes control. and so, yes.
- yeah. - i think that you'll like
f i this turning into a, i think i like mojo. - therapy session. yes. i definitely will. speaking of asserts
exceptions are called errors. why is it called errors? - so we, i mean, we use the same, we're the same as python, right, but we implement it a
very different way, right? and so if you look at other languages, like we'll pick on c++
our favorite, right? c++ has a thing called zero-cost
exception handling, okay? so, and this is in my opinion, something to learn lessons from. - it's a nice polite way of saying it. - and so, zero-cost exception handling, the way it works is that
it's called zero-cost because if you don't throw an exception, there's supposed to be no
overhead for the non-error code. and so it takes the error
path out of the common path. it does this by making throwing an error extremely expensive. and so if you actually throw an error with a c++ compiler using exceptions has to go look up in tables on the side and do all this stuff. and so throwing an error
can be like 10,000 times more expensive than referring
from a function, right? also, it's called zero-cost exceptions, but it's not zero-cost by any
stretch of the imagination because it massively blows
out your code, your binary, it also adds a whole
bunch of different paths because of disrupts and other things like that that exist in c++ plus, and it reduces the number
of optimizations it has, like all these effects. and so this thing that was
called zero-cost exceptions, it really ain't, okay. now if you fast forward to newer languages and this includes swift and
rust and go and now mojo, well, and python's a little bit different because it's interpreted and so like, it's got a little bit of a
different thing going on. but if you look at it, if you
look at compiled languages, many newer languages say, okay, well, let's not do that zero-cost
exception handling thing. let's actually treat and throwing an error the same as returning a variant returning either the
normal result or an error. now programmers generally
don't want to deal with all the typing machinery and like
pushing around a variant. and so you use all the
syntax that python gives us, for example, try and
catch and it, you know, functions that raise and things like this. you can put a raises decorator on your functions, stuff like this. and if you wanna control that, and then the language can
provide syntax for it. but under the hood, the way
the computer executes it, throwing an error is basically as fast as returning something. - oh, interesting. so it's exactly the same way
from a compile perspective. - and so this is actually, i mean, it's a fairly nerdy thing,
right, which is why i love it, but this has a huge impact on the way you design your apis, right? so in c++ huge communities
turn off exceptions because the cost is just so high, right? and so the zero-cost
cost is so high, right? and so that means you can't
actually use exceptions in many libraries, right? interesting. yeah. and even for the people
that do use it, well, okay, how and when do you wanna pay the cost? if i try to open a file,
should i throw an error? well, what if i'm probing around, looking for something, right, and i'm looking it up
in many different paths? well, if it's really slow to do that, maybe i'll add another function
that doesn't throw an error or turns in error code instead. and now i have two different
versions of the same thing. and so it causes you to fork your apis. and so, you know, one of the things i learned
from apple and i so love is the art of api design is
actually really profound. i think this is something
that python's also done a pretty good job at in
terms of building out this large scale package ecosystem. it's about having standards
and things like this. and so, you know, we wouldn't wanna enter
a mode where, you know, there's this theoretical
feature that exists in language, but people don't use it in practice. now i'll also say one of
the other really cool things about this implementation approach is that it can run on gpus and it can run on accelerators
and things like this. and that standard
zero-cost exception thing would never work on an accelerator. and so this is also part of how mojo can scale all the way down to
like little embedded systems and to running on gpus
and things like that. - can you actually say about the... maybe is there some high-level
way to describe the challenge of exceptions and how they work
in code during compilation? so it's just this idea of
percolating up a thing and error. - yeah, yeah. so the way to think about it is, think about a function that
doesn't return anything, just as a simple case, right? and so you have function
one calls function two, calls function three, calls function four, along that call stack that
are tribe blocks, right? and so if you have function
one calls function two, function two has a tribe block, and then within it it calls
function three, right? well, what happens if
function three throws? well, actually start simpler.
what happens if it returns? well, if it returns, it's supposed to go back
out and continue executing and then fall off the
bottom of the tribe block and keep going and it all's good. if the function throws, you're supposed to exit
the current function and then get into the
accept clause, right, and then do whatever codes there and then keep falling on and going on. and so the way that a
compiler like mojo works is that the call to that function, which happens in the accept
block calls the function, which happens in the accept
block calls the function, and then instead of returning
nothing, it actually returns, you know, an a variant
between nothing and an error. and so if you return,
normally fall off the bottom, or do return, you return nothing. and if you throw, throw an error, you return the variant. that is, i'm an error, right? so when you get to the call, you say, okay, cool, i called a function. hey, i know locally i'm
in a tribe block, right? and so i call the function and then i check to see what it returns. aha. is that error thing
jump to the accept block. - and that's all done for
you behind the scenes. - exactly. and so the competitor
does all this for you. and i mean, one of the things, if you dig into how this
stuff works in python, it gets a little bit more complicated because you have finally blocks, which you need to go into do some stuff, and then those can also throw and return. - wait, what? nested? - yeah, and like the stuff
matters for compatibility. like, there's really- - can nest them. - there's with clauses,
and so with clauses, are kinda like finely blocks with some special stuff going on. and so there's nesting. - in general, nesting of anything, nesting of functions should be illegal. well, it just feels like it
adds a level of complexity. - lex, i'm merely an implementer. and so this is again, one last question. one of the trade-offs you
get when you decide to build a superset is you get to
implement a full fidelity implementation of the thing
that you decided is good. and so, yeah, i mean, we can complain about
the reality of the world and shake our fist, but- - it always feels like you
shouldn't be allowed to do that. like, to declare functions
in certain functions inside functions, that seems-
- oh, wait, wait, wait. what happened to lex, the lisp guy? - no, i understand that, but lisp is what i used to do in college. - so now you've grown up. - you know, we've all done things in college we're not proud of. no, wait a sec, wait a sec.
i love lis, i love lis. - okay. yeah, i was gonna say, you're afraid of me
irritating the whole internet. - like yeah, no, i love lisp. it worked as a joke in my
head and come out, right? - so nested functions are, joking aside, actually really great and
for certain things, right? and so these are also called closures. closures are pretty cool
and you can pass callbacks. there's a lot of good patterns. and so- - so speaking of which, i don't think you have nested function implemented yet in mojo. - we don't have lambda
syntax, but we do have nest. - lambda syntax nested. - functions. yeah. - there's a few things on
the roadmap that you have that it'd be cool to
sort of just fly through, 'cause it's interesting to see, you know, how many features there are
in a language small and big. yep. they have to implement. yeah. so first of all there's tuple support, and that has to do with some
of their specific aspect of it, like the parentheses or
not parenthesis that yeah. - this is just a totally
a syntactic thing. - a syntactic thing, okay. there's, but it is cool. it's still so keyword
arguments and functions. - yeah, so this is where in python, you can say call function x equals four and x is the name-
- yeah. - of the argument. that's a nice sort of documenting
salt documenting feature. yep. - yeah, i mean, and again, this isn't rocket science
to implement this, just the laundry list. - it's just on the list. the bigger features
are things like traits. so traits are when you
wanna define abstract. so when you get into typed languages, you need the ability to write generics. and so you wanna say, i wanna write this function
and now i want to work on all things that are arithmetic. like, well, what does
arithmetic like, mean? well, arithmetic like is a categorization of a bunch of types. again, you can define many different ways, and i'm not gonna go into ring
theory or something, but the, you know, you can say it's arithmetic. like if you can add, subtract, multiply, divide it for example, right? and so what you're saying is
you're saying there's a set of traits that apply to
a broad variety of types. and so they're all these types arithmetic, like, all these tensors
and floating point integer and, like, there's this
category of of types. and then i can define on an
orthogonal access algorithms that then work against types
that have those properties. it's been implemented in swift
and rust in many languages. so it's not haskell,
which is where everybody learns their tricks from, but we need to implement that, and that'll enable a new
level of expressivity. - so classes. - yeah, classes are a big deal. - it's a big deal still to be implemented. like you said, lambda syntax, and there's,, like, detailed stuff, like whole module import support for top-level code and file scope. and then global variables also. so being able to have
variables outside of a top level.
- well, and so this comes back to
the where mojo came from, and the fact that this is your 0.1, right? so modular's building an ai stack, right? and an ai stack has a
bunch of problems working with hardware and writing
high-performance kernels and doing this kernel fusion
thing i was talking about, and getting the most out of the hardware. and so we've really
prioritized and built mojo to solve modular's problem. right now our north star is built out to support all the things. and so we're making incredible progress. by the way, mojo's only,
like, seven months old. so that's another interesting thing. - well, i mean part of the
reason i wanted to mention some of these things is
like, there's a lot to do and it's pretty cool how you just kinda, sometimes you take for granted how much there is in a
programming language, how many cool features you kinda rely on. and this is kinda a nice reminder when you lay it as its do list. - yeah and so, i mean,
but also you look into, it's amazing how much is
also there and you take it for granted that a
value, if you define it, it will get destroyed automatically. like, that little feature itself is actually really complicated given the way the ownership
system has to work. and the way that works within
mojo is a huge step forward from what rust and swift have done. - wait, can you say that again? when value-
- yeah. when you define it gets
destroyed automatically. - yeah. so like, like say
you have a string, right? so you define a string on the stack. okay. or on whatever that means, like in your local function, right? and so you say like whether it be in a def and so you just say x
equals hello world, right? well, if your strength type
requires you to allocate memory, then when it's destroyed,
you have to deallocate it. so in python and in mojo, you define that with a dell method, right? where does that get run? well, it gets run sometime
between the last use of the value and the end of the program. like in this, you now get
into garbage collection, you get into, like,
all these long debated, you talk about religions and trade-offs and things like this. this is a hugely hotly contested world. if you look at c++, the way this works is that
if you define a variable or a set of variables within a function, they get destroyed in a
last in, first out order. so it's like nesting, okay. this has a huge problem
because if you have a big scope and you define a whole
bunch of values at the top and then you use 'em and then you do a whole bunch of code
that doesn't use them, they don't get destroyed until the very end of that scope, right? and so this also destroys tail calls. so good functional programming, right? this has a bunch of different
impacts on, you know, you talk about reference counting optimizations and things like this. a bunch of very low-level things. and so what mojo does is
it has a different approach on that from any language
i'm familiar with, where it destroys them
as soon as possible. and by doing that you
get better memory use, you get better predictability,
you get tail calls that work, you get a bunch of other things, you get better ownership tracking. there's a bunch of
these very simple things that are very fundamental that are already built in there in mojo today that are the things that
nobody talks about generally, but when they don't work right, you find out and you
have to complain about. - is it trivial to know
what's the soonest possible to delete a thing that it's
not gonna be used again? - yeah. well, i mean,
it's generally trivial. it's after the last use of it. so if you just find x as a string and then you have some use
of x somewhere in your code- - within that scope, you mean, within the scope that is accessible? - it's, yeah, exactly. so you can only use something
within its scope. yeah. and so then it doesn't wait
until the end of the scope to delete it, it destroys
it after the last use. - so there's kinda some very eager machine that's just sitting
there and deleting. yeah. - and it's all in the compiler. so it's not at runtime,
which is also cool. and so interesting. yeah. and this is actually non-trivial because you have control flow, right? and so it gets complicated pretty quickly. and so like angst, right? was not, not. - well, so you have to insert delete, like in a lot of places. - potentially. yeah, exactly. so the compiler has to reason about this. and this is where again, it's experience building languages and not getting this right. so again, you get another chance to do it and you get basic things like this, right? but it's extremely powerful
when you do that, right? and so there's a bunch
of things like that, that kinda combine together. and this comes back to the, you get a chance to do it the right way, do it the right way, and make sure that every brick
you put down is really good. so that when you put
more bricks on top of it, they stack up to something
that's beautiful. - well, there's also, like, how many design discussions
do there have to be about particular details
like implementation of particular small features? because the features that seem small, i bet some of them might
be like really require really big design decisions. - yeah. well, so i mean, lemme give
you another example of this. python has a feature called async/await. so it's a new feature. i mean, in the long arc of python history, it's a relatively new feature, right, that allows way more expressive,
asynchronous programming. okay? again, this is a
python's a beautiful thing. and they did things that are great for mojo for completely different reasons. the reason that async/await
got added to python, as far as i know, is because python doesn't
support threads, okay? and so python doesn't support threads, but you wanna work with networking and other things, like, that can block. i mean, python does support threads, it's just not its strength. and so they added this
feature called async/await. it's also seen in other
languages like swift and javascript and many
other places as well. async/await and mojo is amazing 'cause we have a high-performance, heterogeneous compute
runtime underneath the covers that then allows non-blocking i/o so you get full use of your accelerator. that's huge. turns out it's actually
really an important part of fully utilizing the machine. you talk about design discussions, that took a lot of discussions, right? and it probably will
require more iteration. and so my philosophy with
mojo is that, you know, we have a small team of really good people that are pushing forward
and they're very good at the extremely deep knowing how the compiler and runtime and, like, all the low-level
stuff works together, but they're not perfect. it's the same thing as
the swift team, right? and this is where one of
the reasons we released mojo much earlier is so we can get feedback and we've already like renamed a keyword data community
feedback, which one? we use an ampersand now it's named in out. we're not renaming existing python keyword 'cause that breaks compatibility, right? we're renaming things. we're adding and making sure
that they are designed well. we get usage experience, we iterate and work with the community. because again, if you
scale something really fast and everybody writes all their code and they start using it in production, then it's impossible to change. and so you wanna learn from people. you wanna iterate and
work on that early on. and this is where design discussions, it's actually quite important to do. - could you incorporate an emoji, like into the language,
into the main language? like a good... like do you have a favorite one? - well, i really, like in terms of humor, like rofl, whatever, rolling
on the floor laughing. so that could be like a, what would that be the use case for that? like an except throw an
exception of some sort. i don't- - you should totally
file a feature request. - or maybe a heart one.
it has to be a heart one. - people have told me that
i'm insane. i'm liking this. - i'm gonna use the viral
nature of the internet to get this passed. - i mean, it's funny you come back to the flame emoji file extension, right? you know, we have the option
to use the flame emoji, which just even that
concept, 'cause for example, the people at github say,
now i've seen everything. you know, like. - yeah, and there's something, it kinda, it's reinvigorating. it's like, oh, that's possible. that's really cool that for some reason that makes everything else,
like, seem really excited. - i think the world is
ready for this stuff, right? and so, you know, when we
have a package manager, we'll clearly have to innovate by having the compiled package thing be the little box with the bow on it, right? i mean, it has to be done. - it has to be done. is there some stuff on the roadmap that you're particularly stressed about, or excited about that
you're thinking about? - a lot, i mean, as of today's snapshot, which will be obsolete tomorrow, the lifetime stuff is really exciting. and so lifetimes give you safe references to memory without dangling pointers. and so this has been done in
languages like rust before. and so we have a new approach,
which is really cool. i'm very excited about that. that'll be out to the community very soon. the traits feature is really a big deal. and so that's blocking
a lot of api design. and so there's that. i think
that's really exciting. a lot of it is these kinda
table stakes features. one of the things that is again, also lessons learned with
swift is that programmers in general like to add syntactic sugar. and so it's like, oh
well, this annoying thing, like in python, you have to
spell underbar armbar ad. why can't i just use plus def plus? come on. why can't i just do that, right? and so trivial bit of syntactic sugar. it makes sense, it's
beautiful, it's obvious. we're trying not to do that. and so for two different
reasons, one of which is that, again, lesson learned with swift. swift has a lot of syntactic sugar, which may may be a good thing,
maybe not, i don't know. but because it's such an easy
and addictive thing to do, sugar, like make sure
blood get crazy, right? like, the community will really dig into that and wanna do a lot of that. and i think it's very distracting from building the core abstractions. the second is we wanna be a good member of the python community, right? and so we wanna work with
the broader python community and yeah, we're pushing forward a bunch of systems programming features and we need to build them
out to understand them. but once we get a long ways forward, i wanna make sure that we go
back to the python community and say, okay, let's
do some design reviews. let's actually talk about this stuff. let's figure out how we want this stuff all to work together. and syntactic sugar just makes
all that more complicated. so. - and yeah, list comprehension. is that yet to be implemented? yeah. and my favorite d i mean, i dictionaries. - yeah, there's some basic 0.1. - 0.1, yeah. - but nonetheless, it's actually still quite
interesting and useful. - as you've mentioned,
modular is very new. mojo is very new. it's
a relatively small team. yeah. it's building up this. - yeah, we're just gigantic stack. yeah. this incredible stack that's
going to perhaps define the future of development
of our ai overlords. - we just hope it will be useful. - as do all of us. so what have you learned from this process of building up a team? maybe one question is how do you hire-
- yeah. - great programmers, great people that operate
in this compiler hardware, machine learning, software
interface design space? and maybe are-
yeah. - a little bit fluid in what they can do. - so, okay, so language design too. - so building a company
is just as interesting in different ways is building a language, like different skill
sets, different things, but super interesting. and i've built a lot of teams,
a lot of different places. if you zoom in from the big
problem into recruiting, well, so here's our problem, okay. i'll be very straightforward about this. we started modular with
a lot of conviction about we understand the problems, we understand the customer pain points. we need to work backwards from the suffering in the industry. and if we solve those problems, we think it'll be useful for people. but the problem is that the people we need to hire, as you say, are all these super specialized people that have jobs at big tech,
big tech worlds, right? and, you know, i don't think we have product market fit in the way that a normal startup does, or we don't have product
market fit challenges because right now everybody's using ai and so many of them are
suffering and they want help. and so again, we started
with strong conviction. now again, you have to
hire and recruit the best and the best all have jobs. and so what we've done
is we've said, okay, well, let's build an amazing culture. start with that. that's usually not something
a company starts with. usually you hire a bunch of people and then people start fighting and it turns into gigantic mess. and then you try to figure out how to improve your culture later. my co-founder, tim in particular, is super passionate about
making sure that that's right. and we've spent a lot of time, early on, to make sure that we can scale. - can you comment... sorry, before we get to the second, what makes for a good culture?
- yeah, so, i mean, there's many different
cultures and i have learned many things from many different people, several very unique, almost
famously unique cultures. and some of them i learned what to do and some of them i learned
what not to do. yep. okay. and so we want an inclusive culture. i believe in like amazing
people working together. and so i've seen cultures
where you have amazing people and they're fighting each other. i see amazing people and
they're told what to do, like doubt. shout line
up and do what i say, it doesn't matter if it's
the right thing, do it right. and neither of these is the... and i've seen people
that have no direction. they're just kinda floating
in different places and they wanna be amazing,
they just don't know how. and so a lot of it starts with
have a clear vision, right? and so we have a clear
vision of what we're doing. and so i kind of grew up at apple in my engineering life, right? and so a lot of the apple
dna rubbed off on me. my co-founder tim also is
like a strong product guy. and so what we learned is, you know, i saw at apple that you don't work from building cool technology. you don't work from, like, come up with cool product
and think about the features you'll have in the big check
boxes and stuff like this. 'cause if you go talk to customers, they don't actually
care about your product, they don't care about your technology. what they care about is
their problems, right? and if your product can
help solve their problems, well, hey, they might be
interested in that, right? and so if you speak to
them about their problems, if you understand you have compassion, you understand what
people are working with, then you can work backwards to
building an amazing product. - so the vision's done
by defining the problem. - and then you can work
backwards in solving technology. got it. and at apple, like it's, i think pretty famously said
that, you know, for every, you know, there's a
hundred nos for every yes. i would refine that to say that there's a hundred
not yets for every yes. yeah. but famously, if you
go back to the iphone, for example, right? iphone 1, every, i mean, many people laughed at it
because it didn't have 3g, it didn't have copy and paste, right? and then a year later,
okay, finally it has 3g, but it still doesn't have
copy and paste, it's a joke. "nobody will ever use this product," blah, blah, blah, blah,
blah, blah, blah, right? well, year three, had copy and paste, and people stopped
talking about it, right? and so, being laser focused
and having conviction and understanding what the core problems are and giving the team
the space to be able to build the right tech
is really important. also, i mean, you come back to recruiting, you have to pay well, right? so we have to pay
industry leading salaries and have good benefits
and things like this. that's a big piece. we're a remote-first
company. and so we have to... so remote-first has a very
strong set of pros and cons. on the one hand, you can hire
people from wherever they are, and you can attract amazing talent even if they live in strange
places or unusual places. on the other hand, you have time zones. on the other hand, you have, like, everybody on the internet will fight if they don't understand each other. and so we've had to learn
how to like have a system where we actually fly people in and we get the whole company
together periodically, and then we get work groups together and we plan and execute together. - and there's like an intimacy to the in-person brainstorming. yeah, i guess you lose,
but maybe you don't. maybe if you get to know each other well, and you trust each other,
maybe you can do that. yeah. - well, so when the
pandemic first hit, i mean, i'm curious about your experience too. the first thing i missed
was having whiteboards, right?
- yeah. - those design discussions
where you're like, i can high, high intensity
work through things, get things done, work through
the problem of the day, understand where you're on, figure out and solve the
problem and move forward. but we've figured out ways-
- yeah. - to work around that now with, you know, all these screen sharing and other things like that that we do. the thing i miss now is sitting down at a lunch table with the team. yeah. the spontaneous things
like the coffee bar things and the bumping into each other
and getting to know people outside of the transactional
solve a problem over zoom. - and i think there's just a lot of stuff that i'm not an expert at this. i don't know who is,
hopefully there's some people, but there's stuff that
somehow is missing on zoom. even with the y board,
if you look at that, if you have a room with one
person at the whiteboard, and then there's like three
other people at a table, there's a, first of all, there's a social aspect to
that where you're just shooting the a little bit, almost like. - yeah, as people are just
kinda coming in and yeah. - that, but also while the, like it's a breakout discussion that happens for like seconds at a time, maybe an inside joke or like
this interesting dynamic that happens that's zoom. - and you're bonding. yeah. - you're bonding, you're bonding. but through that bonding,
you get the excitement. there's certain ideas are like complete. and you'll see that in the faces of others that you won't see necessarily
on zoom and like something, it feels like that should be possible to do without being in-person. - well, i mean, being in person
is a very different thing. yeah. it's worth it, but
you can't always do it. and so again, we're still learning. yeah. and we're also learning as like humanity with
this new reality, right? but what we found is that
getting people together, whether it be a team or the whole company or whatever is worth the expense because people work together
and are happier after that. like, it just, like, there's a massive period
of time where you're like, go out and things, start getting frayed, pull people together, and then yeah, you realize that we're
all working together, we see things the same way. we work through the disagreement
or the misunderstanding. we're talking across each other and then you work much better together. and so things like that i think
are really quite important. - what about people that
are kinda specialized in very different aspects of
the stack working together? what are some interesting
challenges there? - yeah, well, so i mean, i mean, there's lots of interesting
people, as you can tell, i'm, you know, hard to deal with too, but- - you're one of the most lovable people. - so there's different philosophies in building teams for me. and so some people say
hire 10x programmers, and that's the only thing,
whatever that means, right? what i believe in is
building well-balanced teams, teams that have people
that are different in them. like if you have all
generals and no troops or all troops and no generals, or you have all people
that think in one way and not the other way, what you get is you get
a very biased and skewed and weird situation where
people end up being unhappy. and so what i like to do is i
like to build teams of people where they're not all the same. you know, we do have
teams and they're focused on like runtime, or compiler gp, or accelerator, or
whatever the specialty is, but people bring a different take and have a different perspective. and i look for people that
compliment each other. and particularly if you look at leadership teams and things like this, you don't want everybody
thinking the same way. you want people bringing different perspectives and experiences. and so i think that's really important. - that's team. but what about building a
company as ambitious as modular? so what are some
interesting questions there? - oh, i mean, so many. like, so one of the things i love about... okay, so modular's the first
company i built from scratch. one of the first things
that was profound was i'm not cleaning up
somebody else's mess, right? and so if you look at, and. - that's liberating to some degree. - it's super liberating. and also many of the projects
i've built in the past have not been core to the
project of the company. swift is not apple's product, right? mlir is not google's revenue
machine or whatever, right? it's important, but it's like working on
the accounting software for, you know, the retail
giant or something, right? it's like enabling
infrastructure and technology. and so at modular, the tech we're building is here
to solve people's problems. like, it is directly the thing
that we're giving to people. and so this is a really big difference. and what it means for me as a leader, but also for many of our engineers, is they're working on
the thing that matters. and that's actually pretty, i mean, again, for compiler people and things like that, that's usually not the case, right? and so that's also pretty
exciting and quite nice, but one of the ways that this manifests is it makes it easier to make decisions. and so one of the challenges i've had in other worlds is it's like, okay, well, community matters somehow for the goodness of the world, or open source matters theoretically, but i don't wanna pay for a t-shirt. yeah. right, or some swag, like, well, t-shirts cost 10 bucks each. you can have 100 t-shirts
for $1,000 to a megacorp, but $1,000 is unaccountably
can't count that low. yes. right. but justifying it and getting
a t-shirt, by the way, if you'd like a t-shirt,
i can give you a t-shirt. - well, i would 100% like a t-shirt. are you joking? - you can have a fire
emoji t-shirt. is that- - i will treasure this.
is that a good thing? i will pass it down to my grandchildren. - and so, you know, it's very liberating to be able to decide. i think that lex should
have a t-shirt, right? and it becomes very
simple because i like lex. - this is awesome. so i have to ask you about
one of the interesting developments with large language models is that they're able to
generate code recently. really? well, yes. to a degree that maybe, i
don't know if you understand, but i struggle to understand
because it forces me to ask questions about
the nature of programming, of the nature of thought
because the language models are able to predict the kinda code i was about to write so well. yep. that it makes me wonder
like how unique my brain is and where the valuable
ideas actually come from. like, how much do i contribute
in terms of ingenuity, innovation to code i write or
design and that kinda stuff. when you stand on the shoulders of giants, are you really doing anything? and what llms are helping
you do is they help you stand on the shoulders of
giants in your program. there's mistakes. they're interesting that
you learn from, but i just, it would love to get your
opinion first high level. yeah. of what you think about this
impact of large language models when they do program synthesis,
when they generate code. - yeah. well, so i don't
know where it all goes. yeah. i'm an optimist and i'm
a human optimist, right? i think that things i've seen
are that a lot of the llms are really good at
crushing leak code projects and they can reverse the
link list like crazy. well, it turns out
there's a lot of instances of that on the internet, and
it's a pretty stock thing. and so if you want to see
standard questions answered, lms can memorize all the answers,
then that can be amazing. and also they do generalize out from that. and so there's good work on that, but i think that if you, in my
experience, building things, building something like
you talk about mojo, where you talk about these things, where you talk about
building an applied solution to a problem, it's also about
working with people, right? it's about understanding the problem. what is the product that you wanna build? what are the use case?
what are the customers? you can't just go survey all the customers because they'll tell you that
they want a faster horse. maybe they need a car, right? and so a lot of it comes into, you know, i don't feel like we have
to compete with llms. i think they'll help automate a ton of the mechanical stuff out of the way. and just like, you know, i think we all try to
scale through delegation and things like this, delegating rote things
to an llvm i think is an extremely valuable and approach that will help us all scale
and be more productive. - but i think it's a
fascinating companion, but. - i'd say i don't think that that means that we're gonna be done with coding. - sure. but there's power in
it as a companion and- - yeah, absolutely. - so from there, i would love to zoom in
onto mojo a little bit. do you think about that? do you think about lms
generating mojo code and helping sort of like, yeah. when you design new programming language, it almost seems like,
man, it would be nice to, this sort of almost as a way to learn how i'm supposed to
use this thing for them to be trained on some of the mojo code. - yeah. so i do lead an ai company. so maybe there'll be a
mojo llm at some point. but if your question is like, how do we make a language to be suitable for llms?
- yeah. - i think the cool thing about llms is you don't have to, right? and so if you look at what is english or any of these other terrible languages that we as humans deal
with on a continuous basis, they're never designed for machines and yet they're the
intermediate representation. they're the exchange
format that we humans use to get stuff done, right? and so these programming languages, they're an intermediate representation between the human and the computer or the human and the
compiler, roughly, right? and so i think the lms
will have no problem learning whatever keyword we pick. - maybe the fire emoji is gonna, oh. - maybe that's gonna break
it. it doesn't tokenize. - no, the reverse of that.
it will actually enable it. because one of the issues i
could see with being a superset of python is there will be
confusion about the gray area. so it'll be mixing stuff, but. - well, i'm a human optimist.
i'm also an lm optimist. i think that we'll solve that problem. but you look at that and you say, okay, well, reducing the rote thing, right? turns out compilers are very particular and they really want the
indentation to be right. they really want the colon
to be there on your els or else it'll complain, right? i mean, compilers can do better at this, but lms can totally
help solve that problem. and so i'm very happy about
the new predictive coding and co-pilot type features
and things like this, because i think it'll all
just make us more productive. - it's still messy and fuzzy
and uncertain. unpredictable. so, but is there a future you see, given how big of a leap
gpt-4 was where you start to see something like lms
inside a compiler or no? - i mean, you could do
that. yeah, absolutely. i mean, i think that would be interesting. - is that wise? - well, well, i mean, it
would be very expensive. so compilers run fast and
they're very efficient and lms are currently very expensive. there's on-device llms and
there's other things going on. and so maybe there's an answer there. i think that one of the things that i haven't seen enough of is that, so llms to me are amazing when you tap into the creative potential
of the hallucinations, right? and so if you're doing
creative brainstorming or creative writing or things like that, the hallucinations work in your favor. if you're writing code
that has to be correct 'cause you're gonna ship it in production, then maybe that's not actually a feature. and so i think that
there has been research and there has been work on building algebraic reasoning systems
and kind of like figuring out more things that feel like proofs. and so i think that there
could be interesting work in terms of building more
reliable at scale systems, and that could be interesting. but if you've chased
that rabbit hole down, the question then becomes, how do you express your
intent to the machine? and so maybe you want
lllm to provide the spec, but you have a different kind of net that then actually
implements the code, right? so it's to use the
documentation and inspiration versus the actual implementation. - yeah.
- potentially. since if successful modular
will be the thing that runs, i say so jokingly, our ai overlords, but ai systems that are used across, i know it's a cliche term,
but internet of things. so across. - so i'll joke and say like,
agi should be written in mojo. - yeah. agi should be written in mojo. you're joking, but it's also possible
that it's not a joke that a lot of the ideas behind mojo seems like the natural set of
ideas that would enable at scale training and
inferences of ai systems. so it's just, i have to ask you about the
big philosophical question about human civilization. so folks like eli kowski
are really concerned about the threat of ai. - yeah. - do you think about the good
and the bad that can happen at scale deployment of ai systems? - well, so i've thought a lot about it, and there's a lot of different
parts to this problem, everything from job
displacement to skynet, things like this.
- yeah. - and so you can zoom into
sub parts of this problem. i'm not super optimistic about
agi being solved next year. i don't think that's
gonna happen personally. - so you have a kinda
zen-like calm about... there's a nervousness because the leap of gpt-4 seems so big. - sure, it's huge. - it's like there's some
kinda transitionary period. you're thinking- - well so i mean, there's a
couple of things going on there. one is i'm sure gpt-5 and 7 and 19 will be also huge leaps. they're also getting much
more expensive to run. and so there may be a limiting function in terms of just expense. on the one hand, train, like, that could be a limiter
that slows things down, but i think the bigger limiter outside of, like, skynet takes over. and i don't spend any
time thinking about that, because if skynet takes
over and kills us all, then i'll be dead. so i don't worry about that. so, you know, i mean, that's just, okay. other things worry about,
i'll just focus on. i'll focus and not worry about that one. but i think that the other thing i'd say is that ai moves quickly, but humans move slowly
and we adapt slowly. and so what i expect to happen is just like any technology diffusion, like the promise and then the application takes time to roll out. and so i think that i'm
not even too worried about autonomous cars defining
away all the taxi drivers. remember autonomy was
supposed to be solved by 2020. yeah. - boy, do i remember. - and so like, i think that on the one hand
we can see amazing progress, but on the other hand, we
can see that, you know, the reality is a little
bit more complicated and it may take longer to roll
out than you might expect. - well, that's in the physical space. i do think in the digital spaces, the stuff that's built on top
of llms that runs, you know, the millions of apps that
could be built on top of them, and that could be run
on millions of devices, millions of types of devices. - yeah. - i just think that the rapid effect it has on human civilization could be truly transformative to it. - yeah.
- we don't even know. - well, and so the predict well, and there i think it depends on, are you an optimist or a pessimist? or a masochist?
- yeah. just to clarify optimist
about human civilization. - me too. and so i look at that as saying, okay, cool, well, ai do, right? and so some people say, "oh my god. is it gonna destroy us all?
how do we prevent that?" i kinda look at it from a, is
it gonna unlock us all right? you talk about coding, is it gonna make so i don't have to do all the repetitive stuff? well, suddenly that's a very
optimistic way to look at it. and you look at what a lot of
these technologies have done to improve our lives, and
i want that to go faster. - so what do you think the
future of programming looks like in the next 10, 20, 30, 50 years? that alums, llms and
with mojo, with modular, like your vision for devices, the hardware to compilers to this, to the different stacks of software. - yeah. yeah. well, so what i want, i mean, coming back to my arch nemesis, right? it's complexity, right? so again, me being the optimist, if we drive down complexity, we can make these tools,
these technologies, these cool hardware widgets accessible to way more people, right? and so what i'd love to see is more personalized
experiences, more things, the research getting into production instead of being lost
in (indistinct) right? and so, and like these things that impact people's lives
by entering products. and so one of the things that
i'm a little bit concerned about is right now the big
companies are investing huge amounts of money and
are driving the top line of ai capability forward really quickly. but if it means that you
have to have $100 million to train a model or more
$100 billion, right, well, that's gonna make
it very concentrated with very few people in the world that can actually do this stuff. i would much rather see lots
of people across the industry be able to participate
and use this, right? and you look at this, you know, i mean, a lot of great research has
been done in the health world and looking at like detecting pathologies and doing radiology with ai and
like doing all these things. well, the problem today is that to deploy and build these systems, you have to be an expert in
radiology and an expert in ai. and if we can break down the barriers so that more people can use ai techniques, and it's more like programming python, which roughly everybody can
do if they want to, right, then i think that we'll get a
lot more practical application of these techniques and a lot more nicher cool but narrower demands. and i think that's gonna be really cool. - do you think we'll have
more or less programmers in the world than now? - well, so i think we'll
have more programmers, but they may not consider
themselves to be programmers. - that'd be a different
name for it, right? i mean, do you consider
somebody that uses, you know, i think that arguably the most popular programming language is excel. - yeah. - right? yep. and so do they consider
themselves to be programmers? maybe not. i mean, some of them make crazy
macros and stuff like that, but what you mentioned steve job is, it's the bicycle for the mind that allows you to go faster, right? and so i think that as
we look forward, right? what is ai? i look at it as hopefully
a new programming paradigm. it's like object-oriented
programming, right? if you wanna write a cat
detector, you don't use for loops. turns out that's not the
right tool for the job, right? and so right now, unfortunately, because i mean, it's not unfortunate, but it's just kinda where things are, ai is this weird different
thing that's not integrated into programming languages
and normal tool chains and all the technology is really weird and doesn't work, right? and you have to babysit it and every time you switch
hardware, it's different. it shouldn't be that way. when you change that, when
you fix that, suddenly, again, the tools and technologies
can be way easier to use. you can start using them
for many more things . and so that's what i
would be excited about. - what kinda advice could you give to somebody in high school right now or maybe early college who's
curious about programming and feeling like the world is
changing really quickly here? - yeah. - well, what kinda stuff to learn, what kinda stuff to work on? should they finish college? should they go work at a company?
should they build a thing? what do you think?
- yeah. well, so i mean, one of the things i'd say is
that you'll be most successful if you work on something
you're excited by. and so don't get the book and
read the book cover to cover and study and memorize and
recite and flashcard and... go build something.
like, go solve a problem. go build the thing that
you wanted to exist. go build an app. go build, train a model. like, go build something
and actually use it, and set a goal for yourself. and if you do that, then you'll, you know, there's a success, there's
the adrenaline rush, there's the achievement. there's the unlock that i
think is where, you know, if you keep setting goals and you keep doing things
and building things, learning by building is really powerful. in terms of career advice, i
mean, everybody's different. it's very hard to give generalized advice. i'll speak as you know, a compiler nerd. if everybody's going left, sometimes it's pretty cool to go, right? - yeah. - and so just because
everybody's doing a thing, it doesn't mean you have to do the same thing and follow the herd. in fact, i think that sometimes
the most exciting paths through life lead to
being curious about things that nobody else actually
focuses on, right? and turns out that understanding
deeply parts of the problem that people want to take for granted makes you extremely
valuable and specialized in ways that the herd is not. and so, again, i mean, there's lots of rooms for specialization, lots of rooms for generalists. there's lots of room for
different kinds and parts of the problem, but i
think that it's, you know, just because everything
everybody's doing one thing doesn't mean you should necessarily do it. - and now the herd is using python. so if you wanna be a rebel, go check out mojo and help
chris and the rest of the world fight the arch nemesis of complexity 'cause simple is beautiful. - there we go. yeah. - chris, you're an incredible person. you've been so kind to
me ever since we met. you've been extremely supportive. i'm forever grateful for that. thank you for being who you are, for being legit, for being kind, for fighting this really
interesting problem of how to make ai accessible
to a huge number of people, huge number of devices. - yeah, well, so lex, you're a pretty special person too, right? and so i think that, you know, one of the funny things about you is that besides being curious
and pretty damn smart, you're actually willing to push on things and you're, i think that
you've got an agenda to like, make the world think, which i
think is a pretty good agenda. it's a pretty good one. - thank you so much for
talking to me, chris. - yeah. thanks lex. - thanks for listening
to this conversation with chris lattner. to support this podcast, please check out our
sponsors in the description. and now let me leave you
some words from isaac zimov. "i do not fear computers.
i fear the lack of them." thank you for listening and
hope to see you next time.