if you have trouble reading and understanding code that you wrote in the past imagine the experience for other developers who are trying to use or contribute to your code it's not great like kiddo von rossum can't be any more dots than that has said code is red more often than it's written code should always be written in a way that promotes readability so i'm going to show you 5 things that help you improve how you document your code to make it more readable but there's also something you can do before writing documentation that will save you a lot of time i'll talk about that in a minute now next to code being is to read there are other factors that affect the quality of your code if you want to learn more about that i have a free workshop on code diagnosis you can get access by going to iron.codes slash diagnosis it's about half an hour i show you a few practical things you can do to become better at reviewing code using actual production code as an example so ion.com diagnosis to join for free the link is also in description of this video now let's dive into documentation code documentation can have different forms and purposes for example you can have comments in your code that explain what the code does you could create a documentation sites for the developers that are using your package you might want to create api documentations for users of your api so not all documentation is aimed at developers per se it can also be aimed at users who might also be developers depending on the kind of tool that you're building now especially when dealing with documentation in code things like doc strings comments and so on i tend to be quite conservative myself and how much of that stuff i add to my code i think more often than not it's sort of obfuscates what the code is actually doing and it's paying to keep up to date because your code is changing all the time you also have to keep track of making sure the documentation still makes sense and for me a way of thinking about it is that i want to minimize the amount of documentation that i have to write by really focusing on clear naming and clear structure so that when you look at the code even without reading the documentation it's a deadly obvious what the code is doing so in my opinion you can get the most benefits by really focusing on that area thinking about the design think about the naming making sure your code is crystal clear and couldn't be any more simpler and if you achieve that then you also won't need a lot of documentation now that being said if external people are going to use your code of course you need to provide them with some help in order to get started so there's always a balance between that and the idea is to find an optimal point of where you insert documentation and how you make sure that a it doesn't take you too much time but at the same time it still is helpful so that others can use the software that you're building so today i want to talk about a few ways that you can write or app documentation to your code and see how that actually works so the most common one is simply adding comments and we've seen this before these are like this simple one-liners that we have here so we can add them in various places and by the way the example that i'm going to use here is a very simple example that has couple of classes and functions so there's a bank account class that represents a bank account we have a transaction tuple which is a transaction type daytime and an amount we have a couple of methods in the bank account class to deposit money or withdraw money transfer money you see there's some type errors i'll talk about that later and also there's a main function where we create a few bank accounts do some transfers things like that so comments in themselves are not really the formal way of documenting a code but they can be quite helpful if you use them from time to time to explain areas of your code or separating the different areas of a function for example you do need to make sure that your comment actually contributes something and doesn't just explain what the syntax of the line of code reload is for example here i have a few lines of code so if i were to write a wrong style of comment in in order to explain what this does i would write something like this so you see that i got some help from giza co-pilot to let me type faster but you see that the only thing that this comment does is simply explain that we're calling the append method and that we're creating a tuple and adding it to something called transaction history it doesn't really explain what this does now if you want to do a proper comment that actually explains what the code does then but we can write a simple comment that says append a deposit operation to the transaction history then this is what we get because that's conceptually what the lines of code below here are doing so always make sure that when you write comments don't just describe the syntax of something and you would be amazed how often i've seen this in order code always make sure your comment actually describes what is happening and explains it instead of repeating it because repeating it has no purpose there's a few helpful tools in vs code that can help you organize or visualize your comments better and you can install these as extensions an example of this is better comments so i've installed that here but i've disabled it now and what this does is that it visualizes different types of comments in your code what i mean by that well if you look at this example so you see we have a to do item here we have if you scroll down there is some remark here about headers potentially some error doesn't really matter what this command exactly says it's really about showing the possibilities there's also different type of comment here like hey maybe we should turn this into a read-only property you know but currently these commands look all exactly the same except the to do comment there is some colorization well what better comments does is that it applies different colors to these different types of commands so you can also see that it supports alerts queries to do's highlights you can style comments without code differently to make it clear that the code showed me there and you can change some settings so this is what it's going to look like so when i enable this and then i go back into my better dock example you see hey my to do comment has now it different color and if i scroll down then here this comments indicating that there are some serious issue is now red and this comment is now blue so this kind of colorizations can help you more easily understand what each command is for the second way of making sure your code is easy to understand is by using type hints i've been using type hands in python already since a long time in the beginning of my youtube channel i really didn't but then as soon as i shifted to using type hands i felt my code was really a lot cleaner and was really a lot easier to understand so type hints they are basically a very structured way of providing information to the users of your code of how they're supposed to call a function and what they are supposed to provide as arguments and one thing that i typically do is that i make sure that i set my type checker which is part of the vs code python language extension and set that to be pretty strict and that's why i see all of these red underlined things here because that indicates that there are issues with the titans for example in this case a mount doesn't have a time hint so we need to fix that because we don't know what amount actually is and the way you get this type checking errors is if you go to the settings in vs code vs code has settings that are user-wide that basically override anything else then there are workspace settings that are only typically for the current open window containing your current workspace and then we also can have settings for each different folder inside your workspace i typically work on a workspace level so that's where most of my common settings are so if i open this then you see we have here a type checking mode which is set to strict and that is actually what results in these type errors if i disable that and i put this to off then you see that hey all the type errors actually disappear now this might be easier by developing but i typically like to leave it on strict so that i can see exactly where there are currently problems with my type hints so here of course the easy way to fix this is simply providing the type like so the amount is an integer so now you see that also this type error is gone and let's go through the other types as well so we see here there's an arrow with transfer so here we see we did have a type hint but actually it doesn't know the type bank account and this is something that can happen especially if you like here we're referring to the type inside the definition of the type itself so that's what you see here and there's a couple of ways to solve that for example one way to solve it is by using from future import annotations and that's going to help the type checker to know that okay inside bank account we already know that bank account exists and now you see that the error is gone but since python 3.11 you can also do something else namely that instead of using the type here you can also write self and self is something that's part of typing so you see now we have to import it here and now we don't need this line anymore because actually as far as i understand this is in the future anymore so we should actually delete that and then you can see you can also use the self type like i've done here and that also works the other advantage of this is that if you ever decide to change the name of the class well you don't have to change it here because it still refers to itself we can fix the other issues as well for example here the initial balance that should be an integer amount here should be an integer and same for withdrawing and already by supplying those things as type hints you get you fix a lot of the problems so now you see that all of those type errors are gone and we're using stripped strict type checking so now we know that the types are well defined in our code and it really helps make the code clear because now we know that if we do a transfer from self to some other bank account that we supply in amount and that should be an integer these type hints have been available in python since python 3.5 so i highly recommend that you use them because they really help i did a video where i covered these titans in more detail if you want to watch that i've put a link at the top the third type of documentation you see quite a bit are doc strings with doc strings you can document functions methods classes even entire modules and there are tools i will show you one of them later on in the video that can actually take those doc strings and turn them automatically for you into a documentation site so that's also quite helpful and again there are a few tools extension in vehicle that can help you write doc strings faster and one of them is called auto docstring so let me install this and what this actually does is that it can automatically generate doc strings formatted dog strings for you so for example here i go back to my example code again we had the to do for the bank account so i can delete this and let me insert now a doc string and it says now generates doc string so press enter and now we're getting the summary so i can do something like this and then you can start filling out the doc string more now as you can see currently this is quite basic but you can actually change in the settings what it is going to generate exactly so if i go back to my settings i can now actually add a line where i specify how i want these talk strings to be generated and what i'm going to add is auto doc string to doc string format and you have a couple of options here i'm going to use numpy but there are also other varieties like swings or google you can try them out and see which makes the most sense to you let's now add a doc string to the deposit method so i'm simply going to write the three double quotes and then i have generate doc string and now with the numpy format you see that it gives a summary that's parameters an amount integer we can add a description here so now we can start filling out this doc string and similar here we have a withdraw method that erases an error so if we add a doc string here you see that it adds a racist and sufficient balance error and then we can add a description so using this kind of extension to generate these stock strengths automatically is really helpful though i find github copilot also does this already to some extent but it won't follow an exact style it's just going to generate documentation based on what it learns from the internet an example of what that looks like when you complete this so you're going to get a module level description that's normally a one or two line description of what the module is all about we have per class also a short description of what it is then we have doc strings for the different methods in a class like here deposit method for example or withdraw methods we have a transfer transfer method with the proper documentation and so on and so on next using tools like github gopal you can actually also use chat gpt to generate the documentation for you so if i take my original code so then i can ask it to add documentation to my code gpt that looks seriously screwed up i'm really not sure what it's trying to do here so it might have something to do with i'm using gpt4 as a model so let me just copy this text and let's try this again with maybe gpt 3.5 let's see if that does a better job okay so now it describes what the code actually does i didn't ask that i wanted to add documentation okay that looks a lot better so you see that it uses the different documentation style so that's i think one of the issues with something like chat gpt is that you might not get the style of documentation that you want to have so we can maybe even clarify that there we go let's see if it actually does that okay so there it looks like it does a better job though i'm not sure why it's putting all of the methods in the class description i don't think that's really necessary but it does look a lot better one of the disadvantages of docs20 is that they do take up a lot of space in your code like if you look at this file for example especially like this transfer method here it has like this number of lines of documentation and less than that is actual code so you start writing more documentation and you start writing actual code and then you should maybe wonder whether that's really going to make your code easier to read because in order to find out the relevant parts especially if you're trying to modify this code you have to also go through all of these doc strings that are being generated so again that's why i'm always a bit on the fence of whether we should really write all of this extensive documentation where that's really necessary or whether we should try to keep the code as clean and organized and simple as possible and then that should hopefully be enough to answer stand what is going on now when you have these dark strings that is actually quite useful that you can then generate a website from this that contains the actual documentation and the last tool for that is make docs so what i did in this particular project is that i already added it to my project definition so you see make docs is already here but make docs does is that once you've created these doc strings that you can ask make docs to actually create the documentation website for you and there's one file in particular that's useful so here i have a magdox yaml file this helps make docs understand what it's supposed to do so we have a site title we can use a theme we can use a plugin make doc string so this actually brings in the doc strings from the python file automatically into the documentation we can tell make docs what the main file is going to be in the navigation you can add other files here as well that you can edit yourself in markdown format so this is really pretty flexible what i did for this project that i already created a simple docs folder with a couple of different markdown files so i think this is like the startup project for from make docs but now what i can do is make docs build and now we see that there's a site folder that contains all of the things that we need for our documentation site so what you can then do if you want to fuel this site locally is the make box serve so now you see that it's serving in the localhost on port 8000 and this is what that looks like so we have our project overview you see that it gets the bank account class and it also takes the documentation strings from the doc string it also use the type in so those are also included so that's a really easy way to generate documentation from your project and because you have the whole site here including the all the html all the images everything that you need is contained within this single folder it's also pretty easy to put this in cloud storage somewhere and host it in the cloud so that you have an actual website makedocs even has a mechanism to directly publish your documentation side to github pages if you want to use that so few final thoughts about documentation one is that before you write all of your documentation using comments etc etc the main thing you should do to make your code easier to read which in the end is the goal of documentation is by sure is to make sure that you're properly naming and organizing things so make sure your function names your method names are clear make sure that your variable names make clear what is the information that is contained in those variables and make sure that your classes are clear that your modules are clearly named that are structured properly so a lot of the things you do when you design software actually has to do with making software also easier to understand like one of the three pillars of software development make it easy to understand make software easy to change make software easy to test so if you structure your code logically if the concepts are clear the methods are part of classes where they make sense are functions neatly organized into modules the code is also going to be much easier to understand and you're going to need less comments to explain complicated setups because you will have less of those things in your code and to be honest i think doing those things is way more important than writing great documentation because do that then you don't need that much documentation so it's going to be less work for you if you want to learn more about writing clear simple understandable code you might want to watch this video next where i go into detail on doing that for functions specifically and also give some tips for naming functions and variables thanks for watching and take care