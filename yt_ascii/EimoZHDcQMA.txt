how do you convert bytes 
to a string in python is one of the most asked, most upvoted,
 most viewed questions on stack overflow. and what better way to hack the 
algorithm than to answer a question that's already been answered
 a thousand times before? so welcome to mcoding.
 i'm james murphy. let's talk about strings and bytes, why they're 
different, and how to convert between them. strings and bytes look very similar in a 
number of ways in python. you can make a string literal between quotes and 
just add a 'b' in front to make it a bytes literal. you can also use single quotes for either 
one or single or double triple quotes.   they both support escape sequences 
like `\n` to make a new line. and they both support putting an 'r' in
 front to ignore escape sequences. one difference is that there are f-strings
 that allow you to interpolate variables into strings. but you can't do f-strings with bytes. 
but that's a pretty small difference. and the types have a huge 
number of functions in common. here, i'm calling `dir` to give me all 
the attributes of the string and bytes types. i convert those to sets and then use the ampersand 
to get the set intersection, and then print them out. they have so many different things in common, everything 
from addition to finding, replacing, splitting, partitioning. they both seem to have most 
of the traditional string functions. replace the ampersand with a minus to see the 
functions that string has but bytes doesn't. and it's really just a few. and swap bytes and string here to see
 just the bytes functions that string doesn't have. there are literally just 
four functions. but in spite of offering 
such similar functionality, python seems to make a 
point of keeping them very separate. if i open a file in text mode, 
i have no trouble writing strings. but trying to write bytes 
will result in an error. if i wanted to write those bytes, i'd have to 
call `decode` to get a string and then write that. if i open the file in binary mode, 
then i can only write bytes. this time, attempting to 
write a string will give me an error. but if i wanted to get this string, i would just call `encode` 
to get equivalent bytes and then write that. so if strings and bytes are so similar, why is 
python insistent on keeping them so separate?   and what's the difference 
between them anyway? strings are just made up 
of bytes after all, right? well, yes and no. to see the difference, 
let's take a look at a smiley face. but first, a message from 
this video sponsor, me. in all my years of working with myself, 
i can say i truly recommend my own services. my team does python and c++ consulting, 
contracting, training, and interview prep. if you have a project that you'd
 like to get some outside eyes on, check out emcoding.io 
and reach out to me. anyway, back to strings 
and bytes. hmm, is a smiley face 
a character? well, when i run this function, 
it appears like it is. it seems to act like any 
other character. i can print it just fine. and python says that there's just 
one character in the string. but if we try to do the same thing 
with a bytes literal, it doesn't allow us. it tells us we can only 
use ascii literal characters. okay, well instead, let's try encoding the 
string to convert it to bytes and then printing that. `\x` is an escape sequence
 to give a hexadecimal number. two hex letters. it's 16 times 16
 possibilities, which is 256. otherwise known as one byte. so that means that the encoded form of 
the smiley face contains four bytes.   we can even loop over the bytes object 
to see what the four numbers are.   in particular, although the length of the 
string was one, the length of the bytes is four. and while we're at it, how do we know that 
these four bytes correspond to a smiley face?   after all, they're just four
 bytes in memory. how do we know that they don't actually
 correspond to the integer made up of those bytes? or we could interpret those four bytes to
 get yet another integer that those bytes represent? or maybe there's some kind of 
floating-point number or a 32-bit pointer. how do we know what 
those bytes actually mean? the answer is that a sequence of bytes 
on its own doesn't carry any meaning. if i just gave you 
a sequence of bytes, there are an infinite number of
 possibilities for what they could mean. it's completely up to you 
to determine what the bytes mean. and that is the reason that 
string and bytes are different. strings are made up 
of characters. a smiley face, the letter a, 
the number seven. these are things that have 
meaning to us outside of computers. but of course, anything that 
we actually store on a computer does ultimately have to 
get translated into ones and zeros. so, a bytes object is meant to store a raw 
sequence of bytes as it would be stored in memory. but a string stores an interpretation of
 those bytes in terms of characters. so when i ask python 
to decode a bytes object, i'm telling python, "this isn't 
just random memory. this is a sequence of characters. tell me what these bytes mean 
if you were to interpret them as characters." but there's still a piece of 
the puzzle missing. who determined that 
these numbers mean smiley face and that these numbers 
mean abcd? this is the job of what's 
called the encoding. that's encoding, not mcoding. :) the encoding is a bi-directional map that gives you the sequence 
of bytes that corresponds to every character. if you don't specify the encoding, python 
will use the default, which is utf-8. utf-8 is by far the most common encoding 
across all programming languages. at the time of recording, 
it has upwards of 97% market share. it's a worldwide standard about 
how to interpret bytes as characters, or more specifically, what 
they refer to as code points. and the name stands for unicode
 transformation format 8-bit. commonly referred to just 
as unicode. it was developed as an extension of
 the very popular ascii encoding, so that we could include more characters like 
letters from many different languages and of course, everybody's 
favorite emojis. but even though utf-8 is by far the
 most common, there are other encodings. and this can be a huge 
source of frustration. in python, by default, encoding a string
 into bytes or decoding a string from bytes will use utf-8 if you don't 
specify the encoding. but when reading and writing files, 
it'll actually use the system encoding by default, which on my machine 
is not utf-8. so if i try to write something 
that has a smiley face in it, then i get an error. i can fix this issue by explicitly
 specifying the encoding. now when i write the file 
and read it back, everything works. not specifying the encoding 
can also be an issue if you write the file on one 
computer that has one default encoding and then try to read it on another 
computer that has a different encoding. let's say i wrote it as utf-8 but tried to 
read it as this second most popular encoding.   very unfortunately, i don't 
get an exception in this case. i just get a string with 
garbage on the end. this is one of the worst 
classes of errors to run into. because aside from printing things out, 
i won't have any indication that anything is wrong. and now i may be feeding 
this garbage data into other functions, which could result in wrong 
things being displayed to my user or potentially bad data being 
fed into a calculation. if i switch to yet another encoding, 
this would be the luckier case where it actually detects that 
something is wrong. so what i recommend is if there's 
an option to specify encoding, just always specify it and use utf-8 
unless you have a really good reason not to. if you're using 
python 3.10 or later, you can run python with 
this `-x warn-default-encoding`. doing so will run your 
program as normal. except it will also print out 
an encoding warning anytime you forget 
to specify your encoding. alternatively, in python 3.7 and later, 
you could run with the utf-8 flag. this will basically make python treat utf-8 
as your default encoding, even if it's not.   and fun fact, 
look up pep 686. this is an already accepted pep that's
 going to make utf-8 the default in python. the only catch is that it's 
scheduled to become the default not in python 3.12, not in 3.13, 
not in 3.14, but in 3.15. so put that on your 
christmas list. anyway, i hope this has cleared up the
 difference between strings and bytes for you. a bytes object just represents a literal sequence 
of bytes in memory with no interpretation. whereas a string uses an encoding like utf-8 to interpret 
those bytes as a sequence of actual characters. don't forget to slap that like button, 
leave a comment, and subscribe. as always, thank you to my patrons 
and donors for supporting me. : )