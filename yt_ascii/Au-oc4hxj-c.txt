what is up guys welcome back to another low level learning tutorial in today's tutorial we're going to be talking about pulse width modulation or pwm and how you can use it on your raspberry pi pico if you've ever watched a tutorial or read about pulse width modulation you've probably seen a graph looking kind of like this you know you have the square wave going on and you have the top levels and the bottom levels kind of going on and off we're gonna be talking about what problems this solves in the world of embedded systems and how you can use it on your raspberry pi pico when you think of embedded systems and digital input and output typically you're thinking of what we call manchester encoding manchester encoding is this idea of ones and zeros the ones being high at 3.3 volts or vcc and the zeros being down at ground the question is how do i actually transmit or communicate a value in between there without a digital analog converter those pieces of hardware are typically fairly expensive so for example the raspberry pi pico can't put out an analog signal how do i communicate something that isn't 3.3 or that isn't zero volts in comes pulse width modulation and this is actually the scheme invented to be able to solve that problem right to talk about pulse width modulation first we have to define a few terms the first being the period so the period of your pulse width modulation is going to be the length of one cycle so that's from high to let it go low and then back to high again that that rising clock edge that notates the end of one cycle and that's going to be denoted in time and for example here it's 20 milliseconds the next thing we have to talk about is amplitude so amplitude is just the difference between the max and the minimum value of your pulse width modulation scheme and here we can see that it's 3.3 volts because 3.3 minus 0 is equal to 3.3 finally we have duty cycle so duty cycle is represented as a percentage it represents what percentage of the period the signal is on and what percentage of the period the cycle is off so for example the duty cycles it is equal to the time that it is on over the time of the period so it's 10 milliseconds over 20 milliseconds which is a 50 duty cycle so to communicate a voltage that isn't other than 3.3 or 0 the equation is amplitude times duty cycle or the duty cycle again is time on over the time of the period so in this example we have 3.3 volts times the duty cycle of 50 that gets us a 1.65 volt signal communicated to whatever system is interpreting this pulse with modulation so the question is how do we do pulse width modulation on the rp2040 it's actually pretty interesting the rp2040 has a pulse width modulation clock that operates at 125 megahertz or 8 nanoseconds per cycle this clock counts up every 8 nanoseconds and increments a counter internally up to the number six five five three five and then cycles back around down to zero so for example how can we use this to create a four microsecond period pulse width modulation scheme with a fifty 50 duty cycle the way this works is first we have to do some math and we divide our period time four microseconds by the clock time 800 nanoseconds and that gives us a 500 cycle counter what this means we have to set a wrap point where we tell the pulse width modulation counter to wrap around at 500 that will give us a period of four microseconds on the pulse width modulation channel we're using how do we get from that to a 50 duty cycle basically we take our clock cycle number so 500 and then multiply that by 0.5 and that gives us 250 that ends up being known as our set point and what this gets us is a pulse width modulation scheme on the raspberry pi pico similar to the one before but with a much shorter pulse width modulation period but the same duty cycle well let's go program this on the raspberry pi pico so to do this in c it's actually surprisingly simple with the raspberry pi pico sdk i have the code written out here i'm going to go through it line by line and explain what happens so line seven we're going to choose to use pin zero which is the top left gpio pin and we're gonna tell it to go into gpio function pulse width modulation then we have to extract which pulse width modulation channel we're going to get from that pin so we use this function here and give it the pin number 0 to get the slice number which gives us the pulse with modulation channel that we're going to use then we need to enable pulse modulation on that channel so we just say slice number which is the channel number to true then we set our pulse width modulation wrap point this is the point in the counter that we tell the pulse width modulation scheme to wrap back around and then finally we say pulse width modulation set the channel level of our channel we say channel a because that's the channel associated with this gpio bus to 250. this will give us a pulse with modulation scheme of a period of four microseconds and a 50 duty cycle let's run it and see how it does build it and as you can see here i've got the raspberry pi pico hanging out i have my oscilloscope reading it and you can see that i've got a period of four microseconds and a clock frequency of 250 kilohertz anyway guys i hope that was useful if it was do me a favor hit like hit subscribe leave a comment telling me what you want to see next and i will see you guys next week have a good one bye