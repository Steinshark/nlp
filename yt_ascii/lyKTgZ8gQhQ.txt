and with that let's get started hello and welcome to the first episode of ministry plus plus live and the first meeting of our user group in 2023 and tonight our guests are waiting for your questions is klaus eagleberger klaus has a history of being a speaker at various conferences and gave a keynote last year and wrote recently a book so please introduce yourself across that everyone knows what what is to know about cross eagle builder all right so first of all a wonderful good evening for all of you who joined this this session and actually the very really first thing i should do is to thank you jens for the invitation so i'm klaus i am as a as a date time as a job a c plus plus trainer slash consultant speaker so indeed c plus is pretty much what i do for a living i usually say i i earn money my money by speaking about c plus plus which sounds super boring but in fact it's actually quite entertaining quite quite interesting so i indeed recently wrote a book but i also do c plus plus very free time i am the author of ac plus a smart library called blaze and additionally i'm one of the four organizers of the munich c plus plus user group which some of you might know also all right all right let's see there's no questions currently so it's start with so i i've read your book for advertising the book thank you you have your book and there is a lot of design patterns covered and i think we're going to talk a lot about design patterns tonight maybe if you have questions about design patterns but is there a design pattern that you could not cover but wish you had more like you know 100 additional paces what what would be the pattern you would like to to write a chapter on so truth be told when i submitted a proposal for the book actually i had twice as many topics as i've covered in the book i then later realized that this was just not working out in the agreed page limit my page limit actually was 350 initially and we pushed this already because i had just to to get rid of too many topics so there is a lot of things that would have liked to write about the thing i regret a little bit what was that i could not write about expression templates which i've used for more than a decade in my own library there's so much experience that this is something i really would have liked to cover and it would have fitted perfectly because in the book i also covered the decorator design pattern which is exactly what expression templates are essentially they they turn out to be a decorator example a static polymerism decorator which i believe would have definitely fitted pretty well okay so there was a page limit i had to get rid of a lot of things so a lot of things changed quite a bit later this was the one thing that i definitely wanted to have i however also missed an entire chapter about factories and builders and the like i could not write about template method which is really a shame this is so easy to to use so a lot of things were could not fit which is by the way a good good another thing about it a good thing to think about a second book but of course only if the first one actually is a success and there was already hinted at a question and so jonathan has asked this question have you ever come up with a clever pattern that you didn't come across before that's an interesting question so i i actually have invented a pattern but later much later i realized that you cannot invent the pattern oh this is something that is discovered this is something many people should have used before you so that it's it's a recurring thing now that's part of being a pattern i have to admit that i did not really invent a pattern as such i've actually used a lot of things and later i improved things and i perhaps realized that it's actually something that other people have used as well but it's never never really was a a thing that i i believe i could really be proud of so john before me told me that he was very proud about having discovered recursion on his own unfortunately did no such thing and i also have to admit that i initially had no not a good feeling about design patterns i really had no idea at all it took me quite some time to actually dig in but this is now hopefully exactly what what helps the community it took me years to really understand them in detail in a lot of detail and this is what i now try to to cover in the book and also in in talks in in my training classes etc okay sorry jonathan this is probably the most entertaining answer that you that you could get i did not really invent anything not yet so you introduced yourself as a trainer in concert and talking about c plus plus how much time do you spend to actually gain deep knowledge about the stuff that you then teach to others that's a fair question indeed so first of all i spent i do training class pretty much every year nowadays which means that usually i have three four to three days a week to to do training classes there's not so much time left to to actually dig very deep into totally new stuff but i do keep up to date so for instance after breakfast i usually read a little bit in various books of course because it's not necessarily c plus books but also books about soft development in general the energetic training class and in the evening usually i watch a talk either live on youtube or whatever sometimes on the weekends i develop new stuff for my training courses based on the inspiration that i got during the week or also due to the necessity that i need and use is something new and so indeed i think a lot of time is spent on this stuff even the weekends which might sometimes is not particularly great and so indeed i i do c plus plus around the clock to some extent okay it sounds worse than it truly is yeah i also do other things i'm not a c plus addict so roughly two days a week are definitely going into getting to learning about new things which however i feel is absolutely necessary to keep up to date do not yeah repeat the old stuff that is actually not up to date anymore in the training classes it's part of being a trainer for my point of view which by the way does not mean that in in the training classes always talk about the bleeding edge stuff i don't think this helps people so much i think my knowledge about what is going to come is more important to them than or is helping them more than truly doing the bleeding edge stuff on their own my personal opinion perhaps i think when you when i may you know talking about preparing materials as maybe not not as mainstream as as the audience would like to have it but i've seen like in 2013 and effort in the past other people also speak about and it's like yeah i would love to be a trainer because back then i think it wasn't he was like a freelancer or something like that it could be a trainer it was like yeah but the keeping the material up to date and like having your your version since then you know like all the new standards keeping that updated is a lot of work so do not try to keep it at the newest standard because very so this is a reality i do are not always for people that can use c plus plus 20 already actually very few people can use c plus 20 already this week for instance i'm doing a training class for a group that can only use c plus 11. and of course if i show them c plus 20 training material then they don't benefit from this so much because they cannot use this so i have to keep a compromise and so some of them together is pretty basic from today's perspective but it's usually up to exactly the point that these people need okay it's just more important yeah of course you know the clients dictate what you teach that's or not freelancers but there is a question from linkedin from memert hi klaus do you believe that with your free function proposal community like you do did you convince the community because you know so to some people c plus plus gets to the powerful multi-paradine and some other people you know prefer op and the connotation and so what what are your thoughts on your free function talk so indeed there was a talk first in 2015 i believe this was one of my first good talks before i did a few practice this was probably one of the first that really was a little better i know from the reactions of people that somewhere super happy with this totally convinced from the from the start and i know that some people were exactly the opposite some people actually believe this is exactly not what we should do it's a little hard to convince people from my point of view from my experience either you have an open mind and you have experiences already or you have a totally different mindset and do not find this appealing at all i hope you know a book i could actually make a couple of additional points in my book i have one chapter called design for testability where i pick up this this idea again and show that just making a function free function it's so much easier to test i i compare this with a private private function that still you want to test and then play through all the possibilities how you could test this private function and nothing works out well until i finally do this as a free function purposes cooling system a few more people my point is indeed what what mehmet says i'm a person that is absolutely convinced that multi-paradigm is the right approach every paradigm has its strengths and weaknesses and so you should know about the strengths and weaknesses and then of course combine them such that you utilize the strength and avoid the weaknesses which is not easy but this is the power that i see in c plus plus and so pure oo is just too limiting there's too many problems that you cannot solve with that properly and the stl is a great example this could actually have done and could not have been done with the with another approach not at all and so this is where alexander stepan was just absolutely correct on the other hand there is things that you cannot do in the stl style i wouldn't want to write a gui with with just templates and functions now this is where we need an ovo approach so using both strings is what i feel is is great and so yeah i totally agree with mehmed yeah i think one important thing to understand is that the talks and the things which are visible to the community over conferences are not always representing like what the reality is where c plus is practiced right absolutely and we have again a question i'm starting my first job as a c plus software engineer next week what advice would you give someone switching from academia to industry any last minute preparations you recommend so of course i have no idea which industry you're switching to but let's i assume and i think this is a safe assumption that there is code already and not just a little bit of code but there's a lot of code yeah and there's a lot of people that work on that code and so the biggest thing that is different to industry and this will hit you immediately is that you cannot understand everything in this code base together now in the in the academia codes they're usually small not as it usually there's of course big stuff also like open foam etc but the industry code is bigger and so suddenly all the things that you've been taught before things like decouple or things like you cannot just change things they suddenly hit your heart if you try that you certainly are in problem in academia you're not just causes a little bit of a stir perhaps but not not a big one i think this is the the thing that really distinguishes these two things so just be prepared for the reality things are bigger in industry there is more people there's more people with different opinions and so it's a little harder to actually do the things that you took for granted before this is this was my experience initially i could just not do things my way anymore i had to do it the way that it was expected so when i first joined the company this also remained true for my second company you are part of the wheel part of the big thing yeah your small wheel in this big engine but still an important one as you make this work all right okay let me see what is the next question but it's a good choice by the way that you took a job as a c plus or soft junior and this is a lot of fun again i don't know where you start but i guess it's probably going to be a great experience all right so yeah let me quickly make that a question that's like another great thing you know keep your questions short if you like you have a wall of text i cannot post this i know we're gonna post it okay so as a consultant and yes so that's a typical problem for embedded which you know your clients used to see and how can we convince them to use c plus so of course i'm a c plus consultant i never invited by c company therefore i didn't do not usually have these discussions sometimes sometimes somebody says that in another team they're still using c for the reason of blah blah blah sometimes it's about it's simpler it's safer etc therefore i'm not the one that usually has to go into people the people i teach already use c plus plus now that's a great talk that you definitely know from dan sax who actually reported from his own career how he tried to convince city developers to use c plus plus and essentially the talk is about how we failed the reason he failed is that many people consider this part of a religion for them c is just the thing they know it unassured it is the right choice and so very often people just don't want to listen don't want to get something new even though we realize it is better it would be better for them to use c plus plus so how can we convince them i think this is one of the toughest things in in the world seriously how do you want how to convince somebody who doesn't want to be convinced now of course there's more open-minded people no question but i think without yeah without a bigger change in in a mindset that this will not work from my perspective unfortunately although it really is is a shame i would hope that it is because so many problems with the disappear and part of this entire discussion about c plus plus safety concerns is because of this backwards compared backwards compatibility problem with c the mindset that some c plus was double still have using c plus was more like a c thing but actually this is now a kind of a personal not personal a recent experience actually get a book recently released teaching you about important guidelines how to write good software and you you know what the c plus plus examples in the book of course use for loops instead of algorithms don't really use const correct so indeed it looks more like a c book a c code examples or c plus plus is actually a language of choice so in some extent it's mindset the other extent is just that people are so used to using it to using language in the old way that's seriously hard to do to convince them otherwise it works after all okay so i know this is not a convincing answer this is not an answer what to do because i feel it's hard so i'm sorry i don't have the solution i just hope that there is it has a switch in the future somehow switching mindset what level of c plus plus are your course participants usually at good question a difficulty answer because i basically teach all levels i regularly have trainings with with c plus with deliveries i would consider it as a junior but also sometimes have really advanced classes where we can really go into detailed technical details as well as design details that are quite quite advanced what is a reality unfortunately is that in every class there is different levels i have never had a class with people at one level and so i always have to compromise a little bit after midnight my personal philosophy is that i more address the people with less experience than the people that are more advanced because i'm deeply convinced that racing the bottom level of a group has so much more effect than pulling the few people that are more advanced up it really helps to to level or to to raise the level of from the bottom and so ultimately very often it it occurs that i'm booked for an advanced training class and then end up explaining basic things that i believe just helped him so much more than the things that would just go over their head it is a reality indeed and so perhaps this is an answer that you are looking for that what the level are they well not as experienced very often that i would hope for that the the managers that book the training probably expected but it's very mixed indeed yeah okay and let me go to the next question what do you think about the key point of software development the control of complexity in terms of continuous development for of c plus plus the key point of software development in terms of continuous development the control of complexity okay so i i don't know exactly what you expect i admit from my point of view controlling complexity is absolutely key indeed correct so what do you think about it yes you are correct this is key in my own book i stripped it down a little bit complexity of course has several facets and i've focused more on the dependency part of it how to detangle software such that things a little more isolated and can be dealt with separately this was my approach to dealing with a complexity but there's so much more to it of course now next to dependencies that's of course the readability and the standard understandability of things it's yeah how you write some functions here the the over engineering part the clever part making things more complex than they need to be all of these things so of course i feel this is the thing that we have to pay attention to that we should also teach now this is what i'm focusing quite on quite a lot in my training classes and make things simpler tools that are available in the standard library for instance many people just don't know that they're there so yeah i think this is indeed the key so good point and someone asked about rust and it's a very popular question when we talk about things so do you have any opinion on like other languages and rest in specific all right so first of all i do think rest is a great addition to the landscape of broken languages absolutely it has a couple of things that no other language has had in that form before as a good mix of things of course a couple of reasonable defaults which is not a big surprise if you have watched what c plus plus had done wrong in a couple of past couple of decades so it's a good addition absolutely not convinced though that a broken language can be the program language every language has its strength and definitely its weaknesses so in some areas as you write absolutely definitely ah security safety concerning areas this is whereas shines and this is definitely where it it might have an edge so in the long run this is where us definitely can take a place but replacing c plus is everywhere i don't think so i don't think that the game industry would be happy to to program in a safe mode all the time it just doesn't help them no no they have different problems i also think that yeah if you try to use rust a little bit if you try to write something like igui or linked list you realize this this just doesn't work this is not what rust can do this is not what truster is written for so yes it does have it definitely has the potential to replace the blasters in some areas but it's not the replacement per se as so many people make us believe that's not my opinion okay there's the next question we develop lots of code and lots of unit tests along with it what best practices do you recommend to maintain and test the unit tests test the unit tests that's a funny question if the tests are so complicated that you need to test them to be sure that they actually test what they are supposed to test and probably the tests are too complicated of course this is the usual question where does it stop now do you need to test for the tests and then do any tests for the test tests no keep the test simple the tests are supposed to be your your fallback this is your security backbone for the correctness of your code keep them simple so that you can be certain that they do the right thing and this is key for testing and then also my big recommendation is to write tests that you do not have to change every other day so there's a this distinction between white box and black box tests white box test is a test that tests based on knowing the implementation of the thing that is tested and that usually tends to be a problem because if you change the thing on the tests you have to adapt the test that is usually something that makes it so much harder to maintain the tests themselves if however you write black box tests not assuming any implementation but truly testing the behavior and tests tend to be such so much more stable and also simpler from my experience which makes it easier to maintain them you don't have to change them so often you don't have to write so complex things and then also the testing frameworks for my experience work a little better a little more natural now not mentioning any specific thing but yes good people in the community is a good talks from people in the community have shown that this works fantastically so now i don't test my tests i totally admit but i try to keep them simple and behavioral driven but behavioral focused this should help okay i hope this and the answer makes sense okay okay so we're getting back to teaching and in this question now what is the hardest feature of c plus plus to teach and y the hardest feature so if i know count the number of times i've taught move semantics then this probably is a strong contestant for the first place move semantics is pretty much i teach this pretty much every almost every week perhaps every second week this is something that is really really happening a lot and this is not because people just didn't get the details there are so many developers today that still have not really used it before or have not really thought about this before so there is at least 50 percent of developers in almost every training class so from that point of view it definitely is the hardest thing i do it again and again and again and hopefully by now reasonably well if you're really thinking about what is the thing that is hardest to get across okay i don't have a particular feature in mind now i thought okay i'm thinking about a couple of c plus 20 things that however are a little more complicated by nature but will get easier but i'm also thinking about just digging a little deeper into templates for instance a one-day training class about advanced templates and that is something that sometimes is really hard to get across why do we actually need type rates how do they work how do i actually improve or yeah improve compile time when using templates there's so many little nifty details that people are then very confused about that it sometimes takes a lot of time to really ponder the details so that that is definitely something i spent a lot of extra time on usually now this is trained classes for instance where i can only go to the end we start at some point say okay it was good enough unfortunately we cannot cover this in that topic anymore okay so we have a geography question is c plus plus more popular in germany than other european countries relative to the number of developers okay honestly i have no idea about the numbers i do know and this may be an indication that there is a lot of user groups in germany whereas in other countries there is not however this is probably just because germany is population wise the biggest country in europe so it's more natural that there's a few more user groups groups that has something to do with my conference because i've been always pushing and it's not only germany there's a lot of other user groups in europe so germany probably has the most of them but has indeed many many all across europe are now which is great i actually have been to a few of them life even coincidentally sometimes and this is truly a thing to enjoy not being in other user groups in other countries seeing lots of the differences how they do things it is a great thing to do but i don't know if c plus more popular in germany generally speaking i don't know i'm sorry yeah yeah i think that's that's at that point we lack data it's like one thing which you know i have this survey which gives us a lot of data but getting down to the to the country level is too many countries in the world to let people choose and so i cannot answer that question directly i can see that like meeting super sports gets like half of their attendance kind of from germany and the other half is 40 europe and 10 people where i you know know they're coming from somewhere else or i really don't know where they're coming from and i mean if i would have to take a guess there is a lot of industries in germany that definitely benefit from c plus plus so it could be that it's more popular based on that but as i said you'll be like the data all right let me see okay if you're thinking about it then it's probably a tough question so i i just need to help you and paste the question here and then i could show it so may i ask how long have you taken to write this book and what are your greatest learnings from becoming an author any advice you have for us wearing take authors that's a fair question so first of all book did not appear out of veneer no i did not just wake up one morning thing saying okay i'm writing a book about design patterns and design principles no so it actually took quite a lot of time to convince me that it is necessary from my perspective in a community we have a lot of you have a lack of knowledge about design patterns in general and unfortunately you also have a lot of negative examples to talk about design patterns okay i don't mention any names i don't mention any other books but actually there is sources that just made me well made me furious it was just bad really bad and then eventually i discovered that actually design patterns are a good topic i think it was cpp con 2019 when i for the first time did a training course a two-day training course on design patterns and this went really well really well people were interested in topic and actually realized oh my we actually didn't know so much about design patterns before and so i realized okay actually the topic might be interesting i made i may actually be able to teach people something about it and slowly but steadily i had the idea why oh i don't write a book myself so why isn't this something that i can do because well then finally we have a couple of well proper explanations okay this might be it might have been mean but okay so i actually then in the corona times suddenly there was a little time you can imagine that in the first couple of months in the corona crisis i didn't really have training classes i took some time until people realized oh we could actually do online trainings and then i started to prepare things now of course i started to build up my my training class even more and it's a little bit sadly i had ideas how to perhaps write a book too then eventually i approached o'reilly who had invited me before to give training classes so this was kind of a good match i handed in a proposal this is what i want would like to write about i was personally thinking that i would start probably half a year later i actually did not expect that things would evolve quickly but five days later i actually had a yes when do you write just you start to write this is super surprising because no i didn't expect that so this was in 2021 in may to be precise and then i indeed took me approximately one and a half years to finish the book this was not the pure writing time i actually started to write a little later so in may i got the okay and in june i started writing initially just two chapters because also i wanted to see what the reaction was how it worked but then probably if it was beginning of 2022 that i really wrote almost all of the book in one big quick go so it took me approximately two to three months to have 80 to 90 percent of it then a couple of training classes got in the way but then a few months later i finished the book but then of course the reviews have to to see and look through the manuscript i had in total five initial tech reviews good reviews that took that job seriously and so i got a lot of feedback which then of course took me time to to update the material it really took time because if you change one thing you have to change a lot of other things too to keep things consistent it worked most of the time some things unfortunately did not this is one experience i now take my from the book myself but yeah then once this is done once the technical authors are happy you actually get another set of authors who read the book again this time not from a technique point of view but from a we read through it and give you feedback on whether it reads well and if this is all consistent when this was done then i got a copy edit one person read through the book very very detailed from a language perspective since i'm not a native speaker actually i got thousands of places to to improve this was a lot of work and so it all together took indeed one and a half years for a 400 page book the advice for an aspiring tech author or the greatest learning first my greatest learning are it's actually not too bad it actually was fun too but you should have pretty good idea what you want to write about and how it is structured from the start because i actually didn't expect how disciplined they are they actually sit a very strict timetable i'm not sure what would happen if i would have not made any milestone but i really have a very very concrete idea when you are finished with what and so if you don't have an idea what you want to write about this may be a problem at least this was true for riley but i believe other publishers are similar and the advice is if you do have an idea what you what do you want to write about and if you feel that there's something missing and indeed i feel there's indeed a lot of missing topics in the selection of c plus books then just get started i believe this would be a great addition i'm somebody who obviously collects books i like to read and i would be happy to read about something new absolutely so get started make a plan make a concrete plan not just a rough plan in a sense of this is something i could mention make a concrete plan also perhaps think about examples right off right from the start and then you are good to go and then you should be able to do this in a very smooth way now this was no encouragement i hope this this came across okay next question do you think the dramatic increase in the need for very memory and real-time efficient software leads people to use because more often this may indeed be a reason why cyclopsis currently is apparently on the rise of course there is no concrete numbers again what we just said but based on what we currently experience yeah more and more c plus commits and github more user groups more conferences and now the tob index which says c plus plus is surpassing java this is a good indication that c plus is currently becoming more popular which indeed and i agree could be because of this kind of of performance requirement of easy breakfast was always a performance driven language always and many of the decisions that we don't like actually have to do with performance yeah or compromises in the committee but this may be a good a good reason indeed yeah i agree of course again there's no data there's no proof but i feel you're right so there's all the books behind you what is your favorite okay of course everybody expects that i pick my own one i do not so this is a totally different experience my favorite book okay let me pick it for a second so definitely one of my favorites is this one the pragmatic programmer from david thomas and andrew hunt this is actually the new edition the 20th anniversary edition right next to it is the old one which i read many many years ago and this was a book i really loved i really loved i can quote from this book because some of the the statements they make are just so good so right to the point that they really convinced me right off i also love the writing style it's not totally entertaining but i like to read it i liked and still like i actually read it twice of course and they also have a couple of topics that just today still have totally fascinated me for instance something i really loved was their little story about that the reason why softer degrades and why the quality goes worse and they actually compared this to a a theory from a social what is the right term so social behavior so the the so-called broken window theory so the theory is that if you have any neighborhood then as long as everything's nice everything stays nice because people care people want to live in this nice neighborhood and they realize that others care about this too until they do their job to actually keep things up well but as soon as there there's one broken window things actually might go down because suddenly people realize oh okay not everybody cares so why should i and then slowly of course slowly but steadily decay citizen and this is something they've wrote pretty convincingly i loved this chapter absolutely absolutely and still today this this influences me about telling people do care about your job of course robert martin did a great job too talking about the boy scout rule for software development leave the code a little cleaner than you found it but the first time i actually realized this is so important was was in this pragmatic program i really recommend it it's not that expensive and to make sure that you get the 20th anniversary edition has two new chapters and feels much newer they've really rewrote a couple of things because the old one well after 15 years you kind of really give advice on on tools anymore things such as outdated some of them at the start of the day was someone telling me that they recently returned to the project they started their jobs with this is a great experience your own code from 15 years ago then oh my so from linkedin a question what is your take on the nsa recommending not to use c plus for a security point of view this is a of course tough question this is where entire industries can definitely debate for a longer time admitted and somewhere in between the two opinions to some extent i definitely agree with brnem who recently wrote a kind of a rebuttal to the the concerns i'm definitely with beyond it that c plus has evolved quite a bit quite a bit and if and there's a big if here if every c plus if developer would actually use the things that we can use today then it wouldn't be an issue anymore indeed there's so many good things today so many ways that i can you can express ourselves today do not have these immediate problems that the world could be great however honestly this is exactly the problem not all people use c plus plus it could be used that's probably the biggest problem this is also kind of what actually pays my my builds okay but if so since people still use c plus plus very c like sometimes since they just do not use the newest things just stick with the old ways they have done their their job for many years we indeed have these problems still and so i was asking myself the question is it the problem of the language or is it more a problem of the people and i feel it to some extent it's both so from my point of view but this is not just my point of view this is not what will really happen from my point of view we actually should change a couple of things much more radically so i am a strong voter for making a big list of things that want to change radically change breaking changes and just do that in c plus 26 okay and perhaps a few more things but that alone would actually potentially resolve so many issues so const i would make const the default yeah if you don't use it use anything it is const and of course mutable should be the other thing i would make every construct explicit by default i would actually really remove the behavior that copy constructors are always generated despite the fact that it could be wrong and so many many of these small things and i would radically get rid of stuff that we know is not good anymore good old stuff that we have learned is from today's perspective just the old style so that this would be my personal opinion this would be a big step forward but at the same time you also have to teach people to actually use the new stuff much more much more convincingly than we have done in the past if people today known people yeah people that write books still provide examples that are in good old style c plus then we have missed something in the past absolutely yeah is it i just recently got a book new book good style good good advice is how to write better code and examples are just super old so there is a lot to do and so once again i'm somewhere in the middle i believe bjorn is right to some extent i believe the nsa is right to some extent last remark though and this is the thing that makes me most angry about the earl is this i think even the nsa specifically talks about c slash c plus plus i may be wrong perhaps i i misremember but i think this is exactly the quote so languages like c c plus plus or c and c plus plus people still tend to put these two languages in the same bucket that is a problem too if still people com consider c plus plus an extension of c or similar to c then also we have not communicated or things properly seriously c plus is a fundamentally different language it has nothing to do with c anymore it may have a backwards compatibility but so do all languages this is the communication layer that we need for interoperability this is not how we should work today okay so hopefully this this explains it i think so check gpt has become popular so there is the question is that happening replacing c plus developers okay i was just laughing because i pictured myself teaching gptc plus plus instead of c plus with developers now okay is a famous quote which you probably know too be honest with many many years said software development is a human effort forget that and or all is lost oh and and all is lost so i do think that chat gbd can actually help to write c plus code absolutely but not with the interesting things but it can only do the things that we have done so many times before that they just have become boring the really interesting things the new things things that we're struggling with definitely cannot be developed by some automated tool because after all let's be honest this is not an intelligent tool this is just spitting out stuff that it's seen before and so it can only be stuff that we have written before like common stuff so this is why i say it cannot be a help absolutely we can let the mundane stuff do some piece of tool some some tool and we can actually focus on the things that are truly important that design things where we truly need intelligence a human mind something that a machine could not do so from a future point of view i actually also to believe that this is true for the next decades i do not see a machine replacing developers because again the machine can only produce what has been done before as long as ai is just basically spitting out things from before as long as it's not really intelligent i don't see that anything changes here okay there was a beginner question so here it's about move semantics i'm not sure if she got that right but in move semantics when forwarding reference we pass and error value becomes an error you ampersand or is it then due to how type deduction works that is correct the problem now is that it's a little hard to show you explain in words but the the question in the end is actually correct yes a folding reference if you pass an l value indeed place the role of an l value reference and that is due to the deduction rules in the c plus standard so if you have a t ref ref and say we pass a string an l value string then the t is that used to be a string ref just the t t is becoming string ref and so essentially it reads string ref space refref for a short time during the argument deduction process there is a string graph space refref there's no rough reference to reference though and so now a process kicks in that is called reference collapsing that well just removes one of these references and the c plus for standard dictates that it in this context must be the r value reference so what so we strike the r value reference and in the end we have string ref l value reference so it's just a set of roots nothing more okay that was an interesting explanation okay which is interesting okay someone asks any tips when putting together a coding guideline like for c plus 11 or 14 what what do you focus on and is that i know existing examples you would point to okay so i don't know if you are aware of the c plus core guidelines that from my perspective is an absolutely amazing starting point absolutely amazing because there's already i don't know 500 600 maps already guidelines which are primarily good there's a few that are not really complete yet so this is why i say primarily good but in the in the things that really matters of functions and classes and resource management there's a set of really really good guidelines best practices indeed this is where you should get started what i would usually recommend in a team is that you take these guidelines and then you work through them yeah so first you say this is the guidelines that we want to use you work through them and then one by one you might identify a couple of guidelines that are particularly interesting this is then becoming a couple of favorite guidelines for your team that everybody agrees on and really explicitly says i agree to and then there's also a couple of guidelines that just don't make sense for you you may have a couple of different settings you may have a couple of different requirements perhaps a few are not great and then you just remove them you agree that this is not a guideline that you need to adhere to slowly over time you will also find that a couple of things are missing from the core guidelines things that are particularly important for your project and this is then where i would formulate separately so in an additional document you should formulate which rules you want to have sometimes this is of course formatting things whereas i would recommend use clank format primarily but there may be other things other guy i don't have a good example so i have an example i cannot just say it's a good example many companies for instance limit you embedded companies limit you to using signed integers and double values nothing else from the fundamental types primarily to avoid conversions and and stuff like that so if you say this is something we want to use this is good then you formulate it separately now you say this is an extension of the core guidelines this is what we also use and then you over time have a perfect set of guidelines that works for you this is what i would would recommend but indeed start with the core guidelines great place to start i agree there's even even books on on the core guidelines etc beautiful c plus plus from category and guide davidson okay which is bringing us basically to the next question i think which is about books what are your technical programming books which you suggest every software engineer should read in your book you recommend scale software design and the golf report any others all right so i do of course have to reference the golf book quite often because i of course explain a lot of design patterns from that book that's not a great reference i once in a while see on the linkedin or in in in the comments of youtube videos comments like the golf book is not good anymore i disagree it's a great book still that's just one problem with a golf book the code examples are just totally outdated now the book is from 1994 this is pretty standard c plus plus and definitely the code examples are terrible some of the examples aren't even misleading they actually show the pattern but there's so much other stuff in there too that people misunderstand the patterns so no the code examples of that the book is great so i would actually not recommend to read it from front to back because it's okay let's be honest so boring john's books are brilliant i really like them but okay you see this book here it's almost the biggest book in my bookshelf john lakers tends to write big books his news book is so this is a thousand pages pretty much exactly a thousand page and this is not something that you just read lightly it takes a long time that's a huge disadvantage so it's good but he tends to write too much unfortunately so books that i would recommend technical books that i would recommend i am a great fan or a friend of clean coat not because every single item is good but this is one of these motivating books these books that try to convince you that actually putting effort into keeping your code good clean is is well invested time and i totally agree this is a motivation book this is what i would hope every c plus with developer reads i'm actually i think i didn't reference this in my book unfortunately no then okay i just showed it this is what i would recommend this book contains approximately 50 items how do they call this tips whatever so 50 items they also consider as guidelines interestingly in 20 years ago they actually recommended the things that we still recommend today you know separate concerns don't repeat yourself it's exactly those guidelines that we as an industry today are considered as super important so this is probably the go-to place to find all of these guidelines in a very concise very well explained way okay and i'm thinking it's probably the two books that i would definitely pick from from all of them funny enough this is not c plus books but that's not the one c plus book currently that i would recommend either they are very centric to this particular standard which is good yeah we need that with a very general more like introduction books which is not something i would generally recommend okay so that's my my two recommendations yes i saw an interesting question from linkedin klaus you are talking a lot about object orientation and your talks can you share your thoughts on data oriented design absolutely okay it looks like i'm actually talking a lot about overp i admit the reason is that of course i often start with an yeah golf pattern a gang of four pattern the reason is that this is from my perspective the place where i can actually where i can meet people and this is what people know and so if i start with this i have people on my side already in the sense of they they know what i'm talking about but then hopefully i'm actually moving away from this a little bit for instance in the in one of our latest talks at cppcon 2022 i talked about the visitor design pattern and indeed started with a good old visitor from the golf book but then actually showed how this is done today in modern c plus plus and the solution is well not object on it at all it's more like a perceptual functional approach that is the right approach the right paradigm for a visitor design pattern so i'm not an oop practitioner i'm more like a well what's the right word so i'm pragmatic about how to approach a problem i try to find the best solution for every problem if the solution is object oriented great now then this works best if it's functional potentially great then this works best what i do try however definitely is to show people that value semantics is the way to go which also addresses some of the security issues that we've mentioned before that encapsulating things in values dealing with values not dealing with pointers dealing with way less references not using so much inheritance etc etc type ratio for instance kind of inheritance free on the outside i would rate this as an object only programming solution from a sense of it has the same advantages as the object or in the program paradigm but as a value semantic solution it just has so many advantages okay this was not really the answer to the question so far so data oriented design i think this is another good approach absolutely i like it i like it and i actually have the one book from richard fabian the the data indie design book and i think that still is just one i've just won beef with pretty much all of the talks and and books they pretty much make it sound like object and program is the wrong approach i don't agree with that statement they make it appear so probably they don't mean it this way but they make it appear that way optional program is a great approach if it's the right one and the same is true for data render design i think this is a great approach for those places where it's actually the right approach so i would not write agree with data-oriented design but i would definitely think about this when performance is more critical in computer games it really seems to fit well so yeah i believe this is a great addition to the in the multi-paradigm field of c plus yeah i didn't write about this in my book perhaps this is something that i should rethink in the next book not because again i want to show that there's many different kinds of solutions and from that perspective this is this may be a good good pointer for me okay thanks for the question you mentioned the next book i mentioned that i'm actually thinking about another book i mentioned that i have a lot of other patterns and ideas that i did not put into the first one and if i write a new book indeed it might actually be a reasonable idea to to include a couple more different kinds of solutions danila complained that i did not use enough templates so she was a little disappointed that there was not enough static polymers in there this might be something that i can change yeah now often a different idea would actually would fit pretty well that's what i want to show the multitude of solutions yeah i think there's a couple of things you could you know connect with when reading the book and address the second book so we're getting a bit back to the language questions for someone who stopped working with c plus plus for almost four years using c plus plus 14. any advices that will help me to catch the gap that as nowadays the c plus plus you know it's c plus 20. yep all right if you do have indeed the opportunity to work with c plus 20 this is great because so many other people unfortunately cannot i would not say that you should have to immediately learn about all the new things and use them right away i think this is not the right approach the right approach is to know about them learn about them bit by bit and then apply them when they are actually appropriate the one thing however that i feel really really makes a difference and i know that daniela will hate me but a concepts this is the one thing from c plus 20 that i can use in all compilers today and it really makes such a big difference in terms of your code quality how we think about templates and templated code that's the one thing that you definitely should look up else of course there's so much new stuff one thing that definitely helps is to just keep up to date by watching couple of cpcon videos also not all of them at once this is just too much information up at yeah go in there again bit by bit pick one thing at a time and try to realize why this has been actually added to the standard how it helps there's things that are more important than others of course yeah by the way i actually feel this is a good choice to going back it is more fun today so many years ago i was actually thinking about problems today i'm not a problem anymore so many things have turned to the better absolutely and so probably you'll just find that it's easier hopefully of course there's more stuff more complexity but because of this new stuff you can forget about old stuff i like variant if you use a variant you can potentially forget about the union altogether and so new stuff replaces old stuff in many cases okay hopefully this helps i'm still a bit torn receiversity i am too absolutely the problem is actually not the standard the you know the implementations are not always up to see and so that is where you you know this magic we can write codeless concepts and modules we're not there yet danita demonstrated that in her keynote how that would look and that there are certain combinations where those rocks out but for some of us this word is now getting closer i think that's that's great by the way is it indeed a problem in our training classes many people indeed many people expect that i talk about cbs 20 and then afterwards they can use all of these great new things and unfortunately the training that i have to reveal to them that oh by the way your compiler doesn't support that oh no the compiler cannot do this too unfortunately this is also not yet possible this is actually a disappointment for many people yeah so we are not there yet the next question is probably also something which you hear a lot on your trainings lots of c plus code as written with procedure programming mindset maybe youtube inference from c that is just siva's classes code how do you refactor such code it's of course a big question this is not something that we could do a training class on the first thing to try to do the first thing this is also something kate gregory says if it's truly a very c like code then probably i said probably you'll find a lot of manual resource releases all of the codes yeah manual deletes closes etc that definitely is the first thing that must go from today's perspective in c plus this is a programming error a manual delete a manual close if this is already encapsulated properly and you already are in a reasonable shape to clean things up more easily oh but then it's a very general question i cannot generally answer how to refactor this this is something that i usually do in a consulting session now we take a look at the code we plan ahead we actually decide on what is a reasonable course of action it's a little hard to to just say in an in general form yeah by the way very often i see the opposite too people that actually use c plus plus not as a a c with classes code but as a java thing so deep inheritance high keys pretty much everything is solved by inheritance hierarchies this is a reality out there too and also a problem because deep inheritance hierarchies are things that people don't understand anymore oh my experience right one advantage of having see that code might be that you already have three functions right okay from my perspective this may be i i have you know i had my fresh air as a freelancer of seeing code races and it can be very difficult and very different yeah it's not like but it's not the standard code base which everything then so it helps other proposed also his own language is like it was a pattern last year that a lot of people you know came was was a successor or an improvement language on c plus plus so what's your take on cpp2 and terps presentation okay i actually really liked the point in his talk where he actually blanked his light and talked freely because indeed he addresses in this talk exactly the problem that you currently are facing c plus is moving forward yes but unfortunately slowly too slowly and he's right too slowly because people are just not interested in learning new stuff and we still have the problems to some extent that we had 20 years ago so i think in in the in in the presence of all of these other languages that actually are very reasonable very good additions c plus must evolve a little more quickly and a little more radically we cannot upkeep uphold this backwards compatibly forever must actually break things a little more radically and so i'd really admire him for actually making a suggestion that is pretty radical but at the same time make sense i do not see this as this is how it's going to be but it definitely is something that stirs up the the discussion about this topic and also hopefully changes people's minds a little bit because i believe he is absolutely correct if we continue as we currently continue then we hit a wall at some point and indeed then c plus might actually decline it is a great language it's actually a probably it's still the most powerful language that you have but we need to overcome the problems that we have one way or another and this requires some radical thinking so i like what he's done in the sense of radical i cannot really say if this is the things if this is the thing how things work out in the in the future we'll see but we need to do more a little more explicit break old things in order to move forward yeah i think what my initial reaction to to his keynote was that well let's see how this moves forward and i'm actually kind of happy to see that herb actually has moved this forward it is now in our own active project and that there is updates on it and because it's you know herb likes to give very visionary keynotes at the end of cpp con and not every of those keynotes has you know been in retrospect it's now leading all to this and maybe it's all coming together but sometimes you can also have like it's like it's a science project and you know this is really going somewhere on the other hand we did an armor with strong parent and there sean gave it a bit of an insight that there is actually like a big community of people working on those languages and they're talking to each other so the cp2 folks meet up with a lot of folks and the carbon folks and there was another language probably and and there there it was like and i think from that and circle i should mention on this even with like circle access for a long time and it's not like i think not to be mentioned as the successor language so we should learn from each other and we'll see where that goes and yeah so i think we're through with that we're like do you want to ask a few more questions or so i don't mind a few more questions but you are the the person charged you say when we when we are done yeah let's see if there is one last question so here's a question on classical design patterns when is the solution following a classical design pattern and when is it just code with similar intent right so i don't see the question yet but i think i got it nonetheless okay one of the things that i consider misconception about these classic design patterns is that people expect that they look exactly like in a gang of four book so this actually was also one of the questions that i got at the end of my keynote talk should we use these design patterns if they look like this oh it was posed a little differently but people expect indeed that everything's done in inheritance and then it's a design pattern design patterns are definitely more than that they are generally dependency structures how do you want your your entities to depend on each other depending on how you want them to depend you are actually using the design pattern and so when a solution is following a classical design pattern it has a certain dependency structure and then it's totally relevant how you implement this like i said the visitor the classical design pattern can very very well be implemented with the variant actually you decouple even more and i have the same in the end dependencies the dependency structure so from my point of view you are using a classic design pattern once you follow the intent of that pattern if you want to be in to be able to inject the implementation details from the outside you are using strategy whether using a base class whether using a function pointer a stood function or a template parameter doesn't matter you're using this particular design pattern same with pretty much all the others there's a few that are very specific i could not name any other solution for the prototype pattern and inheritance it is for inheritance but yeah similar intent probably meaning more same intent whatever you do you use this pattern okay okay i answer you muted yeah i'm muted for the first time great so there are clear features in simple first 20 and 23 that would encourage their adoption for example features that will improve security given that supercross has been described as unsafe recently so killer features for security okay i've not thought about this it this way there is killer features definitely this is why we definitely consider c plus 20 as a big step and 23 is a very very reasonable addition to that i don't know if there's any killer feature for security i think since features take so many years to actually develop to evolve to actually put into a into a forum that you can standardize them probably when the c plus 20 features where were thought of nobody was thinking about unsafe at the at the time this is just things that we have been missing for decades in in the first implementation of the year still alexander stepanov already used concepts the idea today in c plus 20 we've we finally got them yeah three decades later essentially i think there's nothing focused on safety or security sorry security because from a time time scale point of view nobody was focusing on that yet now probably a couple of things will change i think once again the most critical things about unsafe that we hear about today is still that you can use the old stuff well that you that people also don't want to update because this is what i've done all their life that that is the major problem this is something that you probably cannot even fix with features but only with breaking old stuff yeah breaking sense of really getting rid of that no it's it's super difficult topic a thing that concepts is a good improvement to finally nail it down interfaces and make things more transparent to what actually your implementation is supposed to do and to be you know make it easier to to catch certain things at compare time i also like 23 is like one of the features everyone talks about is deducing this and i find it interesting that this kind of is reducing the code complexity and the amount of code you have and that is also an improvement in security potentially potentially absolutely from that perspective everything adds a little bit it's not the big killer feature that was so you know i think the recent paper from vyana has made it clear that the focus on of the committee has recently not been so much on having a killer feature for security and we are all of course in the super sports community willing to to listen to to someone having such a killer feature as an idea there is now one last question i think i may see if there's more questions which we could bring in here as their most voted question what there's one more question let me copy that and then there's a good question from linden to end this so what are your greatest learnings switching from software industry to training consult other speaker career any advice for similar minded to take people in software industry the greatest learnings the greatest new things okay so i didn't switch quickly i should say that for a long time i have always done training in the first company i have been no when i when i started everybody i think quickly realized oh this guy knows c plus plus and so after half year i actually took over the internal c plus trainings and so i went to all the sites and helped people to better understand what they should do yeah how to write their software when i switched to my second company very quickly i actually was doing c plus plus trainings internally and again i went to all the sites and did training classes i think because of that and probably also because at the university i have done teaching i realized the teaching is actually something i i like something i enjoy and also my opinion may not be true but i believe i can actually help more in spreading the knowledge than doing stuff on my own and so eventually i ask for reducing my work time to part-time so then i did part-time work in a company part-time training classes which actually worked great i was super happy with this but it did not work out quite as i intended it the company didn't like the fact that i was there only part-time so eventually i had to choose and i chose to do training classes my my whole time which actually happened kind of at the beginning of corona which was a little unfortunate choice at that time but it turned out quite okay in the end now so today i really can make a living based on these training classes so it was a slow transition from few training classes here once every four weeks perhaps to now when pretty much every week so it was a fast transition so i i think it was not so much of a a big learning it's a surprise like oh this this is now something i didn't expect there is some advice for for similar minded tech people do not just jump off to start to say yeah no i'm doing training classes you should have kind of an idea already how many customers you will have that is something i initially considered as a risk and i was lucky to already have a lot of people that knew me based on the immunity plus was user group so not surprisingly a lot of my first training classes were in munich that way people knew me already and that is something that i consider to be pretty important because else you might be disappointed you do not want to ask people do you want a training class all the time actually of course eventually once the people ask for trainings with you and this definitely takes some time therefore no a couple of customers up front then this might work out just well build a reputation for instance by the way by giving talks if you give c plus talks that people like that people make people realize that he knows something that can also teach well then it's definitely helps to to to convince people to come to you yeah i used to give classes and was was you know trying to to see if being a trainer is a good sidekick for organizing a conference and one of the problems i had is like that some some of the the trainer market where you can get into is very similar to the frequencer market where you sign off to some company which has some customer wanting to have a training and you give away the rights to that company to the and to those middle folks and those middle folks take away the interesting exactly thank you for to you partly yeah and on the other hand in that setup a lot of information can get lost and that happened to me in one training where they were very particularly asking about a boost threat training so they got to boost threat training but they kind of forgot to told me that there were beginners in the audience so okay it's liked it and i kind of felt they they get they get the training which they wanted but the that's the other thing which i really really have to tell you if you want to be a trainer get a feeling for it what class size and what teaching and doing trainings in the real setting is that something for you or not and i found it interesting when i you know got a hold of scott myers 2014 at my conference i was like i know the one question i want to ask scott myers and i was like scott so when i do a training class and i i'm done with the day i'm excited and i'm excited but i'm also exhausted i you know the i'm not like you know i just you know want to have like you know dinner and then i'm done and when when the class is ready or when the class is done i'm like done for the week or okay and it's really like a day or two to recover from that and i was like scott you're giving me so many courses you must know the secret sauce to you know not do that i know how how is it for you and it was like yeah that's that's true that's and one part of it he was like for him or from his perspective it was also like that people can ask you questions anytime of their choosing yeah and you kind of have to constantly try to answer their questions in a satisfying way yeah that definitely is part of the challenge absolutely i agree if this is something that you like so again about the question if this is something you enjoyed then this may be the thorough thing for you a little bit of teaching experience may help as he and said knowing how this works absolutely so before you choose this career path and the final question has also something to do with trainings they asked where to find close trainings class so usually indeed as i said most people most customers come to me so i usually am contacted by email but you can definitely find me on linkedin too which is based on my last name a very very simple way just contact me and then suddenly we are in a position to change information so what i usually need to know is what do you have in mind how big is the the group that i'm supposed to teach what is what exactly you're interested in do you have a specific idea or is it just about give us a an update of the of c plus plus something like that and also pretty important for my preparation is a little bit of an idea of the level of developers as i said it never fits well it there's always a homogeneous group but i can prepare it definitely better if i know up front whether this is advanced developers or less experienced developers so linkedin class eagle burger or if you take my last name put a dot in between so klaus.eagleburger at dmx dot d e gmx dot d e this will work pretty well all right sure and your classes your material do you have any preparations or plans for having video courses available online i do have a lot of youtube videos by now so if you go to youtube search for my name probably incoming with meeting c plus plus or cpp con then you do find a lot of videos this is to some extent appetizers for the training classes if you like the talks then you will also like the teaching style editing the courses if you so i do not have other video courses i do have video courses but they're commercial they're not freely available so the the heiser group for instance offers a training courses so videos with me um okay so the youtube videos are definitely the best way to to get an impression absolutely right you're you're not having a course on the popular online platforms like udemy or other things like that okay and of course the book if you you know want to to get to know more about what else thinks about c plus software design if you enjoy the book indeed then the training class might work you will find that the book is not a dry reach but i usually like to write a little more entertaining now if i like to write the book then then it's a good thing so there's a couple of jokes in there if you like these then the training class should be just great yeah and with that we are now at the 90 minute mark which i think is also kind of you know absolutely where we want to go with class tonight thank you for coming close was an honored to have you and i'm looking forward what you're coming up with and and talks and things in the future what we see from you that's one then once again thank you very much for the invitation i really enjoyed this thank you