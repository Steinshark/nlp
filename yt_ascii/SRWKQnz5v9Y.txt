all right all right all right all right js's weird extreme edition let's go this is a big one this is a big one marker okay marker js is weird extreme hello and welcome to low level javascript today we're going to be talking about the biggest reason the people okay this video does not start off on the best foot using this idea of low level and javascript in the same sentence just somehow feels you know what i mean you know what i mean like just just right out the gate just right out the gate when you allocate a string and you call substring are those two separate strings or one string with a internal reference to just part of the other string could anyone can anybody answer me that question if you can't answer that question confidently then that's not low level okay that is just as easy as it gets reference say the javascript is weird which is implicit type coercion now at least once a year there's a new wave of sort of javascript is weird posts that circle the internet and they always use tight coercion in some weird looking way to produce some unexpected results which produces the unusual string banana now this is a toy example of how far this type coercion idea can actually be taken and in today's episode we're going to go to an extreme now disclaimer it goes without saying that you should absolutely not write code like this in a professional environment but that doesn't mean that you shouldn't be able to understand it and explore it so with all of that mind let's continue so what if i told you that you can write completely valid javascript that can do anything but only uses the following characters not only that but we can easily write a compiler that takes regular javascript and turns it into this weird version in something like 45 lines of code or so i have always been curious about this and i've wanted to try to write something with it i've always wanted to do this this is very exciting well that's exactly what we're gonna do here today so the basic idea here is really simple javascript only has a few basic types like strings numbers booleans or recent objects among some others when you try to do things like adding two different types together javascript uses some rules that it has a quarter language to decide how it's going to coerce one of those types into it into the other type so that it can actually add them together so if i try to add a string coercion i hardly even know her to a number the number is going to get coerced into a string if i try and add a number google i love you i love you too baby is going to get coerced into a number and we can see that we can take the number two and add it to the boolean value true which will give us the number three because true is coerced into the number one whereas false would be coerced into the number zero so you can also use addition or subtraction with an expression to just cast one thing into a number if we have just plus with an array that's actually going to give us zero this is called a unary expression because you only have one thing acting on word plus if we were to use a boolean value instead like plus true we would see it turn into a one so we can kind of transform one kind of value into another so the banana example that you see all over the internet which is something a little bit more like can we wind back up there did i just hear banana did we have a niner in there so we can kind of transform one kind of value into another so the banana example did you see yeah he definitely tossed out a banana in there that's that's full banana i don't know but i don't know about this banana i don't see the yar in there i don't know if i like that i don't know if i like it you'll over the internet which is something a little bit more like this british people learn to speak english okay it sucks to invent something and all okay it's always looks in the stars you know five stars we got that wrong you just happen to get a whole language wrong yes we have the string b plus a and then plus and then a space plus and then a plus a and then we do a two lowercase on that we should see this come out with the string banana and that is because what we're trying to do here the root of it is that we're trying to take the character a and convert into a number plus which of course is going to result in not a number because a is not a number and cannot be sensibly transformed into a number and if you're too lowercase that you'll get the middle part of the string and if we look at what it was before you'll see that this is really this so what we're actually doing is saying b plus a plus not a number plus a lowercase it's actually fairly simple this is the set of basic things that we're going to use in order to don't tell matt podcock i said this okay or matt polcock don't tell matt peacock okay we're not going to talk about that okay just don't tweet that don't tweak this moment there's english and then there are mistakes this is true thank you for recognizing that i think way cooler so first of all let's figure out how we can get numbers we've already seen that we can get number zero so zero then is just plus empty array now i'm going to store that way in a string so we can reference it later so we need to get to the value plus true but we can't use true because it's not in our list of value characters what we actually need to do is to get it somehow from from our main type so let's stop an empty array and if we use the exclamation mark we'll cast that to a boolean don't end up being the value false but we can get it to be true by just using one more exclamation mark which don't want it to be true and then we already know that if we just put a plus in front of this we'll turn that into a number and so now we have the number one again i'm going to wrap it up in a string now how could we get any number well pretty obviously we could we could just sort of keep adding these to each other so let's say we wanted to we could take this value that would give us the number two and clearly we could do this on into infinity and so let's just write a general way of doing that let's write a function chord number is going to take an n and basically all we're going to do is to create an array we can do that with the array.front we provide a length which is n because we want n elements and then we can use the second argument to say that that should always be the number one and then we join them all together with a plus now we can return that and so let's see if this works the way we expect it to if we want the number seven we should be able to say number seven and we get this kind of expression and if we take that out and we run that here in the debugger we'll see the number seven perfect so now we have a way to get any normal number turned into our strange sequence of characters so now that we have these numbers our goal is going to be they're following letters that is most certainly how brain [ __ ] was discovered is that somebody discovered that you can actually write a subset of the javascript programming language like this okay so doing these strange operations i'm gonna write down here from c-h-a-d-e-t capital s i n g small c u p the character space which i'll represent here with the square bracket from what word is that from cadet sing cup what does that mean i don't even get i don't even know what's this what's this function we need a backslash now what exactly do we need these characters you might ask well that's gonna become clear as we progress through the journey but by the end if we have these characters we will be able to encode anything in javascript and i keep seeing chad i don't know how chad has ruined me when i see it all i see is chad and i don't know how to spell it god regrets free will after this chad at sing cup let's get to it the first thing i'm going to do is i believe this actually was one of the twitter users or one of the twitter devs that elon was complaining about i'm gonna write an object here i'm going to call it map we're going to store all the characters that we collect up in here and the first one we're gonna get is a now we can get a by using the famous not the number example so there's many ways you can get another number we can cast a letter to a number but we don't have a in our disposal but what we do have is an object if we run this then we'll see that we get another number but we actually need a string and a good way and the way we'll use for all of these things to convert something which is not yet a string but we want a string version of it is to simply add an empty array so in the javascript typo version rules that's going to force this thing to be a string and we're going to be able to get the string not the number and strings have the property in javascript that you can index them like their arrays so we can we can provide an index and extract the character of that index so if i wrap this up in parentheses and then we use square brackets the second character in here so the index number one is is the letter a so we can put in here the number one and we should see the letter a but we can't use the number one we need to use our special number encoding so we can actually just use number and one but this whole thing we're going to store it as a string because we're going to look back at it later so what i'm going to do is i'm going to put this in a template string and we can evaluate the number inside and if we take a look at this we'll see this strange little concoction we'll just verify that we do it get the letter a if we try to add an empty array to an object it's going to force the object to be interpreted as a string and an object when it types a string always yields the same results we take an empty object we add an array and we take a look we're going to see the value object objects but we can use this to our advantage because this contains quite a lot of characters we need for instance it contains the character o it contains e c t the space and so let's just go expecting these exactly even though even the person the background was like it was angry about this okay if you can't use one you should use a number i like the idea that this is how i'm going to program javascript from here on out okay there we go let's check all the things and when i shortcut we can use for this is eval which will let us just run this s code these strings so if we have o we have e we have e c t but oh all right the boolean's true and false are also a nice source of characters we know we can get a boolean with an exclamation mark square brackets and then we can add so you can't quite write anything you're kind of restricted to the amount of strings you can create in the beginning is that fair another empty way to cause that to a string that's going to give us the string false and from there we can extract f in zeroth position and we can extract s in the in the third position if we cast this to true then we can get r in the first position and we can get u in the second position okay well if you let this i and n we can use the special floating point numerical value infinity can be obtained in many ways but one simple way is just to divide a non-zero number by zero let's take what we have here we know we can get one and we know we can get zero in this way we should get infinity and then if we add to this an empty array we'll get the string okay and here actually i've just realized there's a small mistake on the f because we're providing zero in here and there's no way for us to get zero from our current function so what we should actually do is add in a little condition here which says if n is zero then just return zero okay so we've already got a good portion of what we need but in order to get the rest of the characters we're gonna need to crank the crazy ratchet a little bit if you're all good at anagrams you might have noticed that the letters we have so far can spell out some words one such word is constructor now all values in javascript are technically a kind of object and you can always access properties on them with square bracket syntax the following are quite valid in javascript we can actually open up square brackets with a string and c the tostring function simply by adding a string in here and likewise we can use the constructor function which will provide us back the constructor so how can we use this to our advantage if we were to use this on string so we can make a simple string just by adding two empty arrays together we would now actually be able to write this this word construct out using our map but it might be nice to have a sort of oh a more convenient way of doing that so what i'm going to do is i'm going to write a function called from string from string is going to take a variable s which we're going to immediately split into an array of characters and then we're going to map each character to be the fan oh my goodness i never even thought about that oh it's so right of course you could i okay so i went through this exercise a while ago where i tried to make the dumbest javascript program ever print out use rust instead but i couldn't figure out how to do it because i couldn't get all the letters and look at that huh i can't believe this i can't even believe it let's keep on going your insight on map and then we're going to join it all back together with pluses and so this front string if we were to use it and provided the string construct them and then run this piece of code we're going to get quite an elaborate string and i'm going to cut and paste this into the debugger so we can see it what we actually get here is the string constructor and if we take that one step further and we take all of what we just got we add an empty array to it we'll have that as a string where we can extract the large capital s there so let's try that i just held my breath i just held my breath oh gosh i just i i actually just held my breath now there are a couple more constructors that we can abuse in the same way namely the regex constructor we can we can get that to get the letter p and all we have to do is to create a minimal regex something like this and get the function constructor and we should be able to i'm still holding my breath oh gosh now we have one more easy character that we can extract without too much hassle which is the backslash so we have to escape the backslash of course and the way we can get it is to just again create a regular expression but we'll put a backslash in there and in order for this to work because of the way that string escaping works we need to put two backslashes in there and we need there to be two backslashes when we evaluate it actually in order to cast it to a string and then we can look up the index which is simply the number things are about to get tricky again because the characters that we have left over now are not gonna be found in this way we're gonna have to get them another way the two-string function of numbers is actually quite interesting because it takes okay this this is gonna blow me i already feel like i'm gonna lose my [ __ ] when i see this i'm i am genuinely excited right now this can't this can't be real this can't it can't be real this can't actually exist i it's an extra argument and that says which base the number that stream should eventually be converted to so if we would have the number 170 let's say and we would convert that through a string by default that's going to be converted in base 10. so we're going to get the string 170. but if we were to provide a different base say base two we're going to get the binary representation of that if we were to use base 16 we would get the hexadecimal representation and the nice thing is that bases which are larger than 10 they begin to use the alphabet in order to index the numbers so we can use that to our advantages we can now actually make the string to string we can get the letter d by saying that well d would be in a number system d would be the value 14 let's say in hexadecimal sorry 13 d would be value 13. but it would be the value 13 in any number system that let us get up to a character which would be d so we can actually even say 14 here before we would get a weird result like this so if we can encode this which now we easily can we can get the letter d oh my goodness and it's quite interesting to see what this comes up with this should just be validity and this should be from string rather than form string but this kind of monstrosity is what is output by this but if we run this we should see the letter d pop out great how we can get the other three letters this way as well the other three lowercase letters at least yeah you can just get all the letters now to anyone that has used the language of the same name it should come as no surprise but the letter c is going to pose some problems and it's going to force us to do some really weird stuff it requires some lateral thinking and i'm actually going to leave a moment here to pause perhaps you might want to think about how you might make this work okay if you didn't get it don't worry it's not obvious we're gonna need to access a constructor again and let's build this up piece by piece so we're gonna need a constructor but we're gonna need the function constructor so let's just evaluate i am really impressed right now i just want you to know that i don't even know what to do with this information but i feel i feel like i want to know more i want to know i want to know what's happening this in line so we can easily read it and we'll take it away i'll do it we can get the function constructor by producing an empty arrow function and then if we wrap that up we use our from string with the constructor string so when we've wrapped all of that up we should see that we have access to the function constructor but this time we don't want to cast it into a string we actually want to call this constructor we want to be able to use the function that this provides to us and if you don't know what the function constructor actually does as a function what it does is it takes a string that represents some javascript code and it it turns that into a function that can be caused that will actually run the code inside it's a lot like eval in that way but in some ways it's it has a little bit more constraint which can be applied to it please don't take that as a testament to its safety it's it's basically still like running untrusted codes everything that we've put together from here is we're going to be able to use the string return escape so what we're actually doing here is we're we're going to get a function that when we run it is going to return to us the built-in standard library function escape which just like the name applies performs a string escaping to the ascii value of certain symbols if we call this function in line and i run this hopefully we'll see that we have here the function escape and if we call escape and we pass that string then we should be able to see an escape value so what can we escape well what we're going to escape is the map and then the backslash just the backslash let's run that and see what we get we have an escape backslash which is the hexadecimal number 5c and it's helpfully capitalize the c for us so we can now take that whole expression and index it as a string and we have a capital c actually the game is pretty much over now we've got our ultimate escape hatch now what we can do is we can scroll back up to the from string function and before if we had a key that was not in this map then we were just going to get undefined and that's no good if we have a key that we haven't defined here we should be able to find a way to reduce that strength so we can say if x is not in map then we want to get the character code of x the numerical encoding of this character and we want to get into the string constructor and we know how to do that we add two empty arrays together we use from string so we do a sort of recursive call here and the string we want to get of course is the constructor this is going to give us the string constructor and on the string constructor we have a static method and that static method is called from charcode and then to this we can simply pass our character code but we need to encode it in our strange number system so this is our final output and now we have a way to get every single character oh why didn't you just do that to begin with right because i was wondering how we got that capital c but you could just get capital c from the shower code i forget what capital c is in the char system the system of chars what do you think it is quick math quick math i'm gonna go with 63. 63 quick math quick math see or your string from char code 63. oh man i was way off that must mean we're really close five there dang it 67 67. so stupid so stupid i didn't know i thought a 61 was the starting or 60 was starting i don't know what happened out there anyways that we cannot actually access through some other strange way by using all from chocolate let's actually see if this works the way it should so i'm going to run here the front string function i'm going to give it a character we definitely don't have capital z that's going to give us an enormous ridiculous set of characters and let's run eval on that and when we run eval net we can see the capital z so that's it we're pretty much done but we're not quite done because the best we could do now is we could take some javascript code in and we can convert it into this strange set of symbols but it would still only be a string how do we get that code to run well of course we already know how to get code to run here for c we need to just use the function constructor so what we're going to do is we're going to write a function called compile that's going to take some code and all we're going to do with that is return a string which will be the function we know how to get that and then we need to call from string just the code and then this is just now a function but we need to run that function so we just immediately come on okay the results are calling compiler look at that everyone's laughing at him not even seeing the x he doesn't even know about it on the string and in the string let's actually do a consulted log let's say hello world so this is the world's most ridiculous hello world program and it will of course help to not have the letter x there instead of the letter c which this should be let's change to the terminal let's bring this terminal to the bottom and let's run this crazy program it's like looking at some sort of with matrix let's plug that into a file called output.js and if we open that up and take a look at it my syntax highlighter is going to struggle to try and pass this file oh my gosh so it goes on for pages and pages and there's really there's no sense in there but hopefully if we run this we actually see our message hello world so now the next time someone shows you a toy example of the banana that's blowing their mind i hope you point them to this video and show them what can really be done if you mess with typo version big shout out to martin cleber who is the guy who figured all of this out a few years ago i'm gonna put a link below to his website also the github repository where i'm going to put the code of today's video i hope you've enjoyed this load of jazz oh what the hell is even that well what the f i don't even know what to do with this information honestly i don't even know what to do with this i don't i don't even know what to do with this other than i wanted somehow use at least zero or one in production i i don't even know what to do here all i know is i'm so happy i feel so weird right now yeah this yes i've seen i've seen this i i i've seen this i've i've heard about this right so you can encode this beautiful thing and bam and then just look at that just works it just works that was it's so beautiful i don't even know what to do with i don't even know what to do with this information other than i what the f i how does someone okay so just can we all take a second here there was somebody's life that spent likely days trying to make this work out now i would like to make fun of the guy but truly i can't because i am that guy i am that guy maybe it was an accident you don't you don't make a compiler on accident okay you know how many stupid things i've made just because i felt like i could i don't know it just feels right you know like in the moment it feels like you just need to do that this is one of those times