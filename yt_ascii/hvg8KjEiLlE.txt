i have heard that this is very cringe let's get ready to cringe together as one happy family bun 1.1 is finally here and it's a huge update can we just take a second really quickly and just say that jared has has a great voice were you were you expecting this this sassy and sweet baritone to just come trickling in anyone javascript is complicated bun exists to make javascript less complicated more fun and more productive we've made bun faster more reliable and reduced memory usage but we've also added new apis and after many months of hard work we've addressed the number one feature request window support when are we going to as as as a whole as a group of everybody just just let windows be windows and ignore them by the way you know just like the the the the devon human software engineer a bunger you know i don't know about this cutesy thing okay i like it really excited for windows developers to see the speed and developer experience of bun bun install is' times faster than yarn and pmpm and 30 times fast is this one of those fake stats that we're getting hit with right now or is this a real one cuz remember last time we got hit with one of these people are just like yo bro you didn't run it with these two things and you're not actually giving us real ones but but can we just be can we also take one more like just step back if installing your dependencies takes 565 milliseconds a that means they're literally all cached and on your system okay you ain't downloading your npm you're not downloading your node dependencies in 500 milliseconds okay because there's literally a thousand separate projects that are going to be coming down so first off that's just not h that's just it's literally not happening so this is all cash install and second off if your cash install is taking a difference between 31 milliseconds and 565 milliseconds for an install i don't think this is like a wi winning metric okay you install once you work for a while when your project quits working and you have no idea why you delete your node module folder you reinstall so it's like you only do that like three times a day so i don't know if that's like a real big win or not okay does that make sense yeah than mpm on windows and bon run and bon x are over 11 times faster than mpm run on windows oh oh nice okay so this is an npm run they say right here it's actually npx run npx runs npm and npm runs node and then node does node things and then it runs right so i believe it's a little bit more right is that what happens or what does npx do no npx doesn't invoke npm does npx does npx invoke npm i can't remember but either way you can't say those two things cuz you're saying npx and npm right like those aren't those aren't real we've also implemented optimizations for nodejs apis fs reader is 58% faster on bun compared to no js on windows you got to memorize your line so it doesn't look like you're reading by the way you're looking over here at the script the script's like the script is over here you only got one line let's let's make it happen boys let's make it happen just just memorize your lines it's called acting bon on windows has the same great developer experience as you would expect on mac os and linux here we're saving a file on each keystroke and you can see how fast bun is rerunning the changes to the test we've also fixed that annoying turn can we take a quick can we take a quick second here can we look at the random keys being pressed bun is rerunning the changes to the test oh my goodness i'm trying to pause it we oh i almost had it i almost had it developer experience as you would expect on m comm here there we go we're going to get there okay look at that p a o k d p o k dp what layout is that what layout are we getting flexed on right now palansky query but how hold on here let me oh i don't even have i don't i actually can't enable qut on my machine two hands okay here can someone do it for me i can't even enable it well yeah because there's the a there's the asdf yeah see i don't think so i don't think that's query i don't think that's query because where look a s d where's the f okay so you're only using three you're only using three asd asd okay so asd and then p okay a i don't know just seems a little strange a file on each keystroke and you can see how fast bun is rerunning the changes to the test we've also fixed that annoying terminate batch job prompt when you send control c to the process in bun this yeah that's pretty nice you know the hard part is is that sometimes i like control i don't have node on this computer so if i were to open up node pretend i opened up node if i had node on this computer and i opened it up and i started typing and then i didn't want to do something i could hit control c and the first contr c doesn't exit i kind of like that you know what i mean i kind of like that i know a little bit of a chad just works to install bun on windows run the following command in your terminal just run that just put just put it in your just put it in just put it in bro in bun 1.1 bun is now a crossplatform shell like bash different shells have slightly different syntaxes rules and commands on windows rm-rf doesn't work instead you have to download the rim raff mpm package and invironment variables don't work on windows before the command to fix this you have to download and install the cross m mpm package with the bushell the need for these dependencies is gone you can just write a script using bash syntax and expect to work on any platform and you can use the shell directly from javascript the api uses string templating which means you can use javascript variables is i still don't know if i like this also isn't this this is a syntax error right this is an error oh no array buffer must be array buffer must return out of promise okay but either way i don't i really don't i really don't like this yeah bash is awful but bash is useful like the thing is is if you think that bash is great you you you just like i don't know what kind of lead poisoning you received as a child but that's insane okay we all agree bash is not like it's it's not it's it's not great okay this is not a good useful language okay i know bad cop is crying sorry bad cop but bash is also great to have bash has its own place and you use it up until you need an array the moment you're going into like treating your string as an array or doing array operations you've jumped the shark just use go just use zig just use russ just use javascript use anything but bash at that point okay python i don't care just don't keep doing that pretty simple pretty simple rule i think works for most people but having bash in javascript i just don't i foresee nothing but headaches i just feel like like a problem i have is that you're going to like here's something that i'm going to that i'm going to see is you're going to have a bunch of lines that are a bunch of bash calls like what's going on underneath here are they spawning a new process is it a child process how are they getting all this information out it just feels like a black hole of performance on top of that they're doing some sort of manipulation and reading these things to be able like tj and i talked about this how how do they change an rm-rf to be into the windows version of the exact same command right there's like a lot of overhead and stuff they have to do to it to be able to make sure it works and like that's just so much like effort and time into it i just i'm just not i just don't think it's a great idea oh you put a space in the boolean expression yeah you have to recreate the bash the bash what's it called the bash tokenizer and execution all the analysis tools we have to check bass scripts are going to need to be rendered completely useless yeah i know any security that uses some sort of check for bash stuff is now going to have to be even more crazy cuz with string templating you can generate the bash commands right so now you have to like do the string templating and then you have to see what is generated and then you're going to have to figure out if you're doing something that's a little bit terrifying just just reject it yeah okay xz exploit vector created i know this is just this is literally just an xz exploit vector incoming is arguments in your commands it's great for writing quick scripts in your project where you don't want to worry i also would love to ask the question is what who who are these people that when they write a a bash script are needing to run on windows mac and linux like almost exclusively i only like i i i typically i typically find very few cross-platform devs i find extremely extremely few game development build pipelines and you think game development build pipelines are going to be using bun like that that that's is that is that is that your target market cuz i hate to tell you something let's pretend you're right on what you just said i'm gonna go with a how about no how about no scott okay because that's not i don't i i just don't think so i just i again i know maybe i'm a little jaded on this on this feature i just don't i i honestly all i foresee is just a maintenance nightmare like that's it i just foresee a maintenance nightmare i i i foresee a security black hole and that's it and it's going to be a huge distraction because all these little bugs are going to be constantly reported about the parser about how it handles this situation how it handles this situation all these different little cross-platform issues it's just a time sync and a security nightmare and a maintenance nightmare i have no idea why i do that anyways sorry okay we we'll i'll stop letting this section trigger me about things like compatibility issues and it's faster than the existing shell by the way the best part about this is when there is a compatibility issue you're literally stuck dead in the water until they fix it while bun has a lot of new apis we've also made significant progress towards better nodejs compatibility in bun 1.1 the following mpm packages now work in bun we've also added and fixed various web standard apis in bun 1.1 websocket now passes the industry standard autobond performance test suite and i had the pass that site when i wrote televisions all new televisions run my websocket implementation for tvi and i had to pass all the autobond tests auto bon's a great by the way autobon is a great great program it's super new if you haven't seen autobon it's it's good it's a good time it just has like all of the it just has everything you need for websockets it's one of the greatest like test suites of all time just absolutely fantastic autobon is great yeah autobon is fantastic can drop fast on a two autobots with decepticons wait what what is now stay t if you find an mpm package that doesn't work in bun please let us know by opening an issue in bun's geta repository if it works in node.js but not in bun it's a bug in bun bun is fast in bun 1.1 we've made it even faster command line tools like tsc start two times faster than in bun one man you're going to save that extra you're going to save that extra 30 to 80 milliseconds to then use tsc which will take 40 seconds to check your larger project a minute and a half 2 minutes have you ever ran tsc on like a large ass project it it can literally take minutes upon minutes i'm not sure if i i'm not sure if i'm purchasing that yes it's agonizing yeah it is agonizing no thankfully yeah every day yeah 1.0 es build starts 11 times faster and wait someone was saying someone was saying something did i miss something here oh you're just running tsc help getting the help screen [music] out hell yeah hell yeah tsc help this thing this thing this thing is going to give you the tsse help faster than anybody else now me normally i would go in here and go tsse help but i can't run it cuz i don't even got node start two times faster than in bun 1.0 es build starts 11 times faster and v and prettier both start faster in bun 1.1 we've also optimized a ton of node.js apis i mean startup by the way start so the thing that makes startups so important probably not for you as a developer and this is probably where they're failing to kind of really sell this is that if you got to remember what is the what is the play of bun at least my assumption the play of bun is that bun and i'm i'm pretty sure this is all public knowledge i have no insider knowledge or anything like that but i i assume the play of bun is to offer you some sort of edge-based javascript environment in which can be the fastest industry startup time and so these these cold startups and all that is is is all for edging right it's not really for you you know what i mean it's not really for you to be the ones enjoying this it's much more important in aggregate for servers we love edging yeah i'm call me bill gates edge lord over here okay edge lord in bun 1.1 the node http server is 29% faster than in bun 1.0 i don't i don't like this performance test at all it it is very unfair some of the bun stuff i i don't know how complete their implementation is yet so i'm very curious if they would speak on this but with node you can run things like data dog and be able to get all this extra information out about every single request and all that cuz they have a bunch of async hooks where last time i checked that wasn't true with bun now they may have changed things if they both allow all the same async hooks and all the different promise like the async resolvers and all that that exist and they're faster like that's absolutely incredible great work but if they still don't if they're not in parody with node then it's kind of like a fake ass exercise you know what i mean it's not real it's not actually doing anything you know what i mean it's not actually you know and using fs re to list files in a directory is 22 times faster than in ojs but we didn't just make fun faster and bun 1.1 we've added new apis to make your life easier as a developer i'm still struggling with how baritone his voice is i've met him in person and all that and i've heard him talk but it's never really struck me they just have a really whatever microphone they're using just really captures that that those deep sassy tones just so well bun glob is a fast api for matching strings and files using glob patterns it's similar to popular npm packages like fast glob except it could match up to three times faster we've also also this feels like a crazy this feels like a crazy performance comparison i don't know if you guys caught that that's not an m that's an n that's crazy performance testing i would i i i am i i am doubt let's just say i'm doubting i'm doubting hard [music] doubting because i don't even like i just am not convinced it is accurate enough whatever testing method you're using to be able to test specifically for that we've also added bun sver a buil api for parsing and sorting sver strings bun sver is up to 20 times faster than the popular node sver package again microc seconds i mean this is again it's very hard for me to to buy a lot of this stuff okay i have a feeling there's a security hold yeah again feeling there's a security hold performances usually comes with the security hole you know you're you're right because typically to the the easiest way to be faster than somebody else or to be faster as a project is to just not do as much like that's that's the that's the only way to truly make real performance win is just don't do as much especially when it comes to jabber script be fast don't do it really slowdown comes with from all the back doors that's how you know you've been back doored is when bun slows down how is zig compared to c++ honestly stupid argument if someone tries to make that as an argument it's a dumb argument here's the simple reason why zigg and c++ both manage memory right they're both at the tip of the triangle for performance performance right you're going to see rust in here you're going to see c in here you're going to see any other language it does not have a runtime so there is no there is no a garbage collector all of these don't have garbage collectors they don't have any of that they're just in their odin would be in here as well right it's all that kind of stuff so they're at the tip of the pyramid of performance right so don't ever like it's it's a dumb it's like it's a dumb comparison to make because it's very very hard it it really it it's skill issues who writes the slowest and who writes the fastest especially if they're all compiling with llvm then you're just like well who who did who does that the bestest right i think zig has a non llvm build if i'm not mistaken so therefore maybe they have some sort of like hey we have some sort of better build optimization that's not llvm therefore we we're the winner like okay then maybe yeah maybe there's a there there but for now if they're all compiling to the same intermediate lang ang it's just like it's not that it's it's it's really not a very interesting it's not a it's it's yeah surely performance difference between these lower level language is negligible absolutely it is one of the ways we validate that bun is efficient and correct is by using its built-in testr runner in bun 1.1 we've made it even easier to switch from just by the way i do think this is great i i really truly think this is a great iteration of of java script is put bringing in test test stuff into the into the runtime itself can we all agree that like this is good this is really good it's it's crazy that we're this far and it's only starting to happen right now a buns apis are super nice yeah i'm sure they are but this is a good this is a good first step okay every other normal language in the universe has it it's terrible i do not see how it's terrible i see that this is this is only a win can you explain to me how that's terrible i feel like you've been javascript pilled too long for for it to be terrible if you think it's terrible my guess is that you only exist in the land of jav javascript expect matchers we've also added module mocking which supports both commonjs and esm bun is able to update mock very very nice i mock's great or mock library within bun fantastic absolutely happy about that the work between commonjs and esm very very good mocking though that's how i feel about mocking when you're mocking remember you're testing your feelings about how the universe should work just remember that just remember that all right people are saying w take bertron okay what what' you say pon pon pon reasons [ __ ] okay okay i gosh i just don't even know what that you are mocking future you corgi just hold on corgi before you can run code you need to install dependencies that's why bun is also a package manager in bun 1.1 we added support for dependency life cycle scripts unlike npm can we just take a second and just say one of the biggest failures of node is not as having npm as some like separate but required thing like where does where does node start and where does npm end right they're like they they are the same thing i know people want to be like no that's not true it's like is it is it is it not true am i being april fooled or is it your birthday the bun logo is his head it's not funny okay that's not funny we're not flip take it out flip take flip take that out flip take it out get it together all right bun will only run scripts from packages that are in the trusted dependencies list in your package json the 500 most depended on oh that's nice that's nice you can you can say which ones that allow scripts to be ran that's cool i like that i like it from packages that are in the trusted dependencies list in your package json the 500 most dependent on packages on npm like es build are already trusted by bun and we'll just security [laughter] defeated it only needs to be in the top 500 that's it i mean the fact that dude i mean i know i know it's not funny it's not funny but the fact that it t that we have a top 500 as like a reasonable number is hilarious considering most thing i mean what the hell are we how are we doing 500 500 what how many dependencies do you need happy birthday thank you corgi work we've also made it even easier to migrate from npm install to bun install when you run bun install for the first time in a repository bun automatically migrates from package lock json to bun's lock file bun lock b we want developers who use npm or yarn to feel at home when they switch to bun bun. that's a good move also by the way that's a really good move by doing that that is you're kind of ensuring your supremacy because really what you want what you truly want is that you want developers to start using bun in nonb buun projects so that way it just feels like that's the default one you actually use you don't actually use node like no developer actually uses node we just use we we we use bun and so like that's that's that's that that's a huge that's a huge w i understand 500 depenses is not a lot for a node project but it's a lot for every other language in the universe it feels crazy okay it personally like it feels crazy okay to me that that you'd have 500 dependencies okay wild made a lot of improvements to bun's developer experience we've simplified stack traces so it's easier to find the context that matters most to you on we've simplified stack traces so it's easier to find the i don't know if i like that i kind of like because a big problem i have with this is that sometimes you have this problem where where an actual issue does exist within their stuff and you kind of want to be able to peruse verbose is always better i i would i would stag traces so it's easier to find the context that matters most to you long as that's an opt-in feature i don't see that's a problem i don't think that's a problem if it's an opt in feature we've also added syntax highlighting to the snippet of code above errors for better readability no that's it that's bun 1.1 bun is faster more reliable and has tons of new apis and bug fixes most importantly bun now supports windows to get started with bun ren any of the following install commands in your terminal we fixed over 900 bugs since bun 1.0 and stability is our number one priority nice if you encounter a i i really think that i mean personally i think bun jumped the shark or not jumped the shark jumped the gun on on not making more stability earlier meaning that they went 1.0 but you're still getting seg faults and stuff and i i really think that that hurt bun's initial adoption curve they should have remained in this beta stage a little bit longer and just had and just had enough time to make sure that it's really really there before they went that because it it is i think i think me personally it really hurt the credibility for me bug that we still haven't fixed don't forget to upload the github issue or create a new one and if you want to join our team check out our careers page we're hiring system engineers to help us shape the future of javascript bun 1.1 is still just the beginning i do like the only way to make javascript remotely good is that you have to hire a bunch of people who are excellent at systems engineering and they have to do a mon a stupendous and monumentous amount of effort to get it to work it's an irony it's it's an irony for sure that those who write the things that allow you to write js do not get to write js there there's something funny there something funny something funny trust is a bucket that fills one drop at a time and when it spills it empties completely that's a good way to put it that's a good way to put it i mean overall i think bun's doing great stuff i hope you guys don't take that this video some like super negative viewpoint on bun it's not a negative viewpoint on bun it's just that i don't like fake like i don't like fake fake metrics i think that if it was framed as like you know since bun's going this direction startup time's really important and this is why we love this is why we love this i think the other ones like the nanc comparison and the microsc comparison like i'm i'm like super doubt on that one like i'm i'm high skeptic like if there's a big win explain why it's a big win also i think something that really is needed explaining why you're different why are you faster like don't just say you're faster like why are you faster these are the reasons why we do it because if you you truly do have like a categoric hole in what you do not provide meaning you still don't have all those async libraries and utils that no no. js provides then yeah like to say that i think is a really reasonable thing to do and it builds trust like if you can build trust it's very important and one of the best ways to build trust is to explain why you're different and why that makes you faster you know what i mean because if you don't do that and then people are like yeah you're faster but look at what you don't provide then it just looks like you're lying right right cuz i can only i can literally only take it that it's not out of ignorance that you're doing it maliciously right because you've already done this multiple times and people have already called you out multiple times so if you continue to do it it feels malicious you know what i mean so hopefully hopefully those are real metrics with real compatibility with real you know onetoone stuff would you prefer a js as it is now with its problems or a metaverse system owned and operated by epic games or the like i don't know i don't know like the real talk i i just would prefer less i think everyone that writes javascript like they just need to go write something else for a while like if you've never written another language than javascript you should just try it out get good at anything try zig why the hell not try zig try go try rust try o camel try elixir try anything just do something other than javascript for a little bit of time try a different system feel it out feel and understand why something is good something is bad understand some of the the maybe some of the holes that you you're in you don't realize you're in you know what i mean sometimes you don't realize that you you've you've created a a false perception of the world elixir yeah elixir anyways hey the name the name is bun 1.1 is out huh huh