we've talked about onion routing and tor, and now i'd like to address the prickly subject of hidden services, right? aka the "dark web". so max has done a good video on the dark web, and so you should definitely watch that one first, so you know what it is. but it's quite a controversial topic, because a lot of what happens on the dark web is illegal, right? there's no two ways about it, that is true. some of it isn't, right, and a lot of what happens on tor in general--in fact the majority of what happens on tor in general, you know high into the 90% and that, and above--is perfectly fine, right? it's just anonymous users browsing the web, doing regular things but the tor hidden services are ones that the debate is about because they're the ones where you sort of say 'well, look, is it worth this bit of encryption? is it worth, you know, all the criminality that's on there and so on?' so here's my cloud--my tor cloud and in essence, we've got lots of people going into the network. lots of encrypted layers and things happening, bouncing around, and then people coming out of the network to servers, right? now the issue, from a security standpoint is what happens if there's someone sniffing? here and someone's sniffing here and they can correlate traffic between the in and the out and work out what it is that i am doing specifically right then the whole report the whole point of tor which is anonymization? has been defeated, right? we already have encryption, so that isn't the point of talk, that's just how, they do the anonymous communication so the dark web. or a hidden service to use the proper term, is in essence where this server moves inside this cloud right so now we have a hidden service running inside this cloud and there is no b that's the idea right so it makes it very very difficult to find so there is now a circuit that goes somewhere between a around the place to this hidden service and at no point has that left the network so there's no traffic correlation that can be done, right? all of these are just tor  sale messages that all look exacly the same. now, the way that tor does this is very very clever. euh, and i look i will look into a little bit of detail on the protocol that it uses but it's managed to form a protocol where neither i nor the server know who each other are, but we can still have a conversation which is kind of nifty? okay so then, let's start again with onion routing so, onion routing is a protocol that could theoretically be implemented elsewhere. there are other mixing networks and things and other anonymization networks but hidden services is put predominately in the domain of tor. and tor got the most users and the most nodes and it's the biggest and is in the news the most. let's draw a little bit of a network again, so i shouldn't have drawn these boxes like this because now it takes me ages so here's my server here's my client and these i'm just going to drawn with boxes because otherwise it's going to take far too long these are onion routers, so remember in normal onion routing the client will produce some [circuits] [or] some hops and then they will just talk to the server but a server will be out on the normal web doing normal server things and won't be anonymous what hidden services do is anonymize this server so they allow both the server and the client to talk to each other despite the fact that no one knows who each other is which is quite impressive [now] of course if you then use [that] service connection to log in you're going to know you are but you get the idea the server has to lay some groundwork down before a client connects use a hidden service right so there's protocols in the tor specification for doing this but [what] the server will do when they come online is they will pick three onion routers at random and name them as introduction points so let's pick them at random now these are just normal onion routers they're very likely to be just doing regular normal routing tasks like circuits through other clients into servers and things some of these might be exit nodes entry nodes and so on but as far as i know all onion routers can, also act as introduction points it's not a big job [i] didn't require a huge amount of bandwidth the server will make connections circuits to these introduction points they've either full on tour circuits with three hops in between them the idea being that these introduction points know they're going to be introducing people to this server but they don't know who it is why it's already the server is hiding behind a layer of anonymity here it will send them a message to say i'd like you to act as an introduction point and then it will create something called a server hidden service descriptor which i was [write] down here that will include the service public key for occasion purposes but i won't dwell on that particularly but also crucially the ip addresses [of] these introduction points here now these are all public anyway they will publicly listed now it will publish this descriptor to something called a distributed hash table that is to [say] all [of] the routers on tor will hold some in some part of the information [on] all of these hidden services and the idea is that if i try and look up a hidden service the [roots] are responsible for it will give me back the descriptor by including the addresses [over] the introduction points now the key for this hash table is the onion address right so the onion dress that everyone knows about is actually derived from the public key [of] this server and is in essence the key but gets these ips out of the distributed hash table the whole point of this is [that] the onion address isn't publicized on the global tor network you just find it other ways like on a net on an internet or your friend tells you or? in an email or something like this the [waiver] [the] distributed hash table is programmed the vast majority of nodes won't know what the description is for a given key i? only want more probably or couple so there's an inherent security here it doesn't until recently it's also made it quite difficult to work at how many hidden services there were so this is all set up now the server sits there and waits for [internet] [connections] [or] people to ask for a, web web file now and these onion routers these ips the introduction points just sit there being in being normal routed and waiting here me i want to connect to this hidden service and someone gave me the onion address so that's really, what i need so what i do is i? request the descriptor off the hash table and it gives it back that has the three ip and i pick one at random right let's say this top one here what i'm going to do in essence the short version is i'm going to ask this ip to introduce me to a server and then we're going to meet in the middle at someone [debut] point that's the idea so let's work out how it works i've sort of run out of colors so i'm going to go? over the orange pen here it's a bit bright i choose a rendezvous point at random and i create a [tour] circuit to that rendezvous point remember that essentially all of these arrows are the full connections this one has two hops on it not three because the rendezvous point is a third hop so it goes on like this now i send a message to the one 7-point saying i'd like you to introduce me [to] the server by this introduction point and i want you to send it the word cookie right now that could be any string [it's] not important [the] point is sort of like a one-time password kind of thing to verify but no
one else has got involved in this conversation the rendezvous point creates a circuit to this ip and sends it the word cookie it also sends its own address because of course this, doesn't know it because the circuit and we [need] to be at a rendezvous here so this ip forwards the cookie on to the server and at this point the server can either accept it and decide to try and make a connection or do nothing right so you can imagine a situation where instead of a cookie some kind of special password but you need to be able to connect to this website and the server just does nothing that's that's one thing that could happen right they have an authentication token i think but at this point the introduction points job is done there is no more these would be the serve their purpose all they do is forward the cookie [onto] the server right bear in mind, we don't know where it is and eat the server decides whether it's going to connect let's assume because otherwise this will be a much shorter video that the server does want to talk said he to the rendezvous point so it creates another circuit i don't know how many 1 2 3 4 5 but at [5] we've got [six] circuit right across the tor network to the one david point which is the cookie of the wrong very important details yes that rendezvous point details will be well [it] be attached to the same message with the cookie and yes good question now the server sends the one they've appoint a rendezvous please essentially message [weave] the cookie in it and the mod labelled point looks at these two cookies and goes well i was requested of [one] they [blew] by this guy with this cookie i've received a connection from some server also with the cookie they must be talking about each other right that's the idea it could be doing lots of on the moves at the same time with different cookies and it will then act as just another hop on this network and connect these two up so this comes over here like this and this comes down here and they kind of get bridged by this rendezvous point here convened on the rendezvous point [acts] like a normal [onion] mu 2 and just decrypt messages passes them out the other side like always so for anyone that's sort of lost count there are at least six hops here right there two intermediate node on this circuit then the rendezvous point in three intermediate nodes on this circuit right it's just part of the protocol [that] there's only [two] this side that's obviously going to be quite a lot slower than normal talk these could be all over the world like this it's going to take quite a long time but there is no real way of getting in on this conversation right if you're sniffing here or sniffing here all you're seeing is encrypted [tor] cells all of 512 bytes long jumping around this place she's got, no idea what any of them are right very very difficult to track that's why, it's so difficult to find hidden services okay because they're hidden yeah kind of the point they, wouldn't have couldn't they? [did] something else no they did in term they didn't name it incorrectly to say sometimes were vulnerabilities found in the protocol right or compromised knows which allow hidden services to be found this happened for example silk road - but that's not [that] common right and there's the bigger the network gets the more beautiful no combinations are the heart of that process gets now as an aside some servers don't need anonymity and this many hops is too slow [all] right so they want to protect their clients but they don't care about but if people know who they are facebook for example so facebook work foot-tall recently to introduce something called single onion in that case the only difference is the bit server doesn't bother with these three hops it just goes straight to the rendezvous point now that obviously [forgoes] servers anonymity because [the] one living point knows what it is but it takes a puppy we know [whether] servers are i think right so they don't mind about that their business is protecting their customers they don't care but we know where their servers are so that's an alternative and you it's quite a lot faster because you've removed three possibly global hops from there what benefit is [that] facebook - you know some of just using a normal tor connection facebook there's a small chance if you're using a normal tor connection that some will be sniffing here and sniffing here and do traffic correlation and work out what's going on? right [there's] no chance about happening when it's a hidden server it never leaves the tor network that's the thing if you imagine that cloud you're talking to facebook entirely inside that cloud very hard to get in but on the other hand facebook server location is actually known because if you were operating the rendezvous point and facebook said we'd like to connect back to the client you'd immediately know that because it's [facebook's] server so it's like a halfway compromise and i think a fairly reasonable compromise so it's facebook putting one foot, inside the cloud yeah yeah one foot inside did to talk loud with messages encrypted once with k3 it's encrypted another time with k2 and when it's encrypted a final time with k1 now let's think about what that means it means that only this routes are here