what is up guys welcome back to another low level learning tutorial in today's tutorial we're going to be talking about pointer arithmetic as it applies to the c programming language when people learn c typically the hardest part about learning c is understanding how pointers work first and then second when you get into pointers how to use them in a practical way and the practicality of pointers comes from what's called pointer arithmetic right so as you're taking a single pointer that you create and you're manipulating it to do something how do you make it useful for your program and how do you make it make sense for yourself so we're going to use an example here where typically pointers are used to point to items that are bigger than an integer type because you can't pass those around in function calls you need to use pointers to address them so we're going to create a structure struct excuse me called person and you know a struct is just a structure in c that has multiple attributes of basic variable types and then the struct person can have multiple attributes we'll do person has a name and it's got 64 bytes and then maybe person also has an age okay so now we have this structure and then in theory the size of the structure should only be 64 plus size of int so 68 bytes if it's properly packed there are some times where the c compiler will insert arbitrary room in there where you don't actually get exactly 68 bytes maybe like 70 or 72 but just generally speaking this is about a 68 byte long structure okay so now what we're going to do is we are going to make an array of those structures in our stack for main and we're going to use that structure for our example here so the way you make an array of structures and see if you don't already know is you say the type that you're going to make and then you give it a name so struct person is going to be called people we're going to have 100 people so people 100 this will make an array of persons on the stack in our main function now if we wanted to edit this if we wanted to go through and either clear the the memory of or assign a value to all these people we would have to make a pointer to act as a cursor as we walk across the array right so to make a pointer into a structure we need to say struct person which is the type we're pointing to and then a star and then we're gonna say p person and what does it equal to it's equal to the address of people okay so what did i say here this is a person structure pointer its name is person and it points to the address of people so now at the end of this line getting executed p person points to the first person in people i know we're getting pretty crazy with our english here but it's gonna it's gonna make sense i promise this points to the base right here so now if i wanted to iterate over this list and i wanted to do something to every single person on the list i would have to do a for loop right so into i equals zero four i equals zero i less than 100 which is the number of people that we have in this list we're i plus plus pretty straightforward so now here's the problem that people typically get into so we're going to do our first assignment we're going to say that p person age equals zero so all i'm doing here is i'm setting their age to zero i'm clearing the list and we can do the same thing for name but we're not gonna do that so the question is how do we make p person right our pointer to a person point to the next person right typically people get very caught up in this and they don't understand the math because what it what is a pointer a pointer is just an integer value that has an address in it right it points to a location so people would sometimes say okay if this is an address i need to increase it by the size of the element to make the next address the next base so some people will typically do this p person plus equals size of struct person which should be about 68. okay so this is actually incredibly wrong and will give you crazy bugs here is why okay the c compiler is aware that you are talking about a struct person already so what it does is it actually multiplies the number that you plus by the size obstruct person so this actually increases it by size of struct person times size of struct person so what i actually have going on here is we can use our make file ah that's wrong oh actually that's correct it does crash so this is going to cause it to crash almost instantly i have our make file creating our program here and then i'm actually going to object dump and pull out the assembly and show you guys what's going on so we're going to full screen this we're going to go to our main function okay so i know there's a lot going on here but what you need to see is this part here right for some of you guys this may be a lot of assembly i know our channel is fairly assembly focused so for those of you that get it congratulations if you don't not a big deal we're going to walk through here and kind of show you guys how it's working so we are in our for loop at this location this is where we set i equal to zero we then jump into our for loop at c4 at c4 we compare that i value to hex 63 or 100 if it's less than or equal to it we go to a4 and then in a4 we add the offset into our array into rax and then we set age equal to zero right so that's this happening right here but remember this at this point is supposed to be after we've set the age to zero we want to increase our pointer by the size of a struct person but what it's actually doing is increasing it by the size of the struct person multiplied by the size of the struct person because it knows we're already dealing with people so the actual right answer the way that we have to index into this array is simply by doing p person plus equals one i know that looks wild i know that looks like it shouldn't work at all it's like well low-level learning isn't that just going to make this point into like the 63rd character name or whatever nope the c compiler is actually doing you an absolutely huge favor and it knows hey man we're cool i know you're dealing with people i know that when you say plus one you want to go to the next one and not you know the next byte in the array so we can actually make that real quick note that it doesn't crash this time and then we're actually going to go in and we're going to object dump that value and we're gonna go to main we're gonna find our loop here so here's us setting i equal to zero we're gonna jump down to ac excuse me now we're gonna jump down to c1 c1 here compared to 63 if not go to a4 a4 boom boom okay and now we're gonna add hex 44. guys what is hex 44 well let's ask python 68. wow did i not say that 68 was the exact size of struck person it all comes together so what we can do here now is keep going with our list and we can do things like p person name of zero equals zero that will null terminate the value so that we don't get any output from it we can do a whole bunch of cool stuff like that so guys i hope that this video did a little bit for you it showed you kind of why pointer arithmetic comes off as so complicated but at the end of the day it's really not that hard it's just the compiler is already aware of what you're talking about let it do the work for you we can jump over every other person we can go to every third person or every fourth person because the compiler is already aware of what you're talking about when you're doing pointer arithmetic guys if you like this video if you learned something or if i made your life a little bit easier do me a favor hit like hit subscribe and i'll see y'all in the next video still crashed not sure why take care [music] you