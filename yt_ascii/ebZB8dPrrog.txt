in this video i'm going to cover how you can create your own custom exception classes and why you would actually want to do that instead of just relying on the builtin exception classes that python offers exceptions in python are a way to handle errors or unexpected behavior in your code and exceptions are a really helpful tool next to of course making sure that your code is high quality and robust if you want to learn how to detect problems in your code faster check out my free workshop on code diagnosis this about 30 minutes contains a ton of practical advice and code examples that you can apply right away to your own project go to ar. c/ diagnosis to enroll link is also in description of this video exception based error handling is quite common in many programming languages though different languages do this in different ways for example java allows you to throw any type of object as an exception whereas python relies more on a structured hierarchy of exceptions so the top of that hierarchy is the base exception class if you want to build custom exception classes then you need to create a subass of exception or one of its other sub classes here i have a simple example of a person class person has a name and an age there an age property that returns the age and we have an age setter and in this case we have an exception if you try to set a negative value because of course people can't have negative ages and then in the main f function i have a try accept blog so we create a person we set the age to minus 10 and then we print the name and then what we do is that we catch the value error in this case if we try to set the a to minus 10 now of course you never would explicitly do this in code but you can imagine that this is part of a command line interface and a user might type a negative number and that means you need to handle the error raising an error in python is really easy just use the raise keyword and then you specify the type of error that you're going to raise in this case we raise a value error which is a built-in error type in python and we catch the error by using the accept clause so what will happen here is that this runs and then in the main function because this code is part of try then if there is a value error here then this accept clause is going to catch that and then run this code so when we run this you see that we get an error that h cannot be negative and that comes exactly from raising this value error right here now python has quite a few different error types like value error but they can be a bit generic and cryptic to the end user if you use them so instead of that you can also use a custom exception type here's an example of what that might look like so i have a container class and the container has a limit and a current weight and we can load items on it and we have to respect the limit that this container can support and if the new weight that we compute by loading an item onto the container exceeds the limit then we are going to raise a weight limit exceeded error so that's a custom exception type that we've defined here so you see we created a subass of the exception class and they added an initializer where we can then specify extra information such as what is the limit that will not allowed to exceed and what is the current value and then we store that in the exception object so this is one of the nice things about using custom exceptions that you can actually pass data to them and then use that data in another place in your code so here we use it to construct the message but you don't need to do that you can also when you catch the exception then do something with these values here's another example of a type of error that a container can raise so if the weight is less than zero so of course when we load an item onto the container it can be a negative weight then it's going to raise a weight negative error and there also we pass an argument which is that the weight that was passed to the function and the way i set up this weight negative error exception class slightly different from weight limit exceeded error just to show you the difference here i'm calling the initializer of the super class in this case i'm not doing that and i'm simply setting the message directly now this is a bit easier to read in my opinion but at the same time you might not properly initialize the super class this way so it might lead to unexpected behavior so from a readability perspective i think this is better but in order to do it properly this is probably what you should do to set the message now there's four keywords that are important when you're dealing with exception which is race to raise an error we have try which tries to execute code in the block we have accept that allows to handle particular types of exceptions and we have finally which is code that is run after the tri block in all cases whether there's an exception or not in this example we have a file variable so we open data.txt doesn't really matter what's in there but that can potentially raise an io error if there is some issue with reading the file and if that happens of course we want to handle that exception and then this is what it's going to print then we have an else block which is also something that you can do as part of the exception handling framework in python and this is run when there is no exception so we try this if there's an exception then we do that else we do that and the finally block is called in all cases so it doesn't matter if there's an exception or not finally is always called so in summary try means we try to run this code except is going to be called if there is is an exception else is going to be called if there is no exception and finally is called regardless of whether there is an exception or not so that gives you quite a bit of flexibility in terms of control flow now exception handling though very commonly used is just one way of dealing with errors languages like rust use something else namely montic error handling if you want to learn more about monads and how monatic error handling works check out this video next where i explain exactly what that is and how you can use that thanks for watching and see you soon