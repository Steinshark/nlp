hey guys and welcome to a new series which is django web development with python now if you haven't heard of django before essentially it's a full stack web framework that allows you to create websites using purely python and a little bit of html now this is really awesome because typically when you want to create websites you've got to use a combination of languages you gotta use javascript html css all this kind of stuff php but if you already know python this is a really nice and fairly simple way to actually create fully functioning websites and that's what i'm gonna be showing you throughout this series now this first video is gonna be dedicated to setting up our project understanding a bit about how django works in getting the server kind of running on our local machine and then later in other videos we working with databases templates making fully-functioning websites and hopefully near the end i will work on a large project and show you guys how we can get everything set up to create an actual website that you might be able to use so without further ado let's get started now the first thing that we're gonna need to do when we're working with django is you need to install it so i'm assuming you already have python installed if you don't you're gonna have to go ahead and do that but from there we need to install a django to do this we're simply just going to open up our command prompt you can just type cmd in little thing here and you pip install and then django like so now i already have this installed so i'm not gonna do this but if for some reason when you hit enter and this doesn't work it means or it sounds like pip is not in your path or something like that click on the video that i'm gonna have a link there's gonna be a card to it and a link in the description it's called how to install pi game but this goes through how to fix this pip issue so just watch to that video and it will explain to you how to fix this issue and when it you type pi game when it says like type pi game just type django instead and that should hopefully fix your problem now for me i'm actually working in a virtual environment for django don't this doesn't really mean anything to you don't worry about it so i'm just gonna activate that now but what we're gonna do to start our project is we're gonna create a directory somewhere accessible that we're gonna install all of our kind of django stuff into so i've created one on in this kind of directory system here so desktop python youtube django tutorial so i'm just gonna change into that directory by using cd so it'll cd into desktop cd python cd youtube and cd django django like that so now i'm in this directory but if you guys don't want to do that or it's a complex path all you can do is open it up your folder here and then type cmd and it'll open up a python or a cmd window that is in this directory like that for you okay so now that we've do that we've done that what we need to do is we need to create a brand new django project now to do this what we're gonna do is type django - admin and then start projects i believe that is and the name of our project which in this case i'm gonna call my site now you can name this whatever you want however if you try to name it the name of a python package so maybe like numpy or site or something like that it won't work so if you get that error just try changing the name to something else so i'm gonna do that and now you should see inside of my django tutorial folder i have this new directory called my site now if i go in here we'll look through some of the files that we have so we have this managed off high file inside the root directory of my site and this is what we're going to be using to create applications to run our server to do all kinds of stuffs this is important file to use and then inside of my site so the other directory we have a few of these files like this i'm not going to go through what all of them do but we will be modifying this urls file later in the video okay so that's a brief overview of what that is so now that we've done that we've actually created a django project and we can test to make sure that this is project is working by just running a server on our local machine that's gonna allow us to connect to our website so right now when all the stuff we're going to be doing is known as development so essentially we're just working on our local machine our website is not live on the internet like not anyone can go to it but when you run this it's going to allow you to connect to it and view it as if it was live on the internet but it's just running off our local machine to do this what we're gonna do is we're gonna type python or sorry actually one step before that we need to change into this my site directory so right here we're in this directory now we need to go into my site so to do that we're going to go cd my site and now what we're gonna do is we're gonna run this manage python file with a few arguments so to do this r and do python manage if i do a space here manage dot pi and then we're gonna say run server like that so let's hit enter here and what we're gonna do is now we're gonna start running a server on our local port which is actually 8080 which is going to allow us to connect and you our website we don't have anything on the website yet but i will show you connecting to it so to connect to this what we're gonna do is just copy this http link here looks like a little ip address and we're gonna go to google and simply paste that in the bar up here so when we do that you should see a page that looks like this you don't see this page rewatch the last few minutes of the video and make sure you followed all the steps correctly because you should see this popping up all right so now that we have that we'll leave that open and i'll quickly mention that right now this is running on port 8080 if you for some reason port 8080 s blocks or you want to run on a different port what you can do is simply when you type that run server command after run server just type the port you want to run it on so for example if i want to run it on port 50 50 i don't even know if that's a port but you could just hit enter and then it would run on that port and it would give you a different address to connect to the website okay and also if you want to stop the server from running which is what i did i just hit ctrl + c on the keyboard okay so now we've got this we'll close this up for now and we'll look at that after what we're gonna do now is create what's known as an app now right now we haven't actually created an application or any views or any web pages for our site we've just kind of set up the environment that's going to be hosting that site for us that's kind of a way to think of it so if we want to create an application which is what we're gonna run from our kind of environment to do this we need to what he call it so we're already in this directory we need to use this managed file once again to create that so to do this i'm gonna do python and then i'm gonna go to manage manage dot pi and then type the name of or sorry start app after this and now type the name of whatever app i want to to create so in this case i am just gonna type test as my app name but you guys can type whatever you want actually know what let's change this to me so now that i do this i have python manage top i start app and then i hit enter like this now you can see that it should create a new directory inside of our my site directory called main now it's very important that's in this directory if it's not there is other ways to access it but it's not going to work for what i'm going to be showing you so now we should have a directory system that looks like this django tutorial you have a folder called my site you go in there you should have main which has a few files in here which we'll talk about after and then it has my site and this manage dot pipe manage python file ok so now that we've done this let's rerun our server and connect to that page so to rerun our server same thing python manage top i run server and we'll do that we'll copy this link once once more and just run this up here alright so there we go so now everything is is working fine so what we're gonna do now is we're gonna start modifying some of these python files and actually displaying our own html code on the website now it's a bit of a process make sure you guys are following along for this because there is quite a few steps and if you mess up one slightly it will result in a few issues happening in your with your website and connecting and all that so what i'm gonna do is i'm gonna open up a text editor in this case it's sub line you guys can use whatever you want as long as you can edit these files and just understand what i'm doing so i like this just because as the directory system on the left here so i can easily navigate between stuff so what i'm gonna do will close these up for right now is i'm going to start by going into my main folder and going into this view stop high five so this views file is what's gonna actually store the different views for our application now a view you can kind of think of as a web page and this is where we're going to write a essentially the code that's going to serve what's known as http requests and show some stuff up on our website now to do this the first step is to just import something or so i'm gonna say from jingu dot dot http and then response we're going to import http response now i believe i probably butchered this yessiree so it's actually just django dot http is that correct lowercase h my bad guys so django to http import http response now down here we're going to create a function and this function is going to represent a view now we can create multiple views here but for now we're just going to stick with one and i'll be showing later on how we can connect different views and link to those and all that so we're gonna site define index we're going to put in here response and then what we're gonna do is we're simply going to return http response and in here we're just going to type some text now you can type whatever you want i'm just gonna say tech with tim and here and this is actually our first view now what goes in here is html code if you don't put any tags so for example like i don't put h1 sloshed each one it'll just show up as like standard text but if you want to create a header or something you can just do h1 and i'll be talking about how to do more complex html stuff later so that should be it for this file right now and what we're gonna do next is we actually need to create a new file inside of this main application that's gonna represent our urls and we'll talk about how all this works so second so i'm just gonna create create a new file here so file new file and what i'm gonna do is just make sure i save this and i'm gonna call it urls dot pi but it has to be inside of this main folder so it should be in here okay so urls dot pi now in here is where we're going to define the paths to our different web pages and once we do the other layers another url file we have to modify as well but this one is gonna represent the urls that go to the different views that we have in this file so for example right now we have one view but if we had another view so like if i copy this and paste this down here then we would have to define that inside of the urls file with a certain path so we can determine which view we're gonna go to based on whatever path the user types in in the search bar at the top okay so you are lci and what we're gonna do in here is we're gonna say from django dot urls import path like that okay and then in here we're going to say from dot views or sorry from dot import beats now this essentially means just import views from the current like directory that we're in so that's how we'll do that and then in here we're gonna type url you can hear what we'll do is simply say path and then we'll put a comma after that and we're just gonna type a blank string and we're gonna type views dot index and then name equals index like that now what this is gonna do what we'll talk about this more later because we have to do some other stuff first is essentially say if we get into this application and we're just on the home page so we don't type like slash home at just the home directory we're gonna go to the views index page and that has the name of index and what that means here is we're gonna serve this http response which means that once we go to that page it should show tech with tim in a header one on the page this will make more sense once we do the other url file and i can show you how we kind of navigate through it but for now just just have this typed in so that's actually all we have to do from inside of this main folder now what we have to do is we have to link this application to our project now remember this this django tutorial folder right is the project for our website and this main folder inside here is the application that we're gonna link to our project it's a little bit confusing but you guys should understand in a second so what we need to do is we need to essentially set the url that's going to link to this applique because we can have more than one application inside of our project so to do this what i'm going to do is go to the url files inside my site and this should actually already be created for you you should already have this code and i'm simply gonna modify this right here so from django urls import pack and import include now after this path here i'm gonna copy this and paste this directly below it now what i'm gonna do is i'm gonna say that i want to navigate to this application when the user types in a certain path what i mean by path is let's go to up here right now we have this okay but when i say path i mean like if you type slash home the path would be slash home right and we would have to know where to go if you type slash home just like if you go on a website and you do slash login or slash sign up you get directed to different pages so that's what we're doing right now so maybe we have another page and it's called sign up or something like that so we have to define when we type certain paths where we're gonna go and that's what we're doing right now so we already have one path which is known as admin now admin gives you like an admin dashboard and we'll look at that in later videos but right now it's not super important but we want to define the path that we should go to automatically when we type something so right now i'm actually just gonna leave this as blank and what this means is if we don't type anything so we just put in this main url bring us to whatever page i'm about to define here so in here i'm gonna type include like this and then what i'm gonna do is in strings here i'm going to go to main dot use i believe actually start main dot urls is the correct page there so what this means now is if we don't type anything for our path we will automatically direct ourselves to the main urls file now the main dot urls file is this one right here and what it's doing here is it's gonna look at what path we've been given we talked about that in a second and then go to the appropriate view from this abuse file here okay so it's we're linking from multiple different files we're sending paths and all that stuff okay but if we look at the url spy file here under my sight what this include actually does is it means okay we're gonna look for a path that specifies whatever's in this string so in this case it'd be admin in this case it's nothing it's just the default path and what we're gonna do is we're gonna take everything after that path and we're gonna send it to the main dot urls page so for example if our path and i'll type it down here looks like whatever the ip address is and then like slash home slash start and we had slash home here okay what we would do are will do home slash like that sorry is we're gonna look for the this home path here so we find this we find home okay and once we find this what we're gonna do is we're gonna say okay so we'll get rid of this because we found that and we'll take start like that and we'll pass it over to this url spy file inside of our main application because it says go to main urls right and now what main urls is gonna do is it's gonna look for a path that's called start so it gets passed start like this and it's gonna see okay do i have any path that says start now if it does it's gonna direct us to whatever function inside the views file that we've defined so if i add another path here okay and i define this and i say this is start with forward slash let's say that has a forward slash too then what will happen is we will go to the views dot index view because that's the path that we typed in now in this case we're just gonna leave it as a blank path which means that if you had nothing just like that it'll just automatically go to this path you guys should understand this in a second once we start actually doing it okay so we've done this now so actually i don't know if we're gonna have to restart the server or not but let's just hit enter one more time in the search bar and see what we get okay so we get now tech with tim in the header one tags now i know i kind of went a little bit faster this and it might be a little bit hard to understand but we'll create another page now and i'll show you how this actually is working so we've done that let's leave this open so essentially right this is what was shown we had inside this views dot pi file we had this index function and it returned h1 tags tecla tim now what i'm gonna do is just create another function i'm gonna copy this and i'm just gonna call this let's say v1 okay and in here instead of tech with tim we'll just say new one exclamation point okay so now let's show how we could possibly navigate into a different view using this kind of url structure that we've set up so remember this url is inside of my site defines what's gonna happen when we go to a certain link what page we're gonna direct into so i had this as blank before so what happened is if you don't type anything after the main url which is like that http you're just gonna direct us to the main dot urls it's going to include whatever comes after this blank tag essentially okay so if we want to make it so we could possibly go into another body code file folder with our another view what we can do is add another url inside of this url spy so i'll copy this path and instead of having a blank this time i'm gonna say /v 1 or i mean so certain v1 slash forward slash and now instead of going to the views dot index view i'm gonna go to view v 1 remember the name of our function and again i'll call this a different name which will be u1 alright so i bet hopefully this will make sense if we don't type anything so meaning we like we don't type admin what's gonna happen is whatever the path that we've given is gonna be passed over to this url pi file if it's blank meaning we haven't typed anything at all other than the main url it's gonna bring us to the index page if we type v1 it's gonna bring us to the view 1 page so let's try this on our web browser if i change this now and i say slash v 1 you can see that it brings me to the page v1 now remember if i get rid of v1 and i hit enter it brings me back to the page tech with tim so we successfully set up two pages that we can see and we kind of understand now how this url directory system works so that's all it is to setting up our basic django pages in the next video we'll do a bit more on some multiple pages we'll talk about creating some actual like real html stuff on the web site and just keep going further and further with django if you guys enjoyed the video please make sure you leave a like and subscribe if you need any help don't hesitate to join my discord server follow me on twitter or my instagram i'm always answering people's questions there and with that being said i will see you in the next video [music]