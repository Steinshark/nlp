earlier this week. there was a sort of announcement about a bug in a program called scp scp stands for secure copy it's a way of copying files between two different machines using ssh as a sort of background transport protocol to make the copy so it's a secure way of copying a file from one remote machine to your local machine or vice versa personally i use it all the time to copy files from my laptop to the desktop machines particularly from outside the office and so on it's a very easy way to do things from the command line so he talked about scp the name of a machine and then the file we want to copy so i know it's stored at this location remember name and so they want corey to the local machines. i don't give a machine name we're just in this case i'm putting a full stop for the current directory hit return ask me for my password and it starts copying it in this case. it's going over to wireless network. so it's not going that fast, but it's copying it off this machine on here. and so we're copying that file from that machine to here so the books that were sort of disclosed by harry sentinel and f-secure basically allow a malicious server when you ask it to copy a file it allows a malicious server to return basically any file it likes to your machine. there are some limitations and the client will happily write it into the right thing even if it's not a file it requested so i could say please download our pi to our pi - image gz from my machine and the server could say here. here's dot bash profile and it would copy that into the current directory and if that was the my home directory that would override my dot bash profile which is a script that gets run every time i log into the machine and so the server would be able to pass it down a file but the next time i logged on would allow the malicious actor who's taking control of the server to sort of infect my machine with some code that they wanted to run the way the exploit works. the server is able in certain circumstances to not send down the file that the user requested but to send something else down and put it in a way that and that it gets the client to put it in a place where it could potentially overwrite some files they contain authorized keys that allow you to log into the system or replace a script that gets run a startup like your batch profile. i mean actually this burg dates back way before scp existed because it's actually come from an earlier program called rcp, which start was stood for remote copy did pretty much the same thing, but unlike scp. it didn't bother encrypting the data as it went over he just did a straight transfer. this was written in 1983. it's part of one of the early berkeley releases of unix and there's been quite popular until obviously scp came along in the mid 90s scp takes the rtp protocol and basically implements it exactly the same but using a secure transport using ssh to transfer the data the interesting thing though is that both the way that scp and rcp work is i find a little bit interesting and that when i ran this command on my machine here scp it connected to the other machine but you might think okay talk to the ssh daemon on there the protis is a server on there and says please send me this file but somebody does if i run that program again and i chose a file that was big enough. it would take a while to do that. i'm gripped to see what scp is doing so i'm looking all the processes and particularly the ones that are scp. i find the program i ran scp. jailer the name of the machine to copy the file but there's also this other one on the line above and what's actually happening the way scp actually work because it makes a standard ssh connection from my laptop to the remote machine or whatever machines are connecting and it runs the scp program on the remote machines with a specific flag in this case it's minus f and then the name of the file that you want to copy and if we look on this machine just to show the case then we can see again that that program is running on that machine so the way that scp works it connects to the remote machine and runs scp on there with a flag telling it it's being run on the remote machine and if you look in the source code for scp you can see how it does that it detects that flag in it, then those it's going to send a file back over and what scp does? is it sends their over a little header which describes the fire that's going to send and then it just sends the data over the standard output the unix provides which gets routed over the ssh connection back to the copy of scp you're running on machine, which doesn't writes it out the disk so let's have a look at how that sends things and we can do that because if we go back to where we're transferring the file and stop it, we can actually ask ssh or scp in this case they give us more information about what's going on and get it to print out the message isn't is something between thing give us debug information by using the minus v flag. so if we run scp again with minus v in there then we get all sorts of information about the key exchanges that are happening it's asking me for my password again, and then eventually we get down here where it says i'm sending the command that i want to run so it sent the command scp with the minus three and the minus f flags across that's now running on the other machine we can see it running on there and then it shows us the command that it received from the copy of scp running on this thing so we got the line of text capital c and then the permission bytes for the file in this case 0 644 in octal and standard unix permissions we've got the size of the file in bytes three four one zero seven nine one one more one in this case a big file and then the file name and then we can see it transferring the file and occasionally as it's doing that we'll see the keys get updated as it changes encryption keys to make sure that we don't lose anything. the problem is that this line here the ones preceded sync the source code before the scp client just takes the filename that's returned and uses that as the file it writes to the disk now just do some simple checks it checks that you're not trying to traverse up the directory structure it checks that you haven't given it an absolute path. but other than that, it just writes that file to do so if you were to write a malicious piece of software and all we need to do is replace the scp command on the remote machine don't you do anything more complicated than write a program that? returns the right values to compromise the system and then replace the scp binary on that machine we've got root access to that server. that would be relatively easy for us to do so what we need to do is change the value that gets sent back and then this client because he doesn't check that value is a what it asked for or b make sense beyond some very very simple checks. we'll write that new file into the current directory or if you've asked for a recursive copy copy lots of files in different directories it could write them into other directories or it could even change the permission on the current directory. so it could be used in certain circumstances to enable people who've got control of the server to push files down onto your client when you use that command i mean some ways this functionality has to be there because we specify our wild-card and you're copying files you don't know what their names are then the server has to be able to drive the client what files is going to send down? otherwise you'd have to know what the files are on the server before you could copy them down i think the real core the problem here is it's not doing perhaps stringent enough checks and that there are certain things that you can send down for example it can send down a line that forces the client to change the permissions of the current directory and it's just not doing quite enough checks it's relatively simple to fix making sure the checks on the returned file make sense. so for example if we request in one file that we get that one file if we were dressed it to copy a directory that the files that come down and inside that directory if we requested a wild-card to select multiple files that actually the file names that it's sending to us matched that one cause it's just a matter of putting a few more stringent checks into the actual program. should we be worried too much about this? well, there are other things we can do for example, we could use sftp rather than scp to do that. it has been patched in certain versions of openssh now which will be coming out soon certain variants of it's still there and things like ps cp and winscp on windows it has the potential if we're not careful that you could do something but i think there's another ways around at the moment and something we can patch the software and get around it but it's interesting because it's sort of the very simple file transfer protocol that was developed for our cp he was just copied straight over in the mid-90s when ssh first came along and he's been left there and these things have been there for the past. well 30 35 years, i guess almost those six years lying there in the various different things, but of course, perhaps people haven't tried to exploit them before now i've got the token so i can lay the value in ad the valley from emerged or into it and store it back and hand the target and now i've got the token again. i can load something into my register the problem is that suppose we want to do like a big gaussian blur or really large window. this is going to get slow really really quickly