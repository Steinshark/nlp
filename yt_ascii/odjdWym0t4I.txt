gui stands for a graphical user interface gui and so you get the acronym gui and he's probably the predominant way we interact with computers today and with mobile phones that's the term that sees these days in the 80s people tended to refer to them as wimps windows icons mice and pulldown menus or windows icons menus and pointers depending on which version of the acronym you went to well that pretty much just describes the systems we get on computers today a gui can refer to any sort of graphical user interface for example your mobile phone doesn't have pointers on it and so on a 3d virtual reality interface is a graphical user interface but if put doesn't have nice or pulldown menus involved when it comes to writing gui software things become more interesting than writing sort of traditional command-line software or software where you're typing into the software and the reason is is that when you write a program of the traditional sort the command line sort you have control as a programmer. i mean, let's think about that simple program. we looked at before and i shall just sketch it out we have our main function and then we say printf and then we have some text hello world whatever it is and it prints out in that order now let's say we wanted to write a program that would ask you what your name is. and then ask you when your birthday is so we could write the same cell phone so we print out that and then we would say we want to read some text and because we're using c we need space to read in the name so we need a variable to store that in might be a long name and then we say we want to read in we using the scanf function a string in two names so we can read him today and then we can print out another message please enter your age your birthday whatever it is you want and then you can say read in that and you can specify that you want that to be an integer followed by slash followed by another integer followed by a slash followed by another integer don't like that and so then you can read in that and you've got control you know that when the user types here they're typing in their name or should be typing in the name because of putting in keys there and when you're typing in here they're typing in the date and you can check them they've put the right things it if we were to do the same thing where the gui then things get a little bit more interesting. so let's try and create one. i'm using xcode i'm using a mac here because i have a mac on my desk exactly the same would apply for windows and atari st a i'll click on it archimedes whatever is it you wanted to do it on so let's have a window and let's start building the same sort of thing so we've got our window so we want some text. so let's put in a label that says name and then we want to actually put in space for the person's type in their name so we'd have a text field drop that in as well. we can line all that's it we've now got space for that to do so and do the same again. they report birthday and again, we'd have another text field so it isn't just one summer so yeah, i mean at this point we're not really what we are programming but we're declaring so what we want in the thing and we're defining it using a sort of gui thing which makes it nice and relatively straightforward to implement and that's great but that only gets us as far as what peers in though that just saves typing lots and lots of boilerplate code which says add a text box at this position and so on and does that and gooeys are a great example of abstraction we talked about again the other day in action because you can abstract lots of things so all the code that's generating. these user interface is still there i'm just not having to write it the computer can create it and loading the take data files and so on for me so we've now got roughly the same sort of thing here and if we run the program now, you should hopefully pop up and you program let's get rid of xcode and eventually my program that's up and i can enter my name and i can enter my birthday 1/2/3 but whereas before if i was to write this program and that's write a command line version just to compare here i am going to print out, please enter your name support computer program so we need a variable to store that we probably want one for the day month and year so we can then read in from that you want to read in the string and we'll put that into name and we want to print out now enter your birthday don't to print out a new line there either then we can read in that as well so we read in the day the month and the year and then we can print out your birthday. then we can print out those values again so we've got two programs that allow us to enter our name and birthday, but if we run them they work in very very different ways so let's just get a command line so we can run the command line one. so let's run this program just please enter your name shaun enter your birthday 1/2/3 and yeah short vowel and it says your birthday is 1/2 accessory so we can write a program we can collect some data from the user but our programs in control we could either we have to enter our name because it's after our name we have to enter our birthday because it ssj4 our birthday if we go back to the gooey one then things are different because now we're in control because we've got the box they're saying enter your name so we could enter our name and then our birthday or we could enter our birthday first and then we can enter our name or we can start typing in our thing they better put the birthday in and then better complete the birthday and type it in and different things so when we write a command line program or certainly simple command line programs the programs in control it asks the user for input it gets that input for the user. it's asking for what particular type is and so on when you get a gui? it changes you present the user with something. they will then fill it in in the order they want or click the button and the order they do to do the task. and then you have to do whatever it is at that point. so at this point we've put that values in when it's finished i'd probably have an ok button and add in so i'd have an ok button when that fires we could run some code which occur close to values and put them together so when we write a program to the gui, they're working in a very different style they have to be driven by what we call events things happening outside the program that they react to so the user clicks on a button the user clicks the mouse user puts the mouse button back up. the user moves the mouse the windows move you have to redraw the contents. how does that happens? when does that happen? all these things? have to be responded to by your program so you're no longer saying ok do this then this then this and this you have to respond to the events as they come as the programs running. so we've got a very different way of writing our program command-line programs can get like that if you think about something the hair say like vy you can press different keys and it does different things so you press again because different things and do things at different times or you might have menu options and depending on what key it is you do different things in different orders so you can't get to that point but by that point you becoming less of a command-line program and more gui like by the sounds of it in that kind of a command-line program where it's getting like a gui it's almost like you're writing the gui and yes, exactly so you command line program you could write it to the point where it becomes more and more like a gui effectively in you displaying that i mean the debian linux command line installs a building an example of this is that it looks? more and more like a gui drawn with text characters in a window rather than with lines and pixels it's sort of where and how you respond to the input. so any write a computer program like this why do you call scanf for? input in basic or whatever it is. you using to read from the keyboard you've said i want to read a series of things from the keyboard until something happens or get me a key that's been pressed and you know, that key is going to be pressed when you're writing a gui any number of things could happen based on what's happening? it could be the someone's the window so you need to redraw that bit of the screen. it could be that someone's clicked a button so you have to respond to that button it could be that another program is running and someone's dragged a file and dropped it onto yours and you have to respond to that so you have to respond to all these things and you can't just assume your programs going to linearly follow each line of code one after the other of course, that's what's actually happening the cpu is still doing that but it's actually jumping between the operating system in your code between the gooey libraries and things that are supported to implement your thing depending on what level it is to make the program run in different things. so what we'll do over the next few computer files because we'll actually start to look at how we write gui software. so we'll actually look at how we implement it and we started to look here we've got a high level system cocoa on the mac. there's equivalents wpf on windows and things and we can look at them and how they do it they provide a very easy way to do things because i say i want to text fields i can get the values from them and do things but we'll also look at a lower level at some of the earlier geary's cups like the original macintosh version or what happened on the atari what happened on riscos and so on and see how they work and then we'll start to look under the hood of what's going on and seeing how this program actually functions how we get to these things and how we implement the gui image here into a set of pixels that are either black or white but which are compensating for the error and so again, we'll give the appearance of the original gray things but if you were to zoom in on this you would say it's been found a hundred and eleven thousand times dyes engrave what that means is that in