one concept that i see messing up new programmers all the time is void pointers they've just begun to understand pointers and then this new type shows up that they really can't use correctly and it just messes everything up my name is l level learning i teach people how to write faster and safer code and today we're going to talk about what a void pointer is why they exist and how to deal with them let's jump right in first you have to talk about pointers in general what are pointers so pointers are actually really simple despite how often they confuse new programmers a pointer is just a variable that contains the addess of another variable so for example if we have a variable int a that is an integer variable we'll say that its value is equal to four so now the value a contains four bytes that represent the number four so later on in the code we can say that int star pa that means that we have now a variable that points to an integer it is an integer pointer we can say that it contains the address of a so now we can say that pa points to a i get a lot of questions like why do we even use pointers and in the case that we use integers like this where i'm pointing a pointer to an integer that's actually a very good question we don't really need to use pointers here because the size of an integer is four bytes and that's actually within the word size of our architecture and because i'm on a 64bit machine that's 8 bytes so this 4 byte type can actually just get passed around by value i can make a function called int do a thing and it takes int x and i can return you know x + 2 right i don't need to do anything special with pointers because i can pass a by value i can literally pass in a equals do a thing on a and that will add you know two to a a will be six but what if we wanted to use values that were bigger what if we wanted to use variables that were bigger than the word size something that wasn't an integer so instead of using a 4 byte value like an integer what if i made a structure that is greater than the word size greater than 8 bytes and here i've made a structure called person that has 60 8 bytes of data it has a 4 byte integer id and it has a 64 byte buffer for its name for example so if i wanted to do any operations on person p iid have to pass p by reference i could not pass it by value and the way we would handle that is we would make a function that's called you know do a thing only now it takes a person pointer we'll call it p person and we can say that and inside this function p person id equals z or something and then maybe we u memet the address of p person name 64 bytes or 2 z of 64 bytes right maybe this is like our our initialize a person structure because person is such a large structure we have to pass it by reference and the way that we do that to call the function is we say do a thing on p awesome so that's pretty straightforward and we could check the return value you know int r equals do a thing and obviously this would return some status code and we'll say return zero for here so then we've talked about pointers for a minute now now what does a void pointer the whole point of this video what does a void pointer do for us so when you actually have a pointer and you's go back to our in a example we have in star pa is the address of a if i wanted to dreference or look up the value at an address i would add a star character which is the d reference operator which tells the computer to go to that address and get the value that lives there well the question is how much data do we get we need to go get the value at an address but a lot of structures are bigger than just one bite like i said before the int value is actually four bytes wide so by dereferencing the type i use the type information that's defined at compile time to tell the computer how far out to go and the reason this is so problematic with the void pointer is because the void type does not have a size because of that if i say that void pointer we'll call it va is equal to the address of a i'm actually unable to dreference va and we'll compile this real quick and i'll show you that so i get an error here invalid use of void expression the reason is the compiler is trying to make an assembly instruction to reach out to the address that's contained in our pointer variable and go get that many bytes but the problem is it's a void type it does not know how many bytes to get so then you're probably wondering why does this variable type even exist like why would we create a type that does not have type information it breaks all of our code we can't use it when we use functions that give us memory or free memory memory allocation functions like malik for example all of these pass around a void star as as a type right so malik returns a void star calic realic realic realic array all use the void star type and also when you free you pass in a void star type the reason for all of this is because the c language is giving you the power to tell the compiler what type is stored there so let's kind of go through that in in a practical example so let's say i wanted to make room on the heap for my person structure because right now my person structure is all being contained on the stack let's delete all this and i say that i have i have a person pointer right so it's a it's a person pointer we'll call it p person and i want to maloc it from the heap and how big do i malik that's the input to malik right is the size that i'm getting i'm going to malik a size of a person well by default the equal sign will throw a warning and if you have w error enabled this will actually be an error because the malik type is returning a void star and we are implicitly casting it to a p person type so what we actually have to do is tell the compiler hey i'm aware this returns a void star type but i need to convert it to a p person type all we're going to say is a person star and by putting it in parenthesis like this with just a type or do what's called a type cast so the type that comes out of this is being converted at compile time to a person star and put into our variable and then obviously we have to check our value right if we say if null double equals p person and we say you know puts the heap failed runway or whatever and then we return negative 1 because the program failed we can't use our our code here and then if we want to later on in the code free it we then free p person and this does take a void star as input but the implicit cast here is actually okay and don't forget when you're using the heap you also have to include standard lib because that's the library that contains those functions and there we go so now we've compiled the pointers program with no errors so when is it a good idea to use a void star well a void star is meant to represent what is referred to as typelist memory right so if you are maling from the heap or you have a variable that is undefined in its type it just represents a raw blob of memory that's where the void pointer makes the most sense and then the minute that you know the type of that variable you should then be casting it to that type or just use that type in general like for example because this function is a you know let's say that this is the initialized person function right there's never a we should never be passing a void star pointer and then saying person p person equals person star of pointer right like if we know the type of the memory ahead of time a person star of pointer if we know the type of the memory ahead of time we should never be using void star we should always include type information in our code as often as possible but in cases like this where we are maling and freeing raw memory that is not known by the allocator at the time to can include the type information then we just use the void star the way it's intended and then cast it when we get that memory now another question people typically have is why do header files exist like why do i even have to include standard i.h standard li. and if you're curious about that like i was go watch th this this video this video this video and go find out see you guys there