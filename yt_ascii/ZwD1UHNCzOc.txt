hi everyone in this episode we're going to be importing our character into the unity game engine and we'll also start programming the basics of our character controller all right so with a new unity project open i'm going to head over to where i have the character blend file stored and just drag and drop this into the project window and it'll take a moment to import and we can then go onto the rig settings here and we will change the animation type from generic to humanoid which will give us access to unity's inverse kinematics features which we'll play around with a little bit later on in the series for now we'll just hit apply and we can then press configure to see this all set up and hopefully your little guy is all green which means that all the bones were correctly set up in blender one thing that's a bit weird is the characters pose over here what we should do is just double click on our character to open the blend file and we can just close the animation and then here in the scene just select all of the bones in pose mode and press alt r alt g to get him back to his standard t pose and then we can save and in unity we can then just come down here and just tell it to reset the pose and it's now in the t pose all right let's say we're done and yes we want to apply wait a moment and then let's head over to the animations tab and we want to go through all of these and just say loop time so that they will loop when they're finished playing so do that for the walk as well and then press apply okay let's grab our character and just drag him into the scene and we're going to want to create an animator controller for him so right click in the project window create and and where is that over here create a new animator controller and i'll just call that animator and then we'll select the character in the scene and just drag the animated controller into the controller slot here now because we animated our character walking and running on the spot we're not going to be using root motion but i would like to quickly talk about root motion for those of you not familiar with it so the idea is to actually animate the root bone of the character for example in a walk animation the character would be animated to move forwards this st was then used to move the character around in the game instead of the traditional approach of controlling movement from a script the big advantage of this is that you can properly time movement to the animations eliminating visual problems like foot sliding so working with root motion allows one to create more natural looking movements but what you lose is the ease and precision of controlling the character's movement from script this can often lead to the play movement feeling less responsive to input which obviously detracts from the game play i certainly don't mean to deter you from ever using root motion one can get great results with it but for this series we're going to be sticking with script based movement okay all of that was just a really long way of saying that we're going to be turning this toggle off let's then double click on the animator to bring up the animator window i'm going to middle mouse drag this is properly in view so we want to create a blend tree so that we can blend between idle walking and running based on the character speed so we're going to right click here say create state from new blend tree all right and if we go into our parameters we can see it's added in a blend float let's rename this to something like speed percent and then let's double click on our blend tree here you can see it's got a list of of motions which is currently empty we can press the plus button and just add in three motion fields and then let's fold out the character model here so that we can see the animations we'll drag the idol animation into the first slot then the walk into the second and the run into the third now i'd like to be able to see the scene view i'm just going to dock the game window down here and then drag the animator out into a separate window just like so let's press play and we're going to need to make sure that we select the character so that the animator for the character is active and then we can play with the speed percent value currently the animations are looking a little bit weird you can see the character isn't moving up and down and it's a little bit jerky what we need to do is go on the character here and just go into any one of these animations let's go into the motion field and just set the root motion node to be root transform if we then hit apply that will update for all of the animations and if we try this out now we can see that the animation looks correct and we can drag this up to one to get them running and bring it back down to zero to return to the idle animation of course this speed percent parameter is going to be controlled from our player controller script which we'll create in just a moment i first want to make a ground plane though for the character to stand on we can just use a regular plane but i'm going to import unity's prototyping package so we can get the nice grid floor so just assets import package prototyping and i don't want any of this crossplatform input or utility stuff just the prototyping one so let's import that that wait a moment and when that pops up in our assets we can go over to the prefabs and i'm going to look for the floor that's awfully small it's not the one i'm looking for maybe this one no the third one that's the one all right let's just reset its position all right that's very nice i'm going to want to make my game window a little bit bigger so i'm going to dock the animator over here and just bring the game window back all right like so and let's right click here and just create a new c script i'm going to call this the player controller okay let's double click to open this and in the update method going to start off by creating a vector 2 for the keyboard input so vector 2 input is equal to a new vector 2 and we're going to get the horizontal input so input. get axis rule horizontal and then for the y- ais that will be our vertical input so input. get ais raw vertical let's now take our input vector and turn it into a direction so we can say vector 2 input direction is equal to input do normalized from this we can figure out our characters rotation using trigonometry so imagine this line is our input direction we of course know its vertical and horizontal components and we're trying to find the angle it forms which we can call theta if youve studied tri all you know that tan theta is equal to opposite over adjacent so theta is simply ar tan of yx this assumes that we start with 0degrees over here and increase anticlockwise in unity however if our character is facing forwards then it has a rotation of zero facing right it has a rotation of 90degrees and so on so let's call r the rotation of our character in unity if you look at the two circles it's clear that we need r to be 90 minus theta in order for our character to face the correct way we can simplify this a tiny bit by saying r is equal to mar tan of x over y all right let's go ahead and set our character's rotation by saying transform. oiler angles is equal to vector 3. up since we want to rotate around the y ais multiplied by what we just calculated so math f. aan of input direction dox divided by input direction doy now of course if input direction doy is zero we're going to get division by zero errors so instead of having to worry about that ourselves we can use the handy math f. 8and 2 method which allows us to pass in the two values separately and it will worry about all of that stuff for us so we can just say input direction dox comma input direction doy instead now this arctan method is going to return the angle in radians and we want it in degrees so we're going to just multiply this by the conversion factor which is math f do radians 2degrees all right if we save that now and go into unity we'll need to quickly add the player controller script to the character object and then we can test this out by pressing either the arrow keys or wd and we can see the character rotates around one thing that you will notice is that if you release all of the keys the character will snap back to facing forwards so what we'll want to do is only calculate the rotation if the input direction is not 0 0 so in other words if input direction is not equal to vector 2.0 then calculate the rotation next we can make the character actually move in the direction he's facing so let's create two public variables up here a public float walk speed i'll set this to two and a public float run speed maybe set that to six so let's say you have to hold down the shift key to run so we can say bo running is equal to input. get key key code. left shift and then we can say float speed is equal to and this is going to depend on whether we're running or not so let's open parenthesis es and say running and then question mark to say if we are running then speed is going to be equal to run speed otherwise so colon speed is going to be equal to walk speed now of course if we aren't holding any keys down then the speed should be zero so let's enclose all of this in parentheses and multiply it by input direction do magnitude so if there's no input the magnitude will be zero in which case the speed will be zero otherwise the input directions magnitude will be one which won't change the speed all right so now to actually move the character let's say transform. translate we want to move in the direction the character is facing so transform. forward multiplied by the speed we calculated multiplied by time. delta time and we want to move the character in world space so we're going to say comma space. world all right let's save this and try it out so press play and we can move around and if we hold on shift then we move faster okay let us now control the speed percent value in the animator so that the character actually walks or runs depending on the speed so back in the script we can create a float let's call it animation speed percent all right so if we're running then this is going to be equal to 1 otherwise it's going to be equal to 0.5 and just like we did with the speed over here we're going to multiply this by input direction meg magnitude all right now we need to get a reference to the animator component so let's say animator animator and then i'm just going to remove these comments quickly in the start method we can say animator is equal to get component of type animator all right and then we simply say animator do set float we need to give it the name of the float which is speed percent make sure you spell it exactly the same here as you do in the animator window and then we pass in the value which is our animation speed percent variable okay let's try this out so here we're walking if we stop we go back to the idle animation and if we hold shift we run and we can go into the animator here and actually watch the speed percent value change as we do this all right so we've got the basics of our character controller working now but what would be nice is if everything wasn't so abrupt if there was some smoothing both to the rotation and to the speed adjustment so let's start by smoothing out our rotation so instead of directly setting oil angles to the rotation value we're going to treat this as a target rotation and will'll be smoothing oiler angles towards it over time so let's cut that out and create a float called target rotation set that equal to that and then we'll set transform. oer angles equal to vector 3. up multiplied by our smoothing function which is math f. smooth damp angle we want to pass in the current angle which is transform. oiler angles doy we want to pass in the target target angle which is just our target rotation variable and then we need two more variables which we can create quickly first of all we need a float called something like turn smooth time i'll set this equal to 0.2 by default so this is just approximately the number of seconds that it will take for the smooth dum method to go from the current value to the target value all right then we also need a float called something like turn smooth velocity now this variable we don't ever modify ourselves we just sort of feed it to the smooth damp method and it makes use of it in its calculations so when we're passing in turn smooth velocity we need to start with the keyword ref which just allows the smooth damp method to actually modify its value so ref turns smooth velocity and then we pass in our turn smooth time okay let's save this and test it out so we should see now that the turning happens much more smoothly and if we increase turn smooth time so say i turn that up to 1 second then the turning should happen more slowly like so all right but i'm going to set that back to point two let's now do the same thing for the speed so i'm going to rename speed to target speed and then up at the top here let's create public float speed smooth time i'll set that equal to 0.1 and then we also need a float speed smooth velocity and also going to require a float current speed all right so then we can say just below target speed current speed is equal to math f. smooth demp we pass in the current speed value then our target speed followed by ref speed smooth velocity and then the speed smooth time and then we'll just multiply by current speed over here now we can also smooth out the animation speed percent and we don't need to create any more variables for this because the animator will actually do that for us we can just say comma and you can see it has options for a damp time so we'll just pass in the speed smooth time there as well and we also just need to supply the delta time value so time do delta time all right let's save that and we can try this out now everything should feel much smoother no more abruptness all right so that is actually everything for this episode so until next time cheers