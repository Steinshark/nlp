hi everyone at the end of the last episode i set the challenge of having the falling blocks destroy the player object if they collide with it so i'm going to go ahead and implement that now so on the player object i'm going to remove the box collider component we could do this with the box collider but since it is a 2d game we might as well make use of the physics 2d so i'll add a box collider 2d instead and then hopefully remember from episode 10 on collision detection that in order for a collision to be detected at least one of the colliding objects has to have a rigid body attached or in this case a rigid body 2d since we don't want physics to actually affect our player object we're having it entirely controlled through script we can just toggle the is kinematic toggle over here and then on the falling block prefab we're also going to want to remove the box collider and and add a box collider 2d here as well i'm going to set this 2d box collider on the falling block to be a trigger because we're not actually trying to prevent collisions between the falling block and the player we just want to detect them so that we can destroy the player object so that's why it's a trigger so now if we go into the player controller let's have a method here to detect the collision so we can say void on trigger enter and we want to use the 2d version of this so we just add 2d and then we can say collider 2d and i'll call this the trigger collider all right so remember that this method is called automatically by the 2d physics engine so it must be spelled exactly like this you can't make up your own name for it otherwise it won't be called so in here we'll want to say that if we've collided with a falling block then destroy the player object so currently there isn't anything else to collide with so we could just destroy the player on any collision but to be thorough let's just say if trigger collider do tag is equal to falling block so of course we're going to have to create a falling block tag and apply that to the falling block prefab so if it is a falling block then we can go ahead and destroy the player game object the object that the script is attached to all right so let's let's go into the falling block say add tag and we're going to create a tag falling block just be careful that you spell that of course exactly the same as this over here and then we must go onto the falling block and actually apply that tag that we've created all right so if we press play let's dodge a few of these and i'll let this next one collide with me and you can see that the player object was successfully destroyed all right so with that done let's look at increasing the difficulty of the game over time so there are two main ways that we can increase the difficulty we can have the falling blocks spawn in more frequently and we can have them fall faster let's also say that for this game we don't want the difficulty to increase indefinitely but we wanted to sort of reach a maximum difficulty after a set amount of time so as always i recommend that you pause the video and try and implement all of this before going any further okay so let's say that we represent the difficulty as a percentage between zero and 1 so at the start of the game the difficulty percentage will be zero and then once a set amount of time has passed we'll have reached the maximum difficulty and so the difficulty % will be one now there currently isn't really a logical place to put this calculation so let's create a new script for it and i'll just call this difficulty all right we can open that up now this script isn't going to be attached to any object in our scene it's just going to sit outside of the scene and be accessible to any class that needs the information so because of this we're going to make it static and and it won't inherit from monob behavior which means that all of this default code is useless so let's first define an amount of time after which the maximum difficulty will be reached so we can say static float call this seconds to max difficulty and let's set this to maybe 60 so after a minute has passed the game will be at its hardest then then we're going to want a method so that other classes can find out what the current difficulty percent is so let's create public static float we can call this get difficulty percent so this will return the current time divided by seconds to max difficulty and we'll want to clamp this between 0 and 1 so we can just use mathf do clamp 01 and pass in our calculation all right so if we now save let's head over to the to the spawner class and let's look at increasing the frequency of the spawns as the difficulty increases so instead of having a fixed seconds between spawns variable let's change this to a vector 2 and call this seconds between spawns min max and now now down here based on the current difficulty percent we'll want to figure out what our current seconds between spawns value should be now this is an example of a very common problem where we have two values let's call them a and b and then we have a percentage p that we want to use to move between them now the equation to do this is simply value is equal to a+ b a multiplied by p so if you think about this if p is zero then we can say that the value is simply equal to a since this entire term will be canceled out if p is equal to 1 then the value will be equal to a + b minus a which is of course just equal to b so it's not a huge stretch of the imagination to conclude that a value for p somewhere between 0 and 1 will will return a value between a and b this is called linear interpolation because we're interpolating linearly between a and b based on our value for p you'll most commonly hear this referred to though by its attractive nickname lp all right so back in the spawner class we're going to want to create a float seconds between spawns and we're going to want to do a lp operation between our maximum seconds between spawns and the minimum seconds between spawns based on the difficulty percent so instead of doing this calculation ourselves we can just pass this over to the maths class so math f. lurp and we pass in seconds between spawns we want to start with the maximum so this will be the y and work our way down to the minimum so the x value based on difficulty do get difficulty percent and then just to confirm that this is working let's do a little print out of the seconds between spawns so if we go into unity now onto the spawn manager object let's say we give it a minimum spawn time of .1 and a maximum spawn time of 1 second then if we play this you should see that as time goes on the time between spawns gets less and less and eventually after a full minute has passed this will be equal to .1 all right let's remove the print out and let's head over to the falling block class to increase the speed based on the difficulty so let's not give the speed variable a default value and let's create a public vector 2 speed min max and then in the start method we can say speed is equal to once again mathf dolap between the minimum speed and the maximum speed based on of course difficulty do get difficulty percent all right so let's go onto our prefab here and let's say it's got a minimum speed of seven and a speed of 15 all right i'd like to get an idea of what the maximum difficulty is like without having to sit through all 60 seconds of this so let's just go into the difficulty here and just say return one maximum difficulty from the outset press play well that is clearly too fast let's maybe turn the max speed down to 13 and on the spawn manager say make the minimum spawn time about3 i'd also like to just decrease the size of the player here something like that all right oh i got a bit unlucky there all right this seems more reasonable it's very difficult but it should be yeah i think this is a fairly good pce for the hardest level not going to tweak the difficulty extensively right now obviously so let's go back in here and remove this line let me just try it once more at the lowest difficulty so it's maybe a bit slow but it's not too bad maybe just turn the initial speed up to something like nine all right let's quickly just work a bit on the look of the game can maybe go into the main camera and make the background a nice deep blue something like that and let's also create a materials folder and i'll create a new material for the player i'll just set this to be unlit color and apply that there we can make this a red perhaps and then i'll also create another material for the falling blocks this can be a lightish gray let's try that so on the falling block just going to find the material slot on the renderer just press here and head over to the falling block one let's see how this looks there we go it's looking much prettier than it was a moment ago all right that's everything for this episode in the next one we'll finish off this mini project by creating a game overc screen until then cheers