hello and welcome to tonight's ama with nikola yuzotis so tonight we're going to have a conversation about you know everything which nico does and as i already said posted questions into the chat or into the q a bar because they're probably going to have some debates in the chatters also nico can share a screen if you know there are some code examples you want to share like for example a cardboard link you can put that into the chat button nicomery also has like an editor open or something or prepare some code which we can use as an example of things he's currently thinking about and let's get started with a quick introduction from nico himself who is nicolas okay thank you jens partially it's all my fault i'm involved in c plus plus for 30 years now i was in the room when we stand when we finished c plus plus 98 and so afterwards i thought that's it but you never can give up c plus plus once you start with that so as you know i've written a couple of books about that to explain things we standardized it got more and more i had to do some updates and then i came back with c plus plus 11. trying to understand move semantics and perfect forwarding and that was the beginning of yeah writing a couple of new books about move semantics and then c plus plus 17 c plus 20 book is almost done so to some extent i don't know exactly how that happened i have written a couple of books which i think pretty good known and they all try to explain what we standardize maybe that's a problem in itself and so that's my job it seems that's my life now my professional life to explain c plus plus and which means point out the good and the bad things yes there are bad things there are a lot of good things both that's it okay okay can you really quickly check your mix setup the correct microphone is used [music] i don't sound as clear as it did in the launch just to make sure this looks wait a minute so i even just a moment ago i had a drop so is it better now yes i think so okay let's give that a try okay so we have our first question from daniela we are famous for standardizing things on the fly with a spectacular success rate what would you recommend to improve things how much sarcasm is in this question daniela well the topic behind that is we have we're standardizing c plus plus and the the idea of standardization is to standardize existing practice so there's something everybody uses but it might look different from platform to platform a little bit now let's make it portable and reusable and make it guaranteed to work and to be available at anita and ever platform i have no idea about the percentage there but maybe half of what we standardize is existing practice and a lot of things are done on the fly i mean to some extent the standard template library in 1998 which introduced iterators begin and end containers and algorithms so data structures and algorithms for the mass was [music] established but not really used in the community and but a lot of people worked on that for years so and it was a success story as we all know we think that c plus plus wouldn't be that successful without the standard template library so that's a good example we have examples where things went bad on that not so well as they could be and maybe the problem is not that we that we cannot or should not standardize existing practice not only existing practice or only existing practice maybe the problem is that the moment we have it standardized and available in compilers compiler vendors with jack to break backward compatibility so maybe we need a mode where we say we have a good idea but here's half a year where we don't guarantee backward compatibility for something new that would probably help because we have made tremendous mistakes when we start at our c plus plus and didn't think deeply into the different tools we have problems with initialize our list we have problems with std thread we had problems with atomics we have problems with ranges and views we have problems with modules we have problems well enough so it would really be great if we could just say yeah it's nice that we have that but please microsoft clang jesus you don't come with any argument that you cannot change that we have to change that because that's not consistent it turns out to be a design mistake and maybe half after half a year one year or with the next c plus plus release please it should really be stable yeah maybe that's a pop of card so gp miller asks did i correctly gather that c plus standardization meetings are now close to the public do you have any recommendations on how to get involved in standardization nowadays what is the easiest entry point i'm not sure i'm the right one to ask that question i was very astonished about what i read and saw about that we close now something we had opened for 30 years and i still don't understand exactly what is allowed what is not allowed etc i think it was part of the success story of c plus plus that everybody could join so everybody could improve what we standardized before it was standardized you know i was well i have some experience i have some experience with c plus plus standardization there were times i was not allowed to represent germany there was a half a year i was representing uk just because of that it's always about games and marketing so we also have heard that some people give up and say yeah that's isil so we have to take the rules i i never in my age i never accept any more that everything something is written in stone so shout out loud go to your company and say hey iso that's not okay what you do it's it's counterproductive and we have to do that i i still don't understand the rules exactly what is possible and what not if i can improve the situation i definitely would like to do yeah i'm also frustrated so but i i don't know the details that's a problem yeah as far as i understand it's like that c plus always existed in some kind of a gray zone for for iso and that we got a bit too much attention and no overreaching maybe from our position a bit and making things more difficult but on the other hand our community is already adapting and we are having various foundations opened up to to you know onboard people and maybe to take parts of standardization of iso and like have more like an umbrella standardization and then later put that into isil process you know what what we're gonna do but you mentioned that you were not allowed to represent germany how what's that story about because i didn't pay i didn't want to pay so as they come as somebody representing with voting rights or even without formally to pay or you have to work be in a university or being a student there i was not and i was not willing to pay so yeah i mean that was 30 years ago where i also had problems to pay for it it was expensive enough for me to go to the meetings and paid for myself yeah i really did the problem is we already have a huge problem in c plus plus it's standardized by experts these are great experts the problem is sometimes they have no clue about real problems of the average programmer and they know too much they don't see how tricky things are they standardize and it would be so helpful to have more application programmers even beginners there and with that policy of course we make it even more expertise let me make it even a more special audience and we make the standard worse and worse with that because the standard is getting worse a lot i think i'm really honestly now thinking about whether we are beyond the point where we should still deal with c plus plus yeah we still we both still have it but it's it's it's about to die we are in the last third of the age of c plus plus i think at least from from usability and teachability it's no longer teachable that's all and and it's there's nothing no surprise that we currently see a couple of movements thinking about coming up with something better not that we have something better but but revolution has started i think yeah i so a second you know the funny thing is like my own conference started the very first thing we did is put on stage someone who was the head of the driven delegation peter back then and talk about that the funding pfizer was running out and that the driven delegation would be discontinued in 2013 because i so needed to have that funding or i would close down the delegation and we saved the driven delegation that day and i think so that pick up the the for for many years i'm not sure if they still do i think they still do but yeah that's like when you i'm like like yeah it's like the next meeting face to face is on hawaii so that's probably like you know a bit far off for many people but you already had like yeah it's a nightmare to have a meeting in hawaii it's not fun from europe you you travel 24 hours one way just work well but i can tell you you have a lot of people who want to join you on that trip i can understand that there's a lot of folks which which can go to hawaii and then use this to go to hawaii and i i've also heard that that is basically also meant to accommodate the asian members because for them it's the the easiest way to go to the u.s to fly to why so that would be great that would be good of course yeah we do but yeah we we had a we had a meet up in cologne organized by yours truly what was your experience with organizing that i meet up you mean a stand-up committee meeting nice well cologne is nice compared to the us meeting places it's cheap cologne is near to frankfurt and so everybody can fly to there and the hotel was right downtown cologne and cologne people love to have party and go out for eat and the rhine river was outside so from from what i hear is that attendees were very happy about that and it was also from a financial perspective not so not such a big deal because well 100 or 200 attendees in a hotel bring you some money the only problem about trust they didn't trust me what is this guy that coming and saying hey there will be 200 people coming we talk about something like 100 000 euro or something or dollars they are very happy to give you 100 or 200 rooms as a country again which you own yeah but they were getting nervous because they didn't know whether they really come the hotel had had a trust problem okay it all changed when the more or less the meeting started the hotel manager came to me oh great this is great and you can can come back at each and every time they really were getting nervous because i have no company behind it was just me the problem is they didn't tell me about that they didn't tell me that they have mistrust they they just acted strange and because if they would have done i could have organized some some some background information or some whatsoever so yeah so that was the funny part but at the end it was not much work well you have to of course you have to to know a little bit about how how how this works i i would do it again but you know with corona i thought think about i would have organized that so i i took some financial risk and you have to organize that and then we have corona one year later and i have to pay something like 30 000 euro or something or well we had interesting times when covet and corona came up how do we negotiate with hotels and who is fault and who has to pay what you know that yet with your conference so looking back i would not do it again with that risk but maybe i'll do it again and say hey you have the experience i don't guarantee anything trust me out don't trust me and you can get that yeah maybe you never know well um so there's a question do we have some kind of quality metrics around how many lines of code c plus developer can write that they some people even start to think of one story point of development work a day minus meaning eight story points a sprint what a wonderful world to learn are you paid with more with fewer lines or with more lines what is how do you measure good code i don't think anything of this makes sense so i i'm i'm 30 years now into into software development and every child trial to make sure that you code becomes better dwarven by formalism as a disaster that's all you have to change your process to make software development better and then we have the rule that we we know from reserved that the average speed of programmers is by a factor of 10 different so some programmers are a factor of 10 more productive than others so all you can do is establish some way to say let's learn from each other and both the expert from the beginner and the beginner from the expat and i'm not a fan of i'm not a fan of anything like giving benefits about how about the speed of your code what we have learned with agility is that at least we can estimate things and maybe we have different estimations and then we can we can we are happy if we are on time when you when you do trainings do you get to see the code of your clients like can you can you like what is the average code you like how do you feel about this code you get to see maybe in your trainings from your clients i don't see code so you you do you do most of your trainings and not not yeah not consultancy for code quality yeah so i of course i see code but but not that much anymore it turned out that over the past three years or four years and you usually i had 50 project 50 teaching or writing let us change so i'm i'm more or less doing now 100 teaching and writing and the other 30 learning c plus plus and the new things and and then we have the problem how do i teach that so i'm one of the early adopters so i i see things earlier than others oh i tried them out earlier than others and i i try them out very thoroughly not just driven by a project just i want to explain that and if you explain something you really dive deep into something and then what usually happens is that we have that you have trainings and then they come and say could you teach our beginners in one week with all issues of c plus plus oh okay could you teach cpath was 20 in one day okay well that's not possible i mean it is you can always say the question is how deep do you dive in into the details but the usual thing is that we are just have limited time and with limited time practical exercises are problem so what we usually do is we have slides and then we program together which is also nice that we learn from each other and you have to manage that a little bit so that not always a thought leader of the group does everything and that's the way we write code and learn from each other about code at these examples are not very big because we have too much things to teach in c plus plus that's a problem that's simply the problem and no company understands and is willing to pay for i don't know eight weeks of training so no way i never heard that i know i know did you or the two return of your webcam my webcam is on here you can't see it maybe it's my side okay let's continue the conversation with so for someone beginning c plus plus for eventually entry into the job marketers their recommended standards to begin with does it depend on the industry systems application are some industries into specific standards or locked into standards so probably what is meant with c plus plus standard to begin with yeah i would i would definitely do modern c plus plus right now which is something between c plus plus 11 and 17 so i think we have we have you know we we have one two three four five six c plus plus standards now i think 11 14 17 20 23 of 3 and 19 now seven all already and but we have only three really big differences so we have the area of c plus 98 and o3 so the first c plus plus standard then we have modern c plus plus started with c plus plus 11 and two other versions and now we have c plus plus 20 which is also a big revolution will change everything so i would concentrate on the middle one on modern c plus plus and i don't think it depends on the industry i can small depending on the project you are and the context and [music] there is as i said there's too much to learn so be happy with the things you learn and please beware that there are other things you don't know and let's look at them later i had a discussion with biana's crossover about that and he said well maybe it doesn't matter how you learn c plus plus because they're very multiple paths all all you start with with is with some knowledge and then the lobby knowledge gets gets broader and deeper over time and nobody knows everything about c plus if not in the standard committee so and of course solve real world problems i mean not just funny games and funny slides just program that's i think it's the most important thing so i would not say any any specific standard or tool is recommended here i think that 0.17 gives you a good basis but it's like autozone still c plus plus 14 it depends so much on on where you want to go with within which company hires you well how does that well we are currently merging autozah with misra so a new missile standard is coming out and but that's a little bit tricky because what what is coming out there is a restricted c plus plus language and library because we have some routes where we say stop and you should not use it that way so part of the problem is not only which features to use part of the problem with which style guide to follow and we have really different opinions about that so i just put on screen some statistics so i i started a job fair and i i give people the ability to select their skills what they use and through that data first row into here and the interesting part i can no it doesn't work it seems like this is the skills from the last job fair and you see that most candidates internationally are still like speaking c plus 11. 14 linux lancome 17 and modern c plus plus this seems to be like an object orientation this seems to be what most candidates at the moment feel comfortable with telling their future employer or as what what they want to you know work with or what they can right now do and so that is as as a general thing something you can go with but when you're starting out today when you want to build a career for yourself i think c plus plus 20 will be a really interesting one it says once it's like an industry standard but right now with cute being on 17 and other frameworks also being on 17 for a while it's probably 17 what you need to understand and then if you find your employer you will know what to learn because in the end it's not you know what you wish or what you would like to learn it's like what what it is they actually work you do a c plus plus so you think c plus 20 is usable maybe i i know people working with it and i i have seen people actually also on this to say that they use c plus plus 20 or the day you know no question about that it depends which part you use but we have a revolution there and a couple of things we are not mature although the compiler vendors would like to be mature there and we have no highlights about that and people are still struggling i don't understand c plus plus 20 now that's my impression it's a new c plus plus 11. it's a new base standard and nobody understands it at the moment oh it's more i think it's i think it's i think it's bigger than c plus plus 11 in a sense that it has more dramatic consequences definitely but it's it's kind of you know it's not the big consequence no coroutines more rangers is is huge ranges changes your your complete programming model concepts so these are well the last two are the big ones and we learn how to use that now and i think that's it's too early oh but it's okay it's good to know that oh no question about that but it's i kind of feel it's good to have a standard again which is not like fully implemented when the releases to to see that you know we kind of you know let me talk about that well it kind of felt like it was 14 and 17 you know it's it's 11 was the last standard where you had to wait for for a few years until like you know you had a broad implementation across every compiler was crying microsoft needing to catch up for years and now it's more like a crane catching up with microsoft so times have changed yeah but wait a minute so so we have more or less complete support by microsoft for c plus plus 20 now and that's two and a half years in the industry now in gcc important parts are missing and clang is very high yes yeah so that's a current situation so and yeah so i guess after the standard is released so this business that i think i don't think this is also not having everything so clock clang lacks a lot a lot so clang is not even core language complete a call feature complete as far as i know now a lot of things simply don't work there yet from the language point of view and and then in in gcc my latest my latest knowledge i don't check it every time it is that yeah chrono parts are missing and and then std format or i would love to have std format as soon as possible and so that is unfortunately both smithing missing both missing yeah and then we have the interesting situation that with modules a few things are missing to make it portable and but that's that's an interesting question that the responsible people in the standard committee say oh it's up to the compilers the compilers say oh it's up to you to tell us what to do and yeah i mean honestly i'm not able to write a portable module program now right now and and even the simple so hello world with modules i'm not able to do that because for example i don't know any standard suffix i should take so that it easily compiles on the different platforms hey that's not right from for practical usage that's something for experts on specific platforms okay but we are coming with c plus plus 20. three already so that is implemented already but but i think to some extent we should concentrate a little bit more on our homework before we come up with something new making something new is cool doing your homework is not so cool but important so what's your feeling about c plus 23 it's great it's a nightmare and we made a couple of mistakes i think so i discussed that with a lot of people they tell me you know you have no clue what you're talking about okay fair enough yeah i think we have we're really great stuff so i think the general approach of modules is great so what what i see i think i can understand why this helps me in practice core routines as well tricky complex basics so now we need more and experience but as we see the expense leads to a situation where this will need one two three more releases until we can really use this and standard scenarios with support of the library okay concepts i think is really good so that's good and that's good to use here we have lack of support of compilers and not that that cannot do that but you need a certain quality of error messages there so if if a compiler says this constraint is not met and doesn't even tell you which constraint it is then we have a problem and but they're working on that no complaint it takes some time and the last thing is ranges and views i think ranges and views is i have my problem with that i mean what we really see the problems and with ranges and views that that we have to be backward compatible so ranges is fixing a lot of flaws of c plus plus in the standard library so they provide a lot of new tools in std ranges or other namespaces which are also available in an scd people don't know what to use they are confused which namespace to use and then we i think we at least regarding views we make a cup made some design mistakes some people say it's not okay to say this is design mistake they say that was a design decision and you might have done it otherwise but i think std views is not a library for the ordinary programmer for the mass we will run into significant problems when we make use that for non-experts but from what it can solve and what it provides it should be a library for the mask and so i think we we have made mistakes with our design decisions there and yes that's a matter of taste we might come back to the problem that it we standardized by experts and these experts have no idea what they what they do with the program as it gets everybody looking at the keynote at right we'll learn more about that i promise that right so what can you tell us about your keynote my conference in four weeks well at best it's no at worst it's at best it will create a productive discussion i'm at the end well at the end of of my birth of the c plus 20 book so it's more or less complete now and that means i have a pretty good understanding now of it although a couple of people might doubt that and i've seen things i like i've seen things i don't like and i named them and yeah i in my talk i mean a keynote i will concentrate on the on on both the good things and and really some significant flaws we have and how to deal with them and practice and what else should i say it i think the keynote will not be boring let me say it that way so i remember your last keynote that well yeah this will be different yeah so last keynote was the format was a little bit interesting so this time i have to say something i have to say something but i don't like and i don't want to say i don't like it i want to explain why and what i don't like and i but i also don't want to destructively criticize c plus plus 20 i want to show how to make it better and that is that is a plan so a couple of things are under the hood and somebody has time here to look the next four weeks in some code and learning a few things about c plus 20 and trying to improve some idea and implementing something interesting send me an email okay so we've touched on that but we you know we're already going in a different direction and we had a question about it so i just want to bring it up again what is your opinion on like the new languages which came up this year and like cpp2 carbon viral and also rust which you know is a different thing than the prior languages i mentioned how do you see it do you have experience with those and you know how do you see that what's your opinion i don't have experience with those except that in each and every of my training people ask me that and i have more more trainings but i say oh we should do it like in rust and tell me that everything is better there is something i learned in my life and one thing is the best is not important it's it's important that you and your problem domain choose whatever is appropriate and a lot of things are important for that and one thing we have and that's for no doubt we have a big community of c plus plus we have a big tool set of c plus plus we have years and many years of experience and so c plus plus is a material language and all these alternatives are not some may be more mature than others like rust is probably more mature than carbon which i didn't even look at but all i say is yes i think it's time to make some things better and and it would be very strange if we couldn't do something better i don't know if if you are aware how old c plus is it's 50 years old because we are compatible to see and the first c plus plus c version programming language c came out in 1972. and we'd still have to deal with the fact how aries and pointers behave etc we can definitely do things now better and we can do definitely things better than in c plus plus our biggest problem is backward compatibility everybody is fed up with that everybody is fed up that we don't break in cpas pass existing code the usual discussion is if i because i have this discussion all the time is so what do you want me to break and then everybody gives you a different answer and they say but this you have to be keep backward compatible because we use that so so that's a problem of a mature language and we we don't want to run into the problem of python where moving from python 2 to python 3 took i don't know 10 years it's is it over now no probably not so we have de facto we have two pythons so maybe it's time to have another c plus and cam seems to be one approach or other languages that do it better like us maybe an approach i didn't look at them in detail all i say is my time is fulfilled by trying to understand c plus plus as as somebody doing this for 30 years in the standard committee and i really have a trouble to understand what we standardize and follow all the different things i have the connections to austin and then i try to document that that's all so i cannot say that something better i'm pretty sure we can do better i'm pretty sure there can be something better but it's also about maturity etc so i'm interested and and say yes good and and what i really don't like is when when startup c plus plus people say don't do anything with my baby they really get angry if people don't like c plus plus anymore i don't understand that it's a tool it's a tool this tool is good enough for something it's not good enough for other things and yes it's an old tool so we have problems and the problems get bigger and bigger and bigger so great if we have something better use it why not we still have four million programmers that need our help so yeah i yeah great that we have new languages there's nothing that replace the c plus bus now yet it might be and great good that's good but i mean that's it i just this week have the experience of upgrading my own code base to a php8 and my php level is kind of stone age so my programs and the way i call this php is fairly low level and i was surprised what kind of php code was running without making any problems in php7 like to access an array index which doesn't exist no problem you you know you you call count on a non-arry it just passes through and first php8 there's a lot more type safety and code now or breaks silently when you exercise an area index which doesn't exist instead of being like this kind of strange a way that it's a kind of probably stimulated or something so [music] i didn't read about it by the way i did some research on like what province to expect when do that but it's what my code now currently doesn't i'm kind of you know most of it is works but it's like those two percent of lines in your code that broke and that you have to find and fix just kind of gets annoying and kind of gets to thinking you know should i learn python until i try to to reboot or what i did was php in the last three or four years in python which you know would be doable but also mean to learn a complete new language and the same problem as c plus plus and then you have a large code base it's not that easy to to move code bases but you cannot compare this language because it's clear yeah i mean well if we try to let c plus plus become java no yesp or script language that's a different language we have the reason why we have we have a lot of good reasons why c plus plus is that way and compile time problems is better than runtime problems and many scenarios and so yeah be careful with all these things as i said yeah choose what is that appropriate in your context and situations so we have a question about book publishing and you are writing books and publishing them so regarding book publishing some books get a bit outdated as they are not edited at the same pace of standard publication how is your experiences mean pop now these are two questions to implied questions so first of all i started with i started with a with a book that was do i have it here for that so because that it has it has a german title d that's the term v d d i e c plus plus and then standard library do we have the german title there yes yeah so like that so now i came to my first meeting so we touched without boost there so i came up to my first meeting only the first line was visible and brianna came along didn't know me and read die c plus plus that was the beginning of a long relationship so i have some history yes and the first one was in german i had different publishers i had different ways of writing i had co-authors i had without i could say a lot about that i'm pretty happy that i'm i'm now able to self-publish my books but of course i also have some power and i'm well known so that it's not so easy to to make them knowledge so so that people are aware that these books exist and so there was a time where where i switched to lean pub and the funny thing i still use my tools from 30 years ago which is latex with a couple of special macros just for lean pop because lean pub started with markdown and just for the impact i've wrote an converter from latex to markdown because that was the easiest way for me to write that book and it was interesting i can in lean pap publish pdf so camera i i create camera already pdf just for the other flavors like ebook like kindle or whatever we have there they then use the other the generated markdown for the other formats and after me writing this tool that was very helpful and useful and i could easily switch to another language and i have all my scripts i have so many scripts that check for example that all the examples i use have the same code base as the as as i tested with my compilers and so in principle the experience with lean pub is very nice i would say revenues as if i would publish with the company these days a company makes better marketing but takes more money so that's that's roughly it i like to work with them i i try to avoid amazon but i cannot avoid that they are ruling the world and i i have a problem with monopolists especially when they use their power and but as you know my books are printed on demand with amazon well the heart cover version is not so yeah the experience with lean pub is good i would have to say a few things but in principle it's a good company i like them so and the pace with the standard in my books no way no way 200 people are standardizing c plus i'm one i i hope i can follow and the standard is now too big for one book i started with a book about the standard library that's that's no longer possible no way so i switched to this model where i said well maybe the best thing each and every c plus plus version i i i write a book about just the new things and then from time to die something else so the move semantics book nobody describes move semantics in a proper way at least i'm not aware of that well yeah of course all parts of it but the whole story the whole concept of move semantics all the traps all the details we didn't have a book like that so i said i have to write that textbook was i'm thinking about this initialization and overload resolution buttock philippec did that book i i didn't look at it yet so another one brought that so that's good so we need books that conceptually explain c plus plus you can't use cpp reference to to learn c plus that's not possible and then we need beginners books but we need also the books that those people who know c plus plus already they they learn and we have too much things so i i can only write one thing at a time that's a problem yep i've heard scott myers in both ways he was very happy with his new publisher in 2000 14 because he finally had found the one publisher which was better than all the others which is awesome i don't want to name them so a few years later i it is he said it's one of the reasons he quit writing it's like he's he didn't want to go for self-publishing and he didn't want to be the scott myers for the new standards because this was the thing that you know couldn't be existing in due to you know he could write that book today and but he decided to retire because it was just you know it's just so much new things and the combination of it and nobody knows if if scott can give like in 2015 or 14 advice on something that's the verse 11 which would still be true today and he was like just saying what maybe it's smarter too to retire from you on that and it's not well you tell me i should do that also i that's caught a couple of times and we talked about topics like that very deeply i i cannot say anything about that so yeah i know and it's a little bit funny i i have the expression impression that the that scott left left the gap in the community of one somebody bringing new things to the point and so who is who who has this role now and maybe i i can fill that up a little bit but i think jason turner has this role now this is youtube videos with the viewers so with the new media okay yeah yeah i i don't think that there's like you know and i understood that scott did retire i understood that it's basically by the way i i knew that since 2014 after the conference and i knew like a year before this was public that he was thinking about that and but there is a question about posix rps and bringing them to c plus plus and libraries do you have any suggestions to you know what libraries to use what codes to use what to do how to use projects from c plus well at first thanks for the question semaphos are in c plus plus 20. so we have adopted that oh at least in some way i really i really really really would make sure i'd like to see that that we don't look only at posix if you look at the phi system library you see a couple of things set up using posix specific stuff and that means that the file system library has some issues on windows and we really we really should look more broadly because the fact that we have at least two major worlds that is the unix linux world and the pc and a little microsoft world and and we should at least be able if we write code that it works on both which is pretty tricky i mean especially in concurrency they have different ideas about things like that so yeah semi-folds are there i think message queues i'm not sure we have a i'm pretty sure they are discussed i don't know about what is discussed right now they're in these groups yeah what else do we have so yeah in principle yes adopt apis and make them but make them in a c plus plus fashion not in a fake c fashion as we have done and sometimes well not really but sometimes so but it takes time i mean we see that when we look at how long it takes to adopt a inter-processing library that deals with sockets etc and yeah we are still working on it and we still have problems to adopt it so it's it's really tricky to make that portable and that's why it takes you if you not think about the standard if you think about the perspective of someone needing to use the message key would you use projects or do you like i mean it's maybe it's not like a topic you're familiar with like using posix message keys from c plus all right do you have a library in mind to use for this no i cannot no i don't know enough from that so i know usually the things i learned which are both operating system specific like concurrency fi system io etc they i learned the details when i described them why they are standardized the way they are in c plus plus yeah of course i have a background with sockets and and unix and linux but the real tricky things i'm not i'm not up to date so i learned them usually there so what is a i don't know why why do we have problems with condition variables it was funny how much i learned when we had the fix of std thread so because we made this survey design mistake and std thread c plus plus 11. we knew that but nobody was willing to fix that and then i proposed that we should go that path and i made a proposal and nobody wanted to do that and we turned out that after a while the community started not to use std thread anymore at least some and so they they implemented something different and there we found a couple of flaws and so i don't know i think i think it was hapsata who came one day back to me and said hey what's up with your proposal to fix sd thread i said yeah what's it reject that nobody was interested we had some opinions in the c plus senate committee let's let's no longer deal about low-level things like threats let's let's talk about high-level concurrency descriptive ways of concurrency problems but it turned out the fact that we had a big issue so that was the moment we came up again and then i don't know 10 years later now with c plus 20 we standardized stdj thread which is the right way to implement std threat and but de facto it's a bug fix a backface and we had we knew that we have that problem in 2011 already and there were even votes saying in the center committee we have to fix that the rest is politics we have not big politics in the standard committee but sometimes we have so yeah there's some interesting things where you've been involved and which have been fixed by the standard committee later there has been a lot of debate ongoing with api and i'd like to you know get your opinion on api and how you see that i mean whether it's api or api backboard compatibility that's an issue do you mean that or do you mean abi break or do you mean the way api looks oh that's a good question i i mean that the yeah the abi application binary interface not api api two different things and that c plus plus should you know have a way to handle that and i saw one year ago at c plus plus now the paper which is actually now two years old trying to deal with it through interfaces that you'd be able to have backward compatibility but also go forward with adding an interface which changes or breaks the api for future standards or for chosen api points and i like that but i haven't heard much about that paper since then that's a killer pain point of c plus plus std thread we had to come up with stdj thread because it would have been an api break if we fix that now we had abi breaks experience at some point i think that the biggest abi break experience we have is when gcc changed the the abi of std string so they came up from a reference counting implementation to short spring optimized implementation when you talk about the developers from gcc they say never ever again because de facto they have they have they maintain two string apis they need a couple of compiler tricks so that they can be used both and internally they have different symbol names so that that it's de facto not an api break it is de facto the new std string is a different type in jesus than the old acid is three but you still run into significant problems and never again they say and but it's it's always a question of of people power so how many people do you have to implement something and the problem is then maintenance so i understand that one of the biggest win of c and c plus plus is that code you compile now can be still compiled in 30 years and you could you can count on that and that's important for a couple of domains and industries but we i think we need we need something we need something and but you know whether we invest invent something in c plus plus or the invention is a new language that is similar but not close and sooner or later we have to break things and i don't see that we ever do that in c plus anymore so i think that ship has sailed uh there's a reason why we have carbon now and a couple of people working on that coming from major companies starting with g and right maybe not so much putting effort in clang anymore i don't know that that's my impression and yeah de facto we are we are fed up too many people are fed up now but no way that we ever accept abi breaks because even if we accept that in the standard committee the key people are the compiler implementers and they will reject to do that because they have to do the support people then call microsoft or whoever and say my program doesn't compile any well it does compile but it we have a column or we have different behavior now and that's that's a big selling point so we had some trials in the standard committee to come up with some models to deprecate things and replace them over two or three versions the people in the center committee wanna didn't have enough resources to work on that here you see the problem when something is community driven for that you need really really power resources people and time and money and we don't have that the people who come there have that personal interest while they come to c plus plus and say well i want to have this library i want to have this fixed i want to have this improvement so we have a lot of different interests there we have no chief architect and and in such a model i think if we don't care for abi breaks then we would really get a total chaos and so we have to do that otherwise it's not maintainable and that's it we won't have ubi breaks and c plus plus anymore so we have about one minute in this room left and then obedo has this wonderful feature that it is that all of us will be kicked out here so i guess we're going to continue this conversation in about a minute in the launch so then i can see you all that's good for the conversation and then we'll have the big table with nico and there will be having a continuation of another c plus hangouts if you want to join us there join us in the lounge and otherwise thank you for listening and thank you for coming nicole and so last 45 minutes seconds are yours thank you interesting questions