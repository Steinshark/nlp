hi everyone welcome to another episode of coding adventures today we're going to be experimenting with some little ant and slime simulations but first i'd like you to imagine that you're a merchant who travels from town to town selling cabbages perhaps so you'd like to find a path that takes you through all the towns on this map arriving back home in the shortest possible distance here's some slightly confusing code which recursively generates all the possible solutions to this problem and each of these solutions is evaluated in this function over here simply by calculating the length of the path and then saving it if it's the best one found so far [music] so for these 12 towns let's try running the program and it only takes a second or so to crunch the numbers and here we have your optimal cabbage root but now let's say that a new town crops up over here which you obviously want to visit as well so let's run the program again this time it's taking a lot longer to figure out the answer the trouble is the number of unique solutions is equal to the number of points minus one factorial divided by two so with three towns it's just one solution but by the time we get to a modest 20 towns there's already something outrageous like 60 quadrillion possible solutions even with much more sophisticated algorithms it's very expensive and often just completely infeasible to find the optimal solution and so a lot of interesting techniques have been developed for finding something close to perfect very quickly as i was reading up on these a little i became intrigued by one approach in particular ant colony optimization which is inspired by the foraging behavior of you guessed it ants essentially how it goes is we place a virtual ant at one of these towns which then needs to pick a new town to travel to that it hasn't visited yet the ant would prefer some place nearby so i'll calculate each town's desirability as one over the distance raised to some power the higher that power is the more strongly the ant will prefer the nearby towns it will make its final decision at random but the probabilities are weighted based on that desirability value so let's watch our adventurous little ant on his mission now that it has visited every town we can retrace its steps to see the path that it took it's not a fantastic path but solving the entire problem is a lot to ask of one tiny ant so let's give it some friends to help it explore once they've all finished their journeys what we'll do is score each of their paths by how good they are and these will act like pheromone trails as the analogy goes to help guide the next round of ants so ultimately each ant chooses the next town and its path probabilistically based on the distance to the town and the strength of the pheromone trail there in that way each new group of ants explores random variations of the best paths found so far and any improvements are reinforced thanks to the pheromones let's try run this new approach on those 20 towns from earlier to see if it actually works i have slowed the simulation down so we can get an idea of how the pheromone trails change over time and here it's already settled into a really good looking path it took about 50 ants a split second to find this which is a nice improvement from the six centuries we were facing before although of course the trade-off is we have no assurance that this is actually the best possible solution just for fun and please try to contain your excitement i'm going to ramp this up to 100 towns here again i'm showing a slowed down view of the pheromone trails but it's maybe interesting as well if i run it again and instead display the best path the ants have found so far so we can see how that develops over time as well [music] so i think this is a really cool algorithm the only slightly annoying thing is there are a number of parameters for controlling the simulation and it does take a bit of trial and error to find values that work well for a given problem anyway this has got me interested in playing around with a less practical but more sort of fun visual simulation of ants so i started by making a simple flat ant graphic and brought it to life a little with a crude walk animation i then imported it into unity but something went terribly wrong in the process and the result was mildly terrifying [music] i got it working in the end though and wrote some code to make it follow this green dot around which is going to represent the ann's food source here's the ants code as it stands right now and i want to modify this quickly to get the ant to wander about on its own i'll try achieve this by simply nudging the desired direction by some random vector each frame and let's see how that looks this ant is too indecisive and not making much progress in its life but i can turn the wonder strength way down and now it's exploring its surroundings quite nicely i think the next step should be for the ants to be able to sense food if it's nearby and pick it up so i've added some lines of code for handling that and let's test this with just one end to start with that's working well i think so now i'll test this with a bunch of ants the ants shouldn't just greatly keep all the food they find for themselves though they need to take it back home to support the colony i really don't know much about ants so i did a little research about how they even find their way home it turns out they're smarter than i'd imagined for example beyond recognizing landmarks which is pretty impressive some desert dwelling species are apparently able to combine directional information from polarized light with distance information from essentially an internal pedometer to calculate a straight path back home i'd like to keep things simple though and have all navigation done via pheromones so inspired by this really cool video that i came across i'm going to have the ants use two types of pheromones this blue one they'll lay down when leaving their home to search for food and then if they actually find food they should turn around and follow the blue pheromones home while laying down these red pheromones to try recruit other ants to the food source they're not doing a great job at the moment but that's not their fault i haven't actually implemented the pheromone following yet so for that i'm going to ask each ant to sample three regions in front of it and based on the concentration of pheromones it detects in these regions it will either turn left keep moving forwards or turn right plus a little bit of random turning still on top of that i think this is a nice simple way of handling it which i actually came across in this paper which describes an approach to that problem we looked at at the start of the video inspired by slime modes of all things it's quite intriguing so i might come back to it but for now i'll just be borrowing this little sensory scheme for the ants here's the actual code for it and as you can see down here i've made the pheromones lose strength over time to sort of mimic the effect of evaporation i'd really like the pheromones to also diffuse outwards over time but i'm not quite sure how to handle that yet anyway let's give this a quick trial run with a handful of ants [music] ok it seems to be working roughly how i intended so next up i want the ants to be able to avoid obstacles or at least not simply walk right through them so i've spent a bit of time writing some dubious collision detection code which does nevertheless seem to be getting the job done i then wanted to generate some sort of map like one of these from this ancient tutorial series of mine i have a strong aversion to my old code though so instead of reusing that project like a reasonable person i began re-implementing it all from scratch after several hours work however i came to the realization that my new code is not so great either fast forwarding through some frustration i eventually did get it working and i also added a brush that i could easily paint in obstacles or carve out little passageways come to think of it i could have just taken two minutes to draw this in paint but anyway i ended up making this map for the ants and i wrote a simple spawner script to scatter some clumps of food about the place and so with all this set up let's unleash 500 ants from the nest and see what they get up to [music] [laughter] so [music] over on the right the ants have collected that entire food cluster but they'll keep returning there for a while still until the pheromone trail has finally evaporated real ants are vastly more sophisticated than what i'm simulating here of course and in this situation for example i read that pharaoh ants have been found to actually deposit repellent pheromones when their resource has been depleted to discourage future ants from that trail [music] this has been fun to play with and there are many things i'd still like to try out but my attention has been sidetracked somewhat by these strange and fascinating slime mold organisms here's another slime paper i came across this time about pattern formation the behavior described here is pretty similar to the ant stuff i've been doing but i'd like to give it a quick try and this time i want to implement it as a compute shader so they can hopefully do a much larger simulation the first thing i wanted to get working was generating pseudorandom numbers in the shader i saw a recommendation for using this little function which takes in a number and just fiddles with the bits a little there's nothing actually random about this of course but the outputs should hopefully be very different for inputs which are close together to test it i have this little function which is going to be run in parallel for every pixel in a texture that i've given at we can start by getting the index of the current pixel which will be zero for the first pixel one for the next and so on and then we can generate a pseudo-random number for that pixel simply by passing the index through the hash function i'll set the brightness of the current pixel to that value divided by the maximum possible value just to scale it between zero and one and let's now take a look at the result so it seems like we have some nice random looking noise but let me increase the size of the texture just to see if this still holds up we're on the lookout for any suspicious repeating patterns for example if it looked like this or even worse like this we should definitely use a different hash function but i think it was looking good so i've now started work on the slime simulation first of all i've created this agent structure which simply holds a position and an angle and then i have some code for updating each agent the update rule is very simple at the moment just move the agent based on its current angle and if it tries to go off the edge of the screen don't let it and turn it to face some new random angle at the end i have this trail map texture and i'm just recording the agent's position as a white pixel in there let's see what this looks like not terribly interesting so far unsurprisingly now just like with the ants we want these trails to evaporate over time so i'll make another function that runs for every pixel in the trail map and just subtracts a little bit each frame you can probably imagine how this looks but i'll show it anyway [music] next we want the trails to diffuse over time which is something i never got around to implementing for the ants but it's really simple with this setup because the map is an image so we can just blur it a little each frame here's my very crude code for that which just sets the color of each pixel to be the average of its neighbors now we just need to make these agents attracted to the trails so i've added this code which simply senses the concentration of the trail at three points in front of the agent like before and turns based on that and there's also some randomness involved the sense function looks like this and in here it's simply adding up all the values in the trail texture that lie inside the bounds of the sensor let's have a look at the result this is currently taking place on a very small scale it's a 320 by'0 map with 250 agents but because we've taken the trouble to write this as a compute shader which runs on the gpu it should be able to handle something much bigger for our first experiment i've initialized the agents with random positions inside a circle all facing towards the center and let's see how this evolves over time [music] [music] [music] [music] so these have been pretty interesting looking i think but let's try making multiple species of slime this should actually be pretty simple i'll go into the agent structure and add a species mask so each agent can belong to one of four different species then when drawing the trail i'll draw into the red green blue or alpha channel of the texture based on that mask and finally in the sense function i'll just modify this line so that it treats the trails of other species as negative so it should try steer away from them let's try a simple test with red and green slime [music] that's kind of cool let's try mutating a third of the population into blue slime and see what that looks like [music] i find it quite fascinating seeing these organic looking patterns emerge from those really simple rules that we've implemented [music] there's definitely much more to explore here but other projects are calling so i'm going to leave this here for now i'll put links in the description though to some far more impressive stuff that others have done with this technique in case you're interested in checking those out in any case i hope you've enjoyed the video and until next time cheers you