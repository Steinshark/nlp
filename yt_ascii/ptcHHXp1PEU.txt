in the previous video we looked at our guess the philosophy of writing software for giri's and i thought in this video we'd actually talk about how the programs are internally structured it doesn't matter what system you're using whether it's a mac whether it's windows whether you're writing for a risk us an atari and amiga x11 it they all seem to have a similar structure one of the things you find with gui software is that   one gui program is very similar to the next gui program or the previous one you wrote and so it lends itself to having sort of libraries or frameworks   particularly object-oriented frameworks that you can use to write the software so these days you if you go and write say softer on a mac you'd perhaps use cocoa to do it and you wouldn't necessarily see this structure   internally or if you write it in java you would use the java frameworks to do it but under the hood the same things there. i'm gonna be looking at under the hood what's going on and how the operating system is getting the   interaction from the user into the program so you can write what's happening   so when we talk to the previously one of the things we said is that with a gui program   the program is no longer in control of how things happen to the program they can't say at this point how we need to enter this piece of text. it's very much up to the user that's driving you the users clicking on things. they're moving windows around they're in control and so you need to structure your program to respond to those events coming in from the user and then process them and do the right thing based on what that happens and the way that most qe programs are written is they have what's called an event loop at the center of them and basically in that event loop the computer will be sitting in a loop because it's a loop doing the same thing after again and you basically get a call to an operating system supply function and let's say it's called wait next event. that's what was called on the original mac on the atari st was called event message or event multi depending on what sort of side you wanted on viscose. it's called wimpole windows does something slightly better something slightly neater with some of them probably say but it's the same sort of thing we'll look at that in a second well so what the operating system does or what the toolbox that provides the user interface does is it's sitting there it's monitoring the input coming from the user whether it's from the keyboard whether that's from the mouse being moved or them it's been clicked and so on and it assembles those inputs into a series of events. so if i press a key on the keyboard, we will get two events for that we'll get an event when the key goes down and we'll get an event when the key comes up as well and those events go through the operating system as from the hardware up for the operation went into the user interface that part of the operating system and then they get passed to our program as events. so when i press a key on the keyboard eventually when next event will return saying hey there's a key down event from the user and then i would have to write code here that says there's a key down event do the right thing? in that situation and then the village when you get the key up event when now let go of the key and you do the right thing there in the same way if i move the mouse or press a button we'll get an event or a message telling us that the mouse has moved and that the mouse button has been clicked and we'll get a mouse down event and a mouse up event as the buttons pressed and comes back up and that event will tell us what the button was? the location where it was pressed and so on in the same way the keyboard event would tell us what key was pressed and what's happening so our program was sitting there waiting for the next event so what you'll generally end up with is this will often return some sort of structure with the data in and then you'll have a big switch statement or series of if statements to switch on the event type and this is sort of pseudocode and then we switch on the type and if it's a keydown event, we do one thing if it's a key event, we do another and so on and then we can handle those things these aren't the only events you get the ui toolkit will create lots of other events that you can do to do things so for example if we've got windows on our system is there a more generic term for these things than windows just because windows is windows and no they are called windows i've not seen them referred to as anything else if we click on the window bar to move it around the screen then we don't get a mouse down event there and have to track the window being moved around and they're getting a mouse of what the operating is what the ui toolkit will do is ok you've clicked on the title bar you've moved the window around i'll send you an event once you finish dragging it to say the window has been moved to this position in the same way if i have another window overlapping it like that and i then move that one out of the way suddenly this part of the window here becomes revealed and i have to draw that part of the screen again or the operation has to make sure that part of the screen gets drawn again, and so we can end up with lots of events coming from windows but they're constructed by the ui toolkit based in what's happening. so it may have a case for example that the window has moved or in my other case that the window needs to be redrawn and so what happens it's a program basically sits in this big loop and we do that wow quit isn't true so basically we have some sort of things says, okay the programs finish that we get out and we set that to be true then we'll stop this loop, but we sit in this loop continually going there waiting for an event if there's not an event then this will just block the system won't let us continue until there is an event there on the other hand if there's lots of events will get them through one by one and we'll process them to update things based on what the users doing based on what's happening we've talked about the keydown event the key up mouse-click events would probably wouldn't get worn when the mouse is moved if you think about as the mouse is being moved you've got lots and lots of events most of which you're not interested in you're probably only interested when a button is pressed or so on the only times pass that's different is if you're dragging something around the screen and in that case you will often say to you listen, well, i'm dragging something here. tell me about those events the rest of the time you're not interested in what's happening? at those points so you probably don't get mousemove events, but you can register them and you can also do clever things like i say actually tell me what it moves into this area or moves out of this area so that you don't get multiple ones, but you can sort of track what's going through at that time? so our program is based around a series of events coming in that represent the input coming from the user but we still have a problem. we still have to sort of direct these things to the right place i mean it's obvious if we've got sort of a window moved event we know that we're coming from that window and we know it's moved so we know what's it's being dealing with likewise if we get a mouse-click event, it's pretty obvious where it's going we can find out exactly what windows underneath there but for something like a key down event, it's a bit bit more nebulous we have to have some sort of idea of there being a current window which would then deal with it? but that may not be the right place for it to go. so for example, you may have a text box, but then someone presses ctrl q which means quit the program and so actually if the text box dealt with that then where you want on the text box quitting so it probably won't do it you want them to enter ctrl q into the text box as data? so you need to have it passed back up to the rest of the program? you need to sort of work out where you want this to vent to be deal with them in some systems you have to program that into the logic of your code in others. you can sort of direct where you want things to go so windows actually made a nice optimization they instead of having this sort of way next event loop and then you do the tests based on what was returned you have a similar structure? so you still say while quit? equals false and then inside that you have your loop which says pink message so you have a look to see if there's something in there and that returns the event windows causing messages rather than the events because you get a message from the operating system when the event happens it makes sense of things and then you run another function on it, which translates it slightly so you want the translate message function and then you run? another function called dispatch message and that becomes your main loop of a window so even if you look at most windows programs they will have something like that there it may be hidden inside the dotnet framework it may be hidden inside mfc whatever you're using to write your program, but somewhere inside there you're going to get something like that that against so how's windows handling it? well, the same thing is happening. but what windows did and this goes back way is when you create a window in windows i'm gonna use an atari window as an example here when you do on a mac or on an atari on risk-off you just create a general window and you tell it what you wanted to look like with windows you actually associate a function with its associated class with it and that has a function that handles messages with it and so what windows can do is when a message comes in it can direct it to the specific window because it knows what function to call so you'll probably watch he doesn't have a big switch down it has lots of functions which are then bound to the windows that you want them to handle so that's basically how you write a gui pro you your event loop your message handling loop at the center of things and then as the user interacts with it you have to handle the messages the events that come in and update your program state now there's two things that immediately jump to be obvious here you want this code that handles this thing to be quick? because if it takes a long time to process that message there'll be a long time before the next message is processed so if you press a key and it's a takes for 40 seconds to handle that key being pressed it'll be 40 seconds before the next key would then appear on the screen? so you often found that you had to write your programs in a way that they do some processing and then go back into the event loop and then carry on will do a bit more processing and do a bit more the event loop so they still appeared to function otherwise you often get that effect where the gui froze while it is impressing and then came back to life which was not from to use as a program. so you had to basically have this happening all the time the other thing you can do is push things off into another thread and have them running at the same time but again that creates its own interesting issues for writing software but because we're dealing with windows on the screen, we get some interesting things that we have to deal with so let's create some windows. in fact, let's just clear the desktop and go to the clean one so let's say we're doing a bit of programming and we've got a text editor open there with some text and we decide you want to check mail. so we will now fidonet client to go and get the mail we need to open some files and then we decide we want to watch a video on youtube so we've got lots of windows open and as we've seen each of these are separate programs so there's an event loop for this program which is handling the event coming from there is an event loop for this one is an event loop for this one this event loop for our browser handling the events all the messages that are coming for that but as well getting the events from the user and we can say well, okay this windows at the top say so the events will come to this one and then we go on that one and that one becomes on the top and so on the events go to that one as well as handling the events from the user as these windows are updated they can create events that mean that the other programs have to do things now originally obviously a lot of the graphical user interface operate systems matthos atari o's windows viscose and so on and you allowed one program to run it once you still have the same thing because you had desk accessories and things which were effectively separate programs that could do these things so for example say i am watching the video on youtube and i bring my text editor to the top because i want to carry on writing it while watching the video. i've now changed the position of that it's now the current window so i need to be told that this is now the current window so that i know where things are going they may have more than one text editing window open but also as i brought it to the front i've revealed parts of the window that were previously covered up by the other windows and so i need to ensure that those parts of the window are redrawn now. there's various ways you can do it modern operating systems do lots of things to try and speed things up because they have the benefit of more memory and so they cache things and they'll often have off-screen areas where they can each do all the contents of the window and it's stored so the operating system can redraw it automatically, but originally when you did this you would get a message from your operating system saying you need to redraw this window and so it tells you that you need to redraw the area here or to speed things up it would tell you you need to redo all that bit you need to redraw this bit and you need to redraw this bit down here. so when you've got a message saying redraw the window you wouldn't just get a rectangular area to draw you may get several separate rectangular areas. so you need to work out okay, and if you redraw what's in that bit and that bit and that bit now you could if you were a lazy programmer redraw everything every time you got that message and just clip to the areas but the problem with that is that the computer that would take a while to draw that even today drawing lots of things is a complicated thing can still take some time to do so what you actually try ended up how to do is work out well, what bits are being revealed here and redraw that and so on but you could sometimes get those things even if you weren't on top so for example if i'm like that and i move this window in the right way i can end up revealing a section here and another section down here that i have to redraw so the events come not just from the user interaction but also from the interactions of the program with itself or with the other things every time you move a window the operating system has to deal with that and tell you that you need to redraw parts of it and so on and tell you that the windows moved so windows aero, it's got see-through bit. yeah, so who's peaceful step? well, this is the thing and this is everything's mac osx introduced this windows aero in windows vista and so on and i think way them probably just something similar as well. i'm not too sure what they do is they say ok, you've got lots of windows on screen and they're overlapping but what will actually do is will draw all of them off screen so that they don't overlap and you might be can zoom out the other camera and so we've got them off screen like that and what we actually do is we say, okay we'll draw them all so they're completely uncovered as separate blocks of memory and then we'll make a copy of that and copy there and some nice visual effects going to see that properly happening and then we'll make a copy of this and put it on the screen here i'll make a copy of this and put it on the screen here and a copy of that because we're copying pre-existing things we can do our four channels we can do transparency and we can make it all look pretty and you can have wobbly windows if you've got a weird gnome desktop it's interesting depending on the operating system. you're using windows can be more or less intelligent generic windows not the operating system so for example on the atari system, and i think on risk was to remember brightly and it was at the programmers course the window basically was a container and that was it. you had a container than you drew in it on a mac on windows windows can actually contain other windows and they can contain other windows so you can sort of build things up and so actually all the controls you get buttons text boxes. they're actually specialized windows that you can then combine together to form a whole that is a window and so on and you can specify whether they have title bars or not whether they have scroll bars and things, of course, the interesting thing about redrawing things is it's simple if you have to redraw an area here because that's windows come on top of that window like that, but things get interesting if you scroll around the window you perhaps don't want to redraw everything because that will take time i mean when when? gooeys are first being invented. we had computers that probably had an eight megahertz cpu that we're doing these things if that went like the touristy or the original mac these days they're much more powerful in looking about sort of five hundred times that speed four gigahertz sort of roughly three four gigahertz as a russell speed, but even so what we're drawing on them is now a more complicated i sort of it used to be a one bit window, but now we have a sort of 24-bit color with alpha channel lots of graphics and so on it and so it's a lot more complicated or doing the amount of data that needs to be correctly for that is much more times that we've got a high-resolution displays rather than 640 by 400 and so on so yes, the computers got faster but so is the amount of data and also what we're trying to draw this more complicated drawing a bit of text relatively straightforward drawing a nice web page and so on becomes more complicated and so you still have the same problems is how do we redraw the screen quickly when we scroll through what's on there? and so you have to sort of work out what you want to do and sort of do things and we'll have a look at that in a later one now i've got the token so i can lay the value in add the valley from emerged or into it and store it back and hand the target and now i've got the token again i can load something into it into my register add something onto it back and pass the token on and i've got it so i can load the value in add the value from a register story back