let's talk a bit about, ... two-factor authentication or multi-factor authentication anytime where you have a password usually a password doesn't have to be. uhm ... and then they ask you something else like to verify your identity so maybe they send you a one-time password through a text or maybe you have to use an app like google authenticator to produce a one-time number if i want to login to my online banking i have to put my card and type my pin into a device which produces me a one-time password. it's this kind of idea. everyone i think has a kind of intuitive idea of what the point of two factor is but let's sort of try and formalize it a bit and break down what it's good for and what it's not good for and you know, exactly what we're getting from it that we wouldn't otherwise have. the point of authentication is to verify to some server it's usually remote or your machine that you are who you say you are. and so in essence you're really allowed to access the things on that machine or on that device passwords seem to be what we've settled on as a kind of happy medium. they are something we know by i have some knowledge but hopefully no one else has and that means that i can type that in and verify it must be me because i'm the only one that knows what that is right? if you want to know about what happens when other people know those things then see the other videos we've done on this because i've talked about passwords before so if your password is six characters long it's being cracked right now and it's being cracked quickly because we can go through all with six character passwords in a fraction of a second passwords are not foolproof right, people pick bad ones and they get hacked they even they can pick good ones, and they still get hacked because it's like a key logger maybe a key log, or something like this. that's where two factor or multi-factor authentication comes in. uhm ... so usually we talk about these three things we can use to demonstrate that we are who we say we are so we have something we know a password or something else a date of birth a mother's maiden name these are kind of common ones people go for something we have, right. our mobile phone receiving a text message or credit card or something like this or something we are. now, something we are is less common, but this would be biometrics or fingerprints you know iris recognition voice recognition? if we're going a bit more out there gait recognition that's how you walk things like this usually demonstrating who you are has some kind of hardware involved so is less common we're gonna put it aside for today what we do is. we combine something we know with something we have to make it that much harder for someone that finds out that thing we know can break into our account all right so let's assume for a minute that someone's guessed my password they don't have possession of my phone hopefully we don't need a pin code on the phone. they don't have the app on the phone so they can't answer that question when asked so when they try and log in they get the password correct but they can't get the second part of the puzzle and that has two benefits first of all they can't compromise the account but also if someone's logged in successfully of a password but unsuccessfully with the other part of the two factor that could flag a warning that then sends an email to the user to say just check your password hasn't been compromised if your password is compromised even if it's not your fault they stopped someone breaking into your account this is why it's quite common on things like password managers online banking and other you know some email systems and in fact a lot of computer systems these days we'll see multi-factor authentication being used, but that isn't to say that it's always a good idea, right? there's this sort of opinion perhaps in security circles about more security is always better and that i broadly agree with in general but of course you have to consider ease of use you have to consider that some of these people aren't experts and they haven't got that much time to be constantly checking their mobile for extra texts and things maybe they're trying to do this somewhere where there isn't any reception you can't just put on extra layers of security and it not a little bit hinder what people are trying to do i think the idea of multi-factor authentication is to have a compromise between the additional security offers and it being a total pain and never actually getting anything done. you know so for example on some software you'll find that it only asks let's say for multi-factor for logging in on a new device and once you've logged in it will allow you to persist that that session for a while things like this the idea being that it's somewhat inconvenient, but it doesn't get a bit silly about it all right, because this can come back and get you someone pointing this out to me when i was talking about this on on twitter and you know that they had a lot of friends who accidentally been kicked off whatever observer because they've the device that was producing - something they have and that's actually happened to me i used google authenticator to log onto one of my servers and i lost my phone because it got broken and it went off to repairs and for those two weeks. i'd completely forgotten i mean you smash your phone the last thing you're thinking about is all. i must save my google authenticator passwords you're not thinking about that it's gone, and then you realize actually i can't log into my twitter or my or my server for two weeks right in the end. i had to in the end i had to go in via the terminal on the server and reset the authenticator password which was a bit of a pain so you can imagine it's quite easy to lock yourself out because you can lose that thing you have so you know multi-factor authentication is a really good thing and people should be using it where security is a concern right? but it's not a completely foolproof replacement for good passwords, and you can't really realistically use it on every single system you have unless you're just unbelievably willing to put up with you know inconvenience right if you much more patient than me because i you know i can't do it i supposed to clarify two-factor authentication is a subset of multi-factor authentication which could have any number of authentication mechanisms you could imagine combining all three of these you see that on the movies quite a lot where they look into something with their i then they speak out loud or maybe they also type in a password it's going to take an ages to log into anything but you know that's the idea so a good example is the is the hash based one-time password or one-time password right which is at the core of google authenticator and numerous other tools for uhm ... generating these things so we're talking about you. type in a password that you know and then some device you have generates a different password but only it has only used that one time and unless you know both of those things at the same time you're not getting in. that's the idea so i actually have google authenticator so i can show you broadly what it is there are lots of alternatives like free one-time password and another numerous other apps you can search for but do this all what i've got here is google authenticator every 30 seconds rotating these one-time passwords so you can see this little countdown here when it gets to the bottom it'll generate another set of passwords, and then i have to type in that password whenever i log in so how does that work well? let's just talk a little bit about how it works in actual fact it basically ties back into our message authentication codes that we were talking about in a previous video right we had hmac with a key would be used to generate two sub keys, but we won't dwell on that and a message in hash based one-time passwords or h? hotp we actually calculate the age mac of a secret key s and a counter that we're counting up right so the first time i log into this website the counter will be 0 or 1 it's not important right but obviously my device, but i'm using to generate these one-time passwords and the server have to be on the same number the secret key we've shared beforehand hopefully not in plain text to everyone all right so it'll be able some long string that a server gave me when i first created my account or when i first set up this authentication system the idea is that we're combining our secret key that only means a server know with whatever the counter currently is to generate a one-off hash which is then essentially shortened and turned into a small number the way. we do that is we take certain bytes from the h mac because that's going to be for example for an h mac of a sha-1 that's going to be 60 bits. so we take four bytes from here. we calculate those four bytes modulo 10 to the d. where d is how many decimal we want right so on my google authenticator? i was using six so your authentication app would have a certain number of digits the output and what would happen is the server when you log in will perform the exact same calculation because they know were two things that we do they know the secret key, and they know the counter right now i'll get on to exact because google authenticator extends this to use time and we'll talk about that in a moment but the thing the interesting thing about this is in actual fact it's really a second password alright this secret key is a big long password that we have that is stored on my phone or my other device and stored on the server so in some sense that can also be compromised. it's still vulnerable to phishing and many other security issues the problem with this like it's quite widely used the problem is but it you might accidentally get out of sync let's imagine that you generate one of these one-time passwords, but then someone phones you up and you get distracted and you wander off right then you generate another one try login, and you have sync and we've got a real problem so we're gonna check use instead and this is what google authenticator. does is use totp or a time-based one-time? password so always happening here if we're placing our increment encounter with the current time alright so that as long as me in the server roughly at the same time we can log in we still keep this shared secret between ourselves there's obviously a few niggly details that we have to consider here, so first of all we you know, what unit of time we're using we can't use milliseconds because the chance of me in a server being on the same number of milliseconds is astronomically low, and i can't type in the one-time password in a millisecond from it to be i mean, i could type pretty far. no, so what we do is we let's say round to the nearest or floor to the nearest 30 seconds so what you would do is you would take the unix time number part on use time right? so you know link somewhere buried deep down inside that system? there's a little counter, but that unix time divided by let's say 30, okay and then the floor function which basically goes down to the nearest integer so what we're saying there is in thirty-second blocks generate a unique number right which in essence replaces this counter, right? we still use an hmac as before now in practice in case they're out by let's say a minute or two minutes we might calculate on the server side c + 1 c minus 1 just to see if they're ok they're close enough, right? so for example when like when i look at the password on my app if it's about to expire i can still type it in because even if it's just expired it'll still be allowed, right? and it's a security parameter of these systems is how what the window size is. so i'm just oversimplifying this slightly. actually we can subtract a start time here, right? like the default is zero which is what i haven't bothered to talk about it but you can agree with the server a time to start and you essentially take unix time - whatever your start time is but let's not get into too much you know in too much pedantic. presumably that helps with the timezones, right? yeah, i mean time zones caused a problem here that's for another video. yeah, i know right accounting we had a video on that. from the bank. i think due for ease of a technical term very similar so what happened so smart cards were actually to pass a little bit smarter than people think and they actually perform encryption and all kinds of things. what that machine will do is essentially a challenge response. it will send them a request of a card for it to perform a certain cryptographic function the card asks for the pin. you supply a pin and it performs a punk function which is then turned into a a one-time password, right? so it basically verifies that you are both in possession of your card and have the pin which is good news other banks will work on this kind of principle with a time-based system, and hopefully they ask you plenty of time so in my bank to log in i have to use this device and then to send any money i also have to use this device and this stops the old the classic replay attack and time of check time of use issues where i've logged in wandered off stupidly left my online banking logged in and then someone has at all my money which would be if not quite as much as they'd like i've always had a slight concern with the multi-factor authentication they've used in star trek where they read out their password allowed operation in front of everyone else. i mean, okay yes, so the voice recognition part of it. there's something they have maybe you can't steal that but now everyone knows your password it's hope they may take them daily. i'm sure they've solved it by then that we release their problems