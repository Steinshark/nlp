neil vib no say oh sorry wrong side neovib no thank you we're building our own text editor over here because honestly it was just too much to configure neovan that's what i assume is gonna happen here all right noom why ultimately archiving it a short retrospective on neovim from the perspective of an emacs refugee and why i'm writing my own text editor i always get confused to these kind of things if you want to write your own text editor because you like it i totally get that but if you think you can write a better text editor i'm not necessarily convinced on that aspect you know what i mean like the years of thought and careful planning to build neovim like their apis are extremely good but if you want to build it because you love the idea of building your own knock it knock yourself out just knock yourself out all right good evening neovam community i sincerely apologize for the long post and for those who don't know me and you probably don't i am the maintainer of nayum what is this there let's see these are your father's parenthesis elegant weapons of war or elegant weapons for a more civilized age okay beautiful oh okay okay so this is like a chad this is like a chad vim right okay cool close some others okay nice opinionated but not stubborn oh and doom okay so it's a doom max it's kind of like a do max are the key codes gonna be like a leader pf and things like that all right this is cool i i like that i i like when people try to do those things i think it's kind of a fun challenge to build your own distribution there's a lot of cool things about that originally this post was going to be exactly that a short note on why the repository was archived and where i'd be moving forward if someone needed to contact me however i figured i may as well turn it into a short retrospective on what makes emacs so enticing even with the numerous benefits neovim offers and where i feel lua falls short ooh interesting okay a brief explanations of my credentials and editor history i've been using emacs since release 25 damn old hand and switched to neovam during its zero five beta period oh that was a good time zero five was a great time remember how many times we asked tj when is zero five when is zero five when a zero five every day you asked when zero five was releasing it added one day to zero five those were fun times when lua was first introduced since then i've contributed to neil bimkor a fair bit along with helping develop the neovide gui along with a fair few plugins okay so legitimately a pretty dang good programmer here oh tj's like oh i remember those times those times were awful okay this is good okay so so obviously very talented guy here as with many emacs users i fell in love with the speed and simplicity of neovim i think this is fair this is actually why i also went back to vim ultimately after using emacs for a while it was nice no gc pauses minimal start time asynchronous code features and most importantly a fairly quick lsp client i love the simplicity of lua and the flexibility of luigit but i was still chasing that lisp bug hence why i made nayum okay okay is this what happens if you use lisp is lisp one of those languages that permanently alters your physiology so that you can like literally never go back kind of like spice like once you consume enough spice you technically can never leave arrakis is this what happens like he left arrakis and realized that he was going to die without the spice fair it's fair it's fair emacs isn't a text editor it's a modern day list of machine thinly disguised as a text editor whereas neovim starts off with an extensive c chord and adds lua bindings where needed emacs is almost always entirely built almost almost always almost entirely built on lisp and only uses c where absolutely necessary admittedly that's caused a several cause of several emacs performance issues but most of it gives way to emac's greatest feature anything is possible disrespectable i think that's resp i think i i think i understand where he's coming from which is he's sad about the performance and it's frustrating and he hates the gc pauses but the ability to make it into anything you want is just something he likes and obviously this is an editor nerd right if you're intruding to neil bimkor you're an editor nerd and so this is cool i like that here someone says zoom in a little bit i'll zoom in a little bit baby ultimately i wanted my text editor to be the primary environment i work in okay so this is where i've i've res i've changed about two years ago from trying to make my editor the primary thing versus trying to make trying to make my desktop the primary thing and the editor is for when i'm editing i've really kind of made this as a distinction lately and i think i'm liking it i think i'm going to continue down this road but i get emacsers use emacs for everything as i did before in emacs like here's a good example when i am using a vim if i want to go to a different project i press control f you can see up there this actually executes right here you may not notice what happens but it actually opens up a new tab in tmux and then executes tmux sessionizer and then let's just say i go to htmx go it actually changes the directory i'm in and it starts a new tmux the tmux session a new session is detached and put here and all that good stuff so when i do another control f i can go back i can do control a capital l and i've gone back to my previous one so instead of using vim as my control for my prod project i use tmux as my control for my project because it also gives me the ability to have something running in here right i could have this nice little while you know while true loop running in here right a server running right here and then i can go back here and i can be in a completely different project doing my stuff here go back see what's happening here that's how i've always kind of approached that's for the last two years that's what i've been approaching my text editor kind of mindset is that use vim for what vim does well use tmux for what tmux does well use core utils for what core utils do well i don't know it's just a thought process i've been going through and i don't think either one's wrong right i think you can totally make vim into a pretty versatile text editor but i'm not sure if i want to do that ultimately i wanted my text editor to be the primary environment i work in as i did before with emacs neil vim isn't designed for that you're beholden to what the core of the editor allows you to do fair if you want the status line at the top of the editor for example you have to pr into core this is also fair i'd say this is fair feedback right here with emacs you can arbitrarily place it wherever you'd like really having such dense control over the buffer system which is largely implemented in lisp means that you can implement a crdt i don't know system or a window manager around emacs the issue is further exacerbated by how plugins are made managed in the pitfalls of losing using lua oh interesting i like lua i think lua is one of my favorite dynamic languages because of its limitations i'm i again i'm in this renaissance phase right now which is simplicity is better than sophistication i i'll see where i land talk to me in a year how i feel about simplicity versus complication when i say that go versus rust right one day okay we can all agree one deck one index-based indexing is is is a mistake everything else fine right lula is this simple language where the most complicated data structure is a table and the table is in itself the only thing you really need to learn about you want to learn a little bit about metal tabling how you do these kind of fun magic functions and all that and there you go you've like learned the entirety of lua and that is it and i love that i love that idea one of the greatest feature plug-in features of plug-in development in lisp is the interactivity and introspectability of the language while i and a few other plugins have attempted to emulate the conversational software development experience of emacs notably conjure by oil cal thank you it's only emulation once you pass that dot setup call to a plug-in it's over anything past that you're writing at you're at the whim of the plug-in developer interesting i i guess i've never used emacs big enough to unders or enough with a deep enough understanding to understand what it means here you know what i mean like what does this mean here it sounds kind of cool what he's trying to describe or what i'm picturing in my head anything past that you're at the limit the developer if they choose to add additional methods to the configuration or not some will add api or additional commands and many won't emacs just goes hey you want to know where this function comes from want to it up later go go ahead if you do want to work on in a scratch buffer you can reload a plug-in but then you're throwing away the entire state of the plan login rather than modifying what you need okay works fine for smaller tasks but larger the plug-in the more you take the more hit you take i think this also is probably driven from the fact that he's trying to make neovim into his operating system this makes a lot more sense if you don't look at vim as these like standalone individual editing experiences but really just trying to make it into everything because then you do run into this where you try to reload a plug-in or you reset up a plug-in to work somewhere else or you redo something and you lose all that state that you needed so when you go back you have like a completely different experience and it effectively negates your experience you've already set up in one area i can totally see this granted you can mess around with meta tables instead of making a table for configuration allow users to update the configuration of a plug-in at runtime but when you're working against the the interest of the language okay additionally neovim is somewhat somewhat tui first i love that that's actually my favorite aspect that's why i continue to use neil vim while there isn't anything technically stopping you from implementing proper proportional text in image support and neovium gui you'd have to pr that in i don't actually care about proportional text call me crazy i i actually don't i don't i don't i don't like i i'm just a simple man you know what i mean i don't need partial fonts which is why i just use the basic terminal i use whatever my default term is x term 256 right yeah x term 256 i just use default and tmux and i call it a day i guess i don't really have any real need for anything i don't really use ligatures ligatures i don't use any of those things i don't know maybe i'm just old i could just be old i could just be old that's a fact i could be just boomering it really hard admittedly neovim has been making efforts on that front as well multi-grid but having an editor written with proportional text in mind from the get-go certainly helps over the past few months i've tried as much as i can to engineers these features into neovim externally by a b using ffi plus rust to bind into neovins core and heavily modifying neovide but the core isn't a stable abi and therefore the plug-in would break every version an issue that neovim oxy has run into okay in fairness that's on me neil bim wasn't built to work that way okay fair now it all comes down to why make a new editor why not just go back to emacs and build on top of neovim e-lisp is an antiquated language with fundamental issues and high learning curve emacs is not graphically accelerated tree sitter is a start to offering proper structural navigation and editing but the query is not an incremental is not as incremental as the parsing and it has a few flaws you're attempting to rewrite tree sitter that's a bold move to rewrite an editor which is extremely difficult but also to toss and tree sitter at the same time i mean tree sitter is a pretty amazing piece of software okay i i mean this this is a lot of coding this is a commitment this is like a genuine commitment the way neovim emacs handles text in general doesn't scale well with larger files fair a modern rope crdt system would go a long way but in that case you can't use neovim as a library very effectively as you need to sync the state back and forth a major bottleneck async threaded support is practically non-existent in emacs and threading support is still cumbersome in neovim i'm not too sure about the threading support i've used it a little bit you have to do effectively a lift operation right and then somewhere you have to have the sink to async train you know thing this sounds like a mission statement of a man who recently found him or herself without a day job to be totally honest affair this i mean it also sells i mean it sounds like someone who's very passionate also just about text editors and editing environment in general and obviously i spent a large portion of their their time building these things so like could oh hi i'm bored what are the chances your name is hi i'm bored like sounds like hi i'm bored actually has a real chance at doing something well right they could for all intents of purpose there's a possibility that there could be a better version of tree sitter i'm just curious what would be the point of it like could is the minor iteration really worth it are the query updating and all that a real bottom that bottleneck is a very similar story to how helix got started okay interesting interesting you know what we say about helix right all right let's let the man cook okay over let's see how over the coming months i plan to develop a text editor based in months that takes the pitfalls into mind and engineers around them as much as a possible written in lua fennel but uses rust bindings where needed ropes and multi-buffers instead of conventional buffer representation and the entire interface is written in lua with bindings to the primitive graphics library wgpu ideally instead of having command line it would be lua fennel repel where you can arbitrarily run functions the fact that we're getting lua in here i think that that is extremely smart i think lua is really honestly it's one of the best embedded languages out there it's simple it's very easy to learn and you can just do a whole bunch in there honest honestly honestly it's really good i'm not gonna do shelix tj i'm shocked that you would even make that joke tj family man tj making a deez nuts joke like this uh i'd consider my neovim projects stable at this point and i am active in case any issue pops up but that would be the end of it for features if you do need help the issue trackers are still available and my contacts are listed on my github profile if someone would like to pick up the project feel free to comment and i'd happy i'd be happy to support repo permissions neovim still neovim is still an excellent text editor especially if you want just want to edit text but for those of us who like to live at the limit it starts to show us its limits okay fair thank you both the core team plug-in developers and community for such an excellent editor over these past few years yeah see i i don't think i've ever had this problem because again i think i i probably do i have a fundamental different view of editing than i'm bored does right which is that i don't i treat every neovim instance as its own thing i don't use the built-in terminal anymore i really just try to run it as its own thing yeah like it'd be nice to be able to remove most of this stuff right i mean i do like zen mode but like it's very hard to get rid of everything in new of him it i understand some of the requirements and some of the things that go along with it so not upset about it i i get i get where he's going because some people just want to go all in on making the greatest editor and go for it best of luck i'd love to see it and if i'm bored if you if you do end up listening to this and you get if if you get somewhere with this editor or even if you get a better tree sitter something like that honestly let me know we can talk about it for 15 minutes it'd be fun i think it'd be a lot of fun hey appreciate that we take our text editors very seriously again yeah