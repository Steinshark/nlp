hey everyone welcome back to a new episode of tech in turn today what we're gonna do is give this thing a try we are actually going to do some leak code problems in vr to see if it's the future of interviews i'm kind of excited to see what it's like to try an interview problem in vr i suspect it's not gonna be very good i suspect it's gonna be really difficult and i'm gonna struggle a lot and i'm assuming that's why you're watching so without further ado let's get into it look how creepy i look mars that sounds interesting how about this one oh okay whoa okay i'm not here to talk about mars although it is kind of cool what can i do here okay let's get a browser open so that we can actually go to lead code all right whoa whoa whoa whoa whoa whoa okay i'm not writing c plus plus code in this editor i can't change the language let's just go through the problem and i'll write out my solution so okay can i say done given two sorted integer arrays nums one and nums two merged nums two into nums one as one sorted array the number of elements initialized in nums 1 and nums 2 are m and n respectively you may assume that nums 1 has enough space to hold the additional elements from nums too so that's some pretty vital information there that this numbs one array is this destination we'll call it has enough spots to to kind of just slot in nums too a notepad open what is this nope cool can i cool oh okay so here's the way we're gonna kind of think of it we've got one array that's got you know some numbers in it what was the examples they gave let's just say one two three zero 0 and then another one that's got you know 0 six now these zeros here these are kind of just the empty spaces so these don't actually need to be sorted so what we're told is two things that are really interesting this is already sorted this is already sorted and this has enough space these two spots here to fill these things this is a little confusing because i'm reusing that number maybe i should just do negative one make it less confusing okay well how do we do this first time i heard this funk this question i was like sounds a lot like there should be an o of n solution maybe it sounds like because they're giving us this information that looks like a face that we should be able to use no additional storage so the easy way to do this would be to make a third array and then to just kind of merge sort these things and if you don't know what merge sword is you should probably you know pause maybe go try the merge sword question learn about merge sort and then come back here so the idea would kind of just be depicted off that list or this list depending on whichever is the smallest we know these are both sorted right so we just have to look at the front of both of them this one or this one just look at the front and pick the smallest one and then go to the next element and kind of do that until both arrays are sorted now we could do that with the third list that would look like this and then you know one two put the two here and we would keep doing that until we're done the problem with this solution is that you know we're using a whole additional array we're allocating a whole additional array but we're given this information here oh now it definitely looks like a face that this array is big enough to hold these elements like we need to use that information in some way and it should it sounds a lot like we should be able to get no additional space because we're already given that space right so the first thing we can think of is you know the first thing i thought is well maybe i could copy this element these elements in maybe i could start swapping so i put the one here the six here the negative one then maybe i could go through the front first element and i could start swapping the problem is that once we start swapping elements this half like this second array is no longer guaranteed to be sorted and that's a really big assumption that we kind of need right so i guess the next thing that you would say is well i want to use this merge sort concept right i want to use this way of taking from this list or this list maybe i can use these spaces to my advantage so maybe i could shift these zeros these spaces to the front so i've got zero zero one two three and now what i do is i have the second array which is negative one six and now i could pull from the front of this guy or the front of this guy and i could place here based on you know which element it is worst case scenario let's say these elements are both are both smaller than all of these elements we know that it'll fit in here because that's given in the question so this should work right if we go here we place this guy in negative one then we go to the next element which is smaller the one is smaller so we move him here and then what's smaller the two is smaller so we move the two here what's smaller the three smaller remove the three here last but not least we put the six here so that's kind of a way that we're just running through and grabbing the smallest element each time by just looking at these two comparing these two lists the big problem with this is we do this like you could think of it as an of n solution right and that's great but the problem is it's really an o of 2n solution and i know 2n is you know just n but we could do a little bit better right because we have to shift all of the elements from the front we've got to shift them all to the right of the array and then we go through our o event solution so there's a way we could maybe just take advantage of this idea by and just get it down to an o of one end solution and the next thing i say we would try is oh how is this working okay the next thing we could try then would just be to you know what if we don't shift what if we leave the zeros at this end of the array so we've got one two three zero zero and instead of moving the smallest element we move the largest element to the end we've got this negative one six now we look at the ends of the array and we move this biggest element to the end so here let's say six we'll put the six here the next biggest element between negative one and three is three we put the three here and so all we're gonna have to do is remember where we are in this array remember where we are in this array and instead of moving to the front we move to the end and we're kind of still sorting the array even though we're kind of running through it reversely we are still sorting it in ascending order that they're still getting bigger as we go so that should be a great solution that should work and that will get us still it's still of n and this time we're not doing that whole extra n run through and that should work and i would love to type this in here but i there's no way i'm doing it in c plus oh that's kind of cool it's just gonna be too difficult to type all this out in c plus plus can you imagine and i equals zero nice writing the code out on the whiteboard would be cool too wouldn't it maybe i'll do that in another episode if you guys enjoyed this one i think if you're going to if you're actually studying then you know there's no point in doing this what i would do is get a piece of you don't have a white board get a piece of paper tape it to the wall and just write out your solution because you know writing it out on a whiteboard is definitely better for interviews than just typing in your editor but you know i still think it was pretty fun i would not recommend it i mean there's no reason to do it i did it for you and overall yeah it was interesting i don't think it's the future of interviews but anyway thank you guys for watching this episode of tech and turn don't forget we've got plenty of episodes helping you get your next internship this one was a little bit more fun but we still went through a solution to a coding problem there's tons of resources on on tech intern and i can't wait to see you in other episodes so thank you guys so much