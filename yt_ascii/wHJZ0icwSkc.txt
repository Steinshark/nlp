wouldn't it be nice if our software just worked you know if it just did what it was supposed to do some days that seems like a distant dream but we can hope we have to hope we have to stretch ourselves for the day when software is reliable how are we going to get there i'm told that the answer to this is test driven development and i do like that technique and i use it and plenty has been said about how great it is so let me risk excommunication and tell you my problem with test driven development you do end up with an awful lot of test code and because that code is just code of course it comes with a maintenance overhead of its own and it has reliability and readability problems of its own and on one of my more dark and cynical days it seems like our code wasn't working so we just doubled the amount of code and in my heart of hearts i don't know it just seems like we're doing things the hard way like that's almost too much work and my job as a programmer is to be lazy in the smart way i see that many unit tests and i just want to automate the problem away well that's the promise of property testing write a bit of code that describes the shape of your software and it will go away and create 10,000 unit tests to see if you're right if it actually does work that way and this week we're going to look at property testing what it is how it works and we're also going to address my biggest disappointment so far with property testing which is that it only seems to work in theory it's great for textbook examples i'm sold on the principle but i've struggled to make it work on my more gnarly real world code well enter stage left riding a white horse oscar wickstrom who has some sneaky techniques for making property testing practical stuff he's been using to test things like databases system migrations video editors and even the really messy world of user interfaces and this discussion has me genuinely looking at my test suites in a new light and wanting to try to do things differently and i really hope it does the same for you so let's get started i'm your host chris jenkins this is developer voices and today's voice is oscar [music] wickstrom [music] i'm joined today by oscar wickstrom how you doing oscar very good thank you how about you i'm very well i'm i'm intrigued by the musical instruments sitting behind you i wonder if we should have a jam session instead of a podcast yeah maybe so this is a shed in in many respects i guess your drum shed that's a nice thing to have drum shed programming shed office in a so when your code isn't working you can just bang the drums and get your frustration out yeah it's after every meeting i just flip around and we all need that but but by some measure your code should be working more often than most right done my drumming yeah gauntlet thrown down yeah because you're going to talk about we're going to talk about property testing in this one because you have we'll get into a definition of what it is but i think you've taken this as far as anyone i know in the practical sense there are lots of theoretical people working on it and people building more frameworks for property testing but you've been using an anger in a really interesting way before we get into that i think we should get everyone on the same page and you can give me your personal definition of what property testing is yeah yeah good and i haven't prepped any like that'll keep it honest rather than marketing yeah okay so i when i try to explain this i usually start with what people are comfortable with normally and what's the sort of the state of affairs and most people have been doing some kind of unit testing or example base testing if you want to call that yeah so i try to start there and with example based testing you you sort of you have something you want to you want to test and then you come up with at a high level inputs and outputs and it might seem a little weird to think about it as input input and output but if you have a you know a function it's pretty clear how it's an input and output that you're testing but you might be testing some kind of database storage thing and the output is more like the effect of storing something in a database for instance yeah but you have these at a high level you have these input and output pairs for each of your tests you say like okay if i do this then i should have this result that's the input and output so i say my create user function if i call it with oscar. wickstrom google.com i ought to be able to select a row out of the database afterwards yeah exactly so outcome is sort of output in that okay and then you come up with a bunch of these and you write tests for them and you might have a bunch of these and feel like okay it's getting a bit repetitive and i have a lot of duplication here and then you can refactor and you can massage like move things around and and improve that situation and there is this technique called datadriven tests or sort of tabular tests or whatever you want to call it where you have just one function doing this assertion or whatever and then you supply a table where each row is a bunch of inputs and the output so sort ofation i've done that without naming it that okay yeah i'm not sure if that's the like proper name but it has a lot lot of different names but you can you can then just add more rows and it's easier to add more tests in that sense yeah still so you have you have sort of fixed some of the maintainability problems of having a thousand copy copy pasted tests but you have have a different problem still which is you have to come up with these inputs and outputs and humans aren't that good with coming up with all the interesting edge cases and combinatorics of of what to test yeah i wonder how many bits of code out there take an email address and they've never tested it with unicode characters yeah that kind of thing and so on yeah so yeah strings are one good one good example of these where you have sort of a domain of strings that are valid and yeah it can get tricky pretty quickly and you have to if you have different different inputs that have some kind of relation to each other it sort of explodes quickly and so yeah that problem is you don't solve that very well with this tabular testing thing and and that's where property testing comes in because there's like the next step here if we could keep that function but instead generate this whole table generate all the input and output pairs and express our test as a function still but but then it becomes tricky because well you can't this this relation between input and output has so far only been in your head right it's yeah something that you have some kind of intuition about some idea and like yeah of course this input goes along with this output that makes sense but you haven't really pinned down formally why do they belong together so you're saying like if i have a function that's supposed to pull the domain name out of an email address if it's oscar at gmail i can say that and i can say the output should be gmail but i haven't really defined what it means to pull the domain out of an email address right why is just gmail right yeah yeah when it's something else yeah and then you can maybe so if you do that and you can generate these inputs email addresses for instance and you want to say okay i have a function that pulls out the domain name then you have to in order to be able to test if you can just generate the inputs you have to come up with a way of formalizing the relation to the output so you have to think of what's the general rule on how do i go from input to output in a in a proper way yeah because your unit tests kind of hinting at a pattern you now want to make more explicit yeah yeah exactly so unit test or example based tests are small pieces of like narrative small stories about how things how things work but you have to generalize that so going from these small examples stories of sort of evidence of what's going on observations almost you have to raise that and into a general generalize that relation basically between input and output so for your example you might u let's see if i can come up with something on the spot but if you say like okay if i want to extract the domain name out of an email address if i then could also extract say the the part before the ads i don't know what it's called but you know the the username sort of part of it yeah and then piece together those two results and then i should end up with what i started with maybe yeah yeah and that test is general you can feed it whatever whatever email address you want and and it will do this sort of test your function that extracts the domain but also do something else p together and check that the the output is the same as the input maybe so then you have you have thought about your test differently in order to be able to test on any input this is what i like about the idea of property testing that the way we're doing the testing is somehow made of slightly different stuff than the code that's under test it always feels like unit tests are made of exactly the same material as the code yeah and that's that's always felt somehow wrong to me yeah it's it's easy to end up there like your tests are one to one reflecting the implementation right yeah i'm sure many have seen that but and property testing is you can end up in that situation if you do property testing with sort of the i don't want to say wrong type of property but certain type of properties don't fit certain type of u systems or functions under test then you can end up in same kind of situation but if you do find a nice pattern for writing a property for a certain thing you want to test you're sort of forced to not do that right yeah yeah i'm i'm kind of reminded of discussion we had with simon pton jones a few weeks ago where it's like there's an algorithm that computes square roots and it's very easy once you found a square root to test if it actually right but the way you're testing if it's correct is very different from the way you're calculating it yeah it's easy to go in one direction but not the other yeah and so when you're going in both directions it's kind of almost adversarial in a positive way yeah yeah exactly yeah and that brings kind of up the my third point on what property testing does in in a different way than example based test where my colleague said this to me like it's it's nice in the sense that you when you have written a function you have probably all already thought about your the things you want to cover the things you can imagine could go wrong or should be successful and so on yeah and this forces you to express it in a totally different way which as you say it becomes sort of adversarial it's thinking differently and coming up with different paths or different examples that could break your assumptions that you had when you wrote it so it's it's hard to do that mind shift just going back and forth between being your own friend and being your enemy back and forth yeah so what is it about property test that makes that easier do you think well it's it's really hard to in in most cases then as as i was going into before it's hard to actually do a property test and describe the implementation i think because it's it's so different in some it's hard to describe but it's you have to think differently about how you test it when you don't know for instance don't know the output you only know the input what should the output be i don't know i i can't say something concrete about the input because i don't know what it is i have to find this general generalization and and that sort of forces you to think differently and that in combination with inputs being generated not by you your brain but by some other semi stochastic thing that tends to uncover things you haven't thought about right so you're saying i write a property test that takes let's stick with email address i'm going to get a huge number of randomly generated email addresses and because that input is so varied i kind of have to treat it in an abstract way yeah i can't think of it as a concrete thing so i have to think about the whole testing problem differently yeah yeah that makes sense so the big problem with this always is you go to a you go to a conference talk on property testing and they give you lots of examples on lists and maybe a couple of on email addresses and it kind of i've run up against this it kind of feels like it's only really going to work for obviously mathematical stuff or obviously abstract stuff yeah this is why i wanted to get you in because you've done this with a lot more hairy code so take me through to how to how can i write better and more general property tests yeah so you're describing me circa 2016 i think i was at a conference talk and someone gave a great talk and all all that but i was like in denial and i was like nah that's not going to work for my stuff it's too much too academic too theoretical and okay so yeah i started there and then i i think i softened to the idea by we had this rewrite kind of project where we had where we shared the database between two implementations and okay for a while during the the sort of rewrite or rewrite or was sort of slicing a part of the system in rewriting and and we can compare those systems how they acted on the same input with where the input was actually the database and so i i i wasn't actually looking to learn property based testing but i was doing this and i sort of backtracked from there i was like this is sort of a variation on property testing in a sense so the property was sort of these two systems should be in sync or they should should gave the give the same output for for the same input basically yeah and that is a common way of expressing a property test if you have some system that is very complicated in a not not in its functionality not in this in its essence but in a sort of non-functional way maybe has a lot of performance optimizations and stuff then you can write another version which is really simple just in memory super naive whatever and then you can run them side by side and see that they produce the same output anyway yeah i'm derailing so that was sort of my my where i started i think and then for in a totally different project i was doing a screencast editor application and oh yeah yeah that you wrote right yeah so i i was doing my own screencasts around high school programming and i thought it might be a good idea to also do a an editor for doing screencast editing so recording first and then pulling all the stuff in there and having my own workflow and so on that was a fun project that sounds like a lot of fun but really going the hard way yeah sort of a sidetrack yeah but that was also an experiment sort of driven from this angle of of learning property based testing because i i quickly realized that it's it was getting complicated because i had this partly i had undo redo and a lot of operations that could be undone and redone they were all implemented sort of as a in a in a functional way so you had a big state and you had some operation that produce a new state the architecture was was nice but it was hard to verify that everything worked as it should because it was i shouldn't go into too much details but i had this kind of tre structure of all the clips and all the audio and video and paes in between and so on everything was small segments of of different types and then i had sort of first i had vim bindings to navigate this thing and also something what's it a call from emac i have this lisp editing thing i forgotten the name oh par edit yeah yeah structural editing yes so you can sort of shift entire expressions sideways or upwards split them and and and ungroup them and so on oh so you're swapping chunks of video like their s expressions yeah nice it's very geeky yeah it was strange and all these operations could be undone and redone and it was really hard to test all these operations loads of edge cases so are you saying you've got you've got this big tree structure i'm just this seems like a classic thing that i would find very hard to property test because i don't i don't want to rewrite video files a thousand times an autogenerated test and i don't really want to generate a lot i don't want to really hand write large meaty starting states exactly so how did you teach me how to solve that those problems i i'll try to remember because i wrote this this became a series of blog posts and then later i rewrote it sort of as a a short book which is called i think property based testing in a screencast editor very down to earth and okay so what if i recall correctly the the properties were some of the interesting ones were sort of using this undo redo as a way of discovering other problems okay so i had all these operations but i didn't test them explicitly like oh how should move up in the tree structure work or whatever operation but i could generate just random operations a sequence of them and it was a bit more complicated because you can only know what operations are valid once you're in a certain state so it was more back and forth like generate one operation apply it get a new state and then see what can be the next valid operation and generate one of those and you step forward like that for a certain length okay so you're almost treating it like a state machine where each new state you ask which the transition states yeah what what are the the valid transitions from here and then you can generate from that list of of possible transitions and do that for a while and you end up with a a trace basically of state operation state operation state and so on yeah so i did that and then i undid or like unly applied the same number of undo operations for all of them right then end up where i started okay so but to to answer your other question like how did i you don't want to write these big sort of timeline starting states to test against because it's a sort of maintenance problem and and boring so with property based testing you you normally have like you write small generators there are a bunch of built-in generators for all the regular types the the built-in types and so on but then you can you can build your own generators that sort of piece together other generators so i could define a generator for this whole timeline and that in turn used generators for like audio and video clips and so on and they weren't actually real audio and video clips i had some kind of generic type parameter somewhere i don't remember exactly but so they weren't actually generating files on disk it was just in memory structure so what is it generating a gigabytes worth of binary randomness or what no that part it didn't actually hold any video data it was just a structure okay i create an empty clip with some metadata yeah right because the operation didn't touch the actual videos i can ignore that part and and just parameterize that with unit or something okay yeah and okay and then this undo redo i had some other properties on on that in that sort of style so like do a bunch of things undo all them all of them and then redo all of them then you should end up at the furthest end before you start at undoing that makes sense and then yeah you might think like okay you're only testing undo and redo that was g to be my next question yeah but which is useful but because of how i implemented undo redo so each operation had its inverse as a separate implementation right so if you could let's say if you had a clip which was or or it was called sequence and it had a bunch of like audio parts in in a sequence if you could split that at a certain point you could also join it together and that was sort of the inverse of splitting was joining okay and by doing this whole undo redo thing in in random ways all these inverse operations were also executed and they had to agree in order to produce the same so i had loads of small like off by one errors and stuff like that oh yeah yeah i can believe that and those were uncovered by doing these sequences i could probably find most of it by just doing the the inverse round trip kind of property but it like doing it together with andrew redu sort of did the whole thing in this catastrophic mess that uncovered a lot of bucks so it was a nice experience it took like two weeks to just fix all the b didn't take so long to write the properties but i was just scratching my head for like two weeks trying to figure out the bugs and getting getting all that that's the interesting thing when it turns up bugs you didn't expect to see yeah right and i i i had experienced bugs while using the screencast tool i knew that there was some something going on i couldn't really pin it down i was like what what what happened there did i what did i do like it's hard to should i like record my screen on my keyboard to to be able to reproduce and yeah that was really cool and to find them that way so i i just did like bug fixes and and following the tests for basically two weeks and when i came out the other end and i started a screencast editor everything just worked was just me perect that's nice that's nice if you would to spent those two weeks the hard way right spread out over the next year yeah just bug reports or whatever pain and trying to figure out what was going on so that was one part i i did property tests for other things i had i could bring that up as well it's a i think a nice example i had this the workflow was based on just was recording screencast video and in between sort of scenes i was just silent because i was so i did part of the screencast and then was silent and didn't touch the keyboard and was just thinking like okay what's the next part maybe looking at a little script or something yeah yeah and then when i imported this into my editor i wanted everything to be chopped up by those silent parts because i don't want them yeah makes sense so i had this sort of processing part that it it analyzed the video and audio and found out like here's a pause and let's just clip or like trim it down to the end of the audio and trim the other part to the start of the next audio and so on like so if it's completely silent for 5 seconds assume it's a pause and find the ends of that silence yeah yeah yeah makes sense so that was sort of the scene classifier i wanted to test this with a property test as well and i couldn't really figure out because your example there with the square roots and that is a good good analogy because i had the same problem like if i generate an input what should be what should be the output for this classifier well that's the problem right that's that's what the classifier does and i couldn't really figure out like how how should i express this without just writing another classifier again in the test yeah i mean i would instinctively say well at least i can write a test that says the output should be no longer than the input yeah that's and that's a good start like there are loads of this incomplete or sort of naive properties that do find actual bugs as well they might not be that like cover all of it and and be very precise but these sort of constraints are really powerful and i do recommend just doing that for a good while if you can't come up with something else that's just better than nothing because it's you might find unexpected things with just those basic sort of invariance or constraints okay okay i feel better about my test that seems kind of obvious yeah but is this what did you do is there something more sophisticated i can do than that test yeah so what i did was after i think a lot of being out on my bike and just thinking i i realized maybe i can generate the output instead and go backwards so that was sort of the the mind twist that happened because i can generate the output which should be a list of scenes basically classified and done i could go backwards and say if if i have these scenes i can transform them into something that moves in video or audio that is sort of noisy or something and then in between i can put just same frame all over again oh okay or audio that just blank or something like that and then piece together that into an actual you know actual video or actual audio then run the classifier on that input which i've so i i i generate scenes which are just like basically from two tim stamp that says here's some video going on and then another scene saying like okay 10 seconds later there's some video going on which is also a scene so on and there's silence between which is 5 seconds or something i can take that map that into actual input it's the same thing as you said with the square it's easier to go in the other direction yeah and then i ran the classifier on that got some stuff out and i can just see that the scenes align okay i've not heard of that technique before so normal property testing you get randomly generated inputs you're saying get randomly generated outputs reconstruct the inputs the easy way yeah and then check your software reconstructs the outputs the hard way yeah that's oh that's a jedi mind trick i like that yeah yeah it's a it's a nice one yeah so on this topic i should maybe you can put a link somewhere or something there's this f for fun and profit website which has a lot of f content of course but there was also this series on property based testing and there is one part which is i forget the exact name but it's something like proper patterns for property tests or something like that okay has a bunch of these common templates on how to think about stuff you have the round trip property which is very nice if you have two functions that are sort of inverse as i said before like if you have a a render function and a parse function for instance yeah you can take whatever you start with apply the render function get a string then apply the pars function to the string and get back your original input to go one one like if you were writing a refactoring tool that wanted an item potent no change practor yeah well that that is actually a different kind of input or a different kind of pattern which is sort of an item potency property which is if you apply the same operation twice you should or apply the operation once you get a result then apply the operation once again you have the same result and you just keep keeping there but the round tre properties sort of you have to have two functions that are mirrored oh yeah i see what you're saying so i was thinking a refactoring tool that passes the source code does nothing and then prints it back out okay yeah that you're saying could also have the test where it's like apply this refactoring five times in a row and it shouldn't take place more than once yeah sort of a fix point refractor yeah fix points can tell you're a has school program you got fix points into the conversation reveal that's the tail yeah and there are a bunch of others i can just come up with them right now but i think this sort of it's called something like hard to prove but easy to verify which is your example with the square roots right and then there is the really kind of big brain things and there is one technique called metamorphic testing which i haven't actually used it much at least i i've experimented with but not really found where i needed it yet just for kicks can you explain it yeah okay then all right so metamorphic testing is sort of if you have an input and you apply your system of under test and you get an output if you could slightly modify that input in some way so kind of let's say make it larger in a sense smaller or different in some way that you can know then you can apply the the function or the system on that input and you get an output and if you compare those two outputs then you know that the output should be let's say smaller or bigger or something should have the same relation if you can express a relation or transformation between one input and another then you should you can say that the output should also have a sort of matching relation so the canonical example there would be if you have a search engine it's really trick to test that with properties like what should it give back right yeah yeah tricky but if you can if you do search you get some results and you do a research a new search with i don't know a date filter on it which wasn't there before slightly more constrained search then you should get a result which is a subset if you can observe the the entire result of course but the the output then should be a subset of the other output which was a bigger search yeah and then you don't really care what the input is and you don't really care what the system's doing as long as the relationship between the changing input i feel like i'm differentiating a graph in high school maths now yeah it's it's the rate of change in curve a the same as the rate of change in curve b yeah exactly you don't care in this case you don't care about either input or output basically you just know that well you you have some way of modifying input and and seeing that the output sort of behaves as you would expect but otherwise you don't you don't know much about either of them since i'm getting here is if you want to use property testing well you need to be sneaky yeah you have to think differently at least it's it's a a shift of mindset in many ways but that's good again as we said it's like thinking you write this is one of the reasons why testers work as a separate department you write some code and there's someone thinking about it in a completely different way to you putting it under test it would be so much faster and more efficient and sometimes less embarrassing if we could be that completely different person thinking in a completely different way and testing our code yeah right yeah and i think this helps to get us more into that situation where we can test it not as we would think when when we implement it yeah yeah do you think so i'm thinking about your screencast editor you have set this up so that it seems to be largely pure functions you're not doing writing stuff to dis right is is that a necessary part of this technique do you have to try and find a way to extract the the side effects of writing to a database writing to disk before you can do this well right it's very very good question because i'm i'm sort of still in pure function land right yeah and and that is nice if you can keep your architecture and your system under test in that space and and your test can be faster and it's just nicer to work with but it doesn't always work right so as you said the screencast thing was i didn't actually run the full ui i just ran a model of the ui or this the the representation of the ui and didn't actually have real video in memory or on dis or anywhere for properties so yeah it was sort of still p purely functional but you can absolutely do property tests with side effects but it it there is there are some some things you have to think about you have to keep it isolated for instance so each test has to be isolated from the next and i do this at work a lot actually we we use there's this thing called test containers oh yeah which is is available for a lot of different languages but you can say like for this test i want a postgress docker container running and it you can make it so that you always have a fresh database basically for each test isn't the tricky thing there though like property testing you're often generating 10,000 test cases yeah spin out 10,000 postes no exactly so but you can work around some of these things with like having transactions that you always roll back each test yeah yeah makes it a bit faster than running new docker containers all the time but still you won't be able to run i don't know a thousand tests below a second won't be possible maybe there are other tweaks you can do but maybe we run like a 100 tests but over time because this isn't deterministic over time you test more and more different cases which is both good and bad so you i can see why it's good why is it bad i it's perhaps not bad but it could be frustrating when a test fails after two months now we discovered that edge case that we didn't think about yeah because you've been chipping away prob 100 test cases at a time yeah yeah and that particular time in ci when someone did something completely unrelated my property test you know failed this is why i think it's it's kind of essential right in property tests that you get this seed that gives you your receipt so you can replay you can make it deterministic yeah yeah you get a magic number that says play exactly the same set of random tests yeah so so that is useful when it happens is a you can at least reproduce it locally yeah but the person i don't know doing the pr might not be too pleased but someone some other test you know hav't touch system yeah this just start failing now you've got unlucky to catch the bug that dave wrote two months ago yeah that could happen so that that is perhaps the downside but it does absolutely work with side effects as well but you have to be a bit more i don't know careful or think about how you should set these tests up and what more yeah and then there's the whole ui bit because yes i didn't run the full ui in the screencast editor it was a gtk ui but that was also nagging me like oh does the gtk stuff work i don't know the the heavy lifting stuff underneath tends to work because i have all these tests but do all the buttons connect properly to everything and so on yeah cuz you know that real unit testing department the first thing you're going to do is mash the click button all over your ui and try and crash it right yeah and i have like zero test coverage of that code so that's great and yeah that that was nagging me a bit as well like i want to test the whole thing like end to endend black boxy kind of testing which led me after a few detours into what later became this product called quickr which is an excellent name oscar wickstrom quickr love it yes i was forced to take this name for for the project and i but i do take responsibility of course it's an open goal you might as well kick it in yeah and okay so this this project is about doing this sort of endtoend property style testing but on stateful systems or i more specifically which is what we did okay so i had can i just stop you and ask why not selenium because that's most people's answer to this selenium or something like it yeah so mostly for the same reasons as any example based testing is limiting like you have to come up with examples you have to think of and especially with like selenium or whatever scenario kind of testing that that you automate there are a bunch of problems but one is that you like when you have the sort of stateful system where you do sequences of actions the combinatorics of that just blows up very quickly and it's it's very tricky to come up with enough sequences that are interesting to to catch like a lot of bad behavior and box and so that is one part and it's also kind of to maintain because experienced that yeah you have timing issues which have gotten better now with other frameworks i think with like cyprus and there there are a bunch of them and they have more like utilities to wait for stuff and not have like fixed sleeps all over the place you do have the problems with being sort of very very tightly tied to the structure of the web app for instance instead which to be fair you still have some of that in quickr but not as much you don't have the so much of the timing problems you don't have so much of the coupling to the to the structure of the web page and so on so what you do in quickr instead and which is like i i didn't want to write so many selenium tests is that you you sort of write property but but it's a bit different because i had this idea like i want to use a type of logic which is called linear temporal logic right so i feel the rabbit hole is just opened before us yeah so if if you've heard about t plus this is sort of the foundation common foundation so you have the sort of the logic that you know the the propositional logic with and or implies all that yeah but then you extend that with some operators that deal with time so you can say something like you know x and next y which means that x must be true in this state and in the next state why must be true can you give me a concrete example for a web page yeah so maybe if i click a button let's say so i say that okay the button is visible and in that's like x right button is visible and in the next date if i have clicked i could do like if the action is click then that implies that in the next state i don't know message should be shown something like that but maybe another more interesting one would be there is an operator called always which says that so the sub expression should always be true in all states so i could say something like there is always either a login or a log out button on every page yeah yeah should always show i don't know a link to a support email or i don't know something could be sort of you can start thinking about it sort of as kind of business rules or you know requirements for your page yeah or it could be there's an operator called eventually you can say in the future sometime this must happen eventually so give me a concrete example okay so if you click a button which launches i don't know htp request you might see a little spinner going on and then you wants to eventually get some result back some data shown or maybe an error message okay i've wr some code this morning actually that eventually should show a chart yeah so yeah okay every async thing yeah in ui that would be one example and by using this logic with these temporal operators you can express these requirements and you can if you do this in a certain style you can express sort of your web app as a state machine which fits some web apps and u you can say like basically your your your specification says that this web app always goes from one state to the next in a valid way that's the state machine kind of definition and then you say okay what does it mean to go from one state to the next in a valid way well you sort of you just list all your valid transitions and you combine them with or and this is a very sort of tla plus way of describing a state machine so if i have you saying if i i mean i would expect web page to there's always a signin button and then i do some stuff and hit submit and then i get to my account page and that should and then will the software then go and try and find ways to get to the account page without me doing that it wouldn't be so directed it would be so when you have the spec you can just run quickr basically and it it basically just does random things but random possible things so in a web page that that's the sort of the neat trick because you can inspect the web page and see what buttons are available right now which are disabled or enabled which links are there what can i do basically so yeah that sort of reflecting capacity is already in the browser by by talking to the browser and then f room goes around and does random things you can constrain that as well but you can be very open and then it checks while it runs does the behavior of the web app agree with your specification so this is like your video editor where you say okay i'm now in this state what are the possible transitions out of this state which in p of web page of buttons and then you're just clicking random buttons going along random timelines and trying to find and checking that it doesn't break any of the rules as you go yeah yeah okay yeah yeah exactly so the nice thing is that you don't have to list all the valid transitions because the web page already sort of embodies the the valid transitions yeah yeah it's advertising its own state machine from a certain point of view yeah yeah it's the it's the what do you call it like hyper media aspect of web apps it sort of encodes its own state machine in the output of the html yeah i i mean i've thought of web pages as being like state machines but i've never thought of them advertising their transition states to you of course they do yeah yeah that's neat or or you could build them not doing that but that would be kind of bad like if you have a lot of loads of buttons you can click and then it's like no that was a wrong button that's not a valid transition yeah yeah we just give you all the buttons in the entire system and then complain when you hit the wrong ones yeah i bet you there's one website out there that does it just through bad design probably some time reporting thing yeah but but that's really of the principle of of quick so you write this spec and you say what what is correct behavior and you can be very detailed or you can be very loose and and abstract you can just say like i only care about this login log out button that's all do other things go around the website do whatever you want i just care about this login button being correct for instance or you could be very like complete and say these are exactly the transitions that are valid and this should be the result after each transition and so on yeah yeah i'm thinking i think i've got this right there isn't there a law in germany that says you must have an impress like contact details page on every web on every page well u i'm not a lawyer so no no but we can imagine a rule like that with the government says this must appear on every page and you would just write the rule for that yeah and that's that's it and then it just goes around doing random stuff and checking that your little contact thing is there and just to be clear is it checking i can set up multiple properties and it will test them all as part of the same journey yeah so if i've got a thousand properties i want to check it doesn't do it doesn't multiply the execution time by a thousand no you compose different logical expressions into one spec okay so this is always a tricky question to ask in a podcast but we have to try what's that actually look like when you write it what's the what's the coding language ask you to say yeah so there are two parts to these quick st specs one is this it's called the proposition which is sort of the what is correct the expression that describes the correctness which has all these the the the temporal operators and all that you also have in those expressions you can you can write selectors which are like css selectors you can get access to an element in the dom and then you can pull out like attributes properties styles stuff like that from those elements so that you can say like okay this element on the page this should have a text content that is fubar and it the color is red or something like that or it has an attribute which is x so you can express all these kind of assertions or logical truth statements about elements in dom and you well you just compose all that up into this proposition the other part is that you can declare actions which are so out of the box quickr has a knowledge on a page what are sort of valid actions but kind of but you can also say like okay don't click all the buttons click buttons click buttons in this part of the page only when this condition is true in the current state so you can constrain it and say you can also chain stuff to say like if i did this before then do this afterwards you can sort of direct it in certain ways okay but most of that is if you have a web page that very clearly encodes what is desirable sort of behavior next step you don't have to say much you can just say click anything do anything but if you want to be more detailed you can be be that and it ends up looking very much like code or yeah i've maintained selenium tests and it always felt a bit like i was poking around inside the back end of a ui that was supposed to record things yeah but does this look like more of a programming experience declaring properties kind of yeah it's so quickr started out with the first version it was actually a pure script dsl okay so and it was a lot weirder than you might think because i actually built my own p script interpreter i just used p script to parse p script as a sort of frontend language and and wrote this pure script interpreter in husk for it you don't like to do things easy way it's it was a kind of a good fit but bit tricky as well but the nice thing there was at least in principle you could use p script libraries so i i ported so p script has these kind of stubs or native parts that you have to write in the the runtime language so js and the normal usage of of javascript so those i had to implement for certain libraries but you could use like weird monads stuff or whatever you wanted to do common p script libraries in your specs so that was nice because i got a lot of things for free like string manipulation and stuff like that just kind of worked out of the box but then we rewrote quickr in a in a different version which in which we there were some limitations to the pure script edsl thing right so we decided to write a a custom language for it okay so so there is quick strom the language as well as quick strom the tool yeah yeah and that is it has some shortcuts and it does some trade-offs to be able to analyze sort of analyze the language or the the spec for certain things so we know statically like all the attributes you ask on ask for or all the properties all the styles all that stuff that you ask for on certain selectors we all we can analyze that statically and and optimize the queries basically okay yeah so we needed that for a certain reason and couldn't really figure out how to do this pure script so and just syntactically it's a bit nicer but it's sort of like a functional language in a sense it's just one big boolean expression but yeah okay so you write these small specs and so we have one where i work and it's like 90 lines i think and we have barely touched it in a few years so it's it's pretty nice but of course like it's not the documentation is lacking and no editor support i have some basic editor support so works in emac and intell but yeah okay depending on who you are that either covers all the ones you want or none them that's editor wars for you so what's the license for this it is bd3 okay so there's an open source tool i can just download and use yeah when i started it i had some ideas of doing sort of a business side of it and have like a dual license thing u but then it took another direction so u that is the the current state yeah sounds like our gain yeah do you ever try have you ever tried running out another people's sites found bugs with it because presumably it's doing a lot of testing you ever attempted to do that yeah so when we did this second version of quick strom when i say we it's me and liam ok conor which he's an academic and we we found each other on twitter talking about what was it fstar and proving certain theorems around temporal logic and stuff like that and and we realized like okay this quickr thing is a nice academic project if we want we sort of working on that together and this new language that we did and u sort of the infrastructure of it and the model of it all that turned into a paper ah what's paper called i'll put a link in the show notes it's called like quick strom testing what is it called testing with linear temporal logic something like that though that sounds like a properly academic title yeah in there somewhere and then you go to the web page it says quick strom for not tearing your hair out over selenium exactly as you adverti to two completely different sectors marketing language does not have a place in in academia so i got to be a sort of a got into the academic realm the the the backd drawer in a sense i haven't done much better funding that way from what i hear maybe but that was really fun and we did a case study or a sort of evaluation in that paper where we there's this old project called to- do mvc yeah where they it's been around for many years hundreds of different implementations of it as people prove their ideas yeah yeah so well just short it's to-do list lists in in like a 100 different front end frameworks and languages ah so i thought like that should be a pretty cool testing ground for our yeah so we wrote one spec for all of them and and just tested all of them and that spec was really really detailed it was like if you have if you're in this state this is a valid transition it says like if you change the filter from viewing all to do items to completed items only the completed ones should be visible in the next st and so on lot of and i didn't even know to do mvc has this edit mode you can double click items and you turns into an input and you can edit them and so on and we just tested ran loads of test on these these apps and we found that like more than half of them were broken in some way oh so that was that's nice yeah i mean it's not nice it's it's initially terrible news but in the long term it's nice yeah and i mean some of them were broken in like it doesn't even load anymore because someone had brought a server down or something but most of them could actually be run and they had all kinds of strange we had we had this table of i don't know 12 13 14 different types of problems they had and some of them were really like kind of complex like if you did this had this filter on started editing pressed escape then change a filter then it broke something like that i i don't recall all the details but to be able to generate something like that without having to specify as an example that set of steps that's nice yeah yeah and do you do you get this property that most property testing things have i shouldn't double use the meaning of the word property do you get this receipt do you get this token that says and if you want to reproduce these steps that crashed this app rerun the test suite with this magic number we don't with quick strum we don't have that seed can we have that in version three i mean we could add that but there's actually no guarantee that you can reproduce it and you could end up in that situation with any property based testing framework really if you have non determinism but there might be sort of timing aspects for stuff so that even if we apply the same actions in the same sequence i see do i at least get like a report of what sequence of steps led to that point yeah you get there's this there's a textual one in the console but there is a more usable one which is an html page it spits out where you see state action state and you can sort of next next next and you can go through this trace and see what happened you see the state of all the elements that you have queried and so on so you can inspect what went wrong okay and it always it always ends the test once it's found a problem so it doesn't always run like a 100 steps when the spec fails whenever that happens it ends there so you know sort of in the end of the trace there is something going on probably okay and how does it know when to when to stop if it doesn't find a problem you just say run for 5 minutes so yeah you can you can specify these sort of we call them subscripts but you can say like if you have an always alwayss operator somewhere you can say like always at least for a 100 steps okay so you can sort of specify some time constraints or like if you have an eventually you can say like okay wait for at least 10 steps before you give up right okay and then there's there interesting aspect of with eventually if if you have a condition that you expect to to eventually hold and it doesn't it might not mean that it would never hold it just means that you gave up too soon perhaps so the result of the test are definitely true or false or maybe true or false it's a bit tricky so if you say that eventually the spinner should turn into a result and it doesn't and the test give gives up then it says well maybe that that was false yeah yeah like eventually spotify should show that this podcast has a million subscribers but i might have to wait for the test to run a bit right yeah fa enough yeah i think that probably gives me all the information i need then to at least go and test my code that should eventually show a chart that' be a good little property to start with right could do that for qui room i think yeah okay i'm going to give it a spin yeah oscar thank you very much for taking us through it yeah thank you for having me here that was very fun to i i had to reminise about some stuff that i forgotten but some details but it's very nice to bring up yeah we are all both the programmers we are today and the history of the things we've programmed in the years gone by right yeah yeah absolutely cheers catch you again thanks bye thank you oscar and i have to say oscar's my kind of geek he's got a bit of academia he's got a bit of business and the thing connecting the two is just someone that wants to build and tinker with stuff and learn the world needs more people like him so yeah in fact i think the world needs more people like us we're all that kind of person aren't we i think we are around here by the time we've reached the end of the podcast i think we're all like that so if you want to feed those parts of your your soul head to the show notes where you'll find links to papers tools sites software all the ideas we just discussed that will give you something to chew on for the coming week while you're down by the show notes please take a note of the like share rate subscribe buttons i was looking recently of course i look at the analytics i was surprised to see how many people share this podcast so thank you to those who have done that's a heck of an endorsement when send something to a friend and say hey look at this thank you i appreciate that we'll be back next week with another episode of course i'm actually playing catchup a bit because i just spent the week in montreal at a really excellent tech conference k fu would recommend there'll be another one in 2025 so take a look full of ideas from that lots of potential guests but lots to catch up on so i better get on with it until next week i've been your host chris jenkin this has been developer voices with oscar wickstrom thanks for [music] listening