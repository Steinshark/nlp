okay, so endianness it's, um, it's a simple problem really computers these days arrange their memory in terms of bytes. so 8-bit values, eight binary digits, 8 bits arranged in the computer's memory and we have an individual address for those things, for each of those bytes. now, the computers don't deal always with bytes. sometimes they use 16-bit values sometimes they use 32-bit values and so you have an interesting question is that you've got say a 32-bit value, let's just stick with 32-bit values for now and you need to assign it into a memory location. so you've got 8 bits per memory location per memory address and you've got 32 bits so you're gonna have to split it into 4 bytes worth of things, four individual pieces, and then assign each of those individual pieces into one memory location. let's pick a 32-bit value and we'll do it in hexadecimal. just cause it makes the numbers easier. so the 0x means it's hexadecimal and we're gonna go for 0 0 c 0 f f e e. so this is going to be our 32-bit value that we're going to want to assign into four different memory locations. so this would be address 0 1 2 3 and then 4 it would go on like that, memory locations. so each of those addresses is going to represent a byte. that's the number between 0 and 255 which is equivalent to two hexadecimal digits. each hexadecimal digit represents one nibble four bits so two of them is a bytes worth. eight of them is 32 bits worth. so we need to assign these bytes into the memory locations. so how do we do it? what would your suggestion be, shawn? shawn: "to me, it looks like you were just kind of translate that down and have the 0 0 in 0 and just carry on like that." so you want me to put the 0 0 there and then i put c 0 in there? i put ff in there and then e e in there? shawn: "yeah, but i do feel like i'm walking into a trap." no, obviously you like to eat your hard-boiled eggs from the big end shawn: "right." ok. there is another way you could it though. you could start from the little end and there is a reason why i'm talking about a hard-boiled egg. i haven't completely flipped in this computerphile video. we'll come back to that in a minute. let's draw out another set of four memory locations. 0 1 2 3 & 4. we could also have started from this end and put the ee in there, the f f in there the c 0 in there, and then the two zeros in there and that would be another way of doing it. in actual fact, as long as you're consistent in the way you do it and you build a computer knowing that if it's going to read a 32-bit value they're going to be in this order or that order or whatever order and it's consistent then your computer system would work. what we've done here is we've got two different ways of writing these things out and this is basically the issue around endianness is: how does your computer store values that are bigger than 1 byte in memory when each memory is made up of 8-bit locations where we can store 8 bits? so how do we map say a 32-bit value, a 64-bit value, a 16-bit value into those 8-bit locations. and this is where we come back to our friend the egg. there's a book published in the 1700s by jonathan swift called gulliver's travels. it's a novel, it's a satire of society. in this novel, gulliver goes on his travels. the first place he goes to is a town called lilliput. lilliput, everyone's very tiny, but they like to argue about things and apparently - i haven't read the book - but apparently at one point civil war breaks out over which way do you eat an egg? do you start from the top, the little end, because it's pointy or do you start from the bottom, the big end? half of lilliput was little-endian. they would start from the the pointy end and the other half were big-endian. they would start from the other end. so they would sort of smack it down like that and start peeling their eggs or hitting it with, uh, probably with a teaspoon and serving it and dipping their yolk in there. and we've got here the two main types that are used. this one is called big-endian and this one is called little-endian. and the reason why it's called that is because if we were to write this out as a binary number if you've got a hexadecimal number, you can convert each of the hexadecimal digits into four binary digits it's relatively easy to write it out. so we get 1 1 1 0 for the first e, followed by 1 1 1 0 going backwards for the second e. then we get 1 1 ... 0 0 and this should be 32 bits there. now each of these bits has a number associated with it. so this would be considered bit 0 and this would be considered bit 31. and then we can count down, so this is then bit 24. that's bit 23. bit 16 and 15. and then that would be the bit 8 and that's bit 7. and so this byte, the e e, is what we call the least significant byte because it's got the bits with the least numbers on them, the smaller bits. and this is the most significant byte because it's got the bits with the higher numbers on: 24-to-31 as opposed to 0-to-7. someone had the big idea that the way to name these things was to reference the egg wars of gulliver's travels and to refer to systems that started, the sensible way in my opinion, putting the 0 0 then c 0 then f f then ee like that in memory, they would be big-endian systems. people that started by putting e e at the bottom and then f f c 0 0 0 would be called little-endian systems. so that's why we call it endianness. it all traces back to eggs of lilliput in gulliver's travels. now you might ask why have two systems at all, why not just standardize on doing it one way or the other? well, as i said, it doesn't make any difference as long as your computer system's consistent the people who are writing the software know how it's done, the hardware designers know how it's done everything's lined up in the right place and it isn't a problem. but there are some advantages to doing it one way over the other. so, for example with the big-endian system it's what you naturally went for, you naturally went for a big-endian system. and so the people who designed some of the ibm mainframes, the powerpc architecture the 68000 chip, and things like the original macintosh and the atari st. there all big-endian systems. so when they got a 32-bit value they start in the first address they put the most significant byte and then they go down towards the least significant byte. on the other hand, the 6502 chip, the arm chip by default, it can work the other way the intel x86 and the amd x86 chips, there all little-endian systems, z80 was as well. they will put the least significant byte first in memory, and there is an advantage from that because when you're reading it and building the hardware it doesn't matter whether you've got a 16-bit value or a 32-bit value. if we had a 16-bit value let us have a b c d, that would be big-endian. and you could also write that as c d a b, and then that would be little. if it's a little-endian system, the first byte always goes in bits naught-to-7 the second byte always goes into bits 8-to-15 regardless of whether it's a 2-byte number, a 16-bit number, or a 32-bit number, or a 64-bit number. so your hardware's simpler to design. on the other hand, if you're reading the memory in a debugger or something it becomes harder and you have to manually rearrange the bytes in your own head. there's also another system, which is sometimes referred to as pdp 11 ordering, or mix ordering which is when you just sort of really mix it up and start from the middle and go out. you can get really weird ordering, but we'll ignore that for now. so generally on one system if it's not talking to anything else it doesn't matter which endianness you need as long as you know what it is. the problem comes is when you have one computer communicating with another whether that's over a network or whether that's by putting data onto a floppy disk, a usb stick, or something. you've then got bytes laid out in something by one machine which is being read by another machine and when you do that you need to make sure that both machines agree on how the bytes are laid out. so for example... networks, when they're transferring data across, they're going to need to agree what order do the bits come in? what order do the bytes come in to represent a 32-bit number? if they don't agree on a standard and the internet, for example, is agreed on everything being big-endian, sensible choice then one machine will send it big-endian the other machine will read it little-endian and get completely the wrong number out when they do it. so the only time it really matters is when you're transferring data between machines of different types in which case you have to make sure that you agree on what standard your using to transfer them. shawn: "where's that translation happen?" so that's a good question. normally it will happen in the software. say, for example when you write software to communicate over a network using ip there's various functions that you will call to take the number, say, for example, your tcp port number so like, if you're trying to connect to a web server that's port 80 or port 443 if you've got encryption. rather than just setting the value directly in memory, you run it through a function which is called network to host ordering or host to network ordering depending on which way you're doing it. so if you're setting the port number you'd use this one, if you're reading it from a network packet you'd use that one and that will do the conversion for you, if needed. so that thing will be defined on, say, an intel system to convert from little-endian to big-endian. but on a motorola system using a 68000, which is natively big-endian, it will just do nothing and copy the values. shawn: "does it slow things down?" um, yes, a bit. so, for example, you have to read the bytes individually and then shuffle them around in memory in actual fact modern cpus, modern arm chips, modern intel chips have instructions that can move big-endian numbers even though they're natively little-endian. and at that point it's done as fast as possible. these days, with the clock speeds you're dealing with, the slowdown won't be noticeable because you're not doing it that often. it's... you set one value in a port number when you create the socket. the rest of the transmission probably is in ascii, anyway so you never need to convert anything so it's not gonna make that much of a difference. if i write down 0 0 1 0 that represents a 2 in its simplest form. that is what binary coded decimal is and you just use them in 4-bit nibbles. now. we all know a nibble is half a byte. a byte equals eight...