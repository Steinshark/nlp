all a library is, is a series of code routines that you're going to reuse. so rather than actually writing it yourself, you'll go and get it from something that's already been written: a code library. so that's where the idea comes from, you're reusing blocks of code that have come from somewhere else. implementationly, you can do that in many different ways. i mean the simplest thing is to think about a program; so if we think about a programming language like c, it's made up of a series of functions, so we might have a function called int comp, and--that doesn't actually have any parameters--and that's gonna call another function, and we'll call it printf, and it's gonna say " hello computerphile." so that's a thing, and this is calling another function, and when we compile a c program or any programming language the computer takes that code and converts it into machine code and then we execute that machine code version. whether we do that instantaneously for interpreting or we compile it and execute it later or a mixture of the two-- immaterial for this point of view. so, we've got to find this printf. now we could just have that defined in the program straight after so it might actually say something like void printf whatever the implementation of printf is. there--that could be in our source file as well and then that might use something else and so they would all be and so we could put all the code we need for a program in one file we compile that; we convert it into one machine code program; and then we can use it. that's great-- except our program is going to get bigger and bigger and bigger and bigger and bigger, and as you write more and more programs, you'll find that actually every program is going to use printf, and every implementation of printf is going to be the same. so what you probably would do is you would start off writing a new program you say okay, i need a printf so you go and find a copy of the previous printf and you cut and paste the code from that one into your new one and you carry on using it and and so on. so you could just do that, but your programs are still going to be huge long things and finding things inside there is going to be complicated. so what you start to do is you say well, actually i'm going to collate various different routines there you know, i probably use printf a lot. i probably need something to read from the keyboard, scanf in c terms, i probably need something to do some file i/o and so on. then you end up with a series of routines that you pretty much going to use in every program, and so you collate them together and then when you write a program you copy them all into that program so that's what you could do. - if some of these are used that often, why are they not embedded in the programming language itself? so why is it because you might not need them? so why does c not have a print command? good question. you'd have to ask brian kernighan. that actually was probably around at the time there but i mean you could you could take a sort of a purist view of this is that it's printing part of the programming language, or is it something you want to do with the programming language? as c demonstrates you don't need a print command in your programming language because we can implement it separately so you can make an argument that you don't need it in there. you need your programming language to have the basis that you need to write everything you wanted to write. okay, you want a library to do image recognition or something? do you build that into your programming language? where do you stop you've got a you've got a divide this somewhere? let's keep the language is simple and then it makes it easier to write the compiler if it's easy to write the compiler, you generally know it's relatively easier to check the code works properly it's simpler and particularily if you think about the computers that c was developed on, 64k was a luxury then it makes sense to keep these things small. so anyway, let's say we've gathered together some routines. we're using lots and lots printf, scanf, file i/o,..  those sort of things. we're going to use some of that. so we just collect them together and so what we do perhaps is rather than starting with a blank file and copying them in, we might actually put them all into a file and then when we want to start things, well we copy that file and just add our new code to the end of that and things which is okay, but it seems the wrong way around to do it so what you do is you modify your language to actually have a way of including that file. rather than having all your things in there, you start off saying "i want to include something", and then we'd write comp routine as we had before and all that include things says in c particularly the hash in front of it is copy the contents of that file as if it was at this point in the program it literally is doing text substitution this way it's not doing anything more than copying the text from one so rather than reading the files from one father reads from the other file and then carries on it's like concatenate two files together you compiler just that and then it compiles the whole program. now, that's not what c is doing. but that's the general idea behind a library. we've taken a set of routines that we use a lot and generally, we'll have them that do various useful things that are thematically similar and we've combined them together and we're just going to reuse them. so it's a reusable library of code in the same way we can have a library of books where you can go and find particular information and you get a specialist library , you might have a science library, a sort of fiction library and so on. and in the same way you might have a a sort of file i/o library, you might have a window gui library, you might have an image recognition library, a networking library, and so on. you could just include the source file in there and let it work and let the compiler compile it, but actually if you think about it, we're taking the same a block of code and we're going to convert it to machine code and that's a deterministic process, it's going to produce the same machine code. unless we use a different compiler or we change some of the options. and so actually the next stage of our sort of gathering libraries, is that you rather than combining them or linking them together at the source level, is you say, actually, "okay, i'm going to go and compile all these libraries to machine code ahead of time, then when i compile up my program, i'm going to compile the new bits i've just written and i'm going to link them together with the stuff i've already written." there's the library code there's the stuff that i've already compiled up using every other program so if we take something like printf which is in part of the standard c library, so it's a library thing in there. generally, we will use a pre compiled version of that. we don't where we say hash include stdio.h. we're not including the source code for printf we're including the source code for that tells how to call printf it just lets say you need to call it with these parameters and then it will work what actually happens is in another program called a linker which takes the binary that's not even produced for that the binary you've produced and combines them together into a single binary program in the right format that the operating system needs so that you can load them all in one go and run them and it calls printf to do the things and make it work. so that's all, that's all the library is, there's a collection of code routines that probably have been compiled and then linked together to form a complete static binary that can be used. now you don't have to do it that way if we do it that way then we end up with one binary which has all the libraries copied into it. that's what's called static linking, because it's just one static file, everything you need is in there. you can also do what's called a dynamic linking which is a dynamic library where basically all you're doing there is you're delaying that linking process until the program's loaded and then the advantage of doing that is that you can choose which one you load in and as long as you know where to jump to and how to update things to make things connect together, then you can make it work. so, all the library really is, whether it's a static one or source library or dynamic code library is a collection of code routines that have been precompiled often that you then link into your program to make it work and it jumps into that other bit of code and then jumps back into yours. they don't even have to be written in the same language, so at some point inside printf, it'll probably call a bit of machine code to actually make the operating system print out these characters on screen and so on. see that this is also connected to the same the bottom left side of this switch, and the bottom left side of this switch, and the bottom left side of that one, and so on all the way along, we could follow this trace until we get to the last one. it actually changed to the top right for the last couple.