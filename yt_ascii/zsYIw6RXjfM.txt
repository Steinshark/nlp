what is an api well api stands for application programming interface and really this is a set of rules that allow different software systems to communicate with each other an api typically lives on some type of server and will manipulate some kind of database it can handle different requests so if i'm a user utilizing the api i send a request to it my request may contain some different data then the api is going to process this request and return to me a response that response will typically contain data that i was requesting from the api typically your api will manipulate some type of database and allow different access to the database values depending on the set of rules that you set up in this video i'll show you how to set up a simple api using python and flask in under 10 minutes so that said let's go ahead and get started after a quick word from our sponsor if you're interested in rapidly creating apis then today's sponsored dream factory has you covered with dream factory you can create fully featured apis in seconds by simply connecting to an a data source let me show you begin by starting your dream factory instance logging in and then connecting to a data source for this demo i'll use mongodb i'll fill in my connection details press save and in seconds dream factory has created a fully customizable and fully documented rest api that i can now use to access my data look i can query my reviews collection and view a result in a matter of seconds now that my api is created i can go ahead and add authentication by making a new rule connecting that rule to a new application and generating a unique api token now that i have this token i can access my api securely from anywhere look at me doing it here right in postman now best of all dream factory apis are fully customizable can run anywhere and connect to your existing authentication systems like oauth spend less time writing back ends and more time developing beautiful applications by clicking the link in the description and getting started with dream factory today thanks again to dream factory for sponsor during this video alright so let's begin with our project setup for this video we're going to use flask this is a micro web framework for python that's very popular for doing web development and for creating apis to set up flask we first need to open some kind of terminal window in this case i'm in command prompt if you're on mac or linux open your terminal and we're going to type the following command which is pip install and then flask now this should install the flask framework for you if you're on mac or linux you may want to try the pip 3 command if pip was not working for you and if neither of those commands work i'll leave two videos on the screen that will show you how to fix that pip command now that we have flask installed we're just going to open a python file which i already have here in some kind of directory and we're going to create a basic flask application flask will be the server that's running our api we're going to begin by importing our dependencies we'll say from flask import and then we're going to import flask with a capital request and then the function jsonify which we're going to use to create a json response now we need to create our flask application so we're going to say app is equal to flask and then underscore underscore name underscore underscore like that and then we're going to run our flask application by saying if underscore underscore name is equal to underscore and square main app dot run and then debug equal true this will run our flask server now that our flask server is set up and we have the basic initialization what we need to do is create something known as a root now a root is essentially an endpoint this is kind of a location on our api that we can go to to get some kind of data we have different kinds of routes which i'll talk about in a second but for now let's create a simple one and test this out so you can see how it works so to create a root we're going to define a python function we're going to say define in this case we'll go with something like home inside of our function we'll just return some data that we want the user to have access to when they reach this route so we'll say return and then in this case go with something like home now to make this accessible what we need to do is add a decorators we're going to use an at symbol and say app which is the name of our flask application here so use the same variable name dot root and then we're going to put the path that we want to access in this case we're just going to do slash which will be the default route now the root is really what comes after the slash in your url address bar so that's what we're setting up here okay let's save our code and let's go ahead and run this to run this we're going to type python and then main.pi which is the name of my python file if you're on mac or linux you're going to use python 3. okay so let's run that you can see that it's now created a development server for us and i can open this url by just right clicking on it here in visual studio code when i do that you can see that i get home appearing on my screen there you go you just created your first root inside of flask so now that we've created this demo route let's have a look at some other routes that we can create with different http methods now whenever we're writing an api we're working with something known as http which is essentially the way we communicate data over the internet now when we create different api routes we can mark them with different methods now the methods we can use are get post put and delete we have access to a bunch of other ones as well but these are the most common ones now get is used when we want to retrieve some value from the server post is used when we want to create something something new put is used when we want to alter or modify some existing data and delete is used we want to remove or delete data from a database or from whatever resource it is that we're accessing so let's create a more complicated get route here and see how that works so we're going to say at app dot root for this we're going to say slash get dash user and then i'm going to implement something known as a path parameter now a path parameter is a dynamic value that you can pass in the path of a url that will be able to access inside of our root so in this case i'm going to say user underscore id then i'm going to make my function get underscore user and i'm going to accept a variable inside of my function parameters here that's the same as the path parameter i put here now when we do this this essentially means that i can do something like get user slash and then any value i want and this value will be the id of the user that we're attempting to retrieve right so if i have something like 6226 then that's indicating that i want to retrieve the user with the ai with the id story of 6226 okay that's a path parameter so how do we access the path parameter well we can just access it directly from here so what i'm going to do is essentially mock some data that we want to return to our user so i can paste this in user data is equal to the following and now i want to talk to you about something known as a query parameter now whenever we are accessing a root we have the ability to pass something known as a query parameter which is essentially an extra value that is included after the main path so if i have my path get dash user slash one two three if i put a question mark here now i can pass different query parameters so something like extra is equal to hello world okay this is an additional variable that i can pass along to my root so how do i access that from flask well i can do the following i can say extra is equal to request request is the variable i imported up here dot orgs which stores all of my query parameters in a dictionary and then i can use dot get and try to access a parameter or sorry a value like extra okay now that i have extra i can check if this exists so i can say something like if extra then user data add to the extra key is equal 2 extra then i can return my data so i can say return jsonify and then this will be my user underscore data i'll pass the response code of 200. so whenever we are returning data from an api we're going to use json now json stands for javascript object notation which is essentially a collection of key value pairs very similar to a python dictionary so in flask we create a dictionary and then we jsonify that dictionary and that's what we can return to the user this allows flask to actually parse this value and return it as json data the next value that we pass here is the status code 200 is the default status code of success you can pass other http status codes here as well i won't go through all of them so now that we have this get root let's make sure our server is running so let me just bring up my terminal here and run my server and now we can actually test our get route from the browser by default when you actually type in a url here in your browser you're going to be sending a get request so notice here that i have the url of get user and then slash 123 question mark extra equals hello and then it returns to me the json data of this which has my user id and then what i passed here inside of the query parameter now that we've had a look at how to make a get root let's have a look at making a post root so to create a post request we'll do a very similar thing to what we did before we'll have an at app dot root we'll go here and we'll say slash and then this can be something like create dash user however this time since we're not using the default get request we have to actually specify the accepted method for this root so in this case i'm going to put inside of an array here post now this means that i can accept a post request if i wanted to accept both a post request and a get request that i would put both of them inside of here for now all i want to accept is post that will define my function create underscore user and if i wanted to check inside of this function what the method was that was being used i could do the following i could say if request dot method is equal to post and i would only do this if i had multiple methods but i just wanted to show you you can use request.method which is from this variable right here and it tells you if you're using post get etc regardless we know it's going to be post what we want to do here is actually receive some data from the request that's in json format so the user is going to submit us some json which is kind of the user that want to create so how do we get that well i'm going to say data is equal to request.get underscore json this is going to give me all the json data that was passed in the body of the request i'm going to show you how we look at this in a second and what i can do is simply return this back to the user to indicate that this was created successfully so i can say return and then i need to jsonify the data and then i can return the status request of 201 and now we have successfully implemented a post request where we are receiving some json data from the user obviously i'd probably do something more here like add this to a database but this is just a simple demo okay so now we've created this post request however i can't demo the post request for you in the browser so now we're going to quickly talk about how we can test our apis now there's a variety of different ways we can test our apis but i'm going to recommend we use a tool called postman so please download this from the link in the description and then open up that software and let's look at how we can call this api alright so my python server is running so i'm going to copy the url that it's running on right here which is localhost port 5000 i'm going to open up my postman software i'm going to click plus here to create a new request i'm going to paste this in change the url to create dash user change the method here to be post and then i'm going to go to where it says body because this is where i'm going to include my json data i'm going to change this to say raw data i'm going to go here to text and change this to not javascript but json i'm going to pass a json object so the way i do that is have a set of curly braces just like my python dictionary i'm then going to go and make a key my key will be username and i'll have this associated with the key or with the value sorry tim now if i hit send you can see that we get this exact same data back with the status code of 201 and that means that this is working successfully so this is a great tool that you can use to test out your apis as you continue to do more development so with that said that will wrap up this video but i will encourage you to learn more by checking out this video here which is on fast api or this video here which is creating a more advanced api in flask that uses authentication really the next step here is to authenticate your apis and connect them to a database obviously i didn't have time here with that said i hope you enjoyed and i look forward to seeing you in another one