hello and welcome. i'm james murphy. in this video, we're going to be talking about
one of python's most misunderstood features the double underscore or dunder __new___ method
of a class and how it differs from the __init__ method. before we get into this programming tutorial,
if you're someone interested in technical programming stuff, i know you've thought about
making your own website before, so please consider this video's sponsor hostinger for
all your web hosting needs. try hostinger's premium shared hosting plan. it comes with a free domain name. you can set up a wordpress blog in no time
with their built-in wordpress support. you get one hundred free email addresses at
your new domain name, and all of this has a 30-day money back guarantee. click the link in the description and use
coupon code mcoding in all caps at checkout to get up to 91% off all yearly plans. both __new__ and __init__ are part of the
process of constructing an object. both of them get called when you try to create
an instance of a class. in this case, we see that the new method gets
called with class a, and then the arguments and keyword arguments, whereas the __init__
method gets passed an actual instance of the [class] and then the same arguments and keyword
arguments. here is approximately what happens when you
actually execute a line of code like this. first, the __new__ method is called with the
given arguments and keyword arguments. then, if the returned object has the correct
type, then it will go ahead and call the __init__ method. so this really points out what the difference
is between __new__ and __init__. __new__ is responsible for creating and returning
the actual object, whereas __init__ is responsible for initializing it, setting default values
and things like that. we can further confirm this by looking at
the return types. _new__ is actually supposed to return something,
an object, whereas __init__ doesn't return anything. it just initializes values. this explains why you don't return anything
from __init__. its __new__
s job to actually make the new object. it's a class method, so it takes in the class
that it's supposed to return an instance of, and then it needs to return an instance of
that class. now notice here because of this isinstance
check, the __init__ method will only be called if it does actually return an object of the
given type. if i return the wrong kind of object from
__new__, then i'll just be left with an uninitialized object and __init__ will never be called. we can see this happen by commenting out the
return line so it returns none. now we see that __new__ was called, but __init__
was never called, and the value of x is none. that can be really annoying, so always remember
to return something from __new__. that's its job. i'd say that most python programmers learn
about __init__ fairly early. pretty much as soon as they learn about classes,
you learn about __init__ and how to make your own classes that have their own attributes. but learning about __new__ is something that
usually doesn't come up until much, much later, sometimes years even. so, when would you ever need to actually change
how the object is created rather than just how it's initialized? __new__ was added into python, primarily to
allow programmers to subclass built-in immutable types. suppose that i want to make an uppercase tuple
type. it's going to be the exact same thing as a
tuple, except whenever you create one, it always uppercases its arguments. you might be tempted to try to accomplish
this using the __init__ function. you take in an iterable as its argument. you're going to loop through those things,
change the ith thing and the tuple to the uppercase version of that argument. but when we run the code, we see that that
doesn't work. by the time that __init__ is called, it's
too late. the object already exists and it cannot be
changed. the only possible way to get around this is
to intercept and modify the arguments before the object is created. this can be accomplished using __new__. here we take in the same iterable that we
would have taken into __init__ and then we modify the arguments. we create a generator here that's going to
be a new iterable that uppercases all the strings that it sees, and then we go ahead
and pass that new iterable to the tuple class. then we end up with an actual uppercase tuple. again, this is only possible because we're
modifying the arguments before this immutable thing is actually created. now, when we run the example, it works. we have lowercase "hi" and "there", and when
it's printed out, we have uppercase "hi" and "there." you might be wondering in a case like this,
why wouldn't i just create a class that contains a tuple instead of inheriting from tuple? and that's a very valid point. the reason, at least for a case like this,
would be performance. you could certainly make a proxy object that
uppercases the arguments and then forwards all of its method calls to the underlying
tuple. however, doing that is going to significantly
impact the performance. tuple is a built-in python object, primarily
written in c. because it's written in c that makes it much faster than any python code
that you could write. so if you wrote a wrapper around it, that
was proxying all the calls, that wrapper would be written in python, and it would take a
significant performance hit. you would also be in a similar situation for
any type written as a c-extension. here's another interesting way that __new__
can be used. creational design patterns. here is an implementation of what's called
the singleton design pattern. the purpose of a singleton is that there's
only supposed to be one of them. you might think about it like a global configuration
object that everything is supposed to share, no matter how many times you try to create
one. you're always supposed to get back the same
instance. since you can only ever have one instance
of a singleton, that prevents everyone from getting out of sync. they just all have a reference to the same
object. so if you have something like a global config,
you could change an option in one place and then it would immediately be available to
all of the other places that had instances of that object. personally, i don't think you should ever
use a singleton. it has a lot of the same problems that just
keeping everything in a global variable would have. and for that reason, i can't recommend it. but, it does showcase an interesting use case. when you try to create the singleton, if there's
no instance that's already set, then it actually creates one. however, if the instance has already been
set, then we just return the existing instance. notice an important detail here. __new__ is supposed to return an instance
of the class. however, i never said it had to return a *new*
instance. it's perfectly fine to return something that
already exists. we can see this example code to check that
there is actually only one instance of the singleton. so here, we create the first one. then we create another one, and then we check
that they are literally the same object, and indeed we see that x is y equals true. so it was literally the same object that was
returned from the two calls to the constructor. here's another example that's like the singleton
example on steroids. imagine you have an object that is incredibly
expensive to initialize. maybe initialization requires something like
going out to a database to read the results or reading it from a file. if that's the case, you definitely don't want
to create a new instance if you already have one in memory. the loaded variable here keeps track of which
clients have been loaded from the database. whenever we're asked to create a new instance. first, we check if there's already an existing
one that has the same client id. if there's already an existing one, we just
return that. if not, then we go ahead and create the new
client, mark them as loaded and then do whatever. go out to the database to initialize them. this _init_from_file function, think about
as actually going out to the database and doing all the hard work. i didn't actually implement any of that stuff,
but this is similar to how some big frameworks work. when we actually use the client class, the
first time that we construct a client with id 0, it goes out and reads the client from
the file or database or whatever. but the second time it just returns the existing
one. but if we try to construct a client with a
different client id, then it does go out to the database again and read that one. doing it this way minimizes the number of
times that we have to make those really expensive calls, like going out to the database. one could argue that a lot of these examples
are probably better suited for a factory pattern rather than overwriting __new__, but this
video is about learning how you can use __new__. ok, here's another really fun one. imagine that we want an encrypted file class
that's able to read encrypted files. basically, you just pass it the key to the
file and then tell it what kind of encryption is used and where the file is located. of course, we don't want to have one mega
class that just has every different possible kind of encryption and methods for it inside. instead, we'll have different classes for
different kinds of encryption. for a plain text file, we just open the file
and return its contents. but for a rot 13 file, we would read the file
and then decode it as rot 13 and return that. if we had a file that was encrypted with a
one time pad that we're supposed to xor with, then we read the file as bytes, xor the bytes
with the key to the file and then decode and return that. now all of the logic for how to read each
kind of encrypted file is delegated to the class that's in charge of that. but, i don't want to do something like hard
code plaintext file here because this thing might be an argument of the function that's
not known ahead of time. i want to just pass the string that has all
the information to encrypted file and get back the right kind of class. here's how we accomplish that. first off, we'll use this registry dictionary
to map from prefixes like "rot13" to classes that actually implement the functionality
for those. we populate the registry by using this __init_subclass__
hook. this function is called whenever a class subclasses
encryptedfile. rot13text subclasses encryptedfile and has
a prefix of "rot13". when this line defining the class is executed,
it calls the __init_subclass__ function of the encryptedfile class. it'll pass in the subclass, the rot13text
subclass, along with the prefix that it had. then we just store the prefix and class in
the registry. now, in the __new__ method of encryptedfile,
we just parse out the prefix from the path and then look that prefix up in the registry
that'll tell us which subclass that we should use. we then create a new instance of that subclass
and return it. so if the path starts with "file" colon, we
return a plain text object. but if it starts with "rot13", then we return
a rot13text object. here we have three text files that when you
print them out, you see this: the first one "hello world", the second one jumbled up mess,
the third one another jumbled up mess. but, once i add in the correct prefixes "rot13"
and one time pad ("otp") with the correct key, then i see something else. after decrypting, we see that the first two
said "hello world" and the last one said "subscribe to mcoding". the last very common use case for overriding
__new__ is metaclasses. metaclasses very often want to or need to
override the __new__ method. i don't want to go into the details about
metaclasses too much. i'm going to have a whole new video about
them next week. be sure to stay tuned.