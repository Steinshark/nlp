welcome back to the show everyone this is tech and turn if you're new to the channel please leave a like and a subscribe and a comment introducing yourself if you get any value out of this video if you don't get any value out of this video let me know why not what could have been better and i will definitely address that my name is jason goodison i did six internships across three countries and i have done my fair share of interviews and applications and resumes and all that kind of fun stuff so i want to share all my advice with you guys one of the pieces of advice i shared the other day was about extendability i said it was the biggest difference between interns and full-time interns develop code for today full-time develop code for tomorrow and i had somebody asking me if i could elaborate more on that dlu27 says can you elaborate more on extendability does it mean software is documented well enough to be easily understood by new developers so to answer the question it's not as simple as just documentation i've actually made some notes about it and i wanted to share them with you guys and there's a lot of things in here i think that it's going to be new to you you're going to learn some new things that you probably haven't heard of before things that you can implement in your side projects that'll make you stand out on your next resume so again if you get any value at any point in this video please go ahead and leave a like leave a subscribe and share with a friend if if you think they'll get value too that helps me a lot but the first thing i want to talk about is well actually let me answer the question so documentation and code is that the number one thing and no documentation is is important but code nowadays is supposed to be written in such a way documentation would be redundant the reason for this is code is supposed to be written so eloquently that it's so easy to read that any comments on it would basically just be saying exactly what the code already says now there are exceptions there are certain pieces of code maybe you're doing some bit shifting maybe there are things that you need to put a little bit of a comment on but generally speaking the code itself should be good documentation if you've got a header file you could put some documentation in the header files also but putting it in code every few lines i don't think that really helps anyone and that is not considered the gold standard so what actually is things that interns need to consider more about extendability that they need to put on their resumes well the first thing i would say is upfront cost so i developed an application at work if you're from familiar with react you'll know that react you can make components in and you can make components in components and then what happens is you pass props which are kind of just parameters two components and you get this nesting effect so let's say you have a prop at the very top prop at the top and you need to get it all the way down to one of the lowest nested components you basically have to pass it all the way through all the components all the way down now if you have a lot of props this becomes overwhelming we thought you know it might actually take us two weeks just to add this one small feature so what we did instead is we added redux redux is this incredible library i know that there are other global state managers for react nowadays probably there's one that's more top of the pops you know the front-end languages seem to change like every two years but for me i love redux i think it's really easy to use however there are a lot of there's a lot of added code in redux up front and you'll think why am i doing all of this additional code i want to start writing the components i want to start seeing stuff on the screen all of this additional code seems like a waste it's not going to help me at all we're able to add redux into this react front end and add the new feature in in the same time frame that we probably would have if we had just added the one feature in with redux you're able to basically have components listen to whatever data they need to listen to the upfront cost is something i think a lot of interns rush over they want to get to the code and so when you go into an interview you'll say hey look here's my side project and the interviewer will say great what technologies did you use and you'll say well i used redux or i used react and they'll say why if you go in and say i don't know it it sounded like a good idea that's not going to get you a job right you have to say well you know i considered view but i think the combination with reactant redux is just so easy maybe i've developed with it professionally before those are all great reasons that why you would use it again right so basically having reasons to explain the technologies you do use and thinking about different technologies you could add in that would actually make your development much easier in the long run that's something i think is really important and if you could convey that on a resume or in an interview i think that'll set you apart another thing people have probably heard of is low coupling or high cohesion we do something similar where i work called domain driven development and the idea behind the first two is kind of like your classes should be very modular they shouldn't have major dependencies the high cohesion aspect you know being that all of the groupings of functions actually make sense a really great example of this in the real world is micro services so instead of putting your whole back end application into one node.js project you'll make different smaller ones that will communicate with each other so definitely in your own time maybe research more about microservices i can do more videos here on it specifically that's something that's really big right now basically having a separation of concerns is definitely a really great thing for extendability if you decide to do some development for elite party which is the open source software we made here we have a whole class that's dedicated to just user data we have a whole class that's dedicated to managing room data we have these things that are separate that don't really cross each other and it makes the development much easier overall another thing i think people really missed this is a big one this is one you've probably not really heard of is logging and metrics so what you'll do in your own application you'll be developing and you'll say oh i need to know if this fails you'll do console.log or console.error if it's a node.js project if it's if it's java it might be like print dot system dot no system.out.println yeah something like that the point being that will print to the console now that's not great for real applications because when a real application starts to error and crash let's say it happens at two o'clock in the morning what is that going to do for you the the printing on this like computer that's hundreds of miles from you that's not going to tell you anything you're going to be in sleep in bed and your application will crash and you'll never know about it you'll have to check it out check up on it like two weeks later and realize oh this thing's not working so so logging in metrics is really great we use roll bar for lead party and basically what we do is we use that logger we send all of our basically prints to this website where we can check it at any point another big product would be pagerduty we have an internal version of that at microsoft what that does is it calls people when things start crashing so if it's two o'clock in the morning and things start crashing a bunch of errors start popping up i get a phone call and it'll wake me up i'll answer it and it'll say service is crashing and i'll come out i'll fix it and i'll go back to bed and wake up in the morning and nobody even realized it crashed that's the kind of system that you want you want it to be highly available if you guys do some development with lead party roll bar is going to be great for that you can put that on your resume i think that's a fantastic option another thing ease of deployment so when you finally actually deploy your application you're probably going to use like aws or azure and how easy is it for you to deploy one product i love is called aws amplify so if you make like make yourself like a react project or something you can have aws watch your git repo you can link it to your github repo and whenever you make a change to a certain branch it could even just be master it will redeploy your application and you can have it manage all of your environment variables i love this product because it's like i don't even have to think about it another solution that is free is just github pages you can just deploy your code right through github pages i haven't used it extensively myself but i love aws amplified last thing i think people probably have heard of this a lot actually is called test driven development so test driven development write your tests before you write your code it's that simple i never did it in my side projects because i was always so excited to get into the code but i think if you do that it shows employers that you care about your your project actually working and actually being highly available another thing i would say is reusability and that kind of meshes very well with limit the number of code paths that are in your application so reusability when i when i went made my first website it was just like html css and bare bones javascript and every single page i copy and pasted the header every time i made a change to the pit at the header i had to change it in every single page that's horrible design if you use something like react you could make a component and you could just use the component and that is significantly better design and also reusability kind of flows in with this idea of limiting the number of code paths so if you are copying a bunch of code maybe you make a change to one place one user might get in one state might get a one code path through your system another user might get a different code path through the system the problem ends up being is that these two users will have significantly different experiences if those code paths are very different and what you want to do is limit as much as possible because sometimes you want people to do different things on your website right you want to limit the number of code paths through your website so reusing code is definitely a great way of kind of making sure that they're all using one code path so anyway i hope you guys learned something from those things the three things i think that people often miss the biggest ones would be the upfront cost like of redux using something like that in your system logging and metrics and ease of deployment all the other things are sort of taught in schools but i think if you guys apply these to your side projects start developing some code for elite party also i'll review your code this will be a great way to get these things on your resume you could talk about these things in your interviews and this is going to set you apart from the average joe so thank you guys so much for watching this episode i hope you got some value out of it and if you did please leave a like a subscribe and a comment if you want to just say hi or if you want to add your own opinion i love hearing what you guys think maybe you've got a different perspective maybe there's something i forgot i'd love to hear about it thank you guys so much for watching this episode i will see you in the next one