so this one is how to model a lightning strike. we're going to try and make an animation of a lightning strike that looks realistic. and i'm not claiming that it is a realistic model of lightning- this is- this is kind of secretly a demonstration of an algorithm in computer science called 
breadth-first search which we'll be showing as like a maze solving algorithm. so what we have is a it's a frontier of exploration, bits of lightning, and one of them hits the ground first and that- the path that that one followed ends up being the shape of the lightning strike. so like a frontier of exploration and as soon as you find it that one gets reinforced and that becomes a lightning strike. and this is taking place inside a randomly generated labyrinth. so maybe the walls inside this maze would correspond to fluctuations in the air, like variations in the resistance or how charges can pass through the air; and maybe if air was perfectly homogeneous it would just be- lightning would always be a straight line, i don't know. (brady: it's really good looking
this one isn't it?) (were you pleased with how it) (turned out once you'd made it? did you) (think, wow that looks awesome!)
- yeah i think it's quite, like, satisfying i think. there's a- there's a bit of- there's a kind of game at the beginning where you're like well which one's going to win? and you know in some of these you've got two kind of two or three competing parts, and is this one going to win? is this is going to win? then that one wins in the end and then you you have the satisfying bolt of lightning at the end. 
- (your cat seems really into it.) yeah, helps me out with all of these animations. this is done in mathematica. the first stage is generating the random maze, then there's solving the maze, and then there's generating the animation from the solution. so here we are in mathematica. this is code to randomly generate a maze, which we're visualising here. so maybe you can see if i run this every time, i'm going to get a random configuration of of walls in the maze.
- (how do you know) (the maze is always going to be solvable?) what i would do is just generate it again again until it is solvable. since it's random basically it turns out it'd be quite unlucky if it's not solvable, but i could be unlucky and then the- the output of the breadth-first search will be there is no solution to this maze and i'll say, okay let's generate another random one. the way this works is that we're going to be working on a square grid. here are all the points that might be connected by lines of a square; and then each each of these potential lines here will either be free or there will be a wall of the maze. you know there's one probability for each of these being joined- being joined, yeah, and then there's another- there's a different probability for the horizontal ones. and i did that just because i wanted to make it more likely to be solvable. so these have a these have a different probability, q say, of being joined and then i just set it so that, you know, i'd set it so that q was less likely than than p. 
- (there are) (more vertical lines
than horizontal lines.) yeah there should be, but there might not be. so then there is the- the step to solve the maze. you know that's this code here. it's relatively easy to just sort of show how it works i think? so say we have some maze and what we're asking is we're going to start at a point at the top, right? and our goal is to get down to the bottom. so, you know, lightning is somewhere in the cloud and we just need to get anywhere on the ground. we've got various walls that are joined - this might be enough to get the idea. you know theoretically we could just solve this by trying all possible paths to the bottom, but we could be more efficient than that. and the the idea is that we're just going to take it one step at a time. we know that we're starting in this cell, so we can get there in zero steps. now we can get to this one in one step, and get to this cell in two steps, we can get to this cell in three steps and to 
this cell in four steps. now we've got a branching point. and this might be where you would be worried that, okay now our code is going to go off in this- and go be intractable. but really let's just take it one step at a time and just record how how far we can get. this cell we can get to in five steps and we can also get to this one in five steps. now where can we get to in six steps? we can get here, we can get here, or we can get here. and how far can we get in seven steps? you know, there's a box up here we can get to; here we could go right or down; here we could go down. you know, and eventually we're going to have some kind of path that goes something like this. now that we've got to the bottom, what 
that's told us is there's a path to the bottom that only takes 10 steps. so let's not bother looking at all the 11 steps ones because we know how to get there in 10, all we need is the shortest path. it's called breadth-first search. (breadth-first search?)
- yeah breadth-first; and that's as opposed to depth-first.
- (what) (happens in your code if there's a tie?) yeah that's a good question. in that case it will just be down to basically random or the way that i implemented the code. you know, maybe i looked at paths to the left before it's passed down or to the right, and so it'll just pick a tie. so yeah it's not- so it's it's ambiguous, yeah. so here, you know, before we generated one and it looks like we were lucky and there is a path that goes down. so yeah, so this was the original maze and now this is solving the maze and just visualising the path which, it's maybe a bit hard to see because it doesn't correspond with- with that but you know maybe i could quickly draw them on top of each other? let's make the path red... we solved this original maze and this is- this ended up being the shortest path or one of the shortest paths. 
- (so matthew, the animation that you) (ended up publishing is just an arbitrary) (one that the code spat out randomly) (that you liked the look of?)
- yeah i did a couple on a smaller maze and a couple in a bigger maze and i ran a few and those ones seemed like interesting ones where there was some kind of race going on in in the lightning, and yeah they're just ones that looked nice i thought. so we could look at the one that we happened to randomly generate there; the third step in the code is just sort of drawing the picture in a nice way. so we'll be using all the numbers that we had to colour the frontier as time progresses. so, for example the 6s were kind of interesting because we had the frontier at one point will look like this, we'll have all the 6s. and i will- i will colour them so that this bottom 6 will be brighter than this top 6, because in some sense it's more promising. 
- (it's winning.) it's winning in some way. even though it lost in the end i guess, because it was- this 6 looked lower and was
winning but ends up losing because there's a better path started going along from that 6. 
- (yeah) so that's what the animation here does. so you start just creating- (so you're colouring equal numbers) (basically?)
- yeah that's right. and i think there's a bit of fuzziness as well, so i'm maybe drawing- here
i'm drawing all the well i can find out, all the 16s, but i'm- the 15s are still fading out of existence at that point; and this is the most promising 16, which maybe looks like a dead end actually. so yeah yeah, so then 
this actually becomes more promising and this one is, you know, coming into existence. 
- (this is so much fun, i feel) (like you could just sit there like) (betting on it or like you just sort of) (in your mind you're running a little, oh) (is it going to win? 
which one's going to win?) (i still don't know- oh that one, 
that one down the middle!) (no? yes?) (no? yes.) 
- you got it. and then there's that. of course that was a solution right? (this is so satisfying to watch these, i) (could watch these all day.) so and then we can change things; like we could make the maze bigger, smaller - bigger or smaller, should we try? 
- (why not, i got nowhere to be.) let's say we could make it not square as well i suppose. do you want a wide and thin, or tall and-
- (i think tall. tall) (is more fun surely?)
- let's make- make it the same but twice as tall. so now we have- (so quick! just a couple key strokes!)?
- yeah but, let's see if we can solve it as quickly. no, so i think this means that it was an unsolvable maze. umm, my code creates this nice red box if it's unsolvable, so let's try again. so we would just regenerate, this is a new maze; can you tell is it solvable? (i can't tell.) i think- i think there is a path down here. (are you gonna get the red box of doom?) (no! it's passed!) and that's what it looks like in the context of of the original maze. (and and will it animate as well?) should do... okay, here we go - oh we've got two kind of parallel. so it looks like there were two that were very close and we ended up picking this one.
- (yeah so there were two that) (were- two there were two winners but they) (chose one.) (that is fun. that is seriously fun. but) (just to be clear, you're not a) (meteorologist and you're not claiming) (this is how real 
lightning works, it just) (looks like lightning?)
- yeah this is not an accurate model of lightning. when i posted this animation it did get a lot of attention from meteorologists and it sort of got retweeted around the world of american weather presenters. i'm worried that i've convinced them that this is how lightning works! this episode's been supported by kiwico. now in the past you've seen me making all sorts of cool stuff, this time i've shared the love and had kiwico send a crate to my nephew, sebastian. you can see his co-pilot here is chelsea, together they're putting together a domino machine. this crate's targeted at ages 9 plus, perfect for ten-year-old seb; but there's a whole range of crates available on the site for people of all ages. everything you need is home delivered already in the box. it's so enriching to expose young minds to science and engineering and technologies in ways like this. but you don't have to take my word for it! just look here at sebastian. whether it's for yourself, or maybe as a gift, check out kiwico. and there's 50% off the first month of your subscription by going to kiwico.com/numberphile. there on the screen. kiwico.com/numberphile. and there is one very happy creator and his domino laying machine. even sebastian's little brother got some value from this one. ..let's say, and i'm here. 
right, i can't go left or right here, i can't go left or right here, i can't go left and right here; and i'm spending a lot of time going to this one adding it to the queue to this one and then and going down here. i'm taking 1, 2, 3, 4 steps when really one step would have sufficed.
okay where are you going? i hope your eyes are closed okay. they are they are. okay start with a draw ooh right over there! there there's one. okay so we have edward sabine referee reports by jb airy on some of his papers. let's choose the lunar tide one and the magnetism one.