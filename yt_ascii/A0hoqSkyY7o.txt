in computing terms, what often people refer to json now is javascript object notation so... it's a way of representing arbitrary data in an ascii format that can be easily transferred over the internet that can be stored on disk and things in a way they can be processed by most programming languages cool, end of video. 
yeah so, why do we need something like json? computers are great at storing data and they're great at processing data. the problem with computers and data is the format of how data is represented is fixed by the program that's been written it's fixed by the architecture of the machine that's doing it and if you try and transfer that from one machine to another machine, if they're the same type and running the same software it will work great but if you say got a piece of data that you've created on your sun workstation and you try and transfer it to your say... ibm pc or your intel mac? then there's a good chance that they will interpret the data in different ways we talked about endianness in another video as a classic example of how sometimes a computer store data in a different way to another. so what json gives you is a way of representing arbitrary data structures that are sort of free from the programs that are represent- that are representing them xml does something similar, the "extensible markup language". the advantage of javascript is it's lighter weight in some ways and things although that's perhaps less of an issue because it can always be compressed but it helps but also obviously if you're processing it on the web in javascript, javascript object notation uses the same parser as javascript as a programming language. so what does javascript object notation have? the two main things it may have is an object which will map a string to some sort of value and brian kernighan had talked about this in another video where he covered hash tables it's exactly the same sort of thing. so we can have a object and they're represented by a curly brace and then we have the string so let's say name and that maps to a value and let's have another string that says shawn and then we can have another key in there, let's say birthday and that maps to let's just put 42 there, and so on and we can have as many of these as we like. this value we can have here can be any other javascript thing so it can be a number it can be a string it can also be another object. so we could have something that says "children" and then that could be an object there which maps say the name of your children to some details about them that works you can nest them like that, but children tend to be an ordered collection you tend to have them one after the other so we also have the ability to represent ordered things using an arrays and then we can have a series of things there so the difference between an object and array is an object maps a key to a value whereas an array specifies an ordered collection of things they have this idea that this one comes after this one. so they have a numerical index and we specify an order. objects don't have a numerical order. so in this case we would have children, so the first one, let's call that one alice and then we've got another one. let's call that one bob and then he has a third one. i don't know let's think that one could be called... let's go with charlie. and you might have a fourth one, which would be called derrick and the fifth one which might be called esmeralda and so on. so we can have an ordered collection of things and so we can build up any arbitrary structure and of course the thing to remember is that you don't have to use javascript to use this - javascript object notation to do this but it helps and it's become very popular doing this as we said, it's lightweight you can remove the white space and things and you can you parse it relatively simply and if you're doing in javascript so it's become very common on the web but also to transfer data between any other sort of programs. here, we've said that your children is a list of strings we could have specified that they are actually objects. and so alice could really, let's just push this on to another good paper so we've got what we had before we've got kids i guess gotta abbreviate and that maps to an array and this time we're going to have an object here inside the array which has got a name which maps your name to alice and then that could also have what else we have in the object. we had a birthday, again, i'm abbreviating... which you can't do in javascript. because it would be a different key and we'll put that to be 56 and then of course she could have some children or kids and then we'd have an array of more objects and so on and then eventually that ends that object and then we could get around to doing bob and so on and so on like that, so yeah, you can build up complicated structures in that way. but mainly it's a file transfer format, yeah yeah, it's exactly what it's used for. it's used for transferring data in a way that is pretty much agnostic to the programming language being used because you can represent pretty much any arbitrary structure you'd like in there representing graph like structures where you've got links from one to the other would become interesting it's not the only format. the structure of this is very very similar to the structure that's inside a pdf file. it has dictionaries which maps keys or names rather than the strings to values and it has arrays and so on so there are other structures a very very similar but it's just become common to transfer these things over the web. so the first one let's call that one alice and then we've got another one. let's call that one bob how did you know my children's names? we keep watching videos about them with mike.
 
because it's fairly common and then we'll talk about differences with say one password what lastpass will do is it will produce a master password by a pet...