when alex did a video on linked list there's a lot of comments on it it sort of thing i want to use a linked list arrays a factor what's the point of reading this and so i was sort of thinking about is that well actually "are arrays faster than the linked list or are the linked lists faster than an array, how do we go about finding out?" which one's faster, so let's have a shoot out arrays versus linked list first question to start is i should just remind ourselves what the difference is between a linked list and an array so let's start with the array so probably the simplest to understand so an array is just a way of storing several values in memory so we start off with the first value and for the purposes of this demonstration, i'm going to use a structure containing multiple values. we did talk about objects a while ago structures are what you had before we saw this object which is a collection of values in memories and store to integer values so this is array element zero and it's got two numbers. we then got array element one and it's got two numbers looks like i'm playing break out got a great element to and it's got two numbers and so we can refer to any of these by reference to the index starts at 0 3 4 5 6 7 10 so you can have an array of any size we have to know how big it is if you wanted to be when you create so you allocate the memory for all the things and then? you can store some values so we can write 42 in this one. we can put 21 in here i'm going to put 3 in that one and we can store them or we can put different values in here as well as we need them so that's how an array works. which is one big block of memory each thing stored one after the other linked list works slightly different we start off at the beginning of the linked list and it points at nothing but then as we add things to the list we allocate the memory for it. we're going to store two things so the first thing we'll label these things inside it p and q so it's a lot p here and we've got q but we also have an extra thing that tells us where the next they will be and that's empty, too so it's all put 42 and 16 so we just allocate space for that one structure that one thing that we're going to store and we connect it up so we point this at the first thing so we often call this something like first and we see alex videos to see how that have done so when we want to store the next thing we allocate explai for another one and we can store the value, so we've still got 8 21 in it now the difference between this could be anywhere else in memory, and we connect to the next pointer to point in to the next thing so we have some known starting point which points to the first thing and the first thing 22 the second thing and the second thing would point to the third thing and so on and that would point down and these could be all over anywhere in the computer's memory and then at the end you normally point it at some known value which is often referred to as null and is often the number zero? so you can then walk through your list and when you find at the next point of zero or null you know you've come to the end of it there are two different ways of storing data the best or the same amount of data now he's got some differences this one as i says it's fixed inside, and you create it you can store how many things you know i've actually filled in but as soon as you get more than eleven since final top array? you can't go past eleven if you can see yeah the numbers all go to 11 on this however if we wanted to put something else thing we can just get rid of this thing and update this to point to a new thing so we can make this grow quite easily, and we can also be really clever we can add things in the middle and the beginning very very simply, but we're going to go into that today so creating them. we're probably only going to do once but which one is actually faster well, let's think about what actually to do. let's define a very very simple problem we've created the structure here, and it's got two things in it it's got an integer called p and an integer called q so saving the linked list and in the array let's consider an operation where we're just going to go through all the elements in our array or all the elements in our linked list and sum the value of p are going to add up all the value so we're going to add up. what's in array element zeroes p in array of them at once p and so on so we're going to effectively do something's going to add them all up. we'll do the same with the linked list as well so we're going to set what the first thing is to point to p now that one. no. there's no time out of its value of p the next one and so on and we'll add them all up why are we using missiles they want to the unique thing about this is that it's going to visit every single element in either the array or every single element in the linked list so we're going to visit every single element if you only have to visit one element then the very nature of random access into array means as we fast there's no way you can make any difference unless it's the first element if you only one to ever access the first element then look at the same speed we fuel directly to random element then the array or win hands down you can just think about how it works that will be the case. we're going to consider we want to access every single element and do something to it and in this case you're just going to sum up the values, but it could be if things were representing say windows on the screen we want to move them around we want to redraw them whatever it is will then do something to every single wall so we sort of set out the problem? i'm going to go over an array of values and a linked list of values i'm going to in sum in the visits all and we do actually add up all the numbers stored in the element p. which is part of the structure so what i've done is i've written to see poems which are more or less identical i'm going to create 125,000 elements in my array or mailing list and in the linked list i've got a structure which contains an integer p and an integer q and in the array version i've got a structure which contains an integer p and interested q in the array item the only difference is that the linked list has one extra item which is the next pointer to the next thing? so very listen see so hopefully we'll go as fast as we possibly can most of the rest of the program is identical so i have my main routine here which creates a list or an array of random number generator? 125,000 random numbers which is a slowest part of the program you'll see and then store them so allocate memory for each element in the linked list and then we set the value everything else will just leave with 0 and we do the same with the array just as we did on the paper we then run the program 100 times and all going to here is time how long it takes to run a function which adds afforda numbers either in the list or in the array? i will do that 100 times and then we can work out the average time it takes to calculate one and we'll print out the values as we go so we're just using the built-in clock function in c. which should be accurate accurate enough for what we want to do so the real meat the body of the program is this function here some list or some array let's start with the array one because possibly the simplest we said a variable to be zero that's going to be asked some you have another variable i which is going to be our index through the array and we go from i equals zero i first element until we get to the end the number of elements in there and we just say this sum equals the value that was already in sum plus the value in the ice element in the array a p element remember we said the array had a p and a q in it we want the value stored in the p space within the structure in our array, so i'm just going to add get them together the list version very very similar we set the someone to be 0 we say while p does not equal null so why we haven't reached the end of the list and we set p initially to be the first thing in the linked list? so pointing out that first thing sum equals sum plus p inside p. we using p inside p confusing variable names, but then i'm asleep programmer, and then we set p ir pointer to point to the next thing so we follow the link to the next thing in the linked list and we keep doing that until we come to the end there are two programs as simple as you get in terms of implementing a linked list or on array so we're going to do is run them and we should get some values output but we're not going to run them on the i max we're not going to run them on the raspberry pi we're actually going to run them on the atari behind me which means i need a very high peak high-tech piece of equipment, so i need a floppy disk to transfer other programs from the imac go topping them off the imac, and then we can run them on the atari so go over to the atari and assurance that it's cameras and spot. we can see it. so what i'm gonna do at first is they got to run the list first also going to generate 125,000 linked list values to let it run right while it loads off the floppy disk that's what it used to be like back in the 80s and 90s you had to wait one you crave them ran a while a long while and this is just a simple program so there is good so it's not initializing the link list it's allocating all the memory for the different elements and then putting a random number in the p value of each one, so we'll let that run in the words of the old hobbit computer game time passes or in the words of every apple of this secret short how long does this take? a while lots of oil, i don't know another time this bit 125,000 times however long it takes to allocate a random number and allocate some memory on the clock speed of what this is actually an 8 megahertz cpu so it's a takes a while the computer loaded off all the code for the program and off the floppy disk into memory and it's now running it to generate the data set that we need then gonna sum all the values so everything is happening now will happen off memory it's just taking a while to process it but we are recording it in 4k which is a slight overkill. i hope you're getting into that extra bit so the programs going through now and we'll let it run 400 times we'll get an average, but actually looking at the values of the coming up i think we can safely assume that the average is going to end up being 166 clock ticks now when i say qwop takes each of the machines. we're going to look at are going to have different clocks perms that they use the time things so we can't compare the values directly what we could come read with the seconds but we can certainly see the relative patterns between it will call that 166 clock ticks over to run the linked list version of the program it takes 166 clock ticks so let's now run the array version of the program so now we're going to do exactly the same thing we're going to allocate an array every time twenty-five thousand elements and populate them with random values because of the way i've written the program it will actually be the same pseudo random number sequence that the sum should be the same and then we're going to fill each of them up and time how long that takes and we'll they'll see whether an array actually is faster than the linked list or whether a linked list will be b. array so that to me looks like that little spinny thing is going faster yeah, well so and i haven't just upgraded the processor while they're off camera what's actually happening is? when we allocate the space for the linked list we have to allocate space for each element and then for the gym there we allocate space for the next element. we could do that in a different way and speed things up, but we did it that's the classic way with the array. we allocate the whole lot in one go, so we all take one huge block of memory under 25,000 times eight is about one meg's worth of memory so allocate all that in one go, and then we're just going through it filling in all the values setting all the values so that should be quicker and it seems and spinning wheel is going slightly faster what why would that spin wheel very fast can you just learn how that you can read it if you've heard this thing you it yeah? so to give some nice sort of visual feedback while this is running well, i'm just a plain white screen what i'm doing is i'm printing every hundred element ideals i update that thing and just printing either a dash a vertical line or one of the two slashes to make it look like it's getting round and those are printing it it creates a little effect which is see that something's happened and the computer hasn't crashed so this should be faster, and we should get a value so is now working and the immediate thing we see is that the array is taking about 179 or 178 ticks it's the same quad kick so we can compare these two values the array is slower than a linked list i know down, okay? all right now. so you can't argue in - okay, so the numbers have come in the computers around 170 angular call is to that 170 8.5. always for the final average to come in but for that. so they're roughly comparable basically there's not much it sort of thing, but there's something about 200 qwop ticks per second on this machine it's is probably a noticeable. it's about 10 percent slower okay, so that's it. i mean we can stop here come a that's it. we know. what's what arrays are slow you wrinkly yep, so arrays are slower than ling li gotta get my vendor video yeah and a video you can now bring up the slash computer, so virtually there are two ways you can walk over the ray we went up the array from the smaller numbers to the larger numbers but we could also start at the larger indexes and move back to the smaller indexes, and i thought well let's try it both ways let's not have anyone posting some comments saying no, but if you went the other way so let's run it the other way, so i wrote a version which walks down and because we're adding the numbers together we'll get exactly the same answer a plus b equals b. plus a and all that you can watch numberphile to find out more online. i'm sure you think this would take exactly the same amount of time, so just update our table to do this and we're going to have the reverse array here i'll just wait while it does that so going backwards through the array the only thing can we do the same thing with the linked list well the way we've designed the linked list we have a pointer to the next thing in each thing, but we don't have a pointer back to the previous thing it's a singly linked list so we can only move forwards along it we could design it to be a doubly linked list and have a backwards and forwards pointer but if you think about it if we started at the end and move backwards that's going to be exactly the same operations as if we start at the beginning and before so there's actually no point in testing it'd be exactly the same code. we just be using different offsets into memory so taking exactly the same amount of time while we wait for that to do its thing let's run the same programs on the imac and see how much faster it is so let's compile them up. i am turning on as i did before all the optimizations for the array and things that'll make it go as fast as poss but some of the comparison to the array test and i going to compile with the speed test done, and i'm going to do the same thing for the link test i'm going to say something really obvious now but it's honestly a heck of a lot quicker this machine just to get compiled up and ready. yeah those machines much faster because while i'm compiling everything on here and then transferring it across rather than trying to get my old c compiler going on the atari and also the chances are this will produce better code, so it'll take make the most benefit of the speed we can pile them up, so let's run the linked list test as we did before boom it's done everything now you notice that took a lot quicker? the numbers are still roughly in the same order still about 100 and around 200 but remember this is a different clock we cannot compare the ticks from that one - it's on the different numbers, but we get the average here two hundred and nine point five four i'm acting this is 166 atari ticks they're much slower chicks than the i like ticks we can't compare that to that we can compare horizontally let's do the same now with the array test and wow when we did the linked list test on the atari it was faster than the array test roughly take you about ten percent faster nothing really in it you could say look at the difference on the imac the imac takes forty three point four four clock ticks to do the array 209 that's five times faster for the array was on the atari the linked list was faster so a reverse array is now going on the atari 114 and that's quicker. that's quicker than the original array, and that's quicker than the linked list, so if we do everything backwards doogie where it's very good if you do everything forwards it's much slower. i'm a bit confused is there any possibility that's just a problem the code or something always are you going to reveal something to this year? we need to delve a bit deeper here to see what's really going on remember we wrote these programs in c so we wrote these in the high-level language and then they got compiled down to the instructions that the machine can execute and what's actually happening here. is that the research shows that the machine can execute? favor walking backwards down something compared with going further upwards now let's run that same array backwards program on the imac for completing this so let me compile that one up and again. i'm optimizing everything to the hilt test and so we'll run speed tests back and we'll run this one so before the arrays now much faster according to this a reversal rate should be faster than the forward array. so what would you expect the value to be shown for? run on the reverse away about fifteen or twenty directly if it was the same as that did all right would you like to stick with that answer or would you like to change that oh? nervous excited actually because the atari was faster to do a linked list in an array and the imac was the other way around i'm going to say it's going to be slower to do it in reverse. so you reckon firm supposed to do it in reverse oh, i do like an indecisive person there. we go average time forty seven point four six so marginally slow marginally slower about 10% slower but still an order of magnitude faster than this we could do the same on the raspberry pi so again, we'll compile all of these up, so we'll do it array test compile it up noticeably slower to compile will do the ll test. this is the list version and we'll do the reverse test so compile them all up on the last repair, so let's run these and get the numbers we've run the array test we now get nine 165 point seven five as an average for the array will run the link list and we get one eight five eight point six one for the linked list test and now we run the reverse test and we get 101 9.5 five so we've run the test now. so we've we've assumed nothing we've ran some tests or to get some data so we can see which is faster an array or liquids with this operation we've been trying and we've got some pretty interesting results so we're running on the atari the linked list was faster than the array unless he ran the array backwards in which case the array was faster than the linked list and the array going forward we'll come back to that we ran it on the raspberry pi and here the array was about twice as fast as the linked list baby rarely backwards the array was slower, and if you do it on the imac view range height, i'm faster than the linked list whichever way you went so what's going on here? well, let's ignore the imac for the minute the apple haters will love that bit but let's ignore the imac for though and let's just have a look at the raspberry pi and the attali so we've got the atari and the raspberry pi and we'll just go with the array speed and the link to this so we've got about one hundred and seventy nine for that and one hundred and sixty-six clock ticks that now when we can't compare the clock ticks between the different machines because they're different different clocks used in the machines but we can compare them relatively between the same thing on the same machine for the raspberry pi it was 966 and that was a'59 kish now what's going on here? well the thing we need to remember if you look at the machine code it's roughly the same length the same number of operation now on the atari some of the instructions will take slightly longer than to execute but that's not what gets going on here we need to think back to the video on cashiers that we did the difference between the raspberry pi cpu would have been much faster and more modern and the ataris is that the ataris? doesn't have a cache so every instructionally needs to fetch every bit of data that needs to fetch has to be fetched from memory each time no, it's not cached broadly speaking we believe something going on there, but broadly speaking with no cache is about half the prefetch buffer if you want to get into the details, but we can see there's no cash so if we think about the cpu in the atari, then it's having to access memory for everything so everything that the cpu needs to fetch on the atari the instructions the data from the array or a linked list and of course the next pointer from the linked list has to come from memory so it takes the same amount of time we get are the two weather fetching data or fetching instructions on the raspberry pi however? we still got the main body the cpu which is going to execute things and it has memory as well but in between there we have a cache in fact we actually probably have two caches one for data and one for instructions as i want to see if you activate as we looked at in the previous video is access to it via the caches, and then they if they haven't got it to get it from memory, so why does this make a difference? surely things will still wake up so well on the atari the fastest thing in the theory is basically the memory the memory is much faster than the cpu that's about twice as fast and so the memory can provide a data exactly when the cpu needs it. there's no real need for cash move ahead to the raspberry pi and the are make of course then the cpu is much faster than the memory so when cpu ask for something it has to wait while the memory? provides it now let's figure out how what happens when we run our program? with the array on the raspberry pi every instruction after the first time will be accessed will be cached in the instruction cache so the first time we go through the loop all the instructions are going to be used in that loop will have been cached in the instruction cap so you can get these immediately the data particularly with the array would also collapse a bit with a linked list we don't get just one or two bytes in each time i'll get what we call a cache line pickups 128 bytes in a go, so we'll get some of the data that we already need into the cache as well, so some of the data will already be there in the array more so with your right so the reason of the array runs faster on the raspberry pi is that all the instructions are coming straight out of the institute basically giving us a fast lane for those instructions, so they get there immediately there's only the data that needs to get from main memory, which will get cached as well so the same happens with the route list program except for one crucial difference with the linked list poem we have to make one memory access to get the data value that we're going to sum and then we have to make another memory access which has to go through the cat into main memory for the address of the next thing we have to make to memory request which may get satisfied by main memory here where's our the array one? we only have to make one for the value that we're interested in and because of the cache we get sort of a fast passing instructions, and so actually not having to do that second memory access to get the next pointer here means that this the arraylist of the program ends are working about twice as fast on the atari because everything is coming from memory it doesn't matter whether you're reading an instruction or reading a bit of data it's still going to come from memory each time so actually the front of the value is already pre-calculated in memory means that actually runs slightly faster, i mean, we're talking perhaps 10% faster. not really a billion so we get a slight speed benefit now to show that this is the case i took the same version of the program on the atari and ran it on the atari router now the difference for the atari st. we use there and the falcon is that the falcon has a slightly later version of the 68000 processor which has a cache in it both instructions and data cache and when i ran that on there the times that came out so the array was 46 clock ticks is much faster processor anyway, and the link list was 58.5 clock ticks so on the falcon because you've got the cache. they're just like on the raspberry pi the array version ends up being traffic exactly the same program exactly the same machine code because you've got the cache there the array version ends up being faster because the instructions of their professional and that sort of fat packs from the cache rather having to go to main memory each time mean that the irradiation becomes faster than the linked list version now tell them other things we haven't talked about yet. why is the reverse array faster on the atari? simple answer to that it just uses slightly different instructions their instructions on the six 8000 that allow you to do a decrement testing with zero branch which isn't all in one instruction so you can actually make the code slightly more compact and run slightly faster again. it's a small enough time why then is the imac significantly faster? we're getting sort of five times faster? well that's because i use a slightly different compiler that i use the clang c compiler on the imac rather than gcc for the other two and it cheats it it squats that you've got an array axises in the loop, and it says well okay, rather than doing a loop around one array access i will do a loop around eight array accesses all in one go so it actually removes some of the tests for the loop and it makes the program much faster for the compilers being clever and optimizing the program so it runs faster the answer to whether the raise faster than the link list or not? very much depends on how you cpu in the machine that you've built is configured to actually execute the code so you can't make assumptions? about how a cpu will execute code you really need to do the test to see what's happening even within the same architecture family the difference between the six 8006 8030 in the falcon mean that assumptions we make based on what they charity did where the rally was slower than the link list aren't true on the falcon and when you move it on to a completely different architecture like the raspberry pi or the x86 chip in the imac then again you get different effects, so the best thing is when you're faced with a question question like this, and you're not sure come up with some test and collect real data, and you'll be able to see what's going on could you