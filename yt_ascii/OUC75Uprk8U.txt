rust is not a good c replacement all right drew why don't you tell us i have a saying that summarizes my opinion of rust compared to go go is the result of c programmers designing a new programming language and rust is the result of c plus programmers designing a new programming language okay i agree with that this isn't just a metaphor go was designed by plan 9 alumni an operating system written in c and the source of inspiration for many goals of features and rust was designed by folks at mozilla whose flagship product is one of the largest c plus code bases in the world okay yeah the values of good c plus programmers are are incompatible with the values of good c programmers interesting rust is a a decent c plus plus replacement if you have the same goals as c plus plus but if you don't the design has a very similar drawbacks both rust and c plus are what i like to call kitchen sink programming languages with the obvious implications these languages solve problems by adding more language features a language like c self by writing more c code i really like that take kitchen and sync are both keywords also no but really but real talk this is actually a really interesting take because that's one of i think that's one of goes big reason why people get upset at go is that it doesn't like add more features why not why aren't you doing this why haven't you added this why haven't you done this why haven't you done this but instead they do very little and in some sense it keeps the language very simple and so to solve a problem you just write more go is that bad i don't know i don't know if that's bad or good i can't because i you know the hard part about if anyone who's ever been in a part of like a really large really complex c plus code base knows for a fact that language features don't make it easier they don't make things great it's it can be excessively difficult reasoning through these things right and but that's really hard for you to understand right it could be really hard if you've never been in that world go a simple yet performing yeah curious just a cure it's just a curious take that i think i can agree with i think i did some back of the napkin estimates at the rate in which these languages become more complex based on the rate at which they add features per year my approach wasn't very scientific but i'm sure the point comes across c .73 new features per year measured by the number of bullet points in the c plus a c11 article on wikipedia which summarizes the change from c99 adjusted to account for the fact that c18 introduces no new features is it i mean c11 pretty much just gave the new threads right it dropped p threads for some new naming conventions am i right for that and some like basic new ways to kind of do things go two new features per year measured by the number of new features listed in the wikipedia summary of the go versions okay c plus plus 11.3 new features per year measured by the number of bullet points in the c plus plus 17 article which summarizes the changes from c plus plus 14 which will be implemented in in 2032. rust 15 or rust 15 new features per year measured by the number of headers in the release notes of the major rust version over the past year minus things like linters interesting about a language that does not change drastically but there is also something very nice about getting features that make your life easier so i'm not sure if like i don't know if these are good or bad measurements it's really hard to kind of i mean i guess the real measurement you're looking for is how many changes make material impact to how you write code i think that would be a better measurement assembly zero new features i don't know just something you know think about this this speaks volumes to this ability the stability of these languages but more importantly it speaks to their complexity over time it rapidly becomes difficult for one to keep an up-to-date mental map of rust and how to solve problems idiomatically this is true i would agree with this as more and more features are added it does become more difficult you do have to continuously be pursuing and pushing in to become good at rust i agree with that a rust program written last year already looks outdated whereas a c program written 10 years ago also has pretty good odds of being just fine system programmers don't want shiny things we just want things that work that really cool feature other pro other language has not interested it'll be more trouble than it's worth okay i mean i think that's a good point i think that's a good argument for why for why like you know languages with large change aren't as great like the same thing with javascript like javascript in the last few years it is very like it is it is disgusting looking at javascript that's 10 years old like it's gross it's insane you know what i mean like you look at it you're like what the hell's happening in here it's crazy and then you look at javascript even just a few years ago and it looks like wow they should have used this or they should have used that and it's because there's just so much change so quick also just looking at javascript can also be kind of gross too all right anyways with the philosophy wish wash out of the way in a tone set let me go over some more specific problems when considering rust as a c replacement c is the most portable programming language rust actually has a pretty admirable selection of supported targets for a new language thanks mostly to llvm but it pales in comparison to c which runs almost everything a new cpu architecture and operating system can barely be considered to exist until it has a c compiler and once it does it unlocks access to a vast repository of software written in c many other programming languages such as ruby and python are implemented in c and you get those for free too see as a spec no spec means means there's nothing keeping rusty honest any behavior it exhibits could change tomorrow some weird thing it does could be a feature or a bug there's no way to know until your code breaks that can't slow down to pin let's see they can't slow down to pin down exactly what defines russ is also indicative of an immature language i mean i could i mean see see feels complete maybe that's why there's a spec i mean rust is still in the process i mean they don't even have like impul everywhere you know what i mean yeah by the way this article has no affiliation with the rust foundation c has many implementations she has many competing compilers they all work together stressing out the spec finishing or fishing out the loosely defined corners and pinning down exactly what c is code that compiles in one and not another is indicative of a bug in one of them true statement a statement in which you cannot argue which gives a nice extra layer of testing to each by having many implementations we foresee to be well defined and this is good for the language and it's long-term stability rust c could stand to have some competition as well maybe it would get faster ah maybe see as consistent and stable abi the system v the system of v abi is supported on a wide variety of systems that have been mostly agreed upon by now rust on the other hand has no stable internal abi you have to compile and link everything all in one go on the same version of rust compiler they're the only code which can interact with the rest of the ecosystem is un idiomatic rust written at some kind of checkpoint between rust and the outside world the outside world exists it speaks system five or system v what is it do you say system v or system five and us a systems programmers spend a lot of time talking to it system five okay i actually think a v we got a v in there as well i actually i i agree i agree with this point i think this is a good point especially about this part because i know that is a bane of a lot of people in writing rust is trying to is the interaction points with the outside world oh system u i like that cargo is mandatory on a similar line of thought rust compiler flags are not stable attempts to integrate it with other build systems have been met with hostility from the rust and cargo teams the outside world exists and us system programmers spend a lot of our time integrating things rust refuses to play along okay maybe a little salt there concur concurrency is generally a bad thing serial programmers have x problems and parallel programmers have x to the y problems where y is the amount of parallelism you introduced introduced parallelism and c is a pain in the ass for sure and this is one reason i find go much more suitable to those cases however nearly all programs needn't needn't needn't be parallel strange contraction a program which uses pull effectively is going to be simpler reasonably performant and have orders of magnitude fewer bugs fearless concurrency allows you to fearlessly employ bad software design nine times out of ten it's pretty good i do agree with this with this whole fearless concurrency thing i've written some pretty poor performing code that i just could write faster and rust all right and go granted skill issue there granted that's a skill issue but nonetheless it's just easier to write it faster because you just don't have to think as hard right you're just like and go oh that's fast first try cool dog but i do agree that when rust when you write it in rust i feel like i have more confidence in it but it takes a bit of time you know what i mean it takes a bit of time safety yes rust is more safe i don't really care okay i care about that one in light of all those problems i'll take my seg faults and buffer overflows i especially refuse to rewrite it in rust because no matter what rewriting an entire program from scratch is always going to introduce more bugs than maintaining the c program ever would i don't care about what language you rewrite it in okay so this is an interesting this this one is kind of interesting i think i disagree at this point i do think that when safety is a concern using a language which has enforced safety like built-in language features i think is a better choice can we agree to that base memory safety disregarder yeah i think that this makes more sense right this makes more sense than that in that world and safety safety is just easier to get right in in rust just hands down so if safety is a requirement i think it makes more sense that's why i'm not necessarily opposed to russ being in more of the operating system level because it's just going to be less likely to introduce dumb bugs there'll still be bugs right can you code cpp safe sort of i mean there's always there's always what's it called there's always like unique pointers and shared pointers right safety is always requirement yeah maybe why do you often highlight from the first i don't know i like going like this it just feels good did you see the f-35 pilot needing to eject because the computer issues like a wooden maybe it would happen to rust i can't say it would or would not happen in rust that's the hard part about this mix nuts which is you can't say it would or would not happen in rust because rust enforces things and it actually enforces less things like integer are rolling over right classic one it will hard error in debug mode and not hard error in release mode so that's like a real thing right that's like a real thing that can cause a whole set of issues in which you know what do you do that greg hates rust be back later work yeah you know i'm not saying it's it's perfect i'm just saying it's it's just different the language does not matter the developer does no that's not true either that's not true languages have various levels of of safety built into them right that's because if the language doesn't matter let's all just use c your answer would be like well actually yeah actually is correct well actually it is actually the correct answer to that all right anyways c is far from a perfect language it has many flaws however its replacement will be simpler not more complex consider go which has a lot a lot of success in supplanting c for many problems it does this by specializing on certain classes of programs and addressing them with the simplest solution possible it hasn't completely replaced c but it it has made a substantial dent in the problem space more than i can really say for rust which made similar strides for c plus but definitely not c i think zig is pretty interesting in this case i think zig has a lot a long way to go on tooling and i think once zig has really good tools i think zig will become a great contender until then i think zig is really hard to get behind just because you know the lsp is just not great right and i know there's a lot of difficulties with it but it really is important to have good tools in this day and age because people just you know it's just like memorizing phone numbers at one point i was super good at memorizing phone numbers and then the cell phone came around and now i don't have to memorize cell phone numbers and now i'm really bad at memorizing cell phone numbers and i don't really want to go back to the time where i memorize cell phone numbers lsps are kind of similar to that like i could totally program without an lsp but i would rather program with one hands down every single day of the way a week right the kitchen sink approach doesn't work russ will eventually fail to the jack of all trades master of none problem that c plus has why is language designer start small and stay small why system programmers extend the philosophy to design designing entire systems and rust is probably not going to be invited dang little does he little little does the future know on this one russ doesn't get it does get a bit more invited later on doesn't know in lightest article let's see i understand that many people particularly those already enamored with russ won't agree with much of this article but now you know why we are still writing c and hopefully you'll stop bloody bothering us about it status update i guess ro i guess rustic is okay it is it i mean it's a good article in the sense that it shows you how different people think right who is bothering that man rust people by 2019 it was pretty obvious that it was adopted by the industry definitely not definitely most certainly not it was not obvious even now it's not fully obvious what is going to be the outcome of rust i do not know i don't know what is the outcome of rust i think it has a great potential i think there's some big hurdles that has to come over and some of those hurdles are definitely the foundation itself the people in leadership i would love to see different engineers in place i sounds like they're really great engineers that are just terrible at people problems that's what it seems like to me i'm curious if rust is fully sustainable always like could you could you do that i don't know i think so i think you could but i'm curious what larger projects look like right what do larger fast changing projects look like is that the right commitment maybe maybe not yeah amazon amazon and microsoft most certainly are committed to are committed to russ but that doesn't mean it's widely accepted right industry accepted means that you have industries using it right just i mean just because somebody uses something like objective c had an entire ecosystem in which everybody had to write in at some point to make like ios stuff that's an industry standard now was it a good one no it was shitty but nonetheless it still was one and so that's kind of what you have to kind of think about just because there is niche projects whether or not they're large it's still a niche project it's still just amazon doing just amazon things right it is it is i've written that microsoft is committed to safety of rust not rust itself yes this is also true objective c was kind of cool it was also kind of horrible mojo is real i actually like objective c what large go projects are hell yeah i'd like to see this because i know a lot of people that say large we i mean i'm working in a large go project and netflix and people it seems pretty i mean it seems pretty easy seems pretty straightforward right i'm interested in carbon carbon's interesting objective cds nuts damn netflix by the way all right hey the name is the not the sea agent