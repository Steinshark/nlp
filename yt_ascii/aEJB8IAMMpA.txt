so any coding project you have done i'm almost certain that at some point you have come across random numbers however if you use the any of the libraries and functionality you find in a program language you most likely have generated the so-called pseudo random numbers mike pound for this channel made a video about lfsr which is a way to generate sudo random numbers the reason why these approaches are called pseudo random numbers is because they are not truly random numbers it's basically computer algorithm that is capable of returning a sequence of numbers each time that you basically call this function with and the numbers that are generated i have some statistical guarantee it's not very different from rolling a die when you roll a die die each ph has an equal chance of coming up assuming of course we using a fair die now most algorithms generating random numbers share the same following principle they start from a number that basically called seed which sets an initial state of the random generator then it performs some operations manipulating the seed and then it returns the such generator random number when that function is called again basically takes the previous manipulated seed and basically repeat the same operations therefore any of this approach is deterministic and that's why it's better to refer to them as pseudo random number generator in fact if you generate more random numbers within your program execution starting from the same initial seed you always get the same sequence of random numbers if you don't believe in me try yourself and see what happens even though many people think that it might be silly that a random number generator can be used to generate the same sequence of numbers every time sometimes it's actually very useful for instance think about you're debugging your program that generates random numbers and you don't want to debug your code waiting for a certain you know exception or bug that depends on a specific occurrence over random number by using a fix seed you will always get the same sequence of random numbers making the execution of the program deterministic and then the bug will occur you probably know all of this thing and for this reason it's now time to go to the juicy staff can a computer program generate truly random numbers well we just seen that that cannot be possible however can a computer and not a computer program anymore generate a random number the answer is yes to simplify it very quickly software cannot hardware can there are extender devices that does this for us however an x86 processor that is at most 10ish years old can do that for you without the use of any extra piece of hardware this means that any non relatively new new intel or md processor is capable of generating two random numbers this is possible because the x86 machine code has two instructions that allow us to do that one is called aand and the other one is called rdc both of them implements functionality to generate random numbers within your own processor in particular erd rand still uses a pseudo random generator so we haven't changed much so far however aird seed is our true random number generator how can we use and leverage everyd rand in a program well i will show you this in c so now we go in a bit in a computer and i show you that however i'm aware that all the programming languages have rappers to access this functionality so for this video we will focus out to do this and see and remember that is going to work only on an x86 processor so don't try on rasberry pi because it has an arm processor so here i have prepared a piece of code in c as i said i have a main function that calls a function that i made called get true random number which get our result as a pointer so here we got a pointer and then the function also returns the number of failure we will go in the bit what it means number of failures this function over here the one i called the get to random number it calls this function underscore rdc 32 underscore step i know that it's a very weird name for a function this comes from this header it's basically includes all the intrinsic function of the x86 processors so that's why it going to work in other processors and and just to be brief intrinsic functions are functions that to us like in in a program appear to be like a function like rdc the 32 but internally inside the compiler are treated differently and typically different assembly code is used and in fact we will go into this in a bit what happens here is that i call the function i get the result and the function returns a number which is one if it was successful zero if not successful what it means to be successful so it's a piece of art it should work anytime the fact is that this random number generator doesn't matter if the one with pseudo random generator or this one the true random number generator are done inside your processor but there are still separate secrety and it has its own clock in particular i read the instructions of intel and they say that this piece of hardware within your computer this piece of hardware within your processor has an clock of 800 mhz which is not related to the clock of your computer is something completely different so what happens is like your processor makes a request and then it has to wait until the testest is satisfied but maybe your processor doesn't want to wait and it can move on so in that case it's a failure so when you compile i'm using here gcc which is one of the most i suppose famous c compiler and i'm using a flag called dash mrdc which allows to include all the interesting function we need for this code in particular the one to generate the true random numbers now because the code is not optimized to keep things simple i add a-03 which will optimize the code and the assembly will be very short now and in fact aign four we will see this rdc which is the assembly function that is calling to generate two random numbers and the result is put in one of the register of the cpu then there are other operations ready to what we do which are not the focus of this video we just need to focus that our compiler is doing what we want generating true random numbers so let's have a look how it works this website is called godbold which is very nice website for seeing in action how a lot of compilers and interpreter work so here i'm using c which what we need so i can add new executor from this and then we will see that we are generating a thousand random numbers here where very lucky there's no failures all the times is generating a random numbers so what happens is like when it fails just to retry again until you get a random number intel suggests that you should do this up to 10 times because the occurrence to have 10 failures in a row it's very rare but believe me it can it can still happen is that when the process is busy or something it can be either that or because your processor has really issues so it most of the times it just because it's busy but if you see that it's failing a lot of times it might be an indicator that there's some issues with your processor it doesn't mean that it's doomed but still it's in fact here i couldn't find an example of not like failures it's always zero let's see what happens if i run again nothing it's it's working is this a new computer well i'm using the computer of owner of this gold bolt so so i'm not compiling on my computer who knows like what could happen inside so the thing is the following how useful is this like it's very useful the answer is no and so people might question why i'm dying all this fast so generating true random nums and then it's not useful well depends useful for one it's not useful to generate random numbers within your code because first all is low so people have compared with sudo random generators and statistically is lower but let's assume that we have all the times so you don't don't care about how slow it is why it's not encouraged to use because a true random number generator has no statistical guarantee of the nums that it generates that's why it's called rdc oh do you mean as it could come up with something like a i don't know an even number or number one they can come it means that the sudo generators most of them are guaranteed that every number have the have the same probably to be drawn i see so we say it's a uniform distribution here there's no guarantee so you might have the same number time after time you might have a preference to a set of numbers like towards so so we say that the distribution is skewed it might be skewed because we don't know what source of entropy the processor is using can you trap that or no is that no but the reason why it's called air seed is the secret why it's useful because you can use it to generate a random number to be used as a sid i have the same function get to random number but this time i use the true random number using rd seed to initialize the sud random generators within c so i use the result to feed s rand that says the se and then afterward i have a for loop that generates a thousand of random numbers let's execute this add new executor from this and here we go these are sudo random numbers generated starting from a true random number generator we can basically try again to execute this it's going to take a while and as you can see all the numbers are different so they're pseudo random randomly seated it's a pseudo random number generator initialized with a true random number you can see that it's has changed and it's going to change again it's going to change again and let's see how it goes so the next state we're going to shift one to the right so one 1 0 and then thing is am i going to pass it integers strings i can do all of the above let's just check that i'm not lying because i do sometimes