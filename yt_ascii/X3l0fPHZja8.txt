this one is gonna be bigger than any of the numbers we've done before. so it's bigger than graham's number, it's bigger than tree(3), it's bigger than tree(graham's number), it's bigger than g(tree(3)), it's bigger than tree(tree(3)). it really is, the sort of daddy of big numbers. - (brady: you say that all the time!)
- i know, but it just keeps getting bigger every time! i'm not sure we can really get much bigger than this, but we can talk about that later. this number is actually called rayo's number. it's normally written like this. you'll notice a googol lurking in there. rayo's number really first came about as a result of something called the big number duel which was this, sort of, contest that took place at mit in 2007. [audience cheering] so it started with this philosophy professor, a guy called agustin rayo, and another philosophy professor from princeton, adam elga. and they decided to put on this event, this big number duel, as part of this independent activity period. and the basic idea was really quite simple, who could think of the biggest finite number? so this event, it was absolutely packed out. you know, there were people trying to peer through the edge of the door and all sorts, absolutely packed out. there were some very basic rules. so, two men, one blackboard. as a sort of starting point. and the idea was that one of them would go up to the board, write down a number, [writing a number] and then the other one would have to come up and write a bigger number. you had to do something novel or different when you went up to the board, okay? you couldn't just add one to the previous number or add a zero to the end of it. you had to do something new and different and a little bit novel. and you couldn't use any ideas that had gone before either, so you had to really do something new. you can only write down finite numbers, so you can't be writing down infinite ordinals or anything like that. just finite numbers were allowed. and the other rule that was important is you couldn't use any sort of semantic vocab. so what i mean by that is you couldn't say something like "the biggest number rayo could ever write down, plus one." okay? you couldn't do something like that because obviously, you know, you're gonna get caught into logical loops, it's gonna be a nightmare. it's considered ungentlemanly. okay? so you couldn't do that. the room was packed and rayo went first. now what rayo did was he wrote down a series of about 30 or 40 ones. so it seems like a large number. obviously it was just the starting point, of course he knows you could write something bigger than that, but he realized his mistake very quickly. elga came up to the board and just did this. [erasing part of the number] you can see what he's done there, he's turned this series of ones into 11!!!!!!!!!!! and so on. so 11 with loads of factorial signs which is clearly a way bigger number! okay, just to get a flavour for how much bigger this number is: 11 factorial is like 11 x 10 x 9 x 8 and so on. it's about 39 million. okay, we're going to do 11 factorial factorial. we're essentially doing 39 million factorial which is going to be a number like this. if we did another factorial, well, now we'd be talking about a number - so we did three factorials now - we now would be talking about number that we couldn't even write, you know, in this sort of- as 10 to some power in any kind of practical way on this piece of paper in the time we have available. it's just not doable. but here we've got tons of these factorials. so this is a really really big number. so elga had upped the ante massively. so it satisfied all the rules, we're doing something different, so this was a good move. so it was rayo's turn to return to the board. at this point he remembered something. he remembered the busy beavers and he wrote down busy beaver of a googol. (brady: has he added that to what - ?) so this was his next entry. this was his next entry. so the idea was that they were going to the board. somebody would put one number, somebody then comes up with another number, somebody then comes up with another number, and you've gotta up the ante every time and significantly so. (brady: but you don't have to have manipulated the number before?) no, you don't have to manipulate it. the idea is just to up the ante on every round. so he comes up with the busy beavers. so what are the busy beavers? you've actually done a computerphile video about busy beaver numbers. and basically what the busy beavers tell you, they tell you something about the sort of... productivity of turing machines with a certain number of states. so if i have the nth busy beaver number, this is telling me something about the productivity of turing machines when they have n states. so we'll explain a little bit more about what that means in a sec. this would be the case of where you have a googol states. so i'm not a computer scientist, so i'm just gonna explain it with an analogy. so i want you to imagine that you're in a hotel. okay? and this hotel has a floor in it and it's essentially an infinitely long floor. and we're gonna start off and all the lights are gonna be off on this floor. but we're gonna send a robot round, and this robot is programmed by a turing machine. and the robot's gonna go round, and it's gonna switch lights on and off. that's essentially the idea. now, there's two states for our robot. so state number one is, say, that he's in a scared state. so what happens if he's in a scared state? he goes into a room. if it's a dark room, if the light is off, he'll turn the light on and then he goes to the room on the left. if he's in the scared state and he goes into a room where the light is already on, he transfers to the normal state. - (brady: no longer scared?)
- so he's no longer scared. so what happens when he's in a normal state? okay, well again, if he's in a normal state and he finds himself in a dark room, okay? he will transfer to the scared state. and if he's in a normal state and he finds himself in a room with the lights on, he will turn the light off and move to the right.
- (brady: ah, to save power) yeah, just, this is just how the program's working, okay? now, if this is all we had, then this is gonna get caught in a loop. okay? so what's important when we're playing the busy beaver game is that this process has to stop at some point, okay? so in principle, what we should do is we should add some more states to this and one of them involves stopping somehow. that doesn't guarantee that we'll actually stop, but we need to have a scenario where things stop. well, the busy beaver numbers say is this, okay? right, imagine this robot has n possible states. then this number tells you "what's the maximum number of lights that are on when he stops?" assuming the process stops. (brady: but the states could be many and varied, they could involve all sorts of...) yeah, all sorts of things and you're just asking to have all these possible turing machines with a given number of states. what's the maximum number of lights you could have left on at the end of that process? and those are the busy beaver numbers. so these numbers, they start off fairly gradual, but they get big really really quickly. and actually, bb(10^100) - so you've got a googol states here - is enormous! it's absolutely enormous. (brady: so the googol there refers to things like - ) (scared, normal...umm)
-yes - (energy-saving?)
- all these possible states the robot might find itself on, we're saying there's a googol different ones. (brady: happy, sad. and each one has a different action associated with it.) - yes, exactly. depending on whether it finds itself in a light room or a dark room. these busy beaver numbers are enormous. the fact- they're not even computable in some sense. if you give me the number of states, there's no turing machine that can spit back the busy beaver number associated with that. - it's not even computable. this is how big it is.
- (brady: is bb(10^100) bigger than tree(10^100)?) - (hesitating) i think the answer's yes? i think the answer's yes. ehm... yes. (laughing) (brady: (laughing) maybe?) (laughing) yes. (brady: but it's that kind of ballpark, you know?) - oh, yeah, yeah, certainly, certainly. these are monsters. yeah, i think that's - i think the answer's yes.
- (brady: okay.) so how much bigger is this than what's gone before? well, you certainly don't need a turing machine with a googol states to calculate 11 factorial fa- you don't need anything like a googol states, okay? this is- you just don't need anything like that, so this, this number is way bigger than anything you find here. then elga comes back to the board and the game takes on a new phase, essentially. (brady: and elga can't just draw a line through these to make factorials because he's used that trick?) yes, you've got to do something new. okay? you've got to do something new and novel, okay. so what did he do next? okay, so now they start thinking about super turing machines. so the idea of a super turing machine: it knows whether a turing machine is gonna stop or not. so what do i mean by that? so you start off with all the lights off. it's got a halting oracle. it knows instantly if this process is gonna end with this machine. and that halting oracle turns this into a *super* turing machine. it makes it much more powerful and much more productive. you can actually compute, using one of these super turing machines, you *can* compute the busy beaver numbers. it's computable with one of these machines. okay? so it's much more powerful. that means you can play the same kind of game again and you get these super busy beaver numbers which are gonna be way bigger again. okay? cause you've now got a much more productive machine, so you're capable of generating much larger numbers, many many many more lights left on, okay? so then they kept playing this, so then he came up with a super duper turing machine, okay? which again- then it can spot whether the super turing machine's gonna halt and generate even larger numbers. but we feel like we're getting away from the spirit now, a little bit 'cause we're doing kind of the same thing again, right? so that's not good. rayo then came up with the winning answer. this new number was the smallest number... that was bigger... than this particular number. let me describe this particular number. - (brady: sounds like you're being semantic!)
- we'll come back to that. okay? you're right, (laughs) but we'll come back to that. okay, so consider any finite number, that can be expressed, using: the language of first-order set theory with a googol symbols or less. so we're going to write something in this language of first-order set theory. we're only gonna use no more than a googol symbols. what's the largest number we can write that way? and then think of the one that's just bigger than that. that's rayo's number. so let me explain a few features to that. what's the language of first-order set theory, firstly? what does that mean? well, this is just kind of the language of mathematics. so you have symbols, you have things like upside-down a means "for all." okay, these are quantifiers. "there exists," which is a backward e. and the other things you can have, you can have parentheses, you can have dots, which usually mean "such that," you can have variables (x, y, z), you can have equal signs, you have these various ingredients that build up a language. and it's first-order, that means you can only make references to singular things, singular quantifiers, you can't talk about plurals. this is basically the language of set theory, the simplest language of set theory. and, if you want to write down, for example, express a small number in this language, it's not very efficient actually. so for example, if you wanted to write down 0; you would identify 0 with the empty set, the set that literally doesn't have anything in it, and you'd need roughly about 10 symbols to do that, so it's not very efficient for small numbers. again, maybe going up to about 30, 40 symbols to write down 1 and so on. okay? so it's not very efficient for the small numbers, but for the big numbers it gets very efficient. you can start writing down functions and then you can build the numbers up that way. so it's immediately clear that you're gonna get something that's way bigger than tree(3), for example. so one thing i could do is i could define the tree function using these symbols, a modest number of symbols, okay? and then i could then build tree(3) quite easily. i don't need anything *like* a googol symbols to do that. right? and rayo's saying you can use a googol symbols, get a number that, you know, gets you all the way up to a googol symbols. so you can do tree of tree of itself a googol times, you could, you could get something bigger than that anyway, it's clearly not the biggest, that's just an example of something that you could do. but, clearly you can get things that are a lot - really really really big, way bigger than trees. so you asked about "doesn't it sound a little bit semantic?" clearly did, right? the way i expressed it. that's because i didn't express it in the way that rayo expressed it. it's just the easiest way to think of it, rayo was able to express this in pure mathematical language. okay? now, he used what's called the language of second-order logic, that does allow you to refer to plurals and things like that, but it had no semantics in it. the way he did it, it's quite a dry and mathematical statement, but he was able to say what i said without the semantics. and that was rayo's number. and it won, and elga couldn't beat it. and it's up for debate whether anybody's ever since beaten it. there are some numbers that people have suggested beat it. it's not clear whether they're consistent, it's not clear whether they satisfy the rule of doing anything, you know, you need to do something new and novel and different.
- (brady: because obviously you could just increase the number he puts in there.) yeah, of course you could, but that's breaking the rules, right? that's not allowed. the last thing i gotta say about this is that- so when i do these, ehm... these numbers, these big numbers, right? one of the things we often do is we tend to sort of throw physics at it and try to think of something weird that's gone on with it and... blatant plug, as you know, i'm writing a book about this (laughing), brady! and normally, the number wins, right? normally, the number beats the physics in some respect. and i'm gonna do it this time again with rayo's number, which is of course the biggest of them all, but i think we need to change. let's, let the physics win this time. let's see if we can write down rayo's number, you know, well, the number just shy of it, using our first-order set theory. okay? we're going to use our googol symbols. how long would that take? so we're gonna write down as symbol as fast as we can. what's the fastest we can write down a single symbol? 'bout a planck time. if you try to go any faster than that, you're gonna destroy the fabric of space-time. it's gonna be - we really don't know what happens at timescales shorter than that. space-time's just gonna go all quantum, we have no idea what's going on. (brady: so your hand's moving so fast on the brown paper that you're writing one symbol per planck time?) yeah, if i did it any faster than that, i'd break space-time. okay? as we understand it. okay, so it's definitely the fastest i can go. so one planck time is about 10^(-44) seconds. so if i want to write down all googol symbols, to get this number that's just shy of rayo, (brady: you don't know what the symbols are. they'll be some...mystery.)
- nah, i don't know. yeah, nah. there's something. there's a way to do it. let's assume we know what it is, okay? we're not gonna waste time trying to work it out, we know it. it's just there. it's been given to us in some divine way. how long is it gonna take us to write down all googol symbols? well, we're gonna take 10^56 seconds. now, how long is that? well, that's about 10^48, 10^49 years. have we got enough time to write that down? well, that kind of depends on the on the nature of dark energy, actually at the moment. what's happening with dark energy, you know, the moment the universe is having this accelerated expansion and what happens next - sort of will tell us whether we've got time to write down this number. if dark energy goes away, there's a possibility the universe could crunch and we'll never get to these times. there's a possibility the dark energy could get even more accelerated, with acceleration speeding up, and this would be quite exotic, but then the universe would rip apart before we got to this number. but neither of these possibilities i think is the most likely, i think the most likely is that dark energy is constant and we're gonna just sort of...the universe is gonna die a slow and relatively painless death. so in 10^48, 10^49 years, at that point, what will happen then is we will find ourselves in the era of black hole dominance. so what that is, that's the time when basically all the matter of the universe, has either just disappeared to sort of unimaginably far distances or it's collapsed inside supermassive black holes. so the universe is being patrolled by supermassive black holes that are swallowing everything and they dominate. so we're still writing down our symbols, we write down the last symbol, we'll either be doing it in, sort of, empty space where nobody is anywhere near us, for unimaginably large distances or we'll be doing it inside a supermassive black hole. but we can write it down! [outro]