hello and welcome everyone. i'm james murphy. this gui is created with the dear imgui gui library. it's a minimalistic, easy to use but highly functional library. it can do menus, it can add and remove new windows on the fly, thanks to my patrons and donors by the way, it can nest regions within each other, you can have buttons and tool tips, menus of these sub windows, pop-ups, modal pop-ups, drag and drop, tabs, tables and so much more. here's a demo image of some of the more creative things you can do. but imgui is a c++ library and this is a python video. if your project is already in c++, then great. it's really easy to use. but there are a lot of great features and libraries of python that are really just wrappers around c code or c++ code. take numpy or pandas or most of the built-in functions in python for example. well, we're in luck. enter pyimgui. pyimgui is an easy to install python wrapper around imgui. there's some basic boilerplate code you can copy paste to get things started. you need to initialize the library, ask the operating system for a window, in this case, i'm using the glfw library. tell imgui that you want to render to that window, pick your favorite font or just use the default and then like most graphical applications, the rest of the time is spent in some kind of render loop. each iteration of the render loop is pretty simple. we process any mouse or keyboard inputs and start a new frame. clear the screen. then here's where you're going to put most of your imgui commands that define the gui. after all the commands then you render. these frame_commands are going to hold all the actual interesting gui logic. that's all the boilerplate you need. if we didn't put anything else, we basically just get this blank window. now, look how easy it is to add a new window to your gui. you just say begin and give it a name. put whatever it is you want inside the window and then call end. that's all it takes and now we have a window. windows are draggable, resizable and collapsible by default. of course, there are extra flags and things that you can do to change how it behaves. let's go ahead and add a main menu bar that has, like, a file close. and this is all it takes. i say begin_main_menu_bar which is going to return to me a boolean of whether or not the menu is displayed. if the menu is displayed, then i make a file menu. in the file menu, i make a quit item. every frame when this runs, this returns to me whether or not it was clicked or selected. and then if you click quit, i just exit. we run it and now we have our file menu. this ctrl+q is just shortcut text. it doesn't actually do anything though. if i want to actually make the ctrl+q shortcut work globally, then i can just do this. this get_io object exposes keyboard and mouse events and state to you. so, i just check if ctrl and the q key are down and then exit. as you can hopefully see by now, the appeal of imgui is how little code you actually have to write in order to get something extremely functional. and one of its biggest selling points is, its declarative style. in a lot of gui frameworks, you have to start with some kind of initialization method where you specify all of the possible different widgets and menus and things that you're going to have. then you would hook up some kind of event handlers that will enable and disable components depending on what you do. but with imgui, you don't have to do any of that. if i want a button that when you click it, it opens a pop-up, i just say: if button, open_popup. then i check if the popup is open and put whatever i want inside. and there you have it. click, popup. i never needed to create a button object or set up any event handlers. i just read the imgui commands top to bottom and do anything that i need to do as it happens. you just declare what you want to see and let imgui take care of the widget bookkeeping. as it stands, imgui and pyimgui are already great libraries. i'd recommend them to anyone who wants a quick and easy way to get a gui up and running. but at its heart, imgui is a c++ library and some of the c++isms are leaking through here. every time i begin a window, i need to make sure to end it. begin a popup, then you need to remember to end it. but only if the if returned true. and there are a whole bunch of these components that i declare with some begin something and then i need to remember to end them. i have a resource that i open and then need to remember to manually close. does that sound like a familiar pattern to you? it's kind of like writing to a file. i need to open the file, write to it and then call close. except i guess, if you forget to close a file, that might not be that much of an issue. you might not even notice it depending on the program. but let's say, i forget to end this popup. well, everything is fine until the popup is supposed to appear. then i get a crash. so, unlike with closing files, if you want the render loop to continue, you absolutely must close every begin with its corresponding end. okay. so, just get better at programming. don't forget your ends. well, that is a generally convincing argument but that's still not good enough. besides the fact that it's annoying to have to remember sometimes it's not possible due to exceptions. what if i was supposed to read this popup text from a file but the file got deleted. i can even try to catch the exception. but at that point, it's too late. even with the except exception, when i click the button, i still get a crash. and notice, it did catch that exception. the exception that crashed the program was a different one. the exception that crashed the program was from when the render method at the end of the render loop goes in and tries to consolidate everything. and it notices that there was one extra begin that had no end. and it doesn't know how to fix that. so, it has to just give up and crash. this would be the same story as if you were using a file. you open it, you write to it and then some exception occurs. well, then the file doesn't get closed. but python has a solution for this. it's context managers, the with statement. i say with open as file. then i can do my using. and then even if an exception is raised, the file will still be closed. well, that's exactly what i want for the pyimgui library. i want to say with window, forget about the end. i want that to happen automatically and then just indent everything. i want to say with begin popup as popup, if the popup's opened do whatever, and even if there's an exception, i want to make sure that in all cases the proper end function is called. okay. well, imgui is an open source library. let's do it. even though it's an open source project, i'm not trying to steamroll over someone's garden here. so first, i made an issue on their github. i explain my reasoning and use case. i explain what i'd like to be able to write. and i go over a potential implementation of how this could be achieved. and look at that, we get the go ahead from the project maintainer. step two: create my own fork of the library and clone it. i create a new branch for the feature that i'm adding. make sure that you're branching off of the development branch, not the master branch. with imgui, these were hundreds of commits apart. so, make sure you're using the right one. this is imgui's main file. it is incredibly long, thousands and thousands and thousands of lines. it looks like we have eleven thousand something lines here. and it's not just eleven thousand lines of python, it's eleven thousand lines of cython. cython is an implementation of python that compiles into c or c++ code. it also allows you to import and call raw c and c++ functions from within python. this is what allows us to use imgui at all. remember, it's a c++ library. cython allows you to write normal python code. but it also allows you to write this weird mixture of c like python code. here, we define a class drawlist. but we use this cdef keyword. this is going to tell cython to create a c extension class instead of a normal python class. this is not meant to be a cython tutorial. cython is a huge topic. i just want to wet your appetite a little bit and show you some of the things that can be done. anything that uses the cdef keyword is going to use c rather than python under the hood. that allows you to manipulate things like pointers that you couldn't manipulate in raw python. you can also mark functions with cdef. functions marked this way can only be called from within other cython code. that means this method would not be accessible to regular python. this can actually be a really good thing because cdef functions and variables and so on can call each other and use each other without ever returning control back to the python interpreter. if i have two cdef integers, i can add them and that addition will happen in c. cython also makes it easy to convert back and forth between python objects and c counterparts. notice, here's a function that says it takes a float width. now, this is not using the normal variable annotation syntax. this is special cython syntax. this is a normal python function. and cython will actually try to convert whatever you pass as this argument into a float. so, if you pass in a python float, it will unwrap that value and give you the c floating point value out of it. and if you try to return a c float back to python land, it will get wrapped up in a python object. let's get back on task. here's the begin function that starts a window. and here's the end function. besides, like a 100 lines of documentation, these are actually really really short functions. i basically just call the raw c version of the function and then return its value. there's a little bit of finessing since the raw c version actually uses out parameters in order to fill this value of whether or not it was opened. the c library returns to whether or not the window was expanded and then it uses an out parameter to tell you whether or not the window was opened. and end is even simpler. it just calls the raw c imgui end function here's the idea. right now, this is just returning a tuple of two booleans. my idea is to instead return a tuple like object that has the same information but also has enter and exit methods for with support. so, let's construct this class. first off, we want it to be fast. we're going to use a cdef class. i preface the class name with an underscore to indicate that you should not be trying to create one of these from python. this is a private implementation detail of imgui. i have this explicitly inherit from object. this is just because imgui is trying to support python 2.7. my original proposal used things like typing named tuples. but because they want to support all the way back to python 2.7, i'm going to do it the old school way i make expanded and opened. these are going to be the two tuple values begin was already returning. i mark them as bools. so, they'll automatically be converted to python booleans. and i mark them as readonly. what this does is, it allows python code to access these attributes. but it only allows them to read them not write to them. i could use a regular init but i'm going to use this cinit. this is just for a trick i know to make it fast. you could just as well just use regular init. then the heart and soul of the proposal enter and exit methods. this is what allows you to use the with statement. it's pretty typical for enter to just return self. then in the exit method, we always just call the cimgui's end function. regardless of whether or not there was an exception or whatever. if there was an exception, it will call this function and then just continue propagating the exception. next, i'm going to add a get item and iter. personally, i don't think this class should have these methods. but it's too late. pyimgui is an existing library that already has lots of users. prior to this point, the return value of begin was a tuple. so, it needs to maintain that behavior in order to not break old code. so, we definitely need to be able to index into the tuple and the iter method is for allowing variable unpacking. then since i'm such an upstanding citizen, i write a repr for the class. and that's basically all the functionality that we need. so, we declared our attributes in a little funny way. we used cinit instead of init. but then everything else is kind of just a regular class. so, now let's use our begin end as the return value instead of just a tuple. i just take whatever the existing return value was and wrap it in my beginend class. but remember that speed hack i mentioned. well, instead of instantiating the class the normal way, we're going to use the dunder new method. for sneaky reasons, this is going to be faster. also, we didn't define a regular init. so, we can't call it. and that's all we have to do for the begin function. now i just grep for all the def begins that there are in the file and this is the work that i have cut out for me. what i showed you was what i had to do for begin. now i just need to repeat it for the other 17 others. and there are so many of these. i know there's no way i can do it without making a typo so i actually made test cases for all of them. my process was to write test cases for one of the pairs check that the tests fail then i would implement the new functionality, recompile and run the tests to see that they pass or didn't. finally, i would add an updated working version of my demo using the with statement to see that everything is working. then so on and so forth for the next set of tests and the next set of tests and the next set of tests and so on. so, this is actually, i'm recording this at the very end and these are all the test cases. just so you can see what it would look like, first i set cythonize with coverage equal to one with this on, it'll compile in debug mode and the compilations will go way faster. then i pip install the current directory which will trigger the cython build. it still took 30 seconds or so to compile but that's just how it goes. then i just run py test on my test file. and all 61 tests pass. and let's head back to our example from before. remember i had this window where i click a button and i get a popup and it crashes. well, now we're using the with statement. so, even though we're raising the exception which we do catch here, we should find that the end popup will be correctly called and we won't get a crash. so, we click the button and we see caught exception no crash. and then once the popup goes away, then that stuff stops printing out. all right, great. just one more thing before submitting the pull requests. we just need to update the doc- ...