one of our loyal viewers sent in a question the other day. he was asking why, when he creates an empty text document on his computer, does it have a file size of zero bytes. well, there's no text in it, so that sort of makes sense, but he realized - well, actually, there's some information associated with it, this thing - it's got a file name, there's how big a size it is, there's a time it was created, and so on. where's all that information stored? why does it have zero bytes, and yet we know there's some information stored alongside it? so we can demonstrate what this actually means if we use the computer. so let's just create a simple text document. this document's got nothing in it, so let's save this out to disk... ...and we'll call it "empty.txt". so we've created an empty text file, and if we look on our system, we can see that we have created a file called "empty.txt" with zero bytes in it. it's an empty file, there's nothing in there, and if we have a look at all the data that's in there... we try and cat the file - there's nothing in there. that's an empty document. just to prove that a real text document would have some information in it, let's create one that says "hello, computerphile!" and save that out, we'll call this as "notempty.txt". and if we look at that one now, we see we've got two files - "empty", which has got 0 bytes associated with it, and "notempty", which has 21 bytes associated with it. if we just look at what's inside "notempty", we see that those 21 bytes form the ascii codes for "hello, computerphile!" so we have these two files - one's "empty", which has nothing in it, and one of them has 21 characters in it and the line feed at the end for "hello, computerphile!" but neither of them actually have the filename stored in them, they don't have the date there, they don't have how big the file is. so where is all that stored? what's going on there? well, actually, we need to think about these bits of information as being two things. we have one bit of information, which is the document. in this case, it's either empty or it's got some ascii characters in it. but the other information isn't really part of the document. it's describing that document. so it's information which tells us what we want to call the document, how big it is, when we edited it, and so on. it isn't actually about the document. and the easiest way to think about that is to think about it - if you rename a document, you don't change a document. so if i rename the file "notempty.txt" to be "stillnotempty.txt"... we've changed the filename, but the file is still the same, even though we've given it a longer filename. so if we hexdump this one, the bytes match between the two different ones. the thing we have to think about first is that we have our document, and if we draw that out, so we have computer icon for the document, and we also have alongside that the information about what we called that. in this case, "empty.txt". so this document is called "empty.txt", and it has a size, which is zero bytes, and it'll have a date we created it. and as we change things about this, as we move it around, this information will change. so we might change the filename, so we call it "stillempty.txt", we get rid of the old filename, but we haven't actually changed the document. that stayed the same. cause just as we think about these things as being separate, we have the name which describes the document, but isn't part of the document, the file system in the computer does exactly the same. so if you remember back to the videos we did on how data is stored on a disk, we divide the disk up into a set of tracks, and we break those tracks up into single sectors. so as well as storing the documents on the tracks and sectors on the system, even if it's an ssd, it's still emulating a lot of the time, this old system the hard disks tend to use. as well as storing the data, we also store a directory, or catalog, that represents where that information is stored. i'm going to use the fat file system as an example here, because it's relatively straightforward to understand. systems like ntfs, ext2, etc. - zfs - will all use different variations, but they have similar concepts that use more efficient ways of representing the catalog. so in a flat file system, the directory is really just a special type of file. so there's a special directory called the "root" directory, which is the one that the system knows about where to find. but inside that you'll find entries that point to other directories, and also point to files. and each of those entries in the original fat system is made up of 32 bytes of data. and these are stored consecutively after each other, so if we had another one, it would immediately follow these 32 bytes. so the first 8 bytes, for example, are used to store the first part of the filename. so if we had a file named - let's call it "empty", which is what we used, we have e-m-p-t-y, so that's five characters, and we store the other three being spaces. the next three bytes store the extension, so t-x-t. we don't store the dot, so we have the name padded up with spaces, then we have that extension there. we then have various other flags and so on, some of which tell it whether it's a directory or a special file, and so on. and then towards the end, we have the size, and there's four bytes which are specified for that, which means you can't have a file bigger than four gigabytes on the fat file system. and there's also two bytes which say where the file starts. so in the start, at the beginning of a disk, we have this information which describes the file. most importantly, it tells us where on the disk to find it, where it starts, and how big it is. now, we need to know how big it is, because we can only allocate a whole number of sectors, or technically we use clusters, which is multiple sectors joined together, to store this file. so we know where the first one is, and that there's another section of the system which tells you which of the ones are formed together to form a linked list of the files that we'll use, we'll go into that in another video in some more detail. so we have the size, so we know exactly where to stop in the last cluster that we're using. so in this case, this will be zero, because the file is empty, and we have the name of it stored here. interestingly, if the file is zero, you can say that the start cluster is also zero, so you don't actually have to take up a whole cluster storing nothing. so in terms of actual disk space, this empty file will still take up no disk space at all, because all the information it needs is part of the directory. now there's one caveat to that. as we've said, each of these files take up 32 bytes, and eventually you'll fill up the cluster that is being used to store that directory. when you do that, the next file will need to start using another cluster, and so that will take up a whole kilobyte of disk, or 512 bytes of disk, or whatever it is, depending on how the file system is set up. so at some point, you will create a file that will use some disk space. so that margin is dependent on how many other files you've got, as to whether your next file takes any space up or not? yes. so it depends on it, exactly. so as we add more files into a directory, more empty files, they won't take up any space, and then suddenly you'll add an empty file and it will take up a whole kilobyte of space on disk. and then you'll keep adding more, and they won't take up any extra space, then you'll add another one and it'll take up a whole kilobyte. so you could, theoretically, fill up your whole hard disk with empty files and have no space on that. if you want to try it, do so, but don't blame me if you suddenly find your computer doesn't work properly. you'll have to find some way of deleting the empty files, but your computer probably wouldn't boot properly. and no one uses fat these days anyway. he created the empty .txt file and it didn't have anything in it. and it took up zero bytes. now we discussed why they actually take up some space, but he also created a rich text file, an rtf document.