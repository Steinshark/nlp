how working at makes your life harder personal little secret i'm always hard that's why i just never have a problem in this video i want to talk about big company problems for the most part if you're a software engineer at a large tech company your life is pretty good you have really tons of co-workers you get paid really well and you're going to be working with interesting technology but there are problems unique to a large tech company that most software engineers are not familiar with i started out my career as a founding engineer at a three-person startup and then worked my way to being a staff engineer it was almost there i was just about to jump in so well with ehrlich bachmann's startup name but i cannot seem to remember it in my i know it's not haiku aviato yes aviato that's what it is aviato i just every single time i see anyone mention their startup i think of jack a jack attack jack attack on aviato it's it's the best episode of all time this is fantastic and manager at meta working there for almost five years so there definitely was a pretty huge learning curve when i first got into the big tech environment okay in this video i'll share four of the unique challenges you'll encounter in big tech and a couple ways that you can adapt to this new environment the first big company problem you'll encounter is dealing with an enormous code base and the consequence of that is things like code search or opening profile may not even work and that took me weeks to figure out how to adapt my workflow for a new environment at facebook which had so much code that it wouldn't even fit locally the background here is that most big tech companies will use something called a mono repo which means that the code for a bunch of different projects is stored in the same code repository facebook google airbnb microsoft all use mono repos and i mean at the netflix not mentioned there we don't do that i am a little bit surprised by all the things he just said has not been my current experience at a fan company at a manga company we do have many mono repos correct hillbilly netflix i know but why do you want all of your code in one repo i i don't really i don't i don't i don't understand that approach to me that doesn't make any sense like i i don't think there's any problem with the website having the website code easy search source graph you source craft dog right like there's tools for searching intelligently over a series of repos the way to do continuous delivery is the reason they can't scale deployments at a company they have tens of thou that have tens of thousands of engineers okay fair that's fair it's to justify expensive company issues issued work laptops oh okay anyways maybe yeah i guess netflix never got that big in the sense that i think we're only at a couple thousand engineers but all of our stuff deploys into like independently so there's not really you know we have this thing called chronos which is like every single thing that gets deployed gets a kronos ping every single change to production gets a kronos ping and so whenever production starts suffering from someone's push you effectively go to galactus galactus and you ask it when was the like at 4 15 we started going down what just went wrong and it's just like oh it's right here if these changes happened so you go to those changes and you just track down who made those changes right you find that dude i bet i do you want to hear a crazy story i changed a line of code all right changed a fast property to start doing something and at that exact moment one minute later netflix caught on actual effing fire it turns out somebody else used an automated job to launch a different property and that automated job launching a different property had a bug in it where it used the last person's name who manually adjusted it as the person who automatedly adjusted it so i did that good hand job gave it a good value and then some robot job comes along screws up everything and bam it is on fire things are terrible i was i just happened to be the person testing their pipeline for them because it was like a new pipeline and so i was like hey i have a project i could really use like some automation to it why don't we just test out to see if i can do these production changes super quick and they're like okay and i mean i had my boss calling my personal phone at like five in the afternoon like yo where are you you need to get on right now i'm like what the hell happened what the hell is going on all right dude i'm getting pings from all over i multiple co-workers hit my personal phone it was crazy it was crazy repository can be upwards of 50 gigabytes or more and tens of millions of lines of code having such a large code base means that your local development environment won't work the same way that you're used to if you're coming from a smaller company things like jumping the definition opening up a class or finding usages of a method or function probably won't work for example at facebook there were literally hundreds of different android projects contained in the monorepo and so because that would be way too big to fit into android studio like the ide industry i wouldn't be able to index all the different projects the strategy was you would selectively load in modules so if you're working on one particular part is this true lithium lithium here here are you telling me that the lsps couldn't handle 50 projects i mean i don't know anything about vs code i don't use i don't use loser software i use i use neovan by the way i use a nail vim because i'm obviously chat chad level here chad level misogynist here and so i don't i don't suffer with with with slow problems it's not like a thing i i think about it's just i don't i don't even know what that means explain module like m5 yeah i know when they say selectively load modules i genuinely don't know what that means like i know what modules though are let's say hold on they use vs code that works on a remote vm it uses a sapling file system for mono repo they claim that lsps couldn't work imagine being forced to use vs code and lsps don't even work oh oh my goodness oh oh that that everything just made me laugh really hard there okay part of the facebook or instagram app you would load in those modules make your changes and then put it out for code review today i'm a little passive aggressive no i'm active aggressive i'm pretty sure that was there's nothing passive about me being aggressive towards vs code just then i i don't think there was a single step at all at any point in which i passively suggested that it wasn't good i actively suggested with all activity and and girthiness so again it's just me i love them okay everybody gets to love their tool and on their other tools that do the same thing okay that's just how it works i like the way hey i like the way i cook macaroni and cheese i think the way you cook macaroni and cheese is  okay so don't come at me with your your stuff okay that would frequently happen especially when i first joined if i make a change i would add a parameter to a method and it turned out that method was being used in a bunch of different modules which i didn't have loaded locally and it would then break the build and so what you really have to get used to working at the big tech company is using an online tool which you could trust the results of that a lot more to be able to find variable or a method that's being used and you also have to be way more familiar with the cia if you have an online tool and lsps exist remotely that's all lsps exist remotely dude just effing build an lsp it's not even that hard just literally build the lsp make the remote call to validate something and then just do it what the what is this what are they talking about when i say just do it it's it's base fook they have one billion dollars not true i want to build an lsp locally in wasm okay well if you already have all that then build the effing thing locally why even building wasm just build that  and rust and call it a day rust has a free lsp kit it has every last thing you ever need run that this is the same company that decided to build a php compiler instead of adopting another language [laughter] checkmate atheist oh yeah it's super simple it's it's just lsp lsp server it's it's it it's for free it's it's what rust analyzer uses i love oh my goodness yes let's go let's go it's right look at this it just tried to hot dog me again it just tried to hot dog me github tried to just show like my phone number is directly one line lower and github did that again but luckily look at this it missed it it missed me can't catch me with that can't catch me with that one there we go look at that there you go it's it's just literally lsp server it also comes with another module called lsp types you can just build an lsp for anything i built one for htmx it actually works ai system the continuous integration system because that would really be the test of whether your code compiled correctly and didn't break anything else the second challenge of working within a big tech company is that you will often be working with abstractions that are unique to that company and that means that you really adapt at being able to look at internal discussions and forums and talking to the right people in order to get the help you need big tech companies are dealing with problems at a scale that very very few other companies have to deal with either in terms of the number of users they serve the number of developers at the company that's code active picture of how developers develop right okay you can tell right away that this guy right here is definitely a developer not an actor because you can see that he's chicken necking hard right his his ears are almost to his elbows okay so you can really tell right away that this guy is truly a developer like just really leaning forward on that code clearly product manager no one wears a two-piece i'm not sure what this even is going on here what the hell's happening over here nobody knows what nobody knows what's happening this is strange very strange situation going on here we're inventing new technologies by the way this is very true though this this statement that he's saying is extremely true if you want to work in a larger company there is no off-the-shelf solutions like everything is in-house every last thing is in-house how we do our canaries completely hand rolled how we measure if our canaries are good completely hand rolled how would you do real-time metrics completely hand rolled like everything every last little bit is all hand rolled what are canaries well because it's the scale right you can't use a service be like hey by the way service do you think that we could do a little quick canary i'm gonna put let's put a trillion requests over the next couple days in this canary and then let's put a trillion over here dude it would literally cost a billion dollars to run a canary with these companies you just have to roll your own everything everything from the ground up has to be ran and that's just just the way it is you know used in future products novel problems lead to novel solutions and that innovation that creativity is what attracts a lot of the best people in tech to go work at a large stock company working all right what's a canary everyone keeps asking what a canary is comes after the old story of canary in a coal mine you put a canary in the coal mine and when it dies from horrible gases that beautiful lovely little canary because they're super sensitive it dies from horrible gases you know that you need to get out of the coal mine because the canary died so it's called the canary what you effectively do is you release you have your standard in production version and then you have your canary that you release of it maybe it only gets one percent of the traffic then you have a series of key metrics that you measure your canary against production and if there's any deviation in those metrics either you just don't have a large enough sample size which happens all the time or b you've actually made a change in which you cannot go forward with and you need to roll back to the previous production version right it's just because like at some point testing doesn't work and production is the only true validation of your code right like at some point you can't you can't say it's going to work right there's just developing new tools and frameworks can be really exciting but also really challenging so if you compare that to working in a smaller company where you're using off-the-shelf technology you typically will encounter a problem google for it find it elephants and then use that to fit your situation in a large company it's not that simple you might be one of the first teams your definition was way better okay what was your definition judo it's a bird you kill to avoid your server going down okay that's a pretty good to be using some cutting edge brand new api or storage system and so when you do encounter a problem you can't just find the answer on google you have to go digging through the internal forums find the right people in order to get the help you need i like to think about it as having one more path to go down if you work at a big tech company so for example a small company if you're using some stable tool or api like reactor see we really got to work on your posture buddy okay we gotta work on your posture okay i i'm confident you got this but this is this is like not going to be good for you long term we really got to think about this a long-term situation so i'd immediately like you'll notice one thing right away that his head is way too high on his monitor okay you're definitely going to want to change things up you're going to want to raise that monitor up a little bit you're definitely going to want to change some things you're definitely going to want to roll back your shoulders okay roll them back then you want to kind of you want your head to be over your shoulders you know what i mean just android then any problem you encounter is almost certainly going to be with either your code or your approach the underlying technology is going to be found but at a big tech company if you're one of the first people to integrate with a new technology it could be that your code is wrong it could be that your approach is wrong or it could very well be that the underlying technology doesn't support your use case yet or they accidentally say that you're the reason why production went down and you're getting phone calls from your boss in the middle of the day in the middle of the evening there's a bug there you have to be able to have enough knowledge and context and dive into that and then give feedback to the people and work together to find an appropriate solution and so what you find is that the best engineers have that much deeper level of collaboration they're able to describe very clearly what are their goals what are the goals of the infrastructure and what are the gaps and how do you bridge that gap to now work together with other teams to find a solution that not only works for you but also for other teams or other organizations within this huge company the third challenge which is unique to working in big tech is that there's so many changes occurring at any given time so it's really hard to get a holistic view of what is happening with your features in your product for example at any given day at a company like airbnb or meta you might have an experiment rollout happening you might have a configuration change like a kill switch which is going from zero to 100 to release something you could have code changes being deployed you might have a mobile release going out typically that happens every week or two or you might have a feature which is being rolled out only to employees or only two users in a particular geography like only in the us or only in canada a lot of complexity to debugging issues so for example absolutely we we have a whole slew of things that we look for we flag various a b tests that are going out i mean there's it's extremely difficult to know why a user is failing i've had some of the worst failing failings of all time some of the failings i actually got figured out was by logging an error the state of the client who are on a specific television when i discovered that when the television went from suspended to into half suspended mode meaning that it's just starting to come to life it comes to life but tells you that you have networking you have cpu you have memory you have you have screen the screen's rendering and that's not true your screen's not rendering so i i never did anything that was special i could never load like new javascript or do anything because i'm like oh it's in front of the user right now netflix is in the foreground but it was actually not even in the foreground and that took so long to figure out just because of some stupid series of configuration changes it was emotionally painful it was emotionally damaging to figure out these things and you have to go through such hoops and figuring out who was in what test and all that it's just the worst the thing was that there's flags on that weren't supposed to be on that's the problem example at a small company what you probably would do is you grab the two or three people relevant to the bug or the feature and then you would think about okay what changed and then you have all the gold right there and that person executed an ls command that's pretty sweet that room and you can figure out what to revert or what to fix forward in order to address the situation within a larger company though it's much harder to cause the issue because you could have a change made by a completely unrelated team which somehow turns out to impact you my recommendation for new engineers in big tech is to be really familiar with the tooling to answer questions around all the different possible changes that could be occurring in fact what i'd recommend is that you and your team generate a run book basically a playbook of what questions you should ask every time we do this all the time in my example the common questions i would ask anytime with any bug report that was given to me number one does this issue only happen on one platform or all platforms is it unique to android ios or web or does it happen everywhere number two does the issue happen for everyone or just some subset of users so for example it might be only happening for employees or maybe it's only happening for users without a profile picture or like what is the condition which triggers bug these are great number three is it 100 reproducible or not and number four what configuration changes happened around the time when this issue was introduced and so just being able to have that those are great those are great things it's it's very very true we had a bug once that a specific row on television would only show up after 7 pm at night and stop showing at 4am you know how many people i had to have in a room to figure out why that was happening it was single-handedly one of the worst experiences of my life it was they also referred to it as netflix's most expensive row ever created it was my row okay i was very excited about it very very excited about it and it just took forever to figure out we had like one time we had two directors a manager and 17 individual engineers in a room all trying to because it was just like all right it's come to jesus time who done it and where did it go like no one was taking responsibility everyone did so we just got every last team into a room and just said you will someone will start debugging who's starting it right and we eventually figured it out it was very stupid u.s east versus us west one u.s east had a special set of permissions that would kick on that you my traffic would get routed at certain high traffic times versus us west one would have a different set of permission groups for certain servers to talk to and then boom it wouldn't work out and it was emotional it was painful it took a long time to figure out that go to list of questions will make you way more efficient at finding out the root cause the fourth and final challenge of working within big tech is that you will have a lot of stakeholders that you have to keep up to date and get their approval in order to ship anything meaningful in a large tech company there are unsurprisingly a large number of people right and so those large number of people will impact your life in a couple different ways and i bucket those people into three categories number one are other engineers these are people that you have to convince the tech lead engineers on your team why the work you're doing is important and you also at a very basic level politicking is improved right the engineers on the team have to look at your code and prove it in order to make a commit and ship it so you have to work with them pretty closely the second category of people are all the people here to keep up to date and informed so your manager your product manager the designer other people on the team or partner teams that have to be aware of your work because they're relying on it or they contributed to your work in some way and finally the third category is the leadership team so this is the director or vp of engineering a product who will actually approve your launch and so you have to be able to work with them and convince them that the work that you're doing is net positive for the company and it's a meaningful thing to ship and once they approve it then you can actually sell so this is one nice part about netflix that is a lot lot different is that it's it's sort of inverted it's it's more like there's a problem that needs to be solved like game streaming is our recent one right and so game streaming go solve game streaming i offered a solution for part of the problem so i just showed my boss my tool that i was worked on for a few days instead of doing the work he wanted me to do he said all right that's your new tool that's the new thing you're working on go work on that and i just went and worked on it i didn't really have to sell you don't have to do nearly as much selling nearly as much technical artifacts you just need to start building and show people why it's nice and then you just start you just start tossing it out and you know out in prod if you will and people go okay i love that so there's a lot more gsd culture in general and netflix as opposed to as opposed to these other you know like google heavily documented i'm not saying that it's not like documenting is not important at netflix it's just not the same level of stuff right selling to other engineers and keeping people informed this will always exist gsd gets  done so this always exists no matter what even if you're on a tiny what's it called even at a startup this still exists right you still have to keep other engineers informed and the people who are working like a jason right if you're working with a sales team you still have to keep them informed on where your progress is and all that so like these two exist no matter where you're at i even really say that even the leadership team this has always existed i really have never been in a situation where all three don't exist everywhere and yeah yeah actually now i think about really you really do have to do this pretty much everyone netflix is the first place where the leadership team feels more abstracted in some sense it feels different right like i don't i don't remember the last time i talked to a vp i just kind of do my own thing and build the things i think are really important and then i just get my boss to go yeah that's a good idea or my boss go no that's not a good idea celebrate the win this is very most if you place that netflix where instead of three different buckets of people you literally only have the whole company might only be a handful of people and so many startups that are that early they will not even have a notion of code review like an engine yeah we always have top-down mandates so ads game streaming so we did a social one we did a social experiment nine years ago like all those are all top-down kind of mandates like figure out x right and then we go and do x so it's a little bit different makes a decision to write a feature they ship it and it goes out the same day or the next day and so the code velocity the ability to ship things is way faster because you don't have all the gatekeepers or this process in order to get approvals at a larger company the cost of screwing up a launch or a feature can actually be quite high and that's why there are safeguards in place in terms of your engineering team the cross-functional team around you and the leadership team to make sure that the things that do get shipped are high quality and everyone is pointed in the same direction so what do i do if i disagree with the direction i try to convince them right sometimes you'll you just lose a battle right you have to be willing to lose your battle but you have to also be willing to fight and that's just how well i mean it's no different in a small company than a big company it's just that there's more layers of abstraction you have to convince in a larger company luckily again netflix runs very lean and so it it just seems like there's less levels of abstraction really i just have to get my boss to buy in and then my boss may have to get one or two other people to buy in and that's it right it's just a negotiating thing it's really just approving your value kind of thing and so when i disagree with leadership i try to to show them something different and we've done that and sometimes we've done it where we we showed them really good value and they said no despite it being really really amazing value it was a no sometimes i show them good value and they just say yes we'll do it and you know it's it's it's a it's a give and take so if you are a new engineered to a big company you have to get used to it i just i'm not willing to die you know what i mean collaboration with everyone on your team these are the four biggest challenges i encountered as i transitioned from a startup engineer to a big tech company engineer and i think so many engineers are not even aware of the gap and skill set that's needed when you go into a medium or large tech company and even once they're aware they are not sure how to address the gap and that's actually the whole point of the company i'm building tara joint taro.com i'll leave a link in the description and the idea is that you have got a really high quality high credibility discussion the man's running his own ass okay let's encourage you to check out the platform in order to advance your career a lot faster and if you do work at a big tech company which has a learning budget then there's a really good chance that you can actually expense the cost of taro premium entire early to your company so if you work at a company like microsoft uber amazon meta you can get taro entirely for free check it out and i would love your feedback thanks for watching and i'll see you in the next one bye well done great this was a great video and i think i think he was a spot on a lot of what he had to say i think one thing that was just hard for me to understand is that when you go from a startup everything you do is really abstracted to various services or something that's very simple right if you go to a startup that say getting a hundred thousand users per month you might just literally have a singular database you might just like that's what it was when i was younger i've been at netflix for 10 years so things have obviously changed but most people just had like a singular database they had a singular two machines that's no balance between two machines it's like you know you're configuring a machine you're not just auto scaling and crushing the whole world it's it's it's it's smaller it's monoliths it's all built in one little thing and it's just a different experience and when you go to a you know one of these large companies it's like everything is the complete inversion there's like to find the machine your things going for you have to wait until the thing's launch you're like okay that's my machine i got to go to that machine specifically it's just like a completely different experience if you wish to do that it's hard to get access to a lot of things there's a lot of trust you have to hurdle through that's just way way different i don't know it's a fun experience but it's most certainly way way different and for me that was the hardest one which was i remember to this day launching my playstation 3 launching netflix on it with my own custom application and coming to the realization that's what's happening is that the database url being generated actually is being served uniquely so every single ui build had a unique backend url associated with it then i went and figured out what is that unique back-end url associated with and i went to the database or the sdk team or the api team as we called them and i said api team what is going on here they explained that they took your java program that you were writing compiled it into by code stored your back end this is at this time it's long change since then but store that in a cassandra database and when a when a call was being made it actually load that specific back-end code and run it so that each ui had its very own specific back-end that's perfectly tailored to that exact moment when it was released and so you know it's changed a lot since then but still like that was a very different experience from what i was used to sounds like hermes before hermes yeah it is a sublet like it so cashing yeah they cash they'd cash the the javas the javas but that's like a that's a that's a big difference right when you're used to the back end the one that's deployed right you have your test one then you have the production one to have like this whole generation get stuff you don't even know what's going on you don't even know where the api code's generated when things don't work why doesn't it work someone told me that the back end was multi-threaded and that rxjs or rx java at that point which we had our own custom version called the double ux was actually multi-threaded i put a sleep five in there and took down every single environment on accident except for production because it wasn't it wasn't multi-threaded it was single threaded nobody told me that so when i put a sleep in there nobody woke me up i just slept forever crashed all of them you know what i mean it's just like what the hell is this you told me it was multi-threaded but it's not right like you you don't even know the world you can't know the world right it's just gigantic you know what i mean it's just it's just different but that stuff had scared the moment that no one can understand the system anymore exactly you can't understand the system anymore at netflix no one person understands any system like even the ui is largely understood by very few people just the television ui you can only understand part of it because really it's broken down into like three four major pieces right you have like the the ui side of things you have like the javascript caching requesting side of things then you have like the authentication interaction with the device side of things and then you have the adaptive streaming side of thing and each one of those is a team of 20s 30s 40s 50 people and so it's like you can't understand that world it's just like a world in which is unable to be understood easily and so and i didn't even mention the tv the tvi platform it's just it's very very hard to make an application that large job could do it well tom's a genius you're not a genius i'm sorry you're not a top level genius can this be avoided at some point it can't be avoided because there's just so much more inside of making an application as it gets larger now some decisions i think could be made more simple of course i think everybody thinks they can make a system more simple but at the end of the day if you were to rebuild a system what you would realize is you just rebuilt the same system that's equally confusing with a different set of requirements that's all really that's all i really all it ends up being the whatsapp team did it right there's there is bloat in big tech i think well the whatsapp team did it right because they had such a small product i think you can remain pretty tight on a small product that's it yeah it's just clearer to you yeah it's not clear to everybody it's just clearer to you and that's i mean that's probably that's the hard part is that there is no easy win here and so whenever someone says that oh people are doing it wrong whatever in large companies it's just like dude stuff is so hard it's so much harder than what anyone makes it whenever someone says i could do it better you're just like i don't think you know the first thing about working in a really large company and exactly how many people go into making something all right big stuff is hard big stuff is hard one could argue that it's unintuitive to try to put together mass advertisement with genuine social interaction and communication i'm not even sure what that means but maybe maybe not i don't know are you talking about like twitter or something i mean i think twitter i mean twitter would be really hard to make i don't think i i'm not foolish enough to think i could somehow make it into a streamlined super easy thing instantaneously i think that it's probably really difficult there's a lot of stuff to it scaling gets super hard your launches become completely bespoke everything about your life becomes bespoke it's it's difficult it's just simply difficult anyways the name is the primagen i work at netflix by the way like and subscribe oh my goodness i remembered let's go