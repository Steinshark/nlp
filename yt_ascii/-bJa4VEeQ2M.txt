look good you ladies and gentlemen welcome back to another day of advent of code i got to be honest ever since hcll has entered my wheel i've had extreme anxiety i i catch myself constantly thinking about hasal syntactically the language does not make any sense to me i keep having like nightmares about having to code in hascal and having to like take off work because the code challenge takes like hours to complete because i don't understand hll let us pray to odin and his friends that we don't get hascal on the wheel today please god not h oh thank god okay rust again have it again today it's a good thing because yesterday rust failed me i lost the challenge first time which allowed hasell to enter the board i am not going to allow that to happen today let's get after it gondola takes you up strangely though as the ground doesn't seem to be coming with you you're not climbing a mountain as a circle of snow island receips below you an entirely new land mass suddenly appears above you the gondola carries you to the surface of the new island and lurches into the station as you exit the gondola the first thing you notice is that the air here is much warmer than it was on snow island it's also quite humid is this where the water sources is okay again we're looking for water to help the elves create snow cuz it's not snowing for christmas and we got to have that the next thing you notice is an elf sitting on the floor across station in what seems to be a pile of colorful square cards oh hello the elf excitedly runs over to you how may i be of service you ask about water sources i'm not sure i just operate the gondola lift that does sound like something we'd have though this is island island after all it's island island i bet the gardener would know he's on a different island though or the small kind surrounded by water not the floating kind okay so we're in the sky he's saying the guy that knows about the water source is somewhere else we really need to come up with a better naming scheme i'm also very confused tell you what if you can help me with something real quick i'll let you borrow my boat and you can go visit the gardener i got all these scratch cards as a gift but i can't figure out what i've won so that's going to be the input here the elf leads you over to the p pile of colorful cards there you discover dozens of scratch cards all with their opaque covering already scratched off picking one up it looks like each card has two lists of numbers separated by a vertical bar okay a list of winning numbers and then a list of numbers that you have okay so winning numbers numbers we have you organize information into a table and your puzzle input got it as far as elf has been able to figure out you have to figure out which of the numbers you have appear in the list of winning numbers the first the first match makes the card worth one point in each match after that first doubles the point value of that card so if we have one it's one if we have two it's two three it's four so it's 2 to the power of matches minus one right if we have one match it's one 2 to the^ of zero anyway so here's our example so we have card 1 so this is the these are the winning numbers and these are our numbers so in the example above card one has five winning numbers bada bada bing four of them are winning numbers okay it's four 2 the^ of 4 - 1 3 2^ of 3 = 8 okay this seems very simple so what we're going to do here these are the winning numbers these are our numbers all we have to do is convert this into a set and then convert this into a set and then find the difference between these two sets so it's going to be the union of these two sets is our amount that's it oh yeah not not union intersection intersection game equals line.it on space colon. n for n is one and let's just print the game i i know that we don't normally want to unwrap this but this will never fail like this will always pass good so we have the game here split let winning equal game dosit on this nth for n equal 0 do unwrap let hours equal game dosit on this nth nal 1 unwrap yeah so this is winning hours collections hashset all we're going to do is convert the input to two sets winning. map and then per x x. parse 2 and i32 no it's us32 oh oh yeah winning. split on space there we go our num convert the winning to ours. spit let's do split. map. collect this is looking a lot more rustly i'm liking this so this is a vector u32 dos split map do collect very good so then now we can do let whenn set equal hash set from our number right cuz again the whole point here making two sets doing an intersection about b let our num equal hash or no our set from oh no this is not ar n this wind num and ar n num i said oh oh okay it needs to be explicit got it hash set of u32 hash set of u32 too oh oh i see i see i see i didn't realize you could just collect your into a hashset i see let's do winning equals winn num. intersection of our num parse in error value wonderful okay well that's good line 21 equal hours. split on that part oh because there's going to be a a new line trim the x x. trim yeah that's nothing interesting what is this oh it's just oh there's multiple spaces okay that's why better function for splitting the strings got it much better so we have right four 2 2 1 okay and then so right now we're going to have let value equal zero we have two sets of hashable items and because we make an intersection of two of those the intersection values are borrowed so then we have to copy them and then we collect them okay okay i understand and then we'll do print sum at the end print line sum or no value rather two to the power of windland as i32 this minus one 13 okay so in theory this is the right answer we are trimming all the white space if there isn't a winning game we're good i think i think we have the solution here in much less time let's actually print out some games winning hours and it says that 26 27 1752 26 i'm doing a lot of testing now or at least like manual hand jam testing because i don't want to have another horrible language ah drum roll in the chat oh jesus christ okay okay great i feel like this code is much more rusty i feel like yesterday's code was like iterate over a thing like do a thing per thing in a a list like okay and i feel like also when you do these print onto new lines it it makes your code look more like rust it's like oh wow look at that doing it with multiple functions having a map where we do a parse on essentially mapping like doing a parse for each makes it a lot more rustical move on to part two so just as you're about to report your findings to your elf one of you realizes that the rules have actually been printed on the back of every card this entire time there's no such thing as points inste scratch cards only cause you to have win oh wait wait only cause you to win more scratch cards equal to the number of winnings you have specifically you win copies of the scratch cards below the winning card equal to the number of matches so if the card if card 10 were to have five matching numbers you would win one copy of each of the cards 11 12 13 14 15 copies of the scratch cards are scored like normal scratch cards and have the same same card number as the card they copied so if you win a copy of card 10 and it has five matching numbers it would then win a copy of the same cards that the original card 10 one this process repeats until none of the copies you cause you to win any more cards cards will never copy okay hold on so card one has four matching numbers so you win one copy of each of the next four cards 2 3 4 five your original card two has two matching numbers so you win one copy of each of the cards three and four your copy of card two also wins one copy of each of the cards three and four your four instances now of card three one original and three copies have two magic numbers so you can win four copies each of c cards four and five okay we could do a function where we have the game and its number so it takes the number and the game as input and it returns a set of the numbers that we have have to check i think you're going about it too difficult already but that would work yeah probably write a function that recurses hit the first line play the game play the game to figure out how many games we have additionally to play and then do this function for every line so effectively we're going to create a recursive function where we have the first line play the game figure out how many games we win by this we have now the winning amount of games then we're going to do the same thing additional line and keep recursively going down okay let's let's run this and see what happens okay so infinite recursion that's bad this solution is too complicated i can already feel that i'm over complicating this we're going to start over cuz i i can already feel that this is not going to play out correctly the iterative version well the issue is how do i hit this like if i if let's say i play game iterative for this game figure out that i that i win game i have i get to play games 2 3 4 how do i hit this line twice maybe i'm over complicating the problem card one for matching numbers so you win one one copy each of the next four cards 2 3 four oh i could just multiply this yeah yeah yeah yeah i don't have okay duh i don't have to play the game multiple times i can just figure out how many times each game okay okay okay okay okay yeah that's so simple god why do i do this to myself bro why do i make these things so complicated so let's just do this right all we're going to do is say winning. len good so 4 2 2 1 so that means that we've played round one one time we're now going to play round two 1 plus okay yeah yeah zero input. lines. count i in input. lines do count z up to that and we'll say that let line equal input. lines nth or nxi unwrap so then all we have to do played of line plus equal 1 not line put a i w in zero up to winning len played of i + w plus equal 1 so what i'm doing here effectively is create an array of all of the lines and the amount they've been played so far iterate over the file get the line from the file and then say that we've played that line one time then we play the game figure out how many we've won and then iterate over the amount of numbers that we've won and then say that we've also played that line that many times let sum equal played. itter do some odd i'm not sure why i had to do that okay oh we're accounting for ourselves twice yeah yeah yeah yeah yeah that's why we're we're we're setting ourselves equal to well no hold on no it's it's this play of i + one yeah there we go there we go there we go this should be it holy dude i went way too hard in the paint for way too long with the recursive solution right i was trying to do some crazy where like i get to this line i play the game then i recurse out and i say okay we're going to play the rest of the game starting here because we got and you know what i mean it just it got way too complicated you're going to race rust chat what do we want yeah i'm seeing a lot of lua we're going to add lua all right lua on the board for an adventure in advent of code we'll see you guys tomorrow hope you enjoyed this one go watch this next video we we'll see how it goes i i really can't tell you i have no idea