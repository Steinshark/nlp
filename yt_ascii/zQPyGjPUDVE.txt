hello, everyone, in this episode. we're going to be working a bit with methods and variables and basically just getting comfortable programming with them so, here in unity i've got my custom layout set up from the previous episode and [i'm] just [gonna] head over to the project window and right click, [then hover over] create and [select] (new) c# script. and... i'll just call this something like episode4 and we can double click to open that up in monodevelop so, this is the default text that were faced with when we create a new script in unity don't worry by the way if your colors are different from mine. this is just something that we can, customize under syntax highlighting in the preferences and obviously, it doesn't change the way that the code behaves at all uhh... so most of the things here you should be familiar with, from the first few episodes for example, the class keyword followed by the name of the class in episode4, and then the colon [followed by] monobehaviour, [and] we discussed it means that it inherits from monobehaviour which just gives us some... base functionality, for example, the start method which gets called automatically at the start of the game and the update method which gets called once per frame while the game is running remember that the void keyword means that these methods don't return anything and any text that follows a double slash on the same line is just a  note that we can leave either to ourselves or... to other programmers [for] explaining what a bit of code does the only things that we haven't talked about are these two lines at the top here which are called namespaces, and for the time being we are going to ignore those (btw namespaces are https://answers.unity.com/questions/147193/can-someone-explain-using-quot-and-quotmonobehavio.html) so, to start with i'd like to look at how we can print stuff to the unity console so... monobehaviour has a print method so, if we just write the word print you can see the intellisense tool seemed to give us some information about print... for example it's a public static void and it takes in an object for the message and it's got this little summary here as well. "it logs message to the unity console." so, that sounds like what we want. so if we [type] open parenthesis. we now need to pass in an object and turns out in c#. we'll talk more about this later, but most things are objects. so for example, we can pass in a string uhh... so let's just write start so just the word start inside of quotation marks then close the parentheses and remember to add a semicolon for the end of the line. and do a similar thing in the update method. print [then type] open parentheses. let's print the word update and close parentheses semicolon, so now if we save and go into unity, we're going to want to attach the script to an object in our scene so let's create a new empty game object and just drag that onto the object we'll see it pops up in the inspector here and then if we press play, you can see that this is being printed out into the console, and if we just toggle collapse then you can see a nice condensed view of it, and you can see update has been printed by now 500 times so it's being printed every frame as we'd expect let's go back into our episode4 class, and let's quickly discuss something called variable scope so say i were to create a variable inside of a method let's say the start method and i'll just create an integer variable so... [type] int x and assign the value of 0 what happens now is when this method is run the integer x is created... but then as soon as the method has finished running the variable x is destroyed from the computer's memory because of this it will only create a variable inside of a method if we want to temporarily store some information for use in a calculation for example we call x a local variable. it was created between this opening and closing pair of braces so it is local, in other words, it can only be used by a code which also exists between that same pair of braces if i try access it from somewhere else say the update method. [i'm typing] x = 5; we get this little error saying that x doesn't exist in the current context so just to hopefully drive this point home. say i create an opening and closing pair of braces this defines a new local scope so i can still access x in here. [i'm typing] x = 5; for example because this is part of the scope in which x was defined, however, if i create an integer y inside of here i cannot use y outside of this pair of braces if i did try say y = 5; out here for instance... we'd get the same error again because y no longer exists so because local variables get destroyed at the end of their scope we obviously can't use them to keep track of things across the entire game such as the player's health so what we can do instead is create a variable like that outside of any method usually at the top of our class. let's use the example of keeping track of the number of frames that have passed in our game so i'll create an integer called framecount and notice the convention for naming variables, we start with a small letter and then each subsequent word starts with a capital letter we can say framecount equals 0 and just to give a bit of terminology this part where we give the name of the variable and the type of the variable is called the variable declaration. here where we give it its initial value is called the initialization when we're creating these non-local variables the initialization is optional if we leave this out it will get initialized to its default value, which for integers is zero so now to count the number of frames we're just going to go into the update method since that's called once per frame and add one to the frame count so we can say framecount is equal to framecount plus one. now, there is a shorthand way of writing this which is simply framecount += 1; this is saying that one gets added to the original value. so you'll generally see this instead because it's of course much shorter let's now print out our frame count. so we can say, frame count then let's save this and go into unity to run it and we can see that now our frame count gets printed out over here. if we wanted to print the words frame count next to it. we could add quotation marks [i'm typing] frame count: and then we just say plus. so the plus operator is not only for numbers we can also add things onto strings. so here we're adding the value of framecount onto this framecount string let's save that and run. and you can see that working in the bottom right here alright, so we've briefly touched on variables let's now take a look at a practical example of a method. so say we want a method to calculate the distance between two points so if we're given two points defined by the coordinates (x1, y1) and (x2, y2) we can, of course, use pythagoras' theorem to find the distance, so we'd say the change in x, or delta x is equal to x2 minus x1 and the delta y is equal to y2 minus y1 and then the distance is the square root of delta x squared plus delta y squared. so in our code we'll want this method to return the value of the distance, so we'll give it a return type of float and then we can call this method something like getdistancebetweentwopoints notice the naming convention for our method here it's exactly the same as variables except the first letter is a capital you might wonder why unity hasn't followed this naming convention for their print method? and i'm not sure but don't use that as an excuse to not follow the convention yourself let's now create our opening and closing parenthesis followed by the opening and closing braces so we'll want to pass the coordinates of the two points into this method so hopefully you remember we can declare the variables inside of these parentheses here so we say float x1 comma float y1 and then 4.2. we'll say float x2 comma float y2 so now we can create a local variable delta x is equal to x2 minus x1 and float delta y is equal to y2 minus y1 so next we'll want to create a float called something like distance squared and set that equal to delta x times delta x plus deltay times delta y all right, so we've got the squared distance in order to get the actual distance we now want to get the square root of distance squared so to get the square root. we can use something called mathf which as you can see over here is a struct which we haven't learned about yet, but in this case it behaves pretty much identicaly to a class so this has a method called square root which as you can see from this pop-up takes in a float f and returns the square root of that number so it's returning a float so we can set our float distance variable directly to the result of this method so math f dot square root (mathf.sqrt) of distance squared all right, all we need to do now is return the distance so we write the return keyword followed by distance and as always don't forget the semicolon all right, so now say in the start method. we wanted to set float distance equal to [you can] say get the distance between two points and it's generated this little pop-up for us saying that this method returns a float takes in x1 y1 x2 and y2 and we can pass in say (0, 5) and then our second point could be 10 and 15 and just like that we found the distance. let's print it out. so print distance alright let's save and see what that distance happens to be uhh... let me just comment out this print frame count line otherwise, that's going to get lost in the wall of text so just remember to save of course and then press play so that distance happens to be 14.14214 before we end off for this episode i'd like to give an example of what happens if we make a mistake in our code say for example i forget the semicolon at the end of this line, so i'll delete that save, and go into unity you can see this error message pop up in the console saying "unexpected symbol 'float' " and if we double-click on the error message it will take us to where the error is occurring. now, the reason it's saying "unexpected symbol 'float' " is it doesn't really care about paragraphs it's reading this as being one line and this doesn't make sense delta x times delta x plus delta y times delta y float; you can see why the float symbol was? unexpected it doesn't make sense here so from this we can figure out that we need to add the semicolon after delta y, so that it knows that the line ends there so that's one example of an error that could occur let's look at one more example say we forget to make this a float and instead we say that it's a void method but we're still trying to return the distance if we now save and go into unity we can see that we actually have three errors now, but they're all being caused by the same thing so we will start with the topmost error message, and we can see this one saying "cannot implicitly convert type 'void' to 'float' " let's double click on that and it says the error is coming from here because we tried to set a float variable, equal to a method which returns void so from that we can immediately tell, that this should be, a float and if we save and go into unity, of course, all three of those error messages have now disappeared alright, that's everything for this video i encourage you to practice what you've learnt of methods and variables so that you can get comfortable working with them. until next time, cheers.