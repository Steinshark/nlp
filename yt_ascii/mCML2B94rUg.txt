so today we're going to be looking at something called random boolean networks and random boolean networks were created to try and understand the complexities of biological systems so biological systems cells do lots of very complicated things and at the the random boolean network was a demonstrate a demonstration to try and understand whether these complicated behaviors could arise from actually very simple rules so the random boolean network is a computational model built up a very simple rules to see that if out can out of these simple rules very complex behavior emerge this reminds me a little bit of conway's game of life which we've we've briefly discussed on the channel is it something similar to that or is it is this the same yeah no so it's it's a little bit different but it isn't it is very similar so a random boolean network consists of a set of nodes and the way these nodes change over time they have specific rules which are a little bit like conway's game of life so yeah not not too dissimilar how does it work then where do you start with one of these a random booty network can be described as a set of 20 nodes each of which has a boolean state attached to it and for any given node its boolean state is determined by connections to other nodes within the network so each node's behavior is determined by the other nodes in the network like a complex interacting system so before we get the comments about drinking game drink every time he says boolean when we're saying that we're talking about a true or a false or a one or a zero are we exactly that yeah so boolean values are either or off or ones and zeros we're going to be using ones and zeros in this work what you can think of is that you can have 20 nodes to start with all of them exist within one column to start with and each of these nodes within network has connections to other nodes this is how you initialize network and we're just going to say that each node within a network is connected to three other nodes you then get the values of the nodes in which it's connected to and because we've only got three connections we're gonna get three boolean values out of that so something like zero zero one one one one zero one something like that and then what we do is we build a truth table we've got eight different options so essentially counting from zero to seven in binary that's in one column of the truth table in the other column we then randomly assign a result to this and we only do this once at the start of the program so that if a given node has connections which give it the values one zero one that node will then change its state to zero if it has connections that give it zero zero one then that node will change its value to one and we do this all at the same time and then once this is completed we then get a new set of 20 boolean states for our nodes and then we can repeat this over successive iterations and get this behavior as time moves on over successive time steps so we'll get these 20 nodes each of which has a state one or zero and then each one is being fed by three or you know up to three of the other nodes and then you get the next step and then exactly that's right yep that's how it's done so yes not not not terribly complicated simple rules boolean values everywhere they randomly start they randomly start with randomly assigned boolean variables the truth tables got random boolean variables in it so you would expect it just to be a bit of a mess but it does show some some very interesting behavior i've programmed this to show you so i can actually show you the output from from the program and i've got a few a few different examples of this so when you first start with a random booty network and everything's random as the name suggests you'd expect it the output just to be a bit of a mess and sometimes that's exactly what it is so if i just load up an example here so just to explain this in the way that i've coded it a zero is represented as a zero so that's false and a one is represented as a space and that just makes it easier to see the patterns within the network and this is pretty much what you'd expect from such a system at the start because it's a bit random you get surrounding behavior which you see here and then everything would just peter towards some steady boring state which is what we've got here which is some nodes in the network being permanently off but some of them switching between ons and offices time goes by so this is exactly what you'd expect and there are a few examples of this and this is an example of a network where everything just turns on forever so this is actually what i would expect to happen from a network which was built in this way however we could also get these cycles that appear and again the networks start off and they've got some some random noise here they're not doing too much but they fall into this cyclical repeating pattern which is quite interesting for something that's so so random i wouldn't have expected this this type of behavior to happen but it actually happens relatively frequently and there are different examples of this that we can see so all of which start off as i say in a bit of a random state but they tend towards some nice nice regular patterns this is a nice property of the network but i don't think it's particularly amazing as of yet but there are some some other properties that networks have as well so one of the things that we've seen seen here is that these patterns are they're quite obviously repeating but the networks also demonstrate so even with this pattern this is quite a complicated one but if you look at the spaces here these squares here and this shape you can see this pattern repeating so even though this is quite complex this is still a repeating a repeating pattern but we can also get behaviors that because all behaviors in a random booty network ultimately will repeat in the end we can also get ones which have longer cycles and there's so long that we actually can't see the behavior we can't see the repeating pattern here there will be a repeating pattern but it's too long to fit on the screen and there are a few examples of this just where we get something which we can't quite understand that one looks like it's got a bit of a repeating pattern there but no we can't see the repeating cycle so just that's all that's all i suppose mildly interesting and that you have you have different behaviors that you can get from differently randomly initialized states of the network okay one of the most interesting properties of this is when we were looking at the biological systems which i suppose this network was supposed to naively emulate biological systems are very robust so cells and things like that they can actually deal with quite a lot before they before they start start having problems and one of the ideas that you can look at with these networks is can we inject perturbation into this network and see how it responds over over time we can do exactly that what's perturbation then is that just to change is that fancy word for changing it that's exactly what it is so what we're actually going to do is about halfway through the network operating we are going to go through five nodes of the network and just change their bits so if it's a one we're going to flip it to zero and if it's a zero we're going to flip it to a one and we're just going to see what happens after that again one of the things that you'd expect to see here is that the networks just change what they're doing and continue in this new state for for the rest of time and sometimes that's exactly what happened this perturbation injected here and you can see that the repeating pattern changes so we have a bit of a mess down here and then the network just changed into a different but other cyclical state and there are a few examples of this again of just one state transforming into another because of this perturbation but still maintaining its regularity but it's a different kind of regularity it sort of reminds me of gene mutations yep so it was exactly that so the idea that if you have a simple organism and can mutate genes if other genes are applied are relying on the products of those genes then you can have changes within the biological system does something else need to come in to take over what was caused by that perturbation and that that was exactly the point of these networks is to try and show that you know robustness specifically although we're not demonstrating robustness right now robustness can come out of very very simple simple networks with very simple rules so there is a chance that barge itself might be underpinned by such rules which are indeed as simple we just don't know what they are yet so yeah these are so when we inject the perturbations here we can see the networks change over time but go into a different type of regular behavior however there's a few networks where we inject the perturbation here and then the network recovers from that perturbation to be exactly where it was and i think this is the behavior that people are most interested in because i think this most captures sort of the the principle of robustness and biology that things have to accept perturbations and go back to what they're doing and we have to point out here that there is a chance because this network doesn't really change too much there's a little bit of a change we can see because we've got these four repeating zeros and it changes to three there but then goes back to four but it's it could be possible that in this network there's just not too many connections to the these five nodes so if we change them it might not have that much of an effect on the network so that's possible so let's look at a few more examples this is another example where we have a change the repeating pattern that you can probably see by looking at the top we've got this bit of confusion here which isn't seen before but then it goes back into the repeating pattern that it had before so we gave it this perturbation it doesn't seem to be too affected by it so that basically the no all the nodes are is they just hold a boolean state so all i'm doing is i'm going in and i'm just flicking that boolean state over which will affect so for all genes that are connected to sorry all nodes that are connected to either one of these five nodes that will affect how they interact with the truth table that we showed so they might get a different result there but even even with that change we can see that they go back to the same repeating behavior they had before so i think one of the most interesting examples i can show that i found just from randomly searching these networks is after we put the perturbation in this network a lot of the network changes so there's a lot of changes down here there's a lot of changes here and here as well but only after about 10 time steps of what is a relatively significant perturbation for a network that's only got 20 nodes we're switching five of them it goes back into this regular state which is something that's quite unexpected for such a such a simply constructed network to have this behavior and as i said i think this this is sort of a visual description of the behavior that i think stuart calvin was looking for when he created these models is to try and show well actually no lots of interacting units which have very simple behavior can out of which can emerge very complex behavior which can underpin lots of the natural phenomena that we see in the in the natural world so i think yeah i think this is a nice description of exactly what sure government was trying to show with these and this idea that you can perturb the networks and they can ultimately recover to doing doing what they were doing before you only have to work out whether it's worth alerting the user if you find the key so you know you download the temporary exposure key you perform the encryption you generate the potential rpis and you compare them with the ones you see fill the bergen with the most value without going over a specified weight limit