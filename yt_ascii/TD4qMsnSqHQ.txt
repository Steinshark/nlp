over here at developer voices we're very interested in the future of software where are we trying to get to as an industry what do we think tomorrow will look like what do we think it should look like but that doesn't just mean looking at the new and shiny stuff at least it shouldn't it also means taking a look at tools that have been with us for a while and asking how they're evolving how they are moving us forwards which leads me to wonder about one of my favorite and staple databases postgres has been an exceptionally high quality free relational database for decades now and it could rest on its laurels it was definitely earned it but it hasn't been so what's new joining me to answer that question is ralph shebry he works at neon which is a postgres as a service platform and we catch up a bit on the state of postgres and what's new and then we have a look at how neon are trying to move the state of the art forward they've been diving into the guts of postgres adding a bit of custom rust code doing some architectural tricks that will be familiar if you know how kafka works and they've ended up with a version of postgres that starts to look a little bit like git the promise of a database that you can easily and cheaply feature branch things like that how can you have multiple versions of the same source database doing different tasks it's interesting it really caught my attention when i tried it out last month so i thought we'd bring ralph in for the what why and how of what they've been doing so i'm your host chris jenkins this is developer voices and today's voice is ralph shipley foreign [music] my guest today is ralph shebry ralph how you doing yeah pretty good thanks thanks for having me chris absolute pleasure you're coming to us live from switzerland i believe yes from beautiful geneva yeah oh very nice i've only been there a couple of times but it is beautiful yes yeah so i've brought you in because you are one of oh my on my grapevine one of my resident postgres experts and you work for neon they've been doing some really interesting stuff with postgres we're gonna get into that but i have a confession i haven't really having loved postgres in the past i haven't had much excuse to use it for a couple of years so catch me up what have i missed what's new well postgres just has been this open source database relational database for decades and now it's in version 15 and i think one of the reasons that you should pay attention to postgres and the evolution of postgres is well first of all it's really the the only true open source database it's not owned by anybody it's really owned by the community in very active community of contributor contributors who are always striving to making it better improved performance adding more features and i think but what's interesting about postgres is the growth of the community so according to the stag overflow survey postgres is the most wanted database among professional developers and i think also according to db engine among the top top five databases postgres is the only one that is growing yeah it's like if you take my sequel sql server oracle or even mongodb they're all declining but postgres is growing and i think it's and i think it's really because of its afo system and what i mean by ecosystem there are two things i mean by that first of all is the ecosystem of extension so postgres is very versatile it's not just a relational database but it has all these extensions that give it super powers for example we have post jis that allows you to do you know a geolocation and you have a time scale that helps you to do time series or now the hot topic is ai we have pg vector which allows you to do the similarity analysis among vectors which is which which is something that you really need if you're using larger language models like gpc so i think it's just that there are so many things that you can do with postgres apart from just storing storing data but also there are so many vendors who are offering who have their own postgres offering yes we have aws you have heroku and you have countless others you have backended services you have distributed sql so it's not just this database that is that is a standalone and works on bare metal but you can have it as manage a service you can have it as distributed service and now we have it as a serverless database with leon yeah yeah so i was going to ask you this later but i'm going to pull this question sooner in my mind because that's because you're a developer advocate for neon postgres service right surely that must make life hard because there are a lot of places you can get postgres how on earth do you distinguish yourself among the many many postgres services it's interesting i think i think that we positioned ourselves quite early as the the database for developers and i think like the neon architecture also helps a lot to just to to differentiate ourselves from all the other vendors and i i think what helps us to be competitive in that space is that you can get a connection string very quickly and the importing process is quite easy so i think that in i think for developers we're just looking for a database we're just looking for a connection string you can get started with neon in in a few clicks so that definitely is something that that helps but what makes us different i think it's our ecosystem of partners and we partnered recently with with versa we partnered also with hasura with replit and obviously that gives us access to that developer community and and it just makes the conversation easier so we're not necessarily talking to dbas who wants to who want to you know manage their their database themselves we want to be the database for developers and i think that's what makes us stand out from the rest okay that's i mean that feels like a bit of a marketing headline the database for developers yeah you're you're i'm going to challenge you on that so i i do think you have great developer experience and i'm going to talk about that but like as developer advocate i've done that job you're going to a conference postgres isn't the new and hip thing there are lots of people talking about postgres how what what do you ralph shebry get up on stage and talk about it to excite people about postgres that's an interesting question so what excites people about postgres well in my case i think i think is the new thing the new things that you can do with with postgres and i definitely forgot to mention branching and that in that story yeah we're gonna get into that yeah i know we need to we've got a lot of topics to hit don't hit them all at once right yeah so part of it is i think but because well postgres has a great documentation people can go and have a look at it so they don't necessarily want to know about postgres when they come to neon so they want to know about all the other stuff that we do so how how does the serverless architecture work how does branching work and branching is one of the things that we offer so i think that what makes him excited is just how can they be more productive using postgres and i think that all the whole developer workflow story is something that is quite new in the database world we are accustomed to it with things like it where you can create a branch you can merge it and you can collaborate with dozens of you know of other developers but we've never really had that in the day of the base world every time we wanted to collaborate using databases it's just it's just a painful process to be honest so i think what excites people the most when i talk about neonya it's a developer workflows is the fact that you can create a branch in matter of seconds and you can prototype using a database that is hosted in the cloud you can get a connection string very quickly so yeah that's i i would say that's what i talk about mostly and i try to listen to i try to listen to the low i mean you've done that for four years as you said so you listen to developers and every time they come up they come up with with a set of problems and you try to be helpful etc and yeah and this is how you find things to talk about okay fair enough yeah so we need to get into this whole thing of branching but we need to come we need to get the long way because this is the thing that really caught my attention about neon specifically you have this thing and it's kind of a hip phrase lots of databases are saying to separate storage from compute right yes yeah i've heard that in a few different places including my apache kafka days which are still close to my heart what does that mean in terms of postgres what a neon doing why do we care about separating storage and compute well we care about it because like if you if you want to offer a truly serverless serverless service then you want to give developers the ability to spin up instances on demand yeah but the the problem with that as you may know is when you're dealing with databases you're dealing with stateful environments and and those are quite hard to manage because well every time you want to kill an instance you need to make sure that that data doesn't disappear you need to move it around and what happens if you have an application that needs that that needs that data so it turns out that managing a stateful instance is actually quite a hard problem and this is why separating storage and compute comes into play and makes things a little bit easier so in our case when we talk about separating stored and compute is we've taken postgres and we added a hatch that is about a thousand line of lines of code that and all that patch does is give progress the ability to talk to our storage engine that we built from scratch and we that we built for with rust so there are really two components to that and and that separation gives a lot of benefits when one of them is that since we don't have to deal with all the access to the file system etc then it allows a neon to spin up a postgres database within seconds as opposed to minutes so you create you go to neon you create a project and you have a connection string within three seconds and it has something that actually work how does writing a new file system driver mean you can spin up instances quickly oh so well you don't have to you don't have to deal with all those accesses to disk so uh from what my understanding we're gonna postgres that that helps boot up the postgres instance quicker than as opposed to if you had to to to to put the entire postgres as postgres engine okay and sorry what was i so i was talking yeah i was talking about one of the benefits of of of separating storage in compute so one of it is that you you spin up postgres database really quickly because you don't have to to deal about to deal with the data yet and the second is the the second advantage is that you can allocate resources independently so we have that postgres instance if you need more ram more cpu you just give it more ram and cpu if you want to if you want to take it down you just do it and this is what allows for things like auto scaling and we have also scaling down to zero so if your database is inactive for five minutes then you just shut it down so that's regarding the the the compute bar the storage bar is something that we built from scratch that is is multi-layered and it's a distributed system on itself so we have a durability layer that we call safe keepers and basically that layer makes sure that your data is always present so if you insert in insert a row that is always going to be there i knew i have what we call base servers that knows how to how to reconstruct your data from any given point in time because in neon we don't we don't save just the data we save the history of the database okay yeah and that actually allows for things like branching is because the page server just knows how to reconstruct the state of your database from any given point in time so you you're doing like a git like thing where postgres tries to save some data and your file system layer intercepts that and says i'm not going to do a destructive update i'm going to keep it as a history of changes yes does that through write ahead logs and this is exactly what we yeah what we say so we we save right ahead log records and yeah and and those are immutable files and actually actually the the third part that i haven't spoken about is since those are immutable files then you can upload everything to cloud storage and this is what we do so we upload cool data to s3 and that saves up some some money also to our end user okay this actually is reminding me a little bit like kafka where you make the write ahead log basically more important in the architecture than it's previously been it's not just for creating a backup copy or recovery it's actually an active part of the idea of how this is going to work right yes so this feeds into this thing you can offer of branching whole databases to share with other developers tell me a bit about that yeah well since since you can do brushing really we really think like our philosophy is that if you can whenever you need to get branch you'll probably need also a database branch do i believe that actually yeah yeah because like if you think of if you think of it from a developer's perspective you you you have production environment staging and you have your development environment and you have databases in all those environments but you don't work by yourself so you you work in teams and the the more people you have the the higher the chance of breaking something and especially at database levels if you are making changes better make them in branches that are isolated that are independent all branches inherit from that inherent data and schema from their parent branch so one of the advantages is that you can create features that are that are actually using for some production data and i think in some cases that are features where you you need a proper testing against production data in order to make sure that it works properly and and and then and then nowadays what is interesting is that the staging environment is kind of dead too people are using more previewing environments so you have these cool companies like versel who who's who offers developers the ability just to create preview environments for every time they create a pr so if you you create you submit your code in github you create a pull request then you have an automatic environment that that comes out of the box with it and your stakeholders or your team members can just click a link and they have this production like environment you can have a look at it and see that everything that happens but that's great for front end but yeah what happens with the database well we we kind of we we created the an integration with versal that does that automatically so with a few clicks you can do that and we also have our api and github actions that also allow you to do that so it makes total sense to have a database every time you're you're creating a branch and get and this is how we go about it okay so that i can actually see that being really useful because i've definitely used it in front end and it's incredibly useful so so you're saying you've got cheat branching so i can do a cheap branch of the live data you've got low compute costs if it's not being used so like so it doesn't cost me anything to have an extra database for every pull request until they used so you you could so every time you create a branch well in in the storage in the storage engine you're you're just creating a pointer so you have somebody that metadata there and and you're creating you're creating also another compute instance to have access to it you can also create a branch without having to compute but you would you wouldn't you would use that like as some sort of backup if you need it but yeah so so you you can you can literally have tons of branches even more you can have branch for every one of your team and and it's not gonna and and all you're gonna be charged for is really the delta between the branches and not necessarily like the entire it's not because i have one gig of of of storage in my main database that i'm gonna have but then i'm gonna replicate those every time i'm gonna create the new branch right could you also use this mechanism for like as a full back like when you do an upgrade in production could you say i'm going to tag the database at this point in time and oh dear the upgrade went badly i can roll back well you can do even better you have the ability of doing a time travel anytime because i said that the storage engine stores all the wall records and knows how to reconstruct data from any given point in time so let's say one of your engineers somehow decided to manually drop or delete some data and they deleted the wrong date had the database does happen yes well then you can just yeah you can just easily roll back create a branch from from a passport and and just say hey i need to do to have this state of the database from t minus one not not t0 and it does it in in a matter of seconds and and you get back all the all the lost data and then you just swap compute instances and that's it so the backup backup system as it is now is is pretty good we're still we're still adding more to it because we're getting feedback from hardcore postgres users but but yeah but the story is quite simple for now what kind of feedback are you getting is it like really deep technical or usability or what yeah i think i think we're that we're currently working on so our our developer workflow story is needs a merge and it's something that we we were working on where we're going to postgres like we're adding things like shorting replicas all those things are are are coming very soon so yeah we get those feedback all the time and we're working on them every day to to make sure that we get in par with with you know with with everything that postgres offers okay and because how much maintenance is that you say it's like a thousand lines of code at the core of this does that mean that your version of postgres is very close to the latest no it is the latest okay yeah well we we do that for every version of postgres so we started with version 14 and then when when version 15 came out we were we were among the first ones to to offer it to everybody because all we need to do is just to write that code in version 15 and and and now you can do that and it's going to be the same thing with 16 so every time a new version of postgres is going to come out we're gonna be behind by a week or so maybe maybe less maybe we're gonna do it at the same time because yeah we have postgres hackers within within the team that are very very close to to the posters community and that contribute all the time to postgres so and they have a pretty good track record for doing like release candidates and stuff so presumably you've got some warning yeah yes okay that actually sounds really handy so let's talk about speaking of hamby if i'm going to use it i have kicked the tires on neon and i'm going to sound like this is a sponsored podcast now but hand on heart i haven't been paid to say this you have a really really good onboarding experience for a like a lot of software as a service companies could go to neon and learn a lot to steal for their own service well i'm i'm glad you like it i really did yeah it was it took me about three minutes from hearing about you to having a database table with data in i was selecting out of amazing but i've worked with software as a service companies where that is the opposite of the experience right what's your secret sauce what's your tip for getting good developer experience yeah i'm not sure if we have a secret sauce i think i think we try to do what everybody does which is listening to our users or listen to developers and and we want to get better i think i think that's what we try to do like if you if you've looked at the neon console in the past few months i've i've been around for less than nine months and i can tell you that a lot of changes happen already sometimes i have a look at the the dui and and i don't recognize it like things are added all the time things are changed because we listen to our to our community sometimes we get constructive feedback sometimes we get bad feedback and we try or negative feedback rather and we when and we work with both and i think we also are in a unique position we have partners that come from the front end from the front end world partners like versa replied the already offer a really really good developer experience and we get inspired by by our partners too to deliver us as good of aui as possible and i'd say maybe like the the third thing would be that we have a passionate team and culturally within the company like most of the the conversation you start with does this make it easier for developers it doesn't make it harder so if if it's harder for developers then maybe you want to remove those frictions but if it's easier then maybe it's the way to go so yeah i think it's just to listen to our developers and ask ourselves the right questions and and try to mimic the best so i'm gonna have to push you on this because it seems like every company thinks they're doing that but i think you're unusually successful at it what's that what's the management like what's the structure for getting changes in i i think maybe it starts also from the top like as i said culturally it's like that and it's important if if you have founders and if you have leadership team that that think that there's something crucial because yeah well we we're we're having this architecture but we need to find a way to make it easy for developers also to use it so i think yeah maybe it also comes from the the from the top all the way to the rest of the team yeah okay yeah i could see if it's an actual priority for the management that really changes things rather than being a lip service priority which does happen does it does it also relate back to this thing you were saying where like there are a lot of postgres service providers so you must know that you have to differentiate yourself and that onboarding experience when you're in a difficult to differentiate market that first half hour can make all that more difference yeah i i there's actually i just remember that there's a really really nice quote by by our ceo and it says on on this twitter i yeah i don't remember the code itself but basically it's like if when you have a 10x architectural advantage and here is talking about being serverless and all the the things that we spoke about then the next thing you you yeah you focus on this developer experience and that's how you create the separation between yourself and the and the other companies i i don't quite remember the full quote but it's an interesting one that you can find it on twitter nikita base i'll i'll hunt it down and stick it in the show notes so people can have the exact quote but that i guess that does prove that right at the top you're thinking about developer experience absolutely which is unusual in a lot of software service businesses okay so give me a bit of your background where what brings you into a postgres story yeah i i honestly i i do i didn't necessarily think of myself i didn't think that would ever be working or with the post risk community it's quite new to me it's something that i'm that i'm learning i worked as a as a developer advocate and an evangelist a long long time ago for for a bigger for bigger companies i worked in nosql but it's just i think it was just this it was natural for me to to work with postgres because because the community is asking for it and people want it and people want to to learn more about it so i felt like it was an exciting opportunity to to be working with the postgres community and and it is so it's a great time to be within the postgres ecosystem it is yeah it from my experience it's a nice community and it's a great general purpose database right but if you've worked in the nosql world right then you've seen a few different databases what do you think postgres's places in the world where everybody's trying to vie for the database that's customized to a specific task yeah i think i think it's important as a developer advocate also to understand that there is no such thing as the best database right like there's no such thing as the best tool there's only like the best tool for your specific use case and for whatever you're doing so i think that for for some use cases that nosql is great for other use cases maybe you would go for sql we know that for most cases sql is probably the way to go so i think that it's important to understand like what what your goals are what is it that you're trying to optimize for and what's the best tool to achieve that when i was working in nosql before we had a very a performance database and and we've always compared to other nosql databases and we would know that there are use cases where where maybe our database would be the best and maybe other there are other use cases where it would be just better to use mongodb whatever so yeah so i think it's important in the database world to understand why you're doing things yeah that's true that's true as ever as ever in programming you've got to understand what your tool is good at and you've got to i think you've got to have a few different things in your toolbox these days like i would say everyone should know one relational database if they can if they're at that stage in their career but not just a relational database you know you can the more different ways you've got of solving a problem the better off you are and i think you come from yeah you come from like a kafka world where i've seen a lot of architectures where you put kafka in the center of everything and then you have all these streams of data and then you you have postgres you have  you have facilityb you have like all sort of different databases that are just communicating with each other and i think this is what smart team this smart teams do is that they understand the pros and cons of every architecture of every tool and yeah you need to you need to know a relational database but not just a relational database like you need to understand the whole ecosystem as a whole and how things interact with each other i think yeah well i can think of no better way to get started with a relational database than to start with postgres and i'll give you that plug you've got a great way of starting with it so yeah i i think maybe it's time to let people go and kick the tires on your service if they're so inclined yeah go for it neon.tag and go have a look and most importantly if you have any feedback please reach out i'm on twitter we are on twitter we're at reactive i'm rose devrel there's the neon account and we would love to hear from you we're we're still young we're where we're learning and we we want to offer a great service that can help developers out there and it sounds like there's a decent chance your feedback will actually be acted up yeah yeah i think it's i i that's all we hope for yeah ralph thanks very much for talking to us thanks chris thanks for having me again thanks ralph and i'll say it one more time this hasn't been sponsored by neon i was just really impressed by their service so if you need a postgres instance in the cloud give them a try perhaps more generally if you're working on a service aimed at developers and you want to see an example of really good onboarding i would check them out for ideas to steal now we may not be sponsored by neon or by anyone else at the moment but one day we will be i don't want you thinking i've suddenly sold out so this space is intentionally left blank for some rampant capitalism more important than that is the currency of feedback so if you've enjoyed this episode please leave a like or a rating or share it with a friend speaking of friends if there's someone out there you think i should be talking to you'll find my contact details in the show notes and with all that said until next time i've been your host chris jenkins this has been developer voices with ralph shepard thanks for listening [music]