we're going to do the final stage we're going to end up with the self compiling compiler well in the previous video what we did was we developed a c compiler by writing it in assembler hypothetically anyway and the net result of that is you get a working c compiler that works on the particular chipset that's in your computer it could be arm, it could be intel, it could be whatever and it does what you were expected to do. it drinks in c program statements and it spits out at the other end. so it's code generator modules a binary which when suitably packaged will become an executable on your particular piece of machinery traditionally under unix and linux. these are called a dot out files traditionally and under windows are called dot x's, aren't they? but it's basically something that is very very close to a loadable venable binary as translation of your c program and we left it last time if you if you like you could say, this is our c compiler but we could almost call it the mark 1 because we're saying hypothetically we developed it via an assembler root so when it executes it's running assembler quality binary and it's also producing shall we say assembler? quality binary i'll label that compiler mark 1 so you say well what's wrong with that? why not just stick like that. we've got a compiler that works. well, it could be a variety of reasons it could be that's all though. it's running binary of quality a that binary could be not very good it could be slow. it could be a perfectly good compiler, but it seems to take forever yeah that will be one good reason for doing it there might just possibly now you hope not be a very very hidden bug that for certain c imports it just crashes. you hope that testing and debugging have removed all those but you can never be sure so there's maybe another reason that certain sorts of constructs sometimes caused it to crash. you don't want that but what you're now saying is can we use a not top-quality thing to make a better instance of itself. now this is not a new idea some of the commenters on my previous video have been pointing out the machine tool industry has been doing this for ages using a not very good tool that's on its last legs as a means of making something that's sharper and better you can imagine a 3d printer that has been produced in a component-wise way by other 3d printers and there is a vital cog in the middle of it, which turns around a lot for some reason or another and gets worn and what you'd like to do is to improve the quality of that vital cog near worried that it's gonna split apart and do it. so why not? program your machine to make that vital cog on the machine as it now is and just hope it withstands the stress until the piece is made and then when the piece is made it's got better tolerances and so on. hopefully then the bit is replacing so you take the bad piece out throw it away and put the new one in so you're actually feeding back into the machine itself a new instance of something that is vital to its running so even out there in the everyday world this business of eating yourself or producing a better version of yourself has been around for a long time and we're gonna do something very similar here. what i'm saying is ideally, i'd like to make bin a be history and a thing of the past because i'd like to write a new version of the compiler which we will call mark 2 so just to summarize this is a compiler running binary code of quality a at the moment and code generating binary of a similar sort of quality we now write a new version of the c compiler still written in c which produces better quality binary we pay a lot of attention to the code generation modules, so we'll call it bin b version 1 is a version to his be or you can think of the b meaning better best quality in some sense binary so that is what you initially write you write a new version of the c compiler which takes in c it produces bin b. you spent a lot of time on that code generation modules and of course at this stage you think of it as being written in c which it is you're writing a new c compiler in c but the burning question then comes well, i can't execute c directly on the hardware i don't have a c interpreter although in principle i suppose you could develop one know that c has got to be turned into binary. how do you turn that c? this is written in into binary when you are in the process of constructing the new thing and the answer is revert to the previous generation revert to the one that you've hoping to leave behind as a means of propelling you forward as part of the bootstrap process what we're now saying is we do it like this we write c producing bin b the new version of the compiler written in c how do we compile that c we have already got the old mark 1 version of the compiler? which you'll remember from the top of the previous sheet takes in c runs on bin a execute bin a let's hope he doesn't fall over and squirts out binary of quality a but that's sufficient to show c going in there whirring round producing binet. you've now got an executable which takes in c produces much better binary of quality b it's only weakness is that it's still running itself on binary a maybe it's still slow maybe binary a is congenitally slow. it's not being very well written at all but at least it works. it's there some final step. yes, there is that would get rid of any vestigial remains of bin a in all this process cycle. yeah, that is exactly what you do next we've got a new version of the c compiler, but it's executable is only still of bin a quality how to improve it feed the new version of the compiler to the executable that you have just created and it would go like this look, here's your new mark 2 version of the c compiler c compiler written in c producing bin b feed it through the previous thing that we developed at the end of the previous sheet what we ended up with if you remember is a version of the compiler now that can do c to bin b so it's a new version the only little weakness inside it is it's running bin a but can you see that by feeding that into a binary? executable of itself what you do is your feed your c in this is running on bin a, but it spits out bin b so what you collect in your dot exe or dot they doaot file at the end is what you want c producing bin b, but running on bin b so this is now our executable for the new version but the beautiful thing about it, is that that remaining weakness here where you use the old version running bin a to produce a version that doesn't have bin a in this at all final stage feed that back to itself and that our sound of trumpets c written and c producing bin b but as a result of the previous exercise, we've now got a version of the compiler. that is the binary instantiation of this we have got from over here a c producing bin b written in bin b well use it use it to recompile yourself and you end up? now with c written in bin b producing bin b any memories of the hell we went through with the assembly version can now be forgotten you can throw that away and carefully, of course store away your version now which only needs to get back to a bin b level of history in order to regenerate itself and i suppose you could say therefore that this triumphant thing which i put three stars on here the product we were trying for all along you can say it's now a self-sufficient compiler as well as being a self compiling compiler it's only needs a working and debug version of itself in order to be a wondrous new replacement now things are never quite that perfect there's always a downside i've got i've got a question because he kind of sort of alluded to it though. it skips over it nicely debugged right. i mean what happens if there are problems with this? you know, where do we go? you always have to retain the ability to go back further than you would wish. of course you do it yeah, i think it is fair to say that compiling a c compiler is a very heavy and demanding task for a c compiler to do you will get varieties of code usages of data structures and all sorts in a compiler that you will not likely find in a weather forecasting program. let alone an events listing date calendar whatever a compiler is a demanding thing to write is going to be a demanding thing to compile it may well be that just saying. oh here's the old compiler that the old compiler just falls over when faced with the unbelievable quality of the c you've written for the mark to the thing so yes that always happens you can feed it to itself and then itself falls over. what what do you do? well, you've got to back off and do it again, but you can see that in the end it is the way to go get yourself use the whole idea revealing something to yourself - how shall we say motivate the quality of the c that you write to be compilable and giving a mind of course to efficiency and so on all the way along the chain but i do hope that this example for those of you maybe been a bit puzzle saying what is all this bootstrapping? one of the problems i think is that even sometimes when you see t diagram explanations they make it hard by not distinguishing if you like between bin a and bin b i've seen explanations which just right bin and don't make it clear that it's a different sort of binary, you know and and that i think causes a lot of confusion so i hope this has helped. is it possible that this goes through oodles more? that's the technical term, oodles more? iterations, he got bin c. bin d, bin e. oh, yeah. yes yes, if you decide that well bin b was fine for its time, but frankly, there's a witty new idea with interlocked triple ref pointers pointing to data structures that do this and not the other and that's absolutely the way to write that next version of the c compiler then you can do exactly the same thing you be daft not to use the previous version of the compiler to compile yourself but what you must be careful of is that if you're in the process of as it were defining the subset of the language of the c compiler compiles your hope it will be total but there may be glitches in it you've got to try and write c that it's capable of compiling itself and you've got that in your mind all the time when you're doing this worst case scenario. yes, exactly yes. yes. i'm a fabulous compiler. but please don't feed me with myself all hell may break loose. yeah. yeah and the cube mouse click events we probably wouldn't get one whether the mouse is move if you think about as the mouse is being moved you've got lots and lots of events most of which you're not interested in you're probably only interested when a button is pressed or so on the only times pass that's different is it cause for your dragging something around the screen?