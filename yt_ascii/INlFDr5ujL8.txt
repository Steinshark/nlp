everyone keeps telling me to learn swift they're telling me they're promising me that it's the better version of rust okay i keep hearing this that it's like the greatest and ever i i can't believe it i have a hard time believing it taylor swift 5.9 has been released are you ready we're gonna look at what they've done and we're gonna try to make some judgments about a language i have literally never touched in my lifetime okay swift 5.9 is now available this is a major new release that adds expressive macro system to the language and introduces support for integrating swift into c plus plus code bases through bi-directional interoperability okay they've already beat rust boom boom boom they're already better okay they got they got macros they got bi-directional it introduces a parameter packs an improved expression evaluator while debugging enhanced crash handling windows platform improvements and more what's what what is this last one what's windows i thought windows was for gaming is swift for game development i don't know what that is read on for deep dive into the changes into the language standard library tooling platform support next steps for getting started okay yeah language and standard library swiss fundamental goal is to encourage code that is clear and concise while remaining safe and efficient all right all right let's see it macros macros help developers reduce repetitive plate and create more expressive libraries that can be distributed as swift picages using a macros easy and natural no one has ever said this sentence i have ever heard of in my entire lifetime nobody nobody says this nobody says this why is this sounding like rust because apparently it's like rust okay macros can either be expanded with a function like a freestanding macro name syntax okay let font equals front literal name sf mono size 14 regular okay or attached declarations with macro name attribute okay very okay so we're looking a lot like kind of rusty rust right here right you can either inline call them or what looks to be like more of a procedural one okay they work just like built-in language features but can't be mistaken for normal code okay fair you write macros using a powerful and flexible approach they are simply swift functions that use swift syntax library to generate code to be inserted in the source file this literally sounds just like rust except for rust uses sin right it just uses sin instead of the swift syntax macros can make it easy for your libraries libraries users to adopt powerful capabilities that adapt the code they are used in in the new observer observation module which allows swift classes to automatically notify other code when properties change the swift community has been hard at work for creating these tools and frameworks that built upon macros for example look at the swift power assert okay a lot of cool stuff right there i would like i mean that's it's pretty cool i'm happy that they did this i don't mind the syntax either right pound me function or what appears to be a decorator like these don't bother me i don't think they really bother me that this exists right has anyone actually bothered by these kind of things it's more of just like learning the stuff i think what static hermes react is fine for native oh we're a way off if if the generated code has problems do i get to play the game of whack-a-mole in my id and debugger trying to see if yeah so so that's the thing is that one thing rust really does well is it does have cargo expand so you can literally just call cargo expand and it will show you your source code generated from macros so you can kind of see what you messed up what you did mess up i do like that so long as they offer that it does make macro development less hard but i i still think zig is the best in this category zig allows comp time right you just right zig and you say this is ran during compile time and it just it you don't need a degree in astrophysics to figure this out like you just write zig right comp time is potentially the greatest macro like system of all time it never surprises me ever that when you say the term comp time at least one person says come time one person forever says come time every single time every single time hands down no matter what it just happens and now everybody's gonna say come time get out of here oh my goodness okay parameter packs let you write generic types and functions which will work over arbitrary number of types okay for example without parameter packs if you want to write a function call all to check whether any number of optional values are new you would need to write separate overloaded for each link yes we've seen this with okay oh this could be cool oh what are we about to see with parameter packs you can ex because like right now one thing with what's it called like axum or actix they're super special syntax magic of being able to take handler functions and transform the data of the request into your struct without you doing anything other than deriving saraday is all done but they can do up to nine arguments this is saying you could just do any amount of arguments with parameter packs you can express this api as a single function that has no upper limit allowing you to pass any number of arguments all right all each wrapped optional repeat each wrapped i don't know what the question mark is repeat each wrap and you can return each one okay okay calling an api that uses parameter packs is intuitive and requires no extra work all right if let i mean does this already look does this already look like we're dealing with a little bit of rust if let this optional int optional double optional oh yes oh that is so good i don't want to like swift i refuse to like swift i refuse to like swift i refuse to like it but that is really good oh i'm gonna be a taylor swifty aren't i oh no oh no i'm gonna do it if i if if i only knew one taylor swift song i could i could actually repeat it right now but i can't even do that i feel like a failure ownership features can help developers fine-tune a memory management behavior and performance critical code the new consume operator tell swift to de-initialize a variable and transfer its contents without copying it the consume and borrow parameters modifying provide hints that swift it can use and eliminate unnecessary copying and reference counting operations no way this is like okay well they're even going with oh camel style now too oh no i am an apple fanboy all of a sudden this actually sounds like this sounds like the perfect language okay because i've always just wanted two things i want a garbage collector for when i don't care and i want the ability to do borrow checking and all the fancy ownership transfer when i do care oh campbell like oh camel effectively has that and now swift is coming in here swift just allows it finally non-copyable strucks and enums allow you to create types which like a class can't be a meaningful meaningfully cop meaningfully copied when assigned like a struct or an enum you do not need the you do not need to be reference counted because only one storage location can own the instance at a time i mean that sounds actually really good swift five point this actually sounds incredible status bar tax if not has connection disconnected else if let error equals oh i like this oh i like that else ready okay i like this additional features include smaller quality of life changes to the language like the ability to use if and switch expressions for variable assignment love it love that this is great this is great because i don't love ternaries and you can't really do if else in turnaries they just get totally effed up right people try to do if else is by chaining a couple ternaries this is nice i don't see swift and mason that's fine it's pretty easy to get your own lsp in a new package access leveled lets other modules in the same package access apis but hide them from code outside the package oh like the default scope in java it's great for splitting up large modules into verse smaller ones without exposing internals okay cool like that i like that developers using swift concurrency may appreciate the more convenient discarding task group types for task groups that don't generate results and advanced custom actor executors features for controlling the exact environment in which actors run okay okay crash handling apparently on linux the swift runtime can now will now catch program crashes and swift runtime errors and display back traces on the program's output okay good that's nice back tracer is out of process and includes support for async functions all right awesome i like to hear this feature is also available on mac os but is disabled by default to enable it you need to do it of course of course because because it of course it's always inconvenient debugging it introduces a features to the lldb and swift compiler aimed at making swift debugging faster and more reliable the pnpo commands now print local variables and properties as fast as the frame variable or v commands by bypassing the swift compiler when evaluating simple expressions okay cool stuff let's just move on just a little little niceties nice niceties good i like that now supports bi-directional interoperability for c plus plus and objective c plus what the hell's objective c plus plus wait hold on i thought it was just objective c there's objective c plus plus is that real i mean i've done a i've done a decent amount of objective c what the hell is objective c plus plus what the hell is even that i i have done a pretty decent amount of objective c which by the way the worst language i've ever used i hated it i had to program an xcode it was january it was genuinely objectively ass yeah it was awful all right five nine sports bi-directional interoperability for example we can do this one clang module prompt responder okay we got a little pragma once baby include this vector generate responses okay you call it directly from swift code generate responses oh i wonder how the compiling looks on this i wonder how you set these two things together because this looks nice i mean that's kind of incredible can we agree like if this is really true you just like do the thing get it that'd be wild that would be wild c plus plus interoperability is actively evolving with some aspects subject to change in the future releases as the community gathers feedback from the real world adoption and mixed swift and c plus plus code bases for information on us so again this is where i still think zig might be the better choice but now i'm curious now i'm actually genuinely curious how how good is swift for information on enabling c plus plus interoperability in this supported language subset please refer to the documentation really what i want to see out of swift is how easy is it to do servers right how easy is it to just launch a server and do templating of html that's what i want to see can i launch servers can i do templating of html and can we call it a day or is it going to be a pain in the ass because right now i'm not loving rust for that rust the best way to to do this the single best way to do it in rust is to use leptos honestly i can't find a better way to use it okay i think this is literally the best way to do html templating and rust is using leptos i think greg was always right look at this look at that beauty i did right here look at how beautiful this is but nonetheless i think greg is 100 right leptos it's great but go go has it naturally supported so it feels so good right it feels so good i prefer the problem i have with templating languages in rust like leptos is that it allows you to be too complicated by accident right and so swift on the other hand if they just have a nice templating language the one that just allows your basic templating and top-down thinking to happen that'd be fantastic all right a swift package manager okay nice to have their own package manager awesome so swift is like a fully function a fully functioning modern language package manager build tools debugging all under one roof fantastic packages can be used can use the new package access modifier allowing the access of symbols in another target slash module within the same package without making them public swift pm automatically sets the new compiler configuration to ensure okay cool compiler plug-in support enables defining macro targets macro targets allow authoring and distributing custom swift macros okay interesting so they just have a bunch of cool stuff none of the stuff really i think largely matters to me this is how you write the the macros awesome okay cool server okay yes custom actor executors and other features from swift 59 are making their way into swift on the server ecosystem the servers work group also recently published their annual update okay details plans for increased adoption of concurrency with key libraries as well as other efforts nice nobody cares about windows platform all right next steps this is how we use it okay so swift looks good i think i'd like to just try swift for like a week or two just to find out is it actually great or is it not because i like i said i'm still looking for something that's like go but with more of a type system like rust you know what i mean i want that i want that swift easy development of go and just the amazing standards see they've kind of went the opposite route as rust russ says we're not going to do anything in the standard you're just gonna always use the ecosystem and goes like no we'll give you an amazing standard and their standard is like awesome and so that's why ocam will seems so appealing because ocamel really has potentially those two swift potentially also has those too you know what i mean yeah i know v laying yeah vlang it was trying to be this vlang was trying to be it but it does appear to be vaporware unless if i want to see some real i want to see some big changes you know what i mean i want to see this i will be doing the fire we'll be doing that next okay there you go this is awesome i'm happy about swift i like it the name is i could be a swift engine i could be okay i have a future swift agent in me