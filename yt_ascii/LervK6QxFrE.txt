uh the cat is out of the bag we're working on roll down a russ port of rollup focus performance is the best effort compatibility with rollup goal replace es build and rollup invite with a minimal impact on end users okay okay i'm curious about this which is how much faster is putting all like what because i thought es build was the big win here because at that point es build's doing all the major translation and then you're just putting together all those fils i guess yeah you could say i mean is writing all those files is that really the slow part is is it really just the node bindings to writing files is is slow enough that it requires it my question is when is the tail tailwind lsp happening i know because i mean most the time with these rollup things i assume is going to be mostly spent in in just like writing files i guess you still have a bunch of plugins plugins are going to be still done in javascript so it's like is that ever going to be is that ever going to be really slowed down yeah i mean i know that that no note is slow on writing files or slower on writing files and it could be improved because the thing about writing files and that kind of stuff is that there's nothing really to it that is javascript dependent on slowness does that make sense like javascript shouldn't be slowing down your your writing a files that's what bun kind of bun kind of points out so if you get to write your plugins in rust yeah i guess that could make things faster if you're walking in and rust that would make things faster absolutely but i mean but now you got to have all these people rewriting their plugins in rust is that actually going to happen we'll do it i'm curious about what do significantly faster production builds look like it will provide so this i mean obviously let's see stronger dev prod consistency i'm not sure what that means more robust ssr dependency handling more control over chunk splitting okay that's i mean i guess that's interesting is but you could do the same thing i assume you i'm this is the only one that you would really get out of rust right i don't get how there'd be difference here or difference here or difference here other than you're just that the original ones weren't built well oh and he explains it okay he is explaining oh nice nice of course it'll be a lot of work okay it's a work in progress very exciting core contributors are xrs pack team members nice very very cool very very cool and so the state of vite vite comp okay very cool for forgot to add that roll down will be will of course also be usable as a standalone dependency if vite is too much for your use case interesting because we use rollup pretty extensively on netflix so this could be a a really amazing thing if it actually does improve the performance i'm just curious how much it actually is going to per you know really improve performance because right now like es build plus that is pretty fast you know again you have a bunch of javascript plugin you're going you're just you're constantly doing that you use rollup where you know where what's rollup it's like another build system just think of it that way it's another build system roll rollup is a nice yeah is is a very very nice build system for javascript it's i'd say it's one of the better ones anyways i like this i'm excited about that yet another js build system yeah i mean we are definitely in the renaissance of building tools for javascript again and again and again in the last year how many new versions of builds of things have happened like there's been a lot there's been a lot a lot a lot a lot a lot a lot and so i'm curious if we're going to stop needing to build more things right because what are we actually getting out of this to me it just says that i mean honestly here's my real take is that we we just use javascript beyond what its usefulness is that we've extended javascript so far are that we're using it for all things and then we realized ah it's not that great to be used for all things and now we're trying to still build tools to make it so that we can use it for everything but we still have to have like some of the tools in rust to try to make it you know worked you know i don't know i i don't think guam is going to save us the only the only way for something to save us is something more like htm x or hot wire or whatever it's called live wire live wire i've never used live wire i'm not going to you know you know i never used it but that's that's really the only way to actually improve dramatically i remember lime wire live wire i think that's honestly the only way we're going to see real improvements in the system is that you stop relying on javascript as the sole language for everything also i think another thing that would really help is if we if we more regularly use protuff i think if protuff tooling improves that would be a big w because right now proto buff tooling kind of sucks it's not that great it's okay like ts ts protuff is pretty good but this notion that your your front end and your back end have to share a language because that's the only way to share types is just like a fundamental misrepresentation of programming the reason why you need to share types is because you keep using an untyped format to talk to each other i would love to see more of it though i think that would really help is more typed scheming happening and this idea that we got to stop saying that what's it called to share types the only way to share types is to share the same language which i think is just fundamentally broken right it's just a fundamentally broken idea like i get the idea that it's good to do that and that there's something really nice about having one language to write an entire project in but i'm not convinced it is the best way i think language specific domains are the way and so i'm not really quite buying anything else anyways this is cool though i i i'd really love to see the actual times winning here cuz when i use es when i use es es build the build times are like a tenth of a second right so am i really going to get something faster than a tenth of a second if the difference is a tenth of a second to a 20th of the second it actually doesn't it doesn't actually build anything for me you know what i mean in real talk if you're just also use if you just also use go on your back end the build times are like one millisecond have you ever thought about that one one millisecond that's it it's just one just one it's just like a singular millisecond the name is i just look at me go i just mentioned go and hmx in a single video a j