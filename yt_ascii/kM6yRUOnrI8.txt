hi everyone in this episode we're going to be adding mesh colliders to the generated meshes that we can have a character walking along the terrain if we want so let's head over to the endless terrain script and come down here to the terrain chunk class and then here we've got the mesh renderer and mesh filter variables let's add in a third one a mesh collider variable and then here where we're adding those components to the mesh object we created we can also add the mesh collider component and assign that to our mesh collider variable just by saying a mesh object dot add component and adding a mesh collider component alright so then we just want to assign the mesh to the mesh collider when we receive it so down here in the updater inchon class over here where we receive the mesh we can just say mesh collider dot shared mesh is equal to the level of detail mesh okay so let's quickly run this in unity it's going to generate all of these and if we just select one of them we can see that it's got the mesh collider component added and the mesh has been assigned as well one quick thing i'd like to do is just make it this preview mesh automatically hide it hides itself when we enter play mode so we don't have to do that manually so i'm going to make a simple little script called hide on play and that's just going to have one line in the start method saying game object dot set active false okay and we can assign that to the preview mesh all right let's now import one of unity standard characters so that we can test out our collisions so it's going to assets import package really import the character package now i don't want all of this stuff treasuring up our project so let's be a little bit careful about what we import you don't want any of the editors stuff and then don't want any of the utility stuff or the cross-platform input we might need some of these physics materials i'm not sure the characters we don't need any of the audio we don't need the guidelines let's just take the rigid body controller we can remove the other one which means that we don't need this script and i'm not going to worry about the head bob script either certainly don't want rollerball and i don't want the third person character all right so i think we've just got the stuff we want now so it can import that it's probably not going to work you can see we've got an error here because it relied on some of that other stuff that we didn't import but who can fix that fairly easily let's just go on to the rigid body controller script and we'll remove this using cross-platform input line which means that we're going to have to change all of these to the standard unity input class and there are a few more down here we've got them all and they're probably going to be a few in the mouselook script as well let's remove that using line and replace these it's all right in the rigidbody first-person controller script i'm just going to find the update method there's also just add in an easy way to pause the game in the editor so we can say if input dot get key down so if we press the escape key then we're just going to pause the game by saying debug break all right so that all seems happy now let's go to the prefabs folder and drag in a rigidbody controller into again if we just go into the main camera here we can see that the head bob script officer doesn't exist so we can just remove that let's just apply the changes to the prefab all right so i'm going to put this at zero zero zero in the world and just move it up a few units and then let's try this out so i'm going to drag the game window over here so that the aspect ratio to sixteen by nine and press play and see what happens so it takes a while for the terrain to spawn in because of all of the colliders it's now having to calculate but we can walk along the terrain which is very exciting and also jump around i'd like to be able to walk a little bit faster so i'm just going to go into the movement settings here and give myself some super powers i'll say if ford speed it's fifty and maybe the jump force is say a hundred and fifty all right the terrain is getting generated is also super massive so perhaps we can just go into the endless terrain script and turn the scale factor down a bit to maybe just to of course this character is now the thing that's viewing the terrain so we no longer really need this view object keep it around i'll just disable it for now but on the endless terrain script forget you want to set the rigidbody controller as our new viewer object and then just as a matter of interest let's also bring up the profiler i'll just dock that over here and i will just make a little bit bigger and then let's press play so we should be able to zoom around the terrain and it should load in as we move around since this is now the new viewer object and so you had a little spike there just with the game froze for a moment and that seems to be happening every now and again i'm just going to hit escape to pause and we can go along the profiler here you can see this big orange spikes if we go over those we can find out where those are coming from exactly if we just drill down here we can see it's coming from mesh bakke physics collision data that's taking 340 milliseconds which is obviously why we're seeing these spikes where the game freezes so the only way we can really turn that down is by not generating so many colliders at once and also by reducing the number of vertices in each of the colliders that we create so let's say that we're only going to add a collider to the mesh when the player is actually quite close to it and we're also not going to use the full resolution mesh for the collision mesh i will use one of the lower levels of detail for that so in the endless terrains worked let's come down here to our level of detail info struct and we're going to add a public pool to this called use for collider all right so then over here in the inspector we can choose which of the level of details we'll actually have its mesh used for collisions so i'll use the second level of detail here we'll probably want it to be a little bit more detailed than level of detail for because that's going to result in very inaccurate collisions it'll probably be extremely noticeable i'll change that to one which is just one lower than our highest level of detail and just that there's not so much discrepancy between this and the next level of detail maybe turn this down to four and i'm also just going to decrease these ranges here i think it's a bit excessive so this will be visible within a hundred units this may be 250 units and this can be 400 units all right so now in the constructor here where we're creating all of the level of detail meshes we're going to want to store a special reference to the one that is going to be used for our collisions so a pls create a level of detail mesh variable called the level of detail mesh and then in this loop we can say if detail levels i dot useful collider then the level of detail mesh that we've just created is the collision mesh so we can say collision level of detail mesh is equal to level of detail meshes i all right so now in the update arrangement method we no longer want to assign any old mesh so we'll remove that line and instead outside of this whole if statement here we're going to say only if the level of detail index is equal to zero so only if the player is close enough for the terrain to be being rendered at its highest resolution are we going to bother adding any collisions so if that's the case then we're going to check if our collisions level of detail mesh actually has a mesh and if it does then we can simply set mesh collider dot shared mesh equal to up collision level of detail mesh top mesh otherwise we're going to check if the collision level of detail mesh has had its mesh requested so we'll say if not collision level of detail mesh dot has requested mesh so if we haven't yet requested the collision mesh then obviously now's a good time to do it so we can say collision level of detail mesh dot request mesh and pass in the map data ok let's save that and let's press play so if we just pause quickly and go here we can see that only the highest level of detail turin chunks have got the mesh collider mesh as and phil achates there is no mesh assigned to the mesh collider component and we should also see that the mesh are being used for rendering consider it's got 57,000 vertices where is the mesh being used for the mesh collider has only got 14,000 vertices so let's play this again and if we just stroll around a bit we should see that it is running a lot more smoothly than it was previously we are still getting these spikes unfortunately that can't be entirely avoided it's still the physics baking the collision data missed out around 60 milliseconds where it was 340 previously so the only way we're really going to improve on that time is by decreasing even more the number of vertices in the collision mesh and we can look at some advanced ways to do that later on but for now we're just going to be content with 60 milliseconds what i am interested in though are these blue spikes over here over here and over here which represent our scripts so if we just have a look here you can see it's taking 36 milliseconds for the map generator to update but unfortunate we don't have enough information to tell us exactly what is taking so long in the update so i'm going to quickly turn on deep profile which usually makes things run quite slowly but it will give us the information we need so let's move around a little bit and we're getting some of those spikes so let's pause and let's try find out exactly what's causing that so this is 301 milliseconds here you can open that up 301 and it up so it seems to be coming from the mesh data dot create mesh and the majority of that is from the calculate normals method so we now know what the culprit is we can turn off d profile and let's head over to our mesh generator script down here at the bottom we're calling calculate normals which is a method that we created last episode so what we can do is if you recall crate mesh is being called from the main game thread however the rest of this the generate terrain mesh method is being called from a separate thread so it should be great is if we could move the calculation of the normals onto the separate thread instead of having it run on the main game thread so what we're going to do is we're going to create a vector three array called our baked normals and then down at the bottom here we can have a public method baked normals and it's simply gonna say baked normals is equal to calculate normals and then when we call create mesh we'll just set mesh normals equal to the normals that we have baked and then this method is going to be called at the end of the generator a mesh method just over here mesh data dot bake normals that way it's being run on a separate thread so if we play this one more time we should see that once again the performance has increased slightly so we're making some progress i hope you enjoyed this episode and i'll see you in the next one cheers