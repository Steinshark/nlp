if you want to learn how pointers work and see stick around we're doing that next on low level learning [music] in this tutorial we're going to be talking about pointers and in order to understand pointers we first need to understand program memory so i've made some memory up here and the columns from left to right are the address of the memory the value of the memory and the name of the memory or the the variable name as tracked by the compiler right and what we're going to do is we're going to walk through some declarations and see and see how they affect program memory to kind of get a visual of what's going on when we make pointers so let's look at this first one right this first one is really straightforward integer x equals four what does this do it says that i'm creating an integer whose name is x and it's equal to the value four so what the compiler will go ahead and do is add some address on the stack which this is the address here we'll call it zero zero zero four it will make an address named x and it will put the value four there so now the compiler knows whenever we're talking about x the name we're talking about the value that lives at this address at address004 right pretty straightforward that's basic variable declarations in c let's move on to our first pointer declaration so what this is saying here is that i declare an integer pointer right that's what this part means an int pointer an integer pointer whose name is my pointer and its value is equal to the address that's what the ampersand does it's the address of something the address of x so if we actually go into our table and we look at my pointer as it's now called my pointer's value is the address of x those are the same so whenever we talk about my pointer in the compiler again the compiler knows we're talking about the thing that lives at this address and what lives at this address is this value and this value just also happens to be the address of x pointers are just values that happen to be addresses it's really not that complicated so to kind of solidify that concept let's take it up to hard mode and we'll do one more example make it a little more complicated all right let's step it up one more notch okay in this example i have an integer pointer pointer or a double pointer and all that means is it's a pointer to an integer pointer right we're doing some point reception here but it's not that bad so an integer pointer pointer whose name is my d pointer and its value is equal to the address of my pointer so take a second put your thinking cap on pause the video i want you to think about what the value of my d pointer is going to resolve to all right take a second pause all right the value ends up being ox7ff008 right because i said my d pointer's value is the address of my pointer so it's this value so now we have this link this kind of list getting created here where this points to this and this points to this right excuse my art okay anyway so now that we've kind of in a very abstract concept figured out how pointers work in ram let's go into the c write a little bit of code and figure out how pointers actually behave when we create them so on the left here we have my editor right trusty old sublime and on the right we have my command line where we can compile and execute our code and we're just gonna mess around with those declarations which we talked about before so the first int x equals four very basic c statement we're creating a variable on the stack his name is x he's an integer type and his value is four cool so let's write our first pointer and what the pointer is going to say is my int pointer his name is my pointer and his value is equal to the address of x and all we're saying is that we've created a pointer who points to x right really straightforward and we can actually explore the different values we've created here by writing a printf statement and we're going to print x equals percent d for decimal and my pointer equals percent p for pointer throw in your new line and add your format strings so x and my pointer don't forget your new line or don't forget your semicolon rather and write return zero gcc compile your code get it to run all that good stuff and then run it and what actually happens is pretty similar to my drawing right x is 4 which is the value that we set it to and then my pointer is equal to the the value of a pointer is an address right and this is actually the address of f of x right not that complicated the question then becomes how do we explore what lives at my pointer that is called a d reference and we'll show you how to do that right now so the thing pointed to by my pointer is equal to it should be a decimal type right because we it should be x and then we're going to do what's called the d reference so when you're talking about pointers outside of their declaration right so any other use of them to get the value that they point to you type a star that's called a d reference we're going to de-reference my pointer this statement should say 4 because we're just saying what is the thing pointed to by my pointer it should be x four boom the thing pointed to by my pointer is four really straightforward let's take it up one more notch i'm never gonna leave it easy on you guys right int pointer pointer my d pointer is equal to the address of my pointer what am i saying here i'm saying i have a pointer to an integer pointer his name is my d pointer and his value is the address of my pointer let's do the same thing we did before we're going to explore what it is it should be a pointer going to say let's leave let's leave it at that right now let's keep it keep it easy okay good so our our sanity check has passed it is still an address it's still just another address on the stack this is actually the address of my pointer right what is the thing pointed to by my d pointer this should be what it should be my pointer right it's the thing that my d pointer points to you which is just another inpointer good so we've done our first layer of dereference and then the second layer if we double dereference this what do you guys think is going to pop out the answer is drum roll please it is x right because this pointed to this and then this pointed to x and once we double dereferenced it we were able to get the end value in our in our list per se anyway guys i hope that that was enlightening i hope you learned something if you did drop a like leave a comment hit the subscribe button i put out content like this every week anyway keep on learning and enjoy the rest of your night thanks guys bye-bye