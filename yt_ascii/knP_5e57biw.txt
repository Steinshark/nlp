so without pointers we'd find it really difficult to build a general purpose cpu that can do anything rather me drawing it let me get out my book back from the thing of the original ibm pcs 8088 and effectively when the mac boots up when the pc boots up they boot up like this now what do we have inside of cpu well there's there's a bit of it which will do all the arithmetic do all the logic so we'll add numbers together it'll do various boolean algebraic things we'll forget about them for now we'll talk about them some other time probably already talked about them the other thing you've got are registers so register is just literally a small place where you can store a bit of information well some of them do store a bit but actually you're going to store a few more bits and then you'll get a bite or maybe two bites worth so let's go with what the 8088 had and it can store generally the vegetables are either a bite or two bites if you have a look at this book on programming the 8088 project book it's got a list in here of the various bits inside it so we've got here we've got the arithmetic logic unit some registers here some more temporary registers and then these general ones here and a few more that we've got around so we've got some 8-bit and 16 bits we can combine to use it either way and then we've got the 16 bit oh look pointers we'll come back to that so all these registers do is allow you to store a 16-bit value or an 8-bit value so they're built into the cpu and the instructions in the cpu will let you set a value in them add a value to what's in something in there or read a value from bond then that's fine you've got what one two three four sixteen bit or eight eight bit values that's not much data and you also got the problem is well where do you get the program from how do you get more data out of your memory to access it well the way you do that is if you look you have other registers which are called pointer and indexes and this is why you need pointers or you can't build a computer because what these are used for is that these say well okay i don't have this value here but i'm going to store here where it is in memory so i'm going to store in say for example the stack pointer not the stack but i'm going to store a value that points to where the stack is in memory now really easy way to understand how pointers work think of it like the index of the book so if i want to know about the stack pointer i will go to the index if i can find the index and somewhere it says stack pointer here we are stack pointer see pages 9 and 10. so if i want to find out something i don't go to page 910 where it is i go to the index and it tells me where it is so then go to page 9 and tap pointers work exactly like that they tell you where to find the information just like an index in a book simple right now why do we need them to make the computer work there's two reasons why i knew them firstly how do we execute code well the code the program the instructions is going to execute stored in memory and you need to know where that is how does the cpu do that go back to our thing and if we look carefully we find among these registers we've talked about the 16-bit pointer registers oh look over here 16-bit segment registers and the instruction pointer another pointer again it's a special register and all this is doing is storing the value of where in memory to find the instruction you're going to execute so when the cpu wants to execute an instruction which is what it does all the time it goes to the instruction pointer and it's got the address of where that instruction is so it'll look in the instruction point and it'll contain say fff f0 and hex that's the initial point where a pc will start executing code when you switch it on so it goes to that address looks that up in memory and gets the value that's in memory and reads it into the cpu where it can start processing it will get that instruction executed whatever it is and then it'll increment the instruction pointer by however big that instruction was eight 8088 instructions could vary in size it'll be one bite two bytes etc these days they can get up to 16 bytes on a x86 chip but it'll increase the instruction pointer to point to the next instruction and then it does the same thing so it looks up where the instruction is in memory fetches it and so on so if we don't have pointers we can't actually even execute code we need that instruction point or as it's called on other cpus the program counter same thing it's just clearer here on the x86 this instruction point we need that to know where to go and get the instructions so without pointers you can't make a cpu work or get values from memory at least that's fine for executing code but this needs to execute on data how do we get the data in the same thing we have pointers that contain the address or registers that contain the address of where data is in memory so every time you access a variable in c the assembly that's generated is almost certainly going to be getting that out at some point for memory and putting it into a register in the cpu and that will be done by having a pointer a value of where this is in memory going and fetching it and then using that in the instruction that's being executed whatever that might be to add saved onto another register or whatever the cpu needs doing so again without pointers you can't get data from memory you can't store data back into memory so you can't build a computer without computers you can forget your functional program you can forget your y combinator you can forget your hash tables your linked list anything you cannot build a computer without pointers these leaks happen all the time and so passwords are being just dumped out onto the internet all the time so there's this password list called rock you which is a bit of a game changer in password cracking if that's a thing right and basically it's 14 million or so passwords i think