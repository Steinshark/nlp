okay first off i would like to just say that one of the easiest ways to get fired is by making a very public article about how you never work just throwing it out there maybe you want to keep that secret sauce for at a later point in time okay maybe you want to come back later on and talk about it because you know when you say this it kind of feels like like the employer could do it back i love you you know what i mean they could claw back those options they've given you and everything it just seems a little risky hey thank you very much for all those subs well i don't even know how to say your name a cat i'm gonna call you cat i'm gonna call you manager cat and boner shot and or resven thank you very much yeah thanks to the effort you put into the community prime name no problem baby all right but alerts are off let's read this and i'm gonna be pissed off about it it's like bragging about getting away with a crime and then getting caught it's like when o.j simpson wrote the book if i did it all right there's a guy just being lazy i couldn't even with a is that deep v going on when twitter fired half of its employees in 2022 and most tech giants followed suit i wasn't surprised was twitter the first people i don't even remember what twitter was the first person were they were they the first person were they the first company that did the firing anyways in fact i think little will change for those companies after being employed in a tech sector for years i have come to the conclusion that most people in tech don't work i don't mean we don't work hard i mean we almost don't work at all is this true can i can you press a one in chat if you just barely work it all one in chat if this is if this is your experience press one in the chat if this is your experience okay well there's significant more ones than i ever expected to see not that much how about this one let's let's just let's just measure the speed really quickly how about two in the chat if this isn't your experience okay a little girth here a little a little bit more thonky there right there okay okay two intern nada zilch and when we do get to do some work it often brings low added value to the company and its customers this must be some sort of tongue-in-cheek sentence i bet you i'm being had right now all of this while being paid an amount of money some people wouldn't even dream of what is happening right now in tech may be one of the greatest market market inefficiencies or even deceptions in history and i am writing this article because i think outsiders deserve to know what's really going on in the field okay just so everybody knows my personal experience is that i work hard and everybody on my team works hard and there's tons of code and commits to really prove just how much effort we all put in and this is the craziest article so far i've ever read in my entire lifetime but let's find out hey maybe it's a joke i know my statement may sound a little bit hyperbolic how could people be consistently paid a lot to do close to nothing surely that can't be right well let me share some examples from my own experience classic this is what happened to me therefore it's everybody five butts go i was hired as a software developer by one of the world's most prestigious investment banks okay i would already like to say that this might be part of the problem okay just throwing it out there that banking software and twitter very different i mean i heard twitter twitter i've heard stories about twitter apparently but anyways five months ago he was hired here okay while i prefer to do freelance work because it involves real work i was looking to have something a bit more a bit more stability for a while so i gave a chance to a normal corporate technology job since the beginning of my employment five months ago i've worked around three hours in total when i first joined the company i was excited however since i joined they've only given me tasks that were exceedingly easy to complete in just a few minutes but allocating days or even weeks to to them at first i wanted to speed things along i genuinely wanted to build a cool product so i connected with people across the organization to ask questions about the our intended users their needs and how the product would satisfy them but it soon made clear a few times that i shouldn't do that one person told me i don't want to tell you not to ask too many questions but and she basically told me not to ask too many questions okay so right away i see so first off what is this most prestigious banking institute going on over here maybe a few a few more of us would like a job here so i can spend the rest of my time learning rust and pretending i'm using it in production i mean that might be pretty that might be pretty cool i mean i'm just saying is it still svb oh it's svb very prestigious bank by the way i soon realized that the project was overstaffed and most people were pretending to work and also i realized that that was the job i was hired to do my job was to pretend if this had been only the only time this ever happened to me i would consider it an anomaly unfortunately this has been the case with almost every tech shop i've had for years what okay i've never seen this okay i had my first job i did kind of have it kind of it was like maybe 20 hours a week i had to work but that's a lot different than three hours in five months consider the case of my previous tech job in which i was hired as a data engineer for the world's largest telecommune communications companies in a year and a half that i worked for them there was only one two week period which i did which i worked at full capacity the other than that i almost did nothing at all for the remaining' months also those two productive weeks most of my work involved attending irrelevant meetings performing small tasks to pretend that a broken product would work well and even generate fake results i felt ethically compromising it felt ethically compromising and it was boring i only worked half an hour a week or so non-focused meeting aside i could go on with many other similar stories personal stories but you get the gist this isn't just me all of the people i know by the way people quit calling it a guest on github okay it's a gist just accept it just like it's a gif just accept it all of the people i know who work in tech seem to be going through the same thing one of my former colleagues for example told me that all he does at work is watch coursera courses hey i like tom tom's good guy he's considering resigning after the company's sponsored coursera subscription ends another former colleague was hired a year ago as a data scientist for a large oil company she's making 200 000 pounds a year will pound me with that salary all she does is prepare a powerpoint presentations every week and she's utterly bored yeah that would be actually pretty boring but geez louise another one of my friends was hired two years ago as a quant for one of the world's most important investment banks yeah that one is it the previously mentioned one the interview process for that kind of job is among the hardest you can imagine brain teasers differential equations graph algorithms really difficue are you doing like a salty brine solution or are we talking about a laplace transform like which one are we talking about here he was very excited at first thinking he'd be building cutting edge technology however while people always seem to appear busy from the outside in reality he does almost nothing at all and is horribly bored but well paid what okay real talk okay the rest are comments okay i was like dude i'm like not even that far into this and you're telling me that i'm not even close all right so here's some reasons let's find this is a troll is it a troll how do you know this is a troll business people love predictability so they estimate in advance how much a project would cost and how long it would take this can be surprisingly difficult in some disciplines even when building a physical thing like a railway of projects often overrun significantly yeah every project does london's latest train line for instance was delayed by two years two days before its inauguration imagine how much worse the situation gets with intangible products like software where it's hard to define exactly what it takes to deliver the product and even what the product is so in the early 2000s the philosophy called agile which sought to improve software development process became really popular in tech in agile software is developed in very short cycles as short as two weeks and the result is validated and goals realigned between cycles agile every couple weeks the team gathers a plan let's see to plan the tasks for the next cycle but in this planning phase something really strange happens it becomes the standard practice to highly exaggerate the efforts required to perform a task which is called task bloating okay this hat okay i'm being trolled am i being trolled right now am i being trolled no we'll analyze the reasons for the task bloating in a minute but let's share a couple examples to you so you can see the extent of the problem one of my recent tests in the investment bank was to it analyze a couple of software code templates provided by microsoft could be used for anyone familiar with software development would be able to do this in a couple of hours at most however in our planning session it was collectively considered that this task required many days of work and two people the difficulty of the of the of tasks is chosen by vote in this company and in this case the collective wisdom decided that the task was relatively hard i voted that it was easy which didn't match the majority vote when they inquired about this i conceded that it may be more difficult than i thought after all it is hard to disagree in those situations because you seem to be going against the collective wisdom of the team just do it also when you notice that every single task is bloated this way and no one says anything you don't want to challenge the system oh i challenge it ruin the whole system burn that down as two of us were assigning assigned to this task we ended up splitting it into two even even easy parts one for each i completed my part in a few minutes and pretended it took much longer in the following cycle i was assigned a task of writing a paragraph summarizing the results of the previous task i voted for a difficulty score of one the lowest possible and it was ranked and it was a 10-minute task however my colleagues didn't agree they voted that my task was harder than it looked worthy of several days of effort by the way just so you know if you if you do this if you take the time to do this and this is how you're living your tech life i want you to know that your skills are going to atrophy like none other like you are going to become irrelevant faster than almost anything unless if you can somehow manage to also be working on everything that is actually like really engaging because one of the hardest things you can possibly do is actually make a side project that has legacy that has to learn how to actually do something learning a like learning rust is great but using rust for a year on a singular project is real right that's much much different okay building a toy project is not anything like anything else atrophy the more and more you don't use something the weaker it gets if you just don't program aggressively and think about problems and solve creatively around stupid things that arise in legacy systems or have to deal with weird data formats coming up with ways to be able to actually build good solutions on top of a shitty ground you are really just allowing yourself to become worse and worse as an engineer and as time goes on you're just simply not going to be as strong that's what i mean by that not a trophy it's a trophy you mean it's a winning sign i guess i let's see if i had to guess i'd say bloating factor was at least 10 let's see of at least 10 is the norm but 50 or over 100 isn't uncommon i've literally never seen this by following the practice of bloating almost universally i always multiply everything i think it's going to take by three and i often undercut myself but 50 or even 100 isn't uncommon by following the practice of task building almost universally the bar at which tech employees expected to do their time has been collectively lowered what is this well what is the cause of the blowing it's tempting to become cynical and to think the majority conspiracy that helps lazy employees not work and lets company overcharge their clients but i think that although there may be some truth in that there are more profound causes let's have a look how agile recipe kills productivity okay i like this take already the principles behind agile software development are commendable and much more suitable for the job than old school ideas so many organizations have strived to be agile however they have done so by adopting agile recipes which are step-by-step guidelines that are supposed to make a team agile the most famous one is scrum the adoption of the recipe results in a box ticking exercise that makes companies believe they are becoming agile just by strictly abiding to a set of inflexible rules the effect is the opposite i i do agree with this i like that take i do think agile is a universal slowdown universal we already spoke about one of these rigid rules that work must be divided into clearly defined cycles usually called sprints and that we must try to predict the difficulty of the tasks to make sure they fit within a sprint this structure encourages task bloating employees want to deliver on the promise they make for the sprint yeah so they end up loading the task to be sure they complete them within the sprint i just said i do a 3x online so productivity is sacrificed in the name of predictability the rigid let's see the rigidity wow rigidity i haven't heard that term in a while the rigidity of sprints also creates other inefficiencies for example if a new employee joins the team in the middle of the sprint more often than not they aren't assigned any work until the beginning of the following sprint what what so due to glorification the methodology a new joiner is left with nothing to do everyone seems okay with it also if someone announces they've completed a an assigned task before the end of the sprint in practice they are rarely signed a new task until the beginning of the next sprint or leave them completely idle and they are assigned a filler task like provide support to james on his task what what the agile recipe also manages the day-to-day work creating even more inefficiencies for example it prescribes exactly how a team should meet and how long the recipe says for instance that the entire team of support is supposed to meet every day for a short debrief called a stand-up meeting in this meeting every team member gives an update on the current tasks and potential blockers the idea of a stand-up meeting is to create some sort of team synergy but i have never seen that happen it soon becomes a box ticking exercise most often employees use this time to tell the manager what they have done and don't communicate or listen to one another it works for the manager who believes from being updated but not or who benefits from being updated but not the others yeah i agree totally with that statement this is very based this outcome is very based some of it let's see if some verses of the agile recipe also requires employees to do a demo after they finish these tasks and which showcase to all the other team members what they've done wow and also at the end of the sprint all team members must participate in a long joint session to do self-reflection into which every employee speaks about everything that has been done this is do a demo every time as you can see a lot of work and tech involved meta work that seeks to plan or to discuss actual work you first speak about the work you will do then you'll speak about the work the work every day for two weeks as you do it since tasks are really bloated this requires a lot of pretending then you demo the result of your work and you collectively reflect on it very often the meta work is almost the only work you do as the 15-minute debriefs and planning sessions take longer than the completing the bloated tasks themselves i once attended a planning meeting in which it was discussed for 20 minutes whether a task should be included in the next sprint or not the task could be done in five minutes i have a let's see i have joked that for the reason facebook became meta is that all of its employees do meta work okay i am completely out of date or this is completely crazy one of the two this is insane the day-to-day inefficiencies introduced by agile recipe have the effect of aggravating task bloating for one thing meta work ends up taking people's time i once asked a lawyer friend who's very busy whether he does daily catch-ups with the associates he told me no we're way too busy for that we cannot afford to be constantly meeting to catch up as we have important things to do he was surprised to hear that's what we do in tech but the constant meta work also kills productivity by interrupting an employee's flow for example when a coder faces a difficult task sometimes the best solution is to spend a couple days of thinking about it or doing research in a focused freestyle way it doesn't help having to constantly interrupt work to speak about work or notify everyone what you're doing every step of the way yep unfortunately angela's become a cult some even call it a religion if you could suggest that methodology may be causing unproductivity its proponents double down and say it's because you haven't had a strict enough in following the recipe or have misunderstood the recipe that they may hire an agile consultant to help out let me i hear there you go i'll help i'll help i'll help out with that one let's just do that really quickly all right one of my friends mockingly used to say that agile is communism the reason it's never worked is that there's never been one applied correctly got him got him because i think the agile recipe as seen as hearsay or heresy sorry dude that was pretty good for example i won't suggested it's no true scotsman ever ever existed here for example i once suggested that i wasn't all sure the reoccurring meetings to catch up for the best use of our time i was told well in this company we enjoy teamwork don't you universal adoption of agile recipes has hijacked techies work and no one is incentivized to work at full capacity or keep the product and the client has the top priority and set employees main goal becomes to abide by the methodology amen how hype destroys motivation in the world of tech hype is rife when a new technology emerges people get overly enthusiastic and want to apply it everywhere we've seen it with big data ai data science blockchain chad cpt and so on yeah dude this is true people dude i got called addiction on twitter because i said i think chad gpt4 isn't like that great like yeah i get that you can greenfield out a new project and build an app but you can pretty much do nothing with it in the legacy code base it's like extremely difficult to do anything with jeopardy chat jeopardy is like impossible to do something meaningful with sorry i miss i mispronounced it's chad jeopardy i know my bad and so on i've seen companies that hire as many 70 people to build a product within with the goal of following a trend without defining the what what the product would do or whether its clients would want white where is this just a few weeks ago for example a company reached out to me looking for advice on how they could use chat jeopardy in their accounting software they said this was because they were trying to raise funding and investors wouldn't like it if they weren't using chat jeopardy for something i've documented many examples of this phenomena in the context of ai in my book shell this cart before horse approach makes companies overstaff teams to build unnecessary products i think this is another major reason for the task bloating and perpetual thumb twiddling that i mentioned above as techies become severely demotivated when they see no point in their work dang i forgot that i had music going at one point all right as let's see one of my friends lost all interest in his job when the additional five people were hired for his team because the topic was deemed trendy by an upper manager even though they were coping just fine with the workload the expanse the expansion on their team deluded to or let's see the work among so too many cooks also tack bloating task bloating session season started okay so to me if this is truly a very common experience no wonder there's been so many layoffs yet tighten the economy a little bit and they're like what the hell's happening with dev over there we're paying them enormous amounts of money and nothing's happening this is crazy i've never seen this and even the time i've been a part of agile i never had this experience in some cases employees soon realize the product they are working on will never be used by real clients and has never been real let's see as it never really responded to a client's need it just followed a fad but they still have to build the product in those cases why bother working hard instead of loading the task and using the time for something more meaningful like searching for the next job mowing the lawn or perhaps writing this article once i joined a team to build a product that was meant to help data scientists within the organization as i worked with the data scientist for years i was a bit surprised when i saw the product users interface which didn't seem to reflect the way the data scientists really work i inquired about this and found out they hadn't even interviewed a data science across the organization to see what they needed they blindly created the team and started the development of the product because it seemed trendy when i inquired further upper management told me we have decided not to speak with the users we'll first build the product we think is right for them and see what they think fire em fire upper management he called this the fail fast approach but i thought it was fail for sure approach imagine the level level of motivation and productivity in this team yeah why does this happen so much in tech okay i'm curious about this tech is not the only sector riddled with unproded unproductivity what's the term missed productivity i'm sure people would object that what i've said so far also plaques other industries however i think some characteristics of tech make it particularly prone to task loading and unproductivity unproductivity i think one of the reasons for that is that technical work is poorly understood by business people so if techies tell a decision maker that reading the code template takes a week instead of more realistic 30 minutes they are likely to believe it it would be so much harder for say a barber to pretend that cutting someone's hair takes days as everyone has had a haircut before and roughly understands what a haircut entails moreover the benefits of many tech projects are intangible if you promise to build an ai based insights engine it is hard for business people to understand the return on the investment you can roughly measure the output of a barber in terms of number of haircuts but how do you measure the value of a data science or an analytics project by insights and ability to react to new situations like if you cannot qualify and quantify what's happening your project sucks the adoption of dude this is like straightforward what do you mean business people wouldn't understand that it's immediately perceivable okay we released a new product how's it doing tell me about the customers what makes them happy what makes them not happy oh you have none of that then you failed you suck get the hell out the adoption of the agile recipes also help conceal the problem it also creates the illusion of agility and the illusion of teamwork if you look at it from the outside the team seems productive because every couple weeks new tasks are completed and every and other tasks are collected collectively planned it also seems there's a lot of teamwork so everyone meets all the time these factors combined have helped tech companies become unbelievably bloated without consequence and if if you haven't yet you may want to check this video called one day in the life of a twitter employee i do want to check that i do very much so want to check this out and i will check this out i will most certainly check this out and be super disappointed what does truly agile teamwork look like the title of this article is almost never worked when employed in tech well the title is articles i've almost never worked in one employed attack but that doesn't mean i've never worked in fact i've worked really hard and been part of an amazing product productive teams which deliver top-notch products in record time and clients love them the thing is this hasn't happened in a traditional environment that is when employed full-time by a mid-sized or large tech company ada only has been working as a freelancer or early stage startups that i've witnessed productivity or productive tech work yeah this makes kind of sense maybe i don't know it's just it none of this mirrors any of my experience that's the hard part about this i'd like to share why i think this happened dude you've been saying you're going to share why this is happening this article has gone on too long emmanuel okay emmanuel it's gone on too long i'm done the name is the primagen you've got some extraordinary experience why this let's see that scrum of what you're reading there's no rules within agile the whole point of agile is that it gives the team the ability to self-manage themselves however it may look the name for pete's sakes you're agile yeah okay agile with no definition sounds a little vague i don't know i think this is highly dependent on software process of the company we use something similar to agile and we write a lot of code per sprint yeah mine always ends up the opposite i always have this experience where anything that does agile they usually always are over committed and getting burnt out from too much work because people want to drive down the amount of time tasks take they always underestimate as opposed to overestimate just read the agile manifesto i don't read manifestos in general