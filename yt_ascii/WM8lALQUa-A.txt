html templates instead of reactivity i hope come on htm x come on htm x this better be an htm xx article in this post i'll try to convince you that the amount of complexity you bring into a project to synchronize your application state with what a user sees on screen is not worth it reactivity is not worth it it's not worth it to use weird abstractions like jsx or other languages which produce html or js bringing in build systems package managers with tons of dependencies and other types of complexity like virtual dom just to build a front end of your application is also not worth it i like where this is going rxjs we're not talking about rxjs okay i like where this is going because this has been a huge complaint to mine which is you have to replicate server and client side state and they try to stay in sync with each other you try to do all these actions just to update small bits of your of your system and then you add in third party state management which then creates even more state which is things like redux it's wild it is wild what's the selling point of modern frameworks did someone say a hype train is there a hype train going on hey thanks for the hype train level two okay guys that doesn't seem like a level 55 pirate software hype train so offended what's the selling point of modern frameworks let's take a look at react for example my button con set handle click let's go all right all right all right oh shut up with your golden kappas actually from pirate software the idea here is that you don't need to directly update the value of the button when the value of count is being changed i understand that real examples are way more complex and while this specific example may not appear particularly impressive it serves as a demonstration of the framework's functionality i assume everybody understands this easy peasy pumpkin seedy yeah okay i mean you could have inlined this thing little arrow function called it a day but whatever you get the idea i also understand the same example in other frameworks like spelt looks less weird my point here that we still can re reduce the amount of complexity first let's try vanilla js attempt one okay okay i'm excited i'm excited i think the example above can be rewritten in plain js much easier okay let's see it handle click get attribute data count times one interesting i don't understand the times one cast it to an int cool okay okay okay const b b equals okay i didn't know about the times one i've always done the old i've always done that one never done that interesting okay anyways plus one okay a set attribute data count okay ent clicked this many times okay okay we see it we have the button right here okay when i write when i write these words i can already hear voices of people complaining about how this is inefficient how it's silly to update the dom directly and how insane to keep the application state right within the attributes of the elements it's funny because i don't really have an application state here all i have is the dom that contains useful information which i can extract and use and yes for large projects the solution above may not be the best approach because large applications actually means you have some state so let's talk about application state okay so i like i like the buildup because in some sense i totally get what they're trying to show you here this versus this this also happens to require about 500 kb of javascript to actually run this is it right it's like nothing the state is kept in a lot of stuff right here this scale is not much different than this right this this almost doesn't the scale is about the same close it's like slightly better but it's about the same problem all right application state must be global the idea is that we attach certain objects to specific elements or components cause us a lot of troubles for some reason we decided that global objects are evil however i don't see any real objective or reasons to think like that okay let them cook let them cook okay people just let them cook for a second sure there may be name collisions but those issues are easily detectable and avoidable simply by naming things in a more concrete and distinctive way all right he's cooking he's cooking global state redux mentioned redux global state okay for some reason it's okay to have a dom which is a global within window it's okay to have global structures like session storage and local storage and many other things within window but it's not okay to separate to separate global state of your application to me it seems inconsistent and quite harmful okay interesting interesting take con state equals this yeah this is so for those that don't know this is a global state for those that haven't programmed javascript in a long time outside you know like outside of of of just the current world you may have forgot that when you do a script whatever variables you declare those are like globals dog those are on the window window object do you know that that's kind of crazy huh just is just is it is the way it is i know whoa nope yeah it is i know it's kind of weird they're the deep state they're literally the deep state as you can see it's a bit better because we don't need the data count attribute and in this case we do use the application state and yes it's global as i told you what if we add many more elements that we must visualize data what if we cannot attach event handlers in such a way to where we can easily access our elements i hear you i have a solution template ooh template people ooh are we getting into web components so what about templates there is such a thing in html like template elements the interesting thing about this element is that it's not rendered on the page load but we can instantiate it later in javascript code just imagine that you can use such an element to render your view each time the application state changes the only problem is that there is no built-in solution about how you can map your object to the template and also there is no default mechanism which allow you to release that template into dom but but let's admit it's not something impossible to implement okay teach me i i don't know what's happening here i don't i didn't quite understand that last a little bit but let's see what they're trying to say here are we getting to htx yet i think we're almost to hdmx all right using template attempt three imagine you could do something like this right in html all right state template map to template okay i think i see what they're trying to say okay okay i think i i think i kind of see it i think i kind of see what's happening here data object name so use the global name to attach the state remember that's global and then in here your data text is hydrated with state. count imagine that we had a function ma to template template state that we can map states to the template and inject the whole content of the template directly into the html in the end it would look like this i don't know how i feel about this i'm not loving this idea here i'm not loving this idea okay we got to let them cook let them cook just observers and js yeah is this just observers let's just let them cook as you can see we still have the possibility to release the initial template by using data object name we can define a variable name that we can reference in the html content in inside the template attribute data text indicates the inner text of the element once the value of the attribute is processed to be more specific about how we're going to render our template let's improve the solution okay all right we got the state we got this we got the handle the click template is reusable state into box oh man this is slowly becoming this is slowly becoming hdmx count times okay okay this like client side hdmx okay you're losing me you are losing me this reusable business i'm not i'm not a big fan of i'm also not a big fan of this because this requires stringified variables and like this is not you're not getting any sort of type checking there right i'm not a big fan of that by using data insert into we can specify the element selector where our template will be rendered in this case we insert it inside of element box so we imagine we click the button three times this is how the hml would look like yes okay if we used data append to okay this is this is hdmx at this point our code would look like this okay yes this is like client side hdmx this is literally client side htx using data data handlers or we can use data data prepend to box and our code would look like this okay yep yep yep yep yep it's silly sure but it shows the power of such mechanisms you can already imagine how much easier it is to share state between many many elements sure button text area template we have a template in a template okay now you lost me once you have a b once you have a template in a baby template list to iterate state array i don't know about this at all i i i don't think i like this okay i'm just throwing this out here i don't like this as you can see we can even potentially use such things as for each templates which can render nested structures in the end we would see something like this yep and that's because you did a 4 each via a template right here a 4 each in the template okay y i'm not loving this idea okay this is like client side htm x and also handlebars he is lowkey inventing a new framework yes this is a framework about to happen stroke evidence i stroke avoided so close dud that was so close when we see the attribute data object name we can appreciate the fact that i'm i'm i'm not appreciating right now that this object can come from anywhere it truly makes our template decoupled from the any data source this is true reusable components yes you need to call rendering manually via map to template but you can gain a lot in return you can come back to good old days and simply enjoy writing html there's no need for strange state management libraries built upon a false sense of how application stage should be stored i mean i like that i mean i like some of the conclusions here okay this guy's cooking okay i don't know if we should let bro cook but he's cooking okay i'm not going to dive into how map to template is implemented but it is right here in case you want to see all i'm trying to say is that there are more elegant ways to manage your state and you can come up with your own i mean he came up with his own you know what so i will applaud him for trying can we all agree to that you should try to make your own ideas and see how they feel right i know this is this is the beginning of another framework this is just tiny framework that's all it is to me it seems like it'd be a lot better to use something more like web components at this point honestly there's lit components there's lit html to me it just seems like there's a lot more you could do in that than whatever this is this is this is this is unique okay it's unique you could just use hmx this literally you could use hmx instead conclusion you can give me many arguments on why such approach sucks like for example you can say that manipulating dom directly is slow it's not slow whoever says this this is an old idea the the reason why like the the virtual dom was meant to minimize the amount of dom manipulations and it's cuz the dom was extremely slow it's not it's not even a thing anymore the more precisely you can manipulate the dom the obvious better it is right only then to turn around and use a library which calculates a diff between the dom and virtual dom and does those direct manipulations anyways i apologize but i find it difficult to take such arguments serious anymore okay fair that's a fair take that's a fair take c++ generally is usually faster than javascript so doing all the work doing a virtual dom to a dom is kind of an antiquated idea of just bad browser implementations at one point at the very least i hope you understand the importance of trying to achieve good results with basic technologies like html and js before diving into modern frameworks i don't think i got that from this article but you can do quite a bit i mean at the end of the day what he's built over here is pretty impressive okay i think it's super cool i love i love the idea of trying to build something different but i don't think this is for me good idea bad example i'm on that team you know what i mean i'm on that team that i i was hoping i i was hoping for something slightly different we got this in the end i'm going to accept it we let bro cook and we got templates the four each definitely left something to be desired here no htx oh i love hdmx there's no htx in this article i love htx this ain't it htx is like the inversion of this why are you still storing all that state on the on the on the client like you only state stored on the client should be for client side only things and so client side only operations tend to be fairly small and if they're fairly small you don't need just the world's largest library to manage state this guy is just five years away from j j diesel he's about five five years away from j diesel don't make so much sense just don't make so much sense hey the name i'm happy you're proposing something different i love that okay i love that you recognize the problem of state and the client but your solution is to just have have the same state on the client i feel i feel like there's something better and you're close you're almost there keep going a jen