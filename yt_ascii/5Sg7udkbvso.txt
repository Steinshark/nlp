so we took sheriff apart the other day and one of the things we saw in there was that they had this back play which all the cards connected to so what i thought we'd do is actually to have a look at how a backplane works and how it? interconnects all the different cards to form a complete computer system and what [it] will actually show us is how any computer works? it doesn't matter [whether] it's using a motherboard like a traditional computer or a backplane system or computers while this all computers up to the pentium era are connected in this sort of fashion we see the backplane, physically what it actually looked like diagrammatically is you've got a pcb and you've got various sockets on it and these are all interconnected [you] also have some resistors on there and probably some capacitors to smooth the power supply and to terminate the ends of the bus but effectively you've got a series of connectors which the cards can slide into and everything is then interconnected? so what sort of things are connected over those first of all if we have a look over here? i have a descendant from one of the original acorn system cards this is a control universal euro beebe card, but he's is the same backplane technology as the acorn system used so originally all you've got areas of pins and when you plug these into the backplane they just connect up with the socket and then any data [or] anything we sent down these wires connect you talk to any other cards, so effectively. what are you going to send over the backplane? what's basically? the signals from your cpu so you've got a six [8,000] cpu here actually took it out of an old lady writer printer and coming out of this you have an address bus and [we've] talked about this before and you have a data bus and the data bus is bi-directional so i'm just going [to] move the trip a bit so i can actually sort of draw another arrow [so] we've got an address bus and we going to date with and the way the cpu works is a few other control signals which go over there as well? which we'll ignore for [now] is when every wants to talk to anything in the computer inputs on the address there, and that's just a number so we have something get addressed one zero one zero one zero and it will say i want to read that address [i] want to write that address and if it's reading it than the data sent that way if it's writing it that it writes the [data] out all that goes over your backplane effectively along with the control signals is the address bus and the data bus if you look carefully you can see them coming off the cpu here being can directly to the pins on the backplane connector now this is a bit odd if you look at the original schematics for the acorn system one you'll see that they had a whole load of buffer chips we should make sure you've got a strong and stable signal out over the backplane bus one of the problems when designing these sort of things is that the voltage [that] comes out of the cpu or microprocessor? is struggling off the drive and motherboard when you got [two] going over a back [plane] or something [you] probably want a buffer there to give a bit more strength to the signal so it can talk to the other things and they would have buffers so that when they send to me back the data didn't get caught because he was travelling along the relatively long wide if you look at the sun system again you [see] [we] have quite a wide backplane, so let's have a look at our backplane. so we've got two things we've got an address bus which [we'll] call, [led] [dr] and we have a database and we'd also have an alarm which as a control bus. which is also be there it says whether you're reading or writing what type of data triaxis and so on we're going to ignore that for now? but it would be there as well, and it connects up in exactly the [same] way so if we wanted to build up a system with the backplane there we just sliding the cars and effectively all [you're] doing is connecting that device to the address bus and the database so we started off with a cpu card [and] so we've got a cpu there and that connects to the address bus and it connects down to the data bus like that now we also want some other things in there we want to be able to use the system to probably some memories so we'd [have] a ram card and again that connects to the address bus and it connects to the data bus probably opting out from there we had a scuzzy card in there and this again connects to the address bus and it connects to the data bus and of course because it's scuzzy it's got a connection to the hard disk as well as a separate connection and the files and cpus concerned only see the scuzzy card and then the discovery card talks to the hardest so he sort of talks indirectly and you could put whatever else you wanted on there so we could have an ethernet card now cause there's nothing to stop the cards having other things there if we look to the cpu card that we had before in the sun system it had the cpu on there but it also had four meg of ram, and it also had an ethernet controller and some serial port so the card can be multifunction, but in effect as far as we're concerned here we're treating is one thing now they're connected to the address bus and the connected to the data bus so how do they communicate? well, they all communicate over the data, but that's where the data sent but you need to make sure that only one thing is communicating at a time otherwise you'll get a garbled signal on there, and you wouldn't know what's happening so the way [that] the cpu does that is it make sure everything has a unique address and so one of the things that you need to do is make sure that the ram is only accessed when you've got one address on there because he's only accessed when you've got another address on there, and so on depending [on] what you need to do so how did you get it about doing that so we look at a real computer system here now this wasn't a back playing basic computer this was the atari, st book laptop, so it's also [to] combine onto one motherboard but the principles [are] [same] the difference between this and the sun is it with the sun you could swap the components around as you please to choose it with a laptop having a huge cards and there would perhaps be a little cumbersome so everything was built on to the one motherboard so [the] first thing we see when we [look] at it is that you dress [buses]? and the date was in some cases the [dress] buttons are different sizes the cpu like these six [8,000] we have here has a 24-bit address, [but] now because it's a 16-bit cpu or present the 16-bit data but you only have 23 address bus pins that you need to take out of it, so it's labeled 23 here so we've got 23 bits worth of address space. we can access that 16,777,216 bytes worth of memory or hardware whatever you want to put in there now as we go through we can see the other things that are connected so for example we have a system rom, but this only uses' bits worth of address space it's got' bits the meeting control on the machine and you use two bits worth as did the keyboard controller the sound chip they only been drawn on the address connection there, but probably only uses two bits worth there if i remember right destroy it in slow [one] [-] charlie went [bus] if they didn't draw their diagrams properly this one was an interrupt and multifunctional device, it used five bits. that's 32 bytes worth of address space and so on so how does it work? well the basic principle? is that you decide? what you want to go where in your computer so [with] something like the atari? they decided that if this was the memory will use hexadecimals like 16 meg's and zero they said right the first four megabytes are going to be [ram] so any address between zero and what's four megabytes is hex? i think that's four zero zero zero zero zero i may have an extra zero in there, but it's about that, sort of value so that's going to be round to any address in this range. we're going to say is around what they also said is that anything? roughly and for the [chart] [rams] in there i am waving my hand so all the hardware things are going to go up there and then you had your rom trip which started at e 0 0 0 0 0 and that's got the operating system in so what we can see from this is different addresses different numbers [of] the location refer to different things so as far as the cpus concerned we put an address on the address bus [and] we're talking to something else [we] put [a] low address we're talking to [ram] could put a high address we're talking to hardware and so on so what the computer has to do in fact what? every single card has to do in a batplane system like this is look at the address on the address bus and decide whether it's an address that's accessing it, whatever it provides or whether it's an address for something else which case it ignores it and how to do that one way i [think] it's really helpful to see how this works is to look at phone number so in the uk we might have a phone number like this which we familiar to anyone of a certain age in the uk anyone have an older age maybe expect me to written oh one eight one one eight zero five five hello great good morning to us just reading one of the morning papers anyway doesn't matter there's the collection of numbers in this case they [are] 1 2 3 [4] 5 6 [7] [8] [9] digits on they can vary computer addresses are a fixed number of binary digits the analogy works but this number isn't just a series of digits. it's made up of two parts we have an area code or std code as a known in the uk and then the phone number within that exchange in this case we can split it like this and this is s td code and this is the rest of the number and what happens when you dial in to swap shop is you dan that number? the first two digit tells the exchange that you want to connect to the london exchange and then coax the london exchange with other exchanges the rest of the number to connect you to the bbc and hopefully you get through to speak to no [redmon's] but for the younger uk audience obviously as tv colors have [changed] a lot since? 1980 [yeah], so yeah, this is what they were up in the 1980 now sean rightly points out. we can change this it doesn't have to be this and actually in the late 80s. they would change so they were actually [o8] one and so you had to change the exchanges to recognise that prefix and then they could use the rest of it but this bit didn't change and it's exactly the same with our computer system so [our] computer system has an address [say] for the rom chip and in this case it's going to access in binary [one] [one] [one] do it which is he and hexadecimal and then some [more] digits? and we'll just fill these zeros [kept] running out of space it's a this is why we use hexadecimal when we're doing computer systems because binary numbers take up but as far as the computer is concerned it works exactly the same principle as the phone numbers and the phone number this is the bit [that] refers to something in the london exchange and [it's] refers to the london exchange the computer works in the same way this bit refers saying this means it's wrong and this fit tells you where it is in the wrong now i can change this by just making the computer look for a different number here and so what you need to do is have some sort of logic and because these are zeros or one they can be treated as digital logic to or false and saunders true when that number is one when that number is one when that number is one and that number is zero or not one and you add them all together, and if that's true. you know you're talking to wrong now if you've got a different number here say, we're talking to hardware one one one one sort of like that the [longview] numbers are unique you can access different things so all you have in your system connecting everything together is on each of these cards you have a bit of logic which will look at part of the address on the address bus a certain number of bits and say is this the address that's been assigned to me for this card yes, it is therefore. the address and the data on the address bus are from my car odd if not been there for one of the other cars and ignores it so they'll be a bit of logic there that says is this the address i've been assigned if it is i'm going to handle it if it isn't then i'm not going to handle it something else can deal with it and [if] we have [a] look at one of the cards if we pull a card out [of] the system so this is from a [sundry] 160 server and it's got an ethernet connection on the back [those] [are] [some] free wide euro cards if you look the connectors are the same as the one we had earlier but if you look these three rows of pins in there, and two rows here, [but] if you look here you've got a series of chips and still given dust and a series of dip switches that enable you to program in a specific address and that will then set where littles here in the computer's memory and so you can then pop that back into the system and it would allow you to talk to the second ethernet card so this approach works great on something like the sun [3160] where you're going to mix and match [cards] to build a bespoke system the [works] [adjust] exactly as you want it so you put in the ethernet cards you want the scuzzy cards the ram attention to be consistent? but actually the same is true on the original ibm pc system. so we look at the kit ibm pc i've got here you had a series of five is a as they became known extension cards where you could put in different [cards] to build up your system? these are the [spaces] here, and you were just literally slotting cards like this one here which was a network card actually slightly later on so it's got a 16 bit extension, but this was the [original] card thing here and this again have settings where you can set the address where you [want] to appear in the [member] now the pc is a bit more complicated [as] well as having an address space like the motorola chips it also has an i/o address space and so you could actually things in two different ways but the same principle applies, and so you would then just swap these in and it will just connect up the address buffers and the data buses and the control buses in the same way now the interesting thing is that there's no reason why the rest of the components couldn't have been on isa cards as well the only reason they aren't is that most people are going to buy a computer like an ibm pc are going to buy? one with a cpu with ram and so on so it's just easy to put them all on the mainboard and then you have a mini backplane equivalent here you could slaughtering the extension cards whether you wanted a monochrome graphics card or a color at the time? hard disk control the floppy disk controller serial port parallel port etc etc you have a same amount of flexibility the difference was if you wanted to replace the cpu card in that [you] just slip the card out but a better one in [turner] [to] place the cpu on here you'd effectively have to replace the whole motherboard and it got a lot more messy, but it's a different use cases you don't expect people to buy a computer ready built and perhaps add an extra card if they needed a network someone buying this knew exactly what it wanted to do and configured it to their own specification and when you're going to finish this ibm pc yeah, that's a good question when i got some time to get soldering and stop rebuilding older systems now you're probably thinking. i just slot my car pci card into the computer, and it just works well the trick there is that what they're actually doing? is that they're working out the address of where things are based on which card is an automatically assigning addresses and then [faq] producing away, the sort of plug-and-play idea that the computer can automatically configure itself for the same effective idea each card will have a unique address and then they'll be accessed [of] course on a modern pc. today the bus systems that are used look more like network connections, and they do address buses and data buses but they're still accessed from the software point of view in the same way could you