every time i talk about diffie-hellman and use any kind of analogy people were like oh show us the math show us the math i could have taken the maths so this is for the maths people where if you want to know how? mathematically diffie-hellman works watch this video if you don't want to know that there's a nice clothes button in the top corner or a back button you know be my guest so that this is for mathematically inclined people let's go back to where we were before so we have alice and we've got bob and we've got our public area here sort of public public and we go draw down here now the mathematics behind diffie-hellman is usually modulo arithmetic recall that we have our public numbers g and m g is often very small is usually a small prime number n is often very big and needs to be big for the security of this to work and is often 2,000 bits long or 4,000 bits is more common now so n is very very big it can't be too big because you won't gain much in security but you lose in efficiency so you know you have to think about that alice and bob need to pick their numbers a and b so alice picks a number a bob picks a number b. these are the ones they're going to keep private now a is somewhere between 1, and n but it's random and n is so vast, but it's not going to be 1 it's gonna be a very big number. it's not worry about what it is she's not gonna. tell anyone what that is same for bob the first thing else does if she calculates g to the power of a mod n right now modulo if you do any programming you'll be familiar with it's a percent symbol is the remainder after division so another way of looking at modulo is to have this kind of clock face, so if we have a clock face which should be a circle and we go from 1 2 3 all the way round? to n these are the numbers modulo n 4 when we perform some arithmetic in this space we just go around and man the clock face. we don't ever leave and go above in or below 0 in fact if this should be 0 as well this should be a 0 in here so when you do g to the power of a mod n? what happens is you're raising g to the power of some massive number which would be very normally very big? but in actual fact it just goes round around this clock face and ends up somewhere so let's say g to the a mod n arrived somewhere here on the clock face now. what's important about? this is it's very difficult given this to work out what a was we know g let's say three right if i say we are here on the clockface and we started at three what number is a it's just impossible to know right because it's position on this clock has no bearing on how many times has gone round or what a was at all right? the only way to do. this is essentially to brute force it to go well is it a ^ 1 no it's not is it a 2 the power to know and and so on and so forth for an infeasible amount of time well we did a little bit of this with the hashing video didn't we there was a little bit of the modulo function there in in? calculating the hash yes, so that was used to shorten something at the end but it's the same kind of principle mojo is very useful for taking something but it could be any length and putting it into a sort of finite loop with a finite group of actual numbers now bob we're going to take g to the b mod n so let's say that turns off over here somewhere so this is g to the b mod n so again what we've done is we've taken g we've raised it to the power of b, and we've done all of this modulo n which means that it just if it ever goes above in it just loops back down to 0 and keeps going so this is somewhere else these are very public components so they share these like this so now these are public but again calculating a and b from this is very very difficult it's called solving with discrete log problem and practically very very difficult for even a supercomputer all right now alice is going to take this i'm just going to simplify the notation slightly to make it fit on the page but as it's going to take the g to the b but bob sent and raised it again to the power of a mod n and bob is going to take g to the a that alice sent and raise it to the power of b mod n and anyone, that's done any exponentiation knows that if you do something to the power of something to the power of something else it's actually just those two things multiplied so g it's g to the a b mod n that's the answer so that will put you that will come somewhere around you know let's say here so this is g to the a b mod n now this will be some number between 0 and n bob's done the same thing he's also got g to the a b mod n and they're exactly the same briefly two identical colors we were looking at in our color example so they've both arrived at the exact same position in this group despite the fact that neither the knew what each other's private key was that's what's really cool about diffie hellman to try and reverse this process we have to know a or b we know publicly g to the a and we also know g to the b if we try and multiply them together for example we'll get g to the a plus b. which is not the same, right? that's me sort of mixing my public colors together in the hope of getting to my answer. i haven't done it that would be somewhere else a completely different number remember. this is cryptography if you're one position out it not going it's not going decrypt okay so you know you have to get it exactly right the fact that she's got g to be to the ae is no different to gt v8 in a bit. it's exactly the same i mean you could you could look at an example if you went to to the power of 2 to the power of 3 that's 2 times 2 times 2 times 2 times 2 times 2 right which is 2 to the 6 because? there's this stick to them you can do it in any order? it doesn't matter you get the same number out at the end whereas that is a completely different thing. yeah, so that is equivalent of 2 2 power of 2 times 2 to power 3 which is 2 times 2? times 2 times 2 times 2 which is 2 to the 5 entirely different number now those numbers are fairly similar because these examples are small you guys going to be somewhere else completely honest on this model you take clockface you're not gonna it's not gonna work at all the n number is kind of important though is it right it's mostly important that n is big because if n is small then in essence this clock face is going to have only a few numbers on it you can brute-force that very quickly right you can find the value of a or the value of b and reverses process if n is you know astronomically large like 2,000 or 4,000 bits the amount of time it's going to take you to find the correct the correct values for a or b is i mean it essentially is long enough that you won't bother that's the argument it's technically possible, but you would be long dead by the time you did it and so you're you finding out what image they send each other is not about useful? actually, this is this is quite simple right? i mean let's not under play this is incredibly important for computer science and mathematics but it's actually not that complicated in some sense very elegant if you want to see some worked examples of this wikipedia and other websites have lots of small examples with small numbers so that you can work this through if you want to have a go at the math yourself right and you'll get the same answer out and it's you know it's impressive