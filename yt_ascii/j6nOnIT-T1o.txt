let's talk about css people call css the magic of the web but why is that well here's why from a developer standpoint your browser interprets the structure of your web page through html and apply styles to it using a language called css or cascading style sheets it's the reason why we have such diverse and visually appealing websites today and why it feels so rewarding to create a stylish web page or to design a user-friendly interface because our mind understands that css equals an attractive and intuitive user interface let's look at an example as soon as you're designing a web page you have the choice to either pick a basic html layout or a beautifully styled css layout your design instinct will tell you to pick the one which is more pleasing to the eye since it knows that it will make the user experience more enjoyable so naturally you'll choose the css layout now you could say well it's not too bad to just use basic html every now and then and that's true but as soon as our mind appreciates a lot of good design it will try to stimulate the craving for that quality over and over again until you develop a passion for it and that's when the lover design kicks in and we can't imagine a web without it for this reason people become dedicated front-end developers graphic designers or ui ux designers here's the thing though css doesn't know what bad design is or what good design is it doesn't know that poorly styled web pages can be unappealing for users all it sees is a potential of aesthetically pleasing elements without any context and for this reason developers are willing to spend hours on perfecting their design the fascinating reality is that almost every company in our modern society exploits good design by pushing it to its limits they give us constant visual treats as we jump from one web page to another we simply have to browse and are instantly rewarded with visually pleasing interfaces it's surprising to believe we live in a world which is designed to stimulate our design appreciation in order to maximize user engagement since we know that good design has direct influence on the decisions we make and the actions we take that's why ultimately css impacts our daily experiences on the web and why billions of people unconsciously enjoy the styled web instead of a plain html one alright so now that you understand how important css is and how we can make or break your website it's time you learn how to turn your blob of html it's the biggest piece of dog into something aesthetic so in this video i'm going to cover the essentials you need to get started and hopefully inspire you guys to explore and learn more about web design and by the end of this video we'll put our knowledge to the test and we're going to style our google home page from the html tutorial and if you haven't seen that video pause this go watch it and come right back trust me it'll give you a complete experience and the satisfaction of finishing your very first project maybe that's what i've been waiting for that's what it's all about okay now let's get started just like before open up your vs code and if you follow the html tutorial open your google homepage folder and if you're not a real one then just use what you currently have or just create a new folder with an index.html file now if you did the google homepage tutorial i want you to actually start in your about.html page we're doing this because i want you to have a file that you can reference to if you ever forget anything about css now that we have everything set up the first thing i'm going to cover is how to add css to your html file now there's three ways of adding css the first way is called inline css and this is where you add the styles directly to the html elements though this method isn't as recommended the second way is called internal css and this is where we add the css within the html file itself where we add a style tag within the head tag of our html file and this one isn't used as much but it's pretty helpful if you wanted to add unique styles to a single page of your website but that's mainly it now the last and most common way you'll add css is external css and this is where we create a separate file for the css and we're just going to link it inside of the html's head tag for this tutorial we're going to be using external css since everybody uses it this way and a lot of people consider it best practice so let's add our css the first thing you're going to do is create the css file so add a file and then name this file styles.css now in our html file go inside of the head element and we're going to create a link element so angle brackets link and then we're going to have two html attributes one's called rel and it's going to have the value of style sheet and then we're going to create an href attribute and it's going to be the name of the css file we made so the value is going to be styles.css okay now go into your styles.css file and let's start talking about css syntax css syntax is really easy it's just two parts the selector and then the property i'm gonna let my friend hermione explain selectors let's first go over selectors selectors simply refer to the html elements to which c css rules apply they're what is actually being selected for each rule i won't cover every possible selector available since there's too many but i'll cover the most common and the ones you should get comfortable using first let's start with the universal selector the universal selector will select elements of any type hence the name universal and the syntax for it is a simple asterisk in the example below every element would have the color purple style applied to it next are type selectors a type selector or element selector will select all elements of the given element type and the syntax is just the name of the element here all three div elements would be selected while the p element wouldn't be now for the most common selector class selectors class selectors will select all elements with the given class which is just an attribute you place on an html element the syntax for class selectors is a period immediately followed by the case sensitive value of the class attribute classes aren't required to be specific to a particular element so you can use the same class on as many elements as you want another thing you can do with the class attribute is to add multiple classes to a single element as a space separated list such as class equals class 1 class 2 since white space is used to separate class names like this you should never use spaces for multi-worded names and should use a hyphen instead the next type of selector is id selectors id selectors are similar to class selectors they select an element with the given id which is another attribute you place on an html element the major difference between classes and ids is that an element can only have one id it cannot be repeated on a single page and should not contain any white space for ids instead of a period we use a hashtag immediately followed by the case sensitive value of the id attribute a common pitfall is people over using the id attribute when they don't necessarily need to when classes will suffice while there are cases where using an id makes sense or is needed such as taking advantage of specificity or having links redirect to a section on the current page you should use id sparingly if at all now what if we have two groups of elements that we want to share styles with we can use group selectors we can group multiple selectors with a comma which simply means apply these styles to this class and the this class we also have chaining selectors where if we want to style elements that have multiple classes just group the classes together with no space in between so class 1 class 2 means find elements with both class 1 and class 2. we can also create selectors based on html hierarchy using descendant combinators placing a space between selectors indicates the parent-child relationship as in dot parent dot child this instructs css to style all child elements that sit inside the parent element the last thing you should know about selectors is specificity rules specificity rules decide which styles to use when conflicts occur in styling the first specificity rule is that id selectors get top priority then class selectors and lastly broad type element selectors the next specificity rule is that if two selectors are the same priority then css will follow the order of appearance the one that is defined last takes precedence and overrides any style set by the earlier one this is because css processes rules from top to bottom now one more thing i'd like to add while css allows for complex selectors it's best to keep them as simple as possible many nested selectors can make your code hard to follow aim to use single class selectors where possible this keeps your code clean and easy to understand benefiting both you and anyone else who might work on your code in the future so strive for clarity and simplicity in your code since that's the sign of a good developer thank you for that explanation hermione all right let's start talking about some properties and get to the real fun stuff with css properties are the actual styles that get applied to our elements and in css there's a whole bunch of properties that exist but i'll be covering the most common properties that you see and these properties will be enough to help you get started with basic projects but by the end of this video you should know enough to be able to google any questions you have or google any additional properties that you'll need and you can just use chat gpt now that you know some of the technical terms anyways back to properties first property i'm going to teach you is colors so in your html file use your current h1 element or just create an h1 element and give it a class attribute and we're just going to call it test and now when rcs ss file you're going to create a class selector so dot test curly brackets and now add a space between them so we can add our properties in css there's two common places where we add colors to our web pages and we use these two properties color and background color the color property sets an element's text color while the background color property sets the background color of an element and that's basically it for colors now css follows a similar structure as html attributes where they do a key value structure where the property name is going to be the key and then the value is whatever you want to give it and for colors colors can have a lot of different kinds of values a common one is keyword which is simple color names like red blue yellow green and then there's also other special keywords like transparent and colors can also accept hex code rgb and hsl and you might be familiar with those if you ever used photoshop or some website where you can customize your colors and most commonly people use hex code i'm going to leave a resource in the description that shows you all the different types types of values you can use for colors anyways let's write our first property so in your class selector you're just going to write the property key color and then for the value let's just try blue for now and make sure you got a semicolon at the end of every property that you put or else css is going to give you an error and now save everything and now you'll notice that your text is now blue now let's make a background color property so underneath your color property just write background hyphen color colon and then for the value we're just going to say black and remember to add the semicolon save the file now that you're a master of colors let's move on to typography these are the common properties you see for text so there's mainly three properties you see with text the first one is font family and this essentially just lets you pick what type of font you want for your text the next one is font size which is you know the text size and then the last one is font weight which is to make your text bold let's add some text properties to our h1 element so underneath your background color property we're going to add a font family property and for the value it's going to be quotes roboto comma sans hyphen serif and then the semicolon don't forget so these are the fonts that google uses on their homepage and i just wanted to get it out of the way but currently our roboto font isn't working because we need to import the font and we can import the font from the google fonts website so all we have to do is go onto the website find the roboto font click on it and then choose one of the styles and then you're going to use the import method and then you're just going to copy it and then paste it at the top of your css file now let's create a font size property underneath the font family and for the value it's going to be we'll put it at 48 px px stands for pixels so it's really saying 48 pixels all right now save your file once again and this is what i call good web design okay so before we move on to any other css properties there's one important concept that you need to understand to be successful in css in that concept is the box model if you master the box model you'll be able to create any type of web design that you see so let's talk about the box model the box model is pretty straightforward everything on a web page is a box so a website is basically just boxes inside of boxes and we can view this using our browser's inspector tools and you'll see that everything is just the box that's just really customized every box has these four layers the content the padding the border and then the margin we use css properties to customize these layers into what we need and if you master the box model and understand the properties that are being applied you'll understand where to position elements how to create certain layouts and what exactly is happening in every web page so let's start learning the common css properties that are used for the box model the first thing i want you to do inside your html file i want you just to create a simple button and just make it say click me and now in our css file we're going to create a type selector for the button so we're just going to do button and then curly brackets and then add a space between them alright so let's speed run some of these properties the first two properties modify the content layer of the box and these properties are height and width so create those two properties and the value for these are going to be pixel values so just set them to whatever you want i'm just going to set them as random pixel values and those properties will set the height and width pretty straightforward next property is padding so create a padding property and set it to 10 pixels padding is the second layer of the box and it increases the space between the border of the box and the content of the box and padding will use your background color to represent the space now for the third layer of the box the borders so add a border property and it's going to take three values the size of the border the type of border and the color of the border let's make ours two pixels and we're going to make it solid and then the color red the border of the box is just space between the margins and the padding of the box now for the final layer of the box the margins so create a margin property and set that to 10 pixels as well the margin of the box increases the space between the borders of a box and then the borders of adjacent boxes so it's going to add spaces between other boxes and next to it so those were the four layers of the box model and how we can customize them if you feel a little confused about the box model don't worry about it the more you practice the more it'll just click in now let's start talking about how to position these boxes we can do this with the position property there's five main position values static which is the default relative fixed absolute and then sticky relative position means your positioning an element relative to its normal position fixed means positioning an element relative to the viewport which is the screen now all this means is that this element is going to stay in the same place even if you scroll the page absolute position means you're positioning an element relative to the nearest position ancestor so the nearest parent sticky positioning means your positioning an element based on the user's scroll position so when you scroll through a page it'll stick in a certain position and if you set a position property that's not static you also get access to four new properties top bottom left and right properties and all these properties do is move the box in a certain direction now these five properties are the basic ways of changing the position but there's also two advanced ways of doing it flexbox and grid flexbox lets you position your elements as rows or columns it's the most common way of positioning your elements and it's the easiest way to create complex layouts while grid transforms your box into a two-dimensional grid layout it lets you control the placements of the items within the box both horizontally and vertically this is more ideal for intricate and precise designs and layouts these two deserve their own videos on it and if you want me to be more specific on both of these layouts let me know but for now this is all you need to know about positioning your elements okay i think you guys are ready to implement the most difficult task a software engineers ever had to do centering a div inside your html file create a new empty div element and then we're going to move the h1 element and the button element that we created inside of this new div give the div a class name of centered hyphen div and now in the css file create a class selector for the div and you're going to add these properties i and it's going to have the value of 100 vh and this stands for viewport height and all this means is that this div is going to take up the entire screen space the second property is going to be display and it's going to have the value of flex so we're going to use a flexbox the next property is going to be justify hyphen content and that's going to have a value of center and then the last property is going to be align hyphen items and that's going to have a value of sensor as well and if you want to fully understand what's happening here i suggest you google all of this i'll also leave some resources since problem solving is also a skill you need to know save the file and you now have the skills to start making some cool web designs so that's basically everything you need to know about css but there's a lot of things i left out and i did that so you guys can google whatever you need and figure things out all by yourselves like real software engineers it's definitely not because i got lazy i'll at least leave some resources and some topics that you should probably research if you want to dive deeper they'll be in the description all right let's start customizing our google home page from the last video i'm going to show you my life hacks how i figure things out with css and styling and then you have a good idea of what it's like developing things when you just look at them as boxes so let's get started first things first in your index.html file make sure you link your css file now let's look at google's homepage and i'm going to show you how to use the inspector tools to get some css properties so open up your inspector tools and be on the tab that says elements click on the body element and then at the bottom you'll see the styles that are being applied to the body so all we're going to do now is copy the styles and then paste them into our css file and now their code is now our code all right so the next thing we're gonna do is position these elements properly so remember in the last video i said that the google home page has three sections the top middle and bottom so now we're going to position our elements so they can be in that structure and in terms of boxes this structure is three columns top middle and bottom and the way we can structure our elements as rows and columns is we use a flex box so let's transform our body into a flexbox so in our css file we're going to add a new property to the body it's going to be display flex and then we're going to add another property flex hyphen direction and it's going to have the value of column all we're doing right now is making our body structure our elements as rows and columns but by default display flex sets our elements as rows and we don't want three rows we want three columns so flex direction simply just sets the rows into columns now that we positioned our elements into three columns we can start working on each column one by one so let's start at the top so if you haven't already add the class attribute for the top section like the way i i haven't so top section left side and right side and then in the css file we're going to create three class selectors for each of those now let's look at the google home page again if you notice we separated it into a left side and a right side and this also means two rows since there's two boxes so how do we position our elements into rows a flex box so let's do that real quick so in our top section we're just going to add display flex okay now the next thing we're going to work on actually are the images since they're kind of too big right now so let's fix that in your html file add a class name to all the images you can name them whatever you want just to get some practice and then in our css file let's add some class selectors for each of the images and then we're going to edit the width and height property now copy the values you see on the screen i'm using rem values and these are relative units these are better than pixel values and i want you to research why they're better so just ask chat gbt why use remover pixels and feel free to play around with the values just so you can get used to them alright so that made a big difference in our web page so let's go back to our top section in the top section the big difference that we have currently is that we're missing this big gap between the left side and the right side so let's add the space between both of these sides so in your top section class selector you're going to add this property justify hyphen content and the value is going to be space hyphen between alright so we added the space between the left side and the right side but currently they're both really close to the edge of the screen so let's add some padding so once again in our top section selected we're just going to add some padding and the value for it is just going to be one rem now the next thing i want to fix are the anchor tags currently they have a blue color and they have that underline so let's remove these real quick so in our css file we're going to create a type selector and it's going to be for the anchor tag and we're going to set these properties text hyphen decoration and we'll give it a value of none and then a color property and we'll set it to black for now okay now that we did that let's work on the left and right sections of the top section so currently the left and right sides have their elements really bunched up together and we want to add some space between them and one way we can do this is once again with a flexbox since we can visualize these elements as rows so the left side would have two rows while the right side would have four rows so in our css file we're actually going to transform our class selectors to the left and right side into a group selector so we're just going to dot left side comma dot right side because we're going to give them the same styles and now we're going to add these properties display flex to make it into a flex box gap 1.5 rem and this just gives a gap between each of the elements and then justify content center and then align item center to center everything horizontally and vertically now the last thing we have to fix in our top section is the profile picture since it's still very boxy and we want it to be round so when your profile picture selector you're going to add this property border hyphen radius and you're going to give it a value of 100 alright now the top section looks pretty similar to google so let's move on to the middle section the main thing we have to style is the search bar but before that let's work on positioning the elements correctly so we need to center the google logo and our search bar and we can do that with a flexbox just like when we censored our div so in your css file create a middle section class selector and we're going to add these properties flex hyphen grove to 1 so we can take up most of the screen space display flex to make it into a flexbox flex direction to column since there's a top and bottom justify content center and a line item sensor to center the elements and then we're going to add some padding and a gap property to properly position the elements okay now our middle sections taking up most of the screen space and it's properly centered but our search bar looks really wonky so let's start working on it let's compare google search bar to ours currently the main differences is that the buttons are at the bottom of the search bar and the other big difference is that that search icon is at the beginning of the search input so let's make those changes real quick so these issues are actually html structure issues so the first thing we need to do is we need to move the search icon right between the google logo and the search label and now to get the buttons at the bottom of the search bar we have to fix up some of the structure inner form so if you notice in this form there's two main sections the search bar itself and the buttons so what we can do is we can put a div around both sections so around the input we're going to put a div and we'll give it a class name of search form input and then for the buttons we're going to wrap a div around it as well and we're going to call it search form buttons so now your html form should look like this okay so the next thing we're going to do is in the form element itself give it a class name of search form now in your css file i want you to copy down the properties you see on the screen and i want you to figure out why this works now that we positioned our middle section correctly let's work on the search bar itself we need our search input to be larger and we also need the input to wrap around all the icons since currently all the icons are outside of the search input and we also need to remove the part that says search so we have to make our label invisible so here's what we're going to do in your css file create a descendant combinator and it's going to be our search form and we're going to select all labels inside of the search form so all we're going to do doom to hide the label is set this property display to none and now for the hard part the search form input the reason this is hard is because this is an input element and input elements are self-closing elements so this means we can't put content inside of it and this is an issue because this means we can't put the icons inside of our input so we have to think of a different way so instead of trying to put all the icons inside of the input why don't we make the search form input div that we have that already has everything wrapped look like the input the user is not going to know the difference so here's what we're going to do we're going to hide the input so create another descendant combinator and we're going to select all the inputs inside of our search form and we're going to make the input a bit larger so we're going to modify the width we're going to give it some padding and now we're going to hide the input so we're going to remove the border so we're going to set the border to none and we're also going to remove the outline because whenever we select the input it highlights in blue so we want to remove that so we're going to do outline to 9 done and now we're going to change the search form input div so before we add any properties let's try and find the border color that google's using in their search bar so just like before go onto google's homepage open up your inspector tools and now you're going to look for the search bar element and once you find it try to find the border style that's being applied and once you find the border style we're gonna borrow the code so copy and paste the border style and paste it inside of the search form input selector so now we're going to add these styles gap and we're going to set it to one rem so we can have space between each of the icons and then we're going to give it a border radius property and we're going to set it at 30 pixels because this search bar isn't really a rectangle it has a little bit of roundedness to it and the last property we're going to add is some padding all right now our search bar looks pretty similar to google's let's move on to the final part of the middle section the buttons so the first thing we're going to do is we're going to remove our button type selector that we used in the tutorial since we're not going to need this anymore and now we're going to create another descending combinator this time we're going to select all the buttons inside of our search form and then once again go on to google's home page use your inspector tools and select one of the search form buttons and then you'll see all those styles in there we're gonna once again borrow the styles and we're gonna paste it inside of our descending combinator and there we go now some of these styles might be unnecessary so i'm gonna let you guys figure out what to remove and what to keep and it'll be some good practice to understand what all these properties are doing and some of you might feel like you're not learning much or that it's cheating that we're just copy and pasting all these styles but this is kind of what software engineering is really like for the most part you're not going to be memorizing everything you're just going to be problem solving and knowing how to use certain tools and knowing how to use your inspector tools is a pretty good skill to have since you don't have to make your styles from scratch and if someone's already made a style that you like i don't see a reason why you should just make it from scratch there's no reason you know like everyone says to reinvent the wheel unless it's absolutely necessary and even then if you made it this far into the video this is probably your first project and if you really want to become a software engineer specifically into web development this definitely won't be your last time touching css so you'll definitely be getting a lot of practice in since the more projects you make the more proficient you're going to be at it i'm just showing you how i like to develop nowadays and if you don't like my way of doing things that's fine at the end of the day all i want to do is show you guys the fundamentals and also help you guys develop some critical thinking since that's an essential skill that you need in this field because maybe five years down the line this tutorial is going to be irrelevant but since you know how to think you'll probably figure things out and you probably won't even need a tutorial anymore and i'm also not a perfect developer there's a lot of things i get wrong and i'm perfectly fine with that as long as i learn something in the end so if you notice anything that's wrong with this whole tutorial let me know please so i can improve myself and make better content for all of you okay sorry about the long rant let's go back to our project so we just finished our middle section our web page is looking more and more like google's so now it's time to work on the last section the last section is going to be pretty straightforward the only thing we really have to do is just position our elements correctly and even then this positioning is going to be pretty easy all we really have to do is just transform each of these into rows and how do we turn our elements into rows that's right flexbox so in your css file create a class selector for the bottom section and now we're going to add these properties display flex turn into a flex box and now we need to add space between each of the rows so we're going to create a property justify content and just like in the top section we're going to add the value of space between and then the last property we're going to add is align items and we're going to set it to center those properties alone position their elements correctly but now it's time to fix up some of the small things so the first thing we have to do is change the background color since it's a little darker at the bottom section and we're going to do the same thing as we've done before use your inspector tools find the bottom section select it find the background color and then copy and paste the style and now we're just going to add some padding to position it a little bit better okay we're almost done so the last thing we have to worry about is the left and right section of our bottom section the anchor tags are really squished together so we have to add some space between them now here's two ways of doing that i'll let you guys decide whichever one you want to use all i want from you is to understand why each of these methods work and i'll let you decide in your opinion which one's better there's no right answer code is very flexible whether that's good or bad i just want you to get used to knowing that there's multiple solutions to a problem and now our bottom section looks just like google's all we have to do now is fix this tiny detail the middle section is taking up too much space in google's home page the middle section isn't actually in the middle it's more towards the top so we just have to move the middle section a little bit more up so in your css file in the bottom section selector we're just going to add this property margin top and we'll set it to around 15 rem and this is a wonky way of doing it is there better ways of doing it probably but hey it gets the job done but there we go we finished our google home page it looks pretty similar to it there's some small details we still have to fix but i'll let you guys figure that out since you guys are basically pros now i hope you guys gained a good understanding of how css works and how you should style things and if you didn't i'm sorry just keep practicing and one day i'll just click in but i'll see you guys in the next video i'm going to cover some javascript we'll actually do some real programming keep practicing your html and css and i'll see you guys in the next video so see ya