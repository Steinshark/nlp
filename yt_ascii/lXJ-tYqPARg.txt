we have here an emulator for the cambridge edsac it is a lot more user-friendly on this screen than it would have been initially when remember you are dealing with five-hole paper tape that's what your program went in on your answers came back out on five-hole paper tape which was your job to put through a teleprinter machine which chatted away read your tape and printed out the answers fortunately we have the printed out answers shown in front of us here is the standard display of this emulator so handily written by our friend martin campbell kelly from the university of warwick you can download this for yourself it's free to use and just play with it your heart's content and it's very nice to have the opportunity to play with a really genuine early first generation computer we've been talking about john von neumann or johnny von neumann call me johnny yeah so edsack is being built in cambridge but how does it end up getting connected to von neumann is that what we're going yes that's right it's it's the other way around of course that the the person who built headsack morris wilkes exact contemporary alan turing both got first class degrees in mathematics he was the one maurice wilkes who went to john von neumann's summer school in 1946 at the university of pennsylvania the moore school of engineering paul morris has such difficulties with raising the money with getting his passport straight and all sorts of other issues that he actually arrived four weeks late for a six-week course one has to remember because in those days it was not straightforward you were talking about ships you know going via iceland and heaven knows where and train journeys to finish off down to pennsylvania but anyway i think he must have had what was the technology rooney owed or cyclist styled notes when he got there he got copies of the notes and was able to follow exactly what was going on learned about the von neu the proposed von neumann architecture knew that there was going to be this thing called edvac being built in pennsylvania and he and all the other participants were more or less i think invited to go off do your own thing support the cause of general purpose binary based digital computers all electronic not electromechanical for the inner electronics and in fact it's worth saying something about this whole business about what did it cost you to be all electronic in those days i would remind you that tommy flowers decision with max newman to build colossus out of thermionic valve that's vacuum tubes for those of you still in north america it did cost you yes you could switch one and switch them off you could use them as logic elements but boy did they consume electricity and and then of course you had to have air conditioning to get rid of the heat that they'd produced all the time what held things up was you you wanted to use them as switching elements but you really paid the price in terms of power consumption so tommy flowers and his special purpose colossus machine six kilowatts edsack now being rebuilt in cambridge the edsack rebuild should go live this coming summer 2018. watch out for that good time to visit the national museum of computing which is co-located on the bletchley park site power consumption of edsac 11 kilowatts for comparison power consumption of eniac the gunnery trajectory special purpose computer 1946 university of pennsylvania usa i bet you can't remember the number sean it's horrifying 20 150 kilowatts all of that using thermionic valves for the logic elements inside your computer yes that could certainly be done the big problem was memory there was really no obvious technology for memory you get around it on the colossus machine by saying well your data which you want to remember just cycles around on a continuous loop the program well that's easy that's not on tape because that is it's so such a special purpose machine you key in the program on switches unit selectors so your memory there for your data was paper tape but if you didn't want paper towel whizzing around at 30 miles an hour what other options were available to you and the answer is not many and as we'll find out on edsack with morris wilkes coming out of a radar background he knew that in the early days of radar when pulses came along and these are interesting pulses could it be an approaching german bomber you wanted to not only get hold of the pulse but to hang on to it and remember it so you can analyze its shape and so on and the way they did that is the most amazing technology it's called mercury delay lines the bleep pulse that you get was put basically through a little loudspeaker so it won't bleep but instead of transmitting through air so you could hear it it was transmitted down a column of mercury why because sound travels a lot slower in mercury than it does in air and at the other end there was a microphone at the other end of your tube which heard the bleep and displayed it on an oscilloscope screen for you but then recycled it it took it back to the start of the mercury tube and sent it down again so you had a continuously circulating system that showed you what your pulses were and the idea was to use that same technology to represent the zeros and ones in computer memory which they did it was not very satisfactory in so many ways but you just had to do your best presumably it deteriorated didn't it the sound or no because when you when you detected it at the other end you amplified it before you fed it back again so you could keep the purity of the pulse going for as long as you wanted to that was the idea so the story continues maurice wilkes came back to england and in a testament really to cambridge's been fairly well healed and to their faith in morris and their need to be at the forefront of all this stuff they by they i mean the university and the mathematics department at cambridge agreed to bankroll morris to build one of these newfangled machines provided that when it was completed it could offer a service to the university this is very different to what happened in most of the universities where electronics engineers were just allowed to build systems where you just played with them and didn't really offer a computing service the community at all they were just pure research machines morris found himself a very good hardware engineer called bill rennick who was just excellent you had to have this you had to have a real devoted electronics engineer who knew what they were doing to get all of this working when you look at it you've got this box it's hardware you've got to get it working you've got to get instructions in it you've got to make it work but you need a software person and you need the world's first ever system software person and they'd better be good somehow these people seem to come along as and when they're needed i've never understand quite why and the answer at cambridge was a really talented person who i didn't know but rather slightly called david david wheeler we can now say that as part of the celebrations this summer when the edsack rebuild is switched on or works perfectly to go along with that a very good friend of ours on computer file professor martin campbell kelly developed an emulation of edsack and how it works so rather than talking in abstract about edsack let's get stuck in and run some programs on edsack and see what you're up against with a very genuine first generation machine where you will program in the crudest and most brain-damaging form of assembly you can imagine and you've got to get it right it is not easy to debug edsack programs it can be done but you know it's hardcore stuff you want to be a pioneer this is what you get i think what i'll do is first of all just for fun let's run some programs and get the feeling for how nice it is to be able to mess about even on a very early machine like that for those of you interested afterwards what is a great computer science technical interest is how on earth do you boot this thing up so it can read in your program in other words it's not going to buy us it's far too early for that but what was the equivalent of the bios what was it that got you started that you had to have there even to be able to read in a paper today well that's called initial orders we'll do those later for the moment we'll just accept that initial orders version two is the one that is relevant here and i've used initial orders to load in a program that was written written by an early pioneer called sandy douglas here's his name as douglas if i load in that program now by start here and this really is heads up but this was an oscilloscope screen this is the so-called display of the long tank with long tank of mercury which held roughly a killer word 1024'-bit memory words were held in mercury so it's like 1k words 2 a few k bytes that was your limit okay so when you got used to reading these oscilloscope screens and remember this oscilloscope screen is not the memory itself it's peeping at the memory by having a little monitor as it were checking the pulses in the mercury tank and displaying them on the oscilloscope and remember and give thanks for the fact that this loading please wait headset user first dial now comes back at you courtesy of martin in a clearly visible screen in the good old days it'd probably come back to you on paper tape or something and you would have to go and print it off to get your results but this is pretty well interactive on this dial here on the console do we want headset to go first to a user to go first well the game we're playing here is the one known in the u.s and elsewhere as tic-tac-toe known in the uk as north and crosses but it's simple i think everybody knows the rules and i think everybody pretty well knows that if you play optimally it's always a draw i have a feeling there's a number file on it somewhere there must be a number file on it somewhere yes you can always force a draw so should we do first of all we'll take the lead and force a draw so headset or user first well we'll say user first so i dial one now let's watch see what happens oh look at that the cathode ray tube display has been altered by the program to actually show the grid that we're going to play tic-tac-toe on and because it's me the user first it's now saying to me dial my move now here's the key at the top look 987-654321 those are the areas on the tic-tac-toe board and as we all know i think optimal strategy is to grab the center one first of all yeah and headsets responded by putting a naught in at the top left i'm going to respond by knowing it and i'm going to dial in seven yeah now i should you think that's a slow response was that really that slow that is six times faster than headsack was i've calibrated it this emulator on this machine seems terribly slow but it's running six times faster than edsac did right at the very end i may allow myself if you want to be shocked and horrified to click the thing up here that says real time that will slow it down so that it really is as slow as heads up why don't we do that now let's do that now after you make your move let's see how slowly it would there have been one of those dolls that looks like an old telephone deck it is an old telephone dial and i think that was there for diagnostic purposes on the actual lead sack yes we're trying to win this aren't we no no six isn't it i put an x in there otherwise the wretched machine's gonna win was that slower oh yeah i think it was ah but look it's blocked me there it's doing the right thing so i put in an x at eight there we go it's definitely slower definitely slower and good old sandy's programmers already told me it's a drawn game so let's load up from the library ah conway okay well i think we all know about conway's game of life there are these sets of dots and there are various rules about a dot in the middle either been overcrowded with too many dots around it or getting all lonely and out on a limb and dying off but in the middle if it's just got the right number of friends then they breed and they spawn off more things it was a very popular invention by john conway was it the 70s or the 80s somewhere around there and everybody was playing live using pens and paper methods or using computers lately of course now this was not written actually at the time of ed sach's unveiling in 1949 because life hadn't been invented but somebody later later on with this simulator in in mind and in view has actually written conway's life to display here for us so let us load this thing in it's by ian gilman written in 1998 and the rule is on this emulator for those of you that download it the program you are displaying is the one that will get loaded and run when you press start so just keep your program windows in the correct order one on top of another and the one at the top is the one that will load so we'll load it up with start takes quite a while to load the tingles it's quite a complicated program ah now it started calculating now this is the initial configuration it warned you here each generation takes about five exact minutes now i have not put it onto real ed sac slow time i've put it on six times faster simulator time again all according to conway's rules it will look it's gone it's changed new generation so i think my rule is about right it is roughly five to six times faster here because it's taking around about a minute i just then put it onto real time and samples well we'd run out of tape we'd run out of tape but anyway so i can see a clock on the right that looks like it's going a bit fast is that i think that's trying to show you genuine headsack time so if on this simulator it's five or six times faster than real headsight would be it's therefore making the clock go five or six times faster i think to show you how many elapsed minutes it would have taken on edsack down at the bottom there i can see a lot of flickering and flashing that's all the calculator that's all the calculation this is showing you see look you've got a multiplier register in your cpu you've got the thing you're multiplying by you've got the answer which comes out in the accumulator even modern chips have an accumulator for your current arithmetical answer right the sct here is showing you the address of the current instruction and the actual bit pattern for the current instruction that has been decoded and executed is shown in the so-called order tank so that's the instruction register that's the pointer telling you where from memory you've taken that instruction and it's a pretty minimal cpu the thing we notice here is there are virtually no general purpose registers which is what you get in a modern cpu so i think that's a pretty good one actually to illustrate with we can stop it off now so i hope this has convinced a fair number of you particularly those of you very keen on history of computing and low level programming in general that it's a testament really to the very spartan architecture of edsack you know cut everything down to the bare minimum get it working it's got to give a service and that means that it has stood the test of time it's worth rebuilding people could find it easy relatively easy to do a good emulator for it and that in a sense has made it worthwhile to rebuild at leslie park so you can be part of this get hold of martin's emulator enjoy yourself write ultra low level programs for foreign oh and remember when you're doing it that the actual pseudo tape you type up in the end although on these program listings you're allowed to put comments on because you're a weak human who needs to remind yourself of why you're doing that when you actually key in the tape itself that backs this up there must be no comments no extraneous characters only white spaces permitted so there you are anyway enjoy yourselves and the next video is basically saying how on earth do we get this thing to boot that is the von neumann architecture and it's very very similar today there was a big debate at the time about that store that memory shouldn't you for safety's sake