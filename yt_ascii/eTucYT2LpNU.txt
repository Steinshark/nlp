hey everyone james murphy here, this 
is mcoding, and let's just jump into   it with some controversial events 
happening in the world of python.
  if you haven't already heard the news, 
the cpython developers just pushed out a   breaking change to the language, modifying 
longstanding behavior of how int-to-string   and string-to-int conversions work, putting a 
default limit on how many digits are allowed.
  previously, there was no limit on 
the size of integer you could use,   as long as you have enough memory to hold it. 
this was one of the cool features of python   that new programmers would often explore. just 
print math.factorial(10000) and there it is.
  but if you download python today,   instead you'll be greeted with an error 
telling you the answer is too big.
  the default limit is 4300 digits.
users must now call this   sys.set_int_max_str_digits to increase the digit 
limit or set it to 0 to disable the limit.
  now it prints just as before.
this limit only applies to conversions   from int to string and string to int that 
aren't in a base that's a power of 2,   so printing binary and hex are not affected. 
but humans normally write numbers in base 10,   so this does affect the most common use case.
also note that this is not a limit on the   size of integers outright, only on 
conversions to and from strings.
  so you can still operate on big numbers without 
any changes, you just might not be able to print   the results. that's why the error here is on line 
4 where the print statement is, and not on line   3 where the answer is actually computed.
part of what makes this so controversial was   that this change, which undoubtedly breaks some 
existing projects, was pushed out with essentially   no warning to the community not just to the 
latest development branch of python 3.11,   but to python 3.7, 3.8, 3.9, and 
3.10 as well in a patch release.
  patch releases are generally meant to be 
made of small changes that are completely   backwards compatible or that fix outright bugs, 
errors, crashes, or security vulnerabilities.
  as such, tooling such as automated test 
runners may use the latest patch by default   and package managers may ignore the patch number 
when considering version compatibility.
  this means that projects depending on the old 
behavior will have their automated tests broken,   and their users who are on the latest 
patch will immediately start experiencing   these breaking changes, even if the 
project hasn't made any new release.
  so why would they push out a 
breaking change like this?
  going to the cpython source, this github issue 
claims the previous behavior of int/string   conversion is a security vulnerability, which 
explains why it was able to be pushed out so   quickly even though it was a breaking change.
this vulnerability was initially reported in may   of 2020 and officially went public on september 
1, 2022, according to redhat's cve page,   although the github issue was apparently 
created a month before, in august.
  so what is this vulnerability?
well, cpython uses an n^2 algorithm   in the number of digits for int/string 
conversions when the bases aren't compatible.
  here, a mere million and one digits 
took 4.5 seconds to complete.
  we can confirm this n^2 behavior empirically by 
looking at the timing plots for conversions.
  we can clearly see superlinear 
growth in this plot.
  and, if we look at a log-log plot and compute 
the least squares fit we see that the estimated   power is very close to 2.
so, empirically at least,   this really is an n^2 algorithm.
under the hood, the actual algorithm   that python uses is very similar to 
these basic conversion functions.
  it's really not much more than repeated division 
or multiplication depending on the direction.
  these may appear to be just o(n) algorithms, but 
it's actually o(n^2) because multiplication and   division are not constant-time operations since 
we are working with arbitrarily large numbers.
  so these divide-by-10 or multiply-by-10 
are actually o(n) operations themselves.
  this means that converting between integers 
and strings is more expensive than you might   expect and it opens python up to a 
denial of service attack on any code   that tries to convert between them.
in particular, any kind of parser or api   that takes base 10 values as strings may be 
vulnerable, including the builtin json module,   parsing libraries like pydantic, and 
api frameworks that depend on these.
  a bad actor can send a moderately large number 
with say a million digits to cause an api to   freeze for around 5 seconds like we saw.
the new default digit limit fixes this issue   by raising an exception that your code can 
catch unless you have explicitly opted-in   to allowing this expensive conversion.
of course, primarily in favor of the change,   there are operators and users of services 
that have these vulnerable apis.
  the original github issue argues that the change 
is necessary in part because of how incredibly   common it is to take unsanitized user input from 
the internet and pass it directly to int.
  on the other side are authors and users 
of libraries that use big numbers,   meaning this is probably going to 
hit math libraries the hardest.
  this may complicate things for their users and,   of course, now the code that they've 
already put out there is broken.
  some in this camp have argued that doing 
anything with unsanitized user input is   already a vulnerability waiting to happen, 
so it should really be up to vulnerable apis   to sanitize their inputs, not the python 
language to limit how numbers work.
  others are confused why we're using 
these n^2 algorithm, when there are   known faster algorithms readily available.
potentially, switching to faster algorithms could   make the denial of service infeasible, eliminating 
the need for the digit limit at all.
  and then, of course, there are a large number of 
people that are perfectly fine with the change   as they are most likely not affected by it, 
but just upset by the lack of transparency or   opportunity to have their opinions considered 
and to potentially prepare for the break.
	
  regardless of how this issue pans out, 
the core dev team did apologize for   the lack of transparency on the issue, 
although it is sometimes necessary for   security vulnerabilities.
and they are welcoming   further discussion on the issue.
if you have an opinion on the matter,   especially if you are affected by the change, the 
correct place to respectfully voice your opinion   is the python discourse, linked below.
please keep your suggestions and criticism   constructive and don't use 
the discourse to rant.
  and that's where i pass it off to you.
what do you think about this breaking change?
  is protecting vulnerable apis that you or i 
may unknowingly be using every day worth it?
  even if that means some math 
libraries are broken?
  or should vulnerable code be on 
the hook to sanitize its inputs?
  don't forget to subscribe, 
and i'll see you next time.
  as always, thank you to my patrons 
and donors for supporting me.