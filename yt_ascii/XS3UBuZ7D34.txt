great to see you on computer file in this sort of strange remote manner what is it you've got to talk to us about there was a really nice story about a real programmer who who did all sorts of tricks with things a guy called mel kay who worked for the royal mcb computer company and he he was the ultimate real programmer and you can follow the story through but he did some outrageous things with the machines to just get them all to work and there's a number of things we could talk about but the one i wanted to start with was the memory they had at the time which was all based on drums drum memory i think it was kind of the first sort of memory they ever had there was some stuff i think dave railsford referred to why they actually had mercury delay lines but they didn't last very long because mercury is not easiest thing to work with so these were sort of the very first commercial ways of storing anything at all so i don't think this video quote is quite good enough we might have to sort of pick this up yeah so let's pick it up when we've got everything all sorted but it sounds like a fascinating story okay yeah well i've got some examples that we can put together to perhaps illustrate some of it and even some broken hardware that's lying around including this broken broken disc here a real programmer is somebody who's not afraid to use go-to's not afraid to go in and change the binary code directly if that's what gets the job done probably doesn't use even high-level languages they probably go straight down to the metal and they know the computers intimately so this was brought into sharp contrast by a lovely story about a guy named mel who worked for a californian early computer manufacturer this is in the late 1950s and they had a new computer and one of the jobs that mel had was to write a program to play pontoon or 21 blackjack so they could use this program when they took the computer to various shows or to customers but this story actually which we'll probably put a link to highlights quite a lot of interesting items about computers so certainly in the early days we didn't really even have memory then well this predates me so the early computers didn't have what we might view as conventional memory as sort of magnetic cores or anything like that or hard disks the very earliest computers did a variety of things and quite a lot of their own things but fairly early on it was settled on something called drum men memory and that's what i'd like to talk about today is the sort of first introduction to this real programming and what you could do with that to explain drum memory i thought it was probably useful to start with something we know so this this is a hard disk an old one of mine that no longer works so i thought if we have a look at it and explain what's going on so inside here there's a disk and there's a head that reads and writes from it so let's go and have a look at that so there are two important things about disks when you're trying to read from them one is latency which is while you wait for the particular bit of the disk you want to come under the read and write head so you just have to wait for the disk to spin round also on disks there's a seek time which is while you wait for the arm with the heads on it to move over to the bit of the disc you're going to eventually wait for the data to come under so this is a hard disk drive so you can't do an old one now don't do this at home because it will destroy your disc so this is the disc drive it has here the heads which are floating over the disc so this is the surface of the disc i think you can see there are several platters it's not just one single disc there's actually a stack of them and each one of those has a different head you can see this moves about slightly so this is the seek time you've got to move the head backwards and forwards to come to the right cylinder which is the three-dimensional view downwards and then you have the latency while you wait for the data to come around and come under the head and then you can read it now i think we can actually get this too far up it's it's broken so it doesn't actually work but let's see what we can do plug that in this is the power supply and i think if we switch it on so we can see the disc is now spinning up you can hear it making a noise and then we can see the heads moving this one's broken so it doesn't actually ever get there but you can see how quickly the heads move so this is what limits how quickly you can get data from the disc is how quickly it can spin so it's spinning pretty rapidly so the data does come under the heads quite quickly and then this thing has to jump around as quickly as it can to get to the right part of the disk so between those two that's what limits your read speed of the disc so the drum memory i don't actually have a drum because they i think they went out of use finally in the 1970s but they were used from about the 1950s onwards although i think they were invented in 1930 but this is what a dumb drum memory looks like so it's just a drum with just like a disc it has magnetic stuff on it and there would be a read-write head here so the drum would spin round but the difference between this and disc memory is you had a fixed number of heads you'd have heads that went all the way down but these would be positioned like this over the tracks and the density wouldn't be anything like on a hard disk today so the drum would spin round like this and what this means is you don't have any seek time the heads are always positioned over the numbers or the the tracks so all the time you need is just the latency for it to spin round and if you want the 24 for that to come under the head and then it can read it but there are all sorts of tricks you can play with this so if you're a real programmer you know how long it takes for an instruction to to work so let's suppose this 24 here was an ad instruction or something like that and you just wanted to add three to a number something like that so the drum would come round it would read that 24 and you would know because you were a real programmer and you knew intimately what your machine was capable of that an ad instruction might take i don't know 10 milliseconds or something like that to complete so if it took 10 milliseconds to complete in 10 milliseconds how much would the drum rotate so what you could do if you were a really good programmer and say well i know 10 milliseconds is about a quarter of a rotation or something like that i know the heads are going to be sort of hovering over this position ready to read it so i do the ad 10 milliseconds i put my next instruction here and it's right ready to to run there if you just sort of put them anywhere on the drum then you might have to wait for it to rotate completely around to read it again so by positioning these instructions on the drum you could actually increase your program speed quite considerably because everything you needed would be waiting waiting for you so you read your 24 and you your next one is going to be 30 and by the time you're ready for it lo and behold it's there under the under the read head ready to go another thing that mel did was they had to print out stuff on a basically a sort of typewriter like console and this could only output at a certain speed so it would print a you tell it to print the character a or something like that and it would print the a but it would take a few milliseconds to actually print the a and then be ready for the next one so in this case you want to use the drum to actually slow things down so in in mel's case he would print the a and he'd put his next command to maybe print a b or something he'd put it right the way around the other side of the the drum so it would pick up this and say right i'll print the a and then it would have to spin all the way around here before it could pick up the next instruction which was print b and this he could work out was enough time for the printer to print the character be ready for the next instruction so you could use this for a sort of delay loop you instead of having to what's traditionally done for delay loops which is just counting up to some number you count to 100 or something like that and that's it done he didn't need any of that he could just wait he could say well i know exactly how long this is going to take to come around so i'll just wait for that to come around and then pick it out and yet another thing he could do is if he wanted to add just arbitrary numbers to say you've got a variable and you wanted to add seven to it what you could do is say okay i'm going to write in my program and add instruction and the number seven but if you like he did really knew what your computer is the instruction set is just a bunch of numbers so we might have here 24 represents the instruction code for for an ad but a a store instruction might be encoded as a seven so if you wanted to add seven to a number then he'd look around his drum and say where have i got a seven that's being used as a as a load operation oh it's over here actually if i position that over here this will be just perfectly positioned so just by positioning all these things in a sort of matrix you can get all sorts of things and of course you've got lots of positions you can move further down the drum i haven't written them all in down here but there's all sorts of places you can use to store them so those are a couple of tricks that he used and if we'll probably go on and discuss some of the other tricks that the early programmers could use to speed up or slow down or just get the maximum amount of ability out of their computer because you're really very limited in the amount of storage you've got and speed is everything at these points because these computers were not were running with transistors they were still running with valves at this point so every second counted you only have to work out whether it's worth alerting the user if you find the key so you know you download the temporary exposure key you perform the encryption you generate the potential rpis and you compare them with the ones you've seen or if you want a more slightly comprehensible message it's saying maybe you haven't applied a function to enough arguments