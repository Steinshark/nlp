last time we were playing a game on a terminal and you sort of teased a little bit about what was to come next so where did we go with this yeah we're playing the game of rogue which was one of these early terminal based games but had this terminal addressing so it could jump around the screen and draw you know a nice map and so on but i'd sometimes thought perhaps we could i don't know code up something to play it myself but no it looks really really complicated firstly you've got to interpret all this screen stuff and make your own map and then it's a fairly random game so you've got to take decisions at every point and thought yeah well anyway i've got some other work i should be doing anyway but then across the internet as it was some people at carnegie mellon university had taken on the challenge in fact four of them michael mauldin dwight jacobson andrew apple and leonard hammy they'd actually investigated this they got a system that could interpret all these codes coming to you instead of going to the screen they sort of intercepted them and understood them and made their own map of the dungeon and then they had a quite sophisticated exploration program so there's a lot of path finding to work out how to get from a to b and what to do when you met a monster and it got more more sophisticated and the version i eventually got hold of at a genetic learning component which i think you've done a video on it so this is quite a reasonable thing to do because nobody actually knew how to play the game perfectly there are so many decisions and things you know do you do you keep running away from the monster and hope that you'll recover and fight another day or just just go in there and hack them to bits and hope that you survive and so they had genes for each of these things you know how how aggressive should i be towards a monster how much time should i spend exploring this level and when should i stop and just go down to the next level because the rewards are better down there but the monsters are bigger so if you played it enough times it would decide which of these were the best opportunities and they started off i think with about eight or nine of these genes that looked at different things i expanded it considerably i think i had 250 in the version i've got some of them don't do anything but it's always good to have some spare ones around so that that was quite an impressive game and it it did actually do very well they did actually win the game at least once there was a bit of a war between the implementers of that and the game rogue itself so as new versions of rogue came out they would subtly tweak things so that this program would no longer work the text that came you know you hit that monster really well or something they changed that to you scored a great hit and then the program was hard-coded to do certain things when it got a certain message and then if you tweet the message the program stops working yes exactly that yeah in one case they went for capitalization so you had capitalization the beginning of the phrase and they changed the words they changed the monsters so it got more and more sophisticated so that it could actually play against several versions of this that was in sort of the late 80s i think i got hold of the first version i just kept tinkering with it it was sort of my go-to project when i was born without anywhere else i was doing like a tinker with that as systems evolved it stopped working computer operating systems had changed i had to port it to the new versions and the way it interacted with game change somewhat so i had to do that and then i went on to this genetic learning my latest version which i started i guess the beginning of this year somewhere in the middle of lockdown anyway was to rewrite it all in c plus plus the original was written in c so i thought that there's a new c plus version come out c plus plus 17 has a few new features so i thought it'd be nice to try exploring that with a proper project i also embedded another language called lua i don't know if you've done anything on lua no no it's a kind of language that's supposed to be embedded in other programs so if you want to tweak how your program runs lure is very easy to embed in another language another program and it allows you to sort of configure it and it has arithmetic and string matching and all that sort of stuff so you just make calls into your program and call out to this program and then you can have a whole script that does things it's very popular in games so you could sort of have the the heavy lifting of the game done in c plus plus and then you can have these scripts that control how things move spaceships move or monsters move or whatever you can just it's of course it's very quick to then code it up because it's all interpreted so i put that in so that i could adapt to new versions because there's there's really only about three or four versions but since that time newer systems have ported it people have reinvented it there was rogue there was super rogue there was ultra rogue there was net hack and net hack was beyond a rogumatic system which is what this system was called that was far too complicated did quite a lot of work on this i've still never won the game even with the help of rogomatic it's got further than i ever did but it has a recording system built into it where you can either start recording at the beginning or you can record it in a time or it automatically starts recording if you go below level' it says all right this this is a good game i better save this is it a bit like watching something on fast forward if you run it at full speed and you can actually hardly see it get a longer game another way you can run it is terse mode in which case it just prints out what it's doing each time that's that's what i used to run it in because it was a a bit of a cpu hog it doesn't these days we've got much bigger programs these days but when when you were time sharing with lots of other people then you had to keep it running slowly there any stupid mistakes it makes or what we would call ridiculous mistakes there are some mistakes it certainly makes so and particularly of the newer versions where i haven't quite got all the subtleties coded up so that there's one case where it goes into a room sees a monster and says all right okay i better get into the monster fight or flight mode you know do i go and attack it or not decides to not attack it because it's look to the statistics and decide it's perhaps not a good idea so it backs out of the room but in this version once you back out of the room the room goes dark and everything is hidden and it then re-evaluates and says oh i was going into a room there and there's no reason i shouldn't go into it so it goes back into it the monster reappears oh no backs out again so it just shuffles backwards and forwards there's several cases where it gets stuck into those sorts of loops and they're usually cured by another monster wandering up and making you reevaluate your decision so suddenly you've got to take an action and that's what pushes you into things there is a bug in the curses version that the very early one uses that draws walls wrong occasionally and that that really confuses it and roger matic settles on a set of genes eventually but it takes a few thousand runs to actually really refine it down to something and then as you add more genes it's it's more complexity so it takes takes even longer to settle down then how long does a few thousand runs take now probably a few hours i guess to to get through that sort of thing it's the sort of thing as long as i work really hard to try and make sure it never froze so that it either completed the game or just quit or or just gave up so that you could have a script that would continue to run it so you could leave it running go to bed and wake up in the morning and there'll be a few thousand runs done by that time what used to happen is you'd leave it going and the second one it would get hung up somewhere and just sort of lock lock up into the system and not give you any useful data the guys who wrote the rogomatic the these people at cnu they actually got sponsored or got sponsored partly by the dod under the arpa project so they got some i don't know quite how they managed to wrangle that we want to write a program to play a game and that's just the sort of things the defense systems would like is it well we've all watched war games so who knows yes yes yes do you want to play a game yes it's probably better than global third nuclear war certainly i don't profess to be an expert in game theory at all but obviously the the ideas behind coming up with challenges and solving those challenges has got to be interesting to anyone who's in kind of war games i suppose yeah especially i guess this one because the logic is not fixed you have to adapt to it and be a learning learning idea with the genetic stuff that's always it was very early days it was the first time i'd ever heard of genetic algorithms wow what are these and so i spent a while playing with them but i've never used them seriously apart from enrogamatic which you can go back to your computer and now you've got a message from this first hop go again set the time to lift to two it decrements to one decrements again and now it's a little bit longer then we've got sixty possible positions one we've got a two three out of five and then