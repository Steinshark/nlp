we are going to look at this right here introducing pickle i think is how you call her pacle or i'm sure there's maybe there's some other cool one we haven't thought of yet a programming language for configuration now here hold on you're probably thinking right now at this exact moment your first thought must be great we were only one programming language away from society being perfect and guess what we got it boys and girls we are official we're we've reached perfection now the reason why i was very excited about this is i heard that they also apple just sit down for a second made support and specifically called out neovim is apple okay hold on is apple is apple changing their ways are we about to see like a a neovim arc coming out of apple tell me that would not be just the coolest thing ever tell me that would not be the greatest day of your life i know it'd be my it'd be it'd be a great day for me because i just love apple okay i don't love apple i'm just kidding i love i love neovim anyways apple is neovim aligned everyone knows that i know it'd be it' be exciting well i don't well i didn't know that i didn't know that neovim will be default in apple vision pro no way really dude i didn't even know these things this is fantastic we are delighted to announce that open source first release of pickle pronounced pickle a programming language for production configuration i'm very curious why we need to okay so what's also very confusing is they use the term programming configuration can i just make i'm going to you know i know people always tell me that i react too early and i give my opinion without reading we're going to do it again anyways is pickle going to be more closely aligned with nyx right is this just apple nyx is that what we're about to learn when thinking about configuration it is common to think of static languages like a jesson well it's not really i mean yeah i guess is it a language do you even call it a language a yaml or property lists with while these languages have their own merits i guess you technically isn't a programming language because json literally does not have an if statement right and so until it has an if statement or a branching logic i believe it does not is not considered a programming language i believe that's like like that's the technical definition anyways that's like the easiest technical definition or the layman's technical definition shall i say it's not touring complete would be the technical definition so the the layman's one is does it contain an if statement while these languages have their own merits they all they tend to fall short when configuration grows in complexity for example their lack of express expressivity means that code often gets repeated a have you seen any jasan additionally it can be easy to make configuration errors because these formats do not provide any validation on their own hey thank you zaro i appreciate that to address these shortcomings sometimes formats get enhanced by anary tools that add special logic for example perhaps there's a need to make code more dry okay hey yo let's be careful about just tossing out the dryw around here okay i don't i don't i i it i i don't okay i don't need i don't need people abstracting here i'm actually pretty unsure that i like this idea already if if your goal is to make things more dry in configuration i i don't know how i feel about it yet right i'm feeling pretty hesitant right now so a special property is introd introduced that understands how to resolve references and merge objects together oh falor nice they wrote falor alternatively there's a need to guard against validation errors so some new way is created to validate a configuration value against an expected type yeah usually you do this with like a typed uh like a typed value right you have some sort of like type number value this validation that or some sort of you know you pretty much put your configuration as or you put your validation as configuration and there a scheme of some sort yeah before long these formats almost become programming languages yeah they're pretty much a programming language because everybody wants to add one it needs to be larger than this other field like the moment you have that use a programming language right but ones that are hard to understand and hard to write the other let's see on the other end of the spectrum general purpose programming languages might be used instead like cotlin ruby or javascript become the basis for a dsl that generate configuration data i would have chosen go but okay while these languages are tremendously powerful they can be awkward to use for describing configuration because they are not oriented around defining and validating data additionally these dsls tend to be tied to their own ecosystems it is hard to sell it it is a hard cell to use cotland dsl as a configuration layer for an application written in go i think we can all agree with that go mentioned let's go go mentioned i think we can all i i think we can all agree with that it would also be a hard cell to have a go dsl for configuring application written in javascript right you're going to have a bunch of javascript andies that don't want no go you got a bunch of go andies that don't want no colin right you could reverse a you could just put two programming languages together and people don't like it so the only solution is to create a third programming language this where we landed we created pickle because we think configuration is best expressed as a blend between a static language and a general purpose of programming language we want to take the best of both worlds to provide a language that that is declarative and simple to read and write but enhanced with capabilities borrowed from general purpose languages when writing pickle you are able to use a language features you'd expect like classes functions conditionals and loops starting off with classes we just lost all of the functional bros like all of them it's terraform is is this i've literally never written terraform therefore i'm out i am so out y i know dude dude we're in shamp right now you can let's see you can build abstraction layers and share code by creating packages and publishing them most importantly you can use pickle to meet many different types of configuration needs it can be used to produce static configuration files in any format or embedded as a library into another application runtime okay interesting interesting i mean that sounds useful i i am you know i'm cu i am curious about this stuff i've never really been in the in in this arena of programming i've never been around this type of stuff i don't even know really know what to look like it's well lua would be more akin to javascript right because lua is i mean yeah i guess you could lua is more akin to javascript than it would be to be declarative right because it's a very imperative language we designed pickle with three overarching goals to provide safety by catching validation errors before deployment to scale from simple to complex use cases to be a joy to write with the best-in-class ide integrations okay so this obviously this makes things extremely like this right here that's that's the best that will always be a w if if you're i mean it's why i'm completely convinced that typescript won the javascript battle honestly i'm completely convinced of it because they strove for great editor integration right off the bat and i think that's honestly what made them win yeah typescript such a joy or right i'm not saying it's a joy or right i'm just saying to win the hearts and minds of developers if you don't have good tools you're it sucks strove is that not a word am i am i making up am i making up words here yeah strove past tense yeah why how do you not know strove no i'm not looking at that xkcd comment i already know which one it is we have 14 we have for we have 14 ones what we need is one more now we have 15 all right so let's look at this we created pickle to have familiar syntax developers be easy to learn o this is a good move this is a good move this is a very good move that is why we included features like classes functions loops and type annotations type annotations let's go for example here is a pickle file module that defines a configuration schema for an im for an imaginary web application this file defines types not data this is a common pattern in pickle we can call this a template okay module application host string name port uint 16 environment environment i don't know what an environment database okay database is just a class that has oh okay so when they say classes it looks like they're not really saying class as in the oop style they're literally just meaning object username password host port db name okay okay environment is just a type alias for dev qa prod okay okay okay yeah more like strict object yeah yeah yeah yeah yeah yeah and here's the configuration data that might be defined amends okay strange word don't even know what that means host equals this this this okay so you define a template oh that's kind of interesting oh that's actually pretty interesting that you first define like a a a the template as they say or really you're defining the you're defining the type if you will of what you must fulfill and then here's the fulfilling of said type it's like a dts file yeah yeah yeah yeah exactly it's it's it's it's it wouldn't be like an abstract class it would be it it's it's more like it's more like dts i give it a strong maybe i'm giving it a strong maybe right now because there's things i really like about this this must be like effectively inherits or you know implements this thing and then here's the implementation of said thing built-in read expression by the way this is super cool can we all just take a moment and say that that is super cool the reason why i say it's super cool is is that i assume that read could be overridable and so you have the type of operation you want to do the reading and the key you want to provide meaning that you don't have get environment variable instead you have read type and this yeah i i do i i i do really wish that you know i do really wish that amends probably is better well i guess amends might be different if it if strictly these are for implementing they should have used implements but if you can add to a specification without implementing it then amends is really the correct one but this is more of an implements than an amends i really like the idea to put secret secrets and environment variables where every subprocess can spy on it yeah it's great huh okay it's easy to let's see it is easy to create variations of the same base data by amending for example let's imagine that we want to run four databases locally aside cars this this uses a a four generator to produce four variations each of which amends the base db and specific uh and specifies on different ports sorry i i had i had a stroke okay so we have this thing we import this guy okay so we're not amending we're importing hidden db equals a new one of these oh interesting we create okay whoa this is pretty this is it's pretty interesting sidecars four offset en list zero through this if db port equals that plus offset huh and then you could just yamel that here let's look at it and and then you get a sidecars key interesting oh that was a great point yo yo yo low-level learning that was a great point lowlevel learning said that the password gets exposed in the exel generation of the thing i mean i guess at some point the password has to get exposed by i mean at some point the password is written in text but this is actually kind of interesting in the sense that it's a language to produce json or yaml not toml or xml everybody's favorite hunter 2 as a meme is so perfect they this this is a very well-written thing they they they why not just use write typescript the problem about why not okay why not just write typescript the problem with typescript is that typescript is too expressive and i do mean that the moment you allow somebody to write typescript you get to write typescript and therefore you now get to make an htp request you now get to do anything you want to do now get to write all the classes all the functions all the functions producing functions you get to do all the things that you would do with typescript now into this now you have to have a build step for your for this i mean the this one already has a build step but at least it's going to be one singular tool that actually has a well-defined build step unlike the cmake life of typescript like there's something better about having having specific languages for specific tasks almost always tend to be a really like a pleasurable experience writing in you know what i mean like javascript for manipulating the dom is not a bad experience it really truly isn't lua for manipulating vim ui is not a bad experience using a language for why it shouldn't be used usually tends to be kind of like a it feels more trudging often and that's why using typescript for everything you can find that sometimes when you write typescript it's like really enjoyable to use that's because you're probably using it for its a good purpose and if it when it's like not enjoyable to use you find that you're now using it for its non-intended purpose but you're just kind of shoehorning it to make it work that's kind of like how i always how i look at things you know i mean all right configuration is about data and data needs to be valid in pickle validation is is achieved by using type annotations and type okay i like this i like this i'm liking what i'm hearing everybody can we all agree what features make javascript enjoyable to manipulate the dom oh it's completely loosey goosey and untyped like real talk when you're when you're when you're merging a bunch of crap like that that is a really great thing now you use typescript to give it some level of sanity which is nice but have you ever worked with like a a heterogeneous type something that has like multiple potentials either you have to have really strong boilerplate code that has these enums and you have to do lift operations you have to do a whole bunch of stuff or you just simply just like type booing do the booing thing right and that's really nice for ui and which are pretty loosey goosey second thing that makes javascript really a delight for using with the ui is that you don't need to have a compiled version that someone has to download and install instead your engine that's already compiled and running goes and requests the next updated version meaning you can do live patches extremely easy and that only really works with interpreted languages right yeah the dom is super flexible and doesn't crash into oblivion it they're like meant to they're meant to like work well you know what i mean it's just like lua lu is not a great like i wouldn't want to do i wouldn't want to do a serious server in lua it's just i think it's the wrong language even though i'm great at lua i i feel completely capable of writing a good server in lua i wouldn't want to do it in lua if that makes sense in pickle validation is achieved using type annotations and type annotations can optionally have constraints defined on them very cool here's an example that defines a constraints age must be between 0 and 130 damn damn methusa out just can't even be defined in this schema it should have been 969 people nice name am i right on that one methusa age 969 got it i'm smart man on the universe name to not be empty zip code must be a string with five digits oh damn you dude dude you f that one up you f that zip code up just just right up it could be a five digit or it could be a it could be a nine digigit with the dash at the at between the fifth and sixth you know what i mean all right unless if you live in the uk then you're effed as well yeah anyways person pickle module person name string is not empty oh this is cool this is cool oh very list very oam int is between string matches reject you got a production problem huh i mean besides for the fact that we got a redx in here and i feel like we got a production problems just just everywhere this is this is it is actually super cool this is super cool your age will never be a long int it dude it will never even be a short what's wrong with that rex is this is a perfectly fine rex and i would never have a problem with that but can we all be real for a second this ain't the redx you're writing okay it's never been the redx you're writing in fact if you even go over to what's it called rex rex license licensing. org i believe i got that correct i always have to remember how to spell licensing i can't remember if it's an s or an s dude i how come i can never spell it one of the typical disasters is enforcing zip code globally using a redx like this is a disaster to do so despite this being a simple for example and we all agree this redx is well understood and easy to to get a zip code globally redx would be a nightmare it is a true nightmare country codes and phone numbers yeah simple yet useless yeah exactly simple yet completely not even useful failing let's see a failing constraint caused an evaluation error age negative five modules constraint person is in between this file person age age is this o great air oh great error oh oh that is a good one this is nice damn this is nice this is nice i like it constraints are arbitrary expressions this allows you the to author types that can express any type of check that can be expressed in pickle here's a sample type that must be a string with an odd length and whose first character matches the last character string length is odd wow that's such a specific function someone had to make character first equals or charge first equals charge last nice who here by the way calls it cars versus chars i should call it cars i should npm install is odd well yet the install is even i should call it cars cares yeah cares would be like the correct way to say it i should call it cares here's the reason why i should call it cares just like you should call it a regex here's the reason why it's short for characters care characters regular expression regex who cares jay jay that was that was a pretty that was a pretty funny one jay hey jay hey j a j ayj aj aj pretty funny i'll i'll give it to you the first time chad are coming in coming in chad chad like that pretty good that's pretty good sharing packages pickle provides the ability to publish packages let's see and to import them as dependencies into project this provides an easy way to share pickle code okay that's this is this is pretty cool as well i actually really do like this feature if you had you know a specification you need to be able to launch say as an internal service on this you can just say hey here's the minimum requirements that you must meet i like it the this one's including toml which is i'm a little bit confused oh a toml renderer oh my goodness you can provide your own renderers you can provide your own renderers or they just simply didn't give us the option of toml up here because toml why you got it why did you why why do you got to have a fourth why do you got to have a fourth okay toml mentioned alternatively they can manage as dependencies of a project using a project allows pickle to resolve version conflicts between different versions of the same dependency within the dependency graph it also means that you can import packages by simpler names am men's package project dependencies toml equals u this thing right here oh you can you can manage your pickle dependencies with pickle kind of feels like you're in a pickle when you do that sorry i'm just just genuinely confused sweet okay i mean this is cool i see sorry chat's chat's wild chat's wild a set of packages that are maintained by us the pickle team these include pickle pantry and pickle kubernets language bindings pickle can also introduce configuration as textual objects okay i like it i like it i absolutely do like that uh flip take this out take it out flip slack mentioned take it out take it out take it out take it out take it out yeah i know i forgot to peak kill slack shut up let's see for example the application pickle example from above generated into swift go java and colin pickle even includes documentation uh comments in the target languages oh wait hold on what import pickle swift okay so this must be we must be looking we must be looking at some what are we looking at here what what am i looking at here the problem is i don't know swift so i can't tell if i'm looking at swift or what the hell am i looking at oh pickled register type [music] oh okay so this would be something like akin to like a ser macro with pickle is that fair to say oh go yes okay type application struct okay so we have all oh okay so you have your pickle configuration in a struct and then you have your database pickle go package application here's all of this stuff okay oh look at that oh nice i like this by the way this is such i feel like i like this better than sday not performance- wise i just feel like i like it more anyways environments go pickle okay we have this package environment encoding dev we have this nice environment string okay beautiful beautiful interesting and so then how how do all these values come in like using code generation is just oh this just generates the code oh interesting so you can actually just straight up generate it okay is one of the many ways to embed pickle within an application our language bindings also provide evaluator apis to control pickle evaluation at a low level and users are free to act with pickle at the abstraction level that makes most sense for their application huh i obviously i have never used these things and so i i'm i'm i'm by far at best a layman when it comes to any of this stuff i'll say bonus is that it looks like it makes it really easy to interact with the language of your choice and your configuration it also looks like it it makes it easier to manage configuration because you generate your configuration off of a what appears to be a fairly sane language the thing i don't like is that it's yet one more level of abstraction yeah exactly generated code always makes it simpler and the thing that i worry about anytime i see these things is that more abstraction levels almost unequivocally makes things harder but no abstraction oh gosh oh oh oh what what just happen oh my oh oh what the what the [ __ ] just happened my eyes dark readers there's some timer dude how much do you want to bet there's a timer on this website there's a timer on this website that like red does or fetches something or does something and it breaks dark readers i dude i honestly don't even remember what i was talking about we'll talk about this in a second we'll talk about this in a second theo we'll talk about that in a second editor support we believe that a programming language is only as good as the experience of writing it dude by the way this is an incredible statement i i i love this that is why we aim to provide best-in-class editor support when writing pickle in an editor users are guided through process the process of filling in configuration data for a given template additionally the editors provide instant feedback if any let's see if any of the values are invalid documentation is immediately available when called upon by the way let's go let's go let's go i like this i mean this all looks really good this is great by the way this is really great can we all agree okay so i actually i may take back how i feel about wrapping like more abstraction in the sense that if this provides the ability to be able to write configuration with this level of like with instant autocomplete no matter which configuration you're writing in the accepted value list that could make a bigger difference it could be good change my mind vs code is better language than rust i'm not going to change your mind it's a perfect opinion in addition we are also planning on support let's see planning on supporting the language server protocol call which provides similar level of integration with other editors note we are also releasing two other plugins our vs code plugin and our neovin plugin let's go let's go let's go crazy look at this crazy they're using plug still crazy dude this plugin requires neovim 5 oh man crazy can we just all take a moment to remember that tj used to get pinged 400 times a day asking when neo 5 was coming out remember that remember those days dude crazy dude this is crazy this is some old ass neovim configuration going on here i used to write this kind of code in my neovim dude neovim has gotten so easy so much easier in the recent versions holy cow okay first off this is awesome i'm i'm not going to lie to you this is great i love that they they they're going all in i i also think that it's better we're i i i will do one word of caution here though that planning on supporting the language server protocol and not just doing it i highly recommend doing it as soon as possible because this drops most of the need in fact you don't even need need a ne neovin plugin you just don't even have a neovin plugin because you have a language server protocol you need some thin wrapper for vs code if i'm not mistaken intellig i think you need almost nothing right lsp makes or breaks a language popularity it does it truly does because they're fantastic next steps we hope you like what we've shown so far actually if i the problem is is i don't i don't do this type of work right i'm not an infrastructure person so i don't even know how valuable this stuff really truly is right it's just my perception of could i find this valuable the lsp and the validation a validation language with some basic extensiveness and configuration sl language bindings i could see this being really cool right i it it seems like it's really cool but again something seeming like it's really cool and looking at something that is very very awesome in an example does not mean it's actually awesome overall and what i mean by that is pick any popular front end framework okay let's just go with react because you know that's the one i like to make fun of even though react does plenty of things that are very good react counter example right when you look at something as simple as this you're just going to go look at it and you're going to go okay we do a little we do a little app okay we have a little bit of this okay this all looks like html okay this is really really easy okay we're going to do a little counter a little increasing okay it's it's it's pretty simple that's that it it looks pretty simple right but the reality is is that when your program expands beyond what they show you it gets very very difficult right this is all completely reasonable code completely reasonable code i would expect this pretty much no matter what you're doing you're having it somewhere right and so whenever i see anything that just shows me some basic examples these all look great it's until i see it in a larger environment i feel like this pickle apple copy of nyx that's what i said at the very very beginning i said that is this just going to be nyx but apple this has been tried before there are many other language conf or config languages the problem is that you're delegating app logic to the config which eventually breaks well i don't know if that's true okay so i i actually i'm not sure if what you're saying is is true in the sense that you're defining what the config is bound to i think you're right though like nyx is great until it isn't i've seen some things where once it crosses a certain line it becomes like holy cow what is happening here like real real talk you're like you know like what the what is this the right way to go i don't think this is the right way to go i feel like you've jumped the shark once you hit a certain level it's interesting i really would love to do a a look into this you know if i once the moment i have a use case for this i'm using it you know that right you know i'm using it the moment i have a use case though anyways this is cool awesome great job on neovin by the way i love to see that that really also just shows how big vim is actually getting it's shockingly getting large the name is vim could not have been big if neovim didn't exist that's the thing is that until neovim existed i don't think i think vim would have always been relegated to a pretty select group of people it's actually neovim that has made it so that it's it's big picol aen