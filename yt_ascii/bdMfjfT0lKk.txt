today, i want to share with you a neat way to solve the towers  of hanoi puzzle just by counting in a different number system. and surprisingly, this stuff relates to finding a curve that fills sierpinski's triangle. i learned about this from a former cs lecturer of mine, his name's keith schwartz,  and i've gotta say, this man is one of the best educators i've ever met. i actually recorded a bit of the conversation where he showed me this stuff,  so you guys can hear some of what he described directly. in case you're unfamiliar, let's just lay down  what the towers of hanoi puzzle actually is. so you have a collection of three pegs, and you have these disks of descending size. you think of these disks as having a hole in the  middle so that you can fit them onto a peg. the setup pictured here has five disks, which i'll label 0, 1, 2,  3, 4, but in principle, you could have as many disks as you want. so they all start up stacked up from biggest to smallest on one spindle,  and the goal is to move the entire tower from one spindle to another. the rule is you can only move one disk at a time,  and you can't move a bigger disk on top of a smaller disk. for example, your first move must involve moving disk 0,  since any other disk has stuff on top of it that needs to get out of the way  before it can move. after that, you can move disk 1, but it has to go on whatever  peg doesn't currently have disk 0, since otherwise you'd be  putting a bigger disk on a smaller one, which isn't allowed. if you've never seen this before, i highly encourage you to pause  and pull out some books of varying sizes and try it out for yourself. just kind of get a feel for what the puzzle is, if it's hard,  why it's hard, if it's not, why it's not, that kind of stuff. now keith showed me something truly surprising about this puzzle,  which is that you can solve it just by counting up in binary and  associating the rhythm of that counting with a certain rhythm of disk movements. for anyone unfamiliar with binary, i'm going to  take a moment to do a quick overview here first. actually, even if you are familiar with binary,  i want to explain it with a focus on the rhythm of counting,  which you may or may not have thought about before. any description of binary typically starts off with an introspection  about our usual way to represent numbers, what we call base 10,  since we use 10 separate digits, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. the rhythm of counting begins by walking through all 10 of these digits. then, having run out of new digits, you express the next number,  10, with two digits, 1, 0. you say that 1 is in the tens place, since it's meant to encapsulate the group of 10  that you've already counted up to so far, while freeing the ones place to reset to 0. the rhythm of counting repeats like this, counting up 9,  rolling over to the tens place, counting up 9 more, rolling over to the tens place, etc. until, after repeating that process 9 times, you roll over to a hundreds place,  a digit that keeps track of how many groups of 100 you've hit,  freeing up the other two digits to reset to 0. in this way, the rhythm of counting is kind of self-similar. even if you zoom out to a larger scale, the process looks like doing something,  rolling over, doing that same thing, rolling over,  and repeating 9 times before an even larger rollover. in binary, also known as base-2, you limit yourself to two digits,  0 and 1, commonly called bits, which is short for binary digits. the result is that when you're counting, you have to roll over all the time. after counting 01, you've already run out of bits,  so you need to roll over to a twos place, writing 10,  and resisting every urge in your base-10 trained brain to read this as 10,  and instead understand it to mean 1 group of 2 plus 0. then increment up to 11, which represents 3, and already you have to roll over again,  and since there's a 1 in that twos place, that has to roll over as well,  giving you 100, which represents 1 group of 4 plus 0 groups of 2 plus 0. in the same way that digits in base-10 represent powers of 10,  bits in base-2 represent different powers of 2, so instead of a tens place,  a hundreds place, a thousands place, you talk about a twos place, a fours place,  and an eights place. the rhythm of counting is now a lot faster, but that almost makes it more noticeable. again, there's a certain self-similarity to this pattern. at every scale, the process is to do something, roll over, then do that same thing again. at the small scale, say counting up to 3, which is 11 in binary,  this means flip the last bit, roll over to the twos, then flip the last bit. at a larger scale, like counting up to 15, which is 1111 in binary,  the process is to let the last 3 count up to 7,  roll over to the eights place, then let the last 3 bits count up again. counting up to 255, which is 8 successive ones,  this looks like letting the last 7 bits count up till they're full,  rolling over to the 128th place, then letting the last 7 bits count up again. alright, so with that mini-introduction, the surprising fact that keith  showed me is that we can use this rhythm to solve the towers of hanoi. you start by counting from 0. whenever you're only flipping that last bit, from a 0 to a 1,  move disk 0 one peg to the right. if it was already on the right-most peg, you just loop it back to the first peg. if, in your binary counting, you roll over once to the twos place,  meaning you flip the last two bits, you move disk number 1. where do you move it, you might ask? well, you have no choice. you can't put it on top of disk 0, and there's only one other peg,  so you move it where you're forced to move it. so after this, counting up to 1,1, that involves just flipping the last bit,  so you move disk 0 again. then when your binary counting rolls over twice to the fours place,  move disk number 2, and the pattern continues like this. flip the last, move disk 0. flip the last two, move disk 1. flip the last, move disk 0. and here, we're going to have to roll over three times to the eights place,  and that corresponds to moving disk number 3. there's something magical about it. when i first saw this, i was like, this can't work. i don't know how this works, i don't know why this works. now i know, but it's just magical when you see it. i remember putting together an animation for this when i was teaching this,  and just like, i know how this works. i know all the things in it. it's still fun to just sit and just watch it play out. oh yeah. i mean, it's not even clear at first that this is always going to give legal moves. for example, how do you know that every time you're rolling over to the eights place,  that disk 3 is necessarily going to be freed up to move? at the same time, the solution just immediately raises these questions like,  where does this come from, why does this work,  and is there a better way of doing this than having to do 2 to the n minus 1 steps? it turns out, not only does this solve towers of hanoi,  but it does it in the most efficient way possible. understanding why this works and how it works and what the heck is going on comes down  to a certain perspective on the puzzle, what cs folk might call a recursive perspective. disk 3 is thinking, okay, 2, 1, and 0, you have to get off of me. i can't really function under this much weight and pressure. and so just from disk 3's perspective, if you want to figure out how is disk 3 going  to get over here, somehow, i don't care how, disk 2, 1, and 0 have to get to spindle b. that's the only way it can move. if any of these disks are on top of 3, it can't move. if any of them are in spindle c, it can't move there. so somehow we have to get 2, 1, and 0 off. having done that, then we can move disk 3 over there. and then disk 3 says, i'm set. you never need to move me again. everyone else just figure out how to get here. and in a sense, you now have a smaller version of the same problem. now you've got disk 0, 1, and 2 sitting on spindle b, you've got to get them to c. so the idea is that if i just focus on one disk and i think  about what am i going to have to do to get this disk to work,  i can turn my bigger problem into something slightly smaller. and then how do i solve that? well, it's exactly the same thing. disk 2 is going to say, disk 1, disk 0, it's not you, it's me. i just need some space. get off. they need to move somewhere. then disk 2 can move to where it needs to go. then disk 1 and 0 can do this. but the interesting point is that every single  disk pretty much has the exact same strategy. they all say, everybody above me, get off. then i'm going to move, ok, everyone pile back on. when you know that insight, you can code up something that will solve towers of hanoi,  like five or six lines of code, which probably has the highest ratio  of intellectual investment to lines of code ever. and if you think about it for a bit, it becomes  clear that this has to be the most efficient solution. at every step, you're only doing what's forced upon you. you have to get disk 0 through 2 off before you can move disk 3. and you have to move disk 3. and then you have to move disk 0 through 2 back onto it. there's just not any room for inefficiency from this perspective. so why does counting in binary capture this algorithm? well, what's going on here is that this pattern of solving a subproblem,  moving a big disk, then solving a subproblem again,  is perfectly paralleled by the pattern of binary counting. count up some amount, roll over, count up to that same amount again. and this towers of hanoi algorithm and binary counting are both self-similar processes,  in the sense that if you zoom out and count up to a larger power of 2,  or solve towers of hanoi with more disks, they both still have that same structure. subproblem, do a thing, subproblem. for example, at a pretty small scale, solving towers of hanoi for two disks,  move disk 0, move disk 1, move disk 0, is reflected by counting up to 3 in binary. flip the last bit, roll over once, flip the last bit. at a slightly larger scale, solving towers of hanoi for three  disks looks like doing whatever it takes to solve two disks,  move disk number 2, then do whatever it takes to solve two disks again. analogously, counting up to 111 in binary involves counting up to 3,  rolling over all three bits, and counting up three more. at all scales, both processes have this same breakdown. so in a sense, the reason that this binary solution works, or at least an explanation,  i feel like there's no one explanation, but i think the most natural one is that  the pattern you would use to generate these binary numbers has exactly the same  structure as the pattern you would use for towers of hanoi,  which is why if you look at the bits flipping, you're effectively reversing this process. you're saying, what process generated these? if i were trying to understand how these bits were flipped to give me this thing,  you're effectively reverse engineering the recursive algorithm for towers of hanoi,  which is why it works out. that's pretty cool, right? but it actually gets cooler. i haven't even gotten to how this relates to sierpinski's triangle. and that's exactly what i'm going to do in the follow-on video, part 2. many thanks to everybody who's supporting these videos on patreon. i just finished the first chapter of essence of calculus,  and i'm working on the second one right now, and patreon supporters are  getting early access to these videos before i publish the full series in a few months. this video and the next one are also supported in part by desmos,  and before the next video i just want to take a moment and share with  you guys a little about who they are and the fact that they're hiring. so desmos is actually really cool. they make a lot of these interactive math activities  for classrooms and tools for teachers. the real meat of their offering is in their classroom activities. for my part, i'm super impressed by just how well-thought-out  these activities are from a pedagogical standpoint. the team clearly knows their stuff, and they know where they  stand to make a difference in students' and teachers' lives. and like i said, they're hiring. they are always looking to bring in more good talent, whether that's engineering talent,  designers, teachers, or whatever other skill sets line up with what they want to do. if any of you out there are interested in joining them,  helping them make some of these great tools for teachers and students,  you can check out the careers page i've linked in the description. personally, i think they're doing some really meaningful stuff. i think their activities are building genuinely good math intuitions for students,  and the world could use a few more talented people pointing  their efforts towards education the way they do. alright so with that, i'll see you guys next video,  and i think you're really going to like where this is going.