i am curious about this this article says the rust foundation i know is this sponsored by the rust foundation i can't even tell medium a medium in this article it obviously must be professional all right anthony take us take us somewhere that we're gonna love i can feel it can you guys feel this one this one's gonna be a good one this is gonna be a good one all right adorable logo i will use this for the youtube video pitchforks down please i felt your anger as soon as you clicked on the article i have nothing against rust i prefer it for various use cases all programming languages are a means to an end javascript being a means to purgatory in my case russ simply did not cut it i had to gut the project and rewrite it in golang the project is a simple back-end webhook service for hasura if you haven't if you aren't familiar with hasura it's a wraparound postcre database that gives you an instant graphql api it's very handy for people like me who are solo developers building out passion projects writing out every rest endpoint or google resolver takes a ton of time and it's most likely the same crud operations on every model so this sounds like an excellent use case for rust macros this kind of falls apart when you need some more complex logic for that allows you to map jaquille jacquili jaquil jaquil is it jaqueel is that how you say it it's jaquil is that quickle giggle it is i think it's jaquil i think jay quella that's what i'm thinking of in my head jake willen request to a custom go let's see i use an s3 file uploads for authentication to nick wait hold on i use this for s3 file uploads or authentication okay i thought i thought i just read i use s3 file uploads for authentication i was like what the what the god got me all hot bothered all right one problem depends the injection woes okay rust depends the injection story is an interesting one as soon as you ask for a concrete type okay you have to pass an instance of the database to do stuff no exceptions this is what trades are for this is what traits are for you can't subclass database duh you trade it subclass is literally not a concept in rust so if you were a programmer who didn't test their code then this would be perfectly fine that's what traits are for in reality you're you are really ever going to have one implementation of a database so there's no reason to make this function to take anything other than a database on top of that so one thing that is kind of interesting is that in this the zero to production book right here zero to production with rust he actually kind of goes over this and one kind of the strategy that i'm just getting into testing with the database how he how he does it with diesel is that he actually throws up a docker instance and uses diesel there so he can create and hydrate a perfect state do the test bing it's gone that's that and so yeah you know is this a problem who's diesel rust diesel you don't know and us testers we have to write the function signature database needs to be a trait and then we have to take that trait and we need to implement it on our mock objects okay that's not so bad in fact i'm doing essentially the same thing in golang so where does this actually fall apart again i don't even know if you need to do that right i think you could get away without doing this ever at all for any reason maybe for s3 you'd want to do it because s3 obviously you got you got some issues there okay probably two problems async traits and rust it's easy to have async you can easily have traits but it's but having async trades is a little difficult there's actually a macro yeah yeah you found this macro yeah there you go and i was happy using let's say that was happening to use as a happy camper okay here's a summary of my journey so far right destruct be happy write a test realize you can't dependency injection be sad convert the struct to a trait be happy okay so i'm glad that he did what i was yelling about depends the inject my heart's content use mock all create to generate mocks automatically be very very happy have an async http call i need to make realize async traits need a special macro realize that the macro does not work well with mock call be sad okay in hindsight this problem has a solution perhaps i should have given it another go before i made a switch to go but at this point i was already kind of frustrated by the next point problem three the nail compile times and the coffin containers blah blah blah rust has bad compile times yeah fair fair there's ways to mitigate that quite a bit but yes i understand we have heard it a thousand times you can't have a language that does everything and no downsides that's just impossible rust cons are that lifetimes are difficult to wrap your head around and compile time and it's compile times i don't think lifetimes are hard to wrap my head around i think most of the time the only thing that's difficult about lifetimes is since i never write them because i never write libraries in rust as of right now i just can't remember the syntax i just need to be able to write like 10 times in a row and work with it enough times and then i don't feel like it's all that hard have a nice let's see i have a nice beefy laptop the m1 mac is a workhorse absolutely no problems with compiling rust on my mac typically when i write servers i develop locally and make sure that each time i make a change i reload the local server and test the feature very quickly before i commit to a real unit test that requires a lot of compiles between trials which is fine again no issue with compiling a rust on my my my mac in a container though forget about it forget about forget about it the easiest way for me to orchestrate many local services without having to worry about running npm run in each service hastura webhooks mock s3 mock oauth server is to have docker compose yaml i you know i need to i need the docker compose more often i don't i don't do this very often it'd be fun to kind of learn a little bit more about this that runs all these things that means typically it's docker compose debbie ammo because i don't have actually used for the docker compose to deploy only deploy locally this has side effects though my arrest codes needs to be compiled in the container since non-negotiable about auto hot reload i feel like why can't he just like do a virtual mount right kenny just virtual mount the code in there and for dev time and then just do incremental compiles is that fair is is that a is that is that a fair critique of this because that that kind of always seems like when you when you do dev stuff it's fine to have virtual like any sort of virtual stuff right and then when you do the production stuff you can't right and then you just make it good containers are slow on mac still right i have no idea i have two options either throttle my whole computer by spinning up a massive image for rust in compile to compiling or deal with three minute plus compile times i i really do feel like virtual or a virtual having a yeah a little a little little virtual mount might be really good here my def cycle grinded to a halt and i felt incredibly unproductive i tried changing my workflow to write code and tested before manually testing or to not use auto hot reload but i felt crippled i just couldn't do it finally i bit the bullet and switched to go you will be miss rust i greatly enjoy writing rest code i find it beautiful and expressive utilitarian yet elegant i know most those words in that sentence i'm writing a let's see let's see if i'm writing a local helpers library performance sensitive code any back-end service i don't need to run in a container russ is the first pick especially if i don't need to convince anyone else to use it if anyone has any solutions to my problems especially the last one please let me know i'd love to go to get rust back into this project i'm willing to revert back to the old version and bring it up to parity so to me yeah okay so that's cool i mean i get why you'd want to do go go has incredible compile times i think we can all agree to that one of those biggest strengths is it's really its simplicity at the sake of expressiveness which sometimes can be quite annoying but nonetheless it's very simple which means that it's extremely simple to compile which means that like compiling from scratch takes like nothing right it takes like nothing at all and then you get a little bonus telemetry so that google can know that you're writing go so that when the future ai takes over they know who to execute and who not to execute you know those dirty rust stations they're gonna get them all okay they're gonna get them all if you're not writing carbon and you're not writing uh go i'm sorry you're out okay you're out yeah i know i don't know how to do a a intermediate container or whatever you're talking about i got my first job last year as a mobile dev primarily front end and wanted the transition back back end because i feel there are more opportunities do you have any suggestions for your first steps the simplest way to transition at your job is to transition at home and what i mean by that is that if you're not practicing those skills at home if you're not just crushing it at home you're not gonna be able to just walk into your job and start doing that and so you should always do it at home first right meaning start building projects out become a really you know adept at what you're doing maybe even learn some you know what i mean and once you get good at rest you'll be able to you know make these arguments you know what i mean