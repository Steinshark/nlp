but i'm so glad to have you and it's like such an honor that you know 10 years of meetings the first person the the the closing of the conference is basically having an an armor in usmania's in kind of an interview setting with you and maybe the audience has now figured out the questions that they have but i know and i'm thinking about it it's like everybody knows knows to be on a star strippers but what do they know what how is your you know what what are you currently doing with c plus plus so let's start with like you know what what are you currently up to with c plus plus as a question okay i mean professionally i'm a professor at columbia now and i teach and that gives me more time to work on things to do and c plus plus i was in the meeting in kona last week only virtually though that wasn't all that much fun but it said it's all right it works and for c plus plus i'm still looking at pattern matching i'm thinking about the aesthetic reflection which would be good thinking a lot about safety and the c plus plus core guidelines and how to enforce them to get a complete type and resource safety kind of stuff and then always about how can you actually use the language better i wish good not to too much people we need tumors but that's not sort of something i get into deeply so we have the first question one second so you you mentioned that you teach c plus plus which is something you've done in your career what do you particularly like to teach about c plus plus okay i i i like to teach the fundamental principles and how to use them show how to integrate the high level and low level kinds of the parts of the language like two years ago i gave a keynote at cvpcon which basically was how to take typed things and pump them through a sequence and fights or a wire which does both of these things to do that well you have to be able to manipulate the bytes and the hardware and you have to abstract from it so that you have a completely type safe way of composing messages and send them and there's also an interesting exercise in analyzing the needs of your potential users because most systems for doing this is in my opinion totally or decide for any particular use and so i like to see c plus plus in the context of its principles and techniques and in the context of doing something specific with it because you can't talk about designing the abstract at least not if you want to make sense and and actually provide some help so this intersection between building systems and and designing them and thinking about both performance and reliability things like that currently i don't teach right beginners i teach sort of final year undergrads at the beginning we are grad students so that biases what i'm talking about and how i talk about it a few years ago i taught freshmen and then of course i was focused on how do you get started how do we actually write your first few programs to get started so eventually become professional eventually and become somebody who delivers software that we can rely on interesting the next question is what's your canonical c plus 23 hello world see out print print ln format ah i don't have a c plus plus 23 hello world i have a c plus plus 20 hello world and i just actually just finished the third edition of the tool of c plus plus that's another way of teaching i by the way did not put the book there because i was going to be on this it was just because it's lying there in case i need to to use it but anyway there's a hello world and it starts import std semicolon hint main c out i'll put hello world backslash in semicolon and curly that's it in other words i really like modules they speed up compilation and they give you cleaner code and c plus plus 23 does have a modular std so that's a little bit of 23. but that's one of the very few parts of 23 that i'm daring to use in a book today so i had to build my own std and encourage other people to do it and i know that microsoft is now shipping an std and i hope that everybody will be doing it soon like this year they can do it if they decide to oh i'm muting myself to answer another question look that's the the year of new languages kind of so do you have any thoughts on the new languages like carbon or cpp2 cppf front that want to position themselves as successors to c plus do we have a favorite well no i'm not say right now you have to remember that just about every new language put ting the process itself as a successor to c plus plus i mean java started out that way and there's tons of languages c plus plus because it's so widely used because it's so successful it's the obvious thing to to want to beat and you can always come up and says my language is simpler it's easier to learn and the tool chain is simpler because you don't have to cover the range of application c plus plus is covering you can always beat any language when you can pick a small subset and you don't have the compatibility problems tell you about a million users or something like that and you have to deal with it also new languages always have an average better programmers when when i started the c plus plus i thought that c plus programmers were smarter and kind and more helpful and better informed than once and other languages this is nothing to do with the language there's a lot to do with the fact that there was a small community once you get a large community the average skill of the developer goes towards the average skill in the industry and all of these kind of things sacred heart of it the new languages you mentioned carbon cpp fund they aren't real languages yet they are sort of hopes that in a few years the community will develop it into something that's really useful and can can scale but going to end about experiments as long as they're just experiments but i don't have any favorites and i think people are always underestimating what it takes to become a real spectrum general purpose programming language it's very very hard it's easy to beat the general purpose programming language from one specific item but for the whole range it's very hard and it takes five ten years before this there's any real use there so the new languages we have here have to compete with c plus plus 28. so so what if they compete c plus plus 20. c plus plus.com to stand still that's an interesting point of view yeah all right and and and of course stability is a feature once you are not a language geek and wondering the greatest language but you want systems that you can deploy and maintain you start thinking in terms of 5 10 20 years that's a different way of thinking yeah just in front of the conference i hosted and nama with restaurant parentland the insight that there's a very vibrant community about the ideas which lead to those languages and that they are very you know exchanging and a lot of people which we know well in our community and some of them are even in the committee but i think it's probably helping us to evoke the language in the long term but if those languages are actually going to you know succeed us too early to say and it's for some of the products they're just ideas it's a it's a good idea if we can use the ideas it's a bad idea if they soak away in achieve from from the language itself that is developers build tool change that will be useful for another five years rather than improving the tool change that we badly badly need where we are some number of million people maybe 5 million developers say seven million developers can use it i've always been tempted to build something brand new so much easier you can make progress so much faster but you know i mean how many people could i help how many people can you affect affect ten ten thousand hundred thousand the c plus price if you get a little thing in place your help so it's a different trade-off it's like you can keep a little stone very far if you want to roll a boulder it's much harder work but you know you've done more once you've done it so in light of all the new stuff in superfast 20 and 23 how do you envision the super trust core guidelines to evolve first of all they have to evolved they are sort of stuck around c plus plus 17. partly because of all the thoughts that has been going on so that we have enough time to work on it i have more time to work on it now i'm out of industry and into academia well but basically it has to use c plus plus 20 better i would like to say use modules don't use include except to build modules and i would like to get code scenes into the game like thorough use of concepts because i think this basically untyped template meta programming is not the best way of using our energies it's not the best way of building maintainable extensible code we have to get that in and then i would like to see some support or something like the core guidelines in the standard because there's people who cannot use things that are not standard and basically i would like static analyzers to be deployed with a standard interface in standard so that the programs we can write today that's completely type safe and completely resource safe can can be enforced to a very wide range of people and also guidelines that you just read and try and follow are not all that affected we need the static analysis to enforce the rules and also to find where the problems are the vision from day one with the core guidelines was that you you program the core guidelines into a static analyzer and then you let the static analyzer loosen your code during development and when you break a rule off comes a little window saying are you uh broke down lures c23 which is called this and if you click here you will be told why this is a good rule and what happens if you break it and the rules are structured to allow that to be possible and i haven't seen that yet but it should come that is indeed an interesting inside so you'll have have you achieved everything for c plus plus that you envisioned around 1980 or are certain features missing the support for cool teams are not actually optical or i delivered in hcl 81 so i would would like that too to be better and i hope it will be better just excuse me second ah the light just changed not for the better so that's the thing that's mostly missing in another way of looking at it is c plus plus is just much better than i could imagine at the time those things that i wanted and i couldn't get like not having building types convert both ways especially the mess with on-site signed numbers that's something that the core guidelines can fairly easily do except that the standard library liters are called with on-site and places where i actually mean they don't belong but you can do things like that when i wrote the design evolution of c plus plus i was fantasizing about import we know her modules which it's coming i've always been keen on static analysis and analysis in general we're getting there but of course doing something for a large community is just so much harder and so much slower than to do something for well a little research book or something like that so next question what is your view on ub is it a mistake for the par of the past we have to deal with it now or is it a tool that every c plus programmer should master what is a good ub is there if there is any it's just a very difficult question i mean we shouldn't actually get to ub when we talk about could you be it's because it's on on behavior and therefore the compiler can can can can run against it so for take an example if your overflow assigned integer that's ub that's bad if you overflow and unsigned integer it wraps around that's not undefined behavior however in both cases most of the time it's a bug and with ub you can actually catch that bug it is the compiler can diagnose it and tell you you are doing you're about to ub don't do it and in that sense it is good if it doesn't detect it and let you do stupid things or if it does time travel optimizations and things like that that's bad but if you use the onsite you just get the the bug in your program you had not planned for wrap around the written check and you are going to get some really weird results that's bad and since it is well defined a compiler in my opinion they should warn against it but they don't because compiler riders are very reluctant to warn against perfectly legal code so no pressure but is there an update on the internal program representation for c plus plus you talked about last year as well yes yes so ipr was something that i worked on and then i and capitals reyes worked on back when professors in texas in 2000. five and thereabouts and put in the public domain now this later thanks to gabby became the backbone for microsoft's module implementation which is one reason that it's working so well and so fast and there's a binary version of that which last i checked last i heard of it was called ifc which is also now in the public domain camping put it out and so you can you can go in and you can use it and i think it is the best representation for taking c plus plus programs and feeding them to an analyzer if that is not widely used but if we could have a standard representation for interchange of code that is not on the character level but actually the analyze code it's a good candidate and it's out there and it's being maintained it's been used anybody that touches a microsoft implementation is it's indirectly using using a variant of it so it's it's actually a quite interesting to see that something that looked like a project going nowhere back in 2008 are thereabouts actually is very very widely used in the basis of the fairmont of technology i hope it'll get much wider use and you can go to github and get it the original sort of high-level version and then the binary version of it even now i know the senior engineers thinking c plus still as object-oriented programming what do you think of how to educate the international programmer community that c plus plus is way more than this supporting all the programming this this is very very hard partly because people don't define what they mean when they say is op there are people who think that object-oriented programming means writing code just like java that is everything has to be a class hierarchy and everything has to be a virtual function and i think it's fairly easy to convince people that that's not true just show them the standard library show them some useful classes and a lot of times they say yeah that's op but it's not the best op or something like that and that's the problem you you have to try and teach people that programming is is fairly sophisticated skill when you should have as much skill and as much use of tools that you would have if you were going to be an up orchestra or a plumber and there are a lot of people that think it has to be simpler than that than that you should just have one right answer to every question and this right answer would be tempted meta programming could be class hierarchies it could be functional programming that's not the way craftsman's or artists operate they have a variety of tools and they use them appropriately and i try and teach people to do that that's what i'm doing when i'm teaching it's what i'm doing when i'm when i'm writing that that's true of c plus plus book that i showed gives an all of you and that overview definitely has the view that there are different ways of approaching a problem different tools from it rather than here's the one true way that you should follow but too many people want someone true away i think this is a craft this is engineering it's architecture it's not actually religion religion now there's actually a follow-up question from myself we had two days ago an armor with andre alexandrescue and he we're talking about you know a successful language as he brought up that the genius of the early c plus plus was the class keyword and from what he said one kind of could assume that you came up with that and i wanted to exactly i kind of you know ask you about the history of the class keyword and like and back then was it like your idea of what where is it coming from sure sure no it was not my idea it came out of simula language done and mid 60s and in oslo by william hunter and special christian newborn and they all metamaticians not computer scientists at that time it was a bit hard to be a computer scientist because because it was a very young field but since they're not computer scientists but many magicians they didn't quite know or think about types they thought about classes and it's in math and so they called their user-defined types classes that's where it comes from and every person who programs in a language that uses the word class can can think or johan in christ because that's where it came from now i i have some opinions about stability and inventing new things only when needed and when i started out in simulator it was called a class and it was called virtual another strange word that you know where it came from and the answer is that's what it was in simula and since it worked for them i i didn't mess with it similar some of the things and see i didn't mess with and sometimes it was good and sometimes it wasn't but you you can choose the errors you make in something brand new or you can choose the errors that is made by somebody like christ newport dennis ritchie i fairly consistently chose the latter with the argument being that at least we know those errors and we know how to bypass them when we need to for my brand new errors it's not that easy and so it came from there i took classes from simula and i took c and i've got senior classes and then people started referring to that as c creating confusion i was told you have to find the name my very creatively picked what's that c plus 84. and what's informed that since the the nc standard for c would come in 85 and become c85 it would be really embarrassing if c85 was a subset of c84 so please go away and think again and of course they're too optimistic and became c89 but that's beside the point and so since i'm not very good at naming i had a competition among my friends and i got a list which unfortunately i lost but i rejected anything on the form adjective c because i thought that was boring and then some somebody oh i'm blanking but i came up with c plus processor joke and i thought it was a good joke plus plus c might even have been a better joke but are too pity on people making indices and pronouncing it and such so it became c plus plus what an interesting it said so what are your other areas of interests if you have not seen if you're working on c plus plus oh i mean i like traveling i like listening to music unfortunately i can't play i used to do a bit of photography but i am not sure if cell phones have made it easier or harder certainly i take many more photos but i i don't do it with such care as i used to i read a lot the books in the backgrounds are mostly computing but not all and if you go to the living room it comes mostly history and a bit of literature and philosophy so that that's what i'm interested in when i can when the weather behaves i run so i get a lot of fairly reasonably good ideas and solutions to problems when running it's it's really good not to think about a problem too hard for too long sometimes you just have to go away and do something else to nature is good for that what were the most significant changes to old chapters in the third edition of the two of secrets plus book hard to say i mean the the fact that i'm using modules throughout is is good but then i didn't list all the includes second edition every time i used them because that would have littered the code with the with includes our attacks are used 10 or 20 pages more just to have the includes listed now i'm just saying just import std and be done with it and that that actually makes it more honest there's of course concurrence the cold chains of in the concurrency chapter and sculpt locks and things like that as usual there's a heavy emphasis on concepts in the introduction of generic programming and now i can use some standard concepts rather than the ones i used before that actually looked remarkably like this what became the standard concept of course because comes out of the same sort of set of ideas and a lot of it's based on alex stefanov's stuff but but it's it's clean and more integrated and i think you'll find it's more that there's a page here and there that that has changed but apart from what i just said i i don't see dramatic changes it's an overview it's not supposed to go in and get into a horribly complicated discussion or say the details of format foreign that is very useful especially in the context of chrono when you deal with the calendars oh yeah the calendars are of course there now but but it's not a attempt to tell you everything about it everything the the book is specifically designed to give an overview because i think that's what more people lack people can always go on the youtube or the books or get a course or something in a specific thing but when you said people think it's okay still what they like is they all of you what is the the general who what's the language as opposed to what's the detail x of the language so for that reason that book the true book the world slowly as now almost 300. well 250 pages of real stuff about the about the language then there's some history and there's the index and such stuff so it's a little bit longer i would actually have hoped that i could get it shorter that's that's hard it is still about the size of knots who so it's it's not one of these thick books yeah all right okay there two and three you can see three is a bit thicker but not dramatically so and if you compare it to the books you can see behind me these are thin books i the second pope i second edition i know people can read in a weekend i'm not too sure about the third they think they may need three days this is about 400 pages but it from o'reilly and i'm not sure if you're publishing who you're publishing with and yeah so maybe they're using thicker papers i think yeah this is like for 400 pages this is a little bit i think but it's a great book by by cross eagle burger i i have not gotten hold of a copy yet all right i'll tell them that but we have an expression what is your take on one rp slash circle or sycl i don't know enough to have a qualified opinion on the other hand i would trust my long long and he's behind signal in other words i don't have a technical opinion i don't know enough to have one but i trust one of the designers of this i'm sorry but one of the things you have to be careful about when when you become well known it's not to try and become an expert at everything it becomes important sometimes to say no i don't know that i like that quality in you that's not what a lot of people have that some you know knowing what to answer and what to to say honestly that's something i i don't have enough knowledge about that's so next question is as a computer scientist what are some books which you recommend today's software engineers computer science professionals to read if they are interested into this field that's hard i'm a little bit behind the times when it comes to books and if i don't watch out i will recommend some of the books behind me which are mostly five years old so hmm maybe i should should touch this question also i feel bad about it i i i think we should read something about machine it used to be patterson and hennessy and i don't know if they have been keeping that one up to date there must be something better about machine architecture but what i find is that a lot of young developers to think in terms of a language and think they can optimize by looking just at the language as opposed to the underlying machine that the language gets to and if you are into a high performance you really have to know about machine architectures and specific machines you have to know about caches you have to know about cash missions you have to know about prediction prediction failures if you're if you're really into performance i mean you you can get a factor of thousands sometimes by by knowing what actually is going on there if you can show something on the gpu or fpga do miracles and sometimes that is necessary i have heard consistently over the last well at least since the early 80s that machines are now so fast that you don't have to worry about performance well you know somebody has to worry about performance i mean you can write great stuff in python but if it should run for anything that that matters it's because they call a c or c plus plus the library i mean tensorflows the backbone of the aiml you never see it so people don't know they're running c plus plus all the time but somebody has to be interested in performance somebody has to be interested in the interface between software and hardware this is where c plus plus came from this is c plus plus's core domain there's people that says well c plus plus is a smaller part of the community yeah but it's a larger part of the community that actually is in the domain for which it was designed a number of people that write c plus plus seems to be going up 100 000 a year that's more than most languages have of let's say jewson community so i think if you want to be a good c plus programmer at the key level that we're talking about you have to understand concurrency you have to understand a little bit about machine architecture so don't find a good poor machine architecture so you can always check if patterson tendency has a new volume out but that's probably not the easiest book to go to anyway so [music] sorry something bypassed my my sound protection on the phone as far as it's nothing important is there anything you wish that should be in c plus plus like tooling in other languages or lifetime or anything that catches your attention sure i mean i would very much like a build system and a picnic and package manager that was standard or these standard interface to the variety of threes i was saying saying that in the keynote four years ago and i haven't changed my mind if anything it's become more important i would like the enforcement of the core guidelines type and resource safety which takes care of its lifetime problem and safety problem people talk so much about today that's sort of the first order things and then of course people are working on a version a general model of concurrency executions so sender receivers that kind of stuff yeah i would love that better integration of code chains as part of that and then back to the old thing i i really like the function function program functional programming style pattern matching i think i was the one that brought that up in the c plus plus context almost 10 years ago the community is not very responsive to new things please they like things that are sort of just a little bit what they have but a little bit better they don't want to be told that you're maybe most of your switch statements and a lot of your if statements really it doesn't belong just like they didn't like to be told that they shouldn't write complicated template meta programming to do type shaking because you should have a type system for that that's concepts foreign is to change the way people think change the way people write code at the fundamental level people don't like to change fundamentally so it takes time so what part of c plus plus do you think was the mistake to add i've got various versions of this question okay and i think all of the major parts should be there and all the major parts in retrospect we could do better today but when people ask this question they are usually thinking about some major thing that shouldn't be there what about c compatibility what about exceptions or something like that what about templates there's people who think that the language would be much better if those three things went away and i strongly strongly disagree the major parts are therefore reason and they serve a lot of people if you take away a major part you harm hundreds of thousands or millions of people if you do a take away a little bit you probably only heard a few people like a hundred thousand and it's basically ridiculous because it doesn't actually change the way is what i want to get rid of and i'm working hard on is to get rid of the preprocessor most of you know that i don't like macros and i think we should have better ways of doing it we now have better ways of doing things and include it'll take a long time before that is completely done because it's hard to change something when there's a billion lines of code for dying on it but it will happen because the benefits of things like there's a compile time evaluation contextual for followers from that and also with modules is just so much better than than the old alternatives said that they will work in the end i i remember when i and gabby does raised proposed context for functions we were told that not only was it useless it was also impossible to implement there has been a few things that has been opposed as strongly as const extra functions think about that next time you want a conflicts that function or compile time evaluation or constable or something like that let's change time yeah may you mentioned gabby so just came to my head like you mentioned macros and you mentioned some features which are you know are not mistakes of c plus plus but recently c plus plus has you know removed or stepped forward to removing the preprocessor and kind of move a little bit away from sea where you know the origin of our languages what's your like you know your view on like the evolution like on this part i i guess i know you're part of that but like removing the c processor and going forward into modules in this world right let me just make yeah i am not going to remove the pre-processor i can't do it it's going to be there for decades still in the future i just want to make sure that you don't have to use it in many situations that is if you have a library that is littered with macros and such you you may not be able to rewrite it you can encapsulate it in something or you can stick it inside a module and use the modules interface so once your your internet library you can use macros to your well it won't be a pain but you can do it it is really hard to remove something once once millions of people are using it and so what you do is you provide a better alternative to demonstrate that it's better show that it gives better maintainability better performance faster compilation and then you wait so i i basically don't use naturals anymore i'm trying to remember last time i wrote one and i can't think of it yeah some some control macro for including a file that should be included but i'm going away from that using the modules instead there used to be the underscore underscore file underscore underscore that you need it for for decent debugging and tracing and such we have source source location now so i don't need to do that anymore of course that's for experimental stuff if you go to production stuff you don't have as much freedom and so it takes longer indeed how do you approach teaching architectural concepts to students do you have any tips to share you know i think i mostly just teach by example sort of i have a philosophical thing about teaching which is not a sort of specifically to me and me or or an illusionary or a novel but basically you cannot understand something just from showing principles you show people principles and they cannot apply them to the real life similarly you can show people examples look at this beautiful piece of code they don't quite understand why it's beautiful it's in the country replicates again because they can't generalize to the principle and so you always need to do both principles and examples very closely interlaced in the description i think i learned a lot of that from brian kernahan and the knr book that is structured like that to all of my books are sculptured like that also example explanation of what is an example of next example explanation what is how that fits how should reflection look like in c plus plus let's see i wrote a very short paper about it a few years ago which i think i gave six examples so instead of telling how the whole thing should work and i said okay i i would like these five things six things to be done easily and i want them to look roughly like this so i remember i wanted a function for giving me a json parser for three specific types just generate this wonderful for me you can do optimized parsing if you know it's the set of things that you are passing and probably find that paper and look at it again if you're talking about the thing about whether you do a type based or basically conscious developed of course i'm in favor of the constant vowel and can't sticks for at least as functions as opposed to to type system look to what the david is doing this this comes out of the back of the work for compilation evaluation that that i and the others were doing earlier you the problem is when you generate a new type it lives forever and if you generate a lot of new types it eats up your memory and your compiler starts running really really slow whereas if you evaluate the compile time function once it's evaluated there's nothing but the result back left and you've got your compiler has all its memory left to do the next job that's very important i i don't like waiting for compilations more than anybody else and which is one of the reasons i've been working on on things like that version of static reflection and also modules in the context of c plus people sometimes say remember the vasa what does that mean well this this came way back i think in 91 or thereabouts that the committee was over in sweden and some of us saw the ship by ourselves up in in stockholm so let me tell you the story about the basa way back in i think 16 28 and thereabouts the king of sweden decided he was going to have the best and the biggest and the most beautiful battleship in the boarding area and it had two rules like many many buildings has made many things built house it was going to be the great battleship that could sink other great battleships and it was to be used for diplomatic versions to traveling around to impress the people in other places and such okay that's fine so they started building it and since it had this role it was going to be the chief battleship on of the swedish navy and the king's own ship it was the vasa after the dynasty and they got a little bit into building it and then they heard that a potential enemy was building battleships with two contacts like all battleships in the area at the time had one body and if you have two guns take battleship next to a one gun deck battleship very soon the one contact battleships at the bottom sea with a lot of holes in it and of course this was unacceptable so the king said well we need to to to contacts put another gun day gun put a lot of guns on so that those enemies won't have a problem and while you're at it since it is now bigger and more impressive put some more statues on and make it even more beautiful and impressive and they worked on this at the there's a room rumor that may or may not be true i hadn't checked it that the ship to sign i eventually committed suicide in the process and they say we need more time king said you deliver on time sounds like software development or something and they said we we need to rebuild this bit and say no no just use it get it delivered on time so they built this ship it got tall and taller and more and more cannons and such and on the day twins no before the date where it was finished they tested it the way you test shoots like that is you have the crew on the deck and run from one side to the other and back again and if you can do that 14 times the ship is stable in the kind of waters in the north senior thereabouts well they stopped at about seven because it was wobbling too much and the king says you deliver on time high management can be dangerous and okay so on the day it went out in stockholm harbor flags flying trumpets borrowing got half a way across the harbor across the wind got it it killed the war and sank and went down to a h where there wasn't any oxygen so it lasted to this day cool looking people in the process tough and so you can go to stockholm i recommend it it's a beautiful ship it's great to see go and see it but but remember the vasa don't build your superstructure more than your underlying architecture can handle if they had made it one meter wider they would not have killed over there's another story i heard lately was that they had to import more people to build in on time and the one side was using touch measurements on the other side was using swedish measurement and the you know sort of slightly warped i mean so if you want to deliver on time bring in more people right no you you are careful and now on the other hand they couldn't have built the the battleship and made it divisor without true context because that would have ended up at the bottom so they had to do something but i think the correct solution would have been to say okay we'll build this ship and we'll call it something else and then we'll build a new one with a bigger foundation more carefully crafted it'll be delivered half a year later or a year later but we can call it the vasa and the king will be very happy but that was not the way the king saw it anyway go to stockholm and see it it's beautiful is there any historic documents on how the king reacted when the ship sank that i knew of looking out on wikipedia that's a good story about the vasa with pictures and everything and there are big books written about it and the museum in stockholm is interesting too there's a lot okay so the next question just curious how do you stay motivated and perceiving every single day and to remain passionate about your baby c plus plus for 40 plus years yeah that's that's sort of interesting basically i see what people do with it those applications are just astonishing and they can keep keep me interested the the things that's most inspiring to me [music] and she got a big c plus plus machine running up at l2 a little transport the new new space telescope great stuff great pictures of course some of the image processing c plus plus also but i mean the idea of sticking it up there and having it on forward and test itself from getting into action it's just fantastic ally the mask it was supposed to be able to handle five flights master heard it was 23. great stuff and i i visited cern to see the cyclophone and such yeah that kind of stuff and not it's not all sort of grand stuff i i've seen a coffee machine there's programmed in c plus plus so i thought that was very interesting after all the coffee machines there are one of our more fundamental tools for software development programmer it's a machine for generating quote i hope for it's it's turning caffeine into cold but it's it's it's the applications more than the intellectual puzzles about language design i like those two but they would not have to keep that company going more in a few years since we're going back to history with the next question [music] could you share some experience working with those veteran scientists on battle apps if i'm right knr and other legends and who you know would be your favorite mentors who you would like to remember yeah i still i still talk to to brian brian kearney and fairly often like i had a beer with him yesterday great people i mean he is one of the best teachers you ever met one of the best writers you he just makes things look easy he taught me a lot about how to explain things and how to get ideas across a lot of what i've said here thinking from i spent a lot of times after i left the labs also with alejo seem to sort of deep foundational thoughts about computing computer science in terms of mentoring and such there's a guy that's not that well known dr mcelroy just the guy everybody went to and they had a problem so you go what's a dog and you explain the problem to him and and after 10 or 20 minutes she understands the problem better than you do and then he feeds it back to you and it's very helpful so he was the one that that got me to use an operator for connecting io in outputs because we didn't have very attic arguments then so we didn't have much choice and he used to ask not the only one that went there at denny's and ken and such went to him when they were stuck he was the one that invented unix pipes for instance very smart guy he's up at darkness now so it knows just a lot of good people i mean the computer science research center had at the time twice as many good phds in computer science than any any university on earth so lots of stuff came out of there and there are stats and not just software i remember one morning i come in and there's a magnet hovering about two inches or on the surface it's just flying there somebody had extracted a superconducting magnet a war from the physicists room temperature meaning minus 70 degrees but that's room temperature to low low temperature physicists and it just happens that in the pipes in the wars of their labs those liquid liquid it's a liquid hydrogen or oxygen anyway very cold so that we could run a super adopted magnet nice interesting things we had the astrophysicists and the astronomers also so it was a very rich source of problems must have been this must have been an inspiring environment oh yes do you walk down the corridors and you realize oops i better i i better off my game this what i used to do and what i used to think was good it's not quite up to the standards around here ah my next question fits a bit in this do you sometimes still get surprised by the c plus language yes i i'm just thinking that maybe we aren't running out of questions do they get ducked into deep into the background that might might be a good place to sort of stop but yeah i get surprised i mean after all you you create something and one of my design criteria is that it has to do things that are beyond what i can imagine this was some something i said about templates back in the days i don't want a system that can only do what i can imagine this was to a large extent their response to the restricting systems coming from the closing yets and such pascal and and such that was trying to make sure that you could only do good things to decide who's good what is good i wanted something that was open and it follows that i keep getting surprised about what you can do and what people will do with it sometimes i'm pleased with what i see and sometimes less pleased but i should be surprised when i stop being surprised the system has been closed and we can't expect something traumatically new could you please tell us some words on the new version of your tour of c plus plus book oh again let me just see and i'm sort of blanking out yeah there's a it's been broken out in a few more chapters there's a good chapter on error handling which tells something about winter use exceptions and when not so there's the timber chapters are full of concepts and that's the foundation that's all the generic programming is in the concepts i use i use modules throughout import std that's that's the fundamental thing we have all the usual container and algorithm stuff ranges there's a lot about ranges i have a lot to mention that earlier but of course we have ranges i really never was too keen on saying sort v dot again comma v dot end i want to say sort v and now i can do it there's other things you can do with ranges like pipes but the fundamental thing is it simplifies what we are doing down to the minimum that we really wanted and of course that ranges is with concepts so that you can overload it if you really wanted to sort lists you can have the list for that you can have the sort for forward ranges and the list and the sort for random access ranges and the overloading will give you the right one i'm not sure it's such a great idea to be able to sort lists like that but you can do it if you want to source location yeah we have dates and the chrono stuff the calendars and co-workings of course quarantines i have a little framework that shows you how you can build event driven simulation framework it is not complete because i've only got two pages to do it but it's there and then well the history and the reference section is is brought up to date so um as i do post your book your books sometimes on social media from the other books i often get the question like if you're also like working on an update on for these and so just as a question are you working on any other books or any other updates i'm trying to think about the book for beginners programming principles and practice for c plus plus using c plus plus and the the main issue there is i would like to have full control or type setting myself as opposed to going through the compositor and things here staffing out all sorts it's like to slim it down a bit and then i need to update the graphics chapters dated and too hard to install so i'm thinking about it whether anything will come out of that is some other matter but that's what i'm thinking about in terms of books just now i think that's what's mostly most used i mean you have to think about not just writing for the sake of writing but what are you supposed to be doing with that writing i mean this one here is to give an all of you to people who are already programmers the pp people the one with the swanson is there to teach people how to program if they aim to become professionals of the right foundational stuff the big book everything the c plus plus program the language i'm not actually sure if there's a need for it today there's so much information out there so much on the available online that if people have started well and if people have an overview of what is going on then they should be able to pick up most of what you find in a book like the property i think a lot of people haven't figured this one out yet but that sets my my philosophy so i aiming at how do you bring to already programs up to speed and how to get people started well in the first place those are the two key issues i'm looking at that has been an interesting hour with you actually a little bit longer on thank you for coming i was an honor to have you here and it's i think of fitting close to to this conference we exist now for 10 years thanks it was a pleasure being here one of the years maybe i can be there in person again it was nice when i was the end person yes i i look forward to having you and let's see when when the stars align again so any closing words are yours now anything anything you want to plug anything you want to say oh no no no no i just you asked a lot of good questions and i hope the answers were okay no i'm not going to do something pompous at the end okay all right all right yes all right i'm going to enter stream and thank you be honest thank you for the questions to the audience especially yes good questions again we had three armas and all three days had high quality questions and all three guests were very happy to answer them and with that