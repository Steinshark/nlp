what we see about you to do videos together where there's something really disastrous happening and well this one's good isn't it there's a new bug it's a good one yeah it's my favorite favorite kind of bug which is a security issue and also it involves image file formats that's my favorite kind of bug and you can almost say it's not a bug at all so the problem that we're looking at today has been termed acropolypse and it involves the png file for it but really it's sort of we can expand it a bit to actually think about how people create files in particular when you've got an existing file and you want to update it how do you actually do that in a way that's secure and in this case doesn't leave all the old data lying around for people to find mike do you want to sort of talk us through it yeah some researchers simon aarons and david buchanan have found this essentially proof of concept that initially on pixel phones when you take a screenshot which we we all do a lot so you go you go into a phone you go screenshot and then maybe you crop it to the bit you're interested in or indeed to hide something you're not interested in just bought something on ebay and you want to make sure that people don't see your address how much you've paid for it that sort of thing yeah yeah so you cut the image down you send it off on whatever messaging app or you put on discord or whatever it is you're using what's happened is on a pixel phone when they write the new screenshot this cropped screenshot over the original file to send out they don't delete the original file data when you first captured a screenshot it's saved onto the phone's disk you then crop it down because you don't want all the image to be shown and it saves over that same file but it leaves quite a lot of the original data intact now what it should do of course is delete most of the original data or indeed all of the original data and have only the small image which is what we wanted to send out but that isn't what's happening but that probably depends on how you save it because obviously if you save a copy of the file then you're going to be generating a new one because you've got the original as well probably need to test that do we know any victim with a pixel phone sean so perhaps we'll have a quick look and so you can roughly see how a png file is structured and then and why this has caused the problem so it's probably worth saying while mike's getting ready that a png file exists because you i mean there's two main file formats that are used for images on the web sort of not vector images but so bitmap images you've got jpeg which is good for sort of real images photographs and things and png which is good for synthetic images because you can compress them really well without losing any quality if you try to use jpeg for that sort of image you'll end up with artifacts if you try to use png for real world images they wouldn't compress that well so it's probably worth the same amount so actually this bug is kind of simple when you look at it so when you have a png file which is your original screenshot that's been saved on the disk and this is going to have at the top a header all right but it's going to have all your pixel data right and then at the bottom it's going to have what we call an eye end block a chunk and this end says to the thing that's reading the png file there is no more png file stop reading there and one of the nice things about having this high-end chunk on the end is that then if you accidentally have other data it gets ignored and you don't have a situation where you're showing weird bits of image underneath and more artifacts right so it's sort of robustness now what's happened is the app has gone in cropped the image down to a much smaller one which takes up less space in memory and then overwritten it onto this file but it's left the rest of this file intact because it's not truncated the file so if i take a different color which is our new cropped image we have a header at the top and the file sort of takes up let's say this much room and it has another eye end here like this so this is our new image saved over our old image and you can see that quite a lot of the old image is still here so how do we get it well what david buchanan has done is he's written a proof of concept that gets rid of this new image that we already know because we can see it and then tries to go from here and reconstruct the png without the original header which is very difficult to do and presumably we need to know some information about the actual image of star we think like the width and height otherwise we've got there are ways to estimate you know what kind of dimensions the thing had but of course a much easier way is to know the model of phone that had the bug because they capture a specific resolution so you put in your model of phone and then you know that the image is this wide and this high and then we can drop down through these different rows of data until we get to the second i end which shouldn't ever be there and reconstruct the image it doesn't work perfectly because this is also compressed right png has various and compression mechanisms so they have row level filters but first of all try and make each row take up less memory they then have lz and huffman trees that also encode the data and so the top here we did a computer file on that we've actually done that many many years ago they've done great videos on lz and huffman encoding and so essentially what your process here is we don't necessarily have the initial compressed data so maybe we're missing a huffman tree or something like this we have to find one and then we can compress decompress from this point and you may still get artifacts because lz compression likes to look back at previous data and maybe that data has been overwritten so for a while you'll get some nonsense and some issues with png filters and then suddenly enough data will be there but it all starts to turn out okay and lots of your image turns back up what you might find then is that we send a message that's been cropped and then you can uncrop it and recover all the other messages that have been sent from phone as well oh so this is like when i told you we were filming on friday that's the one yeah i think i'm gonna have to have words with mike after this is i think now at this point steve maybe a good thing to talk about is wider this bit wasn't deleted right yeah sorry i mean i think actually before we get there one thing to that really helps with this is that the png file format breaks things down into 16 kilobyte chunks and if you think about the amount of data that's in a modern pixel phones image very quickly you're going to start a new 16k chunk and then all the compression is going to start again and so you then got a point where you can get the data if you know the width and height when we send these things out over twitter facebook other messaging systems are available in general they will re-encode the file they'll do some sort of filtering on it because these files not only contain the image they often contain what's called the exif data which contains things like what make of camera with this taken with when was it taken the gps coordinates of when it was taken and thankfully facebook and twitter have realized that that's probably not data that you want to be publicly available if i have a really expensive nice new camera and it's this exact location if you want to come and steal it and i'm now just posted that i'm on holiday etc i mean it's worth mentioning the reason that this hasn't flagged up is that when the png file format was created back in the mid 90s it wasn't uncommon and other file formats and other programs that will cope with this extra data to get on the beginning or the end which is why you've got that specific high-end header so that they will ignore what's coming afterwards so actually it is generating a perfectly valid png because if you look at the spec it doesn't say anything about ignoring data or processing data that comes after it we've reached the end of the file it says it's the end of the file we don't anything else so this is why i said you might want to class it as a book because actually it's generating a perfectly valid png of course it's a really nasty problem from a security point of view because we're sending a file which we think we've cropped out useful information or information you didn't want me to see but actually it's still there and so i can load it into david's tool or simon's tool and see what you're saying about me behind my back yep that's right the i mean this is the point i suppose is that png has been very good at hiding this problem for many years suppose i had a text document and i accidentally wrote over the top half and not the bottom half and didn't delete the bottom half it would be very obvious because you read your document and you'd say well okay there's a whole another half a document here that shouldn't be there i need to fix a bug in my code but it's written out this file in the wrong way png has the exact same problem but because of its eye-end header no one's ever noticed it or at least no one's noticed it for a few years at least that we know of it's as far as we know the first person to discover it is simon evans who was sending a file and just wait notice wait a minute i just cropped this file and it hasn't changed size still five megabytes long but it's only sort of 16 pixels by 16 pixels or whatever it was that it got yeah why is that still five megabytes of course you then start investigating and you suddenly find oh dear when you're writing software and you've got a file that you want to update you have to specify how you want to open that so you could open it for reading in which case you can read data from it you can open it for writing and you can open it for read and write at the same time simplifying things if you open it for writing though waiting on that data to go you could have it so it's always appended to the end of the file you could have it so it overwrites what's currently in that file or you could say i want to actually completely obliterate or truncate what's already in that file and then just rewrite things over this as if it was a completely blank file and what seems to have happened here particularly with the issue on pixel phones is that the default has changed i think it was in android 10 or android 11 they default the default change from being you truncated to being overrode don't scare people too much but there's quite a possibility there's other programs that are doing this because this default has changed i don't think this will be the end of this i think we'll see similar things it's no it's fascinating actually because we should note that basically what happened was this was noticed in pixel phones the proof of concept came out and then almost immediately someone was messing around with other pngs from the window snipping tool and found the exact same totally different cause totally different operating system same bug right it's almost impossible this doesn't exist and in some cases it's actually by design there are file formats pdf documents that spring to mind where you actually can update the document by appending something to the end of it and that appending can say for example only show pages one two three and five this isn't a new problem this has been seen before but i think the big problem here is that we have assumptions about what happens when we crop something the question now really is what what do we do about it right now so what's happened in the short term is that google have rolling out patches down very very quickly so good job for them and the authors of the bug so david and simon have i've always been publicizing this now some people have said well you know is it is it a safe thing to release a proof of concept all but actually this is a really interesting kind of bug because in some sense patching it just stops it from being a problem in the future yeah you've already got five years of images that could possibly be uncropped with hidden data in just on the internet now on people's hard drives other people's phones we don't know where they are this data it still exists and and actually i mean it's worth saying we mentioned it on people's hard drives on the state when you even if this did it properly for whatever better way of putting it you'd probably find that if you had physical access to the holidays you could do exactly the same thing because when you create a new file the old data isn't necessarily overwritten it's just marked as unused and it's only when the trim is run on ssd or something overwrites it on a hard disk that that data gets obliterated and the unfortunate thing is unless we develop tools that iterate over all the images let's say on all the images on a discord server or all the images i'm looking for wint and even that is potentially because it's not infeasible that iend could appear as a value compressed data in the within the image yeah it's going to be very interesting going forward so i think in the short term you know the patches are coming out it means that from now on when you crop an image down it's actually going to get cropped and saved that way on a disk but you know if you've saved a lot of images across the internet and they've not necessarily been re-encoded and it's never quite clear who's re-encoding and who is just sending the image i suspect messaging tools will probably do it with images but not with files because they're probably sending images in a slightly different way we know what for example we're in codes but if you had a zip of files yeah it's not going to be it's not going to be encodable images within that zip almost certainly not it's just going to send a zip file simon one of the authors is working on a tool now that will hopefully iterate over images and tell people whether or not this bug exists for them yep some people will do that some people won't and we'll we'll have to see how it goes are we calling this crop lips now acropolis now for sure and then we can be we'll and we'll pose for them what was the sort of pose on the movie poster sort of a and then you can make me red yeah for it and release it yourself so there are two primitives here one's called malloc and malloc says give me some quantity of