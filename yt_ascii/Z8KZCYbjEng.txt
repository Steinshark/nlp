you know in the old days they had like they they had those wax seals they would press to like seal a letter the sign approval yeah right it's like you know that they're they're like oh you gotta you gotta sign this driver or you got to like authenticate this thing well it's gonna it's just going to be an llv an llm based butt print that you just like sit in this like brown wax on the code and then you know it's good you know you could even take an offline verification approach as well like if you get if you get creative with a little bit of whack you could actually put that on an envelope and then someone would not only know that this this envelope would just look like a weird imprint like a balloon but then at the end of the day you would actually be able to use an lm to scan and be like oh this is a secret message from casey oh yeah yeah the watermark the butt my butt watermark so that you know it's really from me tamperproof butt watermark this is the most cursed conversation i've ever had in my entire lifetime this is absolutely fantastic hey the modern the modern web is fantastic honestly now absolutely it's only going to get better with ai generation it's it truly will only get better there's no downsides and only upsides coming all right so i did want to talk about something a little bit more specific here and because i saw this tweet and this tweet got people pretty hot and bothered on the internet not only was i but also the original creator of said tweet was referred to as racist for making this tweet which is pretty outrageous wait what yeah it happens okay these things happen on the internet you know if you twitter hard enough you'll be called like honestly if you're not getting called racist you're probably not twittering properly and you're not tweeting often enough you're just not tweeting often enough that's all it is all right so let me read the tweet and then we're gonna let's talk i have a couple questions we'll kind of work through here all right you took a javascript boot camp made a few basic web apps like the tutorial showed you and now you're writing engineer in your bio you feel like an imposter because you are one brother okay okay okay first gut reactions how do you feel about that i guess what i'd say is i i understand where the tweet is coming from it's pretty obvious why someone would be frustrated perhaps with the general level of knowledge of quote unquote software engineers nowadays so i can understand why someone would post something like this on the other other hand i guess it's just like yeah you know when i make a tweet like that because we've all made tweets like that i you know i probably am not expecting everyone to just be like great tweet yeah good good right i because like there's nothing in it really right it's just saying hey software engineers suck nowadays i'm like yep news flash so maybe so so something i think is a is kind of an astute one is that right now you hear this a lot with people feeling like they're imposters right that they feel like they don't belong right and so they have there's like this whole thing that's going on where people feel like you know they look at other everyone else and therefore they're all better and why aren't they better or it does the inverse which is they have these constant memes on tik tok where the senior like the senior engineer goes to the junior and the junior's like i don't know what i'm doing and then the senior engineer responds with i don't know what i'm doing and that gets like one million views and everyone likes it which i think probably stems from this exact same thing what do you think is a root cause of impostor syndrome and do you think this actually is kind of a funny introspection into what is causing impostor syndrome so i've never really understood impostor syndrome in a in any deep way and so i've always kind of had to imagine that because i i sure i have similar feelings but they're but they're not impostor syndrome like i often constantly am like wow i am doing this thing that i'm doing better than i was doing it like last year and i'm quite sure that in a year i'll be doing it completely differently and better than i'm doing it now ergo right now i'm sucking right like like just any honest examination of your trend line i'm like yep right now i'm probably doing a number of things wrong that i will look back on in a year and go well that was dumb and so i definitely understand the idea of looking going well even if any honest appraisal of what i'm doing even without any external evaluation just just looking at my own behavior i can tell i'm screwing up right and and that's just going to be true so i understand the idea of going like yeah whatever i'm doing right now is not great what i don't quite understand is the impostor syndrome part because like sure i could go online and find someone who's doing something better than than me but i can also go online and find people who have no idea what they're doing so i'm not sure it it seems to me like people when they have imposter syndrome are perhaps being overly negative with their self-image because they're choosing to compare themselves to good people instead of just comparing themselves to people who have no idea what they're doing at worst no matter how bad you are at anything at worst you can easily find someone else on the internet who's that bad right in that job that's not that hard so so i think impostor syndrome is more a case of being unrealistic about your comparisons you're choosing to compare yourself to someone really good and say oh i'm imposter i'm not that good okay but instead you should also consider like oh but also i could go look at all these people right people who write books on software engineering who have clearly no idea what they're doing you can go into the barnes & noble and find someone who has has no business telling anyone anything about software engineering they've got a book on the shelf so what i try to tell people whatever they talk about impostor syndrome is like look feeling insecure or feeling like you don't know what you're doing is a natural part of learning being better at something tomorrow means internalizing the fact that you are bad at it today right and for me i've been programming for 30 years and i have never felt like i didn't get better year-over-year and if i ever felt like i wasn't getting better year-over-year i would panic because it's like programming is immensely complicated and there's always something to learn so i would say like look impostor syndrome turn it around just turn that into a motivation to get better and don't worry about comparing yourself to other people because it would it would have been just as easy to find some total loser who like is sucks at programming and isn't getting any better because they just think they're great or something as it is to find some really good programmer and compare yourself to them and think oh i'm bad does that make sense yeah it's actually it's it's the classic problem i see often which is people aren't sober in their own judgment it's very very easy to look at something you're good at and think you're very very good at it and then you realize you're not good at it it kind of like shatters your world like your world perspective and a good example of this is when i was a kid i was really good at video games i thought i was fantastic i could beat battle toad few people could ever even beat battle toades let alone i could speedrun it and then i started playing other games and then the internet happened and i learned something very very valuable that day i'm very good at video games but the internet is very very good at video games and my my realization of what is good is severely skewed and so the difference between me yes i also could beat contra i beat contra several times the difference between what is good versus what like what is absolutely good is a huge golf and if you ever just sit there in your own bubble thinking you're fantastic you will eventually meet someone that breaks your bubble and then you go man okay i'm i'm actually not that good there's still there's plenty of levels left to become better and so i just need to internalize that and i also like you don't take things in the negative perspective in the sense that when i see that i have a deficiency that means there is a solution out there that the deficiency goes away and i need to figure out how to get rid of that deficiency because that is just like it's actually usually i take it as like a huge win because now i see something i'm not good at now i have a chance to improve that thing if i so choose to whereas if you just never even know about it you don't even get the chance to try to become better and so i mean this is personally why i actually really likeed this tweet is because like people have to quit like they have to quit real like they need to realize that just because you did one thing and you read a tutorial it doesn't mean you're the thing you can be on the way to the thing and you should feel like you're not as good because you aren't good like that's okay not being good like take a moment to rest recognize the situation and if you don't you're just going to be in this like you'll never reach a point where you feel good you will always feel perpetually terrible because you never learned to soberly judge yes and i guess what i would say is you know the problem with the tweet in this case being a tweet which is you know designed for this sort of thing and in fact reinforces this sort of thing like if if she had posted what i had just said for example like oh imposter syndrome is a good example of how you can be self-reflective and go oh that means i'm bad at this thing don't take it as a negative take it as an opportunity for you to get better at the thing that you're doing no one's going to retweet that it's not going to have 52,000 likes and 600 retweets right you have to have so one thing that i've learned and it's really disgusting and and disheartening to me is that if i post something that's a complete answer to something it's like here is a very like indepth description of something that completely covers it and there's really nothing left to say here you go no one cares about that right that is not interesting what you need to post is something ambiguous and slightly incend incendiary and that is what will get all of the attention right and it's very unfortunate because it means that that that is this is actually the kind of tweet that that it will get you more exposure and will get you more followers and all that sort of thing and so you're always caught in this sort of nasty space on places like twitter where you know you kind of gota you kind of got to do what this tweet is doing so i you know at some level i'm like yeah you know she could have posted a tweet that was like more complete and had more of the story and and and also no one would have read that tweet we would not be here today talking about it it is a very pres perverse incentive i've also definitely seen that if i tweet with a more negative one i will get more interaction and so i kind of realized that and also one thing i've also found is that i i don't want to say it's like the andrew tate of but like very red pill take control of your destiny tweets also work in that exact same fashion and so there is like two ones but they have to be super tur like you said and almost incendiary to some sort of level right you either have to have the you know high red pill or pretty negative like some sort of incendiar to make it go far which is really just a bad way to communicate in general yeah it disincentivizes good communication and part of the reason for that is because if you think about what the audience is for a tweet there's like two components right of things that spread on social media there's what is the potential total like largest possible audience for this tweet right and like when we talk about programming stuff obviously that's you know a limited audience to begin with right like you're not n of a niche i'm sorry prime you're not going to hit kim cardan numbers i wish you would i love the show but it's just not going to happen why because people look at a screen full of code stuff and they're like i i don't know what it is drooling now i look away right or whatever yeah but so there's a there's a you know some maximum audience size and then there's also just whether or not someone will feel the need to participate and when you look at those two things they argue for ambiguity on the one hand because the toal audience size the more specific you are the easier it is for someone to realize that they aren't really interested in that tweet like if i talk about clean code for example which one of my largest videos i ever did was on that why does that massively expand the audience size because everyone thinks they have something to say about that it's the most ambiguous word you can use do you mean clean code the book do you mean the principles of clean code do you mean what you personally think of as code that is good every programmer on earth thinks they have something to say about clean code so the audience size is the maximum size right and then there's the other part do i think i should participate in this again if i talk about querian no one will reply because everyone's like i have 40 math i don't know what i don't even know forget it three of them are imaginary it's fakeer or whatever forget it what is the i what's an i now there's a j and a k the hell with this you delete whereas on the other hand if you talk about clean codee everyone thinks they know something about clean c the the worst program in the world would love to tell me how i'm wrong about clean code right so when you combine those two things together that's how you get the biggest possible tweet or the biggest possible video and it's unfortunate because it's not that useful for the world that's just not so you know it's why i don't do a ton of them i mean that's the formula hey everyone out there you want to have a bunch of hit videos there you go right so yeah anyway sorry to s to go on a here we can go back to this tweet because there's plenty of things we can say about this tweet specifically certainly it's actually really well i do i do want to say there is some there is there is good in that and you know i i'm definitely i've been known to use this technique or two to garner some interactions but then it allows for this type of talking to happen which is one of i'd say the inverse benefit or inverse negativities for this one if you will like really put a double negative on that one it turns it into a positive because now we get the chance to talk about this and there's been a large enough amount of people that people want to interact with this topic because of a tweet like this and so i like i like it as a springboard which is kind of it's almost an interesting way to like get someone engaged enough so that they feel like they need to respond only to give them like the old reversal where they feel confused because you just hit them with what they didn't expect so so in a sense you're sort of saying that this is like this is like a forest fire it's extremely scary when it happens and and people die and houses are burned but afterwards for after a while the beautiful trees regrow again and there's like a new lush forest yeah i put it that way with death and sadness like we are the beautiful new trees right now you and me we are the beautiful lush forest rising out of the charred remains of this tweet is that what we're saying yes yes we are okay totally fair i can be that i'll be a beautiful butterfly gently landing on a log okay lovely charred horrifying log that also is part of a house yes yes potentially a little there's like a little stuffed animal from a child like just charred of the ground there never will be loved again all right so let's kind of let's let's swivel a little bit what do you think about the current state of the influx of new engineers into i mean really it's primarily into i think the web world i think there's just a high enough barrier into say the recreation hardware world that they often don't immediately call themselves a professional and try to go get a job in that area they kind of you know they're just a recreational hardware person they don't really have as or pursuits or ambitions of becoming a full-time hardware person whereas with web development the purpose i only see is i mean few people i find actually do pursue real they pursue just building something they learn web development as an incidental to to like make something but most people are learning it to get a job to improve their life and we're seeing like this huge glut of new people coming in having a hard time finding a job and all that what do you think is like the best from 0 to 60 for them to become an employable productive member if you will of the web community andor greater programming community oh gosh i mean i think unfortunately i would say my my my experience over the past like 10 years or so based on everything i've heard i you know being an unfortunately semi-public programming persona means you get a lot you hear i mean i'm sure you know this you hear a lot of things from people that sort of inform your understanding of what's going on in the wider programming world right and if i just go based on that i would say that there's really there's a unfortunate split difference tension i'm not sure what the right word is between good like becoming a good programmer and getting a job or keeping a job right i would say my biggest criticism is really not has very little to do with the people like like i wouldn't say that my concerns about modern programming or my concerns about the state of the industry have much to do with like new programmers like people coming in who are new web programmers or trying to get a job or that sort of thing my concern is more that we have generally set up an industry where that procedure meaning getting a new job or keeping a job or getting promoted at a web company or just we could say broadly a tech job because most of them are going to be in that sort of a a line of work the things you are expected to do know say or how you're supposed to behave have very little to do with good programming in my experience they tend to have more to do with like do you have the ability to check off some boxes like i know these weird frameworks that'll be gone in six months they tend to be about things like do you know how to use you know like jira do you know what a a scrum meeting is or something like that do you want to sit in code reviews all day and talk about you know whether or not you should have had an if statement here things like that and so i would say that you know maybe that's a skewed perspective and i'm hearing those things from people and they're not really true right it's like a work it's a distorted picture of the world because i mean how should i know i'm not out there at an entry-level job or something like that but on the other hand if it was true i think i think that environment and that set of things or also i'll add to that what you're taught in cs classes object-oriented programming things like this the things they focus on what what is supposed to be important you know they're just not any of the things that i associate with good programming that i see the people who i respect as as great programmers doing right and so to me i would say i don't know i don't know where to approach a question like this like you know you took a javascript group camp like you know whoever annie is said in this tweet right well like i mean to wrap every my big rambling response i just said up into a very short sentence well why isn't the java boot camp great like why why doesn't that teach you the right things to to put you on a path to being a great programmer why why do we have java boot camps that javascrip doers that don't do that right and so to me i think it's more an industry failing and i don't i don't look at the entry-level programmers as the problem i look at them and their trajectory as a symptom of our problem as an industry interesting okay then follow-up question what is a solution to this a solution a solution would be to the solution as it really only could be is if we had a concerted cultural shift right in the old old days if you rewind the clock back far enough computers were primitive and slow to the point where you couldn't not be doing real programming you had to basically tie what you did to what the computer was doing because if there was a disconnect between those two things your software either would not really run at all or would run so slow as to be unusable right and over time basically what we've done is we've gotten into a point where computer hardware is so immensely powerful that even though it's kind of crappy and it's buggy and it's very like it's laggy it takes two seconds i click on a web page and i'm waiting a little bit it still works well enough that you can make a product out of out of it if you don't really have any competitors who are are shipping like really good stuff you can do that and so you look at the web there were really no competitors for anything every little thing you do you're like the first person there right and so as a result you're just in this situation where culturally there really isn't much of a knowledge of what programming actually has to be to produce high quality you know low bug count high performance software as a result all of the things we've generated as common core practices over the past 10 15 20 years are all completely fictional none of them are grounded in actually measurable real world performance or low bug rate gains and the way you know that is use any piece of software go ahead and go on any piece of modern software i don't care what it is quickbooks quickbooks is notorious for this by the way gmail like just naming massive pieces of software that everyone in the world uses you know the github i don't care what it is if only there was a piece of software in the background that we could even say has bugs from time to time there you go right and you look at all these things and you're like if any of these software practices were actually good this software would be highquality it's not doing very much right quickbooks is a freaking spreadsheet it's a glorified spreadsheet it's something we've known how to do since the 1970s right and so you know i think that again it's like we have to get back to that if we want things to improve the bad news is again without more competition there's not that much incentive what's the incentive to improve what's the incentive for quickbooks to improve you need a bunch of quickbook competitors that are baller and unfortunately that's a really you know when you look at the the effects of like lockin and state and all of these things incumbent stay around for a long time in the way the world works now so it's kind of it's it's a little bit late and so yeah how do we fix it prim i don't know if i knew how to convince people to start taking more responsibility for the quality of their software believe me i would have done it i have no idea do you have an answer i would love to know if someone did we have this thing that we've been saying a lot on my particular team that i'm on which is we need to create a culture of performance and we mean that in the sense of being able to write high reliability creamy smooth feeling experiences and so that's like this whole kind of mantra we've been having because there's this internal problem where you can't pass ci without running it three times just due to reliability when i got onto a project there was less than one nine of reliability internally meaning that it was like at 83% of the time your test would run successfully and that's not just because people are uploading bad code it's just because like device reservation failed another part of it failed installing the correct version of you know of our platform failed restarting the thing failed like there's so many different places in which something failed and all a sudden you have this like completely unreliable platform that is going on and no one has a good solid reason as to why or how frequent and what this does to developers and then on top of it measuring performance in a real way is extremely difficult because if you just go with something like puppeteer is you also have to say you have to run the websocket connection from your tester to the teste to try to get it back out unless if you're exposing like underlying v8 ones but then that doesn't work on all platforms and then you can't you know there's all these like problems about trying to measure this stuff from happening and so just trying to build this idea that we are performance first place and we're doing it within the company is starting to kind of change some mindsets how can we make things better like how is this not number one priority and it should always have been number one priority because it ultimately makes the best experience because let's just face it when i go into my living room and i turn on amazon prime because i'm renting a movie and i press the search button i get search anxiety every single time cuz i know i'm about to use an on-screen keyboard and this is going to be the slowest most painful experience of my lifetime and every time it loads videos i know i got a second and a half weight every time i press down i know i got a half three4 of a second weight and i have to like count in my head one two three yep you're like all right got it you know like dude i overshoot it i undershoot and like i'm just like i i literally start sweating when i know i'm have to use an on-screen keyboard and it's like we got to fix that and so it's been this this kind of mantra but i don't know if it's actually fixable because you still have to convince everybody else that once you hit this plateau of like it's starting to get better that you can't stop there like you can't stop at the good enough like you have to keep going and that's where i find the hardest part to be is that you will make some sort of milestone and when you make that milestone everyone quits trying oh they just turn off they just gone right and that's i find to be the hardest part about doing a culture change i mean yeah i don't know i really don't i i one of the things that's really interesting to me and that i i think is scary is so i think it would be one thing if the people who made that amazon search thing were like well that was horrible and and we never like that was a huge colossal mistake like and everyone was fired and right or whatever right but but actually what i encounter the majority of the time is is like this excuse parade is the term i usually use for it where people try to explain to me that like i just don't understand that the amazon search bar like one and a half seconds is like a really reasonable number for like how long it takes you to type in a letter right and so i think like one easy step we could make in the culture is if could somehow get programmers to realize that anything that doesn't run at least at 60 frames per second on modern hardware is probably just garbage modern hardware even even your roku box is so incredibly powerful compared to anything that a search box needs to do and the internet is so incredibly fast like the ping times from most people's internet even in rural america is such that you should 100 milliseconds is like tops seen 100 milliseconds is 10 frames a second people you're getting your results back in 10 frames a second okay the results are coming back at that speed and so when you think about it in those terms where like really everything should be running at 60 frames a second and at most there should be 100 milliseconds of delay on anything that really can't be cached locally like it's like it literally has to go out for some reason that means 10 frames a second for the most late response and 60 frames a second of graphical update while that's happening is a bare minimum most people should be experiencing much higher than 60 right yeah like 240 if they've got the monitor for it for something like a web app easily right and so when we're talking about the numbers we're seeing when we're talking about one and a half seconds and when you said that thing about amazon like i've literally experienced that same on a playstation 5 and it runs horizon forbidden west playstation 3s were used as supercomputers and this is two generations later this is great hardware it's insane and so i think like the main thing we could start with on the cultur shift is going look a text box should be running at thousands of frames a second uncapped no matter what it's doing and the results like i said whatever the internet ping speed is that's your result back and forth and anything less than that there's that means there's a massive amount of code in the way now it might be tempting to say well who cares i don't care if my customers have this bad experience i think that's misguided because we have a lot of studies that show that customers interact more they spend more they they engage more with any service that's performant so i think you're going against the data there even in a business case you're losing money for your company if you have that but even if you want to ignore that what i would say is all your other metrics are downstream of performance and the reason for this is because code is very fast when it doesn't have much code that's how it works if there's very little code happening then it is very fast yep f classic performance mantra if you could just not it will be faster if you could just not that means less bugs so if you just take out all of the 50 layers of like this script called that script called out to python went back into the javascript container library docker component running the virtual version of this version of the c runtime library which called back in like if you just took all that out and just had the line that says you know a plus b instead of the 20,000 interpreters you took to run that right all of a sudden you get many things the software runs much faster but it also is less buggy because you're not dependent on this massive stack of five million lines of code that now only did you not write but that you don't understand and not you don't understand because you're stupid you don't understand because no one does yeah no one understands five million lines of code not me not anybody right yeah so you know that's where we're at i'm on your team i i to kind of back up your earlier assertion with that is that there's this interesting study i convinced my company to do which was i took out an autoplay feature that would cash and start downloading all the videos around where you're at including the one you're highlighting on because i was observing high memory usage and high memory usage is often asserted with problems that just happen generally on device and so i was like okay i'm going to take this out and everyone's like no no no we proved this was a win it increased revenue it did all this like your test will cost us money like it is really a bad idea we shouldn't do this and it took me about two years of asking people and i went to so many meetings and really like put in full ass effort to get this done and eventually i kind of skirted around most people and found one person i won't name her but she she was a champion and she was like yeah you should just you could just probably you know just do it and so i went through and i i did it and i did it and then guess what we made more money revenue increase we turned off things that made objectively better experience play delay went up revenue also went up and the real reason why is that the underlying issue was the that o and various ways of the app crashing went down which means that people ended up using the app more which it meant that we actually got more revenue because people were more satisfied despite having an objectively worse experience if you will and so it's like kind of this funny thing that we made it worse by making it better one of the other things about that too is you see a lot of that kind of thing introduced largely instead of fixing whatever the underlying problem actually was as we said there's not that much ping time between you and most servers wherever you are so you have to ask yourself well why did we need all of this like oh predictive cashing behavior going on like you know where did we really need to get video playback startup down to this very low time or was it that we had all of this other garbage in the way and that's actually why we need this caching to overcome a bunch of other code that we should have just fixed that other code instead right and you do see a lot of those things where people are like putting systems on top of systems on top of systems to try and improve the performance instead of just going why was the underlying performance bad in in the first place and again they just introduced lots of bugs cash and validation problems like you say memory usage problems which of course on devices like phones can create crashes and all those sorts of other things it's a problem yeah i'm gna pull up your info really quickly people are asking who is it oh we're almost there we're almost there give me give me ah there it is i'm gna pull up yours there we go anyway because people are asking who who do we have on here yeah that's me there you go casey hey this was great i appreciate this we should we should we should try try to do this more often like we get something like quarterly and talk about some good issues if you ever see anything please feel free to tos it my way and we'll we'll talk about some sweet pressing issue of the day i am totally down for it i just i have one question why is this on montana time what's montana time is the lord's time i don't know if you know this the north coast is the best coast but you're you do you do web programming and like when i think of web programming stuff it's all west coast it's pacific standard time baby there's no montana time what's in montana you know as someone who grew up in montana as part of like the birthing process you are handed you know you are handed a very nice hospital to be a part of and they want to make sure everything's clean and all that and then the next thing you get a gift bag and it contains like an i hate california sticker i hate you know washington sticker organ socks right like you're taught from a very young age you get a plushy that says it that you hate the west coast and coast best coast and so it's just like that's you know that's the montan way of thinking and so it's just who i am i can't help it i call i spent 27 years there of my 37 and i'm very happy about my time spent there okay all right well you know i will i will wake up at at 7:30 a.m. for some reason not a real programming time just pointing that out anytime you want prime you just let me know when and and we'll we'll have another chat thank you i genuinely appreciate that my wife just sent me a message saying that she actually liked this discussion you did a great job casey i i love being on the show as i said many times i absolutely love your show and i absolutely love your approach and attitude it's it's one of the most fun things to be on and it it balances out my my natural acidity so so i absolutely love it please keep doing what you're doing it's been a pleasure being on and yeah i will see you next time yeah i'll i'll message you sometime after this we we'll keep chatting sounds good casey casey is just so good by the way if you don't know casey you're a fool honestly casey is casey is a true champion so i hope everybody takes the time to to follow casey always have been such a such a big fan of what he does he's an extremely talented engineer i forgot to even ask i forgot to even give him the chance to tell tell you guys what he does i know he's in the game engine world i'm pretty ignorant when it comes to game programming i tried to do my own game programming one time and i ended up doing like seven levels of o o because i was taught o just like he said i was taught o and all that stuff in college and i was gosh darn awful at it and now look at me and now look at me now i now i don't do seven levels you know you have to do seven levels of hell before you realize you shouldn't do seven levels of hell it's just part of the learning process anyways fantastic discussion please take your time go follow casey absolut dude movable game object is unironically hilarious and if you have not written if you have not written a class called movable game object you're not a real game programmer you've had you have to at least write it one time and then go wow that was a bad idea dante's o ferno i still do seven levels oh gosh