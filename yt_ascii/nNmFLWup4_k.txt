hello in this episode we're going to be adding ability to toggle a path as either closed or open and we'll also be adding an option to automatically set the control points based on the positions of the anchor points this is of course particularly useful for applications in procedural generation where there's obviously no human around to set them by hand okay so here is an open path and here is a closed path now all that's changed is that we've added this control point opposite that one and this control point opposite that one so to close the loop we just add two new control points so i'm going to head over into the path class and here i'm going to create a bull called is closed and just like the points list i want that to be serialized but hidden in the inspector and then i'm going to make a method i guess i'll just put that at the bottom here it'd be a public void toggle closed alright so this will set is closed equal to not is closed and then we'll say if the path is now closed then we're going to want to add those two control points so let's quickly go to the add segment method and this first line of kochiya is doing exactly what we want for the first control point it's just adding one opposite to the last control point so let me paste that in there and i'll place that in a second time so for this one we just want it to be opposite the first control point so i'll just change this to points zero for the first anchor point and this two points one for the first control point okay and then if it was closed but is now open then we're going to want to just remove these two extra control points we created so i'll say points and dot remove range starting at points count minus two and just removing those last two okay now we'll need to update the number of segments to reflect the fact that when the path is closed there is one extra segment now originally i was just going to add one here using a ternary operator but happily a viewer pointed out a much cleaner approach in the comments to the last episode which is as follows if we have one segment then we'll have four points two segments we'll have seven points three segments ten points and so on so if we divide each of those by three always rounding down we get the correct number of segments one two and three so that is for an open path now for a closed path their role is just two extra points circular six nine 12 and so on and if we divide each of those by three we get two segments three segments four segments which is correct so we can replace this convoluted nonsense here with a points count divided by three okay now we have a small problem in the get points in segment method which is that if we're on the last segment of a closed path then this very last point here should refer to the first point in the list since it's now wrapped all the way around but instead is currently just out of range related to that problem in the move point method here and here we are only moving certain points when they are inside of the list but when the path is closed we just want to wrap around to the other end of the list so i need to create a private method returning an int called loop index so taken into i and this is going to return i plus points count mod points count so that will just wrap the index around and the reason for adding points count here is just so that it handles negative values properly so if we're given a value of negative one for example that should wrap around two points count minus one okay so let's use that method to solve all the world's problems in the get points in segment method i'll just wrap this in a call to loop index and then in the move point method in each of these cases here we can say we only want to move the point if it's in range or if this is a closed loop then everything is in range we just need to make sure that we loop it with a call to loop index all right so i'll do that here as well or is closed and loop index okay one more place for that over here or is closed and then we're going to have to loop all instances of the anchor index as well as the corresponding control into x here so let me write loop index and k index and i'll just copy and paste that over here and over here and then loop index corresponding control index and i'll copy that and i think there's only one other place which is there okay so that should now be working let's save that go into the path editor and add a button for toggling the path open or closed so i am going to override the on inspector gui method and here i'll say if gui layout dot button and i'll give that some text i guess just toggle closed so if that button is pressed then we're going to call path dot toggle closed we'll probably also want to force the scene to repaint after that so we can just call the scene view dot repaint all now while we're here might as well add a button just for manually creating a new path so i'm just going to copy paste this i will place the bottom text with create new and this will have a call instead to create a dot create path and we want to update our path reference then of course so then path is equal to create a dot path alright let's save that and have a look so here i'll try creating a new path and we've got a nice new path i create new it's working and now if i trouble closed that is now closed and we can still move the points around the join there nothing's going wrong and if we toggle again now it's open ok so the next thing i want to do is add an option for automatically calculating the positions of the control points now there any number of ways of going about this but the idea i'm going to use is as follows at each anchor point look at the angle it makes with its neighboring anchor points then bisect that angle and place the control points along the line perpendicular to that the distance of each control point from the anchor point will be half the distance from the anchor point to the neighboring anchor point now the way i'm actually going to calculate this is a bit different to what i've just described but amounts to the same thing we first find these offsets to the neighboring anchor points then normalize them so that they're the same length and then simply subtract the one from the other which will give us the direction we want okay so in the path script i need to create a method called something like auto search anchor control points and this will take an integer for the year anchor index symbols we'll start by getting the position of that anchor so call this anchor pose is equal to points with that anchor index then i'll a vector two direction and this will just be a vector 2.0 at the start then i also have a float array called the neighbor distances just for the distances from the anchor point to its two neighbors so i'll set that to a new float array with the size of two i'm just at the new keyword that alright so for the first neighbor let's say if anchor index minus three is greater than or equal to zero or if this is a closed path then we can get the offset from the neighbor to the courage anchor by saying vector to offset is equal to points and i'll use this loop index method passing an anchor index minus 3 and then from that i'll subtract the anchor position then i'll say direction plus equals offset not normalized and the neighbor distances with an index of 0 is equal to offset dot magnitude okay i'm now going to copy this and just paste it for the second neighbor so this will have an index of anchor index plus 3 so let me just replace that in both cases and here i want to subtract this from the direction and i'll say neighbor distances one is equal to negative offset of magnitude just that it goes in the other direction all right i'll not just have a little full loop to set both of the control points so i'm going to go for i equals 0 i less than 2 i plus plus i'll say inch control index is equal to the anchor index plus i times 2 minus 1 so when i is 0 that will be anchor index minus 1 and when i is 1 it will be anchor index plus 1 ok we want to make sure that that is in range so if control index is greater than or equal to 0 and control index is less than points count oh of course if it's a closed path then we can say points with an index of loop index control index and i'm gonna set this equal to the anchor position plus the direction multiplied by neighbor distances then index of i multiplied by 1/2 now i should actually normalize this direction before i use it so just before the loop i'll say direction dot normalize okay now for an open path the positions of the start and to end control points are going to be a little bit different basically i want to position them halfway between their anchor point and the next control point so i need to make a separate method avoid water set of course they start and end controls let me just first make sure that this is a open path and then i'll say points with an index of 1 so that's the first control point is equal to in brackets points 0 so the first anchor point plus points to the next control point multiplied by 1/2 so halfway between them and then i'll do the last control point so that's points count minus 2 is equal to points with an index of points count minus 1 the last anchor point plus points with an index of points count minus 3 and once again multiplied by 1/2 ok i'll then have a method also set all control points so this will start by looping through all of the anchor points so for i equal 0 i less than one step count and we know every third point is an anchor point so i plus equals 3 say auto set anchor control points passing in i is the anchor index and then after having done that i will auto set the start and end controls now when we do something like move an anchor point it's a bit overkill to set all of the control points again we only need to set the control points for the surrounding anchor points so i'm going to have a method auto set all affected control points it'll take an an inter the updated anchor index so the index of the anchor that's been changed in some way so in here i want to call auto set anchor control points on the updated anchor index as well as it's two neighboring anchors so i'm going to have a loop forint ankles updated anchor index minus 3 i less than or equal to updated anchor index plus 3 i plus equals 3 i want to make sure that this index is in range so i'll say if i is greater than or equal to 0 and i is less than point count oh it is a closed loop then what set anchor control points passing in loop index i at the end of this and this critical or reset start and end controls just in case they're affected okay let me now come up to the top here and i'm going to create a bull auto set control points and i want that to be serialized and hidden in the inspector so i'll copy that and i'm going to create an accessor for it so somewhere here i'll have public boo now call this auto set control points as well just with a capital a and in the get block i'll simply return the value of the variable so return that and in the set block i'm going to say if the current value is not equal to the new value then i will assign it and if it is now true so if we're auto setting control points then i want to update all of the control points so auto set all control points i'll now come down to the move point method and he'll say if we're also setting control points then i want to also set the effected control points and the updated anchor index is i and only for a not auto set and control points will we actually worry about doing all of this manual stuff i'll land come to the struggle closed method so if it's been toggled closed then we only need to update the control points of the first and last anchor points so if water set control points is true then i'll say auto set anchor control points an anchor index of zero and auto reset anchor control points with an index of points count minus three if however the path has just been toggled open then i'll say if walter said control points then want to also set the start and end controls alright the last case is when we were adding a point so let me see this is the add segment method after adding the points i'll say if also set control points then also set the affected control points and the new anchor point is the last element in the points list so points dot count minus one okay i'll save last year into the path editor and here in the inspector gui method i want to create a toggle for that auto set control points pool so i'm going to say boo auto set control points is equal to editor gui actually i want gui layout dot toggle and i'll pass in the current value so path dodge auto set control points and then a label so just alter set control points and i'm going to say if the value has changed so if this auto set control points is not equal to the current value there i'm going to first record this with the undo system so i'll record the creator object and for the undo name i'll just call this toggle auto set controls and then path dodge also set control points is equal to auto set control points while i'm here i'm just going to add this under functionality to both the toggle closed and create new buttons so i'll paste that in there this will be toggle closed and shiah create new now i also want to repaint the scene when this changes but instead of making all of these separate calls i'm just going to begin a change check up here and then at the end if editor gui dot n change check so if something's changed then i'll repent the sin let me go into unity and with auto set control points turned off i can as before just move these anchor points around and the control points just stay in there manually to find positions but as soon as i turn this on you can see it all jumps into place and now as i move the anchor points around their role changing based on that algorithm we wrote to try and make a nice-looking path now of course is not always going to get it exactly how you want it and in some configurations might end up with weird twisting that you don't want but for the most part i think it gives us fairly nice results and there's no doubt room for improvement with the algorithm if you want to tinker around with that now the last thing i want to do this episode is just forbid the movement of these control points when auto set control points is turned on you can see if i try move this then weird things happen so i need to go back to the path script to this move point method and i'm going to say that the position of the point can only be searched if either it is a anchor point so i mod 3 is equal to 0 or auto set control points is not turned on so i'll enclose all of this in that if statement and then we are done for this episode so until next time matches