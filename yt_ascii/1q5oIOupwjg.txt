here's chris from conan and chris i think you have a demo about conan yes i do i have a few slides on a quick demo so i'm going to share my screen for everybody that's what i'm after yeah so according to zero has been released in february i think and it's been renovated and it's great to have it so let's see what chris has to say about conan to zero and conan in general let's go so just a quick introduction to conan 2.0 for the tool fair here today my name is christopher mcarthur i'm the conan developer advocate if you're on any of our social medias you'll definitely find me we're in a bunch of different places like the cpp alliance slang the hashtag include discord and you can follow us and keep up to date with all the different releases that are going on so one of the first questions i always get is what is conan so it's a cnc plus plus package manager and the role of this is really easy it's just to simply install dependencies we've all had that frustration of i'd like to try out a new project but the building three or four different projects putting and installing them all in the right place configuring the system it's quite a hassle at times and being able to just quickly develop and prototype things is one of the most convenient features of a package manager so the distinction between conan and a lot of the other package managers is it focuses on building and distributing the binaries so when you're talking about things like api compatibility binary compatibility between different versions being able to model that track that and make decisions around it is where conan's strengths really lie so we have jfrog's khan center i've been contributing to that for several years now there's over 1500 open source projects and it's built in over 100 configurations so you can see this in the demo very soon but i'll show you that you can quickly just install the dependencies need so conan is open source it's mit licensed it's a distributed model so there's one client to many servers it's scalable and flexible so you can have different combinations of remotes and servers working combination it supports all the major build systems so cmake meson auto tools any platform windows linux ios android your heart's contents embedded devices as well and it's more than just c make list.text so being a python package manager really gives you some flexibility so you can do more things and more completely so let's say we just have a simple consumer example right so i want to make an app and it's going to be version 1.0 because i'm real fancy you can just make a clone file.text you don't really need to get into the python and it's a very easy syntax requires speed log 1.11.0 we're going to be using some generators this is a conan's language for the integrations for build systems so you can see here we're going to use cmake tool chain and c makeups and our layout for this project is going to be cmake because it's a cmake project so we can just get clone our app we can cd into the repository and do a kona install and that's like the easiest way to get going but the secret here is the dependency graph so what you didn't see in the previous slide was this dependency on fmt so the format library so my app is going to have a direct requirement to speed log but that speed log is going to have a recipe and it's going to have a requirement to fmt and that transitive dependency is carried through the conan model graph and being able to make these distinctions and understand these things we get to do fun things like having requirement traits so we know whether or not the header libraries are exposed whether you need the symbols to link against whether it's a dll that needs to be copied at runtime you can make more informed decisions when you're building and deploying your app and you can do some fun optimizations in that so i mentioned a recipe so our app here is going to have one we're going to use conan to build and distribute it because that's the next step we figured out how to install our dependencies but we need a recipe for how do we build and package this so we're going to make an app and it's going to have a binary and it's going to have a clone file and there's going to be a source method a build method and a package method and this works just the same where you clone your repository and instead of doing cone and install we're going to do cone and create so fun little demo i have here a terminal we're already in our app directory so if i just do ls minus la you can see minus the bad text coloring there are a few directories going on so we have a source folder here as well as a test package and we can see here our clonefile.py so if i catch that conan file you can see here we have a handful of things i cheated and just used one of our nifty little commands and columns so if you do conan new you can actually just generate yourself an example recipe which is what i did right here and you can see here we have our layout which should match what you saw previously in the cone file.text most of these things translate over we have our requirements generate build and package so these are the different methods that conan can invoke and this is how you teach it to build and package your software you can see here for our binary configuration our settings our operating system compiler and build type architecture and this is just how you describe things there's some fun fill-ins you can do your metadata and here we're going to be making an application so easily laid out so if i go back to my cheat sheet and i steal my command i can run this here so i'm going to compile this with c plus 14. and you can see conan will go through and work and it'll build our app so our graph here you'll notice it's going with our app and it was exported so it was in our cache and you can see our dependencies here we have a speed log and fmt so our version range here so i need version of speed lock anything greater than 1.10 and it resolved that and it found the latest and it turns out it was a 111. compatibility so depending on your c plus plus standard you can get different binaries the default compatibility in conan 2.0 is very easy it accepts any cpp sd which is generally what you would expect most of the time that most of them should be compatible it is a plug-in so you can change and customize it however you like here you can see our requirements these are the different binary packages that it resolved to and found and it generated our files for us and this created our package so the introduction section to the new conan 2.0 docs is going to be your best friend it's a narrative story so similarly how we solve from slow band for his book where there's like real code examples all of that is here present with conan as well it makes it very easy to get hands-on and try it so why would you pick conan over the other ones and i touched about this a little bit earlier but its focus on being able to package and distribute software is one of the key aspects of it and it also gives you that flexibility so you can build a framework for doing devops devops isn't really something we talk a lot about in the c plus plus ecosystem but spoiler alert you've been probably doing it this whole time with building and saving packages somewhere those binaries if you build and debug and release or different compilers and platforms you've already been doing devops so conan just gives you more tools to manage that and do it better and you can do things like model modeling the platform configurations and language between libraries which is very convenient what's new in content 2.0 quite literally everything so there's been five years without a breaking change and that commitment to stability is still true with calling 2.0 so about 60 of the code base is new and about 20 is back ports but the example i just showed you is completely compatible with conan 1.x as well so you can do the latest in conan one.x and then plan your migration over to 2.0 and this was done intentionally and the design was really thoughtful behind this so this is a slide just to show all the different changes on the left hand side you can see a list of different breaking changes these are more structural changes to how the client works and on the right hand side you can see a whole long list of new features and this will give you a good overview of like what to expect i mentioned the plugins in diego cpp contact he used the expression death by a thousand bytes and that is absolutely truth so one of the changes in column 2.0 is you have the power to help yourself there's a profile checker command wrapper and package signing to name a few and this will really make it easier for people to try things out so new graph model new plugins extensions deployers binary compatibility things i didn't mention multi-revision cache there's new package id modes there's lock files got a huge revamp which is super good configurations environments got an overhauled package immutability and so much more there's a page on the docs what's new and you can learn all about it there some more resources if you curious there's an accu talk by diego a year ago now we did an introduction to 2.0 blog as well the tutorial which i mentioned if you have questions the official place to get help is the conan issues on our github repo if you want community help i highly recommend our cpu alliance slack channel it's one of the most active in the c plus plus ecosystem and it'll definitely give you a good overview and people are definitely helpful so if you want updates twitter i run the twitter i do make typos you can make fun of me i appreciate it thank you very much pip install conan that's it easy peasies thank you chris that was a nice short demo and more about conan on the table in federal need to go that's again and thanks conan