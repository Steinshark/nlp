hi everyone i've unfortunately allowed this project to become a little bit messy so i'd like to spend some time just straightening things out of it now my main concern at the moment is with the map generator class because this is currently doing three completely different tasks first of all it's allowing us to preview the map in the editor then secondly it's got all these methods for requesting map in mesh data on separate threads and thirdly it is generating the map data by fetching the noise map and then applying a fall-off map so ultimately i'd like to move each of these tasks into their own class and then get rid of the map generator class now i can't do all of this in just this one episode but i'd like to make a start by moving the generation of the map data from the map generator class into a new class called the height map generator now if we look at this map data object it's this struck down here which currently just contains a 2d float array called the height map now this isn't really the height map because later on in the mesh generator we're still applying the height curve and the height multiplier to get the final height value so it doesn't really make sense to do that here i'd rather have that done in the height map generator class and have the height that the mesh generator is given be the actual final height so i'm going to rename map data to be height map since that's just a more accurate definition for what it is i'm going to rename this 2d flow to simply values i'll rename not only constructor as well and this is going to have two additional read-only float values a min value and a max value all right and this can just be added to the constructor as well slow to min value float max value and then we'll of course assign these so this dot min value is equal to is equal to the given min value and the stop max value of course equal to the given max value all right i'm now going to cut the height map out of the map generator file and in unity we create a new c sharp script called the height map generator and i will open that up so this will be a public static class so it won't inherit from on a behavior and just at the bottom of the file here i'm going to paste in the item map struct now the height map generator class is going to have a public static method returning a height map object now call this generate height map and this can take in an integer for the width and height of the height map and then it's also going to take in an object called height map settings and i'll simply call that settings now i want the height map settings object to contain the variables for the noise settings so those are things like the octaves the lacan arity persistence and so forth and then it should also contain the fall-off settings which continue to stay single boo which is whether or not too useful off and then also things like the height multiplier and the height curve so i'm going to go over here into the data script and i'm going to take this noise data class and rename it to height map settings so this is going to contain not just the noise variables that's also going to steal some of the variables from the terrain data scriptable object in particular the use fall-off the mesh height multiplier we measure height curve and then should also grab these min height and max height accesses the dis cut is all out of there and paste these into the height map settings and can get rid of uniform scale here all right and i mean to rename mesh height multiplier to simply hiked multiplier since it's no longer got anything to do with the mesh rally and then i also rename mesh height curve to simply height curve now just to organize this a little bit better i'd like to take all of these noise settings and put them in their own roi settings class so i'm just going to cut those out and then here we'll have a noise settings object called the noise settings which would of course be public and then in the noise file down at the bottom here i'll create a public noise setting this class and just paste all of these variables in here and this should be serializable so it can show up in the inspector and just like to rename noise scale to scale the noise seems a bit redundant since it's part of the noise settings after all and then i'll just quickly give these some default values so we have scale value 50 octave six persistence maybe you point six and to full a clarity alright but also then likes to have a public method called validate values and this method is going to make sure that all of these values are within a valid range in particular scale octaves and wrekin arity must all be greater than zero so i'll start by saying scale is equal to the mass f dot max passing in scale and some small value close to zero like 0.01 perhaps so the max function will just choose whichever is greatest so if scale is less than 0.01 then the value of scale will be set to 0.01 and can do the same thing octaves i'll set this equal to mf f max of octaves and one so it has to be at least one and same thing with linearity ff max between the lack narrative value and one and just make sure that persistence is between zero and one so the systems is equal to mass f dot clamp bo one passing and persistence okay so now the generator noise map method is going to instead of all of these different variables if we're just taking a single noise settings variable called settings now of course we have to add settings dot in front of each of these variables to access them so settings dot and i'll just copy that so this can go a little bit faster work through each of these this is now happening in the validate values method so i can remove that and over here settings of octaves settings at scale the systems lacon arity and finally the normalized mode now i do want to add one last argument here a vector to sample center and when we're adding the offset here and made you add sample center dot x and here i will subtract sample center dot y and that isn't really anything new it's just that in the map generator when we were generating the noise map the sample center was being passed in here and we were adding that on to the offset so instead of doing it like that it will now just be a separate argument okay and just while real here there are two quick things i also want to do first of all i want to remove this else here and make these two separate if statements because as someone pointed out the first noise height that we generate is going to be both the max height and the min height so we should be able to set both of these values the other thing is that if our normalized mode is set to global then we can actually do this normalization inside of the main loop and we only have to loop through all of the values again if we're using the local normalization so i'm going to put this it's statement over here right and surround all of that and then i'll cut these two lines out so that's the global normalization and we'll just fix the indents here all right so i'll paste those in here and we of course only want to do this if the settings dot normalized mode is equal to normalize mode global alright can now save this and let's head back to height map settings so in the on validate will no longer be doing this here will simply call no settings dot validate values and then let's save this and save the terrain data and head back to our high snap generator so the first step in creating a height map is to generate the noise map so that rule filling to need to know the sample center here so that we can pass that into the generate noise map method and will now create a 2-d float array called the values it's going to be equal to noise or generate noise map passing in width and height and then we want to pass in settings dot noise settings as well as the sample center all right we'll now want to loop through all of those values so for int i equals 0 i less than width and then a nested loop for in j equals 0 j less than the height now we will eventually be applying the full off mapping here but i'm actually going to just ignore the full of maps at the moment and will be re implementing that when we do some stuff with full of maps in a later episode for now we can say values with an index of i comma j gets multiplied by settings dot height curve evaluated at the height value so at values i comma j and we then want to multiply this as well by settings dot height multiplier now it's important to remember that this generate height map method may be called simultaneously from different threads and the reason this could be a problem is that the animation curve has some optimizations which cause it to give incorrect values if accessed simultaneously this is why in the mesh generator when we're given the height curve over here we actually created a local copy of it to be used so we'll do the same thing over here we'll create animation curve and i'll call this the height curve underscore thread-safe is equal to a new animation curve passing in settings dot height curve dot keys alright and we'll use this one instead over here alright now to create our height map we also need to know the min and max values so let's keep track of those or create a float min value which starts off at the maximum possible value and a float max value which starts off at the minimum possible value we can answer that if the value at index i comma j is greater than the max value then i'm going to set the max value equal to that value and if values i comma j is less than the min value i will set min value equal to that value all right so at the end of this we can return a new height map object passing in our values array our min value and our max value all right now since we stole most of the terrain data is variables and put them in height map settings this terrain descriptor object is looking a little bit bare and not very useful however it would be nice to have a single place to store settings for our mesh so i mean to rename this to mesh oh let me turn off my caps lock mesh settings yes on to overwrite the file i'll write similar to rename uniform scale to mesh scale and then this is also going to have variables to control the chunk size of the mesh so that means that we're going to be grabbing all of these integers from the mesh generator those will now be stored nicely in our mesh settings so that's the number of supported levels of detail and the number of supported chunk sizes and the actual supported chunk sizes themselves then from the map generator are going to take these two variables here the chunk size index and flat shaded chunk size index and those will be stored in mesh settings as well we can remove the mesh generator from there since the these variables are now stored right over here and then also going to want this map chunk size accessor that should be stored in mesh settings so you can see here we're returning an element or fondly supported chunk size of the array and then subtraction one from that i mean to rewrite this a little bit more compactly so on a single line in this write return an element from the supported chunk sizes array and then the index depends on whether or not we're using flat shading so it can have a channel operator if use flat shading then want to get the flat shaded chunk size index otherwise just the regular chunk size index all right and subtract one from that and say hold on so since the three values here are the same as the size three values here i'm just using this array for both of them so i can just delete that array actually now i want to rename this to just give it a slightly more informative name we'll call it the number of vertices per line and then just add a comment here to elaborate on that it's specifically the number of vertices per line of a mesh rendered at the highest resolution so of a mesh rendered with a level of detail equal to zero and i also want to notice that this number is going to include the two extra vertices that we create just for calculatingly normals but those two vertices aren't actually included in the final match so in this case right here includes the two extra vertices that are excluded from final mesh but used for calculating normals now previously we weren't including those in our count so i'm going to add two onto here to make it of minus one but plus one all right i think it would then also be helpful to have a public float accessor called mesh world size so we know just how much space the mesh takes up so can return the number of vertices per line now we want to subtract one from that because you can imagine if we've got say a mesh with three vertices and these are spaced evenly so there's one unit between these two and one unit between these two then the width of this is just two three vertices width of two so we subtract one but then we also want to subtract two for the vertices that aren't included in the mesh since those don't affect the size obviously so we end up subtracting three and then multiplying this by the mesh scale okay so now we get this all working let's head into the mesh generator and in to remove hi small supplier and height curve from the arguments here or seem to remove flat shading and a nature add a mesh settings object called mesh settings now you might wonder why level of detail isn't a part of the mesh settings and the reason for this is that while technically we are generating a new mesh for each different level of detail conceptually i like to think of it as not different meshes but rather the same mesh rendered at different resolutions so i think it makes sense to say that those different meshes all use the same mesh settings object since conceptually they're actually the same mesh and then this level of detail is just applied to say which resolution we want to render it at i hope that makes some sort of convoluted sense anyway okay now we can remove the height curve from here and when we're getting the height this is no longer doing any of this height curve does evaluate or multiplying by the iso multiplier use flat shading is stored in mesh settings so it's a mesh settings dot and then to get the vertex position we also now want to multiply by the mesh scale now i don't want to multiply the height by the mesh scale since we have this independent height multiplier i only want to multiply along the x and the z axes so i'll just multiply here by mesh settings dot scale and then going off the line a bit here but over here once again mesh settings dot mesh scale okay so that's everything for the mesh generator can save that and i'll head into the map generator what we've got quite a lot of errors first of all i want to come down here and just delete the entire generate map data method you no longer have a use for that then also since we changed the map data to instead the hold height map i want to rename all of these variables that are called map data to height map and similarly all these things like map data thread should be height map thread so i'm just going to do a find and replace all searching for map data with a lowercase m and replacing with height map so i'll just replace all of those and then for the method names i'll use capital map data and replace this with capital h map replace all five of those okay let's now go up to the top here and the height map settings shouldn't be called noise data should be renamed to well height map settings and the mesh settings variable should be called mesh settings okay now working through all of these min height and max eyes are stored now in the height map settings and by the way this should actually be in a start method not in a wake method i just found those some error when it gets set to early in certain cases then over here this is once again height map settings of men highest height my height map settings up max height generate height map this is in the height map in generator class and for the width that will be mesh settings dot number of vertices per line and then for the height number that's per line and then we want to pass in the height map settings so just passing out height map settings object and the sample center for the preview we've just been using vector 2.0 all right now we need to fix the generator terrain mesh parameters here we're gonna go passing at any of that we're instead passing in a mesh settings object that can remove the use flat shading from that then the size of the fall of map we want to create is mesh settings dot number of vertices per line and over here let me just copy this and paste that in there except instead of vector 2.0 we'll use the given sample center and then over here once again just correct the terrain mesh parameters so pass in mesh settings and remove the flat shading all right so i think that's all the errors for the map generator class might have a few more coming from elsewhere so in the endless terrain you can see it's trying to get this chunk size from the map generator now this chunk size we use for things like determining the number of chunks is visible in the view distance and we divide max euwe distance by the chunk size now previously chunk size wasn't including the what was then called the uniform scale what is now the mesh scale so this wasn't actually completely accurate so this time around we're going to account for that need to make float with a renamed chunk size to mesh world size all right this will be equal to map generator dot mesh settings dot mesh world size now this change doesn't mean we have to change a few other things first of all when we get our viewers position we're no longer going to divide that by the mesh scale and then coming down into the trench and constructure the size that is taking in will now be a float for the mesh world sighs all right now this position variable i want to rename that to sample center since this is the point where we're sampling the noise and this should not be affected by the mesh scale so i'm going to divide this by map generated mesh settings dodge mesh scale all right then i'm going to just move this line up here you can make this a vector to position equal to coordinate x mesh world size and the bounds will be centered at this position and then when we want to set the mesh objects transform position we'll just set this equal to a new vector3 at position dot x 0 on the y axis and then position of y for the z axis and finally we no longer need to set the scale of our mesh object since the mesh scale is being actually baked into the mesh all right so we can save this and if there are any other errors so over here the number of supported levels of detail is stored in mesh settings so say it's that and yeah that's just the same thing and then before i forget in the mesh generator i made a mistake here when multiplying by the mesh scale need to just enclose all of this in parentheses so it all gets multiplied by that and same thing here for the x axis like so okay so save that go into unity and that should be all the errors sorted out so now i'm just going to go onto the e terrain assets you can see these have lost their connection so i'm just going to delete those and i'll recreate them here so new height map settings and a new mesh settings and then i just assign these to the map generator so that's the height map and the mesh settings and imma just give this some sort of height curve at a key over there just something like that i guess and set the height multiplier to maybe 50 or so alright we'll change the mesh scale down to one and bring the chunk size up okay so let's clear this and see what happens if we generate all right and the texture seems to have been lost so i'll just update that i also want to set the noise settings to global here i'm going to put this on auto update okay let's go to toy with this a little bit more and we just change the noise settings here perhaps bring the persistence down a bit something like that alright so on the map generator i'm going to quickly test the different levels of detail just make sure that that's working all right and then on the endless terrain script with glue turn these settings down a bit 200 and 400 and i'll make my viewer objects just this viewer here we will disable the rigidbody for a moment and before i hit play i mean to close this profiler window that i have open because there's a bug sometimes we're having that open crashes unity so press play now and that's generated the map and if i grab the viewer object and move that around should correctly spawn in the terrain chunks so that is everything for this first part of the refactoring there's still a fair amount i want to do but i will save that for another episode until then cheers