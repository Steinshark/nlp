i've been in recent set of videos that we've done related to html really i've taken a severe beating in the latest one that i'm a disgrace to full professors that i don't know what programming language is and and how it differs from a markup language and my attitude is going to be well i stand by what i say html is a very restricted form of programming language in my view so we need to justify that and i need to say at the outset that you don't need to see all the previous html videos in order to understand this one because it really comes down to something that's actually very fundamental in the end it comes down to two different styles of programming language that are interrelated but you can differentiate in a way between them and when does one merge into another and these two ways of doing programming are known in the trade generically as either the imperative style or declarative now the one that most of you will be the more familiar with is the imperative so we'll do that first this is really just programming as you and i understand it you take your language of your choice assembler java c basic whatever and you are required to give a detailed specification of how you are going to do this problem and as we know this detailed specification might be simple arithmetic programming statements it might require going round things in loops it will certainly require taking decisions so it will have if statements inside it so if you like ordinary straightforward detailed nuts and bolts programming is in an imperative style because you say have to say how you are going to solve the problem so i'll put how in quotes here saying that leads you to if for arithmetic statements whatever you need so this is setting out how you're going to do something if this button is pressed then do this yes yes and the vast majority of programs that most people think of in in terms of programming are done in this style now what about declarative then well declarative it's a more functional style of programming where the interpreter for your language does the details and actually one style can merge into another and i've got a very good example of my own and we've done it on computer files i wrote a program to do the aiman function i think it's my biggest hit so far that particular video and within the function acan we saw program statements we saw use of recursion we saw aiman calling aiman and all this kind of and finally returning and delivering back an answer however back in the main program where i call up aiman with certain arguments and i call up the aan function as the arguments be print i don't worry about the implementation details of aaman i just call it up at the end of a big print f statement as i recall i say declaratively give me aiman do it for me i've forgotten the details of how i did it and if you know this the whole idea of writing your own library full of functions for a particular job is that you can then work more abstractly and at a higher level you can say i wrote those 20 years i've forgotten how i did them but it doesn't matter do me acan with parameters thing and thing like that so you see the one can merge into the other as you take a more functional approach you could argue loosely that every time you use a library of functions that you've bought in from somewhere then you are becoming more declarative in the way that you use it so the point about declarative is you don't have to go into the nuts and bolts details you just ask for what you want and magically it happens typical examples of real declarative languages are things like hasle what are the tradeoffs about this well you could probably say that most of these declarative languages don't work on the bare metal like your c program could do eventually they are interpr red with a layer of software between you and the bare metal now that gives you flexibility because the hasal interpreter can be basically ported to all sorts of architecture somebody's got to do that hard work but then you know that if you take your hcll program along you can just run it you don't have to convert it into a binary it just runs on the interpretive mode so it's tradeoffs and other things been equal it's less true now than it used to be you lose little bit of efficiency in an interpreter whereas you know if you refine a thing right down to a hardcore binary it'll go off like a maserati we hope and some languages as we know have a compromise here java started life as being a portable interpreted system but with a syntax was really pretty much like c but it's notable that now when you've developed under java there's very often an option to say if you want to compile this and make a real executable binder of it yes you can do that but during development you get a lot of flexibility by just being able to do things and try them out instantly that then i hope has given you a bit more insight into what the imperative versus the declarative approach is and that's very relevant to discussions of whether html is or is not a programming language we all know pointed brackets h1 means give me a heading level one now of course i have to show where the stuff that is your heading the textt ends but to me you can say look i'm calling up the function h1 i'm giving it the argument this is my heading to be done in h1 style and end of h1 is really just to say oh by the way there's no other way i can signify where my text string ends it's not semicolon or anything like that conventionally it's end of h1 so to me yes you could think of that as being a function call in a way however some of you really did hit home a bit more accurately i think when you said it can't be a programming language really because it's not touring complete now that is a topic sorry i hate doing cliffhangers you know i do that's a topic that we have mentioned from time to time but it's big enough that we need to do a separate video really on that it's perfectly correct that html could never be thought of as a full-blown programming language it can't do if statements in its raw vanilla form there's no way inside html that you can say give me a megabyte more space to work with is just not part of the language somebody has pointed out i think that html with css does become a very powerful touring complete language but you wouldn't want to use it it's not general purpose that's another thing it really is a question of is it imperative is it declarative this is declarative but is it general purpose no this is really for programming web pages that's the way i think of it and also like i say it's not uring complete but you can certainly argue that anything that takes tags as if they were function calls and interprets them and does them for you is in some restricted sense in my view anyway a programming language if you first two traps which we've got here are for when m gets down to zero and when n gets down to zer in the end it will terminate