gnu parallel dude i've been i've been telling you to use gnu parallel for how long now i swear i i just sit here and i look at this and it just makes me want to die a little bit on the inside how many times do i have to tell you just learn your command line tools okay gnu parallel is out of this world good now here's the deal if you just take a moment if you just take just a small moment and learn to write all your programs like this all your cli tools like this is that your cli tool should operate in one of a couple ways first off you should be able to take your standard in right as input you should also be able to take in just any old file as an input right you get a file path as an input your output should either be the standard out right or you should be able to specify as a command line property a file to go to all right and then lastly all output you want to see but you don't want to interrupt basic program flow you should just put two standard error right this is just like how you should do this the reason why this is so good is when you have a program like parallel let's just say that you need to go and you can make unlimited connections it's not about the connections it's just simply about getting you know the the goodness is in right you just need to be able to do this so what you could do is you could have a process that goes and gets data right you get a bunch of data you get data and then after that you can take that and you can just pipe this in to parallel and just pass in the script you want to run and so that every single row of that data coming back it goes and does that thing and then you can say like hey i want to constrain parallel to only 25 running parallel processes you can like constrain it you can do a bunch of stuff as long as you follow this little thing right here you will never run into problems with running things super fast on your own system and like it's so important just just learn the thing just learn just just just learn the thing and then here's a little last little tip i do you see this little call right here let's pretend this is an asynchronous call it kind of sucks it is what it is and so you have to do it so what i typically do let's just call it gd is i'll do a get data and i'll pipe it into t and then i'll put a little break point in here right out right and then i'll do the next pipe into like parallel and do the next little thing and so that way what i can do is i can have like a little break point so i don't have to refetch the data and if i have several stages in my pipe i'll throw a little t in there so i can get the data at these little various points you know i mean because like at one point i had to fetch like three or four different pieces of data from three or four different databases and there was like hundreds of thousands of lines i had to go through for netflix's gaming stuff and so it's like i just had to like i kept teeing along the way because as i got some of the data i could save that break point and so just in case like my internet died which it does the vpn shits the bed which it does all the time my goodness what's t t literally takes standard in saves it to the file and prints it back out on standard out so it's like a break point right on on your on your piping it's very very good it's very very good there you go right better you know tools honestly just just start here you've got to start here this is like my most valuable lesson for the last couple years is just like focus more on reading standard in and writing to standard out and using standard error more appropriately and then also having this little file escapes the reason why i really like file escapes is that let's just say that you want to write say an integration test or an end-to-end test for your little command line library if you have file and standard in as the same thing and they can both be read the same way you can use the file operator you can use a file as like your test input and so that way you have a golden input you can have a golden output and then you can just compare the two files you can literally run the file you know run your program with this file out to this file compare the results and it makes it super super simple to write stuff and so i just do that all the time like that is my way of trying to write things is always doing that yes i call it the golden shower test it's my favorite kind of test i do actually want to do a front and master's course on writing good tools i think that'd be actually a lot of fun to do and it's kind of like right up my alleyway the golden what it's the golden test pick what did you think i said what what the name is i can't believe this became a youtube video