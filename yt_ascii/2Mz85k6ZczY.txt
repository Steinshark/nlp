today we're going to be learning how we can use the at override type annotation which was introduced in python 3.12 and to get started we need to import it from the typing module so from typing import override and to use it we first need to create a base class and this class is going to be called person which just initializes a person and this person contains an initializer that gives that instance of a person a name then i also gave this person some basic functionality such as the ability to eat and the ability to work and right below our person class i created a subass of our person and this is a programmer so it inherits from person and all we do inside our initializer for the programmer is use the super call to make sure that we initialize the person properly then inside our if name is equal to main block i created a programmer of type programmer who's called james and all we're going to do inside here is call programmer. workor right now if we open up the terminal and we run this we're going to get back that james is working because programmer inherits from person which means we get all the methods that are associated with a person but now what we're going to do next is override the work method so let's go to our programmer class and here we're going to create a method called def work and that's going to take self and it's going to return to us none and inside here we can print the formatted string of self. name is programming so now we have a work method that's associated with programmer and this is a custom implementation that overrides our original work method so let's save this file and then let's run the script and what we're going to get back is that james is still working it did not override the original method and that's because we did something that a lot of programmers or a lot of humans do and this is called human error because we made a very small typo here in the name of our method which means that we're still referring to the original method and i know that in this example it was quite obvious but as your classes get bigger and bigger this might not become that obvious you might not even know that you didn't override the method that you were trying to override and our goal is to override the original method so the reason i explicitly wrote this typo is to show you that there is a way to catch this now with python 3.2 12 we have something called at override and this will tell our type checker whether it's mypi or something else that this method was intended to overwrite another method and right now if you scroll over it you'll see that method work is marked as override but no base method of the same name is present so now type checkers can actually catch when we are not overriding something that we wanted to override and it also makes it much more explicit that this was meant to override r so we can easily fix that by adding the o here because we ended up making a sil typo and the next time that we actually run our script we're going to get that james is programming so it was able to refer to the correct method the one that we actually wanted to overwrite and once again if we were to change this to something such as hello save our file you'll see immediately that we're going to get some syntax highlighting and if you actually run my pi instead of python my pi will be able to catch this method hello is marked as an override but no base method was found with the same name and this was found on line number 20 so that's all that override does it just tells python that that method was made to be overwritten so let's change that back to work and we will get no more complaints from our static type checker but anyway i would love to hear what you think about this new feature in python 3.12 whether you're looking forward to using it whether you think it's even worth using or whether you wish it existed in the past i would love to hear about that in the comments section down below but otherwise as always thanks for watching and i'll see you in the next video