how's it going guys in today's video we're going to be learning how we can add navigation to our flet applications in python so the final result is going to look like this where we have a screen with a navigation bar and a single button that says go to store and at the moment we are in our homepage but as soon as we tap on the goto store button it's going to switch to a store view and our app bar is going to update the title with store and and inside the store the only option we have at the moment is to go back but we can also tap on the back button if we want to go back to our home so now we have a navigation that goes backwards and forwards and this doesn't have to be just backwards and forwards the buttons will link to whatever page you want to go to so that's what we're going to be learning how to build today in flat so as always the very first thing you want to do is open up py cham or whatever your code editor is and get started with a fresh new empty python project and assuming you have flat installed you can go ahead and import flet as ft then we're going to import from flat the view the page the app bar the elevated button and the text so those are the ui elements that we're going to be using in this video then from flat we're also going to import the root change event the view pop prevent the cross access alignment and the main access alignment and feel more than free to arrange your imports however you like this is just how i decided to do it for this lesson but as soon as we have all of our imports we can get started with creating our main entry point that as always takes a page as an argument and it returns none because we are only executing code now all i'm going to edit on this page is the page title and that's going to equal my my store so that our window will have a title and directly under our page. tile we're going to create something called a root change and this function is going to take care of our views and our navigation and it does have one required argument which is an event listener which will actually be a root change event and this whole function will return none and before we do anything we want to make sure that we have no views so to do that we're going to type in page view clear so it will clear all the current views on the page then we can add our views back and the very first view that we want to have is the home view so here we'll type in page. views. append and inside we can add our view which will have a root of slash so this will be our homepage or our index page and this works both offline and on the web so whether you're running this as an application or as a web app it's going to function the same way and the home view is going to have an appar with the title which is a text view that says home and i want the background coler to be set to blue because that's how i remember flutter apps and right now we're getting this red syntax highlighting and that's because this is supposed to be inside the controls so i'm going to create that copy our appar and place it directly inside there then we can add a text view that has the value of home and the size of 30 and an elevated button with the text of go to store and an onclick method that is actually just going to be a lambda with an uncore and we're going to use the page go method and we want to go to the store and the view acts as a column so i also want to center all of this stuff and to do that i'm going to add a comma after the controls and i'm going to set the vertical alignment to main axis alignment. center the horizontal alignment to cross access alignment do center and i also want to give it some spacing which will be set to 26 so this was our home view now let's create the store view so right below the home we can type in hashtag store and if the page. root is equal to/ store then we're going to append this view so what i'm going to do is actually copy all of this and just paste it inside our page route or inside this if check of course there are a lots of modifications that we need to bring to this view such as the root should be set to/ store and the title text should also be a store so we just need to modify this to sound like a store and instead of go to store it's going to say go back with the onclick method leading us to the home so now we have two views that that we can go to using our root change function but there's still one more function i want to create before we actually link all of this together and this functionality will handle the back button because every time we click on back we want to go back a page and if you have three or more pages you want to make sure that you go back one at a time not that you go back to the homepage because that can be very misleading so at the bottom still inside our main entry point we're going to create this function called view pop and that will take a view pop event as an argument and it will return none now inside here we're just going to call page. views. pop and we also need to refer to our top view which will be of type view and that's going to equal page. views at the index of minus one so it's going to get the last one from that list so that will allow us to move backwards because finally we need to to type in page. go and we want to go to the top view. root and that's the functionality we need to go backwards in our stack now all that's left for us to do is to link this functionality together and to do that we're going to type in page on root change and we're going to set that to our root change function then page on view pop and that will be set to the view pop function and finally or first i should add the equals there and finally at the bottom we just need to type in page. go to the page. root because that's where we want to start out we want to start out on our root page and finally all we need to do now is call if name is equal to main and run our application so app and the target is going to equal our main entry point so with all of that done let's tap on that green arrow and run main then i just need to drag it from my other screen and let's test it out let's see what happens when we tap on go to store as you can see it took us to the store and we can also go back by tapping on go back and if we want to tap on the back button we can do so and it will take us back home regardless of where we are in the stack and in this case we only had two views but if we had more it wouldn't go directly home it would go backwards in the stack one by one so yeah now we have an application that allows us to actually navigate from one screen to another which means now it's up to you to add more pages and more functionality to your application because you can finally navigate from one view to another giving your user more opportunities to explore your application but anyways that's actually all i wanted to cover in today's video do let me know in the comment section down below whether you have any questions or suggestions but otherwise with all that being said as always thanks for watching and i'll see you in the next video