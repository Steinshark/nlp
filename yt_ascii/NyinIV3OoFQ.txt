there's a question last year at cppcon we heard about cpp2 last keynote by herbstutter and he has since then continued to work on that what can you say about this not a lot i can say a little bit about it we seem to be going through a phase where people are looking for almost a successor to c plus plus and there are different ways in which people have phrased this and i think that to be honest that many many years ago that inside c plus plus there was a small language trying to get out people have various at different times talked about subsetting but there's this idea that c plus is you know top five most popular languages but it's not easy and each successive standard does not make it easier although there's there's a lot you know the the people in the the folks who participate in the committee often have very different agendas there's certainly a willing desire to try and make things easier for people but the normal thing is that it's trying to make it easier by adding things and actually you make things easier by removing things as well otherwise you just have more to learn and people have become much more fascinated by the idea and perhaps because we live in an era of many languages there are there's an exploding number of languages by the idea of can i have c plus plus that's kind of gives me the power of it but perhaps not all the historical baggage you know sometimes the the gotchas the surprises come about from history and we also have increasing concerns about safety and c plus plus is although in many ways safer than c there are constructs that are as equally available they're unsafe and safe if you are if you are a new developer to this this can be overwhelming the amount of stuff that you need to know and that you need to not do and the things you need to do can be overwhelming so i think a lot of people are looking and say well can i have all of the stuff the low level access the ability to do almost anything that i want but not necessarily with the language as it stands and you know we're seeing cpp things like cpp2 carbon and there are other things going on as well as in a different track the rise of rust as being native languages with a focus on efficiency but also saying maybe we don't need all of the other things that came with see i would see that have come with c plus because at this point in time c plus plus is heading towards is heading towards its 50th birthday i mean it's strictly speaking it's heading towards its 45th birthday will come first i think that's next year i think brianna said it's 1970 78 79 is when he created the progenitor of what became that so but we're not far off half a century and a language picks up a lot of stuff in that time and i think sometimes people think well could we have something else and this notion that c plus is being in certain environments is being deprecated because of safety concerns we see the we see studies from microsoft and google talking about memory related errors and these questions of security issues they come from things like buffer overruns attacks that come from those just simply can we make things a little bit simpler whilst embracing what we've learned so i can't give you anything specific on herb's design i've only looked at it very briefly i certainly haven't watched the the keynote but it is one of a number of things that it's kind of i'm i'm aware of that i think are moving in interesting directions and do seem to be influencing some of the things that people are talking about on the committee