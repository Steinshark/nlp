having first of all been to bletchley park i hope most of you have seen that episode which is out there already we also recorded some stuff about how the listening services the y stations got on to this new type of traffic which eventually needed colossus to help the decoding off this was this what later became called the lorentz cypher traffic we covered that it was an exclusive all kind of cypher and that lots of it was picked up at listening stations and sent back to bletchley park they knew that this kind of cipher was very vulnerable to attack if any of the german operators ever disobeyed orders and sent out more than one message using exactly the same key settings on this lorenz cipher machine and preferably it would be good if the naughty german operator sent out two long messages were the same key because then a very special technique could be used to try and disentangle what these messages were without even needing to know the key at all now that's an amazing property of exclusive all you could perhaps even say it was a weakness or a flaw but in wanting to explain to you exactly how this worked i thought we'd better do it first of all with a simple example if i take the letter a and don't forget we're using five whole teleprinter code as discussed in our video on five l paper to let us take the letter a and add to it the letter q a is 1 1 0 0 0 q is 1 1 1 0 1 and remember the plus inside a circle means do a bitwise exclusive all so what we'll get is the following that one exclusive order that one exclusive all says if it's the same thing you're combining then the answer is 0 if they're different it's a 1 so what this comes out to be then one with one another 0 zero with a 1 that's 1 0 1 so in fact what actually happened and at this stage you have to look back in your handi teleprinter code sheet which will be putting out a link to this what on earth is zero zero 101 and the answer is yes that's right it's h that then if you like that's one of your plain text characters this could be a key character supplied by the lorenz machine it's been randomly generated somehow it goes without saying that people at bletchley park doing this stuff didn't even need to deliberately commit this stuff to memory they just knew it after hours and hours and hours they just knew that t combined with z gave yui what's happening then here if you take successive plaintext letters successive randomly generated you hope key letters is that you're ending up with a sequence of plaintext letters i'll call this the plain text stream this of course is the key stream in the case of the lorentz cipher machine it's pseudo randomly generated it was not mathematically totally random of course there would be a repeat cycle but good enough to be called pseudo-random out here of course you end up with a shaft extreme one thing that perhaps i should remind you of if you're not aware of it already is the sort of self reciprocal nature of an exclusive or system and exclusive or cipher we've generated a cipher text character called e by adding together under exclusive all conditions a character t with a character zed you might say well what would happen if i were to add the key character z to that once again okay so you've got the subjects character but deliberately again you rekey it with the same character zed you will end up back with 0 0 0 0 1 which of course is t so in other words this thing almost cycles round you can add t exclusive all is zed give you an e he exclusive order where zed would give you bhakti and so on what we can now say is let's try and find the weakness in this cipher because it's been known about ever since victorian times since the late 19th century you start off saying the following i'm just going to call the plaintext stream of characters p it's not the character b it's not in single quotes it's just the plain text string abc t whatever that gets exclusive ord with the key stream which i'm going to call k and we get c fine the cipher text string now special cases within those streams that you have to bear in mind when you come to look at the detail for any particular plant extreme key stream shaft extreme one or two very special cases are so important and here's one of them if you take any plain text character i'll take a it could be anything and your exclusive or it with itself anything exclusive order itself if it matches gives zero a with a or b with b or said with said will always give you five beautiful zeros that nowadays is called a null character many of you will know even ascii has got a null character what happens to your terminal if you send it to null character well mine just ignores it i think that's the way most journals are set up these days but ya know characters were there in teleprinter streams as well bletchley park certainly did not want a null character that was generated to be ignored and so they invented their own notation which you have to remember which says the null character is always signaled by a forward slash what's the other special case then the other special case is if you ever get to a situation of combining shall we say the letter a with the slash character than now if you think about it exclusive or wearing any of those zeros with whatever pattern a is it's like adding 0 in other words it leaves the a totally unchanged so a added on to the null character is a k added on to the null character is k and thing added on to the null character remains itself so i put a box around these and let's just bear those in mind for later on where's the problem come then ok let's first of all take this equation number file stuff this hope we're not allergic to equations what i can do look is this treated just like a mathematical equation b plus k on the left i'm now going to add on another k to that and that doesn't matter it won't change anything so long as i also add on k to the right basically like you teach you to say add x to both sides and or whatever so fine but look what we've just found any individual character exclusive o'red with itself gives a know anytime you combine a null with any character it gives any character back again in the more general case therefore k plus k adding together identical cipher key letters will give you a stream of nulls those stream of nulls when added to the plaintext just gives you about the plaintext it doesn't alter anything in the plaintext so it's almost like exclusive always like a - sometimes it's like k minus k it's a zero it cancels out yeah exclusive or is weird like that it's like addition without cary it's like subtraction without borrowing its symmetric so fine the k plus k cancels out so in other words what we can say is if you add the key back to the cipher text you get the plaintext we did an example of that so far what could be wrong with this haha here's the problem suppose shawn sends me the first plaintext message p1 so instead of p is c plus k i'm going to write p1 gives me ciphertext 1 plus k and if there was a second plaintext then that when added on to k gives the second ciphertext so i'm just rearranging the equation like that p1 p2 suffix 1 suffix to okay on that side now do yet another exclusive or addition between left hand sides and right hand sides and what you get is p1 plus p2 exclusive or plus equals c1 exclusive or with c2 exclusive or with k exclusive water with k now as we've just discovered that cancels out k plus k you can ignore it so the net result of all of this is as follows if you send two separate messages using exactly the same key the key cancels out and what you end up with is something where if you were to take the ciphertext that you've received and intercepted don't worry about the key as long as you know it's the same key somehow or other just exclusive or two pieces of ciphertext together we'll do that let's call it d so c 1 exclusive or c 2 is d and that must be exactly the same as the two plain texts exclusive ord with each other so essentially then it's like a mashup it's like an exclusive or mash-up of two cipher texts gives you exactly the same mashed-up characters as you would have got by mashing up the two plaintext together with exclusive or therefore it follows if p1 plus p2 is the same as this d i've invented then by shuffling around and adding p 2 to both sides what i'm saying is if i can guess a piece of plain text called p2 and i push it through exclusive or with this d thing which i'll do for in a minute i'll get a piece of p1 back so if i get some plausible plain text from message number 2 and if it gives me plausible plain text for message number 1 then i'm winning because well then it might be slightly different a piece of good sense in one of them might give you something you recognize in the other well there's nothing like a real-life example to make this come alive and make you believe it really does work sure sent me a 21 character email message with a challenge to break this top-secret cipher but i knew he'd done it like this and i experienced just like in the water i'm incident sort of phone him up and sent shawn my reception apparatus and my program wasn't working properly that ciphertext user sent me didn't seem to work at all something's gone wrong can you send it to me again and once again you hope like in the war that shawn does not send exactly the same message again but since it's slightly different one because that makes things much much simpler as well see later so if we concentrate now on this top block of stuff here here's ciphertext one just as in good old wartime morse code tradition i'm breaking this string of characters up into blocks of five that was traditional because of course he makes it so much easier to read things if it's broken up in this way so these are spaces that you see between every five they're not really there they just to help you read if you ever do get a genuine word space character and that does exist in the five whole code then bletchley park had their teletypes all wired up to display a nine and that nine men a word space here's the first ciphertext w plus x a a blah blah blah 21 characters of it and then i say to sean oh whoa i didn't get it send it to game wmj og d wo and so on what i can tell from that straightaway is that since both cypher text starting with a w and since they use the same key then i don't at the moment know what the plaintext letter was that started them but i know it was the same in both cases now as shown of course look w exclusive order w thing with itself gives the /a null character so what i've done here between c1 and c2 is what i've just been through on the theory exclusive all of them and get this magical thing called d mashup that's what i always call it of the two ciphertex now successively on either side of the mashed up ciphertexts write down what you think is a plausible piece of plain text and push that back with exclusive all through the d string and see if anything sensible comes out for the other plain text now when to start here on the second block down on p to plain text - i'm assuming that sean was really fed up with plain text - and he had to retransmit it and all of his politeness will have left him he will have started the second email message with either a grunt or maybe just a brief hi that's my guess anyway so i'm guessing that in plain text - he might have said hi space dave or something like that so here you see the nine for the word space hi9 da v push all of that line upwards through the corresponding character combining them with exclusive or what comes out and the answer is hello oh i like that now see this is where the cryptographers you know heartbreak and joy if you get it right it's wonderful but if you make the wrong guess you've got to back off and try something different very frustrating strangely in this example i seem to be making all the right guesses so high nine daffy comes back and be hello nine in other words hello fall no space ah so in the first one he probably called me dave as well maybe not sure but we can at least take the dav here and promote it to the top line and next time around we say if p1 is hello 9 daffy push that through the exclusive-or and the answer is then pizza will be hi9 hi dave 9 another space this is looking good sir we was being all informal is then hi dave in text oh honey looks like the start of another world here yes but we don't know anything about that yet right now you have well in 1940 several cigarettes many more cups of coffee now where do we go from here could it be the case that sean is using formal language in plain text one hello david how about so we do that hey look at this the bottom then comes out to be hi dave see swe could it be see you soon see you later who knows but what we can do is if we believe that c is right and is a great word we promote that up to the top line and make it be hello david see but through an exclusive all comes down on the lower line on the second plain text ben hi dave see you weigh bingo you he did he said hi dave see you now there's a well-known english phrase see you later so we try of course late down here propagate that back up to exclusive-or and you get the word you separated with spaces this is a fabulous method of course it will only work for as long as the shorter message doesn't run out i can only guess that at the top message which is a bit longer it starts with our so almost certainly about one would have said later as well but we've triumphed and where the real triumph comes is for these 21 characters you can now go back to one of the equations i wrote down for you and say we've got cipher text - we've worked out plain text to plain text 2 plus cipher text 2 will give you the key and here it is was it generated by machine no i made it up but there it is and that's the moment of what you said oh that's fantastic we can start to work out now exactly what that wretched machine might be doing that's generating the pseudo-random key you start trying to run two tapes simultaneously through a piece of bespoke electronics which they invented which will do the merging but you must keep them in exact sync you do not want differential stretching between the two things