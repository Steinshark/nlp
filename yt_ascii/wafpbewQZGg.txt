i am bjarne stroustrup. i am the 
 designer and original implementer of c++. hey everyone, james murphy here. this is a joint interview that 
 i did with tom from context free. we're interviewing 
 bjarne stroustrup, the creator of c++. i can tell that bjarne deeply cares 
 about the language and the people who use it. so please enjoy his perspective. once you finish this video, don't forget 
 to check out tom's channel, context free, where you can find 
 the other half of the interview. even back in, let's say, 2014, you were already talking about 
 things like concepts, modules, and ranges, which are only now being 
 implemented in c++ 20 and c++ 23. so, my question is, for today, what are those things that 
 you're thinking about for c++ 32? okay, 32 is probably a bit far in the future for me. but let me just point out one thing. i have to start talking to convince 
 people that certain things are important. even today, there are lots of 
 people that don't quite see the step that concepts give to the user templates. and similarly today, i'm having a lot 
 of trouble getting people to understand that coroutines really are not just cool, they are also important. and one of the things that i hope for c++ 23 is to get better standard library support 
 for coroutines to make it easier to use them. currently, they're sort of an expert-level entity. and that's not what they're meant to do. it's very easy to write code with coroutines. for things where you really need a 
 stream of data generated or pipelined, it's much easier to write coroutine code than it is to write it with you 
 managing the state and saving it, restoring it. again, it's a simplification. apart from that, it runs faster. but people have to learn 
 that, and they're not going to learn it until they get the support 
 from the library that they deserve. okay, then i end up talking about 
 things for many years before it happens. i can tell about what i'm thinking about now. but this is by definition half-baked. please remember that. of course. i would very much like to see static reflection. reflection is, a dynamic reflection is, basically your code works and a graph structure that does something. and you lose essentially all type checking. you lose the ability to understand the code because it makes it running the interpreter in the background. and it stops what you are doing more or less. and what you are doing is not strongly typed. so, i would like to get the effect 
 of that without the runtime aspect. moving that kind of 
 runtime stuff to compile-time. so basically what i want to say  i have a program here generate for me a json reader and writer for these three types. there's been work going on about that. it seems to have stopped a bit just now. we have to remember 
 there's a pandemic going on. it's hard to meet and hard to talk about the design of major features to support new ways of thinking and new ways of writing code. you need face-to-face discussions, in my opinion. definitely i'm still dreaming of building these distributed systems.   that's probably what you meant by c++ 36. that's probably where we're going with that. maybe i can build the system i 
 was trying to build back in '79 in a decade. let me just add one thing.   modules are one of 
 the major features of c++20. and the standard library has not been modularized. this must happen so that it becomes easier to use. i mean, i have run things that compile seven, ten, fifty times faster using modules. and again, you need 
 some support in the build systems and some standards for 
 it to get the benefits from that. and the other thing that we are 
 going to see in the relatively near future, maybe not in c++23 but maybe in c++26, is a general model of concurrency, which again will build up towards the 
 aim of dealing with more distributed things. now, of course, c++ is a very 
 complicated language right now. you can do a lot of different paradigms, which is why i find the c++ 
 core guidelines very fascinating. i find that it simplifies and 
 focuses a view of the language. i'm curious how the community views 
 that as a whole and also, what's the state of automated verification of 
 compliance to the c++ core guidelines? the core guidelines came along because i realized that 
 you cannot simplify the language. if you make a small, incompatible change, you can annoy a couple 
 of hundred thousand people. so why don't we make a set of 
 rules for what we think modern c++ is?   what about for people 
 that are maybe more novice, they are just getting into c++ or maybe don't know c++ 
 at all but are thinking of learning it, how would you recommend for those 
 people looking to get into c++ get started? the way i think about it 
 is there are at least two such groups. there's a large group of 
 people who have programmed for a while, sometimes in c, sometimes in c++, 
 sometimes in other languages, that wants to know the fundamentals of c++. you can't put them through a standard textbook because it's boring, and they don't really 
 need a chapter to be told how to write a for-loop. this is my answer to that question towards c++. i realized that you have to have 
 something that you can read over a weekend and tell you what is in c++. people come in, and they don't 
 know that there are templates, for instance. or they come in and they 
 say, "oh, you have concurrency support". or "there's a library for regular expressions. 
 i've never heard of that stuff." this is what this one is for. over the weekend, on a transcontinental flight. 
 that's the kind of book. now, i also got a job some years 
 ago as a professor to teach freshmen. and that's a different group. at the time, they either, half 
 didn't know anything about programming. and the other half weren't particularly good at it. even though they thought that some 
 of them thought they were absolute geniuses. these are sort of natural freshmen, right? these days, more people have programmed before. but they have no clue why they're doing it. or what they're doing. they just want to build 
 a game or something like that. what's the quickest way of throwing things together. so, i had to make a course. and then i decided i had to write a textbook. so, i've run many thousands of students through it. that's how i'm reasonably confident that it works. and other professors have not done the same. so i'm reasonably confident it's not just me. and by the way, i did not put my books 
 on the side because i was being interviewed. they're sitting on the side of my desk because i keep getting questions 
 about things where the answers are in the book. this is this thing here. and you don't do that over a weekend. this is meant for a student to 
 be able to do in about three months, taking a four-course thing. there is a third group that i care a lot about and 
 think a lot about, and i don't have a good solution for them. those are the experts in 
 other fields who happen to use c++. that is, a biologist who wants to 
 be a biologist, doesn't want to be a c++ expert. sometimes they use some scripting language like python, javascript, or matlab. and then they notice that it's 
 running 50 times slower than it should. and they would like to get on board and 
 do a little bit of tuning to get it to run somewhat faster. i don't have a really 
 good answer for how you help those. because the biologist thinks 
 differently from the physicist and so on. but if somebody has an 
 idea, they should run with it. you talked about the committee. what is the process like 
 of being on a committee meeting? what do you guys do? what 
 do you talk about? how does it work? the first thing to understand is 
 that the standards committee is enormous. it is unbelievably large. the last meeting in prague when we 
 voted out c++20, there were 250 people there. there are more people 
 because not everybody turns up. so, my guess is about 350 members. how on earth do you have a rational process 
 with that many people without a management? the way you run a company with 350 
 employees is that you have rewards and penalties. these are two things we don't 
 have and can't have in the standards committee. these are volunteers, these are enthusiasts. they are there to do good. and not everybody's idea of good is the same. so, we have meetings in between the meetings. and there's a lot of email discussions. there's a lot of papers being written. these are the ones we discuss. and then it goes through a process before we vote. the way the process works 
 is we split up into many groups. the two evolution groups are 
 discussing what should go into the language. and when they have decided 
 and voted it should go in, they pass it over to groups that try 
 to integrate the text with the standard text. we have the standards committee 
 meeting is where the technical people vote. and agree to something. it is then given to the iso, 
 which has the nations vote on it. as this happens, the implementers 
 work so we get better feedback. by that time, the final vote 
 comes, the first compilers start coming out. when it comes to these kinds 
 of interviews or ask me anything, is there any question you wish 
 people would ask you but they haven't asked? you know, that's a standard 
 question that a lot of people ask me. i usually, for these very technical interviews, try to drift a little bit into some social issues. a lot of people are in a desperate hurry. they want to get their current 
 job or their current ideas done immediately. and i'm saying, wait a minute, this is life. it's not a sprint; it's a long-distance run. make sure you don't burn out. make sure you do other things 
 than programming and system building. sometimes take care of the family. go see something. and also spend some time learning new stuff, foundational stuff instead 
 of getting more and more specialized. a lot of weaknesses i find 
 in the students are in communication. a lot of the best programmers are classical geeks. but it doesn't matter how smart you are 
 if you can't communicate your ideas to others. then you could just as 
 well do sudoku or something. you have to get the ideas across somehow. and that involves communication. it means writing; it means speaking. i mean, there are people 
 that are too busy to write tutorials, too busy to write comments, too busy to do anything but getting the code. and then they expect us to pick 
 up the code and understand what it's for. and why we should use it. no, you have to explain; you have 
 to be careful; you have to help your users. i was just reading something. who said it? but basically, education is about 
 what and why, and training is about how. i'm mostly interested in education. though, of course, i can't 
 avoid telling people how sometimes. why did you choose not to use simula  
directly when you started c++ and so on? i was a young researcher just 
 arrived at bell labs. and i realized by looking at what people...