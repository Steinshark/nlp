hi and welcome to this week's meetings plus block roll highlight this week is full of highlights it's a lot of things that you can read through as you see there is like from from my own if you're looking for drops there's a lot of drops posted but also the cute block has a lot of things about cute and then there's sprinkled a lot of other great highlights from all of these highlights i've chosen this post from the llvm block which is about text formatting in c plus using lip c plus plus [music] and so this blog post goes a bit into detail it gives not too much but it gives you a good overview on what cfas right now in the standard supports with sda format what is in the newer version of hello vm which has been released a few days before in september our vms slash trying 15. and it also goes into the plans how and what they will improve for the next version that will be in 16. they also quickly mentioned that our c plus 23 there will be a steady print which will improve formatting support even more but that is currently of course not implemented for then that's they're on the way to them but you'll have to read the articles so it's another full story and i i like that they are posting this because the yellow vm block has not posted a lot of those things for four c plus it's often been very much about llvm and i like that they actually you know talk a bit about the ongoing work what they started to do updates and then i hope they continue that that's really nice and a good blog post good structure it good code examples there is also the format library of course which this is based on which i know correct they want to mention the format library in the standard is there since c plus 20 and it's being implemented right now across the three main compilers the three implementations which most of us you know run codon in one way or another and you see there's just a small this is not the full library that's the full library has way more support for other things such as the four main functions which are listed on cpu reference they are also for the actual library which has been standardized as a page called fmt.f format f which gives you a good overview of what this library can do the standardization of such a library always brings the standard the standard can only contain a subset of the library but the standard has then the advantage that the standard is able to use the standard to the free extent while the library might use internal types and you know you know you don't want to be more familiar with format it's also on github of course so you can look through that and this whole situation was you know we standardized format but that's also available as a standalone library for a long time now thanks to the work of vector serovic what do you pick right and that's your choice i know that the format library supports many things which are not so well right now in the standard because they could only you know limited features that standardize and i know that for example my keynote speaker daniela engad has used format and she has been involved with format prior to that but she has worked on a module version for format to as open source and to see how this you know interacts in place with various implementations very important great book which i think already mentioned in one of those feature videos here so you probably want to see if you are able to import the full library in your code base so that's possible maybe you are in a setting where it would be easier to get the standard version than the standard version probably is a preferable one to you but otherwise the updated a newer library which is not only a subset of the standard might have features which are good for you or which you need which you want so that's basically me saying do your research on this i personally currently will probably take the library and not the standard version for the simple reason that there's still a lot of implementation and defects going on with this and the library itself probably is more for cross-platform work right now suited than the standard version register standardized but it's in the implementation phase and if you if you can use the library that probably has a good route to think about but that's your decision you know the standard version of format is also very good and the article goes through you know the pros and cons what is incline implemented i don't know what is in like in gcc or in the implemented for that actually currently so do your research on that and also depending on your code base what you use right i do also want to mention that there is a second post on text formatting with format so you can read two articles on this and this is an article which goes into a bit of opinion and a bit of examples how to use std format and it's by the author of format victor salvage it's hosted on the blog from krayesky and also he's a speaker by the way can cannot measurement right so it's a nice article to read through and this makes us two nice articles on format which i want to highlight this week i do also want to mention as i mentioned there's a lot of posts this herbstarter has posted that he implemented this void and how he did that conan io has a post on getting up to speed with the latest conan features so if you use code and i want to use the colon that is a good read posted a lot of jobs because next week will drop terrace so there's still like an option for you to book that that's interesting to your employer then if announced the tooth fair and a book and tool fair was bianna strausstruck and klaus eagle currently signed up i sent the authors of other books and linked to sign up for this so we probably have a few more authors at the fair and i've released the first version of the schedule for the meeting c plus plus conference this week so if you want to come to the library to the conference that'd be a good look for you and then of course the two block q64 is released there's a good article on getting started for cute with android in today's time frame q64 is bringing the webassembly port of cute to cute and so there are various articles on this on the tube block and one of them is for embedded system makers in this week so you might if that's interesting to you right and then there's a lot of other things for package managers there's actually also a blog post on the usual team block but i last but not least want to highlight the post by victoria romeo the set state of debug performance and c plus victoria romeo also works as a game deaf and there always has been some conflict with game devs and modern supers plus and standard c plus plus because the debug performance of this code this is not always where it should be and this is a problem if you kind of you know need to debug your game and play your game and the debugger and that's not fast enough that becomes really a problem and as those two communities reduce c plus plus and i'm not so well connected i think this is really important that victoria speaks up here that this is something we should look more at and see that you know what can be improved with that i think the debug implementations the debugging tools have caught up with us a bit but it is true that this deeper space language was you know having those modern superstars features lots of those features are depending on optimizations and if those optimizations are not turned on because you want to debug it's not as fast as it should be and so that is a very good read and thanks for bringing this up which you know there's a lot of other things which i didn't mention you you probably want to look at this closer thank you for your attention links are in the description and see you next week