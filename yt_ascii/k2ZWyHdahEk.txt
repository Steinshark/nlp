hello and welcome everyone! hope you're having a great day. and welcome to mcoding, where we try to get just a little bit 
better at programming every episode. let's just jump into it today 
and start off with a question for you.   suppose you're given two or more dictionaries 
containing corresponding data. by corresponding data, i mean they
 share the same set of keys. in this case, the keys are some channel
 ids for some of my favorite youtube channels. and the values are names and 
subscriber counts of those channels. take a moment and let me know 
in the comments below how you would iterate over these 
corresponding dictionaries. while you're doing that, 
let me motivate this example a little bit. because the first question you 
might have might be: why do we have the names and 
sub_counts stored in separate dictionaries? you might be expecting 
something more structured like this. in this example, we've defined a class that 
stores the id, name, and sub_count of a channel. and then we have this structured data 
of channeldata stored in a list.   if you got this data from 
a web api, this is what you might be 
expecting to get back. an aggregate of structured data types that each 
contain many different types of data. you can then have a dictionary 
of ids to the channels they correspond to.   and then the preferred way to loop 
is to loop over the items of that dictionary.   this is certainly a common case. 
but it's not the only case. for instance, if the names came 
from one api like the youtube data api but the subscriber counts came from a
 different api like the analytics api, then you could very well end 
up with two separate data structures that have the same keys. and that's how we end up with 
the situation from before. whether you got these pieces of 
data from separate sources and your goal is to combine them or whether it just makes more sense 
in the context of your program to keep them separate and you just 
want to loop over both of them, the question remains: how should you 
loop over the corresponding data? here's one way to do it. 
it works but it's not the best way. loop over the channel ids (cid)
from the names. then use the channel id (cid) to pull 
out the name and sub_count. but the first thing i want to note is 
this is actually an anti-pattern of for-loops. whenever you loop over the 
keys of a dictionary and then the first thing you do is 
get out the value corresponding to that key, you should instead prefer to 
 loop over the items of that dictionary. this is going to be slightly more efficient because when you loop over items, 
you don't have to compute the hash of the keys. this method is also fine
 and it works. but it's still not quite what 
i would like. the names and sub_counts are supposed to 
 have corresponding data. but if there was a missing subscriber
 count, i would get a key error. whereas, if there was a missing name, i would 
silently just loop over less data. this kind of asymmetry 
can cause very subtle bugs. additionally, the code just looks 
 a little bit asymmetric. and that can cause it to be a little bit
 harder for people to read. here i'm looping over names, 
why not loop over sub_counts instead? even though they share kind of equal 
purpose in this iteration, i had to pick one of them 
 to go first. so while it works, this is still not 
quite what i'm looking for. to get a better feel for what 
i am looking for let's take inspiration from
 a very similar example. suppose that instead of dictionaries,
 these data were stored in corresponding lists. in that case, the simple and straightforward way 
to do it is to use the built-in `zip` function. as of python 3.10, you could even use the `strict` flag 
to ensure that all the lists have the same length. i think, this is a very clear and 
great way to do it for lists. so, how do we zip dictionaries? we can't just use `zip` itself because
 `zip` is going to loop over the keys of dictionaries. we could try to zip corresponding items. but there are a lot of problems 
with this approach. we end up repeating the id field. we now need extra parentheses. and we're actually depending on 
the fact that the keys were inserted into 
the dictionaries in the same order. as of python 3.7, dictionary iteration 
order is guaranteed to be insertion order. but since these dictionaries came from
 potentially separate sources, we can't really assume that the keys
 were inserted in the same order even if we know that they have 
the same keys. what i really want is to be able 
 to write something like this. i want a dictionary version of `zip` (dict_zip), and when i loop over it, i get out the key and then value, value, 
value for each of the corresponding dictionaries. to me this api is simple
 and straightforward, just like `zip`. the only problem is there 
 is no `dict_zip`. it's not a built-in like `zip` and it's not
 part of the itertools library either. but we're all programmers here. 
if we want it, we can write it ourselves. so let's write it.
take in the dictionaries. we're going to make this 
 function a generator. so let's just throw in a yield 
 so that we have that mindset. if we weren't passing any dictionaries, 
 then we just stop. i personally like the strictness to be built in. 
 so, let's do a length check. then we go ahead and loop over corresponding 
 keys in the most efficient way that we can. that means using the items method 
 of the zeroth dictionary. and then just grabbing out the rest of the values from 
 the other dictionaries in a comprehension. here i'm using a generator 
 comprehension to get all the values. then the star is used to unpack all the
 values so that the result is a tuple. so all in all, we have a tuple of the key, 
first value, and then the rest of the values. and that's all there is to it! now we can loop over corresponding dictionaries 
 in a straightforward way. and all the asymmetry that we had before 
 is hidden inside the implementation. there are a few other things that i want 
 to say about this implementation though. first off, this is a prime example of something 
 that really should be implemented in c. in python, we're forced to use brackets 
 in order to get the corresponding values for the keys. every time we do this, this involves 
 computing the hash of the key. but the hash of the key is the same 
for every dictionary, so why recompute it? this is from the cpython source code. it's in the file dictobject.c, which defines 
the implementation of a dictionary. in particular, in c, we can use this 
 `getitem_knownhash` function. this function is special built for getting 
 a key out of a dictionary when you already know the hash. so our `dictionary_zip` is a perfect 
 example of a place where we could save a lot of computation time 
 by removing the need to recompute a hash function. this is something i could say more about in 
 a future video if you're interested. but i claim that if we did this 
 using the c api, we could get away with not computing
 the hash function at all for any key. there's also one other hidden usability 
issue in this implementation: look what happens if i try to use autocomplete 
 on one of these entries (say, the channel id). i get nothing useful! not everyone depends on autocomplete,. but having it there is a huge 
 win for most developers. and the way we wrote our implementation 
 is not amenable to autocomplete. of course, if this was part of 
 the standard library, we wouldn't have to worry about this. 
 it would be taken care of. but a little tip when you try to implement 
 these things in one of your own code bases: you can help autocomplete work 
 better by using type hints. unfortunately, if you think about 
 what the signature of this function should be, python's type hinting system 
 does not yet support it. there's an early draft of a pep 
 to fix this in 3.12 or 3.13. but for now here's a quick fix. the quick fix in this case is to provide 
 typing overloads for the most common use cases. i'd say that zipping one, two or three
 dictionaries together are the most common cases. so make all the type variables 
 you need. and then just provide overloads 
 for each of those cases. we actually don't even use dictionaries; 
 any mapping will do. so here's an overload that takes 
 in two mappings. they share the same key type. 
 but they can have different value types. then i'll return an iterator of tuples 
 of the common key, value 1 and value 2. let's go back down to our example 
 and see how the autocomplete works now. here we are again 
 and let's see what it does. perfect! this time i'm getting string 
autocomplete suggestions for the string key. and for the sub_count which is an 
 integer we're getting `int` suggestions. finally, don't be afraid to go wild and to 
 find ways of iterating that work for your code base. maybe you just want to loop 
 over common elements of a dictionary like a sql inner join. or maybe you want to loop over a union
 of keys like an outer join and provide a fillvalue. in the right circumstances, providing these functions 
 can actually vastly improve the readability of your code. and that's what i recommend you do. think 
 about the ways that you iterate. is there anything that you do often by
 hand that you could just make a function for? if so, do it! anyway, thanks for watching! 
 that's all i've got. thank you to my patrons and donors.
 and i'll see you in the next one! as always, don't forget to slap that like 
 button an odd number of times.