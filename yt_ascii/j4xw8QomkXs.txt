hey guys welcome back to another low level learning tutorial today we're going to be doing the blink led tutorial right where you make an led turn on and off forever but we're going to be doing it in c without the arduino ide on bare metal the reason we're doing this is because i felt like when i first learned how to do arduino programming i was using this ide it felt very high level and there were all these functions that i didn't really understand what they were doing right like i had this pin mode function this digital write function in this delay function but i didn't feel like i had learned anything i felt like i was you know writing python for arduino where the the actual functionality was taken away from me so i felt like did i really learn anything so to do this tutorial right we first need to understand the hardware that exists on the arduino uno so basically the arduino uno is a shield that wraps around this microcontroller and the microcontroller is called the atmega atmega328p and it is basically a simple microcontroller that has basic in and out functionality and we want to figure out how do we write output how do we set the bit high on the pin that controls the led well if you look at the schematic here we see that the led built in is set to pb5 right what does pb5 mean typically when you're dealing with microcontrollers all of the data in and out is done on these things called ports right so you have for here for example port d port b port c the ports are registers on the microcontroller that correlate to a set of in this case eight eight and seven pins so for example port d0 correlates to let's see if we can find it port d0 is pin two on the chip so if you set port d0 high 2 would be hot it would be 5 volts and we can use that on port b5 right where the led lives to make the led turn on great so the question then is how do we write data to port b5 well it's actually not that complicated so port b is actually a register in the arduino the register is eight bits on this architecture and each bit correlates to one pin so if we want to set port b5 to be high first we have to make sure that port b5 is an output how do you make the pin and output you need to use this thing called the data direction register the ddr and the ddr in this case is for port b so if we set ddb for port 5 to 1 that means that the microcontroller is to treat port b5 as an output right so then we want to make port b5 hot so we write one bit to port b5 great so the end of this we want these two bits to be high and we want the rest of the bits to be low great so how do we set a single bit in a register this will assume that you know a little bit of bitwise math but we're going to do this thing where to set bit n of something we say that the register is equal to the register so the current value or one shifted left by the bit number so for example if we want to set port b5 we're going to say that port b is equal to port b or one shifted left by five because one two three four five gets us to this position and same for ddrb right and then to unset it we do a little bit of complicated bitwise math where we say that the register is equal to the register the register ended with the ones complement so the inverse of the same math right so we're making sure that when we unset something all of these bits are left alone and the bit in question is turned off if you don't get the bitwise math that's okay just understand that we're going to be using this notation to turn something on in this notation to turn something off great so let's let's get into programming here so just to prove that you know i don't already have this figured out here's my arduino the l over here the led is off great so we are going to write some code before you start this make sure you install these libraries or these packages so avrlibc avr dude bin utils avr and gcc avr avr is just like the the architecture name for the atmega 328p go ahead and install those i already have them so you won't have to and then i also wrote this makefile that you should copy down and basically it'll i'll walk through what it actually does after we write our code but this is the process of compiling our code copying the code into a flashable format and then flashing the code to the device and then i do have the arduino plugged into my computer and it shows up as dev t2y acm acm0 if you're on a computer like a mac or you're using this in windows this process may be a little different for you but for me this is where the usb port is plugged into my computer that touches the arduino alright so like i said before to do this we have to do this in two steps we have to first set the pb5 where the led lives as an output how do we do that we need to make sure that the direction register for that pin is set to one to make it an output so how do we set ddb5 on ddrb so the way we do that is we set ddrb equal to its current value ored with one left shifted by dd b5 this may seem a bit complicated but basically all we're doing is we're saying that ddrb the direction register for port b is equal to itself or width so we're setting a single bit one left shifted by the bit number for ddb5 you can actually read into the header files for the particular board that you're writing to but basically this one line will set port b5 equal to an output so now we need to say while serving forever do the following thing we want to set port b5 so how do we set the bit on port b5 we do what we did up there but with port b instead so port b is equal to port b ored with one left shifted by port b five that turns on port b then we need to wait a little bit i'm messing up these comments here hold on there we go now we need to wait right and there's actually a cool macro that comes from the util delay.h library it's called delay ms and this is actually pretty interesting the way that this library works is that you give it a number and it calculates based on the clock cycle or the clock speed of the microprocessor how many no operations need to happen to equate to that much real-life time i thought that was pretty neat so basically this is just a loop that loops over a no-op a do-nothing operation until the amount of time you've requested has elapsed i thought that was pretty neat okay so now that we've waited some amount of time we need to say that port b is equal to port b anded with so we're turning off a bit the ones complement or the inverse of the same value up there right one left shifted by port e5 and then wait some more delay ms 1000 good and then we're going to go through our build process right so i'll walk through what this actually is giving real quick so what we're doing here is we are making sure this is the right size for you guys views we are saying hey avr gcc optimize for speed and define the clock speed of the processor as 16 megahertz which is the clock speed that the arduino uno has if you look at the the crystal on the board it says 16 megahertz define the machine type or the micro controller type as the atmega328p only compile so don't create a an elf yet and output led 0 the elf object from our source code right and my source code is called led.c secondly go through the full linking process and produce led.bin from our object file and then we go through this obj copy so this is kind of interesting the way that avr dude the program that is going to flash our code to the arduino has to take in data is in the intel hex format i did some reading on the intel hex format it's pretty interesting i won't go into it in this video but basically what we're doing here is we are taking the output elf from our compilation process we are removing the eeprom section and we are outputting it as intel hex the format to led.hex and then finally we are asking avr dude which is a program that we use to flash the device to use arduino the arduino programming process on this device the port is the device path right so where my usb lives in linux the the serial baud rate to perform this right and then the source of the data right so we're there's a specific format to this but we're basically writing to flash which is writable memory the file led.hex which is our output from the the compilation process so if we write this i'm gonna get my arduino view ready we're gonna type in make and hit enter and now we should have a program running that is flashing this led once every second so that's it for the tutorial guys thanks for watching really hope you enjoyed if i missed anything if there's something you didn't understand drop a comment and let me know otherwise please hit that like button hit subscribe i'll be going into a deeper tutorial series on doing arduino bare metal programming thanks for your time and i hope you learned something thank you bye