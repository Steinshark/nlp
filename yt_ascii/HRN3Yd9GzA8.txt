um i hope everyone is enjoying being back on site enjoying the conversations on the hallways enjoying the talks i know i do so i'm very excited to be here after three years of two or three years of online presentations so i'm hoping to we're we're truly back to normal and i'm hoping to see most of you at many more conferences soon a few of the you might not really know me i spent almost all my career building tools tools for developers mostly i worked for close to 17 years on advanced installer and i've built clank power tools to help with our workflow and the community at large being an open source project and recently i joined the visual c plus plus team at microsoft again helping build tools make the tools i use every day better this presentation is meant as a as a starter for a conversation and the concept i'm going to introduce are but just a teaser for more in-depth conversations and i'm gonna point to auxiliary resources for folks that want to drill down and learn more both articles and other presentations from conferences and i do plan to do follow-up presentations on on these topics based on the the engagement i see from from this version and i'm gonna do sequels for sure but don't worry no cliff hand openers just a fair warning maybe some of the the ideas here might feel too opinionated and that's all right it's intentional to start up conversation and have people buy into the idea and come forth and start a discussion with me or between yourselves so i'm gonna quickly jump in and try to do the impossible for folks that are not comfortable with some who are not familiar with some of the the functional programming concepts i'm going to try to do a quick quick intro in roughly 10 minutes or so so bear with me in case the the title didn't give it away this would be a presentation on using a functional style not necessarily about functional programming languages so functional programming what is it about well there's a lot of concepts here and some of them you referenced in the talk abstract of course we're not going to have time to go exhaustively through many of them but we are going to identify a lot of these ideas a lot of these programming concepts in the examples we're gonna see and um appreciate the way they they change how we structure and talk about code but first i want to highlight a paradox of programming in that i think this really is somewhat intense and and for many folks i think it's difficult to pinpoint the exact mismatch in intuition and comfort they have towards programming and how we we structure programs and this comes from this impedance mismatch between what we need to tell computers to do and how we structure thoughts as humans and machines are very much into local reasoning whereas humans we we tend to think in bigger terms in terms of perspective and we are goal oriented as humans whereas machines are interested about small increments or small operations that need to progress towards a task and we we are very much about the ideas what the purpose what we're trying to to solve and of course machines only care about the details of the how we want to solve this of course we we have problems reasoning about complex systems because we have limited capacity of what how many bits we can hold in memory at a particular time how many concepts we can juggle around in a particular frame of mind that's why we build diagrams that's why we try to distill the complex so that we have fewer moving parts and yes we are error prone and we need help keeping that in check and humans have developed a very efficient language to to reason about issues and complex problems and that language whether you like it or not it is mathematics and logic and machines don't know anything about that machines care about particular instructions and we've been kind of trained into this mindset i'm guessing out of schools or by just in in imbuing what we see in the community and in mainstream programming languages where we're imbued with trying to think like machines and trying to micromanage operations rather than think in in logical units or mathematical abstractions and we have to always stop and think about the semantics of the operations we're trying to implement the meaning of the the programs think about local bits about denotational semantics how we can abstract a given concept and then very concretely tell the machine how to model that and then how we can lift the the role low level operations results into something that is human interpretable so what is functional programming functional programming is a style of programming in which the basic method of computation is function application to arguments and transformations of data and the functional language is one that supports and encourages a functional style and i'm going to stress that a bit in this presentation my focus is not on convincing folks to switch to using functional programming languages the idea is to identify good patterns that and and things that we can learn from from such theoretical exercises and apply them concretely in in our domain in our programming languages in our frameworks that we design in our apis but we do need to adjust the elephant in the room because i think most folks are i think you think about this right from the start of the presentation and again it's not about learning some functional programming language it's not about finding a mythical c plus successor language or completely transforming the programming language to be something else the idea is to to learn and see what idioms make our apis more fluent more natural to use lesser or prone and what patterns help us build a simpler simpler shorter programs with less moving parts just a small snippet to get the the sentiment across in make your mainstream c like syntax programming language this would be a trivial low level loop to sum up some integers and the the main computation instrument there is variable assignment so mutation is the core idea whereas in in a in a functional style we would think in terms of what we're trying to accomplish what is the the function and we need to always need an abstraction of function that does this transformation so function application would be at the core we're going to see more examples so if i would were to sum up in just two words the the rift here in terms of mental model would be functional is about what what we're trying to accomplish whereas imperative methods imperative styles of programmings are about the details about the how michael feathers had a very nice summary contrasting object-oriented programming and fp object when it makes code understandable by encapsulating moving parts and we all consider this the staple of object-oriented programming encapsulation and that helps us build more more complex abstractions and relationships between objects whereas fp makes code understandable by minimizing the moving parts so i think this is a good goal to minimize the moving parts so that we can reason locally about code easily before we start i always want to highlight the the historical background the importance of of engineers on that worked before us and we stand on the shoulders of their work and when we talk about new ideas i think a lot of innovations that we identify with contemporary programming languages be it c plus plus or c-sharp or swift or rust or whatever we tend to consider them modern features modern additions but i think the majority of them are older ideas that just gain new appreciation just a a few persons i want to highlight here and break breakthroughs if we think about lambda calculus this is all the way from 1930s when alonso church develops lambda calculus for a theory of functions basically in the 50s john mccarthy develops lisp i think a few folks have have heard of lisp but at least in school if if not from for more than modern incarnations of dialects and this was the first functional language of course influenced by lambda calculus but it still retains something we identified today as variable assignment later on peter landing develops a swim the first pure function functional language again based on lambda calculus and this one didn't have assignments so purity is nowadays associated with functional style and pure functional programming languages try to make the best of this and and sell it as a corner feature john bakus i think most folks associate his name with fortran or alcohol a few folks actually know that he develops fp a functional language that emphasizes higher order functions and we're gonna see a lot of these examples today of higher order functions in the 70s robin milner develops ml the first modern functional language which introduced another concept type inference that we we love today in in mainstream programming languages and of course polymorphic types these are no longer news in the 70s and 80s david turner develops a number of lazy programming languages culminating with the miranda system so for the first time we we surface concepts as lazy evaluation in in in the way we compose programs and request computation and of course the beloved haskell which started as a standard discussion through the late 80s and in in the 90s i think the cornerstone additions to the language most folks have heard about or associated with the name type classes and monads main innovations that landed in haskell mainly the work of phil waddler more about him later and of course this got standardized in the early 2000s so all these four haskell so if haskell is so great way hasn't taken over the world well i claim that it has in a way but not not directly it's not something that happened in terms of we all started programming in haskell or in other mainstream programming languages yes there are companies and projects that run on haskell and mission critical software and yes you can write high performance software in in functional programming languages but the idea is that i concepts that distilled for eight years in in academic research and in pure function languages have surfaced in in mainstream programming languages as as as if novel ideas and we are trying to adapt them of course not not all of them fit in the context of imperative programming languages where we're still trying to figure out ways to to make them feel natural or feel at home if we're talking about c plus plus or if you're talking about swift's algorithm library or rust each community each each niche each mainstream programming language is trying to borrow concepts and make them feel at home and see how we can make code that we write feel simpler and more easy to reason about so c plus plus has indeed become more functional from mundane concepts like lambdas that everyone is using these days standard function higher order functions value types constants that we're trying to use lazy ranges folding fold expressions and even more nets yes there are monads in c plus plus a quick taste of haskell can anyone figure out what this piece of code does i'm gonna try to demystify the syntax so the plus plus just means list concatenation and we have some list comprehensions that tell us that y's are all the x's that are smaller that are greater than a and these are all the x's that are smaller than b so what do you think this does it's an it's an algorithm quick sort yeah quick sort very good so if i give them better names i intentionally left them dry so we we would have a recursive application of the quick sort function to the partitions we construct using those list comprehensions so if i were to have like a step-by-step modification of how these things happen this would be the least cells that we're decomposing and sorting there so the idea here is that we're we're declaring our intent in how we want to attack this problem we're not describing the steps or the mutations or how we need to pivot we're just expressing intent using release comprehensions and a function application to say what we're trying to achieve in in partitioning and sorting the sequence so if we were to do this in a very imperative style we would have to don't don't try to read the code it's not important this was just pseudocode lifted from standard the algorithm book by corman so it immediately we see that we have lots of moving parts we have complexity we have to reason about state and boundary conditions and it's very easy to screw it up anyone who's tried to implement a quick sort or a binary search or something that's very simple as an idea but very difficult to get right in in all the condition all the details and quick story here in 1986 you know i love history bits by now so in 1986 donald knuthworth asked to implement a program for the programming pools column in communications of acm and the task was to read the file of text determine the end most frequently used words and print out the top n with their respective frequencies in that body of text sounds like a standard interview problem or i know school task so you know don knuth is a pretty thorough person pretty thorough programmer so his solution written in pascal at that time that was fashionable it was 10 pages long and it was correct it was a correct and thorough solution but i want to highlight a different solution how many folks have heard of doug mcelroy just one hand so doug mcary was intermed instrumental in in the developer of unix and for a while he even managed to come thompson and the team that worked on that on those projects so i think we all love and appreciate a good pipe and i think we have many linux enthusiasts here so he's the person that's responsible for this innovation the pipe and this is his solution to the very same problem and this is a complete solution so it's not 10 pages long it's six lines of shell script that accomplishes the task there's the very same task in in in finding what the word frequencies and sorting and printing them out i do encourage you to read more about doug mcelroy i think he deserves more exposure and recognition for his contributions and not just this script so taking inspiration from dark macaroy's unique shell script you can think about writing an algorithm in your favorite programming languages doesn't have doesn't have to be c plus plus and try to solve the same problem but in the spirit of doug mcelroy's pipe and see what you come up with and how would we start on this journey well it's all about functional programming so i guess we should all read up a way thicker book than that one about category theory and endomorphisms and monads and all the crazy mathematical concepts required right there is actually a book like that and i did enjoy reading it but i wouldn't recommend starting with that one by the way it's i put a link there it's in pdf format it's freely available if you want another printed version there is a print order a very good book but we have to think about how does this apply to our beloved language how does this translate how can we use this in c plus plus is there value for for for us today from these concepts or is just a is it just a mental exercise or something that we like to think about and write toy programs or academic papers can we use this in c plus plus and if there's a takeaway from this presentation would be to start with this book so if you want to learn more and see my many more examples than i have today i would recommend this as a starting point for your exploration for your transformation for helping you think differently in c plus plus even is that this conference by the way you can find him on the hallways and ask more i'm i have to pick something because the time format doesn't allow me to go into detail about everything so okay so apparently the stream is working now we had some technical difficulties before so i had to pick some topics and my first choice was lifting and you're gonna it's gonna sound like it's something complicated but i want to make it sound very pedestrian very simple and we're going to show very concrete examples and when we're talking about lifting we have to talk about high order functions and don't get scared about the name higher order functions are everywhere you are using them if you're using a dstl if you're using the algorithms if you're using ranges you're using higher order functions if you're providing lambdas or predicates you are using higher order functions yeah i had to mention boost high order functions library but i'm going to focus on another library less known called lift by my friend bjorn and it's a c plus 17 library has a simple context per higher order functions of predicates and helps us write and compose functions easily and we're gonna see how how we can do that the reason i chose this library is because i want to highlight the way it helps composition and because it's a it's an easy library to read and understand the source code is right there a few high order functions that it provides the usual suspects i think they're pretty self-explanatory by the names but let's see a concrete example suppose we have a structure with two fields and we have some way of projecting those fields outside by selecting the name or the number in the structure and we want to sort the elements the structure elements by name by one of the fields so instead of being very explicit about it and just sticking a lambda there and doing the the the usual thing we can i i have to showcase the the way we can compose things so we we're composing the less function and select the name and we're providing this as a higher order function for the sort algorithm don't worry about the compose details later and if we want to do find if again we're interested to finding something that it's where the employee number is equal to five whatever that means and yes we could have written up lambda and be very explicit and be very imperative in style and and selecting what we care about there but i wanted to highlight how we can compose these two these two functions and even have a partial function application by providing five there as an argument to equal again to accomplish these things and don't worry if you're if you can use c plus 20 ranges you can do things like this and more with projections so it's it's already in the toolbox you don't have to reach for some kind of third-party library i just wanted to highlight highlight it as an example and don't worry about trying to parse the this this macro is not that important i think the example here it's much more interesting and again using bjorn's bjorn valer's lift library here we are trying to lift an overload set so not just one function so we're trying to lift an overload set of all the two string functions and basically we can try write a transform that could work on different kinds of input sequences here we have vector of integers but they could be anything that can be too stringed and transform them in the destination collection which would be a vector of strings so again we're seeing a way of lifting the domain of the function application and again i'm going to draw some diagrams to bring this point home by the way this would be the presentation by bjorn fowler to watch the link is there if you want to see more details and more examples i'm gonna come back to to lifting in a bit okay let me check on something yeah but first we're gonna have to talk about boxes so i i picked another concept and i need to talk about this so that we can digest to the examples and see lifting in action and that the other concept that it's deeply rooted in in functional programming style is the idea of type constructors and a way to capture a value with its context so in c plus plus we have a few type constructors that are already there in the box pun intended a unique pointer and sharepoint or vector optional function standard function and many others and for each of them we have a way of poking the value inside so we can get the the the value that the pointer points to we can get an element from the vector we can get the value from the optional and so on we can do the function application but the idea here is that the what what we should aim for is not looking in the box the idea is not checking at each step to see if the value we have in this in this container is actually valid is actually usable at a particular stage in the pipeline of the computation the idea is to chain multiple transformations apply multiple functions multiple move the data around to the transformation pipeline with its context and at each stage by by different techniques and i'm going to highlight fmap as one such technique we can apply the transformation based on the value in its context and move it further along without querying it at each stage and only at the end we query the result and see if we have a successful transformation so standard optional is is such a such a tool in c plus plus since 17. so to reiterate don't use optional for error handling because that would force you to check it if it has a value and try to use optional to chain computations and build apis that are intuitive and and fluid in the way they compose and of course you can draw inspiration from programming languages that have gained this tool long ago if you want to read more about functors applicatives and why not monads there is a series of articles that i think explain the concepts in a very intuitive way using pictures so no fancy mathematical explanations the link is there so i i saw to i said to draw inspiration from rust in in rust using the option type is pervasive all apis expose this as the vocabulary types and developers are used to dealing with option types and they they the idea here is again don't query the value within try to to chain it or try to do pattern matching to see if you match your value or not huh so the the magic of applying the value should happen in a way that masks the the client code from the value within so we should think about the inter transformation to the context and putting the the the value back without actually looking at it to see if if query the value and let's see some examples let's think about capitalizing a string right so we could have a capitalized function that takes the string and returns a string and we can obtain this string from one api that can fail and we might not get a string back so we which we could model this as an optional string out of that api and here we have the the the idea that i mentioned earlier the code actually looks to see if it has a value so that if actually checks and if i got a value from the api then i do the transformation i want to do this is not the ideal workflow and of course we can change that to an optional thing but that's not the idea the idea is building a lifting operation and this is where i go back to to lifting we can think about a lifted capitalized function that works on an optional string and returns an optional string so rather than going from string to string it goes from option listing to options thing is that is like changing the domain and codomain over function so that we we hide these details inside this higher order function and we can think about them in in terms of raising the or lifting the the the the the domain lifting the the abstraction so if our capitalize works from string to string lifted capitalize works from options link to options link and yes of course we're we're not going to build sibling functions or duplicate all of our transformations to do this this was just to get there there are higher order functions that help do this lifting operation transparently and one such possible implementation would be an fmap function which takes as an argument a function from a to b so standard function takes an argument of type a in terms a value of type b and it does a transformation on an optional so it transforms an optional of a into an option of b and it does so using any function so this is a higher order function because it takes a function as an argument so if map is a higher reflection one of our first examples today and lifted if the exact same diagram exact same idea now just generalized for an f function we now have a lifted f through an f map high order function that now takes us from optional of a to optional of b instead of a to b so instead of going to string to string optional string to optional string let's see and if you we want to express that concretely let's say we have a two-stage transformation so we have we wanna trim a string and then measure its length standard way of changing these kinds of operation so we want to trim the string any white space and stuff like that and then we'll see we want to see how long it is so at each step we might have a failure in to produce the result so trimming might not yield let's say it might not yields the the result or length might fail of course these are trivial examples but i want to build an intuitive feel about this so we have to raise the the function application domain trim is from a string to a string and length is from string to int gives us or size t or whatever gives us the length of the string and we can compose them using two fmap applications the first lifting operation happens for trimming and the second lifting operation happens for the length function so don't worry about the syntax if you don't like it it gets better another way of writing this if you don't like the standard function root and you have many reasons not to like the standard function root you can write it this way and again this is a higher order function another flavor of 4fmap not the only one where you can take the function as the the function that needs to be lifted as an argument and again it would lift it in the optional of type domain economy let's say we want to build a a symbol table for a program we're debugging or something like that and we maybe we have an api that gives us an ip counter function address currently executing function let's say in a debugger or something like that and we want to get the debug location from this which might be the the function name where we stopped where we're breaking the debugger so we might have an api that loads a symbol so for a given program counter gives us a symbol and then we want to transform that symbol which might be in some internal structure that we represent in the debugger into some presentable information to the user like a string friendly display string so this would be that way of checking at every step do we have a current program counter could be an option could be unavailable the api have failed did we manage to load the symbol do we have a symbol yes no a board what do we do we return an empty optional and then if everything went okay we're trying to display the string so re reorganizing our our thoughts here we're trying to again compose by lifting those functions and doing f-map so the first the inner f map s us map the the loaded symbol so helps us going from the current program counter through the load symbol function which is the low the lower function and that then gives us an optional symbol type whatever the symbol type is in our in our system doesn't matter it gives us an optional of that type but we don't look at the optional we don't care at this stage if that succeeded or not and then we compose we take this further and we we lift it using the another fmap transformation and we're applying to string to it let's say we have an overload of two string for that particular debugger structure we're dealing with so and at the end we're yielding an optional string so that's the intended result intended the goal was display a string of that function name where the debugger stopped so at the very end we get an optional so we get that box and it has a context and at the very end we open the box and see okay do we have a function name there to display or not and you can do fancier things if you care about syntactic sure we can do the same thing with a vector i don't think this is tight optional so the same pattern can be applied to any type of such box and i mentioned a few earlier so vector would would be another prime suspect here for example we can have an fmap function again from a to b as a function application domain and inside we can use another higher order function from the standard library this time standard transform standard transform is a higher order function proof it has an argument which is a function so our fmap uses standard transform to transform a vector to transform from a to b our function is a to b and we're trying to build a new function that goes from vector a of a to vector of b so we're we're we're lifting the function into a new context which is a collection of a's and b's so let's see something like this again we're having the length length function for string and now we want to operate on vector string and produce a vector of integers or size t if you want to be a purist so we could traverse the vector of strings and apply length to each element and then insert it in the vector of integers of course but we can imagine this might be a more complicated thing where that length operation might not succeed or whatever api we're talking about so again a way to compose this using our fmap lifting mechanism from previous the previous slide we can f-map from string to int and use the length function and now we get a new higher order function so we we have a lifted length function that we applied to the names vector so the input for this transformation is the vector of string the names and the lifted function the lifted length function which now operates on this vector but yields a completely new type of box a box of integers which represent the individual length of the items there so we've seen a few concepts we've seen the type constructor and we had two examples with optional and vector and this helps create a box that wraps another types so an optional wraps the type within it a vector wraps up models a collection more than one value so a box can hold more than one value by the way so a vector wraps a value of its type let's say integer strings whatever and the idea of the context is essential here because it it encapsulates the types and it can carry context along the processing pipeline that we built and we've seen functional lifting and that was a way of creating a higher order function like we like we showed with fmap and it helped us create a new function instead of going from a to b that mechanism helped us build a new function that goes from box of a to box of b where box was optional vector or whatever shared pointer if you want so we we at any step we try not to break encapsulation so we try not to query the value until the very end and it helped us build composition instead of writing a bunch of if else branches and structural code by nesting conditionals and multiple exit points from the function and dealing with all the the conditionals we're trying to build up a pipeline something in a style of repeated function application and at the very end we we see the pipeline succeeded or not and we have monadic extensions to standard optional since c plus plus 23 and you can even use them earlier if you don't have a access to fancy c plus plus versions there are many implementations of monotic extensions freely available on github i would recommend the one by cy brand you can find it at tartan llama github llama and look for optional so let's say we have a string view to int function here where we're trying to do a type conversion and we're getting a buffer and we're trying to convert into integer if we can and inside we're using the from charles api don't worry about the error handling and the details there not important what i care about is the processing pipeline so instead of building a function with that deals with all the the error conditions and tries to figure out okay what are we doing what are we returning at each stage when we we failed to transform the the input buffer into a string we're building a linear sequence so instead of nesting a bunch of ifs or worse buildings and callbacks so instead of nesting we want to build a linear stream so something that feels like steps that we we proceed through so this is where the and then or transform or or else functions from standard optional can help don't mind the details it's not important what each step actually does just an example the the main takeaway here is that we're we're building a transformation that looks linear it's not about branching or nesting within and at the very end where we change the bunch of things that all had optional things in them at the very end we do the dot value and we see if we got something out of it or not more on and i think this is very close to to what we can do in declarative style in c plus plus but i think this slide from ben's presentation on declarative style c plus i think this is the the slide that's best synthesizes the presentation but i do recommend you watch it i put a link there is about what's the signature element so the signature element would be function application and higher order functions and chaining and composition this is one of we want to target so we wanna stay clear if possible of statements and mutation and yeah difficulties that come composing with such low level bits so what we have to remember is that expressions yield values and statements do not might seem obvious but we have to keep remembering that the distinction between working with expressions and working with statements that statements cannot function without mutation i'd recommend another presentation and not because it's about a c plus successor language it's about because it's focused on values and value semantics i don't believe it's yet on youtube but should be soon from cppcon this year so look out for the values talk from by dave abrahams very important i think it's very important to to watch it even if you're not interested in an experimental language more references for value semantics that i think might help once you get past the principles and i hope i i gave you a good teaser to stir up interest to explore more i would recommend this presentation by juante boulevard puente value semantics the most valuable values i i love this presentation and it's all about value-oriented design and how it the talk actually tries to reconcile functional and procedural programming by focusing on value semantics so that's the most valuable bit out of what we can translate easily in c plus plus c plus plus is very much a value-friendly programming language but we have to learn to take advantage of this and distance ourselves if possible from 2000 style programming of using sharepointers and object-oriented class characters so like functional programming it promotes local reasoning and composition so that's why i think it's important to try to follow some of one best examples there and i think it's pragmatic so definitely worth watching another presentation on values that i highly recommend again from one pay squaring the circle variant value oriented design in an object-oriented system this one is about trying to bridge the gap and see a few techniques we can use to retrofit some of these value concepts and working in in this different mindset in a code base that is heavily legacy heavily object oriented if you want to learn more about immutable data structures this is something that's a another cornerstone of functional programming i haven't touched immutable data structures at all in this presentation they're way outside the scope but if you want to learn more this would be a good start representation again by one pick and of course we've seen already at this conference we've seen a bunch of presentations on on ranges even some controversial bits so i have to mention a few of the ideas of ranges and they all stem from functional programming paradigms just a quick flavor in case someone missed the train and not comfortable with c plus plus ranges just a quick before and after shot in terms of i want to highlight the style don't follow the details they're not important i want to get you a flavor for the style so on the left we have a very step-by-step intentional what you have to do computer to solve my problem and on the right something more kind to the goal we're trying to achieve or the higher level transformations that we're trying to to pipe through so reversing filtering dropping elements taking the first elements filtering on a given predicate and so on again i i think the the idea here is that's why i i i'm putting it side by side is to contrast the the the how and the what what we're trying to accomplish i think we should try the state to try to stay closer to what we're trying to accomplish and be succinct and there are less chances of airing out again another example don't mind the details just appreciate the the differences i think c plus plus 20 ruined one of the my favorite interview questions and that is to split a string how many of you have gotten this interview question no a few few hands so this kind of thing becomes trivial now fair warning i don't think any interviewer will accept this answer they actually want to see the algorithm okay so getting back back to to the pipelines and doug mcelroy's magical script we can try to give a teaser back a few slides back we can try to do a similar thing in c plus plus using ranges don't try to decompose this in your head i think you can intuitively gain appreciation that this is very much close to what doug had at least as close as we can get with what we have as building blocks so we can we can go get closer to that goal we're never going to get the syntactic sugar and the succinctness of something like haskell or a shell script commands but we can we can strive into that direction for sure we can have less moving parts and less ifs and simpler code so this is what we should strive for we've already heard a few gotchas from nico in in his keynote on ranges i'm gonna reiterate some of them that i consider important and views remember that views are rev have reference semantics so all the reference gadgets of c plus plus apply to views it's nothing new just we have to just remember that they have reference semantics as always with c plus const is shallow and doesn't propagate as you might expect sometimes so be aware of that some functions do caching i put this deliberately in after nico's keynote just to raise the awareness once again don't hold on to views and don't try to reuse them the safest is to use them at hawk or as temporary values let's say like i had in in my previous examples here so use them ad hoc in line where you're doing the processing don't try to hold on to them and if you really must hold on to them if necessary make copies so that because they're cheap and you avoid surprises due to caching and other bits so i would close off by reminding you of phil wadler we've seen him at the very beginning and i'm gonna draw inspiration here from ivan again this is how yvonne likes to close his stocks and channeling functional programming in c plus plus i have to close the same way so listen to phil wadler make your code readable and pretend the next person who looks at your code is a psychopath and they know where you live so program so that you don't have any surprises and with that appears i'm on time if you have any questions feel free to ask [applause] or if we have questions online if we run out of time we i can take questions of the record one question on the record no victor thank you thank you for the talk so just one question i'm i'm someone who is going to try functional programming if you haven't tried yet so i'm i'm wondering how the debugging would be say with other debuggers ready for functional programming or is it something that we have to watch out for that's that's the most uncomfortable question i get when i give this talk but i i'm i'm glad you did it so i would say it's better than debugging macros which is not much the idea here is that when i when i try to learn haskell this was the most difficult part for me i tried to at each step i try to see okay what am i transforming am i getting what i'm expecting in the new list i try to and it's even harder in a pure functional programming language too because it's harder to to output stuff to see to pick at the program so first of all having less moving parts means you do less debugging you need less debugging because the parts you're composing can be individually tested if you want them the beauty of if possible if you're trying to program in a pure style where the input is processed and it gives an output without mutating external state is the beauty of that is that you can rip the parts rip the the parts and each one can be individually tested because it has no dependency of any external state it just has an input and an output so this eases up when you have a chain of transformation you can take out parts of the transformation and this is what i do take out parts of the transformation and see if is this working okay this is working as expected i put it back then take another part of the transformation is this working now put it back so because you have an input and an output and if possible you don't modify any external state you don't have any side effects then it's easy to take bits and and test them in isolation it's even easier to mock functionality if you want to do tests automated tests and stuff so first it it eliminates the need to inspect variables and watch for for memory transformations and second it's easier to to test in isolation but there is no debugger support like magic i think we can we have to close the stream here but i can answer questions of the record so go ahead you can ask the question thanks for the talk and i pretty much enjoy functional programming and i try to incorporate it in my first code as well but i always wonder whether yeah what is what are your your experiences with performance implications if you change the style to this side you you you have to do it responsibly so not not everything is gonna magically be fast so but i i think this applies in general to c plus plus you can you can really surprise yourself by copying stuff you didn't intend in c plus plus without trying to do functional transformations so you have to be careful at each step if you have concerns about ranges ranges are lazy so most of the time so you can try to be eager about evaluating at certain stages but in generally they try to be very efficient so if your concerns are about ranges i would say 90 of the time you shouldn't worry about that they are performant they cost in terms of compilation time but at runtime they basically boil down to almost nothing so it's it's it's like inline functions it it all that all that type trades and boilerplate will just go away when optimized but yes you can do an unoptimal stuff you can copy things without meaning to there are parallels around the optional constructor for example if we talk about concretely about optional and i'm i have a one more presentation tomorrow where i i give an example where optional can bite you if you're not don't know what you're doing so you can accidentally build and call accidentally call copy constructors and do unnecessary things but but i think that's not necessarily a problem of working in a functional style it's a problem of not knowing what you're doing in c plus plus in general like the the regular c plus plus foot guns apply to functional programming as well so it's it's not a guarantee that it will be optimal but having less moving parts means there are fewer chances to get it wrong in my opinion i'm not claiming guaranteed program optimal programs nobody can do that sure thanks again yeah i have to benchmark more i guess always measure intuition fools you always measure yeah always measure if there are more i don't see people lining up for the mic if you have more questions do catch me on the hallway or around i'm easily identifiable