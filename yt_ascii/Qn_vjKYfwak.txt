we started doing some sort of autometer theory earlier this year and then we have a bit of a break because i think you went ganting in far away places and i was busy with other things as well and now we going to pick up the threat again and continue talking about autom theory and formal languages and stuff i mean if it is regular expressions i hear these are kind of like some people have bad dreams about these is that right like like this one here one puzzle is to find out in one word in one sentence what does this regular expression mean yeah because it has got a very short description i mean in english and and and one exercise is to find out what it is so regular expression are they to define what we call regular languages and maybe can i write something in the previous videos we looked at dfas which are deterministic finite autometer and we looked at nfas which are non-deterministic finite autometer and they were little machines i mean dfas are little machine they have a state and then they read a symbol and they go to another state and they recognize you give them a string and it says yes or no yeah and the nfas are slight variation where there is s some some non determinism could be go here or could go there but there are all little machines so first of all every dfa is an nfa and we can also as more interesting turn an nfa into dfa by a power automat construction and so hence we can see that they define the same set of languages and intuitively there are the languages which which we can recognize with a computer program which uses only fixed finite amount of memory but today we look at a different angle on the same languages and these are called regular expressions and in a way that's quite interesting because regular expression give a more sort of denotational view on regular languages instead of looking at it as bya via machines we we we look at a high level description of these languages and regular expressions are actually very useful so they they are used in in in editor commands to to to describe editing patterns or you can also write something called a stream editor where you can give a pattern and and you can do automatic s of editing job so if you want to do some simple text processing you use this sed and then there's another program under un called grap which recognizes all all regular i mean tries to match regular expressions to some input and and and gives you prints all the all the lines where it appears no matter what the amount of input is grap can filter out or show you the things that you're interested in and that can be very useful it's very useful to learn regular expressions they also have applications in like compiler writing so when you to define what is a number or what is what is a symbol i mean what is a variable name and so on then you usually start with defining them by regular expressions and then there's another level which is called context free grammar but it's usually in two levels so first of all the tokens are recognized via regular expressions and the tokens are then processed to give via via a grammar which we haven't yet looked at let me continue this picture a little bit i will tell you what regular expressions are in more detail and then i i i i i i give give a semantics in terms of sets where every regular expression gives rise to a set of vers but this doesn't really help us to to write a program which recognizes a string or not because the set is infinite so so how do we do this so instead we will define a translation into nfas there's all the translation the other way around which i'm not going to look at today which is quite fun and shows that regular expressions and autometer define the same set of languages that's interesting from a theoretical point of view okay let's look at some regular expressions so i'm going define regular expressions the set of regular expressions oh oh before i do this we had to fix an alphabet sigma just a finite set so for example sigma could be all letters i'm not writing 26 letters now okay like this and then we define given an alphabet we define a regular the set of regular expressions and for every regular expression so if you have an like an e which is a regular expression then i define the language of e which is a a set of words so it's it's a subset of sequences of strings over this alphabet so this is just to be reading strings over sigma and the language is a set of strings not all of them some of them okay okay we have we have already seen this when we did automa but that's so long ago that we maybe want to watch these videos again i don't know okay so what are regular expressions so i showed one example but let me give you some more examples so for example just the word like hello is a regular expression and what is the language of this regular expression no it's very booring it's just a set containing only the word hello okay just the word or just those letters i mean is it no there a word it's not there's no comma in between just said there just one element and there one element is one word or like say string yeah which is the the word hello this isn't the alphabet that makes up that word this is that word no the alphabet is in the moment the letters from a to z yeah yes okay and we have one one word which is hello and this is the language of the regular expression hello okay now it's a bit boring now in german i say hello is an a so now i can write this i can say is are you from germany yes i'm from germany surprise for many but i am okay born in berlin okay so we can write plus this plus this now okay i don't want okay let me just call this expression ian yeah and then the language of ean is no points for this hello and hello but that's a bit here i'm i'm repeating lots of things so let me write another regular expression e2 i write the regular expression h and then see either e or a l l o and this is the same language so so so l of e2 is also these two words because you can read an a h and then an e or an a and then l o so is that e plus a but that just means you could have e there is it you mean yeah the plus is a part of forming regular expression you have either e or a you have first an h and then an e and a and then in l o and that means you have the words hello and hello but now let's let's get a bit more interesting let's get a bit more interesting which language is this let's do something more interesting okay okay let's do the star let's see we want to add hello but any number of else so now we have a language which is not finite anymore more because i can have no l here h then hello hello oh no that's just hello and then now it's hello and so on yeah so if you do a star you can repeat this any number of times yeah whatever is under the star okay let me let me go on this is yeah let me show you some more regular expressions and i'm changing the alphabet i'm changing the the alphabet to only a b c okay a b c and now i want to have the regular expression of all the words which contain ab so how do i do this i say okay in the beginning i have a sequence of a's and b's and c's then i have an a and then i have another sequence of a's and b's and c's i mean i don't want write down this in language of infinitely many words but they're exactly the words over abc which somewhere contain an ab i can also contain several abs that doesn't matter okay yeah and you read this so like this so you can repeat a b c which is like anything and then after a while you can say a and then you repeat a b c again so this could be aba or yeah okay yeah yeah yeah yeah yeah yeah okay let's do some so for example in this okay let's e4 so some examples is yeah is in this language in the language of e4 so what's not in this in this language for example b a a is not in the language right and so on okay yeah shall we do another one i want the one which contains the an an even number of a's oh do i know how to do this okay maybe it's too complicated you can do it you got this you got this yeah yeah so i have an a and then after the a there is some b's and c's and then there's another a and i may do this in number any number of times but then i may have in the beginning some b's and c's and then after have some b's and c's what's the idea so we see some b's and c's then we see some a's then there some b's and c's maybe also none then there's another a and we repeat this so we obious get an even number of a's including no a's right and and then there's some more b's and c's this is where zero is an even number again right yeah yeah zero is an even number yeah okay so this is quite an interesting puzzle because we can also there's a theorem which i which actually i can just proof i can sketch that for every regular expression there's also one which is exactly the negation of this one yeah and this is another challenge to find the regular expression which defines all the words which do not contain ab i mean had this ab this one is is easy because then you have an odd number of a's so that that's not so difficult but the the language of all words or the regular expression defining all the words which do not contain ab yeah that's a bit tricky it's good for for puzzles i maybe there should be a little puzzle game you know we'll leave that for exercise for the viewers maybe yeah okay so let me do one more i want to have the sequence of a of a but only always interchanging a b a b yeah or b a one way or the other alternating alternating yeah alternating is a good word yeah so so what i do i say ab in bracket star yeah so a b a b but now it may start with a b so i say either b or nothing and nothing is written epsilon yeah epsilon is nothing nothing empty word the empty string and and then after i have also a plus epsilon so that maybe an a in the end it has doesn't have to end with a b so that's a regular expression defining like a b a b or b a b a and and so on okay okay so now we have seen some examples now let's do the math regular expressions so i'm defining the set of regular expressions and assume there is given a sigma so sigma is my is my is a finite set of symbols the first regular expressions are a bit strange maybe you may want to have the empty language so no words so i write empty is a regular expression okay and the language of empty is surprise surprise the empty set mh okay so okay these two symbols look the same but one of them is a regular expression and the other one is the same just to confuse everybody okay so now we have another regular expression which we have already seen i mean the zero is is is almost never used namely the regular expression which stands for the set containing only the empty word is the set and epsilon here is now a ver so epsilon is the empty string the problem is it's very difficult to write the empty string right this epsilon is this string is intentionally left blank yeah that's how to read it okay so what comes next we had symbols so if you have a symbol from sigma so a is here a variable maybe yeah it's not the letter a is any any any symbol then a is also regular expression and the language of a is just the set containing only the word containing only so so any any any symbol also is a ver of lengths one this is is a string of length one okay so we so what else do we have then we can put one regular expression after the other so that's that's this if if you have le little letters for e is a regular expression and f is a regular expression then i can form ef is a regular expression and the idea is so a ver over e f say the first part is something from e and the second part is something from f so so how i define this so if i have a word v which is in the language of e and the word w which is in the language of f then i can concatenate these words like strings i can concatenate them and they are in the language of e f so i think we have seen this in the examples that so here for example if you look at the language of this thing here it's b or the empty word right and here we have all these ab ab ab and so on and the language here is a and epsilon and now if you form all the combinations of word from these three sets you get exactly the language we wanted what's missing plus i haven't done plus plus is actually easier so so again i have e is a regular expression and f is a regular expression and now i can form e+ f as a regular expression we've also seen example for the plus right and that's very simple in this case l of e plus f is either avert from e or union avert from f so that's just set theoretic union there one thing missing what is missing you have to define the star okay so if a is a regular expression then e star is a regular expression and it means i can repeat e any number of times including none so how do i define the language so i say okay first of all the empty word so this is an absent is an element looks very similar is in l of e and then we say okay if we have a word v which is in the language of e and we have already formed a word in elistar and we can put them together and form a word an listar that's a you see here is inductive definition we can repeat this rule any number of times so we can do this so that's the the the formal definition of the language of a regular expression define two things we the set of regular expressions given an alphabet and then we define the language so now we know what regular expressions are and we have define the language using a bit of math bit of set theory i'm not a fan of set theory by the way so we know i have defined the the semantics but we still don't know how to run a regular expression how to recognize whether a ver is in the language because language is infinite so we're going to do this so we we going to define the translation from regular expression into nfas and i'm going to do this in python so what we're going to do we define the the the the type of regular or the class of regular expression in python and then i will define the translation into the nfas which we have also defined in python and if we put and we know how to run an nfa yeah as we defined how to run an nfa so now i'm translating the regular into an nfa and i can run it and this way i can actually have a recognizer for my regular expressions and actually this is more efficient even if you just want to grab a match a word no stars just a word then if you do this by hand it it's can be a bit inefficient because you have to to go back you have to to to look at some letters several times sometimes like if it's if it's overlapping but if you use this regular expression translation it's linear it will look at every symbol only once so it's actually a useful programming idea how to translate regular expressions into into autometer and that's the next video then right yeah now let's do the math okay if we must hooray you should say you might ask me some questions yeah so i'm going to concentrate i'm going to be there yes concentrate poter concentrate