today on developer voices we're talking to one of the authors of the o'reilly book fundamentals of data engineering it's a nice lofty title isn't it you might ask yourself what data engineering isn't all engineering involving data come on give me a definition and yeah that's basically where i begin the conversation with joe but this is one of those conversations that really took me by surprise i thought we'd be talking about data serialization formats apache flink versus apache spark the necessary evils of a bunch of python scripts that munge things but where we actually ended up was way more fundamental than that what are we moving data around for what's the value of engineering data to the end user what responsibilities do we have to the business this is very much a conversation where technology exists and data exists as a means of serving some larger goal i don't know here on this podcast we love to think about how we're getting to the future this is a good reminder that the how begins with the why what and who are we doing all this danger engineering for in the end i suppose this week's episode is a story about people using the business and within the business told through the lens of data so let's get started i'm your host chris jenkins this is developer voices and today's voice is author joe reese [music] my guest today is joe reese joe how you doing hey good how are you doing i'm very well very well excited to talk to you about your newly released book yeah which is good which has a great title a weighty meaty title fundamentals of data engineering yeah we put the fun in fundamentals so that's like i mean there are two sides to that right you've got fundamentals anyone who says they they can write a book on fundamentals means business and on the other side you've got data engineering which feels like oh do we need a new term for that i'm going to start there why do we need the term data engineering haven't we been doing that since the 60s i mean you can make a strong argument that we have right so i mean everything we've been doing with computers is data in it and i suppose it's an engineering element to it so but i didn't determined i didn't see the term in the 60s so but i i didn't make up the term data engineering either right i just think it's a field where we're really we're really good at coming up with new ways of describing things that are old and maybe a few new things tacked on so data engineering is one of them i think i first saw the term popping up maybe around 2015 2016 and then again we can get more into some of the backstory that i've heard recently heard about the origins of the term data engineering but you know the the attempt really of this book was to describe a field that i feel like i know i had implicitly been doing for a while and many other people had so you know you're trying to delineate what this thing we seem to be doing anyway actually is and presumably should be yeah yeah that's about it i mean it's no different than data science i mean that came out in what 2009 as a term yeah out of some fine folks from linkedin i believe and you know i still to this day have literally no clue what data science means even though we use a term every day but i think you know but the field has been well described right even if you can't come with a consistent term for maybe say data science you still kind of implicitly know what it is but same thing with data engineering i felt like that there were a lot of books you know prior to mine about data engineering you know data and joining an aws data engineering with spark and so forth but but we hadn't seen me and my co-author hadn't seen was you know people taking a step back and really trying to describe data engineering from first principles right no tied to a particular technology but career in general yeah yeah which which to us was the harder thought experiment like if you were to you know sort of massage uh you know data engineering and sort of you know peel apart you know what what's there like what are the immutables what are the things that aren't likely to change over the next five to ten years i think that was a book that you know matt housley my co-author and i were interested in writing we certainly were not interested in writing you know data engineering with python or something like that not to say those aren't great books and great ideas but that just wasn't what we were interested in doing so you want the more abstract stuff that's gonna maybe even outlive our careers i mean that was one of the goals you know kevin who one of our actually people who wrote a praise quote said that this book will you know live on for decades and maybe it will maybe maybe it won't i have no idea but you know oh riley too and we had approached them with the idea for this book they actually tried to convince us not to do it they they said this is gonna be a very challenging yeah i mean you know two first-time authors who have the hubris to try and describe an entire field i mean that's the kind of book that i think scares publishers yeah ambitious yeah trying to make concrete those kind of abstract terms you can see people getting lost in the weeds for a long time oh yeah yeah and so but but we you know you know matt and i we were both too smart for our own good and i would say too dumb for our own good too so we figured this was you know something we needed to do and which is challenging we were running a business at the same time i mean i was in the middle of remodeling a new house and lord knows what other projects we had and so writing a book in the middle of that was maybe not the wisest endeavor but it was it was the path that we chose or i would say that the you know the path chose us so yeah yeah and you survived to tell the tale and print the print the cover yeah did that so okay so we should get into what you discovered distilled invented no delineated that's the word i'm looking at i don't think i invented anything maybe we get maybe we provided a different way of looking at the field maybe that was i don't know if that's an invention that's more just like here's a lens yeah lens yeah yeah that's a very good way to put it so looking through your limbs at what data engineering is can you define it for me as a field yeah i mean the tldr too long didn't read of data engineering is you know you're you know there are systems that set upstream from you that generate data you know these might be relational databases you know nosql databases apis or whatever often these these systems aren't you know they they are they don't treat quote data as a first-class citizen data engineering a data engineer will take that data you know do something to it to make it useful for downstream consumption you know for use cases like machine learning analytics reverse ctl or whatever and so that's yeah in a nutshell you know the role of a data engineer a data engineer is responsible for the what we call the data engineering life cycle as well as its undercurrents so you know again looking at systems upstream ingesting that data you know transforming it serving it all along the way storing it in various way shapes or forms and then you're also responsible for the undercurrents right so it's like security data management architecture ops orchestration software engineering etc so in a nutshell that's what we felt really encapsulated the field of data engineering you know that's pretty big i mean by the time you're doing one thing by the time you're doing anything plus security and large-scale storage that's already enough to be quite a lot for people to learn as a careers and we don't expect people to you know to become experts in all these things but it what we feel is like these are the things that you at least need to be aware of as a data engineer and be cognizant of and depending where you work right depending on the size and you know maturity of the company you're at maybe you'll be handling all this maybe you'll be handling a small subset of it but to be aware of the you know so the holistic life cycle you know i think it's incumbent upon data engineers because without that sense of sort of how data flows and the various things that happen to data along its life cycle you know you you i i don't think you really understand you know the full extent of how you impact data as a data engineer or otherwise right so yeah yeah in a way you're you're very job i think is to connect between separate systems right between yeah sources of data and the people trying to analyze it and if your job is building bridges and connections you have to be aware of the larger picture yeah the bigger picture is the one thing but you know i kept noticing and same with matt housley my co-author we kept noticing you know engineers are very myopically focused on you know their task at hand or their their specific silo but you know through a consulting practice and through our experiences you know working at nine-to-five jobs we notice that that mentality and that that perspective i think really shortchanged you know data teams right so yeah if you aren't holistic then you really don't appreciate again the impact that you have and by understanding the impact you have and you know i i think being it means you can have a bigger impact in your job right so yeah than a more healthy one so but how do you if you're if you're doing that if you're trying to build together different systems as a whole and trying to get i'm thinking large organizations like banks is a good example you're trying to build very tricky bridges between different things it feels like it'd be very easy for that to fall into always being ad hoc stuff building rope bridges between places that were never designed to be connected bridges are like or like those tarzan rope swings between them yeah i mean it's yeah certain occasionally falling off the rope and crashing totally yeah and it's a sort of alligators or something i mean that happens often right and so i think that's that this is exactly the result of not having kind of zooming out right having the bigger perspective this is precisely what happens and we see this all the time right i mean yeah most architectures especially as you get bigger you know bigger companies they're more like rube goldberg machines than they are something that has any coherent sense and and that's you know that's a symptom that's not a cause right that's a symptom of of practices and maybe generations of various departments or fiefdoms or kingdoms these organizations building things according to it their will and so forth and not recognizing maybe the larger domain in which they operate and maybe the larger enterprise and so so again you know data engineers if you kind of zoom into what specifically you know we think data engineers should do then this you know the the life cycle management that we described earlier that's you know that's again one lens through which to look at it i i can't say that maybe we've completely you know described the field but i think to the best of matt and i's abilities i think we did so right yeah there might be some pushback but it's fine it sounds like part of the job is always going to be persuasion as well like the social aspect of data engineering yeah yeah but that's the same in any field right i mean it's like software genetic persuasion and i mean my accounting is persuasion and so forth but it's you know persuade persuasion is just i mean yeah there's two angles says i mean this is something i harp on a lot in my podcasts and writings too is persuading and selling is just one of these things where i think it's a very underrated skill which we can talk about you know if you'd like but i think that that's the that's the end to the yang of being a you know technically proficient and whatnot assume it's great to be technically proficient but then being able to translate that into you know systems or practices that people believe in and people can buy into i would argue perhaps that's the harder skill to to earn and then to practice an organization but yeah i definitely think as an engineer you don't have to sell things for money but you do often have to sell ideas i mean well you are selling it for money in the sense where your paycheck does yeah yeah but i mean you don't you're not trying to get someone to write a sign a contract and give you money so much as you're trying to persuade yeah yeah exactly and even you well i mean even as an engineer you're trying to persuade other people on your team i mean this is sometimes the hardest part is especially when you have a lot of really smart opinionated people which tends to be engineering teams yeah you know vying for ideas i mean i'm sure you've been you decided in meetings with dev teams and and you know analytical teams and so forth i mean it these conversations are fun they can also be brutal you know and so it's persuasion is definitely a something where i think people should get stronger at and it's but it's also persuading in a healthy manner what i see often is when you get too many smart people in a room with opinions the risk of bike shedding you know what that term means yeah the real thing and that's that's the one thing where you got to have the situational awareness to know when you're entering the land of extreme naval gazing and pointless conversations so yeah and it sneaks up on you so yeah definitely okay so speaking of situational awareness maps you have you've outlined this data life cycle as a way of looking at the map of the landscape of data engineering so take me through your idea of the data life cycle yeah i mean so it's it's data life cycles really if you kind of zoom out you know to its entirety i mean data life cycles are very fractal right and and their feedback loops in each other right so if you take the general data life cycle when you know data is created and then things happen to it along the way you know morphs into different shapes and forms and you know and it kind of has this it kind of has an interesting like value stream map almost right i mean data data isn't just created for you know that just willy-nilly i mean it was there was an intention behind its creation and intention behind its usage and maybe an attention in terms of like when it's archived or when it goes away to die right and so you know in it it goes through different domains different processes different modalities and so forth different different data models and all this stuff right so the data engineering life cycle really encapsulates i would say the boundaries as they exist right now and again i'm open to changing this thought process as practices evolve in the future but as it stands right now you know a lot of data that's okay so data as a an entity or or you know versus data as a department you know distinguish between those because the terms overloaded but data as as a thing maybe that's used in applications right in various ways and shapes reforms but there's also this other thing you know there's this whole practice of quote data which involves maybe data science you know whatever that is we can talk about that analytics machine learning and many other use cases you know that apply themselves in non-application uses right so then there's this sort of a divide right now and again we can get into why i think this divides maybe artificial or maybe needs to go away but as it stands right now the role of a data engineer is basically the the sort of the the middle layer between applications and then the use cases of quote data and why did this come into being right yeah this this life cycle which we could talk about well it was implicitly something already done by data scientists i mean this old trope about data scientists spending 80 90 of their time getting cleaning doing stuff with data stuff they weren't trained to do stuff that they hate doing but they do it anyway because that's the whole trope they're supposed to do this and then the prerequisite to getting the actual job they want to do done right so how would you feel if 10 to 20 of your job was spent doing the thing that you're actually trained to do and the other 80 90 of it was spent doing all the stuff that you weren't trained to do and you kind of loathe that's the reality of data science i mean my my title on linkedin is recovering data scientists and you know a lot of that was born through just direct experience of having done this it's like i have to you know at some point i was like i need to build the systems in the workflows for me to be able to to do my job as a data scientist and i wasn't the only one this kept happening over and over i met my co-author and business partner matt housley he had a lot of the same experiences you know and so that you know and i noticed you know data engineering started coming into the fray and you know i think sort of this recognition that okay so software engineers you know they aren't going to manage this this life cycle of like getting data from applications you know transforming it for use cases storing it and serving it that's well maybe that's a data scientist but maybe there's a you know sort of this this you know this emergence of a new you know title i suppose data engineer that sort of just came out i think of an utter necessity to serve the use case of the data scientists because these data scientists these poor people for the most part they i think a lot of them like myself just went into data engineering out of practicality because like unless you build a foundation of getting the data to be able to do something useful with it you have no data upon which to do the science right so then you're okay so make that concrete for me how do you build that kind of foundation yeah it's well it's just that easy and just that hard right so it's like you gotta understand what your use cases are you got to understand what your requirements are you know what kind of latencies do you need what's what's who when you're serving data so when a data scientist is serving the end customer what's needed right it's not necessarily the data scientist that's the end customer the end customer is the person that's using that data for you know to make decisions it might be a machine learning it might be you know a machine learning model that's serving you know billions of users in an application right and we've talked about feedback loops in a bit goes back to that so the end customer is you know both human and machine at this point it's not just a person but it's the end use case in the end use case again if you want to take it to an extra another step the end customer is the end customer right so it's a user of an application with a machine learning model it's a it's a person who's impacted by the decision that's made by the person looking at the report and the decisions made from that and so you work backwards from those use cases and then you figure out what those you know what those what that foundation needs to look like right but i think there's certain immutables in the foundation you're going to need to ingest data from sources you're going to need to store it in some mechanism right or whether that's a very temporary storage you know in the case of streaming data that data still is stored as a log somewhere or yeah maybe it's a long-term archival you know or maybe it's available in a data warehouse or a lake house or whatever but then you got to have different ways of you know integrating and transforming data for those use cases you know maybe it's you know a dimensional model for a report maybe it's one big table for a report maybe it's you know making data useful for feature engineering for a model machine learning model that is so so there's a whole other universe and then of course there's the machine learning engineering universe which you won't talk about but that's you know a different parallel universe and but i always look i always look at things for the end customer right like who you know in the external customer typically like who's at the end of the day like how is this impacting somebody you know what's the use case then you work backwards and you figure out what that is but but the life cycle of data engineering as far as you know matt and i could tell that that doesn't disappear i mean i go under under we tried to you know we try to beat the crap out of this idea it's like okay so i under what situation would this thing go away i'm like i don't know as it stands right now unless you know the only time i see this this shrinking really or you know morphing is when software engineering and application data sort of become you know a lot more integrated at which point maybe it does right which we can also talk about and how that happens but well yeah this is so going back to the idea that you have that data is written with intention it sounds like you're saying okay so the application writes some data with a particular intent someone over there wants that raw data because they have a completely different intent and somehow it's the job of the data engineer to connect intent and i'm wondering if so you say that the data engineer has to be aware of the final intent but maybe they don't maybe it's their job to get data written with one intent and make it generically available in an unopinionated way yeah i think well it depends there's generic data i mean it could work i think depending on your use case maybe maybe not i suppose it depends on what you define as generic data one thing i've been thinking a lot about and it's not a new idea but my friend john giles so he's you know kind of one of these people who's like a put in the category of just like this yoda type person is yoda a person i don't know but anyway yoda writes yeah human rights so you know i classify i put him in that category where he's he's really thinking about the so i'm writing a new book on data modeling right now and i've really been thinking about data modeling from first principles and okay one of the things he describes in his books the nimble elephant for example is the use of patterns so data model patterns right so back in the like the 90s actually people were coming up with these generic data model patterns that could be used across industries right so maybe our manufacturing here's a manufacturing model pattern that you should use right and really you know as you think about this there are higher level generic modeling patterns you can use for example the party and the role as a classic example right so there's a party this might be a customer this might be a you know a i don't know a dog but they might have a role right and so forth and so these you know but these higher level abstractions certainly could be used i think to come up with quote generic data you know or at least i would say more flexible patterns of using data that's always what in the early days is what like cod was trying to get out with relational data right yeah data that was completely separate from the way you might use it yeah that was yeah exactly because back in the day you had like yeah ism and other approaches you know other databases with with different you know like hierarchical approaches or network approaches for example and like his model the relational model is really taking okay so if i take like set theory and you know and trying to apply that to data what does this look like and like the relational model is definitely i think definitely a wonderful it's not even a physical abstraction really it's a logical abstraction of the data yeah it's somewhat conceptual but more logical and and yeah so i mean people have definitely taken that but what i find interesting is you know if you ask application developers okay so show me the you know the relational model you're using right like the the what what normal form is your database in i've asked this to a lot of developers and you know i would say half of them don't even know what that means right now or maybe they may be studied it for a second in cs or you know their is class and then just you know so it's you know these abstractions are i think so it's it's interesting because i'm trying to reconcile the the notion of okay so data you know from this ivory tower standpoint where we view it as you know the the we can talk about the generic abstractions of data and the methodologies of getting there but then you know you try and balance that against the real world implementation of it at a physical level and it gets very fascinating because this data traverses through the life cycle right it you know applications for example if i'm an app developer hey maybe i'll just use i don't know mongodb and to store everything as nested collections you know documents in the collection and then i've seen some crazy stuff i saw people using like dates as like keys in oh yeah it seems very troubling for most use cases yeah yeah that that happened they were struggling it's it's really called us in they're like this thing doesn't work i'm like yeah show you why so you might not like the answer but but there's a flexibility right so i think because tools have gotten very easy to use what it means is and and people maybe don't haven't learned the you know the what when or why of you know maybe data modeling for example or other practices now it's like okay i'm just gonna throw data into this easy to use thing and you know this and then things happen and so and but then you start multiplying this across every every time data moves across its life cycle maybe for a different purpose now you know every tool is easy to use these days i would say overwhelmingly it's not like all it was 10 years ago everything's off the shelf for the most part it's like super easy to get into i always equate it to a bear trap easy to get into very hard to get out of and painful so you might lose a limb trying to get out of this thing and this is very much the way it is right now with data so to bring it back to the life cycle right it's kind of like if you're if you're aware of just the various stages that data moves and then your your areas of responsibility hopefully it at least gives you a framework and a lens through which to view maybe you know how how do you approach practices you know from a higher level maybe a more intelligent level because if you if you if you approach it from a very myopic view like i have to figure out you know that the cheapest way to finish my ticket for the sprint in a way that you know may cause insane collateral damage but whatever that's fine blow up the village if i have to to get to get this sprint done then that's what it is right now but that's the approach i think a lot of people take now it's sort of what what's what's the task in front of me and how do i do this just as quickly as possible and so the notion of the life cycle is ready to give you the context of the various things you should at least consider and you know if you're aware of the the life cycle and the and you know and you still want to ignore it i suppose it's your prerogative and you get to deal with what happens so okay so let's think more about that then so your life cycle is i've got the diagram just in front of me i'm going to read it off so you've got generation ingestion transformation serving to the final use case yeah let's i i think it's interesting that i mean there's a lot that's interesting about that and i guess you spend a whole section of the book unpacking it right but ingestion is always harder than you think it's going to be transformation is not doesn't seem necessarily a part of a danger engineer's job aside from changing data formats and serving is just a whole world of okay so technology choices yeah can you give me some concrete guidance on this ingestion's always hard because you're relying upon data that you typically have no control over right yeah so you're on the receiving end of it right so the data isn't yeah whatever format it happens to be in it's in whatever storage mechanism it happens to be in and you get to try and ingest that given a whole body of constraints that's super fun so you can do push or pull you know about your streaming you know the the world's your oyster i have had it so that's that's as you point out the very very hard part there transformation is an interesting one i feel like that you know is it is a quasi-optional section in some ways right in in the sense for maybe you you don't need to transform the data maybe you just ingest it and then serve it right you know in which case why not just go to the transactional system or the resource system and just get the data yourself right you can do a read replica from a database and just do it that way so but sometimes you want to store that data in a data warehouse maybe in its raw form and you're perfectly fine doing that and again i think it's you know so somebody asked me my friend larry burns actually asked me he's a really big data modeler too one of the people i put in the yoda category but he was i think bill inman actually asked me this too he's a guy who created the data warehouse but so these people are like why aren't you talking about integration i was like well we're about to you know talk about integrating data in the context of transformation right but then what happens when you have a stream that you have no you haven't integrated any other data with then an integration is not the same as transformation right integration could just mean i'm combining different data sources without a transformation step right and so okay right and so that's the delineation there and but with with things like streaming maybe maybe you don't need to right it's just the stream is a stream and so that's but i i think the the transformation is where it gets a bit interesting because that's where the data starts getting value arguably right so if data from a source system already has value i would assume that the data maybe accidentally or purposely had a data intention in mind not just the application intention so that's then you get bonus points for skipping over that one congratulations good job you're you're working really well with your your uh you know your application team or other people providing you the data and i think that's pretty awesome right but typically transformations where it gets interesting because you are having to you know either transform a a data set a raw data set into something that's amenable to analytics say we'll use that as an example so aggregations and you know different ways of molding the data for an analytical purpose that's often tricky right yeah because again the data from these source systems is often doesn't have a consideration of analytics in mind and so you know and then you know or if you were to take it a step further and transform data into something that's you know say a dimensional model like with ralph kimball came up with for a star schema that's you know a very well established well trodden way of providing analytics you know in a way that preserves business logic business rules and so forth and you know preserve those concepts that you know ultimately a business user when they're using the data you know can access it and understand it and so again it depends on your end customer right that's where transformation comes in and i feel like that's one of the chapters where i was actually least satisfied because i felt like and that's actually why i'm writing a book on data modeling because i felt like the whole notion of data modeling is just it needs to be i think re-exposed to a new generation of engineers whether they're software engineers data engineers data scientists whatever like yeah it feels like it feels like in jumping from the single machine relational era to the you know petabyte multiple servers we need new kinds of databases era we forgot a lot about data modeling oh yeah yeah and it's it's at a higher level too right it's high level modeling it's not even like how you physically implement it but it's like how do you translate business concepts you know in the way data is used in the enterprise and the enterprise is very enterprisey term but i'll use it but but okay so you know and again the way i'm seeing it is it's you know whether you're drawing on domain driven design you know as eric evans described it back in the day or whether you're talking about you know high level you know conceptual and logical modeling you know across the enterprise you know john giles calls it enterprise data modeling an enterprise logical model but like translating these concepts in in a way that you know these these can be reused across different aspects of the data life cycle and so there's no confusion right right now it's like when you talk about a customer for example right or a product these are two classic examples of things that get lost in translation and by the time it goes from an application where the engineers have one idea of a customer all the way to data scientists who may have a different idea of a customer i mean i think it just behooves us as as anyone who touches data to really take a step back and just have it unified way of looking at these you know business rules business concepts definitions and so forth but again easier said than done right we can pontificate all day but it's like but i think this is one of the central struggles of of where the data field is right now is we actually don't have we tend to operate very much in our own kind of a you know i said earlier the life cycle is very fractal and if you kind of zoom in on where people practice right so different different different intents for example become different silos and so that's you know one thing i've just been thinking a lot about but as it pertains to the the data engineering life cycle you know kind of bringing it back to that like transformations is one of these things where if you can get the data right upstream right the generation and the ingestion part well the generation part everything's easier you may not even have to transform data but you're transforming mainly because that's you know just how are you going to translate into you know various other intents down the down the road right and then serving you bring up serving like that that's that's a gobstopper i mean geez yeah that makes me wonder like this idea of pushing the responsibility for data upstream are you an advocate of like the whole data mesh data as a product data should be a primary concern within each department idea yeah i am yeah i i i'm a fan of i think the notion of data mesh i mean the book sitting over there and font size is slightly too small for me oh yeah yeah no worries yeah nj maxx a really good friend of mine so you know i i and so you know we talk often and i think that to me it represents a an ideal that i personally you know agree with i know some people don't but i i think that right now you know and it's ironic i wrote a book called fundamentals of data engineering but i feel like the distinctions between you know upstream and downstream consumers data i think this is largely reflective of sort of the struggles we've had in i.t for for the past few decades where you know the you know we have systems that you know make data and then we have to do analytics and all this stuff and and so but i feel like you know especially as we move towards you know data applications becoming more normalized and what i mean by that is like you know there is no separation between an application and the in the data if you know what i mean like machine learning application learning powered applications like uber for example like they're i don't think there's really a you know from a user standpoint it's not like i'm sitting there like okay now i need to go to my my other part where i'm going to you know access the data warehouse for my reports and stuff like that like you know it's just everything sort of moves in like a very harmonious way between application and data and back to application again and that's the feedback loop that i you know even in the last chapter of my book i write about where i think that's hopefully the norm but that also means you know data mesh becomes a practicality at that point you know and so it's but you know i mean there's there's a lot of i think there's a lot of interest in this notion but when you kind of zoom out and look at this the landscape of companies where this is going to be a challenge that's like most of them so yeah yeah we can get into if you'd like but i am a fan of data mesh to answer your question yes okay so the related to that and absolutely getting into companies where they're not doing that a friend of mine bobby calderwood we were talking about event storming like where you get all the different stakeholders in the business into a room to talk about what a customer actually means to us all and that kind of thing do you think that is a useful fundamental data engineering skill to pull people into a room and just thrash things out as a company i would say you know it's it could be i think if your organization is flexible to that type of a thing than sure if you're in an organization where you're told to sit down shut up and do your job then i don't know that you're gonna have much of a luck doing that you know hey everybody let's get together and talk about customers like can you go back to your desk there and just not talk to us yeah that is that is a lot of companies right i think what we're talking about so yeah yeah i think i guess what we're chloring at is is data engineering proactive or remedial are we trying to push the way data is done into a new future or are we just trying to cope with the way things are today i mean if you're asking me what i would prefer i would prefer that people are you know proactive and you know pushing things forward you know but but i don't know that that's the reality of most people's just intrinsic human motivations at their job i mean most people want to do the bare minimum and be as lazy as possible while putting in the appearance or trying to do as much work as possible so i mean i i've been around the block a bit so it's like not saying that i've you know seen but i've been around the world a few times i've seen a lot of companies operate and cynically that's how it is right i mean the the nonsynical version of me hopes that that actually happens and again you know the motivations for me writing the books that i you know the book that i've written and the book i'm working on as well as a lot of the courses i think is to you know to help urge people that you know there is a different way right like we don't have to be stuck in this old old school i.t mindset where we're just you know where data is a cost center and we just have to be on the receiving end of everything that happens like we can push and make changes in the business and in fact for for the business to be relevant it behooves us as an industry to really help drive that conversation forward you know so it's about getting out of your cubicle if you happen to be in one of those things or you know and just really you know i would say understand how you can help impact the business more but but again you know that that's what i want i mean i i i give very cynical responses because i i see enough to to be a bit jaded at the same time i don't give up hope that you know we can make a difference as an industry but i think because we have to right i mean what's yeah i talk a lot you know i talk a lot about this in my sub stacks really because you know and i've again you know people talk to people like bill inman you know quite often who's you know a really good friend of mine and he's been his programming back in 1960s i consider one of the people that like helped invent the the data industry to a large extent right and right you know and i asked him like why are we why are we so talk about the same stuff that i keep reading about like back in the day like you know adding value to the business and you know all these types of things and he said you know it's you got to recognize this industry is very immature right accounting has been around forever and thousands of years arguably if you look at a you know something you know hieroglyphics and so forth i mean i think argo villas are about accounting transactions and stuff so you know but data as a profession especially in the modern age of you know computing which i still considered somewhat modern it's like it's you know it's still new so we're still trying to figure this out right yeah which is nothing nothing in the grand scheme of things man i mean i'm reading a book right now a really good book called how data happened it's fascinating it's good i mean so you should you should read it too you know for the audience you should read it but it's a good book about just the history of our modern usage of data like statistics right like that wasn't always a thing oh yeah yeah you know and in fact people people you know sort of there was a period of time when people actually hated the idea that we were tabulating data you know and trying to figure out num you know way you know how was how how does this data describe society right and so that was only back in the late 1700s and early'00s and you know and so data collection is still fairly new in the grand scheme of things and so for us to you know as as and i i still think you know the the bridge between you know it and the business is still very real in fact bill and i were doing a you know an event last week in denver and he was talking about you know his biggest struggle the biggest one that he's seen in his career is what he calls a divorce between i.t and the business right and so you know i so yeah it's a real thing and he has his goal in life is to or his his wish you know is that hopefully that that you know divorce is you know mended and everything's fine and but it's gonna take some time but he feels like we're getting there right i mean the the silver lining as he feels like we're getting there and it's through i think discussions like this i think through just being aware right i think the problem is with i.t is you know to zoom in on that for a bit it's like we we tend to be very i.t centric and not focus on what quote the business needs the business on the other hand tends to look at it as a cost center you know by it i'm lumping in you know data teams and all this kind of stuff and yeah but you know what changes this is obviously when when data and technology becomes the center of the business so obviously in a new newer school companies or companies that grew up in the you know the internet era quote unquote you know in the mobile era now today you know it's a much better shot at doing this because there's no difference between technology and the technology is the business and data powers it and so that's the the main difference but then again back to you know the fact that there's a lot of these mature companies out there where that hasn't been the case it's you know the it's it's it'll it'll have to happen right i would hope so i would hope with gradually clawing our way towards the future on that yeah so we'll see what happens i mean every one of this adopt ai in the next year and it'll be all over you know everything will just be great so yeah yeah so i'm told so i'm told hey i am blockchain and we won't have any problems anymore nah it's all fixed yeah okay so obviously that's going to happen but if it doesn't happen and someone wants to do the hard graft of moving us towards a data future yeah give me a quick top three or four things someone should focus on learning to apply to their career hmm obviously you know get my book and read that that will hold all the keys to the kingdom here you know educate yourself right i mean it's so obviously you got you know you have to know the technical aspects of your job i mean that's that's me that's table stakes like you know know how to code know how to use your systems know the the best practices like if you're in a cloud like know how that cloud works maybe you know i dare say get a certification so you really understand how they want you to think about that platform i think there's some good steps get the technical you know foundation there the other things you need to do though are definitely not technical right and this is you know this is kind of what we were talking about earlier but it's it's the hard part is really taking those those that technical acumen and applying it to solving real problems i know this sounds completely cliche like i should be giving like you know a conference at a regis or something talking about this you know yeah yeah like add more value you know and all these like stupid tropes but it's it you know but people say this people keep repeating this because it's absolutely true right i mean it's the entire industry is it's still you know crying the same thing after a while you should probably notice this thing and this is this is where i think it's that hard right so it's but there are some ways to do this i think again learn the bigger context of like your craft and how your craft fits into a business so that again like the data engineering life cycle is if you're a data engineer that's at least one lens through which to view the world i can't say it's the only lens but it's a lens i think would be highly useful to you understand you know up up and downstream too like you know if you're working with a software engineering team like how are they doing things what do they want what are their goals like what are they incentivized by that's a big one like are they incentivized to finish their sprints or like what makes them tick because for you to work with an upstream team means you need to learn to play ball with these people they aren't going to play ball with you and the fact of the matter is they don't need to care about you right yeah and the issue is you completely rely on them yeah you need them 100 percent oh yeah so you better you better know how these people work and you better make some friends there for you you know don't go into this with a contentious situation saying you know i i demand my data look like this and blah blah blah blah be like yeah that's great you know i'll get to you when i get to you so definitely definitely you know develop a good rapport with people who you depend upon right for the data and then obviously downstream work with data scientists work with analysts work with people who are dependent upon you understand what they want maybe spend a day shadowing them just understand okay so like you know i wanna you know when a machine learning model is built like what does this look like and how is it used and what are you using my data that i'm providing you and then you know what happens to it and same with a report and i think having that empathy goes a long way i think the reason i you know gravitated towards data engineering was because i i really understood what the output needed to be right it's not like it wasn't a mystery it's like i know what a what this model needs to look like and i know how to get any work backwards and so it's about working backwards and forwards right again upstream you need to understand those systems that generate the data and the people who are responsible for for giving you the data i wouldn't say responsible of the people you depend upon to do it they aren't responsible for anything as far as their their concerned with you yeah so that's the reality of it yeah but then you got to zoom out right so those are immediates up and downstream stakeholders shifting left and right but then it's zooming out for the business like one exercise you know what one one thing i say it's not even exercise but it's like it's a practice a value stream mapping like yeah yeah that's i think that's an awesome superpower so it this is a practice that came from lean if you're familiar with that the manufacturing practice so mean is all about like lean's awesome okay so like you've heard of devops right i mean that that yeah got its start in an inspiration from lean lean is about like removing bottlenecks eliminating waste and providing more value to the end customer as efficiently and cheaply as possible and so value stream mapping is is a is a practice within lean where it takes okay so if i have an external customer yeah maybe you know so customer places in order what happens until you know from the time that water is placed until the customer receives what it is they happen to order right that's the value stream map right value means the customer provides value you get the value of their hopefully money or whatever they provide you but it's about mapping that entire flow right like what happens each step of the way whether it's a process or information flow this to me is like the superpower because if you can understand you know end to end you know how a customer how you provide value to a customer and then you understand okay so along the way there's data right data when an order is placed that's that's when that order is created that's okay so what happens after that right and then you know shipping confirmations all this stuff it's data flows right and then you know i think if you understand how that works that is a that's one of the most underrated superpowers i could think you could have as a data practitioner whether you're an engineer or a scientist software engineer whatever but just understanding yeah understanding like how do you impact bottlenecks right like where can you eliminate waste you know so one thing you know wasteful is is batch batch is inherently wasteful don't let things cue you know you know each process should pull what it needs so maybe that's a an argument for for streaming for example right where things just move in a continuous flow like why do you have to wait on things that's a cardinal sin and lead you don't wait all right yeah eliminate waiting stupid so just understanding waste right and what is what is waste what is what is necessary waste what is unnecessary a waste that needs to be banished right these are the things that i think lean really advocates for but i would say the superpower for you know practitioners and technology is just i think adopting these principles and understanding them i hopefully this is because if you have this perspective then you actually understand you start having empathy empathy with the business right and so i think that's yeah one of the things i'm trying to advocate for so i don't know if i'm like making success you know progress in that or if i'm just screaming at the sky but it's a lot of fun either way so yeah i can imagine it's funny this very neat parallel there you start off by thinking your job is to get from you know one serialization a json api over there to proto buffs over there but what you're really doing is not just integrating data but integrating people and ideas bingo yeah yep that's all it is that's all it is i mean you can make apis for their own sake but it's like that could be fun so that's not going to move the business forward right that's exactly it and that's i think it's the other day you know the other superpower is just understanding what the business wants so what we just said like what what are you doing and it's like again i feel like i'm i'm that guy in the the blue shirt and khakis at the regis talking about adding value to the business but at the same time it's like this that it that is the job right so yeah you know so and the particular technologies will enable it but you have to understand context and what your exactly what you're really integrating which isn't just bits and bytes right yeah yeah so okay we're ending on a hefty weighty business-wide note there which makes me happy to give you your fundamentals badge thank you yeah thanks very much for talking to us cheers anytime chris great talking to you man thank you very much joe i hope the book on data modeling goes well it sounds like something we do need maybe we'll get you back in the studio once it's published until then we will be speaking to lots of other guests so if you've got a suggestion for who we should be talking to please drop me a line i know there are some people out there who are happy to volunteer themselves this is good but feel free to volunteer someone interesting too i'll see if i can persuade them to talk to us as ever you'll find my contact details in the show notes but you don't need to do suggesting you don't need to do anything except maybe click like and subscribe and all the answers will be delivered to you in due course this is a data stream i'm very happy that people are subscribed to and we will pub your sub as soon as we can so on that note i leave it till next week i've been your host chris jenkins this has been developer voices with joe reese thanks for listening