all right programming languages are overrated learn how to use a debugger hot take but in my opinion this is the difference between a copypaste gremlins and professionals being able to quickly pinpoint and diagnose problems especially being able to debug multi-threaded programs is like a superpower for clarification i often see beginners fall into this trap of agonizing over which language to learn of course programming languages are important but they are worth building let's see but they but are they worth building a personality around it at this early stage what i'm proposing for beginners is take a half an hour away from your reading top 10 programming languages of 2023 and get familiar with your ide's debugger okay okay so there's definitely some problems here my one problem i have right away is that printf debugging is a very valuable skill to have okay learning how to set up your logs are a very important thing to have third some of us may use neovim and find it a little difficult to always be using the buggers inside my ide okay why do you got to bring that up maybe i like to use something other than than my ide for debugging okay but real talk obviously being good at a debugger is is great don't sleep on print f debugging i think a lot of people just sleep on it and they set up this entire environment to do debugging in which probably is better done with print f debugging there's some problems that i just have to get a debugger out i find that when i when i print something out and i get nothing like i have no idea and so then i print out a couple more items and i still have no idea usually then it's like the sign it's it's like the obvious sign that it's it's de bugging time right like i can't make any reasonable sense out of it in that small amount of time and so that's generally my rule of thumb which is i don't need to set up all those things i just simply have go what do you mean by printf console.log printf format do printf whatever you want to call it right lo loggers right i i really do like a good logging one thing i've been using a lot lately which i think has really helped is that for some typescript tests i've been running is that i i override just's default reporter and then i create a logger in which prints out to the standard out so i can still run tests via jest but it doesn't completely mangle all the output and put these huge spaces in between every one instead they give me a nice running and then inside the debugger something i've also been doing is i've been adding an indent and dent functions so that way i can actually indent it so it's like i'm walking down the tree of me logging so i can kind of see it happening it's been i've been working on kind of like a very technical and confusing program lately where it's just really hard to debug right you have to go through a function a bunch of times before it's super useful and sometimes you want to see all the things that happened before that function and then there's just so much context together that i find it sometimes difficult to use it a bugger and that it's a lot easier to use something like cat and grep to like see what happened at each state really like it i've been really enjoying it and then i prefix each line with the type and all that standard out is it's it's been great you know so i i i like this hot take like i genuinely like this hot take of debugging is a skill onto itself so is reading code you know i find that the more i work by myself on some projects the weaker i am at reading code and so now that i'm working on a group project again it's like dusting off some old skills that i haven't touched in a while and that takes more effort reading someone else's code is so hard sometimes which is so silly because i mean at the end of the day you're just reading code but like to have their mentality in yours has always been really it can always be a little bit difficult and so i'd say reading code may be as much of a skill need as a debugger if you want to work with people and being able to program and try to like maintain a team dynamic within the code base is really good not putting your own personal flare on everything also very good i know formatting is a thing but some people like a good example of this is some people like to use classes some people like to just do all functions everywhere but if you go into a code base and all they do is use functions everywhere you should probably follow that style but if someone uses classes everywhere you should just follow that style you know what i mean like adopting the style not just simply like the prettier config but actually adopting the style is very very difficult and i find that to be the hardest thing is trying to mirror so that way i try to write code in such a way that the person who originally wrote it would have to go did i write this or not and that's hard also that's like a whole different skill of the for the the love of oop is the root of all kinds of evil i'm on your team all sorts of evil has been brought brought upon us by the root by the love of oop i like this i like this hey learn the code you should love a language i don't care what this person says learn to love a language learning to love a language is going to give you a bunch of skills that you really need right you're going to learn a language deeply there's a lot of techniques and stuff you need to understand to be good at debugging you also have to have some knowledge of the language itself so learn to love a language learn to be a good debugger learn to read code and learn to program in a way that's different from the way you program there you go the end enjoy it enjoy that the name is don't forget to use a little bit of print f debugging also okay only used using a debugger is kind of crazy to me okay it's kind a little bit crazy a little crazy