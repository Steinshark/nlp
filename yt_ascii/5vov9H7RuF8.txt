hi everyone at the end of the last episode i gave the task of spawning in some falling blocks so i'm just going to go ahead and implement that quickly start off by creating a new c script call this falling block and let me just create a little cube object to act as the falling block so i'll attach the script to that and open the script up going to want a variable to control the speed of the block so just call that float speed maybe set that to seven and then in the update method you can just make this fall straight down by the speed so transform do translate vector 3 do down for our direction multiply that by the speed and multiply by delta time all right so if we press play now this should fall straight down so we can rename this falling block and create a prefab out of that by just dragging it into into the project so we can now delete it from the hierarchy i'm just going to quickly organize the project a little with some folders create one for scripts and put my two scripts in there another folder for the prefabs in our project of which we only have one currently and a final folder for the scenes all right let's then create a third cop script call this the spawner and i'll also make an empty object in the scene call this something like spawn manager and we can just add the spawner component to that and if we open that up we'll want to get a reference to our falling block prefab so let's say public game object falling block prefab then we also want to calculate the screen size in world unit so that we know where we can spawn the blocks in so let's create a vector two screen once again it's the half size that we're really interested in so screen half size world units and then we'll just set that in the start method so screen half size world units is equal to a new vector 2 then we saw how to calculate the half width in the previous episode so that was just getting access to our camera and getting its aspect ratio and multiplying it by the camera's orthographic size and then since orthographic size is literally half the screen height and world units for our y we just pass in camera. main. orthographic size all right so in the update method let's now spawn in a falling block we're first going to want to figure out where to spawn at those so let's create a vector 2 to spawn position equal to a new vector 2 so let's said it can be anywhere along the width of the screen so we'll use random do range between negative screen half size world units dox and positive the same value all right and then for the y axxis we want to spawn it in from the top of the screen so let's just say positive screen half size will units doy okay let's now instantiate so we'll pass in our falling block prefab pass in the spawn position for the moment we don't want to give it any rotation so we can just say quan do identity which just means zero rotation and that's done so currently this would be spawning a new block in every frame which we don't want so let's create a public float up here let's call it the seconds between spawns so say one spawn every second and then we'll also want to float called something like next spawn time all right so what we can now do is we'll say that if the current time in the game is greater than the next spawn time then we're ready to to spawn in the next object and when we spawn in the next object we'll say that the next spawn time is equal to the current time plus the seconds between spawns so once we pass the spawn time the spawn time gets increased by the amount of time we want between the spawns so that's how much time we'll pass until the next object is spawned okay let's go into unity and we're going to want to of course apply our prefab to the slot here so let's go into our prefabs folder drag that in and let's press play and see if this is working so the blocks are falling down from what looks to be random positions so that's very nice one problem is that when they're spawning in if i can just catch one ah here we go it's spawning in with its center at the top of the screen so we can still see the whole bottom half of it so when we spawn in the object for its y value let's just add half the object size so we know that the objects are at a scale of one and currently we haven't changed that we will be changing that later but we haven't changed that yet so let's just say plus5 for half the height of the object and if we press play now we can see that they get spawned in from above the screen all right so this brings us to the next task which is to give the falling blocks a random size and also to make some of them fall in at an angle so that their paths are a little bit harder to predict so as always i recommend you pause the video and try get this working on your own okay so to implement this we're going to want to head over to the spawner class and we'll want to specify a minimum and a maximum size is that the blocks can be so to represent a min and a max value i usually just use a vector 2 where the x value is the minimum and the y value is the maximum so let's call this spawn size min max and then in the update method just before we calculate the position we can say float spawn size is equal to random do range between the spawn minmax dox and the spawn siiz minmax do y all right and then as you know the instantiate method allows us to pass in a position as well as a rotation but it doesn't allow us to pass in a scale so if we want to set the scale of the newly instantiated object we're going to need to get a reference to that object so hopefully you recall how we do this from episode 11 we first want to see what type of object the falling block prefab is so we specified it over here as being a game object which means that we can cast the object returned by the instantiate method directly to a game object so we can say game object let's call this new block is equal to and then we cast by and closing the typee game object inside of parentheses all right so we can now say new block do transform do scale is equal to vector 2.1 multiplied by the spawn size so it will have a scale of spawn size on both the x and the y ais let's save that and go into the spawn manager object and we want to just set a min and a max value so so i'll say maybe somewhere between. 3 and maybe 2.3 let's play that so we've got these objects falling down and it seems to be a fairly nice range of sizes we've got going of course now that we're modifying the size the bigger objects are spawning in with the sort of lower half of them protruding onto the screen so let's fix that by instead of just adding 0.5 instead adding the spawn size divided by two and now that should be very accurate they should spawn completely off the screen okay so next we want to get the blocks spawning in at an angle and as i mentioned i'd like the blocks to fall in the direction of their rotations that they're a little bit harder to dodge this of course means that we don't want to rotate them too much otherwise they'll sort of flying off at all sorts of crazy angles another thing to quickly note is that when we're rotating like this in 2d this is a rotation around the z ais all right so with that in mind let's head over to the spawner script and let's create a public float for our spawn angle max and then over here we can say float spawn angle is equal to random do range somewhere between negative spawn angle max and positive spawn angle max all right so now that we have our spawn angle we know that the rotation of the object should just be that angle on the zed ais so to get a vector with spawn angle on the zed axis we just multiply spawn angle by vector 3. forward now we of course need to convert that to a quan if we want to pass it into the instantiate method and we've seen how to do this before we can say quan do oiler which is a method which takes in a vector 3 and returns a quan so into that we'll just pass vector 3. forward multiplied by the spawn angle all right so one very minor thing to just be aware of is we've done these calculations to make sure that the object spawns in perfectly above the screen but of course if we now add some random rotation we're going to get a little corner jutting in and it's relatively unimportant but of course to fix this instead of adding half the height on to the position we can just add the object's full height on so that no matter the rotation it won't ever jut into the screen so if we just quickly pop back in here instead of adding spawn size over two we'll just add the full spawn size to the object's height all right so let's go ahead and and play this of course we first want to set the spawn angle max so i'll set that to say 15 and let's give this a play so they're now spawning in at random angles of course they are currently not colliding so i don't actually have to do anything but if i pretend that i'm desperately trying to avoid these then it's kind of fun of course just to mention that if you didn't want the objects to follow their rotation then if you recall the episode on movement we can simply add to the translate method comma space. world and then it won't move it relative to its own rotation but rather relative to the world so it will still fall straight down no matter its rotation all right but we do want it falling in at an angle so we can change this to space. self we'll just leave it out entirely it's the same thing great so that's everything for the episode once again i'd like to leave you with a little challenge which is to detect collisions between the falling blocks and the player and to destroy the player object if the block touches the player so good luck with that and until next episode cheers