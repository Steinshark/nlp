hello everyone i'd like to spend this episode not implementing anything new but rather just making a few small improvements before we carry on with the series so let's head over to the player class and what i'd like to do first of all is just to remove all of the input from this class and move it to its own player input class so let's create a new c sharp script and i'll call this player input and up at the top here let's add a require component attribute of type player and then we're going to want to get a reference to the player script so in the start method we can say player is equal to get component of type player all right and then on the player script we're going to want to have a public void method called something like set directional input which takes in a vector two for the input and then outside of the method we want to create a vector two called our directional input and inside of the method we can just say that the directional input is equal to the input that we've been given all right so now we want to replace this input variable here with the directional input variable so let's just rename it with command r to directional input and then i'm going to cut this part out because we'll want that in our player input class and we can then just delete this and now everything is referring to the directional input variable up here so if we save that let's go to play input and in the update method let's just say vector to directional input is equal to this line and then absalom just add a semicolon so then player dot set directional input and we pass in the directional input all right now if we go back to the player class we can see that the other bit of input that we're doing is we're getting the jump button both when it's pressed down and when it is released so to replace that let's create two methods a public void on jump input down as well as a public void on jump input up all right and we can just paste this code for jump input down into the on jump in put down method and likewise the code over here into the on jump input up and we can then just delete these two input calls all right so clearly we're going to need access to the wall sliding blue as well as the wall direction x integer inside of this method so let's declare both of them up here wool wool sliding and in wall direction x and then obviously we don't want you to clear them again so we can just remove into there and remove blue over here all right so now we'll want to call on jump input down and on jump input up from the player input so let's save and in here we can say if input dot get key down key code dot space then player dot on jump input down and let's just copy that and paste it and change this to get key up in which case we of course call on jump input up great so let's go into unity and on the player object we're going to want to add the player input class and let's just quickly play this to make sure that everything is still working and it does seem to be we can still move around and jump so what i'd like to do next is just to tidy up our update method a little bit and we can do this by just putting some of the code into methods so let's just grab this velocity line over here and paste that up here so we've got all of our velocity code together and then if we just cut that out and instead just call a method called calculate velocity we can now create that method void calculate velocity and in there we can paste this stuff and then there's also create a method called handle wall sliding and we can call that immediately after we've calculated the velocity so handle wall sliding and if we just move this line down we can then put all of this code over here pertaining to all sliding into the handle wall sliding method all right so now our update method is looking much leaner and it's much easier to see exactly what's going on in this play of glass let's just quickly cut it out and paste it right up at the top here let's save and just make sure that we haven't inadvertently broken anything so just play again and just hop around a little bit make sure everything still seems to be working all looks fine so next i just like to make two very similar modifications to the controller 2d class first of all i'm not sure why i decided to use any vector 3s in this class since we never use the z axis so i'm just going to do a find and replace to replace vector 3 with vector 2 the second thing is note the name velocity over here now we can see in the player class that when we call the move method we're passing in velocity multiplied by time.deltatime so once we actually get this value in the in the control hed class it's no longer the velocity but rather the amount that we want to move so let's do a find and replace on velocity and let's change this to something like move amount or delta move i think i'll go for move amount so let's replace all alright and if we save obviously nothing's games have changed in the actual running of the game but that's just a little bit nicer now to better illustrate the last thing that i want to change i'm just going to come down to where we were drawing our debug rays and i'm going to remove this multiplication by ray length since that is making the ray very small and hard to see and i'll just come down to the second ray and remove the ray length from that as well so if we press play you can see that the number of horizontal and vertical rays is determined by the horizontal and vertical ray count of our controller to disrupt which is coming from the raycast controller from which the controller 2d inherits now this setup is a little bit annoying because if we change the size of any controller 2d object v at the player or a moving platform we're probably going to need to manually adjust the horizontal or vertical ray can't because if we forget to do that and say that these are spaced much too far apart and this will cause the object to be able to move through other objects if the rays don't collide so what would be better is instead of specifying the number of horizontal and vertical rays just to specify how far apart we want the rays to be and for it to then calculate the number of ray's needed from the to make this alteration let's head over to the raycast controller class and let's create a new constant float and we can call this the distance between rays and i'll set this by default equal to 0.25 we then don't need to give our horizontal or vertical ray count a value since we'll be calculating that from the distance between rays and we also don't want those to show up in the inspector anymore so let's add the hide in inspector attribute now if we go down to our calculation a spacing method let's first say float bounds width is equal to bounds dot size dot x and float bounds height is equal to bounds dot size dot y now to calculate the horizontal ray count we're going to want to see how many times our distance between ray's value fits into the bounds height remember that horizontal rays are the ones that are being cast out horizontally from the object which is why we're concerned with the height and not the width when we're calculating their spacing so we'll say bounce height divided by the distance between rays and we'll want to round that to the nearest integer so let's use math f dot round to int and pass that into the method i want to do the same thing for vertical ray count this should be equal to round to inch of bounds width divided by the distance between rays and if we save that that should work so going over into unity let's press play now and we can see that it's automatically calculated the rays 0.25 units apart and our collisions work very nicely let's resize this back to its default size and we can see that the rays have adjusted its also test this horizontally so i'll just stretch it out a bit and once again it has performed the job admirably alright so that is everything for this episode hope you enjoyed and i'll see you in the next one until then cheers