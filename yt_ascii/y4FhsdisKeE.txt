programming types and mindsets by the controversial figure david hh let's go one of the longest running a schisms in programming is that of static versus dynamic typing i'm pretty sure space versus tabs is the longest one i have heard a million arguments from both sides throughout my career do you know that if you hear one million arguments and you could hear them one argument per second it would be 11 straight days of arguments you know that thanks for the rate i forgot to turn off alerts but really like when you think about that that's a lot of arguments all right let's hear what he has to say but seeing very few of them ever convince me anyone of anything but seeing very few of them ever convinced anyone of anything as rationalizations masquerading as reading reason rarely do in matters of faith okay okay the writer will always justify the way of the elephant all right back to back platitudes don't know what's happening here i what are we reading that's not to say there aren't people who've switched camps in fact such individuals usually shout the loudest rationalizations of all often with the charm of a long a live life life long lifelong omnivores suddenly turning vegan or a traditional banker who caught a lucky ride on crypto the shorter the faith the brighter the flame okay platitudes here we go personally i am unashamedly a dynamic typing kind of guy that's why i love ruby so very much it takes full advantage of dynamic typing to allow the poetic syntax that results in such beautiful code to me ruby with explicit static typing would be a salad with a scoop of ice cream they just don't go together i should have said it coming next week on iron chef careful i'll also let's see i have a lot of thoughts right now but i'm gonna save it i'm gonna save it because i really want to hear this argument okay i want to understand the argument that's being made here i'll also confess to having embraced the evangelical position for dynamic typing in the past to the point of suffering from a one true proposition affliction seeing the lack of enthusiasm for dynamic typing as a reflection of missing education experience or perhaps even competence oh what folly like trying to convince an introvert that they that really like parties if they just loosen up a bit that actually it's really fun to be in a crowded rooms for hours on end shouting to communicate because how about that vibe these days i've come to appreciation the magnificence of a multiplicity programming would be an awful endeavor if we were all confined to the same paradigm human nature is too is much too varied to accept such constraint on its creativity could you imagine if all visual arts okay i'm not gonna lie to you this is like 97 platitudes one percent actual things and then two percent things i don't even understand what we're even talking about could you imagine if all visual art had to be rendered in the style of cubism you mean minecraft or realism or of or all novels in short direct flavor of hemingway what a more it would all be yeah okay okay it would quickly ruin the magic of programming the unique fusion of art and engineering what am i can i just get a can i just get a scoop of ice cream on salad already all right all right here we go let's keep on going but it took me a while to come to these conclusions i'm a require recovering solutionist so i when i see folks cross their hearts in disbelief that anyone anywhere might fancy javascript over typescript i smile and i remember the days when i recognized their zeal in the mirror that's not to say all matters of programming approaches boil down to equal but different mindsets there are limits to this or relativism but dynamic versus static typing is certainly within its confines so too is functional versus object-oriented programming polls on both of these access have shown to deliver excellent software over the deaf decades this is like kamala harris speaking it's just like it's we're getting a lot of platitudes right now i just want to hear something now people are blessed with the capacity to express themselves equally well from either end such ambidextrous nature seems rare though as evidenced by utter disbelief so frequently expressed by either side that the other might hold a reasonable what are you even saying just say some this is the most like this if this is every single time you hear anyone on tv having to answer a question it's just like what the hell did you even just say you didn't answer i just want to know what your position is sort of i kind of get it i'm not ambidextrous i do not enjoy static typing and objects animate my mind's eye but i have come to appreciate the fact that others illuminate their creativity with just as much intensity as i do mine using functional programming constraints and explicitly spelled out types as long as i never have to soil my ruby with tight pins or write all front-end code in typescript i can so happily coexist with those who adore go and can't stand javascript viva la devaronse soil me daddy okay so i'm gonna be real right here this is a shitty take here's why it's a shitty take and i know that he he's trying to make the pre-argument within this thing that you know there's people who are solutionists they suffer and it's the exact same thing as somebody who likes to not be in crowds as being in crowds there's not the thing is is that it comes down to two types those who believe that they can overcome runtime errors faster than the compiler can overcome runtime errors and these always come down to types they always come down to types and so do i think a compiler who has a greater view on a project can come come away with this should i write unit tests in which test types or should i write guard code in which ensures correct types or should i just have a typing system on top of it that does that for me and so for me i do not see that there is any possible argument to say that it is more efficient to forego types because i understand the program honestly if you've ever been in a team with 15 20 25 400 people all contributing to a similar-ish monolith code base the idea of being typeless is insane right always push checks to compile time because you cannot have reasonably in your head everywhere that something gets you know touched and it's i mean it's why i'm so explicit in typing it's why i push for return types it's why i push for types everywhere is because i want the code to tell me i don't want me to tell the code and what i mean by that is let's say you have a return type that you specify you create it into a type because it's a sufficiently complicated type you now have a named type that's exported that other people can use to pass around if i wanted to know within a large project who is using this type because just because you can look at function calls does not mean you know where the type is being used right where is the value being passed around where does it cross the function boundary i can do that i can use my compiler to tell me where everything is it's very hard to do that without some sort of compiler now you can argue hey there's js doc comments and that's as good as comments go right comments or comments i'm not really i'm not really into comments driving behavior something about that really bothers me right something about that entire idea really bothers me and so i just i just have this i just have this thing where it's it's about zeroing in the intention as quickly as possible and it is to me it's insane to suggest this this works if you do not push yourself and you work by yourself maybe you work with one more person maybe you work with two people well rich again rich harris is what rich harris is designing or designs felt to be if you look at the interview rich harris designs felt to be a system for people that like work in a news organization or work in some sort of rapid prototyping organization to be able to put out like cool experiences in a really small amount of time to me that kind of fits this idea that hey we're making a runtime trade-off and we're going to be using this thing to build something as fast as possible because it's one person working on something small that's way way different than 10 people that are changing over time working on a singular product for 12 years you know what i mean like that's a very different feel news orgs like cnn you know i think he works for the times if i'm not mistaken did richard harris work for the times i can't remember where rich harris worked right he worked somewhere but he developed things like in this isolation and that's why svelte is like this really cool kind of product that straddles a really weird line but this thing to compare types to like personality traits i do not believe it i simply don't believe it because it's it's more structural than that it's structural in the sense that where do you get to find the heirs i am a producer slash compiler error checking place i am not a consumer dynamic typing person just personal i prefer to hold the producer accountable i prefer the compiler to tell me where i'm wrong that's more on the engineering side and if it means i have to type a little bit more that's why i learned how to type fast it's because i'm going to be quick at it that's why i learned how to use copilot really really well it's because i want to be quick at it that's why i know how to use my lsp really really well because i want to be quick at it it has nothing to do with the fact that it's easier in any sort of sense i want the fastest amount of information and it always comes down to types always i know this article is crazy and i don't think that he has a very good argument for anything the end the name is the prime mission