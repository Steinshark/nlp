all right so java 21 apparently doesn't look that bad i actually have not looked at java 21 yet all right here we go let's look at this get the bits by the way anyone that's watching on youtube i'm currently getting follow bought it you can kind of see it going on right now i know look at how cool that is how cool is that twitch do something milky where are you okay anyways before we get started do something for me quickly if you haven't go install no shut up okay you know what give me the bits give me the bits hey first off don't tell me how to live my life okay we're moving on okay so so many of the features in java 21 build upon features first introduced in java 17. and in some cases earlier than that let's review some of those features before examining their final manifestation in java 21. anyways okay so multi-line strings did you know that java supports multi-line strings holy we're left in 2012 this is crazy this is crazy this is crazy okay look at that multi-line with triple wow i wonder where they got that from joe root root i wonder where they got this from i don't even know nothing too surprising easy to understand triple quotes and and stop the multi-line strings you can strip leading trailing and indenting space too you know what's so good okay so i hate to be a rust fanboy at this point but i'm gonna rust fanboy a little bit how rust does multi-line strings is a thousand times better can we all agree with that can we all agree with that like the fact that you can designate even inner and outer versions of it java has officially after the 20 000 how so so how it works and oh my gosh i didn't even have a terminal open clearly clearly posing i'm posing we're posing right now here i'll just do rust arduino arduino and i'll jump in here and i don't know why it's a bunch of underscores i did something here you can do something like this where are you what is it let foo equals r pound me daddy like this right did i i do that correct yeah and so that means if you want one on the inside you can do two pounds and then that means on the inside i can have a multi-line string inside so you could generate multi-line strings in your multi-line strings okay yo dog i heard you like multi-line strings so i gave you multi-line strings in your multi-line strings you know what i mean all right let's get going all right so records are one of my favorite features of java the freaking fantastic why what is it with exclamation points like do you really need to use them do you really okay what what are you doing here is this what you want your writing to sound like do you have a class whose identity is equivalent to the fields of this class i really don't know what that means okay so what does this mean class record test record jdk release event string name records throw exception event j would you actually write this test i want to ask i want to ask this question would you write this test i'm not gonna lie to you i refuse to write this test like i i will not write this test i refuse this i'm not going to test that a constructor constructs refute refuse this concise syntax i think we define the word concise differently which is okay it's okay it's okay to define words differently because i mean we do it all the time but i mean this is just different you know what i mean let's see in a class constructor associated storage in a course getters get name equivalence to two string implementations enhance switch let's go i rarely use the existing switch statement because it was clunky and usually there was other patterns like visitor pattern that got me most the benefits you know my least favorite part about the switch statement is that in prettier you cannot in javascript that is javascript the lord's java the lord that cursed the ground of course and gave us javascript that you cannot configure prettier to have a switch and the case statements on the same with the sim in the indentation lord or in the days of shut up with the say the eldon lord with the same indentation so you cannot make prettier simply have switch whatever i know we're in rust just deal with it and then case five you can't do that like you can't do that even though this just makes life less sucky you all indented it has to go ah all right anyways okay so the new okay what is this here's an example of reworking class switch to use the new enhanced switch okay what do we got here switch okay okay is enhanced switch just adding commas guys i think i figured out what's happening here you know in star trek when jean-luc picard ends up going to a more primitive society and they show him like their favorite things and he has to act impressed i'm just saying i'm acting impressed right now you are wrong all right this is the classic implementation okay good it's the classic one okay we feel better instead instance of wait hold on wait no never mind no no no way hold on this is a classic implementation with older clunkier switch statement this is the new one oh okay so this is the new one oh oh that's the new one okay hey it's an expression that's pretty cool okay it's like wow okay that's pretty cool that's totally wrong i was honestly totally wrong i was totally wrong and and incorrect here okay i was wrong obviously this is really cool technology in java is is very impressive the new instance of test allows you to avoid the clunky check and cast of your which looks like this animal object a new dog what okay yeah anyways if animal is instance of dog var fido dog oh they have vars they have vars now oh nice is this like some sort of you just don't it's like it's it just does some sort of what do you call it inference to kind of say its thing bark yay okay and replace it with this var this if animal instance of dog fido oh okay cool this reminds me of zig have you guys seen it what zig does for this thing the zig does effectively the same thing so if you're doing like an if check on a potential nil you get a capture group afterwards yeah so someone just had a capture group we've gone full or circle java is now copying c sharp i like the i like i like capture groups i think they're i think they're great i like the idea of having scoped lifting operators that make life easy i like that actually a lot and so this is kind of cool i mean this is nice that's a quality of life i mean really shocking that you let this code go with odd spacing right i'd be more offended personally the fact that you put a space in between a constructor call and the class than just forgetting indenting i'm not sure which is the worst part of this white space debacle going on these both these code examples makes her hate people if you're writing a blog post just take the three minutes to make sure that you got the correct formatting on okay the lack of indentations plus spacing before constructor function just makes me want to you know gently jabble my eyes out the smart instance of automatically assigns a downcast variable for this use in the scope of the test there's no need to specify the class dog twice okay beautiful sealed types oh yeah let's go technically sealed types are a part of java 17 2 but they don't buy you much yet the basic idea is that in the olden times the only way to limit extensibility of a type was through visible modifiers public private etc sealed keyword you can explicitly permit when classes may subclass another class this is fantastic leap forward because it gives the compiler visibility into which type might extend a given type which allows it to do optimizations and help us at compile time to understand whether all possible cases say an enhanced switch expression have been covered sealed interface animal permits bird cat and dog so when you create an interface you now say which classes are allowed to implement it isn't that like inverted use of interfaces isn't the point of an interface to use it correctly okay i i'm very like in in all realness i'm going to be completely real here i'm genuinely confused as why you would ever want this right here in the sense that an interface is usually defined and you don't know who's going to implement it whereas in this case you're creating an interface and you know who's going to implement it just i i we must be reading this wrong here i mean i like these i i do actually okay the the switch cases aren't bad can we all agree that switch case ain't bad okay maybe i over made fun maybe i over made fun of it i over made fun of it see the reason why i don't like that is that i i'm not sure how you would specify these things differently you know what i mean actually what am i doing let's go to x cali draw i feel like xcal oh my goodness i'm in light mode hey don't look at this don't look at this stop looking at all the stuff okay don't look at go versus bun okay stop looking at go versus bun stop looking at it okay don't look at go versus bun okay it's not worth it stop looking at it here let's go away okay now that we that we went away all right so you have your interface right animal right this is great i'm still using go colors right now and then what makes this good is that or what i'm seeing here is that i'm a little bit confused by this right there's like a dog there was a dog class in there the animal has to know about the dog class and the dog class has to like doesn't it create this weird like typically what you want with a with like the interfaces right your eye animal or whatever you want to call is that you only want this to know one direction dude why can i never get arrowheads to work correctly right it dependency inversion inversion right yeah it's the inverted interface it's called dependency recursion it's confusing to have it go both ways it's for exhaustive checking yeah i guess okay so so the benefit is that you get to have exhaustive switch cases so it's it's it's an attempt to provide safety in switch cases and exhaustiveness right is that is that fair i hate it i hate this okay yep we have an explicitly sealed interactive that only allow that permits three types the enhanced switch statement yeah classes that implement the switch there because the okay so here's the problem here is that you have to go here every time you want a new version of animal you have to first go here add it to your list of lists then you have to implement it then you have to update your switch statements it's it just feels weird that you don't just implement it and then it warns you your switch statements are effed up and this one right here seems also jacked up right like how does it even know also where's the else if it feels like to move it honestly just feels like a really bizarre bizarre coupling there must be a really good reason for this it reminds me of the two-way one to one it's the two i'm not sure if i like that okay i'm stuck on it let's move on beyond chapter 17 all these things combined we're starting to to wade comfortably into java 21 land from here on down we'll look at features that have come out since java 17. next level pattern matching with record switch and if okay there we go let's go enhance switch expressions and pattern matching are remarkable and it makes me wonder how using akka so many years ago would have felt using java with this excellent new syntax pattern matching has an even nicer interaction when taken together with records because records as discussed earlier are the res resumes the resumes of their components the resumes of their component and the compiler knows this okay so can hoist the components to a new variable too okay let's see so we got a bunch of records okay hey record record okay cool cool cool oh i see oh i see what they mean now with records the constructor is literally the entirety of all their properties and they contain nothing really to them so it's just like record user it's just like it's just like specifying a type it's a struct oh okay i just didn't think about it it's just a it's it's a struct right i don't know what a dto is i don't know what the equivalent okay i'm stupid i'm stupid that's okay my bad my bad on this one it's concise it with implicit equals and and oh really okay that's kind of cool i guess all right so case okay okay i can like this i can hey i can like this this is cool hold on hold on what's happening here i want to see these one two and three look at this there's an if a shutdown event and then these two we have a special case where if we get a particular event we want to shut down not produce a string so we'll use the new pattern matching to support if statement all right so we get an if statement going on here if instance of shutdown grab out the instant can you i assume you can also use var here and then you can print this thing down right here nice nice nice i can like that all right all these things started to take root in earlier versions of java but culminated here in java 21 and what you might you might call data oriented programming it is not a replacement for object oriented programming but a complement to it you can use things like pattern matching enhanced switch and the instance of operator to give your code a new polymorphism without exposing dispatch point in your public api okay i love how my pi and python cache catches exhaustiveness there i'm not sure what that means but okay sorry i just read the first statement that came that i saw there are so many other features with java 21 there's a bunch of small but nice things of course all right let's see improvements in mathematics okay division divide exact isn't that just integer when i'm confused ai and algorithms efficient math let's see mathematics is more important than ever the new jdk has let's see some nice improvements here including parallel multiplication for big integers oh and various overloads for division that throw an exception if there's an overflow not that there's let's see not just if there's a divide by zero error oh okay divide exactly so it throws exceptions for anything that is a over let's see a overflow exception okay parallel multiply big integer two that's kind of cool that you can do parallel multiply i'm not really sure what it means to tell you the truth though how can division overflow it can underflow can it let's see okay let's see future state if you're doing asynchronous programming yes there is a thing even with the project luma then you can you'd be pleased to know your old friend future t now makes available state instance that you can switch to see the status of the ongoing asynchronous operation you handle your own future cases in java that can't be right i mean this is nice to be able to say hey where are you at a little bit surprising that this is a that this this this that this is even a thing i'm a little bit confused by this but okay i i wonder what i always get very confused as to why you'd want to do this i'm sure there's a reason that i'm missing i bet you there's some low level api that really just wants the super fine grain control over everything i'm just not sure that i understand why you'd want to do that the future is now old man enterprise only okay fair auto closable http client the http the http client api is where you might want to wrap async operations in the future and use project again project loom is mentioned many times the http client api has existed since java 11 which is now full 10 releases in the distant past but now it has a spiffy new auto closable api all right so we create a new api we do this we do a new little builder we're gonna go to adobe.com apparently we're going to send the request again the spacing is just murdering me can we just can we just get this can we just get this spacing please assertion equal status code get the body and then it closes this we want to close the http client automatically note that if you do launch any threads and send http requests in them you should not use auto closable unless the care is taken only when you reach the end of the scope okay let's see where's the auto closable where do you see auto closable in here is there some sort of configuration that i'm missing here the try oh the try is auto closable oh okay okay so at the end of the try it just auto closes okay oh it's in the oh i yeah i totally missed that triad parentheses okay this makes a lot of sense that's pretty cool you must have to implement some sort of interface and then it just automatically works try try try stop trying you know at first you don't succeed try try again string enhancements a lot of men need string enhancements as they get older i used hp body handlers of string to get the string response in that example you can do all sorts of objects back let's see you can get all sorts of objects back not just strings but string results are nice because there's great segue to another fantastic feature in java 21 the segways are unstoppable the new let's see the new support for working with string instances this can show let's see this class shows two of my favorite repeat operation and string builder okay i mean quality of life feature okay that's a quality of life feature i love how everything you are saying has been cool in c sharp for years but you hate c sharp no bisco i think this is stupid too okay this has been in this is even in javascript for for years at this point python's had it since forever like literally forever okay sequence i don't think we need any explanation here let's see modern c sharp looks sort of nice okay people love c sharp i get it i get it i don't you'll need an order collection to sort those strings instance java offers a few of them linked hash map list but they don't have common ancestor now they do welcome to sequenced collection hierarchy will continue until morale improve improve in this example we work with a simple arraylist string and use the fancy new factory methods for things like linked hash set this new factory method does the same math internally to guarantee that it won't have to rebalance and thus slowly rehash everything before you've added as many elements as you've stipulated in the constructor let's go this syntax is crazy by the way this is the craziest syntax i've ever seen linked hash set hmm this is like a a micro turbo fish this is a micro fish you slapped a fish new linked hash set what does this go now like what okay is this rust what does this go like what are we doing here it's a it's a micro fish it's a nano fish also fine let's see let's see list instance of sequence collection okay okay we get the secret okay so then we can add add first this overrides the first place to element okay this returns okay yeah yeah yeah yeah yeah yeah yeah this returns to first place element interesting wow okay virtual threads and project loom love this project loom whatever loom is it's looming over us finally we get to loom finally you've no doubt heard about a lot about loom undoubtedly [music] undoubtedly at this point dude comments are on xml i told you xml is better than the ammo the basic idea is to make scale is to make scalable the code you wrote in college that's never been a statement i've ever once thought of or thought was a good idea ever in my entire lifetime but okay let's fight let's find out you shouldn't take anything i wrote in college what do i mean by that let's write a super simple network service that prints out whatever is given to us we must read from the input stream and accrue everything into a new buffer and then when we the request finishes we'll print out the contents okay yep the problem is we might get a lot of data simultaneously so we'll need to use threads to handle more than one request at a time okay try execute oh this is the new try thing try server socket new server socket 9000 while true okay we get we get the new we get to do a little except little berkeley sockets submit okay try handle request yeah yeah yeah yeah yeah handle request i don't know what about bow is bows byte array output stream give me that bowels baby try input string while next read put it in there okay string it print it let's go okay that makes sense bowels bowels that's pretty trivial networking 101 stuff create a server socket wait for new clients represented by the instance of socket to appear as each one arrives hand it off to a thread from a thread pool each thread reads out the data on the client socket instance input stream references client might disconnect experience latency or have large chunks of data to send all of which is a problem because there are only so many threads available and we must choose not to waste our little time on them we we're using threads to avoid pileup of requests that can't handle fast enough absolutely but here again we are defeated because before java 21 threads were expensive ah this is the old green thread argument here they cost about two megabytes of ram each and let's see so we'd pull them in a thread pool and reuse them but even here if we have too many requests we'll end up in a situation where none of the threads in the pool are available they're stuck waiting on some request or another to finish well sort of maybe we're just sitting there maybe for the next bite from the input stream but they're unavailable for use the threads are blocked they're probably waiting for data from the client the unfortunate state of things is that the server waiting on data has no choice but to sit there parked on a thread nobody allowing or not allowing anybody to even use it wow this is beautiful now java 21 introduces a new sort of thread a virtual thread this must be a brand new concept now we can create millions of threads for the heap it's easy but fundamentally the facts on the ground are that the actual threads on which virtual threads execute are expensive so how can the jre let us have millions of threads for actual work it has vastly improved the runtime that now notices when we block and suspend execution on that thread until the thing we are waiting for arrives then it quietly puts us back in another thread the actual threads act as carriers for virtual threads allowing us to start millions of them introducing at least a decade ago standard features introducing set timeout from javascript circa 1995. okay that's pretty cool well i mean that that's pretty cool wow what year is it 2005 yeah yeah i still don't know what loom is they really they really debated us on this whole loom thing okay loom test oh yeah concurrent skip list oh java's concurrent data structures are pretty they're pretty badass okay i must say that the concurrent the the concurrent data structures are badass in java you they are they are badass you don't have to worry about mutexes at all and they're just like one of the fastest out there is on the market this is really the code i run college this is legitimately the code i wrote in college it's true at least this is yeah no it really is amazing indentation the indentation yo dog i heard you like four space annotation shut up i like eight yeah right i like eight yeah right back to four we're using a new factory method in java 21 to create virtual threads okay this is great i don't honestly i that's you know i want to love java okay i don't actually i don't actually care about loving java i don't care loving java but if i did want to love java you know if i wanted to love java i feel like i'm happy to see that java's making forward progress into catching up into the past that's a good thing and i'm sure this makes a lot of lives a lot of people's lives better because remember can we be can we be a can we just like a quick second here remember java is still like the most used enterprise backend language you know it's like used everywhere and so defense obama but hopefully this is gonna make some people's lives better so but we're all still using java 8. fair i started in 1.6 and then touched java 6. and cried and groovy so i don't know what happens beyond java 6. other than in groovy you can add lists together with the plus operator okay the plus operator okay that's all you need to know you got a list you got a list just add that just add it together you guys have java 8. we're still a java four is java 4 even real java 6 is practically another language these days yeah so it's you know i hope that a bunch of people get to enjoy these really great developer improvements and i do know that these new javas i mean java is fast for a compiled bytecode garbage collected language it is shockingly fast language they've done an amazing job with a lot of parts of it so i ca it's hard for me to completely knock it down it's partially interpreted it's wild right to me what java is is that it shows that you can you can write things that shouldn't be fast pretty dang fast it's impressive okay it's impressive it's impressive that it can happen but at the end of the day i would never want to write java much rather i go and another thing i think something that's really cool about java or at least to think about with java is i wonder if the hermes engine for javascript is trying to take over this java this java hold you know what i mean kotlin these nuts absolutely do you know what i mean like hermes there's something kind of exciting about hermes and what it's doing i'm just throwing it out there just throwing it out there the java hole that it left in my heart also in my emotional capacity it left a couple holes in me okay java left more than one hole in me but it filled a couple holes at me you know what i'm talking about you know what i'm talking about the name this is the java jen