in the last video, if i remember correctly 'cause it was a good month ago now. i drew a graph out and we worked through it with dijkstra, and at the end i pointed out a couple of problems. so let's just remind ourselves about those problems and then when we'll talk about a star we can see how it addresses it. the problem is with dijkstra that it will follow the path currently shortest and that -- and doesn't pay any attention to what direction it's going. so if i'm coming down here to my end goal, and i'm starting up here, that's fine if the weights are all the same because it will look at it up here and there, but i'll get there quite quick. the problem is of course if you've got the map of the uk and it's searching quickly down all nice motorways when in fact actually we don't need to go down the motorways because it's a country road drive or something like this. now, course in practice, it wouldn't take very long still because your computer is quite fast but the whole point of these algorithms is they're quick and you can imagine if you're writing a sat-nav, you don't want it to take a long time churning for the roads unnecessarily. the other problem is, if your graph doesn't look like a map because, you know, in some sense the uk road network isn't quite sparse but the most of the country doesn't have a road on it. it's mostly fields and sheep and stuff. but, you know, all houses. if you have a situation where you've got a quite a dense network like this, so i guess you could say a bit like manhattan. but also just, you know, another problem where your graph structure is different. so if you're looking through an image or something like this. i'm starting up here and cross that out. there we are and i'm finishing down, i don't know... here. let's remember that dijkstra follows the shortest path based on the distance of each of these. now, if it is just a uniform grid, let's say, we have no interesting information to provide for these weights and all these weights say one so it's just gonna to flood fill from here. it's gonna go here, and then here and then to these three and then to these four, and so on and that's not very optimal. especially if we just literally want to go straight down here, like this. so we want to build in some kind of idea of, but not necessarily the direction we're heading but we are at least going towards our goal, so we can aim for it. and that's what a star does. a star is basically a small extension to dijkstra that builds in a heuristic that says we're getting a bit closer. this is our nice screwed up graph from last time and this is our nice new fresh graph that i've done which is, topologically exactly the same. i may have traced it. so, we could do dijkstra on this. i've got my little cards for my priority queue. i've reminded myself how the end condition is so i can end it properly. that's all fine. what we want to do is extend this to a star. now, a star is basically exactly the same as dijkstra, except it has an additional heuristic that is how far do we have to go. and, in this case, a pretty reasonable heuristic to come up with will be literal euclidean distance of how far we have to go. so, in this case s to e will be that far, c to e will be that far. and so on. i couldn't think of a good way of calculating this without literally just measuring it. so i got my, got my... dainty 10 meter tape measure, which is a little bit overkill. but we'll, you know, make it work. so this is all a bit odd. i don't use tape measures as much as you can imagine 'cause i mostly sit at a desk and do typing. this is a tape measure in centimeters and inches. let's use inches today. alright. imperial, woo. so i'm gonna literally measure the amount of inches from s to e, and then a to e, and then i'm just gonna put this on here now. and this is where you fast forward. so, i'm gonna use it, the black pen for this. so let's say this is 10. there. this is harder than i thought it would be. i haven't got enough hands. 8... 6... i'm rounding up a bit it's not very accurate. 4... so the green ones are our step distances from dijkstra and the black ones are measured inches. also 3, 6, 7. we're getting there. 6 again. alright. that's me doing my workman's... now: we've got exactly the same graph as before but now we have some measure of the distance to our thing. it's not a very good heuristic in a sense that my measuring is not very accurate and for a star to work really well, you have to have a consistent metric and you have to, not overestimate how far you've got to go. things like this... but, we'll just hope it works, sort of work itself out.... you know, it can't be any worse than me you know, doing it by hand anyway. so, recall when we did dijkstra. what we had was we had some queue here like this. these had the current distance from the start to these nodes. and if one of the nodes had a shorter path, it would move up the queue and then when we wanted to expand a node we take it off the queue. a star works exactly the same way, except the distance isn't what we ordered them by anymore. it's a distance of the path plus how far they have to go. so for example. b, the distance is going to be 2 plus 7 which is 9. alright. so b will have a value of 9 on this queue. and the idea is that if something has a long way to go, it's going to receive a higher weight and be further down the queue and expanded later. what it will do is prioritize nodes, that are going roughly in the right direction, unless... i mean it will still go down really good paths, really short paths. but not at the expense of everything else, it's the idea. ok, so let's run through this just like we did with dijkstra and hopefully i won't make any mistakes. people will very kindly point them out if i do. oh look, look. checkered flag. this is why i don't draw things, because it's not it's never good... right, okay, we're starting at s. i'm not going to draw the infinity symbols on because we know that all of these nodes start with a distance of infinity because we don't know how far the path is. in dijkstra, we store the distance to each path, and we also ordered by that distance. we've now got two separate measures we're measuring in a star: one is the distance to the node, and one is the distance to a node and any remaining distance. so, we kind of need to have two values on each of these things. so i'm going to try and keep the colors the same so that we don't lose track. so anything i draw in green is going to be this 'g' cost function which is the distance to a current node, so for c that would be 3. and then, in black i'm going to have 3 plus 8 which is the sort of combined cost; the thing we're actually ordering by. ok, so the path cost to s is 0 and the sort of distance to go is 10, but it won't matter because s is the only thing in our queue. so we'll put s in the queue but everything else have a distance to infinity. so let's start expanding some stuff. so a first. a has... i gotta find a mate. fast forward. oh here we are. why aren't these in alphabetical order? i mean, you know... what was i thinking? right, so a has a distance of 7 and a combined distance of 9 plus 7 which is 16. the same for b. same b, b, b... again b. i mean it's actually at the end. unbelievable. so i'm gonna keep seeing it at the top now 'cause i know that's coming. ok, so b has a weight of 2 and a combined cost of 7 plus 2, which is 9. so, i'm gonna put that in there. now, b goes in the queue and goes ahead of a, because 9 is smaller than 16, right. we're keeping a track of these green distances. we're not actually using them to see which one comes next. and then c. c has a path cost of 3 and then a combined weight of 11. 8 plus 3. and then that goes in just above a like this, right. so actually, so far, pretty similar to dijkstra, apart all the numbers are changed. so what's next. we start expanding b. i haven't been keeping track of the previous node so all of these currently there's the storm in red all are going through s at the moment. ok, so b next. we can go to a. a has a distance of seven when we deciding whether the path to a better via b we don't care about this heuristic, we only care about the actual cost of it, the path to a, so in this case 2 + 3 is less than 7 just like with dijkstra we're going to replace it so a, its new weight is going to be 5, and 16 is going to be 5 + 9, so 14, right? and this now, this path is going through b, not.. do you think i can turn this into a b? oh yes, there we go, look at that. so it stays below c, it's not a big deal. ok, d... let's find in my shuffled list. if you're implement this, don't shuffle it because it'll be a lot harder to find in memory right, there we are. b has a path length of 2 d has a path length of 4, so that's a path length of 6 and d has got a distance of 8 to the end so actually you can see here that d is traveling forward in this direction, but is actually getting further away than b so these going to be quite heavily penalized that's our hope so d is not going to be expanded for a while we're going to look there until it's a last resort so 8 + 4 is 12, and that path goes through... you know what, i'm just gonna leave the lids off. and that goes through b. so put that in. and that goes above a because a is a terrible one, remember there's a fallen tree on that one, but it still could be back and then finally h. now, h has a path length of 1 which is nice and quick, b has a path length of 2 so the total path cost is 3 and the actual heuristic cost is 3 plus 6 which is 9, that's 9 in here, 9 is looking pretty good right now. now h goes straight above everything like this, right? b is about to pop out so that's good. so b is finished, and we put b on our finished pack. huh, finished stack... finished list? finished data structure over here. next up is h, right? now, last time we didn't expand h next, we expanded c next in dijkstra because they had the same rough paths cost which is 3 and c was already in the list so now we already started to move a little bit faster with a star which is good because it means my example is working so h comes off and let's see where we can go we could go to f, so that's easy, i'll find f f has a past of 3 + 3 which is 6 and it has a distance to go of 6, so that's a total heuristic cost of 12 and it's going through h. right, this goes in and it will come in behind d here with a path cost also of 12, right, in general if there's a conflict will just put the first on in you know, depends on your implementation g has a path cost of 3 from h plus another 2 so that's 5 and then plus another 3 is 8. ok, we're done with h g goes in right to the top which is good news for us, for our nice elegant search. so we're going to expand g, so where's e? but i'm not gonna go off half-cocked this time and finish my algorithm here. g has a path length of 5 and so e has a path length of 7 see now i've drawn this checkered flag and it's in the way of my numbers, thanks for the suggestion there. right, e has a heuristic cost of zero because we're at the goal so actually 7 is the final value that we get given here and this goes through g and we're going to put e in, so e goes in here g is not really on the stack anymore. g can't expand anywhere else, we've already been to h and so the next iteration of the algorithm starts, right? we popping off the top we're about to expand it and we realize that's where we're going and we finished our algorithm ok so then just like before we trace back through so e goes to g and then... where's my g? there it is. and g goes to h, and then h goes to b, and b goes to s, and s is the start, alright? so we've got our path, s-b-h-g-e now in this case it's exactly the same path as dijkstra because i picked a fairly reasonable heuristic, right? plus or minus a bit of my dodgy measuring but you can see we didn't bother to expand c or l or even consider i and j many fewer nodes got put in the stack...in both terms of the amount of computation we did and the memory footprint was reduced and we still obtained the same result. so there were one or two comments on the last video about not expanding those but you're saying that on a star you definitely don't have to expand those, no. the comments on the video were because basically i forgot to wait until e was expanded to finish, i got overexcited and as soon as i saw e, i declared it over when we went and got coffee and yeah and that's not right because technically speaking there could have been a path from say, f to e, that was super-sneaky and really quick, right? i'm sorry, super-sneaky is not a technical term you see in the literature, and if that had happened we have to wait until e bubbles to the top of our priority queue to be able to know for sure that we've got the shortest path. in this case it was very straightforward, e went straight to the top, but you can never guarantee and a different graph will have a different thing so the actual stopping criterion for both dijkstra and a star is when your goal node gets to the top of your priority queue. but yeah that was good that people pointed that out because it completed the video with a bit of extra comments. to wrap up you can imagine now that we've seen a video on how that works in terms of gps positions and we've seen a couple of videos on pathfinding and there's lots of videos on data structures in this you can imagine now that you might start to think i can actually not see how that might be implemented i could see you know the parts of the system that have to work together we've got a map that stored in the memory we've got nodes that we're trying to get to and from, that we've got an algorithm that will find a way through now, you can imagine also that it's unrealistic to expect a small sat-nav to completely compute its way through the uk but if you saw "i what the best path from land's end to john o'groats" you might melt your sat-nav unless you do something a little bit smarter so you can imagine they might precompute some of these things but they know the shortest way of getting from nottingham into london is via the m1 or something like this to sort of hard code some of it in some sense to be honest i don't work for a sat-nav company, i don't know what their proprietary algorithms are, but you can see this is the kind of thing we're doing we're trying to find a nice elegant way of getting from a to b and there's lots of pathfinding algorithms and you could come up with lots of interesting heuristics, not just euclidean distance also of course they're going to have a gps to measure up in your dating that i mean yet although i would say vps often has an accuracy of possibles few meters so it was shoddy measuring tape is actually pinpoint precision compared to that still have maps are carefully crafted would be exact known positions of all these junctions and they know how long it takes to travel out the roundabout and they know how long it takes because of traffic and think about this they're going to be doing a lot smarter or albums and i'm doing but this is a start and you can see you could build this up into a really good system