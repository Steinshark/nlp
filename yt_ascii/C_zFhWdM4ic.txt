what i would understand to be a filter is perhaps slightly different from what people who use instagram would describe as a filter usually in an app or camone app or facebook or some other thing where you can apply some filter it's going to actually be a combination of lots of low-level processing of various types you know blurs contrast changes color changes what i tend to use in my day-to-day work would be the lowlevel things gaussian blurs edge detection this kind of stuff but really they're all filters and they all take some image process it and come come up with some output today we're going to look at a simple technique called kernel convolution and that is kind of the core of gaussian blurs and mean blurs and edge detection and lots of other things and it's a fairly simple technique that we use a lot around here with our computer vision work kernel convolution is just a process where we take a small grid of numbers and we pass them over the whole image transforming it based on what those numbers are and by using different numbers in the kernel we can perform blurs or edge detection or sharpen unsharpen basically any effect we like so i'll first describe kernel convolution and then we'll look at a couple of examples of what sort of kernels that we see a lot of kernel convolution works by if if this is our test image that's 5x5 and this is our kernel which is 3x3 so generally speaking the kernel will be smaller than the image and usually actually quite small and what we do this is my movable kernel that we've come up with what we do basically is for every pixel in our image we put our kernel over it so that the pixel is in the center so let's look at this pixel here number 64 we put our kernel over it and then we are looking at the 3x3 grid centered around that pixel and we take whatever values in our kernel multiply it by 17 and then the top value and multiply it by 14 the top corner value and multiply it by 13 so we take each corresponding image value and kernel value we multiply them together in pairs and then we sum the whole thing up and then finally we normalize by dividing by the total value of our kernel to make sure that it doesn't get brighter or darker so it's a bit like averaging like we did in it's exact it is averaging yeah in a way it's just a big weighted average or if all the numbers are the same an actual average so in fact that's the first one we can look at so if if all of our values in our kernel are one then that's a mean blur so if you go into adob photoshop or any other image processing package and you go for blurs blur filters and mean that's what it's going to be doing this is a kernel of size three you usually will do it obviously centered around a single pixel so odd sizes so three 5 7 and so on so what we're going to do here is we're going to go 17 * by 1 plus 14 multi by 1 and so on and divide the whole thing by the sum of this which is nine and that will basically take an average and then we'll overwrite that pixel with the output of that kernel convolution the only thing to make clear is that we should output these to a different image because if we overwrite them as we go it's going to make mess up the math as we go down i use blurs to remove noise from images before i process them in other ways for my job some other people might try and remove noise from images just to make them look better or you might try and blur the background out in a photograph or something like that and you can achieve a lot of effects just by convolving a kernel over an image you move it around for every pixel and then you look at whatever window that is the size of your kernel the only other thing is that if you're at the edge then you've got to make some decision as to what you do here so you could ignore those ones and they wouldn't contribute at all or you could wrap the image around or you could duplicate the edge ones you could do lots of different things generally speaking i would just ignore them and then do a slightly smaller averaging for the corners that'll mean that the blurring around the edges is ever so slightly less than the blurring elsewhere in the image but just in the last edge pixel in a 5 to 10 megapixel image probably won't make much of a difference so that's a very very simple kernel if we go for a slightly more complicated kernel we can go for the normal distribution the gum blur so gum blur is extremely common probably i suppose the most common blur it's a little bit more controlled and edge preserving than a a mean blur and so a lot of people like it so a normal distribution is a bell curve so if we have our axes there and we draw a bell curve and the standard deviation of this curve so the standard deviation is essentially the average distance from the mean of all the points will determine how wide this bell curve is so a really large standard deviation will have a really large bell curve okay it should be symmetrical and a really small stand deviation will have a really tight bell curve which is essentially really prioritizing the the weights in the middle now if we wait these numbers based on the values from our normal distribution then we get a gum blur an example of a a very small gum kernel would be a 3x3 so these values are going to be you know floating point decimal values but we just simplify it a little bit so four two on the edges and one now the crucial difference between this and the mean blur is that we prioritizing those in the middle the further away you get from the pixel of interest the less weight you have in the combined average and that's important because it basically means that you're not going to be blowing too much where where there's an edge let's say a sharp change in intensity as you approach that edge you're not going to be taking too many of those pixels and this galaxian blur can obviously get a lot bigger so in your image processing program you might have an option that says standard deviation or radius and what that's really referring to is a standard deviation of the normal distribution of the produced f kernel and also the width of the kernel so we have to increase the size of our kernel as the radius of the gan function increases this is a very small normal distribution if this was a bell curve it's it's it's really steep if we had a bigger standard deviation then we're going to need a bigger window to be able to hold enough information this isn't near big enough so let me draw a test image and then we'll do a blur on it and we'll see how it works so okay so this is a good sized image this image is pretty basic it's an edge so we've got an ed area of 50 intensity and an area of 100 intensity just put our mean one here as well just for comparison so if we do our mean first so we put that on let's say this this 50 here which is right on the edge okay so we put our kernel on there and we're going to be doing 50 * 1 plus 50 * 1 plus 100 * 1 and so on so it's going to be 100 200 300 400 5 600 and then we divide that by nine and that gives us 66.6 okay and we'll round it to the nearest integer value for a gsum blur with this gum blur here we're going to be doing 50 * 1 plus 50 * 2 plus 100 * 1 and so on okay and that will be a value of this is where we cut so it's a th000 these add up to a th000 divided by 16 which is 62 a2 so ever so slightly closer to these 50 values on this edge than perhaps the mean blur was it's subtle but the the the edge has been slightly preserved and generally speaking we're giving more weight to the numbers really really close to us these very low-level filters these are the sort of filters i will use in my day day-to-day work to alter images that i that i need to analyze but on facebook and you know on all these camera apps for your phone you'll see a lot of other perhaps more complicated filters bloom you know sepia vintage ones that make it look like some camera from the'00s or something like that and really what they're doing is nothing hugely complicated they're just chaining together lowlevel image processing so a grayscale filter maybe a bit of blur and then some kind of border to make it look good and things like this so really these kind of filters at the core of a lot of the stuff that you see even if you might not know it