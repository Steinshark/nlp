- games are going to look
better and play better, thanks to this new tech
powered by the humble ssd. that might not make any
sense like for years, we have been saying that storage speed does not matter for gaming,
but now that microsoft's directstorage api has finally
been released to developers, that changes. it's now possible for your gpu to load data directly from your ssd. and it's only a matter of
time before games supported. but why does it matter where
your gpu gets it data from and how is this going to
make your games better? and how am i going to
load this sponsor segue directly into your brain? - .tech, last year .tech
domains gave away a ton of awesome prizes with their
break the code puzzle contest. and this year they're gonna
take it to a whole new level. try and break the code to win today, using the link down below. (upbeat music) - in my opinion, directstorage
and sony's equivalent have always been underrated. because we can't turn
it off, we can do a side by side to see how much
of a difference it makes. so it's always been this
weird nebulous thing that we can't feel, and now
that it's finally on the pc, we can get some real answers. now we don't have games to test right now, but microsoft did give us
a peak at what it can do. the first there's a
simple, hellodirectstorage that's designed to get developers
acquainted with the api, but more importantly, there's
a miniengine modelviewer. this is intended to show developers the difference directstorage
can make when loading assets with a real world example. why don't we have a look for ourselves? this is the modelviewer,
what this lets us do is basically show the
difference between directstorage and not directstorage. so these two commands that i'm cycling between here have the non-directstorage and directstorage versions respectively. so let's launch the
non-directstorage version first and see how long that takes to load. okay, not too bad. and then we can look around, it's not a very complicated scene. it's actually quite, quite
small for what it is. it's not like the unreal engine five demo, but it is a whole bunch of assets that are just loaded in here. we can see that took 0.33 seconds for everything to start up. now let's go with directstorage. okay, you can see the same
thing is happening here. we've got the same overall set of assets. and if we get out 0.08 seconds. i cannot overstate how
much of a difference that is. this one little scene,
just 52.4 megs uncompressed is loading nearly three times faster. now true we're talking
fractions of a second here, but expand that out to hundreds of megs even multiple gigs of assets
loaded by modern games, and that's a lot of time saved. but now i have two questions, first, how does it save so much
time on the same hardware? and second, how will it scale
with those more detailed game environments? in order to understand
what's going on here, we have to understand
how assets are loaded into video memory. the reality on pc up until
today has been that the asset is first read from storage to the cpu, then placed into system memory, your ram. from there, it's copied through
the cpu again to the gpu. now this sounds like a roundabout
process, and as we've seen in our demo it definitely
slows things down. but up until the mid two thousands
this wasn't a major issue because you'd usually load everything you needed all at once. what changed?
streaming assets. as open worlds became larger,
and as consoles available video memory shrunk in comparison to pcs it became increasingly common
to need to use more textures and 3d models than could
be held in memory at once. this was foreseen as early as 2001, when sony filed a patent to
seamlessly load game worlds as boundaries are crossed,
eliminating the need for loading screens. fast forward to today and
loading screens are seen as an unnecessary inconvenience in an age where seamless
asset streaming is the norm. you usually only see the
first one and then again when you die or when you fast travel. ever noticed how today's
games connect areas with elevators, or tunnels, or hallways? yeah, that's why. there have been attempts to help with this over the years. compression was one of the
first such concepts introduced. and in fact, one of the earliest methods is still in use today. prior to that, you had to
either shrink the dimensions or use a color map to reduce
the memory footprint textures and after its introduction
of adoption by the industry, it enabled larger, more detailed assets to be loaded more quickly even if they still had to be
copied from the cpu to the gpu. compression paid the way
for graphics to leap out of the crunchy nineties visuals and into brown muddy
two thousands visuals. hey, it was good for the time. it also paid the way for another attempt to improve performance,
this time in the same way that directstorage does. by cutting the cpu out
as much as possible, texture atlases effectively rounded up all the little textures a scene would need and then plop them into one giant texture. the end result being a dramatic
reduction in the number of textures that needed
to be copied to the gpu. and more importantly,
for the time, the number of draw calls that had to be made. sounds like a great solution. what do we need directstorage
for 'em am i right? well, texture atlases have some drawbacks. you can't tile them,
colors will blend together around the edges of each
subtexture in the atlas, and perhaps most importantly, swapping one or two individual
textures requires swapping out the whole atlas, which
is really inefficient since they're so big. the nail in the coffin texture
atlases were becoming a thing around the same time that
streaming assets became popular, talk about bed timing. directstorage solves
all of those problems. it allows the gpu to read
directly from storage without any intervention from the cpu, meaning that an entire copy
step is just being removed from the pipeline for each and
every asset loaded this way, which as we've seen leads
to a significant reduction in load times. that means that not only
can game worlds be larger and more detailed with shorter or even no loading hall ways, but you won't need a
massive gpu for it either. since lower end gps with less
vram will be able to swap assets in and out more efficiently. i can see game engines
becoming more aggressive in terms of how they tweak asset streaming according to available vram
to maximize the effect. and i can see you in a
swacket from lttstore.com, seriously, it's comfortable
for most of the year and doesn't look half bad either. but what about our second
question, will directstorage scale for larger assets? well, for it to be able to, the gpu first needs to fetch the assets and b, compressed them. this is a problem. well, yes i said before that
gpu support compressed assets, this is a different type of compression. with games being as massive as they are, assets are typically stuffed
into giant compressed archives to save space and for more
efficient distribution. prior to directstorage,
the cpu handled all of this and that was fine because
it was all going through the cpu anyway. unfortunately directstorage
in its current form doesn't include a way for the
gpu to do that decompression, at least not on pc but it is possible. nvidia has something similar to how sony's dedicated ps5 hardware handles
this, which they call rtx io. when it's enabled, decompression
via custom hardware or via the gpu itself will
be significantly faster than it is via the cpu at all full stop. and as a bonus, it's decompressed
straight to video memory. so that performance boost we
saw earlier will be amplified because we're skipping two
steps instead of just one. but as long as data has
to pass through the cpu, directstorage won't be super useful. microsoft says that
fixing this is a priority so hopefully we'll see
it before games go live. the alternative is games that
ship with uncompressed assets, which i mean with how big
call of duty has gotten with compression, i sure
hope you got a big ssd. why is it taking so long though? microsoft just had directstorage
on xbox for ages now and we're still getting
table scraps on pc. well, it's easier to
implement a brand new api like this on a fixed
platform that you can control both the hardware and
operating system for, and consoles are usually the platforms with the greatest initial lead. asset streaming for example
was to my recollection anyway, first seriously explored
on consoles at a time when the available vram
compared to a contemporary pcs was laughable. regardless it was a problem
at the end of every generation since then, and even the eight to 10 gigs of memory that the xbox series is and the ps 5 have, is going
to seem extremely limited in 5-10 years. to stay relevant for longer
than the xbox one and ps 4 did, they need tech like directstorage
that will offer game developers the flexibility
they need to crank up the visual fidelity or
create evermore sprawling open worlds we crave. supporting directstorage
on both windows 10 and 11 is also no easy feat, but
microsoft says that windows 11 will work better thanks to enhancements to the storage subsystem. something that we're going to have to test in more detail when games get released. get subscribed so you
don't miss that by the way. and that's really it. it'll be a while yet before
we see games coming out with support on pc, but it's
getting really close you guys. and when it does finally drop, it's legit going to change
the way the games are made. won't change my sponsor segues though. - nzxt, their new function
mechanical keyboards are perfect for those looking to join the
mechanical keyboard community. you can choose between mini
10 key lists, 10 key lists, and full size models. all the keyboards come with
hot swappable switch sockets, a detachable usbc keyboard
cable, and per key rgb. plus they're rated for up
to 50 million key presses. the nzxt function retail
keyboards come with the option of white or black colors with
gutter on red key switches. but countries with nzxt bld can choose from five different kinds of switches and a variety of color options for a custom look to match your desk. learn more and purchase your
own nzxt function keyboard using the link below. - thanks for watching guys. go check out our recent
video on the radeon and pro ssg for an earlier
approach to this kind of thing. different purpose, and
didn't quite catch on, but hey you never know
what the future holds.