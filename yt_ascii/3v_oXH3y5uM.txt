have a degree in engineering or science do you know why there are two main reasons for this one generally speaking engineers can think logically too engineers are good at math one of the major reasons i was able to get a job at google without a computer science degree is because i am above average at math now i cannot teach you all the math i know in one short video you anyway don't need most of it to become a programmer let me do this i'll share five essential math skills that will get you 80 there the rest oh man i am so curious at this point because at this point i'm like i think that's about to come out of this i mean i want i i want to know i actually am i i want to know what he has to say because you know always have an open mind going into these videos but i just feel like i just don't believe anything this is a little bit asmre the guy is just full whispering into her ears so just let it tantalize over your body okay gets tantalicious all right here we go five oh man i'm just as you encounter new problems but why do programmers even need math imagine that you are a software engineer at google and you are given a critical problem to solve many google users are not able to access the web so this is one thing i've never just enjoyed about videos in general there's a there's a huge amount of like precursor or foreplay to the video and i always want things to be you know i'm not gonna lie to you i i want things to be fast like i don't even know why i just want to hear the five you know i'm just that kind of person too much foreplay for me you like foreplay some people love foreplay yes some people do like foreplay they love it i feel like it's kind of like i feel like the foreplay is like definitely like i have to here i'm gonna go 1.25 website because of an overloaded server this problem is getting worse with every passing minute just because the client side is configured to do an automatically try after one second for every failed call you talk to a senior engineer on the team and she recommends using exponential backup for retries what does exponential mean taking a power math skill number one let's find out you ask her she points you to the documentation if your math skills are not good it might take you a long time to understand and implement exponential piece of the algorithm even after reading the documentation in the meantime the entire internet traffic will see a huge drop because for many people no google means no internet now if this example doesn't convince you it is an even more important reason to learn math most tech companies conduct coding interviews to see if you're a good fit for the role and whether you like i would be super curious honestly i'd be super curious how many people right now hey type one in the chat if you think you're not good at math type one in the chat if you if you're just not good at math you wouldn't put yourself in like the the strong math department okay so a lot of people are in that one category all right type 69 in the chat if you think you're good at math if you think you're good at math type 69 okay so there's a lot of people there's we're looking about half and half that's what it looks like just with my extremely scientific measurement here all right so follow-up last question type 420 in the chat if you thought you were bad at math but you understood what exponential back off was type 420 admit in there give me a 420. give me a 420. if you could if you knew how to take it exponential here yeah that's the thing is that i feel like there's a level of math that you need to be good at for programming and i'm you know i'm i'm just gonna i might just give you my hot take here very very soon oh my goodness did you just give me a 420 binary the man's unbelievable chat is trolling definitely but i mean the thing is is that being good at math in extremely basic math competency such as exponential i don't see how that is that is something unique or special you know because it's rather simple but hold on let's let's let them cook okay let the man cook like it or not they ask algorithmic style questions in these interviews at the end of the interview the interviewer usually asks you time and space complexity of your solution in order to answer these questions and actually get the job you need to know some basic math concepts many people who come from a non-cs and non-engineering backgrounds have hard time answering these questions that's why i've chosen the top five math skills for today keeping these interviews in mind number of you who pretty much and don't want to go through them and i completely respect your position but for the vast majority of us i actually don't mind technical interviews my big thing about technical interviews is that there's two of them right there's the question in which involves a specific data structure with a specific algorithm so find a cycle in a singly linked list right i hate those kind of questions you don't really learn anything from the interviewer like if they didn't figure out what somebody figured out as their phd they don't get the job i find those kind of interviews very stupid but like some of my favorite interviews always come down to like a very specific problem that you kind of find when you're developing libraries one of my favorite ones to ask is async request queue which is hey i have a cue it returns a promise and you have to hand it a promise factory when they call the promise factory your job gets to execute the async request you can only have up to three running tasks at any one time implement it right there's no fancy data structures like you can just say hey i'm using an array i know a queue would be better but for now we're just going to assume performance is not a big issue we're going to use a q or we're just going to use an array and i go like this yeah you know why you don't want to use an array but you're using array for simplicity let's go it's a great question it's a great solid question that has no tricks and if you know how promises work underneath the hood you're going to dominate it if you don't know how promises work it's gonna be really hard for you right you may know how to use async await but that doesn't mean you know how to actually use promises and that's to me is like really really really really really important right so it's like i'm trying to find something that's like more than just some stupid got you programming because i learned nothing from those other than like how well can they learn from me under pressure while standing in front of me in front of a whiteboard it's a stupid it's stupid right you don't learn anything that way we don't have the luxury to give up on our dreams just because we don't like one step of the process this video is for those people let's learn some math to learn the first concept we need to start with an exercise here is a piece of code that contains a for loop nested inside another for loop what is the time complexity of this code in other words atheist what is the time complexity chat type it out right now what's the time complexity it's not n squared you dingles it's n log n yeah it's n log n it's not n squared you guys didn't look at this part right here i mean this is just crazy code right it's right here j equals j times two yeah you guys didn't look at it you gotta keep your eyeballs open i know dude it just and log n it's at login i know you just saw two for loops in like any normal human being you would have just done that actually but how many times will this code print hello world for any arbitrary value of n this video is going to be interactive so you can pause the video and leave the answer in the comments if your answer is order n square or n square times then you're going to benefit a lot from what i am about to tell you most of the people who are everybody in the chat go watch this video okay go watch it you need to go watch it because you did not get it okay look at this you're getting the ringer right now get the hell out of here go watch the video consider and squid do it because they confuse the code i gave you with this other piece of code they see a nested for loop inside another and immediately conclude n squared which is the wrong answer in this case so i will say that this type of question if i were to walk into an interview and this was the question i would not only get the running time correct i would also chastise the interviewer for this i would i think you should too this is just like gotcha [ __ ] don't don't do this don't like get people with like specific little little code review like like that's the thing is i'm not here to trick you i want to want this basic understanding my goal as an interviewer is that i want to see do you understand programming my goal isn't to leave little tiny bits of information that you know you may or may not see right like your gut instinct to go oh that's n squared totally right because you looked at these two things right like that's just that's normal nature this is just this is just weird programming right this is just weird it's just weird ass programming yeah the most evil part is it's not using plus plus and like if i saw that in a real interview i would be pretty upset i would i would not only get it correct i would correct them and tell them that they need to come up with a better system for trying to judge a candidate's potential not like try to trick them you know understand why that is let's think from the first principles looking at the code it's obvious that the outside for loop runs end times each time there's outside loop runs we go inside and run this nested loop k times we don't know what the k is at this time but we'll find out shortly so in total we print kn2 and hello world statements now if you look at this other easier and more popular piece of code the internal loop also runs n times but that's not the case in the code i gave you what i want you to take away from this is that whenever you have a that happens x times and every time a happens b happens y times b will happen a total of x into y times now to know the value of k in the last exercise that's a that's a good little thing right there honestly that was a good that was a good little way he put it honestly take that home and think about that i'm actually surprised at how like a lot of people are very weak at basic big o this is this is a really good way to put it right here it's it's surprising because it's not big l stuff is not that hard you know what i mean three times b will happen a total of x into y times now to know the value of k in the last exercise you need to know the second concept so here is a question for you you're given a stick that is 32 meters in length you break it into two halves you throw the right piece away and you break the left piece into two halves again you throw away the right half and keep breaking the left piece until you have a stick of length one meter left how many times did you break the stick in total you can pause the video and leave the answer below if you answered five then you are right here is an interesting observation about the answer if you take two which is the total number of pieces you break the stick into every time and if you take five which is your final answer and you multiply 2 to itself five times you get 32 which is the original length of the stick in other words 2 to the power 5 is 32 whenever you have an equation like this 5 is called the logarithm of 32. technically speaking it's logarithm to the base 2 but in computer science people usually think in terms of logarithm to the base two i was hoping for something that was a little bit more let's let's go to the next section because i don't think this is very exciting i don't feel like this is very exciting you know what i mean for that i have another question for you how many three digit numbers can you make by using digits one two and three given that you can use each digit only once you can pause the video and leave the answer in the comments if you answered six then you are right classic i asked the same question for nine digit numbers using digits one to nine without repetition can i do that one in my head i don't know if i can do that one in my head if we can do i don't know the equation i feel like i should know this equation by now is it just is it just nine factorial i don't know how to do that one in my brainz is it eight factorial or nine factorial i can never remember if there's a minus one or not a minus one okay it's nine factorial okay yeah i can't you know it would take me a little bit to get there to answer this question you will need to know what a factorial is let's understand factorial using the three digit problem okay we call the first is a day second one b and the third one right we're gonna skip we're gonna skip out on this because i think we i think we know this i'm gonna give a real hot take at the end of this three digits one two and three permutations right if you go for example i gave you for factorials you will see that now we have so this is the one i can never remember yeah that makes sense it's called explanation or exponential let's try to understand exponential backup based on what we know now in the exponential back of it i don't know how i just made that jump exponential back off versus repeating numbers i don't think i don't think i i don't think i drew a connection there algorithm we will do the first retry for a field request after x seconds if the request fails again you will increase the wait time for retry by let's say two times the request fails one more time you increase the wait time by two times again and you keep doing it if you look closely the wait time for retrying the field request is increasing exponentially here yeah hence the name exponential back off one of the main characteristics of something that i'm not good at math i'm not good at math all right so i'm gonna give you my hot take on this one uh here's the thing if you really want i mean all those seem like very very basic utilization of math you don't even need to know the terms to be able to do most of that in your head comment or factorial stuff i've literally never ran into a factorial problem or something that needed factorial anything in the entirety of my career but let's just say you do you now understand it but here's the big thing that i think would benefit every single engineer a hundred times over which is going to be some basic stats not now i'm not just talking about the average but also being able to calculate the median why is the median better than the average why should you use the median more than you should use the average what are quantiles if i just said hey give me the give me the 10 25 50 75 and 90 of the problem like give me the give me those things like why would you even know how to do that like for me that is a thousand times more useful in any like situation yeah it's exactly it's the outliers it's exactly the quartiles are good outliers quantiles however whatever you know what whatever you want to call it just being able to have a larger breakdown of what's happening and how to calculate that stuff is really really really good like having some basic understanding of distributions what's a normal distribution where do you observe a normal distribution what's it alpha beta distribution like can you do a random number generation based on a normal distribution why would you even want to use that what are you using that for like some basic small stat stuff and i'm not even great at statistics like i i never took a class in it i've only learned what i needed to learn on my job but it's it's extremely extremely useful in a huge number of things and so i find that like if i could recommend one piece of math understanding it is to go and to understand distributions like in some basic stats the reason being is that often you'll find yourself arguing about behaviors with other other engineers being like hey why like why should we implement feature x over feature y or you do like an a b test and you have some like result of the a b test and now you have to make hypotheses built on the results of this because often you'll have like a multi-part a b test right it's almost never just like i mean simple ones are like we change the button color from blue to red okay i get it hrbs always work huge red buttons but there's more complex things that take off where it's like you're actually thinking about a problem over multiple iterations and so you're trying to derive meaning based on some things you're seeing and so to be able to understand like kind of what's happening and to argue why things are happening it does require a basic understanding of statistics like even just a very basic one we're talking about you don't even need to be able to pass like you know to take to statistics 101 there's even like week one statistics 101 you'll be doing pretty dang good honestly and so i just find that that is like one of the most missing set of skills and it was missing for me too very very much so it was missing for me and i really needed it and i found that it has only helped me in almost every part of my career knowing that and so five math skills i think programmers need could be just i mean honestly the guys he he produced a very well you know build video it's obviously targeted towards very beginners i think it's a really good video he did a great job but you know real talk as someone who's been in it for quite some time the only skill you need is basic stats understanding invest in that linear algebra is great but i don't think you're going to run into a lot of linear algebra right you're just not you're i i just i have i have never ran into it but i also didn't do gay programming so if you're doing game programming you obviously don't have a little bit of math okay you're gonna have a ton of math and so if you do something that the average web developer the average application developer will never ever ever run into learn some stats if you're going to be doing anything to do with graphics learn the [ __ ] out of linear algebra you're going to learn green's theorem going to multi-vector or multi um gosh what is it called multi-derivative calculus you gotta learn all that crap you better be good at it laplace transforms better be your better be your jam