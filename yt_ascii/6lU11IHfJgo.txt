you're probably thinking gorgeous c plus plus that's not even possible and surprisingly google agrees with you as every c plus programmer knows the language has many powerful features but this power brings with the complexity which in turn can make the code more bug-prone and harder to read and maintain to address this google has a c plus style guide that not only addresses the style of their code but their use of particular c plus features that are known in the industry for being problematic in terms of code readability in this video we will talk about google c plus style guide as it applies to the style of their code like tabs versus spaces but also their opinion on the use of certainty plus plus features one of the notable ones being inheritance without further ado let's dive into it starting off with one that's particularly controversial tabs versus spaces use only spaces and indent two spaces at a time we use spaces for indentation do not use tabs in your code while this rule may come off as draconian and extremely pedantic remember that google's style guide is built with thousands of engineers in mind the reason that this matters for a code base that's reaching that many people is not everyone has the same configuration in their editors because of this the tab width of a single tab character may be different from one engineer to another in place of this by using spaces with a set two space indentation requirement it makes it so that the code is more likely to look the same between editor a and editor b and no you don't have to be that person that slams their spacebar key instead you can configure your tab key in a lot of editors to emit multiple spaces in place of a tab character next type deduction use of the auto keyword c plus plus has a keyword called auto that will auto populate at compile time the type of a variable use type deduction only if it makes the code clearer to readers who aren't familiar with the project or if it makes the code safer do not use it to merely avoid the inconvenience of writing an explicit type consider the example make unique foo which is a function that returns a generic type the implementation for make unique of the foo class obviously returns a type foo and therefore the auto feature is allowed to be used in this instance but instead if i have a function called my widget factory that is not generic the type that that variable returns is opaque and if i use the auto keyword the compiler will figure out what type is returned by looking into the code of my widget factory but if someone who's not on my team needs to audit that code they will have a very hard time understanding what type comes from that function therefore in this case auto is not allowed next ownership and smart pointers in code that uses dynamic memory such as the new operator or the heap bugs can easily arise when the dynamic memory is not properly accounted for these bugs manifest in the form of memory leaks and use after freeze only to name a few to fix this modern features of c plus and rust implement a concept referred to as ownership to define who is able to use and ultimately responsible for the use and freeing of the dynamically allocated memory similar to nasa's principles of data hiding google recommends limiting the use of dynamically allocated memory to the lowest point possible using it only in the class that it was allocated by if two classes need to use the data use a smart pointer to explicitly pass ownership of the data from one class to another for example a foo factory will return a smart pointer to a dynamically allocated foo if another class needs to use foo you must consume it via the smart pointer next exceptions google does not use exceptions the try catch statement at all on their face the benefits of using exceptions outweigh the costs especially in new projects however for existing code the introduction of exceptions has implications on all dependent code if exceptions can be propagated beyond a new project it also becomes problematic to integrate the new project into existing exception free code for example consider three functions f g and h f calls function g and g calls function h if h throws an exception that f catches g has to be careful in the middle to make sure that it handles the exception properly such that f can safely return also more generally functions may return in places that you don't expect when you use exceptions now you can minimize this by implementing some rules on your team on how and where exceptions can be used but at the cost of more and more knowledge that a developer needs to know about the code base finally and arguably most importantly inheritance in an object-oriented language such as c plus plus a structure called a class exists a class has variables and methods for example a string name and a uint age a class can also have a parent class where it derives some of its features the variables and the methods are inherited from the parent class into the child class for example consider a parent class person which is inherited by two child classes mother and father a problem specifically referred to as the diamond problem arises in c plus plus with multiple inheritance consider now a class named child that is derived from two classes mother and father the structure of its inheritance properties now creates a diamond this is problematic from the perspective of code maintenance because it is ambiguous where child inherited its methods from when child is created the constructor for person will be called twice once in mother once in father this creates ambiguity that is hard to comprehend to prevent code designs like this google has very explicit rules as it applies to c plus plus inheritance limit the use of implementation inheritance and instead use only interface inheritance interface inheritance is the inheritance of properties from an explicitly abstract class a class who does not have any defined variables or methods on its own for example consider the class animal an animal in nature does not exist as only an animal an animal has to be an actual animal for example a dog a giraffe a tiger therefore the animal class can be thought of as an abstract class having no properties of its own only the scaffolding for a child class in instances where you cannot use interface inheritance and have to use implementation inheritance consider your design and instead try to use composition composition is the inclusion of a class as an object inside of another class consider the case of a car where the car class is not derived from the engine it contains the engine by composing a class of smaller subclasses we reduce the ambiguity of which methods were chosen at compile time to execute certain functions well that's it guys thanks for watching now before you go and write your next piece of gorgeous c plus plus go and watch this video that i think you'll enjoy just as much