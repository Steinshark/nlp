we have had some questions in from some of the fans some of the viewers at computer file and we thought it'd be nice idea to have a chat and you okay what you think so i've picked a few that maybe hopefully will go together and and we may well do some others at another time we're gonna kick off with this one here from patrick orton who i think you may actually yes hi patrick he was one of my project students a year or two ago yeah hi patrick he's asked four questions so we'll whip through these before getting on to some others so what is your favorite area of computer science my favorite area of computer science well it's it's it's split into two really although it's very very applied computer science i really do like everything to do with digital documents right through from the sort of xml structural stuff right down to the nitty gritty type setting fonts and postscript stuff i love that but if you were to say is there an area i like doing videos on which fascinates me although it's not really my specialist area the answer is what we're doing at the moment which is regular expressions i think they're fascinating they're so easy but so difficult you get regular expression wars between commenters they're wonderful there's a way to go yet on res before we finally say that's enough yeah well it's interesting because you kind of roll these first two questions together so we'd ask the favorite error to work in and of the area you're most interested in what's the area of computer science that you're best at do you know that's a very good question patrick i can tell you what one of my students that i supervised how well you're knowing the answer truthfully is that i don't consider myself an outstanding computer scientist in any of the areas i suppose you could say insofar as i have some expertise the whole digital documents electronic publishing low-level postscript pdf stuff yes but actually what am i really best at it finally dawned on me and thanks to you and brady you have given me the ability to exploit this i'm best at explaining things to people and as i've often said i when i was younger had to teach myself there's a whole extra episode on why to be competent in a wide range of things and being forced to teach something is the best way to learn it so i think i am good at that the problem i always had was if i was like brian kernighan and had the tenacity to write lots of books that would have been a way to propagate my expertise i don't really have the patience to write books what i wanted was somebody to come and just talk to me and make videos from my waffle and you and brady honestly i remember that first visit and it's been solidly downhill for seven years ever since then hasn't it 2013 something like that yeah patrick also had a question which connects to a couple of other questions we're going to roll these together if that's all right with you what is the area of computer science that looks to be most important in the near future which connects to one richard denton's asked about your extensive history in the new field of computer science what direction is it heading in and breger who said which area of cs will in the near future be used the most and which do you think there's no future to i'm not very good at futurology i could list all of the things which i've come across in computing and have said that will never catch on and about six months later it's the lead topic in the whole field now i think all right let's just say recently the thing that has quite taken my breath away has been the whole stuff about neural nets deep and so on and now it's fascinating because i tell you what is the most fascinating thing you had deep blue playing chess basically by brute force methods and back in the 80s i don't play chess by the way but i do find it's fascinating it was deep blue ibm street blue i think they defeated kasparov for the first time you know and i thought well it's just brute force and ignorance that but on the other hand the moment you start doing neural networks which learn and adapt and once you start feeding in the fact that you can play yourself in a computer rendering the game you know what they've done on go and chess and all that now is to say we don't just hard code the rules and and look 30 moves ahead we get it to find out what unlikely things have have come up in me playing myself where he just went berserk and went off and attached i thought that's a lost game but it wasn't he found a back door way in and triumphed and i think that's what took the gold guy was it lisa dole apart he just thought that's ridiculous i'm going to win this one and about 20 minutes later he hadn't and i think he found that shattering that and i can well imagine that and i think my understanding very limited of this is that the deep mind people have now started applying all that they did to go apply it back to chess and don't use brute force just build up millions of games and let it learn what's a good thing to do and i think i'm right in saying that that piece of software using the neural net statistical whatever is now more successful than the original deep blue was but i'm not sure so what you could say is taming big data via ai are is is a tremendous area it's it's i mean big data is important and the degree to which you can tame it with a so-called ai is fine but the big question still is you go to the authors of these quotes highly intelligent programs but they're not and you say can he do common sense no not a hope it's brilliant to go because it's still a narrow and well-defined field but don't ask it to pontificate on the state of politics in the western hemisphere and the clue so there we are right something that i know i'm interested in i know very little about but does seem to me to be a real marker for the future moving on to a different subject we had a question from eric stens and he said as engineers we all have our pet projects what have been some of your hobby projects computer related that you're most proud of and would you tell us a bit about them all right well i think i suppose i should say at the start that one of the advantages i've got being the ripe old age i am is that i've been what's called an america emeritus professor for well over 10 years now and that this does give me the ability to pursue lunatic things that would never ever have got me promoted to professor but i was there already tell people what emeritus means for those who don't know those who aren't in academia what happens with emeritus professors is that it's basically a way of pensioning you off but in a gentle way the idea of an emergency professor the latin of course means ee out of merit because of merit you were given this honorary position it varies very much as to which university you're in as to how active and emeritus you want to be but for me i back in 2005 i came off the regular payroll as a professor and cut a deal as it were where i would be brought back on a renewable yearly contract to do fill in teaching on on stuff i like but the good thing is with no major administrative responsibilities so i took my pension i got some extra top up from the school of computer science and really i think the last actual taught course i did given that i formally went emeritus in 2005 i was still teaching classes through 2013. and why did i change track then well once upon a time two pursuit guys came into my office and said hello we're brady and sean we're going to reshape your future you've wanted to find somebody idiotic enough to record your waffle that's us well it's true isn't it i also love the teaching but to be able to teach in a way like this which would never have got me promotion to anything had i tried to do it as a 30 year old you know which is why in many ways i'm so glad that steve and mike are still happy to do it because it can be part of what you do but it can't be the totality of what you do and yet for me now it really is almost the totality of what i do you've given me a avenue to spread the gospel or something yeah so that's what it means to be an emeritus professor it's given me complete freedom to do for example the stuff we did rescuing the banned paper about the liner type 202 typesetter now it was such a good project because it was brian kernighan's work virtually a computer file regularly now is although the virus has confined him to the states for the moment but yes it was his work way back in the late 70s which had been banned from publication a mutual friend of both of us chuck bigelow who's the designer type co-designer of the lucid type faces basically said to both of us we know him well he said you two you should be telling the story now it's not sensitive anymore so we did all those videos on it but in order to get the story total i said to brian what we have to do is not just resurrect this memo which was on yellowing paper that had been photocopied in 1978 we've got to recreate it using modern postscript pdf fonts technology at the quality that was innately there off the virgin fresh bromide that came out of the 202 and it's got to be really good and post creates up to the job you know that is the the glue that binds it all together we can we can do it but i wanted it to be a perfect resuscitation as it were and getting that last few percent right was just very rewarding but very frustrating i mean we had it published it's had very good reception people love it when they find it but could i seriously had i been on the end of the yearly review have to say this caper that we did does that count towards making me a professor my i think my previous heads of department said no it's frivolous you know it's interesting because that kind of leads on to one of the questions which is from jonathan livestrom i hope i'm saying that right ask professor brailsford how he learned to be so pedagogic well-versed and an absolute joy to listen to that's going to be nice to hear i assume i'm saying pedagogic right i think you are well thank you for the implied flattery is it jonathan thank you the thing is of course that my style doesn't appeal to everybody i'm well aware of that some people find it too waffly too hand wavy and although i love explaining things to people i just love it when i get real experts come at me just the odd one and it's always david you did a good job but you were on thin ice you very nearly started telling things it was flatly untrue and i thought i thought this is it he's going to fall down into the ice pit wait no on you at the last minute oh you know you rescued yourself you didn't tell an untruth but it's not the way to explain it to which my retort is if i get people saying i didn't remotely understand it until i explained it my way then i rest my case i always knew i enjoyed teaching but the answer is very simple when we were turning from a computer science group in a maths department this was in 1986 to being a full-fledged computer science departments eventually it didn't dawn on me because i was leading the charge on this that we'd actually have to teach across the whole range of computer science so we took a first few single honors computer science students in 1986 and then it suddenly hit me a lot by 1989 we've got to give them a full blown computer science experience and how many people do i have six that includes one technician and a pet cat and that was about it and oh my lord how are we gonna do this and i said to people i remember one of the first departmental meetings i remember saying look we are very very short-staffed i think the university will help us out with one or two but it won't be as many as we need sorry folks we've all got to be prepared to teach well outside our comfort zone and that is the answer to the real question is why can you teach over such a broad range i had to i had to learn about chomsky regular expressions touring machines and all that because at the time i didn't have specialists to teach it but it comes back to the main thing i enjoy teaching difficult things just by saying i found it difficult here's how i got to grips with it and if that style of explanation suits you then it's a win-win situation so we've had a question from a very familiar name here graham hutton have you heard of this character he doesn't ring a bell yes yeah rings about if you could have invented one idea in computing what would it be again first obvious answer is would it have been invention or would it have been discovery was it in some sense there already i have often thought about this but the the stuff i would love to have been more involved in i would love to have been at the right place to be heavily involved in it in the late early 60s to late 70s it was over a long span is the whole area of chomsky types three and two which covers really regular expressions when do they run out of steam what theorems can you prove about them now it's it's an area that we're still coming back at but the one person sorry to be boring everybody venerates him for different reasons still with us and i reserve the right to come back and do a biography of him in some sense from my knowledge of it ken thompson i mean there was regular expressions invented by stephen kleiner and yes they were fine but not a lot of people understood them and one of the people who really understood them was not a sort of avowed declared theoretician but ken thompson the world's ultimate super duper computer programming practitioner he just understood in a very very deep way what an ex regular expression could do and couldn't do and more to the point there was a very important theoretical paper by dana scott and michael robin which basically said these regular expressions give rise to automata diagrams which we've done but of course a lot of these automata diagrams basically say well what's the next character in your input stream letter a oh i can go in three possible directions on an a which one you want me to take and the trouble is if he gets wrong you end up down the blind alley and you have to backtrack out and you have to re-do and put back again every variable you set in trying to analyze it you've got to reset and that's massively expensive you say so what scott and rabin did was to prove that everything that was non-deterministic could by a algorithmic process be turned into deterministic except it might have a lot of extra states and it might have a lot of extra escape shoots labeled empty that took you down to a false ending and you had to be able to cope with that ken kind of instinctively understood that you know the the idea that you could make it deterministic this is what lex does for those of you who are into using unix tools and i was just appalled and amazed that that was possible i thought i'd love to have done that but i would have loved to have had ken's sure-footedness in his favorite attitude qed he built in the whole deterministic non-deterministic thing in ordinary unix ed he decided that the labor involved wasn't worth the candle you know and he quite happily and what better programme to do it said at times although recursive backtrack is deprecated a little bit of it so long as you don't do too much i know how to do it and he was just such a master programmer he could make it work either way the man goes to town as we would say to town the man goes sounded to me 20 years ago when i first stumbled on this very much like yoda the jedi master for those of you coming into this cold and direct because you saw the word yoda and grepped over the entire universe