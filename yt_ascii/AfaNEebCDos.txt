we're going to look at an example of property based testing. [i'm] going to show quick check which is the tools [i] work with and the idea here is your test software and that's very important to get software right? but thinking out all of the cases that you want to test is not something that is very popular with software developers actually and so [are] it's often not really done as thoroughly as you would like and what i'm going to show you is a tool that we can use for generating tests so that instead of running? maybe you know a few dozen tests. you make up by hand [we] can run hundreds of thousands or millions and get much more confidence [for] [the] software really behaves the way that we wanted to temple which is going to test that text message encoding, so this is actually a part of the 2g [11th] standard, so it's got old [but] then [i] [think] we'll introduce text messaging that they were just making you for some spare bits that within the packages and they wanted to fit as many characters they could into a text message and there's only so much space so they realized that they only needed seven bits per character [from] so that [we] decided to use but when you put those seven, [but] characters into the messages you have to fit into 8-bit byte and that means that you can fit eight characters in 27 bites so of course the standard says you must do that, and that means the way you have a message [you] [want] to send you have to encode it by packing [a] [bit] closer together? and when you receive it you have to decode it and here i've got back some code that came from the company in france does that ankle candy coating so let me just start by showing the code that we got so here it is. this is that line code? and this is the code for packing characters. you can see there's plenty of it this is it comes from unpacking them again, and there's plenty of that and we're not going to look in detail at this the only thing i want to point out is that a lot of code and it's complex so it's quite easy to imagine that they might be an error in there so course we need test that and down here we have some test code and what it does is it says well. let's just take a sample message let's try [backing] it and then unpacking it and what it will call that tea and at the end of the day what we get after unpacking must be the same as the message to be started off with and then there's a little test suite here that says just try that for a number of different strings and with somebody thought about this little bit and they tried all left that message from 0 to 10, so yeah hopefully it works for these [strings] that will work in general what we can do now is just don't compile a program [just] done and now i can run that test code [i] do so then we get [them] [out] [put] all of the [task] [past]. that's good it seems to work but of course what always demonstrated is it [works] for these particular ten strings, so you might wonder? if we give it another message, is there a risk that the code won't actually work as we expect, so that gives us a chance to use a test generation tool and when we use quick check i go back to code here actually have what we call it quick check property that is the way that we write tests with property based testing we want something that's supposed to be true in general of our code here [i'm] saying for all messages or msgs not just pretend that test which our list of [7th] values so they're made of the 7th character then if i pack that message and one packet [i] should get the best off with that says the same thing [as] the test [i] had before but it says it in general and that means that now i can use quick check to generate many tests [are] like and make sure that [coastal] works [let] me go back to my test execution window here, and i will just use quick check call it and i'll give it that [property] that. i just showed an argument and we'll see what happened well after only a little more than a hundred test quick found an example in which the [prophet] doesn't hold and what you see here is first of all a randomly generated message it's a sequence of bytes which appears numbers here you can think of it as a message, and that message was not packed and unpacked correctly so after finding a random example like this quick goes on to simplify the [same] case as much as we can and we end up with this message. which is just eight zeros so why does [quickcheck] say the problem occurs with eight zeros and not for example 70? well because if you have 70 still works so this is the smallest example that doesn't work and if i think which again you see that it starts off finding a different random example, but when it simplifies the test case we get the same 80 [this] is one of the key things about this kind of property based testing you always get the simplest case because you know it's the simplest that tells you a lot about what the problem might be [okay], so it seems to be something to do with being a characters long. so maybe it works for all other [lengths] what i can do is i can investigate when the coattails now by changing my property so if i go back to the property out here at [the] what it says for every list of seven that bike packing unpacking [gives] [us] [a] result now. i'm going to add identification. [i'm] going to say for every list of seven bit byte provided the length of the message is not [ate] that should work, [so] my hypothesis is that the length of eight characters problem? let's just test now messages of other lands [i] do that. [i] just recompile test code and rerun could check now [two] [thousand] [tests] passed. so maybe i was right. i'll just run a few more tests. which i can do five [growing] test let's say 10 seconds [there] are [0] it still doesn't work so now we find another example. [we're] packing and unpacking failed this is actually consists of 16 zeros so maybe it's not just being of length [8] that matters may be any multiple of 8 is also the case that i fail but let's investigate that [i] can go back to my property and i can change it to say that provided the length is not a multiple of 8 that's what that means then packing and unpacking the message should give me the same result back and if i we can buy that and run the test again now quick check is discarding some tests [with] the crosses mean so running lost every [dollar] [is] a passing tests or by now for [dr.] 10,000 passing [test] the cross is a test that where a multiple of 8 quick check is not found failing case after a hundred ninety-five thousand tests so that suggests that we're right but as long as the lens isn't a multiple of 8 then code works but i can also investigate the problem more closely [i] know when the test is when the messages of multiple date then the constant of sales but doesn't always [sale] let me go back to my property and i'll just take that out for truth and said we got nothing instead of generating any listed as a message [i'll] just generate list of 98 and i was focusing testing on the case on suspicious of [its] every message of mentaiko drawing. let's find out [i'll] run these tests [that] everybody's hands and fate and what you know some of them passed [38s] past obviously many things are correctly encoded but this example is not found, or [is] this example now? i want to look at the random example that failed and [that's] that's [a] few more of them one of the nice things about generating tests as you can see a lot of different examples of the same thing so is there anything in common between that first example this other one can see that full of different values of numbers those are all different wait a minute. [look] at the last number there [and] the last one here left one here. they all end in 0 [that's] very unlikely to happen by chance so maybe the code works unless the messages of multiple of 8 in length and the last character 0 [let's] test that hypothesis. [i'll] just change this still [to] runtastic [wednesday] put to say provided the last character of the message is not 0 then the coach should work [ok]? so am i right in my postures let's find out whoa [now] all of the test statistic? and after 10 seconds, we'll see we run to [continue] two thousand tests without a 0 in the last position [they] all passed so that strong evidence that the hypothesis right [okay]? so now without even looking at complicated code. we understand the problem very well we know it happens when the messages of multiple date. we know that happens when the last character [0] and if we think about it, we can actually understand. why this is happening when we pack a number of characters in two bites? they're always going to be some bits left over what happens if we pack 7 characters in 27 bites? [what] happens is that there are seven bits left over? 70 bits that looks very like eight characters where the last 10 [and] that's the problem it's a problem in the standard [car] distinguish between a message that contains eight characters with zero at the end as a message to [just] [contains] the first seven and it's a known problem. so there's nothing found it except i suggest not putting their characters in your messages we realized that we were all working with very much the same kind of programming language but because we each had our own combiner. we couldn't share any [cooked] we couldn't share our results and that just like a waste of effort so that led to the proposal to just take the common core of what we're all doing