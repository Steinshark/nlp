okay thank you ian's i'm johan van sombrook i'm a consultant for capgemini gemini engineering and invention until end of march we were all trump and our thumbnails was a company of engineers of all disciplines so it's logical to the very brand from germany gemini engineering i'm from the french part of belgium so that's my by my name sounds more german than french this is going to be the menu for today so first so we have nine courses first there's a short introduction to corolli then a very brief introduction to see perspectives only firsthand so if you know corey is already in advance and it's going to be a short repetition of what corruptions are if you don't know corrupting yet that the bleeding protection is too short to explain you in detail what qualities are but you should give you an idea it should be sufficient to follow this presentation even if you don't know corrupting the networks then an introduction to asynchronous and synchronous distributed programming because it's going to be the the main lead of today the difference between those styles so that's more stats then one main course why using qualities for distributed programming so that's already 27 slides in total in fact that's that's going to be the main course so it's more about why using core routines it's more a promotion of quarantines this presentation than the code within a promotion of my own library which follows next so point five is a little bit on corrupting the goals that i intended in the coding style then the quality organization what you can find in quarterly fire starts about the examples that you can also find on the web then some related work and finally conclusion so it's right [music] so what is quality so what does google say google says that corollary is an island somewhere in the pacific pacific ocean except an elevation of 20 meters it's important to know and it's better known as goat island or island that's a map and it's really difficult to find it's even up on the map because it's so small that it's not indicated on your maps if you want to see more pictures of corollary you could go to or you could google this one and you will get more pictures of the topic of this evening so it's a c produce corrupting library for developing asynchronous distributed applications and you could have guessed that was just short for corrupting the library here you have the link controlled what the github so it contains all examples and the additional documentation for this presentation so this perspective presentation is just short probably what you can find in on video it's a one person outside working hours hobby projects so it's written by me outside working hours because i never spent anything during clients hours and it's a hobby project some people have weird hobbies and i'm one of them but it's one of also my objectives of 2002 for contaminant engineering so they know that i'm busy with it and i want to promote both coral reefs core routines and this library you find a variant or leap that hyphen in between that's another repository and that's a repository for deep learning and numerical modeling source resources for project 19 so this one is short i guess for corona library and that's the recomputer so this presentation is going to be on not on the island i have to disappoint you but on this repository so that's a little bit of a corollary perspective so this is corollary and it's attended as a small layer on top of existing asynchronous communication middlewares like bluestazo build five network nts and any propriety asynchronous communication framework that you may have encountered i have an implement i have an interface we've used i have one for cute api i don't have any interface for that prepared free asynchronous communication and don't have an inventory piece of networking yes that's why i use this parenthesis here originally i wanted to use boost asio because boost also has an implementation of proteins so there's no need to use corollary as it as an interface on top of geostatism if you want to use queries because boost easier has already an implementation of it and my first intention was to learn pollutants from the implementation and boost you but that was a little bit too complex for me to understand how it worked so that's why i started myself at most snippets of code and eventually it has evolved into this library that i can use on top of bluestaceo also one of the goals is to keep it to keep corrupting separate from any asynchronous communication framework so that you can put on top of it so that you don't have to extend the communication framework but that you can use and just can address on top of it that's about all for this smaller position next slide yeah that's an introduction to quality itself has a general generalized routine that in addition to the traditional supporting operations in broken core for and returns for suspend and resume operations so everybody knows functions you can call a function information will return well proteins have two things in an addition that's a suspend and a resume operation so more impractical how do you recognize a coroutine by the quarantine is a function with one of those things in inside the code it's either according to a core return statement to return from a quality you can't use just retire you have to use code for return if you want to return from protein you will often find also coral weight expression and that's a conditionally suspense evaluation of that quality while waiting for a complication calculation if that computation has already finished then you will resume otherwise you will suspend your quality by calling you also have a core yield expression that's something that i don't use in quality in coral reef so there's no examples in coral reef itself and it's but it's used in combination with generators we have a range based follower produces qualities i call it so it's looking like this so we will find examples of quality and core weight you also need a special return type so you just can't return an end to the world or a double that you know from the past it must have a special return type that's supported in type and that's something that you have to develop yourself so that something that i have developed for the quarterly here are some more definitions if you know order things then you must have to recount this already the quarantines and cyprus was not struggles we also have statue quarantines bruce has two implementations of structural corroding staccato you need support from the compiler so that's the established scoring crystals are only available from express 20 because only six squares 20 compiles supports separate specimens you also are also trying to suspend your zero point initial suspense resume point it's at the beginning of your production something that you don't see as a user you have a final circuit suspension point also that you don't see as a user in the report and some more definitions deletable type that's a type that supported call weight operator creator type that's type that then implements three special methods that are part of the core wheel expression await ready releases planets you need to resume you have other terms like quality state called frame according upgrade objects put it in handle [music] and then you have the promise type also something that you have to implement if you want to write it directly and then you have to generate that already that sequence of values so that's a lot of times for somebody who has never seen quarantines but if you learn about them you will account for each of these terms here in this course i make small comparisons between function quality and threat and process everybody knows functions and processes when i first learned about threats so something magical to me it was like something in between the function and then process and then when i learned about coordinates that was also something magical but it was something in between the commission and it's like and it was really part of it so what i've done is put some yes and no questions and this way you can make a diagonal here on this one but if you ask the correct questions on one side of the diagonal you will find no answers on the other side you have dismantlers so in this way that's a way of comparison definitions coordinates and processes i'm not going over this side you can see it then another question is there native support in sequence plus yes of course for functions and for processes for cats it's native supports and secret squares level and for quarantines it's a sense seek responsibility so you need a recent compiler if you want to experiment with corruptions next type in the menu that's a major password no not this one plus a brief introduction to the distributor program so that's my definition the distributed system is a set of communicating programs running on computers or from people not in a network i guess everybody can never just take a mission for this presentation there are some communications architectures like line server and my examples are basically client server examples that they use i have a history and background in corbat so i'm still influenced a little bit by corpora in what i'm doing i'm also a fan of privileged subscriber architectures like you have in dds data distribution services from the robot operating system or a new order that's used in the in drone software using i found more reason to write corruptions on client server applications and properly subscribe so i have only have examples of clients private server applications that are using in combination coordinates not yet of every subscribe where it is not at the big extent then we have some programming styles remote method information or we'll just use functions procedure called message communication which is at the lower level because the lmi remote heterogeneity is always implemented in in terms of messages one message going in one direction and then the other message going in the other edge we have protocol stacks tcp so what i'm using is a tcp programming so that i my distributor application i run them on one machine just using this idea but you could use intimate usb and sli something about synchronous versus communication because it's going to return all of this presentation so when you talk about synchronous asynchronous the word grows and is in there that's great work for time so i've seen many definitions of of synchronicity or asynchronous applications but nobody explains what they mean especially not in terms of time so synchronous means at the same time asynchronous is not at the same time so in terms of synchronous communication mapping to what it could be what it could mean in terms of time that to me means that an entity waits internally for information from other entities or from environment if it does wait internally then we have a synchronous communication so but internally i mean inside the application itself or inside a library or a framework that is called from the community so waiting for information from the address kind of synchronization so if you wait for the response to a request or if you wait until the other application starts processing your request that's a kind of synchronous communication it's a natural style for remote metadata applications because those remote methods they look the same as a local method implication so there's sometimes no difference at all between your remote method and location in your local method indication so that means you can write programs that both mixed go to local methods or local functions that you call or remote functions you don't even have to care about it's the same style it's a fast way of writing code very natural to write it like that way but it's it has one big disadvantage and that's two supplications yet so while waiting for the response from the other your application cannot respond to the other inputs that immediately and for some systems but it's just a little bit annoying because you have a slight delay but in other applications it's totally unacceptable so people have been looking for different solutions for that and one solution that you find is use of asynchronous communication where your entity cannot wait inside internally for information from other entities or from its environment so this way there's no obvious communication between applications and the system because you never wait you just receive a request from the environment or from another application you do your thing you send out a request to somebody else and then you return to central point where the application can connect to respond to new events from the environment or from other entities so this way we have again distort the activity your application will always be ready to accept templates from others either solicited that means you just sent a request and then you wait for the response or implementation but we will see that examples coming in this presentation so that's a definition of synchronous and reciprocals using the concept of time now there's a possible solution to solve the reactivity problem and that's to run rmis on a dedicated fit so suppose you have a very complex algorithm with nmis you have implemented it in a synchronous way but you see that your application cannot respond to others so one possibility is to run that complex algorithm on a separate threat and then you have another technique that you can respond to inputs from the environment and in many occasions that's a good approach it also you don't be sufficient you don't have to cut up the arabic to your original application into this basic business application so if that solution is sufficient for you you don't need to have to look maybe at qualities as a solution because you don't have even a performance with the implementation of asynchronous applications of course with threats you can have problems if you have multiple tests you have to communicate you have shared variables these are all things you have to deal with if you don't want to use sets and you still want to have an asynchronous application style but with the natural style then you should have a little [music] style there's only one that's a remote attenuation looks like an normal method implication locally but with instagram styles i have seen so many and there are probably many that i have not seen yet so the base pattern that you could see with asynchronous communications is that you have a client that's going to register for back functions for every the requested sensory remote object so we sent you have a function that you call we're going to pause for that function and when the other response then the callback function is going to be so if you have sent 10 requests then you have ins the product inches that have been registered over time or that function and simplest person can use the landlord for crossing the product to use these references there are many alternatives to this base basic pattern one is to have all productions just registered with startup time that's something that you have include then you have the single stop mechanism and then you have signals that you register at the startup time with the slots and it's totally interact with the functions that are going to be called when you started seeing neurons so instead of any functions you just have a single function that can use a switch so if you have a client program and it uses the services and service applications you will have in functions that are have to be registered or in the end times and functions that you have to register that you have there's another alternative that's an event given style where you don't even have kinds of callbacks that you have to register you have events that are placed in the mirrorbox you have a global event group and you have a kind of get next event followed by a switch on the event type so there's no distinction here between solutions events like the request from others and solicited inputs with responses and you could say in fact that's the use of corresponds of use of one big chord that machine so all these patterns are a little bit related in the sense that they can transform one to the other we also have blocking unknown looking foreign instead of using something that's the style that i have seen in corbat [music] and then you have alternatives for to win so that's one of the alternatives that i know some more happens that i know and those that i will get you know so there's not a single asynchronous style and that's also one of the problems that if you change from one company to another you find another asynchronous style that they use as a product company so the question would be can we replace all these different ac chrome styles that have the advantages that they are reactive that the applications are always connected to the environment by one single superior star so so i've seen i have the question here but i don't have put the answer but you can see the same evolution in c-sharp where they have originally the asynchronous pattern then they have the event-based asynchronous pattern and then finally because they were not pleased that you do play these patterns they introduce what they call the task-based asynchronous pattern and in fact that's the coroutine approach from c-sharp and really the same answer that changes could replace all 3d styles for asynchronous or doing this asynchronous styles that are listed here or that you may have accounted for so why use qualities for disability programming so that's the big menu the big course for today so i use c produce qualities to write distributes the distributed applications using a synchronous style but behaving in an efficient responsive asynchronous way so that's why i have introduced synchronous ac currents in the previous labs so that you have an idea that following the difference between those and what i mean between there with the synchronous health and increasing chromosomes so quarantines the of the advantages of those thoughts who are not introduced in any major disney languages but something that i claim and that i want to demonstrate in the next steps so the callback functions that they have seen in some of those spacing chronos tasks they can be headed inside the corporate humanity so the application writer will not see any conductors anymore he will see but he will use a synchronous style like it was so with the synchronous with admired and i can also use the sequence routines as an alternative to threats so because corroding can run an entity cooperatively on a single operating system and that's something that i want to stress one of the purposes of using proteins is that i want to avoid all threads that i want to so i can say okay i have an easy cross application but everything runs on a single group they don't you don't need multiple threads they can do everything in the synchronous only and not single fit and still it is reactive and it uses a synchronous style there are many other reasons why you could use simple space qualities for i only mentioned those two because for me that's the two of the two main reasons i use for things for that you can find probably other applications other persons who have different uses for qualities now i'm going to give you seven examples that should convince you to use proteins from now on from progesterone computed protein so if you are not convinced that you should use proteins for distributed programming at this moment i hope you will be convinced at the end of these seven examples if you are already convinced that you should use quality how the examples that i give maybe we can use to convince other people that they should start having qualities for distributed programs but maybe also for other reasons so this is a small example it is smallest i could think of because i wanted to put a synchronous version in asynchronous versions of the same program and the quality version on one side so i had to make it short there's nothing much special about it so we have a function and then function we call remote method information so that's the remote object here called the population norm it has two input parameters and like between outperformance there's a synchronous style and it's no different from a local method implication that you would find in sql space you're going to see that there's something behind that's going to talk with another application on another machine it just looks like a normal function invitation the asynchronous style you will find again that remote object but here you will find a function that i gave a certain a different name that's based on forba [music] where you have the input parameters the input arguments in one another and then you pass a lambda and that's lambda is going to be called by your flamework when the response arrives to your request so the part two here so that's part one code okay that's nothing that's just commented here you have the part two code so the part one code is before this statement party will follow for the statement the part two port is going to be placed inside this body of this code that which means when you go to the current inversion whereas let's say the same as this one here except that i have added core rate here and that i have had it specially turned right here are very similar but here this one will execute in this brain and that's going to be showing this right here so that's the synchronous version is the ac clone is [music] arguments to the communication thing so let's assume that writing doesn't take any time the reading is going to take something that you can't predict it depends on the other one writing your your request and then the time it takes to read your response to center responsibility so he internally just remotely location can block for something and can be a few seconds and that's not good for some applications let's say it's even been acceptable for some applications so it doesn't go back to the event loop in internally in your application you're blocked until the other one has to be sent to your response when you apply the leasing style it's a little bit more complex so what has to be done is when it's corresponds to what you see here in this tag you're going to split your function your original function into two parts you have your part one then you're going to start your remote interpretation and then you have a second part that's going to be registered as a problem so first you're going to write again to your communication in that then you're going to start your elite operation you're not going to read or redo blocking group you're going to start your legal programming preparation and register your callback so that's what's happening here after you have done that you're going to return to the main event and here in the main inventory your application can process any other inputs that are waiting or finally eventually it will receive your response it will like pass this as an event to your communication framework and this one will call your callback so this callback here is we're going to be called and that's happening in your asynchronous communication so you have also the same flow but the major difference is that you don't have to script your appear function yourself so you have your start a remote metadata location and then i have the call wait on a separate line so the start here is going to write again it's going to register when it's going to start your reads and then register your completion or you can you are called that permission then when you perform the call rate it is okay i don't have an answer yet and here it's going to be the suspense so it's going to suspend your your quality going to the event that's the intention when you respond that you can go to the event then when the event arrives with your response it's going to call your company conditionally and this completion handler is responsible for doing the resume here and then you're going to to go down here to part 2 you're going to hold it there so here this style and this tile are very similar but because when you are done do this you don't have to switch if you are functioning just into certain parts it's going to be done by your compound now that's one example maybe that's not yet in fact what's on this like is just the explanation of what i've done what i have done so that's the explanation that i gave with the picture that's again so that's what the function of the synchronous style that's the asynchronous style and that's with codal things so those are these slides with actual explanation that i gave you the explanation not showing me the pictures so example two so maybe example one was not sufficient to convince you to go to proteins this one is a little bit more complex because i have this one here that's what we've seen in the previous slides that's the synchronous version and then we have two use cross function calls so that's a kind of small pole stick or protocol it's in the horizontal direction because okay have more place in the horizontal direction and it's also easier to call to show the call and return the relationships so here we have a function that we call at the top of the stack so we call this function it's going here this function is going to hold position two going over here functionally going over here and then we have again the right and the lead so this lead can block for a few seconds and then when the read has completed we're going to return here so that the number should be returned this is going to be returned and this is going to return so that's a normal remove button advantage with normal function force nothing asynchronous just synchronously easy to read easy to write except here you may have been blocked for a few seconds and that's next slide has the asynchronous style so here we're going to restore the activity but that's a big price to pay accordingly so we have this little party of the function one in two parts function two in two parts and also here so this part we have already seen on the so we're going to call this this is going to call function2 this is going to follow this function here we have the right again we're going to start the reading and register the project and then we're going to return from here to this function this function going to the event loop and then eventually you'll get an event with a response we're going to call that's called that function that's what we've seen before but now what we have to do is also to go back from here to this function because this part also has to be accomplished and we have to go back to this one here and that's more complex complicated because these functions have returned and this function does not know whether where it has been called so what can be done or what has to be done is when you go in the forward direction is that you pass information from one layer to another layer about the function it has to be called that so you're going to register in that for the information about this callback function you're going to pass it to this function this function has to have to pass it to this one here and so on so that this one in this function is called from on your communication it can call back this function and it can recover this question so that's something you have to implement manually yourself yes your mouse pointer is not visible so yeah under function three we have the callback function that's called and that's the the callback instrument function key has to call the callback function in the function2 and then again to the callback function so we have the past information about those callback functions from functional function function to question three otherwise we can go back in the direction from the right to the left and that's something you have to implement yourself when you do asynchronous when you use these two now the next one is with quarantines and here the passing of information from the left to the right and from the right so that the right can go back to the left is all done by the quarantine's implementation you don't have to provide information yourself when you go from quality one to four to two or from quarter two to four or two three that's something that's going to be handled by your protein implementation and by the coral reef library in this case so we can use a very natural style without worrying about passing information about codex from one to the other in fact at your application level you don't see any callbacks anymore because the completion and the depth you see to the right is in fact something that's part of the of the quality library so you don't have to write your completion number yourself it's in the it's internally in the corner when you're so that's the style you can have that's called when you use coordinates it's very similar to the solid synchronous application except that going forward and backwards is all done now by means of suspender you can resume so in the middle at the core weight level you see suspense going from the right to the left and you also see resumes going from the right to the left and when you do it with functions you only have counts and returns so you have to do everything that calls and requests here you have the suspense and the resumes of doing the hard work for you in fact what quarantines are doing is in fact splitting up your your function into parts that can be executed separately that you have done manually with your correct functions except that the work is for the quality library and for the coordinate protocol so that's the explanation of the previous list heights the explanation in words what you have seen passing information from the left to the right something that you also see in driver's texts when you have marks in the windows driver model that's passing it from each from the top of your step to the bottom so that it can go back from the top oil from the bottom to the top or here and then my previous purchases from the left to the right i have still more of these things and that's like 29 70 and that's it so i'm going to speed up a little bit that's another example but here i have three remote method applications instead of one this code is in the quarantine library as one of the examples it's understood directly called while corodines so it's not only called that compass it's also something that you can learn so it's just taken from this on the left you have the the synchronous asynchronous stuff the synchronous time here you have the asynchronous style i need already more codes because here you have three lambdas and then but these numbers are called motion separate motions so this originally function one has been split into three and two in fact four parts of the personal function one a function then one b c so that's something you have to do yourself when you write when you want to convert this synchronous style to an asynchronous map and that's how it looks like when you do it so there's a synchronous start on the right you have the asynchronous style where you have to split up your original functional parts so this function here is going to start the rmi and then this callback function is going to then the response of that start it's going to call r2 then start rmi then part three and so on so we have to use some scissors to cut up your original function on the left to have those four parts on the right i don't have a picture for the porting style because in fact it's very similar to the synchronous value that's the quality in code so this one on the left here is very similar to what we have seen in the synchronous style apart from the core weight and the releasing glass that we have this one is a little bit more in two parts on the right where we have first piece of task that i start and then i do the cool it on another level so that we can do some stuff in between launching the basic rules our application for the reciprocals operation and before we do the goal so that we have three lines here instead of one because when i start a remote application maybe you can already do some useful stuff before i receive the response before i do reading results so that's another advantage of using qualities you can start a remote remote method and then when you're ready you can wait for it another here we have i have only have the synchronous now on the left and the asynchronous style suppose we have a function with three remote method implementations one two and three in fact you could say you can start them in parallel but with the blocking synchronous synchronous implementation it won't work so the remote metadata mode will take 30 seconds this is the other one two year old another one five and so on you have to add up those delays for each of them when you start them in parallel or in an asynchronous way you can start a remote method certification you can start the second one it's time to start the third one and then when the reply is received you can ask okay has the reply already received for the altitude and if you have to receive the price for the from everybody you go on that part two that you see on there on the bottom that's again the explanation so you can gain a lot of time here by splitting this up but this project has to be done when you're reversing you can do it with common things and then to wait for the response of those three remote button implications you have to use or wait when all and that's something you will see in there i have some more examples that's a function with the rmi and in mr2 okay so on the left we have just a four loop in a forward that tend to remove that indication very natural scale but at this remove metal implications take a few seconds well it can be blocked for a long time because you have a four and a four and it can take seconds or even minutes before this is consistent and before you return from function one i don't have an asynchronous implementation for this one but in cool things it looks like this and what will happen is that every coal rate you can return to your main country where you can process other events or you will receive the response for your to your to your request and then you will return and you resume from that period so it's very simple to return this unresponsive synchronous style application on the left to the one on the right just a few additional words and it's going to execute in an easy closed way you don't have to rewrite anything because if you have something like the floor and the floor and a lesson there's a follow-up and follow and you have to turn it into an easy-to-use style while you want to recognize your photo i guess some of you have already tried it in the past you have to do it but it's going to be a long way long some work and you want already i use quality as an alternative techniques so i can say okay you want that behavior i can give you that behavior but with qualities so we have two measurement loops that's group foreign so and those are going to run interleaved so of course the task here task t1 and d2 we are going to run in an entity as if they are separated and then i do wait all this should be one more because i have to keep the communication then you can can you wait until transport and pass to have finished so again if you have to do this with in an asynchronous style it will take a lot of work to be to do this except of course if you say i'm going to use threads and run those two measurement groups but i can say okay you can do the same you can have the same behavior just with qualities without any additional effects okay then i have all these are alternative techniques that the previous slides so that's an explanation word [music] we have an example of embedded software with what you can skip because sometimes in embedded software you don't you only have one single application not single program no operating system but sometimes there's a parallel that you use well if you for having threats but again maybe you don't have to include that real-time kernel if you can have some behavior using proteins so i have made a small concluding slightness we have synchronous and asynchronous they have single threaded limited the advantages of both of them so synchronous single thread is easy to eat multi-threaded you have the chat overhead and asynchronous multi-credits here this i just wonder what i want to do with this slide just make a comparison with the windows and stuff so that's about all i don't know if you're convinced that you should have a look at four things to replace all those synchronous styles that give you a lot of work to rewrite from the synchronous style to elimination well you can do everything with hurricanes and now we're going to see a little bit about it i still have only five minutes left or a little bit more so itself so the goal of corollary has to implement this protein library that can be used to write asynchronous distributed applications but uses a synchronous style so what have you seen in the previous pictures that stuck the goal of corolla keep your synchronous style do a few modifications that have a responsibly sequence real execution without having to rewrite your program also demonstrate that it can be used with existing asynchronous communication frameworks like you have used asio or q5 or any proprietary communication stuff that you that you may have seen in the past it's meant that something that's been put on top of it without changing your your synchronization but by using that but using that protein layer you can rewrite your original asynchronous style application into your more natural simple instructions also demonstrate that you can use it to replace that's because my goal is to say okay if i want to run everything i want it i can do it and it's going to be reactive i don't need drugs to make my application reactive or to keep the original algorithm as it was also i wanted to make it simple so that you can learn how common things work so it's not simple enough to learn qualities even if we can also use it for us [music] that's about the style i prefer so we have a start operation it's going to return an ac operation object so that something you can find in the library and then you can do all things that you need to do before receiving the answer so afterwards if you have done everything that and you need the answer finally you can call the core weight and then you can proceed so if you prefer to start above here in two lines instead of the one below although you can use it the one below as well you can put everything on one line but if you want you can just put it in two lines the advantage is also when you're learning quality you now you can see what is functional topics returning so it's determining missing operation so you can look in the code see how that is in operation is implemented something that you don't see if you use the second alternative you don't see what that proxy operation returns you just have to go wait but you don't see the intermediate objects so both stars they have pros and cons you can only use the second style because boost doesn't allow you to just to spread it in two lines it's something to do with the private constructors so that was a disappointment when i was experimenting with with the boost the first thing i tried was to split it into two lines to see what's the outcome of the first operation but that's not a lot in boost so you have to put everything in non-magnetic wheels and delete the units so the quality organization so i have a few classes only if you i guess you can do everything with certain courses the two major classes are async cooperation and racing first an amazing operation does not have a promise type so here you have to have some knowledge of proportions just have a branch type it does define an operator called a i use ic configuration as a return type from going from the no non-container to the quality world so that's something that's let's say it's used to interact with the libraries with communication i have easy task that does have a promise type and does have a core read operator so that's something that you need that you need to use any quality as you can tell for this i have a weight a one-way mask it does have a promise type but it doesn't divide or no operators it's a type it's a class that i found and typically but it was somewhere hidden in in a bigger file but i say okay it serves a class of its own it deserves all of this so putting this in one diagram we have basic cooperation we have leasing weight we have one-way task so you see how we also have a combination we have no promise type and no operation call rate but that's nothing special that's any causal strength that we have used until now while here one main task is using a promise type but no operation for weight and then we have the rates the sink weight which is simple task it's the same task but using operator call weight and using crease also in small areas we have when all when in something that you need when you want to wait for the result of multiple operations or when you want to select the result of only one operation then we have auxiliary classes secondary classes that are still independent those two don't use them directly they are used in the implementation of radio within this incorporation using task you have to go to a reset event that's also not really necessary i use it in some applications and some examples but you don't really have a summer floor but it's something that can be avoided because similar stickers is making a similar person itself and it's it's used of course in examples that i where i do used hits and then i have a print and a dedicated print that's going to print the logical thread id so that they you can verify that that i can verify that i'm only using the input and you just okay we have done the communication classes that's used from service that's a base clause right [music] going so that's going to start from the start connect and you have the server side as doing it your starting site so typically you can expect from client observer applications there are some classes that they use that are independent of qualities the dc decline and tcp certainly so that's pure five but non-qualities you have the tcp client go so the postal supporting and here i have added i'm going to take maybe 10 more minutes is that a 3 4 yes i want to explain i'm going to explain your basic pattern that you will find in the boards so something that repeats itself and that's useful to see so on the left you have from this incorporation which is to start reading on the other hand on the other side you have to start reading implementation so the start leading on the left is very short and it's going to call the the function on the right start hitting impurities and this one you will find typical boost so you have bruce lee you're racing read until where you're going to pass your lambda function so the lambda 1 is on the right and it's it's independent of any any application logic what you will see in the in the lambda is that it's going to fall back was going to set the result in an async operation object so that's what you see in the level here and the yellow on the right it needs a point to releasing operation object a widget can division the result and how much it can all complete it so we need a point in the lambda function and there i had a problem that on the left i declared an object is incorporation but i can't pass the address to the start reading implementation function but i can't do it i can pause it but when i pass it to the lender you see that the function on the left to start with will return so the address of the object direct object return object will change after it's returned so i've passed when i would pass the address of the red object and inside the start reading implementation it will not be buried anymore in the long run so the land is called by the by the boost finger it will have an incorrect address offer of the async cooperation actually so what i do instead of passing the others directly i have an index into array so with the get free index i get a free index that i can pass to the lambda and that index is going to be used because that's defined by this so what we'll see here so that's an empty explanation next the problem that i just explained and that's the result here for the the solution we have the async operation here so on the right we have the lambda this is going to go completed on the basic operation and that leasing operation object is going to resume the quality of the old core related i can't use the address directly on the aim of the async operation object so what i do is i use the index into array on the left and that index and that array has a pointer to the distinct operation that you see on the right so that's the way to go from the lambda here the index into to the address of the missing corporation and if the easy cooperation object is moved because it's moved when it's returned from that first function on the left the one of the creepy starts it's going to change his others in the array so the absence is going to be stable and usable by the longitude so that's what i want to explain the test pattern here that you will find it's going to be repeated in the group of the quarterly it's always the same pattern that's returning you have the index and but the reason why i use this 50 minutes is just because of the problems that are happening that basic operation is moved this function here let's start reading using the thoughts okay that's all about a little bit about the internals of the corollary library that the pattern that's returning i have examples that was already rather short from the beginning i was a little bit short of inspiration to get their names so it's crying so everyone pranks are the two so those are the examples like this that you can use for the example application that you use client server 11 is because of clues so they made the jump from the up to 11 of course here the first one is i'm using moose and the other ones are using clues i have some examples that is loosed and very secure that don't that are single that are using timers but it's only a single application so it's not client server and then i have some smaller examples not using useful smaller they are small but there are many of them we have the tutorial and that's something without that you can use without boosting without fuse so you don't have to install compute or boost you can run the you can build the core to determine the charge these snipers and slots and it's something that if you don't know qualities now you can use corollary together with the tutorial to learn about correctness that's intelligent why corrupting in fact those are the examples that i used in the previous big chunk about my promotion of according to the basis and style applications i recently added that means on sunday something that i called up for it in the library and those are examples that have been used for the representation the 29th of january 2020 because of the balancing it was used i have not changed anything to the code since the first february of 2020. so i just put the same code as i presented to the emergency previous user one thing is that every example is complete in the sense that every code that you need as in is in the sample and the similar part so every so there's going to be some repetition between class but if you want to study how things work well you just need that that file and that file will show you one complete example of having using qualities in many of the other it was also the basic for business for developing you have some fancy examples of my abilities two applications i have a strange notion of emptiness so those are the that's fancy because it's using four command probes the less fancy examples we use only two of them so here we have an example of client server one application that's on the left we have two clients in the upper right we have the grind server and then we have the final circle on the right if you look on the left it's a little bit slow maybe a little bit small but we have here zero zero so that's the thread number so here i can prove that everything else on one thread that's a zero so that that's a logical thing so that's something i have to verify for myself that indeed i only use one cat because i only want to use foreign [music] so we have two servers on the right i have to start because the client is using two servers and it's going to run that measurement of 40 on two service so insert on the upper right turn on the lower part so the direction of the client and it's going to communicate with the two servers and it's going to execute the loop menu very timely from the thing the group is going to call the server so some related work i made a small comparison between ctp core when experimenting and then learning about quality i had a look let's see people core [music] which is let's say the miss the most famous forwarding library that i know that you know there's a link to here so i learned a lot of that you can also use this one as a learning tool it's much bigger than my quality but maybe it's also more complex to learn so maybe a starting point because it's for learning for routines because it's only very small compared to a city there are other reasons for other differences or other goals of both libraries i wanted to be to use boost as communication teamwork because boost runs on both windows and linux while lewis baker was using cpp overlapping template which is difficult for them then we have blue station comparison with it so originally i wanted to use boost asia to tennis okay i have to use online with 408 here you see it's not possible to split this one the result for replacing operation into two lines it was not and i wanted to do this because that's also the style i've seen in c sharp so that's why i started developing my own qualities then presentation of budget is usable you can find the stats and also the code over there then some books there's a lot of articles that's a good reference because you have five articles i've also seen that jens shared it some days ago there are some books that's a book i have about recently chapter' is on secret prosecutions and then we have simply just tweety get the details over there there are some other books but those two books have chapters or sections okay finalizing so that's my last slide quarters are very useful to write distributed and many other applications i hope i could convince you with my presentation that you should have looked at four minutes if you want to write distributed applications they can lead to more uniform coding style among different types of applications so if you are standing over your applications running long running complex algorithms well you could run them on only because it's not necessarily anymore if you have distributed applications with complicated processes you can use photo things for reactive real-time and embedded applications you can reduce the number of threats when you use qualities so my goal is always to use a single threat so by saying okay if you have multiple threats i can play certain everything by qualities and they will behave as if they work with so important can be used as an alternative to this and they are fun so that's a hobby project stuff and it's a hobby because i still am use myself that things and what they can do in my opinion there are in certain essential parts of the future of programming and they should have been there already a long time ago so i wish they were there already 40 years ago when i started writing software then maybe i would have not have seen so many different styles of asynchronous applications so to me everybody should learn and use quality things from now so that was all sorry for taking more than one hour of your time thank you for your talk that was really interesting and very good starts i think we'll change now to who we do to the room yeah and then gonna you know have answering any questions and going through your slides again very interesting thank you johan thank you