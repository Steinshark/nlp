this is a cross product sega mega-cd development kit it's for making mega cd games it's date stamped 1992 which will put it at the start of the mega cd lifecycle the genesis was probably released around 89 maybe a little earlier it was a standalone console before this came along and this was just an extra that fitted onto it it was to add a second processor to the machine an additional graphics chip and some better audio capabilities as well as a cd-rom drive sequence or an anti cds worth of game on there this is a special bit of kit yeah special bit of kit or games developers to make the games with so what's your day job i'm a videogames programmer i've worked to travelers tales crytek and deep silver dan buster studios worked on about 14 titles so far it kind of looks like a traditional mega cd but it's not it's all molded together and screwed together so it's very much of a spoke piece of hardware inside it's got a snazzy host board and on top it's got a mega cd daughterboard and on top it's got the genesis to auto board it's all very custom wide inside so yeah not exactly a mega cd inside it's got two sets of switches one for the sega genesis side one for the mega cd side it's got dip switches to configure things like powell or ntsc region settings got the scsi id for it to plug into the pc one for each side it's got switches to enable the main cpu and the sub c pu so you can turn off the mega-cd side and just run the genesis it's also got this big emulator button here so that you can either emulate the cd drive through the pc with a big iso card or you can set it to run from the cd drive itself so you can pop a burn cd inside and the sides we've got a really big heatsink is very hot component here it's also got the line out at the side rather than the front it's got an scsi port threat to pc through a snazaroo interface card it's also got an emulator port with a very special cable and that's for the cd rom emulator the rest is pretty standard it's got a scart out an rf out and the usual audio outputs from the mega cd and again the bridge doesn't come open that's that's molded on so this thing can't be taken apart and a very annoying little wine and which is quite loud that kind of looks a bit aftermarket that fun is it does a little bit you can tell that they've used a real sega genesis shell and they've put some special hardware inside it so there are some holes here where there used to be ports and there are no longer what can you do with it then i mean you tell us why you're shown it is today i'm going to show off a game that i've been developing on it for the past three years in raw 68000 assembly language so i've got the stazon interface car to plug it in which is a big as a lynx chip it's also got what looks like a battery here but it's actually the license key to use the software if you ever use cubase or something like that that comes with a dongle it's a similar thing the knife's now zoom to logo on the back there so i'm quite happy i managed to find one of these i'm going to plug this in i'm going to fire up my game i'm going to show you how to use the debugger put the iso card in the machine it's just booting windows 95 now this is an amd k-6 200 megahertz machine it was 5 pound from a car boot sale it was the only one i could find that could get the iso car to work because the bus had to have specific timings on it it also fails to boot one in three times so yeah it's a bit old and knackered but it does the job and with this thing i've managed to make my entire game engine in game so i won't argue with it as long as it keeps booting now and again i'm happy with it and why is it that you have to use an old machine for this is this just is it an interface thing or what it is here before pci we had iso which was a big black slot and this is on the motherboard this is on the motherboard yeah of the pc a sega card is a big heavy iso card let's fire it up and i'll show you some code the drivers already loaded it's already in it the autoexec.bat so the statin cards ready to go it's all plugged into the back of the development kit vyra looks like a suicide cable very old fashioned kind of cable up yes it's a parallel cable but it serves a different purpose here so this is part of the tanglewood codebase tanglewood is a game that i'm releasing next year on real cartridge for the sega megadrive and it's code in raw 68000 assembly language i'm going to go and show a couple of lines of assembly if we've got here the entry point which the first line of code that the debugger is going to run first we're going to to a connect debugger subroutine because the development kit it needs the register set up in a certain way in ease the cpu vector table set up in a certain way and because it's a mega cd based kit we have to restore the horizontal interrupt which is a special thing you have to do specifically for this kit so afterwards we're then ready to go we can type arbitrary code i'm going to go ahead and do something mundane here so if we move a long words worth of data let's say literal 32 to register d0 then we move a long word literal 16 to register d1 and then going to add the two together with the add opcode so add long words worth data d0 and d1 together i'm going to save that so basically what you're doing is you're going to use some very basic assembler language to do add a couple of numbers together but using the using the real dev kit yeah i'm going to show you how the debugger works and how to view the results of that as well so i'm going to go ahead and build that i've got a batch file setup ready it's quite a long command-line to do this and there we go that's built ready okay so if i flick on the power first of all the apt light comes on and the write-protect goes off so it's written the rom ready and then it's ready to go the screens blank so if i open up the debugger here this is an old ms-dos based debugger mostly done with keyboard shortcuts so i can go to that cpu entry point function that we had there and there's the code we just wrote move 32 to d0 move 16 to d1 and then add d0 and d1 so the first thing we do is reset the cpus of hit execution reset processor and then we can start setting breakpoints so if i hit f5 that'll set a breakpoint on that code and i can hit 9 to go that's running the executable that's hit that break point i've got the registers window down here so you can see what's going on so our first command here is to move 32 to register d0 in hex obviously so if i step once we could see that d0 changes to 32 and then move 16 to d1 so we can see that d1 changes to 16 in hex and then add the two together so add d 0 to d 1 and that's going to store the result in d1 and there we go was that actually running on that deaf kid that yeah this executables running on this dev kit with the debugger attached to it so that we can set breakpoints and view real-time values like the memory and the registers as it's running for people who've not done much in the word developing so a breakpoint is where you can sort of pause the program is it yes where you can pause the program a specified line so you can see what the state of the processor is in at that point in time so something's going wrong something going wrong you can break in a specific line of code and view the memory and see what happened i've got a demo this is the main character from my game running around in sonic land this is just a small demo i used to teach programming how to set breakpoints how to watch values etc how to monitor memory it's just a very small window here where you can push a thing around with the little physics engine i've got written i'm not a developer but it looks quite complicated laborious is it is it difficult it is but you can break it down to very simple steps and you can learn one thing as time it took me about three years to learn assembly language and how to code for the machine but it all broke down two very simple steps like i showed you moving one number to one register another number to another register and then adding to the together there are all three very simple steps and you can build on that from that you can learn to subtract multiply divide once you can do that you can code a very simple player system where you're adding velocity to a player position etc at gravity you then can come clamp it to the the floor height etc so using very simple op codes like that it doesn't take that long to get a very simple game system running the tricky bits working with the graphics and audio hardware and here but even then all that can be broken into similarly simple steps and do you have to end up keeping a lot of this information you had them yes and now i write a blog someone i started learning 68k assembler i made sure every line of code i wrote everything i found out i blogged on my website so that i can come back to when i've forgotten bits or i'd messed up needs a back track you did that kind of like a diary but could anyone else have a look at that if they want yeah sure i'll drop it in the description your game then where are you at with it now i finished the first level which is split into three acts and it's got most of the main mechanics running it's now on kickstarter so i've used the demo to try and generate some hype for the game there's a rom you can download you can play using an emulator windows mac and linux even some handheld consoles have some emulators see you can put the rom in there and play it on there if you got something like an overdrive cart which is a flash card that you can put inside your mega drive to put a rom on you can actually play the game on your real console at home do you think there are a lot of people out there still working on this kind of equipment i know at least one other developer who is making a game on cartridge i know one other person with one of these machines in down in australia it's the other known working kit i know of other than that is quite a rare quite a rare thing to do there is a small homeroom commute either some forums you can look at for advice and stuff and we'll assume in the 68-hundred was in other machines as well other devices as well well yeah it was they were terry's and amigas based on the 68k lots of embedded microcontrollers were based on it was a very widely used chip does that mean that a lot of the language that you're using for this is the same across those as well or yeah it certainly applies elsewhere yeah so you could potentially port things backwards and forwards yeah you could do yeah the only specialized parts really the graphics and the sound hardware those have to be redone but the core language itself is usable across multiple machines we'd like to thank audible.com for supporting computerphile and if you go to audible.com slash computerphile there's a chance to sign up for a 30-day free trial and download a free audiobook now today i'd like to recommend the book that i first listened to as an audiobook which is the hobbit back in the day i had a tape and book and it was very heavily abridged and every time he got to the end of a page there was a dinging sound and you had to turn the page well fear not go to audible.com you can listen to that whole unabridged version of the hobbit it probably needs no introduction from me so check out the hobbit inaudible com and thanks once again to them for supporting computerphile he'll help you out by giving you his color name changes to yellow so now that he's yellow he can glide so you can then get past gaps so there we go we can fly over that big gutter continue on but of course time isn't on your side so it's going to change