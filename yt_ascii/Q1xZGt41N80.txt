hi everyone in this episode we're going to continue our look at the transform component looking at the differences between global object and local space as well as how to parent rotate and scale objects from script so have the simple scene setup with a sphere and a cube object and i'm just going to go up to the top here and make sure that i'm in global space mode as this is what i want to talk about first so as you know our 3d space is defined by three axes the forward to z axis the vertical y axis and the horizontal x axis global space refers to the fact that the directions of these axes are constant throughout our world i could rotate an object to face a different direction but the global directions of course still remain the same let's not change to object space the label here says local but you'll see little later on y prefer to call it object space instead so in object space all directions are considered from the point of view of the object so having rotated the cube ford is now in this direction and the x axis is in this direction let's have a little discussion about parenting so i'll reset this cube objects that is back to 0 0 0 in the world and notice that the sphere object is positioned at 2 0 0 if i now grab the sphere object in the hierarchy and drop it onto the cube object i've successfully parented it to the cube so we say that the sphere is a child of the cube and conversely of course the cube is the parent of the sphere all that this means is that the position rotation and scale of the sphere are now all relative to that of its parent so in the inspector the values we see for position rotation and scale are all relative to the parent and we call them local values this is why if i were to move the parents say 2 units to the left the position of the sphere in the inspector still reads to 0 0 as it is indeed still 2 units away from the parent on the x axis the spheres position relative to the world that is to say its global position is of course at this point 0 0 0 as we can see if i quickly unparent the sphere from the cube i'll reparent the sphere and let's look at what happens if i now rotate the parent so of course the sphere rotates along with it looking at the values in the inspector once more we can see that the local values remain unchanged as despite the rotation it remains two units on the local x-axis away from its parent all right now let's say that i rotate the sphere a little bit so it's no longer facing the same direction as its parent here's a quick test if i were to manually increase the spheres z position in the inspector over here what direction will list fear moving forwards globally forwards relative to its parent or fall is relative to itself the correct answer is forwards relative to its parent so this is the distinction between object space and local space which i alluded to earlier local space is relative to the parent while object space is relative to the object itself all right so i've reset the scene back to how it was at the start and let's experiment with some of these things now through script so i'll just right-click create a new c javascript and maybe call or something like cube script and i'm just going to attach that to my cube object and then we can open it up so let's say that we want to parent the sphere object to the cube object the first thing that we'll need is a reference to the spheres transform so these is where to get this would be to just make a public transform variable up here or we can call this sphere transform and then if we save that because it's a public variable it will show up in the inspector here and we can just drag the sphere into that slush and then in the start method we just want to set the severe transforms parent so we can write sphere transform dot parent and we want to set this equal to the transform of the cube so since the cube script is attached to the cube we can simply write is equal to transform so if we save that and go into unity you can see that in the hierarchy the sphere is not parented to the cube but as soon as we press play it will it will be parented we haven't yet looked at how to rotate objects without code so let's have a look at that in the update method if we just write a transform dot rotation you can see that rotation is stored as a quarter nyan value cut onions are a little bit tricky and we'll definitely discuss them later on in the series but unity does provide a much more intuitive way of working with rotations with the euler angles variable which you can see is just stored in our familiar vector 3 format so if we wanted to increase the euler angles over time we could just say transformed our euler angles plus equals and you could create a new vector3 say we want to rotate it on the y axis so we just say 0 for the x and then for y we could say maybe give it a speed of'0 degrees per second so we'll need to multiply that by time.deltatime and then just 0 for the z axis let's save that and give it a try so if we press play now the cube is rotating around and of course since the sphere is parented to it that is rotating around with it as well i think it's definitely worth mentioning that an alternative way of writing this would be to just say new vector 3 0 1 0 and then to multiply that by the speed so what you'll often see people do is instead of writing it out like this they'll use the shorthand vector 3 dot up which as you can see from the summary here is just another way of writing 0 1 0 and this shorthand does exist for all other directions for example forward or left and so on but let's just leave that at up and if we go back into unity now and just press play you can see that it's still got the same result but let's now grab the cube and just rotate it a little bit and if we press play now we can see that it is rotating around its global y axis in other words this would be rotating around its local y axis and it's instead rotating like this so let's see how we could change that so in monodevelop we can use the proper rotate method you can see this takes in euler angles so you can just pass in what we had before vector three dot up x time but delta time x'0 and now by default the rotate method works in object space so if we press play we'll see automatically this is now rotating around its local y axis if we want to specify that it should work in global space then we can just add a comma and we can add this extra space parameter space dot and we can choose between self which is object space and world which is obviously global space so if we change that to world and save and press play we can see that we'll have the behavior that we had earlier now last episode we looked at the translate method and that method works similarly to the rotate method so if we say transform dot translate and say we just want to rotate vector 3.4 words x time dot delta time and multiply by some fixed speed say maybe is seven by default this will also be translating in object space so we can see that if we press play as this is rotating around it will move forwards in the direction of the rotation if i change the visualization over here to object space can see little bit better what's happening it's just following its own forward access around and around if of course we change this in the same way as the rotate method to be a space dot world we'll see that it now operates of course in global space and just heads off ah along the global z axis all right let's perhaps try setting the scale of our sphere object from the script so maybe in the start method we can say fear transform dot local scale is equal to and we can set this equal to a new vector3 say two by two by two and this sort of alternative shorthand once again for writing that would be vector three dot 1 multiplied by two so if we just try that out when you press play v sphere should increase in size as it did finally just to experiment with setting the position versus the local position let's say that if the player presses the space key so you can say if input get key down key code dot space let's first say sphere transform position so in other words the global position is equal to vector 3.0 so in this case if we play and press spacebar you can see the sphere will keep getting reset to global zero zero zero and if on the other hand we change this to local position you can probably figure out what would happen when you press spacebar it will just snap to the position of its parent since of course local position of zero indicates a zero offset from the parent all right so that is everything for this episode thank you very much to those of you who support these videos on patreon i hope you enjoyed and until next time cheers