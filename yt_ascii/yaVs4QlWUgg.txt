we're good to go okay how much math is really 
needed to become a software engineer do you   really need to be a math wiz in order to become 
one this is a question that has been asked over   and over again and i really want to share 
with you my perspective as someone who is   a software engineer but took a different path 
and i'll be very honest during school especially   in high school math was not my strongest 
subject okay let's just dive right into it i'm going to save you the trouble of even having 
to watch this entire video although wait i really   hope you do there's a lot of valuable information 
that i have in it but i want to give it right off   right off the top of the video you the answer 
is do you have to be a math wiz a math pro   in order to become a software engineer the 
answer is no you don't is math important in   software engineering the answer is yes and no kind 
of i'm going to stay neutral on that one and i'll   explain to you why later on in this video now i 
always have to add a disclaimer for these kind of   videos because there's always people who have very 
strong opinions which is great i like to remain   in the middle and neutral to just provide you the 
facts and proper information but my disclaimer is   that yes there are always exceptions to the rule 
so this is based off of my experience talking   to colleagues in the industry friends in the 
industry and of course there are some software   engineers that use math on a day-to-day basis 
which we will get into but for the most part we   don't need to be a math pro let's start off by 
talking about what software engineering really is   software engineering is kind of a broad term 
when you think about it there is a lot of roles   that can be housed under software engineering a 
lot of specialty positions that you can get into   with software engineering skills i really want to 
first talk about what exactly software engineering   is because without having an understanding of what 
software engineering is we can't really get into   the math question okay let's go to our 
favorite tool we always use which is   google and search simply is what is software 
engineering well one of the answers that comes   up right away is software engineering is defined 
as a process of analyzing user requirements and   then designing building and testing software 
application which will satisfy those requirements   okay within this definition i feel like there are 
quite a few roles already that were listed from   testing software okay that would be qa to 
analyzing user requirements maybe that would   be ui ux maybe that would be a business analyst 
and designing that would be designer so as you   can see already it's quite a broad term with 
many different roles that can be housed under it   so now that we have a sense of what exactly 
software engineering is it's essentially building   let's put it in one sentence software engineers 
build stuff okay that might be too simple but   getting to the point of software engineering 
is a broad term and there are lots of roles   under it lots of different specialties from game 
development to mobile development web maybe   you want to be more on the security team different 
things like that of course these roles have their   unique and specific names as well but oftentimes 
you go to school for software engineering you   self-teach software engineering whatever your 
path is and then you kind of narrow down into   different roles before we get into it though 
make sure to hit that subscribe button for   more tech and coding related videos shout out to 
some of these subscribers here thank you for your   questions comments feedback and most importantly 
your support and love okay now that we have that   covered where did this question even come from if 
math isn't really required as a software engineer   on average why is this question so popular this 
is something that i was thinking the other day   is why do people always ask this question if it's 
not a huge factor in becoming a software engineer   to be a pro at math and i think it really comes 
from the fact of not math as a skill itself but   what skills math gives you let me explain 
typically not always but typically people who   are good at math are very logical thinkers good 
at problem solving good at breaking down problems   those are the skills that are used in software 
engineering you need in software engineering   to have logic you need to be able to break down 
problems you need to be able to see something as   a whole and then break it down into pieces but 
also see the big picture a lot of these skills   are taught with and you gain if you are good at 
math or someone who enjoys to do math now that   doesn't mean if you aren't good at math you can't 
pick up these skills someone once phrased it to me   really really well i thought that learning how to 
code and getting into software engineering you are   training your brain to think in an entirely 
new way and if you haven't really used your   muscles for that way of thinking for the math and 
the science and different things like that before   it's going to take you a bit of extra time to 
train your brain to think in these ways it doesn't   mean that if you are bad at math you can't become 
a great software engineer it just may take you   a bit longer to kind of get those muscles to the 
point that they are ready or what's the word just   keep on working them and they will get strong as 
well whereas someone who maybe is already amazing   at math that learns coding and becomes a software 
engineer maybe it'll be much easier for them   because they already have those problem solving 
skills just applying it to a different format   okay and that brings me to my next question is why 
is logic important why is being a logical thinker   or having these skill sets important in software 
engineering how is it really used and my answer to   that is being a logical thinker and being able to 
really utilize strong problem solving skills will   help you because essentially when you're coding 
you're talking to a computer that's all you're   doing this computer does not have emotions well 
yet anyways probably in the future they will but   this computer doesn't have emotions it cannot 
think for itself once again yet anyways and it   needs you to tell it what to do what program to 
build and this isn't done with a wishy-washy oh   i would like to have this but maybe this it's done 
with a matter-of-fact way whereas this if i type   this it will produce this if i put in this it will 
output this and it's simple it's black and white   there's obviously a lot of gray areas in software 
engineering but at the end of the day if you build   something with a certain specific code you know 
what output you will get and with that comes   logic it comes thinking of okay more in a clarity 
sense and thinking in a problem-solving sense that   you know what you out what you input you will get 
outputted and sometimes if you don't have that   logical side to you and you try and do it you can 
get maybe too emotional or to thinking why isn't   this working i don't see the results happening and 
at the end of the day it's as simple as you put   something in you receive something out i don't 
know if that makes sense to you i hope it does   that was how i really thought of it and with 
problem solving it's so important because when   you're working on a defect when you're working on 
a bug sometimes when you look at the big picture   it is so intimidating and you don't know how 
you will ever start breaking it down you need to   be a good problem solver that you can see really 
explain what the problem is and break it down once   again all these skills can be learned even if you 
are not a strong person in math it just might take   you a bit longer okay i hope you found this video 
very valuable and helpful as to do you need to be   a math pro or have strong math skills to become 
a software engineer at the end of the day not a   lot of math is required in software engineering 
on my day-to-day basis i do both front-end and   back-end right now i'm doing more front-end work 
but i don't use math on a day-to-day but i do use   logic and problem solving every single day make 
sure to give this video a thumbs up hit that   subscribe button and also leave in the comments 
other videos you want to see thanks everyone you