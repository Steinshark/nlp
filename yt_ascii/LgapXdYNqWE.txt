one thing i'd change about go i do want to be completely up front this is a hashtag ad for boot.dev if you don't know about boot.dev it helps to do a whole back-end career it kind of gamifies the whole process everyone that i've talked to really loves it this is why i like sponsoring it so everyone say thank you to lane this is awesome he's very very good at go i've been on his podcast and so we're doing a reading for them so i just wanted to be obviously you know clear about that up front second use code prime gen if you want to support me very very fantastic all right let's get started go is built for grug brain programmers like me i too am grog brain i do pick up i do pick up mallet from time to time i pick up club but then i calm down i do not grog smash grug brain developer not so smart but grub brain developer program many long year and learn some things although mostly still confused apex predator of grug is complexity complexity is bad say again complexity very bad you say now complexity very very bad given choice between complexity or one-on-one against t-rex grub tech t-rex at least grug's ctrex if you haven't read greg brain by the way extremely great dev article it's by the person who makes htmx it's very it's very very fantastic the go team took many years to add generics to the language it was a good addition and many argued that it was an obvious decision that should have been made sooner i disagree the simple truth is that when you're building applications especially back-end web applications or cli applications which is where ghost shines as a language in my opinion you just don't need generics all that often they're quite nice to have but far from necessary are you building a clever library using general purpose data structures sure generics make your life much easier but let's be real i'm over here parsing json and shoveling strings into databases i don't need three layers of abstraction to get her done hahaha oh this is a hot take this is a smoking hot take land oh my goodness small brain code worker good for application layer what else is good is go good for before i start  on my favorite language let me point out some other reasons i love go grub brain syntax yep it's super simple that's that's the thing about go go is so simple that you turn on co-pilot and you can just start writing it and you're like ah yeah that makes sense yeah that seems about right yeah that's pretty good like you have to have a couple intuitions about go and you pretty much can just right go without actually knowing go and copilot will effectively be the pilot it's so simple it's boring it's i mean there's something very beautiful about that statically compiled binaries a tool chain with built-in formatting testing and dependency management dependency management built on git repos let's go this is a good choice by the way this is a good choice a standard library that cares about the web go routines and channels concurrency that doesn't suck a greed fast despite a garbage collector agreed and now with arena allocations as a potential i mean go is is literally 99.5 of rust right i mean that's the thing to really consider is that once you get in especially once you get into multi-threading and all that go can be real fast right go ken in some cases be rust because it just doesn't need to do all the safety flag on play unnecessary dick riding could be but again you gotta write go that's always the challenge with go is that you got a right go it's the downfall of go what would i change about go not a hard question it's some types oh baby this is what i've been talking about i want him so bad or enums tagged unions or whatever you want to call them go currently has a shitty excuse for enums can we all agree can we all agree that this this is just the worst is this not just the worst part about go they just do just get rid of this already get rid of it they're pretty bad go enums are verbose error prone and don't actually enforce much of anything from the from a typing perspective let me show you what i mean type color int it's just an int uh this is a type alias at the end of the day the new color type is just an int it's not really a new type it's just a new name for an existing type in this world every integer on god's green earth is a valid color that's crap hahaha hey don't tell a color what a can and can't be okay just because you see color as red green blue zero one two does not mean that three doesn't exist okay it's out there all right if i wanted the that let's see if i wanted that i would just use int i want to restrict the set of valid colors to a specific subset of colors red green and blue even uses red green blue let's go iota iota isn't iota the smallest like thing is it just like a tick iota keyword and go is a special feature that allows you to define a sequence of constants that increment by one a small unit yes yeah iotat iotat is this yeah it's like it's like nothing right yeah you're a tick okay the iota keyword and go is a special feature that allows you to define a sequence of constant that increment by one sounds useful it's not it's just cryptic syntactic sugar a small brain a developer might like might let's see like me might make a few constants like this this is i mean honestly like i really don't mind this versus this i mean like yeah i can get used to this but do i need iota no i don't need iota you know what i need real enums you know what i mean i need real enums that's what i want here's the ticker the iota method uses the same amount of lines of code but now i need to count on my fingers and toes to figure out the actual value of any of these constants yeah hey what's pink you know what hey you know what you should have been doing elaine you know what you you know you've been doing wrong buddy buddyman guy if you were just on the lord's editor of vim you would have been able to go like this ah pink is nine okay pink's nine you can tell right away that it's nine by the way it is i can just tell you know why because i have relative numbers loser nine got em dap that all right what's the value of 12th duh got him additionally the there isn't even popular support it's a popular support to quickly marshall these integers into strings for debugging without writing mountains of boilerplate code frankly i just pretend iota doesn't exist and instead define string constants like a peasant you know there is something really nice about this i mean obviously for serialization totally sucks you would much rather use integers better for protobufs better for everything right it's a much better format to use but i could understand why you want to do this dude it goes complete lacking despite the verbosity nothing is safe believe it or not i still do this and go clearly not a color the compiler doesn't care the color type we made is just an alias for string any string is a valid color sure i define some constants red green blue but they're just constants that i hope and pray and beg my team use oh man this is like a i do i can just feel my upsetness rising because i do agree this is just the worst i have no way to enforce this stuff at compile time and so now my only choice is to write runtime checks everywhere i use this code why didn't you use a valid color is this not like this is goes i honestly am on team goes this is ghost worst feature you run time and plus you don't want to do runtime checks this is a compile time check why would you want to add weight to your server to do this if there's one thing i hate more than indenting with spaces it's okay oh my god can we all just take a moment here and just like yo why are you trying to trigger me article why are you trying why are we trying to fight here okay we don't need to fight we don't need to fight we can just all agree that consistent white space is nice okay it's doing literally in tab stock and doing literally anything in runtime yeah how to make it go better now i can't believe i'm using typescript as an example of a language that does something well but here we are okay so i actually disagree right away i actually hate typescript for this but we can keep on going i hate their unions i hate i hate their unions i hate their unions with a passion i hate it i hate it i hate it but i get it i get why you're using it's it's easier to explain than rust if you were to use rust it's just a lot of confusion shut up and take my money look at that it's simple it's elegant it's do you see me you see this guy you know why it's not technically safe everyone knows why it's not safe okay look at this type a color equals red green blue okay blue blue my did you just try to blow my boolean and then we go like this type thing equals foo is a color right and then we go like this function foo and it has a string passed in right it's a string and it returns a thing and guess what we go like this return okay no that thank you for that return json dot parse string boom json returns in any and any converts this thing into valid thing with no checking it just thinks it is but you still have to do runtime checks if you decode anything you have to do runtime check anyways just something to think about just something to think about it's why it's why it's why me and typescript don't get along that well but i understand what you're saying you want something that you you can strain it and when you have a function you enforce it right i'm on that team sometimes provide more type safety more expressiveness and easier to read and easier to understand all the while being less verbose it's a win-win-win if it weren't for goes backwards compatibility promise which i love i'd even rip out the stupid iota keyword in addition to adding some types absolutely breaking typescript snatches to feed from the jaws of victory let's go please tell me i i'm hoping he stole that because i stole from somebody else but i love that phrase this is my favorite phrase in the universe i say this to my kids right when when like you do this all the time have you ever been doing something super good and then you make one shortcut and then your shortcut just keeps bleeding and you're just like you just keep on going and you're just like all i have to do is just change one thing but for whatever reason i want to just finish this project and it's just like stop snatching defeat from the clut like from the clutches of victory why are you doing that let's say typescript did it they have a beautiful beautiful some types they're called unions typescript in typescript but they're the but they they are the same thing then some galaxy brains 10x dev decided that it also needs to be an enum keyword so that way we have two ways to accomplish the same thing i do not like enums in typescript ryko b grug pray for some types i am completely on this team right here i do hope go can do union types i love unions even simple unions even unions in some small amount would be fantastic there's there's many problems when it comes to typescript and union types there's like these easy things you can do let me give you a little example of why typescript is truly just a just a language of of just emotional pain let me just give you a quick one okay let's go like this are you ready for this one function foo takes in args so that's going to be a number or a string array right right boom okay does that look good does that look good and let's define a type let's call this my union my union can either be a number array or a string array okay i'm gonna go like this args.push69 and i'm going to arc stop push 420 right i'm gonna push a string or a number and now let's just say i have a const my thing which is going to be a my union of that now what i can do is i can go like this i can call food up my thing and look at that it literally has no it doesn't know it has no idea it says hey you're good bro hey hey man that's cool it's not cool that's not cool that ain't cool that's why i like tagged unions because tagged unions require the same type right these do not require the same type this allows for something that you know they effectively they allow it to break some or they allow in typescript it allows it to effectively capture some of the type so a number array really should technically be able to be passed in here because if you think about it a number array is is like a number or string array but to me this up level casting is inappropriate because if i define a number array it's not a string array right and so even if i jump up here and say hey there are no strings in this ever they're okay they're okay with that and for me that's like that's that you know you always hear me on typescript and all these things this is one of the biggest reasons i sit on typescript because when you develop libraries you run into this kind of crap all the time okay this is life welcome to life you run into this kind of stuff all the time when you're not working in that and you're working in this beautiful ui land where all you do is just play around with react components guess what you don't really run into that and that's okay i don't care but for me that hurts emotionally i just want good typed unions and i'm completely on boot.dev's team right here which is iota suck it goes by far worst feature i wish they had tagged unions honestly to me that would make the language feel almost complete is a more generalized standard library now that you have generics and tagged unions and boom you got yourself like like go is a competitive af language right it is as good as any other language can be in a modern era while still having the simplicity of a garbage collection but having all the goodness of a compiled language right which is like everything you've ever wanted case sensitive visibility i don't like it but i get it i can i can deal with that right that doesn't really you know i would have preferred pub can we all agree we all prefer pub right why why do that why do case sensitivity for visibility i don't get that whatever i don't care i don't care it doesn't bother me enough do you know what i mean that's kind of how i think about it in my head anyways i hope that you enjoyed this reading i really appreciate that go check out boot.dev use code prime gen if you want to fantastic absolutely am happy about them they do a good gamification of learning back end development and it's really really good so my recommendation because i get the question all the time how do i learn back end how do i make a career choice how do i make a switch i would consider this one of my go-to resources if i were you and you or me i'd use your body to go to boot.dev the name is i just didn't add it yeah i just didn't add ogen