some people watching will have good
passwords, some people will have thought about this before, some people should have thought about
this and haven't, and hopefully will after we talked about this a little bit
more. um, in the previous video i showed you cracking a password using pretty basic
techniques, right? there are people who know more about this than me who run other
custom dictionaries and rule-sets and things, right? it's not really important
for getting the message across of just how quick this is. picking a good password
was actually a lot easier than people make it. xkcd alluded to this and we'll talk about that
in a minute. it didn't necessarily answer every question but it did get a good
message across and then as other aspects should you reuse passwords and, and so
on. umm... so let's address these. password
crackers and and people who research password security talk about something
called password entropy, which is the amount of information held in a password, the idea being that if you're not
holding much information in a password, it's going to be cracked very quickly because
it's not a much search space to go through. now in some
ways i think that's a bit of an overcomplication i think practically you need to look at
two things. you say, first of all, can it be brute-forced, right? in which case if the answer is is your
password shorter or equal to 8 characters, the answer is yes, right? if your password's nine
characters and you're using symbols, you're probably ok, right? fairly
straightforward, ok? as gpus get faster, these barriers go down, and then you've got to
ask, "is your password dictionary crackable?", right? those people in the last
video didn't think so, and then there i was cracking their
passwords and they had quite good ones, some of them. so you've got to do two
things: you've got to make sure your password is long enough and uses
interesting characters so it can't be brute forced, but beyond that you've got to make
sure that you can't be dictionary attacked. let's get this out the way first; if your
password is "password", you probably want to close out your browser right now and
change it and, you know, hang your head a little bit. if there's any variation on
the word "password" or has any of the numbers "1 2 3 4" in order in it, you need
to delete those passwords, maybe delete your account out of shame, right?
because, oh dear. ok, so i'm not addressing those, i'm
dressing... addressing, i guess, what what a better password will be. now
password systems in general are not a very useful way to authenticate, right? a lot of
people think this, ok? because they're hard to remember,
unless you pick an easy one to remember, in which case it's easy and not secure,
alright? so, in some sense we've tried to find a way of authenticating ourselves
which is hard for a human to remember, easy for a computer to guess, and people
do it badly, right? there's lots of reasons why passwords are terrible. google
thinks passwords are going the way of the dodo, because they're bringing in this new
authentication system where, you know, it tracks your movement in your pocket and
things like this. fine, maybe that will work, but in the
back you're always going to have some kind of password, because you don't want
to be pulling your phone out of your pocket and google saying, "you moved your
phone weirdly, so can you type in your pin code", right? you're gonna have to have
something backing it up at all times. for now, we're going to have passwords for a
while longer. and so we have to think about what they
should be. so, obvious rules: 8 characters, 7 characters, not long enough, right? if you have an 8 character
password and you assume, just for a minute, that the website you're hosting
it on is storing them in md5, then i'm going to be trying passwords at forty billion hashes per second. how long's it gonna take me to get
through eight? not that long, right? if i'm smart about my character sets, less than
a day, a few hours probably. so, let's talk about the better approach
or the nearly perfect approach of xkcd and how can we improve even on that. so xkcd suggested the situation where you
had a decent password, because it was hard to remember, because it was some
word that you've got. is it "troubadour"? and you change a few letters around for
numbers, and you capitalize things and you stick in a symbol somewhere and
things, and his argument is that this isn't a good password because there's
not much entropy, because you're doing standard things that people do in
passwords, right? now that's absolutely true in the sense that if you replace an
'e' for a '3', everyone does that, that's number... rule one on the list, ok? don't think that's
clever because it's not. lf you replace a 'z' for a '3', actually that's
still not very good. let's pick a better one. if you... an 'o', if
you replace an 'o' for a '3', that's slightly better, but someone's still probably going
to have written that rule, because why wouldn't they when it's so fast to try them out? ok, so
you've got one option which is up which is a kind of hard word to remember
with a bunch of weird to remember symbol exchanges, and then you've got another
one, which is just four words appended together: correct horse battery staple. ok i think that's the order, right? now
everyone knows that password which kinda means that password is not very good,
but the point remains: if you pick, his argument is that if you pick four words and just
stick them together, you have... it's inherently un-brute-forceable, if that's a
verb, right? because it's too long, even with
all lowercase even without symbols and things, and it's
not really gonna come up in a dictionary much because those are weird
combinations of words that aren't very often used, and it's four of them. ok, so how breakable are these two
passwords? well, first of all, troubadour with all those exchanges probably
slightly harder than he suggests, because its entropy is not bad. i think it's 11 characters and you know
there's some exchanges there. not all of them are immediately obvious. so it's not absolutely terrible and
perhaps slightly better than many things but he's absolutely right but it's quite
hard to remember and a bit of a pain, certainly a pain to type in. "correct
horse battery staple", much easier to remember, no funny characters to press, you get to
type that quite quickly but the issue is that we don't brute force passwords
of that length, we dictionary attack them, right? so the question really comes down to, "is
'correct horse battery staple' going to come up in a dictionary attack?", and the answer
is, "probably not", but once we start thinking people are just appending four
words together, maybe yes, ok? so instead of our password
cracking being a brute force of the number of characters to the power of the
length of our password, it becomes the number of words we might
use to the power of the number of words we are using, okay? so in this case, let's say the top
ten thousand words to the power of 4, okay? which happens to be a very big number,
so we're kind of safe. but what if you only pick obvious words?
"staple", i've checked, right? i've checked a list of about the top
20,000 english words; "staple" is somewhere around 12,000, right? which means that we
don't tend to use it very often, that makes sense. "horse" is much further up
the list so were "correct" and "batteries" further up the list as well. i mean, we all have phones, we talk about
battery all the time. so, if you hypothetically picked four words that were
in the top five hundred, then suddenly the search base is 500 to the power 4 which
is much smaller and your bad password is crackable. so, my advice to anyone
attempting a password system like this is to assume that the person attacking
you knows you're doing a password system like this and pick hard words, right? a
brand name or a word that isn't going to come up in a list of obvious
words that people use, ok? "staple" is not a bad word, the other
three are not great. so, you know, change it for something else, ok? off the top of my head, uh... "lemming" is
probably not a very common word we use, ok? don't use it now, because i said it. i've got
a rubik's cube, here "rubik" is probably not, or "rubik's" is probably not in the top
ten thousand english words, right? which makes a search space much harder to use, ok? we're changing the problem around to be
a question of can they guess the word you'll used not the structure of your password, ok? so
a really good password will be three english words, i would say, right? with one
word that's a bit out there ok a bit odd; maybe it's a made-up word
or something, right? because then you can't be brute forced because of the length,
you can't be brute force because of a combination of easy dictionary words,
right? and you don't need to put symbols in, because it's just too hard anyway. ok, that would be really strong. if you
want to be even stronger than that then just stick an underscore right in
the middle of one of the words, just to really annoy everyone, right? because if
you stick it between words it's going to fit into a standard rule set of the sort
of things people do with passwords, but if you put like an ampersand in the
middle of a word that shouldn't have an ampersand in it, like "horse", "ho&rse" in the middle of
"correct ho&rse battery staple", it's just that much harder to crack. and
then, for you to be able crack that password, a lot of things have to go
right for the attacker. they have to know the four words you're
going to use, in the right order, and they have to have tried that with the exact
right rule set that put an ampersand in at that exact position. and pick a word that
other people don't use very often, like your favorite band name or something
like that, ok? because that way... maybe not your
favorite band name if you blog about them because then they can social engineer
the password, that's a different question. this is what you do if you have to pick
a password, right? but what you should really be doing now is using a password
manager. so, in some sense a password manager
swaps you remembering a bunch of passwords for you hopefully remembering
one really good password, ok? so this is the kind of password policy
that you go even further with and make that your master password. so what a password manager does if it's
well programmed is encrypt a database of your passwords for all your different websites
and and and you know accounts and then you secure that with a master password
of some description, right? and your master password has to be good and i
don't mean, you know, "password password password" because no one's going to guess
it's three times long, right? it needs to be of the level we were just
talking about. and you also need to look into what
encryption the password manager uses, where's the decription done, it's not
done on the server, we need to make absolutely sure it's all local and things
like this. so look into it and see how they do their security. i've looked into a lot of password managers.
they're all pretty good, you know, of the major players, right? they all use broadly similar schemes, they use very difficult to break hashes with lots of
iterations, which means that even if your passwords are released on the internet
they're in encrypted form and they can't be obtained. so all my passwords are 16 characters of
totally random and i don't know what they are, right? so if my... if my database
gets deleted i'm somewhat in a problem right? but, my master password is similar, i won't give away too many too much
information on what exactly it is it, right? but my master password is in a similar vein
to what we were discussing just now and i believe is essentially uncrackable at,
you know, currently. but i can type it in quite fast, because i've done it a lot. it's long enough and i can remember it, which is good, and i only have to
remember one which makes it that much easier. so now, when you log on to a website
and it says, "register for this website" again, and i'm only going to use it for five minutes, what am i going to do? i'll just
make it my standard password that i use every time. instead of doing that, you
then go to your password manager and generate random 16 characters and it's
win-win because then, if you never use the website again, it doesn't matter anyway, because
you've got... you've got a random password. and if someone, if that website is a bit
dubious and they release your password later in a hack, it doesn't matter
because it's random, right? and that brings us on to last point:
never ever reuse passwords, ever. i fallen to this before, someone tried
to log into my facebook once with a password that got leaked, someone tried to log into my skype with a
password that got leaked, and that was my fault in a sense, because i used to use
the same password a number of times before i knew what i was doing,
right? this is a few years ago. now, i know you have to have different passwords.
that way, if a password gets leaked down to the internet and hopefully it's random
anyway, from your password manager then we're in business, right? you change that
password, and you're secure again. if your master password for your... for your
database is weak, then they are going to hack it, and then if they get in they get
all your passwords. so, obviously that has to be really really strong. last password's been hacked a couple of times, but
this encryption is so strong that if your if your master password is strong it's
fine. which is a bit cavalier thing to say, but
it's actually true because of how many iterations they use.