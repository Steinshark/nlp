how many computers in here do you think we've got multiple processors in? ok, um, yeah, i don't think any of them have got multiple processors in the way that i would think of multiple processors my edit machine has two intel processors in it, physical chips ok, so you define a multiprocessor system as having two physical chips? that's what i'm thinking. okay, or we could also take multiple cores. where it's the same thing on the same pieces of the silicon. okay, so you've got two physical chips being two physical processors which machine or multiple cores which machines in here do you think are multiprocessor? we'll just use that term to refer to both of them systems. okay. well, i reckon these new macs here have got multiple cores. yup, they're all quad core machines of various types your phone maybe? 
yeah the phone will but you've got all these vintage machines around so starting over here with the apple macintosh lc 475. well, let's just say i said, you've got one processor in it. there's also a powerpc laptop under there underneath the surface underneath the multi processor motherboard so the surface is real depressed is just sitting under there the atari st that one we could count this as we'll say it isn't why? could we count it out? because the keyboard has got a cpu in it. okay. yeah, i've got an intelligent keyboard. so the cpus got a microcontroller in there which scans the keyboard and then sends over a serial link the key presses to the main cpu and so on so so proprietor in there. i've got the atari falcon under here how many processors? i'm guessing that there's a trick here. so i'm going for two. yes got two processors in it. it's got a 68030 cpu and it's also got a five six zero zero one dsp both motorola processors in that don't think any of that acorn stuff which are now relatively. well. yep so they're all single processor systems. although the risk pc did have two prices of slots so it could have read a separate 486 put in there and let's say managed to get hold of the one existing hydra card in enable you to have multiple arm chip so that single processor their original ibm pc single processor bbc micro i think if that's a special one then possibly but if just under one man, no so that is a special one. that's actually got what a concord they're tube system which if you watch the videos on steve furber? talks more about this, but they initially released the second processor not co prices over the second processor for the system which was a complete another computer inside there with a 6502 ram and so on in their 64k of ram showed that old it was and that was then connected to the bbc micro which had its 32k of ram and its 6502 on there the master turbo i've got over there has that built into the motherboard and so that's technically a multiprocessor system. it's got two cpus in there she's got two cpus at the same time running a slightly different speeds but to cps at the same time apple to single processor the acorn and the amiga and the atari again, the amiga i think you could possibly make an argument. it was a multiprocessor system, but not in the way we're thinking about it. why have we just done that? well, it shows that there's there's two ways you can design a multiprocessor system so your system home your editing system the macs on here. they have two processes. that are of the same design to intel court or two core. shall we say or multiple cores all of the same design and those purchases are identical and they use pretty much to do any of the tasks of things it's what we call a symmetric multiprocessor system so each cpu in there can be allocated by the operating system to run programs it can answer io and things and just do anything that you need to do. they can split the tasks up to do different things by comparison the falcon and the bbc micro system the bbc master turbo they have multiple processes in them and you can use them for general purpose tests but the general idea is that their processes do different tasks. so it's an asymmetric multiprocessor system say for example on the falcon the idea was at the 68030 would run you the main system whatever thing is doing and then he fueled you to do some sort of person that would benefit from the dsp chip the five six zero zero one that's in there you would offload your processing onto that feed the data and it would president it would feed the data back out so it's effectively running as a separate subsystem and so on on the bbc micro system. the idea was since that you'd have the 6502 chip there's in there's normal running the io drawing things on the screen handling the keyboard and so on and then you'd have your main processor that would do most of the processing work and occasionally would tell the other processor to load a file into memory or to tell the other processor to do things so you can design a multi-person system in two ways. you can either have it so all the cpus are working on the same task and in that case they probably will all connect to the same piece of shared memory and they'd all work on the same task and they'd all talk to the same bit memory and communicate along that or you can say now i'm gonna have different processes perhaps of different types different speeds doing different jobs so multiprocessor systems have been around for quite a while in various different guises there's a sort of suggestion here that the idea of parallel is the more modern way of doing it surely with things like gpus coming we've got hybrids now, right? well, yeah. well, yeah, but i mean the gpu is generally being used for a specific task things whether that's graphics processing or bitcoin mining or whatever it is able to do on it and depending on whether you're wanting to make money or lose money and i can let you work out which one of that is going to do which and surely we're using multiple cores purely because we ran out of horsepower on single cores so one reason with 4 cores good question so the things you want to fight the problem run as fast as possible and you've got two ways to do that you can either make the computer run faster for example, speak fast you get more words per second and so on and you get it going and you get your computer doing more and more and more more and more more more more more more more faster and faster faster faster and faster,  the problem with is that is you get to a point where you can't actually push the computer faster. there's a thing called the power wall that's the point where you can no longer dissipate the heat away from the cpu we actually hit that quite a while ago what you're able to reduce the voltages used on the chips which meant you could get a bit more and again, but a platinum getting to the point now where the voltages are, so different is really logic zero and a logic one is so low that actually, you could take it any lower you'd get a leakage between the transistors on the chip itself. and so it's not possible so you can push the speed in one way the other way you can make the problem make the program run faster is to split it up into multiple chunks to do them all at the same time so one way for example to make sandwiches faster is that you butter the bread faster you put the filling in faster you put the bread faster the other person if you get two people doing it and then it takes in the same amount of time to make one summary's but you have two people doing it so they make twice as many sandwiches each time. they make a sandwich same with the computer we can either make the computer processor faster or we can have multiple cores each working on part of the problem at the same speed and then we have them produce the problem produce the result faster to do that we need to be able to break the problem down into multiple chunks and x:q each of those chunks separately which is one problem you need to work out and can you break the problem down can be quite simple if you will say processing an image you want to say make it 50% the brightness then you can process the top half process the bottom half separately do them at the same time you have the time it takes to process the whole image but the tasks are harder to break down because you need to work out how you want to break down the algorithm to run over different things asymmetric and symmetric multiprocessors aren't really competing for each other. it's not this is how we used to do it this is how we do it now you would find that there are multi person systems back in the 80s and 90s parallel processing was a big thing in the late 80s early 90s people were looking at parallel architectures for doing all sorts of things in fact, one of the things which describes how parallel systems work flynn's taxonomy was created in 1966. so the ideas have been around for a while i think it's more that for a lot of things when you you've got a task that you want to do in different things symmetric multiprocessing makes sense for other things having an asymmetric system whether that's your dsp io processor a gpu a tensorflow type thing and so on makes more sense like that so how we design a multiprocessor system is very much based on what you're wanting to do what are you trying to do with it? i mean flynn's taxonomy is an interesting thing because you then get some really weird processor types coming up so you can either have a system which has got a single instruction stream or multiple instruction streams and a single data stream or you can have multiple data streams so you'll end up with a single instruction stream single data system or most multiple destruction streams single data system single instruction multiple data system or multiple instruction stream multiple data systems so a modern multi-core cpu. well actually at times behave like a single instruction stream system at times behave like a simd single instruction stream multiple data stream system and at times behave like a multiple instruction stream multiple data system and we end up with these all being used at different times the easiest way i think about it as a single instruction stream single data stream price is that that's the sort of classic model of a processor you've got a set of instructions that your program is executing and you could think of these flowing through the cpu one after the other okay with the occasional branches like water flowing through a stream if you look at one point the water flows through at that point that's what these two options are doing. they're flowing through the cpu and each of those instructions is probably going to be loading a value from memory or doing some processing on the value that's come from memory and then putting it back out to memory. so if we say you i don't know. let's say it's rendering 3d graphics you're going to be doing lots of matrix multiplications and things on that that you can then pull the data in do the calculations and write out the new points and so on now what intel did around who late 90s they introduced what's called the multimedia extensions mmx and that was followed by sse sse2 amd's 3d now and those other things that do different things which basically add one accord single instruction multiple data instructions so these instructions are still a single stream of instructions that so we're going to add something. we're going to multiply something but rather just acting on one piece of data at a time they can act on multiple pieces of data and if you think back to that 3d graphics you for example will have your x y z coordinates for say your shape and you normally actually store that as four coordinates because you have the x y&z and then you have a 1 in the vetch because it makes the map slightly simpler. and so you might actually then call that you need to multiply that by a matrices and with us simd type instruction. you can read those four values and read the four values from one column of your matrix and multiply them all together, which is four separate operations but if you can use an simd instruction, you can do that in one operation working on four separate bits of data so it multiplies the first player together the second pair together the third player together and the four pair together all in one instruction so they added extra bits new al use new designs for doing things that and they will them to have these instructions if your data restricts the data, your pricing is such that you can take advantage of that you can get some significant speed boost because rather than doing four instructions you have to do one and but you take advantage of what's called data level parallelism the data the pricing you want to do enables you to do those instructions on multiple data options at the same time and you get some sort of speed-up it works for some tasks 3d graphics. for example, for other tasks. it's less useful and so you don't benefit from them but the other thing our cpus can do is that they have a multiple cores and modern cpus the intel i7 amd's and so on are all multiple instruction multiple data things so they have separate calls each of richer running their own stream of instructions so they're on different bits of the program or different programs altogether processing different bits of data still a single stream per processor instance but unless it's an simd bit and so you can have multiple data streams and so you have them? running all of these things and that is pretty much what people think of as parallel processing multi processing of things is you've got multiple cpu cores running their own programs processing their own set of data so we can build up different things so they've been around for years and we've had various different types symmetric asymmetric the different ones of flynn's tessa nanami you've been around for a while that leaves us with this weird one in the top right corner of the diagram, which is the multiple instruction stream so got multiple streams of instructions acting on a single data stream yeah, they're weird. not many of them exist these days i think the most prominent example that i've heard of i've never actually had to program it more's the pity is the space shuttle guidance computer left our flowers probably the space shuttle guidance computer used a multiple instruction stream single data stream machine and that's one of the reasons you might want to do that. is that enables you to say do? multiple calculations and then get some sort of fault tolerance, perhaps out of it touchdown so you can build parallel processing in different ways but the one that we're perhaps most familiar with is that we've got multiple of cpus in our computer whether they're physical chips physical cores as it happens to be all their multiple cores on the same piece of silicon and if we're doing that we need to make those multiple processors do useful things. so the simplest thing we could do is get the operating system to schedule multiple programs multiple processes across each of the different cpus, but that enables had to run multiple programs really good but it doesn't really give us any speed-up in terms of running a single program to solve a single task and to do that we actually need to break the problem down into multiple chunks and execute a chunk of each of that problem on each of the different processes. we've got available to us. whether that's 2 4 6 8 32 however many we've actually got to deal with so we need to break our problem down into multiple what often refer to with threads of execution and run them on different? cpu cores is that same a1 so that he can decrypt the message and read it? right? so alice maybe wants to send another one so she's going to tick this kdf function again she's going to produce a new key and a2 i she's going to send that to bob he's going to take this receiving function a2 now. bob wants to send a message. so he's going to tick