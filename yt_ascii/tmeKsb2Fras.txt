hello and welcome to mcoding where 
the only limit is your imagination. and your download speed. but mostly your imagination. in this episode, we're talking 
about python generators including the yield keyword, 
generator comprehensions, yield from. and how all 
this relates to async. you define a generator function in
 python just like you would any other function using the def keyword and they 
can take parameters. the only thing different that 
makes this a generator is the presence of one of these 
yield statements somewhere in the body. generators act like normal functions. except 
when you hit a yield statement, it pauses. every time you pause you 
can also yield a value, in this case, "hello" that 
becomes available to the caller. unlike with functions, calling 
the generator doesn't run the generator. instead printing out the generator, 
we just see a generator object. the way you actually run a 
generator is by calling its next method which is what the next 
built-in will do. it will run the generator 
until it hits a yield statement. and return the value at 
the yield statement. with every next call, it resumes the
 generator until it hits another yield statement or until the function ends. if you resume the generator and the
 function ends before hitting another yield, you'll get a stop iteration 
exception raised. returning a value from 
a generator is fine. but it doesn't appear as the 
result of a next call like the others do. the return value of the 
generator actually appears as an attribute on the stop 
iteration exception that's raised. this is mainly for a very niche purpose
 that we'll talk about at the end. while ariana grande might prefer to thank you 
next next next over and over again, in python, it's more common to 
let a for-loop do it for you. this works because under the hood a for-loop will 
call that next function over and over again until it finds a stop iteration 
at which point it stops. check out my video on what 
a for-loop actually translates to under the hood if you haven't seen it already. in any case, here we see the items printed out hello world123. so what are generators good for? the most common use case for a
 generator is to define an iterator of a class. for a simple example, 
consider this `range` class. just pretend you don't know 
about the built-in range. and you're building 
a range class yourself. in the spirit of being lazy 
like a generator, our ranges are all going to 
go from zero to some stop value. we don't support start or step. so just like the built-in range which
 we don't know exists, range of 5 is the numbers 0, 1, 2, 3, 4. but when we create the range, we don't
 actually store all those numbers somewhere. we just store the start on the stop. but if all we have is a 
start and a stop, how do we iterate over the elements of
 the range that we're supposed to be representing? the answer is the highly 
sophisticated solution of counting. start at the starting value. and then continually yield the 
current value and add 1 until we get to the stop. we can now iterate over our range just the same
 as we would over the built-in range. and just like the built-in range because we're 
only storing the start and the stop, not all the numbers in between, we 
can construct huge ranges. there's no way a list of numbers from 0 all 
the way up to this number would ever fit into memory. yet we can construct the range 
and iterate over it quickly and efficiently. and to reiterate it's this laziness where
 we're not actually constructing those numbers until we ask to see them 
that allows us to be able to do this. so, while generators can be slightly slower 
than lists in certain situations, if you're just processing them 
one at a time like here we're 
just printing out the current n, then a generator can be 
a huge win over a list. and here's a little history for you. the built-in range in python 2 actually
 used to return a list. that turned out to be 
a huge mistake. and for python 3, it was changed to be
 something more similar to what the generator is doing. it's not actually using a generator. 
it's using something handwritten in c. but it's the same idea. another very common and useful place that 
you might use the generator is reading from a file. once again, this is a situation where
 because files can be so big, you might not want to read 
the whole file into memory all at once. if you can process things line 
by line using a generator, then even if the file is gigabytes big, 
it doesn't matter. you'll only need as much memory 
as you would need to process a single line. so for example, i have 
some custom dataclass. in this case, it's just xyz points. my file just looks like this. i just have floating point 
values xyx, xyz, xyz. i don't know what's up with 
the red squiggle. pycharm thinks i have a 
syntax error in my text file. feel free to free associate about 
what the problem is. in any case, we define a generator 
that expects a file handle. what i mean by that is, the file 
object that you get back from an open call. in a very generator like fashion,
 iterating over a file actually iterates over the lines of the file. we strip off the trailing new line and
 split it by the commas. then we convert everything to floats. create one of our custom data 
structures and yield it. and then we just print out the rows. of course, you 
can do whatever data processing you like. the next very common use case for generators is 
to think about them as lazy sequences. you can loop over them 
repeatedly returning values. so you can think about those as 
values of some sequence, whether it be a mathematical sequence like in this 
case, or just a sequence of objects and you just don't compute the next
 term in the sequence until someone asks for it. so, here's a `collatz` sequence. take a positive integer n. if it's even, divided by 2. otherwise, multiply by 3 and add 1. then repeat. if you ever got to 1 then the sequence 
would start repeating, it would start to go 1, 4, 2, 1, 4, 2 and so on. as of 2022, it's one of the world's 
most famous unsolved problems in math. starting at any number do 
you always get to 1? or could there be a sequence 
that goes off to infinity? or maybe some other cycle 
like 4, 2, 1, 4, 2, 1? well i'm here to announce that 
i've actually proved the collatz conjecture to be independent of 
the axioms of mathematics. just kidding. anyway, here's what a 
typical collatz sequence looks like. it does some unpredictable stuff. and then eventually, you hit 
a power of 2 and it shrinks down to 1. this showcases another very 
important property of generators. imagine, if instead of a 
generator we were using a list. well, besides the fact that this 
list might need to be arbitrarily large because we don't know 
how long a collatz sequence will be, what if i didn't care about 
the whole sequence? for instance, what if i just 
wanted to know how long is it? if you're wondering, it's 111 elements. but if i return to list in this case, 
that would have been a huge waste. why allocate all that memory and 
store all those numbers just to get the length? if i wanted to be more efficient, i'd 
need to write another function that calculates the 
length instead of storing the list. but that length function would be
 basically identical to the list function. just instead of appending into a list,
 we add one to account. if only there was a way to have one
 implementation of the collatz sequence that i can do whatever i want with. once again, generators to the rescue. if i want the length of the sequence, then 
i just count one for every element of the sequence. once again, we see 111. and if i did actually want the whole list of 
numbers in memory, then i can just call list on it. generators can even be used to represent 
sequences that we know are infinite. we can only ever use finitely 
many terms. but we're able to compute as many 
as we need without specifying ahead of time. so, you could represent all the powers of two all the
 rational numbers of fibonacci sequence or all the prime numbers. all you need is an algorithm 
for enumerating them. defining a generator is as simple as
 defining a regular function. but you can go even simpler 
if your generator is simple enough. this is a list comprehension which
 hopefully you're familiar with. and it creates a list whose elements are
 x times x for each x in the range. replace those brackets with parentheses. 
and you now have a generator comprehension. this is really just shorthand notation
 for defining and calling a generator function. meaning this code and the elements
 of this sequence will not be computed until you try to actually iterate 
over the generator. and once again this can be 
 more efficient than the list version which creates all the 
elements in memory immediately. if you happen to be immediately passing 
a generator into a function, you can also do it this way. this creates a generator just 
like in the previous line. and passes it to the sum function. basically, it just lets you leave 
off a pair of parentheses. and now that we know about 
generator comprehensions, another great feature of generators is
 that they're extremely easy to compose. you can build pipelines of data
 out of generators in no time. suppose, you want to be 
able to parse a file like this. it has data in it that you want 
to treat as floating point numbers. but you also want to allow 
comments, full-line comments nans, infinities and blank lines. no need to write a fancy parser. generators are plenty expressive
 enough to get this job done. we start by opening the file and
 iterating over the rows. remember each row is 
one line of the file. strip off the new line. and remove anything after a hash in 
order to strip trailing comments. then define another generator that
 loops over the generator from the first line. all it does is filter out empty lines.  each lines should now contain
 a floating point number. so, we use float to convert it 
from a string to a float. then we do another filter operation to 
throw out any infinities or nans. then let's just pretend that 
we want to replace anything negative with 0. and just for something to do,
 let's just say we want to add up those numbers. this was very simple to write and easy to read like a step-by-step instruction 
manual on how to create the pipeline. and once again all this happens lazily.
 so, it's very memory efficient. we've completely defined our pipeline
 before we ever actually read from the file. at this line in the code, we haven't 
even read a single byte from the file. each next call inside the sum triggers
 this generator to look for one more element. that triggers this generator to compute 
one more element which triggers this generator 
to compute more elements until it finds a finite one. which triggers this one to compute
 more elements until it finds a non-empty row. which triggers this one 
which finally reads a line from the file. so, we're able to process
 the whole file. and we don't even need more 
than one line at a time in memory. and now we get to the advanced 
usage of generators. a yield statement is not 
just a statement. it's also an expression. 
it returns a value back to you. and that's because generators are 
not just possible functions that yield values. generators are 
actually bi-directional pipelines. just like a generator can yield 
a value up to its caller, its caller can send a value 
back down to the generator. and it's these sent values that 
are returned from the yield expression. so, here's how we read this. we have a worker generator. the worker has a collection 
of tasks, initially empty. initially, we yield none because we
 haven't had any chance to receive any tasks. our caller is expected to send 
us a batch of tasks. the idea being that we're 
supposed to evaluate the given function using the arguments that 
the caller passed to us. if the caller passes some new tasks,
 then we extend our task list with those arguments. otherwise, we assume that
 the caller is asking us to complete a task. so, if there's a task available, 
we pop it off. evaluate the function with those 
arguments to get some value. which then gets yielded 
back out to the caller. and here's how a caller would 
use the worker. so, our worker is just going to convert 
whatever arguments we give it to a string. we use the send method to send
 values into the generator. however, when we just create the
 generator it doesn't start running it. the very first value that we send 
can't possibly be accepted by the worker because the function is going 
to start at the beginning. there's no yield statement there. so, first we just send none to 
cause the generator to run to the first yield. just like a call to next, 
send will cause the generator to run until yield or until the 
function returns. after the send none,
 the generator will be paused here. so now, we'll send in three tasks: 
the number 1, the number 2, and the number 3. these are wrapped as single 
element tuples because we're processing them 
using star args. now, if we call next three times, 
then we'll see our three values evaluated. when use the next call, 
the return value from yield is going to be none. we can send in more values 
and then print them out. and that's part of the 
usefulness of this setup. i can add tasks or evaluate 
tasks at any time. i don't need to have everything 
prepared ahead of time. and i don't need to compute 
all the answers at once. and another thing you can do is, use the 
throw method to throw an exception inside the generator. as you can see, the exception acts 
as if it was thrown from the yield statement. so, you could surround this in a try-except if you 
wanted to handle exceptions that way. there's also the close method that 
does basically the same thing as throw except it throws a 
special generator exit exception. this exception gets special treatment. and it's basically a way for you to cancel 
the generator without having that error propagate up. so at this point, this should feel 
very familiar to something else in python. we're basically submitting tasks 
into this worker thing. and then something drives 
the worker. and the worker decides how 
the tasks are scheduled and when to actually call the 
function and do the work. doesn't that sound 
a lot like async? i don't expect you to already know 
all about async. don't worry, i've got 
a video on that coming. but just the general idea of 
defining tasks and pausing functions and continuing later when 
things are convenient. well, it's no coincidence. as it happens, under the hood in python, async 
await co-routines are defined in terms of generators. so, once again, being lazy is 
paying off big time. the lazy machinery of generators is powerful 
enough to design an entire async framework around. and that's not even the 
end of the video because we still have one 
major feature of generators left to cover. `yield from` `yield from` allows one generator 
to yield values from another generator. in most cases, you could use it exactly like you 
would a for-loop looping over the values and yielding them. and that's totally fine. 
there's nothing wrong with doing that. using `yield from` is going to 
be one line shorter. and it's going to avoid 
using an extra local variable. however, that's not the intended 
use of `yield from`. and it's not why it was introduced 
into the language. just think about it. do you think they would really 
introduce a whole new set of keywords just to have a shortened for-loop. the true purpose of `yield from` 
was that it was introduced into the language in order to facilitate the 
bi-directional nature of generators. remember a caller can receive 
values from generators. but they can also send values 
to generators. but what if a generator wants to take
 the values that it receives from its caller and pass them to a sub-generator. for instance, here's a quiet worker. it's another generator because it 
has a yield. and all it does is it creates 
a worker. and then yield from allows the worker to pass 
messages from its caller directly into the worker. and likewise whatever the worker 
yields is yielded back up to the caller. if a task causes an error, 
the quiet worker just catches it. and then creates a new worker 
to keep going. this is of course very bad practice because the task queue of 
the worker may not have been empty. but we're throwing it out and creating 
a new worker anyway. in any case, the `yield from` is what allows
us to pass messages bi-directionally. it essentially acts as a pass-through. taking whatever messages from our
 caller and passing them to the worker. and taking whatever messages from
 our worker and yielding them up to the caller. that is the true purpose of `yield from`. the fact that you can use them to write one 
line shorter for-loops is just a bonus. oh yeah. and just like yield, 
`yield from` also returns something. it's the return value of 
the subgenerator. that thing inside the stop iteration from 
the beginning of the video. this is its real purpose. so, there you have it. 
that's all i've got on generators. i hope you learned something. 
i hope you enjoyed it. let me know in the comments how
 much you want me to make that async video. if you really enjoy my channel, please do subscribe and consider
 becoming a patron or donor. as always, don't forget to slap that like 
button an odd number of times. see you next time.