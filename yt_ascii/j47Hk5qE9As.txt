all right anyways v the best programming language to learn in 2023 thanks to everyone who recommended that i check out the v programming language so what does the v programming language get us that we can't get from all the other languages that we have to choose from these days we're going to address that right now the v language is also highly looked as vaporware so i think one thing you can possibly get is complete lack of trust for the v team though the v2 i mean they have stopped by this twitch channel specifically and we have chatted and the last time i tried to use v i couldn't do generics the generics were just like not working which makes me feel very you know unusual about it but i am very excited about the concept of v right it seems very exciting but let's see what happens here and also take a tour of some of its syntax the v language like rust aims to provide modern safety features including memory safety while still having c-like performance but at the same time v is more high level than rust so it occupies an interesting niche you can even translate an entire c project to v automatically and there's an example of this using the game doom john carmack if you're watching wow okay hey that's okay so i i must admit if if you can if you can make v run doom that gives it a lot more credence okay that gives it a lot more credence i feel like i feel like i i have more interest all of a sudden in learning v right all of a sudden i feel like i might be a bit more interested although you know i'm kind of excited you know what i mean does john carmack look a little ripped is he does he is he working out you think he's getting buffed these days watching this go ahead and comment below on what you think of v ultra fast compilation speed is also a nice ice i love this idea apparently it's very syntactically similar to go which is a language i'm not very familiar with who has a better [laughter] out of the grade that's a great line right there here's another language i don't know it but i don't even know this one who is this person that makes this this is a great video code to the moon go subscribe to code of the moon this is fantastic i already love this video all right wait this is the v language mascot i mean is that a meerkat or is that a or what do they call them weasel what's what the hell what's the hell the things called the thing of ferret is that a ferret or is that a what is it it's a weasel what the hell is it an otter is it an otter it's not a sloth okay that is a a water a veer cat oh it's a vermin yeah it's a vermin it looks like something you would shoot with a 22. that's what it looks like to me okay sorry everybody in the chat that's like what don't say that it's so cute nope gotta shoot it or run it over with my car anyways mascot though come on seriously there's also a bit of drama and controversy around the language but we'll get to that a bit later let's take a look at the language syntax itself then we'll look at what might be a killer feature you gotta warn people it's so bright why would you not warn my eyeballs that you're about to do that to them oh no okay it takes care of most objects 90 to 90 to 100 the compiler inserts necessary free calls automatically during compilation the remaining small percent of object is freed via gc i see i think this is actually a pretty oh gosh cool idea i do think this is a cool idea in the sense that it's not 100 managed memory but it's not 100 gc it's like can we make a really amazing middle ground i think there's something amazing to that by the way yes i did intentionally pause this just so you could be emotionally bruised you're welcome sure which is auto free memory management first of all v programs are currently transpiled to c prior to being compiled to machine code you can actually view the c code for your program by running this command there's a lot of vcom power boilerplate in there haha oh that's funny it's actually just see underneath the hood it's just c so this is literally this is the this is the javascript of c that's what is that what i'm hearing this is just javascript of c yeah it's like typescript to see okay i mean i can see called it you called it okay so i could totally get down with this this seems this seems awesome i like this idea i like okay i feel like i'm i'm starting to get more excited about v all of a sudden because you know one thing i love about rust is how expressive it is and right now i'm just in love with the trade system and all the things you can do with traits oh my goodness blanket blanket implementations are just the coolest thing in the universe like you can compose behavior and then implement behavior on top of it in a generic fashion it's just like it's just so cool but i can see some of the arguments why rust is hard and so v really can even operate at 95 percent of the speed of of c that's great but it could come in handy if you ever need to see what the v compiler is doing under the hood for never looking at this but that's just me v has an official object really foreign you can look at if you want to personally i just would never look at it [laughter] who is this guy we gotta get this guy on the stream what do you think about this this is this is really good this is great relational mapping module for interacting with databases yes you heard that right a programming language has an official orm module v also has an official desktop ui okay so orms i am a little i always get really terrified of orms because they're simple and they're fun to use and then all of a sudden you have to like use them for other things and then they just go straight downhill and they're the worst thing in the universe as long as there's an escape hatch and you can just write raw squeal long as you can be squealing whenever you need to squeal then i am perfectly okay with it but in general i just hate orms personal opinion suck it that's all there is framework these official ui and orm modules yield a level of batteries included that by the way the the ui this idea of being like like providing ui stuff i think is also really smart right i really think that this is smart just because right now if you can provide a language level cross you know cross operating system ui stuff oh man you you could take you could take the place of c sharp because c sharp's you know kind of attempting to do that but you got microsoft no one likes microsoft i didn't know it was possible also there's a tetris example project if auto free doesn't get you excited you can always fall back on that okay let's dive into the highlights of these syntax yeah let's go variables are declared and initialized using the colon equals operator initialization is required when a variable is declared if they are marked as mutable with a mute keyword they can be reassigned after declaration using the equals operator v is statically typed but has the type of inference go back there he didn't say it was mutable okay so what he said you could do that only if you sign mute i don't see mute i'm confused in the equals operator v is statically typed but has the type inference you'd expect in a modern language when you do need to specify types like in function parameters and return types there's no colon necessary like there is in many languages and identify i like the colon i don't care if there is or isn't a colon to me you neither win nor lose having or not having a colon i think i do think it's a little silly that rust has that arrow i kind of wish they just would have had a colon right because then it would have been uniform from function parameter to function return you know what i mean you know what i mean colon sucks why does colin suck it doesn't suck that much it's like a nice delineation i don't know it's okay fire and its type are separated only by itself v mostly has parody with the rust primitive types boolean i32 u32 and so on strings are immutable like string slices and rust they're just a read-only array of bites arrays can be mutable and have both capacity and length fields capacity is automatically it's not an array then it would be a dynamic array or an array list you know just saying it's not technically [music] increase is necessary similar to something like it can't put it on the stack if you don't know the leg you know what i'm talking about everybody knows that everybody knows they gotta go put it on the heap once you go put it on the okay buddy buddy guy man arraylist in java functions can return multiple values by using a comma delimited list of types surrounded by parentheses as a return type in the function signature strucks are i do say that i okay so just i mean i'm only considering this against rust right now but i do like the idea of having tuples as opposed to multiple return types and the reason the reason why i like tuples better than multiple return types is that you can assign a single value for the multiple return types or you can destructure it you kind of get this like you you get a little bit better operation with a good pattern matching you can really do some cool stuff you can even do things where you're like matching just the first and last argument with a little dot dot in between there's like all these kind of cool things you can do that i i don't necessarily like for just non-tupled items you know define using a simple syntax no commas are necessary between fields just i okay so i might actually like the colon okay i might actually i might like the colon everybody it might be for me i don't know i'm looking at this and i kind of feel like i like it i kind of feel like i like it you know what i mean it's weird that they're so against colons yet they're okay with colon equals right here and this is initialization so tilted right now i just i don't know maybe i like it maybe it's because i'm used to seeing it you know have you ever been used to seeing something and then you feel like a offensive or offended when you don't see it and then you do it the different way and then you like it better right like when i didn't have parentheses around my if statement i was like i don't know if i like it and then now when i have to put parentheses around if statements i like hate it it's now it's like it's inverted me you know it's just different i don't call this a walrus operator i prefer to call it the bad guys from turok 2 operator it's identifiers for each field and their respective types annotate fields with required to make sure that particular field is assigned when creating an instance of the struct to define how does it handle nulls then or undefins this is kind of interesting because you annotate which by the way this is much better annotation than depending on how you can extend this thing goes but i don't know well is that does that mean there's like null because i hate null null is just the worst thing in the universe you know what i mean it uses default values the dick operator i don't know that operator does it feel good to type it out the does it involve does it involve a colon find methods on a type such as a struct you actually put a special receiver argument prior to the function name okay so it's pretty much a callable method on the receiver type there's a okay let's chill out on those transitions okay it's just go right is that what it is yeah yeah okay with it on the receiver type there's an interesting feature called struct embedding which is sort of like inheritance without polymorphism let me explain i can have a struck person that has an age field and a method called is adult then i can have another programmer that has a lines of code per day field i can specify that the person's struct is embedded in the programmer struct and the programmer struct will inherit the fields and methods of person but again there's no polymorphism here you can't pass okay so in other words it's it's like really go right because that's go yeah that's straight up go yeah i don't this so this is the things that actually i don't i feel like this is the wrong way to create a language i i don't know i'm not sure if i love this or not i don't know if i love it or not but does it have enums we're gonna find out does it have enums i expect to see some i'm an enum sexual okay i love it love him as a programmer to a function that has a person parameter but v does have an interface construct which does allow for polymorphism and there are some things about it that are pretty unique compared to the equivalent construct in other languages first of all it can specify fields that implementers must have that can be handy because it can free you to create more methods on the interface that might otherwise have to be in the implementing structs functions are first-class citizens go back i didn't understand that example what are the equivalent person param let's see hold on oh no no i okay so i've never liked interfaces with properties on them just in general i've never liked that just because i don't like because i feel like properties are an implementation detail and methods aren't why not that's why get wrecked on it's hard to love any other language i've said this once before and people got people get very angry on twitter when you say things that are true okay and so when i said it's really hard learning rust because once you learn rust every other language sucks and now i look at this language and i just all i feel my v excitement i'm on a v roller coaster right now because i went from super excited to not so excited so fast dude i just i don't even know what to do now now i feel so wrong amorphism and there are some things about it that are pretty unique compared to the equivalent construct in other languages first of all it can specify fields that implementers must have that can be handy because it can free you to create more methods on the interface that might otherwise have to be in the impact interesting so you cast or it looks like you cast the programmer to a person and you can call is adult are those like virtual table lookups are those the slow stuff we were learning about from our from our boy handmade hero is that what we're looking at how does this work i am a prime stand no low level learning i am a stand for you by the way low level learning and i are going to be doing a language tier list coming up here okay live on twitch here in a couple weeks so i hope you guys are ready i hope you guys have oiled yourselves up because it's going to go down it's going to go down hard yeah it's gonna go i mean i'm already hard trucks functions are first-class citizens in that they can be created anonymously assigned to a variable and use as function parameters okay closures are supported too so an anonymous function can inherit variables from the scope they were created no no not c plus plus style capture list no no no what ah ah damn it oh i'm so angry right now spit on the non-believer the somewhat unique thing about these clothes this is pretty much like line for line this is this is c plus syntax except for the fn i believe in c plus plus you don't even need the fn you just do capture capture group arguments return type squirrel me daddy i know why this why did you go with this is that you need to explicitly list all the variables that you'd like the anonymous function to inherit put a comma delimited list of identifiers embraces immediately after the fn keyword v does have a concept of references if i'm defining a function that takes a struct as a parameter i can force it to be passed by reference by prefixing the type with an ampersand similar to how it would be in c plus but if i omit the ampersand on an immutable type it won't necessarily be passed by value the compiler will make the optimal choice for you depending on what the parameter is and what you're doing with it in the function okay that's a quick tour of some of the hmm do i like that or do i not like that i mean in some sense i actually think that's really convenient just like hey the compiler can tell you wanted a person but here's an ampersand person but here's my question here's my quick question hold on before you get all upset can you mutate person that's the real question is this a mutable reference or an immutable reference if it's a mutable reference well i mean i guess i maybe i'm just applying too much rust on this point you can just patch it all around like it's javascript right yeah i'm kind of on the don't hide anything plan i do think it's really good to say like this is a reference versus me handing and copying over the item well i guess is a copy so when i so i do agree i think okay so i'm going i'm going on a tangent here but i think that copy as default option is the worst who who agrees raise your hand right now i think copy as the default is the worst i hate it i hate it i absolutely hate copy as default i think what russ did where if you pass in a literal value it moves it to that function was way cooler i think that that's the best way to do it right no i'll never make i'll never make a language myself you can ask questions about neovium i just probably won't answer it right now but anyways i think that that's really like i don't it's not about pass by reference it's about if you take an object and you pass into a function does that thing get copied or does it get moved or is it a reference in javascript it's always a reference in rust it depends on the syntax you use in v laying it depends on the receiver to me that seems a little hard you know what i mean like i don't know if i want this idea of a receiver maybe or maybe not you know i guess it's sometimes it's really hard for me to like relate languages because i'm not clear on what happens because if if this thing doesn't have a reference here oopsies then this is actually a copy which means that any mutation i actually don't receive so if i if i want to get a mutation and i didn't put the ampersand in the right place it gets all wonked up and now here's the inverse if i put an ampersand down here does the compiler automatically know if this isn't a reference to just drop that reference it's okay why am i red right here what have you been doing taking by reference that something compilers just do as part of the api yeah but that doesn't mean i like it i'm talking about non-scalers of course scalars you always copy right it doesn't make any sense that you don't copy them right like if you have a scale or the size of the the system architecture it's it's copy no matter what a pointer is still a copy of a of a use size swift always copies because it simplifies multi-threading but it adds ownership semantics with move types interesting i think i am getting an allergic reaction is this golang sort of the function okay that's a quick tour of some of the syntax of v we haven't covered nearly all of its features but those are just a few to give you a feel for what the language is all about to define a module create a directory with the name of that module then include the module keyword followed by module name at the top of each file yes okay if they would have done capital letter if that i would have just lost it i would have lost it that is the greatest mistake of go hands down capitalization has meaning other than other than like exact typing right or the greatest mistakes pub is by far be accessed from a different module by using import followed by the module name as for writing tests v definitely embraces convention over configuration all files with names that end in underscore test are assumed to contain tests all functions in those files that begin with test underscore are run as tests there is a built-in assert keyword which feels more like a core language construct than a function call no need to use parentheses just follow it with the boolean expression that you'd like to test to run your tests run the v test command having the entire v2 anyone else concerned right now anyone else concerned right now prime with the hot take on go it is it's not a hot take capitalization to declare public or private it was by far the worst choice of go because last time i checked he had a failing test case right here right here he had a failing test case and then right afterwards expression that you'd like to test to run your tests run the v test command it just passed what happened to the test he just wrote i'm an emotional free fall right now okay bass bunny what happened tell me right now i don't like this okay three does not equal four gg well played having the entire v tool chain in a binary that is only one character long is actually pretty nice the v command contains most of the operations you'll need like piling running it doesn't really matter if you have the binary in one letter or cargo cargo run v run like i don't know that that feels like a skill issue like i you can't type five letters versus one letter you know sounds like skill issue skill issue it does it that doesn't bother me but having everything right here this is beautiful i like this installing modules running tests hot reloading yeah from any modern build tool you can prefix many commands with watch to have it automatically re-execute each time a file is good i like it it's good so them taking the the seriousness of the of the build tool i think is really good i really like that i really do like to see that the build tool really takes seriously testing watching like all the things you really want in the core language so that way you don't have this whole like vite webpack some people are still on snowpack grunt gulp like you see them all over the place the amount of effort in the javascript community that has been spent just upgrading from one build system to the next is enormous anyone that has a 10 year old project has literally went through grunt gulp webpack snowpack vite maybe somewhere they're like stuck somewhere is somewhere in in the old place it's ridiculous as your name will install the v module called markdown to a global.v modules directory on your system it reminds me i like it too also package manager beautiful beautiful having your own package manager i think is fantastic a little worried though right here i don't see like a version right here usually whenever you do any sort of like these modules you kind of have them versioned out you can grunt while you go up these i know i can grunt and gulp these nuts why not local share i know i do okay so i am a bigger fan of the xdg style in general actually yeah i agree with you but bash bunny look at that bat look at bash bunny just coming in with the accurate feedback where is xdg in this everybody quickly look at the screen and get get all that rods to burn out main selling points on the website and i didn't really expect to care much about it but it did feel extremely nice to have my build finish before i could even switch back to the terminal for my ide now let's look at safety in the infamous auto free v doesn't have a borrow checker which some might be v is also a bit time out time out time out time out you can't oh it is a single dash okay never mind just joking unique and that you're able to select from a few different memory management strategies the only other language i've used that allows for this is nim at the time this video is being made the default memory management strategy is garbage collection but supposedly that's temporary fully manual memory management can be enabled as kenwood aims to eventually be the default memory management strategy which is auto free auto free claims to quote insert necessary free calls automatically during compilation and to quote fall back to reference county everywhere that isn't possible austin i mean reference counting is a is a good alternative to i'm into these automatic cleanups with these free calls that are automatically placed in but i am i am a little i'm a little curious how because he he hasn't really shown much for any sort of multi-threading i would assume this gets way harder with multi-threading again that's one thing i i really appreciate either about javascript or rust javascript you just don't even have the option to good because a lot of people really suck at it or b rust just kind of makes you do it a certain way which is good because everybody kind of sucks at it and so it's like you kind of you kind of just like either you admit you suck at multi-threaded programming or the language forces you to do it a certain way and so i prefer this just do it a certain way plan you have workers and messages through js you do have workers and messages through js does v have good support for multi-thread right now if they don't yeah i i i i that's very curious yeah i like overtime they eat the need for a garbage collector or manual memory management i did have some issues trying to figure out how this is supposed to work but here's what i've gathered in rust if you create an instance of something in a scope that thing is automatically deallocated when the instance goes out of you know the beautiful thing about rust right here i don't know if you know this let me can i can i pontificate on russ for a quick second everything that is allocated on the heap has some sort of stack version and it's the dropping of the stack that's tied to the heap that causes all these things to work that's why it's so good it just works so good it's just so good it's just so good okay scope in this simple situation something like reference counting is not needed when something needs to be deallocated somewhere other than the end of the scope it was defined in and rust the situation can be addressed using a change in ownership which might be able to do what you need to do while still guaranteeing memories it's still on the stack you notice that allocated here it's on the stack give me ownership parameter stack still stacked up stacked hard stacked up right here debug boom still stacked well actually it passes it to debug i believe debug now owns it and it returns it and thus you don't have it i think t is technically dl i mean technically the ownership is passed as a bug if i'm not mistaken you know what i mean prime is stacking we're stacking estimation is a is going to cause some issues in the future uncertainty in computers is already a problem yeah i i do agree with the whole 90 to 100 i saw that and it just worries me just a little bit you know what's that ninety percent i can address the scenario using dynamic memory management via the new and delete keywords oh i i just just makes me so angry because like yeah you have this pointer to this but you have to this thing doesn't even get cleaned up in here right this thing is not getting cleaned up at all you you still have to deallocate it you have to delete this this is not getting cleaned up you gotta yeah that's a leak that's just like a straight up leak you gotta throw that crap in a unique pointer if you want it to be automatically cleaned up come on this puts memory safety in the hands of the developer and is the root cause of an unfathomable number of software bugs by the way that if you looked at the comment it says return without deallocating and you know you know what i mean it is very interesting oh i see a little extra memory and performance overhead you can use automatic reference counting in these scenarios in rust you can do that using the rc smart pointer okay so back to auto free my understanding is that v's auto free aims to automatically detect whether something should be deallocated at the end of the scope it was defined in or whether it requires reference counting this is supposed to happen without any developer input every other language i've used including rust requires this i think i would rather be explicit honestly yeah too much blackmagic that's how i feel i think i'd rather be explicit here in the sense hear me out on this is that say you're writing some code and you thought you know how can you take control and ensure that it's like most performant right like just say you had some function that gets called you know a hundred thousand times a second you would rather be the person that's writing it explicit versus hoping that it does does an rc or stuff it might just rc it if you write it wrongly you'll rc and then you get into this thing that happens in javascript which is like the compiler blackmagic javascript go ahead go look at lodash's source code just go look at low dash source code it can't be that complicated can it yeah it's crazy it's actually crazy low dash is crazy am i ai or real i'm an ai this is chat gpt okay  you actually i'm bing that's bing i'm bing gpt okay i'm a little bit more angry by the way leave your wife join me well you know what i'm talking about baby chad is also chad gpt though you know what i'm talking about decision to be made by the developer having the compiler make this decision for you sounds pretty ideal in most cases i feel like it's the inverse it feels least ideal because i have no control over what happens and why it happens and then i'm then again it goes all the way to the the low dash problem which is yet the right black magic code but i can also see that if you just don't care and you want to write something that's just fast like fast enough this is why you do this and that makes sense to me that makes a lot of sense to me if you don't care let's just say you know you come from the javascript land and you just you just want something to happen i can understand there's currently no documentation on how this is ultimately supposed to work and there is some skepticism in the community as to whether it's even possible if the promise of auto free memory management is the reason you'd like to learn or use v i'd exercise a little bit of caution if the robot for auto free does become a bit clearer after this video is released i'll explain the latest developments in a pin comment below now let's talk about some of the controversy surrounding the v language after researching a bit the language seems to have a reputation for over-promising and under delivering at least in the past some claim that there have been many times where features have been advertised before they're implemented or before they're in a state though like i said i used just i tried to build a linked list that's it just a very simple linked list and the linked list totally just i couldn't even finish it because i couldn't do a generic on a node yet it says it can do generics and a generic pointer receiver or whatever it was it was just like sorry you can't do that and that was very disappointing because i was promised at least a semi semi-functioning you know language they obviously after seeing me struggle with very basic generic usage they said oh okay here you go we fixed it now but it just felt weird sorry dave i'm sorry dave you cannot do that that can be considered complete now i haven't looked into the validity of any of these claims information i did get bit once by the v the v team at least with what they promised versus what was delivered but that was a year and a half ago and i'm not one i'm not really one to think that they're i don't think they're doing it out of malice maybe they you know pretty typical engineering goes like this i have this idea to build this tool this tool can do these things okay can you go build it for me sure this is going to be pretty simple i think i'm going to be able to get it done in a week three weeks later hey where's that tool actually it was super complicated and i vastly underestimated both my skills and the complexity of the problem that's what it seems like with v is that perhaps it seems simple on the surface and then as the implementation started coming in they realized just how complex of a problem it really was and maybe they didn't quite you know what i mean i just summed up your internship experience yeah and i'm not trying to be mean to them i've i have vastly i still overestimate and underestimate all the time like all the time it is a classic software engineering issue right yeah engineering estimating skills is just the worst and that's not it's i i don't think that it's out of problem so i'm very curious where the b language is going to go and maybe i'll have a good time with it but right now well i guess back then no but maybe now maybe it could be fun maybe we'll have to do a couple streams learn a little bit of v you know finally lose that v card of mine around the vision for auto free memory management here's a reddit thread where someone was asking about how autofree is supposed to work i'm not sure if the person responding is a v developer but in reading through the thread it felt like they were avoiding the poster's question basically telling them that they have no business asking such a question until they've tried the language i i do think that the business they do have is suggesting using dark readers for my corneas are currently burning felt like that's pretty short-sighted since i think it's natural to want to know about a language's features prior to investing time into learning it the original poster didn't have the best tone in his question but the tone of the responses he got was pretty much the opposite of what you'd want as your first impression of the community surrounding the technology of course this is just one anecdote and ultimately i don't think it should discourage anyone from trying the language that's a quick tour of the v programming language and what sets it apart from other modern languages it's not something i'd put all my eggs into quite yet but it's worth keeping tabs on especially if auto free winds up fulfilling its promise if you like interesting programming languages that you might not have heard of check out this video for some other programming languages that you might not have tried thanks for watching and we'll see you in the next one anyway hey look it's me hey look it's me i will definitely say this is a great video this is great this guy i think he did a great job i i liked i liked something i don't know if he meant it to be a joke or not but some of the ways he said things was just fantastic it was just fantastical everyone go subscribe go to the moon okay look at that boom subscribed boom notified all shazam okay make it happen make it happen