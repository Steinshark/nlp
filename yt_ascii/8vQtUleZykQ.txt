hey guys for the past two years i've been using the c programming language for almost all of my projects this video is about my journey through being completely clueless to a relatively okay at the language i like the honesty relatively okay there's something about that there's something about that that just feels so good when somebody just you know they just they just simply accept the fact that even after two years it ain't it you know what i mean it's just that's not enough time this is not enough time to be good i mean you got to remember that when they when he says relative you you put that relative on twitter or there's like 10 accounts putting doom on a pregnancy tester and then the rest posting their cat images made with react some sort of serverless logging serverless login or authentication serverless database hosted on a serverless platform along with using low dash somehow underscore made it in there a bit of jquery to spice things up somehow they end up sending three gigabytes of javascript to the client and so when he says relatively okay i think what he means by relative is that you he just made something he like wrote a program himself and that's pretty impressive it all started when i was looking into how a compiler was made it was recommended the crafting interpreters book great book by the way great book the book is divided into two major sections vote for making it interpreter for the same language but the first section use java and the second use c i was pretty you know when you read a book you got to remember the time and place it took place in okay it's if this is a very modern and hot topic issue in today's society right now which is books and all that and i just want to let you know you got to remember the time and place this was written okay i know a lot of us we don't just go around even saying like that okay that's like it's it i i refuse to even say in front of my kids it was a little hard for me to hear but we're gonna make it through okay we already know that he chooses the lord's language and doesn't go down the path of the hedonist okay okay java at this time so i okay please trigger warning people by the way did i just see did i just see interstellar is this man some sort of what is this what is interstellar are we you know are we gonna watch a spaceship try to dock for six minutes while we play the world's most intense music so that we're all on edge of our seat where an actual story doesn't necessarily take place how'd i do how'd i do it's literally edging the the movie interstellar is a movie of edging the whole time just the most intense music as this thing's getting closer and closer it goes on for like a minute and a half i'm sitting her over there getting adrenal fatigue i need to go visit the doctors to get a vitamin d shot afterwards it is ridiculous pretty okay java at the time so i followed along and got to the same conclusion as the book did at the end java is too damn slow so i kept going with the book and followed along with the c version oh nice what a great way to take to say i had no idea what i was doing hold on is this man recording his youtube video in a starbucks cafe did you hear that i have to say i had no idea what i was doing i had some there's like people talking in the background in c plus plus but i would still get confused with regards to where and why pointers would ever be useful for example another quite fundamental stuff i followed along and came to the chapter where the author implemented a hash table and was very curious the hash tables and dynamic arrays and other common data structures the things i took for granted from a programming language and hadn't even thought about how they worked at all i i'm not gonna lie to you i can't read that text it's way too fast but what he said is so true i think a lot of time a lot of times we forget just how like these data structures aren't even complicated and when you see it there's like this level of demystification that happens you know what i mean where it's like when you see how a linked list actually works for the first time first off you're you're blown away okay you get blown so hard but second off you realize like it's really not that complicated and then you start looking like for me that gave me the the confidence to look at everything because then when you like you go look at like the sliding window algorithm in tcp or anything like that you realize like a lot of this stuff is really simple like http 2 it's really it's it's actually really straightforward right and you may think wow http and all this stuff is really really difficult but the first time you see it you it just like peels back the layer and you go oh it's stuff i already know just put together oh yeah that's not crazy you know that's not crazy at all so for the sake of my curiosity i decided to stick with c for the time being nice nice that's when i discovered the wonderful handmade network and finding massive obelisk casey casey so good casey is the the hero we all needed he he he truly led the fight against clean code love casey i think casey is is the man also really fun to have on we should have gotta get him back on i just i i i just keep forgetting there's that crazy debugging video that i want to go check out and bring him on about how game developers were debugging stuff and just have him mansplain to me all the cool fun stories about debugging status by the way casey was actually one of the first people on twitch that i looked up to in the science and tech programming world i don't know if you know this but back in the day there was like there was there was two big players in the twitch world it was lana luck actually there's three there's lana lux madhu dev and casey i guess there's also jonathan blow jonathan blow would also stream and casey was like the biggest one it was crazy when lana lux and i i would get like 50 viewers she would get like 70 viewers it was out of control this was just wild and then casey would come in and get like 300. it was out of control pirate software was way up there as well but his was really deep evening stream so it was like it was a different crowd there was adam huh looked into libraries like graylive and gunslinger to figure out what graphics programming was done they already knew a bit of opengl since i came from java but figuring everything out in c was incredibly fun yeah after about five months i felt i was ready for my first project around to the reason i came to see i decided to write a programming language on spider great we got really far too it had all the basics from c implemented also some things from c plus plus that i thought were nice like function and operate overloads and references i also had a completely new system for tagging statements which acted i'm not gonna lie to you this is really cool looking i like that that is super cool like right now in rust you got to do that like if config business and it's it i don't know right but this is cool it's this is slick this is super slick to be like imagine that is super slick actually it's almost like a decorator except for the decorator is a is a conditional compile command that is super cool just like the hashtag if there are three professors statements but it's way better with a nice syntax but then something hit wow i'd been transpiling everything to c code but this made step debugging pretty much impossible since secompilers would emit code with debug symbols based on the transpired code yo i can't get over that tagged that i can't get over that i can't get over how cool i ca i literally cannot get over how cool this is okay how awesome would it be if you could just define your own version of these ones as well and then it just works you know what i mean like i'm just thinking about like you know like leptos and ssr versus csr type stuff and wasm and all that like how sweet would it be if you could just like at ssr at csr and just throw it on a function and we all know what it does and bam it'd be beautiful i haven't done enough o camel to give you like a strong opinion on how that works but that would it's just like it's super cool the cogs are turning yeah and much impossible since seagram palace with emit code by the way this is a great reason why you should watch other people do things and see their thinking because see because it's like i don't think i would have thought of that right this this man's cooking and i think we're about to get a filet mignon i mean most people we let cook and what comes out of it is a microwaved hot pocket and which is both an ice an iceberg and liquid lava hot but this man's coming out with the fl with the filet okay this is looking good this is looking real good based on the transpired code and not my own so i tried working on an ellen vm backend that quickly ran into some weird issue when trying to add linux support and give up i still hadn't learned a lot by working on the project though so it wasn't a complete waste of time i found out that many of the memes seem online about sea's unsafety were largely hyperbole though more months later [music] at this time i felt like steve was a fun language to use but my next project was in java for the sake of being cross-platform i made this platform cross platform come on man we all know we come on we all know it's not go out across platform okay cross play yes it's cross-platform you get to debug it everywhere app installation tool in four days in java why am i bringing up java in a video about c well the whole project was written in a c-stop minimum use of glasses any java programmer would be shaking their fists in the air at discovered but some of us might argue that any person might shake their fist at this code it doesn't necessarily have to be just java programmers you know i want to throw something out there that often often you know i i find myself falling between two things which is using a minimal set of syntax between two languages and tried to being like 80 canonical 20 language agnostic but maybe going like a hundred percent c style in a java program it might not mesh well you know what i mean you know what i mean this had led me to a big revelation you see when i was programming in java i really wasn't able to get stuff done fast at all i would spend some time thinking of the best way to lay out the program structure before writing the basic code for it it's kind of paradoxical in a way because java a language with so many features ready to go had me writing code slower than c which is notorious for giving you literally nothing to work with so the fighting c for one year and switching back to java with the c mindset really allowed me to finish something fast i was studying chemistry you know i'm just thinking like there's something very interesting in that point which was the promise of increased productivity when compared to something that is generally perceived as unproductive had an inverse effect to where the thing that is generally perceived as more productive became less productive and the less productive became more productive now i'm not going to compare this to say react versus htmx but i'm just saying htmx more specifically this is happening right now in my brain hey stephen i figured since i was project class at the time why not make a visualization program for this so in about two weeks i made this it's a pretty solid stadium i've literally made this identical program base layer i have literally made almost this exact same program and i i hand wrote all the quaternions for every single movement it was really fun dot product cross product on those quaternions wrote everything myself it was a lot of fun super fun and generic data structures and other things this was also my first finished 3d project ever so that was nice next up was another non-sea project me and my friend took part in three blue one brands some two competition and made a game for it in unity i think we all know this this channel okay okay let's just be real here back in like 2014 2015 when you're trying to explain how bitcoin works to your mom let's just face it we all linked this guy's video okay you know you know it you know you did you know i did we all we all did this one trying to explain how bitcoin worked to people in 2014 2015 whatever it was okay you know it you know it also a project with my old programming language knowledge came back to help since i had to write a math expression passer again keeping the c mindset i was really able to just do the thing rather than beat around the bush figuring out what went where etc you didn't win but getting top 100 was exciting at the same time i started writing a proper bass layer in which my goal was to not use libraries at all okay i also found this absolute gem of a series at that time this base layer is one i'm working on even now and at the time it had a lot of stuff too for instance tried context os specifics windowing opengl function loading swappable back ends simple rendering utilities to generate data structures and also a small ui module that i took from the solid state visualizer i made before i did all this without using a single library too other than png and ttf load is from sdb that is okay first off wheel reinvention jam sounds like the coolest conference of all time the coolest code jam of all time this sounds so effing cool this this sounds so cool but i do want to make one quick point is that this is just javascript every single day they've actually been doing wheel reinvention jam for about 10 years straight now so some of us feel a little burnt out about it you know what i mean you know some of us do do i need another way to do a 4-h i i don't know i don't know if i need another yet agnostic even more performant based for each you know what i mean it's tough also by the way that guy that just wrote in a completely base layer for see that was that that was also i mean this guy's a champ this just shows this just goes to show you how little steps equal something big and if you just try to like you wonder why you can't get somewhere you wonder why things aren't being successful and you and you look at it but you're only measuring yourself over the course of like two months you won't see the change very much whereas like when you measure yourself over the course of two years you can be like look at this change look at how much has actually happened little steps over a large period of time is incredible it was the time of the handmade real reinvention jam i wanted to create an application that i could create editors for any file by just adding a plugin dll this was supposed to be a short project so i spun up the product type very quickly using my base layer it had a working particle system editor and texture viewer base layer had made things much nicer and easier this time i also easily embedded the solid state geometry we were into this application we now he really wanted to toss it that that chemistry exam well actually i also did chemistry just like in case you guys are wondering lewis diagrams not a big deal whatever whatever i'll catch up to the present i haven't worked on anything major in this little while because of exams but i still did get stuff done i created a repo for the camera like adding gjk collision detection and resolution revamping the ui system starting work on a d3d11 back end setting up meta programming layers and stuff like that all in all within the two years of c i've gotten pretty used to it and honestly it's one of my favorite languages by now you know i always go back to the same question i have over and over again which is is simplicity better you know like real talk rust is extremely complicated there's a lot to it is it better than c i would argue it's better than c for some things but is it always better i don't know right like there's something to be said there's something to be said about it right simplicity can be very very nice and go is also super simple i don't know i always go back and forth on this i also want to quickly smash some misconceptions about using c number one the elephant in the room sequels you've probably seen memes about this they're all hyperbole 99 of sec poles are trivial to debug this enable the address sanitizer or run the executable to a debugger and break exactly by the excess error happens most of the time it's because something with a null pointer and you can fix it easily the remaining one percent are memory corrections or overwrite which can be caught by adding a small size tag before the allocation and making sure you're not writing beyond the given range number two templates or the lack thereof and i do agree this is kind of annoying but you can get around this by implementing some macros that instantiate code for you quickly alternatively you can use meta program you eat it you didn't just win that one okay like that's that's not how you win an argument okay that ain't that ain't it that that's just not how you win the argument but i love what you did there but that's just not that's not how you did it i don't feel like i got a w there i i really don't feel like i got a w c preprocessor programming whether these don't really cause compile times to skyrocket and the errors aren't horrendous the only thing is if you're using macros s the errors aren't horrendous that that was so good that that's that is that's pretty much how i describe half the programs i build at netflix ah it's not it's it's it's not horrifying debugging errors can be somewhat tedious that brings us to the end of the video my goal with this video was to show that some slight shift in thinking really changed my programming output and the shift in thinking only came because i use c in my opinion people should try to understand the deeper and deeper levels of programming to try to write better software this applies even if you're not doing load of programming like if you're doing web dev you should still understand what exactly you're writing and what is important this had been my journey with c for the past two years and who knows maybe i'll try a functional language like haskell next careful now careful okay just please tread lightly there that being said thank you all for watching see you next time goodbye that was genuinely my voxel my time in c i really enjoyed my my time and see it wasn't a very long time and see i did it for about i did about gosh maybe a year of professional c and by professional i mean i had nobody to tell me what to do i was the only person on the project and i completely made up everything i did including writing a network driver and a flash driver and a video sending thingy and my own ethernet protocol besides for that i just i raw dogged everything i made everything up debugged it by a wireshark there's just something fun about c you know what i mean it has its own fun it's not always fun but it has its own fun and i like that i haven't heard wireshark in a long time i haven't heard wireshark since a couple months ago all right hey the name is i do like sea agen i do