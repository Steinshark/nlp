things we talked about a spectrum meltdown and they rely on some of the more advanced ways that the cpu operates it's probably worth diving down and actually looking at how a cpu actually executes the code be right i mean, we've touched on this before we did a video on pipelining we did a video on caching, but also delve down and see what happens below the surface when we actually get our cpu to execute our code? let's start by having a simple example: a line of code that we might want to look at what happens. let's take a line of code that takes a variable let's take a line of code. it's gonna add up a plus b plus c plus d times e so i've written this in this sort of see like language so we're gonna do this calculation now as i'm sure most of us are aware when we take that and put into our c compiler run it it gets converted into the machine code that the cpu executes so we take that client of code, and then we'd have to convert that into the machine code, and then the cpu executes that machine code so a program like this would end up looking and i'm going to use arm assembly here just because i know it better than the anything else perhaps for the first instruction. we would load the value for memory of a into registers, let's pick our zero. we've got 14 or so of them we can use the 16 of them but some of them get used for different things that we don't really use so although the value of a into our zero next thing we want to do is you want to add that to the value of b then after make sure we'll get the operator precedence right so we can load the value of b into a register so let's loading the value of c here into another register and we might as well do d. and e. as well so load or three come on d. and we'll load our four with e as well, and now we can start adding these things up multiplying them to produce the actual result we want now we're going to make sure we get the precedence right but we could either start by adding a and b together then add on c. and then multiply d. and e and have them together or we could do that one first i'm just going to start going from left to right as long as the math is right we'll get the right result so we'll add together a and b now i put those two values in r0 and r1 and we need to store the results somewhere we are going to need the value of a again after this, so we'll reuse the register r 0 so we're saying put into r 0 the value of r 0 plus r 1 so this is adding together storing the result in r. 0 so we now added a and b together we want to add on c. and so we could do the same thing add to r 0 the value in r. 0 which is now because of this instruction a plus b want to add on the value in r 2 there's now about a plus b plus c in our 0 now we need to do the multiplication and we need to do that separately before we add it on so we get the right result so we'll multiply and we'll see we've got an arm, too cheap here, so we've got the multiply instruction there and we need to put the results on whether it's use our 5 d. which we put in r. 3 and e which we put in r? 4 and then we want to add the result of that onto the value in our 0 and now our 0 contains the result of a plus b. plus c plus d times e. and we could then store that back into x so that line of code there at one line of c code would become what 1 2 3 4 5 6 7 8 9 10 different lines an assembler and i've numbered them because i'm going to refer to them at different times so we can say searching one instruction 5 etc to refer to the different ones now we might expect that our cpu will just xu instruction 1 the new instruction 2 instruction 3 instruction 405 and so on in order to generate the result and some cpus do in fact work exactly like that, but actually if you think about what the cpus and what these descriptions are actually doing you might think well actually? when i get this first one i've got to go an access memory and as we talked about in the caching video many years ago, cache is perhaps a an old-fashioned english word but it basically just means a small place where we can store things so you might use it to store your hidden treasure if you're a pirate or to store your food for winter on a modern cpu probably say around 200 nanoseconds to actually go and get the value out of your main memory and load it into the register now of course if these are already cached in the same bit of memory, then you may find that these all execute very quickly we don't know that this isn't the only way we could write this program because if we take this instruction here instruction 6 where we do the add of r0 and r1 to add up a and b. well. we've got those two values here they're already in the registers at this point in the program so there's nothing to stop us moving this instruction up there and it would still have exactly the same effect so instruction 6 could be moved to me between instructions 2 & 3 and then we do the next instruction which was the same as instruction 3 here? which would be ldr r to come of the values in memory that's representing the letter the variable see how exactly the same effect. we just moved that instruction earlier so you could rewrite this program in various different ways now why is that interesting? well when we think about how a cpu is designed and that you will have various different what impress be termed execution units within there now one of them is what's generally referred to as the alu or the arithmetic and logic unit and that's the bit of your cpu that does addition it does subtraction it does sort of logical operators and or and so on but you also have other bits inside there and one of the bits you'll often have in a modern cpu is it part of your cpu that handles loading and storing values from memory sometimes interact sometimes they don't now assuming that they are separate parts of the cpu if we look back at our instructions here. we execute instruction 1 it uses a load store. you need to get a value for memory we execute instruction 2 it uses the load store unit to get a value for memory instruction 3 it uses a load store unit to get a value for memory for uses the load store unit to get a value for memory 5 uses the load store unit to get a value for a memory 6 changes and uses the alu as 2 7 8 & 9 before insertion turn uses the load store unit so we've got a pretty sequential series the first 5 instructions all execute using the load store part of the cpu the next four instructions execute using the alu and the final instruction again uses the load store unit but as we said we can reorder that into this version here using instructions w x y and z differentiate them and we execute the first instruction instruction w uses a load store unit instruction x uses a load store unit instruction y uses the alu restrictions ed uses the load store unit okay, what difference does that make well let's think about what's happening when we're using the load store unit the alu isn't being used that part of the cv is just sitting there not being used and when we're using the alu the load store units sitting there not being used, that's what we saw there but does that have to be the case could we actually design it, and you probably guess the answer is that yes? we can so that while the load store unit say is being used that we can run the instructions on the alu part as well i'd turn the paper round and i'm going to draw this as a sort of timeline so these are our two units and we've got time running along this side as well i'm using the computer for our paper in a radically different orientation, but never mind, so we're going to execute the instructions on here and the first thing that happens is that we execute instruction w no problem that's going to take certain amount of time to actually that's using the load store unit to execute it these are being fetched and decoded and sort of executed by the different execution units we then execute the next instruction which is x and we couldn't execute this any earlier because the load store unit was being used to execute that one so no difference than what? we had before we're using this one after the other we now come to execute the add instruction now we can't execute this any earlier than this point in time because this depends on the value of registers r0 and r1 which aren't set? until this point so we need those two values so we can start doing instruction why here now actually it's an add it's not going to take as long as fetching things from memory because it's all inside the cpu so we can use a smaller box and we can put instruction y there and this depends on the value being fetched from there and i'm just going to show this as an arrow here, but the next instruction load r2 comma c well i doesn't depend on anything except the value in there marie and our load/store units not being used so if we build our cpu right? there's nothing to start that instruction being executed at the same time and that means that actually when we come to the next instruction which would be which will be the best instruction to execute next in this example. let's go back to our program we've executed instructions one to six and three already that's w x y&z we've rewritten the mass let's put instruction seven here what was instruction seven and this is now going to become? i'm gonna have to use it's gonna become instruction a i'll hopefully remember to say instruction a but you can guess the colonics are referring to a on its own is probably the variable if not is probably the instruction so we can now execute instruction a and again instruction a depends on two things it depends on the value of r. 0 which is going to come from this instruction so we have to have that ready but it also depends on the value of r 2 which is coming from this instruction so we have to have that ready as well so it can actually happen any point before this point in time so this would be the ldr r 2 comma dot and this is the add r 0 and this is the next add, but again we can start trying to leave more the instructions because i okay well that's what instruction for here at the same time. we'll call this instruction b and so on we put that at that point we can execute instruction b at the same time as we do way and i'm really confusing myself with pens here and so again we've saved some time because rather than having to execute that in the same thing we can do these two things at the same time now to be able to do this we need these instructions need to execute on different execution units we couldn't for example execute to add instructions at the same time because we haven't got to al use well, though there's no reason why you can build a cpu with two al use if you look at modern cpu designs from intel amd arm and cetera they all have often have multiple al used or allow you to do just that but because the different types we can execute them at the same time and the reason we can do that is because they don't depend on the results of one to work out the other so they're working on different things and they're using different parts of the cpu and the cpu that enables you to do this is what's known as a superscalar cpu because it can run multiple instructions at the same time will you continue doing this and we'd end up we execute instruction b then we've got to execute instruction c instruction d uses a multiply and actually on a cpu probably got a separate execution unit which does and multiplies because you can actually do them faster that way so you have a multiply unit as well so we can execute that multiply d up there we think well okay? can we do the other at the same time well no because we need the result of that as well so we can then execute the ad down here before finally, and it just fits on the paper like that so we can actually squash things up and we're going to save some time because if you think about it you have the original order of the program and here's one. i made earlier all right, or as in i'm just about to draw and shawn will do some very clever cutting so even if we had a superscalar processor. we've only got one load store unit we've only got one al you really got one multiply unit we wouldn't have any opportunities with this program to run two instructions at the same time so this version of the program would still take ten instructions this one still takes ten instructions, but with a superscalar processor we have the opportunity to sort of execute two instructions at the same time because they use different bits of the cpu now you need to design the cpu to allow that but that enables us to speed things up a little bit because while this is working to get the value for memory. we can execute some more instructions now that's all very well and superscalar processors started to appear in the mid 90s things like the six eight thousand and sixty the pentium i think was superscalar but they require the code to be written in a way that enables this to happen so this program wouldn't have been able to do anything this one would but as we said when we were developing this we could work out which instructions we could move around to get that speed up based on what those instructions depended on so this instruction? we said what what six became why only depended on the values of r 0 and r 1 which has been set by instructions 1 & 2 so we can move that earlier without affecting anything in our program because it only depended on those 2 values so we can either do this in the compiler or by hand if you write in the assembly yourself like we just did here or it's possible to let the cpu work it out, and so what a modern cpu does what's called an out of water cpu is reorders the instructions without supposedly breaking the rules of what each instruction does so it'll still execute it as if it was written like this? and it won't change break any of the rules of that but it will say well hang on it will spot that this instruction could happen earlier and so move it earlier to gain some of that parallelism in fact then execute them together at the same time and that works generally get well but as we saw with things like spector and meltdown if you allow things to happen too far earlier and start doing what's called speculative evaluation where you say okay? i've got the stuff. i need to execute it now i don't if i need the result but i might do so i'll execute it anyway, and then if i need it i've already done it and if i don't need it while i was still waiting for this to come in anyway so it doesn't matter that i've done it. i've not lost any time well then it's turned out that you can have sort of side channels where you can sort of see that that's happened or not which is caused a few issues with computing? it goes along here like this intersects the curve somewhere else flips over and it's over here, so this is for g now we won't look at any more right the edge of a formula for this is just mathematics to do with lines and the tangent of this curve it's actually not very complicated the point is that what we're doing is by multiplying g