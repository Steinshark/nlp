hello everyone thank you very much for coming i am arno i am the the cto at think cell these are the guys where you see the logo throughout the building on the videos and i'm one of the founders we started 22 years ago we are still doing a powerpoint edin but we are doing it in a really cool way in c++ and and this is one of the things that we learned along the way to how to write better ranges now now well first of all ranges have been in c++ now since c++ 20 so who is now using ranges on a day day-by-day basis okay still quite a few actually that's interesting because i think they're very very practical we've been using ranges since there were ranges in boost range so that's 20 years ago and we've built kind of our own library of ranges then made it compatible with the ranges that came in c++ 20 and closely observed what they were doing compared what we were doing learned from each other and yeah this is this is what this talk is going to be about now first of all if there are so few people who actually are using ranges already on a day-by-day basis this is why you want to do use ranges so let say you have a vector and you want to sort it well then you have to pass to iterators to the sorting function and then when you want to throw away duplicates you're writing v erase did unique v begin v end end and you v v and v begin ve end and v and ve and v and v and v and it's like oh i don't want to write all that stuff right okay now pairs of iterators which are throughout the standard library belong together they are describing one object so quite natural just put them into one object so then this would look like this and this is this is c++ 20 range of sort of the vector and then v erase ranges unique vc v end all right i think it's clear what this thing is doing so we are sorting it and then we are throwing throwing away the duplicates [music] now if you don't have a c++ 20 compiler yet that's no excuse not to use ranges because eric nebla has an implementation that you can use and it's close enough to the standard that if later on you switching into c++ 20 you it will be pretty easy to the codebase to c++ 20 so i think it would be a good start it would be an even better start if you use our ranges but we'll get to that later now why do i think i know something about ranges okay now think that has a range library well we actually have a library that library is built really independently of our powerpoint addin okay forget powerpoint addin it's a better c++ library we are looking at what we are using in our codee and then try to package that in into useful library functions and we really aspire to be a better standard library we don't try to reinvent the wheel we're building on top of the standard library we are building on top of boost so whenever there is something in boost that we find is good and useful we use it and everything else we build on top now we have about a million now probably a bit more lines of production code that use that library and there is a good and a bad the good thing for us is we are ready to change production code and library code at any time that makes a library less stable right so if you want to use it and you don't want to follow all these changes you are welcome to fork the library and just run with it it will still be much better than if you don't have any library so if you have a new project or even into an existing project it's probably good still to have it but the ability to change the library at any given time says we have no obstacle that to change the design and throughout the code base we kind of learn how that library ideally should look like and there is always something you learn there's always a better design you can constantly tweaking it around and and then we have that large code base to try out these changes so i think over time doing that for 20 years we learned a lot about how this library looks should look like and this is how it looks like okay so that's why i think i know something about ranges because we've been doing this process now for 20 years now get back let's get back to our ranges sorting and erasing that's wrong it's wrong at least under certain circumstances the problem is the sorting takes operator less the uning takes operator equal if they don't agree this is wrong they should agree of course but do you really want to rely on that in generic code it doesn't really it feels kind of wrong right so and you don't really need with this sorting and uniqu the less that the equal operator really has nothing to do with it the less operator is good enough so in our library we have sort unique in place which is the in place version of sorting and then making it unique there's also a non-place version which is lazy but we get to that later and there's also of course also one way you can plug in the less operator but you don't plug in the equal operator anywhere because you don't need it okay now first of all let's talk a little bit about basics of ranges what are ranges first of all the containers that we all know so vector string list they all own their elements they have deep copying when you're copying the copy elements you copy the elements along with the object and they have deep con constness if the object is const you cannot mutate the elements now and then there are views views are kind of references to containers or elements of containers and this is essentially what we all know already from the standard library these iterator pairs just an iterator pair packaged into a single object that's a view they reference their elements they have shallow copying if you copy an iterator you don't copy any elements so if you copy it it's it's all o of one and it has shallow constness right so the const iterator even the the mutable iterator if it's const you can still access im mut the elements through it kind of like through a pointer a const pointer and if there is a special const iterator just like there is a poter two const through which you cannot mutate the elements okay now there are also more interesting views because this is pretty boring if you just have these iterator pairs that we use a lot these arrange adapters they essentially take an existing range and turn it into something else and i will talk here about the two probably most used ones the transform and the filter now let's say we have an vector of ins and we want to find a four within that vector of ins right we would naturally use range as find and give the vector and the elements we are looking for and then we get an iterator back that points at what we found if that that that integer here that we are looking for is not in in it's straight in in a vector but it's embedded in some substructure like down there structure a has this int id and then some data attached to as well and then you have a vector of these things right and they also have these these integers one two four but if we now want to find the find looks very different we can't reuse the find that we used up there we have to write it with a find if because we need to access the the id here and so that means these two things are quite similar in semantics they can do similar things but they look very different in syntax which is not nice and really the problem here is that we we mung two things together one is the projection onto the id and the other thing is the the finding of the four these are two different aspects really that we should be able to pull apart that's why there is a transform adapter where you first basically take the vector of a's and you transform it into a vector of ins and you do that lazily so you apply this transformation function lazily while you're iterating you get an iterator and every time you dreference the iterator it will actually call the projection function and gives you back that that projection and now you can use the regular range find to find your four in that transform version of your vector now one thing to point out here is what's the iterator pointing to well the iterator is pointing in this case to to numbers ins right because we projected the whole thing onto ins it's natural to say well but i want the a i'm i'm finding the the the four and now i want to know what's associated with that four so i have to go back to the base and you can do that by just calling base and that basically takes the iterator from the transform unwraps it and gives you the raw iterator back which is then pointing to the a's not bad okay now here is a possible implementation of this transform and one way to do it is that you're writing an iterator that carries around this projection function and every time you invoke the operator star it will actually invoke the projection function and return the result and there's also the base which actually just returns the iterator that is encapsulated that is that is u aggregated by this this wrapping iterator take note that we are carrying around this function in every iterator h maybe not so good you'll see here's the other one i said transform and filter here's the filter let's say we again have our vector of a's and we want the ones that have id equals four so you want to just have the elements with id equals four again this is lazy lazy so this filtering actually only happens when you start iterating creating the filter range is is essentially o of one it's very cheap and only when you start iterating it will then basically skip the elements which are not passing the filter here is a possible implementation now you again have an iterator that is basically the iterator of your filter and it has a functor and two iterators one is the base iterator that where we are currently at where we with which we skip the elements but the problem with the skipping and that's clear from the operator increment down there with the skipping the problem is well we may fall off the end we need to know when to stop because we can't d reference the end iterator so we need to remember the end iterator so when we are incrementing we're not falling off the end we don't need to remember the begin because d referencing begin is illegal so you can't do that but you can't can increment the one before end so you need to remember end so that you don't fall off the end okay so we have a functor and two iterators inside each iterator now how does this iterator look like h you have a filter of a filter of a filter you're think well why don't you just have a single filter that's pretty stupid right well i mean imagine one of these functions is one function is generating is returning a filter and that is consumed by another function that adds another filter and that's consumed by another function that adds another filter so these filters don't necessarily know of each other and they shouldn't have to right so this things these things may come about just be because you you structure your program in that way and it's fine to structure it should be fine to structure your program in that way you don't want to optimize the number of filter adapters that you are using that's the iteration h it gets an awfully big iterator the iterator grows essentially exponentially with a number of levels of of transforms or filters you put around which is not good and boost range did this not good now you have we have to keep our iterators small because we will'll run small loops like tight loops with them and we will pass them around by copy and all that means that we don't want to make them huge because then they get very expensive to copy so here's the idea the adapter object so the object not the iterator but the the object that is associated with a filter it will actually carry around the end iterator and the funter and then the iterator will be very simple it will simply be the base iterator that where with which we skip so where are we in our original sequence and a pointer to that object that filter object that is c++ 20 state-ofthe-art and that's the reason that c++ 20 iterators cannot outlift their range unless they are borrowed ranges so for filter and for transform in the standard library they said you need to keep your range alive because we want to store stuff in it in particular for the filter iterator we want to store the end iterator so let's let see how well they did first of all consequence of this decision that the iterators cannot outlift their range there is some danger so if you call ranges find on this transform it will actually not compile with the standard library because they are afraid that if you call views transform and i think i made a mistake yes so i made a mistake because v imagine v is an r value this guy that's an r value okay so you had you you generated a vector and then you immediately want to transform it no disregard disregard correct as written correct as written the the thing is that the range is fine still takes a pr value and if so so because we are generating this transform we wrapping the vector into the transform that's a pr value now we are pulling an iterator out of the pr value now the standard is afraid that that pr value will go out of scope and the iterator relies on this transform to be alive to stay valid so they are afraid if you're giving me an r value and you say give me an iterator back to this r value what happens if that r value goes out of scope that's what they're worried about in this case there's nothing to worry about because we call bas on it so it's fine because the iterator that that is returned by bas is pointing to the vector v which is not a pr value so this is okay it will still not compile because they're afraid so you have to wrap essentially this thing around you have to little have a little utility as lv value that essentially turns the r value into an l value reference at pure cost purely to satisfy the compiler and say ah it's fine it's fine i know what i'm doing all good okay silences the error okay now let's do the same exercise that we did before with the wrapping a filter a filter a filter filter this is what you get hm it's still linear so you are point you you have a back pointer to the range and you have the iterator but the base iterator still has to hold a back pointer to the range and an iterator and a back pointer to the range iterator and so on and so on so it's still you get a linear growth of the iterator size which the standard said that's fine can't help it h whatever we said nah that's not good that's not nice you want to be able to stack these things like crazy and we shouldn't pay anything for it so how do we do this the key here is is that you need something more abstract or a different abstraction than an iterator iterator is not quite good enough we call this thing an index an index is just like an iterator with the exception that for all its operations it needs the underlying range so you need to give it the range and the index and then it can do things like increment decrement d reference and so on but always you need to supply the range okay and that would essentially be the interface you have an index range and then you have functions on it member functions begin index end index increment index and they all the begin index end index return the index and increment and increment decrement d reference they always take the index as an input and they are member functions of the range so they have the range and the index okay now of course if i tell you this and then tell you well now you have to rewrite all your code to use indices instead of iterators it's going to be a nogo we don't want that we still want to use iterators probably in our in our code because that's what we're used to so and arguably it's also simpler to do that okay but still that's not so bad because it's pretty easy to fix this compatibility between index indices and iterators so if we have an iterator and we want an index that's trivial because we can just use the iterator as the index if we then basically get a range supply to it for free then then we just disregard that we just execute whatever we have to execute using the iterator so with a bit of glue we can just say well use the iterator if you only have an iterator if you don't have an index forget about it we just use your iterator as as the index and this is what we did for your normal ranges that we that that there are so we don't want to reinvent the vector and the string and the the list we just can use it because we can use their iterators as the index now if you only have an index but you want an iterator that's also not very very difficult because you can simply build an iterator that again just holds a pointer to the range and the index and then it can implement all its operations in terms of these two information pieces of information that it has so here operator increment is calling range increment index with the index and it has both of these things the range and the index so it can it's it's trivial you you can you can easily now turn something that only supplies indices into iterators with a bit of gluc code now let's see how now the filter looks like the filter would contain the function and a reference to the base range that it actually is filtering and the increment index is then relatively easy to implement you can just say okay my index is the same as the base index and that's important because as you imagine when we have the stack then we can now stack gazillions of these things the index is always going to be the very base the index of the very base range and it will always be in this case a ve if we if you filter vectors it's going to be the vector iterator so you essentially any one of the in the inside this stack needs to just remember okay my position is a position inside the vector that's it doesn't matter how many stacks are in between and when you want to increment you can just ask kindly your base to increment this index it's like here's my index please increment that index and it will apply its own predicates and filtering and whatever there is all the way back down to the base and then return you the or or do this for you for your index mutate your ind index and say this is my index that i my that that that i that i changed for you and so you don't need any more information about what's there in between in this stack it will just automatically work same with the end you can just ask your base for the end the base can decide is is are you at the end of my of my of of this list and if you have a stack of filters then all these end checks will just go back down to the to the base and will just at the end will just be the vector end so it will it will all fall apart into into very very simple operation and do reference the same so it's it's it's all quite quite simple you you just pass everything down the stack and if you if you are holding the base by reference which is done here then this may involve some indirection there is also in our library if if you pass an r value and you can have similar function actually in the standard library as well if you're passing an r value it will actually hold the the the the adapter will hold the base range by value so in this case it will really all be inlined it will all be the single object okay yes and the iterators all have two pointers so pointer to the base range and in this case the vector iterator also a pointer and you can stack as much as you want okay on to the next idea when you are calling st algorithms then you quite often get an end back to say oh i didn't find anything right or i didn't something it's singleton it's it's i don't have an answer for you here's the end iterator and so the typical thing is yeah i'm finding something and then either assert it's not end or if it's not end do something which is not not nice because you have to the range that you having there that you are checking that you are passing into the algorithm you need again to do the end check so you're always mentioning every range twice which then you cannot inline it you need to assign a variable name and so on not ideal so here's an idea of how to do this in a more compact way let's say we have algorithms and we can basically tell them how what you want to have returned in case of singleton result so for example for find you are running through the whole sequence and if you found what you what you're looking for then you pack this up as the result and if you don't want to don't find what you are looking for then you pack a single ton you say essentially generate the the the default answer the the fallback answer and now you can define what that fallback answer should be in the caller so we have the little structs that essentially traits that that tell the function well what to do when when you come into one case when you go into one case or the other and when you're now calling find you can say well you know either give me the element or give me end if that's what you want okay but instead you could also say you know i only want the element this this end case is not a case that i'm expecting here i don't want that and that's that's very nice to write that into your code because it's it's documenting it you can tell by reading the code this guy is not expecting the end case it's no longer an assert that you have to write in the second line beneath it you can just directly state what you are expecting from that function call we also have one version that packs up the iterator into a wrapper an element type which is nullable so that you now have a nullable type being returned when you are when when you are when when the singleton case arises so when you do a find you can just simply find if auto it find and then just you go into your branch of of doing something when you when you found it there is more you can you can do you can think do things like return me the prefix before the things that you found you you return everything before the element that's a that's a sub range return everything afterwards that's probably the include the element that you found don't include the element that you found so there are various things that you can you can plug in there that makes it a whole lot more expressive to write what you want it's so and there there that but that's a different talk there there is a different interpretation of iterators depending on whether you found an element where the iterator is really pointing at an element or the iterator is pointing at a boundary really like basically slicing the the range you passed in two like lower bound upper bound it really gives you two parts and there you can do similar things you know give me give me the the sub range before subrange after and so on so there are different traits to use for different algorithms okay next to the another idea say you have a a visitor pattern right you traverse widgets here and you have a sync that you pass in these widgets so if if you have some something then you traverse these widgets cely and then you have some widgets that are always there and then there's another window and you travers widget you essentially go through this tree of widgets and enumerate them all right it's a bit little bit like a range right now it's it's it's a visitor pattern but it's it's an it's a list of things so why why not make it a range well we don't have an iterator okay is that a big problem how big of a problem is that really let let's try to make that that a range so we can use it as a range we can use the same algorithms that we use for ranges now for example write something like this if you i want to know did i hit any widget well if it's it's when i traverse my widgets that's that's my range there auto sync traverse widgets then i and any one of that has a mouse hit then my mouse got hit or i hit something with a mouse um should be able to write this i think it's nice very practical in our code now what's really happening here typically so the the typical c++ iterators that we know do what's called external iteration external iteration means that the consumer of data calls the producer if it wants more data and the producer returns that data consumer consumes that somehow and does something with it whenever it wants more data it again calls the producer so the consumer is at the bottom of the stack and the producer is at the top of the stack now that has advantages for the consumer and disadvantages for the producer the consumer it's always nice to be at the bottom of the stack because if you're at the bottom of the stack you have a contiguous code path for the whole range so you you you are never interrupt your code flow is never interrupted for the whole range that makes the the this consumer much easier to write it also has better performance because you don't have to restore the state of your consumer when when it's being called it's never being called you are always in the same piece of code and your instruction pointer basically encodes the state of that that consumer so if the code path of your consumer is very complicated that's a nice thing to have the producer is at the top of the stack and being at the top of the stack is not as good because you only have a contiguous code path for each item so every item really has is again entering the code at this operator star and you have to essentially in this operator star restore somehow where am i in my sequence what do i have to do i cannot write this as a contiguous contiguous cod path which in case of that recursive iteration that we just saw with the widgets is difficult because we need to basically know where am i now in my in my tree and that tree is easy to write if you just write you know one one function that calls other functions just make recursive function calls but if you have to traverse that with iterators it's a whole lot more complicated makes it harder to write also has worse performance because you have the single entry point so matter no matter how you do it you still have to when operator star comes you have to say well where am i and where do i have to continue also between elements you only can allocate a fixed amount ount of memory because you essentially only have whatever you have you are storing in your iterator is your state you cannot just say well i dynamically just get get more memory from somewhere that is from the stack because that stack will be gone the next time operator stars being called obviously so then you have to go to the heap which is less efficient now what you can do and it's kind of funny that i think that the the c++ library doesn't support that is you can turn these things around you can just say the producer sitting at the bottom of the stack now has all the advantages of being at the protom of the stack and the consumer is at the top of the stack so this is essentially the case where you these these for each something when you have a four each something call that's that's essentially turning this around because a four each function call will produce these items and will just pass them into you or visitor can also call it the visit visitor pattern really the ultimate ter turn this around function is stit for each stit for each is essentially says call me back with all your elements well in this case you essentially relinquished your bottom of the stack position and says and say well i'm actually happy with top of stack i'm happy with being called for each element and that situation is very very common we always write for eaches all the time and in all these situations we are happy with being at the top of the stack so the producer could we could give the luxury of being at the bottom of the stack to the producer and maybe you can do something with it let's see first of all can both the consumer and the producer be at the bottom of the stack that' be oh everything is fine right we are both have the luxury of being at the bottom of the stack yes you can with c++ coroutines but c++ coroutines have their own problems first of all you can write this which is actually it's the generator is now it's supported you can you can write that code except every function that this coroutine calls has to be a coroutine so it means you have to coroutine your whole call tree otherwise it won't work which is which is annoying and that's one of the my my big ripes with with cortines that you essentially have to coinify your your whole code base in order to use coroutines in particular imagine that this traverse widgets it's i mean if it's a if it's a custom function traverse widgets that's possible but what if i want to use algorithms here what do i want to use generic functions i would have to have them in two versions one basically being cor for cortines and one for non chorines kind of weird strange so you have to yeah you have to coinify your call call now and it's still a bit expensive because the the the the re-entry point to the coroutine is some sort of dynamic jump you have to remember where you are in a coroutine you have to get back to it you have to save and restore some registers so you have to really have to have an the compiler has a has a has a tough time probably to find out which registers do i have to to store and save save and and and restore at at the point of switching between the cortines it's a if the if the compiler optimizer is really really really good maybe you can do that but it's it's by no means assured so same with inlining right so it's much easier to inline if the compiler knows which which f exactly which function it it needs to inline while that decision is by necessity dynamic if you have cortines so compiler has a lot more work to do the the deep co rific you can also avoid but then you're really going to stack full cortines which the standard doesn't have and it's it really means you you have two stacks you have to switch between them you have to implement them as cor as as operating system fibers it's going to be very expensive and nothing that you want to use for a tight loop that you typically have in range code where you have a very tight for each loop that that has to be very efficient so and it turns out the internal iteration is often good enough you can write quite a few algorithms with internal iteration you can't write find or binary search because we don't have iterators and they they output iterators but many others you can for each that's basically the mother of all internal internal iterations of course but accumulate all of any of none of works we can also have ed adapters we can have a filter we can have a transform for internal iteration i mean if you pass me an element i can p transform that element and pass it on no problem right so so the the the these algorithms in in the standard in the think cell library all support internal iteration now that's how the any off implementation for example looks like right so you're you're saying my my result is false and then you you you iterate and then you see well anyone anyone true and if yes then then it's true and if not it's it's false and yes oh there is there is an any off actually in our library that doesn't take a predicate just does a boolean boolean evaluation which also turns out to be practical now of course here's a problem the problem is any off is lazy so we should stop really when when true is encountered when we see true we say oh that's true okay stop don't don't irate further so we have that as well the first idea was ah we use an exception to bail out well of course exceptions are way too slow don't want that in in tight loops and don't want to do this all the time now the other idea is well we just define a specific enum break or continue and the the tc4 each implementation can basically decide when looking at at one of these at the sync it's it's sync doesn't return something else but break or continue then it's normal i don't have to check whether it's break or continue i can just carry on or if this guy con returns break or continue you decide that at compile time then if it returns break i have to stop so you kind of eli the eli the the breake check when it you don't return break or continue so you don't lose anything performance- wise with that check now when how is that useful now these these these these this internal iteration does that how does that what does that buy us here's an example quite frequent probably you have concat which is just concatenating two arranges making turning it into one now if you run that together with a for each of of conat right within with indices that would be quite complicated so you have a concet range and it basically has to carry around a variant of two indices you need to know in which of the sub ranges you have two sub ranges you need to know where you are you do need to say i'm here or i'm there now that means that every time you increment and you you cannot don't remember anything you are you are you are you you get your increment it's like okay where am i am i here okay increment am i there okay increment that guy that guy different code for either case so i can't can't put this all in one one bag i just have to decide i have to make a make a branch of what you do need to do if you increment now the referencing now oh surprise i first incremented now i the reference again i have to branch i have to decide okay i'm either here or i'm there and again do the right thing for each of these ranges how do we avoid this well it's easy for generators for internal iteration we can it's it's it's so simple we just write two for eaches we just iterate over one when we're done with that we iterate over the other we don't lose any performance much better much easier don't know branches at all all good and that doesn't mean we don't have the iterators the concat will support iterators and it will support internal iteration and if the guy who's doing stuff gets by with internal iteration it just uses the internal iteration interface and then it gets the internal iteration performance and everyone's happy now here's what we can do now with this internal iteration another thing stit format also c++ 20 new surprisingly although they introduced both in the same version of c++ s format does not use ranges they had rangers but they didn't use ranges because they designed the format one guy designed theform it and the other guy designed rangers and they never really talk to each other much so they we have now stood format and we have rangers and they don't really fit together very well so here's how they fit together now stit format is actually writing to output iterators and output iterators are in a way already internal iteration because you are essentially passing the things that you are producing to this output iterator one by one so that's internal iteration and it's much easier you you when you are when you are turning a number for example into into a string you have to hold state so it's quite nice if you can write this with internal iteration if you don't need internal if you don't need external iteration and typically appending to a string doesn't hold much state it it can just take you know just take the characters one by one so it's quite natural to use internal iteration and now with the generators we can actually do this with internal iteration so let's say you're writing a string like this you won number of f dollars okay and this s deck is really just a generator that generates the number it's think of it as a range it it's that's the string that is that is that is that is written by this f and with two two digits or two decimal digits and and and things you can actually you you actually are required to pass a decimal separator as well which i left out here required because you want to know when you know you're doing all international code right and we don't need internationalization so you need to specify what kind of decimal separator you want note that it's not like iostream iostream allowed you to put that double straight into the string which is kind of confusing because what's happen happening when you are when you're putting a a number into a string what does that mean well it it it meant something based on the state of that stream but that made that stream quite cumbersome a lot of virtual functions a lot of state that was carried around how many decimal places do you want does that decimal place oh i forgot to reset the number of decimal digits and now i'm getting an unexpected output io no one loves io streams so that's why that's not a good idea it's better to say here this is essentially turning my whatever i have whether it's a number or whatever it doesn't matter into a into a string and this is the range that that is essentially that i'm giving you and please add that to my string now this also easily extensible i mean there's in s format there are also customization points and you have to write them in a certain way and it's all complicated no you don't need that you only need a function that returns a range and then you just naturally extended the stuff that you want to format like here there's dollars is okay you put a dollar sign in front of it okay that's my that's my formatting function for for dollars two decimal digits and a dollar sign in front of it and i just write this into a function and now i can use it wherever i use use strings right easy and this is how we actually do a lot of string formatting the whole we have a we have a a an http server for our website and that's how we generate the strings that coming out of it it's it's you know whole database like queries and turning the database query blah blah blah into a string and you want to format it as that table and blah blah blah big stuff you can all write this basically in one expression turn turn your database query into into strings yeah there's there's how you format strings that have placeholders right so you can have your there's a tc place holders that allows you to put python style placeholders into the string or format style whatever you want and and it will go by or by by by order okay you can also name them here's here's the named version of this thing so you can say well it's it's now it's amount and date and then you can give it named arguments that replace the amount and date if that's that's what you prefer and then then the the i i think it's right that when you translate this when you internationalize this string what will get passed to the international usually use some sort of agency or you you built yourself a front end for for de but what you will pass to that to that to that translator is really just the format string it will not contain the number of decimal digits in the format it would but i don't think that's right because typically you determine your number of decimal digits in a more formal way you either know your data or you look it up you say well this is yen i don't have any decimal digits or this is dollars and i have two decimal digits whatever you have to to to find out what how you want to format that that number really does not depend much on the on the translation of the actual language so here you have you we we designed this so you can pass this to the translator even if the translator messes up entirely there is no danger of of bad things happening and the worst thing that can happen is he misspelled she he or she misspelled the the placeholders and then and then you won't get a proper output but there's no no danger of anything else happening like like numbers being printed in funky ways and stuff like that yeah so here with a date i actually you know i have this other format in there the iso 8601 format which turns any date into an iso 8601 string so it's it's easy it's easy to to to extend these things okay and the named things are good for of course for reordering right in different languages it may be ordered in different ways so the in this case the translator has the freedom to do that now we want to form it into containers now of course the stit string gives us the empty construction right that that kind of it's it's no parameters means empty one parameter means use that parameter for the content of that string okay makes sense and then there are two of course oh there's there okay so that is what we need to add right we should be able to add the construction from one range and and that of course doesn't work but we somehow have to put in glue that it will make it work that you can basically create a string out of any range have range you want to make a string out of it you should be able to write this unfortunately you can't but they'll pour some glue onto it so that you can the last one is a concatenation now if i look at this first one you know empty construction takes no parameter one parameter means take that parameter as your content multiple parameters means that should be shouldn't that mean that that's the content of the string if i mean if i'm passing three parameters to the string right doesn't that mean that the concatenated version of these three parameters should be the string i i would i would think so but no no no no they're very important two parameter constructors of strings let's look at them look at them ah there's n ranges okay this is what we want right here this is what i want multiple ranges all concatenated is a string there this is what i wanted we have very important two parameter constructors of the the string okay i'm sure that if you look at them you immediately know what they mean look at them everyone knows what they mean yeah i i didn't okay that's ub because a is considered a buffer okay so you you try to put a length of three the buffer of a length of three into of in the buffer a but that that's b because a is only too long a and theator okay oh this one as as you all know probably it adds 65 times control c into the string okay this is exactly what i want in this case and and that's that that adds three times the a so good luck okay let's let's deprecate these things right we don't want them we can write it easily like this right make a range that repeats a three times it's a lazy range we have one for it just add add this to the strange just like yet just like another range we don't need constructors for all this stuff we just describe the range construct our our our string now of course we can't have this because we cannot change around s string but things s throughout the library uses kind of to to simulate or or remove constructors it uses explicit cost you can name it whatever you want but point is that this is a glue function that essentially simulates the the constructor this is our constructor this function that means it by default can pass on to pass to whatever constructor you the default constructor but if you want to remove things or add constructors you can do it by customizing explicit cost you have a customization point to change around constructors which is very useful so now this works in the standard in our library right so this explicit casted string of of of these multiple arguments now constructs the st string here's a similar thing the the cont m place back is is again a wrapper for imp place back push back and but that uses tc explicit cost if it needs to so if you if you find something where you really you you want explicit cost it will use explicit cost so again to to to keep the this illusion alive that explicit cast is really the constructor so this is like basically throughout the library we use explicit cost we can also append right so you can do the concat and either we append with concat or we just have multiple arguments and they all being concatenated automatically now let's see how we can speed up the formatting into containers the idea would be we determine the string length then we can allocate for the whole string we can allocate the object allocate memory and then we can fill in the characters okay so this is maybe that's something that we can reap as a side benefit from having everything as a range so we could write it this way where explicit cost essentially just just takes iterators begin and end and then constructs the container the problem is for non-random access ranges the string con this the string constructor runs twice over the range the standard library assumed that iterating over a range is cheap it is no longer in a range world in a range world it's expensive to iterate over a range but they assumed it's cheap so the standard says you we only allocating once when we construct construct a stit string that's important we don't want to avoid memory allocations we don't care about the iteration so no how no matter how complicated your range is the stit string constructor when constructor in from a non-random access range will iterate twice over the range which may be very expensive so the idea here is give the poor range so first of all avoid iterating twice we will always only iterate once and if we need to we will reallocate the string multiple times but if you want it to be fast then just give a size function to the range so that the size can be determined up front and then only single allocation happens that's the idea so determine the r the size of the whole thing at once at up front single allocation and then iterate over at once now so we have an explicit cast where the range has a size and it's not a random access and then you can do the reserve with sit size and then iterate and for list for example not random access that's fine so otherwise you would have to you would have to you would have to iterate you you would have to still reallocate multiple times here you don't have to because list for example would have a size there's also a pendant watch out there's a cont reserve cont reserve is evil cont reserve is evil because cont reserve doesn't take you into account what you reserved before four if you are adding something repeatedly that is only one character at at at at at it will it will reallocate every single time horrendous okay there's cont reserve in our library doesn't do that okay it at least doubles the size of the allocated memory or something like that so let's get rid of this so better reserve and then what about the generator ranges now we have an appender customization point where you can add you can for each container it will get the appender it's it's now a property of the container to get an appender and that appender by default just doesn't imp place back right this also works that's a sync for for for generators but you can also have a customization point chunk which takes the whole range at once and here again you have the possibility to query that whole range for the size so even for the generator you could write a generator that outputs these things one one by one internal iteration but still has a size member that can tell up front that's my size and then the container we preallocate that size up front and then you're faster for files that's also useful because chunks of of continuous me memory you can write at one with one go into a file that's that's efficient now we measured how fast that is and it turns out i'll skip over the details if you do it iterator based we are wasting 50% more time over a handwritten loop but if you use internal iteration we are at 15% so it's quite efficient you write very high level code and still you get a lot of performance out of it there is another opp opportunity for optimization which i skip over so we have a bit of time for questions where you can when you add things to a string one by one it does the end check every single time although you you know i pre-allocated the system doesn't know that and you can optimize for that we haven't done this yet but you could with that same interface you could say i am essentially having an appender which is not checking for end because i i asked before the size and now i can write that whole memory in one go without the end check and that actually that that's the that's the one say basically just put it to the end increment the end just do that in one go that saves 20% in visual c++ again when just filling a string so it requires your own basic string implementation which we don't have yet all right you can do more you can for example if you don't have a size but you know a minimum size at least then you could say well i i know roughly how to allocate don't not exactly but i can already i know it's at least 100 so i can already allocate 100 and i don't start with 1 two 48 and so on okay the custom file dependo can be even more optimized if you had your own file buffer because you know that you know file buffer they get written out with a cluster size so you could really just fill the cluster if you know i'm again 250 bytes i know there's no end at 250 bytes you can just write 250 bytes no end check because i asked you before how big are you you 250 btes okay just write 250 btes now i have i don't know so many btes left i know how long i have can write it's like oh stop here now we have a range that may run into end so run into end stop right there and then write out my cluster get a new buffer for a new cluster and keep writing can all be done conclusion is ranges are very useful we had index based ranges and generators they improve performance over c++ 20 ranges and you can there's also plenty of opportunity to unify ranges with text formatting which is very useful for us now that we half all this range stuff and this is the earl to our library lot of useful stuff in it again if you write in your project looking for a library use that library if you just want to copy it fork it run with it without bothering about the changes you're still going to be ahead i think i think it's a it's it's a very good library i hate the range based for loop don't use the range based for loop because it makes people write things like this instead of this thank you very [applause] much questions questions no questions hi h did you have the chance to look at the flux library from tristan brindle it's also based on he calls it curses but it's basically the same as you did with the index just remembering like the index and then no i haven't seen i haven't seen that library there's also another piping library out there i know which is very similar to the generator library is this library compatible with regular iterators yes he has some adapters so maybe i it's a maybe you can talk about it afterwards it would be interesting yeah okay hi thanks for the talk i i especially like the the formating it looks much nicer in the beginning you said that the the old boost range iterators are kind of very fat because they contain everything in the iterator do you have performance data on how much that actually matters or are you aware of any other like comparisons between boost rangers versus range v3 versus things cell ranges versus the new standard no but i do know that i brought up this this topic on the ba mailing list when they designed the the c++ ranges and at least they all said oh  and that basically was then the the i think it was the the kickoff for saying iterators have to keep the rangers alive we need we need to require this because that's non obvious i think the first iterations didn't require this so at least so i i i don't know i mean i guess with exponential growth i mean you can always make it bad it's just how many how many you have to put together so i think exponential growth is always so bad that you have to do something about it i mean if then you add add three more and you it's all going to explode so yeah all right thanks hi what i'm missing in current implementation of c++ ranges is par processing when i move from from iterator code to to to to new ranges is it possible to add such for example sord you can adds too power and you have power processing is it possible to add it to your probably probably not as as much i mean the the the ranges are or the way that they paralyze ranges does rely on the fact that you can you can you know chop these things up into pieces and then operate on pieces really the ranges are the generators i think are most useful in this very frequent case where you have small loops tight loops very lowlevel loops essentially where this inlining is just very important if there's if if you're doing a lot per iterator de d reference or or if if there there are big operations then that overhead for d referencing doesn't doesn't factor so much anymore so i think in the for for parallelization then yeah you would need probably need to do it manually but but for for these very frequent tight loops where you don't really think about it how many four eaches do you have in the program it's just many many many there it just it's it does something for you so we have two questions from the internet one question is does your lar have a shallow constant problem as c++ ranges also use i didn't quite understand go ahead sorry say say again the first question no this is one question does your library have a shallow constant constness problem as c++ ranges also some views cannot be passed to a functions that accepts values as const reference like drop in cs plus+ ranges does your library have the same problem do we have shallow constness problem the so i when designing this library i had a big headache because because exactly this problem is is there a way to ensure that if you have a range const reference pass to a function that you are that you're guaranteed there is new mut no mutating happening i think per se this is a i wouldn't say impossible problem to solve but i think it's a very hard problem to solve because a transform can always turn a a whatever you know whatever item you have into say a mutable pointer and per se you don't know what you're mutating there it it could be something that's within the range it could be something well outside the range so what's what would be really useful in this particular case would be that there is just no mutating ever possible so that it's a real pure function that you're that you're calling your iteration is really pure function there's no side effects and i i think this is very hard to to ensure sure with the compiler because you are you essentially you could pass out a project proxy object which then turn then turns your your it could be passed out const and and you call it and it gives you something mutating out of it so it's something that you it's it's i i don't think thinking about this i don't think it's a range problem this const problem i think it is a language problem it goes much deeper than the language if if you have a than than the than ranges if you have a function that is marked con reference and you call this a method on a on a on a on a class then this class is still able to return you a pointer through which you can mutate the world essentially and and i think i think that's that's that's wrong i think the language should have something that ensures that something is a pure function has no side effects whatsoever but i think just c++ does not have that and and i i believe this has not so much to do with ranges in particular if you are looking at transform because transform is effectively calling general a general function and guaranteeing anything through that general function is going to be impossible so i gave up on it i'm we are still we are still having the convention that if you don't want to mutate the range you tank it by conre but that doesn't guarantee that you cannot mutate anything through the r through that range it would be nice if we if we could but it's it's i think it's very hard and i think it's maybe even beyond the scope of rangers there was another question yes so can the library use as open source yeah it's a boost boost boost license you can use it as as you as you wish than