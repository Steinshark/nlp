principal component analysis is perhaps the most widely used data reduction technique on the planet everyone uses it but here's the thing. it doesn't actually do data reduction principal component analysis is the idea of trying to find a different view for our data in which we can separate it better and i'll show an example piece of paper and the idea is that what we want to try and do is reframe our data maybe move it around so that we can better separate things out better cluster things perhaps it's better for machine learning now as a side effect of this in pca, we also order our axes by the most to least useful in some sense. so then we can perform a separate data reduction technique later by taking the slightly less useful axes away by or in this case dimensions or attributes of our data pca is commonly pitched as a data reduction technique. actually. it's a data transformation technique it just makes our data and meaning able to production later so let's imagine we have some attributes and we we know that some are correlated some are not correlated the problem is that maybe we don't want to just delete some of the attributes may be 0.65 correlation is i mean it's it's good but it's not it doesn't mean we definitely want to delete attribute two and keep only attribute one on the other hand maybe we do need to reduce some of the number of dimensions we've got or maybe we just want to try and make our data more amenable to things like clustering. so let's look at a quick example typically pca is done over many dimensions when we've got lots and lots of attributes i'm just going to show two because obviously i starts to break down when i try and draw that many on the page so if we have two attributes and what we want to try and do is work out what the contribution of each of these is to our data set which of these is useful which of these is not useful and now obviously if we had many dimensions, you know seven hundred ten thousand we can still apply the same technique. so maybe we have some data that's like this we have some datasets over here and perhaps we have a little gap and maybe some data over here and in general our data is kind of increasing like this. so this means that attribute one and attribute two are positively correlated to some extent but maybe the correlation is not so strong that we just wanted elite attribute to what we want to try and do is transform our data into a way where these are more useful imagine that you've got some data but looks a bit like this but if we rotate our data we take a different view we can see there's actually two objects and then we can separate them out and maybe if you were to take them again you could see there was four objects and so on this is the idea what pca is going to do is find new axes for this data that separate it better for pca to work. what we would start by doing is standardizing our data so all of our dimensions attribute one attribute to all of the attributes are going to be centered around zero and they're going to have a standard deviation of one pca will not work really at all. if you have widely different scales for your data so what we want to try and do is find a direction or an axis through these two attributes that separates out our data better than individual attributes do let's see how this data looks just from attribute one if we trace down this way you can see that it's sort of got this amount of spread in actually bute one and they kind of dotted around like this and they sort of should go all the way along like this so you can't really see anything on here meaningful about these two groups, right? and of course the more dimensions you have the more this could be a problem similarly about tribute to if we trace along here it goes from this range to this range this is the variance of attribute - like the range and we can see that roughly speaking the data is as spread out in attribute one as it is in attribute to that spread is about the same and both of them are kind of useful for looking of a data but not really because again, we have an equal distribution of point all the way along here. so that's not hugely useful all right. so if we look at just attribute one, that's not hugely helpful if we look at just attribute two, that's not hugely helpful either. so what can we do? well what we want to try and do is find a new axis like some new attribute that fits through this data like this and can really separate everything out because the spread of this data is actually diagonally in some sense not this way or this way so what principal component analysis is going to do is find this principal component miss axis through our data like this such that when we look at the spread of a data, it's maximized, right? so the data is as spread out as we can find it and this is going to happen over any number of attributes so actually one here attribute to attribute three attribute for all the way to attribute n when we've got maybe 700 or 800 or $1000 so at the moment which is fitting one principal component, this is one line through our two-dimensional data there's going to be more principal components later, right? but what we want to do is we want to pick the direction through this data however, many attributes it has that has the most spread. so how do we measure this? there's really two goals which were exactly the same one is to maximize the variance so we find a direction for this line such that these points at the very edge are farthest apart the other one is that we minimize the error so we take this error from here this distance this distance from all these points to our new axes and we minimize it so you can imagine if we do this for all our points we can get the sum of the squared distances from these points to this line and then as we move this line around sometimes if it's going to be better sometimes it's not if we have a line that goes like this some of these lines are going to be very large like this and that's going to be a higher amount of error so what we'll find is that if we do this our first principal component will sit through whichever direction in the data minimizes these distances and by definition maximizes this spread which makes this axis super useful if we use this axis now as our new x and we rotate this whole page all our data is lovely and separated. and actually we have two distinct clusters in this data set, right? so that's what we're going to do now as i mentioned pca doesn't typically reduce the number of attributes from two to one just like that we're going to have another principal component which represents the second amount of most variance orthogonal e so at ninety degrees so that's going to be this one here we find the first principal component which maximizes variance and then we find the next one along that maximizes events in the next direction now if there were multiple dimensions we'd keep applying this process we keep finding new axes for our data that systematically show more and more of a spread of our data but we're crucially we're ordering this by the amount of variance that they represent so this is pc one or principal component one. this is principal component two and principal component one is always going to have the most varied data in it principal component to the next most three the next most all the way to the end with the least so a natural side-effect of this process is that we're going to have new axes through our data which and we're going to have a same number of axes as there are original dimensions in our data but they're going to get less and less useful in terms of the variance of our data as we go forward so pc one is going to be the most important most of our data is spread out across pc-1 pc2 a little bit less spread out pc three a little bit less still all the way down to pc n all the way down here if you wanted to perform dimensionality reduction because you felt you had too many dimensions to your data you could just for example keep the first 10 principal components project your data into that space and still retain most of the information we won't go into the mathematics of how to calculate these principal components because you can find out very easily online and all has a lovely function to do it for us i wanted to focus on intuitively what pca does but how we will actually project these points onto these new axes and rotate the whole thing is each of these principal components is going to be a weighted sum of all the attributes so for example pc one is going to be some amount of attribute one added to some amount of attribute two now in this case because it sort of goes off at sort of 45 degrees it's going to be about the same but you could imagine if your data was like this it'll be mostly attribute one and a little bit of attribute two if it was like this it'll be mostly attribute to a little bit attribute one all right. now, of course the n-dimensional data or we have many more dimensions that i can't draw on the page the principle is exactly the same some amount of attribute one attribute to attribute three and so on all the way to the end right and that's going to project our points straight onto this line through that data so when we talk about minimizing the error you can imagine rotating this about the center of these points here like this and as you do this these red lines are going to change in length and it's going to settle on the very center line where these weights are minimized right and as it happens that also maximizes the variance of these points here because of the fact that this mathematics is based around eigenvectors and eigenvalues pc2 is always going to come out or foggin all or in this case at 90 degrees to pc one now this is true of however many dimensions. you've got every single new axis that appears or new vector a new principal component is going to come out or foggin all to the ones before until you run out of dimensions and you can't do it anymore we've already reached the most we can fit in on this two-dimensional plane we've got one here and we've got another one orthogonal to it there is no other lines i can draw for that to be true right, but obviously if we had more attributes, that would be the case so the reason that it's so important to scare your data appropriately is that you're trying to find the direction for your data that maximizes the variance now, if one of your dimensions is much much bigger than the other of course that one is the one that's going to maximize the variance if you've got salary that's between naught and 10,000 and all your others are between naught and 1 then your first principal component is going to be predominately salary because that's the most important thing as far as it know if as it knows this is why it's so important to standardize your data first we're going to continue to use our music data set for this video now for those of you forgotten this data set is a set of music files that are freely available online where we've got the metadata of a genres or titles for different tracks and then for those tracks we've also calculated some features about the actual audio for example temporal features how loud they are? how fast the music is how upbeat it is whether you could dance to it this kind of thing apparently dance ability is a measurable trait apparently these teachers have been generated by two different libraries once called lib rosa which is freely available online and the other ways echo nests which are the features that a core of spotify and how it does its music recommender system and its playlists so let's load the data set so i'm going to read it. it takes quite a long time to load it'll probably be faster if it wasn't in a csv, you've got to remember if your files are in csv you've got to actually pass the more than workout, whether they're numerical or text, you know for every cell. okay, so we've got 13,000 instances or rows in our data and we've got 751 attributes or dimensions to our data? so these are going to include features from both liberals er and echo nest and the other metadata of these tracks so we're going to select just the echo nest features for this part just be it's a little bit easier to have fewer dimensions to look at this would work just as well on all the other features as long as they're numeric so we're gonna select echo nest is equal to the music data frame all of the rows and just the echo nests columns which are 528 to the end and then we're going to standardize all this data now so we're going to center it around 0 a mean of 0 and a standard deviation of 1 using the scale function now take a minute to finish and then we can just check to make sure that our variance and our mean or what we expected. so we're going to apply over dimension two so that's over all the columns the variance function and find out what the variances are and you can see they're all one, which is exactly what we want so let's have a look at the mean the mean should be centered about 0 it won't be exactly 0 just because of you know, floating point errors and so on. so there we go. so 1.5 10 to the minus 17 very very small right close enough to 0 perfectly fine so the function we're going to use is the ppr comp function in r this is going to perform principal component analysis for those of you who are interested in learning more what it's going to do is create a covariance matrix, and then it's going to use singular value decomposition to find the eigenvectors and the eigenvalues and those are the things that actually we want from a pca so we're gonna run that now it doesn't take too long. but this is still quite a live data set this will slow down quite a lot if you had a very very large data set, but it still might be worthwhile what it's done is it's found the directions through our data that maximize the variance and it's projected our data into that space or transformed our data into that space at the moment. the dimensionality of our data is exactly the same and completely unchanged. no dimensionality reduction has happened yet. so let's perform a quick summary there'll be a lot of the stuff on the screen, but i'll point towards what's important so what it's doing is it's showing us the list of all the compiled they're standard deviations service spread in that direction and also how much of the variance it accounts for you can imagine that let's imagine a spread of your data and all the different dimensions is this much but in one direction, it's just this much what was the percentage of the spread or the variance that that principle component accounts for right? this is very easily quantified so you can see in here we've got the proportion of variance for pc one is naught point one one six nine which is about eleven point six percent so out of all the 224 echo nest features this weighted sum in principal component one or vistit direction through our data represents eleven percent of us bread, which it's not too bad. actually, i think that's pretty good why principal component two that's another eight percent so the cumulative proportion of these two principal components is going to be twenty percent and at printed component three twenty-five percent and so on so what we're saying is by the time we get to principal component three if we represent our data is this three dimensional space around these axes pc-1 pc2 pc three? we're getting 25 percent of a spread of the data that we had before but that's three dimensions instead of two hundred and twenty four dimensions. so that's not too bad now one important thing to look out for is where our spread starts to get towards a hundred percent where is it in our data set that we can say, you know? what these later dimensions these later principal components are not really adding anything to our data set so we scroll down and we'll find here at 95 percent scroll down a bit further 98 percent 98 percent and here we go. principal component 133 the cumulative proportion of variance explained by all of those ones from 1 all the way to 133 is 99 percent if you're going to perform dimensionality reduction stopping at 99 percent of the variance is very common what we're saying is we can delete any of our data from principal component 134 all the way to the end and we're still getting 99 percent of a spread or information from our dataset if you want to use pca for data reduction then what you're going to have to do is decide what your cutoff is going to be now 99 percent is a good number to use what does that actually mean? what it means is if we plotted the different principal components going this way and the amount of barrier. it's that they explain like the amount of a spread of a data that they're responsible for they're going to decrease like this i mean this is going to be a bar chart actually right so like this so principal component one is always going to be the most variance explained because that's how the mathematics works these are ordered in that way principal component 2 is less three is less four is less and so on we're going to keep going down until 99% of the variance has been explained in some band and we can remove everything else. that's what we're going to do so 99% is one option ninety-five percent something like this any number of principal components that you remove is going to delete some of your data equivalent to the moving dimensions but because they're ordered in this way from the most useful to the least useful it just makes that job a little bit easier instead of saying it was tempo or feature five that we didn't want actually we're saying in this axis principal component one and principal component to its principal component one hundred and thirty-four that it's not that useful to us let's have a look at one of our principal components and see what it is. so we're going to type pca followed rotation and we're going to select just the first one because otherwise it's going to be too much information so this is going to be how much of each of our 224 dimensions does pc1 need to create this weighted sum and project our data so you can see for example it's - naught point naught one of tempo or two - two - naught point naught two of tempo or two - three one thing to remember about these is these are now arbitrary axes through some massively dimensional space very difficult to know exactly what this means, right? you can start to look into based on these weights, which of these features is more useful, but that's kind of a second second step you can use so for example tempo or feature naught is no point naught - so we're going to take naught point naught to eight times tempo or not whatever that value is times like this much of the next one times by this much of the next one i'm gonna add them all up and that is a projection of our data point into this new space so we can do this for our entire data set as it happens our calculates is forced. but you could calculate this using a matrix multiplication if you wanted so these are all our points transformed into this new space. so hopefully we can see them better then we're going to start plotting different genres of music in these principal components to see if if the separation is any better than it was before so let's have a quick look. so this is a scatter plot a principal component 1 vs principal component 2 and every single song in our data set and you can see it's a bit of a higgledy-piggledy mess and it would be because there's some 13,000 songs here but you can see that maybe some of these songs are bigger over here and some of these over here maybe let's just look at a few genres to sort of narrow it down and make our figure a little bit clearer so i'm going to select just a rock electronic and classical genres. i don't know they seem like they'd be slightly different so let's run that so we're going to take just those genres we're gonna plot them in the same scatter plot and see where they are in this space so how did this data get into this form? what happened was for every individual track we had a number of features in our 224 dimensional space each of these principal components is a weighted sum. so for example for let's say track 516 we'd have taken tempo feature 1 multiplied it by part of principal component 1 the loadings added that to the next bit to the next bit to the next bit and worked out where it sits in terms of principal component 1 this new axis, we'd have done the same for principal component 2 and that puts them down here now there's quite a lot of overlap but you can start to see we're teasing apart the electronic music from the rock music the rock music's sitting over here on the right the electronic music sitting on the lower left and the classical music has up the top here now these axes don't mean you know that musics faster or slower or more or less upbeat because without looking into the waiting's and below dings for these principal components. it's impossible to say for sure but what we can say is that they're starting to come apart and there are some differences in our data set the fact that they still overlap means that probably two dimensions is not enough to satisfactorily separate out all these things if you wanted to pass this projected and transform data into a machine learning algorithm you'd probably need to pass in more than two dimensions and in this case given that 90% or 99% of the variance is explained after principal compare 133 those 133 dimensions are probably what you'd use you can actually use the entire output a pca the same number of dimensions you have before to just show a better rotated version of your data to a machine learning algorithm you don't have to remove any dimensions if you don't want to but because the dimensions are ordered in from most variants to least you can kind of get a good gauge for where you should cut off and remove data that way this kind of data reduction along with the ones we looked at before are going to form part of this data cleaning data transformation and data reduction approach that we're going to iterate through until our data is as small as we can get it and it's it's we can extract as much knowledge as possible in the easiest way once we're done with this our date will be ready for clustering for machine learning for classification for aggression for anything else that we want to do? today we're going to talk about clustering do you ever find when you're on youtube you'll watch a video on something and then suddenly you're being recommended a load of other videos that you hadn't even heard of that are actually kind of similar. this happens to me. i watch some video