[music] hello everyone in the last two videos i've been working on this little geography game and what i'd like to do now is polish it up based on some of the feedback i've received from all of you maybe try flesh out the gameplay a tiny bit and possibly experiment with some ideas for the future as well so let's begin with a common request which is a compass because it's pretty easy to get disoriented at the moment to implement this i think it'll be helpful if we can first figure out the following problem are you excited for some maths of course you are let's say we're at point a on this globe and we want to get to point b as quickly as possible what direction should we face well the shortest path is a straight line of course but problematically our airplane lacks the ability to just burrow straight through the earth so what we can do instead is take the direction from the center of the sphere to point a and cross it with the direction from the center to point b and crossing just means doing this somewhat confusing bit of maths which gives us a new vector that's perpendicular to our two input vectors [music] now imagine a plane at the center of the sphere no i mean the geometric kind and this plane is oriented such that its surface points up along the vector we just calculated the significance of this is that where the plane intersects the sphere between our two points is the spherical equivalent of a straight path so now we just need to take the plane's normal vector and cross it with the vector pointing towards a and that will give us this let me actually draw it over here instead and we can see that it's pointing in the direction we need to face if we wanted to start moving along this shortest path from a to b and that's what we set out to find all right so i've written up this little function which does that calculation given any pair of points on a sphere but i trust my code very little and my maths way less so i also made a simple test where we can control the latitude and longitude of a target point over here and then we can spawn in a bunch of test points and draw arrows from all of them towards the target point using that new function just gauging things visually i'd say it does seem to be working properly which is very nice of it i'll quickly look up the coordinates of the north magnetic pole and we can see here it doesn't like to sit still very much but currently it's at about 163 degrees east and 86 degrees north okay now to make use of this i've gone ahead and made a very simple compass graphic which has two components there's this little aeroplane indicator which should always point in the direction that the player is currently flying and then there's an outer ring showing the cardinal directions which it's been around to face wherever north is then i've been writing this bit of code for actually controlling the compass and this starts by calculating the northerly direction using that function we created earlier and it then gets the angle between that and the current direction of the player then if the camera is in the top down view we need to account for however it happens to be rotated and at last we can set the rotations of the two compass components here let's take a look at this in the game so as we can see in the bottom right here we're currently flying roughly eastward so let me swing over to the north and the compass should rotate to reflect that i also want to test this quickly in the drop down view so i'll turn around a bit to make sure that's working and i'll try turning the camera as well i think this is a fairly intuitive setup but let me know if you think it should behave differently anyway that's very useful if you've got a bit turned around but it doesn't help you much if you're trying to fly to some country and you have no clue where it is so to help with that let's add a map now the simplest to implement would be a two-dimensional map like this but it always bothers me a little bit how distorted these maps are i've been wondering recently say we've placed two coordinates somewhere on this map what exactly would the shortest path between them actually look like i hope you don't mind getting sidetracked for a moment here because i'd like to play around with this for a minute so i've started out by converting the two coordinates to points on a sphere and then over here we have two quaternions representing rotations that are sort of aiming at those two points and you can see some of the maths from earlier cropping up again because those rotations also need to be aligned properly with the shortest path then i've just used this spherical linear encapsulation function slap to its friends to rotate from the start point to the end point in tiny increments and each point along the way gets converted back to a latitude and longitude and added to our 2d path finally that path gets sent off to be drawn to the screen in green so i'm just going to mess around with this a little we can see that along the equator the shortest path looks like a straight line although of course if the points get too far apart then it becomes shorter to just go around the other way but now if i move one of these points off from the equator we can see the shortest path quickly starts to curve quite dramatically so if we use this for navigation i guess we'd probably end up flying a lot further than we needed to this particular map projection by the way is called an equirectangular projection and there's no shortage of alternatives with different trade-offs this projection for example prioritizes keeping the area of shapes intact as does this one whereas this projection tries to keep points at the correct distance and direction from the center i find these different map projections quite fascinating to look at and i'd love to explore them in more depth at some point but i think it might be best to give the player a little globe to use for navigation instead i guess i could use my old chest version of the world as a starting point for this there are some problems though for example if we look at antarctica it's clearly going to need some care and attention if i turn on the wireframe view here we can see the mesh looks absolutely awful and i think a big part of the issue is that the triangulation process happens in two dimensions so it's getting run when the antarctic looks like this which is a very different shape from how it ends up on the sphere so i've been working on a little test over here to try to get around this issue this is a shader that takes the latitude and longitude of each pixel it wants to draw and converts it to a point on a sphere it then rotates that point around the horizontal and vertical axis by some amount that we can specify then finally it converts that rotated point back into two dimensions and displays whatever is in the 2d world map at that coordinate so let's try this out here's our map and our goal is to use our two angles here to get antarctica to the center so that it's as undistorted as possible i'll try rotating around the vertical axis first but that doesn't seem to be terribly helpful so let me try the horizontal axis instead and this looks much more interesting we can see antarctica has split in half and is climbing up the sides of the screen so let me rotate it a bit more and now we can see it's starting to reform at the top with everything upside down and at last we've rotated it all the way around i'll bring it back up to the center here where it looks very close to its true shape just for fun i want to see what changing the other angle would do now ah it spins around alright so i've written a bit of code now that takes whichever region we want to triangulate for example let me input greenland over here and it calculates this bounding box from the polygon points in order to find this center point and you can see the coordinates of that over here then if i tell it to reproject it it will just do whatever rotations it needs to put the center at zero let's give it a try ah that's not good i think i might have got a degrees to radians conversion back to front somewhere in one moment okay i fixed some things so i hope it's slightly less nauseating this time that's more like it so the idea is that before triangulating each polygon we'll automatically run this process on the polygons points so that the shape it's working with is as undistorted as possible this really isn't all that important for most places as a random example if i run this on australia you can see it pretty much stays the exact same shape but still it helps quite a lot in a few cases and doesn't do any harm otherwise so i finished up the code for all that and here's the result as you can see the triangulation is much nicer now which makes me happy and i also made it that we have some control over the resolution [music] here's the rest of the world and i've stylized this a bit with the height representing the average elevation of each country and the colors representing the country's average yearly temperature although there's some random variation added to the color as well just so that neighbouring countries are a bit easier to distinguish from one another i've also been writing some simple code for doing things like rotating the glove around with the mouse and highlighting the country your mouse is over so here's how it currently looks in the game oh and you can see there's a little version of the player here as well with a trail to show your recent flight path anyway i'll try hovering over some countries and we can see they're getting highlighted properly and we can rotate around as well so i think that's quite nice [music] one last thing i'd like to add to the map that i've just been working on here is an arc that gets drawn from where your last package landed to the city where it was supposed to land to help one learn from one's mistakes i actually ended up over here using some of the code from that little experiment we did with the shortest path on a 2d map so it's nice that that diversion ended up being somewhat helpful after all anyway we can now specify two points anywhere on the group and it will draw for us this little dotted line between them [music] all right let's go back to the actual game terrain for a moment because it's been bothering me a bit this mesh is split up not by country but just into these sort of squarish chunks there's not even any separation between land and ocean which means i have a single shader that has to handle both and it's a bit of a pain to work with this also causes some rather unsightly transitions between land and water particularly in places with steep terrain there's also the issue of country outlines getting very distorted on steep terrain which i'd really like to fix as well i think the easiest way to improve all of this is going to be to borrow this one mesh per country approach from the map this might sacrifice a bit of rendering performance but it shouldn't be too bad so i'm going to spend the next few hours working on that [music] okay i ended up rewriting the whole terrain system from scratch but i am a lot happier with it now as you can see we have one mesh per country now and some countries were a bit trickier than others in that they needed to have holes cut out of them but thanks again to that triangle library i mentioned last episode it wasn't too hard to get working [music] the ocean generation is completely separate now so i'll quickly run that here i've spent quite some time untangling the giant heap of spaghetti that was my combined terrain and ocean shader and they're a lot more pleasant to work with now [music] there was one issue that arose from this though which you can see if i turn the terrain mesh back on and move the view over to somewhere like here for example you can see some of these triangles along the coast are at the same height as the ocean and so they're constantly fighting to be rendered on top of one another after a bit of research though i came across this little command that i could add to the ocean shader which just biases the depth a tiny bit so that it's consistently rendered below the terrain in these cases finally the country outlines these used to be rendered with an enormous texture inside the terrain shader which with the new setup it was easy to generate outline meshes instead which follow the shape of the terrain along the country borders so here's again how messy it was looking before and you can see the new version is looking a lot nicer [music] another thing that i'd like to tweak is the city lights that i added in last episode there was some feedback about them looking a bit too scattered which i think is a really important point since they're supposed to help guide the player at night not just be a confusing mess so just to recall how this works quickly we have this giant texture map of city lights but drawing that directly onto the terrain didn't look very good so instead we ended up writing this bit of code which starts by picking a bunch of random points it then keeps track of which point corresponds to the highest brightness in the light map and that becomes the location for a new city light which is drawn as a little sphere and this gets run for however many lights we want so to make the lights be more tightly clustered we really just need to crank up the number of random spawn points that each light considers strangely when i was showing this last episode i had a value of 100 here but it seems i somehow ended up with a value of 10 instead i sometimes suspect my computer changes things when i'm not looking just to mess with me anyway let's visualize how this looks in the world with different iteration counts so i can try use a better value this time here's the result with zero iterations which is not very illuminating then here's 10 iterations which is how it currently is in the game i'll now just let it run through a range of values so we can see how it changes i think this is looking a lot better in the sense that there's a more distinct indication of where major cities are so once again here's how it was looking at 10 iterations and here's our new result with 200 iterations i thought it would also be nice if the terrain would actually brighten up and glow a bit around the lights so in the terrain shader i have added a line to sample a very low resolution version of the light lightmap texture which looks like this then we can calculate a grayscale version of the terrain map and multiply that with the light map and also with some glow color so here are our lights and let's play with the glow color over here so we could make this green for example which is kind of spooky looking which i guess something orangey would be more appropriate hopefully that little detail will help to sell the effect a bit better now something else i added last episode that could do with a little more love is the stars these are rendered as a bunch of camera facing quads that follow the camera around and obviously get drawn behind everything else here's how they look in the game view at the moment and maybe i should scale them up a bit so we can see them better they're all just plain white at the moment but in the data set i'm using each star has a color index basically hotter stars appear more blue and cooler ones more red so i'll apply a little gradient to them based on that color index and i don't know how well this will come across in the video once they're shrunk back down to their original size but i definitely think this subtle coloration gives them a nice feeling of depth okay i'd like to try one last thing for improving the nighttime look and that's with this bit of code here in the terrain and ocean shader which looks at the dot product between the view direction and the surface normal to compute some simple rim lighting so i'll change the color of that to white so that we can see it clearly and then increasing the power makes the effect stronger along the rim of the terrain a number of people have mentioned that flying at night can be a bit annoying and disorienting so i'm hoping that if i change this to a sort of dark purpley colour it will just help make the terrain stand out a little better in the dark [music] we could even go a step further though what if you're not any old package delivery pilot but rather one who yields the power to control the passage of time itself so with the press of a button we can now fast forward time to be night or day as we please and here comes the sun alright now what this game is currently missing the most i'm sure you'll agree is hot air balloons so under the guidance of this very helpful blender tutorial i set about making my own little hot air balloon model [music] and here's what i ended up with my plan is that these balloons will hold packages and to collect them you just fly right into the balloons it makes perfect sense don't worry about it now i've done some uv unwrapping over here because i think it'd be a fun detail if the balloons actually displayed the flag of the country that they're from so i've imported hundreds of little flag textures and i guess i'll test this out first with my home flag i think it looks pretty good of course there'll unfortunately be a seam around here since it's not a symmetrical flag but it's at least lined up with one of the seams in the balloon so it doesn't look too bad let's try something with a more intricate design like maybe this one over here i don't actually know what country this is but i think the ship looks very cool and i don't think it's too distorted by the shape of the balloon which was my main concern i also want to try one quickly that has some writing on it just to make sure that you can actually read it properly i think these have been coming out pretty well if any of you watching are flag enthusiasts by the way i'd be curious to know what your favorite flag is i'm having a hard time picking a favorite myself but i've been enjoying looking at all the different designs here i've also been spending a bit of time making this fire effect for the balloons burner i've never really got the hang of making particle effects look good so that's why it looks like this but it's better than nothing at least okay i've integrated these into the game now so if i press play we should see some balloons popping up i'll head over to this nearest balloon and just fly through it to grab the package at the top you can see the address has now changed to oslo which is where we need to try drop this off i think that's right about here perhaps i've also added this backward facing camera so we can get a better look at how we did [music] now you might have noticed we're moving pretty fast i think i'm doing about 350 kilometers per second at the moment which is quite impressive for a little plane like this so these ridiculous speeds are nice for traversing long distances of course but frustrating for precision aiming if you happen to know exactly where the city is you're delivering to for example i think santiago is right over here okay not quite apparently but even if i had known precisely where it is it still would have been tricky to land the package exactly on target at this speed so i'd like to let the player slow down a okay so i've gone and made this speed indicator thingy and i'm not particularly thrilled with the design but we have a little needle here to show where you are between your minimum and maximum speed and also a ring that fills up over here called the boost meter i thought boost might be a nice way to reward accurate deliveries allowing you to travel even faster for a little while so let's try this out right now i'm flying at top speed but i can slow us all the way down until we're crawling along at barely a hundred kilometers per second that should help a lot with making precise deliveries but now let's try out the boost the boost meter is sadly empty at the moment but i can just cheat and press a button to fill it up a bit and now we can zoom across the ocean to antarctica in no time at all i've become slightly sidetracked recently with a little experiment i wanted to try i came across this project called openstreetmap where anyone can help map out roads and buildings and so on from satellite imagery then i found this blender add-on which is able to take that data and turn it into simple meshes so here's a little section of paris that i asked it to generate as a quick test pretty cool the only things i've done by hand here is import a little eiffel tower model create meshes from the road curves add some little bridges and make a mesh for the river i then brought this into unity and wrote a simple shader to map a building texture to the models along with a random rooftop color it's extremely crude as you can see but this is just a quick test after all of course i then made it so we can fly around and explore the city well this tiny portion of it anyway it does take quite long to download and generate all of this understandably so i didn't want to go too wild with the scale i'm struggling to think of a way this could really fit into the project but maybe it could work as a separate game mode one very idea i had was you could be a sky writer and you could get requests from people around the world to write a message over their city i thought that might be an interesting way to learn a few different words or phrases in other languages while also getting an aerial glimpse of what different cities around the world look like one tricky aspect to this would be evaluating how well someone managed to write the given text i'm also not sure it would be that fun to do over and over i guess there'd need to be other challenges you could do as well like finding and photographing landmarks perhaps i'd be interested to hear your thoughts on whether this idea has any potential or what else if anything i could do with this little experiment i am aware by the way that this text wouldn't be the right way around for anyone looking up at it from the ground but i find it tricky enough writing somewhat legibly without having to invert all the letters so that's why my skywriting services come at a discount all right back to the present project though i've just been making some finishing touches like this little main menu screen for example this actually shows our starting position in the background so if i exit here and press play again you can see we're in a different spot there's still plenty i want to do here like adding more graphic settings for low-end devices and allowing controls to be rebound and so on but the skeleton is in place at least so let's go back and press play and we're off [music] so this is essentially all there is to it at the moment it's not a very elaborate game but if you'd like to give it a try there's a link in the description and i'd love to hear your thoughts on it also if you'd like to actually open the project up and make your own tweaks or changes i'll be linking the project source in the description as well now the main intent of this game is just to be a simple and hopefully relaxing experience that maybe teaches you some geography along the way but in case anyone wants to take it a bit more competitively i've added a timer in the bottom left and once that runs out you'll get a little screen showing some fun statistics like how far you've flown and the distance of your best and worse deliveries then all the way at the bottom there's also a score along with your previous personal best so if you wanted to try and beat that you could exit and start again or you can just keep on playing in endless mode [music] all right that's everything i have to share for now i'm not sure yet what i'll be working on next whether it'll be more of this project or something new but i hope you've enjoyed following along with the process and until next time cheers [music] you